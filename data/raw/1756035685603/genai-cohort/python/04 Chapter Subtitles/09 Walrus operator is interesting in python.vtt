WEBVTT

1
00:00:00.960 --> 00:00:02.320
All right, so in the last video

2
00:00:02.320 --> 00:00:03.640
I said that we are done

3
00:00:03.640 --> 00:00:05.080
with the loop section, and that

4
00:00:05.080 --> 00:00:06.640
is absolutely correct, we are

5
00:00:06.640 --> 00:00:08.160
done with the loop section.

6
00:00:08.160 --> 00:00:10.600
But I have these two topics which

7
00:00:10.600 --> 00:00:11.840
I want to discuss and I didn't

8
00:00:11.840 --> 00:00:13.960
want to create a fresh new section

9
00:00:13.960 --> 00:00:15.680
just for the two topics, so

10
00:00:15.680 --> 00:00:17.600
I thought it would be bad idea.

11
00:00:18.260 --> 00:00:19.680
So instead I will just introduce

12
00:00:19.680 --> 00:00:21.120
them in the loops itself.

13
00:00:21.120 --> 00:00:22.400
It has nothing to do

14
00:00:22.400 --> 00:00:24.560
in the context of the loop itself.

15
00:00:24.560 --> 00:00:26.400
These are standalone operator,

16
00:00:27.490 --> 00:00:28.690
kind of newly introduced

17
00:00:28.690 --> 00:00:29.690
in the world of Python.

18
00:00:29.690 --> 00:00:31.610
But now we cannot call them as new.

19
00:00:31.610 --> 00:00:32.930
They are pretty much here

20
00:00:32.930 --> 00:00:34.290
for a really long time.

21
00:00:34.290 --> 00:00:35.330
The first one we are going

22
00:00:35.330 --> 00:00:36.690
to talk about is the Walrus.

23
00:00:36.690 --> 00:00:37.970
The second is not even operator,

24
00:00:37.970 --> 00:00:39.730
just the style of writing the code,

25
00:00:39.730 --> 00:00:41.410
especially the Python code.

26
00:00:41.410 --> 00:00:43.490
So the walrus operator, you will

27
00:00:43.490 --> 00:00:44.770
see this quite a lot these days.

28
00:00:44.770 --> 00:00:46.050
It looks like the colon

29
00:00:46.050 --> 00:00:47.410
and an equal sign.

30
00:00:47.410 --> 00:00:49.130
I will give you the entire

31
00:00:49.130 --> 00:00:51.050
history workflow as well as some

32
00:00:51.050 --> 00:00:52.210
of the examples of it.

33
00:00:52.210 --> 00:00:53.290
But first of all, let's

34
00:00:53.290 --> 00:00:54.730
understand, there are certain

35
00:00:54.730 --> 00:00:56.350
things in the Python.

36
00:00:56.350 --> 00:00:59.190
For example, in Python an assignment

37
00:00:59.190 --> 00:01:03.310
like x equals 5, is a statement.

38
00:01:03.310 --> 00:01:04.470
Remember this is a statement,

39
00:01:04.470 --> 00:01:05.950
it sets something,

40
00:01:05.950 --> 00:01:07.870
it doesn't return a value.

41
00:01:07.870 --> 00:01:10.430
An expression on the other hand is

42
00:01:10.430 --> 00:01:12.269
something that returns a value.

43
00:01:12.269 --> 00:01:14.750
For example, if I go ahead and say

44
00:01:14.750 --> 00:01:16.510
three plus three,

45
00:01:16.510 --> 00:01:18.790
this is an expression, so this

46
00:01:18.790 --> 00:01:19.950
actually returns a value.

47
00:01:19.950 --> 00:01:20.910
This is going to return

48
00:01:20.910 --> 00:01:22.190
us the value six.

49
00:01:22.190 --> 00:01:23.550
So, so whoever returns us

50
00:01:23.550 --> 00:01:25.430
a value which consider

51
00:01:25.430 --> 00:01:26.470
that as an expression.

52
00:01:26.470 --> 00:01:27.070
So this is going

53
00:01:27.070 --> 00:01:28.310
to be the output here.

54
00:01:28.310 --> 00:01:29.550
We are just assigning the value,

55
00:01:29.550 --> 00:01:30.710
so it is just a statement.

56
00:01:31.270 --> 00:01:33.110
So always remember that this

57
00:01:33.110 --> 00:01:34.390
will serve us a little

58
00:01:34.390 --> 00:01:35.910
bit purpose in this here.

59
00:01:35.910 --> 00:01:37.750
And now for the Walrus operator

60
00:01:37.750 --> 00:01:38.910
I'll take you on to the code

61
00:01:38.910 --> 00:01:40.470
part because that is much easier

62
00:01:40.470 --> 00:01:41.790
than just discussing it.

63
00:01:41.790 --> 00:01:43.270
Up here I'll create the new

64
00:01:43.270 --> 00:01:44.310
file in the loop itself.

65
00:01:44.310 --> 00:01:46.550
I'll call this one as 09 and we'll

66
00:01:46.550 --> 00:01:49.000
call this one as Walrus Py.

67
00:01:49.000 --> 00:01:51.680
Okay, first of all, let's see

68
00:01:51.680 --> 00:01:53.200
that what happens when we

69
00:01:53.200 --> 00:01:55.000
don't use the walrus again?

70
00:01:55.000 --> 00:01:55.920
Nothing happens, you

71
00:01:55.920 --> 00:01:57.310
just write your code.

72
00:01:57.310 --> 00:01:58.280
Just like that.

73
00:01:58.280 --> 00:01:59.600
For example, let's just say we

74
00:01:59.600 --> 00:02:02.360
have a value 13, it's just a number

75
00:02:02.360 --> 00:02:04.000
and we also want to have

76
00:02:04.000 --> 00:02:06.680
a remainder, so remainder.

77
00:02:07.960 --> 00:02:09.240
So we can pretty much easily

78
00:02:09.240 --> 00:02:11.840
see that if the value is modulus

79
00:02:11.840 --> 00:02:14.360
by 5, we get the remainder,

80
00:02:14.360 --> 00:02:15.800
whatever the value is.

81
00:02:15.800 --> 00:02:16.760
And let's print out

82
00:02:16.760 --> 00:02:17.560
a simple statement.

83
00:02:17.560 --> 00:02:19.320
If we have a remainder,

84
00:02:19.320 --> 00:02:20.560
we want to print this up.

85
00:02:20.560 --> 00:02:22.280
So we'll just go ahead and say print

86
00:02:22.280 --> 00:02:24.000
Just like this, a formatted value

87
00:02:24.000 --> 00:02:26.640
and we'll say if we have a remainder

88
00:02:26.640 --> 00:02:31.120
that means not divisible, obviously

89
00:02:31.120 --> 00:02:33.320
it's not completely divisible.

90
00:02:33.320 --> 00:02:35.960
And we'll say remainder is.

91
00:02:35.960 --> 00:02:37.720
And whatever the value of

92
00:02:37.720 --> 00:02:40.160
remainder that we get, pretty

93
00:02:40.160 --> 00:02:41.520
simple program, no big deal.

94
00:02:41.520 --> 00:02:42.840
I'll comment out a lot of code

95
00:02:42.840 --> 00:02:43.800
in this entire program.

96
00:02:43.800 --> 00:02:45.720
So this is be aware of that part.

97
00:02:45.720 --> 00:02:47.800
I'll go ahead and run the python

98
00:02:47.800 --> 00:02:49.560
with the 09 and we can see not

99
00:02:49.560 --> 00:02:51.040
divisible, the remainder is 3.

100
00:02:51.040 --> 00:02:52.600
Obviously when you divide 13

101
00:02:52.600 --> 00:02:55.080
by 5 you get 3 as a remainder.

102
00:02:55.080 --> 00:02:56.080
Now how can you write

103
00:02:56.080 --> 00:02:58.320
the exact same program when we

104
00:02:58.320 --> 00:02:59.960
have the Walrus operator?

105
00:02:59.960 --> 00:03:02.600
Let's convert this exact same program

106
00:03:02.600 --> 00:03:04.160
and again this is an easy way

107
00:03:04.160 --> 00:03:06.890
select all of them, press control/uh

108
00:03:06.890 --> 00:03:08.760
or command/on a Mac and it

109
00:03:08.760 --> 00:03:10.200
will just comment out everything.

110
00:03:10.870 --> 00:03:12.710
Let's rewrite this exact same program

111
00:03:12.710 --> 00:03:14.550
so we have a value which is 13.

112
00:03:15.670 --> 00:03:17.470
Now previously we calculated

113
00:03:17.470 --> 00:03:19.590
the remainder in a separate line.

114
00:03:19.590 --> 00:03:21.030
Then we tested out remainder.

115
00:03:21.030 --> 00:03:22.590
But here what we can do is I can

116
00:03:22.590 --> 00:03:24.230
just put out this if statement

117
00:03:24.230 --> 00:03:25.750
and then I use a parenthesis

118
00:03:25.750 --> 00:03:27.390
because I'm evaluating something.

119
00:03:27.390 --> 00:03:28.950
An expression will be here.

120
00:03:28.950 --> 00:03:30.270
So I'll just use a variable

121
00:03:30.270 --> 00:03:31.910
directly that says remainder.

122
00:03:31.910 --> 00:03:33.150
And as you can see we cannot

123
00:03:33.150 --> 00:03:34.870
use it, it's giving us error.

124
00:03:34.870 --> 00:03:37.030
But with the help of Walrus operator

125
00:03:37.030 --> 00:03:38.710
I can just use it just like this

126
00:03:39.400 --> 00:03:42.960
and I can say value simply moduled

127
00:03:42.960 --> 00:03:45.680
by 5 and then I can just keep on

128
00:03:45.680 --> 00:03:48.240
writing my code and I can actually

129
00:03:48.240 --> 00:03:50.400
go ahead and use this exact same

130
00:03:50.400 --> 00:03:52.760
line just right here and uncomment

131
00:03:52.760 --> 00:03:53.080
that.

132
00:03:54.280 --> 00:03:55.320
And There we go.

133
00:03:56.600 --> 00:03:58.320
So we can just, we see that

134
00:03:58.320 --> 00:04:00.080
exact same program can be

135
00:04:00.080 --> 00:04:01.320
shrinken down a little bit.

136
00:04:01.320 --> 00:04:03.160
And what we saw that we first

137
00:04:03.160 --> 00:04:04.920
calculated the remainder We found

138
00:04:04.920 --> 00:04:06.560
this expression's value and stored

139
00:04:06.560 --> 00:04:07.480
that into a variable

140
00:04:08.140 --> 00:04:10.060
and then we evaluated the variable.

141
00:04:10.060 --> 00:04:11.220
This all can be done

142
00:04:11.220 --> 00:04:12.380
just right up here.

143
00:04:12.380 --> 00:04:13.620
So this is going to be

144
00:04:13.620 --> 00:04:15.100
an exact expression value?

145
00:04:15.910 --> 00:04:17.500
Yes, this is little bit

146
00:04:17.500 --> 00:04:18.779
shorter version of it.

147
00:04:18.779 --> 00:04:19.660
It works fine.

148
00:04:19.660 --> 00:04:21.899
Let me show you by doing that also.

149
00:04:21.899 --> 00:04:22.980
So if I clean this, run

150
00:04:22.980 --> 00:04:24.059
this again, it says not

151
00:04:24.059 --> 00:04:25.740
divisible, remainder is 3.

152
00:04:25.740 --> 00:04:26.980
So yes, this is a pretty

153
00:04:26.980 --> 00:04:28.620
interesting operator.

154
00:04:28.620 --> 00:04:32.020
Now not only that, through this

155
00:04:32.020 --> 00:04:33.850
operator you can actually work

156
00:04:33.850 --> 00:04:35.370
in a pretty interesting ways.

157
00:04:35.370 --> 00:04:36.890
It's little hard to digest that.

158
00:04:36.890 --> 00:04:39.170
Okay, and by the way, what

159
00:04:39.170 --> 00:04:40.890
happens if you go ahead and just

160
00:04:40.890 --> 00:04:42.450
don't use walrus here?

161
00:04:42.450 --> 00:04:44.010
If I don't use a walrus?

162
00:04:44.010 --> 00:04:44.650
You can see we have

163
00:04:44.650 --> 00:04:45.770
whole syntax error.

164
00:04:45.770 --> 00:04:47.410
Let's see what syntax it says.

165
00:04:47.410 --> 00:04:49.649
It says this was not closed.

166
00:04:49.649 --> 00:04:50.890
Yes, we are closing this.

167
00:04:50.890 --> 00:04:52.050
No problem there.

168
00:04:52.050 --> 00:04:53.170
And you're going to see

169
00:04:53.170 --> 00:04:54.330
the errors are not easy.

170
00:04:54.330 --> 00:04:56.410
Even if I remove this kind of

171
00:04:56.410 --> 00:04:58.210
a thing, you're going to see this is

172
00:04:58.210 --> 00:04:59.970
still not that remainder is not

173
00:04:59.970 --> 00:05:01.810
defined and you cannot actually go

174
00:05:01.810 --> 00:05:03.330
ahead and have the value here.

175
00:05:03.330 --> 00:05:05.110
What are you trying to do?

176
00:05:05.110 --> 00:05:06.230
This is not an allowed

177
00:05:06.230 --> 00:05:07.150
syntax, but with the help

178
00:05:07.150 --> 00:05:09.190
of Walrus Operator, you,

179
00:05:09.190 --> 00:05:10.470
do all the things at once.

180
00:05:10.470 --> 00:05:11.750
Let's just go ahead and read

181
00:05:11.750 --> 00:05:13.830
a little bit of the docs as well.

182
00:05:13.830 --> 00:05:15.510
So I'll just go ahead and move

183
00:05:15.510 --> 00:05:17.070
at the very top and hopefully

184
00:05:17.070 --> 00:05:18.790
I'll be able to search for it.

185
00:05:19.550 --> 00:05:21.190
Can we go ahead and search for it?

186
00:05:21.910 --> 00:05:22.710
Walrus?

187
00:05:23.430 --> 00:05:23.950
Nope.

188
00:05:23.950 --> 00:05:25.030
I guess Google would be

189
00:05:25.030 --> 00:05:26.470
a good one to search for it.

190
00:05:27.270 --> 00:05:29.390
So let's just say walrus and the

191
00:05:29.390 --> 00:05:31.600
reason why I am taking you onto the

192
00:05:31.600 --> 00:05:33.720
documentation website so that you

193
00:05:33.720 --> 00:05:36.480
develop a small habit of seeing what

194
00:05:36.480 --> 00:05:37.920
happens when you study the real

195
00:05:37.920 --> 00:05:39.400
documentation or from the original

196
00:05:39.400 --> 00:05:40.440
documentation.

197
00:05:40.440 --> 00:05:42.000
So it recently came in the Python

198
00:05:42.000 --> 00:05:44.440
3.8 and you're going to see, this

199
00:05:44.440 --> 00:05:47.840
is a walrus, the eyes and the tusk

200
00:05:47.840 --> 00:05:49.160
of a walrus, just like this.

201
00:05:49.800 --> 00:05:51.640
So they have this whole

202
00:05:51.640 --> 00:05:52.920
thing available to us

203
00:05:52.920 --> 00:05:54.200
and you get the idea.

204
00:05:54.200 --> 00:05:55.920
So pretty simple and pretty easy

205
00:05:55.920 --> 00:05:58.440
to work on with and the part

206
00:05:58.440 --> 00:05:59.840
is pretty clear, they mention

207
00:05:59.840 --> 00:06:00.880
it pretty nice and easily.

208
00:06:00.880 --> 00:06:02.320
What we just saw there is

209
00:06:02.320 --> 00:06:04.200
a new syntax that assigns the value

210
00:06:04.200 --> 00:06:05.440
to a variable as a part

211
00:06:05.440 --> 00:06:06.760
of larger expression.

212
00:06:06.760 --> 00:06:08.000
Remember, that's exactly why

213
00:06:08.000 --> 00:06:09.400
I told you this is a statement,

214
00:06:09.400 --> 00:06:10.920
this is an expression.

215
00:06:10.920 --> 00:06:12.720
So notice here, this whole thing is

216
00:06:12.720 --> 00:06:15.000
an expression, not this whole,

217
00:06:15.000 --> 00:06:16.600
this whole thing is an expression.

218
00:06:16.600 --> 00:06:18.240
And this will deliver the value

219
00:06:18.240 --> 00:06:19.160
here in the remainder.

220
00:06:19.160 --> 00:06:20.480
But the moment you actually go ahead

221
00:06:20.480 --> 00:06:22.520
and use a walrus, then you actually

222
00:06:23.270 --> 00:06:25.270
allows it to be used just like that.

223
00:06:26.070 --> 00:06:27.990
All right, so as you can see,

224
00:06:27.990 --> 00:06:29.350
it not only gets that,

225
00:06:29.350 --> 00:06:31.030
but now it gets a value.

226
00:06:31.030 --> 00:06:32.310
So pretty interesting.

227
00:06:32.310 --> 00:06:33.310
And I'll show you some

228
00:06:33.310 --> 00:06:34.790
of the other use cases as well

229
00:06:34.790 --> 00:06:36.430
and you will have fun with this.

230
00:06:36.430 --> 00:06:37.150
So, all right, we'll

231
00:06:37.150 --> 00:06:38.470
keep it as it is.

232
00:06:38.470 --> 00:06:39.870
Let me go ahead and create

233
00:06:39.870 --> 00:06:41.430
another example.

234
00:06:41.430 --> 00:06:44.470
I'll say available sizes.

235
00:06:44.470 --> 00:06:46.390
So you have some of these sizes

236
00:06:46.390 --> 00:06:48.910
available to you, and the first one

237
00:06:48.910 --> 00:06:52.260
is small, then we have medium,

238
00:06:52.260 --> 00:06:55.460
of course, and then we have large.

239
00:06:55.460 --> 00:06:58.100
So these are sizes of T cups maybe.

240
00:06:58.100 --> 00:06:59.900
And then we want to check whether

241
00:06:59.900 --> 00:07:01.500
these are available or not.

242
00:07:01.500 --> 00:07:03.700
And user is requesting this.

243
00:07:03.700 --> 00:07:04.940
So previously what we do, we

244
00:07:04.940 --> 00:07:06.980
create an input variable or

245
00:07:06.980 --> 00:07:08.420
some kind of a way to take

246
00:07:08.420 --> 00:07:10.020
the user input just like that.

247
00:07:10.020 --> 00:07:11.420
But with the help of Walrus

248
00:07:11.420 --> 00:07:12.460
Operator we can actually Go

249
00:07:12.460 --> 00:07:14.020
ahead and shrink this all.

250
00:07:14.020 --> 00:07:15.260
So we can go ahead and call

251
00:07:15.260 --> 00:07:16.980
this one as requested size

252
00:07:16.980 --> 00:07:18.860
or requested size by user.

253
00:07:18.860 --> 00:07:19.580
So I'll just go ahead

254
00:07:19.580 --> 00:07:21.090
and say request size.

255
00:07:21.090 --> 00:07:23.170
And I can use walrus operator here

256
00:07:23.170 --> 00:07:24.570
and use an expression

257
00:07:24.570 --> 00:07:25.730
just like input.

258
00:07:25.730 --> 00:07:27.330
I will take the user input just

259
00:07:27.330 --> 00:07:29.810
here and I will say enter your

260
00:07:32.530 --> 00:07:37.170
chai cup size just like this.

261
00:07:37.170 --> 00:07:39.050
And on top of this, once we have

262
00:07:39.050 --> 00:07:40.890
this requested size, I can actually

263
00:07:40.890 --> 00:07:42.570
go ahead because this whole

264
00:07:42.570 --> 00:07:44.130
thing is going to be evaluated.

265
00:07:44.130 --> 00:07:45.130
Let me just go ahead

266
00:07:45.130 --> 00:07:45.970
and get more space.

267
00:07:46.620 --> 00:07:49.380
And now just here I can use in which

268
00:07:49.380 --> 00:07:53.180
is in checker of available sizes.

269
00:07:53.180 --> 00:07:54.980
And based on this I can just

270
00:07:54.980 --> 00:07:56.460
go ahead and print it,

271
00:07:56.460 --> 00:07:57.500
whatever I want to print.

272
00:07:57.500 --> 00:07:58.900
So for example, I want to print

273
00:07:58.900 --> 00:08:00.780
like this and I will say

274
00:08:01.660 --> 00:08:06.860
serving requested size chai.

275
00:08:07.660 --> 00:08:08.460
That's nice.

276
00:08:08.460 --> 00:08:09.780
And surely I can go ahead

277
00:08:09.780 --> 00:08:10.940
and use an else operator.

278
00:08:10.940 --> 00:08:12.830
If somebody request us something

279
00:08:12.830 --> 00:08:13.950
other than this, we can

280
00:08:13.950 --> 00:08:15.310
just go ahead and say, hey, I want

281
00:08:15.310 --> 00:08:17.510
to print just like this.

282
00:08:17.510 --> 00:08:20.210
And I will say size is unavailable.

283
00:08:23.190 --> 00:08:26.350
And I'll still just want to see that

284
00:08:26.350 --> 00:08:28.470
whether I get the access of this,

285
00:08:28.470 --> 00:08:30.150
requested size here or not.

286
00:08:30.150 --> 00:08:30.950
Obviously I get.

287
00:08:30.950 --> 00:08:33.110
But I just wanted to print this out.

288
00:08:33.110 --> 00:08:34.950
So let's just go ahead and run this.

289
00:08:34.950 --> 00:08:36.429
And it's a pretty interesting one.

290
00:08:36.429 --> 00:08:37.429
Let's go ahead and run this.

291
00:08:37.429 --> 00:08:38.669
It says not divisible

292
00:08:38.669 --> 00:08:40.110
chai is remaining three.

293
00:08:40.110 --> 00:08:41.419
That's from above.

294
00:08:41.419 --> 00:08:43.740
Let's just say I get a chai of test.

295
00:08:43.740 --> 00:08:44.940
Give me a tester.

296
00:08:45.500 --> 00:08:46.900
I enter, it says size

297
00:08:46.900 --> 00:08:48.340
unavailable tester.

298
00:08:48.340 --> 00:08:50.580
Let's run it one more time and let's

299
00:08:50.580 --> 00:08:52.420
just say I ask for a small

300
00:08:52.420 --> 00:08:54.460
chai and say serving small chai.

301
00:08:54.460 --> 00:08:55.580
So you can see it's

302
00:08:55.580 --> 00:08:56.900
a pretty interesting way

303
00:08:56.900 --> 00:08:58.780
of writing the code in itself.

304
00:08:59.340 --> 00:09:00.820
I wouldn't say that it's super

305
00:09:00.820 --> 00:09:02.860
easy to work on with, but hey,

306
00:09:02.860 --> 00:09:05.300
it's a pretty fun way of doing

307
00:09:05.300 --> 00:09:06.540
the things just like that.

308
00:09:07.270 --> 00:09:09.430
So pretty fun to use walrus operator.

309
00:09:10.390 --> 00:09:12.230
Let's go ahead and finally write,

310
00:09:12.790 --> 00:09:14.030
one more interesting

311
00:09:14.030 --> 00:09:15.790
aspect of this and it's going

312
00:09:15.790 --> 00:09:16.950
to be a pretty fun one.

313
00:09:16.950 --> 00:09:18.670
So let's just write one more

314
00:09:18.670 --> 00:09:20.790
of the piece of code for this one.

315
00:09:20.790 --> 00:09:22.320
Let's just say we have flavors,

316
00:09:23.190 --> 00:09:24.630
in our shop we have a lot

317
00:09:24.630 --> 00:09:26.470
of flavors available to us.

318
00:09:26.470 --> 00:09:30.230
One is masala, a lot of teas that

319
00:09:30.230 --> 00:09:32.070
we serve throughout the course.

320
00:09:32.070 --> 00:09:33.510
You might have noticed the theme

321
00:09:33.510 --> 00:09:35.900
that we use, for the chai.

322
00:09:35.900 --> 00:09:38.020
So we have masala, we have ginger,

323
00:09:38.660 --> 00:09:40.500
we have lemon,

324
00:09:40.500 --> 00:09:43.700
my favorite one, and mint as well.

325
00:09:44.500 --> 00:09:46.340
So what I want to do now is

326
00:09:46.340 --> 00:09:47.540
based on the Flavors.

327
00:09:47.540 --> 00:09:48.740
First of all, I want to give

328
00:09:48.740 --> 00:09:49.740
this message to the user.

329
00:09:49.740 --> 00:09:50.820
Hey, these are the available

330
00:09:50.820 --> 00:09:53.060
flavors that we have in front of us.

331
00:09:53.060 --> 00:09:54.900
So I'll just use a classic one

332
00:09:55.780 --> 00:09:57.540
and I will say away.

333
00:09:57.540 --> 00:09:58.180
Label.

334
00:10:00.350 --> 00:10:00.830
Flavors.

335
00:10:02.190 --> 00:10:02.990
Flavors.

336
00:10:04.110 --> 00:10:05.790
Did I wrote it correct?

337
00:10:05.790 --> 00:10:06.830
Absolutely not.

338
00:10:07.390 --> 00:10:09.390
So flavors.

339
00:10:10.590 --> 00:10:11.790
And I've been writing

340
00:10:11.790 --> 00:10:13.790
this all along wrong.

341
00:10:13.790 --> 00:10:15.390
Excuse me for that.

342
00:10:15.390 --> 00:10:16.590
So available flavors.

343
00:10:16.590 --> 00:10:18.110
I can just put up a space

344
00:10:18.110 --> 00:10:19.990
or a colon like that and we can just

345
00:10:19.990 --> 00:10:21.790
go ahead and say flavors.

346
00:10:21.790 --> 00:10:22.870
All right, so we have printed

347
00:10:22.870 --> 00:10:23.790
a message to the user.

348
00:10:23.790 --> 00:10:25.790
Now I want that user should actually,

349
00:10:27.530 --> 00:10:29.290
be stuck in a loop and choose

350
00:10:29.290 --> 00:10:31.450
the only flavor that we showed us.

351
00:10:31.450 --> 00:10:32.690
And we don't get away.

352
00:10:32.690 --> 00:10:34.090
We just keep on asking that, hey,

353
00:10:34.090 --> 00:10:35.650
choose another flavor or this is not

354
00:10:35.650 --> 00:10:37.210
available or something like that.

355
00:10:37.210 --> 00:10:38.530
So we can run an infinite

356
00:10:38.530 --> 00:10:39.250
kind of a loop.

357
00:10:39.250 --> 00:10:41.550
But this time instead of just saying

358
00:10:41.550 --> 00:10:43.170
while true so that it always keeps

359
00:10:43.170 --> 00:10:45.490
on going, what I can do is I can

360
00:10:45.490 --> 00:10:47.650
just go ahead and say, hey, I will

361
00:10:47.650 --> 00:10:49.690
go ahead and say flavor, not

362
00:10:49.690 --> 00:10:50.410
flavors.

363
00:10:50.410 --> 00:10:52.170
And I'll use a walrus operator.

364
00:10:52.750 --> 00:10:54.750
This is going to be fulfilled

365
00:10:54.750 --> 00:10:56.910
by an input value.

366
00:10:56.910 --> 00:10:59.310
And we'll go ahead and say choose

367
00:10:59.310 --> 00:11:04.590
your flavor and we'll

368
00:11:04.590 --> 00:11:06.030
just accept the flavor.

369
00:11:06.030 --> 00:11:07.910
And not only that, we are going

370
00:11:07.910 --> 00:11:09.470
to check it immediately.

371
00:11:09.470 --> 00:11:12.190
Not in flavors.

372
00:11:12.190 --> 00:11:13.150
So there we go.

373
00:11:13.150 --> 00:11:15.230
If it is not in the flavors.

374
00:11:15.230 --> 00:11:16.750
This is a very strange syntax.

375
00:11:16.750 --> 00:11:17.110
I know.

376
00:11:17.110 --> 00:11:18.110
First time it.

377
00:11:18.110 --> 00:11:19.550
It bothers a lot of people that,

378
00:11:19.550 --> 00:11:21.310
yeah, I kind of forget it, but I'm

379
00:11:21.310 --> 00:11:22.230
not fully understanding it.

380
00:11:22.230 --> 00:11:22.870
And that's okay.

381
00:11:22.870 --> 00:11:24.430
Feeling totally okay.

382
00:11:24.430 --> 00:11:26.270
Not a lot of people use this.

383
00:11:26.270 --> 00:11:28.510
So we'll just go ahead and say sorry

384
00:11:28.510 --> 00:11:29.990
and whatever the flavor

385
00:11:29.990 --> 00:11:32.750
you are asking is not available.

386
00:11:33.390 --> 00:11:35.390
Is not available.

387
00:11:38.830 --> 00:11:40.030
If I can write that.

388
00:11:40.030 --> 00:11:40.750
Available.

389
00:11:40.750 --> 00:11:41.550
There we go.

390
00:11:41.550 --> 00:11:43.350
And once we are done with this loop,

391
00:11:43.350 --> 00:11:45.270
we can just get out of it and we

392
00:11:45.270 --> 00:11:47.690
can just print it and we will use

393
00:11:47.690 --> 00:11:49.850
the formatted string just like this.

394
00:11:49.850 --> 00:11:51.770
And we'll say you chose

395
00:11:52.410 --> 00:11:54.170
whatever the flavor he is choosing.

396
00:11:54.170 --> 00:11:56.170
So I still have an axis of this

397
00:11:56.170 --> 00:11:57.690
and we'll just say chai.

398
00:11:57.690 --> 00:11:59.330
Now one thing I want you to pay small

399
00:11:59.330 --> 00:12:01.890
attention here is this is a part

400
00:12:01.890 --> 00:12:03.410
of loop, this line number 28.

401
00:12:03.410 --> 00:12:04.770
But line number 29 is

402
00:12:04.770 --> 00:12:06.250
not part of a loop.

403
00:12:06.250 --> 00:12:07.890
What I usually try to do is

404
00:12:07.890 --> 00:12:09.130
just separate them out a little

405
00:12:09.130 --> 00:12:10.210
bit so that it makes sense.

406
00:12:10.210 --> 00:12:11.450
Okay, this is a loop.

407
00:12:11.450 --> 00:12:13.080
This is outside of a loop.

408
00:12:13.080 --> 00:12:13.880
Again, you can keep it

409
00:12:13.880 --> 00:12:15.840
on the line number 29 as well.

410
00:12:15.840 --> 00:12:16.920
But I don't like it.

411
00:12:17.640 --> 00:12:19.400
So for this part, let's go

412
00:12:19.400 --> 00:12:20.880
ahead and comment out

413
00:12:20.880 --> 00:12:22.000
this whole piece of code.

414
00:12:22.000 --> 00:12:23.160
Don't want extra information

415
00:12:23.960 --> 00:12:26.640
so we just want to see the, walrus

416
00:12:26.640 --> 00:12:28.840
operator working in the loop itself.

417
00:12:28.840 --> 00:12:30.360
Let's go ahead and run this.

418
00:12:30.360 --> 00:12:31.400
I'll clean this.

419
00:12:31.400 --> 00:12:32.160
Run this again.

420
00:12:32.160 --> 00:12:34.480
It says, available flavors are

421
00:12:34.480 --> 00:12:36.160
masala, ginger, lemon and mint.

422
00:12:36.160 --> 00:12:39.570
But somehow I want, maybe.

423
00:12:39.570 --> 00:12:40.450
What else?

424
00:12:40.450 --> 00:12:41.330
Oolong tea.

425
00:12:41.890 --> 00:12:43.410
So I say, sorry, oolong

426
00:12:43.410 --> 00:12:44.290
is not available.

427
00:12:44.290 --> 00:12:45.650
All right, it's okay.

428
00:12:45.650 --> 00:12:47.690
I would choose Masala.

429
00:12:47.690 --> 00:12:49.130
And it says, you chose Masala tea.

430
00:12:49.130 --> 00:12:50.850
And our program exited.

431
00:12:50.850 --> 00:12:51.970
So this is pretty nice

432
00:12:51.970 --> 00:12:53.250
and pretty interesting way

433
00:12:53.250 --> 00:12:54.449
of working through it.

434
00:12:54.449 --> 00:12:56.290
So, as I mentioned, this walrus

435
00:12:56.290 --> 00:12:58.250
operator is just an alternative way

436
00:12:58.250 --> 00:12:59.130
of writing the code.

437
00:12:59.130 --> 00:13:00.290
It just makes your

438
00:13:00.290 --> 00:13:02.050
one line shorter of the code.

439
00:13:02.050 --> 00:13:04.180
You could have taken this input

440
00:13:04.180 --> 00:13:05.540
in the separate line and then

441
00:13:05.540 --> 00:13:06.980
could have evaluated here.

442
00:13:06.980 --> 00:13:09.580
But here you are allowed to take

443
00:13:09.580 --> 00:13:10.820
the input on the go as well,

444
00:13:10.820 --> 00:13:12.740
which is very, very strange for

445
00:13:12.740 --> 00:13:14.260
seasoned Python developers.

446
00:13:14.260 --> 00:13:15.980
But I have to teach it it exists

447
00:13:15.980 --> 00:13:17.620
and I want to discuss that.

448
00:13:17.620 --> 00:13:18.940
So that is it for this video.

449
00:13:18.940 --> 00:13:20.860
Hope you have enjoyed this, and let's

450
00:13:20.860 --> 00:13:22.180
catch up in the next video.
