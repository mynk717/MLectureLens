WEBVTT

1
00:00:01.040 --> 00:00:03.240
Next up in the world of functions we

2
00:00:03.240 --> 00:00:05.120
are going to learn about scopes.

3
00:00:05.120 --> 00:00:07.680
This is fun topic and too much theory

4
00:00:07.680 --> 00:00:09.560
in this topic will make sure

5
00:00:09.560 --> 00:00:11.680
that you are absolutely confused.

6
00:00:11.680 --> 00:00:13.200
We are not going to do that

7
00:00:13.200 --> 00:00:14.760
with just a simple example

8
00:00:14.760 --> 00:00:16.040
and moving after the example,

9
00:00:16.040 --> 00:00:17.520
we'll just write the code.

10
00:00:17.520 --> 00:00:18.960
The code will make all

11
00:00:18.960 --> 00:00:20.440
the doubts absolutely clear.

12
00:00:20.440 --> 00:00:22.160
And that is the difference between

13
00:00:22.160 --> 00:00:23.400
people who teach theory

14
00:00:23.400 --> 00:00:24.720
too much and people who have

15
00:00:24.720 --> 00:00:25.680
worked in the production.

16
00:00:25.680 --> 00:00:27.120
They like to show you the code first.

17
00:00:27.120 --> 00:00:28.160
And I'm a guy who have

18
00:00:28.740 --> 00:00:29.900
always been into the production

19
00:00:29.900 --> 00:00:31.060
for as long as I remember.

20
00:00:31.060 --> 00:00:32.619
So I'll just show you the code

21
00:00:32.619 --> 00:00:34.180
and you will love this one.

22
00:00:34.180 --> 00:00:35.180
For this one, all I

23
00:00:35.180 --> 00:00:36.340
need is two things.

24
00:00:36.340 --> 00:00:37.420
The first of all, your

25
00:00:37.420 --> 00:00:38.940
undivided attention and focus

26
00:00:38.940 --> 00:00:39.860
on the screen itself.

27
00:00:39.860 --> 00:00:41.420
I'll remove myself from here so that

28
00:00:41.420 --> 00:00:43.060
we can focus just on the screen.

29
00:00:43.060 --> 00:00:45.540
The second one is please do rate

30
00:00:45.540 --> 00:00:46.500
this course as well.

31
00:00:46.500 --> 00:00:47.540
I know I've said it many

32
00:00:47.540 --> 00:00:48.940
times but you know, a lot

33
00:00:48.940 --> 00:00:50.460
of people doesn't rate and this

34
00:00:50.460 --> 00:00:51.620
is not really great.

35
00:00:51.620 --> 00:00:52.940
So don't worry, I'm just here,

36
00:00:52.940 --> 00:00:54.740
I'm just trying to make sure that

37
00:00:54.740 --> 00:00:56.140
you focus on the screen more.

38
00:00:56.140 --> 00:00:57.540
So we'll just go on that part.

39
00:00:58.250 --> 00:00:59.930
So what are these scopes and what

40
00:00:59.930 --> 00:01:01.690
does it even mean to have

41
00:01:01.690 --> 00:01:03.450
something in the scope itself?

42
00:01:03.450 --> 00:01:04.810
So this is pretty, fun.

43
00:01:04.810 --> 00:01:06.010
Let's take the example.

44
00:01:06.010 --> 00:01:07.050
Imagine you are running

45
00:01:07.050 --> 00:01:09.930
a bustling chai cafe.

46
00:01:09.930 --> 00:01:11.770
It's called as, let's just give

47
00:01:11.770 --> 00:01:13.130
it a name as well for fun.

48
00:01:13.130 --> 00:01:15.770
Let's call this one as Global Sip.

49
00:01:16.330 --> 00:01:17.850
So this is your cafe name.

50
00:01:17.850 --> 00:01:18.970
Pretty fun name.

51
00:01:18.970 --> 00:01:21.250
And each team member has their

52
00:01:21.250 --> 00:01:22.650
own notepad for the order.

53
00:01:22.650 --> 00:01:24.330
So let's just say we are modern,

54
00:01:24.330 --> 00:01:26.280
we have the apps for, for orders.

55
00:01:26.280 --> 00:01:27.840
So we have one app which is

56
00:01:27.840 --> 00:01:29.600
with the team and there is

57
00:01:29.600 --> 00:01:31.200
another one which is required

58
00:01:31.200 --> 00:01:32.840
by the owner as well.

59
00:01:32.840 --> 00:01:34.920
So this is owner, owner.

60
00:01:35.480 --> 00:01:38.200
And this owner has an app.

61
00:01:38.200 --> 00:01:39.880
And again this app, let's

62
00:01:39.880 --> 00:01:41.040
just say this, we call this

63
00:01:41.040 --> 00:01:42.840
one as Master Notepad.

64
00:01:43.800 --> 00:01:45.320
So this is Master Notepad.

65
00:01:45.320 --> 00:01:46.880
This is the app which is owned

66
00:01:46.880 --> 00:01:48.600
by the owner and he's responsible

67
00:01:48.600 --> 00:01:50.200
for placing all the orders

68
00:01:50.200 --> 00:01:51.320
in the kitchen itself.

69
00:01:51.930 --> 00:01:52.890
But the team also got

70
00:01:52.890 --> 00:01:54.290
their own notepad as well.

71
00:01:54.290 --> 00:01:55.770
And each one of the team member

72
00:01:55.770 --> 00:01:57.370
will have their own notepad.

73
00:01:57.370 --> 00:01:58.250
Maybe we have two

74
00:01:58.250 --> 00:01:59.610
workers in the cafe.

75
00:02:00.170 --> 00:02:02.170
This one has its own notepad

76
00:02:02.170 --> 00:02:04.170
and this one has its own notepad.

77
00:02:04.170 --> 00:02:05.810
So this is run and this

78
00:02:05.810 --> 00:02:06.410
is also there.

79
00:02:06.410 --> 00:02:08.050
So this team member one which

80
00:02:08.050 --> 00:02:09.930
gets a notepad and this one also

81
00:02:09.930 --> 00:02:11.850
gets a notepad, another one.

82
00:02:11.850 --> 00:02:13.370
Now if the kitchen guy writes

83
00:02:13.370 --> 00:02:15.170
down, let's just say two masala chai

84
00:02:15.170 --> 00:02:16.890
in his own notepad, this guy.

85
00:02:17.810 --> 00:02:20.050
It doesn't change your master order.

86
00:02:20.050 --> 00:02:21.250
So whatever is written here,

87
00:02:21.250 --> 00:02:22.210
it doesn't change it there.

88
00:02:22.210 --> 00:02:23.370
Although these are called as

89
00:02:23.370 --> 00:02:24.970
notepad, this is also notepad.

90
00:02:24.970 --> 00:02:26.250
Let's just say this is not master

91
00:02:26.250 --> 00:02:28.130
notepad, this is also notepad.

92
00:02:28.130 --> 00:02:29.770
But taking an order here

93
00:02:29.770 --> 00:02:30.730
doesn't change this.

94
00:02:30.730 --> 00:02:31.890
This has right now no

95
00:02:31.890 --> 00:02:33.010
relation with this guy.

96
00:02:33.010 --> 00:02:34.650
So again, let's just say

97
00:02:34.650 --> 00:02:35.810
for the fun stuff, let's

98
00:02:35.810 --> 00:02:36.850
call this one as notepad.

99
00:02:36.850 --> 00:02:38.250
Why to call it Master Notepad.

100
00:02:38.250 --> 00:02:39.330
This can also be just

101
00:02:39.330 --> 00:02:40.970
a notepad and this is fine,

102
00:02:40.970 --> 00:02:42.690
this is absolutely fair.

103
00:02:42.690 --> 00:02:44.010
So I hope you get this.

104
00:02:44.010 --> 00:02:45.890
Why the global scope and local

105
00:02:45.890 --> 00:02:47.730
scope whole thing actually comes

106
00:02:47.730 --> 00:02:49.610
up in the world of thing.

107
00:02:49.610 --> 00:02:51.130
And this has a name itself,

108
00:02:51.130 --> 00:02:52.730
we call it as scope, but there

109
00:02:52.730 --> 00:02:54.050
is another name for it

110
00:02:54.050 --> 00:02:56.130
and this is called as scopes.

111
00:02:56.130 --> 00:02:57.650
Surely that's the one.

112
00:02:57.650 --> 00:03:01.170
And this is known as name resolution.

113
00:03:02.690 --> 00:03:04.930
The word whole name resolution means

114
00:03:04.930 --> 00:03:06.570
which one should I resolve to?

115
00:03:06.570 --> 00:03:08.130
Is this notepad I'm talking about?

116
00:03:08.130 --> 00:03:09.730
Is this notepad I'm talking about or

117
00:03:09.730 --> 00:03:12.050
is this notepad I'm talking about?

118
00:03:12.050 --> 00:03:13.610
In the world of Python we have

119
00:03:13.610 --> 00:03:15.090
a whole lot of ranges

120
00:03:15.090 --> 00:03:16.450
and names and all these things.

121
00:03:16.450 --> 00:03:17.850
So first of all the scope that you're

122
00:03:17.850 --> 00:03:20.460
going to study is known as local.

123
00:03:20.460 --> 00:03:24.060
This is called as inside a function.

124
00:03:24.060 --> 00:03:25.260
This is a very common one.

125
00:03:25.260 --> 00:03:26.260
So this is the first one

126
00:03:26.260 --> 00:03:26.940
we are going to study.

127
00:03:26.940 --> 00:03:27.780
We will have a lot

128
00:03:27.780 --> 00:03:29.340
of examples of this one.

129
00:03:29.340 --> 00:03:31.980
Then we have enclosing and yes

130
00:03:31.980 --> 00:03:33.260
we are going to study.

131
00:03:33.260 --> 00:03:35.660
This is actually from outer

132
00:03:36.540 --> 00:03:39.500
function, if nested and yes there

133
00:03:39.500 --> 00:03:41.140
could be nested functions as well.

134
00:03:41.140 --> 00:03:43.300
So if this is nested, so this

135
00:03:43.300 --> 00:03:44.740
is local, this is enclosing.

136
00:03:44.740 --> 00:03:45.820
But we have another one.

137
00:03:45.820 --> 00:03:47.210
Yes we do have.

138
00:03:47.210 --> 00:03:48.250
This is known as global.

139
00:03:48.250 --> 00:03:49.970
So this is like a master notepad,

140
00:03:49.970 --> 00:03:50.970
but this is like global.

141
00:03:51.680 --> 00:03:53.770
We call this as top level,

142
00:03:55.050 --> 00:03:56.770
script or sometimes module,

143
00:03:56.770 --> 00:03:58.010
whichever makes sense.

144
00:03:58.010 --> 00:04:00.000
And also we have another one,

145
00:04:00.000 --> 00:04:00.970
this is the final one,

146
00:04:00.970 --> 00:04:02.250
don't worry on that part.

147
00:04:02.250 --> 00:04:03.890
This is called as built in.

148
00:04:03.890 --> 00:04:05.370
So there are some built in things

149
00:04:05.370 --> 00:04:07.010
which are reserved like the print.

150
00:04:07.010 --> 00:04:09.130
I cannot use the method name print.

151
00:04:09.130 --> 00:04:10.730
But yes, there are many of such

152
00:04:10.730 --> 00:04:12.370
these scopes and name resolutions.

153
00:04:12.370 --> 00:04:13.730
So let's go through them one by one.

154
00:04:13.730 --> 00:04:15.460
Again the first one is local,

155
00:04:15.460 --> 00:04:17.540
the second one is enclosing or

156
00:04:17.540 --> 00:04:18.420
from the outer one.

157
00:04:18.420 --> 00:04:19.420
We'll study about that as

158
00:04:19.420 --> 00:04:20.420
well, don't you worry.

159
00:04:20.420 --> 00:04:21.620
And then we have the global

160
00:04:21.620 --> 00:04:22.940
one and then we have the built

161
00:04:22.940 --> 00:04:25.020
in one, or rather it

162
00:04:25.020 --> 00:04:26.660
would be said not built in.

163
00:04:26.660 --> 00:04:27.620
Built in.

164
00:04:27.620 --> 00:04:28.580
Built in.

165
00:04:28.580 --> 00:04:29.860
That's correct.

166
00:04:29.860 --> 00:04:31.300
So I think it's enough.

167
00:04:31.300 --> 00:04:32.740
That's all what we

168
00:04:32.740 --> 00:04:33.460
are going to study.

169
00:04:33.460 --> 00:04:34.580
Let's go ahead and now

170
00:04:34.580 --> 00:04:35.940
write some code.

171
00:04:35.940 --> 00:04:37.540
Coding always gives more

172
00:04:37.540 --> 00:04:38.540
positive response.

173
00:04:38.540 --> 00:04:39.300
So let's call this

174
00:04:39.300 --> 00:04:41.100
one as new function.

175
00:04:41.100 --> 00:04:45.140
We are into the 06 file and call

176
00:04:45.140 --> 00:04:47.580
this one as scopes py good stuff.

177
00:04:48.300 --> 00:04:50.260
I'll shut up my AI as well so

178
00:04:50.260 --> 00:04:51.740
that it doesn't bother us.

179
00:04:51.740 --> 00:04:52.860
So let's just say in this very

180
00:04:52.860 --> 00:04:54.700
first example we have a simple

181
00:04:54.700 --> 00:04:57.020
mechanism of serve chai.

182
00:04:57.020 --> 00:04:58.060
That's good enough.

183
00:04:58.060 --> 00:04:59.820
And this is our method name.

184
00:04:59.820 --> 00:05:01.100
Let's go like that.

185
00:05:01.100 --> 00:05:02.860
In this I go ahead and declare

186
00:05:02.860 --> 00:05:04.660
a variable that says chai type.

187
00:05:04.660 --> 00:05:06.260
And there could be a variety of chai.

188
00:05:06.260 --> 00:05:06.940
Let's just say this

189
00:05:06.940 --> 00:05:09.020
one is Masala chai.

190
00:05:10.190 --> 00:05:11.110
All right, make sure

191
00:05:11.110 --> 00:05:11.710
that you understand.

192
00:05:11.710 --> 00:05:13.310
I can write the comments like this.

193
00:05:13.310 --> 00:05:15.710
This is known as local scope.

194
00:05:16.270 --> 00:05:17.470
Local scope simply means

195
00:05:17.470 --> 00:05:19.030
the validation of this variable

196
00:05:19.030 --> 00:05:21.150
is just inside this method.

197
00:05:21.150 --> 00:05:22.070
So I can just go ahead

198
00:05:22.070 --> 00:05:22.990
and use it like this.

199
00:05:22.990 --> 00:05:24.590
I can say formatted string

200
00:05:24.590 --> 00:05:26.990
and I can call this one as inside

201
00:05:27.550 --> 00:05:29.710
function and then just

202
00:05:29.710 --> 00:05:30.870
use this variable name.

203
00:05:30.870 --> 00:05:31.910
This is chai type.

204
00:05:31.910 --> 00:05:33.630
This is completely valid.

205
00:05:33.630 --> 00:05:35.030
But what if there could be

206
00:05:35.030 --> 00:05:37.220
a case that you have declared this

207
00:05:37.220 --> 00:05:38.910
chai type here as well?

208
00:05:39.550 --> 00:05:41.710
And you call that hey, I will prefer

209
00:05:41.710 --> 00:05:44.030
lemon, which is my favorite one.

210
00:05:44.030 --> 00:05:46.590
And I call this serve chai.

211
00:05:46.590 --> 00:05:48.030
So what do you think this print

212
00:05:48.030 --> 00:05:49.310
method is going to refer to?

213
00:05:49.310 --> 00:05:50.910
Is it going to refer to this

214
00:05:51.710 --> 00:05:52.950
chai type or is it going

215
00:05:52.950 --> 00:05:54.430
to refer to this chai type?

216
00:05:54.430 --> 00:05:56.830
And again on top of that, if I write

217
00:05:56.830 --> 00:05:58.550
the same method again here or

218
00:05:58.550 --> 00:06:00.710
the same print statement here with

219
00:06:00.710 --> 00:06:02.630
the formatted string and I'll call

220
00:06:02.630 --> 00:06:05.640
this one as outside format function.

221
00:06:05.640 --> 00:06:06.480
And then we're going

222
00:06:06.480 --> 00:06:08.360
to again say chai type.

223
00:06:08.360 --> 00:06:09.240
Pretty good.

224
00:06:09.240 --> 00:06:10.640
This is definitely confusing

225
00:06:10.640 --> 00:06:12.600
and you'll see this quite a lot.

226
00:06:12.600 --> 00:06:13.640
One thing you have to remember,

227
00:06:13.640 --> 00:06:15.160
whenever you have created a variable

228
00:06:15.160 --> 00:06:16.880
inside a function, the scope

229
00:06:16.880 --> 00:06:18.440
of it is just within

230
00:06:18.440 --> 00:06:20.840
the function, never outside of it.

231
00:06:20.840 --> 00:06:22.200
So all the people who are outside

232
00:06:22.200 --> 00:06:23.120
of this function,

233
00:06:23.120 --> 00:06:24.720
maybe another function don't

234
00:06:24.720 --> 00:06:25.720
know what you have done it.

235
00:06:25.720 --> 00:06:26.640
This is like you have

236
00:06:26.640 --> 00:06:28.200
worked inside your home.

237
00:06:28.200 --> 00:06:30.280
So anytime this outside function

238
00:06:30.280 --> 00:06:31.880
tries to refer to chai type, it will

239
00:06:31.880 --> 00:06:33.160
refer to something which is outside

240
00:06:33.160 --> 00:06:35.640
only it cannot refer to inside here.

241
00:06:35.640 --> 00:06:36.720
And we'll see that in action.

242
00:06:36.720 --> 00:06:38.280
Now let's go ahead and run this,

243
00:06:38.840 --> 00:06:40.840
we'll go ahead and say, hey python,

244
00:06:40.840 --> 00:06:43.640
let's run this 06 file and you

245
00:06:43.640 --> 00:06:45.120
can see inside the function there

246
00:06:45.120 --> 00:06:46.560
is masala outside the function.

247
00:06:46.560 --> 00:06:47.080
It's level.

248
00:06:47.080 --> 00:06:48.480
But what if I go ahead

249
00:06:48.480 --> 00:06:50.640
and don't have this chai type?

250
00:06:50.640 --> 00:06:51.960
Notice here immediately we have

251
00:06:51.960 --> 00:06:53.120
an error that I don't know

252
00:06:53.120 --> 00:06:54.280
what you're talking about.

253
00:06:54.280 --> 00:06:56.080
I have zero idea what this

254
00:06:56.080 --> 00:06:57.800
chai type actually is.

255
00:06:57.800 --> 00:06:59.960
So you have to provide a scope

256
00:06:59.960 --> 00:07:01.320
for which it can access.

257
00:07:01.320 --> 00:07:02.240
It can reach out.

258
00:07:02.240 --> 00:07:03.520
And I can only reach out because

259
00:07:03.520 --> 00:07:05.450
I am declared an outside file or.

260
00:07:05.450 --> 00:07:06.770
Or in the global scope.

261
00:07:06.770 --> 00:07:07.730
Yeah, this whole file

262
00:07:07.730 --> 00:07:08.530
is a global one.

263
00:07:08.530 --> 00:07:10.170
Here it works like that.

264
00:07:10.170 --> 00:07:11.810
And as I mentioned, the scope

265
00:07:11.810 --> 00:07:13.010
local inside the function.

266
00:07:13.010 --> 00:07:14.490
This is exactly what it means.

267
00:07:14.490 --> 00:07:15.690
If you have declared something

268
00:07:15.690 --> 00:07:17.170
inside the function, it's only

269
00:07:17.170 --> 00:07:18.730
accessible inside the function

270
00:07:18.730 --> 00:07:20.170
the moment you move it outside.

271
00:07:20.170 --> 00:07:21.449
It's not fun.

272
00:07:21.449 --> 00:07:22.250
It's not available.

273
00:07:22.810 --> 00:07:24.370
Let's also go ahead and talk

274
00:07:24.370 --> 00:07:26.330
about the nested function as well.

275
00:07:27.130 --> 00:07:28.130
We can create it here.

276
00:07:28.130 --> 00:07:29.930
No need to create too many files.

277
00:07:29.930 --> 00:07:31.250
I'll now restrict myself

278
00:07:31.250 --> 00:07:32.370
from creating too many files.

279
00:07:32.370 --> 00:07:34.570
But we'll still write a lot of code.

280
00:07:34.570 --> 00:07:35.330
Let's just say we have

281
00:07:35.330 --> 00:07:37.290
an example of chai counter.

282
00:07:37.290 --> 00:07:38.730
Pretty solid examples

283
00:07:38.730 --> 00:07:40.410
related to all the chai.

284
00:07:40.410 --> 00:07:41.330
And let's just say we

285
00:07:41.330 --> 00:07:43.210
have a chai order.

286
00:07:43.210 --> 00:07:44.690
The chai order for us

287
00:07:44.690 --> 00:07:46.570
this time is Lemon.

288
00:07:46.570 --> 00:07:48.410
Lemon, I can write that.

289
00:07:48.410 --> 00:07:51.130
And this one, we call this one as

290
00:07:52.250 --> 00:07:56.090
enclosing, scope Scope.

291
00:07:56.090 --> 00:07:58.010
So that means the scope that

292
00:07:58.010 --> 00:07:59.210
where this chai order is

293
00:07:59.210 --> 00:08:00.410
available within the function.

294
00:08:00.410 --> 00:08:01.170
That's the whole meaning

295
00:08:01.170 --> 00:08:02.570
of enclosing scope.

296
00:08:03.150 --> 00:08:04.150
Now let's just say further

297
00:08:04.150 --> 00:08:06.510
down we have another function

298
00:08:06.510 --> 00:08:08.190
designed in this function.

299
00:08:08.190 --> 00:08:09.710
This is interesting one,

300
00:08:09.710 --> 00:08:11.470
we call this as chiorder again.

301
00:08:12.270 --> 00:08:15.230
And in this I want to say, hey, my

302
00:08:15.230 --> 00:08:19.910
chiorder again function inside

303
00:08:19.910 --> 00:08:23.230
a function is going to be Ginger.

304
00:08:24.750 --> 00:08:26.030
Ginger.

305
00:08:26.910 --> 00:08:29.390
And then I go ahead and print this.

306
00:08:30.500 --> 00:08:31.900
So let's just say I have a print

307
00:08:31.900 --> 00:08:34.700
statement and I go ahead and say

308
00:08:34.700 --> 00:08:36.380
inner just to make sure that

309
00:08:36.380 --> 00:08:37.659
you understand that we are talking

310
00:08:37.659 --> 00:08:40.740
about this chorder chiorder.

311
00:08:41.539 --> 00:08:43.140
So we have two chi order and just

312
00:08:43.140 --> 00:08:44.100
with the color contrast

313
00:08:44.100 --> 00:08:45.500
you can imagine, yes, we are

314
00:08:45.500 --> 00:08:46.740
still inside this function

315
00:08:46.740 --> 00:08:48.220
and we are talking about this.

316
00:08:48.220 --> 00:08:50.180
Only now the moment I go

317
00:08:50.180 --> 00:08:51.300
outside of this, this is

318
00:08:51.300 --> 00:08:52.380
where people get confused.

319
00:08:52.380 --> 00:08:53.980
The moment I have returned

320
00:08:53.980 --> 00:08:55.860
this one here, indentation level,

321
00:08:56.380 --> 00:08:57.660
that means I'm outside.

322
00:08:57.660 --> 00:08:59.220
Now the outer function that

323
00:08:59.220 --> 00:09:00.140
we are talking about.

324
00:09:00.140 --> 00:09:02.300
So I can just go ahead and say outer

325
00:09:02.300 --> 00:09:03.900
just like this, put up a comma

326
00:09:03.900 --> 00:09:05.300
and then we have a chai order.

327
00:09:05.300 --> 00:09:07.180
Notice here, the color contrast.

328
00:09:07.180 --> 00:09:09.260
So the line number 16 Chai order

329
00:09:09.260 --> 00:09:11.260
is referring to this chai.

330
00:09:11.260 --> 00:09:12.860
The scope of this print order

331
00:09:12.860 --> 00:09:15.220
is just here, nowhere outside.

332
00:09:15.220 --> 00:09:16.300
And I can just go ahead

333
00:09:16.300 --> 00:09:17.660
and print this as well.

334
00:09:17.660 --> 00:09:19.460
I can come here outside of this

335
00:09:19.460 --> 00:09:21.500
and I can say, hey, I run this

336
00:09:21.500 --> 00:09:23.750
print order function just like this.

337
00:09:23.750 --> 00:09:26.310
So I am declaring a function

338
00:09:26.310 --> 00:09:28.870
inside a function as well as I am

339
00:09:29.430 --> 00:09:30.670
calling this function

340
00:09:30.670 --> 00:09:32.390
from within the function.

341
00:09:32.390 --> 00:09:34.590
I know a lot is happening, but if

342
00:09:34.590 --> 00:09:36.590
you truly look at this and take

343
00:09:36.590 --> 00:09:38.350
a moment, pause the video here, you

344
00:09:38.350 --> 00:09:40.070
will understand it's not that big.

345
00:09:40.070 --> 00:09:41.750
We have an outer function

346
00:09:41.750 --> 00:09:43.190
within this, we have this

347
00:09:43.190 --> 00:09:44.750
small function inside it.

348
00:09:44.750 --> 00:09:46.310
We declared some variable, the scope

349
00:09:46.310 --> 00:09:47.750
is within the function itself.

350
00:09:47.750 --> 00:09:50.180
And I've called this here super easy.

351
00:09:50.740 --> 00:09:51.620
Now same thing can

352
00:09:51.620 --> 00:09:52.780
happen outside as well.

353
00:09:52.780 --> 00:09:54.300
Let's just say here I have no

354
00:09:54.300 --> 00:09:55.500
idea about that function.

355
00:09:55.500 --> 00:09:56.900
I can just go ahead and have

356
00:09:56.900 --> 00:09:58.900
my all variable chai order.

357
00:09:58.900 --> 00:10:00.140
And let's just say this time we

358
00:10:00.140 --> 00:10:02.100
are looking for the Tulsi chai.

359
00:10:02.900 --> 00:10:05.980
This is actually in the global scope.

360
00:10:05.980 --> 00:10:08.100
Now global global scope.

361
00:10:08.100 --> 00:10:11.070
And here I can have chi counter,

362
00:10:11.070 --> 00:10:12.020
being called again.

363
00:10:12.020 --> 00:10:12.660
There we go.

364
00:10:12.660 --> 00:10:14.140
We execute everything that's

365
00:10:14.140 --> 00:10:16.270
inside that and further at the very

366
00:10:16.270 --> 00:10:18.310
end of it we print something

367
00:10:18.310 --> 00:10:22.750
like this, global, I can write that

368
00:10:23.550 --> 00:10:26.550
global colon and then we

369
00:10:26.550 --> 00:10:28.030
can simply say chai order.

370
00:10:28.590 --> 00:10:30.230
So I hope you can see this, we

371
00:10:30.230 --> 00:10:31.550
are using the same variable.

372
00:10:31.550 --> 00:10:32.790
And again the common question

373
00:10:32.790 --> 00:10:34.110
is why would anybody

374
00:10:34.110 --> 00:10:35.950
use the same variable name?

375
00:10:35.950 --> 00:10:37.230
It's too common.

376
00:10:37.230 --> 00:10:38.910
It's actually too common.

377
00:10:38.910 --> 00:10:40.110
But I hope you get that

378
00:10:40.110 --> 00:10:41.150
how the functioning

379
00:10:41.150 --> 00:10:42.270
and how the reachability

380
00:10:42.270 --> 00:10:43.270
of the function works.

381
00:10:43.270 --> 00:10:45.180
So let's go ahead and run this again.

382
00:10:45.180 --> 00:10:47.050
So, so notice here the inner

383
00:10:47.050 --> 00:10:48.170
one is still ginger.

384
00:10:48.170 --> 00:10:49.970
It's not getting overridden.

385
00:10:49.970 --> 00:10:51.970
The inner one still is ginger,

386
00:10:51.970 --> 00:10:54.050
outside that the outer one is lemon.

387
00:10:54.050 --> 00:10:55.890
So this is outer what we have

388
00:10:55.890 --> 00:10:57.970
within the function and the final,

389
00:10:57.970 --> 00:10:59.490
the global one is tulsi.

390
00:11:00.050 --> 00:11:01.649
Is there no way that these

391
00:11:01.649 --> 00:11:02.610
can actually hinder?

392
00:11:02.610 --> 00:11:04.090
Yes, there is no way that they

393
00:11:04.090 --> 00:11:05.490
can actually hinder each other.

394
00:11:05.490 --> 00:11:07.810
Each function is a scoped one.

395
00:11:07.810 --> 00:11:09.730
Let's draw a diagram on this one.

396
00:11:09.730 --> 00:11:10.970
So let's just say this is

397
00:11:10.970 --> 00:11:12.560
whole, your global scope.

398
00:11:12.560 --> 00:11:13.600
And we are going to call this

399
00:11:13.600 --> 00:11:16.720
one as global globe global.

400
00:11:19.120 --> 00:11:20.240
And this is your global

401
00:11:20.240 --> 00:11:21.160
file level access.

402
00:11:21.160 --> 00:11:22.360
And inside this file you

403
00:11:22.360 --> 00:11:23.320
can have many functions.

404
00:11:23.320 --> 00:11:24.160
We have this function,

405
00:11:24.160 --> 00:11:25.080
we have this function.

406
00:11:25.080 --> 00:11:26.520
And just for representation we

407
00:11:26.520 --> 00:11:27.920
can have the smaller ones.

408
00:11:27.920 --> 00:11:29.520
So we have many functions

409
00:11:29.520 --> 00:11:31.520
and each function is represented

410
00:11:31.520 --> 00:11:32.680
like a house itself.

411
00:11:32.680 --> 00:11:34.040
Whatever you do inside the house,

412
00:11:34.040 --> 00:11:35.360
remain inside the house

413
00:11:35.360 --> 00:11:36.920
the moment you go outside of it.

414
00:11:36.920 --> 00:11:37.960
Surely you can access all

415
00:11:37.960 --> 00:11:39.460
the things which are global, but you

416
00:11:39.460 --> 00:11:40.660
cannot access what's happening

417
00:11:40.660 --> 00:11:42.260
inside each of the house.

418
00:11:42.260 --> 00:11:43.140
That is all yes.

419
00:11:43.140 --> 00:11:44.260
There are ways how we can

420
00:11:44.260 --> 00:11:45.140
access each of these.

421
00:11:45.140 --> 00:11:46.540
Like, if I want to access the global

422
00:11:46.540 --> 00:11:48.060
one, there is a way, There

423
00:11:48.060 --> 00:11:49.500
is a mechanism for doing it.

424
00:11:49.500 --> 00:11:51.020
But right now, let's not do

425
00:11:51.020 --> 00:11:52.100
that in the same video.

426
00:11:52.100 --> 00:11:52.900
Otherwise we're going

427
00:11:52.900 --> 00:11:54.900
to lose the context of this one.

428
00:11:54.900 --> 00:11:56.980
I hope it was fun for you.

429
00:11:56.980 --> 00:11:58.820
It was definitely fun for you.

430
00:11:58.820 --> 00:12:00.020
Fun for me, actually.

431
00:12:00.020 --> 00:12:01.980
And, don't forget to rate, and let's

432
00:12:01.980 --> 00:12:03.140
catch up in the next video.
