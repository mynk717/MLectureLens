WEBVTT

1
00:00:00.800 --> 00:00:03.200
Hey there and welcome to

2
00:00:03.200 --> 00:00:04.960
a really interesting video.

3
00:00:04.960 --> 00:00:06.520
For this particular video, I

4
00:00:06.520 --> 00:00:08.400
want your undivided attention.

5
00:00:08.400 --> 00:00:09.760
So if you're watching this video,

6
00:00:09.760 --> 00:00:11.240
laying down on the sofa or

7
00:00:11.240 --> 00:00:12.960
while commuting, please pay

8
00:00:12.960 --> 00:00:14.040
a little bit more attention.

9
00:00:14.040 --> 00:00:16.000
This video actually requires that.

10
00:00:16.000 --> 00:00:17.080
In this video we're going

11
00:00:17.080 --> 00:00:18.360
to study about inheritance

12
00:00:18.360 --> 00:00:20.080
as well as composition.

13
00:00:20.080 --> 00:00:21.600
Inheritance you might have studied

14
00:00:21.600 --> 00:00:22.600
in Python quite a lot.

15
00:00:22.600 --> 00:00:24.360
Composition is talked really

16
00:00:24.360 --> 00:00:25.600
less, but it's used quite

17
00:00:25.600 --> 00:00:26.720
a lot in the production.

18
00:00:27.280 --> 00:00:28.400
So I want to walk you through.

19
00:00:28.400 --> 00:00:29.960
First, let's talk about inheritance.

20
00:00:29.960 --> 00:00:31.320
Knowing the inheritance will

21
00:00:31.320 --> 00:00:33.400
solve like 90% of our problem.

22
00:00:33.400 --> 00:00:35.560
For this video, just like you might

23
00:00:35.560 --> 00:00:36.960
have seen inheritance in the real

24
00:00:36.960 --> 00:00:39.480
life, that some people inherit a

25
00:00:39.480 --> 00:00:41.480
car, some people inherit some

26
00:00:41.480 --> 00:00:43.280
great amount of money, some people

27
00:00:43.280 --> 00:00:45.760
inherit some house or a great

28
00:00:45.760 --> 00:00:46.480
property.

29
00:00:46.480 --> 00:00:48.320
That's exactly like how it works.

30
00:00:48.320 --> 00:00:50.640
If your dad has earned a great amount

31
00:00:50.640 --> 00:00:52.240
of property, you inherit that

32
00:00:52.240 --> 00:00:54.000
you don't start from scratch.

33
00:00:54.000 --> 00:00:55.680
That's reality of life as well.

34
00:00:55.680 --> 00:00:56.760
So same we can do with

35
00:00:56.760 --> 00:00:57.680
the programming as well.

36
00:00:57.680 --> 00:01:00.120
If some class has done some work, you

37
00:01:00.120 --> 00:01:02.160
can just go ahead and inherit that.

38
00:01:02.160 --> 00:01:04.000
Yeah, that's allowed in programming.

39
00:01:04.000 --> 00:01:05.680
You can inherit from any class.

40
00:01:05.680 --> 00:01:06.920
Like there are rules as well.

41
00:01:06.920 --> 00:01:08.120
But as of now, let's see that

42
00:01:08.120 --> 00:01:10.000
we can inherit from any class.

43
00:01:10.000 --> 00:01:11.400
Let's see the demo of this one.

44
00:01:11.400 --> 00:01:12.840
I have already created a file

45
00:01:12.840 --> 00:01:14.560
for you and we're going to first see

46
00:01:14.560 --> 00:01:15.960
the inheritance, then we are going

47
00:01:15.960 --> 00:01:17.400
to see the composition as well.

48
00:01:17.400 --> 00:01:18.040
It's easy.

49
00:01:18.040 --> 00:01:19.120
It's easy.

50
00:01:19.120 --> 00:01:20.400
So how do we create a class?

51
00:01:20.400 --> 00:01:21.920
Let's go ahead and say that we

52
00:01:21.920 --> 00:01:23.160
create a class, call this

53
00:01:23.160 --> 00:01:24.480
one as base chai because

54
00:01:25.150 --> 00:01:26.470
hey, this is how we create a chai.

55
00:01:26.470 --> 00:01:28.510
The base chai always remains same.

56
00:01:28.510 --> 00:01:30.590
We create a simple constructor.

57
00:01:30.590 --> 00:01:31.390
Remember init

58
00:01:32.350 --> 00:01:34.750
in it, that's our constructor.

59
00:01:34.750 --> 00:01:36.990
It takes the self as parameter

60
00:01:37.550 --> 00:01:39.550
in this and there we go.

61
00:01:39.550 --> 00:01:41.470
What it will do is apart from

62
00:01:41.470 --> 00:01:43.470
self, let's also take the type.

63
00:01:44.270 --> 00:01:45.750
What kind of a chai you

64
00:01:45.750 --> 00:01:46.910
would love to have?

65
00:01:46.910 --> 00:01:49.070
I would love to have a self

66
00:01:49.070 --> 00:01:52.790
type which will be type underscore.

67
00:01:52.790 --> 00:01:53.270
There we go.

68
00:01:53.270 --> 00:01:54.510
Chai is prepared.

69
00:01:54.510 --> 00:01:55.910
Now let's also create a method

70
00:01:55.910 --> 00:01:57.230
for preparing a chai.

71
00:01:57.230 --> 00:01:58.110
Prepare.

72
00:01:59.150 --> 00:02:00.310
This one will be self.

73
00:02:00.310 --> 00:02:00.950
Just like that.

74
00:02:00.950 --> 00:02:02.390
Every single method gets this.

75
00:02:02.390 --> 00:02:03.150
There we go.

76
00:02:03.150 --> 00:02:04.390
And this time it prints.

77
00:02:04.390 --> 00:02:05.550
It doesn't return anything.

78
00:02:05.550 --> 00:02:06.470
Again, my choice.

79
00:02:06.470 --> 00:02:07.310
I want to print it.

80
00:02:07.310 --> 00:02:08.350
I'll print it.

81
00:02:08.350 --> 00:02:10.750
This one is going to say preparing

82
00:02:10.750 --> 00:02:12.390
what type of chai you are preparing.

83
00:02:12.390 --> 00:02:13.390
I can use self

84
00:02:13.390 --> 00:02:14.830
to address any variable.

85
00:02:14.830 --> 00:02:16.110
This variable is not being

86
00:02:16.110 --> 00:02:17.550
created, but still it exists.

87
00:02:17.550 --> 00:02:19.340
Because constructor variables

88
00:02:19.340 --> 00:02:20.380
don't need to Be created.

89
00:02:20.380 --> 00:02:21.380
Again, if you are creating

90
00:02:21.380 --> 00:02:22.900
in constructor, that means

91
00:02:22.900 --> 00:02:24.820
it's known that it will be there.

92
00:02:24.820 --> 00:02:27.300
And I will say chai with four dots,

93
00:02:27.300 --> 00:02:29.060
because four dots makes life fun.

94
00:02:29.700 --> 00:02:30.780
All right, so this is how

95
00:02:30.780 --> 00:02:31.580
you create the class.

96
00:02:31.580 --> 00:02:34.180
We shouldn't have any problem in this

97
00:02:34.180 --> 00:02:35.900
the way how inheritance works.

98
00:02:35.900 --> 00:02:37.940
Now that you have the, basic idea

99
00:02:37.940 --> 00:02:40.220
of how the chai is being made, you

100
00:02:40.220 --> 00:02:42.500
can go ahead and say masala chai.

101
00:02:42.500 --> 00:02:43.540
There we go.

102
00:02:43.540 --> 00:02:44.800
No big deal.

103
00:02:44.800 --> 00:02:46.400
Now we use parenthesis.

104
00:02:46.400 --> 00:02:47.960
But hitesh, you said no

105
00:02:47.960 --> 00:02:49.760
parenthesis in the classes.

106
00:02:49.760 --> 00:02:51.200
Yes, I'm still correct.

107
00:02:51.200 --> 00:02:52.800
You only use parenthesis

108
00:02:52.800 --> 00:02:53.840
in the name of the class.

109
00:02:53.840 --> 00:02:55.760
If you want to inherit something.

110
00:02:55.760 --> 00:02:57.480
This is where it is compulsory that

111
00:02:57.480 --> 00:02:59.360
you present some of the class here.

112
00:02:59.360 --> 00:03:00.120
Otherwise it will

113
00:03:00.120 --> 00:03:01.200
always give you error.

114
00:03:01.200 --> 00:03:02.480
That's a special syntax.

115
00:03:03.040 --> 00:03:06.160
Now in this, all I do is, in this

116
00:03:06.160 --> 00:03:08.640
inheritance, I just add the spices.

117
00:03:08.640 --> 00:03:10.320
So somebody told me in my

118
00:03:10.840 --> 00:03:11.720
ancestor that, hey, this

119
00:03:11.720 --> 00:03:12.760
is how we make the chai.

120
00:03:12.760 --> 00:03:14.440
The next generation came in and just

121
00:03:14.440 --> 00:03:16.080
learned how to add the spices on it.

122
00:03:16.080 --> 00:03:17.400
That's all we do.

123
00:03:17.400 --> 00:03:19.160
So in this one we simply go ahead

124
00:03:19.160 --> 00:03:21.840
and say print and there we go.

125
00:03:21.840 --> 00:03:27.080
We are going to say adding cardamom.

126
00:03:27.080 --> 00:03:30.600
Cardamom, My favorite one.

127
00:03:30.600 --> 00:03:32.560
Ginger and I don't like it

128
00:03:32.560 --> 00:03:34.000
much, but let's just say it is

129
00:03:34.000 --> 00:03:35.160
also adding the clothes.

130
00:03:35.160 --> 00:03:36.370
There we go.

131
00:03:36.370 --> 00:03:37.090
So this is it.

132
00:03:37.090 --> 00:03:39.050
And you might be wondering, okay, how

133
00:03:39.050 --> 00:03:40.610
do we create objects and everything?

134
00:03:40.610 --> 00:03:41.970
Don't worry, I will walk you through.

135
00:03:41.970 --> 00:03:43.170
The creation of object is

136
00:03:43.170 --> 00:03:44.210
exactly same

137
00:03:44.210 --> 00:03:46.290
and the process also works same.

138
00:03:46.290 --> 00:03:48.250
But since we are already here, let's

139
00:03:48.250 --> 00:03:50.050
also see how the composition works.

140
00:03:50.050 --> 00:03:50.930
That's an interesting

141
00:03:50.930 --> 00:03:52.210
concept and idea.

142
00:03:52.210 --> 00:03:53.610
This is it, by the way, this is it.

143
00:03:53.610 --> 00:03:54.810
This is how all you

144
00:03:54.810 --> 00:03:56.250
define the inheritance.

145
00:03:56.250 --> 00:03:57.810
This is your base class.

146
00:03:57.810 --> 00:03:58.970
Any class needs it.

147
00:03:58.970 --> 00:04:00.450
You can just go ahead and pass

148
00:04:00.450 --> 00:04:01.890
on that class and that's it.

149
00:04:01.890 --> 00:04:02.790
It works.

150
00:04:02.790 --> 00:04:04.550
We will see more such example.

151
00:04:04.550 --> 00:04:06.640
Now let's see that if I define,

152
00:04:06.640 --> 00:04:07.710
another interesting class

153
00:04:07.710 --> 00:04:10.470
that says, a chai shop here.

154
00:04:11.110 --> 00:04:12.310
All right, no big deal.

155
00:04:12.310 --> 00:04:13.350
We can create that.

156
00:04:13.350 --> 00:04:14.550
Now notice here, this is

157
00:04:14.550 --> 00:04:16.550
not inheriting any class.

158
00:04:16.550 --> 00:04:17.829
So what can we do here?

159
00:04:17.829 --> 00:04:19.149
Let me show an interesting

160
00:04:19.149 --> 00:04:21.750
concept which says chicls,

161
00:04:21.750 --> 00:04:22.950
just short for class.

162
00:04:22.950 --> 00:04:23.710
By the way, this is

163
00:04:23.710 --> 00:04:24.950
just a variable name.

164
00:04:24.950 --> 00:04:25.790
Feel free to call it

165
00:04:25.790 --> 00:04:26.550
whatever you like.

166
00:04:27.430 --> 00:04:29.150
Now in this I can actually

167
00:04:29.150 --> 00:04:31.270
hold any of my class as well.

168
00:04:33.270 --> 00:04:34.390
Excuse me on that,

169
00:04:35.030 --> 00:04:36.910
we'll keep our classes informal.

170
00:04:36.910 --> 00:04:37.910
It's just fun.

171
00:04:37.910 --> 00:04:38.870
I love to teach.

172
00:04:39.750 --> 00:04:40.510
So there we go.

173
00:04:40.510 --> 00:04:41.230
I can just go ahead

174
00:04:41.230 --> 00:04:42.550
and say base chai.

175
00:04:42.550 --> 00:04:43.670
Now notice here something

176
00:04:43.670 --> 00:04:45.030
really, really odd.

177
00:04:45.030 --> 00:04:46.150
This Is base chai.

178
00:04:46.150 --> 00:04:47.710
This is the syntax of inheriting.

179
00:04:47.710 --> 00:04:49.550
But hey, where are those things?

180
00:04:49.550 --> 00:04:50.870
If we are creating an object,

181
00:04:50.870 --> 00:04:52.470
where is the syntax?

182
00:04:52.470 --> 00:04:53.670
No, it doesn't exist.

183
00:04:53.670 --> 00:04:55.510
If you are actually inheriting

184
00:04:55.510 --> 00:04:58.820
all the values of this base chai,

185
00:04:58.820 --> 00:04:59.900
then you don't actually put

186
00:04:59.900 --> 00:05:01.780
the parenthesis inside the class.

187
00:05:01.780 --> 00:05:03.620
That's the syntax of composition.

188
00:05:04.180 --> 00:05:05.540
When you actually create object,

189
00:05:05.540 --> 00:05:06.940
that's a whole different story.

190
00:05:06.940 --> 00:05:08.500
Remember creating object VS

191
00:05:08.500 --> 00:05:09.820
creating classes, these are two

192
00:05:09.820 --> 00:05:11.780
different syntax entirely.

193
00:05:11.780 --> 00:05:13.780
So now that I have access to this

194
00:05:13.780 --> 00:05:14.779
whole, thing that exists

195
00:05:14.779 --> 00:05:15.900
in the base child, I can

196
00:05:15.900 --> 00:05:17.220
actually do some fun stuff.

197
00:05:17.220 --> 00:05:18.500
Let me show you.

198
00:05:18.500 --> 00:05:19.900
First of all, I can just go ahead

199
00:05:19.900 --> 00:05:24.460
and create my init and I can pass on

200
00:05:24.460 --> 00:05:27.200
this self and, just work like that.

201
00:05:27.200 --> 00:05:28.800
So this is my basic chai shop.

202
00:05:28.800 --> 00:05:30.880
It has its own constructor.

203
00:05:30.880 --> 00:05:33.840
In this I go ahead and say self chai

204
00:05:33.840 --> 00:05:36.880
will be available like self, but I'm

205
00:05:36.880 --> 00:05:37.960
not going to do it like this.

206
00:05:37.960 --> 00:05:39.960
I will go ahead and say I want

207
00:05:39.960 --> 00:05:41.760
to refer to the base class.

208
00:05:42.400 --> 00:05:44.440
And in the base class I will go ahead

209
00:05:44.440 --> 00:05:46.560
and always prepare a regular chai.

210
00:05:47.120 --> 00:05:48.640
Can you see the linking here

211
00:05:49.600 --> 00:05:51.040
that I'm not actually directly

212
00:05:51.040 --> 00:05:52.530
creating a constructor.

213
00:05:52.530 --> 00:05:54.370
Through this constructor, I'm

214
00:05:54.370 --> 00:05:56.610
actually passing the value into this

215
00:05:56.610 --> 00:05:59.410
chai Cls, which further down will

216
00:05:59.410 --> 00:06:00.930
pass on this value to the base

217
00:06:00.930 --> 00:06:03.130
chai when it will be executed.

218
00:06:03.130 --> 00:06:03.730
These are just

219
00:06:03.730 --> 00:06:04.690
instructions right now.

220
00:06:04.690 --> 00:06:06.130
They are not executed, they're

221
00:06:06.130 --> 00:06:07.810
executed with the parenthesis.

222
00:06:07.810 --> 00:06:09.490
So it will pass on this regular value

223
00:06:09.490 --> 00:06:11.890
to this base chai constructor.

224
00:06:12.450 --> 00:06:13.970
This will be passed on here,

225
00:06:14.530 --> 00:06:15.970
just here at line number two

226
00:06:15.970 --> 00:06:17.490
and they will assign the value

227
00:06:17.490 --> 00:06:18.590
in line number three.

228
00:06:18.590 --> 00:06:20.030
Oh God, that is too much

229
00:06:20.030 --> 00:06:21.550
of passing a variable.

230
00:06:21.550 --> 00:06:23.270
But now that you know the journey

231
00:06:23.270 --> 00:06:24.550
of variable, this will make you

232
00:06:24.550 --> 00:06:26.670
a professional Python developer.

233
00:06:26.670 --> 00:06:28.190
All right, pretty good, pretty good.

234
00:06:28.190 --> 00:06:29.390
What else we can do?

235
00:06:29.390 --> 00:06:31.110
You can also define your regular

236
00:06:31.110 --> 00:06:33.550
methods, just like in this.

237
00:06:33.550 --> 00:06:35.070
Let's just say we also serve.

238
00:06:35.070 --> 00:06:36.310
Because we are a chai shop,

239
00:06:36.310 --> 00:06:37.790
we should be serving that.

240
00:06:37.790 --> 00:06:40.510
So in this I can just again use self.

241
00:06:40.510 --> 00:06:41.230
No big deal.

242
00:06:41.790 --> 00:06:43.070
I can print.

243
00:06:43.630 --> 00:06:44.750
What do I want to print?

244
00:06:45.330 --> 00:06:46.490
A, formatted string

245
00:06:46.490 --> 00:06:47.970
that says serving.

246
00:06:48.530 --> 00:06:50.370
What type of chai are you serving?

247
00:06:50.370 --> 00:06:52.170
All right, I'll put some variables

248
00:06:52.170 --> 00:06:55.410
into this chai intheshop

249
00:06:56.530 --> 00:06:58.810
and what it also does, it actually

250
00:06:58.810 --> 00:07:00.290
calls some methods as well.

251
00:07:00.290 --> 00:07:01.890
First of all, one problem at a time.

252
00:07:02.450 --> 00:07:04.090
What type of chai are you preparing?

253
00:07:04.090 --> 00:07:05.250
How can you refer that?

254
00:07:05.250 --> 00:07:06.050
Because.

255
00:07:06.050 --> 00:07:07.890
Can I just say self chai,

256
00:07:08.770 --> 00:07:11.210
probably, but actually the type

257
00:07:11.210 --> 00:07:12.210
is not available here.

258
00:07:12.760 --> 00:07:13.720
The type is available

259
00:07:13.720 --> 00:07:15.640
in here because that's the variable

260
00:07:15.640 --> 00:07:16.880
inside the base class.

261
00:07:16.880 --> 00:07:18.480
So you will see this syntax quite a

262
00:07:18.480 --> 00:07:20.600
lot that in this we'll go ahead and

263
00:07:20.600 --> 00:07:22.720
say first of all we have to address

264
00:07:22.720 --> 00:07:28.800
it as self dot then chicls and I can

265
00:07:28.800 --> 00:07:32.480
go ahead and say chai Cls type as

266
00:07:32.480 --> 00:07:32.760
well.

267
00:07:32.760 --> 00:07:35.160
But remember now that you have

268
00:07:35.160 --> 00:07:36.840
transferred all of this control

269
00:07:37.720 --> 00:07:39.000
inside this variable,

270
00:07:39.590 --> 00:07:41.910
I don't need to say this chicls.

271
00:07:41.910 --> 00:07:43.830
Let's keep that reserved only

272
00:07:43.830 --> 00:07:45.030
for accessing the methods

273
00:07:45.030 --> 00:07:45.750
of the base class.

274
00:07:46.310 --> 00:07:47.670
Now that the control is being

275
00:07:47.670 --> 00:07:49.150
transferred here, you'll be

276
00:07:49.150 --> 00:07:50.390
surprised to know I can just go

277
00:07:50.390 --> 00:07:51.870
ahead and put up a dot and notice

278
00:07:51.870 --> 00:07:52.870
here prepare and type.

279
00:07:52.870 --> 00:07:54.870
I have access to both the methods.

280
00:07:54.870 --> 00:07:55.910
Isn't it fun?

281
00:07:55.910 --> 00:07:56.790
It is.

282
00:07:56.790 --> 00:07:57.870
So let's just say we say

283
00:07:57.870 --> 00:07:59.630
simply Chai type and the Chai

284
00:07:59.630 --> 00:08:00.590
type will be printed.

285
00:08:00.590 --> 00:08:02.750
Not only that, I can here

286
00:08:02.750 --> 00:08:04.390
just go ahead and say self

287
00:08:04.390 --> 00:08:06.990
dot and chai and I can run

288
00:08:06.990 --> 00:08:08.670
this method prepare as well.

289
00:08:08.670 --> 00:08:10.390
And I have to run this.

290
00:08:10.390 --> 00:08:11.990
How interesting that is.

291
00:08:13.030 --> 00:08:15.270
And even interesting to this,

292
00:08:16.150 --> 00:08:17.670
let's just say there is another.

293
00:08:17.670 --> 00:08:19.270
This is our regular Chai Shop.

294
00:08:19.270 --> 00:08:20.230
We will have another.

295
00:08:20.230 --> 00:08:21.829
Yes, I know too much.

296
00:08:21.829 --> 00:08:22.710
That's why I say is

297
00:08:22.710 --> 00:08:23.750
undivided attention.

298
00:08:24.390 --> 00:08:25.870
We also have one more Chai

299
00:08:25.870 --> 00:08:27.510
Shop which is fancy.

300
00:08:29.030 --> 00:08:30.950
Chai Shop.

301
00:08:30.950 --> 00:08:32.530
It's too fancy.

302
00:08:32.530 --> 00:08:33.730
This one just inherits

303
00:08:35.299 --> 00:08:37.090
let's just say Chai shop.

304
00:08:37.090 --> 00:08:38.610
So you have opened up a new branch.

305
00:08:39.250 --> 00:08:40.730
We are going too much in depth

306
00:08:40.730 --> 00:08:41.690
and that's what the production

307
00:08:41.690 --> 00:08:43.090
code looks like here.

308
00:08:43.090 --> 00:08:44.730
All I have to do is simply say

309
00:08:44.730 --> 00:08:47.690
that hey chicls, I'm taking

310
00:08:47.690 --> 00:08:49.450
a reference of this and I will

311
00:08:49.450 --> 00:08:50.810
simply go ahead and take a reference

312
00:08:50.810 --> 00:08:52.210
of this Masala Chai.

313
00:08:52.210 --> 00:08:53.570
So everything is available

314
00:08:53.570 --> 00:08:54.770
from the Masala Chai and you

315
00:08:54.770 --> 00:08:55.970
can use the same syntax.

316
00:08:55.970 --> 00:08:57.850
You can define the constructor,

317
00:08:57.850 --> 00:08:58.810
take all the values

318
00:08:58.810 --> 00:09:00.700
up here and conserve this.

319
00:09:00.700 --> 00:09:01.660
This would be reputation.

320
00:09:01.660 --> 00:09:03.100
I don't want to do that.

321
00:09:03.100 --> 00:09:04.500
But let's go ahead and take

322
00:09:04.500 --> 00:09:05.340
a summary of this.

323
00:09:05.340 --> 00:09:06.540
I know that's a lot.

324
00:09:06.540 --> 00:09:08.220
What we did here is just

325
00:09:08.220 --> 00:09:09.220
simply creating a class.

326
00:09:09.220 --> 00:09:10.500
There is no big deal here.

327
00:09:10.500 --> 00:09:12.060
I can just even minimize this.

328
00:09:12.060 --> 00:09:14.460
We know this part in the Masala Chai.

329
00:09:14.460 --> 00:09:15.340
For the first time we saw

330
00:09:15.340 --> 00:09:16.580
the syntax of inheritance

331
00:09:16.580 --> 00:09:17.580
which is just this much.

332
00:09:17.580 --> 00:09:17.980
It.

333
00:09:17.980 --> 00:09:18.940
That is it.

334
00:09:18.940 --> 00:09:20.780
We didn't did anything extra.

335
00:09:20.780 --> 00:09:22.020
We assume that if you create

336
00:09:22.020 --> 00:09:23.460
an object from the Masala Chai

337
00:09:23.460 --> 00:09:24.740
you will get all the values.

338
00:09:24.740 --> 00:09:25.900
You can just put up a dot

339
00:09:25.900 --> 00:09:27.060
and use add spices.

340
00:09:27.060 --> 00:09:29.210
But also you can use a dot and have

341
00:09:29.210 --> 00:09:30.890
the prepare method access as well.

342
00:09:30.890 --> 00:09:31.570
That is it.

343
00:09:32.210 --> 00:09:33.930
Now if I go up here, this is

344
00:09:33.930 --> 00:09:35.730
where the composition starts.

345
00:09:35.730 --> 00:09:37.410
So notice here this chai shop

346
00:09:37.410 --> 00:09:38.890
doesn't inherit anything, but

347
00:09:38.890 --> 00:09:40.810
inside the class I said I want to

348
00:09:40.810 --> 00:09:43.170
keep a reference of this base chai

349
00:09:43.170 --> 00:09:45.010
and this variable gets a reference

350
00:09:45.010 --> 00:09:46.530
to everything that's there in the

351
00:09:46.530 --> 00:09:47.410
base chai.

352
00:09:47.410 --> 00:09:49.090
Pretty interesting syntax.

353
00:09:49.090 --> 00:09:50.770
Now when we create and initialize

354
00:09:50.770 --> 00:09:53.170
and constructor, I simply says, hey,

355
00:09:53.170 --> 00:09:55.850
I will say self chai cls, but as

356
00:09:55.850 --> 00:09:58.150
soon as I create an object from it,

357
00:09:58.150 --> 00:09:59.310
now the regular thing starts.

358
00:09:59.310 --> 00:10:00.270
It's creating, literally

359
00:10:00.270 --> 00:10:01.870
creating an object and passing

360
00:10:01.870 --> 00:10:03.110
a reference in this.

361
00:10:03.110 --> 00:10:04.830
So I create a regular type of chai

362
00:10:04.830 --> 00:10:07.350
and pass on a reference to this one.

363
00:10:07.350 --> 00:10:09.790
Since this self chai is ultimately

364
00:10:09.790 --> 00:10:11.670
creating a base chai for me,

365
00:10:11.670 --> 00:10:14.150
what I can do is I can access all

366
00:10:14.150 --> 00:10:16.950
the methods of the base chai.

367
00:10:16.950 --> 00:10:19.110
So if I can access type, I

368
00:10:19.110 --> 00:10:20.790
can access prepare as well.

369
00:10:20.790 --> 00:10:22.950
And that's what exactly we did here.

370
00:10:22.950 --> 00:10:24.950
So here we access the self chai

371
00:10:24.950 --> 00:10:26.310
type because it's an object

372
00:10:26.850 --> 00:10:28.570
that's a composition and we can

373
00:10:28.570 --> 00:10:30.450
also access self chai prepare.

374
00:10:30.450 --> 00:10:31.490
Pretty interesting.

375
00:10:31.490 --> 00:10:32.970
Now let's create also some objects,

376
00:10:32.970 --> 00:10:34.010
although not really necessary,

377
00:10:34.010 --> 00:10:35.490
but I'll show you anyways.

378
00:10:36.210 --> 00:10:37.370
So let's just say you go ahead

379
00:10:37.370 --> 00:10:39.650
and say this will be a Chai shop.

380
00:10:39.650 --> 00:10:40.370
There you go.

381
00:10:40.370 --> 00:10:41.170
Access everything.

382
00:10:41.170 --> 00:10:43.410
So now if you go ahead and say shop,

383
00:10:43.410 --> 00:10:45.450
put up a dot, you get access to Chai

384
00:10:45.450 --> 00:10:47.890
Chai CLS serve, whichever you want

385
00:10:47.890 --> 00:10:49.890
to use, you can go ahead and use it.

386
00:10:49.890 --> 00:10:51.770
I will also have a fancy variable

387
00:10:51.770 --> 00:10:53.370
and I will say this one actually

388
00:10:53.370 --> 00:10:54.930
comes from Fancy Chai shop

389
00:10:54.930 --> 00:10:56.820
and and feel free to access any

390
00:10:56.820 --> 00:10:58.620
fancy method which are available.

391
00:10:58.620 --> 00:11:00.460
Chai Chai CLS, serve.

392
00:11:01.020 --> 00:11:02.420
Because hey, it also

393
00:11:02.420 --> 00:11:03.420
comes from there.

394
00:11:03.420 --> 00:11:04.340
So we can just go ahead

395
00:11:04.340 --> 00:11:05.020
and work on that.

396
00:11:05.020 --> 00:11:07.380
For example, the shop can actually

397
00:11:07.380 --> 00:11:10.460
go ahead and serve just like this.

398
00:11:10.460 --> 00:11:12.820
Not only that, fancy can also go

399
00:11:12.820 --> 00:11:14.540
ahead and serve because it actually

400
00:11:15.100 --> 00:11:17.780
inherits Masala chai, which further

401
00:11:17.780 --> 00:11:20.630
inherits the base chai as well.

402
00:11:20.630 --> 00:11:21.670
Pretty fun, isn't it?

403
00:11:21.670 --> 00:11:24.150
Yeah, that's linking this diagram is

404
00:11:24.150 --> 00:11:25.470
something that you have to make up

405
00:11:25.470 --> 00:11:27.910
in the brain only that only works.

406
00:11:27.910 --> 00:11:29.190
So this one can actually

407
00:11:29.190 --> 00:11:30.630
also go ahead and serve.

408
00:11:30.630 --> 00:11:31.310
There we go.

409
00:11:31.310 --> 00:11:32.310
Fancy also serves.

410
00:11:32.310 --> 00:11:34.310
The Chai shop also serves the chai.

411
00:11:34.870 --> 00:11:37.630
Now fancy the advantage is fancy

412
00:11:37.630 --> 00:11:40.870
has a method of not, like this.

413
00:11:41.830 --> 00:11:43.750
Do we have any method of adding,

414
00:11:44.630 --> 00:11:46.390
since fancy is add spices.

415
00:11:46.390 --> 00:11:48.790
My bad, its add.

416
00:11:50.630 --> 00:11:52.110
And we cannot actually go ahead

417
00:11:52.110 --> 00:11:55.590
and use it like this because I don't

418
00:11:55.590 --> 00:11:57.190
have an access to this masala chai

419
00:11:57.190 --> 00:11:59.030
directly in the fancy Chai shop.

420
00:11:59.770 --> 00:12:00.550
Because we are actually

421
00:12:00.550 --> 00:12:02.750
inheriting Chai shop but we never

422
00:12:02.750 --> 00:12:05.270
inherited the Masala Chai.

423
00:12:05.270 --> 00:12:06.470
So in order to access this

424
00:12:06.470 --> 00:12:07.750
I have to use this

425
00:12:07.750 --> 00:12:09.230
reference, this composition.

426
00:12:09.230 --> 00:12:12.150
So I have to say chaicls

427
00:12:12.150 --> 00:12:13.590
and through which I can actually

428
00:12:13.590 --> 00:12:16.400
access the add spices.

429
00:12:16.400 --> 00:12:17.840
Isn't it very interesting?

430
00:12:18.560 --> 00:12:20.120
It is little bit of a production

431
00:12:20.120 --> 00:12:21.720
level code, so it will take

432
00:12:21.720 --> 00:12:23.040
a little time to digest.

433
00:12:23.040 --> 00:12:24.640
But you'll get the idea.

434
00:12:24.640 --> 00:12:26.320
I can print it, no problem.

435
00:12:26.320 --> 00:12:27.640
But printing is not going

436
00:12:27.640 --> 00:12:29.040
to make any life easier.

437
00:12:29.040 --> 00:12:31.600
So you still have to figure out that.

438
00:12:31.600 --> 00:12:33.440
Okay, this is.

439
00:12:33.440 --> 00:12:35.040
Oh, we have a problem.

440
00:12:36.080 --> 00:12:37.880
Masalachaya is missing one

441
00:12:37.880 --> 00:12:39.520
positional requirement argument.

442
00:12:39.520 --> 00:12:41.200
Did we accepted any argument

443
00:12:41.200 --> 00:12:41.920
into this one?

444
00:12:42.440 --> 00:12:43.600
Oh yes, we shouldn't

445
00:12:43.600 --> 00:12:44.840
be actually doing it.

446
00:12:45.800 --> 00:12:46.720
But let me just go

447
00:12:46.720 --> 00:12:47.560
ahead and fix this.

448
00:12:48.760 --> 00:12:50.040
Now let's go ahead and read

449
00:12:50.040 --> 00:12:51.320
this error because

450
00:12:51.320 --> 00:12:52.840
this is the real programming.

451
00:12:52.840 --> 00:12:54.440
Nothing works out of the box.

452
00:12:54.440 --> 00:12:55.200
Let's see what is

453
00:12:55.200 --> 00:12:56.520
the problem that's going on.

454
00:12:56.520 --> 00:12:58.360
It is saying that the Masalachay

455
00:12:58.360 --> 00:13:01.080
addspices is missing one argument.

456
00:13:01.080 --> 00:13:02.480
And if you remember, we have

457
00:13:02.480 --> 00:13:03.720
discussed this exact same

458
00:13:03.720 --> 00:13:05.560
problem, the argument self.

459
00:13:05.560 --> 00:13:07.080
So what is happening here is

460
00:13:07.760 --> 00:13:09.240
you are using this reference

461
00:13:09.240 --> 00:13:10.700
of the object and, and this

462
00:13:10.700 --> 00:13:12.180
requires some of the context.

463
00:13:12.180 --> 00:13:13.500
It doesn't have any context.

464
00:13:13.500 --> 00:13:14.900
So in the fancy you're

465
00:13:14.900 --> 00:13:15.500
creating the object.

466
00:13:15.500 --> 00:13:17.500
But Masala Chaya requires that hey,

467
00:13:17.500 --> 00:13:19.300
you give me something as self.

468
00:13:19.300 --> 00:13:21.220
It has no idea who is calling it.

469
00:13:21.220 --> 00:13:23.300
It is a missing context problem.

470
00:13:23.300 --> 00:13:25.380
So how can we go ahead and fix this?

471
00:13:25.380 --> 00:13:26.820
It can be fixed,

472
00:13:26.820 --> 00:13:28.740
with the existing solution as well.

473
00:13:28.740 --> 00:13:29.780
If you remember.

474
00:13:29.780 --> 00:13:32.060
Now this fancy, instead

475
00:13:32.060 --> 00:13:33.740
of referencing this because what

476
00:13:33.740 --> 00:13:35.620
it's doing, it's actually going

477
00:13:35.620 --> 00:13:37.210
into the Masala Chai.

478
00:13:37.210 --> 00:13:37.610
All right.

479
00:13:37.610 --> 00:13:39.530
But you forgot one thing.

480
00:13:39.530 --> 00:13:40.370
We are inheriting

481
00:13:40.370 --> 00:13:41.690
the Chai shop as well.

482
00:13:41.690 --> 00:13:43.810
So that means as soon as the fancy

483
00:13:43.810 --> 00:13:45.370
Chai shop is being created,

484
00:13:46.250 --> 00:13:47.570
always and always, whenever

485
00:13:47.570 --> 00:13:49.450
an object is created, it always is

486
00:13:49.450 --> 00:13:50.970
created by the constructor.

487
00:13:50.970 --> 00:13:52.410
If there is no constructor,

488
00:13:52.410 --> 00:13:53.850
the class will automatically

489
00:13:53.850 --> 00:13:54.810
create a constructor

490
00:13:54.810 --> 00:13:55.810
behind the scene for you.

491
00:13:55.810 --> 00:13:57.370
So constructor is always there.

492
00:13:57.370 --> 00:13:58.610
And it also gave us a chance

493
00:13:58.610 --> 00:13:59.930
to discuss about the constructor,

494
00:13:59.930 --> 00:14:01.450
how good the errors are.

495
00:14:01.450 --> 00:14:02.650
So if I go ahead and create

496
00:14:02.650 --> 00:14:03.730
a constructor via this

497
00:14:03.730 --> 00:14:05.260
fancy Chai shop,

498
00:14:05.260 --> 00:14:06.700
this might have done it somehow.

499
00:14:06.700 --> 00:14:08.780
So this one no constructor here.

500
00:14:08.780 --> 00:14:10.460
So whose constructor might be used?

501
00:14:10.460 --> 00:14:11.580
The base class.

502
00:14:11.580 --> 00:14:12.580
Does the Chai shop

503
00:14:12.580 --> 00:14:13.540
has any constructor?

504
00:14:13.540 --> 00:14:14.860
Yes, it has the constructor.

505
00:14:14.860 --> 00:14:15.580
This is the one.

506
00:14:16.140 --> 00:14:17.820
Are we storing the all references

507
00:14:17.820 --> 00:14:20.020
of Chai Cls here in the Chai?

508
00:14:20.020 --> 00:14:21.180
Yes, we are.

509
00:14:21.180 --> 00:14:22.380
And this is an object

510
00:14:22.380 --> 00:14:23.500
of the base chai.

511
00:14:23.500 --> 00:14:24.940
So the problem is solved here.

512
00:14:25.500 --> 00:14:27.180
This one didn't had an idea

513
00:14:27.180 --> 00:14:29.020
of how to provide a reference.

514
00:14:29.020 --> 00:14:30.180
But if I go ahead and use

515
00:14:30.180 --> 00:14:31.500
the constructor, that means now

516
00:14:31.500 --> 00:14:34.110
my object is calling the method,

517
00:14:34.110 --> 00:14:35.790
so I have the reference.

518
00:14:35.790 --> 00:14:36.830
Got it.

519
00:14:36.830 --> 00:14:38.190
I know it will take one more

520
00:14:38.190 --> 00:14:39.790
Var time to Var this, but let's

521
00:14:39.790 --> 00:14:40.750
go ahead and run this.

522
00:14:40.750 --> 00:14:42.270
Probably another error will help us

523
00:14:42.270 --> 00:14:43.550
to learn something more.

524
00:14:43.550 --> 00:14:44.910
Oh, this time it works.

525
00:14:45.630 --> 00:14:46.950
So this whole sequence

526
00:14:46.950 --> 00:14:48.430
of how things are going on.

527
00:14:48.430 --> 00:14:49.590
Let me summarize this one

528
00:14:49.590 --> 00:14:50.910
more time so that it will help you

529
00:14:50.910 --> 00:14:51.870
to understand this.

530
00:14:51.870 --> 00:14:53.070
Here's the summary part.

531
00:14:53.790 --> 00:14:55.710
We simply created a base class.

532
00:14:55.710 --> 00:14:57.350
Every class has a constructor.

533
00:14:57.350 --> 00:14:58.630
If you don't create a constructor,

534
00:14:58.630 --> 00:14:59.830
the class will automatically

535
00:14:59.830 --> 00:15:01.230
create one behind the scene

536
00:15:01.230 --> 00:15:02.430
at the time of execution.

537
00:15:02.960 --> 00:15:03.800
We have two methods,

538
00:15:03.800 --> 00:15:04.960
Init and prepare.

539
00:15:04.960 --> 00:15:07.040
That's it done in the Masala

540
00:15:07.040 --> 00:15:08.400
Chai we have just one method.

541
00:15:08.400 --> 00:15:09.720
But hey, I cannot use this

542
00:15:09.720 --> 00:15:10.720
method directly because

543
00:15:11.360 --> 00:15:12.600
it has no constructor.

544
00:15:12.600 --> 00:15:14.680
So either call it via the class,

545
00:15:14.680 --> 00:15:16.040
but if you'll create directly

546
00:15:16.040 --> 00:15:17.640
call it via the class the self,

547
00:15:17.640 --> 00:15:19.080
how you will pass on the context.

548
00:15:19.080 --> 00:15:20.160
Very difficult.

549
00:15:20.160 --> 00:15:21.360
So either just create it

550
00:15:21.360 --> 00:15:22.800
an object and then call it.

551
00:15:22.800 --> 00:15:23.760
Got it.

552
00:15:23.760 --> 00:15:25.840
Then this starts the composition.

553
00:15:25.840 --> 00:15:26.960
So sometimes we don't want

554
00:15:26.960 --> 00:15:29.160
to inherit the classes, but we want

555
00:15:29.160 --> 00:15:30.470
to take a reference of it.

556
00:15:30.470 --> 00:15:32.150
So we have got the reference of it.

557
00:15:32.150 --> 00:15:34.350
And now within this class I am

558
00:15:34.350 --> 00:15:35.390
actually calling an object.

559
00:15:35.390 --> 00:15:36.750
So this is literally creating

560
00:15:36.750 --> 00:15:38.070
an object from this class

561
00:15:38.070 --> 00:15:39.750
just by passing it here.

562
00:15:39.750 --> 00:15:41.350
I'm not using the parenthesis so

563
00:15:41.350 --> 00:15:42.670
that I can hold the reference that

564
00:15:42.670 --> 00:15:44.670
okay, I'll create an object, but in

565
00:15:44.670 --> 00:15:47.030
some time, not just immediately.

566
00:15:47.030 --> 00:15:48.270
So this is exactly where we

567
00:15:48.270 --> 00:15:49.790
created and we hold the reference

568
00:15:49.790 --> 00:15:50.750
all of this up here.

569
00:15:50.750 --> 00:15:52.470
So this is literally an object

570
00:15:52.470 --> 00:15:53.590
and this object can be

571
00:15:53.590 --> 00:15:54.870
used anywhere in the class.

572
00:15:54.870 --> 00:15:55.550
Pretty easy.

573
00:15:55.550 --> 00:15:56.070
Fun stuff.

574
00:15:56.640 --> 00:15:57.800
We also created another one

575
00:15:57.800 --> 00:15:59.200
which is Fancy Chai Shop

576
00:15:59.200 --> 00:16:01.040
which inherits as well.

577
00:16:01.040 --> 00:16:03.120
So it's an example of inheritance.

578
00:16:03.120 --> 00:16:04.360
It's also an example

579
00:16:04.360 --> 00:16:05.480
of composition as well.

580
00:16:05.480 --> 00:16:07.160
So we are inheriting and as well

581
00:16:07.160 --> 00:16:09.040
as you are compositing as well.

582
00:16:09.040 --> 00:16:10.880
Pretty complex, but this is

583
00:16:10.880 --> 00:16:11.720
how the production grade.

584
00:16:11.720 --> 00:16:12.800
Now we'll increase the level

585
00:16:12.800 --> 00:16:14.480
of complexity in the code.

586
00:16:14.480 --> 00:16:16.000
So Shop Chai Shop.

587
00:16:16.000 --> 00:16:17.040
Pretty easy.

588
00:16:17.040 --> 00:16:18.720
Fancy Fancy Shop.

589
00:16:18.720 --> 00:16:19.360
Pretty easy.

590
00:16:19.360 --> 00:16:20.480
We use the serve method

591
00:16:20.480 --> 00:16:21.120
in both of them.

592
00:16:21.120 --> 00:16:22.520
No problem, because serve

593
00:16:22.520 --> 00:16:24.990
actually doesn't do much.

594
00:16:24.990 --> 00:16:25.710
Not here.

595
00:16:25.710 --> 00:16:26.750
The serve is here.

596
00:16:26.750 --> 00:16:28.830
If any object creates it.

597
00:16:28.830 --> 00:16:30.190
Where is the serve?

598
00:16:30.190 --> 00:16:30.790
Here it is.

599
00:16:30.790 --> 00:16:31.630
The serve method is

600
00:16:31.630 --> 00:16:33.710
in the Chai shop, obviously.

601
00:16:33.710 --> 00:16:36.390
And any object created from the Chai

602
00:16:36.390 --> 00:16:38.110
shop or any of the class which

603
00:16:38.110 --> 00:16:40.310
inherits it like Fancy shop can

604
00:16:40.310 --> 00:16:41.870
actually call it no problem at all.

605
00:16:41.870 --> 00:16:43.070
It has the context.

606
00:16:43.070 --> 00:16:45.390
All right, so object is calling it.

607
00:16:45.390 --> 00:16:46.590
Object is calling it.

608
00:16:46.590 --> 00:16:47.990
We saw an error when we

609
00:16:47.990 --> 00:16:50.140
tried to Fancy, when we try

610
00:16:50.140 --> 00:16:51.180
to add the spices.

611
00:16:51.180 --> 00:16:52.060
Why?

612
00:16:52.060 --> 00:16:53.020
Because in order to add

613
00:16:53.020 --> 00:16:54.700
the spices, you are not calling

614
00:16:54.700 --> 00:16:55.980
from the base class, you're

615
00:16:55.980 --> 00:16:57.340
calling from a composition.

616
00:16:57.340 --> 00:16:59.620
Now, in the composition, this is

617
00:16:59.620 --> 00:17:01.260
the reference that I'm having.

618
00:17:01.260 --> 00:17:02.780
So there might be some

619
00:17:02.780 --> 00:17:03.940
constructor that might have

620
00:17:03.940 --> 00:17:04.980
called while creating this.

621
00:17:04.980 --> 00:17:06.859
If I haven't provided a constructor,

622
00:17:06.859 --> 00:17:08.619
Chai Shop might have provided.

623
00:17:08.619 --> 00:17:10.260
So Chai Shop actually gives me

624
00:17:10.260 --> 00:17:12.380
a reference of this and I create

625
00:17:12.380 --> 00:17:14.420
a constructor, from here.

626
00:17:14.420 --> 00:17:16.010
So this is the constructor

627
00:17:16.010 --> 00:17:17.770
and I take the reference or I create

628
00:17:17.770 --> 00:17:20.170
a new variable which is chai.

629
00:17:20.170 --> 00:17:21.770
So this has the context.

630
00:17:21.770 --> 00:17:23.290
So my context problem is solved.

631
00:17:23.290 --> 00:17:24.530
And simply I go up here that.

632
00:17:24.530 --> 00:17:25.609
Hey, fancy.

633
00:17:25.609 --> 00:17:27.410
Now you have access to this chai,

634
00:17:27.410 --> 00:17:29.610
and through the chai, the object

635
00:17:29.610 --> 00:17:32.090
of this class or the base class

636
00:17:32.090 --> 00:17:33.690
can call any of the method.

637
00:17:33.690 --> 00:17:34.490
So there we go.

638
00:17:35.290 --> 00:17:35.810
All right.

639
00:17:35.810 --> 00:17:36.810
Similarly, you can have

640
00:17:36.810 --> 00:17:38.330
a, composition for

641
00:17:38.330 --> 00:17:39.930
the base chai as well.

642
00:17:39.930 --> 00:17:41.330
You can have this and run those

643
00:17:41.330 --> 00:17:43.490
methods as well by creating this.

644
00:17:43.490 --> 00:17:44.530
Pretty simple.

645
00:17:44.530 --> 00:17:46.130
Not that simple, to be honest.

646
00:17:46.130 --> 00:17:47.730
So again, as I mentioned, this class

647
00:17:47.730 --> 00:17:49.210
requires undivided attention,

648
00:17:49.210 --> 00:17:51.450
but the topics like inheritance is

649
00:17:51.450 --> 00:17:52.970
being taught all over the places.

650
00:17:52.970 --> 00:17:54.850
But topics like composition are very

651
00:17:54.850 --> 00:17:56.850
rare to see in the video courses.

652
00:17:56.850 --> 00:17:58.210
I brought it up for you.

653
00:17:58.210 --> 00:17:59.810
Make sure to rate us as well.

654
00:17:59.810 --> 00:18:00.690
Let's go ahead and catch

655
00:18:00.690 --> 00:18:01.490
up in next video.
