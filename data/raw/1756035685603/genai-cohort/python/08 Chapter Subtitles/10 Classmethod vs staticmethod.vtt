WEBVTT

1
00:00:00.880 --> 00:00:02.240
All right, so in the last

2
00:00:02.240 --> 00:00:03.680
video we saw that how

3
00:00:03.680 --> 00:00:04.880
the static method works.

4
00:00:04.880 --> 00:00:05.920
And it's a pretty interesting

5
00:00:05.920 --> 00:00:07.080
way to declare utilities

6
00:00:07.080 --> 00:00:08.560
and all those things.

7
00:00:08.560 --> 00:00:10.600
But there is one, drawback or kind

8
00:00:10.600 --> 00:00:11.920
of a thing where the static

9
00:00:11.920 --> 00:00:13.120
method doesn't work really well,

10
00:00:13.120 --> 00:00:15.160
which is when you initialize an

11
00:00:15.160 --> 00:00:16.600
object, the static methods are

12
00:00:16.600 --> 00:00:18.080
never designed to initialize any

13
00:00:18.080 --> 00:00:18.720
objects.

14
00:00:18.720 --> 00:00:20.400
It just work is designed to.

15
00:00:20.400 --> 00:00:21.680
So that class can actually

16
00:00:21.680 --> 00:00:23.200
direct, invoke that and can

17
00:00:23.200 --> 00:00:24.560
just use it like a utility.

18
00:00:24.560 --> 00:00:25.720
But there is also one more

19
00:00:25.720 --> 00:00:27.400
interesting thing, which is how do

20
00:00:27.400 --> 00:00:29.360
you control the constructor?

21
00:00:29.360 --> 00:00:31.080
We have seen we can use init method

22
00:00:31.080 --> 00:00:32.600
for declaring a constructor, but can

23
00:00:32.600 --> 00:00:34.240
we have more than one constructor?

24
00:00:35.040 --> 00:00:36.000
Sadly, no.

25
00:00:36.000 --> 00:00:37.360
You can have just one constructor,

26
00:00:37.360 --> 00:00:38.920
but there are ways to control the

27
00:00:38.920 --> 00:00:40.400
constructor and get a feeling like

28
00:00:40.400 --> 00:00:42.400
we have more than one constructor

29
00:00:42.400 --> 00:00:45.239
and more than one ways of kind of

30
00:00:45.239 --> 00:00:47.880
initiating an object from the class

31
00:00:47.880 --> 00:00:48.320
itself.

32
00:00:48.320 --> 00:00:49.760
It's a very interesting topic

33
00:00:49.760 --> 00:00:51.720
and sometimes it feels like it's

34
00:00:51.720 --> 00:00:53.160
very similar to static method.

35
00:00:53.160 --> 00:00:54.360
But I'll walk you through with that.

36
00:00:54.360 --> 00:00:55.640
So, first of all, I've

37
00:00:55.640 --> 00:00:56.850
created this nice diagram.

38
00:00:56.850 --> 00:00:57.480
So.

39
00:00:57.480 --> 00:00:58.440
And I will walk you through

40
00:00:58.440 --> 00:00:59.720
how it's being done.

41
00:00:59.720 --> 00:01:01.360
So the step one is going

42
00:01:01.360 --> 00:01:02.120
to be like this.

43
00:01:02.120 --> 00:01:03.760
We will simply go ahead and say

44
00:01:03.760 --> 00:01:05.880
that we have this class methods,

45
00:01:05.880 --> 00:01:07.080
we have the static method.

46
00:01:07.080 --> 00:01:08.240
We'll go through with the difference

47
00:01:08.240 --> 00:01:09.720
between each one of them.

48
00:01:09.720 --> 00:01:10.920
But first of all, we are going

49
00:01:10.920 --> 00:01:13.720
to go ahead and write, some code.

50
00:01:13.720 --> 00:01:15.160
So that is the easiest way

51
00:01:15.160 --> 00:01:16.520
and the most beautiful way

52
00:01:16.520 --> 00:01:18.160
to learn about the class method.

53
00:01:18.160 --> 00:01:20.280
So let's take some chi orders.

54
00:01:20.280 --> 00:01:22.040
I'll go ahead and say class

55
00:01:22.040 --> 00:01:23.970
chorder, and you take

56
00:01:23.970 --> 00:01:25.010
the order just like that.

57
00:01:25.970 --> 00:01:27.890
And, we simply go ahead and say

58
00:01:27.890 --> 00:01:29.010
that we want to create

59
00:01:29.010 --> 00:01:30.930
an constructor just like this.

60
00:01:30.930 --> 00:01:32.970
And you take, while taking the order,

61
00:01:32.970 --> 00:01:34.250
you ask them, hey, what's

62
00:01:34.250 --> 00:01:36.570
the T type you want to have, what's

63
00:01:36.570 --> 00:01:39.890
the sweetness you want to have?

64
00:01:39.890 --> 00:01:42.290
And what's the size you want to have?

65
00:01:42.290 --> 00:01:43.730
Pretty basic stuff.

66
00:01:43.730 --> 00:01:45.290
And as you know, when we declare

67
00:01:45.290 --> 00:01:46.490
the constructor, we simply go

68
00:01:46.490 --> 00:01:47.730
ahead and declare the properties

69
00:01:47.730 --> 00:01:48.970
within the constructor itself.

70
00:01:48.970 --> 00:01:51.580
This will be tea type, and we'll

71
00:01:51.580 --> 00:01:53.460
get the value from tea type.

72
00:01:53.460 --> 00:01:56.100
We'll have self dot and we'll call

73
00:01:56.100 --> 00:01:58.260
this one as sweetness, which will

74
00:01:58.260 --> 00:01:59.780
get its value from sweetness.

75
00:01:59.780 --> 00:02:01.140
And we'll have one more property

76
00:02:01.140 --> 00:02:03.740
which will be self size, which

77
00:02:03.740 --> 00:02:06.260
will get the value from size.

78
00:02:06.260 --> 00:02:07.100
All right, this is

79
00:02:07.100 --> 00:02:07.900
very standard stuff.

80
00:02:07.900 --> 00:02:09.820
We have seen this many times now.

81
00:02:09.820 --> 00:02:11.300
If you want to have multiple

82
00:02:11.300 --> 00:02:13.220
constructor, this is somebody is

83
00:02:13.220 --> 00:02:14.500
creating an object and providing

84
00:02:14.500 --> 00:02:16.450
you each individual values but

85
00:02:16.450 --> 00:02:17.530
there could be a chance that

86
00:02:17.530 --> 00:02:18.690
somebody might provide you a

87
00:02:18.690 --> 00:02:20.850
value in dictionary format or

88
00:02:20.850 --> 00:02:22.050
maybe a string format.

89
00:02:22.050 --> 00:02:22.970
And you want to have

90
00:02:22.970 --> 00:02:24.770
a constructor just like that.

91
00:02:24.770 --> 00:02:26.490
That whenever an object is

92
00:02:26.490 --> 00:02:28.250
being created, somebody can

93
00:02:28.250 --> 00:02:29.370
provide me direct values.

94
00:02:29.370 --> 00:02:30.210
We accept that.

95
00:02:30.210 --> 00:02:31.730
Somebody can provide me the value in

96
00:02:31.730 --> 00:02:33.650
dictionary format, we accept that.

97
00:02:33.650 --> 00:02:35.330
And somebody can provide me value

98
00:02:35.330 --> 00:02:36.410
in the string format.

99
00:02:36.410 --> 00:02:38.170
We also accept that that

100
00:02:38.170 --> 00:02:39.490
is the whole goal.

101
00:02:39.490 --> 00:02:41.570
So the step one of doing that

102
00:02:41.570 --> 00:02:43.010
is first of all you say class

103
00:02:43.010 --> 00:02:44.690
method, it's a decorator.

104
00:02:44.690 --> 00:02:45.530
Now that we understand

105
00:02:45.530 --> 00:02:47.210
the decorator and importance of it,

106
00:02:47.210 --> 00:02:48.810
then this is how it works.

107
00:02:48.810 --> 00:02:50.490
First of all, let's define a method.

108
00:02:50.490 --> 00:02:51.770
Let's call this one that we

109
00:02:51.770 --> 00:02:52.930
are accepting the value

110
00:02:52.930 --> 00:02:54.410
in the dictionary format.

111
00:02:54.410 --> 00:02:56.810
And the most differential factor from

112
00:02:56.810 --> 00:02:58.770
any other method that you design

113
00:02:58.770 --> 00:03:01.770
in any class is it doesn't get self.

114
00:03:01.770 --> 00:03:02.810
Yeah, that's the most

115
00:03:02.810 --> 00:03:03.770
interesting part.

116
00:03:03.770 --> 00:03:06.650
It gets cls, which is also a keyword.

117
00:03:06.650 --> 00:03:08.650
It means that we are getting a whole

118
00:03:08.650 --> 00:03:10.250
class reference in this one.

119
00:03:10.250 --> 00:03:12.970
And then you just get the order

120
00:03:12.970 --> 00:03:14.480
data just like that.

121
00:03:14.480 --> 00:03:15.440
This time you're not getting

122
00:03:15.440 --> 00:03:17.040
individual data, you're getting

123
00:03:17.040 --> 00:03:18.720
passed on as a dictionary.

124
00:03:18.720 --> 00:03:20.000
So how do we work with that?

125
00:03:21.120 --> 00:03:22.640
We simply go ahead and return.

126
00:03:22.640 --> 00:03:24.000
And how do we return that?

127
00:03:24.000 --> 00:03:25.360
That's interesting syntax.

128
00:03:25.360 --> 00:03:26.120
Follow this, up.

129
00:03:26.120 --> 00:03:27.240
This is a syntax, nothing

130
00:03:27.240 --> 00:03:28.320
to do with the logic.

131
00:03:28.320 --> 00:03:29.160
We simply go ahead

132
00:03:29.160 --> 00:03:30.480
and say this is a class.

133
00:03:30.480 --> 00:03:31.920
So I can just go ahead and create

134
00:03:31.920 --> 00:03:33.120
a class just like this.

135
00:03:33.680 --> 00:03:35.840
This is almost internally

136
00:03:35.840 --> 00:03:37.160
like calling the constructor

137
00:03:37.160 --> 00:03:38.640
from the same class.

138
00:03:38.640 --> 00:03:41.280
The CLS is a reference to the class.

139
00:03:41.280 --> 00:03:42.830
So, so this whole class.

140
00:03:42.830 --> 00:03:44.470
So when you say CLS just like

141
00:03:44.470 --> 00:03:45.710
this, that means I'm passing

142
00:03:45.710 --> 00:03:47.390
the whole values within this

143
00:03:47.390 --> 00:03:49.150
constructor behind the scene.

144
00:03:49.150 --> 00:03:50.750
So I can just come up here and can

145
00:03:50.750 --> 00:03:53.070
say that, okay, here from the order

146
00:03:53.070 --> 00:03:55.390
data, I want to extract a key.

147
00:03:55.390 --> 00:03:56.910
So first of all, the key that goes

148
00:03:56.910 --> 00:03:59.990
up here will be in the quotes,

149
00:03:59.990 --> 00:04:02.590
of course, will be ttype.

150
00:04:02.590 --> 00:04:03.750
And remember, this is how

151
00:04:03.750 --> 00:04:04.910
the values are being expected

152
00:04:04.910 --> 00:04:05.910
in this constructor.

153
00:04:05.910 --> 00:04:07.710
So you go ahead and do exactly same

154
00:04:08.320 --> 00:04:08.800
and I'll put

155
00:04:08.800 --> 00:04:10.560
up a comma, we need two of them.

156
00:04:10.560 --> 00:04:12.320
So the second key, you guessed

157
00:04:12.320 --> 00:04:14.880
it right, will be sweetness.

158
00:04:15.600 --> 00:04:17.440
This third key will be

159
00:04:19.200 --> 00:04:21.120
size, and that is it.

160
00:04:21.120 --> 00:04:23.160
So how interesting a way that now you

161
00:04:23.160 --> 00:04:24.880
have not only just one constructor,

162
00:04:24.880 --> 00:04:26.080
but you can actually accept

163
00:04:26.080 --> 00:04:27.720
the value as a dictionary as well.

164
00:04:27.720 --> 00:04:29.120
But behind the scene it's the same

165
00:04:29.120 --> 00:04:30.880
constructor that is getting called.

166
00:04:30.880 --> 00:04:32.440
And, can we design one more method

167
00:04:32.440 --> 00:04:33.640
just like this for practice?

168
00:04:33.640 --> 00:04:34.560
Of course we can.

169
00:04:35.220 --> 00:04:36.740
We will again use class

170
00:04:36.740 --> 00:04:37.740
method just like this.

171
00:04:37.740 --> 00:04:38.620
And let's Just say this

172
00:04:38.620 --> 00:04:39.860
time you want to take the value

173
00:04:39.860 --> 00:04:42.660
from string string.

174
00:04:43.220 --> 00:04:45.100
Just make sure you are designing

175
00:04:45.100 --> 00:04:46.900
it such a way that you are preparing

176
00:04:46.900 --> 00:04:48.420
for a string to come up here.

177
00:04:48.420 --> 00:04:49.180
This is class.

178
00:04:49.180 --> 00:04:51.030
And this time somebody gives us

179
00:04:51.030 --> 00:04:53.260
order string or order data.

180
00:04:53.260 --> 00:04:54.740
Could be same variable,

181
00:04:54.740 --> 00:04:55.940
no big deal there.

182
00:04:55.940 --> 00:04:57.220
And this time what I'm going

183
00:04:57.220 --> 00:04:59.020
to see is I have three variables.

184
00:04:59.020 --> 00:05:00.860
The first one is ttype.

185
00:05:00.860 --> 00:05:01.660
I have another one

186
00:05:01.660 --> 00:05:03.260
which is sweetness.

187
00:05:03.260 --> 00:05:05.420
And I have another one size.

188
00:05:06.220 --> 00:05:08.060
And I am getting all of them value

189
00:05:08.060 --> 00:05:09.660
from the order string.

190
00:05:09.660 --> 00:05:11.820
But I want to split it

191
00:05:11.820 --> 00:05:13.660
and I want to split it based on.

192
00:05:14.380 --> 00:05:15.340
Depends on how you're

193
00:05:15.340 --> 00:05:15.820
taking the value.

194
00:05:15.820 --> 00:05:17.020
Let's just say we are splitting

195
00:05:17.020 --> 00:05:18.220
them based on dashes.

196
00:05:18.220 --> 00:05:20.180
Could be comma as well, but we'll

197
00:05:20.180 --> 00:05:21.580
just grab the value just like this.

198
00:05:22.540 --> 00:05:24.300
All right, but this is not done yet.

199
00:05:24.890 --> 00:05:26.620
End of the day, always, always

200
00:05:26.620 --> 00:05:27.860
this kind of a method has

201
00:05:27.860 --> 00:05:29.820
to call the class just like this

202
00:05:29.820 --> 00:05:31.260
and has to call constructor.

203
00:05:31.820 --> 00:05:32.620
The rest of the,

204
00:05:33.230 --> 00:05:35.260
whole process is exactly same.

205
00:05:35.260 --> 00:05:35.940
We have to get

206
00:05:35.940 --> 00:05:37.580
the sweetness and the size.

207
00:05:37.580 --> 00:05:38.500
And this is it.

208
00:05:38.500 --> 00:05:38.900
This is.

209
00:05:38.900 --> 00:05:40.860
You are overwriting the constructor.

210
00:05:40.860 --> 00:05:42.220
Now the most important part

211
00:05:42.220 --> 00:05:43.300
is, all right, we get

212
00:05:43.300 --> 00:05:45.100
this, this part is all easy.

213
00:05:45.100 --> 00:05:47.020
How do we create object from this?

214
00:05:47.020 --> 00:05:48.020
Now creating the basic

215
00:05:48.020 --> 00:05:48.740
object is fine.

216
00:05:48.740 --> 00:05:49.660
I know you can do this.

217
00:05:49.660 --> 00:05:50.860
I'll show you how to actually

218
00:05:51.660 --> 00:05:53.260
utilize, these two methods.

219
00:05:53.260 --> 00:05:54.980
Because if still at this point

220
00:05:54.980 --> 00:05:56.420
in the course you don't know how

221
00:05:56.420 --> 00:05:58.970
to create an object and from this

222
00:05:58.970 --> 00:06:00.490
class and get these values.

223
00:06:00.490 --> 00:06:01.330
Oh man, you need

224
00:06:01.330 --> 00:06:03.090
to rewatch the videos again.

225
00:06:03.090 --> 00:06:04.770
Let me go through with this one.

226
00:06:04.770 --> 00:06:05.810
So let's just say we have

227
00:06:05.810 --> 00:06:07.370
a order one and this order

228
00:06:07.370 --> 00:06:09.050
one this time actually takes

229
00:06:09.050 --> 00:06:10.130
order from the chai order.

230
00:06:10.130 --> 00:06:11.810
But instead of passing it like this,

231
00:06:11.810 --> 00:06:13.490
you use a method as

232
00:06:13.490 --> 00:06:14.690
soon as you put up a dot.

233
00:06:14.690 --> 00:06:15.650
Now you can take order

234
00:06:15.650 --> 00:06:17.130
in the dictionary format or string

235
00:06:17.130 --> 00:06:18.250
and you will see this pattern

236
00:06:18.250 --> 00:06:19.570
quite a lot in Python.

237
00:06:19.570 --> 00:06:20.890
And here I have to say

238
00:06:20.890 --> 00:06:21.810
the key value pair.

239
00:06:21.810 --> 00:06:22.690
So this is my key.

240
00:06:22.690 --> 00:06:24.010
So first of all the key will

241
00:06:24.010 --> 00:06:26.920
go like this, so ttype.

242
00:06:26.920 --> 00:06:29.080
And then I can just provide the value

243
00:06:29.080 --> 00:06:31.400
which will be masala.

244
00:06:32.120 --> 00:06:33.720
Then another key value pair,

245
00:06:35.240 --> 00:06:38.160
sweetness, and its value is going

246
00:06:38.160 --> 00:06:40.680
to be, I don't know, medium,

247
00:06:41.480 --> 00:06:43.040
I don't know what even stands

248
00:06:43.040 --> 00:06:45.320
for medium, but you get the idea.

249
00:06:45.320 --> 00:06:46.440
And we'll have the last

250
00:06:46.440 --> 00:06:48.440
one which is size.

251
00:06:49.320 --> 00:06:51.440
And once I give it a size, the size

252
00:06:51.440 --> 00:06:53.950
will be, I'll take a large one this

253
00:06:53.950 --> 00:06:56.190
time and this is completely valid.

254
00:06:56.190 --> 00:06:56.950
Completely.

255
00:06:56.950 --> 00:06:57.790
Fine.

256
00:06:57.790 --> 00:06:59.870
And once I have, let me also

257
00:06:59.870 --> 00:07:01.470
show you the Order 2 as well.

258
00:07:01.470 --> 00:07:04.470
Order 2 this is exactly same chi

259
00:07:04.470 --> 00:07:06.070
order but this time you are grabbing

260
00:07:06.070 --> 00:07:08.070
the value from the string and as

261
00:07:08.070 --> 00:07:09.430
we have designed it this way.

262
00:07:09.430 --> 00:07:12.990
So we'll have a ginger ginger.

263
00:07:12.990 --> 00:07:14.190
Then we have a dash.

264
00:07:15.630 --> 00:07:16.830
We'll take the low

265
00:07:16.830 --> 00:07:18.710
sugar and then dash and we'll

266
00:07:18.710 --> 00:07:19.830
call this one as small.

267
00:07:20.960 --> 00:07:21.800
So automatically it

268
00:07:21.800 --> 00:07:22.800
will split this up.

269
00:07:23.360 --> 00:07:24.720
Now let's go ahead and print

270
00:07:24.720 --> 00:07:25.920
what do we get the value

271
00:07:25.920 --> 00:07:27.360
in the order 1 and order 2.

272
00:07:27.360 --> 00:07:28.480
That's most important part,

273
00:07:28.480 --> 00:07:30.400
we can just grab any one.

274
00:07:30.400 --> 00:07:32.320
Doesn't really mean order 1 is fine.

275
00:07:32.320 --> 00:07:33.400
This next one you'll

276
00:07:33.400 --> 00:07:34.800
automatically get it.

277
00:07:34.800 --> 00:07:37.440
I'll open this up and let's see,

278
00:07:37.440 --> 00:07:39.840
we have a Python 3 this time 10.

279
00:07:40.480 --> 00:07:41.760
There we go.

280
00:07:41.760 --> 00:07:43.880
And notice here it says hey, I'm

281
00:07:43.880 --> 00:07:45.920
still an object of chi order object

282
00:07:45.920 --> 00:07:47.630
at best wherever the location is.

283
00:07:47.630 --> 00:07:48.670
This is interesting.

284
00:07:49.390 --> 00:07:50.750
Now another interesting thing

285
00:07:50.750 --> 00:07:52.030
that you can do is you can

286
00:07:52.030 --> 00:07:53.870
use so many dunders here.

287
00:07:53.870 --> 00:07:55.510
So one of the dunder that you

288
00:07:55.510 --> 00:07:57.550
will see is this dictionary.

289
00:07:57.550 --> 00:07:58.910
And let's see what happens

290
00:07:58.910 --> 00:08:00.350
when I go ahead and run this.

291
00:08:00.350 --> 00:08:01.630
So notice here all

292
00:08:01.630 --> 00:08:02.750
the values are here.

293
00:08:02.750 --> 00:08:04.150
So all the dictionaries are

294
00:08:04.150 --> 00:08:05.750
with me still if I go ahead

295
00:08:05.750 --> 00:08:07.390
and pass on the dictionary.

296
00:08:07.390 --> 00:08:09.590
Now this dict dunder is

297
00:08:09.590 --> 00:08:10.670
actually very interesting.

298
00:08:10.670 --> 00:08:13.210
Although you have this as a string.

299
00:08:13.210 --> 00:08:14.090
Now notice here, very

300
00:08:14.090 --> 00:08:15.810
interesting part, I still have

301
00:08:15.810 --> 00:08:16.890
all this value up here.

302
00:08:18.010 --> 00:08:19.730
Very, very interesting way.

303
00:08:19.730 --> 00:08:21.610
Can we have an order three as well?

304
00:08:22.330 --> 00:08:25.050
I guess we can have order three,

305
00:08:25.770 --> 00:08:27.410
order three and this time

306
00:08:27.410 --> 00:08:28.969
we use simplychai order

307
00:08:28.969 --> 00:08:30.450
and we pass on all the values.

308
00:08:30.450 --> 00:08:33.010
So we simply go ahead and tea type

309
00:08:33.010 --> 00:08:33.890
let's just say we want

310
00:08:33.890 --> 00:08:35.370
to pass the value of large.

311
00:08:36.090 --> 00:08:37.850
Then the second one, sweetness,

312
00:08:37.850 --> 00:08:39.370
we'll call this one as low

313
00:08:40.179 --> 00:08:43.899
and we will go like this and size

314
00:08:43.899 --> 00:08:45.939
will go with the large as well.

315
00:08:46.979 --> 00:08:48.539
Now can we go ahead and print

316
00:08:48.539 --> 00:08:49.859
out this exact same thing

317
00:08:49.859 --> 00:08:51.179
for the Order 3 as well?

318
00:08:51.179 --> 00:08:52.339
That would be super interesting

319
00:08:52.339 --> 00:08:53.219
to know about it.

320
00:08:54.339 --> 00:08:55.738
And there we go, you still

321
00:08:55.738 --> 00:08:56.539
have all the values, so

322
00:08:56.539 --> 00:08:57.579
all the key value pairs.

323
00:08:57.579 --> 00:08:59.939
If you want to get all the values

324
00:08:59.939 --> 00:09:01.899
as dictionary you can actually go

325
00:09:01.899 --> 00:09:03.779
ahead and it's a good idea to

326
00:09:03.779 --> 00:09:07.200
study more about this dict dunder.

327
00:09:07.200 --> 00:09:08.200
Pretty interesting one

328
00:09:08.200 --> 00:09:09.400
and I'm pretty sure you learned

329
00:09:09.400 --> 00:09:10.640
something new about it.

330
00:09:10.640 --> 00:09:12.000
But I don't want to just call

331
00:09:12.000 --> 00:09:13.240
this video just right up here.

332
00:09:13.240 --> 00:09:14.680
There is little bit more that

333
00:09:14.680 --> 00:09:16.160
I want to show you here.

334
00:09:16.160 --> 00:09:17.360
Let's just say we have defined

335
00:09:17.360 --> 00:09:18.800
these classes and everything.

336
00:09:18.800 --> 00:09:20.440
Now I come back here to just

337
00:09:20.440 --> 00:09:21.760
show you that how static

338
00:09:21.760 --> 00:09:23.040
methods are different.

339
00:09:23.040 --> 00:09:24.520
We create another class which

340
00:09:24.520 --> 00:09:27.880
is chi utils and the whole job

341
00:09:27.880 --> 00:09:30.000
of chi utils is we don't have

342
00:09:30.000 --> 00:09:31.000
any construct or anything.

343
00:09:31.000 --> 00:09:32.560
We have a static method

344
00:09:32.560 --> 00:09:33.200
just like this.

345
00:09:33.910 --> 00:09:36.550
And I can define a simple is

346
00:09:37.350 --> 00:09:40.990
valid, is valid size and

347
00:09:40.990 --> 00:09:42.950
somebody passed me on this size

348
00:09:42.950 --> 00:09:48.390
and I can say return return size

349
00:09:48.390 --> 00:09:50.710
in and we can just check for it

350
00:09:50.710 --> 00:09:51.430
like this.

351
00:09:51.430 --> 00:09:54.240
If it is in small or

352
00:09:54.240 --> 00:09:55.790
medium we have to be very careful

353
00:09:55.790 --> 00:09:57.390
for the uppercase,

354
00:09:57.390 --> 00:09:58.710
lowercase how it's going on.

355
00:09:59.260 --> 00:10:00.300
So be careful with that

356
00:10:00.940 --> 00:10:02.420
large and this is example

357
00:10:02.420 --> 00:10:03.900
of how this can be done.

358
00:10:03.900 --> 00:10:05.820
So before taking the order or

359
00:10:05.820 --> 00:10:07.140
just at the time of taking

360
00:10:07.140 --> 00:10:09.340
the order, you can just ask for it.

361
00:10:09.340 --> 00:10:10.780
So I can just go ahead and print

362
00:10:10.780 --> 00:10:13.580
and I can say hi utils,

363
00:10:13.580 --> 00:10:15.180
I want to use a method there

364
00:10:15.180 --> 00:10:16.940
is only one is valid size.

365
00:10:16.940 --> 00:10:19.340
So customer is ordering me a medium.

366
00:10:19.340 --> 00:10:20.740
You can just go ahead and tell me

367
00:10:20.740 --> 00:10:22.380
that whether it is a size or not.

368
00:10:22.380 --> 00:10:24.300
And then only after getting this

369
00:10:24.300 --> 00:10:26.190
if clause, if I get the true,

370
00:10:26.190 --> 00:10:27.550
I take the rest of the order.

371
00:10:27.550 --> 00:10:29.550
So this is how it's being done.

372
00:10:29.550 --> 00:10:31.190
Now coming back onto the part, I

373
00:10:31.190 --> 00:10:32.470
hope this actually made it

374
00:10:32.470 --> 00:10:33.790
clear that all right, static

375
00:10:33.790 --> 00:10:35.470
method has their own place in

376
00:10:35.470 --> 00:10:37.510
the world and the class method

377
00:10:37.510 --> 00:10:38.910
has its own way of working with

378
00:10:38.910 --> 00:10:39.390
that.

379
00:10:39.390 --> 00:10:40.190
Coming back onto

380
00:10:40.190 --> 00:10:41.390
the diagram which I draw.

381
00:10:42.430 --> 00:10:43.990
So the class method it always

382
00:10:43.990 --> 00:10:46.430
receive the CLS the class itself

383
00:10:46.430 --> 00:10:48.030
while the static method receives

384
00:10:48.030 --> 00:10:50.590
no argument automatic first argument

385
00:10:50.590 --> 00:10:51.590
like we have seen that.

386
00:10:51.590 --> 00:10:52.950
No self, nothing like that.

387
00:10:52.950 --> 00:10:54.570
So it doesn't take anything it if

388
00:10:54.570 --> 00:10:56.090
you have a sense like there's a

389
00:10:56.090 --> 00:10:57.330
use case of passing the argument

390
00:10:57.330 --> 00:10:58.610
you can but there is no self

391
00:10:58.610 --> 00:11:00.610
there the use case this operates

392
00:11:00.610 --> 00:11:02.170
on the class, not on the

393
00:11:02.170 --> 00:11:03.130
instance.

394
00:11:03.130 --> 00:11:04.170
Remember that we never

395
00:11:04.170 --> 00:11:05.170
created an instance, it

396
00:11:05.170 --> 00:11:06.250
operates on the class.

397
00:11:06.250 --> 00:11:07.850
Whenever we are returning we are

398
00:11:07.850 --> 00:11:09.410
actually calling the class itself.

399
00:11:09.410 --> 00:11:11.210
No object was created there.

400
00:11:11.210 --> 00:11:12.530
Utility functions related

401
00:11:12.530 --> 00:11:13.090
to the class.

402
00:11:13.090 --> 00:11:14.010
We have seen that.

403
00:11:14.650 --> 00:11:16.450
Again, the class method, does

404
00:11:16.450 --> 00:11:17.490
it have access to the class?

405
00:11:17.490 --> 00:11:19.690
Yes, it has Static never has it.

406
00:11:19.690 --> 00:11:22.130
Do they have access to the self

407
00:11:22.130 --> 00:11:23.890
and as you have seen, no, none

408
00:11:23.890 --> 00:11:25.730
of them have the access to the self.

409
00:11:25.730 --> 00:11:27.410
So these are some of the differences

410
00:11:27.410 --> 00:11:28.530
between the static

411
00:11:28.530 --> 00:11:30.210
method as well as class method.

412
00:11:30.210 --> 00:11:32.210
So hope this video has given you

413
00:11:32.210 --> 00:11:33.810
enough of idea that all right,

414
00:11:33.810 --> 00:11:36.370
I know pretty much really in

415
00:11:36.370 --> 00:11:38.129
depth detail of the Python

416
00:11:38.129 --> 00:11:39.610
which I have never seen that oh

417
00:11:39.610 --> 00:11:41.650
Python can go this depth in

418
00:11:41.650 --> 00:11:42.690
such depth.

419
00:11:42.690 --> 00:11:43.690
Let's go ahead and catch

420
00:11:43.690 --> 00:11:44.530
up in the next video.

421
00:11:44.530 --> 00:11:45.730
Don't forget to rate us.
