WEBVTT

1
00:00:00.960 --> 00:00:02.840
We can have multiple exception

2
00:00:02.840 --> 00:00:04.280
at the exactly same time.

3
00:00:04.280 --> 00:00:05.560
And in this video we are going to

4
00:00:05.560 --> 00:00:07.480
learn exactly how to handle multiple

5
00:00:07.480 --> 00:00:09.440
exceptions at the same time.

6
00:00:09.440 --> 00:00:10.720
And for this we are going to write

7
00:00:10.720 --> 00:00:12.200
a very interesting piece of code.

8
00:00:12.200 --> 00:00:13.800
And this will help you to prepare

9
00:00:13.800 --> 00:00:14.920
for the Python world as well,

10
00:00:14.920 --> 00:00:16.600
because such code exists a lot

11
00:00:16.600 --> 00:00:18.080
in Python and I also, to be

12
00:00:18.080 --> 00:00:19.520
honest, enjoy this quite a lot.

13
00:00:20.080 --> 00:00:21.600
So let's close all of this

14
00:00:21.600 --> 00:00:23.200
and create a new one.

15
00:00:23.200 --> 00:00:24.960
We'll call this one as 04

16
00:00:25.610 --> 00:00:30.250
and this will be multiplexion.

17
00:00:30.250 --> 00:00:31.450
Py, of course.

18
00:00:32.170 --> 00:00:34.570
And let's go ahead and define a,

19
00:00:34.570 --> 00:00:35.610
process order.

20
00:00:36.730 --> 00:00:38.010
Process order.

21
00:00:38.010 --> 00:00:40.010
So what do we do in this one?

22
00:00:40.010 --> 00:00:42.890
We only serve masala chai.

23
00:00:42.890 --> 00:00:44.890
And somebody needs to give me

24
00:00:44.890 --> 00:00:47.050
an order like what T you want

25
00:00:47.050 --> 00:00:48.650
and how much you want to be.

26
00:00:48.650 --> 00:00:50.970
Like you want three cups, four cups.

27
00:00:50.970 --> 00:00:52.370
So masala chai only.

28
00:00:52.370 --> 00:00:53.890
You need to give me pass on a key

29
00:00:53.890 --> 00:00:56.470
of masala only and then a number.

30
00:00:56.470 --> 00:00:57.710
It can be 2, 3, but it

31
00:00:57.710 --> 00:00:58.230
should be number.

32
00:00:58.230 --> 00:01:00.230
It should not be tea W, O.

33
00:01:00.230 --> 00:01:01.110
It should be a number.

34
00:01:01.110 --> 00:01:02.070
Exactly.

35
00:01:02.070 --> 00:01:05.349
So for this we expect

36
00:01:05.349 --> 00:01:07.590
that you will provide me the item

37
00:01:07.590 --> 00:01:09.990
and the quantity.

38
00:01:09.990 --> 00:01:11.790
Now, here's a very interesting piece

39
00:01:11.790 --> 00:01:13.430
of code that I'll write.

40
00:01:13.430 --> 00:01:14.830
First of all, I'll wrap it up with

41
00:01:14.830 --> 00:01:16.670
a Try catch, or try, except in

42
00:01:16.670 --> 00:01:18.590
this case, again, as I said, try

43
00:01:18.590 --> 00:01:20.030
catch is such a common word that

44
00:01:20.030 --> 00:01:21.510
I've studied so much of it in

45
00:01:21.510 --> 00:01:23.790
Java, in Swift, in TypeScript and

46
00:01:23.790 --> 00:01:25.350
JavaScript that I call it as Try

47
00:01:25.350 --> 00:01:25.710
catch.

48
00:01:25.710 --> 00:01:27.330
But when I write it in Python it is

49
00:01:27.330 --> 00:01:29.250
try, except always.

50
00:01:29.250 --> 00:01:30.330
So please grant me that

51
00:01:30.330 --> 00:01:31.330
much liberty in here.

52
00:01:32.050 --> 00:01:33.490
Now, how we can do that?

53
00:01:33.490 --> 00:01:35.090
We want to calculate first of all

54
00:01:35.090 --> 00:01:37.850
price, because price and the cost

55
00:01:37.850 --> 00:01:39.970
for it will calculate that.

56
00:01:39.970 --> 00:01:42.050
So how we can grab the price of it.

57
00:01:42.050 --> 00:01:43.050
Now, here's an interesting

58
00:01:43.050 --> 00:01:43.850
piece of code.

59
00:01:43.850 --> 00:01:45.490
Notice here, I'm putting up a key.

60
00:01:46.050 --> 00:01:48.930
The key is going to be masala

61
00:01:48.930 --> 00:01:50.250
and the value

62
00:01:50.250 --> 00:01:52.290
of it is going to be 20.

63
00:01:52.290 --> 00:01:52.930
Interesting.

64
00:01:53.980 --> 00:01:55.620
And then we are going to go ahead

65
00:01:55.620 --> 00:01:58.300
and simply, get the item of it.

66
00:01:58.940 --> 00:02:00.220
Now, what is this code?

67
00:02:00.220 --> 00:02:01.460
How is it even going on?

68
00:02:01.460 --> 00:02:02.780
Just bear with me, I'll explain

69
00:02:02.780 --> 00:02:04.300
this, although it's very easy.

70
00:02:04.300 --> 00:02:05.780
And then I can go ahead

71
00:02:05.780 --> 00:02:07.420
and simply take this price

72
00:02:07.980 --> 00:02:11.180
and multiply it by quantity.

73
00:02:11.740 --> 00:02:13.700
And then we can simply go ahead

74
00:02:13.700 --> 00:02:18.140
and print, print the total.

75
00:02:18.140 --> 00:02:20.250
Let's print the formatted string

76
00:02:20.250 --> 00:02:22.570
which says total cost is,

77
00:02:23.450 --> 00:02:25.450
and then go ahead and have the cost.

78
00:02:26.410 --> 00:02:28.010
All right, Those who are wondering,

79
00:02:28.010 --> 00:02:29.930
hey, how does this actually work?

80
00:02:29.930 --> 00:02:31.090
Don't worry, I'll walk you through

81
00:02:31.090 --> 00:02:32.330
with that part as well.

82
00:02:32.330 --> 00:02:33.210
So let's Just say we

83
00:02:33.210 --> 00:02:34.610
get a simple key error.

84
00:02:34.610 --> 00:02:35.730
In this case, somebody has

85
00:02:35.730 --> 00:02:36.890
mentioned a key error.

86
00:02:37.530 --> 00:02:41.050
Then I can just print this like this.

87
00:02:41.610 --> 00:02:43.370
Let's use a formatted string.

88
00:02:43.370 --> 00:02:44.930
We don't need formatted string.

89
00:02:44.930 --> 00:02:46.090
We can just go with that.

90
00:02:46.090 --> 00:02:48.970
We can say, sorry, that

91
00:02:48.970 --> 00:02:51.690
chai is not on menu.

92
00:02:51.690 --> 00:02:53.050
All right, one exception.

93
00:02:53.050 --> 00:02:54.530
Can we raise another exception?

94
00:02:54.530 --> 00:02:56.850
You can actually except.

95
00:02:56.850 --> 00:02:57.730
And this time we want

96
00:02:57.730 --> 00:02:59.530
to have a simple type error

97
00:03:00.490 --> 00:03:02.490
and we can again say print.

98
00:03:03.210 --> 00:03:06.730
And then we can say quantity

99
00:03:07.930 --> 00:03:12.490
must be in number, number.

100
00:03:12.490 --> 00:03:13.610
There we go.

101
00:03:13.610 --> 00:03:14.250
So what's going on?

102
00:03:14.250 --> 00:03:15.290
How is it even working?

103
00:03:16.090 --> 00:03:17.730
So the way how this code is going

104
00:03:17.730 --> 00:03:19.330
to be used will actually make

105
00:03:19.330 --> 00:03:20.770
it much more clear for you that

106
00:03:20.770 --> 00:03:22.330
what we are actually doing.

107
00:03:22.330 --> 00:03:23.330
Let's just say I go ahead

108
00:03:23.330 --> 00:03:24.490
and process an order.

109
00:03:24.490 --> 00:03:26.370
First time I go ahead and ask for,

110
00:03:26.370 --> 00:03:29.610
let's just say I want a T of

111
00:03:29.610 --> 00:03:31.690
ginger because I love ginger T

112
00:03:31.690 --> 00:03:33.610
and I provide you a value of 2.

113
00:03:34.170 --> 00:03:35.970
And the second time I go ahead

114
00:03:35.970 --> 00:03:38.650
and ask you a value in this format

115
00:03:39.540 --> 00:03:41.380
with of course the string.

116
00:03:41.380 --> 00:03:42.620
But instead of the ginger

117
00:03:42.620 --> 00:03:44.340
I go ahead and say masala.

118
00:03:44.340 --> 00:03:45.700
Okay, what's going on?

119
00:03:45.700 --> 00:03:47.060
Let me help you to understand this.

120
00:03:47.620 --> 00:03:49.140
Now the moment for the first time

121
00:03:49.140 --> 00:03:51.220
you simply say, process the order.

122
00:03:51.220 --> 00:03:52.820
We simply pass on item

123
00:03:52.820 --> 00:03:54.420
value as ginger.

124
00:03:54.420 --> 00:03:56.180
This goes up here and we

125
00:03:56.180 --> 00:03:57.540
have the key and value.

126
00:03:58.100 --> 00:03:59.580
So for this dictionary we are

127
00:03:59.580 --> 00:04:00.820
looking forward for an item.

128
00:04:00.820 --> 00:04:02.460
So notice here, this is the item

129
00:04:02.460 --> 00:04:03.540
we are looking up for.

130
00:04:03.540 --> 00:04:05.580
So if you try to extract an item

131
00:04:05.580 --> 00:04:07.830
from, from a dictionary based on

132
00:04:07.830 --> 00:04:09.350
the key value that you are providing

133
00:04:09.350 --> 00:04:10.870
here, so item will be eventually

134
00:04:10.870 --> 00:04:12.350
replaced with this ginger.

135
00:04:12.350 --> 00:04:15.110
So this will just be gone like this.

136
00:04:15.110 --> 00:04:17.550
And obviously this is not masala.

137
00:04:17.550 --> 00:04:19.269
So this will never actually execute.

138
00:04:19.269 --> 00:04:21.350
And immediately the price

139
00:04:21.350 --> 00:04:22.710
is not going to be found.

140
00:04:22.710 --> 00:04:24.030
Nothing will go inside the price.

141
00:04:24.030 --> 00:04:25.110
So you raise an exception

142
00:04:25.110 --> 00:04:26.150
which is key error.

143
00:04:26.150 --> 00:04:27.830
Hey, this key doesn't exist.

144
00:04:27.830 --> 00:04:28.830
So that's why we have

145
00:04:28.830 --> 00:04:29.550
raised this error.

146
00:04:29.550 --> 00:04:30.630
Key error.

147
00:04:30.630 --> 00:04:32.830
And then in the second part, and

148
00:04:32.830 --> 00:04:33.990
by the way, this is pretty easy,

149
00:04:33.990 --> 00:04:35.350
once you got the value of 20

150
00:04:35.350 --> 00:04:36.990
here, then quantity, you get the

151
00:04:36.990 --> 00:04:38.350
quantity of 2, you multiply

152
00:04:38.350 --> 00:04:39.550
that, that's okay, that's no

153
00:04:39.550 --> 00:04:40.070
problem.

154
00:04:40.070 --> 00:04:41.550
That's a super easy code

155
00:04:41.550 --> 00:04:42.950
to learn and figure out.

156
00:04:42.950 --> 00:04:44.310
It's just a multiplication.

157
00:04:44.950 --> 00:04:46.190
Now in the next case what

158
00:04:46.190 --> 00:04:47.590
happens is this masala.

159
00:04:47.590 --> 00:04:49.670
So you copy this masala

160
00:04:49.670 --> 00:04:50.870
inside this item.

161
00:04:50.870 --> 00:04:52.150
This item is gone

162
00:04:52.950 --> 00:04:54.670
and the masala goes up there.

163
00:04:54.670 --> 00:04:56.310
So this time you want

164
00:04:56.310 --> 00:04:57.950
to extract a key of masala.

165
00:04:57.950 --> 00:04:59.310
And yes, the only key in our

166
00:04:59.310 --> 00:05:01.170
dictionary exists is masala.

167
00:05:01.170 --> 00:05:02.170
So final value that you

168
00:05:02.170 --> 00:05:03.730
get is going to be 20.

169
00:05:03.730 --> 00:05:06.210
So price gets a value of 20 and cost.

170
00:05:06.210 --> 00:05:07.450
The cost will try to get

171
00:05:07.450 --> 00:05:09.170
the value quantity next.

172
00:05:09.170 --> 00:05:10.930
And the quantity is 2.

173
00:05:10.930 --> 00:05:12.490
So Python doesn't know how

174
00:05:12.490 --> 00:05:14.370
to multiply 20 with 2,

175
00:05:14.370 --> 00:05:16.570
which is literally 2 and it

176
00:05:16.570 --> 00:05:17.690
will raise the type error.

177
00:05:17.690 --> 00:05:19.570
That quantity must be in the number.

178
00:05:19.570 --> 00:05:21.170
So this is a very, very interesting

179
00:05:21.170 --> 00:05:22.130
piece of code that we have

180
00:05:22.130 --> 00:05:23.850
written and I hope now you see

181
00:05:23.850 --> 00:05:25.010
how generic we have written.

182
00:05:25.010 --> 00:05:26.530
But it's a very smart

183
00:05:26.530 --> 00:05:27.730
code that we have written.

184
00:05:27.730 --> 00:05:28.970
Let's go ahead and print it out

185
00:05:28.970 --> 00:05:30.250
to see what we have actually

186
00:05:30.250 --> 00:05:31.290
done that will help you

187
00:05:31.290 --> 00:05:32.210
to understand it better.

188
00:05:32.730 --> 00:05:34.170
So Python 3 04.

189
00:05:34.170 --> 00:05:35.290
There we go.

190
00:05:35.290 --> 00:05:36.250
So notice here.

191
00:05:36.250 --> 00:05:37.290
Oh my.

192
00:05:37.290 --> 00:05:37.690
Bad.

193
00:05:37.690 --> 00:05:39.250
So this one needs to be fixed.

194
00:05:39.250 --> 00:05:40.570
Quantity must be in the number.

195
00:05:41.290 --> 00:05:42.210
We'll fix that.

196
00:05:42.210 --> 00:05:43.370
So this one is saying

197
00:05:43.370 --> 00:05:45.010
total cost is 2 to 2.

198
00:05:45.010 --> 00:05:46.810
Why that is because of a concept

199
00:05:46.810 --> 00:05:48.490
known as operator overloading.

200
00:05:49.130 --> 00:05:50.970
So this time you say masala,

201
00:05:50.970 --> 00:05:52.610
this gets you 20 and when you

202
00:05:52.610 --> 00:05:54.410
multiply string with a 20 you

203
00:05:54.410 --> 00:05:57.170
actually go ahead and get this whole

204
00:05:57.170 --> 00:05:58.330
thing up here just like that.

205
00:05:58.330 --> 00:05:59.570
So we should probably

206
00:05:59.570 --> 00:06:01.090
provide more of the caution here.

207
00:06:02.210 --> 00:06:03.530
Because this time it was able to

208
00:06:03.530 --> 00:06:06.210
multiply 20 with whatever the value

209
00:06:06.210 --> 00:06:07.490
you are providing, which is 2.

210
00:06:07.490 --> 00:06:09.210
Shouldn't be working this way.

211
00:06:09.210 --> 00:06:10.930
But you get the idea that even

212
00:06:10.930 --> 00:06:12.250
the smartest of the code that we are

213
00:06:12.250 --> 00:06:14.050
writing can have this kind of error.

214
00:06:14.050 --> 00:06:15.130
So in that case we have

215
00:06:15.130 --> 00:06:16.690
to actually convert this into

216
00:06:16.690 --> 00:06:18.210
integer first or a number.

217
00:06:18.210 --> 00:06:19.530
This also should be converted

218
00:06:19.530 --> 00:06:20.770
into number and then only

219
00:06:20.770 --> 00:06:22.530
the cost should be calculated.

220
00:06:22.530 --> 00:06:24.410
A further if else wouldn't

221
00:06:24.410 --> 00:06:25.810
harm that if the cost is

222
00:06:25.810 --> 00:06:26.930
actually in the number.

223
00:06:26.930 --> 00:06:28.560
And that's how the real world

224
00:06:28.560 --> 00:06:29.560
software is different from

225
00:06:29.560 --> 00:06:31.720
tutorials that, yeah, we do a lot

226
00:06:31.720 --> 00:06:33.280
of checking in that, but you got

227
00:06:33.280 --> 00:06:34.720
this idea and you also learned a

228
00:06:34.720 --> 00:06:35.680
concept about operator

229
00:06:35.680 --> 00:06:37.040
overloading with these.

230
00:06:37.040 --> 00:06:37.880
So many tools.

231
00:06:37.880 --> 00:06:39.240
This was unintentional,

232
00:06:39.240 --> 00:06:40.240
but it happened.

233
00:06:40.240 --> 00:06:42.000
And that's the beauty of programming.

234
00:06:42.000 --> 00:06:43.480
No matter how much you prepare,

235
00:06:43.480 --> 00:06:44.720
no matter how much you actually

236
00:06:44.720 --> 00:06:46.400
enjoy, the real fun is actually

237
00:06:46.400 --> 00:06:47.760
the raw coding where things

238
00:06:47.760 --> 00:06:49.160
happen and you explain them.

239
00:06:49.160 --> 00:06:50.240
Why did it happen?

240
00:06:50.240 --> 00:06:52.240
And what can be done to solve this.

241
00:06:52.240 --> 00:06:53.520
That's the fun part.

242
00:06:53.520 --> 00:06:54.560
Let's go ahead and catch

243
00:06:54.560 --> 00:06:55.760
up in the next video.
