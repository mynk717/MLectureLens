WEBVTT

1
00:00:00.080 --> 00:00:01.520
Hey guys, in this particular

2
00:00:01.520 --> 00:00:03.240
video I have an interesting

3
00:00:03.240 --> 00:00:04.400
challenge for you.

4
00:00:04.400 --> 00:00:06.680
So here is a readme MD file and I

5
00:00:06.680 --> 00:00:08.480
have created one challenge for you.

6
00:00:08.480 --> 00:00:09.880
So actually I have not created,

7
00:00:09.880 --> 00:00:10.920
I have asked Chat GPT

8
00:00:10.920 --> 00:00:12.480
to create a challenge for us.

9
00:00:12.480 --> 00:00:14.280
And I'll be using this

10
00:00:14.280 --> 00:00:16.079
challenge along with you only

11
00:00:16.079 --> 00:00:18.360
to see that how we can implement

12
00:00:18.360 --> 00:00:19.280
all these challenges.

13
00:00:19.280 --> 00:00:21.160
Okay, so this particular video is

14
00:00:21.160 --> 00:00:22.760
going to give you a very good

15
00:00:22.760 --> 00:00:24.360
understanding on how you can work

16
00:00:24.360 --> 00:00:25.680
with Express in real world.

17
00:00:26.450 --> 00:00:27.890
So let's just open the preview.

18
00:00:27.890 --> 00:00:29.090
So here we have the preview

19
00:00:29.090 --> 00:00:30.610
and let's see it step

20
00:00:30.610 --> 00:00:32.130
by step and implement the code.

21
00:00:32.130 --> 00:00:33.730
Okay, so what we have to do is

22
00:00:33.730 --> 00:00:34.850
we have to setting up the server

23
00:00:34.850 --> 00:00:35.890
with Express listening on

24
00:00:35.890 --> 00:00:37.570
the port and creating a bookstore.

25
00:00:37.570 --> 00:00:39.330
So we have to create a bookstore

26
00:00:39.330 --> 00:00:40.370
kind of an application.

27
00:00:40.370 --> 00:00:42.530
Okay, so project initialization

28
00:00:42.530 --> 00:00:43.170
says that you have

29
00:00:43.170 --> 00:00:44.250
to create a project folder.

30
00:00:44.250 --> 00:00:44.770
That's fine.

31
00:00:44.770 --> 00:00:45.850
Then what you have to do is

32
00:00:45.850 --> 00:00:47.770
you have to do npm in it.

33
00:00:47.770 --> 00:00:48.570
So all these steps are

34
00:00:48.570 --> 00:00:49.330
mentioned here, right?

35
00:00:49.330 --> 00:00:50.050
So you have to just

36
00:00:50.050 --> 00:00:51.250
follow this document.

37
00:00:51.250 --> 00:00:52.850
So I'll just tell you the outline

38
00:00:52.850 --> 00:00:54.435
that we have to create a bookstore.

39
00:00:54.435 --> 00:00:56.170
And, and if you scroll down

40
00:00:56.170 --> 00:00:57.610
you will have some application

41
00:00:57.610 --> 00:00:59.330
routes like slash books that

42
00:00:59.330 --> 00:01:00.730
should return all the books.

43
00:01:00.730 --> 00:01:02.570
Slash books, slash id.

44
00:01:02.570 --> 00:01:03.850
Okay, now this is something special

45
00:01:03.850 --> 00:01:05.370
that if you make a route

46
00:01:05.370 --> 00:01:08.210
on like let's say/book/1,/book/2.

47
00:01:08.210 --> 00:01:09.210
So this will return your

48
00:01:09.210 --> 00:01:10.810
specific book by the ID.

49
00:01:10.810 --> 00:01:12.250
You can create new books, you

50
00:01:12.250 --> 00:01:13.330
can delete existing books.

51
00:01:13.330 --> 00:01:14.570
So this is what we have to create.

52
00:01:14.570 --> 00:01:16.650
Okay, so let's, let's jump

53
00:01:16.650 --> 00:01:17.770
into the coding part, right?

54
00:01:17.770 --> 00:01:18.690
Because that is where I

55
00:01:18.690 --> 00:01:19.930
am most excited usually.

56
00:01:20.580 --> 00:01:21.620
So what I can do is I

57
00:01:21.620 --> 00:01:23.140
can just do an npm init.

58
00:01:23.140 --> 00:01:24.700
So expressbook store is

59
00:01:24.700 --> 00:01:26.260
fine, everything is good.

60
00:01:26.260 --> 00:01:28.580
And yes, so npm install.

61
00:01:28.580 --> 00:01:29.500
Now here is something

62
00:01:29.500 --> 00:01:30.460
I want to tell you.

63
00:01:30.460 --> 00:01:31.460
Very interesting, right?

64
00:01:31.460 --> 00:01:32.100
Something new.

65
00:01:32.100 --> 00:01:33.300
What I'm going to do is I'm going

66
00:01:33.300 --> 00:01:35.780
to say at the rate types slash node

67
00:01:36.340 --> 00:01:38.140
and one thing I will

68
00:01:38.140 --> 00:01:39.780
do hyphen, hyphen save dev.

69
00:01:39.780 --> 00:01:40.500
Okay.

70
00:01:40.500 --> 00:01:43.700
Or, or, or I can just say hyphen D.

71
00:01:43.700 --> 00:01:44.820
Now what is this thing?

72
00:01:44.820 --> 00:01:46.460
When I do enter, you will see

73
00:01:46.460 --> 00:01:47.420
something very interesting

74
00:01:47.420 --> 00:01:49.910
in the package JSON instead of going

75
00:01:49.910 --> 00:01:51.670
into the dependencies, now it

76
00:01:51.670 --> 00:01:53.550
is inside a dev dependency.

77
00:01:53.550 --> 00:01:55.470
Now see guys, this particular

78
00:01:55.470 --> 00:01:57.390
thing I only need when

79
00:01:57.390 --> 00:01:58.470
I am developing, right?

80
00:01:58.470 --> 00:01:59.870
When I am inside my development

81
00:01:59.870 --> 00:02:02.030
mode, once my project is ready,

82
00:02:02.030 --> 00:02:04.429
I don't want to take this package

83
00:02:04.429 --> 00:02:06.270
on my production server because

84
00:02:06.270 --> 00:02:07.670
even if I take, that's fine.

85
00:02:07.670 --> 00:02:09.150
I mean it's not a problem.

86
00:02:09.150 --> 00:02:11.070
But my Packet size is going to

87
00:02:11.070 --> 00:02:12.910
increase because this can be a 2, 3

88
00:02:12.910 --> 00:02:14.590
MB file or something like that.

89
00:02:14.590 --> 00:02:16.590
So, so if there is any dependency

90
00:02:16.590 --> 00:02:17.950
that you only need on your

91
00:02:17.950 --> 00:02:19.430
local machine, that means while

92
00:02:19.430 --> 00:02:20.830
you are developing, then you

93
00:02:20.830 --> 00:02:21.910
can just do an hyphen D.

94
00:02:21.910 --> 00:02:23.910
Okay, so like for example Express.

95
00:02:23.910 --> 00:02:24.310
Express.

96
00:02:24.310 --> 00:02:25.630
Of course I need on production.

97
00:02:25.630 --> 00:02:26.590
If Express is not there

98
00:02:26.590 --> 00:02:27.470
on the production, my.

99
00:02:27.470 --> 00:02:28.870
My application will crash.

100
00:02:28.870 --> 00:02:29.750
So this is going to be

101
00:02:29.750 --> 00:02:30.790
a dependency only.

102
00:02:30.790 --> 00:02:32.790
Similarly, npm install@ the rate

103
00:02:32.790 --> 00:02:34.270
types for Express is going

104
00:02:34.270 --> 00:02:36.190
to be a dev dependency because

105
00:02:36.190 --> 00:02:37.390
either I just need that

106
00:02:37.390 --> 00:02:38.710
in the development server.

107
00:02:38.710 --> 00:02:39.350
Got it.

108
00:02:40.250 --> 00:02:42.110
Now let's configure a start

109
00:02:42.110 --> 00:02:44.230
script which will do node,

110
00:02:44.230 --> 00:02:47.030
hyphen, hyphen, Var, index js.

111
00:02:47.030 --> 00:02:47.830
Nice.

112
00:02:47.830 --> 00:02:48.670
Now and let's create

113
00:02:48.670 --> 00:02:50.390
an index js file.

114
00:02:50.390 --> 00:02:51.670
So first things first, let's

115
00:02:51.670 --> 00:02:52.910
have the Express application.

116
00:02:52.910 --> 00:02:54.670
So express equals require

117
00:02:54.670 --> 00:02:56.070
and you can just say express.

118
00:02:56.070 --> 00:02:57.550
Okay, Then let's create

119
00:02:57.550 --> 00:02:58.230
an application.

120
00:02:58.230 --> 00:02:59.990
So app is equals to express.

121
00:02:59.990 --> 00:03:01.430
Sorry, sorry, sorry, my bad.

122
00:03:02.230 --> 00:03:02.630
Express.

123
00:03:03.510 --> 00:03:04.070
Fine.

124
00:03:04.070 --> 00:03:06.310
Then let's create a port variable.

125
00:03:06.310 --> 00:03:07.860
So port 8000.

126
00:03:07.860 --> 00:03:10.340
Okay, so what this documentation

127
00:03:10.340 --> 00:03:11.140
says that you have

128
00:03:11.140 --> 00:03:12.260
to create a project folder.

129
00:03:12.260 --> 00:03:12.540
Done.

130
00:03:12.540 --> 00:03:13.460
Initialize the node.

131
00:03:13.460 --> 00:03:13.780
Done.

132
00:03:13.780 --> 00:03:14.980
You have to install Express.

133
00:03:14.980 --> 00:03:16.980
We have done an index js file.

134
00:03:16.980 --> 00:03:18.500
Now we have to we have

135
00:03:18.500 --> 00:03:19.940
to listen on the port 8000.

136
00:03:19.940 --> 00:03:21.060
So these rules are saying

137
00:03:21.060 --> 00:03:21.980
that you have to listen

138
00:03:21.980 --> 00:03:24.420
on port number 8,000, right?

139
00:03:24.420 --> 00:03:27.620
So app do listen on this particular

140
00:03:27.620 --> 00:03:29.260
port and I can just

141
00:03:29.260 --> 00:03:33.260
say console do log that HTTP

142
00:03:33.260 --> 00:03:36.380
server is running on port.

143
00:03:36.380 --> 00:03:37.700
And I can just say port.

144
00:03:37.700 --> 00:03:39.460
So whichever port the application is

145
00:03:39.460 --> 00:03:41.420
running, I'll get that thing right?

146
00:03:41.980 --> 00:03:43.340
So this part is also done.

147
00:03:43.340 --> 00:03:44.740
So you have done the listening part.

148
00:03:44.740 --> 00:03:45.460
Now we have to create

149
00:03:45.460 --> 00:03:46.700
a bookstore data.

150
00:03:46.700 --> 00:03:48.220
Now, as of now, we don't

151
00:03:48.220 --> 00:03:49.180
have a database, right?

152
00:03:49.180 --> 00:03:50.020
Initially these things

153
00:03:50.020 --> 00:03:51.260
should be in the database.

154
00:03:51.260 --> 00:03:52.500
But because we don't have

155
00:03:52.500 --> 00:03:54.060
a database, we can actually

156
00:03:54.060 --> 00:03:55.740
store it as an array.

157
00:03:56.300 --> 00:03:58.140
So you can consider, okay, you

158
00:03:58.140 --> 00:04:00.310
can just consider that this is my

159
00:04:00.310 --> 00:04:02.310
in memory database, okay?

160
00:04:02.310 --> 00:04:03.990
In memory database.

161
00:04:03.990 --> 00:04:05.070
Now I know that I'm

162
00:04:05.070 --> 00:04:06.230
violating a rule, right?

163
00:04:06.230 --> 00:04:07.790
The rule was that you it

164
00:04:07.790 --> 00:04:08.790
should be stateless.

165
00:04:08.790 --> 00:04:09.830
But right now I don't

166
00:04:09.830 --> 00:04:10.750
have a database, right?

167
00:04:10.750 --> 00:04:11.750
Imagine guys, I don't

168
00:04:11.750 --> 00:04:12.630
have a database.

169
00:04:12.630 --> 00:04:13.750
So that is the reason I have

170
00:04:13.750 --> 00:04:15.670
to create these things in memory.

171
00:04:15.670 --> 00:04:16.390
Okay?

172
00:04:16.390 --> 00:04:18.269
So right now we are violating a rule

173
00:04:18.269 --> 00:04:19.510
because we don't have database.

174
00:04:19.510 --> 00:04:20.350
But you can imagine

175
00:04:20.350 --> 00:04:21.670
in future these things will be

176
00:04:21.670 --> 00:04:23.110
moved into the database.

177
00:04:23.110 --> 00:04:24.550
So every book has an id,

178
00:04:24.550 --> 00:04:26.680
a title and an author, right?

179
00:04:27.240 --> 00:04:29.080
So we have created a mock data.

180
00:04:29.080 --> 00:04:29.840
Now we have to set

181
00:04:29.840 --> 00:04:31.680
up a get route that if you want

182
00:04:31.680 --> 00:04:32.880
to get all the books.

183
00:04:32.880 --> 00:04:33.960
So very simple, right?

184
00:04:33.960 --> 00:04:34.920
Very simple.

185
00:04:34.920 --> 00:04:36.160
So what I can do is I can

186
00:04:36.160 --> 00:04:37.040
just have a comment that

187
00:04:37.040 --> 00:04:38.440
these are all my routes.

188
00:04:38.440 --> 00:04:39.920
So if someone makes a get

189
00:04:39.920 --> 00:04:42.040
route, a get request on slash

190
00:04:42.040 --> 00:04:43.680
books, this is where I

191
00:04:43.680 --> 00:04:45.160
should return all the books.

192
00:04:45.160 --> 00:04:46.120
So what you can do is you

193
00:04:46.120 --> 00:04:48.120
can just say response dot.

194
00:04:48.120 --> 00:04:50.200
Now see guys, when you return

195
00:04:50.200 --> 00:04:52.720
a response, the response can be

196
00:04:52.720 --> 00:04:53.640
of different, different types.

197
00:04:53.640 --> 00:04:54.880
For example you can send just

198
00:04:54.880 --> 00:04:56.000
a text response, for example

199
00:04:56.000 --> 00:04:57.600
for that when you do end, right?

200
00:04:57.600 --> 00:04:59.000
When you do end you are just

201
00:04:59.000 --> 00:05:00.560
sending a text response.

202
00:05:00.560 --> 00:05:02.160
But usually we prefer

203
00:05:02.160 --> 00:05:03.840
to send a JSON response.

204
00:05:03.840 --> 00:05:04.880
What is a JSON?

205
00:05:04.880 --> 00:05:07.200
JSON is basically a key value pair.

206
00:05:07.200 --> 00:05:08.440
So what you can do is you can just

207
00:05:08.440 --> 00:05:10.080
say hey I want to send a JSON

208
00:05:10.080 --> 00:05:12.960
and directly give this books what

209
00:05:12.960 --> 00:05:14.880
internally the express will do.

210
00:05:14.880 --> 00:05:16.600
It will convert this array,

211
00:05:16.600 --> 00:05:18.560
this array into a JSON

212
00:05:18.560 --> 00:05:20.720
and set all the appropriate

213
00:05:20.720 --> 00:05:22.850
headers and, and send these books

214
00:05:22.850 --> 00:05:24.650
as a JSON to the front end.

215
00:05:24.650 --> 00:05:25.410
Let me show you.

216
00:05:25.410 --> 00:05:27.050
Okay, so this is done.

217
00:05:27.050 --> 00:05:28.250
So this basically route

218
00:05:28.250 --> 00:05:29.370
gets all the books and returns

219
00:05:29.370 --> 00:05:30.250
to the front end.

220
00:05:30.250 --> 00:05:31.770
So what I'm doing is here is I,

221
00:05:31.770 --> 00:05:34.530
I'll just say npm start, right?

222
00:05:34.530 --> 00:05:35.770
So this will start the server

223
00:05:35.770 --> 00:05:36.730
in the Var mode.

224
00:05:36.730 --> 00:05:37.489
So you can see that

225
00:05:37.489 --> 00:05:38.410
the server is running.

226
00:05:38.410 --> 00:05:39.610
Let's open the Thunder

227
00:05:39.610 --> 00:05:40.410
client side by side.

228
00:05:40.410 --> 00:05:42.410
Okay, so what I'm going to do is

229
00:05:42.970 --> 00:05:44.050
I'll just say HTTP

230
00:05:44.050 --> 00:05:47.140
localhost/books and send document.

231
00:05:47.140 --> 00:05:48.140
You see that I'm able to get

232
00:05:48.140 --> 00:05:50.260
all the books right as a JSON.

233
00:05:50.820 --> 00:05:52.500
Now interestingly see one thing,

234
00:05:53.180 --> 00:05:54.780
if I go into the headers, I'm

235
00:05:54.780 --> 00:05:56.540
talking about response headers.

236
00:05:56.540 --> 00:05:58.340
Okay, Response can also send headers.

237
00:05:59.140 --> 00:06:01.060
So our server has set

238
00:06:01.060 --> 00:06:02.140
some Headers for us.

239
00:06:02.140 --> 00:06:04.260
Number one is X powered by Express.

240
00:06:04.260 --> 00:06:07.300
So yeah, Express is doing a branding

241
00:06:07.300 --> 00:06:09.580
content type application/JSON

242
00:06:09.580 --> 00:06:11.060
from where this is coming.

243
00:06:11.060 --> 00:06:13.460
When you send a JSON response

244
00:06:13.460 --> 00:06:15.960
from the back end using X Express,

245
00:06:15.960 --> 00:06:18.360
it automatically adds this header.

246
00:06:18.360 --> 00:06:20.680
Then it is adding content length

247
00:06:20.680 --> 00:06:22.600
and it is adding a date.

248
00:06:22.600 --> 00:06:24.480
It is adding a E tag and a connection

249
00:06:24.480 --> 00:06:26.120
close and you can see that this

250
00:06:26.120 --> 00:06:27.800
is the response that is being sent.

251
00:06:27.800 --> 00:06:29.760
You can even add your custom headers.

252
00:06:29.760 --> 00:06:30.600
For example I can say

253
00:06:30.600 --> 00:06:32.520
response do headers.

254
00:06:32.520 --> 00:06:35.280
Okay, response dot set header.

255
00:06:35.280 --> 00:06:37.400
Okay, so you can have a header like

256
00:06:37.400 --> 00:06:40.400
anything xpiy and you can

257
00:06:40.400 --> 00:06:42.040
set the value to as piushkar.

258
00:06:42.040 --> 00:06:42.760
Let's, let's say.

259
00:06:42.760 --> 00:06:44.120
So now see what will happen is

260
00:06:44.120 --> 00:06:46.120
if I do a send, you get seven

261
00:06:46.120 --> 00:06:47.120
headers and you can see that

262
00:06:47.120 --> 00:06:48.680
I have a custom header.

263
00:06:48.680 --> 00:06:50.360
So usually it's a good Practice

264
00:06:50.360 --> 00:06:52.440
that if it is your custom header.

265
00:06:52.440 --> 00:06:54.200
Usually we started with X.

266
00:06:54.200 --> 00:06:55.680
Okay, this tells that

267
00:06:55.680 --> 00:06:57.000
this is a custom header.

268
00:06:57.000 --> 00:06:58.960
Similarly, it's okay, it's okay.

269
00:06:58.960 --> 00:07:00.000
I mean if even I don't

270
00:07:00.000 --> 00:07:01.320
sit, that will work fine.

271
00:07:01.320 --> 00:07:02.800
But it's a convention that if

272
00:07:02.800 --> 00:07:04.640
it's a custom header then you

273
00:07:04.640 --> 00:07:05.960
should append it with like, you

274
00:07:05.960 --> 00:07:08.160
should pin it with the X hyphen

275
00:07:08.160 --> 00:07:09.680
like X powered by access thing.

276
00:07:09.680 --> 00:07:11.320
Okay, so this is how you can

277
00:07:11.320 --> 00:07:12.920
even send headers when you are

278
00:07:12.920 --> 00:07:14.560
sending back the response.

279
00:07:14.560 --> 00:07:16.320
So with this I have done my first

280
00:07:16.320 --> 00:07:18.240
task that was to get all the routes.

281
00:07:18.240 --> 00:07:19.520
So this is done.

282
00:07:19.520 --> 00:07:21.280
Now we have to get a route

283
00:07:21.280 --> 00:07:21.920
with the book.

284
00:07:21.920 --> 00:07:24.130
Now see guys, can you see

285
00:07:24.130 --> 00:07:25.760
on the client you have

286
00:07:25.760 --> 00:07:28.160
two books ID one, ID two.

287
00:07:28.160 --> 00:07:30.480
So let us say that I just,

288
00:07:30.480 --> 00:07:32.320
I want to get the book

289
00:07:32.320 --> 00:07:33.650
that is with ID1, right?

290
00:07:33.650 --> 00:07:33.770
Right.

291
00:07:33.770 --> 00:07:35.290
I just want to fetch all the data

292
00:07:35.290 --> 00:07:36.530
for this particular book.

293
00:07:36.530 --> 00:07:38.210
So what I can do is I want

294
00:07:38.210 --> 00:07:39.490
a route in which I can say

295
00:07:39.490 --> 00:07:41.570
something like books one.

296
00:07:41.570 --> 00:07:43.890
So this right now is sending a 404.

297
00:07:43.890 --> 00:07:45.650
This should send me all the book

298
00:07:45.650 --> 00:07:47.250
data that has an ID 1.

299
00:07:47.250 --> 00:07:48.930
Similarly books 2.

300
00:07:49.489 --> 00:07:50.730
Now here, this is

301
00:07:50.730 --> 00:07:51.730
a dynamic parameter.

302
00:07:51.730 --> 00:07:52.730
This can be anything, right?

303
00:07:52.730 --> 00:07:54.530
This class can be anything.

304
00:07:54.530 --> 00:07:56.370
So what you can do in express

305
00:07:56.370 --> 00:07:57.290
is you can just say app

306
00:07:57.290 --> 00:07:58.890
dot get hey, if someone makes

307
00:07:58.890 --> 00:08:01.600
a request to books slash one.

308
00:08:01.600 --> 00:08:02.680
Now this is a, this should

309
00:08:02.680 --> 00:08:03.840
be a dynamic thing.

310
00:08:03.840 --> 00:08:05.560
So to make it dynamic you

311
00:08:05.560 --> 00:08:07.840
can just say colon and name

312
00:08:07.840 --> 00:08:08.840
this variable anything.

313
00:08:08.840 --> 00:08:10.800
For example I'll name it as id.

314
00:08:10.800 --> 00:08:12.360
So this particular thing, let me

315
00:08:12.360 --> 00:08:14.320
just, you know, complete this code.

316
00:08:14.320 --> 00:08:15.840
What this says that hey,

317
00:08:15.840 --> 00:08:18.160
slash books slash anything.

318
00:08:18.160 --> 00:08:19.520
This can be a parameter

319
00:08:19.520 --> 00:08:20.560
that is anything.

320
00:08:20.560 --> 00:08:21.880
It can be one, it can be

321
00:08:21.880 --> 00:08:23.200
two, it can be anything.

322
00:08:23.200 --> 00:08:24.800
It's a, dynamic.

323
00:08:24.800 --> 00:08:27.000
So now I want to get the value

324
00:08:27.000 --> 00:08:28.360
what user has added here.

325
00:08:28.360 --> 00:08:30.710
So so first of all you can get the id

326
00:08:30.710 --> 00:08:36.070
as request params.id if I have

327
00:08:36.070 --> 00:08:38.350
named this variable as XYZ so

328
00:08:38.350 --> 00:08:40.710
I have to say XYZ here as well.

329
00:08:40.710 --> 00:08:42.270
So this basically says hey, from

330
00:08:42.270 --> 00:08:44.710
the parameters get me the xyz.

331
00:08:44.710 --> 00:08:46.510
So whatsoever user will put here that

332
00:08:46.510 --> 00:08:48.350
will be available to me in the xyz.

333
00:08:48.350 --> 00:08:49.950
Okay, you can even have multiple

334
00:08:49.950 --> 00:08:51.670
parameters slash something which

335
00:08:51.670 --> 00:08:53.030
is, which is hard coded, right?

336
00:08:53.030 --> 00:08:56.040
Slash Then some dynamic parameter A.

337
00:08:56.040 --> 00:08:57.560
Then you can again have a dynamic

338
00:08:57.560 --> 00:08:59.360
parameter, let's say R.

339
00:08:59.360 --> 00:09:00.160
Then you can see you

340
00:09:00.160 --> 00:09:02.520
can access uh.id.r.

341
00:09:02.520 --> 00:09:03.120
something like that.

342
00:09:03.120 --> 00:09:04.280
But we are just interested

343
00:09:04.280 --> 00:09:04.880
in this thing.

344
00:09:05.440 --> 00:09:07.040
So I want to access the id.

345
00:09:07.680 --> 00:09:10.000
Now this id, this book ID I have

346
00:09:10.000 --> 00:09:11.440
to find in my Database.

347
00:09:11.440 --> 00:09:13.280
So books is basically my database.

348
00:09:13.280 --> 00:09:15.920
So I'll just say const book equals

349
00:09:15.920 --> 00:09:18.000
books, all the books dot find.

350
00:09:18.000 --> 00:09:20.920
Okay, I want to find one book where e

351
00:09:20.920 --> 00:09:23.200
dot ID is actually equals to the id.

352
00:09:23.800 --> 00:09:25.360
So it's kind of a database operation.

353
00:09:25.360 --> 00:09:26.680
Do you remember like we do

354
00:09:26.680 --> 00:09:30.600
like select star from books.

355
00:09:30.600 --> 00:09:31.160
Okay.

356
00:09:31.160 --> 00:09:33.640
Where ID equals.

357
00:09:33.640 --> 00:09:34.440
So you can just pass

358
00:09:34.440 --> 00:09:36.040
in whatever ID you have.

359
00:09:36.040 --> 00:09:37.400
So it's basically this kind of

360
00:09:37.400 --> 00:09:39.160
a thing that is I'm trying to mimic.

361
00:09:39.160 --> 00:09:40.360
Now see, there are two things.

362
00:09:40.920 --> 00:09:43.560
One, if there is no book, that means

363
00:09:43.560 --> 00:09:44.880
user has given you an ID.

364
00:09:44.880 --> 00:09:46.000
Let's say 10 and there

365
00:09:46.000 --> 00:09:47.720
is no book with ID 10.

366
00:09:47.720 --> 00:09:49.440
In this scenario, what should

367
00:09:49.440 --> 00:09:50.710
be the status code

368
00:09:50.710 --> 00:09:52.470
404 because it's a not found thing.

369
00:09:52.470 --> 00:09:56.790
So return response.status404.

370
00:09:56.790 --> 00:09:58.950
Let's send a JSON message which will

371
00:09:58.950 --> 00:10:02.470
say an error that I'll just say book

372
00:10:02.470 --> 00:10:04.950
with ID that whatever

373
00:10:04.950 --> 00:10:08.150
user has given does not exist.

374
00:10:08.710 --> 00:10:10.390
Okay, so this kind of an error.

375
00:10:10.390 --> 00:10:11.750
But if you find the book,

376
00:10:11.750 --> 00:10:14.230
you can just say return

377
00:10:14.230 --> 00:10:16.990
response.JSON and just send

378
00:10:16.990 --> 00:10:18.590
the book that you have found.

379
00:10:18.590 --> 00:10:19.070
Nice.

380
00:10:19.070 --> 00:10:19.390
Right?

381
00:10:19.390 --> 00:10:20.750
So you have coded it.

382
00:10:20.750 --> 00:10:22.670
So now if I say book slash 7

383
00:10:22.670 --> 00:10:24.750
error book with ID 7 does not exist.

384
00:10:24.750 --> 00:10:26.030
Let me get all the books.

385
00:10:26.030 --> 00:10:27.590
So yeah, we have just two books.

386
00:10:27.590 --> 00:10:28.790
I want to just get the data

387
00:10:28.790 --> 00:10:31.230
for book two slash books slash to

388
00:10:31.230 --> 00:10:34.350
enter, and we got an error.

389
00:10:34.350 --> 00:10:36.430
Okay, I understand what the error is.

390
00:10:36.430 --> 00:10:37.910
The error is actually this

391
00:10:37.910 --> 00:10:39.670
ID is a string, okay?

392
00:10:39.670 --> 00:10:40.750
Because you are passing

393
00:10:40.750 --> 00:10:42.110
this two as a string.

394
00:10:42.110 --> 00:10:43.660
So there are two fixes and either

395
00:10:43.660 --> 00:10:45.180
you remove one equals,

396
00:10:45.180 --> 00:10:46.380
right, because it's a string.

397
00:10:46.380 --> 00:10:47.540
Now it will start working.

398
00:10:47.540 --> 00:10:49.100
See, in case of five

399
00:10:49.100 --> 00:10:50.140
you are getting error.

400
00:10:50.140 --> 00:10:51.660
In case of two you get

401
00:10:51.660 --> 00:10:52.980
the only book two.

402
00:10:52.980 --> 00:10:55.460
In case of one you only get book one.

403
00:10:55.460 --> 00:10:57.020
But if you don't specify anything,

404
00:10:57.020 --> 00:10:58.580
you will get all the books.

405
00:10:58.580 --> 00:11:00.620
Or what you can do is you can

406
00:11:00.620 --> 00:11:03.100
basically do a parse end, okay?

407
00:11:03.100 --> 00:11:06.820
You can typecast it to a number.

408
00:11:06.820 --> 00:11:08.340
Now here you have to put an extra

409
00:11:08.340 --> 00:11:11.080
check that if, if the ID is none,

410
00:11:11.080 --> 00:11:12.360
that means it's not a number.

411
00:11:12.360 --> 00:11:13.760
Maybe user is doing something

412
00:11:13.760 --> 00:11:15.880
like slash books, slash A.

413
00:11:15.880 --> 00:11:17.320
So A is not a number

414
00:11:17.320 --> 00:11:19.080
in this particular scenario.

415
00:11:19.080 --> 00:11:20.680
This is a bad request.

416
00:11:20.680 --> 00:11:22.360
Now see, now understand this thing.

417
00:11:22.360 --> 00:11:23.880
If I say slash book slash

418
00:11:23.880 --> 00:11:25.640
A, this is a bad request.

419
00:11:25.640 --> 00:11:27.720
A is not an ID, correct.

420
00:11:27.720 --> 00:11:30.800
So if you say HTTP status

421
00:11:30.800 --> 00:11:32.440
code bad request.

422
00:11:32.440 --> 00:11:34.440
So bad request, it's 400.

423
00:11:34.440 --> 00:11:35.380
Okay?

424
00:11:35.380 --> 00:11:36.260
400.

425
00:11:36.260 --> 00:11:38.500
So 400 means bad request.

426
00:11:38.500 --> 00:11:39.940
So that means what we can

427
00:11:39.940 --> 00:11:41.700
do is I can just say, hey,

428
00:11:41.700 --> 00:11:42.940
if it's a not a number.

429
00:11:42.940 --> 00:11:47.540
Return response.status400 okay.JSON

430
00:11:47.540 --> 00:11:49.340
and let's give a good error message

431
00:11:49.340 --> 00:11:54.500
that the ID must be of type number.

432
00:11:55.220 --> 00:11:56.100
Okay, that's it.

433
00:11:56.100 --> 00:11:58.500
So your ID must be of type number.

434
00:11:58.500 --> 00:12:00.140
Now see, if user specifies

435
00:12:00.140 --> 00:12:01.340
a, you get an error that

436
00:12:01.340 --> 00:12:02.810
hey, it must be a number.

437
00:12:02.810 --> 00:12:04.530
If you say six, it doesn't exist.

438
00:12:04.530 --> 00:12:05.530
It's a four or four.

439
00:12:05.530 --> 00:12:05.930
Right.

440
00:12:06.930 --> 00:12:09.130
In case of W, it's a bad request.

441
00:12:09.130 --> 00:12:10.890
But in case of two you get it.

442
00:12:10.890 --> 00:12:12.970
In case of one you get it.

443
00:12:12.970 --> 00:12:13.530
Right.

444
00:12:13.530 --> 00:12:14.130
So that's how.

445
00:12:14.130 --> 00:12:15.010
And if you don't specify

446
00:12:15.010 --> 00:12:16.490
anything, you get all the books.

447
00:12:16.490 --> 00:12:17.210
Nice.

448
00:12:17.210 --> 00:12:19.090
So this part is also done and we

449
00:12:19.090 --> 00:12:20.050
have done this part also.

450
00:12:20.050 --> 00:12:21.010
So yeah, you can read it.

451
00:12:21.010 --> 00:12:21.690
Okay.

452
00:12:21.690 --> 00:12:23.210
Then we have to set up a post

453
00:12:23.210 --> 00:12:24.890
route to add a new book.

454
00:12:24.890 --> 00:12:25.930
Okay.

455
00:12:25.930 --> 00:12:28.570
Now user can even add a new book.

456
00:12:28.570 --> 00:12:29.970
So let's continue from here.

457
00:12:29.970 --> 00:12:31.250
In the next video, I don't want

458
00:12:31.250 --> 00:12:32.570
to increase the length of the video.

459
00:12:33.620 --> 00:12:34.580
So right now what I will

460
00:12:34.580 --> 00:12:36.100
suggest you is that just try

461
00:12:36.100 --> 00:12:37.500
to understand this code, okay?

462
00:12:37.500 --> 00:12:38.860
Just try to read this code that

463
00:12:38.860 --> 00:12:39.980
what is happening in this code.

464
00:12:39.980 --> 00:12:41.260
So I'll just pause the video here.

465
00:12:41.260 --> 00:12:42.180
You can just pause the video

466
00:12:42.180 --> 00:12:43.380
right here and try

467
00:12:43.380 --> 00:12:44.660
to understand line by line

468
00:12:44.660 --> 00:12:46.180
for everything what we are doing.
