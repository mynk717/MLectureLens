WEBVTT

1
00:00:00.160 --> 00:00:01.680
Okay, so let's proceed

2
00:00:01.680 --> 00:00:03.360
further with our project.

3
00:00:03.360 --> 00:00:04.360
So now we have to set

4
00:00:04.360 --> 00:00:06.160
up this post route thing.

5
00:00:06.160 --> 00:00:08.160
So post route, you have to.

6
00:00:08.160 --> 00:00:09.240
Okay, so now this is something

7
00:00:09.240 --> 00:00:10.520
that I have to teach you that is

8
00:00:10.520 --> 00:00:12.160
really, really, really cool.

9
00:00:12.160 --> 00:00:13.760
Now see guys, what happens is when

10
00:00:13.760 --> 00:00:15.120
you make a post request, right?

11
00:00:15.120 --> 00:00:16.160
So let's go back.

12
00:00:16.160 --> 00:00:17.520
When you do a post request,

13
00:00:17.520 --> 00:00:18.840
do you remember that you

14
00:00:18.840 --> 00:00:20.040
have to even send a body?

15
00:00:20.040 --> 00:00:21.120
That you can send a body.

16
00:00:21.840 --> 00:00:23.720
Now for this body purpose, that

17
00:00:23.720 --> 00:00:25.040
is the actual data, we are

18
00:00:25.040 --> 00:00:26.860
again going to use JSON only.

19
00:00:26.860 --> 00:00:29.500
That means our backend, sorry, our

20
00:00:29.500 --> 00:00:30.940
front end, our client is going to

21
00:00:30.940 --> 00:00:32.860
send me the data as a JSON format.

22
00:00:33.660 --> 00:00:34.580
Now how will I know

23
00:00:34.580 --> 00:00:35.740
that this is JSON?

24
00:00:35.740 --> 00:00:37.860
So the client has to set some

25
00:00:37.860 --> 00:00:39.300
headers that hey, I'm sending

26
00:00:39.300 --> 00:00:41.740
a JSON data on the backend.

27
00:00:41.740 --> 00:00:43.860
We will read this JSON data and we

28
00:00:43.860 --> 00:00:45.340
will do the operation that means

29
00:00:45.340 --> 00:00:46.660
to create something and we will

30
00:00:46.660 --> 00:00:48.100
send an acknowledgement, okay,

31
00:00:48.100 --> 00:00:50.060
that your post has been created.

32
00:00:50.620 --> 00:00:52.100
So now what I will do is I'll just

33
00:00:52.100 --> 00:00:54.470
create a post route and app post

34
00:00:54.470 --> 00:00:56.710
that if you post something to

35
00:00:56.710 --> 00:00:58.190
books, this is where basically you

36
00:00:58.190 --> 00:00:59.590
are trying to create some data,

37
00:00:59.590 --> 00:01:00.390
right?

38
00:01:00.390 --> 00:01:01.790
And let's have request

39
00:01:01.790 --> 00:01:02.710
you have response.

40
00:01:03.270 --> 00:01:05.750
So what I want to do is as of now,

41
00:01:05.750 --> 00:01:07.910
let's just return a response.

42
00:01:07.910 --> 00:01:09.310
JSON saying that this is

43
00:01:09.310 --> 00:01:10.230
under construction, right?

44
00:01:10.230 --> 00:01:13.030
So I'll just send a message, message

45
00:01:13.030 --> 00:01:18.390
that this root is under development.

46
00:01:18.390 --> 00:01:20.410
Okay, so we have not finished

47
00:01:20.410 --> 00:01:21.370
setting up this.

48
00:01:21.370 --> 00:01:22.570
What I want to show you is

49
00:01:22.570 --> 00:01:24.010
what if I do a console

50
00:01:24.010 --> 00:01:26.090
log of request dot data.

51
00:01:26.090 --> 00:01:27.250
Sorry, request body.

52
00:01:27.250 --> 00:01:29.490
I mean, so let's understand that what

53
00:01:29.490 --> 00:01:31.450
this request body will give me if

54
00:01:31.450 --> 00:01:33.330
I send some data from the front end.

55
00:01:33.330 --> 00:01:35.490
Okay, so npm start working.

56
00:01:35.490 --> 00:01:36.329
Good.

57
00:01:36.329 --> 00:01:37.530
So now if I make a post

58
00:01:37.530 --> 00:01:39.370
request and in the body

59
00:01:39.370 --> 00:01:40.490
let's send some data.

60
00:01:40.490 --> 00:01:42.730
So let's send test

61
00:01:42.730 --> 00:01:44.490
and the value as abc.

62
00:01:44.490 --> 00:01:44.930
Okay.

63
00:01:44.930 --> 00:01:46.360
Or ancient.

64
00:01:46.360 --> 00:01:47.560
You see that what we are getting,

65
00:01:47.560 --> 00:01:49.880
you see we are getting an undefined

66
00:01:49.880 --> 00:01:51.320
what happened here?

67
00:01:51.320 --> 00:01:53.440
Even though I am sending some

68
00:01:53.440 --> 00:01:54.720
data and what you will notice

69
00:01:54.720 --> 00:01:56.160
is automatically the headers

70
00:01:56.160 --> 00:01:57.640
are being set to like JSON.

71
00:01:57.640 --> 00:01:58.680
I'll show you that.

72
00:01:58.680 --> 00:01:59.880
But can you see that we are getting

73
00:01:59.880 --> 00:02:02.920
undefined why the request or body is

74
00:02:02.920 --> 00:02:05.400
coming to be undefined even though

75
00:02:05.400 --> 00:02:06.680
we are sending this test.

76
00:02:06.680 --> 00:02:08.800
Okay, so now let me show

77
00:02:08.800 --> 00:02:09.440
you something also.

78
00:02:09.440 --> 00:02:11.840
So request console.log request.

79
00:02:11.840 --> 00:02:12.490
Headers.

80
00:02:12.490 --> 00:02:14.170
Okay, request headers.

81
00:02:14.170 --> 00:02:15.970
So let's understand, let's see what

82
00:02:15.970 --> 00:02:17.250
is coming from the front end.

83
00:02:17.250 --> 00:02:18.410
So if I do an enter,

84
00:02:18.410 --> 00:02:20.330
let's understand what happened.

85
00:02:20.330 --> 00:02:22.570
I got these headers in Which I have

86
00:02:22.570 --> 00:02:24.810
content type application/JSON.

87
00:02:24.810 --> 00:02:27.050
So who set this this Thunder client.

88
00:02:27.050 --> 00:02:28.810
So it is telling me that hey bro,

89
00:02:28.810 --> 00:02:30.290
I am sending you a data which is

90
00:02:30.290 --> 00:02:32.370
of type JSON but it is undefined.

91
00:02:32.370 --> 00:02:34.490
Oh okay, something is bad going on.

92
00:02:34.490 --> 00:02:35.770
Let's send some XML data.

93
00:02:35.770 --> 00:02:37.490
Okay, so XML data.

94
00:02:37.490 --> 00:02:39.410
Let's or maybe some text data.

95
00:02:39.410 --> 00:02:40.850
So this is a test.

96
00:02:40.850 --> 00:02:42.130
If I do a send now.

97
00:02:42.130 --> 00:02:43.250
So now content type

98
00:02:43.250 --> 00:02:44.370
changes to text plane.

99
00:02:44.370 --> 00:02:45.530
But still the, still

100
00:02:45.530 --> 00:02:47.090
the body is undefined.

101
00:02:47.090 --> 00:02:49.890
So what happens is see your backend,

102
00:02:49.890 --> 00:02:53.890
your Express has no idea how to

103
00:02:53.890 --> 00:02:55.770
like you know, parse how to read

104
00:02:55.770 --> 00:02:57.650
this different kinds of data.

105
00:02:57.650 --> 00:02:58.850
It can be adjacent data,

106
00:02:58.850 --> 00:03:00.370
it can be a plain data.

107
00:03:00.370 --> 00:03:01.530
Because it depends

108
00:03:01.530 --> 00:03:02.610
on the content type.

109
00:03:02.610 --> 00:03:03.570
Correct, it depends

110
00:03:03.570 --> 00:03:05.130
on the content type that what kind

111
00:03:05.130 --> 00:03:06.450
of content type is coming.

112
00:03:06.450 --> 00:03:07.810
And based on that this

113
00:03:07.810 --> 00:03:09.250
body has to be processed.

114
00:03:09.250 --> 00:03:11.780
So, so for that Express has

115
00:03:11.780 --> 00:03:14.420
a concept known as middlewares.

116
00:03:14.420 --> 00:03:15.780
Okay so there is a concept

117
00:03:15.780 --> 00:03:17.700
known as middlewares.

118
00:03:17.700 --> 00:03:18.900
So right now there is no need

119
00:03:18.900 --> 00:03:19.980
to understand what are

120
00:03:19.980 --> 00:03:21.740
these middlewares, but you

121
00:03:21.740 --> 00:03:22.860
can understand that these are

122
00:03:22.860 --> 00:03:24.020
something like plugins.

123
00:03:24.020 --> 00:03:26.420
So okay, so you can even use

124
00:03:26.420 --> 00:03:28.820
Sorry, let me just write plugins.

125
00:03:29.380 --> 00:03:31.300
So you can even use some built

126
00:03:31.300 --> 00:03:32.580
in plugins of Express.

127
00:03:32.580 --> 00:03:34.060
You can install plugins from

128
00:03:34.060 --> 00:03:35.740
the npm also and even you

129
00:03:35.740 --> 00:03:36.980
can build your own plugins.

130
00:03:37.610 --> 00:03:39.050
So there is one plugin, one

131
00:03:39.050 --> 00:03:40.730
middleware that is known as

132
00:03:40.730 --> 00:03:42.770
a JSON for a JSON parser.

133
00:03:42.770 --> 00:03:44.410
So how to use, you have to say

134
00:03:44.410 --> 00:03:46.780
app dot use okay app

135
00:03:46.780 --> 00:03:48.730
dot use and the plugin name.

136
00:03:48.730 --> 00:03:50.730
So application is this app.

137
00:03:50.730 --> 00:03:52.850
Okay dot use what I want

138
00:03:52.850 --> 00:03:54.730
to use, I want to use Express JSON.

139
00:03:55.290 --> 00:03:56.250
So what is this?

140
00:03:56.250 --> 00:03:58.090
This is basically a plugin.

141
00:03:58.090 --> 00:03:59.970
What this plugin is now doing is

142
00:03:59.970 --> 00:04:02.210
that if some data comes from the

143
00:04:02.210 --> 00:04:05.260
front end and it has a header that

144
00:04:05.260 --> 00:04:07.780
is application/ JSON, it will do

145
00:04:07.780 --> 00:04:10.020
all the transformations for me and

146
00:04:10.020 --> 00:04:12.220
give me the actual data in the

147
00:04:12.220 --> 00:04:13.380
request or body.

148
00:04:13.380 --> 00:04:15.140
So this plugin has been installed.

149
00:04:15.140 --> 00:04:16.339
Okay, so this is coming from

150
00:04:16.339 --> 00:04:18.100
the Express only built in one.

151
00:04:18.100 --> 00:04:19.740
So I have basically initialized

152
00:04:19.740 --> 00:04:21.019
this middleware I have put up,

153
00:04:21.019 --> 00:04:22.820
I have set up one middleware.

154
00:04:22.820 --> 00:04:24.820
Now let me just do an npm start.

155
00:04:24.820 --> 00:04:26.540
Now if I send a text data you

156
00:04:26.540 --> 00:04:27.780
can see I'm getting nothing.

157
00:04:27.780 --> 00:04:28.900
Correct, I'm getting nothing

158
00:04:28.900 --> 00:04:29.860
because it's a text.

159
00:04:30.370 --> 00:04:31.970
Let's try to send a JSON data.

160
00:04:31.970 --> 00:04:33.650
Whoa, do you see that I

161
00:04:33.650 --> 00:04:34.690
started getting the data.

162
00:04:34.690 --> 00:04:37.010
If I do send test anc.

163
00:04:37.010 --> 00:04:38.890
Okay, so if I do something like

164
00:04:38.890 --> 00:04:42.370
else as A and the value as bbb.

165
00:04:42.370 --> 00:04:43.250
So what you can see that

166
00:04:43.250 --> 00:04:44.930
I'm getting ANC bbb.

167
00:04:44.930 --> 00:04:46.770
So how I am able to get the data

168
00:04:46.770 --> 00:04:48.570
now because this plugin installed

169
00:04:48.570 --> 00:04:49.770
similarly have plugins

170
00:04:49.770 --> 00:04:51.890
for Express, Txt, Express, JSON.

171
00:04:51.890 --> 00:04:52.490
But we don't.

172
00:04:52.490 --> 00:04:53.570
We just want to have a support

173
00:04:53.570 --> 00:04:54.730
for JSON incoming

174
00:04:54.730 --> 00:04:56.790
calls, JSON incoming data.

175
00:04:56.790 --> 00:04:58.310
So this plugin has to be installed.

176
00:04:58.310 --> 00:04:59.790
Okay, so it's kind of a middleware.

177
00:04:59.790 --> 00:05:00.430
So I'll show you what

178
00:05:00.430 --> 00:05:01.230
is a middleware.

179
00:05:01.230 --> 00:05:02.270
We will have a dedicated

180
00:05:02.270 --> 00:05:03.190
videos on middleware.

181
00:05:03.190 --> 00:05:04.790
Very important topic.

182
00:05:04.790 --> 00:05:07.190
Now what I can do is I have the body.

183
00:05:07.190 --> 00:05:08.510
So from the body I have

184
00:05:08.510 --> 00:05:09.990
to extract some data.

185
00:05:09.990 --> 00:05:11.990
Okay, so I'll just say request body.

186
00:05:12.710 --> 00:05:14.910
So when you want to create, you have

187
00:05:14.910 --> 00:05:16.870
to give me a title and an author.

188
00:05:16.870 --> 00:05:19.190
So you have to give me title

189
00:05:19.190 --> 00:05:20.270
and you have to give me

190
00:05:20.270 --> 00:05:21.910
the author of the book.

191
00:05:21.910 --> 00:05:23.640
Now, now what I will do is first

192
00:05:23.640 --> 00:05:25.280
of all let's do a validation.

193
00:05:25.280 --> 00:05:29.200
If no title is coming or title dot

194
00:05:29.200 --> 00:05:31.800
trim or title is actually coming to

195
00:05:31.800 --> 00:05:33.760
be, let's say just an empty string.

196
00:05:33.760 --> 00:05:35.320
So this is a bad request, right?

197
00:05:35.320 --> 00:05:40.160
So return response status 400.JSON

198
00:05:40.160 --> 00:05:41.760
and I'll send an error message

199
00:05:41.760 --> 00:05:44.240
saying that the title is required.

200
00:05:44.240 --> 00:05:46.000
So you know, this is the validation.

201
00:05:46.880 --> 00:05:47.680
Okay, good.

202
00:05:48.190 --> 00:05:49.350
I'll just copy this piece

203
00:05:49.350 --> 00:05:51.550
of code and I'll just repaste it.

204
00:05:51.550 --> 00:05:52.270
I hope you can see

205
00:05:52.270 --> 00:05:53.150
the code guys, right?

206
00:05:53.150 --> 00:05:54.110
I hope it is clear.

207
00:05:54.670 --> 00:05:55.950
Then I can just say

208
00:05:55.950 --> 00:05:58.790
if no author or author is an empty

209
00:05:58.790 --> 00:05:59.790
string in this case I'll

210
00:05:59.790 --> 00:06:01.310
just say author is required.

211
00:06:01.310 --> 00:06:03.030
Now if you are getting the title,

212
00:06:03.030 --> 00:06:04.430
you are getting the author.

213
00:06:04.430 --> 00:06:05.710
Now let's create a book.

214
00:06:05.710 --> 00:06:07.310
So I can just create a book.

215
00:06:07.310 --> 00:06:09.550
So book needs an id.

216
00:06:09.550 --> 00:06:10.950
So ID we will generate.

217
00:06:10.950 --> 00:06:12.190
How can we generate an id?

218
00:06:12.190 --> 00:06:14.070
I can just say take the existing

219
00:06:14.070 --> 00:06:15.350
books and calculate the length.

220
00:06:15.350 --> 00:06:17.510
So, so first is like id1, then

221
00:06:17.510 --> 00:06:19.390
id2, then id3, then id4,

222
00:06:19.390 --> 00:06:21.830
then you can put up title and then

223
00:06:21.830 --> 00:06:23.150
you can put up author.

224
00:06:23.150 --> 00:06:24.550
And finally what I will

225
00:06:24.550 --> 00:06:25.790
do is in my database.

226
00:06:25.790 --> 00:06:27.870
So books is my database right now.

227
00:06:27.870 --> 00:06:30.350
So books dot push the book.

228
00:06:30.350 --> 00:06:31.909
Okay, so what this will do, this

229
00:06:31.909 --> 00:06:34.150
will keep in the database and I will

230
00:06:34.150 --> 00:06:35.910
just say, okay, so first of all

231
00:06:35.910 --> 00:06:37.390
I have to return a JSON message.

232
00:06:37.390 --> 00:06:39.550
That book created success.

233
00:06:39.550 --> 00:06:42.020
Okay, so book created success.

234
00:06:43.140 --> 00:06:44.740
And I can send the ID that

235
00:06:44.740 --> 00:06:45.740
what is the ID of the book

236
00:06:45.740 --> 00:06:46.740
that you just made?

237
00:06:46.740 --> 00:06:48.020
So I'll just take the.

238
00:06:48.820 --> 00:06:50.380
Let me just compute the ID here.

239
00:06:50.380 --> 00:06:54.180
Okay, so ID equals books.

240
00:06:54.180 --> 00:06:54.820
Length.

241
00:06:54.820 --> 00:06:56.740
Just pass it like this.

242
00:06:56.740 --> 00:06:58.500
And just pass the id.

243
00:06:58.500 --> 00:06:59.860
And one more thing because

244
00:06:59.860 --> 00:07:01.660
now you have created a resource

245
00:07:01.660 --> 00:07:02.780
on the backend, it's, a.

246
00:07:02.780 --> 00:07:04.420
It's kind of like DB operation.

247
00:07:04.420 --> 00:07:05.660
So the status quo for

248
00:07:05.660 --> 00:07:07.460
this is not 200 but 201.

249
00:07:07.460 --> 00:07:08.380
So this indicates that

250
00:07:08.380 --> 00:07:09.700
something has been created.

251
00:07:09.700 --> 00:07:10.140
Okay.

252
00:07:10.140 --> 00:07:11.100
We have to use the correct

253
00:07:11.100 --> 00:07:12.540
status codes because that what

254
00:07:12.540 --> 00:07:14.100
makes us a good developer.

255
00:07:14.100 --> 00:07:15.620
Now if I go on the back front

256
00:07:15.620 --> 00:07:17.020
end, let's try to create a book.

257
00:07:17.020 --> 00:07:17.540
Send.

258
00:07:17.540 --> 00:07:19.780
Oh, we got a 400 bad request.

259
00:07:19.780 --> 00:07:21.460
Title is required, guys.

260
00:07:21.460 --> 00:07:22.180
So title.

261
00:07:22.180 --> 00:07:26.020
So book is that master node js.

262
00:07:26.020 --> 00:07:27.540
Oh, author is also required.

263
00:07:27.540 --> 00:07:29.060
Who is the author of this book?

264
00:07:29.060 --> 00:07:31.140
None other than Piyush Kirk.

265
00:07:31.140 --> 00:07:31.780
Send.

266
00:07:31.780 --> 00:07:33.500
Okay, book created success.

267
00:07:33.500 --> 00:07:35.100
201 created ID 2.

268
00:07:35.100 --> 00:07:37.180
Let's try to get all the books sent.

269
00:07:38.150 --> 00:07:39.140
Sorry, not this.

270
00:07:39.140 --> 00:07:39.940
Slash books.

271
00:07:39.940 --> 00:07:41.580
Right, so slash books.

272
00:07:42.940 --> 00:07:43.700
Oh, sorry.

273
00:07:43.700 --> 00:07:44.900
I made this book twice.

274
00:07:44.900 --> 00:07:46.260
So I have to do a get request.

275
00:07:46.260 --> 00:07:46.860
My bad.

276
00:07:46.860 --> 00:07:48.990
So now you can see that I'm getting,

277
00:07:48.990 --> 00:07:50.420
So this is my mistake.

278
00:07:50.420 --> 00:07:52.540
Okay, so we are getting ID as one.

279
00:07:52.540 --> 00:07:53.500
We are getting this book.

280
00:07:53.500 --> 00:07:54.700
We are getting this book,

281
00:07:54.700 --> 00:07:55.900
and we are getting this book.

282
00:07:55.900 --> 00:07:57.300
So right now we have four books.

283
00:07:57.300 --> 00:07:57.740
Right?

284
00:07:57.740 --> 00:07:59.420
And this should not be

285
00:07:59.420 --> 00:08:00.780
the case, right, guys?

286
00:08:02.310 --> 00:08:03.230
Oh, I.

287
00:08:03.230 --> 00:08:03.670
I see.

288
00:08:03.670 --> 00:08:04.070
I see.

289
00:08:04.070 --> 00:08:05.150
Actually, it should be plus

290
00:08:05.150 --> 00:08:08.550
one because, length is fine.

291
00:08:08.550 --> 00:08:10.870
Like first will, get first only.

292
00:08:10.870 --> 00:08:11.990
So it should be actually

293
00:08:11.990 --> 00:08:13.230
length plus one.

294
00:08:13.230 --> 00:08:14.710
Okay, so let me just do

295
00:08:14.710 --> 00:08:15.630
it again right now.

296
00:08:15.630 --> 00:08:16.510
How many books do you have?

297
00:08:16.510 --> 00:08:17.189
You have one.

298
00:08:17.189 --> 00:08:18.310
You have two.

299
00:08:18.310 --> 00:08:20.230
Now what I'll do is I'll just say,

300
00:08:21.110 --> 00:08:23.190
let me make a post request send.

301
00:08:23.190 --> 00:08:24.470
Book created.

302
00:08:24.470 --> 00:08:26.310
Now get request sent.

303
00:08:26.310 --> 00:08:28.090
Now you have three books.

304
00:08:28.090 --> 00:08:29.610
Let's create one more book.

305
00:08:29.610 --> 00:08:31.050
So master react.

306
00:08:31.610 --> 00:08:32.650
Okay, cool.

307
00:08:32.650 --> 00:08:33.890
Let's create one more book

308
00:08:33.890 --> 00:08:35.850
for maybe next year's.

309
00:08:35.850 --> 00:08:36.929
And, let's create one

310
00:08:36.929 --> 00:08:38.809
more book for Docker.

311
00:08:38.809 --> 00:08:41.210
Now if I try to get all the books

312
00:08:41.210 --> 00:08:42.730
you have, 1, 2, 3, 4, 5.

313
00:08:42.730 --> 00:08:43.929
You have books.

314
00:08:43.929 --> 00:08:44.490
Let's.

315
00:08:44.490 --> 00:08:46.370
I want to get the details

316
00:08:46.370 --> 00:08:47.370
of book four.

317
00:08:48.010 --> 00:08:49.370
Okay, so this is the book four.

318
00:08:49.370 --> 00:08:49.850
Nice.

319
00:08:49.850 --> 00:08:50.970
I want to get the details

320
00:08:50.970 --> 00:08:51.770
of book five.

321
00:08:51.770 --> 00:08:52.290
Okay.

322
00:08:52.290 --> 00:08:53.370
I want to get the details

323
00:08:53.370 --> 00:08:54.250
of book six.

324
00:08:54.250 --> 00:08:54.650
Nice.

325
00:08:54.650 --> 00:08:56.450
Book seven does not exist.

326
00:08:56.450 --> 00:08:56.810
Right.

327
00:08:57.370 --> 00:08:59.410
So you can see that how we were able

328
00:08:59.410 --> 00:09:01.610
to create a post request which does

329
00:09:01.610 --> 00:09:05.370
validation creation and then return.

330
00:09:05.370 --> 00:09:05.810
Nice.

331
00:09:05.810 --> 00:09:06.770
So this is what your post

332
00:09:06.770 --> 00:09:08.010
route basically looks like.

333
00:09:08.010 --> 00:09:10.810
So, now in this particular video,

334
00:09:10.810 --> 00:09:12.530
you have learned one thing new, that

335
00:09:12.530 --> 00:09:14.690
you have a lot of plugins and known

336
00:09:14.690 --> 00:09:16.090
as middlewares in Express.

337
00:09:16.090 --> 00:09:18.330
Okay, how can you use.

338
00:09:18.330 --> 00:09:19.410
How can you initialize

339
00:09:19.410 --> 00:09:20.770
a plugin using this app.

340
00:09:20.770 --> 00:09:21.250
Use think.

341
00:09:21.250 --> 00:09:21.930
Okay.

342
00:09:21.930 --> 00:09:23.370
And in future, we are also going

343
00:09:23.370 --> 00:09:25.630
to create our own middlewares.

344
00:09:25.630 --> 00:09:26.790
Okay, now let's quickly Set

345
00:09:26.790 --> 00:09:28.070
up this delete route as well.

346
00:09:28.070 --> 00:09:29.110
Okay, so delete route.

347
00:09:29.110 --> 00:09:30.590
Basically you will pass me an ID

348
00:09:30.590 --> 00:09:32.270
and I'll delete that book.

349
00:09:32.270 --> 00:09:33.670
So it's somewhat similar

350
00:09:33.670 --> 00:09:34.750
to this, only.

351
00:09:34.750 --> 00:09:36.190
Okay, so if you want

352
00:09:36.190 --> 00:09:37.560
to delete a book, app,

353
00:09:37.560 --> 00:09:40.670
dot delete, app, dot delete.

354
00:09:40.670 --> 00:09:41.750
So this is the path.

355
00:09:41.750 --> 00:09:42.710
So you have to give me

356
00:09:42.710 --> 00:09:44.150
the book ID that you want

357
00:09:44.150 --> 00:09:45.870
to delete from the database.

358
00:09:45.870 --> 00:09:48.110
So request response.

359
00:09:48.110 --> 00:09:50.350
So first let's gather the id.

360
00:09:50.350 --> 00:09:52.350
So I'll just reuse the logic, right?

361
00:09:52.870 --> 00:09:54.310
So this logic can be reused

362
00:09:54.310 --> 00:09:55.790
that first of all, get the id

363
00:09:55.790 --> 00:09:57.150
from the parameters, I.e.

364
00:09:57.150 --> 00:09:58.950
request params.id,

365
00:09:58.950 --> 00:10:00.910
parse it as a integer.

366
00:10:00.910 --> 00:10:02.270
If it is not a number, then

367
00:10:02.270 --> 00:10:03.430
you can throw an error.

368
00:10:03.430 --> 00:10:05.990
Once you get it, let's try to, you

369
00:10:05.990 --> 00:10:08.630
know, get the index of that book.

370
00:10:08.630 --> 00:10:10.430
Okay, so how can I delete?

371
00:10:10.430 --> 00:10:13.270
I can just say const index to delete.

372
00:10:13.270 --> 00:10:17.030
Okay, so I'll just say books.find

373
00:10:17.030 --> 00:10:19.520
index back where e

374
00:10:19.520 --> 00:10:21.520
ID is actually equals to the ID.

375
00:10:22.080 --> 00:10:24.600
Now if the index to delete

376
00:10:24.600 --> 00:10:26.240
is coming less than zero,

377
00:10:26.240 --> 00:10:27.600
that is a negative number.

378
00:10:27.600 --> 00:10:29.120
This basically means that you

379
00:10:29.120 --> 00:10:31.040
were not able to find the book.

380
00:10:31.040 --> 00:10:32.400
If you are not able to find

381
00:10:32.400 --> 00:10:34.160
the book, it's a 404.

382
00:10:34.160 --> 00:10:35.840
It's a 404 that you are trying to

383
00:10:35.840 --> 00:10:37.520
delete a book which does not exist.

384
00:10:37.520 --> 00:10:38.720
404, right.

385
00:10:38.720 --> 00:10:40.360
But if you find, you have to now

386
00:10:40.360 --> 00:10:41.800
delete this particular index.

387
00:10:41.800 --> 00:10:42.880
How can you delete that?

388
00:10:42.880 --> 00:10:45.420
So you can just say books dot

389
00:10:45.420 --> 00:10:47.100
and you can just say slice.

390
00:10:48.300 --> 00:10:49.980
Okay, so you can just place,

391
00:10:49.980 --> 00:10:51.300
start from this index.

392
00:10:51.300 --> 00:10:53.260
That is the index to delete

393
00:10:53.260 --> 00:10:55.340
and delete how many entries

394
00:10:55.340 --> 00:10:56.940
I want to delete one entry.

395
00:10:56.940 --> 00:10:58.700
Okay, delete one entry.

396
00:10:58.700 --> 00:11:00.380
So this is going to delete one entry.

397
00:11:00.380 --> 00:11:01.100
Okay.

398
00:11:01.100 --> 00:11:02.780
Inserted new elements in their place,

399
00:11:02.780 --> 00:11:03.940
returning the deleted elements.

400
00:11:03.940 --> 00:11:04.300
Nice.

401
00:11:04.300 --> 00:11:05.340
So this, this basically

402
00:11:05.340 --> 00:11:06.460
returns a deleted element.

403
00:11:06.460 --> 00:11:07.980
And finally I can just say return,

404
00:11:08.730 --> 00:11:11.260
response JSON of 200

405
00:11:11.960 --> 00:11:14.040
and I can just say.JSON

406
00:11:14.040 --> 00:11:18.920
and the message is, book deleted.

407
00:11:18.920 --> 00:11:20.920
Okay, book deleted.

408
00:11:22.040 --> 00:11:23.560
So let's try this thing.

409
00:11:23.560 --> 00:11:24.480
So now, right now, how

410
00:11:24.480 --> 00:11:25.360
many books do I have?

411
00:11:25.360 --> 00:11:26.480
See the thing is that it

412
00:11:26.480 --> 00:11:28.200
was in, in the memory.

413
00:11:28.200 --> 00:11:29.800
So because I refresh the server,

414
00:11:29.800 --> 00:11:31.800
I am back to the initial, state.

415
00:11:32.440 --> 00:11:34.760
Let's delete this docker book.

416
00:11:34.760 --> 00:11:36.760
Okay, so let's first

417
00:11:36.760 --> 00:11:37.640
create a book, right?

418
00:11:37.640 --> 00:11:39.100
So let's create a docker book.

419
00:11:39.100 --> 00:11:40.780
Let's create a, react book.

420
00:11:40.780 --> 00:11:43.180
And let's also create a node js.

421
00:11:43.180 --> 00:11:44.780
Book node js is already there.

422
00:11:44.780 --> 00:11:45.580
Let's create a,

423
00:11:45.580 --> 00:11:46.600
maybe docker is there.

424
00:11:47.160 --> 00:11:48.060
What else we can get?

425
00:11:48.060 --> 00:11:49.500
We can create js.

426
00:11:49.500 --> 00:11:51.580
Now let's try to get all the books.

427
00:11:51.580 --> 00:11:52.940
Okay, working good.

428
00:11:52.940 --> 00:11:55.020
Let's try to get a book by id.

429
00:11:55.580 --> 00:11:56.540
Okay, working good.

430
00:11:56.540 --> 00:11:57.740
Let's try to delete this book.

431
00:11:57.740 --> 00:11:59.580
I want to delete the fourth book.

432
00:12:00.460 --> 00:12:02.380
Okay, we got an error scanner

433
00:12:02.380 --> 00:12:03.220
set headers after they

434
00:12:03.220 --> 00:12:03.940
are sent to the client.

435
00:12:03.940 --> 00:12:05.540
Oh, we are missing some

436
00:12:05.540 --> 00:12:06.220
return statement.

437
00:12:06.850 --> 00:12:07.730
Oh, guys, my bad.

438
00:12:07.730 --> 00:12:09.610
See, this should be status, not JSON.

439
00:12:09.610 --> 00:12:10.210
My bad.

440
00:12:10.210 --> 00:12:11.130
Okay, this should be

441
00:12:11.130 --> 00:12:12.210
status, not JSON.

442
00:12:12.210 --> 00:12:13.330
Let's do it again.

443
00:12:13.330 --> 00:12:14.170
So first we need to

444
00:12:14.170 --> 00:12:15.090
create some books.

445
00:12:15.090 --> 00:12:15.610
Okay.

446
00:12:15.610 --> 00:12:17.170
So create a book.

447
00:12:17.170 --> 00:12:18.530
Create a Docker book.

448
00:12:19.490 --> 00:12:20.050
Okay.

449
00:12:20.050 --> 00:12:22.690
Create a, node js book.

450
00:12:22.690 --> 00:12:23.170
Nice.

451
00:12:23.810 --> 00:12:25.730
Let's get all the books.

452
00:12:25.730 --> 00:12:26.570
You can see that we

453
00:12:26.570 --> 00:12:27.810
have couple of books.

454
00:12:27.810 --> 00:12:29.090
Let's try to get

455
00:12:29.090 --> 00:12:30.530
the book number four.

456
00:12:30.530 --> 00:12:32.450
And now I want to delete it.

457
00:12:33.090 --> 00:12:34.050
Book deleted.

458
00:12:34.050 --> 00:12:35.970
Now if I try to get this book,

459
00:12:35.970 --> 00:12:37.530
I should get a 404 because book

460
00:12:37.530 --> 00:12:38.490
with four doesn't exist.

461
00:12:38.490 --> 00:12:40.130
You can see 1, 2, 3,

462
00:12:40.130 --> 00:12:41.210
and then you have five.

463
00:12:41.210 --> 00:12:42.770
The book with four deleted.

464
00:12:42.770 --> 00:12:44.050
Okay, so this is how

465
00:12:44.050 --> 00:12:45.730
basically you can use it.

466
00:12:45.730 --> 00:12:47.730
And I, hope you like that.

467
00:12:47.730 --> 00:12:49.250
How we have implemented this

468
00:12:49.250 --> 00:12:50.250
and is there anything.

469
00:12:50.250 --> 00:12:51.170
So these are the routes

470
00:12:51.170 --> 00:12:52.450
that we have already done.

471
00:12:52.450 --> 00:12:53.930
So yeah, this was a pretty

472
00:12:53.930 --> 00:12:55.010
good challenge, right?

473
00:12:55.010 --> 00:12:56.250
We have learned a lot of new

474
00:12:56.250 --> 00:12:57.730
things in express with this.

475
00:12:57.730 --> 00:12:58.730
And that's basically how

476
00:12:58.730 --> 00:13:00.210
you will create your APIs.

477
00:13:00.210 --> 00:13:01.610
The only difference will be instead

478
00:13:01.610 --> 00:13:02.930
of this in memory DB you

479
00:13:02.930 --> 00:13:04.250
will have an actual database.

480
00:13:04.250 --> 00:13:05.970
It can be MongoDB, it can be.

481
00:13:05.970 --> 00:13:08.290
It can be postgres, it can be MySQL,

482
00:13:08.290 --> 00:13:09.730
any database that you like.
