WEBVTT

1
00:00:01.040 --> 00:00:03.520
Moving ahead into the journey of our

2
00:00:03.520 --> 00:00:05.640
Python, let's take one more topic

3
00:00:05.640 --> 00:00:07.120
which we are going to briefly touch.

4
00:00:07.120 --> 00:00:08.320
We will not go too much in

5
00:00:08.320 --> 00:00:10.000
depth as of now because we are just

6
00:00:10.000 --> 00:00:11.080
exploring the data

7
00:00:11.080 --> 00:00:13.120
types that is known as string.

8
00:00:13.120 --> 00:00:14.440
So anytime you see the word,

9
00:00:14.440 --> 00:00:16.119
the string itself or the word like

10
00:00:16.119 --> 00:00:18.160
fraction, these are treated as

11
00:00:18.160 --> 00:00:20.200
string in the world of Python.

12
00:00:20.200 --> 00:00:21.600
And yes, I am hundred percent

13
00:00:21.600 --> 00:00:22.680
aware that string is

14
00:00:22.680 --> 00:00:23.880
this much of the in depth.

15
00:00:23.880 --> 00:00:25.240
They have a lot of methods, you can

16
00:00:25.240 --> 00:00:26.720
do lot of things with the strings,

17
00:00:27.260 --> 00:00:28.500
format them, uppercase

18
00:00:28.500 --> 00:00:30.460
them, lower them, count the values,

19
00:00:31.060 --> 00:00:32.420
manipulations, a whole lot

20
00:00:32.420 --> 00:00:34.060
of thing exist with that.

21
00:00:34.060 --> 00:00:35.940
But I personally think that the best

22
00:00:35.940 --> 00:00:37.300
time to learn the string is when

23
00:00:37.300 --> 00:00:38.860
you actually build something, do

24
00:00:38.860 --> 00:00:40.540
some projects in it, or actually

25
00:00:40.540 --> 00:00:42.300
have a use case of the string.

26
00:00:42.300 --> 00:00:43.900
So what we're going to see is just

27
00:00:43.900 --> 00:00:45.540
the basics of string, one or two

28
00:00:45.540 --> 00:00:46.940
use cases so that we understand

29
00:00:46.940 --> 00:00:48.380
the part of it and we'll learn

30
00:00:48.380 --> 00:00:49.740
about a little bit of the slicing

31
00:00:49.740 --> 00:00:51.980
of the strings, indexing as well

32
00:00:51.980 --> 00:00:52.620
as slicing.

33
00:00:53.140 --> 00:00:54.940
So the only two topics that we want

34
00:00:54.940 --> 00:00:57.260
to start with is the core

35
00:00:57.260 --> 00:00:58.820
string itself, what does it mean by

36
00:00:58.820 --> 00:01:01.060
to have a string in itself?

37
00:01:01.060 --> 00:01:02.300
Once we understand the core

38
00:01:02.300 --> 00:01:03.700
of it, then we just want

39
00:01:03.700 --> 00:01:07.060
to touch briefly about indexing.

40
00:01:07.060 --> 00:01:09.140
So each letter in the string,

41
00:01:09.140 --> 00:01:10.220
how does it mean and what

42
00:01:10.220 --> 00:01:12.020
does it actually does.

43
00:01:12.020 --> 00:01:13.940
And apart from this one final one

44
00:01:13.940 --> 00:01:15.140
which is actually pretty interesting

45
00:01:15.140 --> 00:01:17.220
and useful, is known as slicing.

46
00:01:17.220 --> 00:01:18.740
So these are the only three

47
00:01:18.740 --> 00:01:19.940
topic we are going to cover.

48
00:01:19.940 --> 00:01:21.540
We'll go with the foundation

49
00:01:21.540 --> 00:01:23.340
of it, the code, the indexing part

50
00:01:23.340 --> 00:01:25.520
of it and the slicing part of it.

51
00:01:25.520 --> 00:01:27.200
Yes, I 100% agree.

52
00:01:27.200 --> 00:01:30.000
String deserves a lot of videos,

53
00:01:30.000 --> 00:01:31.200
they have a lot of use case.

54
00:01:31.200 --> 00:01:32.720
But we'll do that right now.

55
00:01:32.720 --> 00:01:34.640
Let's just go with the basics of it.

56
00:01:34.640 --> 00:01:35.080
All right.

57
00:01:35.080 --> 00:01:36.800
And by the way, string is,

58
00:01:36.800 --> 00:01:38.640
in case you haven't just figured

59
00:01:38.640 --> 00:01:40.240
it out, it's actually

60
00:01:40.240 --> 00:01:42.800
immutable, they cannot be changed.

61
00:01:42.800 --> 00:01:44.200
So always remember strings

62
00:01:44.200 --> 00:01:46.000
are actually mutable,

63
00:01:46.000 --> 00:01:47.920
they cannot be changed.

64
00:01:47.920 --> 00:01:49.760
So in the memory they always

65
00:01:49.760 --> 00:01:51.280
actually create a new reference.

66
00:01:51.940 --> 00:01:52.980
All right, so let's go

67
00:01:52.980 --> 00:01:54.380
ahead and we still are

68
00:01:54.380 --> 00:01:55.500
in the data types actually.

69
00:01:55.500 --> 00:01:57.380
So let's go into the chapter six.

70
00:01:57.380 --> 00:01:58.460
We are running with

71
00:01:58.460 --> 00:01:59.940
a lot of chapters.

72
00:01:59.940 --> 00:02:03.060
So chapter six py and there we go.

73
00:02:03.780 --> 00:02:05.380
So in order to have a string,

74
00:02:05.380 --> 00:02:07.379
let's just define a chai type.

75
00:02:07.379 --> 00:02:09.259
The chai type is one of my favorite

76
00:02:09.259 --> 00:02:12.340
one which is ginger, chai.

77
00:02:12.340 --> 00:02:13.300
This is a string.

78
00:02:13.300 --> 00:02:13.980
Anything that you see

79
00:02:13.980 --> 00:02:16.100
in the double quote is a string.

80
00:02:16.100 --> 00:02:16.700
That is it.

81
00:02:16.700 --> 00:02:18.140
Nothing much, nothing less.

82
00:02:18.140 --> 00:02:19.060
That's it.

83
00:02:19.060 --> 00:02:20.620
And let's Just say you also are

84
00:02:20.620 --> 00:02:22.660
having, let me just shut this down.

85
00:02:23.540 --> 00:02:26.340
You also have a customer name.

86
00:02:26.340 --> 00:02:28.500
Who is asking for this one?

87
00:02:28.500 --> 00:02:29.740
Let's just say the customer

88
00:02:29.740 --> 00:02:30.660
name is Priya.

89
00:02:31.300 --> 00:02:32.460
So how do we do that?

90
00:02:32.460 --> 00:02:33.860
How do we use the string?

91
00:02:33.860 --> 00:02:34.860
Using the string is

92
00:02:34.860 --> 00:02:35.900
actually exactly same.

93
00:02:35.900 --> 00:02:37.140
Let's just say I want to print,

94
00:02:37.860 --> 00:02:40.260
I want to print a formatted string.

95
00:02:40.260 --> 00:02:42.740
So we'll just say order for.

96
00:02:42.740 --> 00:02:43.740
Inject a variable.

97
00:02:43.740 --> 00:02:44.900
We're going to go ahead and say

98
00:02:44.900 --> 00:02:46.420
customer name, order for.

99
00:02:47.730 --> 00:02:51.170
And then we are going to say chai.

100
00:02:51.170 --> 00:02:54.610
Type please with an exclamation.

101
00:02:54.610 --> 00:02:55.410
There we go.

102
00:02:55.410 --> 00:02:57.250
And if I go ahead and run

103
00:02:57.250 --> 00:02:58.970
this, the output should

104
00:02:58.970 --> 00:03:00.130
be pretty expected.

105
00:03:01.170 --> 00:03:05.010
Python 3 chapter 6 Py There we go.

106
00:03:05.010 --> 00:03:06.730
Order for Priya, Ginger.

107
00:03:06.730 --> 00:03:07.650
Chai please.

108
00:03:07.650 --> 00:03:10.210
That is it, that is the whole string.

109
00:03:10.210 --> 00:03:11.130
Now let me go ahead

110
00:03:11.130 --> 00:03:12.610
and add more to this one.

111
00:03:13.620 --> 00:03:14.540
So let's just say we want

112
00:03:14.540 --> 00:03:17.540
to have a description for the chai.

113
00:03:17.540 --> 00:03:18.700
How does the description

114
00:03:18.700 --> 00:03:19.620
for chai works?

115
00:03:19.620 --> 00:03:20.460
Let's just say we want

116
00:03:20.460 --> 00:03:24.100
to call it as aromatic and bold.

117
00:03:24.100 --> 00:03:25.860
This is our chai.

118
00:03:25.860 --> 00:03:27.420
Now we want to have the first word

119
00:03:27.420 --> 00:03:29.540
and the last word of this, string.

120
00:03:29.540 --> 00:03:30.740
I don't know why the reason

121
00:03:30.740 --> 00:03:32.740
for it, but we just want to grab it.

122
00:03:32.740 --> 00:03:34.180
So how do we do this?

123
00:03:34.180 --> 00:03:35.940
We actually go ahead and take this

124
00:03:35.940 --> 00:03:37.540
whole string and this is where we

125
00:03:37.540 --> 00:03:39.220
learn about the indexing part of it.

126
00:03:39.220 --> 00:03:40.320
So, so indexing is

127
00:03:40.320 --> 00:03:41.320
actually super easy.

128
00:03:42.040 --> 00:03:43.880
For the indexing, I'll just go

129
00:03:43.880 --> 00:03:45.800
ahead and say let's paste this.

130
00:03:45.800 --> 00:03:46.520
There we go.

131
00:03:47.480 --> 00:03:49.640
So this indexing means that

132
00:03:49.640 --> 00:03:51.600
each letter in this string is

133
00:03:51.600 --> 00:03:53.240
represented by a number.

134
00:03:54.040 --> 00:03:56.520
So the 0th letter is actually

135
00:03:56.520 --> 00:03:58.080
represented by this one.

136
00:03:58.080 --> 00:03:59.400
So the letter numbering

137
00:03:59.400 --> 00:04:00.520
actually starts with zero.

138
00:04:01.080 --> 00:04:02.320
After that, if you want to have

139
00:04:02.320 --> 00:04:04.120
the first character, then you

140
00:04:04.120 --> 00:04:05.200
simply go ahead and say, hey,

141
00:04:05.200 --> 00:04:06.280
this is my first character.

142
00:04:06.280 --> 00:04:08.040
So the first character is actually R

143
00:04:08.040 --> 00:04:10.310
and we can just keep on moving that.

144
00:04:10.310 --> 00:04:12.150
Always remember that the letter

145
00:04:12.150 --> 00:04:13.390
and the indexing always

146
00:04:13.390 --> 00:04:14.430
starts in the programming,

147
00:04:14.430 --> 00:04:16.070
especially starts from zero.

148
00:04:16.070 --> 00:04:17.190
So if I want to get the first

149
00:04:17.190 --> 00:04:19.110
world, this is my zeroth world.

150
00:04:19.110 --> 00:04:23.350
So 0, 1, 2, 3, 4, 5, 6 and 7.

151
00:04:23.990 --> 00:04:25.910
Also remember one of the thing

152
00:04:25.910 --> 00:04:28.110
in indexing range, slicing,

153
00:04:28.110 --> 00:04:30.230
whatever, that the last

154
00:04:31.750 --> 00:04:34.870
number is not inclusive.

155
00:04:35.510 --> 00:04:36.870
In the world of Python,

156
00:04:37.560 --> 00:04:39.360
last number is not inclusive.

157
00:04:39.360 --> 00:04:44.920
So when I say 0, 1, 2, 3, 4, 5, 6, 7.

158
00:04:44.920 --> 00:04:46.720
So 7 is not going to be inclusive.

159
00:04:46.720 --> 00:04:48.560
So if I just put it to 7, the C

160
00:04:48.560 --> 00:04:50.120
is never going to be inclusive.

161
00:04:50.920 --> 00:04:53.240
So I have to say from zero

162
00:04:53.240 --> 00:04:55.040
to the eight so that I can get

163
00:04:55.040 --> 00:04:56.200
the first letter and that's

164
00:04:56.200 --> 00:04:57.560
it, that's all it takes.

165
00:04:57.560 --> 00:05:00.400
So if I go ahead and say I want to

166
00:05:00.400 --> 00:05:03.120
print the first number, so I'll just

167
00:05:03.120 --> 00:05:05.820
go ahead and say first, not number.

168
00:05:05.820 --> 00:05:09.180
First word is going to be like this.

169
00:05:09.180 --> 00:05:11.020
So I can just take the chai

170
00:05:11.020 --> 00:05:13.220
description and then I can

171
00:05:13.220 --> 00:05:14.540
use the square brackets.

172
00:05:14.540 --> 00:05:15.700
That's how you define that.

173
00:05:15.700 --> 00:05:16.140
Okay.

174
00:05:16.140 --> 00:05:18.300
And this has two part the start,

175
00:05:18.300 --> 00:05:19.979
the end, and the step.

176
00:05:19.979 --> 00:05:20.620
And the step.

177
00:05:21.260 --> 00:05:23.260
So this is how I start from the 0th.

178
00:05:23.260 --> 00:05:25.500
I know if I just print out the 7.

179
00:05:25.500 --> 00:05:26.940
This is not going to be inclusive,

180
00:05:26.940 --> 00:05:27.860
but I still want to see.

181
00:05:27.860 --> 00:05:29.750
This is investigative study.

182
00:05:29.750 --> 00:05:30.870
I want a proof of everything.

183
00:05:31.430 --> 00:05:32.870
So this is what we have.

184
00:05:32.870 --> 00:05:33.990
Aromatic.

185
00:05:33.990 --> 00:05:35.550
We want C as well, so

186
00:05:35.550 --> 00:05:36.630
you get the point.

187
00:05:36.630 --> 00:05:38.750
We have aromatic as well.

188
00:05:38.750 --> 00:05:39.830
This is what we have.

189
00:05:40.550 --> 00:05:41.390
If I print this.

190
00:05:41.390 --> 00:05:43.110
There we go, nice and easy.

191
00:05:43.110 --> 00:05:44.710
There is also one more thing.

192
00:05:44.710 --> 00:05:46.310
After the colon, you can actually

193
00:05:46.310 --> 00:05:47.710
go ahead and put up a one here.

194
00:05:47.710 --> 00:05:49.550
And then let's see what happens.

195
00:05:49.550 --> 00:05:50.790
Investigation.

196
00:05:50.790 --> 00:05:52.790
Nothing happens because one means,

197
00:05:53.830 --> 00:05:55.750
each letter do not skip anything.

198
00:05:55.750 --> 00:05:57.630
One simply means one character.

199
00:05:57.630 --> 00:05:59.540
So but if I go ahead and say

200
00:05:59.540 --> 00:06:01.460
two, that means every second

201
00:06:01.460 --> 00:06:02.740
character, the one means

202
00:06:02.740 --> 00:06:04.540
every character, and two means

203
00:06:04.540 --> 00:06:05.580
every second character.

204
00:06:05.580 --> 00:06:06.820
So what you're going to get in this

205
00:06:06.820 --> 00:06:09.340
one is you get A, then the next

206
00:06:09.340 --> 00:06:10.940
character, R is being skipped.

207
00:06:10.940 --> 00:06:11.940
So every second character

208
00:06:11.940 --> 00:06:12.940
is being skipped.

209
00:06:12.940 --> 00:06:13.980
This one we get it.

210
00:06:13.980 --> 00:06:15.700
But after that Is being skipped.

211
00:06:15.700 --> 00:06:16.860
And you might be wondering

212
00:06:16.860 --> 00:06:18.460
what's the use case of this?

213
00:06:18.460 --> 00:06:19.740
This sounds really bad.

214
00:06:19.740 --> 00:06:21.060
It's not usable anymore.

215
00:06:21.060 --> 00:06:23.660
But it has its own use cases.

216
00:06:24.390 --> 00:06:25.670
Now if I go back onto this,

217
00:06:25.670 --> 00:06:27.070
there are some Pythonic way

218
00:06:27.070 --> 00:06:27.870
of doing the things.

219
00:06:27.870 --> 00:06:29.430
For example, if it is zero,

220
00:06:29.430 --> 00:06:31.070
you can avoid this, but you cannot

221
00:06:31.070 --> 00:06:32.390
avoid the starting colon.

222
00:06:32.390 --> 00:06:33.990
Yeah, Python guys loves

223
00:06:33.990 --> 00:06:36.310
to use this and show off a lot.

224
00:06:36.310 --> 00:06:37.830
But, again, you get the point.

225
00:06:37.830 --> 00:06:39.270
Now similar to this, if you want to

226
00:06:39.270 --> 00:06:41.270
have the last word just like this.

227
00:06:41.270 --> 00:06:42.110
So I can just go ahead

228
00:06:42.110 --> 00:06:43.350
and say, hey, last.

229
00:06:44.070 --> 00:06:45.350
And I have prepared

230
00:06:45.350 --> 00:06:46.550
in advance, what is this?

231
00:06:46.550 --> 00:06:48.910
So I can just say, hey, start point.

232
00:06:48.910 --> 00:06:50.390
I will just go ahead and say 12,

233
00:06:50.390 --> 00:06:52.110
but I don't mention the last point.

234
00:06:52.110 --> 00:06:53.380
That means go ahead

235
00:06:53.380 --> 00:06:55.220
at the end, whatever it takes.

236
00:06:55.220 --> 00:06:56.340
So if I go ahead and start

237
00:06:56.340 --> 00:06:58.020
with this, we get the bold.

238
00:06:58.020 --> 00:07:00.100
So the 12th letter is B.

239
00:07:00.100 --> 00:07:01.900
And after that whatever it takes.

240
00:07:01.900 --> 00:07:03.620
So if I add more things here, so

241
00:07:03.620 --> 00:07:05.780
for example aromatic and bold, more,

242
00:07:05.780 --> 00:07:06.540
it will just keep

243
00:07:06.540 --> 00:07:08.580
on going and will never stop.

244
00:07:08.580 --> 00:07:10.180
So that's how it is done.

245
00:07:10.180 --> 00:07:12.420
I hope you get the idea how this

246
00:07:12.420 --> 00:07:14.340
indexing and slicing works.

247
00:07:14.340 --> 00:07:15.820
Pretty nice and interesting, isn't

248
00:07:15.820 --> 00:07:16.420
it?

249
00:07:16.420 --> 00:07:18.580
Now one last thing, which is,

250
00:07:19.380 --> 00:07:21.140
being shown off Quite a lot.

251
00:07:21.710 --> 00:07:22.910
One more thing that you can do

252
00:07:22.910 --> 00:07:25.110
is now that we know we have a

253
00:07:25.110 --> 00:07:26.510
start, then a colon, then we

254
00:07:26.510 --> 00:07:27.630
have an end, and then we have

255
00:07:27.630 --> 00:07:28.790
a colon, and then we have a

256
00:07:28.790 --> 00:07:29.070
step.

257
00:07:29.710 --> 00:07:32.070
In the step, you can go

258
00:07:32.070 --> 00:07:33.870
ahead and add minus one.

259
00:07:33.870 --> 00:07:34.510
Yeah.

260
00:07:34.510 --> 00:07:36.270
What's the point of this minus one?

261
00:07:38.590 --> 00:07:41.870
The minus one is a shorthand

262
00:07:41.870 --> 00:07:43.230
for reversing the whole string.

263
00:07:43.230 --> 00:07:45.190
So this aromatic and this is

264
00:07:45.190 --> 00:07:46.670
a shorthand notation for that.

265
00:07:47.340 --> 00:07:49.260
The steps can be negative indexed.

266
00:07:49.260 --> 00:07:50.580
And yes, in the world of Python

267
00:07:50.580 --> 00:07:51.940
you can actually negative index.

268
00:07:51.940 --> 00:07:52.580
So it will start

269
00:07:52.580 --> 00:07:54.860
from the rotative way.

270
00:07:54.860 --> 00:07:55.980
You get the idea.

271
00:07:55.980 --> 00:07:57.260
So if I go ahead and run this

272
00:07:57.260 --> 00:07:58.460
notice here, now it says

273
00:07:58.460 --> 00:08:01.980
dolb, which is bold and DNA.

274
00:08:01.980 --> 00:08:02.780
So everything goes.

275
00:08:02.780 --> 00:08:04.020
So this is a nice trick

276
00:08:04.020 --> 00:08:05.300
to actually reverse the string.

277
00:08:05.300 --> 00:08:06.420
A lot of people use it

278
00:08:06.420 --> 00:08:07.500
and they actually love

279
00:08:07.500 --> 00:08:09.340
to use this part as well.

280
00:08:09.340 --> 00:08:10.820
All right, so this is

281
00:08:10.820 --> 00:08:11.900
pretty interesting.

282
00:08:11.900 --> 00:08:12.900
One more thing I would like to

283
00:08:12.900 --> 00:08:14.180
mention about the string which

284
00:08:14.180 --> 00:08:17.750
we will use quite a lot and a

285
00:08:17.750 --> 00:08:19.350
lot of time these strings, we

286
00:08:19.350 --> 00:08:20.430
are writing all the English

287
00:08:20.430 --> 00:08:22.310
strings, but it's not always

288
00:08:22.310 --> 00:08:23.430
that you'll be writing English

289
00:08:23.430 --> 00:08:24.390
scripts sometimes.

290
00:08:24.390 --> 00:08:25.590
Maybe you want to write Hindi,

291
00:08:25.590 --> 00:08:27.430
maybe you want to write, Tamil,

292
00:08:27.430 --> 00:08:29.150
maybe you want to write Japanese,

293
00:08:29.150 --> 00:08:31.950
Chinese or Mandarin, whatever.

294
00:08:32.640 --> 00:08:33.669
The language you want to write,

295
00:08:33.669 --> 00:08:34.870
they have own characters.

296
00:08:34.870 --> 00:08:36.190
Like for example, in the Spanish

297
00:08:36.190 --> 00:08:36.990
you might have seen if

298
00:08:36.990 --> 00:08:38.510
you press A quite a lot, there

299
00:08:38.510 --> 00:08:39.710
are tilde is over the A.

300
00:08:39.710 --> 00:08:40.909
So if you want to use these

301
00:08:40.909 --> 00:08:42.549
kinds of things, there is

302
00:08:42.549 --> 00:08:43.784
a special way of do it.

303
00:08:43.784 --> 00:08:45.009
But for example, we do

304
00:08:45.009 --> 00:08:45.929
have a variable, let's

305
00:08:45.929 --> 00:08:47.449
just say labeltext.

306
00:08:48.009 --> 00:08:49.489
And this label text needs to go

307
00:08:49.489 --> 00:08:50.609
onto a variety of places.

308
00:08:50.609 --> 00:08:51.689
So we'll just call this one

309
00:08:51.689 --> 00:08:54.289
as chai and let's call

310
00:08:54.289 --> 00:08:56.329
this one E as special one.

311
00:08:56.329 --> 00:08:58.649
So I'll just go ahead and use this e

312
00:08:59.529 --> 00:09:00.969
and we'll just say special.

313
00:09:00.969 --> 00:09:02.929
Now this is not an ordinary character

314
00:09:02.929 --> 00:09:04.409
that we are working with and this

315
00:09:04.409 --> 00:09:06.089
can actually create problem.

316
00:09:06.089 --> 00:09:07.369
So for these kinds of things,

317
00:09:07.369 --> 00:09:08.329
when you have these special

318
00:09:08.329 --> 00:09:10.720
characters or special symbols,

319
00:09:10.720 --> 00:09:12.880
we actually use encoded string.

320
00:09:13.600 --> 00:09:14.520
So let's just call this

321
00:09:14.520 --> 00:09:16.160
one as encoded label.

322
00:09:16.160 --> 00:09:17.040
How do we do that?

323
00:09:17.040 --> 00:09:18.920
We actually take the label text

324
00:09:18.920 --> 00:09:21.480
and we have a function, we just put

325
00:09:21.480 --> 00:09:22.880
a dot and you can see there are

326
00:09:22.880 --> 00:09:24.080
a lot of methods in the string.

327
00:09:24.080 --> 00:09:25.960
We can capitalize it, case, fold

328
00:09:25.960 --> 00:09:27.680
it, center it, we can count it.

329
00:09:27.680 --> 00:09:29.120
There are a lot of things.

330
00:09:29.120 --> 00:09:30.320
One of the things which is important

331
00:09:30.320 --> 00:09:33.000
for us as of now is encode and then

332
00:09:33.000 --> 00:09:34.910
you provide the encoding for it.

333
00:09:34.910 --> 00:09:36.120
The common encoding

334
00:09:36.120 --> 00:09:38.680
that we use is UTF 8.

335
00:09:38.680 --> 00:09:41.160
This is a, Way to symbolize

336
00:09:41.160 --> 00:09:44.000
the strings in the computer format.

337
00:09:44.000 --> 00:09:46.120
So we have UTF 8, we have UTF 16.

338
00:09:46.120 --> 00:09:48.720
There's a lot of them right now.

339
00:09:48.720 --> 00:09:50.680
UTF 8 will do our job.

340
00:09:50.680 --> 00:09:51.880
Let's try to print what

341
00:09:51.880 --> 00:09:52.920
happens in this one.

342
00:09:53.640 --> 00:09:55.560
So when I go ahead and print this out

343
00:09:55.560 --> 00:09:58.200
and I say encoded label,

344
00:09:58.760 --> 00:10:01.440
and I try to print this, I want

345
00:10:01.440 --> 00:10:02.720
to print the encoded label.

346
00:10:02.720 --> 00:10:04.360
I also want to print the non

347
00:10:04.360 --> 00:10:05.480
encoded one as well.

348
00:10:06.020 --> 00:10:07.220
So I'll just go ahead and say

349
00:10:07.780 --> 00:10:10.740
non encoded label.

350
00:10:11.780 --> 00:10:12.780
And we'll just go

351
00:10:12.780 --> 00:10:14.420
ahead and say label.

352
00:10:16.020 --> 00:10:17.940
Very bad label.

353
00:10:18.500 --> 00:10:21.620
We should actually have a label text.

354
00:10:21.620 --> 00:10:23.220
I'll just copy this

355
00:10:23.220 --> 00:10:25.100
and paste it everywhere so that

356
00:10:25.100 --> 00:10:26.420
we have at least nice one.

357
00:10:26.420 --> 00:10:28.460
All right, so once you actually

358
00:10:28.460 --> 00:10:30.600
do this, you actually see that,

359
00:10:30.600 --> 00:10:32.060
the encoded label looks

360
00:10:32.060 --> 00:10:33.780
like this, which is okay.

361
00:10:34.340 --> 00:10:35.220
This one looks okay.

362
00:10:35.220 --> 00:10:36.300
In this case it's okay.

363
00:10:36.300 --> 00:10:37.420
But when you actually deal up

364
00:10:37.420 --> 00:10:38.500
with the Mandarin characters,

365
00:10:38.500 --> 00:10:40.020
and especially Japanese characters,

366
00:10:40.020 --> 00:10:41.380
very, very difficult.

367
00:10:41.380 --> 00:10:43.100
And you might be wondering, hey, this

368
00:10:43.100 --> 00:10:44.620
actually messed up all the things.

369
00:10:44.620 --> 00:10:46.340
This is not how I want to print it.

370
00:10:47.220 --> 00:10:48.780
But behind the scene, this one

371
00:10:48.780 --> 00:10:49.939
has a guarantee that all

372
00:10:49.939 --> 00:10:51.340
of your characters are truly

373
00:10:51.340 --> 00:10:52.980
encoded and all these special

374
00:10:52.980 --> 00:10:54.660
meanings actually carry on.

375
00:10:54.660 --> 00:10:56.580
But in order to actually properly

376
00:10:56.580 --> 00:10:57.700
print this up, you actually

377
00:10:57.700 --> 00:10:58.700
don't print it like this.

378
00:10:58.700 --> 00:10:59.260
You have to.

379
00:10:59.260 --> 00:11:00.380
You have encoded it,

380
00:11:00.380 --> 00:11:01.460
you will decode this.

381
00:11:01.980 --> 00:11:03.140
So I'll just go ahead and store

382
00:11:03.140 --> 00:11:06.700
this as decode or decoded label.

383
00:11:06.700 --> 00:11:08.220
This time, no spelling mistake.

384
00:11:08.220 --> 00:11:10.500
And you again use encoded label,

385
00:11:10.500 --> 00:11:11.700
and you have a property of

386
00:11:11.700 --> 00:11:14.500
decode, decode, and then you

387
00:11:14.500 --> 00:11:16.020
provide the exact same encoding

388
00:11:16.020 --> 00:11:17.380
that you have used, probably UTF

389
00:11:17.380 --> 00:11:19.340
8, probably UTF 16, whatever you

390
00:11:19.340 --> 00:11:19.740
are using.

391
00:11:19.740 --> 00:11:20.940
So I'll just say that, hey, I

392
00:11:20.940 --> 00:11:22.940
have used encoding of UTF8.

393
00:11:22.940 --> 00:11:23.940
Now you give me this.

394
00:11:23.940 --> 00:11:25.460
And now we can actually go ahead

395
00:11:25.460 --> 00:11:27.260
and say instead of encoding

396
00:11:27.260 --> 00:11:28.900
label, we'll use decoded label,

397
00:11:28.900 --> 00:11:29.780
and we'll just go ahead

398
00:11:29.780 --> 00:11:32.190
and change this decoded label.

399
00:11:32.190 --> 00:11:33.190
There we go.

400
00:11:33.190 --> 00:11:35.990
This is a proper syntax and a proper

401
00:11:35.990 --> 00:11:37.830
way to actually take this.

402
00:11:37.830 --> 00:11:40.430
This looks okay, at least in

403
00:11:40.430 --> 00:11:42.350
terminal, but you will be thanking

404
00:11:42.350 --> 00:11:44.190
me that yes, I taught you the way

405
00:11:44.190 --> 00:11:45.350
of properly taking these

406
00:11:45.350 --> 00:11:46.950
special symbols in the string.

407
00:11:46.950 --> 00:11:49.510
This is rarely being taught, but I

408
00:11:49.510 --> 00:11:51.030
have worked with one of the client

409
00:11:51.030 --> 00:11:52.510
in Japanese and I learned

410
00:11:52.510 --> 00:11:53.750
it through the hard way that how

411
00:11:53.750 --> 00:11:55.990
important these conversion is.

412
00:11:55.990 --> 00:11:57.110
Although it was a web development

413
00:11:57.110 --> 00:11:58.700
project, but that was the lesson

414
00:11:58.700 --> 00:12:00.020
I learned once and for all.

415
00:12:00.660 --> 00:12:02.220
So we actually studied about

416
00:12:02.220 --> 00:12:04.420
the indexing slicing as well as

417
00:12:04.420 --> 00:12:06.020
we explored encoding as well.

418
00:12:06.740 --> 00:12:07.860
How awesome that is.

419
00:12:07.860 --> 00:12:10.340
Encoding, decoding.

420
00:12:10.340 --> 00:12:11.220
There we go.

421
00:12:11.220 --> 00:12:12.340
And that is it.

422
00:12:12.340 --> 00:12:13.740
That is all that we wanted

423
00:12:13.740 --> 00:12:14.940
to go through with a string.

424
00:12:14.940 --> 00:12:16.900
Hope you have enjoyed this chill back

425
00:12:16.900 --> 00:12:18.420
investigative study.

426
00:12:18.420 --> 00:12:19.980
And that's it for this video.

427
00:12:19.980 --> 00:12:21.620
Don't forget to rate us and let's

428
00:12:21.620 --> 00:12:22.660
catch up in the next one.
