WEBVTT

1
00:00:00.960 --> 00:00:02.360
All right, let's move on

2
00:00:02.360 --> 00:00:03.160
to the next challenge.

3
00:00:03.160 --> 00:00:04.760
And this is a pretty fun and

4
00:00:04.760 --> 00:00:06.600
interesting challenge and you will

5
00:00:06.600 --> 00:00:08.039
get to know that there are so many

6
00:00:08.039 --> 00:00:09.840
situations just like this and

7
00:00:09.840 --> 00:00:11.440
without learning a new concept

8
00:00:11.440 --> 00:00:12.680
it's very difficult to actually

9
00:00:12.680 --> 00:00:13.400
pull this off.

10
00:00:13.400 --> 00:00:15.160
Surely can be done but it's

11
00:00:15.160 --> 00:00:16.320
rather difficult.

12
00:00:16.320 --> 00:00:17.600
So notice here you are preparing

13
00:00:17.600 --> 00:00:19.120
an order summary with customer

14
00:00:19.120 --> 00:00:21.480
names and their total bill task.

15
00:00:21.480 --> 00:00:22.880
Use two list, one for

16
00:00:22.880 --> 00:00:24.160
name and one for bills.

17
00:00:24.720 --> 00:00:26.120
So let's just do whatever

18
00:00:26.120 --> 00:00:27.360
the problem statement is saying.

19
00:00:27.360 --> 00:00:29.520
Let's do one by one that exactly

20
00:00:30.130 --> 00:00:32.810
this one is 05 and we are going

21
00:00:32.810 --> 00:00:37.410
to call this one as order summary

22
00:00:37.410 --> 00:00:39.970
Py So it's asking us that we

23
00:00:39.970 --> 00:00:41.730
should have two list first of all

24
00:00:41.730 --> 00:00:42.290
names.

25
00:00:42.290 --> 00:00:44.450
So let's go ahead and create a list

26
00:00:44.450 --> 00:00:45.649
for names.

27
00:00:45.649 --> 00:00:47.090
I will definitely go ahead and add

28
00:00:47.090 --> 00:00:49.410
my name first, which usually I do.

29
00:00:50.530 --> 00:00:53.170
And then let's add some more name,

30
00:00:53.170 --> 00:00:59.550
maybe Mira, maybe Sam and maybe Ali.

31
00:01:00.270 --> 00:01:01.470
Alright, the another

32
00:01:01.470 --> 00:01:03.950
list is for bills.

33
00:01:03.950 --> 00:01:05.790
So each customer gets a bill.

34
00:01:05.790 --> 00:01:08.150
Let's just say the first customer

35
00:01:08.150 --> 00:01:09.390
gets 50 rupees,

36
00:01:10.030 --> 00:01:12.589
the second customer gets 70 rupees.

37
00:01:13.470 --> 00:01:16.430
Sam probably got 100 rupees.

38
00:01:16.430 --> 00:01:17.950
He's rich, he can pay.

39
00:01:17.950 --> 00:01:20.750
Ali gets let's just say 55.

40
00:01:20.750 --> 00:01:21.630
That's good.

41
00:01:21.630 --> 00:01:23.030
Now we have four people in

42
00:01:23.030 --> 00:01:25.930
the names, four bills in our list.

43
00:01:25.930 --> 00:01:27.930
And what we want to do, we want to

44
00:01:27.930 --> 00:01:30.170
actually go ahead and print the name

45
00:01:30.170 --> 00:01:33.050
and paid this much amount of rupees.

46
00:01:33.050 --> 00:01:34.250
So how can we do that?

47
00:01:34.250 --> 00:01:36.170
We can loop through the names

48
00:01:36.170 --> 00:01:36.930
at the same time.

49
00:01:36.930 --> 00:01:38.010
We can loop through the bills

50
00:01:38.010 --> 00:01:39.530
because the numbers are same.

51
00:01:39.530 --> 00:01:41.010
But it would be very difficult

52
00:01:41.010 --> 00:01:43.010
to run these two loops for exactly

53
00:01:43.010 --> 00:01:44.010
these kinds of situation.

54
00:01:44.010 --> 00:01:45.370
We need to study one more

55
00:01:45.370 --> 00:01:47.210
topic which is the zip.

56
00:01:48.010 --> 00:01:49.930
So zip is exactly like that,

57
00:01:49.930 --> 00:01:52.610
iterates over several iteratable in

58
00:01:52.610 --> 00:01:55.700
parallel producing tuples or tuples

59
00:01:55.700 --> 00:01:57.860
with an item from each one.

60
00:01:57.860 --> 00:01:59.540
So notice here the example says

61
00:02:00.580 --> 00:02:01.700
from item.

62
00:02:01.700 --> 00:02:02.900
This is just a variable name.

63
00:02:02.900 --> 00:02:04.260
Feel free to call it anything.

64
00:02:04.260 --> 00:02:06.460
We can use a zip, which is a tuple.

65
00:02:06.460 --> 00:02:08.460
It takes tuple as a input parameter.

66
00:02:08.460 --> 00:02:09.460
It's a function

67
00:02:09.460 --> 00:02:10.699
which takes two lists.

68
00:02:10.699 --> 00:02:11.660
This is the first list

69
00:02:11.660 --> 00:02:13.300
and this is the second list.

70
00:02:13.300 --> 00:02:16.580
Notice here we have the sugar, spice

71
00:02:16.580 --> 00:02:18.900
and everything nice just like this.

72
00:02:19.540 --> 00:02:20.780
And then when we print the item

73
00:02:20.780 --> 00:02:22.100
it actually prints it like this.

74
00:02:22.100 --> 00:02:24.020
So we receive a tuple itself.

75
00:02:24.020 --> 00:02:26.060
If we are receiving a tuple itself as

76
00:02:26.060 --> 00:02:28.140
a back in the item instead of

77
00:02:28.140 --> 00:02:30.060
putting this as just item so that we

78
00:02:30.060 --> 00:02:31.620
get all of these things, we can use

79
00:02:31.620 --> 00:02:33.060
our previous knowledge of enumerate,

80
00:02:33.060 --> 00:02:34.820
we can have the index as well as the

81
00:02:34.820 --> 00:02:36.740
item and we will get two of these

82
00:02:36.740 --> 00:02:38.540
things nicely and we can just do the

83
00:02:38.540 --> 00:02:38.980
job.

84
00:02:38.980 --> 00:02:41.780
And that is why zip is necessary.

85
00:02:41.780 --> 00:02:43.180
So let's go ahead and work with that.

86
00:02:43.180 --> 00:02:43.780
Pretty simple.

87
00:02:43.780 --> 00:02:45.600
We are going to call this one as name

88
00:02:45.600 --> 00:02:47.390
and and comma amount.

89
00:02:47.390 --> 00:02:48.670
Feel free to call it as index.

90
00:02:48.670 --> 00:02:49.910
These are just variable name

91
00:02:49.910 --> 00:02:51.510
doesn't really matter much.

92
00:02:51.510 --> 00:02:53.150
So inside the zip we'll

93
00:02:53.150 --> 00:02:54.150
provide the two list.

94
00:02:54.150 --> 00:02:55.830
The first one being names,

95
00:02:55.830 --> 00:02:57.910
second one being bills.

96
00:02:58.470 --> 00:02:59.950
And then we can just go ahead

97
00:02:59.950 --> 00:03:00.950
and print our statement

98
00:03:00.950 --> 00:03:02.390
just like we want it to be.

99
00:03:03.270 --> 00:03:05.750
So we'll say first of all let's say

100
00:03:05.750 --> 00:03:10.150
name paid and then we can

101
00:03:10.150 --> 00:03:13.660
use the amount and rupees.

102
00:03:13.660 --> 00:03:14.980
It depends on you how you want

103
00:03:14.980 --> 00:03:15.980
to print the statement.

104
00:03:15.980 --> 00:03:17.660
Totally on you and very optional,

105
00:03:17.660 --> 00:03:18.620
no big deal there.

106
00:03:19.260 --> 00:03:20.860
Let's go ahead and clean this up.

107
00:03:20.860 --> 00:03:22.700
Call this one as python and we want

108
00:03:22.700 --> 00:03:24.780
to print the 05 file and we can

109
00:03:24.780 --> 00:03:26.820
see Hitesh paid 50 rupees, Meera

110
00:03:26.820 --> 00:03:31.020
paid 70, Sam paid 100, Ali paid 55.

111
00:03:31.020 --> 00:03:33.300
So pretty easy and workaround

112
00:03:33.300 --> 00:03:34.140
with that.

113
00:03:34.140 --> 00:03:35.380
So as you saw that some

114
00:03:35.380 --> 00:03:36.780
of the knowledge is really required

115
00:03:36.780 --> 00:03:37.900
and some of the knowledge actually

116
00:03:37.900 --> 00:03:39.140
builds on top of the others.

117
00:03:39.140 --> 00:03:40.260
So we saw already some

118
00:03:40.260 --> 00:03:41.820
of the knowledge in enumerate

119
00:03:41.820 --> 00:03:43.420
but on top of that we added our

120
00:03:43.420 --> 00:03:45.660
knowledge for the zip as well.

121
00:03:45.660 --> 00:03:46.340
That is it.

122
00:03:46.340 --> 00:03:47.460
Hope you enjoyed these

123
00:03:47.460 --> 00:03:49.340
crisp and small tutorial.

124
00:03:49.340 --> 00:03:51.580
But actually they pay really good

125
00:03:51.580 --> 00:03:53.100
in the sense of knowledge.

126
00:03:53.100 --> 00:03:54.300
That is it for this video.

127
00:03:54.300 --> 00:03:55.980
Let's catch up in the next one.
