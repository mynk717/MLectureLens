WEBVTT

1
00:00:00.880 --> 00:00:02.200
All right, so let's go

2
00:00:02.200 --> 00:00:04.320
with three more features of

3
00:00:04.320 --> 00:00:05.840
functions in Python.

4
00:00:06.400 --> 00:00:08.560
So it's better actually directly

5
00:00:08.560 --> 00:00:11.360
to go onto the Blackboard or our

6
00:00:11.360 --> 00:00:13.680
tutorial guide kind of a thing.

7
00:00:13.680 --> 00:00:15.400
So the next one is hiding

8
00:00:15.400 --> 00:00:16.640
implementation detail.

9
00:00:17.280 --> 00:00:18.680
Now this is not something that we

10
00:00:18.680 --> 00:00:20.040
want to protect something there are

11
00:00:20.040 --> 00:00:21.760
other mechanism of protecting.

12
00:00:21.760 --> 00:00:23.800
This is like somebody should not

13
00:00:23.800 --> 00:00:25.560
be able to see what complexity

14
00:00:25.560 --> 00:00:26.720
of the function is going on.

15
00:00:26.720 --> 00:00:28.320
Once it's done, it should be done

16
00:00:28.320 --> 00:00:30.760
how, how we are doing it, how we are

17
00:00:30.760 --> 00:00:32.520
managing the complexity that should

18
00:00:32.520 --> 00:00:34.320
be usually hidden by other people.

19
00:00:34.320 --> 00:00:36.000
We have implemented our brain once.

20
00:00:36.000 --> 00:00:38.560
We don't want to get again with that.

21
00:00:38.560 --> 00:00:40.160
So let's go with this one.

22
00:00:40.160 --> 00:00:42.200
This is another challenge that we

23
00:00:42.200 --> 00:00:44.040
have is you are building a simple

24
00:00:44.040 --> 00:00:45.680
app that registers the user.

25
00:00:45.680 --> 00:00:47.040
We will do that later on as well.

26
00:00:47.040 --> 00:00:47.600
It's fun.

27
00:00:48.170 --> 00:00:50.240
You want to separate the concerns

28
00:00:50.240 --> 00:00:51.960
and by the way, separations of

29
00:00:51.960 --> 00:00:53.440
concern, you will hear that a lot.

30
00:00:53.440 --> 00:00:55.550
This is a common software

31
00:00:55.550 --> 00:00:57.230
design pattern as well.

32
00:00:57.230 --> 00:00:58.710
Getting input, validating

33
00:00:58.710 --> 00:00:59.750
it and saving it.

34
00:00:59.750 --> 00:01:00.870
So there are three jobs

35
00:01:00.870 --> 00:01:01.870
that we have here.

36
00:01:01.870 --> 00:01:04.069
Get the input, validate the input

37
00:01:04.069 --> 00:01:05.950
and save that to the database.

38
00:01:05.950 --> 00:01:07.510
I don't know what that database is.

39
00:01:07.510 --> 00:01:08.350
I really don't care.

40
00:01:08.350 --> 00:01:09.510
Whenever I want to save some

41
00:01:09.510 --> 00:01:10.870
information in the database, it

42
00:01:10.870 --> 00:01:12.550
should be just a method available to

43
00:01:12.550 --> 00:01:14.670
me with of course more information

44
00:01:14.670 --> 00:01:16.670
that I can give it to you later on.

45
00:01:16.670 --> 00:01:18.910
But let's go ahead and design this.

46
00:01:18.910 --> 00:01:21.490
So let's call this one as hiding.

47
00:01:21.490 --> 00:01:23.170
Let's close this.

48
00:01:23.170 --> 00:01:26.890
This one is 03 and we'll call

49
00:01:26.890 --> 00:01:28.610
this one as hiding py

50
00:01:29.650 --> 00:01:31.010
all right, so what I need

51
00:01:31.010 --> 00:01:33.090
to do step one, get the input.

52
00:01:33.090 --> 00:01:34.330
All right, pretty simple.

53
00:01:34.330 --> 00:01:35.130
We have done this kind

54
00:01:35.130 --> 00:01:36.210
of example as well.

55
00:01:36.210 --> 00:01:39.170
We'll call this one as get input.

56
00:01:39.170 --> 00:01:41.010
It doesn't pass on any parameter.

57
00:01:41.010 --> 00:01:42.530
That is totally fine.

58
00:01:42.530 --> 00:01:44.130
We just want to have a definition

59
00:01:44.130 --> 00:01:46.250
which says printing and I will

60
00:01:46.250 --> 00:01:49.570
just say getting user, input.

61
00:01:49.570 --> 00:01:51.890
User input might come from terminal,

62
00:01:51.890 --> 00:01:53.490
might be a web page.

63
00:01:53.490 --> 00:01:54.530
I don't really care about

64
00:01:54.530 --> 00:01:56.050
the complexity of it.

65
00:01:56.050 --> 00:01:59.090
Another one is validate the input.

66
00:01:59.890 --> 00:02:01.970
There we go, nice and easy.

67
00:02:01.970 --> 00:02:03.770
Now how the validation is being done?

68
00:02:03.770 --> 00:02:05.250
Probably we are using regex,

69
00:02:05.250 --> 00:02:06.930
also known as regular expressions

70
00:02:06.930 --> 00:02:08.210
or any other Mechanism.

71
00:02:08.210 --> 00:02:10.169
Don't really care about it, just want

72
00:02:10.169 --> 00:02:11.570
to hide the complexity of it.

73
00:02:11.570 --> 00:02:13.090
And I will just say

74
00:02:13.090 --> 00:02:16.850
validating the user, info,

75
00:02:16.850 --> 00:02:17.730
short for information.

76
00:02:18.370 --> 00:02:20.610
And the last task is

77
00:02:21.330 --> 00:02:22.930
save it to the database.

78
00:02:22.930 --> 00:02:24.570
So let's define the method, call it

79
00:02:24.570 --> 00:02:28.930
as save to db, short for database.

80
00:02:29.570 --> 00:02:31.490
And we'll just go like this.

81
00:02:31.490 --> 00:02:33.468
Don't really care if it is MySQL

82
00:02:33.468 --> 00:02:35.010
MongoDB, whatever that is.

83
00:02:35.010 --> 00:02:36.370
The job is, whatever the data,

84
00:02:36.370 --> 00:02:37.330
you give it to me, I'll

85
00:02:37.330 --> 00:02:38.610
just save it to the database.

86
00:02:39.280 --> 00:02:40.280
I'll call this one as

87
00:02:40.280 --> 00:02:42.240
saving to database.

88
00:02:42.240 --> 00:02:43.160
So there we go, we have

89
00:02:43.160 --> 00:02:45.200
separated the concerns as well.

90
00:02:45.200 --> 00:02:46.400
Now, finally, let's try

91
00:02:46.400 --> 00:02:47.960
to register a user as it

92
00:02:47.960 --> 00:02:49.840
says write register user.

93
00:02:50.560 --> 00:02:52.240
So let's call this one as

94
00:02:52.800 --> 00:02:56.040
register, user, and again, this

95
00:02:56.040 --> 00:02:57.120
is also a common pattern.

96
00:02:57.120 --> 00:02:58.280
Sometimes you use underscore,

97
00:02:58.280 --> 00:02:59.320
sometimes you use camel.

98
00:02:59.320 --> 00:02:59.840
Cases.

99
00:02:59.840 --> 00:03:01.200
No right or wrong.

100
00:03:01.200 --> 00:03:02.920
Each one have their own way

101
00:03:02.920 --> 00:03:03.760
of writing the things.

102
00:03:03.760 --> 00:03:04.600
There is no right or

103
00:03:04.600 --> 00:03:05.440
wrong in this case.

104
00:03:06.070 --> 00:03:07.430
All right, the step

105
00:03:07.430 --> 00:03:08.870
one, get user input.

106
00:03:08.870 --> 00:03:09.990
All right, got it.

107
00:03:09.990 --> 00:03:11.670
The step two, validate the data.

108
00:03:11.670 --> 00:03:13.750
All right, let's validate the input

109
00:03:13.750 --> 00:03:15.590
and then save it to the database.

110
00:03:15.590 --> 00:03:17.350
Save it to the database and finally

111
00:03:17.350 --> 00:03:19.350
says user registration complete.

112
00:03:20.150 --> 00:03:20.630
Simple.

113
00:03:20.630 --> 00:03:25.270
It is user registration complete.

114
00:03:26.070 --> 00:03:27.950
All right, and then don't

115
00:03:27.950 --> 00:03:29.310
forget to call this one.

116
00:03:29.310 --> 00:03:30.670
Otherwise if you are not calling it,

117
00:03:30.670 --> 00:03:32.430
that means you are not running it.

118
00:03:32.430 --> 00:03:33.550
So register user.

119
00:03:33.550 --> 00:03:35.030
Let's of course validate it

120
00:03:35.030 --> 00:03:36.630
by running this.

121
00:03:36.630 --> 00:03:37.710
So I'll just go ahead and say

122
00:03:37.710 --> 00:03:40.230
Python 3 wants to run 03 hiding.

123
00:03:40.230 --> 00:03:42.790
And there we go, getting the user

124
00:03:42.790 --> 00:03:45.230
input, validating the user info,

125
00:03:45.230 --> 00:03:46.590
saving to the database.

126
00:03:46.590 --> 00:03:47.670
Saving to the database.

127
00:03:47.670 --> 00:03:49.270
And finally saying that user

128
00:03:49.270 --> 00:03:50.750
registration is complete.

129
00:03:50.750 --> 00:03:52.270
Pretty good, isn't it?

130
00:03:52.270 --> 00:03:54.550
So this is how you practice defining

131
00:03:54.550 --> 00:03:55.910
the methods, and we are doing a lot

132
00:03:55.910 --> 00:03:57.470
of practice by these examples.

133
00:03:57.470 --> 00:03:59.390
Let's move on to the next one which

134
00:03:59.390 --> 00:04:00.990
says improving the readability.

135
00:04:01.550 --> 00:04:03.190
First of all, I need to improve this

136
00:04:03.190 --> 00:04:04.630
by making this a little larger

137
00:04:04.630 --> 00:04:06.910
one so that readability improves.

138
00:04:07.470 --> 00:04:08.430
There we go.

139
00:04:08.430 --> 00:04:09.710
And we can actually move

140
00:04:09.710 --> 00:04:11.230
this just right there.

141
00:04:11.230 --> 00:04:11.710
Looks good.

142
00:04:11.710 --> 00:04:15.470
Now you sell different sizes of chai.

143
00:04:15.470 --> 00:04:16.670
All right, Pretty good.

144
00:04:17.870 --> 00:04:19.750
Instead of writing down formulas

145
00:04:19.750 --> 00:04:21.310
everywhere, create a function.

146
00:04:22.160 --> 00:04:23.590
What it does, it simply goes

147
00:04:23.590 --> 00:04:25.610
ahead and says calculate bills.

148
00:04:25.610 --> 00:04:28.810
You provide it cups and price per cup

149
00:04:28.810 --> 00:04:30.330
returns the total bill.

150
00:04:30.330 --> 00:04:32.650
Use the function for multiple orders.

151
00:04:32.650 --> 00:04:34.050
This is a very, very

152
00:04:34.050 --> 00:04:35.210
interesting problem.

153
00:04:35.210 --> 00:04:35.570
Why?

154
00:04:35.570 --> 00:04:37.850
Because it says return total bill.

155
00:04:37.850 --> 00:04:39.250
So far whatever we are doing

156
00:04:39.250 --> 00:04:40.890
is just a print statement.

157
00:04:40.890 --> 00:04:42.770
The function itself prints something.

158
00:04:42.770 --> 00:04:45.050
It doesn't return you anything back

159
00:04:45.050 --> 00:04:46.250
you cannot hold.

160
00:04:46.250 --> 00:04:47.450
Like whenever a function

161
00:04:47.450 --> 00:04:49.130
returns anything that you can hold

162
00:04:49.130 --> 00:04:50.010
in the variable because

163
00:04:50.010 --> 00:04:51.960
that's being returned, but but so

164
00:04:51.960 --> 00:04:53.440
far is just printing.

165
00:04:53.440 --> 00:04:55.080
Printing and returning the value

166
00:04:55.080 --> 00:04:57.040
are two different concepts.

167
00:04:57.040 --> 00:04:58.240
Let me show you that.

168
00:04:58.240 --> 00:04:59.360
So what do we call this?

169
00:04:59.920 --> 00:05:00.800
Readability.

170
00:05:00.800 --> 00:05:02.400
Yeah, that would be good.

171
00:05:02.400 --> 00:05:03.760
Let's create a new one.

172
00:05:03.760 --> 00:05:06.640
Call this one as 04readability.

173
00:05:07.840 --> 00:05:09.120
Hope I wrote that correct.

174
00:05:09.120 --> 00:05:11.360
If not, make sure you correct me up.

175
00:05:11.360 --> 00:05:13.000
All right, so we simply Go

176
00:05:13.000 --> 00:05:14.640
ahead and define a method that says

177
00:05:15.440 --> 00:05:18.060
calculate bills or bill.

178
00:05:18.700 --> 00:05:20.180
And what we expect is you

179
00:05:20.180 --> 00:05:21.660
pass me a child that

180
00:05:21.660 --> 00:05:23.100
how many cups are there?

181
00:05:23.100 --> 00:05:26.380
So cups and we'll say price per cup.

182
00:05:28.220 --> 00:05:30.860
Price per cup.

183
00:05:30.860 --> 00:05:32.220
All right, pretty good.

184
00:05:32.220 --> 00:05:33.580
Now based on the information,

185
00:05:33.580 --> 00:05:34.460
we want to actually

186
00:05:34.460 --> 00:05:35.700
calculate the total bill.

187
00:05:35.700 --> 00:05:36.780
It's super easy math.

188
00:05:36.780 --> 00:05:37.620
We can just simply take

189
00:05:37.620 --> 00:05:39.540
the cups and go ahead and multiply

190
00:05:39.540 --> 00:05:42.060
it by, price per cup.

191
00:05:42.060 --> 00:05:42.860
Now you could have

192
00:05:42.860 --> 00:05:44.220
formatted this as well.

193
00:05:44.220 --> 00:05:45.220
Like I will just use

194
00:05:45.220 --> 00:05:46.940
the printf formatted string.

195
00:05:46.940 --> 00:05:48.460
But when we use the keyword return,

196
00:05:49.090 --> 00:05:50.490
that means I don't want to print it.

197
00:05:50.490 --> 00:05:52.010
Maybe you don't want to print it.

198
00:05:52.010 --> 00:05:52.890
You want to store that

199
00:05:52.890 --> 00:05:54.090
in the variable and do some

200
00:05:54.090 --> 00:05:55.090
more processing on it.

201
00:05:55.090 --> 00:05:56.370
That's totally okay.

202
00:05:56.370 --> 00:05:57.730
So this one is never going to

203
00:05:57.730 --> 00:05:59.610
automatically print anything at all.

204
00:05:59.610 --> 00:06:00.330
Let me show you.

205
00:06:00.330 --> 00:06:01.890
What does it mean by that?

206
00:06:01.890 --> 00:06:03.130
So if I go ahead and say

207
00:06:03.130 --> 00:06:05.129
calculate bill and I provide that,

208
00:06:05.129 --> 00:06:06.250
hey, there are three cups

209
00:06:06.250 --> 00:06:08.290
and each cup cost 15 rupees.

210
00:06:08.290 --> 00:06:09.650
Let's try to run this.

211
00:06:09.650 --> 00:06:10.770
This is the most important

212
00:06:10.770 --> 00:06:12.850
part of the whole video.

213
00:06:13.730 --> 00:06:15.970
And let's call this1 as Python 3

214
00:06:17.260 --> 00:06:19.900
and this will say04 and run this.

215
00:06:19.900 --> 00:06:21.380
Although we are calling it, we

216
00:06:21.380 --> 00:06:22.460
have seen that in the last time

217
00:06:22.460 --> 00:06:23.900
that when we call it, it prints

218
00:06:23.900 --> 00:06:26.020
because we asked it to print.

219
00:06:26.020 --> 00:06:27.380
This one simply says, hey,

220
00:06:27.380 --> 00:06:28.940
we just returned the value.

221
00:06:28.940 --> 00:06:30.660
So in such cases you can just

222
00:06:30.660 --> 00:06:31.660
go ahead and create

223
00:06:31.660 --> 00:06:33.900
a variable and hold this value.

224
00:06:33.900 --> 00:06:35.660
So I will call this one as my

225
00:06:36.700 --> 00:06:38.740
bill, just like this.

226
00:06:38.740 --> 00:06:40.140
And we will hold this value

227
00:06:40.140 --> 00:06:41.740
because it's returning me, it's

228
00:06:41.740 --> 00:06:43.020
giving me a return value.

229
00:06:43.020 --> 00:06:44.580
And then later on I can go

230
00:06:44.580 --> 00:06:46.020
ahead and print this, my bill.

231
00:06:46.020 --> 00:06:47.100
Because the instruction

232
00:06:47.100 --> 00:06:48.840
now is to print bill.

233
00:06:48.840 --> 00:06:50.800
If I run this again now we get

234
00:06:50.800 --> 00:06:52.960
the 45, which is actually correct.

235
00:06:52.960 --> 00:06:54.240
But because we asked it

236
00:06:54.240 --> 00:06:55.960
to print, we never said that

237
00:06:55.960 --> 00:06:57.960
the function will itself print.

238
00:06:57.960 --> 00:06:59.360
Another kind of a thing that you

239
00:06:59.360 --> 00:07:01.000
are going to get with this is

240
00:07:01.000 --> 00:07:02.400
some people actually directly

241
00:07:02.400 --> 00:07:03.840
use it inside the print statement,

242
00:07:03.840 --> 00:07:05.240
which is also totally fine.

243
00:07:05.880 --> 00:07:07.560
So let's just say I call it like this

244
00:07:07.560 --> 00:07:11.400
and I will say order for table two.

245
00:07:12.200 --> 00:07:13.160
And just like this.

246
00:07:13.160 --> 00:07:15.580
And then, separated by comma, you can

247
00:07:15.580 --> 00:07:17.020
actually call this method directly

248
00:07:17.020 --> 00:07:18.580
here and provide the details.

249
00:07:18.580 --> 00:07:19.700
For example, there were

250
00:07:19.700 --> 00:07:21.620
two cups expensive T for 50

251
00:07:21.620 --> 00:07:23.220
rupees just like that.

252
00:07:23.220 --> 00:07:25.220
In this case, since we have asked

253
00:07:25.220 --> 00:07:27.060
the order to be printed, it

254
00:07:27.060 --> 00:07:29.140
just goes ahead and print that.

255
00:07:30.580 --> 00:07:31.980
So I hope you got this.

256
00:07:31.980 --> 00:07:34.060
There is a huge, huge difference

257
00:07:34.060 --> 00:07:35.740
between, both of them.

258
00:07:35.740 --> 00:07:37.100
And again both of them have

259
00:07:37.100 --> 00:07:39.710
their use cases, their ways of

260
00:07:39.710 --> 00:07:41.390
places where they can be used.

261
00:07:41.390 --> 00:07:42.750
But remember, the return

262
00:07:42.750 --> 00:07:44.350
is a very, very interesting

263
00:07:44.350 --> 00:07:45.870
concept that we have.

264
00:07:45.870 --> 00:07:47.230
All right, you got a lot of things

265
00:07:47.230 --> 00:07:49.390
in this one last one that we have.

266
00:07:49.390 --> 00:07:51.550
Definitely need to make it a little

267
00:07:51.550 --> 00:07:53.910
bit bigger so that we can

268
00:07:53.910 --> 00:07:55.390
see that easily on the screen.

269
00:07:55.390 --> 00:07:56.270
There we go.

270
00:07:56.270 --> 00:07:57.550
Looks good now.

271
00:07:57.550 --> 00:07:58.470
So this one is for

272
00:07:58.470 --> 00:07:59.790
improving the traceability.

273
00:08:00.350 --> 00:08:01.590
Each one of your functions

274
00:08:01.590 --> 00:08:02.670
should be traceable.

275
00:08:02.670 --> 00:08:04.230
They should not be like your

276
00:08:04.230 --> 00:08:05.590
logic should not be scattered

277
00:08:05.590 --> 00:08:06.750
into thousand places.

278
00:08:06.750 --> 00:08:08.230
So if you make a mistake in one

279
00:08:08.230 --> 00:08:09.560
of them, you, you can fix it

280
00:08:09.560 --> 00:08:11.040
at just one place and go with that.

281
00:08:11.040 --> 00:08:13.280
And this is one prime example of it.

282
00:08:13.280 --> 00:08:15.600
Your shop adds a 10% of VAT.

283
00:08:15.600 --> 00:08:17.640
Now VAT is no longer kind,

284
00:08:17.640 --> 00:08:18.920
of a thing in India, but I'm pretty

285
00:08:18.920 --> 00:08:20.040
sure it is there in the Europe

286
00:08:20.040 --> 00:08:21.440
and other countries as well.

287
00:08:21.440 --> 00:08:23.080
But consider this like an equivalent

288
00:08:23.080 --> 00:08:24.799
of GST or vat, whatever you think,

289
00:08:24.799 --> 00:08:26.720
you just add some tax on it.

290
00:08:26.720 --> 00:08:29.280
So 10% tax on every order.

291
00:08:29.280 --> 00:08:30.800
You want this to be consistent

292
00:08:30.800 --> 00:08:32.000
and traceable, right?

293
00:08:32.960 --> 00:08:34.490
Add vat.

294
00:08:34.490 --> 00:08:36.010
We have to give the price and what is

295
00:08:36.010 --> 00:08:38.409
the VAT rate and use it to compute

296
00:08:38.409 --> 00:08:40.850
the final price for three orders.

297
00:08:40.850 --> 00:08:41.929
So we have to actually give

298
00:08:42.440 --> 00:08:44.370
at least three examples for it.

299
00:08:44.370 --> 00:08:46.170
And we will use loop for it.

300
00:08:46.170 --> 00:08:48.490
We'll try to get our concepts

301
00:08:48.490 --> 00:08:50.410
of loop again, let's call

302
00:08:50.410 --> 00:08:51.650
this one as a new file.

303
00:08:51.650 --> 00:08:53.210
We will have a 05

304
00:08:53.210 --> 00:08:56.890
oops underscore trace py.

305
00:08:58.410 --> 00:09:00.330
All right, so the step one is

306
00:09:00.330 --> 00:09:03.130
let's create add vat as a method.

307
00:09:03.650 --> 00:09:05.170
What it gives us is a parameter

308
00:09:05.170 --> 00:09:06.850
price and the VAT rate.

309
00:09:06.850 --> 00:09:08.130
Let's call the same.

310
00:09:08.130 --> 00:09:11.170
You will give me price and VAT rate.

311
00:09:11.890 --> 00:09:13.250
So whatever the price and VAT

312
00:09:13.250 --> 00:09:14.570
rate you give me, I will just

313
00:09:14.570 --> 00:09:15.850
go ahead and return this.

314
00:09:15.850 --> 00:09:16.890
Not printed, but I'll

315
00:09:16.890 --> 00:09:18.210
return the order.

316
00:09:18.210 --> 00:09:19.850
So for this, simply go ahead

317
00:09:19.850 --> 00:09:21.010
and say that price,

318
00:09:21.730 --> 00:09:23.330
this is the price that I have.

319
00:09:23.330 --> 00:09:25.090
And this is going to be multiplied

320
00:09:25.090 --> 00:09:26.410
by whatever the VAT rate is.

321
00:09:26.410 --> 00:09:27.810
So what we're going to do is

322
00:09:27.810 --> 00:09:31.850
we're going to say 100 plus VAT

323
00:09:31.850 --> 00:09:33.530
rate and we're going to go

324
00:09:33.530 --> 00:09:35.410
ahead and divide it by 100 so

325
00:09:35.410 --> 00:09:36.810
you get the percentage in the

326
00:09:36.810 --> 00:09:37.970
VAT rate.

327
00:09:37.970 --> 00:09:38.850
All right?

328
00:09:38.850 --> 00:09:40.450
So pretty basic maths.

329
00:09:40.450 --> 00:09:42.010
If you don't want it, you can

330
00:09:42.010 --> 00:09:43.130
do different maths as well.

331
00:09:43.130 --> 00:09:44.490
That is totally, totally fine.

332
00:09:44.490 --> 00:09:46.850
But what I'm doing is 100.

333
00:09:46.850 --> 00:09:48.290
I shouldn't be explaining this.

334
00:09:48.290 --> 00:09:49.490
I shouldn't be explaining this.

335
00:09:49.490 --> 00:09:50.730
You can use any other methods.

336
00:09:50.730 --> 00:09:52.570
If you prefer to multiply it

337
00:09:52.570 --> 00:09:53.690
by zero point, whatever

338
00:09:53.690 --> 00:09:55.130
the VAT rate, you can try that.

339
00:09:55.130 --> 00:09:57.920
But let's just say we have the orders

340
00:09:58.480 --> 00:10:00.920
and in the orders we are

341
00:10:00.920 --> 00:10:01.880
going to go ahead and put

342
00:10:01.880 --> 00:10:03.760
up an array or list in this case.

343
00:10:03.760 --> 00:10:06.240
So first order is of 100, then we

344
00:10:06.240 --> 00:10:09.520
have 150, then we have maybe 200.

345
00:10:09.520 --> 00:10:11.040
So we can use a simple loop

346
00:10:11.040 --> 00:10:12.240
to calculate that.

347
00:10:12.240 --> 00:10:16.720
So for price in orders,

348
00:10:16.720 --> 00:10:17.640
just like that, feel free

349
00:10:17.640 --> 00:10:18.760
to call it whatever you like.

350
00:10:18.760 --> 00:10:20.680
Order in orders, price in orders,

351
00:10:20.680 --> 00:10:21.680
whatever you want to have.

352
00:10:22.370 --> 00:10:23.770
And for this, for each one

353
00:10:23.770 --> 00:10:24.810
of them we are going to go ahead

354
00:10:24.810 --> 00:10:27.130
and create a final or final amount.

355
00:10:27.130 --> 00:10:28.050
Final amount would be

356
00:10:28.050 --> 00:10:29.410
better word here.

357
00:10:29.410 --> 00:10:31.290
And that is calculated by our

358
00:10:31.290 --> 00:10:33.330
method which says add vet.

359
00:10:33.330 --> 00:10:35.250
And for this you go ahead and say

360
00:10:35.250 --> 00:10:37.809
the price is going to be like this.

361
00:10:37.809 --> 00:10:39.010
So we can just go ahead and give

362
00:10:39.010 --> 00:10:41.090
this as a variable just like that.

363
00:10:41.090 --> 00:10:42.090
And we'll say we

364
00:10:42.090 --> 00:10:43.730
added 10% of the VAT.

365
00:10:43.730 --> 00:10:45.730
So there we go, we have added the 10

366
00:10:45.730 --> 00:10:47.050
and then finally we go ahead

367
00:10:47.050 --> 00:10:50.120
and print out a nice message print.

368
00:10:50.120 --> 00:10:50.840
There we go.

369
00:10:51.800 --> 00:10:53.480
We'll use a formatted string

370
00:10:53.480 --> 00:10:55.640
and we'll go ahead and say original,

371
00:10:57.080 --> 00:11:01.080
original and the original value is

372
00:11:01.080 --> 00:11:08.520
price Price final with VAT

373
00:11:09.320 --> 00:11:13.360
is going to be final, not finally.

374
00:11:13.360 --> 00:11:14.840
Make sure you keep an eye on that

375
00:11:14.840 --> 00:11:16.610
or, or in this case final amount.

376
00:11:16.610 --> 00:11:17.330
There we go.

377
00:11:18.050 --> 00:11:19.170
Don't worry about this.

378
00:11:19.730 --> 00:11:21.490
It's just auto formatted.

379
00:11:21.490 --> 00:11:22.850
This is the code that we have.

380
00:11:23.410 --> 00:11:25.090
My code auto wrap setup

381
00:11:25.090 --> 00:11:26.250
in case you also want that.

382
00:11:26.250 --> 00:11:27.290
Click on the view and we

383
00:11:27.290 --> 00:11:28.610
have this world wrap.

384
00:11:28.610 --> 00:11:29.730
Pretty easy.

385
00:11:29.730 --> 00:11:31.089
Let's go ahead and run this

386
00:11:31.089 --> 00:11:32.810
and see what happens with this.

387
00:11:32.810 --> 00:11:34.370
Have we done any mistake?

388
00:11:34.370 --> 00:11:36.730
This one is 05 traces.

389
00:11:36.730 --> 00:11:37.890
And there we go.

390
00:11:37.890 --> 00:11:39.010
So original was

391
00:11:39.760 --> 00:11:41.970
10 and we have added 110.

392
00:11:42.700 --> 00:11:43.340
Pretty good.

393
00:11:43.340 --> 00:11:45.637
Accurate 10% VAT.

394
00:11:45.637 --> 00:11:47.980
150, 165 again pretty good.

395
00:11:47.980 --> 00:11:49.860
Pretty easy calculation for this

396
00:11:49.860 --> 00:11:52.420
200 we got 220 easy calculation.

397
00:11:52.420 --> 00:11:53.820
So at least we can verify that

398
00:11:53.820 --> 00:11:55.580
10% VAT is getting added.

399
00:11:55.580 --> 00:11:56.980
So whatever the math formula we

400
00:11:56.980 --> 00:11:59.180
have added it actually is working.

401
00:11:59.180 --> 00:12:01.420
So this was all about functions.

402
00:12:01.420 --> 00:12:02.740
You don't realize it but we

403
00:12:02.740 --> 00:12:03.820
have covered so much of

404
00:12:03.820 --> 00:12:05.020
in depth about the function.

405
00:12:05.020 --> 00:12:05.820
We have covered about

406
00:12:05.820 --> 00:12:07.440
the readability, reducing

407
00:12:07.980 --> 00:12:10.460
the complexity, segregation

408
00:12:10.460 --> 00:12:12.180
of the complexity also known

409
00:12:12.180 --> 00:12:13.340
as separation of concern.

410
00:12:13.910 --> 00:12:15.150
We have also seen how return

411
00:12:15.150 --> 00:12:16.350
and print are different in

412
00:12:16.350 --> 00:12:18.230
functions, how to define a function.

413
00:12:18.230 --> 00:12:19.750
So so many activities, so many

414
00:12:19.750 --> 00:12:20.990
mini challenges we have done.

415
00:12:20.990 --> 00:12:22.750
I hope you have enjoyed them and make

416
00:12:22.750 --> 00:12:23.870
sure you rate us as well

417
00:12:23.870 --> 00:12:25.510
because your rating is something

418
00:12:25.510 --> 00:12:27.150
that will help me to make the best

419
00:12:27.150 --> 00:12:28.950
course in the world on Python.

420
00:12:28.950 --> 00:12:30.230
That is it for this video.

421
00:12:30.230 --> 00:12:31.750
Let's catch up in the next one.
