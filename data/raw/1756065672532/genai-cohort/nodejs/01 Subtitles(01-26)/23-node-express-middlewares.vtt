WEBVTT

1
00:00:00.080 --> 00:00:01.160
Hey, guys, and welcome back

2
00:00:01.160 --> 00:00:02.880
to another exciting video.

3
00:00:02.880 --> 00:00:05.160
And in this particular video, let's

4
00:00:05.160 --> 00:00:07.160
cover the topic of middlewares.

5
00:00:07.160 --> 00:00:08.880
So this middleware thing in Express

6
00:00:08.880 --> 00:00:10.360
is really, really, really powerful

7
00:00:10.360 --> 00:00:12.000
and very important to understand.

8
00:00:12.000 --> 00:00:13.880
And trust me, I am going

9
00:00:13.880 --> 00:00:15.520
to make the understanding

10
00:00:15.520 --> 00:00:17.400
of middlewares so easy.

11
00:00:17.400 --> 00:00:18.880
Okay, so in the previous,

12
00:00:19.520 --> 00:00:20.800
class, or I can say in the previous

13
00:00:20.800 --> 00:00:21.880
video, we have built this

14
00:00:21.880 --> 00:00:23.280
project that was a bookstore.

15
00:00:23.280 --> 00:00:24.680
We have used one middleware

16
00:00:24.680 --> 00:00:26.560
that was this express JSON.

17
00:00:26.560 --> 00:00:28.320
And kind of, you have at least

18
00:00:28.320 --> 00:00:30.120
I think 1 or 2% idea that what

19
00:00:30.120 --> 00:00:31.120
this line is doing, right?

20
00:00:31.120 --> 00:00:32.439
It is doing some magical

21
00:00:32.439 --> 00:00:34.240
things inside it

22
00:00:34.240 --> 00:00:36.400
that uses the headers, I.e.

23
00:00:36.400 --> 00:00:39.000
content type JSON and converts the

24
00:00:39.000 --> 00:00:41.120
body into a JSON and gives us the

25
00:00:41.120 --> 00:00:43.840
access as a body so that if there

26
00:00:43.840 --> 00:00:45.360
is a, post route, we can use

27
00:00:45.360 --> 00:00:47.720
request body to get what is inside

28
00:00:47.720 --> 00:00:48.640
the body.

29
00:00:48.640 --> 00:00:49.840
Now let's understand

30
00:00:49.840 --> 00:00:51.440
that what exactly is a middleware?

31
00:00:51.440 --> 00:00:52.160
And now you are going

32
00:00:52.160 --> 00:00:53.080
to understand this particular

33
00:00:53.080 --> 00:00:54.840
middleware in a more cool way.

34
00:00:54.840 --> 00:00:55.130
Okay?

35
00:00:55.130 --> 00:00:55.290
Okay.

36
00:00:55.290 --> 00:00:56.810
In a more good way, I should say.

37
00:00:57.450 --> 00:00:59.370
So let's start with the middleware.

38
00:00:59.370 --> 00:01:00.330
So let's say that you have

39
00:01:00.330 --> 00:01:02.410
a user and that particular user

40
00:01:02.410 --> 00:01:03.850
makes a request, right?

41
00:01:03.850 --> 00:01:05.370
Makes a request where?

42
00:01:05.370 --> 00:01:06.850
To your Express server.

43
00:01:06.850 --> 00:01:08.490
So here is an incoming request

44
00:01:08.490 --> 00:01:10.410
to the Express server.

45
00:01:10.410 --> 00:01:11.370
Okay?

46
00:01:11.370 --> 00:01:13.170
Now what this express server

47
00:01:13.170 --> 00:01:14.490
is basically, right?

48
00:01:14.490 --> 00:01:16.370
So if I go back, can you see that

49
00:01:16.370 --> 00:01:17.850
you are creating an app here?

50
00:01:17.850 --> 00:01:19.130
With this Express, you have

51
00:01:19.130 --> 00:01:21.610
created an app, and now

52
00:01:21.610 --> 00:01:23.170
everything that you do, like you

53
00:01:23.170 --> 00:01:24.370
register your routes, you

54
00:01:24.370 --> 00:01:25.810
register your middlewares, you

55
00:01:25.810 --> 00:01:27.770
listen to this app that is using

56
00:01:27.770 --> 00:01:29.330
this app object, correct?

57
00:01:29.330 --> 00:01:31.130
That is using this app thing.

58
00:01:31.130 --> 00:01:33.130
Now what Express does, Express

59
00:01:33.130 --> 00:01:35.450
basically forwards this request or

60
00:01:35.450 --> 00:01:38.010
gives the capability to this app

61
00:01:38.010 --> 00:01:40.730
thing to handle this request, right?

62
00:01:40.730 --> 00:01:42.370
So that means all the requests

63
00:01:42.370 --> 00:01:43.850
that comes to your server, that

64
00:01:43.850 --> 00:01:46.330
goes to this app variable.

65
00:01:46.330 --> 00:01:47.490
So this is kind of your

66
00:01:47.490 --> 00:01:48.810
request handler, okay?

67
00:01:48.810 --> 00:01:49.450
So this is your

68
00:01:49.450 --> 00:01:51.280
request handler thing.

69
00:01:51.280 --> 00:01:52.520
Okay, that's good.

70
00:01:52.520 --> 00:01:53.360
That's good.

71
00:01:53.360 --> 00:01:55.610
Now what this app does, app,

72
00:01:55.610 --> 00:01:57.840
basically reads that what kind of

73
00:01:57.840 --> 00:02:00.200
incoming request you have, like if

74
00:02:00.200 --> 00:02:02.000
it is a post request, if it is a get

75
00:02:02.000 --> 00:02:03.720
request, on which path you are

76
00:02:03.720 --> 00:02:07.120
sending the request, and smartly and

77
00:02:07.120 --> 00:02:09.360
internally it figures out that on

78
00:02:09.360 --> 00:02:11.640
which route that the code should be

79
00:02:11.640 --> 00:02:12.640
executed, right?

80
00:02:12.640 --> 00:02:14.280
So let's say if this was a get

81
00:02:14.280 --> 00:02:15.840
route, so let's say that the request

82
00:02:15.840 --> 00:02:18.880
was coming to a, get to books.

83
00:02:18.880 --> 00:02:19.680
So what this particular

84
00:02:19.680 --> 00:02:20.840
route is going to do, what

85
00:02:20.840 --> 00:02:21.800
this app is going to do.

86
00:02:21.800 --> 00:02:23.440
If the request is coming here,

87
00:02:23.440 --> 00:02:25.000
this particular request will be

88
00:02:25.000 --> 00:02:28.320
forwarded to the appropriate route.

89
00:02:29.040 --> 00:02:30.360
This request will be forwarded

90
00:02:30.360 --> 00:02:31.840
to appropriate route

91
00:02:31.840 --> 00:02:34.240
in our case, this is the route.

92
00:02:34.240 --> 00:02:35.520
So this particular request

93
00:02:35.520 --> 00:02:37.300
is basically forwarded.

94
00:02:37.300 --> 00:02:38.160
Just one second.

95
00:02:38.160 --> 00:02:39.280
So this particular request

96
00:02:39.280 --> 00:02:41.120
is forwarded to this route.

97
00:02:41.120 --> 00:02:43.080
Similarly, if the request was coming

98
00:02:43.080 --> 00:02:45.920
to, let's say, get books one,

99
00:02:45.920 --> 00:02:47.840
so what this app will do, this will

100
00:02:47.840 --> 00:02:49.610
smartly forward the request to,

101
00:02:49.610 --> 00:02:52.090
to this particular function, right?

102
00:02:52.090 --> 00:02:53.530
So that means this particular

103
00:02:53.530 --> 00:02:54.930
request will be forwarded

104
00:02:54.930 --> 00:02:56.210
to this particular route.

105
00:02:56.210 --> 00:02:57.610
So these are routes, correct?

106
00:02:57.610 --> 00:02:59.290
You have route handlers.

107
00:02:59.290 --> 00:03:00.330
So this is the whole

108
00:03:00.330 --> 00:03:01.610
purpose of the app.

109
00:03:01.610 --> 00:03:02.730
So this is how you have

110
00:03:02.730 --> 00:03:04.570
structured your, app right now.

111
00:03:04.570 --> 00:03:07.490
And, and this whole part, this whole

112
00:03:07.490 --> 00:03:10.410
part is handled by Express, correct?

113
00:03:10.410 --> 00:03:13.090
So that means if I rewrite it again,

114
00:03:13.090 --> 00:03:16.260
it's like, hey, you have a user,

115
00:03:16.260 --> 00:03:18.370
okay, user is making a request.

116
00:03:19.220 --> 00:03:21.660
That request goes to the app, okay,

117
00:03:21.660 --> 00:03:23.140
that request goes to the app,

118
00:03:23.140 --> 00:03:25.460
and app smartly routes the request

119
00:03:25.460 --> 00:03:27.780
to the, to the appropriate route.

120
00:03:27.780 --> 00:03:29.020
Now what are middlewares?

121
00:03:29.020 --> 00:03:30.500
Okay, now in this particular whole

122
00:03:30.500 --> 00:03:32.260
chain, where are the middlewares?

123
00:03:32.260 --> 00:03:34.340
So what Express allows you to do is.

124
00:03:34.340 --> 00:03:36.660
Express says that, hey, bro,

125
00:03:36.660 --> 00:03:38.420
in this particular layer in

126
00:03:38.420 --> 00:03:40.700
from app to route, you can define

127
00:03:40.700 --> 00:03:43.140
your own custom middlewares.

128
00:03:44.330 --> 00:03:46.010
Okay, what do I mean by these

129
00:03:46.010 --> 00:03:48.610
middlewares is that you can write

130
00:03:48.610 --> 00:03:50.330
a piece of code here in between.

131
00:03:50.330 --> 00:03:51.650
So let's say that this is my.

132
00:03:51.650 --> 00:03:52.890
Some piece of code.

133
00:03:52.890 --> 00:03:53.850
So what will happen?

134
00:03:54.570 --> 00:03:56.410
Every time this app

135
00:03:56.410 --> 00:03:58.690
sends a request, it will not be sent

136
00:03:58.690 --> 00:04:00.810
to the route directly.

137
00:04:00.810 --> 00:04:02.650
This app, can actually

138
00:04:02.650 --> 00:04:04.810
give the request access to you.

139
00:04:04.810 --> 00:04:06.970
And then you can internally,

140
00:04:06.970 --> 00:04:08.370
like, you know, you can internally

141
00:04:08.370 --> 00:04:09.970
do something with this request.

142
00:04:09.970 --> 00:04:11.690
For example, maybe you want

143
00:04:11.690 --> 00:04:12.730
to log the request, right?

144
00:04:12.730 --> 00:04:13.690
You want to log the request

145
00:04:13.690 --> 00:04:15.170
to a log.txt file.

146
00:04:15.170 --> 00:04:16.089
Maybe you want to do some

147
00:04:16.089 --> 00:04:17.089
database operation.

148
00:04:17.089 --> 00:04:18.649
So basically what it is

149
00:04:18.649 --> 00:04:20.850
doing is it, this lets you

150
00:04:20.850 --> 00:04:23.050
write an interceptor, okay?

151
00:04:23.050 --> 00:04:24.730
So kind of an interceptor that

152
00:04:24.730 --> 00:04:25.729
is sitting in between,

153
00:04:25.729 --> 00:04:27.410
it's kind of a man in middle.

154
00:04:27.410 --> 00:04:29.650
So there is a man in middle

155
00:04:29.650 --> 00:04:31.890
who is between every request.

156
00:04:31.890 --> 00:04:33.690
And whenever there's a request, you

157
00:04:33.690 --> 00:04:35.970
can execute a custom piece of code.

158
00:04:35.970 --> 00:04:37.170
This custom piece of code

159
00:04:37.170 --> 00:04:38.210
can do literally anything.

160
00:04:38.210 --> 00:04:39.890
A, database operation, some file

161
00:04:39.890 --> 00:04:41.130
writing, anything that you want

162
00:04:41.130 --> 00:04:42.790
to do, and then you can forward

163
00:04:42.790 --> 00:04:44.590
the request to the root, right?

164
00:04:44.590 --> 00:04:45.870
So this gives you a capability

165
00:04:45.870 --> 00:04:47.870
to do anything between the request.

166
00:04:48.510 --> 00:04:49.630
So this particular thing

167
00:04:49.630 --> 00:04:50.990
is known as a middleware.

168
00:04:50.990 --> 00:04:51.710
So this is what, this

169
00:04:51.710 --> 00:04:52.630
is a middleware.

170
00:04:52.630 --> 00:04:54.670
Okay, so now you have

171
00:04:54.670 --> 00:04:56.910
got that what a middleware means.

172
00:04:56.910 --> 00:04:58.990
A middleware is a piece of code

173
00:04:58.990 --> 00:05:02.390
that runs in every request and which

174
00:05:02.390 --> 00:05:04.750
sits between app and the router.

175
00:05:04.750 --> 00:05:06.030
So if there is any request

176
00:05:06.030 --> 00:05:06.990
coming to your route,

177
00:05:07.890 --> 00:05:09.110
you can have a middleware

178
00:05:09.110 --> 00:05:10.430
in between to run that code.

179
00:05:11.180 --> 00:05:11.540
Okay?

180
00:05:11.540 --> 00:05:13.100
So this was the very simple

181
00:05:13.100 --> 00:05:14.220
thing of a middleware.

182
00:05:14.220 --> 00:05:15.620
So middleware functions are

183
00:05:15.620 --> 00:05:16.540
functions that have access

184
00:05:16.540 --> 00:05:18.300
to the request and response and next

185
00:05:19.100 --> 00:05:20.220
function in the application

186
00:05:20.220 --> 00:05:21.580
request response cycle.

187
00:05:21.580 --> 00:05:22.220
Okay?

188
00:05:22.220 --> 00:05:23.500
So what middlewares can do,

189
00:05:23.500 --> 00:05:24.620
it can execute any code,

190
00:05:24.620 --> 00:05:25.620
it can make changes to your

191
00:05:25.620 --> 00:05:26.340
request and response.

192
00:05:26.340 --> 00:05:26.859
So let's understand

193
00:05:26.859 --> 00:05:27.740
what they are saying.

194
00:05:27.740 --> 00:05:29.500
Now this particular thing

195
00:05:29.500 --> 00:05:30.860
is a very high level

196
00:05:31.420 --> 00:05:32.860
understanding of middleware.

197
00:05:32.860 --> 00:05:33.780
Now let me show you that

198
00:05:33.780 --> 00:05:34.940
what middleware can do.

199
00:05:34.940 --> 00:05:35.820
Let's say you have

200
00:05:35.820 --> 00:05:37.300
an incoming request, okay?

201
00:05:37.300 --> 00:05:38.340
So this is your incoming

202
00:05:38.340 --> 00:05:39.500
request from the user.

203
00:05:40.080 --> 00:05:42.120
So this request has to finally go

204
00:05:42.120 --> 00:05:43.160
to a route, correct?

205
00:05:43.160 --> 00:05:44.760
So I have omitted the app

206
00:05:44.760 --> 00:05:45.920
and all that thing.

207
00:05:45.920 --> 00:05:47.120
So what you can do is, number

208
00:05:47.120 --> 00:05:48.600
one, there can be n number

209
00:05:48.600 --> 00:05:50.000
of middlewares, okay?

210
00:05:50.000 --> 00:05:51.240
It's not necessary that there

211
00:05:51.240 --> 00:05:52.440
can be only one middleware.

212
00:05:52.440 --> 00:05:55.000
There can be n number of middlewares.

213
00:05:55.000 --> 00:05:56.200
So you can have five, you

214
00:05:56.200 --> 00:05:57.120
can have 10, you can have

215
00:05:57.120 --> 00:05:58.960
15 middlewares, okay?

216
00:05:58.960 --> 00:06:00.520
So let's say that I write one

217
00:06:00.520 --> 00:06:02.080
middleware here, then I write

218
00:06:02.080 --> 00:06:03.200
one middleware here, Then I

219
00:06:03.200 --> 00:06:04.360
write one middleware here, THEN

220
00:06:04.360 --> 00:06:05.760
I write one middleware here.

221
00:06:05.760 --> 00:06:06.880
So right now, how many

222
00:06:07.440 --> 00:06:08.480
middlewares do I have?

223
00:06:08.480 --> 00:06:10.190
I have four middlewares

224
00:06:10.190 --> 00:06:11.670
and these four middlewares are

225
00:06:11.670 --> 00:06:12.950
responsible for doing something.

226
00:06:12.950 --> 00:06:13.270
Something.

227
00:06:13.270 --> 00:06:14.710
For example, maybe this

228
00:06:14.710 --> 00:06:16.230
is your JSON parser.

229
00:06:16.230 --> 00:06:18.750
Maybe this is for, querying, maybe

230
00:06:18.750 --> 00:06:19.990
this is for the validation that

231
00:06:19.990 --> 00:06:21.470
if the request is valid or not,

232
00:06:21.470 --> 00:06:22.710
maybe you can do something like,

233
00:06:22.710 --> 00:06:24.350
hey, if you are a hacker or not,

234
00:06:24.350 --> 00:06:25.590
and this can do something like,

235
00:06:25.590 --> 00:06:26.550
you know, logging all the

236
00:06:26.550 --> 00:06:27.950
requests so you can have multiple

237
00:06:27.950 --> 00:06:28.750
middlewares.

238
00:06:28.750 --> 00:06:29.710
Okay?

239
00:06:29.710 --> 00:06:33.790
Now middlewares, middlewares can

240
00:06:33.790 --> 00:06:35.890
do following things, okay?

241
00:06:35.890 --> 00:06:37.450
Can do following things.

242
00:06:37.450 --> 00:06:40.890
Number one, it can, it can

243
00:06:40.890 --> 00:06:43.010
read the request, okay?

244
00:06:43.010 --> 00:06:43.970
Number one is that it

245
00:06:43.970 --> 00:06:44.770
can read the request.

246
00:06:44.770 --> 00:06:46.530
For example, when a request

247
00:06:46.530 --> 00:06:47.650
is coming, it will not go

248
00:06:47.650 --> 00:06:49.610
to the route, it will go here.

249
00:06:49.610 --> 00:06:52.210
And this middleware has full access

250
00:06:52.210 --> 00:06:54.010
to the request object that what

251
00:06:54.010 --> 00:06:56.210
kind of method it is, what kind of,

252
00:06:56.210 --> 00:06:57.690
data it is coming

253
00:06:57.690 --> 00:06:59.210
from, where this request is coming.

254
00:06:59.210 --> 00:07:00.970
This middleware can read

255
00:07:00.970 --> 00:07:02.710
the request, okay?

256
00:07:02.710 --> 00:07:04.870
Secondly, this middleware,

257
00:07:04.870 --> 00:07:09.270
this middleware, middleware

258
00:07:09.270 --> 00:07:12.550
can terminate, or I should say

259
00:07:12.550 --> 00:07:14.150
can terminate

260
00:07:14.150 --> 00:07:15.910
the request response cycle.

261
00:07:15.910 --> 00:07:17.390
Okay, what does this mean?

262
00:07:17.390 --> 00:07:18.150
This is, this is

263
00:07:18.150 --> 00:07:18.950
very, very important.

264
00:07:18.950 --> 00:07:19.990
Okay?

265
00:07:19.990 --> 00:07:21.430
This means let's say

266
00:07:21.430 --> 00:07:24.350
this middleware was a hacker,

267
00:07:24.350 --> 00:07:25.550
checking middleware, okay?

268
00:07:25.550 --> 00:07:26.510
So this basically checks

269
00:07:26.510 --> 00:07:27.150
that if you're trying

270
00:07:27.150 --> 00:07:28.230
to hack something or not.

271
00:07:28.840 --> 00:07:30.120
So what this middleware can do

272
00:07:30.120 --> 00:07:31.920
when a request comes, let's say

273
00:07:31.920 --> 00:07:34.240
request is coming to books, okay?

274
00:07:34.240 --> 00:07:36.440
A get request is coming to books.

275
00:07:36.440 --> 00:07:38.160
So this Particular middleware has

276
00:07:38.160 --> 00:07:39.640
some algorithm written which checks

277
00:07:39.640 --> 00:07:41.720
the request and it has detected

278
00:07:41.720 --> 00:07:43.320
that, hey, you are a, hacker.

279
00:07:43.880 --> 00:07:45.920
Do you want to allow a, hacker

280
00:07:45.920 --> 00:07:47.280
to access to this route?

281
00:07:47.280 --> 00:07:47.920
Because this is your

282
00:07:47.920 --> 00:07:48.640
final code, right?

283
00:07:48.640 --> 00:07:50.400
This is the final code that interacts

284
00:07:50.400 --> 00:07:51.360
with the database that

285
00:07:51.360 --> 00:07:52.520
does all the CRUD operation.

286
00:07:52.520 --> 00:07:53.880
So this is your final code.

287
00:07:53.880 --> 00:07:55.400
Now, do you want the hacker

288
00:07:55.400 --> 00:07:56.480
to reach here?

289
00:07:56.480 --> 00:07:57.160
Of course not.

290
00:07:57.160 --> 00:07:57.360
Right?

291
00:07:57.360 --> 00:07:58.320
You don't want.

292
00:07:58.320 --> 00:08:00.760
So this, this middleware right here

293
00:08:00.760 --> 00:08:03.040
can even send back the response.

294
00:08:03.040 --> 00:08:04.160
This can terminate

295
00:08:04.160 --> 00:08:05.920
the request response cycle.

296
00:08:05.920 --> 00:08:07.280
This can end the response,

297
00:08:07.280 --> 00:08:08.920
and boom, your request

298
00:08:08.920 --> 00:08:10.800
response cycle is completed.

299
00:08:10.800 --> 00:08:12.800
So user was never able to.

300
00:08:12.800 --> 00:08:14.840
Okay, so this basically, you know,

301
00:08:14.840 --> 00:08:16.040
rejected the call, or I can

302
00:08:16.040 --> 00:08:17.680
say this returned the response.

303
00:08:17.680 --> 00:08:20.420
So this middleware will never let

304
00:08:20.420 --> 00:08:21.660
this request to go to other

305
00:08:21.660 --> 00:08:23.380
middlewares or even to the route.

306
00:08:23.380 --> 00:08:25.140
So middlewares can even terminate.

307
00:08:25.140 --> 00:08:27.540
Okay, what else middlewares can do?

308
00:08:27.540 --> 00:08:28.940
Middlewares, okay?

309
00:08:28.940 --> 00:08:33.860
Middlewares can forward the request

310
00:08:33.860 --> 00:08:35.700
to other middleware.

311
00:08:35.700 --> 00:08:38.179
Okay, so what does this mean

312
00:08:38.179 --> 00:08:39.900
if this user is not a hacker?

313
00:08:39.900 --> 00:08:41.220
Let's say that this user was

314
00:08:41.220 --> 00:08:42.580
fine, this is not a hacker.

315
00:08:42.580 --> 00:08:44.140
So after the validation, this

316
00:08:44.140 --> 00:08:46.140
middleware can route the request.

317
00:08:46.140 --> 00:08:48.110
It can say, hey, I have done my work.

318
00:08:48.110 --> 00:08:49.110
Here is the request.

319
00:08:49.110 --> 00:08:50.670
Now, now it's time for this

320
00:08:50.670 --> 00:08:52.190
particular middleware to execute.

321
00:08:52.190 --> 00:08:53.710
Let me just make it like this.

322
00:08:53.710 --> 00:08:55.510
So now this middleware will execute.

323
00:08:55.510 --> 00:08:57.110
Now let's say that, his duty is

324
00:08:57.110 --> 00:08:58.030
to do something, right?

325
00:08:58.030 --> 00:08:59.750
So let's say his duty was to log it.

326
00:08:59.750 --> 00:09:01.190
So once the logging is done, it

327
00:09:01.190 --> 00:09:02.670
can forward the request to him.

328
00:09:02.670 --> 00:09:04.430
Now this can do something like,

329
00:09:04.430 --> 00:09:06.510
hey, are you logged in or not?

330
00:09:06.510 --> 00:09:07.910
If you're not logged in, it

331
00:09:07.910 --> 00:09:08.910
can return back, right?

332
00:09:08.910 --> 00:09:10.350
Let's say user is not logged

333
00:09:10.350 --> 00:09:11.630
in, it can return back

334
00:09:11.630 --> 00:09:13.240
that, hey, please log in.

335
00:09:13.240 --> 00:09:14.520
But if the user is login,

336
00:09:14.520 --> 00:09:15.640
then it can forward the request

337
00:09:15.640 --> 00:09:16.760
to another middleware.

338
00:09:16.760 --> 00:09:18.560
Then this can do something, and then

339
00:09:18.560 --> 00:09:20.120
finally it can call the route.

340
00:09:20.120 --> 00:09:21.520
So this is how the middlewares

341
00:09:21.520 --> 00:09:22.240
are working, right?

342
00:09:22.240 --> 00:09:23.480
One after another.

343
00:09:23.480 --> 00:09:29.160
So that means, middlewares always run

344
00:09:29.160 --> 00:09:32.280
in sequence, okay, in sequence

345
00:09:32.280 --> 00:09:33.480
as they are in the stack.

346
00:09:33.480 --> 00:09:36.680
So that means what if this

347
00:09:36.680 --> 00:09:38.360
middleware is A, this middleware

348
00:09:38.360 --> 00:09:39.520
is B, this middleware is

349
00:09:39.520 --> 00:09:41.150
C, this middleware is D.

350
00:09:41.150 --> 00:09:43.390
The a middleware can either

351
00:09:43.390 --> 00:09:44.830
terminate the request, right,

352
00:09:44.830 --> 00:09:46.070
by sending the response back

353
00:09:46.070 --> 00:09:48.350
to the user, or it can just

354
00:09:48.350 --> 00:09:50.350
forward the request to the B.

355
00:09:50.350 --> 00:09:52.270
It cannot directly jump to the C.

356
00:09:52.270 --> 00:09:52.710
Okay?

357
00:09:52.710 --> 00:09:54.390
So it can forward the request

358
00:09:54.390 --> 00:09:56.190
to the next middleware in the stack.

359
00:09:56.190 --> 00:09:57.990
So A will say, hey, I have

360
00:09:57.990 --> 00:09:59.590
done my work and I allow you

361
00:09:59.590 --> 00:10:00.910
to go to the next one.

362
00:10:00.910 --> 00:10:02.190
Express will internally

363
00:10:02.190 --> 00:10:03.550
forward this request to B.

364
00:10:03.550 --> 00:10:04.150
Okay?

365
00:10:04.150 --> 00:10:05.710
Now, B can either terminate

366
00:10:05.710 --> 00:10:07.370
the response or it can say,

367
00:10:07.370 --> 00:10:08.970
okay, I have done my work.

368
00:10:08.970 --> 00:10:10.210
I have to forward this

369
00:10:10.210 --> 00:10:11.850
request to the next one.

370
00:10:11.850 --> 00:10:13.170
So he will be the next one.

371
00:10:13.170 --> 00:10:14.330
So now he will do the work.

372
00:10:14.330 --> 00:10:15.410
Now he can say, hey, if

373
00:10:15.410 --> 00:10:16.370
everything is good, I want

374
00:10:16.370 --> 00:10:17.690
to forward it to the next one.

375
00:10:17.690 --> 00:10:18.690
If he will say the next

376
00:10:18.690 --> 00:10:19.690
one, that is the route.

377
00:10:19.690 --> 00:10:21.610
So that means you can just say,

378
00:10:21.610 --> 00:10:23.250
that whether you want to pass

379
00:10:23.250 --> 00:10:24.690
the request to the next one or

380
00:10:24.690 --> 00:10:25.890
do you want to terminate it?

381
00:10:25.890 --> 00:10:27.330
Okay, you cannot decide

382
00:10:27.330 --> 00:10:28.970
on which middleware it should go.

383
00:10:28.970 --> 00:10:30.010
So that is how basically

384
00:10:30.010 --> 00:10:31.210
it works, right?

385
00:10:31.210 --> 00:10:32.410
Right now you just have one

386
00:10:32.410 --> 00:10:34.330
middleware that is app.use,

387
00:10:34.330 --> 00:10:36.010
that you are using express JSON.

388
00:10:36.690 --> 00:10:37.410
So that means what

389
00:10:37.410 --> 00:10:38.370
this thing is doing.

390
00:10:38.370 --> 00:10:39.490
Okay, what this particular

391
00:10:39.490 --> 00:10:40.090
thing is doing.

392
00:10:40.090 --> 00:10:41.170
Let me show you.

393
00:10:41.170 --> 00:10:42.490
So right now in our

394
00:10:42.490 --> 00:10:43.570
bookstore application.

395
00:10:43.570 --> 00:10:44.450
Sorry for that.

396
00:10:44.450 --> 00:10:45.490
Right now in our bookstore

397
00:10:45.490 --> 00:10:47.730
application, when a request comes,

398
00:10:47.730 --> 00:10:49.530
okay, what this middleware

399
00:10:49.530 --> 00:10:51.010
does, okay, this middleware.

400
00:10:51.010 --> 00:10:52.370
So this is a middleware.

401
00:10:52.370 --> 00:10:56.370
If headers have, if headers

402
00:10:56.370 --> 00:11:00.450
have content, type application/JSON

403
00:11:00.450 --> 00:11:04.150
application, JSON.

404
00:11:04.150 --> 00:11:05.230
What it does, it does

405
00:11:05.230 --> 00:11:06.430
some parsing, right?

406
00:11:06.430 --> 00:11:08.230
This is the logic of this thing.

407
00:11:08.230 --> 00:11:10.150
So it will do some parsing and all.

408
00:11:10.150 --> 00:11:12.390
And then call the next middleware.

409
00:11:12.390 --> 00:11:13.750
It will call the next middleware.

410
00:11:13.750 --> 00:11:15.070
Who is the next middleware?

411
00:11:15.070 --> 00:11:17.270
Right now, next middleware can

412
00:11:17.270 --> 00:11:18.590
again, be a middleware

413
00:11:18.590 --> 00:11:19.510
which you have defined.

414
00:11:20.070 --> 00:11:21.670
That is possible because

415
00:11:21.670 --> 00:11:23.190
this thing has no idea, right?

416
00:11:23.190 --> 00:11:23.750
What is the next?

417
00:11:23.750 --> 00:11:24.510
It will just say, hey,

418
00:11:24.510 --> 00:11:25.390
I have done my work.

419
00:11:25.390 --> 00:11:26.550
Call the next one.

420
00:11:26.550 --> 00:11:28.110
Now, next one can again be

421
00:11:28.110 --> 00:11:29.990
a middleware which you have defined,

422
00:11:29.990 --> 00:11:31.760
or it can be a route.

423
00:11:31.760 --> 00:11:33.240
So in our case, right now

424
00:11:33.240 --> 00:11:34.320
we have a route only.

425
00:11:34.320 --> 00:11:35.760
So this calls the route.

426
00:11:35.760 --> 00:11:36.880
So right now, can you see

427
00:11:36.880 --> 00:11:37.880
any other middleware?

428
00:11:37.880 --> 00:11:38.120
No.

429
00:11:38.120 --> 00:11:39.000
So what will happen when

430
00:11:39.000 --> 00:11:40.480
the request will come, it will

431
00:11:40.480 --> 00:11:41.920
first go into this middleware.

432
00:11:41.920 --> 00:11:43.360
This middleware will internally

433
00:11:43.360 --> 00:11:44.760
call the next function, which is

434
00:11:44.760 --> 00:11:45.920
in our case, routes.

435
00:11:45.920 --> 00:11:47.200
But what if I create

436
00:11:47.200 --> 00:11:48.400
one more middleware here?

437
00:11:48.400 --> 00:11:50.400
Let's say middleware A.

438
00:11:50.400 --> 00:11:51.200
So what will happen?

439
00:11:51.200 --> 00:11:52.640
This can only forward

440
00:11:52.640 --> 00:11:54.080
the request to middleware A.

441
00:11:54.080 --> 00:11:55.840
And middleware A can decide whether

442
00:11:55.840 --> 00:11:57.120
should I forward the request to

443
00:11:57.120 --> 00:11:58.940
the routes or should I terminate it.

444
00:11:58.940 --> 00:12:00.180
Okay, so can we see

445
00:12:00.180 --> 00:12:01.340
the code to this JSON?

446
00:12:01.340 --> 00:12:02.420
I, mean, you can see,

447
00:12:02.420 --> 00:12:03.380
but yeah, that's fine.

448
00:12:03.380 --> 00:12:05.540
Okay, so let me show you that how

449
00:12:05.540 --> 00:12:07.020
we can write, our own middleware.

450
00:12:07.020 --> 00:12:08.620
So shall we write our own middleware?

451
00:12:08.620 --> 00:12:09.420
Let's see.

452
00:12:09.420 --> 00:12:10.820
So what I can do is I have

453
00:12:10.820 --> 00:12:12.140
to write a middleware here,

454
00:12:12.140 --> 00:12:14.540
app dot use, and here you have

455
00:12:14.540 --> 00:12:15.900
to Pass A function.

456
00:12:15.900 --> 00:12:18.140
Okay, now this function has

457
00:12:18.140 --> 00:12:19.340
access to the request.

458
00:12:19.340 --> 00:12:21.100
You can read the incoming request.

459
00:12:21.100 --> 00:12:22.460
If you want to end the response,

460
00:12:22.460 --> 00:12:24.470
you can do this and, the next.

461
00:12:24.470 --> 00:12:28.550
Okay, now let's say console log.

462
00:12:28.550 --> 00:12:31.510
I am, middleware A.

463
00:12:31.510 --> 00:12:32.710
Okay, I'm just saying it that

464
00:12:32.710 --> 00:12:34.150
this is middleware A

465
00:12:34.150 --> 00:12:35.550
and I just want to do nothing.

466
00:12:35.550 --> 00:12:36.390
Can you see that?

467
00:12:36.390 --> 00:12:38.550
Neither I am terminating the response

468
00:12:38.550 --> 00:12:39.910
nor I'm doing anything.

469
00:12:39.910 --> 00:12:40.390
Fine.

470
00:12:40.950 --> 00:12:42.470
So what this will do is this is

471
00:12:42.470 --> 00:12:43.430
actually holding on to

472
00:12:43.430 --> 00:12:45.390
the request and I am not completing

473
00:12:45.390 --> 00:12:47.190
the request response cycle.

474
00:12:47.190 --> 00:12:48.470
So if I run the server.

475
00:12:48.470 --> 00:12:50.150
Okay, let me just run the server

476
00:12:50.150 --> 00:12:51.030
now, see what will happen.

477
00:12:51.030 --> 00:12:52.540
Now this is very bad thing.

478
00:12:52.540 --> 00:12:54.620
Let me just go to my thunder client.

479
00:12:54.620 --> 00:12:55.820
If I make a get request

480
00:12:55.820 --> 00:12:57.580
on books, what do you see that my

481
00:12:57.580 --> 00:12:59.020
request is always stuck.

482
00:12:59.020 --> 00:13:00.220
Do you see what happened?

483
00:13:00.220 --> 00:13:02.140
That I am in middleware A

484
00:13:02.140 --> 00:13:03.420
and this request is stuck.

485
00:13:03.420 --> 00:13:05.820
Let's make a request on book one.

486
00:13:05.820 --> 00:13:06.460
Okay?

487
00:13:06.460 --> 00:13:07.700
So I have to first cancel this

488
00:13:07.700 --> 00:13:08.940
request and do it again.

489
00:13:08.940 --> 00:13:10.020
I am middleware A

490
00:13:10.020 --> 00:13:11.660
and nothing is happening.

491
00:13:11.660 --> 00:13:12.500
Nothing is happening.

492
00:13:12.500 --> 00:13:13.020
Why?

493
00:13:13.020 --> 00:13:14.380
Because this middleware

494
00:13:14.380 --> 00:13:16.380
is holding on to the request, right?

495
00:13:16.380 --> 00:13:17.740
So nothing is happening.

496
00:13:17.740 --> 00:13:19.030
Let's do one thing.

497
00:13:19.030 --> 00:13:21.430
Let's just say return response

498
00:13:21.430 --> 00:13:24.470
JSON and I'll just say message.

499
00:13:25.590 --> 00:13:26.150
Boom.

500
00:13:27.030 --> 00:13:28.910
I am, a, middleware.

501
00:13:28.910 --> 00:13:30.190
So what this middleware is

502
00:13:30.190 --> 00:13:31.710
now doing is it is basically

503
00:13:31.710 --> 00:13:33.190
returning the response back.

504
00:13:33.190 --> 00:13:34.709
Something like this, right?

505
00:13:34.709 --> 00:13:36.110
It is basically returning

506
00:13:36.110 --> 00:13:37.030
the response back.

507
00:13:37.030 --> 00:13:38.110
It is not letting

508
00:13:38.110 --> 00:13:39.230
other middlewares run.

509
00:13:39.230 --> 00:13:41.030
So now you will see that no

510
00:13:41.030 --> 00:13:42.510
matter what I do, if I go

511
00:13:42.510 --> 00:13:44.030
on here, I am a middleware.

512
00:13:44.030 --> 00:13:46.310
If I make a get request on this

513
00:13:46.310 --> 00:13:47.670
middleware, if I make a post

514
00:13:47.670 --> 00:13:48.990
request, I, am a middleware.

515
00:13:48.990 --> 00:13:49.670
Can you see that?

516
00:13:49.670 --> 00:13:51.230
Always the middleware A is running

517
00:13:51.230 --> 00:13:52.710
and it is returning the request.

518
00:13:52.710 --> 00:13:54.390
So this middleware in the stack is

519
00:13:54.390 --> 00:13:56.430
not allowing the other middlewares

520
00:13:56.430 --> 00:13:57.470
or other things to run

521
00:13:57.470 --> 00:13:59.350
because you have a early return.

522
00:13:59.350 --> 00:14:00.910
What if I want that?

523
00:14:00.910 --> 00:14:02.630
Hey, I have done my work.

524
00:14:02.630 --> 00:14:04.070
Now I can just say, hey, next.

525
00:14:04.070 --> 00:14:05.310
Okay, I can just call

526
00:14:05.310 --> 00:14:06.710
the next function like this.

527
00:14:06.710 --> 00:14:07.950
So this next function will

528
00:14:07.950 --> 00:14:09.550
automatically call whatever

529
00:14:09.550 --> 00:14:10.190
is the next thing.

530
00:14:10.190 --> 00:14:11.350
If next is the route, it

531
00:14:11.350 --> 00:14:12.070
will go to the route.

532
00:14:12.070 --> 00:14:14.040
If next is something else, like it's

533
00:14:14.040 --> 00:14:15.720
a middleware, it will go there.

534
00:14:15.720 --> 00:14:17.200
So now if I run this code, let's

535
00:14:17.200 --> 00:14:18.600
say if I make a get request, you can

536
00:14:18.600 --> 00:14:19.600
see that we are getting books.

537
00:14:19.600 --> 00:14:19.760
Right?

538
00:14:19.760 --> 00:14:20.840
We are getting books.

539
00:14:20.840 --> 00:14:22.400
Let's say if I make a request

540
00:14:22.400 --> 00:14:24.480
to book one, you can see

541
00:14:24.480 --> 00:14:25.720
everything is working fine.

542
00:14:26.360 --> 00:14:27.960
Okay, let's create

543
00:14:27.960 --> 00:14:28.800
one more middleware.

544
00:14:28.800 --> 00:14:30.880
So app use again a function

545
00:14:30.880 --> 00:14:33.080
request response and next.

546
00:14:33.080 --> 00:14:35.120
Okay, now in this scenario,

547
00:14:35.120 --> 00:14:36.080
what happens when you

548
00:14:36.080 --> 00:14:37.400
have one more middleware?

549
00:14:37.400 --> 00:14:38.200
Let's say that this is

550
00:14:38.200 --> 00:14:39.580
your middleware B.

551
00:14:39.580 --> 00:14:39.860
Okay?

552
00:14:39.860 --> 00:14:41.660
Now this is your middleware B.

553
00:14:41.660 --> 00:14:43.060
Now this next will

554
00:14:43.060 --> 00:14:44.180
call this middleware.

555
00:14:44.180 --> 00:14:45.500
If this was not there, then

556
00:14:45.500 --> 00:14:47.260
the next is basically your routes.

557
00:14:47.260 --> 00:14:48.340
But if you have one more

558
00:14:48.340 --> 00:14:50.180
middleware, this next is going

559
00:14:50.180 --> 00:14:51.740
to call this middleware.

560
00:14:51.740 --> 00:14:52.820
So now let's say this

561
00:14:52.820 --> 00:14:54.780
returns a response JSON

562
00:14:54.780 --> 00:14:57.740
saying msg, message boom.

563
00:14:58.380 --> 00:14:59.740
I am B.

564
00:14:59.740 --> 00:15:01.380
So now what will happen is A will

565
00:15:01.380 --> 00:15:03.500
console log itself, but it will

566
00:15:03.500 --> 00:15:04.620
call the next function, right?

567
00:15:04.620 --> 00:15:05.900
Next is this middleware.

568
00:15:05.900 --> 00:15:07.300
This middleware will run, but it

569
00:15:07.300 --> 00:15:08.740
will always return the response.

570
00:15:08.740 --> 00:15:10.120
So that means A will run.

571
00:15:10.120 --> 00:15:11.040
B will always return

572
00:15:11.040 --> 00:15:12.120
back the response.

573
00:15:12.120 --> 00:15:13.400
So now what you will notice is that

574
00:15:13.400 --> 00:15:14.640
no matter what you call, you will

575
00:15:14.640 --> 00:15:15.920
always get it from the B, right?

576
00:15:15.920 --> 00:15:17.120
No matter what you're saying, you

577
00:15:17.120 --> 00:15:18.800
can see A and B are running and you

578
00:15:18.800 --> 00:15:20.280
are always getting it back.

579
00:15:20.280 --> 00:15:21.200
Now let's say I want

580
00:15:21.200 --> 00:15:22.080
to pass it, right?

581
00:15:22.080 --> 00:15:23.520
I can just say next, right?

582
00:15:23.520 --> 00:15:24.520
I want to just pass it.

583
00:15:24.520 --> 00:15:25.640
So this will also pass.

584
00:15:25.640 --> 00:15:26.360
This will also pass

585
00:15:26.360 --> 00:15:27.280
and everything will work.

586
00:15:27.280 --> 00:15:28.240
So middlewares will work

587
00:15:28.240 --> 00:15:29.040
always in sequence.

588
00:15:29.040 --> 00:15:30.440
See A and B.

589
00:15:30.440 --> 00:15:31.560
So right now, how many

590
00:15:31.560 --> 00:15:32.480
middlewares do you have?

591
00:15:32.480 --> 00:15:33.760
You have three middlewares.

592
00:15:33.760 --> 00:15:35.730
1, 2, 3 and 3.

593
00:15:35.730 --> 00:15:37.570
This middleware does it jobs

594
00:15:37.570 --> 00:15:39.890
and calls the next function

595
00:15:39.890 --> 00:15:41.370
for this particular middleware.

596
00:15:41.370 --> 00:15:42.290
Who is the next?

597
00:15:42.290 --> 00:15:43.490
This is the next.

598
00:15:43.490 --> 00:15:44.890
Now it does its job that

599
00:15:44.890 --> 00:15:46.650
is just a console log and passes

600
00:15:46.650 --> 00:15:47.330
to the next one.

601
00:15:47.330 --> 00:15:48.570
So this one passes it

602
00:15:48.570 --> 00:15:49.370
to the next one.

603
00:15:49.370 --> 00:15:51.009
And that is where your roots come.

604
00:15:51.009 --> 00:15:51.930
Now let me show you one

605
00:15:51.930 --> 00:15:52.730
practical use case.

606
00:15:52.730 --> 00:15:53.250
Okay?

607
00:15:53.250 --> 00:15:55.130
Do you remember that thing that

608
00:15:55.130 --> 00:15:56.490
whenever there was an incoming

609
00:15:56.490 --> 00:15:57.770
request, we used to log it.

610
00:15:57.770 --> 00:15:59.730
Do you remember that particular code?

611
00:15:59.730 --> 00:16:01.050
So what I can do here is I can

612
00:16:01.050 --> 00:16:02.810
say app, dot use I will write

613
00:16:02.810 --> 00:16:04.770
a function, request response.

614
00:16:04.770 --> 00:16:07.270
And next I want to create a log.

615
00:16:07.270 --> 00:16:08.470
Okay, so let's create a log.

616
00:16:08.470 --> 00:16:09.590
So log basically looks

617
00:16:09.590 --> 00:16:10.750
something like this, right?

618
00:16:10.750 --> 00:16:13.150
So you will have date do now.

619
00:16:13.150 --> 00:16:14.590
And then you can just say, hey,

620
00:16:14.590 --> 00:16:15.240
there was a request,

621
00:16:15.790 --> 00:16:19.630
method, request method on which path

622
00:16:19.630 --> 00:16:20.510
the request was coming.

623
00:16:20.510 --> 00:16:22.909
So request path, okay?

624
00:16:22.909 --> 00:16:25.230
And you can even do body and all.

625
00:16:25.230 --> 00:16:26.430
And then what you can do is you

626
00:16:26.430 --> 00:16:28.110
can use the FS module to write.

627
00:16:28.110 --> 00:16:29.790
So const fs.

628
00:16:29.790 --> 00:16:30.590
Okay?

629
00:16:30.590 --> 00:16:33.420
Equals require the FS module

630
00:16:33.420 --> 00:16:35.260
and I should actually say node fs.

631
00:16:35.260 --> 00:16:36.580
So now what I can do, I can just

632
00:16:36.580 --> 00:16:39.660
say fs.append file synchronous,

633
00:16:39.660 --> 00:16:42.940
that is logs txt I want

634
00:16:42.940 --> 00:16:46.860
to put up this log as UTF8

635
00:16:46.860 --> 00:16:48.620
and then call the Next function.

636
00:16:48.620 --> 00:16:49.860
So that means anytime

637
00:16:49.860 --> 00:16:52.300
the request comes first, the JSON

638
00:16:52.300 --> 00:16:53.420
parsing will happen.

639
00:16:53.420 --> 00:16:54.540
Then you are going to create

640
00:16:54.540 --> 00:16:55.740
a log and then

641
00:16:55.740 --> 00:16:58.060
let the appropriate route handler

642
00:16:58.060 --> 00:16:59.420
handle that particular request.

643
00:17:00.020 --> 00:17:00.900
So now let's.

644
00:17:00.900 --> 00:17:01.660
You can see that I

645
00:17:01.660 --> 00:17:02.420
don't have any logs.

646
00:17:02.420 --> 00:17:03.220
Txt file.

647
00:17:03.220 --> 00:17:04.660
Let's get all the books.

648
00:17:04.660 --> 00:17:05.099
Okay.

649
00:17:05.099 --> 00:17:05.980
Oh, there is a logs.

650
00:17:05.980 --> 00:17:06.619
Txt file.

651
00:17:06.619 --> 00:17:06.900
Nice.

652
00:17:06.900 --> 00:17:07.500
What is there?

653
00:17:07.500 --> 00:17:07.940
This thing.

654
00:17:07.940 --> 00:17:08.819
Oh, by the way, I again

655
00:17:08.819 --> 00:17:10.020
forgot to do a slash N.

656
00:17:10.020 --> 00:17:11.140
Okay, so don't forget this.

657
00:17:11.859 --> 00:17:14.060
Now let's try to get a book by one.

658
00:17:14.060 --> 00:17:16.099
Let's try to get a book by four,

659
00:17:16.099 --> 00:17:17.780
which is of course 404.

660
00:17:17.780 --> 00:17:19.460
Let's try to make a new book.

661
00:17:19.460 --> 00:17:21.180
Right, So a new book

662
00:17:21.180 --> 00:17:21.980
has been created.

663
00:17:21.980 --> 00:17:22.819
So now if you see your

664
00:17:22.819 --> 00:17:23.940
logs, can you see that?

665
00:17:23.940 --> 00:17:25.739
Yes, everything is getting loud.

666
00:17:25.739 --> 00:17:26.979
So that is the functionality

667
00:17:26.979 --> 00:17:27.979
of a middleware.

668
00:17:27.979 --> 00:17:29.059
So middlewares.

669
00:17:29.059 --> 00:17:30.459
Okay, now if you read back.

670
00:17:30.459 --> 00:17:31.899
Okay, now if you go back.

671
00:17:31.899 --> 00:17:33.059
Middleware functions are

672
00:17:33.059 --> 00:17:33.979
functions that have access

673
00:17:33.979 --> 00:17:35.819
to request, object, response,

674
00:17:35.819 --> 00:17:37.739
object, and the next function.

675
00:17:37.739 --> 00:17:38.059
Right?

676
00:17:38.059 --> 00:17:38.899
This is what we have.

677
00:17:38.899 --> 00:17:39.419
Understood.

678
00:17:39.419 --> 00:17:40.219
Nice.

679
00:17:40.219 --> 00:17:42.019
In the applications request response

680
00:17:42.019 --> 00:17:43.459
cycle, the next function

681
00:17:43.459 --> 00:17:45.419
in the function in the is a function

682
00:17:45.419 --> 00:17:48.779
in express which when invoked

683
00:17:49.339 --> 00:17:51.099
executes the middleware,

684
00:17:51.099 --> 00:17:52.779
succeeding the current middleware.

685
00:17:52.779 --> 00:17:53.859
So that means it's saying, hey,

686
00:17:53.859 --> 00:17:54.979
every middleware has access

687
00:17:54.979 --> 00:17:57.480
to this next function which when

688
00:17:57.480 --> 00:17:58.840
executed will call the.

689
00:17:58.840 --> 00:18:00.800
Will execute the next middleware in

690
00:18:00.800 --> 00:18:02.680
succeeding the current middleware.

691
00:18:02.680 --> 00:18:04.360
What middlewares can do, it can

692
00:18:04.360 --> 00:18:06.280
execute any code, it can make

693
00:18:06.280 --> 00:18:07.680
changes to the request response

694
00:18:07.680 --> 00:18:09.320
objects, it can end the request

695
00:18:09.320 --> 00:18:10.480
response cycle and it can call

696
00:18:10.480 --> 00:18:11.560
the next middleware in the

697
00:18:11.560 --> 00:18:12.120
stack.

698
00:18:12.120 --> 00:18:12.960
So this is how you can

699
00:18:12.960 --> 00:18:14.570
create a middleware app.

700
00:18:14.570 --> 00:18:15.560
Like it can.

701
00:18:15.560 --> 00:18:16.640
It's a get app.

702
00:18:16.640 --> 00:18:16.920
Use.

703
00:18:16.920 --> 00:18:17.880
So this is also actually

704
00:18:17.880 --> 00:18:18.760
a middleware function.

705
00:18:18.760 --> 00:18:20.360
So yeah, you can just ignore it.

706
00:18:20.360 --> 00:18:22.040
So let me just show you.

707
00:18:22.040 --> 00:18:23.480
So see what they're doing.

708
00:18:23.480 --> 00:18:24.440
They are creating a logger.

709
00:18:24.440 --> 00:18:25.280
Do you see that?

710
00:18:25.280 --> 00:18:26.680
They have created a logger.

711
00:18:26.680 --> 00:18:27.640
This does something

712
00:18:27.640 --> 00:18:29.240
and calls the next function.

713
00:18:29.800 --> 00:18:31.000
Then you can just say app,

714
00:18:31.000 --> 00:18:32.040
use my logger.

715
00:18:32.040 --> 00:18:33.400
So what is happening is

716
00:18:33.400 --> 00:18:35.480
on every request, on every request,

717
00:18:35.480 --> 00:18:36.840
this middleware is going to run.

718
00:18:36.840 --> 00:18:37.680
That is this one.

719
00:18:37.680 --> 00:18:38.960
You are going to do a console

720
00:18:38.960 --> 00:18:40.320
log and call the next one.

721
00:18:40.320 --> 00:18:41.640
So this is your middleware.

722
00:18:41.640 --> 00:18:43.240
Okay, now let me show you

723
00:18:43.240 --> 00:18:44.600
some practical examples

724
00:18:44.600 --> 00:18:45.720
where we use the middleware.

725
00:18:45.720 --> 00:18:46.280
Okay?

726
00:18:46.280 --> 00:18:48.680
So moving further, let's say

727
00:18:48.680 --> 00:18:50.530
so you will have a request.

728
00:18:50.530 --> 00:18:50.730
Okay?

729
00:18:50.730 --> 00:18:51.690
So users are going to make

730
00:18:51.690 --> 00:18:53.210
a request on some server.

731
00:18:53.210 --> 00:18:54.410
So what we can do is when

732
00:18:54.410 --> 00:18:55.690
the request will come, we

733
00:18:55.690 --> 00:18:57.170
will have a middleware.

734
00:18:57.170 --> 00:18:58.730
What this middleware will do.

735
00:18:58.730 --> 00:18:59.970
Okay, what this middleware is going

736
00:18:59.970 --> 00:19:01.130
to do is this is going to check

737
00:19:01.130 --> 00:19:02.610
for the authentication check.

738
00:19:02.610 --> 00:19:04.130
Authentication authentication

739
00:19:04.130 --> 00:19:05.410
basically means that if user

740
00:19:05.410 --> 00:19:07.130
is logged in or not, we can

741
00:19:07.130 --> 00:19:08.810
write a logic that if the user

742
00:19:08.810 --> 00:19:10.690
is not logged in, right?

743
00:19:10.690 --> 00:19:13.090
If the user is not logged in.

744
00:19:13.090 --> 00:19:16.790
So I'll just say not logged in.

745
00:19:16.790 --> 00:19:17.630
So we are just going

746
00:19:17.630 --> 00:19:18.830
to say forbidden.

747
00:19:18.830 --> 00:19:20.430
So we are going to say, hey, you

748
00:19:20.430 --> 00:19:21.990
have to be logged in, right?

749
00:19:21.990 --> 00:19:23.150
So forbidden, please

750
00:19:23.150 --> 00:19:24.550
come back logged in.

751
00:19:24.550 --> 00:19:26.470
But if the user is logged in,

752
00:19:26.470 --> 00:19:28.070
we can forward the request

753
00:19:28.070 --> 00:19:30.310
to the appropriate route handler.

754
00:19:30.310 --> 00:19:32.109
So this is one example where you

755
00:19:32.109 --> 00:19:33.550
want to use a middleware, okay.

756
00:19:33.550 --> 00:19:35.190
To protect your APIs.

757
00:19:35.190 --> 00:19:36.590
Similarly, you can have one

758
00:19:36.590 --> 00:19:37.830
more middleware in this tag

759
00:19:37.830 --> 00:19:39.030
that is for authorization.

760
00:19:39.590 --> 00:19:41.110
So that means let's say the user

761
00:19:41.110 --> 00:19:42.720
is logged in, but now you

762
00:19:42.720 --> 00:19:43.960
want to check if it is, if

763
00:19:43.960 --> 00:19:45.400
he's authorized to do that.

764
00:19:45.400 --> 00:19:47.680
For example, let's say user is

765
00:19:47.680 --> 00:19:49.960
logged in, but he's trying

766
00:19:49.960 --> 00:19:51.800
to access something which is only

767
00:19:51.800 --> 00:19:53.560
restricted to the admins.

768
00:19:53.560 --> 00:19:55.040
So what we can do is you

769
00:19:55.040 --> 00:19:56.360
are logged in, that's fine, go

770
00:19:56.360 --> 00:19:57.080
to the authority.

771
00:19:57.080 --> 00:19:59.160
Middleware authority will say, hey,

772
00:19:59.160 --> 00:20:01.240
you are not authorized to do this.

773
00:20:01.240 --> 00:20:02.840
If you are not authorized, hey,

774
00:20:02.840 --> 00:20:04.200
just return back the response.

775
00:20:04.200 --> 00:20:06.920
Okay, you can just say you are

776
00:20:06.920 --> 00:20:08.440
not authorized to do this, you

777
00:20:08.440 --> 00:20:09.440
are logged in, that's fine,

778
00:20:09.440 --> 00:20:10.560
but you are not authorized.

779
00:20:10.560 --> 00:20:12.320
Okay, but if you are authorized,

780
00:20:12.320 --> 00:20:13.480
if you are authorized, then

781
00:20:13.480 --> 00:20:14.440
only I, will pass it

782
00:20:14.440 --> 00:20:16.640
to the appropriate route handler.

783
00:20:16.640 --> 00:20:18.200
So this is how in reality

784
00:20:18.200 --> 00:20:19.480
we can use middlewares.

785
00:20:19.480 --> 00:20:19.960
Got it.

786
00:20:19.960 --> 00:20:21.640
So middlewares ensure safety.

787
00:20:21.640 --> 00:20:23.320
The code is good, the code

788
00:20:23.320 --> 00:20:24.400
quality remains good.

789
00:20:24.400 --> 00:20:25.760
And you can see that how

790
00:20:25.760 --> 00:20:26.960
the middlewares are helpful.

791
00:20:26.960 --> 00:20:28.920
Okay, so that was all

792
00:20:28.920 --> 00:20:30.200
about the middlewares.

793
00:20:30.200 --> 00:20:32.040
So now moving further, we are going

794
00:20:32.040 --> 00:20:33.320
to be using middlewares.

795
00:20:33.320 --> 00:20:34.640
And one thing I really, really,

796
00:20:34.640 --> 00:20:35.560
really recommend you is

797
00:20:35.560 --> 00:20:37.540
to go through this documentation.

798
00:20:37.540 --> 00:20:38.060
So this is nothing.

799
00:20:38.060 --> 00:20:39.180
It's basically if you go into

800
00:20:39.180 --> 00:20:40.940
the guide and you go in writing

801
00:20:40.940 --> 00:20:42.500
a middleware, using a middleware.

802
00:20:42.500 --> 00:20:43.620
So you can just click on here

803
00:20:43.620 --> 00:20:45.620
and you can just understand

804
00:20:45.620 --> 00:20:46.940
that what middlewares are

805
00:20:46.940 --> 00:20:48.500
and why they are so useful.

806
00:20:48.500 --> 00:20:49.060
Okay.

807
00:20:49.060 --> 00:20:50.300
Like you can validate cookies

808
00:20:50.300 --> 00:20:51.900
in the middleware, you can do

809
00:20:51.900 --> 00:20:53.140
authentication stuff a lot.

810
00:20:53.140 --> 00:20:54.700
So don't worry, we will do that.

811
00:20:54.700 --> 00:20:55.220
Okay.

812
00:20:55.780 --> 00:20:57.580
So I hope you have understood

813
00:20:57.580 --> 00:20:59.180
the concept of middlewares in

814
00:20:59.180 --> 00:21:01.140
express that how middlewares work.
