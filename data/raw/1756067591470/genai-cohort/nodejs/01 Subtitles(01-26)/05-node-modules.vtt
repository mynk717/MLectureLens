WEBVTT

1
00:00:00.320 --> 00:00:02.400
So hey guys, welcome to another

2
00:00:02.400 --> 00:00:04.360
exciting section on Node

3
00:00:04.360 --> 00:00:05.840
js series in which we are going

4
00:00:05.840 --> 00:00:07.520
to cover about modules.

5
00:00:07.520 --> 00:00:09.120
So till now all the videos

6
00:00:09.120 --> 00:00:10.160
that we have seen was

7
00:00:10.160 --> 00:00:12.040
an introduction to Node js.

8
00:00:12.040 --> 00:00:13.880
Yes, three to four videos just

9
00:00:13.880 --> 00:00:14.800
for an introduction.

10
00:00:14.800 --> 00:00:16.760
Because I want to cover each

11
00:00:16.760 --> 00:00:18.560
and everything in depth.

12
00:00:18.560 --> 00:00:19.840
So in this particular video,

13
00:00:19.840 --> 00:00:21.280
let's see what are, modules.

14
00:00:21.280 --> 00:00:22.680
So this is going to be a chapter

15
00:00:22.680 --> 00:00:24.280
one and trust me, this is

16
00:00:24.280 --> 00:00:25.440
really, really, really easy.

17
00:00:25.440 --> 00:00:26.360
So with that, let's start

18
00:00:26.360 --> 00:00:26.960
with the video.

19
00:00:27.760 --> 00:00:29.360
So what are modules?

20
00:00:29.360 --> 00:00:31.040
Okay, so what are modules?

21
00:00:31.040 --> 00:00:32.520
So in programming world, when

22
00:00:32.520 --> 00:00:34.400
you talk about modules, modules

23
00:00:34.400 --> 00:00:36.360
is basically a code, a collection

24
00:00:36.360 --> 00:00:37.720
of code that provides

25
00:00:37.720 --> 00:00:38.880
your functionality, right?

26
00:00:38.880 --> 00:00:40.320
This can be anything.

27
00:00:40.320 --> 00:00:43.280
Now in Node js we have three

28
00:00:43.280 --> 00:00:44.440
types of modules.

29
00:00:44.440 --> 00:00:46.160
Number one, we have

30
00:00:46.160 --> 00:00:47.600
like built in modules.

31
00:00:47.600 --> 00:00:49.280
Okay, we have built in modules.

32
00:00:49.280 --> 00:00:49.960
So what do I mean

33
00:00:49.960 --> 00:00:51.040
by built in modules?

34
00:00:51.040 --> 00:00:52.800
That basically means that Node

35
00:00:52.800 --> 00:00:54.650
js gives you out of the box.

36
00:00:54.650 --> 00:00:57.210
So there are a lot of modules which

37
00:00:57.210 --> 00:00:59.610
Node js gives you out of the box.

38
00:00:59.610 --> 00:01:02.490
Then we have, third party, right?

39
00:01:02.490 --> 00:01:04.170
We have third party

40
00:01:04.170 --> 00:01:06.170
which we can basically download

41
00:01:06.170 --> 00:01:07.290
from the Internet.

42
00:01:07.290 --> 00:01:08.490
So these are also known as

43
00:01:08.490 --> 00:01:10.010
external modules, okay?

44
00:01:10.010 --> 00:01:11.130
These are also known as external

45
00:01:11.130 --> 00:01:13.210
modules and we can install them

46
00:01:13.210 --> 00:01:15.370
using npm install command.

47
00:01:15.370 --> 00:01:16.330
So you remember, right?

48
00:01:16.330 --> 00:01:17.290
npm install.

49
00:01:17.290 --> 00:01:19.130
So we can install third party modules

50
00:01:19.130 --> 00:01:20.610
like you know, from other developers

51
00:01:20.610 --> 00:01:22.170
who have published their modules.

52
00:01:22.170 --> 00:01:23.570
And then third we have

53
00:01:23.570 --> 00:01:25.590
our custom modules.

54
00:01:25.590 --> 00:01:27.150
So custom modules or I can

55
00:01:27.150 --> 00:01:28.830
just say my own modules.

56
00:01:28.830 --> 00:01:30.630
Okay, so these are modules

57
00:01:30.630 --> 00:01:32.310
which I can create for my own

58
00:01:32.310 --> 00:01:34.150
project and I can use it also

59
00:01:34.150 --> 00:01:35.670
known as internal modules.

60
00:01:35.670 --> 00:01:36.510
Custom modules.

61
00:01:36.510 --> 00:01:37.670
My own modules.

62
00:01:37.670 --> 00:01:39.310
So these are three kinds of modules

63
00:01:39.310 --> 00:01:41.510
that are available in the Node js.

64
00:01:41.510 --> 00:01:42.230
Okay?

65
00:01:42.230 --> 00:01:44.950
So first let's try to cover a few

66
00:01:44.950 --> 00:01:47.110
built in modules and then we will

67
00:01:47.110 --> 00:01:48.790
move to the third party and custom.

68
00:01:48.790 --> 00:01:50.650
And these are super duper simple.

69
00:01:50.650 --> 00:01:53.650
Okay, so first module that I want

70
00:01:53.650 --> 00:01:56.650
to cover is a file system module.

71
00:01:56.650 --> 00:01:58.490
Now tell me one thing.

72
00:01:58.490 --> 00:02:00.250
If you are from a JavaScript

73
00:02:00.250 --> 00:02:04.170
background, can you access the file

74
00:02:04.170 --> 00:02:06.970
system in just pure JavaScript?

75
00:02:06.970 --> 00:02:08.810
The JavaScript that you run

76
00:02:08.810 --> 00:02:10.770
inside the browser, can you

77
00:02:10.770 --> 00:02:12.090
access the file system?

78
00:02:12.090 --> 00:02:14.690
No, but because Node js is

79
00:02:14.690 --> 00:02:16.130
a JavaScript which is built

80
00:02:16.130 --> 00:02:18.490
into the C program, they have

81
00:02:18.490 --> 00:02:20.770
given you a whole FS module.

82
00:02:20.770 --> 00:02:22.290
So this, this is known as an FS

83
00:02:22.290 --> 00:02:24.010
module file system module,

84
00:02:24.010 --> 00:02:26.090
which helps you to work with

85
00:02:26.090 --> 00:02:28.130
the file system on your machine.

86
00:02:28.130 --> 00:02:28.970
So let me show you how

87
00:02:28.970 --> 00:02:29.770
you have to use it.

88
00:02:29.770 --> 00:02:31.850
Okay, so what I'll do is I'll just do

89
00:02:31.850 --> 00:02:33.770
a notes or Txt file first of all.

90
00:02:33.770 --> 00:02:35.330
And what I'm going to do is I'm going

91
00:02:35.330 --> 00:02:37.330
to move all this stuff for

92
00:02:37.330 --> 00:02:39.050
your reference to this file, okay?

93
00:02:39.050 --> 00:02:40.730
So that we can have a clean code.

94
00:02:40.730 --> 00:02:42.490
So what you can do is, first

95
00:02:42.490 --> 00:02:44.850
of all we have to import, we have

96
00:02:44.850 --> 00:02:47.720
to require the FS module.

97
00:02:47.720 --> 00:02:49.200
So how you do that is you have

98
00:02:49.200 --> 00:02:50.920
a require function, okay?

99
00:02:50.920 --> 00:02:52.360
You have a require function.

100
00:02:52.360 --> 00:02:54.400
And in this require function you

101
00:02:54.400 --> 00:02:57.240
can basically pass the module name.

102
00:02:57.240 --> 00:02:58.480
For example, I want

103
00:02:58.480 --> 00:03:00.520
to load the FS module.

104
00:03:00.520 --> 00:03:02.320
So what this require function will do

105
00:03:02.320 --> 00:03:04.600
is this will basically load the FS

106
00:03:04.600 --> 00:03:06.960
module for me and then I can assign

107
00:03:06.960 --> 00:03:08.920
it to a variable, let's say fs.

108
00:03:08.920 --> 00:03:10.680
So this require function is

109
00:03:10.680 --> 00:03:12.520
only and only available to you

110
00:03:12.520 --> 00:03:13.800
in the node js environment.

111
00:03:13.800 --> 00:03:16.510
So, so require the name of the module

112
00:03:16.510 --> 00:03:18.590
and then you have this fs, right?

113
00:03:19.230 --> 00:03:20.510
So now what we can do,

114
00:03:20.510 --> 00:03:21.710
we can basically try

115
00:03:21.710 --> 00:03:23.430
to console log this fs.

116
00:03:23.430 --> 00:03:25.310
Let's see, what do we get in the fs?

117
00:03:25.310 --> 00:03:26.710
So for the terminal, let me

118
00:03:26.710 --> 00:03:28.190
open the integrated terminal.

119
00:03:28.190 --> 00:03:29.869
So this is my integrated terminal.

120
00:03:29.869 --> 00:03:31.070
How can I open it?

121
00:03:31.070 --> 00:03:32.150
So either you can go into

122
00:03:32.150 --> 00:03:33.310
the terminal and you can click

123
00:03:33.310 --> 00:03:34.510
on the new terminal,

124
00:03:34.510 --> 00:03:37.470
or the shortcut for this is Ctrl

125
00:03:37.470 --> 00:03:39.310
control plus this till day.

126
00:03:39.310 --> 00:03:39.560
Okay?

127
00:03:39.560 --> 00:03:41.040
Okay, so this is the shortcut.

128
00:03:41.040 --> 00:03:42.440
So I can just say control this

129
00:03:42.440 --> 00:03:45.720
and then node and index and enter.

130
00:03:45.720 --> 00:03:47.200
So you can see that I am

131
00:03:47.200 --> 00:03:48.800
getting a lot of things, right?

132
00:03:48.800 --> 00:03:49.560
You can see I'm getting

133
00:03:49.560 --> 00:03:50.440
a lot of things.

134
00:03:50.440 --> 00:03:52.160
So let's try to understand that.

135
00:03:52.160 --> 00:03:53.320
What is this fs?

136
00:03:53.320 --> 00:03:55.480
So this FS is a, is an object

137
00:03:56.120 --> 00:03:57.520
in which you have functions like

138
00:03:57.520 --> 00:03:58.800
you have a function for appending

139
00:03:58.800 --> 00:04:00.560
file append file sync, you

140
00:04:00.560 --> 00:04:02.200
have access, you have access.

141
00:04:02.200 --> 00:04:03.800
Sync, you have count.

142
00:04:03.800 --> 00:04:06.360
You have count Sync, you have chmod.

143
00:04:06.360 --> 00:04:07.800
So you can see that these are all

144
00:04:07.800 --> 00:04:09.560
the functions that are exposed

145
00:04:09.560 --> 00:04:11.960
which helps you to manage files.

146
00:04:11.960 --> 00:04:13.480
Let's say I want to read a file.

147
00:04:13.480 --> 00:04:14.720
Okay, let's say I want

148
00:04:14.720 --> 00:04:15.680
to read this file.

149
00:04:15.680 --> 00:04:16.800
So what I can do is I can

150
00:04:16.800 --> 00:04:20.519
just say fs.read file sync.

151
00:04:20.519 --> 00:04:22.120
Now I'll tell you what is this thing.

152
00:04:22.120 --> 00:04:23.880
So as of now you can just ignore it.

153
00:04:23.880 --> 00:04:25.480
And here let's pass the name

154
00:04:25.480 --> 00:04:27.560
of the file that is notes or txt.

155
00:04:27.560 --> 00:04:29.640
Okay, so I'm just saying notes or txt

156
00:04:29.640 --> 00:04:30.560
and then you have

157
00:04:30.560 --> 00:04:33.210
to specify the binary encoding.

158
00:04:33.210 --> 00:04:34.050
So I want to read it

159
00:04:34.050 --> 00:04:35.850
as a UTF8 encoding.

160
00:04:35.850 --> 00:04:37.210
What this is going to

161
00:04:37.210 --> 00:04:38.530
do is it is going to give you

162
00:04:38.530 --> 00:04:40.210
the content of the file.

163
00:04:40.210 --> 00:04:40.890
Okay?

164
00:04:40.890 --> 00:04:42.050
If everything goes right, we

165
00:04:42.050 --> 00:04:43.090
should have the contents.

166
00:04:43.090 --> 00:04:44.570
So let's just do a console.log

167
00:04:44.570 --> 00:04:46.170
on the content and let's

168
00:04:46.170 --> 00:04:46.970
see what we are getting.

169
00:04:46.970 --> 00:04:47.930
So you can see that we

170
00:04:47.930 --> 00:04:48.970
are getting this thing.

171
00:04:48.970 --> 00:04:50.370
So these are all the contents

172
00:04:50.370 --> 00:04:51.450
of this file, right?

173
00:04:51.450 --> 00:04:52.490
Let me modify something.

174
00:04:52.490 --> 00:04:53.170
Let me just remove

175
00:04:53.170 --> 00:04:53.930
all these comments.

176
00:04:53.930 --> 00:04:55.690
Okay, so if I just remove

177
00:04:55.690 --> 00:04:57.850
all these comments and.

178
00:04:57.850 --> 00:04:58.790
Yeah, so.

179
00:04:58.790 --> 00:04:59.910
So let's see if I now

180
00:04:59.910 --> 00:05:00.870
rerun the program.

181
00:05:00.870 --> 00:05:02.510
You can see that whatever I am

182
00:05:02.510 --> 00:05:04.950
writing in this file, I am writing.

183
00:05:04.950 --> 00:05:06.190
So that is getting

184
00:05:06.190 --> 00:05:08.470
console logged, right?

185
00:05:08.470 --> 00:05:10.150
So what we are doing here is

186
00:05:10.150 --> 00:05:12.310
first of all I am requiring,

187
00:05:12.310 --> 00:05:14.710
I am requiring this FS module.

188
00:05:14.710 --> 00:05:16.150
All the code of this FS

189
00:05:16.150 --> 00:05:17.510
module is being transferred

190
00:05:17.510 --> 00:05:18.950
to this FS variable.

191
00:05:18.950 --> 00:05:20.430
Feel free to call this variable

192
00:05:20.430 --> 00:05:22.790
anything and then I'm calling a

193
00:05:22.790 --> 00:05:24.670
function that is read file sync,

194
00:05:24.670 --> 00:05:26.310
give the path of the file that is

195
00:05:26.310 --> 00:05:28.950
notes Txt in which encoding you

196
00:05:28.950 --> 00:05:29.550
want to read.

197
00:05:29.550 --> 00:05:30.990
And this returns the content

198
00:05:30.990 --> 00:05:31.750
of the file.

199
00:05:31.750 --> 00:05:33.110
And then finally I'm just doing

200
00:05:33.110 --> 00:05:34.830
a console.log of the content

201
00:05:34.830 --> 00:05:36.270
and this is what I'm getting.

202
00:05:36.270 --> 00:05:37.910
I'm doing a command K or

203
00:05:37.910 --> 00:05:38.950
you can even do a clear

204
00:05:38.950 --> 00:05:40.230
to clear how the terminal.

205
00:05:40.230 --> 00:05:42.110
So yeah, that's your wish.

206
00:05:42.110 --> 00:05:44.110
So this is how you can use.

207
00:05:44.110 --> 00:05:45.870
This is a built in module, right?

208
00:05:45.870 --> 00:05:48.870
This is a built in module in the

209
00:05:48.870 --> 00:05:50.950
node js that is like given to you

210
00:05:50.950 --> 00:05:53.110
out of the box and we can use it

211
00:05:53.110 --> 00:05:55.270
now Interestingly, the

212
00:05:55.270 --> 00:05:56.990
documentation of node js is very

213
00:05:56.990 --> 00:05:57.670
interesting.

214
00:05:57.670 --> 00:05:58.630
Let me show you.

215
00:05:58.630 --> 00:06:01.110
So if you go to node js.org and you

216
00:06:01.110 --> 00:06:02.550
go into the documentation,

217
00:06:02.550 --> 00:06:04.470
the documentation is well managed.

218
00:06:04.470 --> 00:06:06.270
So let's search for FS here.

219
00:06:06.270 --> 00:06:09.110
Okay, so file system.

220
00:06:09.110 --> 00:06:11.030
You can see we have this file system.

221
00:06:11.030 --> 00:06:12.790
So if you click on this file system.

222
00:06:12.790 --> 00:06:14.070
So these are all the functions

223
00:06:14.070 --> 00:06:15.030
that are available.

224
00:06:15.030 --> 00:06:16.070
And if I just keep

225
00:06:16.070 --> 00:06:17.510
on scrolling just one second.

226
00:06:18.810 --> 00:06:19.650
Yeah, so you can see that

227
00:06:19.650 --> 00:06:20.810
what is this file system?

228
00:06:20.810 --> 00:06:23.490
This is basically a module that

229
00:06:23.490 --> 00:06:24.690
enables interacting with

230
00:06:24.690 --> 00:06:26.170
the file system in a way

231
00:06:26.170 --> 00:06:28.490
model standard POSIX functions.

232
00:06:28.490 --> 00:06:29.370
So you can see that you

233
00:06:29.370 --> 00:06:30.690
can do a require and you

234
00:06:30.690 --> 00:06:31.890
can require the fs.

235
00:06:31.890 --> 00:06:33.210
Now I'll tell you that why they are

236
00:06:33.210 --> 00:06:34.770
putting this node thing as of now.

237
00:06:34.770 --> 00:06:36.490
Please feel free to ignore this.

238
00:06:36.490 --> 00:06:38.730
So you can do a require and name

239
00:06:38.730 --> 00:06:40.690
of the module that is FS and then

240
00:06:40.690 --> 00:06:41.810
you can basically use it.

241
00:06:41.810 --> 00:06:42.850
So all the things are

242
00:06:42.850 --> 00:06:43.690
given here, right?

243
00:06:44.360 --> 00:06:45.760
So let me try to search

244
00:06:45.760 --> 00:06:46.640
for this function.

245
00:06:46.640 --> 00:06:48.480
Okay, so you can see that

246
00:06:48.480 --> 00:06:49.720
this is how we can use it.

247
00:06:49.720 --> 00:06:52.120
So you can just say, you know,

248
00:06:52.120 --> 00:06:53.640
you can directly import this read

249
00:06:53.640 --> 00:06:55.200
file thing and you can do this.

250
00:06:55.200 --> 00:06:56.120
So this is actually they

251
00:06:56.120 --> 00:06:57.960
are using the ESM modules.

252
00:06:57.960 --> 00:06:59.160
So I'll tell you about

253
00:06:59.160 --> 00:06:59.840
that, don't worry.

254
00:06:59.840 --> 00:07:01.920
Okay, so all the documentation

255
00:07:01.920 --> 00:07:02.600
is given here.

256
00:07:02.600 --> 00:07:03.320
Okay?

257
00:07:03.320 --> 00:07:05.000
So this is what we have to follow.

258
00:07:05.640 --> 00:07:07.920
Now here is the interesting part.

259
00:07:07.920 --> 00:07:08.440
Okay?

260
00:07:08.440 --> 00:07:10.130
So as of now, let's not go

261
00:07:10.130 --> 00:07:11.770
with the documentation because

262
00:07:11.770 --> 00:07:13.850
there are few things that is going

263
00:07:13.850 --> 00:07:15.770
on crazy here, okay?

264
00:07:16.490 --> 00:07:19.130
So my motive in this particular

265
00:07:19.130 --> 00:07:21.010
video is to explain

266
00:07:21.010 --> 00:07:22.330
you this require function.

267
00:07:22.330 --> 00:07:23.850
So let me just copy this function

268
00:07:23.850 --> 00:07:25.689
and come into my whiteboard and let

269
00:07:25.689 --> 00:07:27.490
me just move it to dark mode so

270
00:07:27.490 --> 00:07:29.370
that it doesn't strain your eyes.

271
00:07:29.370 --> 00:07:30.650
So let's say that this is

272
00:07:30.650 --> 00:07:32.330
the code that you have, right?

273
00:07:32.330 --> 00:07:34.170
This is your source code, okay?

274
00:07:34.170 --> 00:07:35.370
And let me change the font.

275
00:07:36.260 --> 00:07:39.540
Now when you run this code

276
00:07:39.540 --> 00:07:41.060
using this command, right?

277
00:07:41.060 --> 00:07:42.940
You, you do node and then you do

278
00:07:42.940 --> 00:07:45.260
like script js or index js, okay?

279
00:07:45.260 --> 00:07:46.100
Not node.

280
00:07:46.100 --> 00:07:47.380
I, mean node, right?

281
00:07:48.020 --> 00:07:48.980
So what happens?

282
00:07:48.980 --> 00:07:50.740
What node does?

283
00:07:50.740 --> 00:07:53.420
Node takes your source code, okay?

284
00:07:53.420 --> 00:07:54.620
So this is your source file.

285
00:07:54.620 --> 00:07:56.020
So this particular thing is

286
00:07:56.020 --> 00:07:57.940
basically your index file.

287
00:07:57.940 --> 00:07:58.780
Or I can say this is

288
00:07:58.780 --> 00:08:00.340
your source file.

289
00:08:00.340 --> 00:08:03.070
Now, when you pass your source file,

290
00:08:03.070 --> 00:08:05.630
node js will read the contents

291
00:08:05.630 --> 00:08:07.550
of your source file, right?

292
00:08:07.550 --> 00:08:08.870
So node js will come and it

293
00:08:08.870 --> 00:08:09.830
will see, oh, these are

294
00:08:09.830 --> 00:08:11.390
the contents of your file.

295
00:08:11.390 --> 00:08:13.710
Then what this node js does

296
00:08:13.710 --> 00:08:15.430
internally, it has

297
00:08:15.430 --> 00:08:17.630
a wrapper function, okay?

298
00:08:17.630 --> 00:08:19.550
It has a wrapper function.

299
00:08:19.550 --> 00:08:21.630
In this wrapper function,

300
00:08:21.630 --> 00:08:23.790
it has a few parameters

301
00:08:23.790 --> 00:08:25.550
that it exposes to you.

302
00:08:25.550 --> 00:08:26.790
So let me just search here.

303
00:08:26.790 --> 00:08:30.380
That, node is wrapper function, okay?

304
00:08:30.380 --> 00:08:32.140
Node js, wrapper function

305
00:08:32.140 --> 00:08:33.380
and module wrapper.

306
00:08:33.380 --> 00:08:34.179
Basically, it is known

307
00:08:34.179 --> 00:08:35.419
as the module wrapper.

308
00:08:35.419 --> 00:08:36.260
So let me see if I

309
00:08:36.260 --> 00:08:36.980
can get the example.

310
00:08:36.980 --> 00:08:38.299
Yeah, here it is.

311
00:08:38.299 --> 00:08:42.100
So it gives you few variables,

312
00:08:42.100 --> 00:08:44.220
like for example, exports.

313
00:08:44.220 --> 00:08:46.460
It gives, you require.

314
00:08:46.460 --> 00:08:48.300
Okay, it gives, you require.

315
00:08:48.300 --> 00:08:50.380
Just one second, let me just type in.

316
00:08:50.380 --> 00:08:53.300
And it gives you a, module, right?

317
00:08:53.300 --> 00:08:54.700
It gives you the module.

318
00:08:54.700 --> 00:08:56.940
So let's have module and it gives you

319
00:08:56.940 --> 00:08:58.335
underscore, underscore file name.

320
00:08:58.335 --> 00:09:00.840
So, so, underscore, underscore

321
00:09:00.840 --> 00:09:02.680
file name and comma,

322
00:09:02.680 --> 00:09:04.600
underscore, underscore d name.

323
00:09:04.600 --> 00:09:05.560
So this is what.

324
00:09:05.560 --> 00:09:07.240
This is basically a wrapper

325
00:09:07.240 --> 00:09:08.400
function that is internally

326
00:09:08.400 --> 00:09:10.440
made by the node js.

327
00:09:10.440 --> 00:09:12.920
Then all of your source code

328
00:09:12.920 --> 00:09:14.439
whatsoever, source code you have

329
00:09:14.439 --> 00:09:16.920
written is basically injected

330
00:09:16.920 --> 00:09:18.160
in this wrapper function.

331
00:09:18.160 --> 00:09:19.800
So your source code is basically

332
00:09:19.800 --> 00:09:20.600
injected

333
00:09:20.600 --> 00:09:22.320
in this wrapper function, okay?

334
00:09:22.320 --> 00:09:23.000
Like this.

335
00:09:23.000 --> 00:09:24.600
So what if I just change the color

336
00:09:24.600 --> 00:09:26.080
so that you have more clarity.

337
00:09:26.080 --> 00:09:27.080
So here is your wrapper

338
00:09:27.080 --> 00:09:27.840
function, right?

339
00:09:28.720 --> 00:09:31.480
And then, okay, and then this is

340
00:09:31.480 --> 00:09:33.120
your source code that node J

341
00:09:33.120 --> 00:09:35.200
has copied from your command.

342
00:09:35.200 --> 00:09:37.440
Then node js will execute the code by

343
00:09:37.440 --> 00:09:39.080
just calling the wrapper function.

344
00:09:39.080 --> 00:09:40.800
So this is basically the entry point.

345
00:09:41.440 --> 00:09:43.880
Now what happens is your Source

346
00:09:43.880 --> 00:09:45.520
code is basically running

347
00:09:45.520 --> 00:09:47.280
inside a wrapper function.

348
00:09:47.280 --> 00:09:49.280
And this wrapper function gives you

349
00:09:49.280 --> 00:09:51.200
access to some Features like

350
00:09:51.200 --> 00:09:54.510
exports, require module, underscore,

351
00:09:54.510 --> 00:09:56.230
underscore file name and turning.

352
00:09:56.230 --> 00:09:58.230
That is the reason that I'm able

353
00:09:58.230 --> 00:09:59.590
to use this require function.

354
00:09:59.590 --> 00:10:00.070
Do you see this

355
00:10:00.070 --> 00:10:00.910
require function here?

356
00:10:00.910 --> 00:10:02.470
So let me grab a pen.

357
00:10:02.470 --> 00:10:04.150
So if you see this require

358
00:10:04.150 --> 00:10:05.910
function, this is basically I'm able

359
00:10:05.910 --> 00:10:07.270
to use because this require

360
00:10:07.270 --> 00:10:09.270
function is in the scope.

361
00:10:09.270 --> 00:10:11.990
What if I go into my browser because

362
00:10:11.990 --> 00:10:13.470
again this is also JavaScript

363
00:10:13.470 --> 00:10:15.350
and I try to say const FS

364
00:10:15.350 --> 00:10:19.030
equals to require and I say fs,

365
00:10:19.030 --> 00:10:20.310
you will see I get an error.

366
00:10:20.310 --> 00:10:21.870
It says that hey, the require

367
00:10:21.870 --> 00:10:23.390
function is not defined, right?

368
00:10:23.390 --> 00:10:24.270
I'm not able to call

369
00:10:24.270 --> 00:10:25.430
this required function.

370
00:10:25.430 --> 00:10:27.190
But this code is working here.

371
00:10:27.190 --> 00:10:27.910
Why?

372
00:10:27.910 --> 00:10:29.670
Because internally you know that

373
00:10:29.670 --> 00:10:30.790
this whole code

374
00:10:30.790 --> 00:10:32.910
goes inside a wrapper function.

375
00:10:32.910 --> 00:10:34.350
Okay, goes inside a wrapper

376
00:10:34.350 --> 00:10:36.110
function and basically it

377
00:10:36.110 --> 00:10:36.830
looks something like this.

378
00:10:36.830 --> 00:10:38.270
So this wrapper function has this

379
00:10:38.270 --> 00:10:40.230
require thing and this require

380
00:10:40.230 --> 00:10:42.350
function is internally made

381
00:10:42.350 --> 00:10:44.550
and maintained by the node js team.

382
00:10:45.110 --> 00:10:46.710
So now you understand that

383
00:10:46.710 --> 00:10:48.550
from where this require function

384
00:10:48.550 --> 00:10:49.670
is coming into the scope

385
00:10:49.670 --> 00:10:51.190
that is from this variable.

386
00:10:51.190 --> 00:10:52.990
Proceeding further, we will also

387
00:10:52.990 --> 00:10:54.030
take a look that what is this

388
00:10:54.030 --> 00:10:55.190
module, what is this export,

389
00:10:55.190 --> 00:10:56.230
what is this underscore, underscore

390
00:10:56.230 --> 00:10:57.630
file name and all that?

391
00:10:57.630 --> 00:10:58.470
Don't worry about that.

392
00:10:58.470 --> 00:11:00.510
Okay, now let's understand that what

393
00:11:00.510 --> 00:11:01.870
this require function works like

394
00:11:01.870 --> 00:11:03.190
how this require function works.

395
00:11:03.190 --> 00:11:06.330
Okay, so it's basically

396
00:11:06.330 --> 00:11:07.190
somewhat like this.

397
00:11:07.910 --> 00:11:09.430
So node js gives you

398
00:11:09.430 --> 00:11:10.510
a require function, right?

399
00:11:10.510 --> 00:11:12.070
So this is your require function.

400
00:11:12.070 --> 00:11:14.030
This require function takes

401
00:11:14.030 --> 00:11:16.250
a string kind of the module

402
00:11:16.250 --> 00:11:17.490
name that you want to load.

403
00:11:17.490 --> 00:11:19.130
So this is a module name

404
00:11:19.130 --> 00:11:20.330
that you want to load.

405
00:11:20.330 --> 00:11:22.770
Okay, how it basically tries

406
00:11:22.770 --> 00:11:24.090
to load this module.

407
00:11:24.090 --> 00:11:27.090
Now first it is going to check that

408
00:11:27.090 --> 00:11:29.690
if you have any third party, if you

409
00:11:29.690 --> 00:11:31.610
have any third party installation.

410
00:11:31.610 --> 00:11:32.410
Okay?

411
00:11:32.410 --> 00:11:34.010
So if you have installed any third

412
00:11:34.010 --> 00:11:36.290
party module, it is going to load

413
00:11:36.290 --> 00:11:38.690
that and return you the module.

414
00:11:38.690 --> 00:11:39.290
Okay?

415
00:11:39.290 --> 00:11:40.730
So first it will try to load

416
00:11:40.730 --> 00:11:41.730
the third party installation.

417
00:11:41.730 --> 00:11:42.770
If you have any third party

418
00:11:42.770 --> 00:11:43.780
with this module.

419
00:11:43.780 --> 00:11:45.780
If no, it is going to then

420
00:11:45.780 --> 00:11:47.620
check what it is going to check

421
00:11:47.620 --> 00:11:49.780
that if it there is any built

422
00:11:49.780 --> 00:11:51.020
in module of this name.

423
00:11:51.020 --> 00:11:52.140
Okay, it is going to check that

424
00:11:52.140 --> 00:11:53.940
if you have a built in module.

425
00:11:53.940 --> 00:11:56.660
If not, if this is also not the case

426
00:11:56.660 --> 00:11:58.580
in this case it will throw an error.

427
00:11:58.580 --> 00:12:01.380
Okay, throw an error because that

428
00:12:01.380 --> 00:12:03.380
particular module is not found.

429
00:12:03.380 --> 00:12:05.180
Piyush, that is fine.

430
00:12:05.180 --> 00:12:07.580
But now where is the custom module?

431
00:12:07.580 --> 00:12:07.820
Right?

432
00:12:07.820 --> 00:12:09.420
You told that, okay, built

433
00:12:09.420 --> 00:12:10.540
in module is there third party

434
00:12:10.540 --> 00:12:12.320
module, is there custom module?

435
00:12:12.320 --> 00:12:14.000
So yeah, I'm Coming to that.

436
00:12:14.000 --> 00:12:15.280
So first of all you have to make

437
00:12:15.280 --> 00:12:16.680
sure that this part is clear that

438
00:12:16.680 --> 00:12:19.200
you do a require you give a module

439
00:12:19.200 --> 00:12:21.360
name that you want to require.

440
00:12:21.360 --> 00:12:22.840
So it will first try to search

441
00:12:22.840 --> 00:12:24.280
in the third party installation if

442
00:12:24.280 --> 00:12:25.760
you have installed that module.

443
00:12:25.760 --> 00:12:27.000
If not it will go into

444
00:12:27.000 --> 00:12:27.959
the built in module.

445
00:12:27.959 --> 00:12:29.160
If that is also not the case,

446
00:12:29.160 --> 00:12:30.160
it will throw an error.

447
00:12:30.720 --> 00:12:33.080
Now this module name is

448
00:12:33.080 --> 00:12:34.640
a very interesting thing.

449
00:12:34.640 --> 00:12:36.000
Okay, now let me show you

450
00:12:36.000 --> 00:12:38.160
that how this module name

451
00:12:38.160 --> 00:12:39.440
is very special thing.

452
00:12:40.170 --> 00:12:43.250
Let's say you are trying to require.

453
00:12:43.250 --> 00:12:44.570
Let me just have a green pen.

454
00:12:44.570 --> 00:12:45.450
Let's say you are trying

455
00:12:45.450 --> 00:12:47.130
to say require fs.

456
00:12:47.130 --> 00:12:48.210
Now you can see that

457
00:12:48.210 --> 00:12:49.370
I'm just giving a name.

458
00:12:49.370 --> 00:12:50.770
So it will try to search.

459
00:12:50.770 --> 00:12:52.370
Hey fs, is there any

460
00:12:52.370 --> 00:12:53.490
third party installation?

461
00:12:53.490 --> 00:12:53.930
No.

462
00:12:53.930 --> 00:12:55.210
Is there a built in module?

463
00:12:55.210 --> 00:12:55.569
Yes.

464
00:12:55.569 --> 00:12:56.970
So it will give you that.

465
00:12:56.970 --> 00:12:58.810
Let's say you do a require

466
00:12:58.810 --> 00:12:59.890
maybe something like,

467
00:12:59.890 --> 00:13:01.210
you know, JSON web token.

468
00:13:01.210 --> 00:13:02.250
So it's a third party.

469
00:13:02.250 --> 00:13:03.850
So what it will do is it will

470
00:13:03.850 --> 00:13:05.050
first see that hey, do you have

471
00:13:05.050 --> 00:13:06.490
a third party installation?

472
00:13:07.160 --> 00:13:08.680
Actually JSON web token is

473
00:13:08.680 --> 00:13:10.160
a third party, but right now

474
00:13:10.160 --> 00:13:11.240
I have not installed it.

475
00:13:11.240 --> 00:13:13.240
So it will say oh, I am not able to

476
00:13:13.240 --> 00:13:14.760
find the third party installation.

477
00:13:14.760 --> 00:13:15.680
So it will try to search

478
00:13:15.680 --> 00:13:16.680
in the built in module.

479
00:13:16.680 --> 00:13:17.880
There is no built in module

480
00:13:17.880 --> 00:13:19.200
such as JSON web token

481
00:13:19.200 --> 00:13:20.760
and it will throw an error.

482
00:13:20.760 --> 00:13:21.640
That's fine.

483
00:13:21.640 --> 00:13:23.760
If you have installed JSON web

484
00:13:23.760 --> 00:13:24.920
tokens, it will give you that.

485
00:13:25.560 --> 00:13:28.000
Now if I give something like

486
00:13:28.000 --> 00:13:30.200
this, okay, so if I say require

487
00:13:30.840 --> 00:13:35.140
dot slash let's say math.math.j,

488
00:13:35.140 --> 00:13:35.940
something like this.

489
00:13:36.500 --> 00:13:38.740
Now here do you notice that this

490
00:13:38.740 --> 00:13:40.820
particular thing starts with a dot?

491
00:13:40.820 --> 00:13:42.660
Did you notice this dot here?

492
00:13:42.660 --> 00:13:43.380
This dot.

493
00:13:43.940 --> 00:13:45.500
So okay, so this dot

494
00:13:45.500 --> 00:13:47.140
basically is a special thing.

495
00:13:47.140 --> 00:13:49.140
This dot basically indicates that

496
00:13:49.140 --> 00:13:52.580
hey, I want to search this math

497
00:13:52.580 --> 00:13:55.540
js file in the current directory.

498
00:13:55.540 --> 00:13:57.380
So this dot, a single dot

499
00:13:57.380 --> 00:13:58.540
basically means search

500
00:13:58.540 --> 00:13:59.780
in the current directory.

501
00:13:59.780 --> 00:14:01.750
Dot dot slash means search

502
00:14:01.750 --> 00:14:03.190
go one directory up.

503
00:14:03.190 --> 00:14:05.470
Dot dot slash dot dot slash

504
00:14:05.470 --> 00:14:07.670
means go to directories up.

505
00:14:07.670 --> 00:14:10.350
So whenever your require thing

506
00:14:10.350 --> 00:14:11.990
starts with this pattern, you

507
00:14:11.990 --> 00:14:13.430
know, dot slash, dot dot slash or

508
00:14:13.430 --> 00:14:14.870
something like that, that is

509
00:14:14.870 --> 00:14:16.830
where node js knows that it's a

510
00:14:16.830 --> 00:14:18.950
custom module, it's a module that

511
00:14:18.950 --> 00:14:20.070
you have made.

512
00:14:20.070 --> 00:14:21.190
Got it.

513
00:14:21.190 --> 00:14:23.190
So right now I'm just doing fs.

514
00:14:23.190 --> 00:14:25.110
So it is trying to load the FS

515
00:14:25.110 --> 00:14:26.470
from the built in module, right?

516
00:14:26.470 --> 00:14:27.150
Because there is no

517
00:14:27.150 --> 00:14:27.910
third party module.

518
00:14:27.910 --> 00:14:28.940
It's working.

519
00:14:28.940 --> 00:14:31.100
But if I say dot slash so now it

520
00:14:31.100 --> 00:14:32.540
will throw an error because there is

521
00:14:32.540 --> 00:14:35.260
no module, no module not found.

522
00:14:35.260 --> 00:14:37.180
And where it is trying to Find this

523
00:14:37.180 --> 00:14:40.180
module inside users Piyushkar coding

524
00:14:40.180 --> 00:14:42.700
folder node js01 modules index

525
00:14:42.700 --> 00:14:44.260
so now you can see that I

526
00:14:44.260 --> 00:14:46.060
don't have any FS module, right?

527
00:14:46.060 --> 00:14:46.940
You can see that I don't

528
00:14:46.940 --> 00:14:48.460
have any FS module.

529
00:14:48.460 --> 00:14:51.140
So if I remove this.now it knows.

530
00:14:51.140 --> 00:14:52.660
Okay, first I have to search

531
00:14:52.660 --> 00:14:53.700
for third party, then I have

532
00:14:53.700 --> 00:14:54.740
to search for built in.

533
00:14:54.740 --> 00:14:55.940
And it got the built in model,

534
00:14:55.940 --> 00:14:57.460
so everything is working fine.

535
00:14:57.460 --> 00:14:59.940
Okay, so this is how

536
00:14:59.940 --> 00:15:01.820
the require function works.

537
00:15:01.820 --> 00:15:02.660
Interesting, right?

538
00:15:03.220 --> 00:15:04.460
This require function is very

539
00:15:04.460 --> 00:15:05.980
interesting and also it

540
00:15:05.980 --> 00:15:07.060
does something known as

541
00:15:07.060 --> 00:15:09.220
internal caching, you know.

542
00:15:09.220 --> 00:15:12.420
So once you require a module, it also

543
00:15:12.420 --> 00:15:14.540
caches it so that it doesn't have

544
00:15:14.540 --> 00:15:15.540
to load these things again

545
00:15:15.540 --> 00:15:16.860
and again, which I'll show you when

546
00:15:16.860 --> 00:15:18.460
we will move to the custom modules.

547
00:15:18.460 --> 00:15:21.060
As of now, feel free to ignore it.

548
00:15:21.060 --> 00:15:22.340
So in this particular video

549
00:15:22.340 --> 00:15:23.740
I wanted to tell that how

550
00:15:23.740 --> 00:15:24.900
you can use the require

551
00:15:24.900 --> 00:15:26.580
and how you can do the fs.

552
00:15:26.580 --> 00:15:28.900
Okay, so let's explore

553
00:15:28.900 --> 00:15:30.260
some FS things.

554
00:15:30.260 --> 00:15:31.900
Okay, so what all you can do, you can

555
00:15:31.900 --> 00:15:34.100
read a, file in a synchronous way.

556
00:15:34.100 --> 00:15:35.780
Then what else you can do, you can

557
00:15:35.780 --> 00:15:37.620
actually read a directory as well.

558
00:15:37.620 --> 00:15:39.980
Okay, so now you have understood

559
00:15:39.980 --> 00:15:41.380
that how the FS works.

560
00:15:41.380 --> 00:15:42.420
Now here is the thing,

561
00:15:42.980 --> 00:15:44.900
guys, did you notice one thing?

562
00:15:44.900 --> 00:15:47.900
That whenever I do like FS and I do

563
00:15:47.900 --> 00:15:50.140
a dot, I'm not able to get anything.

564
00:15:50.140 --> 00:15:51.860
I'm not getting suggestions, right?

565
00:15:51.860 --> 00:15:52.900
Because that's a part

566
00:15:52.900 --> 00:15:55.980
of typescript typings and that's

567
00:15:55.980 --> 00:15:57.700
an external module now.

568
00:15:57.700 --> 00:15:58.540
So what we will do is

569
00:15:58.540 --> 00:15:59.740
in the next class I'll show you

570
00:15:59.740 --> 00:16:01.700
something with npm init.

571
00:16:01.700 --> 00:16:03.539
Then we will install the typings

572
00:16:03.539 --> 00:16:06.060
and then we will explore some built

573
00:16:06.060 --> 00:16:07.700
in modules in node js, which

574
00:16:07.700 --> 00:16:09.060
are very, very, very important.

575
00:16:09.060 --> 00:16:09.980
And then we will move

576
00:16:09.980 --> 00:16:11.140
to the custom modules.

577
00:16:11.140 --> 00:16:13.020
Okay, so with that, let's

578
00:16:13.020 --> 00:16:14.020
end the video here.

579
00:16:14.020 --> 00:16:15.460
I hope you have

580
00:16:15.460 --> 00:16:16.460
learned something new.

581
00:16:16.460 --> 00:16:17.100
That is how this

582
00:16:17.100 --> 00:16:18.500
require function works.

583
00:16:18.500 --> 00:16:19.660
So in the next class let's

584
00:16:19.660 --> 00:16:21.300
work on the npm thing.

585
00:16:21.300 --> 00:16:22.660
So let's meet you right there.
