WEBVTT

1
00:00:00.320 --> 00:00:02.720
So hey guys, in this particular video

2
00:00:02.720 --> 00:00:05.360
let's understand what is a REST API.

3
00:00:05.360 --> 00:00:06.600
What do you mean by this REST

4
00:00:06.600 --> 00:00:09.040
API, also known as RESTful API.

5
00:00:09.040 --> 00:00:09.800
So let's understand

6
00:00:09.800 --> 00:00:10.600
that what is this?

7
00:00:10.600 --> 00:00:10.880
Okay?

8
00:00:10.880 --> 00:00:11.920
And from now onwards we

9
00:00:11.920 --> 00:00:13.240
are going to be focusing more

10
00:00:13.240 --> 00:00:14.880
on the restful APIs.

11
00:00:14.880 --> 00:00:16.280
So restful APIs means

12
00:00:16.280 --> 00:00:18.520
representational state transfer.

13
00:00:18.520 --> 00:00:20.000
Like this is the full form and there

14
00:00:20.000 --> 00:00:21.040
is no need to remember this.

15
00:00:21.040 --> 00:00:22.800
Even I googled it before this video.

16
00:00:22.800 --> 00:00:24.520
Okay, so what is this?

17
00:00:24.520 --> 00:00:25.280
Is, this is basically

18
00:00:25.280 --> 00:00:26.720
an architectural style.

19
00:00:26.720 --> 00:00:27.760
Now first thing is that this

20
00:00:27.760 --> 00:00:28.960
is an architectural style

21
00:00:28.960 --> 00:00:29.880
and this is nothing related

22
00:00:29.880 --> 00:00:31.520
to the Node js, okay?

23
00:00:31.520 --> 00:00:33.060
I not talking about Express or Node

24
00:00:33.060 --> 00:00:35.140
js, it is in, in general like

25
00:00:35.140 --> 00:00:36.420
whenever you are building a REST

26
00:00:36.420 --> 00:00:38.380
API, whether you are using Java,

27
00:00:38.380 --> 00:00:39.780
whether you're using Rust or

28
00:00:39.780 --> 00:00:41.420
you're using JavaScript, Node,

29
00:00:41.420 --> 00:00:42.100
this, anything.

30
00:00:42.100 --> 00:00:43.820
So this is just a style, okay?

31
00:00:43.820 --> 00:00:45.900
Architecture style for designing

32
00:00:45.900 --> 00:00:47.860
the applications, the backend APIs.

33
00:00:47.860 --> 00:00:48.900
Okay?

34
00:00:48.900 --> 00:00:51.940
Now this, this design, the style has

35
00:00:51.940 --> 00:00:53.820
some, some principles, okay?

36
00:00:53.820 --> 00:00:55.260
So there are some key principles that

37
00:00:55.260 --> 00:00:57.780
we have to follow in order to call

38
00:00:57.780 --> 00:01:01.480
yourself your APIs as a RESTful API.

39
00:01:01.480 --> 00:01:03.160
Okay, so what are those?

40
00:01:03.160 --> 00:01:04.640
Number one, all, all

41
00:01:04.640 --> 00:01:05.600
the communication happens

42
00:01:05.600 --> 00:01:06.800
on the HTTP, right?

43
00:01:06.800 --> 00:01:08.360
All the communication happens

44
00:01:08.360 --> 00:01:09.960
on the HTTP protocol.

45
00:01:09.960 --> 00:01:11.960
That's fine, very simple.

46
00:01:11.960 --> 00:01:13.640
First thing that majorly

47
00:01:13.640 --> 00:01:16.280
comes is the statelessness.

48
00:01:16.280 --> 00:01:19.400
Now what do I mean by statelessness?

49
00:01:19.400 --> 00:01:22.360
There should be absolutely no state

50
00:01:22.360 --> 00:01:24.360
maintained on the server.

51
00:01:24.920 --> 00:01:26.660
That means let's say you have

52
00:01:26.660 --> 00:01:28.300
a server which is running, let's

53
00:01:28.300 --> 00:01:30.180
say Java, maybe Rust, maybe

54
00:01:30.180 --> 00:01:32.140
anything or maybe Node js, right?

55
00:01:32.140 --> 00:01:33.900
If user is sending a request,

56
00:01:34.540 --> 00:01:36.780
you are not allowed to create

57
00:01:36.780 --> 00:01:39.420
some, state some data in the memory.

58
00:01:39.420 --> 00:01:40.770
I mean you want to create some data,

59
00:01:40.770 --> 00:01:42.060
hey, go in the database, right?

60
00:01:42.060 --> 00:01:43.380
You have a database but you

61
00:01:43.380 --> 00:01:45.900
cannot store any user related

62
00:01:45.900 --> 00:01:48.140
information inside the server.

63
00:01:48.140 --> 00:01:50.860
You cannot use your memory

64
00:01:50.860 --> 00:01:54.470
to store, store some, store some

65
00:01:54.470 --> 00:01:56.550
user, related information.

66
00:01:56.550 --> 00:01:59.990
User related info.

67
00:01:59.990 --> 00:02:01.230
If you want to do, do

68
00:02:01.230 --> 00:02:02.110
not do it on the server.

69
00:02:02.110 --> 00:02:03.230
You can use Redis, you can

70
00:02:03.230 --> 00:02:04.670
use postgres, you can use other

71
00:02:04.670 --> 00:02:06.230
databases, key value pairs,

72
00:02:06.230 --> 00:02:07.830
but not in the server.

73
00:02:07.830 --> 00:02:08.470
Why?

74
00:02:08.470 --> 00:02:09.949
Because what happens is in

75
00:02:09.949 --> 00:02:12.110
reality these servers automatically

76
00:02:12.110 --> 00:02:14.070
scale up and down, right?

77
00:02:14.070 --> 00:02:15.830
So they scale up, they scale down.

78
00:02:15.830 --> 00:02:17.350
So if you are storing some kind

79
00:02:17.350 --> 00:02:18.790
of memory, you are storing

80
00:02:18.790 --> 00:02:20.630
some kind of state in the memory,

81
00:02:21.140 --> 00:02:22.820
it can be lost, right?

82
00:02:22.820 --> 00:02:24.580
And if you are storing something

83
00:02:24.580 --> 00:02:26.380
in the memory, you don't want your

84
00:02:26.380 --> 00:02:27.980
servers to be scalable in this way.

85
00:02:27.980 --> 00:02:29.620
That basically violates the principle

86
00:02:29.620 --> 00:02:30.980
of your statelessness, okay?

87
00:02:30.980 --> 00:02:32.980
The principle of your restful API.

88
00:02:32.980 --> 00:02:34.820
So everything should be stateless.

89
00:02:34.820 --> 00:02:37.060
Secondly, this should follow

90
00:02:37.060 --> 00:02:39.380
a client Server architecture, right?

91
00:02:39.380 --> 00:02:40.260
What is a client server

92
00:02:40.260 --> 00:02:41.100
architecture, by the way?

93
00:02:41.100 --> 00:02:42.580
You know, the client server

94
00:02:42.580 --> 00:02:43.780
architecture is basically that

95
00:02:43.780 --> 00:02:45.100
there will be a client which can

96
00:02:45.100 --> 00:02:47.070
be a separate application.

97
00:02:47.070 --> 00:02:48.070
Okay, A client.

98
00:02:48.070 --> 00:02:49.470
It can be a mobile application,

99
00:02:49.470 --> 00:02:50.790
it can be iOS, it can

100
00:02:50.790 --> 00:02:52.270
be Android, it can be a website,

101
00:02:52.270 --> 00:02:53.390
it can be anything.

102
00:02:53.390 --> 00:02:55.230
But the client should be

103
00:02:55.230 --> 00:02:56.510
a separate application.

104
00:02:56.510 --> 00:02:57.910
Okay, so let's say that there

105
00:02:57.910 --> 00:02:59.070
is a client which is a separate

106
00:02:59.070 --> 00:03:00.310
application and your server

107
00:03:00.310 --> 00:03:02.190
is a separate application.

108
00:03:02.190 --> 00:03:02.749
Okay?

109
00:03:02.749 --> 00:03:04.830
It should not be like that your

110
00:03:04.830 --> 00:03:06.750
backend is responsible for ui.

111
00:03:06.750 --> 00:03:08.110
No, that should not be the case.

112
00:03:08.110 --> 00:03:09.430
You should not send like,

113
00:03:09.430 --> 00:03:10.710
you know, HTML data, some

114
00:03:10.710 --> 00:03:12.110
CSS data from the server.

115
00:03:12.110 --> 00:03:15.320
No, you, you should only send data

116
00:03:15.320 --> 00:03:16.240
in some format

117
00:03:16.240 --> 00:03:18.920
like JSON, the front end.

118
00:03:18.920 --> 00:03:21.040
The client application should

119
00:03:21.040 --> 00:03:22.560
be responsible for rendering it

120
00:03:22.560 --> 00:03:23.840
on the ui, how to show it

121
00:03:23.840 --> 00:03:25.240
to the user, all that stuff.

122
00:03:25.240 --> 00:03:26.800
So client server architecture,

123
00:03:26.800 --> 00:03:27.880
keep the client different,

124
00:03:27.880 --> 00:03:28.840
Keep the server different.

125
00:03:28.840 --> 00:03:31.600
Okay, There should be no, like,

126
00:03:31.600 --> 00:03:34.240
there should be no code, coupling.

127
00:03:34.240 --> 00:03:35.800
Okay, it should be, they should

128
00:03:35.800 --> 00:03:37.880
always Talk with the APIs.

129
00:03:37.880 --> 00:03:39.400
So what client can do, it can

130
00:03:39.400 --> 00:03:40.960
make API calls to your

131
00:03:40.960 --> 00:03:42.390
backend and, and get the data.

132
00:03:43.110 --> 00:03:44.670
Okay, then there should

133
00:03:44.670 --> 00:03:45.910
be a uniform interface.

134
00:03:45.910 --> 00:03:46.630
Now what do I mean

135
00:03:46.630 --> 00:03:47.750
by uniform interface?

136
00:03:47.750 --> 00:03:49.070
Basically you should use all

137
00:03:49.070 --> 00:03:50.190
the things like for example,

138
00:03:50.190 --> 00:03:51.750
get post, put delete thing

139
00:03:51.750 --> 00:03:52.830
in a predictable way.

140
00:03:52.830 --> 00:03:54.270
Okay, what do I mean

141
00:03:54.270 --> 00:03:55.230
by predictable way?

142
00:03:55.230 --> 00:03:56.230
This is a very simple thing.

143
00:03:56.230 --> 00:03:57.710
Let's say if you are making a get

144
00:03:57.710 --> 00:03:59.190
request to slash tweets,

145
00:03:59.750 --> 00:04:01.670
what do you think they should do?

146
00:04:01.670 --> 00:04:02.590
They should obviously

147
00:04:02.590 --> 00:04:03.510
return you all the tweets.

148
00:04:03.510 --> 00:04:03.790
Right?

149
00:04:03.790 --> 00:04:05.310
Because this is a predictable,

150
00:04:05.310 --> 00:04:06.710
this is a common sense.

151
00:04:06.710 --> 00:04:08.150
But let's say you are designing it

152
00:04:08.150 --> 00:04:09.150
in a way that when you make

153
00:04:09.150 --> 00:04:10.510
a call on get tweets, you

154
00:04:10.510 --> 00:04:11.950
are actually creating a new tweet.

155
00:04:11.950 --> 00:04:13.190
Okay, this is not

156
00:04:13.190 --> 00:04:14.110
a predictable thing, right?

157
00:04:14.110 --> 00:04:14.950
Creating a new tweet.

158
00:04:14.950 --> 00:04:15.910
This doesn't make any sense.

159
00:04:15.910 --> 00:04:17.149
The common sense is not there.

160
00:04:17.149 --> 00:04:18.190
So there should be a uniform

161
00:04:18.190 --> 00:04:19.630
interface that if you tell

162
00:04:19.630 --> 00:04:20.829
someone, hey, there is a route

163
00:04:20.829 --> 00:04:22.150
that is a get route of slash

164
00:04:22.150 --> 00:04:23.830
tweet, it should be predictable

165
00:04:23.830 --> 00:04:25.030
that, yes, this route is going to

166
00:04:25.030 --> 00:04:26.350
return all the tweets.

167
00:04:26.350 --> 00:04:28.590
So uniform interface, okay?

168
00:04:28.590 --> 00:04:30.270
And it should be cachable.

169
00:04:30.270 --> 00:04:30.910
Okay?

170
00:04:30.910 --> 00:04:32.670
So the responses that you send

171
00:04:32.670 --> 00:04:33.830
from the backend, it

172
00:04:33.830 --> 00:04:35.310
should be cacheable, right?

173
00:04:35.310 --> 00:04:36.710
So servers can mark it as

174
00:04:36.710 --> 00:04:37.990
cacheable, which allows the client

175
00:04:37.990 --> 00:04:39.880
to cache the things.

176
00:04:39.880 --> 00:04:41.560
So this is what basically means

177
00:04:41.560 --> 00:04:44.200
makes your APIs as a restful APIs.

178
00:04:44.200 --> 00:04:45.880
So moving further, we are going

179
00:04:45.880 --> 00:04:49.000
to use these, principles, right?

180
00:04:49.000 --> 00:04:51.400
And in order to make highly

181
00:04:51.400 --> 00:04:53.600
performant, highly available RESTful

182
00:04:53.600 --> 00:04:55.400
APIs which are highly scalable.

183
00:04:55.400 --> 00:04:57.400
Okay, so you can Google,

184
00:04:57.400 --> 00:04:58.240
a lot of more things

185
00:04:58.240 --> 00:04:59.920
about these restful APIs.

186
00:04:59.920 --> 00:05:01.320
In fact, I would suggest you to

187
00:05:01.320 --> 00:05:03.240
Google yourself also restful APIs,

188
00:05:03.240 --> 00:05:05.320
and keep all the principles in mind.

189
00:05:05.960 --> 00:05:08.160
So we are just going to learn restful

190
00:05:08.160 --> 00:05:10.680
APIs, because that, what, like 99%

191
00:05:10.680 --> 00:05:12.080
of the companies use, right?

192
00:05:12.080 --> 00:05:13.960
So we are just going to create APIs,

193
00:05:13.960 --> 00:05:15.200
and for the testing

194
00:05:15.200 --> 00:05:16.640
purposes, because we don't have

195
00:05:16.640 --> 00:05:18.600
any UI or client or any REACT

196
00:05:18.600 --> 00:05:20.240
application, we are going to use

197
00:05:20.240 --> 00:05:21.720
this Thunder client, right?

198
00:05:21.720 --> 00:05:23.160
Because if you have to really

199
00:05:23.160 --> 00:05:24.320
test your application, then

200
00:05:24.320 --> 00:05:25.480
you have to build a UI using

201
00:05:25.480 --> 00:05:26.680
React or something like that.

202
00:05:26.680 --> 00:05:27.240
Anything.

203
00:05:27.240 --> 00:05:28.840
But we have this Thunder client,

204
00:05:28.840 --> 00:05:30.840
which acts as a, ui, which

205
00:05:30.840 --> 00:05:32.800
acts as a client for us so

206
00:05:32.800 --> 00:05:34.520
that we can test our APIs.

207
00:05:34.520 --> 00:05:35.320
Got it, guys?
