WEBVTT

1
00:00:00.160 --> 00:00:01.640
All right, So I hope that

2
00:00:01.640 --> 00:00:03.000
in the previous video you have

3
00:00:03.000 --> 00:00:04.320
already given some try

4
00:00:04.320 --> 00:00:05.920
in implementing authorization.

5
00:00:05.920 --> 00:00:07.440
But just in case you were not able

6
00:00:07.440 --> 00:00:08.840
to, don't worry, here we are

7
00:00:08.840 --> 00:00:10.160
to implement the authorization.

8
00:00:10.880 --> 00:00:12.000
So what I'm going to do is

9
00:00:12.000 --> 00:00:12.960
first things first,

10
00:00:12.960 --> 00:00:14.440
let's say we don't have any concept

11
00:00:14.440 --> 00:00:16.079
of authorization, right?

12
00:00:16.079 --> 00:00:17.920
I am going to create a special

13
00:00:17.920 --> 00:00:19.600
route, let's say admin

14
00:00:19.600 --> 00:00:22.440
routes js as the name says.

15
00:00:22.440 --> 00:00:23.960
This particular routes is going

16
00:00:23.960 --> 00:00:25.560
to contain some critical

17
00:00:25.560 --> 00:00:27.000
routes which are only and only

18
00:00:27.000 --> 00:00:28.320
be allowed to an admin.

19
00:00:28.990 --> 00:00:30.510
So what I can do is first of all

20
00:00:30.510 --> 00:00:32.229
I'll just borrow some code that

21
00:00:32.229 --> 00:00:34.430
is import express from Express.

22
00:00:34.430 --> 00:00:35.550
That is nice.

23
00:00:35.550 --> 00:00:37.150
So I'm just importing the express

24
00:00:37.150 --> 00:00:38.350
and let me just create

25
00:00:38.350 --> 00:00:39.910
a new router that is this

26
00:00:39.910 --> 00:00:41.430
particular stuff and then I

27
00:00:41.430 --> 00:00:43.470
can just say export default.

28
00:00:43.470 --> 00:00:46.030
Okay, Export default the router.

29
00:00:46.030 --> 00:00:48.190
So imagine all the routes that we are

30
00:00:48.190 --> 00:00:50.190
going to add here is only and only

31
00:00:50.190 --> 00:00:52.670
be restricted to the admin only.

32
00:00:52.670 --> 00:00:55.520
Okay, so let's create a router, A,

33
00:00:55.520 --> 00:00:57.540
get route Users.

34
00:00:57.540 --> 00:01:00.180
Let's say admin wants to see

35
00:01:00.180 --> 00:01:02.420
all the users that are available

36
00:01:02.420 --> 00:01:03.420
in our database.

37
00:01:03.420 --> 00:01:04.459
Technically it's

38
00:01:04.459 --> 00:01:05.780
an internal information.

39
00:01:05.780 --> 00:01:07.700
You don't want that any person can

40
00:01:07.700 --> 00:01:09.300
see all the information about

41
00:01:09.300 --> 00:01:11.140
the available users on the platform.

42
00:01:11.140 --> 00:01:13.740
But yes, admin can see all the users.

43
00:01:13.740 --> 00:01:14.700
So let's say this is one

44
00:01:14.700 --> 00:01:16.020
route that I want to build.

45
00:01:16.020 --> 00:01:17.260
So let's just quickly code

46
00:01:17.260 --> 00:01:18.100
this particular route.

47
00:01:18.100 --> 00:01:18.700
So I'll just create

48
00:01:18.700 --> 00:01:20.340
an asynchronous function here.

49
00:01:20.340 --> 00:01:20.980
Okay.

50
00:01:20.980 --> 00:01:23.780
And I'll just say request response.

51
00:01:23.780 --> 00:01:24.930
And let me just zoom in the code

52
00:01:24.930 --> 00:01:25.730
little bit more so that

53
00:01:25.730 --> 00:01:27.210
you can see it more clearly.

54
00:01:27.210 --> 00:01:28.730
So how to implement this particular

55
00:01:28.730 --> 00:01:30.970
stuff is first of all let's import

56
00:01:30.970 --> 00:01:34.290
DB from DB js file.

57
00:01:34.290 --> 00:01:35.370
Okay, nice.

58
00:01:35.370 --> 00:01:37.850
And let's also import something

59
00:01:37.850 --> 00:01:41.050
from you know, one directory up.

60
00:01:41.050 --> 00:01:42.930
Then we can go into the DB and then

61
00:01:42.930 --> 00:01:45.290
we can go into the schema js file.

62
00:01:45.290 --> 00:01:47.530
So what do you want to import here?

63
00:01:47.530 --> 00:01:50.210
I want to import the users table.

64
00:01:50.210 --> 00:01:50.650
Nice.

65
00:01:50.650 --> 00:01:53.080
So here we have the db oh

66
00:01:53.080 --> 00:01:54.800
by the way, I imported it wrongly.

67
00:01:54.800 --> 00:01:56.560
I should have done DB

68
00:01:56.560 --> 00:01:58.240
slash index js Yes.

69
00:01:58.240 --> 00:01:59.520
Now it is basically the database.

70
00:01:59.520 --> 00:02:00.800
You can see it's a database file.

71
00:02:00.800 --> 00:02:01.520
Nice.

72
00:02:01.520 --> 00:02:03.000
So now what I want to basically

73
00:02:03.000 --> 00:02:05.200
do here is my router is here.

74
00:02:05.200 --> 00:02:07.120
So how to query all the users?

75
00:02:07.120 --> 00:02:10.800
I can just say const Users equals to.

76
00:02:10.800 --> 00:02:12.680
I can just put an await and then

77
00:02:12.680 --> 00:02:15.040
I can just say DB dot select.

78
00:02:15.040 --> 00:02:17.040
Okay, from which table

79
00:02:17.040 --> 00:02:18.080
do you want to select?

80
00:02:18.080 --> 00:02:20.400
I want to select from users table

81
00:02:20.400 --> 00:02:22.480
and that's it right this basically

82
00:02:22.480 --> 00:02:24.120
means select all the users.

83
00:02:24.120 --> 00:02:25.720
Then I can just say return a,

84
00:02:25.720 --> 00:02:28.320
response.JSON saying users.

85
00:02:28.320 --> 00:02:29.000
That's it.

86
00:02:29.000 --> 00:02:30.200
So this users is what?

87
00:02:30.200 --> 00:02:32.160
Basically an array of users.

88
00:02:32.160 --> 00:02:33.360
And of course you don't want

89
00:02:33.360 --> 00:02:34.480
to send password, right?

90
00:02:34.480 --> 00:02:35.840
You don't want to send the password

91
00:02:35.840 --> 00:02:37.320
and salt on the front end.

92
00:02:37.320 --> 00:02:39.240
So let's add, that, hey, I want to

93
00:02:39.240 --> 00:02:43.160
send an ID that is user stable ID.

94
00:02:43.160 --> 00:02:45.200
I want to send the name that is users

95
00:02:45.200 --> 00:02:47.120
table.name and I want to send

96
00:02:47.120 --> 00:02:49.320
the email that is user stable email.

97
00:02:50.100 --> 00:02:50.820
That's it.

98
00:02:50.820 --> 00:02:51.380
That's it.

99
00:02:51.380 --> 00:02:52.500
I want to send.

100
00:02:52.500 --> 00:02:53.660
Now let me just quickly spin

101
00:02:53.660 --> 00:02:55.140
up my postman, okay.

102
00:02:55.140 --> 00:02:56.700
And test this particular route

103
00:02:56.700 --> 00:02:58.740
if this is working or not.

104
00:02:58.740 --> 00:03:00.500
Right now you can see we have

105
00:03:00.500 --> 00:03:02.660
not done any authentication.

106
00:03:02.660 --> 00:03:03.540
No authorization.

107
00:03:03.540 --> 00:03:04.620
Nothing is there.

108
00:03:04.620 --> 00:03:05.300
Right?

109
00:03:05.300 --> 00:03:06.820
So here is my postman.

110
00:03:06.820 --> 00:03:07.380
Right?

111
00:03:07.380 --> 00:03:08.740
So what I'm going to do is,

112
00:03:08.740 --> 00:03:10.300
by the way, we forgot to register

113
00:03:10.300 --> 00:03:11.780
this particular router.

114
00:03:11.780 --> 00:03:12.620
So we have to go

115
00:03:12.620 --> 00:03:14.580
into our index js file.

116
00:03:14.580 --> 00:03:16.700
Let's import this routes, right?

117
00:03:16.700 --> 00:03:17.860
So I can just say import,

118
00:03:19.470 --> 00:03:23.070
admin router from dot slash

119
00:03:23.070 --> 00:03:26.670
routes admin router js.

120
00:03:26.670 --> 00:03:27.910
So what I could basically

121
00:03:27.910 --> 00:03:29.710
do, I can just say if anything

122
00:03:29.710 --> 00:03:30.750
starts with admin,

123
00:03:31.470 --> 00:03:33.470
you please use the admin router.

124
00:03:33.470 --> 00:03:33.950
That's it.

125
00:03:33.950 --> 00:03:35.590
And by the way, I have just noticed

126
00:03:35.590 --> 00:03:37.350
we have a lot of unused imports,

127
00:03:37.350 --> 00:03:38.630
so it's okay to remove them.

128
00:03:38.630 --> 00:03:39.310
Right?

129
00:03:39.310 --> 00:03:40.030
Nice.

130
00:03:40.030 --> 00:03:41.150
So let me just start my

131
00:03:41.150 --> 00:03:42.190
server up and running.

132
00:03:42.190 --> 00:03:44.350
So PNPM dev starts my server

133
00:03:44.350 --> 00:03:46.050
at localhost8000.

134
00:03:46.050 --> 00:03:46.610
Great.

135
00:03:46.610 --> 00:03:50.050
So if I say admin slash users,

136
00:03:50.610 --> 00:03:52.090
I will clear my token.

137
00:03:52.090 --> 00:03:52.410
See?

138
00:03:52.410 --> 00:03:53.490
No authentication.

139
00:03:53.490 --> 00:03:55.250
Okay, let's clear the body,

140
00:03:55.250 --> 00:03:57.890
no body, no header and send.

141
00:03:57.890 --> 00:03:58.890
You can see I'm able

142
00:03:58.890 --> 00:04:00.130
to get all the users.

143
00:04:00.130 --> 00:04:01.370
So as of now, we only have

144
00:04:01.370 --> 00:04:02.850
one user in our database.

145
00:04:02.850 --> 00:04:03.810
Correct.

146
00:04:03.810 --> 00:04:05.330
Technically, this is wrong.

147
00:04:05.330 --> 00:04:07.250
First thing we should implement is

148
00:04:07.250 --> 00:04:09.890
that the user must be authenticated.

149
00:04:09.890 --> 00:04:11.730
Correct user must be authenticated.

150
00:04:12.250 --> 00:04:13.970
Now, one way to do the authentication

151
00:04:13.970 --> 00:04:15.210
is I can just say that if

152
00:04:15.210 --> 00:04:17.930
there is no request dot user.

153
00:04:17.930 --> 00:04:18.490
Right?

154
00:04:18.490 --> 00:04:19.410
If you remember from

155
00:04:19.410 --> 00:04:20.810
the previous classes, we have

156
00:04:20.810 --> 00:04:22.170
a middleware function.

157
00:04:22.170 --> 00:04:23.730
If the user exists, we are

158
00:04:23.730 --> 00:04:25.530
populating this request user.

159
00:04:25.530 --> 00:04:27.490
So if there is no request user,

160
00:04:27.490 --> 00:04:28.970
that means the user is logged out.

161
00:04:28.970 --> 00:04:30.890
You can just say return a,

162
00:04:30.890 --> 00:04:34.410
response.status code of 401

163
00:04:34.410 --> 00:04:36.410
and then saying.JSON.

164
00:04:36.410 --> 00:04:37.010
okay.

165
00:04:37.010 --> 00:04:38.940
And error that.

166
00:04:38.940 --> 00:04:40.460
Oh, sorry, error.

167
00:04:40.460 --> 00:04:41.940
Please don't import this error

168
00:04:41.940 --> 00:04:43.580
from here and you can just send

169
00:04:43.580 --> 00:04:46.460
an error that you must be

170
00:04:46.460 --> 00:04:50.060
authenticated to access this.

171
00:04:50.060 --> 00:04:50.980
So this is one way

172
00:04:50.980 --> 00:04:52.380
of controlling the authentication.

173
00:04:52.380 --> 00:04:52.700
Right?

174
00:04:52.700 --> 00:04:54.380
So now if you send, you can

175
00:04:54.380 --> 00:04:55.900
see you Must be authenticated.

176
00:04:55.900 --> 00:04:58.620
But now if I try to send the bearer

177
00:04:58.620 --> 00:05:00.660
token along, okay, I have

178
00:05:00.660 --> 00:05:03.100
to generate, I have to log in first.

179
00:05:03.100 --> 00:05:04.900
So let me just do a quick login.

180
00:05:04.900 --> 00:05:05.860
This is my token.

181
00:05:05.860 --> 00:05:07.460
Let me just copy this token

182
00:05:07.460 --> 00:05:08.380
and I'm just going

183
00:05:08.380 --> 00:05:10.100
to replace this token and send.

184
00:05:10.100 --> 00:05:10.820
Now you can see

185
00:05:10.820 --> 00:05:12.260
the authentication is working.

186
00:05:12.260 --> 00:05:12.580
Now.

187
00:05:12.580 --> 00:05:13.420
Guys, tell me one thing,

188
00:05:13.420 --> 00:05:14.300
is this a correct way

189
00:05:14.300 --> 00:05:15.460
to do an authentication?

190
00:05:15.460 --> 00:05:16.740
Of course not, right?

191
00:05:16.740 --> 00:05:17.820
Technically I don't want

192
00:05:17.820 --> 00:05:19.180
to repeat this code.

193
00:05:19.180 --> 00:05:21.260
If you see we are repeating this code

194
00:05:21.260 --> 00:05:22.740
at couple of places, right?

195
00:05:22.740 --> 00:05:24.060
We are repeating this particular

196
00:05:24.060 --> 00:05:25.620
code at couple of places.

197
00:05:25.620 --> 00:05:27.620
So you should not repeat a code.

198
00:05:27.620 --> 00:05:29.540
Rather see what I could do.

199
00:05:29.540 --> 00:05:31.180
I can create a folder

200
00:05:31.180 --> 00:05:32.420
of middlewares, right?

201
00:05:33.040 --> 00:05:35.160
And I can create a middleware

202
00:05:35.160 --> 00:05:38.720
of auth middleware js.

203
00:05:38.720 --> 00:05:41.040
What I can basically do in this auth

204
00:05:41.040 --> 00:05:43.120
middleware js is I can

205
00:05:43.120 --> 00:05:45.680
create a middleware number one.

206
00:05:45.680 --> 00:05:48.880
I also want to first of all move this

207
00:05:48.880 --> 00:05:50.760
middleware to this file, right?

208
00:05:50.760 --> 00:05:51.920
To make it more clean.

209
00:05:51.920 --> 00:05:53.400
So let's create a middleware

210
00:05:53.400 --> 00:05:54.320
here that is const,

211
00:05:55.520 --> 00:05:57.840
authentication middleware.

212
00:05:57.840 --> 00:05:58.640
Let's name it as

213
00:05:58.640 --> 00:06:00.000
authentication middleware.

214
00:06:00.000 --> 00:06:01.880
So this middleware does what?

215
00:06:01.880 --> 00:06:04.400
It's just an asynchronous function.

216
00:06:04.400 --> 00:06:05.120
Okay, let's say it's

217
00:06:05.120 --> 00:06:06.320
an async function.

218
00:06:06.320 --> 00:06:08.440
And what it basically has, it, it

219
00:06:08.440 --> 00:06:11.160
has access to request response.

220
00:06:11.160 --> 00:06:12.320
And next.

221
00:06:12.320 --> 00:06:14.560
Now what I can do is I can safely.

222
00:06:14.560 --> 00:06:16.560
First of all, let's have a try catch.

223
00:06:16.560 --> 00:06:17.800
See, I'm just going to type,

224
00:06:17.800 --> 00:06:19.280
I'm just going to type here.

225
00:06:19.280 --> 00:06:20.160
So what we are basically

226
00:06:20.160 --> 00:06:21.360
doing here is try catch.

227
00:06:21.360 --> 00:06:22.600
If there is any error, just

228
00:06:22.600 --> 00:06:23.520
call the next function.

229
00:06:23.520 --> 00:06:24.800
Okay, that's it.

230
00:06:24.800 --> 00:06:26.920
But if it is not what you do,

231
00:06:26.920 --> 00:06:28.480
you try to read the headers.

232
00:06:28.480 --> 00:06:30.120
Okay, I'm just copying one by one.

233
00:06:30.120 --> 00:06:32.240
Okay, Try to read the headers.

234
00:06:32.240 --> 00:06:32.650
Try to.

235
00:06:32.650 --> 00:06:34.090
If the header does not exist,

236
00:06:34.090 --> 00:06:35.490
that means, okay, the user is

237
00:06:35.490 --> 00:06:36.690
not authenticated, he's not

238
00:06:36.690 --> 00:06:38.170
sending you any kind of headers.

239
00:06:38.170 --> 00:06:40.250
Just call the next function next,

240
00:06:40.250 --> 00:06:41.250
you know, next router

241
00:06:41.250 --> 00:06:42.970
in the middleware stack.

242
00:06:42.970 --> 00:06:43.450
Okay.

243
00:06:43.450 --> 00:06:45.290
But if it does not start with

244
00:06:45.290 --> 00:06:47.170
the bearer, of course it's an error.

245
00:06:47.170 --> 00:06:47.890
So you can just throw

246
00:06:47.890 --> 00:06:48.970
an error response.

247
00:06:48.970 --> 00:06:49.690
Nice.

248
00:06:49.690 --> 00:06:50.330
Cool.

249
00:06:50.330 --> 00:06:52.570
Okay, then you got the token.

250
00:06:52.570 --> 00:06:54.450
So I'll just copy here and I'll

251
00:06:54.450 --> 00:06:56.570
just say, hey, here is the token.

252
00:06:56.570 --> 00:06:57.450
Very nice.

253
00:06:57.450 --> 00:06:59.530
Then you try to decode the token.

254
00:06:59.530 --> 00:06:59.860
Right?

255
00:06:59.860 --> 00:07:00.180
Right.

256
00:07:00.180 --> 00:07:01.500
So you want to make sure that

257
00:07:01.500 --> 00:07:02.980
this token is generated by you.

258
00:07:02.980 --> 00:07:04.100
So you do a, verify.

259
00:07:04.100 --> 00:07:06.580
But don't forget to import jwt.

260
00:07:06.580 --> 00:07:10.980
So import JWT from JSON web token.

261
00:07:10.980 --> 00:07:11.940
Nice.

262
00:07:11.940 --> 00:07:14.140
And if you got the decoded you just

263
00:07:14.140 --> 00:07:16.060
say request user is equals to

264
00:07:16.060 --> 00:07:18.420
decoded and call the next function.

265
00:07:18.420 --> 00:07:20.060
Very nice, very nice.

266
00:07:20.060 --> 00:07:21.700
Okay, and just export

267
00:07:21.700 --> 00:07:22.980
this function from here.

268
00:07:22.980 --> 00:07:24.540
Now what you can basically do is

269
00:07:24.540 --> 00:07:26.900
instead of this logic, I can say,

270
00:07:26.900 --> 00:07:28.660
hey, I want to import something

271
00:07:28.660 --> 00:07:31.940
from dot slash middlewares slash,

272
00:07:32.580 --> 00:07:34.020
you know, auth middleware.

273
00:07:34.020 --> 00:07:35.300
And you can just import

274
00:07:35.300 --> 00:07:37.140
the authentication middleware.

275
00:07:37.140 --> 00:07:39.340
Now instead of doing all this

276
00:07:39.340 --> 00:07:40.860
particular stuff here, I

277
00:07:40.860 --> 00:07:43.300
can just make it say app.

278
00:07:43.300 --> 00:07:45.940
Use the authentication middleware.

279
00:07:45.940 --> 00:07:47.140
That is it.

280
00:07:47.140 --> 00:07:47.940
Right?

281
00:07:47.940 --> 00:07:48.980
Let's make sure if everything

282
00:07:48.980 --> 00:07:49.860
is working, you can see

283
00:07:49.860 --> 00:07:50.620
everything is working.

284
00:07:50.620 --> 00:07:50.900
Right?

285
00:07:50.900 --> 00:07:52.300
I'm still logged in.

286
00:07:52.300 --> 00:07:53.580
And if I say no,

287
00:07:53.580 --> 00:07:55.180
you can see I'm logged out.

288
00:07:55.180 --> 00:07:56.540
If I say bearer token,

289
00:07:56.540 --> 00:07:57.580
I am logged in.

290
00:07:57.580 --> 00:07:58.780
Very nice.

291
00:07:58.780 --> 00:08:01.700
Now what I can do is along with this

292
00:08:01.700 --> 00:08:03.820
I can create one more middleware.

293
00:08:03.820 --> 00:08:05.820
I can just say export const

294
00:08:06.700 --> 00:08:09.340
Ensure authenticated.

295
00:08:09.340 --> 00:08:11.700
Now basically what I'm trying to do

296
00:08:11.700 --> 00:08:13.740
here is this is again a function.

297
00:08:13.740 --> 00:08:15.060
Okay, let's say it's an again

298
00:08:15.060 --> 00:08:17.300
async function which has access

299
00:08:17.300 --> 00:08:18.340
to request response.

300
00:08:18.340 --> 00:08:21.300
And next, this middleware ensures

301
00:08:21.300 --> 00:08:22.900
that you have to be logged in.

302
00:08:22.900 --> 00:08:24.980
Okay, that is very simple.

303
00:08:25.940 --> 00:08:29.740
If no request user, this is going

304
00:08:29.740 --> 00:08:32.100
to say return response status,

305
00:08:32.100 --> 00:08:38.419
sorry, response status of 401 JSON.

306
00:08:38.419 --> 00:08:40.419
And I can just say an error that is

307
00:08:41.059 --> 00:08:43.860
you must be authenticated.

308
00:08:43.860 --> 00:08:45.740
But if it is not the case, I can

309
00:08:45.740 --> 00:08:47.320
just call the next function.

310
00:08:47.320 --> 00:08:48.440
So this is a very simple

311
00:08:48.440 --> 00:08:50.000
logic which makes sure that

312
00:08:50.000 --> 00:08:51.560
the user is authenticated.

313
00:08:51.560 --> 00:08:52.920
So that means to use this

314
00:08:52.920 --> 00:08:54.480
particular middleware, what I could

315
00:08:54.480 --> 00:08:56.400
basically do is I can go

316
00:08:56.400 --> 00:08:58.520
into this user route, correct?

317
00:08:58.520 --> 00:09:00.600
And what I can do, I can basically

318
00:09:00.600 --> 00:09:05.080
import something from middleware

319
00:09:05.080 --> 00:09:07.000
auth middleware and I can try

320
00:09:07.000 --> 00:09:09.560
to import the ensure authenticated.

321
00:09:09.560 --> 00:09:12.440
And just by putting this thing here.

322
00:09:12.440 --> 00:09:14.160
Now this particular function

323
00:09:14.160 --> 00:09:16.280
will only run if user exists.

324
00:09:16.280 --> 00:09:17.640
So now I can safely remove

325
00:09:17.640 --> 00:09:19.220
this nice similar.

326
00:09:19.220 --> 00:09:20.100
I can just put it here,

327
00:09:20.100 --> 00:09:21.380
ensure authenticated.

328
00:09:21.380 --> 00:09:23.140
And I can just remove this logic.

329
00:09:23.140 --> 00:09:25.740
Because technically this function

330
00:09:25.740 --> 00:09:27.020
right here, which I am highlighting

331
00:09:27.020 --> 00:09:28.660
will only run if this

332
00:09:28.660 --> 00:09:30.900
middleware calls the next function.

333
00:09:30.900 --> 00:09:32.060
This middleware will call

334
00:09:32.060 --> 00:09:33.100
the next function only

335
00:09:33.100 --> 00:09:34.980
if request user exists.

336
00:09:34.980 --> 00:09:35.420
Nice.

337
00:09:35.420 --> 00:09:37.460
Right, so ensure authenticated

338
00:09:37.460 --> 00:09:39.700
basically can be even used here.

339
00:09:39.700 --> 00:09:41.660
So instead of doing this thing, I can

340
00:09:41.660 --> 00:09:44.300
say import something from dot dot

341
00:09:44.300 --> 00:09:48.500
slash middlewares auth middleware

342
00:09:48.500 --> 00:09:50.900
import ensure authenticated.

343
00:09:50.900 --> 00:09:52.420
Put ensure authenticated as

344
00:09:52.420 --> 00:09:53.540
a middleware on the route

345
00:09:53.540 --> 00:09:55.300
level and remove this.

346
00:09:55.300 --> 00:09:56.260
That's it.

347
00:09:56.260 --> 00:09:57.220
Let's test it out.

348
00:09:57.220 --> 00:09:57.780
Send.

349
00:09:57.780 --> 00:09:59.420
Is it working really nice.

350
00:09:59.420 --> 00:10:00.620
No, auth send.

351
00:10:00.620 --> 00:10:01.780
You can see it's not working.

352
00:10:01.780 --> 00:10:03.460
And if I say bearer token

353
00:10:03.460 --> 00:10:04.820
and Send, you can see.

354
00:10:04.820 --> 00:10:05.300
Nice.

355
00:10:05.300 --> 00:10:05.780
Cool.

356
00:10:06.580 --> 00:10:08.260
Now, similar to this,

357
00:10:08.260 --> 00:10:10.340
similar to this, let's start

358
00:10:10.340 --> 00:10:11.620
adding the authorization.

359
00:10:12.180 --> 00:10:12.500
Correct.

360
00:10:12.500 --> 00:10:13.460
So what is authorization?

361
00:10:14.100 --> 00:10:15.980
Technically what I could do is

362
00:10:15.980 --> 00:10:18.100
I can add a new field here.

363
00:10:18.100 --> 00:10:19.780
Okay, that is a role.

364
00:10:19.780 --> 00:10:21.540
Now role can be basically a string.

365
00:10:21.540 --> 00:10:22.980
Role can be an enum.

366
00:10:22.980 --> 00:10:24.340
So it is basically what I

367
00:10:24.340 --> 00:10:25.340
would like to do is I would

368
00:10:25.340 --> 00:10:27.020
like to create an enum.

369
00:10:27.020 --> 00:10:27.960
So pgenum.

370
00:10:28.500 --> 00:10:34.420
So let's say export const User role.

371
00:10:34.420 --> 00:10:35.300
Enum.

372
00:10:35.300 --> 00:10:37.160
Okay, Equals to pgenum.

373
00:10:37.700 --> 00:10:39.460
Let's call this enum as

374
00:10:39.460 --> 00:10:40.980
user, underscore role.

375
00:10:40.980 --> 00:10:41.540
Okay.

376
00:10:41.540 --> 00:10:45.680
And values can be either a user or

377
00:10:45.680 --> 00:10:47.600
the values can be either an admin.

378
00:10:47.600 --> 00:10:48.720
Let's say these are the only

379
00:10:48.720 --> 00:10:50.000
two available values.

380
00:10:50.000 --> 00:10:51.440
So I can say that, hey,

381
00:10:51.440 --> 00:10:54.240
you are basically a, enum.

382
00:10:54.240 --> 00:10:55.360
Okay, that's great.

383
00:10:55.360 --> 00:10:57.600
And you are not nullable.

384
00:10:57.600 --> 00:10:59.520
And your default value is what?

385
00:10:59.520 --> 00:11:01.320
Your default value is basically user.

386
00:11:01.320 --> 00:11:02.000
Nice.

387
00:11:02.000 --> 00:11:04.400
So this basically adds a role

388
00:11:04.400 --> 00:11:05.920
property to the user.

389
00:11:05.920 --> 00:11:07.240
So let me just do one thing.

390
00:11:07.240 --> 00:11:08.920
Let me just pin up a studio first.

391
00:11:08.920 --> 00:11:11.010
PNPM DB Studio.

392
00:11:11.010 --> 00:11:13.330
Okay, DB Studio enter.

393
00:11:13.330 --> 00:11:14.890
My DB Studio is up and running

394
00:11:14.890 --> 00:11:16.370
on this particular link.

395
00:11:16.370 --> 00:11:19.170
So let me just open the link.

396
00:11:20.610 --> 00:11:21.890
Not, user only num.

397
00:11:21.890 --> 00:11:23.170
I have to copy this.

398
00:11:23.170 --> 00:11:24.450
So I copied the wrong

399
00:11:24.450 --> 00:11:26.290
thing and paste it here.

400
00:11:26.290 --> 00:11:27.970
Now let's wait for a while so

401
00:11:27.970 --> 00:11:29.450
you can see in the users.

402
00:11:29.450 --> 00:11:30.530
Right now there is no role.

403
00:11:30.530 --> 00:11:30.930
Right.

404
00:11:30.930 --> 00:11:32.210
So what I'm going to do, create

405
00:11:32.210 --> 00:11:35.010
a new terminal PNPM DB push.

406
00:11:36.460 --> 00:11:38.460
So this has applied the changes.

407
00:11:38.460 --> 00:11:40.340
Now if I go back and I do

408
00:11:40.340 --> 00:11:41.980
a refresh now, you should be able

409
00:11:41.980 --> 00:11:43.700
to see a role in the users.

410
00:11:43.700 --> 00:11:45.100
So if I just say users,

411
00:11:46.060 --> 00:11:47.100
where can I see?

412
00:11:47.100 --> 00:11:48.620
Okay, let me just remove this.

413
00:11:48.620 --> 00:11:49.740
Can I see the role?

414
00:11:50.780 --> 00:11:51.100
Yes.

415
00:11:51.100 --> 00:11:53.340
So you can see that the role is user.

416
00:11:53.340 --> 00:11:53.740
Right.

417
00:11:54.380 --> 00:11:56.060
Now what I could do is.

418
00:11:56.060 --> 00:11:56.780
That is good.

419
00:11:56.780 --> 00:11:58.020
The role is user.

420
00:11:58.020 --> 00:11:58.780
Very nice.

421
00:11:59.340 --> 00:12:01.470
Technically, when you log in,

422
00:12:01.470 --> 00:12:02.990
okay, when you log in,

423
00:12:03.630 --> 00:12:05.470
what I should do is I should also

424
00:12:05.470 --> 00:12:08.110
put this role in your token.

425
00:12:08.110 --> 00:12:10.150
So when I'm trying to do a login,

426
00:12:10.150 --> 00:12:12.030
I should also query for the role

427
00:12:12.030 --> 00:12:14.510
that is user table dot role.

428
00:12:14.510 --> 00:12:15.550
Okay?

429
00:12:15.550 --> 00:12:17.670
Now in the payload I can

430
00:12:17.670 --> 00:12:19.070
also put a role that is

431
00:12:19.070 --> 00:12:21.550
existing user dot role.

432
00:12:21.550 --> 00:12:22.270
That's it.

433
00:12:22.270 --> 00:12:22.990
Great.

434
00:12:22.990 --> 00:12:24.710
So now the role is also

435
00:12:24.710 --> 00:12:25.950
in the payload.

436
00:12:25.950 --> 00:12:29.480
That means if I log in once again.

437
00:12:29.480 --> 00:12:31.560
Now this is my new token.

438
00:12:31.560 --> 00:12:33.560
I copy this particular token

439
00:12:33.560 --> 00:12:36.600
and I go on to JWT IO website.

440
00:12:36.600 --> 00:12:38.080
Okay, Just for the debugging

441
00:12:38.080 --> 00:12:39.560
purpose and I paste it here.

442
00:12:39.560 --> 00:12:40.920
Now you can see this is what

443
00:12:40.920 --> 00:12:42.400
my token payload looks like.

444
00:12:42.400 --> 00:12:43.720
You can see I have id,

445
00:12:43.720 --> 00:12:46.040
I have email I have name role.

446
00:12:46.600 --> 00:12:47.720
Now technically, this role

447
00:12:47.720 --> 00:12:49.160
is very interesting, right?

448
00:12:49.160 --> 00:12:51.880
Based on this role, what I can do,

449
00:12:51.880 --> 00:12:53.240
I can create one more

450
00:12:53.240 --> 00:12:55.350
middleware that is restricted,

451
00:12:56.380 --> 00:12:58.540
say restrict to admin.

452
00:12:58.540 --> 00:12:59.180
Okay?

453
00:12:59.180 --> 00:13:01.100
Or I can say restrict to role,

454
00:13:01.740 --> 00:13:03.340
which is an async function.

455
00:13:03.340 --> 00:13:04.300
Okay?

456
00:13:04.300 --> 00:13:05.500
What this function

457
00:13:05.500 --> 00:13:07.740
basically takes is a role.

458
00:13:07.740 --> 00:13:09.460
You have to give me a role

459
00:13:09.460 --> 00:13:11.180
which can be either admin

460
00:13:12.060 --> 00:13:13.820
or this can be either user.

461
00:13:13.820 --> 00:13:14.780
Correct?

462
00:13:14.780 --> 00:13:16.580
So this can be either admin or user.

463
00:13:16.580 --> 00:13:17.900
So it's basically a role.

464
00:13:17.900 --> 00:13:18.460
Okay?

465
00:13:19.020 --> 00:13:20.700
Now see, what I can do is I

466
00:13:20.700 --> 00:13:22.960
can return a new function

467
00:13:22.960 --> 00:13:24.760
from here which has request

468
00:13:24.760 --> 00:13:27.840
a response and a next correct.

469
00:13:27.840 --> 00:13:29.240
There is no need to be async.

470
00:13:29.240 --> 00:13:31.880
This is okay, now see what I can do.

471
00:13:31.880 --> 00:13:33.720
We can basically assume the user

472
00:13:33.720 --> 00:13:35.120
is already authenticated.

473
00:13:35.120 --> 00:13:38.200
I can just say if request

474
00:13:38.200 --> 00:13:42.280
user.role is not equals to

475
00:13:42.280 --> 00:13:43.640
this particular role.

476
00:13:43.640 --> 00:13:44.200
Correct.

477
00:13:44.760 --> 00:13:47.000
In this case, I can just say return

478
00:13:47.000 --> 00:13:50.580
response dot status code.

479
00:13:50.580 --> 00:13:51.180
Okay?

480
00:13:51.180 --> 00:13:53.900
That is 4,01 of course,

481
00:13:53.900 --> 00:13:57.100
dot JSON error.

482
00:13:57.100 --> 00:14:02.380
You are not authorized, okay?

483
00:14:02.380 --> 00:14:05.420
To access this resource.

484
00:14:05.420 --> 00:14:06.220
Very nice.

485
00:14:06.780 --> 00:14:09.020
Else, sorry, resource.

486
00:14:09.020 --> 00:14:10.140
Okay, very nice.

487
00:14:10.140 --> 00:14:12.260
But if, if the role exists,

488
00:14:12.260 --> 00:14:14.380
you can just say the return

489
00:14:14.380 --> 00:14:15.850
the next function.

490
00:14:15.850 --> 00:14:16.810
That is it.

491
00:14:16.810 --> 00:14:18.410
Now see what I could do.

492
00:14:18.410 --> 00:14:20.810
It's basically a closure function.

493
00:14:20.810 --> 00:14:23.450
If I call this function

494
00:14:23.450 --> 00:14:26.530
with role as admin, this returns me

495
00:14:26.530 --> 00:14:28.050
a middleware function, right?

496
00:14:28.050 --> 00:14:29.290
This is how I have designed it.

497
00:14:29.290 --> 00:14:30.610
And then this middleware

498
00:14:30.610 --> 00:14:31.489
function can be used.

499
00:14:31.489 --> 00:14:33.370
So it's a closure function.

500
00:14:33.370 --> 00:14:35.250
So that means going on

501
00:14:35.250 --> 00:14:36.490
to the admin routes.

502
00:14:36.490 --> 00:14:39.170
Now I can import an authentic.

503
00:14:39.170 --> 00:14:41.290
Sorry, the restrictor role.

504
00:14:41.290 --> 00:14:42.530
Now technically what I can

505
00:14:42.530 --> 00:14:44.190
do is I can just say construct,

506
00:14:44.900 --> 00:14:46.580
admin restrict.

507
00:14:47.620 --> 00:14:48.140
Okay?

508
00:14:48.140 --> 00:14:51.140
Restrict middleware.

509
00:14:51.140 --> 00:14:51.940
Okay.

510
00:14:51.940 --> 00:14:55.300
Equals to restrict to role admin.

511
00:14:55.300 --> 00:14:55.860
Nice.

512
00:14:55.860 --> 00:14:57.900
And then I can also change

513
00:14:57.900 --> 00:14:59.700
the admin restrict middleware.

514
00:14:59.700 --> 00:15:01.660
Now this particular route is only

515
00:15:01.660 --> 00:15:04.260
and only restricted to the admins.

516
00:15:04.260 --> 00:15:05.300
Let's give it a try.

517
00:15:05.300 --> 00:15:06.900
Okay, so if I copy this

518
00:15:06.900 --> 00:15:08.420
particular token, I have a new

519
00:15:08.420 --> 00:15:10.320
token, paste it and send.

520
00:15:10.320 --> 00:15:11.840
You are not authorized.

521
00:15:11.840 --> 00:15:13.440
You are not authorized.

522
00:15:13.440 --> 00:15:14.080
Why?

523
00:15:14.080 --> 00:15:15.400
Because my role is user.

524
00:15:15.400 --> 00:15:16.080
Correct.

525
00:15:16.080 --> 00:15:17.840
If I go in my database,

526
00:15:17.840 --> 00:15:19.600
I change my role to admin.

527
00:15:19.600 --> 00:15:21.840
I have to now log out and log in.

528
00:15:21.840 --> 00:15:22.960
Basically I have to generate

529
00:15:22.960 --> 00:15:24.360
a new token for myself.

530
00:15:24.360 --> 00:15:24.880
Right?

531
00:15:24.880 --> 00:15:27.120
Because, you might have heard that

532
00:15:27.120 --> 00:15:28.160
whenever there is a problem,

533
00:15:28.720 --> 00:15:31.160
often the admin asks you to hey, can

534
00:15:31.160 --> 00:15:32.800
you please do a logout and login so

535
00:15:32.800 --> 00:15:34.320
that your token is refreshed.

536
00:15:34.320 --> 00:15:36.080
Now my token contains

537
00:15:36.080 --> 00:15:37.580
the role as admin.

538
00:15:37.580 --> 00:15:38.140
Nice.

539
00:15:38.140 --> 00:15:39.340
Now what I can do.

540
00:15:39.340 --> 00:15:41.220
Now if I go here, I replace

541
00:15:41.220 --> 00:15:42.580
my token and I do a send.

542
00:15:42.580 --> 00:15:43.540
Now you can see I'm able

543
00:15:43.540 --> 00:15:45.660
to access this resource, right?

544
00:15:45.660 --> 00:15:48.140
So this is basically kind of

545
00:15:48.140 --> 00:15:49.660
a role based access

546
00:15:49.660 --> 00:15:52.460
control using the middleware.

547
00:15:52.460 --> 00:15:53.659
So congratulations.

548
00:15:53.659 --> 00:15:55.420
Yes, it was that simple to implement.

549
00:15:55.420 --> 00:15:57.180
Okay, so you can have multiple

550
00:15:57.180 --> 00:15:58.740
roles, not only user and admin,

551
00:15:58.740 --> 00:15:59.740
you can have moderator,

552
00:15:59.740 --> 00:16:01.340
you can have multiple roles.

553
00:16:01.340 --> 00:16:02.420
Then you can just create

554
00:16:02.420 --> 00:16:04.420
a middleware, a utility function

555
00:16:04.420 --> 00:16:05.660
which checks for that role

556
00:16:05.660 --> 00:16:07.450
and you can just chain it.

557
00:16:07.450 --> 00:16:08.930
Now technically I don't want

558
00:16:08.930 --> 00:16:10.330
to put it here right.

559
00:16:10.330 --> 00:16:13.690
If you see all the roles here are

560
00:16:13.690 --> 00:16:15.370
going to be restricted to admin.

561
00:16:15.370 --> 00:16:16.970
So what I can do is I can put it

562
00:16:16.970 --> 00:16:19.290
on a router level that is router use

563
00:16:19.290 --> 00:16:21.530
number one is ensure authenticated

564
00:16:21.530 --> 00:16:24.090
and router use admin this thing.

565
00:16:24.090 --> 00:16:25.290
Now I don't have to put

566
00:16:25.290 --> 00:16:26.570
on every route.

567
00:16:26.570 --> 00:16:29.130
So now every route that I create

568
00:16:29.130 --> 00:16:30.450
in this particular file

569
00:16:30.450 --> 00:16:31.970
will use these two middlewares

570
00:16:31.970 --> 00:16:33.370
because these middlewares are

571
00:16:33.370 --> 00:16:35.320
applied on the route level.

572
00:16:35.880 --> 00:16:37.360
So going back test your

573
00:16:37.360 --> 00:16:38.320
implementation, everything

574
00:16:38.320 --> 00:16:39.560
is working fine.

575
00:16:39.560 --> 00:16:40.040
Nice.
