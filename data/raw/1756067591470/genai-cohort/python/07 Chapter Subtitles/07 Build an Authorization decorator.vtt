WEBVTT

1
00:00:00.960 --> 00:00:02.520
All right, so one more type of

2
00:00:02.520 --> 00:00:04.000
decorator that we're going to build.

3
00:00:04.000 --> 00:00:05.480
And in fact we are actually

4
00:00:05.480 --> 00:00:06.360
manually building it.

5
00:00:06.360 --> 00:00:07.840
But you're going to see them in

6
00:00:07.840 --> 00:00:09.760
big frameworks and libraries,

7
00:00:09.760 --> 00:00:11.480
especially in Django, it

8
00:00:11.480 --> 00:00:13.680
is used all over the places.

9
00:00:13.680 --> 00:00:14.440
So we're going to build

10
00:00:14.440 --> 00:00:15.480
a simple decorator.

11
00:00:15.480 --> 00:00:17.680
We're going to face, an error,

12
00:00:17.680 --> 00:00:20.080
and unexpectedly it will come

13
00:00:20.080 --> 00:00:21.080
and then we're going

14
00:00:21.080 --> 00:00:22.320
to learn how to fix them.

15
00:00:22.320 --> 00:00:23.600
And these are the things you learn

16
00:00:23.600 --> 00:00:24.720
in the production only.

17
00:00:24.720 --> 00:00:25.840
So let me go ahead and share

18
00:00:25.840 --> 00:00:26.720
the screen with you.

19
00:00:27.230 --> 00:00:28.670
So I have created a simple

20
00:00:28.670 --> 00:00:30.350
new file which is auth decorator.

21
00:00:30.350 --> 00:00:31.230
Again, it's a really

22
00:00:31.230 --> 00:00:32.229
simple kind of decorator.

23
00:00:32.229 --> 00:00:33.470
You're going to see this a lot.

24
00:00:34.120 --> 00:00:35.670
The first step is always same, so

25
00:00:35.670 --> 00:00:36.990
we're going to borrow some code.

26
00:00:36.990 --> 00:00:39.470
So we'll copy this and paste it.

27
00:00:39.470 --> 00:00:40.910
Whenever we are defining any

28
00:00:40.910 --> 00:00:42.310
decorator, this is the most

29
00:00:42.310 --> 00:00:44.190
common thing that you have to.

30
00:00:44.190 --> 00:00:45.190
Let's just say we want

31
00:00:45.190 --> 00:00:46.750
to define a simple decorator

32
00:00:46.750 --> 00:00:48.590
which says require admin.

33
00:00:48.590 --> 00:00:50.590
So we are creating a wrapper function

34
00:00:50.590 --> 00:00:52.550
that if any function executes,

35
00:00:52.550 --> 00:00:53.950
and I wrap this up without

36
00:00:53.950 --> 00:00:55.710
a function, that means only admin

37
00:00:55.710 --> 00:00:57.720
can actually execute that function.

38
00:00:57.720 --> 00:00:58.920
Pretty useful functionality

39
00:00:58.920 --> 00:00:59.560
to be honest.

40
00:01:00.280 --> 00:01:01.960
And I go ahead and simply accept

41
00:01:01.960 --> 00:01:03.640
function just like this.

42
00:01:03.640 --> 00:01:05.800
And we know this at the rate

43
00:01:05.800 --> 00:01:07.880
wraps to preserve all

44
00:01:07.880 --> 00:01:09.840
of the metadata just like this.

45
00:01:09.840 --> 00:01:11.240
And after that I can say,

46
00:01:11.800 --> 00:01:13.880
let's just say we define a wrapper,

47
00:01:13.880 --> 00:01:16.120
which this time takes user role.

48
00:01:16.680 --> 00:01:18.360
Now wrapper doesn't always

49
00:01:18.360 --> 00:01:19.400
need to take all

50
00:01:19.400 --> 00:01:20.720
the arguments just like this.

51
00:01:20.720 --> 00:01:21.960
If you know that we expect

52
00:01:21.960 --> 00:01:23.360
only one argument to be

53
00:01:23.360 --> 00:01:25.000
passed on, just take that.

54
00:01:25.000 --> 00:01:26.280
If you think that more

55
00:01:26.280 --> 00:01:27.400
will be coming up.

56
00:01:27.400 --> 00:01:29.320
There is no harm in saying args

57
00:01:29.320 --> 00:01:30.720
and keyword args, all of them.

58
00:01:30.720 --> 00:01:32.480
So all of them automatically pass on.

59
00:01:32.480 --> 00:01:34.000
But it's not really precise

60
00:01:34.000 --> 00:01:35.320
and I like precise code.

61
00:01:36.040 --> 00:01:38.160
All right, then we simply go

62
00:01:38.160 --> 00:01:39.600
ahead and check if the user

63
00:01:39.600 --> 00:01:42.520
role is not equals to admin.

64
00:01:42.520 --> 00:01:44.760
We simply go ahead and say

65
00:01:44.760 --> 00:01:46.720
just like this, a simple print

66
00:01:46.720 --> 00:01:48.280
message that says,

67
00:01:49.170 --> 00:01:52.200
something like this, access denied.

68
00:01:53.560 --> 00:01:55.800
And we will say admins only.

69
00:01:55.800 --> 00:01:57.640
So this is an admin only area.

70
00:01:57.640 --> 00:01:59.080
And after that we

71
00:01:59.080 --> 00:02:00.360
put up an else part.

72
00:02:00.360 --> 00:02:02.160
And in the else case we simply go

73
00:02:02.160 --> 00:02:03.840
ahead and say return whatever the

74
00:02:03.840 --> 00:02:06.040
function you are trying to run with

75
00:02:06.040 --> 00:02:07.920
the user role, we'll just return

76
00:02:07.920 --> 00:02:09.639
that as it is so that it can keep on

77
00:02:09.639 --> 00:02:10.440
executing.

78
00:02:10.440 --> 00:02:12.120
And we will also go ahead

79
00:02:12.120 --> 00:02:14.920
and say return the wrapper.

80
00:02:15.720 --> 00:02:16.520
Pretty simple.

81
00:02:16.520 --> 00:02:17.440
We have seen this many

82
00:02:17.440 --> 00:02:18.920
times, no problem at all.

83
00:02:19.690 --> 00:02:21.490
Now we'll see, that this

84
00:02:21.490 --> 00:02:23.050
is how we use Decorator.

85
00:02:23.050 --> 00:02:24.890
And once this decorator is here,

86
00:02:24.890 --> 00:02:26.530
we simply go ahead and say I want

87
00:02:26.530 --> 00:02:28.290
to create another method

88
00:02:28.290 --> 00:02:32.650
which says access tea inventory.

89
00:02:33.530 --> 00:02:35.049
And this is a common thing that

90
00:02:35.049 --> 00:02:36.410
you want to access the inventory.

91
00:02:36.410 --> 00:02:37.930
Somebody will pass me a role that

92
00:02:37.930 --> 00:02:39.970
what role you have so that you

93
00:02:39.970 --> 00:02:42.170
can access the inventory and print

94
00:02:42.170 --> 00:02:45.460
a simple statement that says access

95
00:02:47.780 --> 00:02:52.100
granted to tea inventory.

96
00:02:52.100 --> 00:02:52.900
There we go.

97
00:02:53.460 --> 00:02:55.140
Now let's go ahead and run this one.

98
00:02:55.140 --> 00:02:56.500
I want to run it two times.

99
00:02:57.060 --> 00:02:58.340
Access to inventory.

100
00:02:59.700 --> 00:03:00.580
Oops.

101
00:03:00.580 --> 00:03:03.060
Oh, why I did that.

102
00:03:03.060 --> 00:03:04.740
Access to inventory.

103
00:03:04.740 --> 00:03:06.900
And we will first of all pass

104
00:03:06.900 --> 00:03:08.860
on a user and then we'll go

105
00:03:08.860 --> 00:03:09.940
ahead and pass on admin.

106
00:03:10.980 --> 00:03:12.300
So what do you think will happen

107
00:03:12.300 --> 00:03:13.700
with this piece of code?

108
00:03:13.700 --> 00:03:14.900
It's pretty guessable,

109
00:03:14.900 --> 00:03:15.860
but the execution

110
00:03:16.420 --> 00:03:17.860
will actually shock you a little.

111
00:03:18.420 --> 00:03:20.860
So if the user role is user, then

112
00:03:20.860 --> 00:03:21.980
we simply go ahead and return

113
00:03:21.980 --> 00:03:25.300
the It is not admin, so we'll

114
00:03:25.300 --> 00:03:26.180
just go ahead and print this.

115
00:03:26.180 --> 00:03:27.860
Hey, this is admin, not allowed.

116
00:03:27.860 --> 00:03:30.060
If it is admin, then we'll simply

117
00:03:30.060 --> 00:03:31.140
go ahead and execute this.

118
00:03:31.140 --> 00:03:32.940
So this will execute as it is.

119
00:03:32.940 --> 00:03:34.180
We are not stopping anything.

120
00:03:34.740 --> 00:03:36.420
But to your surprise, if I run

121
00:03:36.420 --> 00:03:37.860
this whole piece of code

122
00:03:38.450 --> 00:03:40.530
and why is it behaving like that?

123
00:03:41.170 --> 00:03:42.930
And I have to say exit.

124
00:03:42.930 --> 00:03:43.610
There we go.

125
00:03:43.610 --> 00:03:45.170
Don't know what happened.

126
00:03:45.170 --> 00:03:47.330
I'll just say Python03.

127
00:03:48.770 --> 00:03:50.610
I am actually in the wrong folder

128
00:03:52.850 --> 00:03:55.970
somehow open an integrated terminal.

129
00:03:55.970 --> 00:03:57.490
This time I'm at right place.

130
00:03:57.490 --> 00:03:58.450
Let's run this.

131
00:03:58.450 --> 00:04:01.170
And this one is 03 and there we go.

132
00:04:01.170 --> 00:04:02.930
Admins only and tea

133
00:04:02.930 --> 00:04:04.050
inventory granted.

134
00:04:04.860 --> 00:04:05.660
So first of all it

135
00:04:05.660 --> 00:04:06.860
actually stopped me.

136
00:04:06.860 --> 00:04:07.860
All right, that's good.

137
00:04:07.860 --> 00:04:08.900
And access granted.

138
00:04:08.900 --> 00:04:11.060
I was expecting that there will

139
00:04:11.060 --> 00:04:12.540
be an error, but it didn't came.

140
00:04:13.300 --> 00:04:15.660
It might come at some places.

141
00:04:15.660 --> 00:04:18.579
So that is okay that it didn't

142
00:04:18.579 --> 00:04:20.300
came, but I was expecting, to be

143
00:04:20.300 --> 00:04:21.700
honest, I was expecting an error

144
00:04:21.700 --> 00:04:23.220
in this one, but that's okay.

145
00:04:23.220 --> 00:04:24.300
I'll tell you the reason why.

146
00:04:24.300 --> 00:04:25.900
It happens sometimes.

147
00:04:25.900 --> 00:04:27.020
Now sometimes when you actually

148
00:04:27.020 --> 00:04:30.100
run these things, you actually have

149
00:04:30.100 --> 00:04:32.020
to explicitly return something.

150
00:04:32.020 --> 00:04:32.940
In all the cases.

151
00:04:33.570 --> 00:04:34.490
In this case we are not

152
00:04:34.490 --> 00:04:35.650
returning anything.

153
00:04:35.650 --> 00:04:36.850
That's okay.

154
00:04:36.850 --> 00:04:38.650
I don't know if in the recent version

155
00:04:38.650 --> 00:04:40.290
of Python they have changed it.

156
00:04:40.290 --> 00:04:41.650
In most of the case.

157
00:04:41.650 --> 00:04:42.770
In all of the all cases, if you

158
00:04:42.770 --> 00:04:43.930
have switch statement, you have

159
00:04:43.930 --> 00:04:44.970
to have to return something.

160
00:04:44.970 --> 00:04:46.410
An explicit return is

161
00:04:46.410 --> 00:04:47.650
required in Python.

162
00:04:47.650 --> 00:04:49.329
So just for the safety you can

163
00:04:49.329 --> 00:04:50.610
just go ahead and say return

164
00:04:50.610 --> 00:04:52.050
and you can simply return none,

165
00:04:52.050 --> 00:04:54.370
which is also a default return.

166
00:04:54.370 --> 00:04:56.090
This will make your program foolproof

167
00:04:56.090 --> 00:04:57.370
and in most of the cases you're

168
00:04:57.370 --> 00:04:59.010
going to see this, we didn't got it

169
00:04:59.010 --> 00:05:01.090
probably my python is Most updated 1

170
00:05:01.930 --> 00:05:03.050
I was expecting an error to be

171
00:05:03.050 --> 00:05:05.170
honest but python sometimes updates

172
00:05:05.170 --> 00:05:07.530
so this will still run this and you

173
00:05:07.530 --> 00:05:09.410
got to learn something new this is

174
00:05:09.410 --> 00:05:10.650
again I would say this is very

175
00:05:10.650 --> 00:05:12.410
optional line you will see them in

176
00:05:12.410 --> 00:05:14.490
some of the older code bases now I

177
00:05:14.490 --> 00:05:16.730
can say that but always keep in mind

178
00:05:16.730 --> 00:05:18.570
writing this explicitly is never

179
00:05:18.570 --> 00:05:20.210
going to hurt you especially if you

180
00:05:20.210 --> 00:05:22.290
are building decorators this is

181
00:05:22.290 --> 00:05:23.810
something that we always use to take

182
00:05:23.810 --> 00:05:25.450
care I'll probably not take care of

183
00:05:25.450 --> 00:05:27.090
them in the future if it works just

184
00:05:27.090 --> 00:05:28.450
like that but I'll still study more

185
00:05:28.450 --> 00:05:30.440
on this and that's how we work we

186
00:05:30.440 --> 00:05:32.040
always study all of us we

187
00:05:32.040 --> 00:05:33.640
continuously learn about the things

188
00:05:33.640 --> 00:05:35.560
that happens in the language if I

189
00:05:35.560 --> 00:05:36.920
happen to find out something new and

190
00:05:36.920 --> 00:05:38.560
interesting I just share that on the

191
00:05:38.560 --> 00:05:40.280
YouTube as well as well as on the

192
00:05:40.280 --> 00:05:42.520
udemy courses that is it for this

193
00:05:42.520 --> 00:05:42.800
video.

194
00:05:42.800 --> 00:05:44.360
Let's catch up in the next one.
