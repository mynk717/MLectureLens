WEBVTT

1
00:00:00.960 --> 00:00:03.040
There are variety of use cases

2
00:00:03.040 --> 00:00:05.680
of decorators, and to be honest, you

3
00:00:05.680 --> 00:00:07.160
actually learn about the decorators

4
00:00:07.160 --> 00:00:09.360
as you use them more in Django.

5
00:00:09.360 --> 00:00:11.120
You will be using a ton of them

6
00:00:11.120 --> 00:00:13.160
in libraries like fastapi.

7
00:00:13.160 --> 00:00:14.000
You actually will be

8
00:00:14.000 --> 00:00:15.120
using a lot of them.

9
00:00:15.120 --> 00:00:16.960
But there are certain decorators

10
00:00:16.960 --> 00:00:18.440
that you want to make them on your

11
00:00:18.440 --> 00:00:20.320
own and that's how you learn them.

12
00:00:20.320 --> 00:00:21.360
So in this video we are going

13
00:00:21.360 --> 00:00:23.600
to build a simple logging decorator.

14
00:00:23.600 --> 00:00:24.720
It's a fun exercise.

15
00:00:24.720 --> 00:00:26.040
You, will absolutely love this.

16
00:00:26.040 --> 00:00:28.030
Let me share the screen with you.

17
00:00:28.030 --> 00:00:29.030
So let me take you directly

18
00:00:29.030 --> 00:00:29.790
on the code part.

19
00:00:29.790 --> 00:00:31.710
We don't need any theory for this.

20
00:00:31.710 --> 00:00:34.270
Let's call this one as 02.

21
00:00:35.390 --> 00:00:36.430
This one will be

22
00:00:37.150 --> 00:00:41.110
logging decorator py.

23
00:00:41.110 --> 00:00:42.110
Of course.

24
00:00:42.110 --> 00:00:44.750
So how does a logging decorator work?

25
00:00:44.750 --> 00:00:46.560
It's actually super simple.

26
00:00:46.560 --> 00:00:47.790
The first basic steps

27
00:00:47.790 --> 00:00:48.950
will always remain same.

28
00:00:48.950 --> 00:00:50.670
So we'll always go ahead and say

29
00:00:50.670 --> 00:00:53.030
from, function tools, let's go

30
00:00:53.030 --> 00:00:54.590
ahead and import the wraps.

31
00:00:59.150 --> 00:01:00.750
It should be, oh, my bad.

32
00:01:01.470 --> 00:01:02.150
It should not be

33
00:01:02.150 --> 00:01:03.790
imported, should be from.

34
00:01:03.790 --> 00:01:04.989
All right, good enough.

35
00:01:04.989 --> 00:01:06.070
Now let's just say we want

36
00:01:06.070 --> 00:01:09.630
to call this one as logactvt.

37
00:01:09.630 --> 00:01:11.069
That's the first part of it.

38
00:01:11.069 --> 00:01:12.390
And we'll take import as

39
00:01:12.390 --> 00:01:13.630
a function, call it as func.

40
00:01:13.630 --> 00:01:15.230
Feel free to call it anything else.

41
00:01:15.230 --> 00:01:18.030
And the job one is to take this

42
00:01:18.910 --> 00:01:22.080
wraps and take this function so that

43
00:01:22.080 --> 00:01:24.240
we have all the values preserved.

44
00:01:24.240 --> 00:01:25.880
Then we define our wrapper function.

45
00:01:25.880 --> 00:01:27.200
It doesn't really need to be called

46
00:01:27.200 --> 00:01:28.920
as wrapper, but wrapper makes sense.

47
00:01:29.480 --> 00:01:31.160
So we have the wrapper.

48
00:01:31.160 --> 00:01:32.760
Now here's the interesting part.

49
00:01:32.760 --> 00:01:34.760
This function might also

50
00:01:34.760 --> 00:01:36.520
accept some arguments

51
00:01:36.520 --> 00:01:38.840
or parameters in that case.

52
00:01:38.840 --> 00:01:40.640
So there could be arguments, or

53
00:01:40.640 --> 00:01:41.680
there could be key value

54
00:01:41.680 --> 00:01:43.200
arguments or keyword arguments.

55
00:01:43.200 --> 00:01:44.600
I don't know which one are coming up.

56
00:01:44.600 --> 00:01:45.960
So in that case, what you do is

57
00:01:45.960 --> 00:01:47.740
you take the wrapper and you

58
00:01:47.740 --> 00:01:49.460
simply go ahead and say, hey,

59
00:01:49.460 --> 00:01:50.900
whatever, I don't know the

60
00:01:50.900 --> 00:01:52.260
numbers of it, whatever the

61
00:01:52.260 --> 00:01:53.500
args are coming in, I'll

62
00:01:53.500 --> 00:01:54.740
happily accept that.

63
00:01:54.740 --> 00:01:56.340
I will also go ahead and accept

64
00:01:56.340 --> 00:01:58.580
all the keyword orgs

65
00:01:58.580 --> 00:01:59.700
that are also coming in.

66
00:01:59.700 --> 00:02:01.300
I'll take them as well.

67
00:02:01.300 --> 00:02:02.460
And then I'll just go

68
00:02:02.460 --> 00:02:03.780
ahead and execute you.

69
00:02:03.780 --> 00:02:04.660
I'll return

70
00:02:04.660 --> 00:02:06.100
some interesting stuff as well.

71
00:02:06.100 --> 00:02:08.580
But this function will execute

72
00:02:08.580 --> 00:02:09.979
and will return you the results.

73
00:02:09.979 --> 00:02:11.020
So I'll just go ahead and say,

74
00:02:11.020 --> 00:02:12.660
hey, function, just execute that.

75
00:02:12.660 --> 00:02:14.850
And also make sure you don't forget

76
00:02:14.850 --> 00:02:16.330
to take your parameters.

77
00:02:16.330 --> 00:02:17.170
So I'll just go ahead

78
00:02:17.170 --> 00:02:19.210
and say args just like that.

79
00:02:19.210 --> 00:02:20.770
And I will also go ahead

80
00:02:20.770 --> 00:02:23.210
and say take your keyword args.

81
00:02:23.210 --> 00:02:24.170
There we go.

82
00:02:24.170 --> 00:02:25.050
This is all good.

83
00:02:25.050 --> 00:02:26.570
And finally we go ahead

84
00:02:26.570 --> 00:02:28.090
and say return the result.

85
00:02:28.650 --> 00:02:30.570
And this is what we result here.

86
00:02:30.570 --> 00:02:32.530
And here also we go ahead

87
00:02:32.530 --> 00:02:33.570
and don't worry, I'll show you

88
00:02:33.570 --> 00:02:35.370
the working part as well.

89
00:02:36.490 --> 00:02:38.170
But this is not all it

90
00:02:38.170 --> 00:02:39.010
we have done this.

91
00:02:39.010 --> 00:02:40.250
The job is actually done.

92
00:02:40.250 --> 00:02:41.450
You have seen how the keyword

93
00:02:41.450 --> 00:02:42.890
arguments can be taken because here

94
00:02:42.890 --> 00:02:44.330
you are taking the whole function

95
00:02:44.330 --> 00:02:46.310
along with every detail that

96
00:02:46.310 --> 00:02:47.990
comes up here in the wrapper.

97
00:02:47.990 --> 00:02:49.390
Whatever the values are being passed

98
00:02:49.390 --> 00:02:51.710
on can be actually imported up here.

99
00:02:51.710 --> 00:02:52.910
Because this function actually

100
00:02:52.910 --> 00:02:54.350
has a linking direct.

101
00:02:54.350 --> 00:02:55.670
And when you're calling the function

102
00:02:55.670 --> 00:02:56.830
you're further down the line

103
00:02:56.830 --> 00:02:58.110
passing on these value here.

104
00:02:58.110 --> 00:03:00.030
So super simple, super easy.

105
00:03:00.030 --> 00:03:01.550
But the only thing that we haven't

106
00:03:01.550 --> 00:03:03.230
done is we haven't said which

107
00:03:03.230 --> 00:03:05.150
function is calling and which

108
00:03:05.150 --> 00:03:06.390
function has finished calling.

109
00:03:06.390 --> 00:03:08.550
So just before it calls let's add

110
00:03:08.550 --> 00:03:10.910
a print statement and the print

111
00:03:10.910 --> 00:03:12.470
statements will be a formatter

112
00:03:12.470 --> 00:03:14.190
string which will say calling.

113
00:03:14.970 --> 00:03:17.050
And then we'll use a function name.

114
00:03:17.050 --> 00:03:18.170
So what's our function name?

115
00:03:18.170 --> 00:03:19.050
Super easy.

116
00:03:19.050 --> 00:03:21.130
We can just call this func

117
00:03:21.130 --> 00:03:24.250
dot underscore, underscore name,

118
00:03:24.250 --> 00:03:25.770
underscore, underscore or

119
00:03:25.770 --> 00:03:27.130
in short dunder.

120
00:03:27.130 --> 00:03:28.370
So this function, whatever is

121
00:03:28.370 --> 00:03:29.770
there, it actually comes up.

122
00:03:29.770 --> 00:03:30.849
We simply call that.

123
00:03:30.849 --> 00:03:32.890
Let's go ahead and say this time

124
00:03:32.890 --> 00:03:36.250
this one will be finished.

125
00:03:36.250 --> 00:03:37.410
And our library is

126
00:03:37.410 --> 00:03:38.330
actually interesting one.

127
00:03:38.330 --> 00:03:41.040
So it actually includes some of the.

128
00:03:41.040 --> 00:03:43.840
The tick as well, not rake.

129
00:03:43.840 --> 00:03:44.640
There we go.

130
00:03:44.640 --> 00:03:46.160
So it actually uses a tick

131
00:03:46.160 --> 00:03:47.480
that hey, finished calling

132
00:03:47.480 --> 00:03:49.960
the function and once it

133
00:03:49.960 --> 00:03:51.520
calls let's use another one.

134
00:03:52.560 --> 00:03:53.760
So this one looks good.

135
00:03:53.760 --> 00:03:55.840
So the rocket is actually calling

136
00:03:55.840 --> 00:03:57.160
at least makes it interesting.

137
00:03:57.160 --> 00:03:58.040
So how we're going to use

138
00:03:58.040 --> 00:03:59.360
this, that's interesting.

139
00:03:59.360 --> 00:04:00.200
You simply go ahead

140
00:04:00.200 --> 00:04:01.400
and say logactivity.

141
00:04:01.400 --> 00:04:01.920
That is it.

142
00:04:01.920 --> 00:04:03.200
Now you can define the function.

143
00:04:03.200 --> 00:04:04.560
Let's just say our function is

144
00:04:05.280 --> 00:04:06.740
brewing chai.

145
00:04:06.740 --> 00:04:07.460
You thought we were going

146
00:04:07.460 --> 00:04:08.180
to leave the chai?

147
00:04:08.180 --> 00:04:09.700
No, absolutely not.

148
00:04:09.700 --> 00:04:11.140
And we simply go ahead and pass

149
00:04:11.140 --> 00:04:12.980
on whatever the type we are getting.

150
00:04:12.980 --> 00:04:14.700
Maybe we can pass on more argument.

151
00:04:14.700 --> 00:04:15.780
No problem there.

152
00:04:15.780 --> 00:04:17.620
I will just go ahead and print

153
00:04:17.620 --> 00:04:18.860
with a formatted

154
00:04:18.860 --> 00:04:22.260
statement that says brewing.

155
00:04:22.900 --> 00:04:24.500
Should have written that correctly.

156
00:04:25.780 --> 00:04:26.740
Brewing.

157
00:04:26.740 --> 00:04:28.540
And then whatever the type,

158
00:04:28.540 --> 00:04:29.940
you give me chai.

159
00:04:30.500 --> 00:04:31.620
All right, good enough.

160
00:04:31.620 --> 00:04:33.300
And let's not forget

161
00:04:33.300 --> 00:04:37.660
to call this so brew chai.

162
00:04:37.660 --> 00:04:41.500
And we're going to call masala chai.

163
00:04:42.220 --> 00:04:43.580
All right, pretty interesting.

164
00:04:43.580 --> 00:04:44.940
And hope you have learned something

165
00:04:44.940 --> 00:04:46.220
about this keyword.

166
00:04:46.220 --> 00:04:48.340
This is little bit awkward at first,

167
00:04:48.340 --> 00:04:49.700
but eventually you get the habit

168
00:04:49.700 --> 00:04:51.980
of it that this is how I write it.

169
00:04:51.980 --> 00:04:53.420
Let's go ahead and run this.

170
00:04:53.420 --> 00:04:55.220
This will be Python 3 we'll

171
00:04:55.220 --> 00:04:57.380
be using 02 and there we go.

172
00:04:57.380 --> 00:04:59.310
So notice here any function you

173
00:04:59.310 --> 00:05:00.630
pass on into this one with

174
00:05:00.630 --> 00:05:02.150
whatever the data type it actually

175
00:05:02.150 --> 00:05:03.310
goes ahead and work with that.

176
00:05:03.310 --> 00:05:05.430
So notice here it calls the brewchai

177
00:05:05.430 --> 00:05:07.190
and we have designed a really

178
00:05:07.190 --> 00:05:09.110
pretty custom logging for us.

179
00:05:09.110 --> 00:05:10.430
Now the advantage of this if

180
00:05:10.430 --> 00:05:11.710
I change this one let's just

181
00:05:11.710 --> 00:05:12.870
say instead of the type I

182
00:05:12.870 --> 00:05:15.310
also go ahead and say milk.

183
00:05:15.310 --> 00:05:17.430
The default value is going to be

184
00:05:17.430 --> 00:05:19.670
a simple string that says no

185
00:05:19.670 --> 00:05:21.390
and I can just pass on more

186
00:05:21.390 --> 00:05:24.160
values to it brewing chai and

187
00:05:25.520 --> 00:05:28.600
milk status and then we go

188
00:05:28.600 --> 00:05:30.880
ahead and simply print out the

189
00:05:30.880 --> 00:05:31.520
milk here.

190
00:05:31.520 --> 00:05:32.840
So notice here we have changed the

191
00:05:32.840 --> 00:05:35.000
function without worrying about I

192
00:05:35.000 --> 00:05:36.360
don't really care what my wrapper

193
00:05:36.360 --> 00:05:38.040
does, I just focus on building my

194
00:05:38.040 --> 00:05:40.760
function itself and we simply

195
00:05:40.760 --> 00:05:43.840
accept more parameters now even the

196
00:05:43.840 --> 00:05:45.400
keyword arguments Pretty

197
00:05:45.400 --> 00:05:46.880
interesting isn't it?

198
00:05:46.880 --> 00:05:48.120
This is actually really fun

199
00:05:48.120 --> 00:05:49.720
and this is how in general you

200
00:05:49.720 --> 00:05:51.770
build the loggers in decorator.

201
00:05:51.770 --> 00:05:52.610
Hope you have enjoyed this.

202
00:05:52.610 --> 00:05:54.010
Do rate us and let's catch

203
00:05:54.010 --> 00:05:54.810
up in next video.
