WEBVTT

1
00:00:00.880 --> 00:00:02.920
All right, so we have our very first

2
00:00:02.920 --> 00:00:04.760
problem already in front of us.

3
00:00:04.760 --> 00:00:06.040
Let me remove myself from

4
00:00:06.040 --> 00:00:07.520
here so that we can focus fully

5
00:00:07.520 --> 00:00:09.040
on the screen itself.

6
00:00:09.040 --> 00:00:10.280
So notice here we have

7
00:00:10.280 --> 00:00:11.440
a problem statement written.

8
00:00:11.440 --> 00:00:13.040
And just like previous ones, we will

9
00:00:13.040 --> 00:00:15.400
just focus on one thing first.

10
00:00:15.400 --> 00:00:16.840
Understand the problem, and then

11
00:00:16.840 --> 00:00:18.720
we'll write the code for it.

12
00:00:18.720 --> 00:00:19.640
Let's prepare the code

13
00:00:19.640 --> 00:00:21.160
material first because we have

14
00:00:21.160 --> 00:00:22.280
to create a new folder.

15
00:00:22.280 --> 00:00:26.160
Let's call this one as 04 loops.

16
00:00:26.800 --> 00:00:28.400
So much code that we have written.

17
00:00:28.400 --> 00:00:29.440
Let me write that again.

18
00:00:30.000 --> 00:00:31.360
Made a mistake.

19
00:00:31.360 --> 00:00:32.200
Mistakes are part

20
00:00:32.200 --> 00:00:33.040
of writing the code.

21
00:00:33.040 --> 00:00:35.260
We'll call them as loop or loops.

22
00:00:35.260 --> 00:00:37.280
Both are interchangeable word.

23
00:00:37.280 --> 00:00:38.640
So, all right, what's the problem?

24
00:00:38.640 --> 00:00:39.520
What kind of software

25
00:00:39.520 --> 00:00:40.240
we want to build?

26
00:00:40.800 --> 00:00:42.200
The software is pretty easy.

27
00:00:42.200 --> 00:00:44.720
A T stall owner has a digital

28
00:00:44.720 --> 00:00:46.160
token display.

29
00:00:46.160 --> 00:00:46.680
All right.

30
00:00:46.680 --> 00:00:47.160
Pretty common.

31
00:00:47.160 --> 00:00:47.880
We have seen that

32
00:00:47.880 --> 00:00:48.880
in the queue system.

33
00:00:49.460 --> 00:00:50.880
Might be T staller, might be

34
00:00:50.880 --> 00:00:53.140
in the hospital queues everywhere.

35
00:00:53.140 --> 00:00:54.500
For every customer in line,

36
00:00:54.500 --> 00:00:56.020
a token number is printed

37
00:00:56.020 --> 00:00:57.500
and chai is served.

38
00:00:57.500 --> 00:01:00.300
Okay, so task use a for loop

39
00:01:00.300 --> 00:01:02.180
to generate a token number between

40
00:01:02.180 --> 00:01:05.099
from 1 and 10 using range.

41
00:01:05.099 --> 00:01:06.300
So we'll see the implementation

42
00:01:06.300 --> 00:01:07.380
of range as well.

43
00:01:07.380 --> 00:01:09.140
And print servingchai

44
00:01:09.140 --> 00:01:11.220
to token and then also print

45
00:01:11.220 --> 00:01:12.980
the token number as well.

46
00:01:12.980 --> 00:01:14.020
So this might sound.

47
00:01:14.020 --> 00:01:15.260
Okay, I don't know how

48
00:01:15.260 --> 00:01:16.540
to even start with that.

49
00:01:16.540 --> 00:01:17.900
So because this is all

50
00:01:17.900 --> 00:01:19.180
new, you haven't looped

51
00:01:19.180 --> 00:01:20.340
through anything at all.

52
00:01:20.340 --> 00:01:22.330
So, so how we can print this.

53
00:01:22.330 --> 00:01:23.690
And if you see this closely,

54
00:01:23.690 --> 00:01:24.770
the goal is pretty simple.

55
00:01:24.770 --> 00:01:26.530
The first goal is learn how to use

56
00:01:26.530 --> 00:01:27.850
range so that you can generate

57
00:01:27.850 --> 00:01:29.970
number between 1 and 10 and then

58
00:01:29.970 --> 00:01:31.810
simply print this message 10 times.

59
00:01:31.810 --> 00:01:33.170
But the only thing that's

60
00:01:33.170 --> 00:01:34.850
changing all the 10 times is

61
00:01:34.850 --> 00:01:37.090
the number, hashtag, then

62
00:01:37.090 --> 00:01:38.250
whatever the number is here.

63
00:01:38.250 --> 00:01:39.210
So that should be pretty.

64
00:01:39.210 --> 00:01:40.570
Okay, let me walk you

65
00:01:40.570 --> 00:01:41.370
through with the syntax.

66
00:01:41.370 --> 00:01:42.130
And I think this is one

67
00:01:42.130 --> 00:01:43.770
of the best way to learn about this.

68
00:01:43.770 --> 00:01:45.330
So we'll create the new file

69
00:01:45.330 --> 00:01:46.690
and I will call this one

70
00:01:46.690 --> 00:01:48.830
as, let's just say 01.

71
00:01:48.830 --> 00:01:52.590
And this will be token dispenser.

72
00:01:52.590 --> 00:01:53.670
That's what it is doing.

73
00:01:53.670 --> 00:01:55.390
It's dispensing the token.

74
00:01:55.390 --> 00:01:56.110
Of course we have

75
00:01:56.110 --> 00:01:57.710
to go through with py.

76
00:01:57.710 --> 00:02:00.470
All right, I'll, shut up my AI.

77
00:02:00.470 --> 00:02:01.910
Otherwise it will disturb us.

78
00:02:01.910 --> 00:02:03.710
There we go, moving nicely.

79
00:02:03.710 --> 00:02:05.710
And let me expand this.

80
00:02:05.710 --> 00:02:07.950
All right, so how do we start Loop?

81
00:02:07.950 --> 00:02:09.750
Loop always starts with the keyword

82
00:02:09.750 --> 00:02:11.430
for yes, there is another one while,

83
00:02:11.430 --> 00:02:13.470
but this is always how it starts.

84
00:02:13.470 --> 00:02:15.680
Then you simply declare a variable.

85
00:02:15.680 --> 00:02:17.600
I will call this variable as token.

86
00:02:17.600 --> 00:02:18.480
Now feel free to call

87
00:02:18.480 --> 00:02:19.560
this as anything.

88
00:02:19.560 --> 00:02:21.120
This is just a Variable.

89
00:02:21.120 --> 00:02:22.200
Now once you have decided

90
00:02:22.200 --> 00:02:23.360
the variable, then you put up

91
00:02:23.360 --> 00:02:25.520
the keyword in and then you decide

92
00:02:25.520 --> 00:02:27.240
where you want to loop through.

93
00:02:27.240 --> 00:02:29.280
This is the range you give and this

94
00:02:29.280 --> 00:02:31.880
can be any iteratable object, it can

95
00:02:31.880 --> 00:02:33.680
be a list, it can also be a string.

96
00:02:33.680 --> 00:02:34.840
But in this case we will

97
00:02:34.840 --> 00:02:36.480
learn how the range works.

98
00:02:36.480 --> 00:02:38.000
So this is range.

99
00:02:38.000 --> 00:02:39.400
This automatically comes

100
00:02:39.400 --> 00:02:40.200
up with the python.

101
00:02:40.200 --> 00:02:43.350
And here you give a start and a stop

102
00:02:43.350 --> 00:02:44.710
range to this one.

103
00:02:44.710 --> 00:02:46.350
So my starting point is one,

104
00:02:46.350 --> 00:02:47.430
I want to start with one

105
00:02:47.430 --> 00:02:48.750
and I want to go till the 10.

106
00:02:48.750 --> 00:02:50.830
So I will just put 11 here because

107
00:02:50.830 --> 00:02:52.670
range are not inclusive in

108
00:02:52.670 --> 00:02:54.394
the manner so it will start with 1,

109
00:02:54.394 --> 00:02:57.430
1, 2, 3 so on will go till the 10.

110
00:02:57.430 --> 00:02:58.710
As soon as it goes 11,

111
00:02:58.710 --> 00:03:00.310
this is not inclusive.

112
00:03:00.310 --> 00:03:02.390
Then hit a column and then hit enter.

113
00:03:02.390 --> 00:03:04.070
Automatically the indentation comes

114
00:03:04.070 --> 00:03:04.270
up.

115
00:03:04.270 --> 00:03:05.430
So I'll just go ahead and say

116
00:03:05.430 --> 00:03:07.430
print and then the message,

117
00:03:07.430 --> 00:03:08.110
what's the message?

118
00:03:08.110 --> 00:03:10.670
We have to get serving chai to token

119
00:03:10.670 --> 00:03:12.110
and then token number as well.

120
00:03:12.110 --> 00:03:13.350
So we'll just go ahead and say

121
00:03:13.350 --> 00:03:17.670
serving chai to token and then put

122
00:03:17.670 --> 00:03:20.550
up a hash and then the token number.

123
00:03:20.550 --> 00:03:22.150
So this token, the variable

124
00:03:22.150 --> 00:03:23.549
that we have declared here, this

125
00:03:23.549 --> 00:03:24.710
could be anything right now

126
00:03:24.710 --> 00:03:26.030
token makes sense for us so

127
00:03:26.030 --> 00:03:27.350
we are calling it as token.

128
00:03:27.350 --> 00:03:28.390
But this could be anything.

129
00:03:28.390 --> 00:03:29.270
This could be hitesh.

130
00:03:29.270 --> 00:03:30.390
This could be chai, this could

131
00:03:30.390 --> 00:03:31.830
be index, whatever you like.

132
00:03:31.830 --> 00:03:33.800
This will be the range will keep

133
00:03:33.800 --> 00:03:34.840
on producing the number.

134
00:03:34.840 --> 00:03:36.400
For example 1, the variable

135
00:03:36.400 --> 00:03:38.120
will first iteration it will

136
00:03:38.120 --> 00:03:40.160
go ahead and say that hey,

137
00:03:40.160 --> 00:03:41.760
this is now number one.

138
00:03:41.760 --> 00:03:43.440
So let's draw actually a diagram

139
00:03:43.440 --> 00:03:44.600
to understand this a little

140
00:03:44.600 --> 00:03:45.600
bit that how the whole

141
00:03:45.600 --> 00:03:47.120
processing actually works.

142
00:03:47.120 --> 00:03:48.560
So this is your range.

143
00:03:48.560 --> 00:03:50.200
So in this range your numbers

144
00:03:50.200 --> 00:03:51.160
will keep on starting.

145
00:03:51.160 --> 00:03:52.800
So I just say that hey, in the range

146
00:03:52.800 --> 00:03:54.640
I will have the number one first.

147
00:03:54.640 --> 00:03:56.040
And we have also created

148
00:03:56.040 --> 00:03:57.080
a variable here.

149
00:03:57.080 --> 00:04:00.640
That variable is token token.

150
00:04:00.640 --> 00:04:02.200
And the value of the token

151
00:04:02.200 --> 00:04:03.800
right now is exactly what

152
00:04:03.800 --> 00:04:05.080
you have produced here.

153
00:04:05.080 --> 00:04:06.240
So I'll just go ahead and come

154
00:04:06.240 --> 00:04:08.320
up here and then simply you do what

155
00:04:08.320 --> 00:04:09.960
is the task that I have to do.

156
00:04:09.960 --> 00:04:11.160
So everything that you see after

157
00:04:11.160 --> 00:04:12.640
indentation, this is the task.

158
00:04:12.640 --> 00:04:14.240
So I will just go ahead and say hey,

159
00:04:14.240 --> 00:04:16.360
I want to produce or do a task.

160
00:04:16.360 --> 00:04:17.200
So I'll just go ahead

161
00:04:17.200 --> 00:04:19.079
and put up a task here.

162
00:04:19.079 --> 00:04:19.880
There we go.

163
00:04:19.880 --> 00:04:21.200
We do a task like this.

164
00:04:21.200 --> 00:04:22.680
So I'll just shrink this

165
00:04:23.320 --> 00:04:24.760
because it doesn't make sense

166
00:04:26.020 --> 00:04:27.220
to have it big and wide.

167
00:04:27.220 --> 00:04:28.860
Whatever the task is, it could be one

168
00:04:28.860 --> 00:04:30.300
line of task, it could be hundred

169
00:04:30.300 --> 00:04:31.940
line of task, doesn't really matter.

170
00:04:32.500 --> 00:04:34.420
So as long as we are keeping

171
00:04:34.420 --> 00:04:35.580
printing this range.

172
00:04:35.580 --> 00:04:37.180
So notice here the range is 1.

173
00:04:37.180 --> 00:04:38.380
So first of all it will go

174
00:04:38.380 --> 00:04:39.940
ahead and do this task.

175
00:04:39.940 --> 00:04:41.380
Then it will come back again.

176
00:04:41.380 --> 00:04:42.300
The range will again

177
00:04:42.300 --> 00:04:43.220
produce a new number.

178
00:04:43.220 --> 00:04:44.580
So it will be two.

179
00:04:44.580 --> 00:04:46.260
This number will also be two.

180
00:04:46.260 --> 00:04:48.140
It will again go ahead and say that.

181
00:04:48.140 --> 00:04:49.220
Hey, now we want

182
00:04:49.220 --> 00:04:50.420
to print this one here.

183
00:04:50.990 --> 00:04:52.430
Again, sorry for the 2a,

184
00:04:52.430 --> 00:04:53.270
it's actually 2.

185
00:04:53.270 --> 00:04:54.070
Then we'll go ahead

186
00:04:54.070 --> 00:04:55.310
and change the number 3.

187
00:04:55.310 --> 00:04:56.910
This will also get 3.

188
00:04:56.910 --> 00:04:57.630
So the display

189
00:04:57.630 --> 00:04:58.630
of the variable will be 3.

190
00:04:58.630 --> 00:04:59.510
So we'll just go ahead

191
00:04:59.510 --> 00:05:01.070
and display it like 3.

192
00:05:01.070 --> 00:05:02.510
Eventually the number will

193
00:05:02.510 --> 00:05:03.790
reach to a point where

194
00:05:03.790 --> 00:05:05.230
it is out of the range.

195
00:05:05.230 --> 00:05:06.670
We don't have any range.

196
00:05:06.670 --> 00:05:08.136
So it will go to 11.

197
00:05:08.136 --> 00:05:09.430
11 we don't want to print.

198
00:05:09.430 --> 00:05:10.670
So it will just end it up there.

199
00:05:10.670 --> 00:05:12.670
And just before that it will be 10.

200
00:05:12.670 --> 00:05:13.590
So the number here will

201
00:05:13.590 --> 00:05:15.350
become 10 and for the 10

202
00:05:15.350 --> 00:05:17.010
type it will go ahead.

203
00:05:17.010 --> 00:05:17.570
Oops.

204
00:05:17.570 --> 00:05:19.490
It will go ahead and print this one.

205
00:05:19.490 --> 00:05:20.970
So this will be the last one.

206
00:05:20.970 --> 00:05:22.610
So the 10th number will be last.

207
00:05:22.610 --> 00:05:23.890
That is how it works.

208
00:05:23.890 --> 00:05:24.610
Pretty simple.

209
00:05:24.610 --> 00:05:25.970
You asked it to work on 10

210
00:05:25.970 --> 00:05:27.450
times, it is working 10 times.

211
00:05:27.450 --> 00:05:28.650
That's the most simplest

212
00:05:28.650 --> 00:05:29.810
and basic loop.

213
00:05:29.810 --> 00:05:31.330
Let's go ahead and run this

214
00:05:31.330 --> 00:05:32.530
so that we can just finally

215
00:05:32.530 --> 00:05:34.050
validate what's going on.

216
00:05:34.050 --> 00:05:35.210
So I'll just go ahead and say

217
00:05:35.210 --> 00:05:37.250
hey Python, I want to run

218
00:05:37.250 --> 00:05:40.610
inside the 04 and probably I want

219
00:05:40.610 --> 00:05:42.370
to wrong one, delete this.

220
00:05:43.220 --> 00:05:44.500
Open an integrated terminal

221
00:05:44.500 --> 00:05:48.580
on this one and we'll say Python 3.

222
00:05:48.580 --> 00:05:50.380
Just run this file and there we go.

223
00:05:50.380 --> 00:05:52.220
So we can see we just added

224
00:05:52.220 --> 00:05:53.700
the value token here.

225
00:05:53.700 --> 00:05:56.220
And notice here it just always says

226
00:05:56.220 --> 00:05:58.020
token, token, token just like that.

227
00:05:58.020 --> 00:06:00.500
So this is a little bit of a strange

228
00:06:00.500 --> 00:06:01.700
that why we got this one.

229
00:06:01.700 --> 00:06:02.700
I'm pretty sure you might

230
00:06:02.700 --> 00:06:04.180
have debugged this already.

231
00:06:04.180 --> 00:06:05.740
This is not a special string

232
00:06:05.740 --> 00:06:06.580
that we are printing.

233
00:06:06.580 --> 00:06:07.860
So what wrong we are doing?

234
00:06:07.860 --> 00:06:10.070
Just forgotten a F here.

235
00:06:10.070 --> 00:06:11.590
I hope that was easy to catch.

236
00:06:11.590 --> 00:06:12.870
This was not intentional.

237
00:06:12.870 --> 00:06:14.030
I also did a mistake.

238
00:06:14.030 --> 00:06:15.790
But again, don't panic

239
00:06:15.790 --> 00:06:16.350
on the mistake.

240
00:06:16.350 --> 00:06:16.870
It's okay.

241
00:06:16.870 --> 00:06:18.710
We always fix those mistakes.

242
00:06:18.710 --> 00:06:19.990
So we can see now we have

243
00:06:19.990 --> 00:06:21.430
all the values till the 10.

244
00:06:21.430 --> 00:06:23.350
And once the 10 was hit, that is it.

245
00:06:23.350 --> 00:06:24.630
The loop ended.

246
00:06:24.630 --> 00:06:26.190
Pretty good example to work on with.

247
00:06:26.190 --> 00:06:27.390
I hope you have enjoyed this.

248
00:06:27.390 --> 00:06:29.390
Along with this nice small diagram,

249
00:06:29.390 --> 00:06:31.110
we will be keep on drawing them.

250
00:06:31.110 --> 00:06:32.270
That is it for this video.

251
00:06:32.270 --> 00:06:34.070
Let's catch up in the next one.
