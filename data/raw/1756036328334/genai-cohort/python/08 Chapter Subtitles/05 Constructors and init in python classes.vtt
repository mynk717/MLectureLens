WEBVTT

1
00:00:01.040 --> 00:00:02.240
Hope you are having fun because

2
00:00:02.240 --> 00:00:04.000
I am having so much fun

3
00:00:04.000 --> 00:00:05.600
in teaching all of these context

4
00:00:05.600 --> 00:00:07.600
and great examples as well.

5
00:00:07.600 --> 00:00:08.840
Hope you are enjoying them

6
00:00:08.840 --> 00:00:10.280
and you have rated us as well.

7
00:00:10.280 --> 00:00:10.800
This is.

8
00:00:10.800 --> 00:00:12.160
I know I've been saying this a lot,

9
00:00:12.160 --> 00:00:13.240
but if you look at the number

10
00:00:13.240 --> 00:00:14.560
of ratings and number of people who

11
00:00:14.560 --> 00:00:15.880
are enjoying the courses, there is

12
00:00:15.880 --> 00:00:17.880
a strike difference between them.

13
00:00:17.880 --> 00:00:19.400
And we pour in all of our

14
00:00:19.400 --> 00:00:20.880
heart and soul into this.

15
00:00:20.880 --> 00:00:22.400
Just small kind words will

16
00:00:22.400 --> 00:00:23.600
make this course as world's

17
00:00:23.600 --> 00:00:24.760
best course and people will be

18
00:00:24.760 --> 00:00:26.080
able to benefit from it.

19
00:00:26.080 --> 00:00:27.040
That's all I want.

20
00:00:27.040 --> 00:00:28.200
All right, so let me take you

21
00:00:28.200 --> 00:00:29.920
onto the screen again and

22
00:00:29.920 --> 00:00:31.160
first of all, what we're about

23
00:00:31.160 --> 00:00:33.520
to see, we're about to see the

24
00:00:33.520 --> 00:00:35.040
INIT function, which is a

25
00:00:35.040 --> 00:00:36.160
pretty interesting and

26
00:00:36.160 --> 00:00:37.000
important function.

27
00:00:37.000 --> 00:00:38.120
And I'll show you why is

28
00:00:38.120 --> 00:00:39.360
it so much important.

29
00:00:39.360 --> 00:00:41.150
We again, don't need to have

30
00:00:41.150 --> 00:00:42.640
any diagrams for this.

31
00:00:42.640 --> 00:00:44.080
Notice this here.

32
00:00:44.080 --> 00:00:45.480
So this is the function or

33
00:00:45.480 --> 00:00:46.880
the class that we have created.

34
00:00:46.880 --> 00:00:48.440
As soon as I create this object,

35
00:00:48.440 --> 00:00:50.560
it automatically gets to property

36
00:00:50.560 --> 00:00:52.400
the size and the describe.

37
00:00:52.400 --> 00:00:53.760
It has access to all of this.

38
00:00:54.310 --> 00:00:55.910
But maybe I want

39
00:00:55.910 --> 00:00:56.990
to change it something.

40
00:00:56.990 --> 00:00:57.630
I want that.

41
00:00:57.630 --> 00:00:58.470
Hey, whenever you create

42
00:00:58.470 --> 00:01:00.110
an object, just pass me some data

43
00:01:00.110 --> 00:01:01.990
so that I can make the first

44
00:01:01.990 --> 00:01:03.110
reference really nice.

45
00:01:03.110 --> 00:01:05.190
Maybe every single object that

46
00:01:05.190 --> 00:01:06.950
creates have this property always.

47
00:01:07.590 --> 00:01:08.590
How do I do this?

48
00:01:08.590 --> 00:01:09.829
This is known as process

49
00:01:09.829 --> 00:01:10.950
of initialization.

50
00:01:11.590 --> 00:01:12.990
Initialization in short,

51
00:01:12.990 --> 00:01:14.070
is known as init.

52
00:01:14.070 --> 00:01:15.230
We'll create a different

53
00:01:15.230 --> 00:01:16.070
file for this one.

54
00:01:16.070 --> 00:01:16.870
Don't you worry, you'll

55
00:01:16.870 --> 00:01:18.310
get the reference of this.

56
00:01:18.310 --> 00:01:19.550
So we'll call this one as

57
00:01:19.550 --> 00:01:21.070
05 and we'll call this

58
00:01:21.070 --> 00:01:25.350
one as init objects py.

59
00:01:27.350 --> 00:01:28.630
So how do we do this?

60
00:01:28.630 --> 00:01:30.310
First of all, let's say we want to

61
00:01:30.310 --> 00:01:32.630
have a simple chai order this time.

62
00:01:32.630 --> 00:01:34.790
So for the order it makes sense.

63
00:01:34.790 --> 00:01:36.430
And the very first thing that you

64
00:01:36.430 --> 00:01:38.190
do before you declare any variable

65
00:01:38.190 --> 00:01:39.790
or anything, you can actually do

66
00:01:39.790 --> 00:01:41.910
it afterwards as well, no problem.

67
00:01:41.910 --> 00:01:43.750
But the name of the method always

68
00:01:43.750 --> 00:01:45.590
remains same and there are

69
00:01:45.590 --> 00:01:47.430
couple of terminologies as well.

70
00:01:47.430 --> 00:01:47.830
So.

71
00:01:47.830 --> 00:01:49.070
So the moment you actually create

72
00:01:49.070 --> 00:01:51.710
a copy of this class just like

73
00:01:51.710 --> 00:01:53.590
this, there is a process to it.

74
00:01:53.590 --> 00:01:56.390
This is known as I want to init it.

75
00:01:57.430 --> 00:01:58.710
Init, which is also

76
00:01:58.710 --> 00:01:59.750
known as initialize.

77
00:01:59.750 --> 00:02:00.990
But in the world of Python, this

78
00:02:00.990 --> 00:02:02.470
is a reserved keyword, so you

79
00:02:02.470 --> 00:02:04.550
actually suffix it and prefix it

80
00:02:04.550 --> 00:02:08.389
by 2/ and the whole process is

81
00:02:08.389 --> 00:02:11.030
known as I am creating an object.

82
00:02:11.030 --> 00:02:15.810
So initiate, initiate,

83
00:02:15.810 --> 00:02:17.810
initiate an object for it.

84
00:02:17.810 --> 00:02:19.610
And the way you define it is through

85
00:02:19.610 --> 00:02:21.930
a reserved keyword or a reserved

86
00:02:21.930 --> 00:02:25.010
method known as constructor.

87
00:02:25.010 --> 00:02:26.610
Yeah, there is a name for it.

88
00:02:26.610 --> 00:02:27.570
We don't call it

89
00:02:27.570 --> 00:02:28.730
constructor as per se.

90
00:02:28.730 --> 00:02:31.170
In the world of Python itself,

91
00:02:31.170 --> 00:02:32.530
this is known as.

92
00:02:32.530 --> 00:02:33.410
Yeah, it is actually

93
00:02:33.410 --> 00:02:34.330
known as constructor.

94
00:02:34.330 --> 00:02:35.330
But the way how we do

95
00:02:35.330 --> 00:02:37.330
it is via this init.

96
00:02:37.330 --> 00:02:38.730
So this, what you're doing

97
00:02:38.730 --> 00:02:39.720
is you, you are creating

98
00:02:39.720 --> 00:02:40.920
a constructor Y init.

99
00:02:40.920 --> 00:02:43.040
Or you can say, I'm, creating

100
00:02:43.040 --> 00:02:44.400
a constructor Y init or init

101
00:02:44.400 --> 00:02:45.880
creates a constructor,

102
00:02:45.880 --> 00:02:48.120
it just turns, no big deal there.

103
00:02:48.760 --> 00:02:50.760
So this method needs to, and needs

104
00:02:50.760 --> 00:02:51.840
to always have a name

105
00:02:51.840 --> 00:02:53.720
of underscore, underscore init.

106
00:02:54.840 --> 00:02:56.480
As you can see, if I just

107
00:02:56.480 --> 00:02:57.640
take the auto suggestion,

108
00:02:57.640 --> 00:02:58.880
it automatically fills it

109
00:02:58.880 --> 00:03:00.040
with the self as well.

110
00:03:00.040 --> 00:03:01.680
Self always needs to be there

111
00:03:01.680 --> 00:03:02.280
in everyone,

112
00:03:02.280 --> 00:03:05.650
but we'll write it so it in it.

113
00:03:06.690 --> 00:03:08.130
Then underscore, underscore.

114
00:03:08.130 --> 00:03:09.210
Then create a method,

115
00:03:09.210 --> 00:03:10.210
call it as self.

116
00:03:10.770 --> 00:03:11.970
Any method that you're creating

117
00:03:11.970 --> 00:03:13.690
needs to have a self and we'll

118
00:03:13.690 --> 00:03:15.090
pass it just as a moment.

119
00:03:15.090 --> 00:03:16.690
So this is a valid instructor,

120
00:03:16.690 --> 00:03:18.130
but it doesn't do anything.

121
00:03:18.130 --> 00:03:20.050
It needs to do something at least.

122
00:03:20.050 --> 00:03:21.770
So what we can do is we can just

123
00:03:21.770 --> 00:03:22.810
say that, hey, whenever you're

124
00:03:22.810 --> 00:03:23.970
creating an object, you just

125
00:03:23.970 --> 00:03:26.490
pass me, the type and we can

126
00:03:26.490 --> 00:03:27.730
actually use type underscore.

127
00:03:27.730 --> 00:03:29.210
I'll show you what it means and how

128
00:03:29.210 --> 00:03:30.970
does it work, and I'll just go ahead

129
00:03:30.970 --> 00:03:32.770
and create a regular variable size.

130
00:03:32.770 --> 00:03:33.610
So so far you have seen

131
00:03:33.610 --> 00:03:35.450
the variable names or the properties

132
00:03:35.450 --> 00:03:37.330
name as just size or self.

133
00:03:37.330 --> 00:03:38.930
What is this type underscore?

134
00:03:38.930 --> 00:03:40.050
I'll show you.

135
00:03:40.050 --> 00:03:42.810
So what we can do is a, common syntax

136
00:03:42.810 --> 00:03:46.970
that, hey, this self dot type, I

137
00:03:46.970 --> 00:03:48.610
haven't created the type variable,

138
00:03:48.610 --> 00:03:50.170
but the value that I'm going to go

139
00:03:50.170 --> 00:03:51.450
ahead and provide you is type

140
00:03:51.450 --> 00:03:52.530
underscore.

141
00:03:52.530 --> 00:03:53.930
So this is almost like saying

142
00:03:53.930 --> 00:03:55.650
that I do have a variable

143
00:03:55.650 --> 00:03:57.930
known as type, which was having a,

144
00:03:58.640 --> 00:04:00.720
empty value, empty string, none.

145
00:04:00.720 --> 00:04:01.880
There could be a variety

146
00:04:01.880 --> 00:04:03.200
of values, is there?

147
00:04:03.200 --> 00:04:04.840
But this is so much redundant

148
00:04:04.840 --> 00:04:05.920
that you don't actually create

149
00:04:05.920 --> 00:04:07.280
a variable just like this.

150
00:04:07.280 --> 00:04:08.680
If you create your variables

151
00:04:08.680 --> 00:04:10.040
for the first time here, that

152
00:04:10.040 --> 00:04:11.760
is also totally allowed.

153
00:04:11.760 --> 00:04:13.040
So each of the object will

154
00:04:13.040 --> 00:04:14.760
have a property known as

155
00:04:14.760 --> 00:04:16.360
type, whose value you are going

156
00:04:16.360 --> 00:04:17.360
to pass it like this.

157
00:04:18.000 --> 00:04:19.399
And then I will go ahead

158
00:04:19.399 --> 00:04:20.880
and say I have a one more

159
00:04:20.880 --> 00:04:23.440
variable, self dot size.

160
00:04:23.440 --> 00:04:25.320
And I know this variable also doesn't

161
00:04:25.320 --> 00:04:26.960
exist, but since we are in a very

162
00:04:26.960 --> 00:04:28.920
special method known as constructor,

163
00:04:28.920 --> 00:04:30.620
we are allowed to do so.

164
00:04:30.620 --> 00:04:31.420
In other methods you are

165
00:04:31.420 --> 00:04:32.300
not allowed to do so.

166
00:04:33.260 --> 00:04:34.460
So I'll go ahead and fill it

167
00:04:34.460 --> 00:04:35.740
up with the value size.

168
00:04:35.740 --> 00:04:37.700
It is a very common thing that you

169
00:04:37.700 --> 00:04:39.340
Name these variable exactly same

170
00:04:39.340 --> 00:04:40.580
as you are declaring up here.

171
00:04:40.580 --> 00:04:41.820
Surely I can change the name

172
00:04:41.820 --> 00:04:43.020
here as well, but that's

173
00:04:43.020 --> 00:04:44.060
not a good practice.

174
00:04:44.620 --> 00:04:45.300
Let's go ahead

175
00:04:45.300 --> 00:04:46.579
and define another one.

176
00:04:46.579 --> 00:04:47.380
So I'll just go ahead

177
00:04:47.380 --> 00:04:49.340
and say summary.

178
00:04:49.340 --> 00:04:50.860
And again, this will also

179
00:04:50.860 --> 00:04:52.860
have a self just like this.

180
00:04:52.860 --> 00:04:54.140
And I want to return

181
00:04:54.140 --> 00:04:55.900
a formatted string that says,

182
00:04:58.020 --> 00:04:58.820
what should it say?

183
00:04:59.380 --> 00:05:01.060
Self dot size.

184
00:05:01.940 --> 00:05:06.300
And it will say ML of and then we'll

185
00:05:06.300 --> 00:05:15.060
go ahead and say self dot type chai.

186
00:05:15.060 --> 00:05:16.500
All right, so you got this.

187
00:05:16.500 --> 00:05:17.820
We are simply saying that what

188
00:05:17.820 --> 00:05:19.700
is the size of the type

189
00:05:19.700 --> 00:05:22.190
of chai that you are getting to us?

190
00:05:22.190 --> 00:05:23.430
A really very vague example,

191
00:05:23.430 --> 00:05:25.390
but it's okay, it works.

192
00:05:25.390 --> 00:05:26.150
Now let's go ahead

193
00:05:26.150 --> 00:05:27.230
and create an order.

194
00:05:27.230 --> 00:05:28.590
This time it's not just

195
00:05:28.590 --> 00:05:29.830
about saying that, hey, chai

196
00:05:29.830 --> 00:05:30.990
order, and that's it.

197
00:05:30.990 --> 00:05:32.070
This time we have to pass

198
00:05:32.070 --> 00:05:33.030
on some arguments.

199
00:05:33.030 --> 00:05:34.430
You don't have to pass on self.

200
00:05:34.430 --> 00:05:36.230
That is okay, I'll just go

201
00:05:36.230 --> 00:05:37.630
ahead and say I will have

202
00:05:37.630 --> 00:05:40.830
a masala, masala chai.

203
00:05:40.830 --> 00:05:42.910
And that will be of size 200.

204
00:05:42.910 --> 00:05:44.510
That's all I have to do.

205
00:05:44.510 --> 00:05:46.430
Let's use a print statement

206
00:05:46.430 --> 00:05:47.310
for the order.

207
00:05:47.310 --> 00:05:48.430
I can use a method

208
00:05:48.430 --> 00:05:50.190
of summary, execute that.

209
00:05:50.190 --> 00:05:52.070
So that gives me the value.

210
00:05:52.070 --> 00:05:53.590
Now similarly, I can go ahead

211
00:05:53.590 --> 00:05:55.830
and provide the more values up here.

212
00:05:55.830 --> 00:05:57.270
So let me go ahead and have

213
00:05:57.270 --> 00:06:00.590
this order and let's call

214
00:06:00.590 --> 00:06:02.070
this one as order two.

215
00:06:02.070 --> 00:06:04.150
And this will be like chai order.

216
00:06:04.150 --> 00:06:06.070
And this one, my favorite one.

217
00:06:06.070 --> 00:06:06.870
Ginger.

218
00:06:06.870 --> 00:06:08.550
I'll take a little bit more.

219
00:06:08.550 --> 00:06:09.750
I think 300 milliliters.

220
00:06:09.750 --> 00:06:11.350
200 milliliters is already too big.

221
00:06:11.350 --> 00:06:12.310
220 milliliters.

222
00:06:12.310 --> 00:06:15.030
All right, and I'll just print this

223
00:06:15.030 --> 00:06:18.720
and in the printing I'll say order

224
00:06:18.720 --> 00:06:24.720
two dot summary and execute that.

225
00:06:24.720 --> 00:06:26.320
All right, so this is

226
00:06:26.320 --> 00:06:27.240
the code that we have.

227
00:06:27.240 --> 00:06:28.440
And don't you worry, I haven't

228
00:06:28.440 --> 00:06:29.480
forgot this underscore.

229
00:06:29.480 --> 00:06:31.440
I'll come back onto this in a minute.

230
00:06:31.440 --> 00:06:33.480
So I'll just save this and I

231
00:06:33.480 --> 00:06:35.040
will go ahead and run this.

232
00:06:35.040 --> 00:06:37.120
This time we'll just say Python 3,

233
00:06:37.120 --> 00:06:38.880
run the 05 and all of this.

234
00:06:38.880 --> 00:06:40.320
So this works fine.

235
00:06:40.320 --> 00:06:41.240
Now let's come back.

236
00:06:41.240 --> 00:06:42.560
This is a pretty good example

237
00:06:42.560 --> 00:06:43.640
and demonstration of how

238
00:06:43.640 --> 00:06:44.680
the constructor works,

239
00:06:44.680 --> 00:06:46.690
the init files and whatnot.

240
00:06:46.690 --> 00:06:47.490
Now you might be wondering,

241
00:06:47.490 --> 00:06:48.530
what's this type about?

242
00:06:48.530 --> 00:06:49.850
Why have you given an extra

243
00:06:49.850 --> 00:06:51.170
underscore to this type?

244
00:06:52.050 --> 00:06:53.330
Does this work?

245
00:06:53.330 --> 00:06:54.490
Yeah, but you see

246
00:06:54.490 --> 00:06:55.490
an extra formatting.

247
00:06:55.490 --> 00:06:57.250
Why this extra formatting?

248
00:06:57.250 --> 00:06:58.770
Because you forgot one very

249
00:06:58.770 --> 00:07:00.250
interesting thing which I, showed

250
00:07:00.250 --> 00:07:01.810
you in the very first class, that

251
00:07:01.810 --> 00:07:04.410
actually type is an operator in

252
00:07:04.410 --> 00:07:06.250
The Python world, it's a function

253
00:07:06.250 --> 00:07:07.610
which gives me the type of

254
00:07:07.610 --> 00:07:08.490
whatever you ask it.

255
00:07:08.490 --> 00:07:09.690
It is supposed to be used with

256
00:07:09.690 --> 00:07:11.650
the function, but since in our case

257
00:07:11.650 --> 00:07:13.210
it made sense to use the type,

258
00:07:13.210 --> 00:07:14.610
that's why I used the type.

259
00:07:14.610 --> 00:07:15.770
But I actually added

260
00:07:15.770 --> 00:07:17.170
a trailing underscore.

261
00:07:17.170 --> 00:07:18.330
This is a common practice

262
00:07:18.330 --> 00:07:19.250
in production as well.

263
00:07:19.250 --> 00:07:20.130
Sometimes you want to use

264
00:07:20.130 --> 00:07:22.090
the variables which make sense

265
00:07:22.090 --> 00:07:23.250
for our software that I want

266
00:07:23.250 --> 00:07:25.170
to use type, or I want to use init

267
00:07:25.170 --> 00:07:26.290
or I want to use def.

268
00:07:26.930 --> 00:07:27.970
Don't use def.

269
00:07:27.970 --> 00:07:28.850
Try to avoid it.

270
00:07:28.850 --> 00:07:29.930
But I just showed you

271
00:07:29.930 --> 00:07:31.210
this very special case.

272
00:07:31.210 --> 00:07:31.850
I've seen this

273
00:07:31.850 --> 00:07:33.410
in production so many times.

274
00:07:33.410 --> 00:07:34.810
So I thought, if I'm not going

275
00:07:34.810 --> 00:07:35.890
to discuss these production

276
00:07:35.890 --> 00:07:37.290
things with you, who will?

277
00:07:37.290 --> 00:07:39.010
And these are small gotchas which.

278
00:07:39.010 --> 00:07:40.890
Oh, I knew about the type, but I

279
00:07:40.890 --> 00:07:43.520
forgot momentarily about it.

280
00:07:43.520 --> 00:07:44.640
All right, you got it.

281
00:07:44.640 --> 00:07:46.920
This is simple order which creates

282
00:07:46.920 --> 00:07:49.000
a new instance of the class.

283
00:07:49.000 --> 00:07:50.320
We are getting technical now.

284
00:07:51.040 --> 00:07:52.280
We don't call it as object, we

285
00:07:52.280 --> 00:07:54.000
call it as instance of a class,

286
00:07:54.640 --> 00:07:56.820
which takes masala as argument.

287
00:07:57.600 --> 00:07:59.200
And 200 as argument, which

288
00:07:59.200 --> 00:08:00.720
are passed as a parameter.

289
00:08:00.720 --> 00:08:02.240
How technical we are.

290
00:08:02.240 --> 00:08:04.040
And we just assign these values.

291
00:08:04.040 --> 00:08:05.320
If you have more variables, you

292
00:08:05.320 --> 00:08:06.520
can just go ahead and define them.

293
00:08:06.520 --> 00:08:07.800
If you have more functions, you

294
00:08:07.800 --> 00:08:09.450
can just also go ahead and.

295
00:08:09.450 --> 00:08:10.290
And define them.

296
00:08:10.290 --> 00:08:12.610
So this is all about how we get

297
00:08:12.610 --> 00:08:14.930
the constructors and INIT objects or

298
00:08:14.930 --> 00:08:17.290
INIT values in the world of Python.

299
00:08:17.290 --> 00:08:18.330
That is it for this one.

300
00:08:18.330 --> 00:08:19.850
Let's catch up in the next one.
