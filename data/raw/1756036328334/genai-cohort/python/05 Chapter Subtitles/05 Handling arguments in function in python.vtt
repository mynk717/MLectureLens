WEBVTT

1
00:00:00.960 --> 00:00:02.680
All right, so let's go ahead

2
00:00:02.680 --> 00:00:04.800
and have another discussion on

3
00:00:04.800 --> 00:00:06.560
something really really interesting.

4
00:00:06.560 --> 00:00:08.320
So let's just say we so far have seen

5
00:00:08.320 --> 00:00:10.240
that we have a function, let's call

6
00:00:10.240 --> 00:00:12.560
this one as simple function name.

7
00:00:12.560 --> 00:00:14.040
We have a placeholder which

8
00:00:14.040 --> 00:00:15.959
takes the parameter names and we

9
00:00:15.959 --> 00:00:17.760
simply go like this and then

10
00:00:17.760 --> 00:00:19.280
we have a simple pass here.

11
00:00:19.280 --> 00:00:21.440
This is our function definition.

12
00:00:21.440 --> 00:00:22.800
Now what's really interesting

13
00:00:22.800 --> 00:00:23.920
that what do you pass

14
00:00:23.920 --> 00:00:25.160
in here in this function?

15
00:00:25.160 --> 00:00:26.600
Let's just say this is kind

16
00:00:26.600 --> 00:00:28.670
of a mysterious box and all

17
00:00:28.670 --> 00:00:30.350
the value you go ahead and simply

18
00:00:30.350 --> 00:00:33.150
pass on into this place.

19
00:00:33.150 --> 00:00:35.230
This is known as parameters.

20
00:00:35.230 --> 00:00:36.230
We know this.

21
00:00:36.230 --> 00:00:37.630
But what value can go

22
00:00:37.630 --> 00:00:38.630
inside the parameter?

23
00:00:38.630 --> 00:00:39.750
There are a lot of values

24
00:00:39.750 --> 00:00:41.270
two can go into it.

25
00:00:41.270 --> 00:00:42.710
Maybe you want to go ahead and pass

26
00:00:42.710 --> 00:00:44.310
on just the true, or maybe

27
00:00:44.310 --> 00:00:45.430
you want to go ahead and pass

28
00:00:45.430 --> 00:00:47.350
on just the name just like this.

29
00:00:47.350 --> 00:00:48.470
Or maybe you want to pass

30
00:00:48.470 --> 00:00:50.350
on values in this format.

31
00:00:50.350 --> 00:00:51.510
So there is a lot of thing

32
00:00:51.510 --> 00:00:53.550
that can go inside this as

33
00:00:53.550 --> 00:00:55.850
a parameter and what happens

34
00:00:55.850 --> 00:00:57.010
to the original value?

35
00:00:57.010 --> 00:00:58.010
This is also a piece

36
00:00:58.010 --> 00:00:59.730
of question we should be answering.

37
00:00:59.730 --> 00:01:01.450
So in this entire video we are going

38
00:01:01.450 --> 00:01:02.690
to go through with different

39
00:01:02.690 --> 00:01:04.170
ways of how things actually

40
00:01:04.170 --> 00:01:06.010
goes and what happens when things

41
00:01:06.010 --> 00:01:07.290
goes into this, whether

42
00:01:07.290 --> 00:01:09.090
the original one changes or not.

43
00:01:09.090 --> 00:01:09.970
What happens to this?

44
00:01:09.970 --> 00:01:11.290
We'll just go ahead and figure

45
00:01:11.290 --> 00:01:12.690
it out in this one.

46
00:01:12.690 --> 00:01:13.810
Let's go ahead and create this.

47
00:01:13.810 --> 00:01:15.050
I've already created a file

48
00:01:15.050 --> 00:01:16.810
which is known as input params,

49
00:01:16.810 --> 00:01:18.570
input parameters and I'll

50
00:01:18.570 --> 00:01:20.090
show you one of the most basic

51
00:01:20.090 --> 00:01:21.210
example of what happens.

52
00:01:21.210 --> 00:01:22.890
So when you let just say decide

53
00:01:22.890 --> 00:01:24.630
that hey, this is my chai

54
00:01:24.630 --> 00:01:26.540
and and I go ahead and simply

55
00:01:26.540 --> 00:01:29.820
say this is my ginger T

56
00:01:29.820 --> 00:01:31.740
or ginger chai would be better.

57
00:01:31.740 --> 00:01:33.900
And if I go ahead and define a method

58
00:01:33.900 --> 00:01:37.220
that says preparechie and I go ahead

59
00:01:37.220 --> 00:01:38.980
and take any parameter, this could

60
00:01:38.980 --> 00:01:40.699
be order, this could be anything.

61
00:01:40.699 --> 00:01:42.180
It's just a placeholder, hence

62
00:01:42.180 --> 00:01:43.900
we call it as parameter.

63
00:01:43.900 --> 00:01:45.540
And I go ahead and print this out

64
00:01:45.540 --> 00:01:47.060
or maybe do some more operations

65
00:01:47.060 --> 00:01:48.860
on it doesn't really matter.

66
00:01:48.860 --> 00:01:50.420
I'll just say preparing then

67
00:01:50.420 --> 00:01:52.100
a space and we'll just go

68
00:01:52.100 --> 00:01:53.020
ahead and print the order.

69
00:01:54.050 --> 00:01:55.370
Now depends on what value

70
00:01:55.370 --> 00:01:56.530
you are passing on.

71
00:01:56.530 --> 00:01:58.610
A lot of things might change

72
00:01:58.610 --> 00:01:59.450
or might not change.

73
00:01:59.450 --> 00:02:00.530
So in this case if I go ahead

74
00:02:00.530 --> 00:02:01.970
and pass on the chai,

75
00:02:01.970 --> 00:02:03.530
this is like I would just want

76
00:02:03.530 --> 00:02:05.330
to read this value in this case.

77
00:02:05.330 --> 00:02:08.250
This is a string and if you remember,

78
00:02:08.250 --> 00:02:09.889
strings don't change really.

79
00:02:09.889 --> 00:02:11.009
So you are just passing

80
00:02:11.009 --> 00:02:13.130
on this value and that is it, that

81
00:02:13.130 --> 00:02:14.770
is all that you are doing.

82
00:02:15.330 --> 00:02:16.410
Of course if you go ahead

83
00:02:16.410 --> 00:02:17.930
and Use globals and all of that.

84
00:02:17.930 --> 00:02:19.450
That's different use case, but in

85
00:02:19.450 --> 00:02:21.210
most of the cases it doesn't change

86
00:02:21.210 --> 00:02:22.850
or it will never change the original

87
00:02:22.850 --> 00:02:24.370
chai, it will always remain.

88
00:02:24.370 --> 00:02:26.180
Like you can go ahead and do

89
00:02:26.180 --> 00:02:27.340
manipulation up here.

90
00:02:27.340 --> 00:02:28.660
Like we have added this

91
00:02:28.660 --> 00:02:30.180
preparing chai and all of that.

92
00:02:30.180 --> 00:02:32.020
But in true sense, if you go ahead

93
00:02:32.020 --> 00:02:34.060
and print out this variable chai,

94
00:02:34.060 --> 00:02:36.420
if you notice it here, if I go

95
00:02:36.420 --> 00:02:38.540
ahead and print the variable chai

96
00:02:38.540 --> 00:02:39.780
here, if you look at this closely,

97
00:02:39.780 --> 00:02:42.220
we have actually appended this so

98
00:02:42.220 --> 00:02:44.180
the function actually takes the

99
00:02:44.180 --> 00:02:45.820
order and we have passed on a chai

100
00:02:45.820 --> 00:02:47.740
but we have actually concatenated

101
00:02:47.740 --> 00:02:48.020
this.

102
00:02:48.020 --> 00:02:48.980
Now the preparing is

103
00:02:48.980 --> 00:02:49.740
appending to this.

104
00:02:49.740 --> 00:02:51.220
So does it change the original one?

105
00:02:51.220 --> 00:02:52.300
No, no it doesn't.

106
00:02:52.300 --> 00:02:53.740
It just reads the value.

107
00:02:53.740 --> 00:02:54.860
That is the whole point.

108
00:02:54.860 --> 00:02:55.860
I'll show you by running

109
00:02:55.860 --> 00:02:56.860
this, don't you worry.

110
00:02:56.860 --> 00:02:59.500
So if I go ahead and say I want

111
00:02:59.500 --> 00:03:02.380
Python to run 09 still,

112
00:03:02.380 --> 00:03:04.260
we have ginger chai, but things

113
00:03:04.260 --> 00:03:05.940
actually do change when we

114
00:03:05.940 --> 00:03:07.379
have different values to it.

115
00:03:07.379 --> 00:03:10.100
So let's just say I'll remove this

116
00:03:10.100 --> 00:03:11.620
example, I'll keep this example

117
00:03:11.620 --> 00:03:13.260
as comments so that you can later

118
00:03:13.260 --> 00:03:15.100
on come onto this and see this.

119
00:03:15.900 --> 00:03:16.980
Now let's just say we have

120
00:03:16.980 --> 00:03:18.220
again an example of chai,

121
00:03:18.220 --> 00:03:19.660
but this time I go ahead and say

122
00:03:19.660 --> 00:03:21.340
the values are 1, 2 and 3.

123
00:03:22.630 --> 00:03:23.990
Now remember this is a list

124
00:03:23.990 --> 00:03:26.070
and list can be mutated.

125
00:03:26.070 --> 00:03:28.030
So your whole idea about what

126
00:03:28.030 --> 00:03:29.190
we studied about mutated,

127
00:03:29.190 --> 00:03:30.670
immutable, mutable, this

128
00:03:30.670 --> 00:03:32.150
will come handy in here.

129
00:03:32.150 --> 00:03:33.830
Let's just say we have a simple

130
00:03:33.830 --> 00:03:35.030
function which says

131
00:03:35.030 --> 00:03:39.230
I will edit chai and all it does,

132
00:03:39.230 --> 00:03:40.550
it takes the input of cup.

133
00:03:40.550 --> 00:03:41.830
How many cups are there?

134
00:03:41.830 --> 00:03:43.790
And this is array, we are

135
00:03:43.790 --> 00:03:45.190
expecting an array here.

136
00:03:45.190 --> 00:03:47.510
In this I will change the first value

137
00:03:48.260 --> 00:03:49.540
to be something else, maybe

138
00:03:50.100 --> 00:03:51.620
40, two, whatever,

139
00:03:51.620 --> 00:03:53.460
it's just an arbitrary number.

140
00:03:53.460 --> 00:03:54.780
And then I go ahead and call

141
00:03:54.780 --> 00:03:56.460
the edit chai and notice I am

142
00:03:56.460 --> 00:03:58.740
passing on this chai here.

143
00:03:58.740 --> 00:04:01.100
What will happen to this chai?

144
00:04:01.100 --> 00:04:02.380
Now previously we just passed

145
00:04:02.380 --> 00:04:03.780
on, we did of course

146
00:04:03.780 --> 00:04:05.780
performed an operation of adding it.

147
00:04:05.780 --> 00:04:07.620
Now we are amending this.

148
00:04:07.620 --> 00:04:08.420
So what will happen

149
00:04:08.420 --> 00:04:09.860
to the original object?

150
00:04:09.860 --> 00:04:12.180
So in this case you'll be surprised

151
00:04:12.180 --> 00:04:13.340
to know and that's where

152
00:04:13.340 --> 00:04:15.060
the mutable immutable comes

153
00:04:15.060 --> 00:04:16.250
into, into the handy that.

154
00:04:16.250 --> 00:04:18.290
Yes, now we have 1, 42 and 31.

155
00:04:18.290 --> 00:04:20.529
So original object or original

156
00:04:20.529 --> 00:04:22.290
property is being changed.

157
00:04:22.290 --> 00:04:24.050
It's a mutable, the list.

158
00:04:24.050 --> 00:04:25.850
So always remember, make sure that

159
00:04:25.850 --> 00:04:27.250
you have gone through with this.

160
00:04:28.210 --> 00:04:30.530
So this is nice, this is okay,

161
00:04:30.530 --> 00:04:31.770
now let's go ahead and work

162
00:04:31.770 --> 00:04:32.930
on with this more.

163
00:04:32.930 --> 00:04:34.330
This idea can be extended

164
00:04:34.330 --> 00:04:35.730
a little bit more.

165
00:04:35.730 --> 00:04:37.770
We do have two types of arguments

166
00:04:37.770 --> 00:04:39.250
that we can pass on in here.

167
00:04:39.850 --> 00:04:40.850
The first you are going

168
00:04:40.850 --> 00:04:42.810
to hear about is the args.

169
00:04:42.810 --> 00:04:44.610
Yes, this is a proper name.

170
00:04:45.380 --> 00:04:47.020
For this one is actually known

171
00:04:47.020 --> 00:04:49.150
for positional ingredient,

172
00:04:49.150 --> 00:04:50.460
positional parameters.

173
00:04:50.460 --> 00:04:51.940
And you will hear another one

174
00:04:51.940 --> 00:04:54.340
which is denoted by an asterisk.

175
00:04:54.340 --> 00:04:56.660
And then you simply say kwargs.

176
00:04:56.660 --> 00:04:58.180
This is keyword args.

177
00:04:58.180 --> 00:04:59.180
Remember I told you.

178
00:04:59.180 --> 00:05:00.180
Arguments.

179
00:05:00.180 --> 00:05:00.980
There is one thing

180
00:05:00.980 --> 00:05:02.060
known as parameters.

181
00:05:02.060 --> 00:05:02.980
One is argument.

182
00:05:03.540 --> 00:05:06.500
So this here is argument.

183
00:05:07.140 --> 00:05:08.500
This one, when you are defining

184
00:05:08.500 --> 00:05:09.820
the function, this is parameter.

185
00:05:09.820 --> 00:05:11.060
Because it can have any value.

186
00:05:11.060 --> 00:05:12.920
It can be cup as a list.

187
00:05:12.920 --> 00:05:14.320
It can be anything or

188
00:05:14.320 --> 00:05:15.520
any kind of a list.

189
00:05:15.520 --> 00:05:16.320
So that's why we call

190
00:05:16.320 --> 00:05:17.680
it as parameter.

191
00:05:17.680 --> 00:05:18.600
But on the other hand,

192
00:05:18.600 --> 00:05:21.080
this is our, sorry.

193
00:05:21.080 --> 00:05:22.480
This one is parameter

194
00:05:22.480 --> 00:05:24.360
and this is our args.

195
00:05:24.360 --> 00:05:25.120
Arguments.

196
00:05:26.160 --> 00:05:27.480
Based on this, I want

197
00:05:27.480 --> 00:05:28.720
to show you something really,

198
00:05:28.720 --> 00:05:30.000
really interesting.

199
00:05:30.000 --> 00:05:31.600
Let's just say we have a,

200
00:05:31.600 --> 00:05:35.040
method which says makechai.

201
00:05:35.040 --> 00:05:36.200
And in this you expect

202
00:05:36.200 --> 00:05:37.760
that I'll pass you a tea.

203
00:05:37.760 --> 00:05:38.170
I.

204
00:05:38.170 --> 00:05:39.250
I'll pass you a milk.

205
00:05:39.250 --> 00:05:40.330
These are just variable name.

206
00:05:40.330 --> 00:05:41.170
It can be anything.

207
00:05:41.170 --> 00:05:42.570
And I'll pass you sugar,

208
00:05:42.570 --> 00:05:45.370
not cigar sugar.

209
00:05:45.370 --> 00:05:47.290
And there we go.

210
00:05:47.290 --> 00:05:49.090
And I simply just print them out.

211
00:05:49.090 --> 00:05:50.890
I don't do anything else.

212
00:05:50.890 --> 00:05:52.210
So I'll just go ahead and say

213
00:05:52.210 --> 00:05:55.370
this is my T, this is my milk,

214
00:05:55.370 --> 00:05:57.290
and this is what else we have?

215
00:05:57.290 --> 00:05:57.770
Sugar.

216
00:05:58.810 --> 00:05:59.410
There we go.

217
00:05:59.410 --> 00:06:00.650
It does nothing.

218
00:06:00.650 --> 00:06:02.410
Now, interestingly, I can just

219
00:06:02.410 --> 00:06:03.930
go ahead and say make chai.

220
00:06:04.670 --> 00:06:07.390
And I have two ways of doing this.

221
00:06:07.390 --> 00:06:09.190
I can just go ahead and say I want

222
00:06:09.190 --> 00:06:10.910
a chai from a very beautiful place

223
00:06:10.910 --> 00:06:12.990
in India, which is Darjeeling.

224
00:06:13.710 --> 00:06:15.070
It's very beautiful.

225
00:06:15.070 --> 00:06:16.430
And I will say milk.

226
00:06:16.430 --> 00:06:17.310
I'll say yes.

227
00:06:17.950 --> 00:06:19.870
And for the sugar I'll say

228
00:06:19.870 --> 00:06:21.270
I'll definitely not say no.

229
00:06:21.270 --> 00:06:22.590
But I'll say low.

230
00:06:22.590 --> 00:06:23.470
This is something

231
00:06:23.470 --> 00:06:25.630
known as, positional.

232
00:06:27.310 --> 00:06:27.910
Positional.

233
00:06:27.910 --> 00:06:29.550
Because I know the position of it.

234
00:06:29.550 --> 00:06:31.430
So I know exactly that the Darjeeling

235
00:06:31.430 --> 00:06:33.050
will go inside the T.

236
00:06:33.050 --> 00:06:34.610
The yes will go into the milk

237
00:06:34.610 --> 00:06:36.290
and the sugar is going to go.

238
00:06:36.290 --> 00:06:38.570
This sometime can be confusing.

239
00:06:38.570 --> 00:06:39.930
So another way of handling

240
00:06:39.930 --> 00:06:42.250
this is known as keywords.

241
00:06:42.250 --> 00:06:43.850
So how can we do this?

242
00:06:43.850 --> 00:06:45.130
As soon as you put up the make

243
00:06:45.130 --> 00:06:46.290
chai, you will see you

244
00:06:46.290 --> 00:06:47.690
have some parameters here.

245
00:06:47.690 --> 00:06:48.610
So I can just go ahead

246
00:06:48.610 --> 00:06:49.850
and use this equal sign.

247
00:06:49.850 --> 00:06:51.770
Notice this tea equals.

248
00:06:51.770 --> 00:06:52.930
And then I'll just go

249
00:06:52.930 --> 00:06:54.170
ahead and say green.

250
00:06:54.730 --> 00:06:56.570
This makes sure that order

251
00:06:56.570 --> 00:06:57.450
doesn't really matter.

252
00:06:57.450 --> 00:06:59.090
But my value is going exactly.

253
00:06:59.090 --> 00:07:00.970
So I'll swap the value of now sugar.

254
00:07:00.970 --> 00:07:02.370
So first I'll pass on the sugar.

255
00:07:02.370 --> 00:07:03.850
I know exactly what I'm saying.

256
00:07:04.370 --> 00:07:06.610
So I'll just go ahead and say medium.

257
00:07:07.810 --> 00:07:09.970
And then we have milk.

258
00:07:09.970 --> 00:07:11.730
And the milk will be.

259
00:07:11.730 --> 00:07:13.010
Let's, just say no.

260
00:07:13.010 --> 00:07:15.330
I actually don't prefer milk T.

261
00:07:15.330 --> 00:07:17.890
But this whole syntax is known as

262
00:07:17.890 --> 00:07:19.610
keywords, and whenever you define

263
00:07:19.610 --> 00:07:20.770
the function automatically.

264
00:07:20.770 --> 00:07:21.970
This is available to you

265
00:07:22.770 --> 00:07:24.370
and should be basic.

266
00:07:24.370 --> 00:07:25.610
I shouldn't be printing this

267
00:07:25.610 --> 00:07:26.930
out, but you get the idea.

268
00:07:26.930 --> 00:07:27.690
It's green.

269
00:07:27.690 --> 00:07:29.370
It says no, it says medium,

270
00:07:29.370 --> 00:07:30.170
although we have swapped

271
00:07:30.170 --> 00:07:31.290
the value, but it says green.

272
00:07:31.290 --> 00:07:32.470
No, and medium.

273
00:07:32.470 --> 00:07:33.310
This is where I have to keep

274
00:07:33.310 --> 00:07:34.510
in mind that, hey, in what

275
00:07:34.510 --> 00:07:35.910
order they are being passed on.

276
00:07:36.710 --> 00:07:38.550
So based on this, we can

277
00:07:38.550 --> 00:07:40.190
actually design another method

278
00:07:40.190 --> 00:07:44.350
which uses, this args and kwargs,

279
00:07:44.350 --> 00:07:45.670
or keyword arguments.

280
00:07:45.670 --> 00:07:46.870
And I'll show you what

281
00:07:46.870 --> 00:07:48.229
does it mean by that?

282
00:07:48.229 --> 00:07:48.550
Really?

283
00:07:48.550 --> 00:07:49.750
Truly not the theoretical

284
00:07:49.750 --> 00:07:51.830
aspect, but impractical.

285
00:07:51.830 --> 00:07:53.070
Let's just say we have

286
00:07:53.070 --> 00:07:55.750
a special, chai.

287
00:07:55.750 --> 00:07:57.910
I know a lot of chai these days.

288
00:07:57.910 --> 00:07:58.790
So let's just say we put

289
00:07:58.790 --> 00:07:59.750
up an asterisk here.

290
00:07:59.750 --> 00:08:01.750
This asterisk is a part of syntax.

291
00:08:02.380 --> 00:08:03.140
I will just go ahead

292
00:08:03.140 --> 00:08:04.860
and say ingredients.

293
00:08:05.660 --> 00:08:06.860
Hope I wrote that correct.

294
00:08:06.860 --> 00:08:08.980
And I will also use asterisk.

295
00:08:08.980 --> 00:08:09.380
Asterisk.

296
00:08:09.380 --> 00:08:09.580
Yes.

297
00:08:09.580 --> 00:08:10.580
This is again a syntax.

298
00:08:10.580 --> 00:08:12.700
And I will say extras.

299
00:08:13.260 --> 00:08:15.100
All right, so what do I mean by that?

300
00:08:15.100 --> 00:08:16.460
What's the importance of this?

301
00:08:16.460 --> 00:08:18.620
1 * and 2, *.

302
00:08:18.620 --> 00:08:21.140
I'm not giving, T, milk like that.

303
00:08:21.140 --> 00:08:22.180
I'm just saying ingredients.

304
00:08:22.180 --> 00:08:23.580
And this is a variable name.

305
00:08:23.580 --> 00:08:24.820
This is just a placeholder.

306
00:08:24.820 --> 00:08:25.980
It can be anything.

307
00:08:25.980 --> 00:08:27.700
I just want to print what happens

308
00:08:27.700 --> 00:08:28.820
when all of this is written

309
00:08:28.820 --> 00:08:30.760
in this format with the asterisk.

310
00:08:30.760 --> 00:08:31.440
So I'll just go ahead

311
00:08:31.440 --> 00:08:33.480
and say ingredients.

312
00:08:34.120 --> 00:08:35.400
Hope I wrote that correct.

313
00:08:36.280 --> 00:08:37.799
And second time, I'll

314
00:08:37.799 --> 00:08:38.440
not take a chance.

315
00:08:38.440 --> 00:08:40.000
I'll just copy this ingredients.

316
00:08:40.000 --> 00:08:41.640
Because this is what I want to print.

317
00:08:41.640 --> 00:08:42.880
And then second time,

318
00:08:42.880 --> 00:08:44.600
we'll just say extras.

319
00:08:44.600 --> 00:08:46.360
Copy this with a capital

320
00:08:46.360 --> 00:08:49.400
E and this will be extra.

321
00:08:49.400 --> 00:08:50.720
So what happens and how

322
00:08:50.720 --> 00:08:51.400
does this work?

323
00:08:52.120 --> 00:08:53.760
The way to learn this is

324
00:08:53.760 --> 00:08:55.280
by seeing an practical

325
00:08:55.280 --> 00:08:56.680
implementation for this one.

326
00:08:56.680 --> 00:08:57.760
So let's just say if I go ahead

327
00:08:57.760 --> 00:08:59.080
and call the special chai.

328
00:08:59.650 --> 00:09:01.210
Now that you have seen how positional

329
00:09:01.210 --> 00:09:02.610
works, how keyword works,

330
00:09:02.610 --> 00:09:04.370
this is actually a mix of both.

331
00:09:05.170 --> 00:09:06.690
So here is the interesting part.

332
00:09:06.690 --> 00:09:07.850
Let's just say if I go

333
00:09:07.850 --> 00:09:10.130
ahead and say, cinnamon.

334
00:09:11.250 --> 00:09:11.970
Cinnamon.

335
00:09:12.610 --> 00:09:14.730
And I go ahead and say another

336
00:09:14.730 --> 00:09:18.050
one, which is cardamom.

337
00:09:19.810 --> 00:09:21.810
And then I go ahead and say that

338
00:09:21.810 --> 00:09:23.900
I want to use a sweetener.

339
00:09:26.220 --> 00:09:26.820
There we go.

340
00:09:26.820 --> 00:09:27.580
Very tough.

341
00:09:27.580 --> 00:09:29.660
I will use Sweetener as honey

342
00:09:29.660 --> 00:09:31.740
and will I use foam?

343
00:09:31.740 --> 00:09:32.980
I don't know who uses foam,

344
00:09:32.980 --> 00:09:35.340
but anyways foam will be yes.

345
00:09:35.340 --> 00:09:36.580
So I hope you got a hint

346
00:09:36.580 --> 00:09:37.660
of what we are trying to do.

347
00:09:37.660 --> 00:09:39.500
Let me make it on the same line.

348
00:09:39.500 --> 00:09:40.380
Notice here some

349
00:09:40.380 --> 00:09:42.140
of the parameters don't have a name.

350
00:09:42.140 --> 00:09:43.820
Some of them do have a name.

351
00:09:43.820 --> 00:09:45.100
And you got that.

352
00:09:45.100 --> 00:09:45.740
This is.

353
00:09:46.380 --> 00:09:48.060
And this is exactly there.

354
00:09:48.060 --> 00:09:50.860
We got args and we got kwargs

355
00:09:50.860 --> 00:09:53.740
arguments and key value arguments

356
00:09:53.740 --> 00:09:55.580
or also known as keyword arguments.

357
00:09:55.580 --> 00:09:56.500
Whatever you want to call

358
00:09:56.500 --> 00:09:57.980
them doesn't really matter.

359
00:09:57.980 --> 00:09:59.620
But what's interesting here is

360
00:09:59.620 --> 00:10:00.940
if I go ahead and run this

361
00:10:00.940 --> 00:10:02.180
now, you're going to see that

362
00:10:02.180 --> 00:10:04.580
ingredients gets a tuple

363
00:10:04.580 --> 00:10:06.380
of all the values that we have.

364
00:10:06.380 --> 00:10:08.700
So this is what the asterisk.

365
00:10:08.700 --> 00:10:10.300
I didn't say that I'm expecting

366
00:10:10.300 --> 00:10:11.620
one, two, whatever is

367
00:10:11.620 --> 00:10:13.060
coming up without any name.

368
00:10:13.060 --> 00:10:14.020
This is where we are getting.

369
00:10:14.020 --> 00:10:14.980
So all the tuples are

370
00:10:14.980 --> 00:10:15.900
going to come in.

371
00:10:15.900 --> 00:10:17.260
But this is where you actually

372
00:10:17.260 --> 00:10:18.700
says that, hey, I'm expecting

373
00:10:18.700 --> 00:10:19.820
that you will provide me

374
00:10:19.820 --> 00:10:20.940
the name of this value.

375
00:10:20.940 --> 00:10:22.140
And this is exactly what we got.

376
00:10:22.140 --> 00:10:22.660
Key value.

377
00:10:22.660 --> 00:10:22.970
So.

378
00:10:22.970 --> 00:10:24.610
So this is a dictionary and as

379
00:10:24.610 --> 00:10:25.690
long as you understand

380
00:10:25.690 --> 00:10:27.570
and know the data type, you can

381
00:10:27.570 --> 00:10:28.890
do magic in programming.

382
00:10:28.890 --> 00:10:30.130
Notice here, sweetener is

383
00:10:30.130 --> 00:10:31.450
honey and the foam is.

384
00:10:31.450 --> 00:10:33.450
Yes, and this is all it is.

385
00:10:33.450 --> 00:10:34.970
I know a lot of people,

386
00:10:35.820 --> 00:10:37.690
do a whole lot of drama with these

387
00:10:37.690 --> 00:10:39.169
kinds of things, but I don't.

388
00:10:39.169 --> 00:10:40.090
I prefer to show you

389
00:10:40.090 --> 00:10:41.450
practically what it means.

390
00:10:41.450 --> 00:10:43.050
And I have seen people spending

391
00:10:43.050 --> 00:10:44.450
like 30 minutes, 1 hour

392
00:10:44.450 --> 00:10:46.170
on the args and kw args.

393
00:10:46.170 --> 00:10:48.370
No, it's not that difficult if you

394
00:10:48.370 --> 00:10:50.330
don't get the values or the names.

395
00:10:50.330 --> 00:10:51.850
If you don't provide the names, hey,

396
00:10:51.850 --> 00:10:53.770
this will go into just one asterisk.

397
00:10:53.770 --> 00:10:55.190
I can call this as

398
00:10:55.190 --> 00:10:56.630
orgs as well, no problem.

399
00:10:56.630 --> 00:10:58.070
Hey, feel free to call it args.

400
00:10:58.070 --> 00:10:59.910
Feel free to call it as ingredients.

401
00:10:59.910 --> 00:11:01.110
This one usually people

402
00:11:01.110 --> 00:11:02.150
call it as kaw.

403
00:11:02.150 --> 00:11:02.630
Orgs.

404
00:11:02.630 --> 00:11:04.270
Hey, call it kwargs, call it

405
00:11:04.270 --> 00:11:05.750
as extras, whatever you wish.

406
00:11:05.750 --> 00:11:07.430
It's just a placeholder name.

407
00:11:07.430 --> 00:11:09.070
The foundation of programming

408
00:11:09.070 --> 00:11:09.670
should be strong.

409
00:11:10.470 --> 00:11:11.830
There's one more thing I would like

410
00:11:11.830 --> 00:11:13.190
to discuss here, which is also

411
00:11:13.190 --> 00:11:14.710
production kind of a thing.

412
00:11:14.710 --> 00:11:16.030
So sometimes let's just say

413
00:11:16.030 --> 00:11:18.710
I have a simple value here.

414
00:11:18.710 --> 00:11:21.750
I'll just go ahead and say chioders

415
00:11:22.340 --> 00:11:23.260
and you can actually go

416
00:11:23.260 --> 00:11:25.460
ahead and provide default values

417
00:11:25.460 --> 00:11:26.060
to all these things.

418
00:11:26.060 --> 00:11:27.020
So let's just say user

419
00:11:27.020 --> 00:11:27.940
doesn't provide anything.

420
00:11:27.940 --> 00:11:29.460
I still want to have a value,

421
00:11:29.460 --> 00:11:30.940
so there is nothing which stops me

422
00:11:30.940 --> 00:11:32.340
to provide a value just like this.

423
00:11:32.340 --> 00:11:34.500
It is totally, totally okay.

424
00:11:35.620 --> 00:11:37.940
But here's interesting part

425
00:11:37.940 --> 00:11:39.700
if I go ahead and provide a value

426
00:11:39.700 --> 00:11:41.860
of empty array which is mutable,

427
00:11:41.860 --> 00:11:43.780
that means it can be changed.

428
00:11:43.780 --> 00:11:45.060
Let's just see what happens.

429
00:11:45.060 --> 00:11:46.700
When I go ahead and say order it

430
00:11:46.700 --> 00:11:48.710
has a property of appendix because

431
00:11:48.710 --> 00:11:50.590
it's an array and I can go ahead

432
00:11:50.590 --> 00:11:53.230
and add a masala chai to this one.

433
00:11:53.230 --> 00:11:54.230
That's it, that's all

434
00:11:54.230 --> 00:11:54.990
what we are doing.

435
00:11:54.990 --> 00:11:56.990
And now we are printing.

436
00:11:56.990 --> 00:11:58.670
Come on, write that print

437
00:11:59.230 --> 00:12:00.470
and I want to print whatever

438
00:12:00.470 --> 00:12:02.110
the value of the order is.

439
00:12:02.110 --> 00:12:03.350
Now here's the interesting part.

440
00:12:03.350 --> 00:12:04.670
Let me show you the most

441
00:12:04.670 --> 00:12:06.190
interesting and gotchas

442
00:12:06.190 --> 00:12:08.430
of programming in Python.

443
00:12:08.430 --> 00:12:10.030
We want to run this chai order.

444
00:12:10.030 --> 00:12:12.230
I run it, but I go ahead

445
00:12:12.230 --> 00:12:14.120
and accidentally run it twice.

446
00:12:14.120 --> 00:12:15.400
Hey, this is interesting

447
00:12:15.400 --> 00:12:16.560
what will happen when I

448
00:12:16.560 --> 00:12:18.040
accidentally run it twice.

449
00:12:18.040 --> 00:12:19.320
Because you have appended

450
00:12:19.320 --> 00:12:20.960
the orders is going to append

451
00:12:20.960 --> 00:12:22.280
in a very interesting way.

452
00:12:22.840 --> 00:12:26.280
Notice here it says masala masala.

453
00:12:26.280 --> 00:12:28.920
So be very very careful

454
00:12:28.920 --> 00:12:31.280
for the default trap because this

455
00:12:31.280 --> 00:12:32.840
is known as default traps.

456
00:12:32.840 --> 00:12:34.200
So default has trapped you.

457
00:12:34.200 --> 00:12:35.760
If you have the default value you

458
00:12:35.760 --> 00:12:37.040
have nothing inside it and you have

459
00:12:37.040 --> 00:12:39.480
tried to append so this whenever you

460
00:12:39.480 --> 00:12:40.840
are going to run it second time

461
00:12:40.840 --> 00:12:42.120
because first time it has already

462
00:12:42.120 --> 00:12:42.480
done this.

463
00:12:42.480 --> 00:12:43.200
We have seen actually

464
00:12:43.200 --> 00:12:44.140
this kind of error.

465
00:12:44.140 --> 00:12:47.510
So it has actually bite us here.

466
00:12:48.070 --> 00:12:49.350
Now what we can do,

467
00:12:50.550 --> 00:12:52.230
in this case this can be actually

468
00:12:52.230 --> 00:12:53.470
made a little bit easier.

469
00:12:53.470 --> 00:12:54.830
So I'll just go ahead and first

470
00:12:54.830 --> 00:12:57.390
make a copy of this and we'll show

471
00:12:57.390 --> 00:12:59.110
you that instead of putting an empty

472
00:12:59.110 --> 00:13:00.270
value up here, you can actually

473
00:13:00.270 --> 00:13:01.990
make your life little easier.

474
00:13:01.990 --> 00:13:03.070
I'll just go ahead and comment

475
00:13:03.070 --> 00:13:04.470
this so that you can have it.

476
00:13:04.470 --> 00:13:06.270
Instead of putting the empty array,

477
00:13:06.270 --> 00:13:07.590
what you can do is make your

478
00:13:07.590 --> 00:13:09.670
code little bit secure or safe.

479
00:13:10.270 --> 00:13:11.390
I can just say none.

480
00:13:11.390 --> 00:13:13.070
So by default it's not empty

481
00:13:13.070 --> 00:13:15.430
array, it is absolutely no value.

482
00:13:15.430 --> 00:13:16.830
Here it is all none.

483
00:13:16.830 --> 00:13:18.750
I don't want to append it like this.

484
00:13:19.310 --> 00:13:20.550
I only want to append it

485
00:13:20.550 --> 00:13:22.030
in certain cases only if

486
00:13:22.030 --> 00:13:23.510
the value is being provided

487
00:13:23.510 --> 00:13:24.870
to me or something like that.

488
00:13:24.870 --> 00:13:25.789
So we are going to just go

489
00:13:25.789 --> 00:13:26.750
ahead and remove this

490
00:13:27.310 --> 00:13:28.710
and instead this I'll show you

491
00:13:28.710 --> 00:13:30.590
a nice way of writing this.

492
00:13:30.590 --> 00:13:33.230
If the order that is being provided

493
00:13:33.230 --> 00:13:35.430
is none, notice here we are not

494
00:13:35.430 --> 00:13:37.960
providing any value and in this case

495
00:13:37.960 --> 00:13:39.280
we are not providing any value.

496
00:13:39.280 --> 00:13:40.360
So you shouldn't be appending

497
00:13:40.360 --> 00:13:41.120
or something like this.

498
00:13:41.120 --> 00:13:42.920
If you provide me a value then only

499
00:13:42.920 --> 00:13:44.520
the order append whatever value

500
00:13:44.520 --> 00:13:46.760
is coming in here should be there.

501
00:13:46.760 --> 00:13:47.840
So in this case I can just

502
00:13:47.840 --> 00:13:49.240
go ahead and use if clause

503
00:13:49.240 --> 00:13:52.200
and say if order is not in.

504
00:13:53.000 --> 00:13:54.600
If Order is none.

505
00:13:55.480 --> 00:13:57.560
I'll just go ahead and say

506
00:13:58.200 --> 00:14:00.840
order is equals to empty array.

507
00:14:00.840 --> 00:14:02.440
Now, no matter how many times I'm

508
00:14:02.440 --> 00:14:03.600
calling this, this will always

509
00:14:03.600 --> 00:14:05.080
remain because what I'm technically

510
00:14:05.080 --> 00:14:06.520
passing here is actually none.

511
00:14:07.110 --> 00:14:08.550
Whenever you are passing nothing,

512
00:14:08.550 --> 00:14:10.470
that means you're passing on none.

513
00:14:10.470 --> 00:14:11.350
It's something that we

514
00:14:11.350 --> 00:14:13.590
encountered, in here.

515
00:14:13.590 --> 00:14:15.110
So again, notice here we

516
00:14:15.110 --> 00:14:16.070
are not printing anything.

517
00:14:16.750 --> 00:14:17.430
Obviously we are not

518
00:14:17.430 --> 00:14:17.990
printing anything.

519
00:14:17.990 --> 00:14:19.590
But if you want to print this as well

520
00:14:19.590 --> 00:14:21.350
that, hey, what's the value of this?

521
00:14:21.350 --> 00:14:22.190
We can just go ahead

522
00:14:22.190 --> 00:14:23.510
and quickly do this.

523
00:14:23.510 --> 00:14:25.190
Print the order just like this.

524
00:14:26.150 --> 00:14:27.870
And I hope you got the idea of

525
00:14:27.870 --> 00:14:29.510
this is now both the time it's

526
00:14:29.510 --> 00:14:30.430
empty because you are not

527
00:14:30.430 --> 00:14:31.710
passing anything and you can

528
00:14:31.710 --> 00:14:33.350
still use the same logic order,

529
00:14:33.350 --> 00:14:34.750
append whatever the value is

530
00:14:34.750 --> 00:14:35.070
coming in.

531
00:14:35.070 --> 00:14:36.070
You can also check whether

532
00:14:36.070 --> 00:14:38.520
the length is more than zero.

533
00:14:38.520 --> 00:14:39.240
And then.

534
00:14:39.240 --> 00:14:40.200
You got the idea.

535
00:14:40.200 --> 00:14:41.400
You got the idea.

536
00:14:41.400 --> 00:14:43.360
This was just a small incident

537
00:14:43.360 --> 00:14:44.880
which I wanted to talk about.

538
00:14:44.880 --> 00:14:46.320
It's not something that, hey,

539
00:14:46.320 --> 00:14:48.040
just always keep in mind

540
00:14:48.040 --> 00:14:49.800
you will eventually learn with them

541
00:14:49.800 --> 00:14:51.280
as you will write more code.

542
00:14:51.280 --> 00:14:52.040
But that's all.

543
00:14:52.040 --> 00:14:53.200
That's all I wanted to talk

544
00:14:53.200 --> 00:14:54.800
about this hope you've enjoyed

545
00:14:54.800 --> 00:14:56.760
these, fun little videos.

546
00:14:56.760 --> 00:14:57.800
Please do rate us.

547
00:14:57.800 --> 00:14:58.760
And that is it.

548
00:14:58.760 --> 00:15:00.200
Let's catch up in next video.
