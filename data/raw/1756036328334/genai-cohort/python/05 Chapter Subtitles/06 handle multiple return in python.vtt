WEBVTT

1
00:00:01.120 --> 00:00:02.920
All right, so the next topic

2
00:00:02.920 --> 00:00:04.160
that we're going to discuss

3
00:00:04.160 --> 00:00:05.600
is about the return.

4
00:00:06.320 --> 00:00:08.560
So if you remember, we briefly

5
00:00:08.560 --> 00:00:10.240
touched on this topic, we had

6
00:00:10.240 --> 00:00:12.800
a simple function just like this.

7
00:00:12.800 --> 00:00:14.080
We have a function name

8
00:00:14.080 --> 00:00:15.720
we have discussed about what goes

9
00:00:15.720 --> 00:00:17.440
inside these parentheses.

10
00:00:17.440 --> 00:00:18.960
We goes like this.

11
00:00:19.520 --> 00:00:20.760
And, we usually go

12
00:00:20.760 --> 00:00:21.600
ahead and say pass.

13
00:00:21.600 --> 00:00:23.040
But you also have noticed, apart

14
00:00:23.040 --> 00:00:24.200
from print statement, we

15
00:00:24.200 --> 00:00:25.360
once wrote a return,

16
00:00:26.090 --> 00:00:28.010
value here or return keyword here.

17
00:00:28.010 --> 00:00:29.170
And when I say it's going

18
00:00:29.170 --> 00:00:30.490
to return, let's just say hitesh.

19
00:00:30.490 --> 00:00:31.730
That means it's returning

20
00:00:31.730 --> 00:00:33.050
a value, it's not printing it.

21
00:00:33.050 --> 00:00:34.370
What does it mean really?

22
00:00:34.370 --> 00:00:35.610
And can we have a small

23
00:00:35.610 --> 00:00:37.450
discussion on this for sure.

24
00:00:37.450 --> 00:00:39.250
Now I want to focus majorly

25
00:00:39.250 --> 00:00:40.210
on this keyword because

26
00:00:40.210 --> 00:00:41.370
it's an important one.

27
00:00:42.010 --> 00:00:45.650
Now imagine that you are a T seller

28
00:00:45.650 --> 00:00:48.410
and you have a great masala chai.

29
00:00:48.410 --> 00:00:51.010
What good is the effort if you don't

30
00:00:51.010 --> 00:00:53.050
hand in the cup to your customer?

31
00:00:53.660 --> 00:00:54.260
Exactly.

32
00:00:54.260 --> 00:00:54.580
Similar.

33
00:00:54.580 --> 00:00:56.580
This return keyword is this actually

34
00:00:56.580 --> 00:00:58.380
goes ahead and simply says,

35
00:00:58.940 --> 00:01:04.379
I will return you this value.

36
00:01:04.379 --> 00:01:06.140
And this value here

37
00:01:06.140 --> 00:01:07.260
can, be any value.

38
00:01:07.260 --> 00:01:08.780
So if I go ahead and say this

39
00:01:08.780 --> 00:01:10.300
value, this is exactly.

40
00:01:10.300 --> 00:01:11.820
Can be any value.

41
00:01:11.820 --> 00:01:12.860
Yeah, this is exactly

42
00:01:12.860 --> 00:01:13.820
what it's saying.

43
00:01:13.820 --> 00:01:15.540
I'll show you a more practical

44
00:01:15.540 --> 00:01:17.460
example of it, in fact, multiple

45
00:01:17.460 --> 00:01:18.580
examples of it, and then

46
00:01:18.580 --> 00:01:20.060
you will truly realize,

47
00:01:20.060 --> 00:01:21.860
all right, this is a really powerful

48
00:01:21.860 --> 00:01:23.900
keyword in its altogether.

49
00:01:23.900 --> 00:01:25.380
Let's go ahead and create a new file

50
00:01:25.380 --> 00:01:30.060
and call this one as tenreturn py.

51
00:01:30.060 --> 00:01:32.660
All right, so let's just say we

52
00:01:32.660 --> 00:01:33.620
simply go ahead and make

53
00:01:33.620 --> 00:01:35.900
a function which says make chai.

54
00:01:35.900 --> 00:01:36.860
And there we go.

55
00:01:37.500 --> 00:01:38.860
And, here it is.

56
00:01:38.860 --> 00:01:40.860
The simplest example is return.

57
00:01:40.860 --> 00:01:42.820
If I go ahead and use the keyword

58
00:01:42.820 --> 00:01:45.020
return, and I simply say,

59
00:01:45.830 --> 00:01:50.150
here is your masala chai.

60
00:01:50.150 --> 00:01:52.070
This is really interesting.

61
00:01:52.070 --> 00:01:53.750
Now further in my instruction,

62
00:01:53.750 --> 00:01:55.550
it's not printing by default as

63
00:01:55.550 --> 00:01:57.030
a function, but I want to print

64
00:01:57.030 --> 00:01:58.870
whatever the value it returns.

65
00:01:58.870 --> 00:01:59.590
So there are a couple

66
00:01:59.590 --> 00:02:00.590
of ways how this can be done.

67
00:02:00.590 --> 00:02:02.230
I can go ahead and say make chai.

68
00:02:02.230 --> 00:02:03.990
Now, whatever the result comes

69
00:02:03.990 --> 00:02:05.350
back, I'm immediately going

70
00:02:05.350 --> 00:02:06.630
ahead and printing this out.

71
00:02:06.630 --> 00:02:08.190
That's one way, very common way.

72
00:02:08.190 --> 00:02:09.830
You're going to see this quite a lot.

73
00:02:09.830 --> 00:02:12.070
So I just say Python 3, run this one.

74
00:02:12.070 --> 00:02:14.060
This is totally okay, but this

75
00:02:14.060 --> 00:02:15.580
is not really that easy

76
00:02:15.580 --> 00:02:16.860
to understand that what happens.

77
00:02:16.860 --> 00:02:18.220
So we'll cut this out and instead

78
00:02:18.220 --> 00:02:20.140
of going with this, I will just go

79
00:02:20.140 --> 00:02:22.220
ahead and use a value, return value.

80
00:02:22.220 --> 00:02:23.620
Don't use return as a keyword

81
00:02:23.620 --> 00:02:25.660
because it's, a reserved keyword.

82
00:02:25.660 --> 00:02:28.100
Python uses it, so we can't use it

83
00:02:28.100 --> 00:02:29.940
so now if I go ahead and use this,

84
00:02:29.940 --> 00:02:31.460
I hope you can see whenever this

85
00:02:31.460 --> 00:02:33.620
function executes and whatever it

86
00:02:33.620 --> 00:02:35.580
returns, that gets stored into

87
00:02:35.580 --> 00:02:37.300
this value and I can definitely

88
00:02:37.300 --> 00:02:39.430
after this print this value as

89
00:02:39.430 --> 00:02:40.990
return value, the result will be

90
00:02:40.990 --> 00:02:41.630
exactly same.

91
00:02:41.630 --> 00:02:43.310
But now this is much more easier

92
00:02:43.310 --> 00:02:44.230
for me to understand.

93
00:02:45.270 --> 00:02:46.830
So we need to study that.

94
00:02:46.830 --> 00:02:48.030
What happens when I go

95
00:02:48.030 --> 00:02:48.870
ahead and print this?

96
00:02:49.460 --> 00:02:50.310
That could be a case.

97
00:02:50.310 --> 00:02:51.510
That's a very interesting case.

98
00:02:51.510 --> 00:02:52.790
Let's just say I'll

99
00:02:52.790 --> 00:02:54.589
comment this out and I'll go

100
00:02:54.589 --> 00:02:55.990
ahead and just say print.

101
00:02:56.790 --> 00:02:57.990
And I want to print

102
00:02:57.990 --> 00:02:58.830
something like this.

103
00:02:58.830 --> 00:03:03.670
And I will say here is your masala.

104
00:03:03.670 --> 00:03:05.350
Oh, I did a typo prep before that.

105
00:03:05.350 --> 00:03:06.540
Masala chai.

106
00:03:06.540 --> 00:03:07.420
What's in this case?

107
00:03:07.420 --> 00:03:08.500
What would be the value

108
00:03:08.500 --> 00:03:09.580
of return value?

109
00:03:09.580 --> 00:03:10.820
And this is exactly, you

110
00:03:10.820 --> 00:03:11.660
should be aware of this,

111
00:03:11.660 --> 00:03:12.700
that this will be none.

112
00:03:12.700 --> 00:03:13.540
So let's go ahead and have

113
00:03:13.540 --> 00:03:15.260
a discussion on this one.

114
00:03:15.260 --> 00:03:16.540
So whenever there are a couple of

115
00:03:16.540 --> 00:03:18.380
cases that goes through like this.

116
00:03:18.380 --> 00:03:19.140
So let's go ahead

117
00:03:19.140 --> 00:03:19.980
and understand this.

118
00:03:20.540 --> 00:03:21.860
So return can actually

119
00:03:21.860 --> 00:03:23.100
return nothing.

120
00:03:23.100 --> 00:03:25.420
When you go ahead and return nothing,

121
00:03:25.420 --> 00:03:27.340
this is simply known

122
00:03:27.340 --> 00:03:30.380
as that you are implicitly,

123
00:03:32.630 --> 00:03:36.070
implicitly returns as none.

124
00:03:36.070 --> 00:03:37.350
That's interesting.

125
00:03:37.350 --> 00:03:38.590
Now you can also go ahead.

126
00:03:38.590 --> 00:03:39.790
If you don't return anything,

127
00:03:39.790 --> 00:03:41.390
the none will be returned to you.

128
00:03:41.390 --> 00:03:43.110
So this is again a keyword.

129
00:03:43.110 --> 00:03:44.350
But this is interesting.

130
00:03:44.350 --> 00:03:48.070
You can also return one value value.

131
00:03:48.070 --> 00:03:50.630
You can return multiple

132
00:03:50.630 --> 00:03:52.710
value and you can also

133
00:03:52.710 --> 00:03:54.350
early return from a function.

134
00:03:54.350 --> 00:03:55.670
What do you mean by early?

135
00:03:56.400 --> 00:03:57.310
From a function.

136
00:03:57.310 --> 00:03:58.630
I'll show you example

137
00:03:58.630 --> 00:04:00.030
for each one of them.

138
00:04:00.030 --> 00:04:01.230
Don't you worry in that case.

139
00:04:01.950 --> 00:04:03.550
So we'll take another such

140
00:04:03.550 --> 00:04:05.790
examples for in this case we

141
00:04:05.790 --> 00:04:06.950
have seen it once, but I want

142
00:04:06.950 --> 00:04:08.110
to show you it again.

143
00:04:08.110 --> 00:04:10.710
All right, so let's just say I

144
00:04:10.710 --> 00:04:12.870
create a function and I say this

145
00:04:12.870 --> 00:04:19.269
is my idle ideal idle chaiwala,

146
00:04:19.269 --> 00:04:21.870
which also names as tea seller.

147
00:04:21.870 --> 00:04:22.950
And I will go ahead

148
00:04:22.950 --> 00:04:23.870
and just say pass.

149
00:04:23.870 --> 00:04:25.900
I don't do anything in this one.

150
00:04:25.900 --> 00:04:27.580
So if I go ahead and try to print

151
00:04:27.580 --> 00:04:29.620
the value here and I say this

152
00:04:29.620 --> 00:04:32.060
is my idle chaiwala, runs this.

153
00:04:32.060 --> 00:04:33.780
Now you'll also notice again this

154
00:04:33.780 --> 00:04:36.140
time first let's comment this one.

155
00:04:36.140 --> 00:04:37.020
No printing.

156
00:04:37.740 --> 00:04:39.820
And yeah, that's okay.

157
00:04:39.820 --> 00:04:40.460
That's it.

158
00:04:41.500 --> 00:04:42.540
Save this.

159
00:04:42.540 --> 00:04:43.260
Run this again.

160
00:04:43.260 --> 00:04:45.340
And now you see print.

161
00:04:45.340 --> 00:04:47.100
Of course this also prints.

162
00:04:47.100 --> 00:04:48.700
I don't want it to be here.

163
00:04:48.700 --> 00:04:50.220
I'll just comment this

164
00:04:50.220 --> 00:04:52.280
and this as well.

165
00:04:52.280 --> 00:04:53.000
Too many comments.

166
00:04:53.000 --> 00:04:54.400
But don't focus on that.

167
00:04:54.400 --> 00:04:55.560
Just focus on this.

168
00:04:55.560 --> 00:04:56.920
So we can see this ideally

169
00:04:56.920 --> 00:04:58.600
gives me none as the value.

170
00:04:58.600 --> 00:04:59.600
Just see it up here.

171
00:04:59.600 --> 00:05:00.240
The none.

172
00:05:00.240 --> 00:05:00.760
Yep.

173
00:05:01.640 --> 00:05:02.960
This marks the point

174
00:05:02.960 --> 00:05:04.760
that, hey, nothing.

175
00:05:04.760 --> 00:05:06.280
When you give me nothing,

176
00:05:06.280 --> 00:05:07.680
it will be implicitly

177
00:05:07.680 --> 00:05:09.200
returning me a none object.

178
00:05:09.200 --> 00:05:09.960
And I can do a lot

179
00:05:09.960 --> 00:05:11.240
of things with that.

180
00:05:11.240 --> 00:05:13.320
Now what happens if I want

181
00:05:13.320 --> 00:05:14.360
to do something more?

182
00:05:14.360 --> 00:05:16.680
All right, let's just say you define

183
00:05:16.680 --> 00:05:19.160
another function which is sold cups.

184
00:05:19.690 --> 00:05:21.330
And in the sold cups you go ahead

185
00:05:21.330 --> 00:05:23.290
and return me one number only.

186
00:05:23.290 --> 00:05:24.610
So that number could be

187
00:05:24.610 --> 00:05:25.930
anything or could be a true

188
00:05:25.930 --> 00:05:27.770
false, whatever the value is.

189
00:05:27.770 --> 00:05:29.370
The interesting part now is

190
00:05:29.370 --> 00:05:30.610
I can go ahead and store

191
00:05:30.610 --> 00:05:32.170
this into any variable.

192
00:05:32.170 --> 00:05:34.010
I can just run this function just

193
00:05:34.010 --> 00:05:35.610
like this and whatever the result

194
00:05:35.610 --> 00:05:38.170
comes back, I store that result.

195
00:05:38.810 --> 00:05:40.250
I can go ahead and print this

196
00:05:40.250 --> 00:05:42.290
total and I'm pretty sure you have

197
00:05:42.290 --> 00:05:43.770
guessed the output by now.

198
00:05:43.770 --> 00:05:45.170
What's going to be the output

199
00:05:45.170 --> 00:05:45.850
for this one?

200
00:05:45.850 --> 00:05:48.030
So there we go, run it again.

201
00:05:48.030 --> 00:05:49.550
We see that the none is above

202
00:05:49.550 --> 00:05:52.190
output, but we have this 120.

203
00:05:52.190 --> 00:05:52.870
Pretty nice.

204
00:05:52.870 --> 00:05:54.430
Interesting, isn't it?

205
00:05:54.430 --> 00:05:57.390
All right, so what about

206
00:05:57.390 --> 00:05:58.430
returning early?

207
00:05:58.430 --> 00:06:00.110
Because I know multiple value

208
00:06:00.110 --> 00:06:01.150
will see that for sure.

209
00:06:01.150 --> 00:06:02.830
But right now let's just see.

210
00:06:02.830 --> 00:06:04.430
We have seen the one value.

211
00:06:04.430 --> 00:06:05.790
Now I want to see the early

212
00:06:05.790 --> 00:06:06.590
from a function.

213
00:06:06.590 --> 00:06:07.510
We'll surely handle

214
00:06:07.510 --> 00:06:08.230
the multiple value.

215
00:06:08.230 --> 00:06:09.710
Don't you worry on that.

216
00:06:09.710 --> 00:06:11.110
Let's just say you define another

217
00:06:11.110 --> 00:06:13.790
one which says chai status.

218
00:06:14.440 --> 00:06:17.320
And what I say is this takes

219
00:06:17.320 --> 00:06:21.560
parameter as cups left left.

220
00:06:22.200 --> 00:06:24.280
And we have a condition here that

221
00:06:24.280 --> 00:06:28.840
if somehow the value cups left is

222
00:06:28.840 --> 00:06:31.560
equals to zero, and in that case

223
00:06:31.560 --> 00:06:33.600
I simply want to return, surely I

224
00:06:33.600 --> 00:06:35.360
can use break, but I just want to

225
00:06:35.360 --> 00:06:40.040
return that says sorry chai over

226
00:06:40.040 --> 00:06:41.920
or chai I can use other words as

227
00:06:41.920 --> 00:06:43.520
well in my native language, but

228
00:06:43.520 --> 00:06:45.280
I'll go and in the other cases

229
00:06:45.280 --> 00:06:47.560
I'll go ahead and say chai is

230
00:06:47.560 --> 00:06:48.280
ready.

231
00:06:48.280 --> 00:06:50.320
All right, so how can we use this?

232
00:06:50.320 --> 00:06:51.400
How can we actually

233
00:06:51.400 --> 00:06:53.160
short circuit this one?

234
00:06:53.160 --> 00:06:55.080
So if I go ahead and print this out

235
00:06:55.080 --> 00:06:59.760
as my chai status and I go ahead

236
00:06:59.760 --> 00:07:02.440
and pass on a value of 0 VS I pass

237
00:07:02.440 --> 00:07:05.120
on a value of 5 in the first line,

238
00:07:05.120 --> 00:07:06.600
we are actually short circuiting

239
00:07:06.600 --> 00:07:06.880
it.

240
00:07:06.880 --> 00:07:08.640
That means once the return value is

241
00:07:08.640 --> 00:07:10.420
there and once a function hits

242
00:07:10.420 --> 00:07:13.020
return, no other code is executed.

243
00:07:13.020 --> 00:07:14.900
I repeat this once a function

244
00:07:14.900 --> 00:07:16.540
hits the return keyword.

245
00:07:16.540 --> 00:07:18.500
After that, no matter what happens,

246
00:07:18.500 --> 00:07:20.780
other code will not execute.

247
00:07:20.780 --> 00:07:22.620
All right, let's see that in action.

248
00:07:22.620 --> 00:07:24.020
So in the first line you're going

249
00:07:24.020 --> 00:07:25.980
to see that the sorry chi over.

250
00:07:25.980 --> 00:07:27.540
If this is getting printed in

251
00:07:27.540 --> 00:07:29.740
the first iteration of the function,

252
00:07:29.740 --> 00:07:31.980
this chai isready never prints out.

253
00:07:31.980 --> 00:07:33.060
But in the other case, when you

254
00:07:33.060 --> 00:07:34.740
pass on the 5 value, you never

255
00:07:34.740 --> 00:07:36.420
are Short circuiting it and you

256
00:07:36.420 --> 00:07:37.740
always get the chise ready.

257
00:07:38.360 --> 00:07:40.080
What you'll also notice if I go ahead

258
00:07:40.080 --> 00:07:41.720
and say that I want to print

259
00:07:41.720 --> 00:07:44.120
something here within this function.

260
00:07:44.120 --> 00:07:45.800
Notice here what happens if I

261
00:07:45.800 --> 00:07:47.720
go ahead and print say chai.

262
00:07:47.720 --> 00:07:49.400
Notice here it's always grayed out.

263
00:07:49.960 --> 00:07:51.080
I hope you can see that.

264
00:07:51.080 --> 00:07:51.760
Very difficult.

265
00:07:51.760 --> 00:07:53.000
But still you can see this.

266
00:07:53.000 --> 00:07:53.960
This is grayed out.

267
00:07:53.960 --> 00:07:56.280
If I try to run this, the code,

268
00:07:56.280 --> 00:07:57.600
no matter what happens, will

269
00:07:57.600 --> 00:07:59.240
never reach to line number 24.

270
00:07:59.240 --> 00:08:00.280
Because once you return,

271
00:08:00.280 --> 00:08:01.720
that means that is it.

272
00:08:01.720 --> 00:08:02.800
And that's what it says

273
00:08:02.800 --> 00:08:04.600
early from a function.

274
00:08:04.600 --> 00:08:06.760
Returns early from a function.

275
00:08:06.760 --> 00:08:08.280
All right, hope this is now clear.

276
00:08:09.160 --> 00:08:10.600
Now one more thing.

277
00:08:10.600 --> 00:08:12.120
How about we talk about

278
00:08:12.120 --> 00:08:13.640
returning multiple values.

279
00:08:13.640 --> 00:08:14.440
This is what you will

280
00:08:14.440 --> 00:08:15.480
see quite a lot.

281
00:08:15.480 --> 00:08:17.320
A lot of other languages are also

282
00:08:17.880 --> 00:08:19.160
adopting this behavior.

283
00:08:19.160 --> 00:08:21.320
But this is actually very fun.

284
00:08:21.320 --> 00:08:23.800
I can go ahead and say that I will

285
00:08:23.800 --> 00:08:28.360
go ahead and work on with chireport.

286
00:08:28.360 --> 00:08:30.200
I'm collecting a report for chai

287
00:08:31.210 --> 00:08:32.650
and then I return

288
00:08:32.650 --> 00:08:34.490
somehow I return two values.

289
00:08:34.490 --> 00:08:35.450
120.

290
00:08:35.450 --> 00:08:37.530
Now by the way, you can return true,

291
00:08:37.530 --> 00:08:40.970
false or arrays.

292
00:08:40.970 --> 00:08:42.049
You can return anything

293
00:08:42.049 --> 00:08:42.970
which you wish.

294
00:08:42.970 --> 00:08:44.770
What I am returning for just my

295
00:08:44.770 --> 00:08:46.050
reference, I'm saying how many

296
00:08:46.050 --> 00:08:48.410
sold and how many remaining.

297
00:08:48.410 --> 00:08:49.690
All right, good enough.

298
00:08:50.410 --> 00:08:52.290
Now with this, any function, as

299
00:08:52.290 --> 00:08:53.530
soon as you execute this

300
00:08:53.530 --> 00:08:55.610
method, which is chireport,

301
00:08:55.610 --> 00:08:57.170
this will return you two values.

302
00:08:57.170 --> 00:08:57.890
So what you can expect,

303
00:08:57.890 --> 00:09:00.350
you can declare two values, sold

304
00:09:00.350 --> 00:09:01.790
and remaining.

305
00:09:02.430 --> 00:09:03.670
And automatically when this

306
00:09:03.670 --> 00:09:04.750
function execute, it will

307
00:09:04.750 --> 00:09:05.590
give you the two values.

308
00:09:05.590 --> 00:09:06.310
Surely you can return

309
00:09:06.310 --> 00:09:07.190
third value as well.

310
00:09:07.190 --> 00:09:08.670
But since you are not handling this,

311
00:09:08.670 --> 00:09:10.630
this will go probably in the air.

312
00:09:10.630 --> 00:09:12.270
Nobody is going with that.

313
00:09:12.270 --> 00:09:13.310
Let's go ahead and print

314
00:09:13.310 --> 00:09:14.670
out the values.

315
00:09:14.670 --> 00:09:16.309
So I'll just go ahead and say this

316
00:09:16.309 --> 00:09:19.550
one is sold and I want to have

317
00:09:19.550 --> 00:09:21.630
the sold variable another one.

318
00:09:21.630 --> 00:09:22.710
We are going to go ahead

319
00:09:22.710 --> 00:09:23.710
and say remaining.

320
00:09:24.590 --> 00:09:29.610
For this one I will say remaining.

321
00:09:29.610 --> 00:09:30.810
Hope I wrote that correct.

322
00:09:31.370 --> 00:09:32.490
So we get this one.

323
00:09:32.490 --> 00:09:34.250
Let's see what's the output of this?

324
00:09:34.250 --> 00:09:35.970
You might have guessed the sold

325
00:09:35.970 --> 00:09:37.450
is 100 and all of that.

326
00:09:37.450 --> 00:09:39.050
But what happens in the case

327
00:09:39.050 --> 00:09:41.849
when actually function returns 10

328
00:09:41.849 --> 00:09:42.650
for something?

329
00:09:42.650 --> 00:09:44.730
Some people haven't paid for that.

330
00:09:44.730 --> 00:09:46.410
So in that case the function will

331
00:09:46.410 --> 00:09:48.610
simply say that hey, we are

332
00:09:48.610 --> 00:09:50.930
returning unpacking three values.

333
00:09:50.930 --> 00:09:52.010
Why are you not handling

334
00:09:52.010 --> 00:09:53.210
the three values?

335
00:09:53.210 --> 00:09:53.730
And there are a couple

336
00:09:53.730 --> 00:09:55.090
of ways how this is handled

337
00:09:55.090 --> 00:09:56.330
or this can be handled.

338
00:09:56.330 --> 00:09:57.810
Oh, in case you are an experienced

339
00:09:57.810 --> 00:09:58.850
programmer, you might be guessing,

340
00:09:58.850 --> 00:09:59.890
hey, what if I just go ahead

341
00:09:59.890 --> 00:10:01.770
and put up an underscore here.

342
00:10:01.770 --> 00:10:02.850
I'll show you directly

343
00:10:02.850 --> 00:10:04.010
practical what happens.

344
00:10:04.010 --> 00:10:05.210
The code actually runs.

345
00:10:05.210 --> 00:10:06.970
And you will see this quite a lot.

346
00:10:06.970 --> 00:10:08.610
Underscore means, hey, I know

347
00:10:08.610 --> 00:10:10.410
the three values are coming in, I'm

348
00:10:10.410 --> 00:10:12.570
handling them, but I'll probably

349
00:10:12.570 --> 00:10:14.410
never ever use this value here.

350
00:10:14.410 --> 00:10:15.650
So it's, a common practice.

351
00:10:15.650 --> 00:10:17.090
You might use underscore here.

352
00:10:17.090 --> 00:10:17.770
That's a hack.

353
00:10:18.280 --> 00:10:19.490
But most of the time you want

354
00:10:19.490 --> 00:10:21.300
to have this, so, I'll just

355
00:10:21.300 --> 00:10:23.980
go ahead and say, not paid.

356
00:10:23.980 --> 00:10:25.780
And it's up to me that I don't want

357
00:10:25.780 --> 00:10:27.900
to use this value or this variable.

358
00:10:27.900 --> 00:10:28.500
It's okay.

359
00:10:28.500 --> 00:10:29.900
You can actually run both

360
00:10:29.900 --> 00:10:32.140
of the cases, so this is really fun.

361
00:10:32.780 --> 00:10:34.620
So I hope this gives you the idea

362
00:10:34.620 --> 00:10:36.460
of how it works and how

363
00:10:36.460 --> 00:10:38.500
the function return can be a really,

364
00:10:38.500 --> 00:10:39.820
really interesting topic.

365
00:10:39.820 --> 00:10:41.020
So that is it for this video.

366
00:10:41.020 --> 00:10:42.060
Let's catch up quickly

367
00:10:42.060 --> 00:10:42.940
in the next one.
