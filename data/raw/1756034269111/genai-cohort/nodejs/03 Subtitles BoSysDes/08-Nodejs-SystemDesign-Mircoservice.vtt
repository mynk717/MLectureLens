WEBVTT

1
00:00:00.160 --> 00:00:02.400
All right, so now what we can do

2
00:00:02.400 --> 00:00:04.360
is now to make it more scalable

3
00:00:04.360 --> 00:00:06.400
and independent, what we can do is

4
00:00:06.400 --> 00:00:08.280
we can break down our source code

5
00:00:08.280 --> 00:00:09.800
into multiple source codes.

6
00:00:09.800 --> 00:00:10.400
Okay?

7
00:00:10.400 --> 00:00:11.520
So now in this particular

8
00:00:11.520 --> 00:00:13.120
scenario, what we can do is I

9
00:00:13.120 --> 00:00:14.440
will actually maintain four

10
00:00:14.440 --> 00:00:15.840
different repositories for.

11
00:00:15.840 --> 00:00:17.120
So I will just say four

12
00:00:17.120 --> 00:00:18.200
different projects.

13
00:00:18.200 --> 00:00:19.360
I will maintain.

14
00:00:19.360 --> 00:00:20.440
One project is going

15
00:00:20.440 --> 00:00:21.680
to be my auth service.

16
00:00:21.680 --> 00:00:22.320
Okay?

17
00:00:22.320 --> 00:00:23.440
Service, not service.

18
00:00:23.440 --> 00:00:24.640
I'll just say service.

19
00:00:24.640 --> 00:00:26.120
Then I will have a payment

20
00:00:26.120 --> 00:00:27.600
service which is an independent

21
00:00:27.600 --> 00:00:29.280
server, independent code, okay?

22
00:00:29.280 --> 00:00:30.940
Independent running on a port.

23
00:00:30.940 --> 00:00:33.220
I will have an order service, okay?

24
00:00:33.220 --> 00:00:33.940
And then I will have

25
00:00:33.940 --> 00:00:34.860
an email service.

26
00:00:35.420 --> 00:00:37.340
Now the best part about breaking

27
00:00:37.340 --> 00:00:39.180
this down is, number one,

28
00:00:39.180 --> 00:00:40.700
now all the services

29
00:00:40.700 --> 00:00:42.860
are isolated from each other.

30
00:00:42.860 --> 00:00:45.220
That means these services can have

31
00:00:45.220 --> 00:00:46.699
their independent databases.

32
00:00:46.699 --> 00:00:48.060
Independent tech stack.

33
00:00:48.060 --> 00:00:50.220
For example, you might write

34
00:00:50.220 --> 00:00:51.820
auth service in Python.

35
00:00:51.820 --> 00:00:53.700
You might, okay, you might write

36
00:00:53.700 --> 00:00:55.900
your payment services in Golang.

37
00:00:55.900 --> 00:00:58.700
You might write your order service in

38
00:00:58.700 --> 00:01:00.700
Node JS, that is your JavaScript.

39
00:01:00.700 --> 00:01:02.840
And you might write your

40
00:01:02.840 --> 00:01:04.760
email service again in the node js.

41
00:01:04.760 --> 00:01:06.680
There is also a possibility that your

42
00:01:06.680 --> 00:01:09.440
auth server can use a MongoDB as a

43
00:01:09.440 --> 00:01:11.480
primary database and rest of the

44
00:01:11.480 --> 00:01:13.160
services can actually rely on a

45
00:01:13.160 --> 00:01:15.280
postgres or some other database in

46
00:01:15.280 --> 00:01:15.640
this case.

47
00:01:15.640 --> 00:01:16.120
Okay?

48
00:01:16.120 --> 00:01:17.280
So let's say this is also using

49
00:01:17.280 --> 00:01:19.100
postgres, this is also using your,

50
00:01:19.100 --> 00:01:20.040
you know, postgres, and this

51
00:01:20.040 --> 00:01:21.640
is also using your postgres.

52
00:01:21.640 --> 00:01:23.920
All right, now what happens is how

53
00:01:23.920 --> 00:01:25.640
you basically deploy these services.

54
00:01:25.640 --> 00:01:27.720
Number one, you have to deploy

55
00:01:27.720 --> 00:01:29.440
them separately and every

56
00:01:29.440 --> 00:01:30.640
service can have their

57
00:01:30.640 --> 00:01:32.530
different auto scaling policy.

58
00:01:32.530 --> 00:01:34.130
Let me just create a diagram for you.

59
00:01:34.130 --> 00:01:35.090
Let's assume that this

60
00:01:35.090 --> 00:01:36.010
is your auth service.

61
00:01:36.010 --> 00:01:36.370
Okay?

62
00:01:36.370 --> 00:01:38.130
So I'll just name it as auth service.

63
00:01:38.130 --> 00:01:39.530
Let's say this auth service is

64
00:01:39.530 --> 00:01:40.850
written in Python language.

65
00:01:40.850 --> 00:01:41.730
Okay?

66
00:01:41.730 --> 00:01:43.410
Now auth service is

67
00:01:43.410 --> 00:01:45.290
somewhat not that busy.

68
00:01:45.290 --> 00:01:46.770
So let's say I want three

69
00:01:46.770 --> 00:01:48.850
instances of auth service.

70
00:01:48.850 --> 00:01:49.850
That is it.

71
00:01:49.850 --> 00:01:51.170
Okay, so this is your one,

72
00:01:51.170 --> 00:01:53.970
and this service, will have its own

73
00:01:53.970 --> 00:01:55.690
load, reverse proxy.

74
00:01:55.690 --> 00:01:55.970
Okay?

75
00:01:55.970 --> 00:01:57.250
Or a load balancer.

76
00:01:57.250 --> 00:01:58.890
So this is a load balancer, which

77
00:01:58.890 --> 00:02:00.610
is load balancing between 1,

78
00:02:01.140 --> 00:02:03.380
this, 2, and this is the third one.

79
00:02:03.380 --> 00:02:04.420
That's great.

80
00:02:04.420 --> 00:02:05.980
Now if I copy this particular

81
00:02:05.980 --> 00:02:07.540
thing, let's have another one.

82
00:02:07.540 --> 00:02:09.300
You know, completely isolated.

83
00:02:09.300 --> 00:02:10.340
Let's say this is your

84
00:02:10.340 --> 00:02:11.460
payment service.

85
00:02:11.460 --> 00:02:12.700
You want your payment service

86
00:02:12.700 --> 00:02:14.420
to be very highly available.

87
00:02:14.420 --> 00:02:15.620
And you know you will have

88
00:02:15.620 --> 00:02:16.899
much more servers here.

89
00:02:16.899 --> 00:02:18.500
So let's say you have more servers.

90
00:02:18.500 --> 00:02:20.180
You again have a reverse proxy.

91
00:02:20.180 --> 00:02:21.420
I mean a load balancer.

92
00:02:21.420 --> 00:02:22.500
And this is also done.

93
00:02:22.500 --> 00:02:24.340
Okay, now let's say your

94
00:02:24.340 --> 00:02:25.860
order Service is something

95
00:02:25.860 --> 00:02:27.060
which is very busy, right?

96
00:02:27.060 --> 00:02:28.270
That is what we discussed.

97
00:02:28.270 --> 00:02:29.550
So in your order service you

98
00:02:29.550 --> 00:02:31.790
actually have more data, more

99
00:02:31.790 --> 00:02:33.550
servers right here to deploy.

100
00:02:33.550 --> 00:02:35.950
So let's rename it as order service.

101
00:02:35.950 --> 00:02:37.630
Okay, Order service.

102
00:02:37.630 --> 00:02:39.470
So now you have a lot of servers

103
00:02:39.470 --> 00:02:40.990
for your order service.

104
00:02:40.990 --> 00:02:42.030
Now see, we are

105
00:02:42.030 --> 00:02:43.310
independently scaling.

106
00:02:43.310 --> 00:02:44.910
Okay, so I'll just paste it here.

107
00:02:44.910 --> 00:02:46.390
And then finally let's also

108
00:02:46.390 --> 00:02:47.630
have our email service.

109
00:02:47.630 --> 00:02:48.710
Now let's say email service

110
00:02:48.710 --> 00:02:50.310
is a very simple service.

111
00:02:50.310 --> 00:02:51.790
You know, there is not much

112
00:02:51.790 --> 00:02:53.390
load in the email service.

113
00:02:53.390 --> 00:02:54.750
So I'll just have two servers.

114
00:02:54.750 --> 00:02:56.110
So let's remove that.

115
00:02:56.110 --> 00:02:57.550
So now this is your

116
00:02:57.550 --> 00:03:00.410
microservice architecture, micro

117
00:03:00.410 --> 00:03:01.930
service architecture.

118
00:03:01.930 --> 00:03:03.130
Because what you are basically

119
00:03:03.130 --> 00:03:04.330
doing is you are breaking

120
00:03:04.330 --> 00:03:05.650
down these concepts.

121
00:03:05.650 --> 00:03:06.570
You are breaking down all

122
00:03:06.570 --> 00:03:08.170
the services and routes

123
00:03:08.170 --> 00:03:09.930
into their separate service.

124
00:03:09.930 --> 00:03:12.330
Now the best part is the AUTH service

125
00:03:12.330 --> 00:03:14.330
can be scaled independently that if

126
00:03:14.330 --> 00:03:16.170
more request is coming, you can just

127
00:03:16.170 --> 00:03:18.050
scale auth service tomorrow.

128
00:03:18.050 --> 00:03:19.490
Let's say authentication service has

129
00:03:19.490 --> 00:03:21.410
more load, just add one more server.

130
00:03:21.410 --> 00:03:23.410
For the AUTH service, you need not

131
00:03:23.410 --> 00:03:24.690
to touch payment service, you need

132
00:03:24.690 --> 00:03:26.010
not to touch the order service.

133
00:03:26.550 --> 00:03:28.470
One more advantage is that let's say

134
00:03:28.470 --> 00:03:30.870
in your monolith architecture

135
00:03:30.870 --> 00:03:33.190
something failed in email.

136
00:03:33.190 --> 00:03:33.830
Something failed.

137
00:03:33.830 --> 00:03:34.150
Okay?

138
00:03:34.150 --> 00:03:36.070
There was a bug in your email code

139
00:03:36.070 --> 00:03:37.350
due to which this whole

140
00:03:37.350 --> 00:03:38.390
server is going to crash.

141
00:03:38.390 --> 00:03:39.390
Due to which this whole

142
00:03:39.390 --> 00:03:40.630
server is going to crash.

143
00:03:40.630 --> 00:03:42.670
So that means the problem in one

144
00:03:42.670 --> 00:03:44.190
service, that is email service can

145
00:03:44.190 --> 00:03:46.390
lead to crash of the whole system.

146
00:03:46.390 --> 00:03:47.750
But that is not the case here.

147
00:03:47.750 --> 00:03:49.350
If in this particular scenario

148
00:03:49.350 --> 00:03:50.710
the email service is causing

149
00:03:50.710 --> 00:03:52.630
an issue, only and only

150
00:03:52.630 --> 00:03:54.630
the email service will go down.

151
00:03:54.630 --> 00:03:56.350
Rest all services, that is your

152
00:03:56.350 --> 00:03:57.830
order service, your payment service

153
00:03:57.830 --> 00:03:59.330
and your authentication service

154
00:03:59.330 --> 00:04:01.370
will still work as fine.

155
00:04:01.370 --> 00:04:02.530
So this is the main advantage

156
00:04:02.530 --> 00:04:04.210
of microservice architecture.

157
00:04:04.210 --> 00:04:06.090
There is of course a drawback

158
00:04:06.090 --> 00:04:07.730
or a cost associated with

159
00:04:07.730 --> 00:04:09.010
the microservice architecture

160
00:04:09.010 --> 00:04:10.290
that now you have to maintain

161
00:04:10.290 --> 00:04:11.530
a lot of servers, right?

162
00:04:11.530 --> 00:04:12.530
The cost is high.

163
00:04:12.530 --> 00:04:13.610
You have to monitor,

164
00:04:13.610 --> 00:04:14.570
you have to maintain.

165
00:04:14.570 --> 00:04:16.250
You have to maintain a lot of code,

166
00:04:16.250 --> 00:04:19.010
a lot of segregation about the code.

167
00:04:19.010 --> 00:04:20.570
And you have to maintain a lot

168
00:04:20.570 --> 00:04:21.810
of new repositories, right?

169
00:04:21.810 --> 00:04:22.890
For every service you have

170
00:04:22.890 --> 00:04:24.130
to create a new source code.

171
00:04:24.130 --> 00:04:26.290
You have to maintain a source code.

172
00:04:26.290 --> 00:04:28.050
And monitoring can be sometimes

173
00:04:28.050 --> 00:04:29.910
very difficult and it is

174
00:04:29.910 --> 00:04:31.630
costly on infrastructure.

175
00:04:31.630 --> 00:04:32.790
It costs a lot of money.

176
00:04:32.790 --> 00:04:35.110
Okay, now there are two more

177
00:04:35.110 --> 00:04:36.790
fundamental problems with

178
00:04:36.790 --> 00:04:38.150
the microservice architecture.

179
00:04:38.150 --> 00:04:40.430
Number one, how will user decide

180
00:04:40.430 --> 00:04:42.110
that where to route the request?

181
00:04:42.110 --> 00:04:43.470
Should I talk to the AUTH

182
00:04:43.470 --> 00:04:44.350
server, Should I talk to

183
00:04:44.350 --> 00:04:45.750
the payment service or should I talk

184
00:04:45.750 --> 00:04:46.550
to the order service.

185
00:04:46.550 --> 00:04:48.430
This is one fundamental problem.

186
00:04:48.430 --> 00:04:49.750
Second fundamental problem

187
00:04:49.750 --> 00:04:51.190
in microservice architecture

188
00:04:51.190 --> 00:04:52.910
is how these services

189
00:04:52.910 --> 00:04:54.670
can communicate to each other.

190
00:04:54.670 --> 00:04:56.630
For example, when an order is

191
00:04:56.630 --> 00:04:57.670
successful, maybe it want

192
00:04:57.670 --> 00:04:58.790
to talk to the payment service

193
00:04:58.790 --> 00:05:00.490
that hey, is this,

194
00:05:00.490 --> 00:05:01.930
have you received this payment?

195
00:05:01.930 --> 00:05:03.650
Or maybe the order service wants

196
00:05:03.650 --> 00:05:04.650
to talk to email service

197
00:05:04.650 --> 00:05:06.090
to send an email to the user.

198
00:05:06.090 --> 00:05:07.170
So how this communication

199
00:05:07.170 --> 00:05:07.770
will happen?

200
00:05:07.770 --> 00:05:09.450
So this is one fundamental problem

201
00:05:09.450 --> 00:05:10.650
which we are going to understand

202
00:05:10.650 --> 00:05:12.090
in the upcoming videos.
