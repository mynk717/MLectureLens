WEBVTT

1
00:00:00.160 --> 00:00:01.760
All right guys, so in this particular

2
00:00:01.760 --> 00:00:04.520
video let's code an authentication

3
00:00:04.520 --> 00:00:06.320
system end to end, using

4
00:00:06.320 --> 00:00:08.320
session based authentication.

5
00:00:08.320 --> 00:00:09.880
I hope at this particular point.

6
00:00:09.880 --> 00:00:11.480
You know what is a session

7
00:00:11.480 --> 00:00:12.640
based authentication?

8
00:00:12.640 --> 00:00:13.840
Why is it known as

9
00:00:13.840 --> 00:00:15.280
stateful authentication?

10
00:00:15.280 --> 00:00:16.600
And with that let's start

11
00:00:16.600 --> 00:00:17.600
with the video.

12
00:00:17.600 --> 00:00:19.320
So here I have made a simple

13
00:00:19.320 --> 00:00:20.360
project that is

14
00:00:20.360 --> 00:00:22.120
authentication session, right?

15
00:00:22.120 --> 00:00:22.920
So this is what we are

16
00:00:22.920 --> 00:00:24.000
going to use here.

17
00:00:24.000 --> 00:00:25.360
And let's get started.

18
00:00:25.360 --> 00:00:26.790
Okay, so, so first of all what I'm

19
00:00:26.790 --> 00:00:29.120
going to do is I'm going to use PNPM

20
00:00:29.120 --> 00:00:30.950
As my package manager.

21
00:00:30.950 --> 00:00:33.350
So it's basically same as npm.

22
00:00:33.350 --> 00:00:35.510
So if you search for pnpm, it's

23
00:00:35.510 --> 00:00:37.910
basically a better version of npm.

24
00:00:37.910 --> 00:00:38.390
Okay.

25
00:00:38.390 --> 00:00:40.230
It works similar to npm

26
00:00:40.230 --> 00:00:41.630
and everything is that, but it

27
00:00:41.630 --> 00:00:43.670
is more fast, it has more

28
00:00:43.670 --> 00:00:46.230
optimal and it caches.

29
00:00:46.230 --> 00:00:47.390
So I would prefer that if

30
00:00:47.390 --> 00:00:48.790
you can also use pnpm.

31
00:00:48.790 --> 00:00:49.590
The installation is

32
00:00:49.590 --> 00:00:51.430
very simple for pnpm.

33
00:00:51.430 --> 00:00:52.470
So here you can see all

34
00:00:52.470 --> 00:00:53.470
the installation steps.

35
00:00:53.470 --> 00:00:55.270
For example, PowerShell

36
00:00:55.270 --> 00:00:56.710
on Windows is there POSIX

37
00:00:56.710 --> 00:00:57.830
systems are there, right?

38
00:00:57.830 --> 00:00:59.070
And if you go down there is a Docker

39
00:00:59.070 --> 00:01:00.550
container installation as well.

40
00:01:01.110 --> 00:01:02.590
There is, if you go down there

41
00:01:02.590 --> 00:01:04.150
is a core pack, installation.

42
00:01:04.150 --> 00:01:05.710
So there are like all

43
00:01:05.710 --> 00:01:06.590
the installations are there.

44
00:01:06.590 --> 00:01:07.710
And this is the simplest one.

45
00:01:07.710 --> 00:01:09.030
For example, you can just say

46
00:01:09.030 --> 00:01:10.790
npm install hyphen g

47
00:01:10.790 --> 00:01:12.390
PNPM at the rate latest.

48
00:01:12.390 --> 00:01:12.910
That's it.

49
00:01:12.910 --> 00:01:13.230
Okay.

50
00:01:13.230 --> 00:01:15.110
No, no need to give the version name.

51
00:01:15.110 --> 00:01:16.470
And you can even use

52
00:01:16.470 --> 00:01:18.150
Homebrew if you are on Mac.

53
00:01:18.150 --> 00:01:19.430
So basically you can use

54
00:01:19.970 --> 00:01:23.190
PNPM as a replacement for npm.

55
00:01:23.190 --> 00:01:24.450
So, so the command

56
00:01:24.450 --> 00:01:26.930
goes like PNPM Init.

57
00:01:26.930 --> 00:01:29.010
Basically this is same like npm init.

58
00:01:29.010 --> 00:01:30.490
You can see I have a package JSON

59
00:01:30.490 --> 00:01:32.690
file right now what we have to do is

60
00:01:32.690 --> 00:01:34.410
we have to basically create an end

61
00:01:34.410 --> 00:01:35.730
to end authentication system.

62
00:01:35.730 --> 00:01:37.570
That means we need database,

63
00:01:37.570 --> 00:01:39.090
we need all the routes.

64
00:01:39.090 --> 00:01:40.210
So technically it's

65
00:01:40.210 --> 00:01:40.970
an end to end thing.

66
00:01:40.970 --> 00:01:42.330
Okay, so now we are going

67
00:01:42.330 --> 00:01:44.690
to do PNPM install at the rate

68
00:01:44.690 --> 00:01:47.770
types okay, slash node and add

69
00:01:47.770 --> 00:01:49.730
the rate types express.

70
00:01:50.300 --> 00:01:51.740
Okay, slash express

71
00:01:51.740 --> 00:01:53.700
and save it as a dev dependency.

72
00:01:53.700 --> 00:01:55.780
And don't forget to make 4x.

73
00:01:55.780 --> 00:01:56.460
Okay.

74
00:01:56.460 --> 00:01:57.660
So this ensures that we are

75
00:01:57.660 --> 00:01:58.580
on the same version.

76
00:01:58.580 --> 00:01:59.260
Nice.

77
00:01:59.260 --> 00:02:01.180
Now we have to install express.

78
00:02:01.180 --> 00:02:03.620
So I can just say pnpmi and I can

79
00:02:03.620 --> 00:02:06.260
just say express at the rate 4x.

80
00:02:06.260 --> 00:02:07.300
So this basically gives

81
00:02:07.300 --> 00:02:08.860
me the express as well.

82
00:02:09.820 --> 00:02:11.380
So now you can see in my package

83
00:02:11.380 --> 00:02:14.020
JSON I have these dev dependencies.

84
00:02:14.020 --> 00:02:15.900
And I have these dependencies.

85
00:02:15.900 --> 00:02:16.340
Nice.

86
00:02:16.340 --> 00:02:17.460
So let's get started

87
00:02:17.460 --> 00:02:19.380
by creating an index js File.

88
00:02:19.380 --> 00:02:21.100
Okay, so what I'm going to do

89
00:02:21.100 --> 00:02:22.660
is I'm just going to say,

90
00:02:22.660 --> 00:02:25.620
import something from express.

91
00:02:25.620 --> 00:02:27.540
So basically I want to import

92
00:02:27.540 --> 00:02:29.700
express from express, right?

93
00:02:29.700 --> 00:02:30.660
Let's create

94
00:02:30.660 --> 00:02:32.899
an application that is express.

95
00:02:32.899 --> 00:02:33.940
Okay, that's nice.

96
00:02:33.940 --> 00:02:35.700
And let's also get the port.

97
00:02:35.700 --> 00:02:36.940
So let's say I want to run it

98
00:02:36.940 --> 00:02:40.580
on process env port.

99
00:02:40.580 --> 00:02:42.260
So if you give me an environment

100
00:02:42.260 --> 00:02:43.140
variable named

101
00:02:43.140 --> 00:02:44.770
port, I will use that.

102
00:02:44.770 --> 00:02:45.730
But just in case you are

103
00:02:45.730 --> 00:02:47.130
not giving me a port, let's

104
00:02:47.130 --> 00:02:48.930
fall back to 8,000 port.

105
00:02:48.930 --> 00:02:50.850
Yeah, so this one is nice.

106
00:02:50.850 --> 00:02:53.810
Now we can just say app, listen on

107
00:02:53.810 --> 00:02:56.170
this particular port and I can just

108
00:02:56.170 --> 00:02:59.810
say console log, that server is

109
00:02:59.810 --> 00:03:02.970
running on port Whichever port you

110
00:03:02.970 --> 00:03:04.050
are running on, that is this

111
00:03:04.050 --> 00:03:05.170
particular port.

112
00:03:05.170 --> 00:03:06.330
So this is our basic

113
00:03:06.330 --> 00:03:07.650
boilerplate code, right?

114
00:03:07.650 --> 00:03:09.810
And let's also create a dummy route

115
00:03:09.810 --> 00:03:12.390
that is app git, that is slash.

116
00:03:12.390 --> 00:03:13.910
So I can just say request

117
00:03:13.910 --> 00:03:15.830
response and return

118
00:03:15.830 --> 00:03:19.030
a new response.JSON saying status.

119
00:03:19.670 --> 00:03:20.390
Okay?

120
00:03:20.390 --> 00:03:20.830
Okay.

121
00:03:20.830 --> 00:03:22.070
So it's basically like

122
00:03:22.070 --> 00:03:25.270
server is up and running.

123
00:03:25.270 --> 00:03:27.350
So this is my basic boilerplate code.

124
00:03:27.350 --> 00:03:30.070
Let's also configure a dev script,

125
00:03:30.070 --> 00:03:32.230
okay, that is using the nodemon,

126
00:03:32.230 --> 00:03:33.630
because I don't want to restart

127
00:03:33.630 --> 00:03:34.790
the server again and again.

128
00:03:34.790 --> 00:03:37.310
So I can just say pnpm install or I

129
00:03:37.310 --> 00:03:40.510
can even use node hyphen hyphen Var.

130
00:03:41.070 --> 00:03:41.510
Okay.

131
00:03:41.510 --> 00:03:42.830
And I can just say index.

132
00:03:42.830 --> 00:03:43.310
Right?

133
00:03:43.310 --> 00:03:44.790
And similarly we can even have

134
00:03:44.790 --> 00:03:47.790
a start script that is node index.

135
00:03:47.790 --> 00:03:48.670
That's it.

136
00:03:48.670 --> 00:03:51.070
So if I say pnpm dev and enter,

137
00:03:51.070 --> 00:03:52.390
you can see that my server is

138
00:03:52.390 --> 00:03:53.870
actually running on port 8000.

139
00:03:53.870 --> 00:03:54.309
Nice.

140
00:03:54.309 --> 00:03:56.470
Okay, so this is basically nice.

141
00:03:56.470 --> 00:03:58.310
And one more thing, the warning

142
00:03:58.310 --> 00:03:59.590
that is coming, it basically

143
00:03:59.590 --> 00:04:00.750
says that, hey, can you

144
00:04:00.750 --> 00:04:02.910
please add the type module?

145
00:04:02.910 --> 00:04:04.810
Okay, so that everything is

146
00:04:04.810 --> 00:04:05.330
up and running.

147
00:04:05.330 --> 00:04:06.570
You can see now everything is

148
00:04:06.570 --> 00:04:07.370
up and running.

149
00:04:07.370 --> 00:04:09.050
That's absolutely great.

150
00:04:09.610 --> 00:04:10.970
Now we have to start

151
00:04:10.970 --> 00:04:12.810
by adding a database.

152
00:04:12.810 --> 00:04:14.850
So we are going to use Drizzle ORM.

153
00:04:15.530 --> 00:04:16.769
So we have already talked

154
00:04:16.769 --> 00:04:18.250
about Drizzle ORM.

155
00:04:18.250 --> 00:04:20.329
So let's go into the JavaScript

156
00:04:20.329 --> 00:04:21.209
and get started.

157
00:04:21.769 --> 00:04:22.850
So what we want to do is

158
00:04:22.850 --> 00:04:24.530
we want to use a new database

159
00:04:24.530 --> 00:04:25.690
that is PostgreSQL.

160
00:04:25.690 --> 00:04:27.170
We want to use basic file

161
00:04:27.170 --> 00:04:28.090
structure is there.

162
00:04:28.090 --> 00:04:29.730
So we have to follow the same thing.

163
00:04:29.730 --> 00:04:31.410
Okay, so it says that what you can

164
00:04:31.410 --> 00:04:33.410
do is you can have your schema ts.

165
00:04:33.410 --> 00:04:34.690
So it's basically in typescript.

166
00:04:34.690 --> 00:04:35.850
That is what they are telling you.

167
00:04:36.630 --> 00:04:38.230
Result config TS is there.

168
00:04:38.230 --> 00:04:39.270
So everything is there.

169
00:04:39.270 --> 00:04:40.790
So what we need to do is let's

170
00:04:40.790 --> 00:04:42.550
follow the same structure.

171
00:04:42.550 --> 00:04:44.310
Okay, so what I'M going to do

172
00:04:44.310 --> 00:04:45.990
is let's create a database.

173
00:04:45.990 --> 00:04:46.430
Okay?

174
00:04:46.430 --> 00:04:47.030
So I'll just create

175
00:04:47.030 --> 00:04:49.030
a new folder that is db.

176
00:04:49.030 --> 00:04:51.630
And inside the DB they recommend that

177
00:04:51.630 --> 00:04:52.870
what you can do is you can have

178
00:04:52.870 --> 00:04:54.870
something known as schema TS file.

179
00:04:54.870 --> 00:04:56.630
So schema js in our case.

180
00:04:56.630 --> 00:04:57.990
Okay, and let's also

181
00:04:57.990 --> 00:04:59.910
create an index js file.

182
00:04:59.910 --> 00:05:00.310
Nice.

183
00:05:00.870 --> 00:05:02.230
So these two files, basically

184
00:05:02.230 --> 00:05:03.270
I'm clubbing together.

185
00:05:04.150 --> 00:05:04.910
I don't think so.

186
00:05:04.910 --> 00:05:05.590
We need it.

187
00:05:05.590 --> 00:05:07.030
So I have just made it.

188
00:05:07.030 --> 00:05:07.990
So we will see it later.

189
00:05:08.530 --> 00:05:09.290
Then we have to make

190
00:05:09.290 --> 00:05:11.970
a drizzle config js file.

191
00:05:11.970 --> 00:05:12.330
Okay.

192
00:05:12.330 --> 00:05:14.570
Drizzle config js file.

193
00:05:14.570 --> 00:05:16.050
So this is our drizzle file.

194
00:05:16.050 --> 00:05:18.450
Now we have to say pnpm add

195
00:05:18.450 --> 00:05:20.050
these things we have to add.

196
00:05:20.050 --> 00:05:21.530
Okay, so that's fine.

197
00:05:21.530 --> 00:05:23.330
We can just say pnpm add

198
00:05:23.330 --> 00:05:25.890
drizzle, ORM, PG and env.

199
00:05:25.890 --> 00:05:27.250
Now what you will notice is that

200
00:05:27.250 --> 00:05:29.690
the pnpm is actually very fast.

201
00:05:29.690 --> 00:05:31.930
And let's also add these things.

202
00:05:31.930 --> 00:05:33.650
Okay, so I'm just saying enter

203
00:05:34.380 --> 00:05:36.020
and we are good to go.

204
00:05:36.020 --> 00:05:36.620
Nice.

205
00:05:36.620 --> 00:05:38.060
Then what we have to do is we have to

206
00:05:38.060 --> 00:05:41.260
make a database URL in a.env file.

207
00:05:41.260 --> 00:05:43.420
So usually we always keep our

208
00:05:43.420 --> 00:05:45.860
sensitive variables in a env file.

209
00:05:45.860 --> 00:05:47.900
And this env file is never

210
00:05:47.900 --> 00:05:49.420
ever pushed to the GitHub.

211
00:05:49.420 --> 00:05:50.059
Okay?

212
00:05:50.059 --> 00:05:52.100
So database URL, your passwords,

213
00:05:52.100 --> 00:05:53.060
your tokens, everything

214
00:05:53.060 --> 00:05:55.020
is stored in this env file.

215
00:05:55.020 --> 00:05:56.300
So this URL we will,

216
00:05:56.300 --> 00:05:57.420
create in a moment.

217
00:05:57.420 --> 00:05:58.900
So what we can do is we have

218
00:05:58.900 --> 00:06:00.580
to basically say we have

219
00:06:00.580 --> 00:06:02.700
to create this configuration, right?

220
00:06:03.350 --> 00:06:04.870
So we have to say import

221
00:06:04.870 --> 00:06:06.030
this particular stuff.

222
00:06:06.030 --> 00:06:07.550
I said, okay, see, I'm just copying

223
00:06:07.550 --> 00:06:08.510
from the documentation.

224
00:06:08.510 --> 00:06:09.110
Right?

225
00:06:09.110 --> 00:06:11.390
Then we have to import drizzle,

226
00:06:11.390 --> 00:06:13.270
okay, that is this particular thing.

227
00:06:13.270 --> 00:06:15.270
And then we can say, oh,

228
00:06:15.270 --> 00:06:16.350
by the way, this we have to do

229
00:06:16.350 --> 00:06:17.550
in the DB file, not here.

230
00:06:17.550 --> 00:06:18.550
Sorry, my bad.

231
00:06:18.550 --> 00:06:19.750
We don't have to do it here.

232
00:06:19.750 --> 00:06:21.350
We have to do it in the DB file.

233
00:06:21.350 --> 00:06:23.350
Okay, so which one was the db?

234
00:06:24.550 --> 00:06:25.790
In the index ts.

235
00:06:25.790 --> 00:06:27.110
So that is this particular file.

236
00:06:27.110 --> 00:06:29.150
Yeah, So I can just copy

237
00:06:29.150 --> 00:06:30.330
this whole thing and,

238
00:06:30.330 --> 00:06:32.010
and I can just paste in here.

239
00:06:32.010 --> 00:06:33.850
So this is basically the thing

240
00:06:33.850 --> 00:06:35.530
and don't need to put up this thing.

241
00:06:35.530 --> 00:06:37.090
So DB instance and we can

242
00:06:37.090 --> 00:06:39.690
just say export, default.

243
00:06:39.690 --> 00:06:40.210
Okay.

244
00:06:40.210 --> 00:06:41.970
Default the database.

245
00:06:41.970 --> 00:06:44.050
Okay, so we can just export

246
00:06:44.050 --> 00:06:45.050
the database from here.

247
00:06:45.050 --> 00:06:45.770
Nice.

248
00:06:45.770 --> 00:06:47.250
So what we have done is inside

249
00:06:47.250 --> 00:06:48.930
the DB index file we have

250
00:06:48.930 --> 00:06:50.250
made this initializer.

251
00:06:50.250 --> 00:06:52.010
Now we can create a table.

252
00:06:52.010 --> 00:06:53.290
Okay, so this table

253
00:06:53.290 --> 00:06:54.730
thing we will take care later.

254
00:06:54.730 --> 00:06:56.370
So drizzle.config file is

255
00:06:56.370 --> 00:06:57.490
something I'm interested in.

256
00:06:57.490 --> 00:07:00.330
So drizzle.config.GS file.

257
00:07:00.330 --> 00:07:01.770
So let's import env.

258
00:07:02.470 --> 00:07:03.270
Let's import

259
00:07:03.270 --> 00:07:05.270
the define config function.

260
00:07:05.270 --> 00:07:06.910
And what we have to say is

261
00:07:06.910 --> 00:07:08.430
we have to export default

262
00:07:08.430 --> 00:07:09.750
a configuration, right?

263
00:07:10.310 --> 00:07:11.590
Now what this configuration

264
00:07:11.590 --> 00:07:13.190
basically looks like is you have

265
00:07:13.190 --> 00:07:14.830
to say, out folder which

266
00:07:14.830 --> 00:07:15.830
is going to be dot result.

267
00:07:16.390 --> 00:07:17.790
Where is your schema?

268
00:07:17.790 --> 00:07:19.030
Okay, this is very important.

269
00:07:19.030 --> 00:07:19.950
Where is your schema?

270
00:07:19.950 --> 00:07:22.110
So I'll just say, hey, my schema is

271
00:07:22.110 --> 00:07:26.630
in the dot slash DB slash schema dot

272
00:07:26.630 --> 00:07:29.500
schema dot TS Sorry, js file.

273
00:07:30.370 --> 00:07:32.450
So this is the file I am pointing to.

274
00:07:32.450 --> 00:07:33.410
So just make sure that

275
00:07:33.410 --> 00:07:34.850
the spellings are all right.

276
00:07:34.850 --> 00:07:37.410
So schema js file dialect is

277
00:07:37.410 --> 00:07:38.810
PostgreSQL that we are going

278
00:07:38.810 --> 00:07:40.050
to use the PostgreSQL.

279
00:07:40.050 --> 00:07:41.010
That is nice.

280
00:07:41.010 --> 00:07:43.090
And database credentials, right?

281
00:07:43.090 --> 00:07:44.850
So database credentials are here.

282
00:07:44.850 --> 00:07:47.730
And process.env.database URL.

283
00:07:47.730 --> 00:07:48.530
So this is your

284
00:07:48.530 --> 00:07:49.890
drizzle configuration.

285
00:07:49.890 --> 00:07:50.320
Well done.

286
00:07:50.930 --> 00:07:53.090
Now what we have to do is basically,

287
00:07:53.090 --> 00:07:55.330
okay, we can make a schema.

288
00:07:55.330 --> 00:07:57.410
So inside the schema TS, this

289
00:07:57.410 --> 00:07:59.250
particular file, what we could do is

290
00:07:59.250 --> 00:08:01.520
we can import these things

291
00:08:01.520 --> 00:08:04.240
from the result and I can basically

292
00:08:04.240 --> 00:08:06.880
create a users table as it is.

293
00:08:06.880 --> 00:08:08.640
So it's a good thing that

294
00:08:08.640 --> 00:08:09.800
we are creating a users

295
00:08:09.800 --> 00:08:11.280
table which has an id.

296
00:08:11.280 --> 00:08:13.400
Okay, so what I will do is instead

297
00:08:13.400 --> 00:08:14.880
of making it as an integer, I

298
00:08:14.880 --> 00:08:16.559
would like to make it as a uuid.

299
00:08:16.559 --> 00:08:17.400
That is okay, we will

300
00:08:17.400 --> 00:08:18.320
see that in a while.

301
00:08:18.320 --> 00:08:19.600
So name is there.

302
00:08:19.600 --> 00:08:20.080
Age.

303
00:08:20.080 --> 00:08:21.680
Age is something we don't need.

304
00:08:21.680 --> 00:08:23.120
So we want to keep the email.

305
00:08:23.120 --> 00:08:24.200
We will keep password

306
00:08:24.200 --> 00:08:25.040
and all that stuff.

307
00:08:25.040 --> 00:08:27.000
Okay, so one thing that I want

308
00:08:27.000 --> 00:08:27.840
to change is that I

309
00:08:27.840 --> 00:08:29.540
will basically get a uuid.

310
00:08:29.540 --> 00:08:30.620
So I want to say that, hey,

311
00:08:30.620 --> 00:08:32.500
you are a UUID primary.

312
00:08:32.500 --> 00:08:33.860
And I can just say

313
00:08:33.860 --> 00:08:35.059
default to be random.

314
00:08:35.059 --> 00:08:36.539
Okay, so this makes more sense.

315
00:08:36.539 --> 00:08:37.460
Nice.

316
00:08:37.460 --> 00:08:38.940
Then user is going to have

317
00:08:38.940 --> 00:08:41.299
a name which is of a, varchar.

318
00:08:41.299 --> 00:08:41.740
Okay.

319
00:08:41.740 --> 00:08:43.179
Variable Character length

320
00:08:43.179 --> 00:08:44.980
is 255 and not null.

321
00:08:44.980 --> 00:08:46.620
Email, length is this

322
00:08:46.620 --> 00:08:48.260
not null and unique.

323
00:08:48.260 --> 00:08:50.020
Then we can have a password,

324
00:08:50.020 --> 00:08:52.180
okay, which is again a varchar.

325
00:08:52.180 --> 00:08:53.660
Okay, we can have a varchar.

326
00:08:53.660 --> 00:08:55.280
Or maybe we can have a text.

327
00:08:55.280 --> 00:08:56.800
So let's take a text because I don't

328
00:08:56.800 --> 00:08:58.800
want to enforce any limit on this.

329
00:08:58.800 --> 00:09:00.000
So this can be text.

330
00:09:00.000 --> 00:09:00.480
Okay.

331
00:09:00.480 --> 00:09:02.080
And dot not null.

332
00:09:02.080 --> 00:09:02.720
Right?

333
00:09:02.720 --> 00:09:04.800
So this is basically not null.

334
00:09:04.800 --> 00:09:06.920
Okay, now here is the thing.

335
00:09:06.920 --> 00:09:09.880
See as a best practice, you should

336
00:09:09.880 --> 00:09:12.560
never store plain passwords.

337
00:09:12.560 --> 00:09:12.920
Okay?

338
00:09:12.920 --> 00:09:13.720
You should never

339
00:09:13.720 --> 00:09:14.800
store plain password.

340
00:09:14.800 --> 00:09:16.640
Because see what happens if

341
00:09:16.640 --> 00:09:17.920
your database is hacked?

342
00:09:17.920 --> 00:09:21.040
What happens if someone hacks

343
00:09:21.040 --> 00:09:22.320
your Database, what will happen?

344
00:09:23.050 --> 00:09:24.330
Your password is leaked.

345
00:09:24.330 --> 00:09:26.130
So ideally what we should do is we

346
00:09:26.130 --> 00:09:27.850
should hash this password, right?

347
00:09:27.850 --> 00:09:30.650
What we should do, we should hash

348
00:09:30.650 --> 00:09:33.210
the password given by the user.

349
00:09:33.210 --> 00:09:35.530
And, the best way to hash is we do

350
00:09:35.530 --> 00:09:37.770
something known as salt hashing.

351
00:09:37.770 --> 00:09:38.410
Okay.

352
00:09:38.410 --> 00:09:39.970
We do something known as salt

353
00:09:39.970 --> 00:09:42.570
hashing, which means for every

354
00:09:42.570 --> 00:09:44.330
user, what we can do is we can

355
00:09:44.330 --> 00:09:45.770
generate some random string.

356
00:09:45.770 --> 00:09:47.370
Let's say a random strings.

357
00:09:47.370 --> 00:09:49.010
Looks like ra.

358
00:09:49.010 --> 00:09:51.490
Okay, six, five, three.

359
00:09:51.490 --> 00:09:52.250
Something random.

360
00:09:52.250 --> 00:09:53.890
Okay, I'm just, I'm just,

361
00:09:53.890 --> 00:09:55.330
making a random string.

362
00:09:55.330 --> 00:09:58.690
Let's say my password was piyush123.

363
00:09:58.690 --> 00:10:00.290
So what we can do is instead

364
00:10:00.290 --> 00:10:02.050
of hashing piyush123,

365
00:10:02.050 --> 00:10:06.050
I can attach this random, salt.

366
00:10:06.050 --> 00:10:08.610
Now hash this whole thing together,

367
00:10:08.610 --> 00:10:10.450
and whatever the hash is

368
00:10:10.450 --> 00:10:12.130
generated for these two things

369
00:10:12.130 --> 00:10:14.530
that I can store as a password.

370
00:10:14.530 --> 00:10:16.970
And don't forget to also store

371
00:10:16.970 --> 00:10:19.550
the hashtag in the database.

372
00:10:19.550 --> 00:10:21.030
So that means password

373
00:10:21.030 --> 00:10:22.510
and salt will be stored.

374
00:10:22.510 --> 00:10:23.510
So password is this.

375
00:10:23.510 --> 00:10:24.110
Okay.

376
00:10:24.110 --> 00:10:26.100
And I will also store assault,

377
00:10:26.710 --> 00:10:28.110
for every user.

378
00:10:28.110 --> 00:10:29.150
So that means we are going

379
00:10:29.150 --> 00:10:31.310
to hash something based

380
00:10:31.310 --> 00:10:33.470
on a secret key where this is

381
00:10:33.470 --> 00:10:34.710
the password, this is a salt.

382
00:10:34.710 --> 00:10:35.110
Okay.

383
00:10:35.110 --> 00:10:36.270
This makes, you know,

384
00:10:36.270 --> 00:10:37.790
password more secure.

385
00:10:37.790 --> 00:10:38.510
Nice.

386
00:10:38.510 --> 00:10:39.550
Then you can have.

387
00:10:39.550 --> 00:10:41.070
I think these things are well

388
00:10:41.070 --> 00:10:42.750
and good for a particular user.

389
00:10:42.750 --> 00:10:45.670
Okay, so we have defined our schema.

390
00:10:45.670 --> 00:10:46.670
That is really nice.

391
00:10:46.670 --> 00:10:47.950
Our result configuration

392
00:10:47.950 --> 00:10:48.750
is also there.

393
00:10:48.750 --> 00:10:50.010
So now what we have to do, we have

394
00:10:50.010 --> 00:10:52.010
to just say NPX result kit push.

395
00:10:52.010 --> 00:10:53.970
Okay, but before that, before that,

396
00:10:53.970 --> 00:10:55.770
we have to set up our database.

397
00:10:55.770 --> 00:10:57.370
So to set up our database,

398
00:10:57.370 --> 00:10:59.210
I would like to use Docker.

399
00:10:59.210 --> 00:11:00.810
Okay, so Docker.

400
00:11:00.810 --> 00:11:01.810
So it's very simple.

401
00:11:01.810 --> 00:11:03.050
You have to first make sure

402
00:11:03.050 --> 00:11:04.930
that Docker is up and running.

403
00:11:04.930 --> 00:11:06.730
You have installed the Docker.

404
00:11:06.730 --> 00:11:07.690
So you can just download

405
00:11:07.690 --> 00:11:09.210
the Docker desktop using this.

406
00:11:09.210 --> 00:11:10.850
And here is, you can see all

407
00:11:10.850 --> 00:11:12.170
the installations and stuff.

408
00:11:12.170 --> 00:11:13.120
So don't worry.

409
00:11:13.120 --> 00:11:14.610
We will also attach an introductory

410
00:11:14.610 --> 00:11:16.050
thing to what is Docker and stuff?

411
00:11:16.050 --> 00:11:17.930
Okay, so make sure that

412
00:11:17.930 --> 00:11:19.010
Docker is up and running.

413
00:11:19.010 --> 00:11:19.920
So let me just,

414
00:11:19.920 --> 00:11:21.650
you know, spin up my Docker.

415
00:11:21.650 --> 00:11:23.010
So if I do enter.

416
00:11:23.010 --> 00:11:25.010
Let's wait for some while.

417
00:11:25.010 --> 00:11:26.650
All right, so my now Docker is

418
00:11:26.650 --> 00:11:28.010
up and running on my machine.

419
00:11:28.010 --> 00:11:29.770
Okay, so what I could do is if I

420
00:11:29.770 --> 00:11:32.450
come here and I just say, docker.

421
00:11:32.450 --> 00:11:32.970
P.S.

422
00:11:32.970 --> 00:11:34.410
you can see that, yes, Docker

423
00:11:34.410 --> 00:11:35.170
commands are running.

424
00:11:35.170 --> 00:11:35.970
That means my Docker

425
00:11:35.970 --> 00:11:37.090
is up and running.

426
00:11:37.090 --> 00:11:38.210
Now let's create

427
00:11:38.210 --> 00:11:41.690
a docker compose.yml file.

428
00:11:41.690 --> 00:11:43.294
Okay, so docker

429
00:11:43.294 --> 00:11:44.610
compose.yml file is here.

430
00:11:45.210 --> 00:11:46.330
Now what we could do is we have

431
00:11:46.330 --> 00:11:47.130
to just say services.

432
00:11:47.770 --> 00:11:50.170
Okay, nice and inside the services,

433
00:11:50.170 --> 00:11:51.250
what we have to do is we

434
00:11:51.250 --> 00:11:52.970
have to spin up a postgres so

435
00:11:52.970 --> 00:11:54.490
we can just search for postgres

436
00:11:54.490 --> 00:11:56.530
on the docker and enter.

437
00:11:56.530 --> 00:11:57.530
So you can see that this is

438
00:11:57.530 --> 00:11:59.290
the official documentation, right?

439
00:11:59.290 --> 00:12:00.170
How to use it.

440
00:12:00.170 --> 00:12:01.330
You can see if I just

441
00:12:01.330 --> 00:12:02.650
keep scrolling down.

442
00:12:02.650 --> 00:12:05.530
Okay, so I can just say my database.

443
00:12:05.530 --> 00:12:06.810
Okay, I can just say

444
00:12:06.810 --> 00:12:08.570
I want to spin up a db.

445
00:12:08.570 --> 00:12:11.430
Okay, My image is postgres.

446
00:12:11.430 --> 00:12:12.710
Okay, you can say

447
00:12:12.710 --> 00:12:14.070
just restart always.

448
00:12:14.070 --> 00:12:14.630
Okay.

449
00:12:14.630 --> 00:12:16.230
Just in case there is a crash.

450
00:12:16.230 --> 00:12:17.990
And then in the environment,

451
00:12:18.630 --> 00:12:20.030
okay, you have to basically

452
00:12:20.030 --> 00:12:21.710
give the postgres password.

453
00:12:21.710 --> 00:12:22.710
So let's say the postgres

454
00:12:22.710 --> 00:12:24.190
password is postgres itself.

455
00:12:24.190 --> 00:12:25.270
Or I can just say

456
00:12:25.270 --> 00:12:26.870
the password is post.

457
00:12:27.890 --> 00:12:29.110
I can just say my password.

458
00:12:29.750 --> 00:12:31.550
Okay, this is your postgres password.

459
00:12:31.550 --> 00:12:32.710
Of course, in the production you want

460
00:12:32.710 --> 00:12:34.350
to use something more big password.

461
00:12:34.350 --> 00:12:35.790
So that is okay, so postgres

462
00:12:35.790 --> 00:12:36.800
password you have set up.

463
00:12:36.800 --> 00:12:37.640
And also a postgres

464
00:12:37.640 --> 00:12:38.800
user we can set up.

465
00:12:38.800 --> 00:12:40.560
That is postgres.

466
00:12:41.200 --> 00:12:41.560
So.

467
00:12:41.560 --> 00:12:42.640
And don't forget

468
00:12:42.640 --> 00:12:43.760
to do the port mapping.

469
00:12:43.760 --> 00:12:46.360
So of course you want to also, you

470
00:12:46.360 --> 00:12:48.520
know, you want to expose the ports.

471
00:12:48.520 --> 00:12:51.280
So if you go on to the port mapping.

472
00:12:51.280 --> 00:12:52.320
Okay, Ports.

473
00:12:52.880 --> 00:12:54.480
So where is the ports thing?

474
00:12:54.480 --> 00:12:56.480
Yeah, so, not this one.

475
00:12:56.480 --> 00:12:57.600
So Postgres runs

476
00:12:57.600 --> 00:12:59.840
on 5432 Port, by the way.

477
00:12:59.840 --> 00:13:01.280
Anyway, if it is not suggesting

478
00:13:01.280 --> 00:13:02.000
you, I'll tell you.

479
00:13:02.000 --> 00:13:03.560
So one thing we can add here is

480
00:13:03.560 --> 00:13:05.560
postgres db so let's say my database

481
00:13:05.560 --> 00:13:07.440
name will be again postgres.

482
00:13:07.440 --> 00:13:09.960
Okay, Then port supports.

483
00:13:09.960 --> 00:13:11.280
It basically exposes

484
00:13:11.280 --> 00:13:14.480
5432 port on 5432.

485
00:13:14.480 --> 00:13:15.880
This means inside

486
00:13:15.880 --> 00:13:17.280
the container on my host.

487
00:13:17.280 --> 00:13:18.880
Okay, so this is how

488
00:13:18.880 --> 00:13:19.640
basically it works.

489
00:13:19.640 --> 00:13:20.560
Sorry, on my host,

490
00:13:20.560 --> 00:13:21.920
inside the container.

491
00:13:21.920 --> 00:13:23.159
And at the end we have

492
00:13:23.159 --> 00:13:24.440
to give it a volume mapping.

493
00:13:24.440 --> 00:13:26.320
Okay, so I can just say volumes

494
00:13:26.320 --> 00:13:28.000
and we have to give a volume

495
00:13:28.000 --> 00:13:30.480
mapping that is DB underscore data.

496
00:13:30.480 --> 00:13:31.920
It is going to be a custom volume

497
00:13:31.920 --> 00:13:33.310
that we are just going to create.

498
00:13:33.310 --> 00:13:34.230
And you have to mount it

499
00:13:34.230 --> 00:13:40.430
on/war/lib/postgresql/data.

500
00:13:40.430 --> 00:13:41.230
Okay.

501
00:13:41.230 --> 00:13:42.710
So now what I can do is I have

502
00:13:42.710 --> 00:13:44.270
to basically create this volume.

503
00:13:44.270 --> 00:13:45.790
So I can just say volumes.

504
00:13:45.790 --> 00:13:49.390
Okay, Volumes and postgres DB data.

505
00:13:49.390 --> 00:13:50.190
And that's it.

506
00:13:50.190 --> 00:13:51.230
So this is the configuration.

507
00:13:51.230 --> 00:13:52.750
There's no need to give this thing.

508
00:13:52.750 --> 00:13:54.270
So we are creating a volume DB

509
00:13:54.270 --> 00:13:55.470
data which we are mounting here.

510
00:13:55.470 --> 00:13:56.910
And this basically spins

511
00:13:56.910 --> 00:13:59.950
up a postgres container for me.

512
00:13:59.950 --> 00:14:02.590
So I can just say docker compose

513
00:14:02.590 --> 00:14:04.390
up hyphen D to run it

514
00:14:04.390 --> 00:14:05.390
in the background.

515
00:14:05.390 --> 00:14:06.470
So let's see now what happens.

516
00:14:06.470 --> 00:14:07.350
It is basically pulling

517
00:14:07.350 --> 00:14:08.630
the database that is Postgres

518
00:14:08.630 --> 00:14:10.190
image is being pulled.

519
00:14:10.190 --> 00:14:12.270
So Postgres image is getting pulled.

520
00:14:12.270 --> 00:14:12.830
That is okay.

521
00:14:12.830 --> 00:14:14.390
It's just 124mb.

522
00:14:14.390 --> 00:14:15.949
Okay, so let's wait for a while.

523
00:14:17.150 --> 00:14:17.550
Yeah.

524
00:14:17.550 --> 00:14:18.630
So now you can see that my

525
00:14:18.630 --> 00:14:19.670
container is up and running.

526
00:14:19.670 --> 00:14:20.750
If I do a docker.

527
00:14:20.750 --> 00:14:21.110
P.S.

528
00:14:21.110 --> 00:14:21.790
you can see that.

529
00:14:21.790 --> 00:14:23.150
Yes, it is up and running.

530
00:14:23.150 --> 00:14:23.350
Right?

531
00:14:23.350 --> 00:14:24.390
The postgres container is

532
00:14:24.390 --> 00:14:26.350
up and running, and 5432 is

533
00:14:26.350 --> 00:14:27.560
the port that is available.

534
00:14:28.440 --> 00:14:30.320
Now, to construct this, we

535
00:14:30.320 --> 00:14:32.520
can just say postgres.

536
00:14:32.520 --> 00:14:33.320
This, this.

537
00:14:33.320 --> 00:14:33.960
Okay.

538
00:14:33.960 --> 00:14:35.880
What is your username, by the way?

539
00:14:35.880 --> 00:14:37.240
Your username is postgres.

540
00:14:37.240 --> 00:14:37.960
Okay?

541
00:14:37.960 --> 00:14:38.920
So you can just say

542
00:14:39.640 --> 00:14:41.480
postgres as your username.

543
00:14:41.480 --> 00:14:43.079
What is your password?

544
00:14:43.079 --> 00:14:45.080
Your password is my password, right?

545
00:14:45.080 --> 00:14:47.080
You can just say my password

546
00:14:47.080 --> 00:14:50.800
at the rate localhost port5432,

547
00:14:50.800 --> 00:14:52.800
slash, whatever is your database.

548
00:14:52.800 --> 00:14:54.680
So your database name is postgres.

549
00:14:54.680 --> 00:14:56.400
So this is how you construct a,

550
00:14:56.400 --> 00:14:57.660
a database URL.

551
00:14:57.660 --> 00:14:58.380
Nice.

552
00:14:58.380 --> 00:15:00.860
Now this database URL is set up.

553
00:15:00.860 --> 00:15:02.620
That is absolutely great.

554
00:15:02.620 --> 00:15:04.300
Now what we could do is if I

555
00:15:04.300 --> 00:15:05.340
come back, you can just say

556
00:15:05.340 --> 00:15:07.660
NPX Drizzle Kit push to push

557
00:15:07.660 --> 00:15:09.340
the schema to your database.

558
00:15:09.340 --> 00:15:09.820
Okay.

559
00:15:09.820 --> 00:15:11.100
And there is one more thing,

560
00:15:11.100 --> 00:15:13.610
by the way, if we go down, okay,

561
00:15:13.610 --> 00:15:14.580
we don't need seeding

562
00:15:14.580 --> 00:15:16.380
and all, there is something

563
00:15:16.380 --> 00:15:18.220
known as Drizzle Kit Studio.

564
00:15:18.220 --> 00:15:19.900
So you know what I like to do is

565
00:15:19.900 --> 00:15:21.500
let me just copy this particular

566
00:15:21.500 --> 00:15:23.650
command that is Drizzle Kit push

567
00:15:23.650 --> 00:15:25.480
and inside the package or JSON,

568
00:15:25.480 --> 00:15:26.760
let's configure these scripts.

569
00:15:26.760 --> 00:15:28.520
So I can just say DB colon

570
00:15:28.520 --> 00:15:31.160
push, Colon push

571
00:15:31.160 --> 00:15:32.840
is basically this command.

572
00:15:32.840 --> 00:15:34.280
And then I want to have

573
00:15:34.280 --> 00:15:36.440
a command that is DB Studio.

574
00:15:36.440 --> 00:15:38.840
Okay, so how to spin up a DB Studio?

575
00:15:38.840 --> 00:15:41.160
Let's just search for the studio.

576
00:15:41.160 --> 00:15:43.800
Okay, so drm, that is the studio.

577
00:15:43.800 --> 00:15:45.320
So to do that, what you have

578
00:15:45.320 --> 00:15:46.360
to basically do is,

579
00:15:47.480 --> 00:15:48.520
Yeah, here is the thing.

580
00:15:48.520 --> 00:15:50.170
Drizzle Kit Studio.

581
00:15:50.170 --> 00:15:51.330
Okay, so I'll just copy

582
00:15:51.330 --> 00:15:52.570
the command and paste it.

583
00:15:53.130 --> 00:15:55.370
If I now say PNPM

584
00:15:55.370 --> 00:15:58.650
DB colon 2 do and enter.

585
00:15:59.290 --> 00:16:01.410
Okay, so you can see now this

586
00:16:01.410 --> 00:16:02.810
particular thing is up and running.

587
00:16:02.810 --> 00:16:04.010
I can just copy it.

588
00:16:04.010 --> 00:16:06.730
Okay, I can just copy

589
00:16:06.730 --> 00:16:08.530
and I can just open this particular

590
00:16:08.530 --> 00:16:09.530
link in a new tab.

591
00:16:09.530 --> 00:16:10.450
Okay, let's wait.

592
00:16:10.450 --> 00:16:11.210
What happens?

593
00:16:11.210 --> 00:16:12.570
So you can see that,

594
00:16:12.570 --> 00:16:14.010
the Drizzle Kit Studio is running.

595
00:16:14.010 --> 00:16:16.290
There is no table at all, zero

596
00:16:16.290 --> 00:16:18.170
tables in the public schema.

597
00:16:18.170 --> 00:16:19.210
So that means what we have

598
00:16:19.210 --> 00:16:21.500
to do is we have to say pnpm

599
00:16:21.500 --> 00:16:24.620
DB colon push and enter.

600
00:16:24.620 --> 00:16:25.940
Now If I do a refresh here

601
00:16:25.940 --> 00:16:26.980
you can see we have a users

602
00:16:26.980 --> 00:16:29.340
table which is have ID name, email

603
00:16:29.340 --> 00:16:30.380
password and salt

604
00:16:30.380 --> 00:16:31.900
and there is no record at all.

605
00:16:32.780 --> 00:16:34.140
Great, great stuff.

606
00:16:34.140 --> 00:16:35.300
Okay, so our setup is

607
00:16:35.300 --> 00:16:36.220
basically complete.

608
00:16:36.220 --> 00:16:37.580
Now let's get started

609
00:16:37.580 --> 00:16:39.020
by creating the routes.

610
00:16:39.020 --> 00:16:40.380
Okay, so for that let's

611
00:16:40.380 --> 00:16:42.140
create a folder for routes.

612
00:16:42.140 --> 00:16:42.860
Okay.

613
00:16:42.860 --> 00:16:47.450
And let's create a user do routes js.

614
00:16:47.450 --> 00:16:50.570
Okay, so here I have to import

615
00:16:50.570 --> 00:16:53.130
express from express.

616
00:16:53.130 --> 00:16:53.730
Okay.

617
00:16:53.730 --> 00:16:54.730
From express.

618
00:16:54.730 --> 00:16:55.530
Nice.

619
00:16:55.530 --> 00:16:57.610
Let's create a router

620
00:16:58.410 --> 00:17:00.570
that is express dot router.

621
00:17:00.570 --> 00:17:01.130
Nice.

622
00:17:01.130 --> 00:17:02.170
Now what we can do.

623
00:17:02.170 --> 00:17:05.050
Export default the router.

624
00:17:05.050 --> 00:17:06.369
Now on this router,

625
00:17:06.369 --> 00:17:07.170
what all do we need?

626
00:17:07.170 --> 00:17:09.530
I want router dot get.

627
00:17:10.569 --> 00:17:12.130
Okay, if you make a request

628
00:17:12.130 --> 00:17:13.810
on slash, this returns who is

629
00:17:13.810 --> 00:17:15.440
the current logged in user.

630
00:17:15.440 --> 00:17:17.000
Okay, so that means let's say

631
00:17:17.000 --> 00:17:18.119
there is no handler as

632
00:17:18.119 --> 00:17:19.920
of now, but I can add a comment.

633
00:17:19.920 --> 00:17:26.800
Returns current logged in user.

634
00:17:27.359 --> 00:17:28.079
Good.

635
00:17:28.079 --> 00:17:29.600
Similarly we can have a post.

636
00:17:30.720 --> 00:17:32.960
This basically does a sign up.

637
00:17:33.760 --> 00:17:34.560
Okay, sign up.

638
00:17:34.560 --> 00:17:36.080
So let's create a sign up route.

639
00:17:36.720 --> 00:17:37.520
Okay, nice.

640
00:17:37.520 --> 00:17:38.720
Sign up route is there.

641
00:17:38.720 --> 00:17:41.050
Then we can create a login route.

642
00:17:41.050 --> 00:17:42.770
Okay, create a login route.

643
00:17:42.770 --> 00:17:44.450
So this basically is the login route.

644
00:17:44.450 --> 00:17:45.930
If you want to log in

645
00:17:45.930 --> 00:17:47.050
and current user.

646
00:17:47.050 --> 00:17:48.570
I think these are all good.

647
00:17:48.570 --> 00:17:51.050
Okay, These all things are all good.

648
00:17:51.050 --> 00:17:52.090
So let's get started

649
00:17:52.090 --> 00:17:53.690
by creating the sign up route.

650
00:17:53.690 --> 00:17:54.610
Okay, so let's start

651
00:17:54.610 --> 00:17:55.850
by sign up route.

652
00:17:55.850 --> 00:17:56.929
So this is going to be

653
00:17:56.929 --> 00:17:58.010
an async function.

654
00:17:58.010 --> 00:17:58.490
Okay.

655
00:17:58.490 --> 00:17:59.780
Async request.

656
00:18:00.570 --> 00:18:02.650
Sorry, request, response.

657
00:18:03.210 --> 00:18:04.850
Now what I expect is that when you

658
00:18:04.850 --> 00:18:06.050
are signing up you are going

659
00:18:06.050 --> 00:18:07.450
to give me something in the body.

660
00:18:08.000 --> 00:18:08.760
That is what you are

661
00:18:08.760 --> 00:18:10.000
basically going to give me.

662
00:18:10.000 --> 00:18:13.320
Your name, your email and a password

663
00:18:13.320 --> 00:18:15.120
as a part of your body.

664
00:18:15.120 --> 00:18:16.080
Nice.

665
00:18:16.080 --> 00:18:18.920
Now see what we could do here is you

666
00:18:18.920 --> 00:18:20.280
can of course have a validation that

667
00:18:20.280 --> 00:18:22.000
password must be 8 characters long.

668
00:18:22.000 --> 00:18:22.240
Right?

669
00:18:22.240 --> 00:18:23.440
There should be numbers

670
00:18:23.440 --> 00:18:24.160
in the password.

671
00:18:24.160 --> 00:18:25.440
All that stuff we can do.

672
00:18:25.440 --> 00:18:28.400
But okay, first things first,

673
00:18:28.400 --> 00:18:31.280
you want to check if your database

674
00:18:31.280 --> 00:18:34.710
already has this email or not.

675
00:18:34.710 --> 00:18:35.070
Correct.

676
00:18:35.070 --> 00:18:36.030
So what you could do is there

677
00:18:36.030 --> 00:18:37.230
are multiple ways to do it.

678
00:18:37.230 --> 00:18:38.350
Number one is that first

679
00:18:38.350 --> 00:18:40.190
you try to query that do you

680
00:18:40.190 --> 00:18:41.310
have an existing user?

681
00:18:41.310 --> 00:18:43.310
So how, how we can do is I can

682
00:18:43.310 --> 00:18:45.750
just say import DB from

683
00:18:46.550 --> 00:18:50.550
okay dot dot slash db and also

684
00:18:50.550 --> 00:18:52.470
you might want to import something

685
00:18:52.470 --> 00:18:55.270
from dot dot DB slash schema.

686
00:18:55.270 --> 00:18:56.550
Okay, slash schema.

687
00:18:56.550 --> 00:18:57.990
And you want to import

688
00:18:57.990 --> 00:18:59.590
the users table.

689
00:18:59.590 --> 00:19:01.430
Now you can first make a check

690
00:19:01.430 --> 00:19:07.920
for existing user that is await DB.

691
00:19:07.920 --> 00:19:10.080
Select something from

692
00:19:11.120 --> 00:19:13.520
you know, users table dot where.

693
00:19:14.320 --> 00:19:16.680
Okay, now in the, where you can

694
00:19:16.680 --> 00:19:18.480
just say okay, you can just

695
00:19:18.480 --> 00:19:21.600
return an equals okay eq

696
00:19:21.600 --> 00:19:23.440
Basically imported from the

697
00:19:23.440 --> 00:19:26.040
drizzle ORM you can just say,

698
00:19:26.040 --> 00:19:27.480
let me just make it into the new

699
00:19:27.480 --> 00:19:28.640
line so that you can see this

700
00:19:28.640 --> 00:19:29.910
these things clearly.

701
00:19:29.910 --> 00:19:33.430
Okay, where equals what

702
00:19:33.430 --> 00:19:36.230
I can just say where table.email

703
00:19:36.230 --> 00:19:37.270
equals to the email.

704
00:19:37.990 --> 00:19:39.830
So technically I'm trying to search

705
00:19:39.830 --> 00:19:41.590
for an existing user and a.

706
00:19:41.590 --> 00:19:45.190
I just want to query the email which

707
00:19:45.190 --> 00:19:48.150
is basically users table dot email.

708
00:19:48.790 --> 00:19:50.950
Now if you got the existing user.

709
00:19:50.950 --> 00:19:54.870
Okay, if I got the existing user.

710
00:19:54.870 --> 00:19:57.750
So I can just say return response

711
00:19:57.750 --> 00:20:02.330
status code400.JSON saying

712
00:20:02.330 --> 00:20:07.130
error as user with email.

713
00:20:08.090 --> 00:20:09.130
Okay, let me just

714
00:20:09.130 --> 00:20:10.050
make it as a string.

715
00:20:10.050 --> 00:20:10.530
Literals.

716
00:20:10.530 --> 00:20:11.850
Okay, Email.

717
00:20:11.850 --> 00:20:15.290
This particular email already exists.

718
00:20:16.250 --> 00:20:16.650
Done.

719
00:20:17.450 --> 00:20:19.410
Now if it is not there, what you

720
00:20:19.410 --> 00:20:20.970
want to do, you want to basically

721
00:20:20.970 --> 00:20:22.570
create a new user, right?

722
00:20:22.570 --> 00:20:24.410
If user does not exist, you

723
00:20:24.410 --> 00:20:25.850
want to create a new user.

724
00:20:25.850 --> 00:20:26.730
So to create a new, create

725
00:20:26.730 --> 00:20:30.370
a user, I can just say await DB.

726
00:20:30.370 --> 00:20:33.170
Insert okay, in which table

727
00:20:33.170 --> 00:20:37.050
in the user table dot values.

728
00:20:37.050 --> 00:20:38.610
Now see here is the thing.

729
00:20:38.610 --> 00:20:39.770
You want to insert the name.

730
00:20:39.770 --> 00:20:40.210
That's good.

731
00:20:40.210 --> 00:20:41.170
You want to insert the email.

732
00:20:41.170 --> 00:20:41.690
That's good.

733
00:20:41.690 --> 00:20:42.569
Now here is the thing.

734
00:20:42.569 --> 00:20:43.450
You don't want to store

735
00:20:43.450 --> 00:20:44.210
the password, right?

736
00:20:44.210 --> 00:20:45.290
This is the wrong thing.

737
00:20:45.290 --> 00:20:47.130
This particular step is a wrong step

738
00:20:47.130 --> 00:20:48.770
because user is

739
00:20:48.770 --> 00:20:50.050
giving you a plain password.

740
00:20:50.050 --> 00:20:51.010
You don't want to store

741
00:20:51.010 --> 00:20:52.330
that plain password.

742
00:20:52.330 --> 00:20:54.010
So what we should do is first

743
00:20:54.010 --> 00:20:56.460
of all we should generate a salt.

744
00:20:56.460 --> 00:20:58.460
What is a gen, what is assault?

745
00:20:58.460 --> 00:21:00.060
A random string.

746
00:21:00.060 --> 00:21:01.540
A random bytes is

747
00:21:01.540 --> 00:21:03.100
basically a salt, right?

748
00:21:03.100 --> 00:21:04.580
So in node, how can you

749
00:21:04.580 --> 00:21:06.100
generate some random string?

750
00:21:06.100 --> 00:21:07.660
Okay, so if you go into the node

751
00:21:07.660 --> 00:21:11.180
crypto module, crypto random, okay?

752
00:21:11.180 --> 00:21:12.180
So this is a function

753
00:21:12.180 --> 00:21:12.940
that you can use.

754
00:21:12.940 --> 00:21:14.300
So crypto is there

755
00:21:14.300 --> 00:21:15.500
random bytes is there?

756
00:21:15.500 --> 00:21:17.580
So if I click here, okay, this

757
00:21:17.580 --> 00:21:18.580
is the official documentation

758
00:21:18.580 --> 00:21:20.460
of node js and I search for

759
00:21:20.460 --> 00:21:24.470
random, okay, random bytes.

760
00:21:24.470 --> 00:21:25.350
This is the one.

761
00:21:25.350 --> 00:21:27.470
So you can see from node crypto

762
00:21:27.470 --> 00:21:28.950
we can import random bytes.

763
00:21:28.950 --> 00:21:32.230
So I can just say import

764
00:21:32.230 --> 00:21:34.350
something from node crypto.

765
00:21:34.350 --> 00:21:34.990
And this is a built

766
00:21:34.990 --> 00:21:35.990
in module, by the way.

767
00:21:35.990 --> 00:21:37.110
So here you have a function

768
00:21:37.110 --> 00:21:38.630
that is random bytes.

769
00:21:38.630 --> 00:21:40.710
So I can just say random bytes.

770
00:21:40.710 --> 00:21:42.910
Okay, how much size I can like

771
00:21:42.910 --> 00:21:44.790
for example, say256.

772
00:21:44.790 --> 00:21:47.030
Then this generates random

773
00:21:47.030 --> 00:21:48.330
bytes for me, okay?

774
00:21:48.330 --> 00:21:49.570
And then I can just say

775
00:21:49.570 --> 00:21:50.890
that, hey, I want to make it

776
00:21:50.890 --> 00:21:53.690
tostring, okay, as a hex.

777
00:21:54.410 --> 00:21:56.730
So this salt is now a string,

778
00:21:56.730 --> 00:21:58.730
which is just a random string.

779
00:21:58.730 --> 00:22:00.410
Now using this salt, we

780
00:22:00.410 --> 00:22:01.930
can hash the password.

781
00:22:01.930 --> 00:22:04.650
Hashed password equals.

782
00:22:04.650 --> 00:22:05.850
How to do that?

783
00:22:05.850 --> 00:22:07.370
So for this particular thing,

784
00:22:07.370 --> 00:22:08.490
what you could do is now you

785
00:22:08.490 --> 00:22:10.730
can basically do a hashing,

786
00:22:10.730 --> 00:22:12.330
okay, how to Do a hashing.

787
00:22:12.330 --> 00:22:13.690
So for that you have to search

788
00:22:13.690 --> 00:22:14.890
for something known as.

789
00:22:14.890 --> 00:22:16.250
So there is a documentation

790
00:22:16.250 --> 00:22:18.450
where they use, I love cupcakes.

791
00:22:18.450 --> 00:22:18.930
Exactly.

792
00:22:18.930 --> 00:22:21.270
So you have to save create H mark.

793
00:22:21.270 --> 00:22:23.390
Okay, this is a function again

794
00:22:23.390 --> 00:22:24.750
coming from node crypto.

795
00:22:24.750 --> 00:22:28.430
So I can just import create hmark.

796
00:22:28.430 --> 00:22:31.510
Okay, so this created creates a hash.

797
00:22:31.510 --> 00:22:33.430
So I can say create hmac.

798
00:22:33.430 --> 00:22:35.669
Okay, which algorithm

799
00:22:35.669 --> 00:22:36.390
do you want to use?

800
00:22:36.390 --> 00:22:37.230
So there are multiple

801
00:22:37.230 --> 00:22:38.070
hashing algorithms.

802
00:22:38.070 --> 00:22:40.230
Let's say I will use Sh256.

803
00:22:40.230 --> 00:22:41.830
Then what is your secret?

804
00:22:41.830 --> 00:22:44.630
I say, hey, I want to use this salt.

805
00:22:44.630 --> 00:22:45.590
Okay, that's great.

806
00:22:45.590 --> 00:22:47.810
Then what do you want to update?

807
00:22:47.810 --> 00:22:50.050
Okay, I can just say dot update.

808
00:22:50.050 --> 00:22:51.250
What do you want to update?

809
00:22:51.250 --> 00:22:52.530
The user's password.

810
00:22:52.530 --> 00:22:53.090
Okay.

811
00:22:53.090 --> 00:22:55.210
And then finally just give me

812
00:22:55.210 --> 00:22:57.090
the hex version that is a string.

813
00:22:57.090 --> 00:22:59.810
So now this is a hashed password.

814
00:22:59.810 --> 00:23:02.370
Using this particular algorithm,

815
00:23:02.370 --> 00:23:04.650
using this salt, okay, we

816
00:23:04.650 --> 00:23:05.770
are updating the password.

817
00:23:05.770 --> 00:23:07.650
And as a hexadecimal.

818
00:23:07.650 --> 00:23:09.130
Now this password must be

819
00:23:09.130 --> 00:23:10.930
stored as hashed password.

820
00:23:10.930 --> 00:23:11.730
Really nice.

821
00:23:11.730 --> 00:23:13.490
And you can also keep

822
00:23:13.490 --> 00:23:14.930
this particular salt.

823
00:23:14.930 --> 00:23:16.730
So this particular thing creates

824
00:23:16.730 --> 00:23:18.530
a new user in the database.

825
00:23:18.530 --> 00:23:20.850
Okay, so cost user equals to.

826
00:23:20.850 --> 00:23:22.850
Then you can just say dot return.

827
00:23:22.850 --> 00:23:24.290
Okay, what do you want to return?

828
00:23:24.290 --> 00:23:26.690
I just want to return the ID which is

829
00:23:26.690 --> 00:23:29.010
users, table.it

830
00:23:30.290 --> 00:23:32.290
okay, so this user is basically.

831
00:23:32.850 --> 00:23:34.410
So this is actually an array

832
00:23:34.410 --> 00:23:35.890
which will always have one value.

833
00:23:35.890 --> 00:23:37.570
So I can just destructure it.

834
00:23:37.570 --> 00:23:38.850
Now I can just say return

835
00:23:39.550 --> 00:23:41.870
response.status code 201.

836
00:23:41.870 --> 00:23:43.190
Because you have created

837
00:23:43.190 --> 00:23:45.990
a resource.JSON, i can just say

838
00:23:45.990 --> 00:23:50.630
status success and I can just

839
00:23:50.630 --> 00:23:52.870
send the data where I can have

840
00:23:52.870 --> 00:23:57.310
the user ID to be user.id.

841
00:23:57.310 --> 00:23:58.590
so this is what we can return.

842
00:23:58.590 --> 00:23:59.750
Ideally we should directly

843
00:23:59.750 --> 00:24:00.550
log in the user.

844
00:24:00.550 --> 00:24:00.710
But.

845
00:24:00.710 --> 00:24:03.390
Okay, so let's first test

846
00:24:03.390 --> 00:24:05.000
our signup route.

847
00:24:05.000 --> 00:24:06.000
So for that let me

848
00:24:06.000 --> 00:24:07.320
spin up my postman.

849
00:24:07.320 --> 00:24:08.680
So here is my postman.

850
00:24:08.680 --> 00:24:09.600
Okay, you can see

851
00:24:09.600 --> 00:24:11.000
here is the postman.

852
00:24:11.000 --> 00:24:12.720
So in the postman what we can

853
00:24:12.720 --> 00:24:14.560
do is let's try to sign up.

854
00:24:14.560 --> 00:24:16.400
So as of now, you can see in my

855
00:24:16.400 --> 00:24:18.280
Drizzle studio there is no user.

856
00:24:18.280 --> 00:24:19.280
So my server should

857
00:24:19.280 --> 00:24:19.840
be up and running.

858
00:24:19.840 --> 00:24:20.959
Oh, by the way, we forgot

859
00:24:20.959 --> 00:24:22.120
to register this route.

860
00:24:22.120 --> 00:24:22.840
Right.

861
00:24:22.840 --> 00:24:24.600
So I should basically do import

862
00:24:25.240 --> 00:24:28.520
user router from

863
00:24:28.520 --> 00:24:31.560
dot slash routes user routes.

864
00:24:31.560 --> 00:24:33.400
And then I should basically say

865
00:24:33.400 --> 00:24:34.920
hey app dot use.

866
00:24:34.920 --> 00:24:36.120
If anything starts with

867
00:24:36.120 --> 00:24:37.700
slash user, user, please use

868
00:24:37.700 --> 00:24:38.820
this particular router.

869
00:24:38.820 --> 00:24:39.220
Nice.

870
00:24:39.780 --> 00:24:41.620
Now PNPM dev.

871
00:24:42.260 --> 00:24:43.860
Okay, so we got an error,

872
00:24:44.500 --> 00:24:45.820
that is on this particular thing.

873
00:24:45.820 --> 00:24:47.260
It says that there is no

874
00:24:47.260 --> 00:24:48.540
module by this name.

875
00:24:48.540 --> 00:24:50.100
Okay, why is it so?

876
00:24:50.100 --> 00:24:51.140
Let me just check.

877
00:25:00.100 --> 00:25:01.380
Okay, let's give it a try again.

878
00:25:03.230 --> 00:25:04.350
Oh, the error is actually

879
00:25:04.350 --> 00:25:05.350
in the DB thing.

880
00:25:05.350 --> 00:25:06.870
Okay, so from where this

881
00:25:06.870 --> 00:25:07.910
particular error is coming,

882
00:25:07.910 --> 00:25:10.190
let me just do a quick check,

883
00:25:11.550 --> 00:25:13.470
directory import the db.

884
00:25:13.470 --> 00:25:15.710
Okay, so the problem is actually

885
00:25:15.710 --> 00:25:22.030
I think here,/index.js.

886
00:25:22.030 --> 00:25:25.750
okay, yeah, so now you can

887
00:25:25.750 --> 00:25:26.470
see everything is

888
00:25:26.470 --> 00:25:28.030
up and running on port 8000.

889
00:25:28.830 --> 00:25:34.270
So let's say HTTP local host 8000.

890
00:25:34.270 --> 00:25:35.630
Let me just make a request.

891
00:25:35.630 --> 00:25:37.470
Yes, the server is up and running.

892
00:25:37.470 --> 00:25:39.790
So if I want to sign up user

893
00:25:39.790 --> 00:25:41.390
sign up, is the route correct?

894
00:25:41.390 --> 00:25:42.990
So basically the route is

895
00:25:42.990 --> 00:25:47.390
if I go here/user/sign up.

896
00:25:47.390 --> 00:25:49.590
Okay, so in the body I have

897
00:25:49.590 --> 00:25:52.510
to give a raw JSON data.

898
00:25:52.510 --> 00:25:54.070
And by the way, because now

899
00:25:54.070 --> 00:25:56.430
you are handling the raw JSON data,

900
00:25:56.430 --> 00:25:58.070
please make sure that

901
00:25:58.070 --> 00:26:00.090
you have the middleware setup that

902
00:26:00.090 --> 00:26:03.690
app.use express.JSON.

903
00:26:03.690 --> 00:26:06.370
okay, so we have to send

904
00:26:06.370 --> 00:26:08.410
few details, that is name.

905
00:26:08.410 --> 00:26:10.810
Let's say piyush garg.

906
00:26:10.810 --> 00:26:13.930
Okay, email I can send

907
00:26:13.930 --> 00:26:18.610
piyushgar.devail.com Let me just

908
00:26:18.610 --> 00:26:19.450
zoom in a little bit so

909
00:26:19.450 --> 00:26:20.650
that you can see clearly.

910
00:26:20.650 --> 00:26:22.050
And let me just close

911
00:26:22.050 --> 00:26:23.530
this particular window.

912
00:26:23.530 --> 00:26:25.770
So localhost8000 is okay, so body,

913
00:26:26.840 --> 00:26:28.080
oh, here is the one.

914
00:26:28.080 --> 00:26:30.120
Okay, so this one is also good.

915
00:26:30.120 --> 00:26:32.200
And then I can just say password.

916
00:26:33.400 --> 00:26:38.200
So password is going to be Piyush123.

917
00:26:38.200 --> 00:26:40.520
Okay, let's do a send.

918
00:26:40.520 --> 00:26:43.320
And we got an error that is 404.

919
00:26:43.320 --> 00:26:44.680
So it says that this particular

920
00:26:44.680 --> 00:26:45.760
route does not exist.

921
00:26:45.760 --> 00:26:46.880
Yeah, of course, because it has

922
00:26:46.880 --> 00:26:49.240
to be a post route send.

923
00:26:49.240 --> 00:26:51.870
We got user with email piyushgar

924
00:26:51.870 --> 00:26:53.400
uh.dev already exists.

925
00:26:54.010 --> 00:26:55.570
Okay, now there is something

926
00:26:55.570 --> 00:26:57.370
bad we have done here, right?

927
00:26:57.370 --> 00:26:57.930
Why?

928
00:26:57.930 --> 00:26:59.010
Let me just check.

929
00:26:59.010 --> 00:27:00.530
Okay, because this is an array, we

930
00:27:00.530 --> 00:27:01.970
should basically destructure it.

931
00:27:01.970 --> 00:27:03.050
This was the problem.

932
00:27:03.050 --> 00:27:05.050
Okay, now let's do a send.

933
00:27:05.050 --> 00:27:06.770
You can see a user is created

934
00:27:06.770 --> 00:27:08.410
with this particular id.

935
00:27:08.410 --> 00:27:09.130
Nice.

936
00:27:09.130 --> 00:27:10.810
If I go back to my database

937
00:27:10.810 --> 00:27:12.490
and if I do a refresh now you

938
00:27:12.490 --> 00:27:14.090
can see we have one user.

939
00:27:14.090 --> 00:27:15.730
And if I just do a refresh here

940
00:27:15.730 --> 00:27:17.970
you can see this is the user with

941
00:27:17.970 --> 00:27:20.900
this particular ID name, email.

942
00:27:20.900 --> 00:27:22.620
If you see closely, this

943
00:27:22.620 --> 00:27:24.340
is my password, right?

944
00:27:24.340 --> 00:27:25.580
Can you see that my password

945
00:27:25.580 --> 00:27:27.220
is actually hashed?

946
00:27:27.220 --> 00:27:28.620
This is what our password looks like.

947
00:27:28.620 --> 00:27:30.820
And this is what my salt looks like.

948
00:27:30.820 --> 00:27:33.020
So my Original password was

949
00:27:33.020 --> 00:27:35.780
piyush123 but we have hashed it

950
00:27:35.780 --> 00:27:36.980
to something this.

951
00:27:36.980 --> 00:27:38.740
So this is basically your hashing.

952
00:27:38.740 --> 00:27:41.140
Now no user or even a developer

953
00:27:41.140 --> 00:27:42.340
can go into the database

954
00:27:42.340 --> 00:27:43.540
and check for the password

955
00:27:43.540 --> 00:27:45.380
because this is hashed password.

956
00:27:45.380 --> 00:27:46.020
Nice.

957
00:27:46.020 --> 00:27:47.700
That is what we wanted, right?

958
00:27:47.700 --> 00:27:49.260
And this is basically what our

959
00:27:49.260 --> 00:27:50.660
whole table structure looks like.

960
00:27:50.660 --> 00:27:51.700
So this is also nice.

961
00:27:52.580 --> 00:27:54.820
Now our signup is working fine.

962
00:27:54.820 --> 00:27:56.260
If I again try to do a sign up,

963
00:27:56.260 --> 00:27:57.180
you can see user with this

964
00:27:57.180 --> 00:27:58.980
particular email already exists.

965
00:27:58.980 --> 00:27:59.780
Nice.

966
00:27:59.780 --> 00:28:01.099
Now what we should do, we

967
00:28:01.099 --> 00:28:02.500
should also do the login.

968
00:28:02.500 --> 00:28:04.460
Now login is what technically

969
00:28:04.460 --> 00:28:07.420
see what will happen is when user

970
00:28:07.420 --> 00:28:09.700
tries to log in, he has

971
00:28:09.700 --> 00:28:11.740
to give me his email and password.

972
00:28:11.740 --> 00:28:12.620
Now he will give you

973
00:28:12.620 --> 00:28:13.580
a plain password, right?

974
00:28:13.580 --> 00:28:15.380
What user remembers in his mind.

975
00:28:16.150 --> 00:28:17.510
What you should do is first

976
00:28:17.510 --> 00:28:18.710
of all you should search

977
00:28:18.710 --> 00:28:20.470
for the email in the database

978
00:28:21.190 --> 00:28:24.190
and retrieve the salt, right?

979
00:28:24.190 --> 00:28:26.670
You have the salt and you have

980
00:28:26.670 --> 00:28:29.350
the hash stored in the database.

981
00:28:29.350 --> 00:28:31.990
If I take the user's plain password

982
00:28:32.550 --> 00:28:35.110
using the salt, I again hash it.

983
00:28:35.830 --> 00:28:38.230
And if this particular hash matches,

984
00:28:38.230 --> 00:28:39.750
can I say the password is correct?

985
00:28:39.750 --> 00:28:41.630
Because see, in hashing world

986
00:28:41.630 --> 00:28:43.510
there is no concept of D hash.

987
00:28:44.020 --> 00:28:45.580
Once a thing is hashed,

988
00:28:45.580 --> 00:28:47.540
you cannot dehash it.

989
00:28:47.540 --> 00:28:48.860
So what I can do is I can

990
00:28:48.860 --> 00:28:50.220
repeat the algorithm, I can

991
00:28:50.220 --> 00:28:52.060
take this password, use this

992
00:28:52.060 --> 00:28:54.340
salt and again hash it.

993
00:28:54.340 --> 00:28:57.300
If this new hash is actually equal

994
00:28:57.300 --> 00:28:58.500
to the hash stored in

995
00:28:58.500 --> 00:29:00.500
the database, that means yes, user

996
00:29:00.500 --> 00:29:02.020
has entered the right password.

997
00:29:02.580 --> 00:29:04.580
So that means in the login route what

998
00:29:04.580 --> 00:29:05.860
we are going to do is let's say

999
00:29:05.860 --> 00:29:08.260
we have request, we have response

1000
00:29:08.260 --> 00:29:10.100
and of course it has to be async.

1001
00:29:11.110 --> 00:29:11.870
So what we are going

1002
00:29:11.870 --> 00:29:14.310
to do is see number one.

1003
00:29:14.310 --> 00:29:16.550
Let's first get

1004
00:29:16.550 --> 00:29:18.230
the request body thing sorted.

1005
00:29:18.950 --> 00:29:20.350
So I can just say hey, from

1006
00:29:20.350 --> 00:29:22.030
the request body I want

1007
00:29:22.030 --> 00:29:23.590
to have email and password.

1008
00:29:23.590 --> 00:29:24.630
Okay?

1009
00:29:24.630 --> 00:29:25.910
Now you have to search

1010
00:29:25.910 --> 00:29:27.590
for this existing user.

1011
00:29:27.590 --> 00:29:29.070
So just copy the logic

1012
00:29:29.070 --> 00:29:30.630
and paste it here.

1013
00:29:30.630 --> 00:29:31.630
Now here is a thing.

1014
00:29:31.630 --> 00:29:34.070
If there is no existing user,

1015
00:29:34.070 --> 00:29:35.590
that means you have entered

1016
00:29:35.590 --> 00:29:37.390
an email which does not exist

1017
00:29:37.390 --> 00:29:38.430
in the database, right?

1018
00:29:38.430 --> 00:29:39.270
This is the wrong thing.

1019
00:29:39.870 --> 00:29:41.830
So return response.status

1020
00:29:41.830 --> 00:29:45.070
code that is 401.JSON.

1021
00:29:45.070 --> 00:29:47.310
Okay, and I can just send the error.

1022
00:29:47.310 --> 00:29:49.790
Let me just make it 400, okay?

1023
00:29:49.790 --> 00:29:51.950
In fact 404 makes more sense that

1024
00:29:52.750 --> 00:29:54.430
user with email.

1025
00:29:55.310 --> 00:29:58.990
This particular email does not exist.

1026
00:29:58.990 --> 00:30:00.150
You are trying to log in with

1027
00:30:00.150 --> 00:30:01.870
an email which does not exist.

1028
00:30:01.870 --> 00:30:04.110
But if the existing user is there.

1029
00:30:04.110 --> 00:30:06.560
Okay, let's take the salt.

1030
00:30:07.280 --> 00:30:09.360
So I have to query the salt

1031
00:30:09.360 --> 00:30:12.320
from users table dot salt.

1032
00:30:12.320 --> 00:30:15.240
Okay, so basically the existing salt

1033
00:30:15.240 --> 00:30:18.000
is basically existing user dot salt.

1034
00:30:18.720 --> 00:30:22.480
Also take the existing hash.

1035
00:30:22.480 --> 00:30:23.800
What is the existing hash?

1036
00:30:23.800 --> 00:30:24.840
You can basically query

1037
00:30:24.840 --> 00:30:25.760
the password here.

1038
00:30:25.760 --> 00:30:27.520
So I can just say password is

1039
00:30:27.520 --> 00:30:29.520
users table dot password.

1040
00:30:29.520 --> 00:30:31.450
So this is a hashed password, right?

1041
00:30:31.450 --> 00:30:31.970
We know that.

1042
00:30:31.970 --> 00:30:34.370
So existing user dot password.

1043
00:30:34.930 --> 00:30:39.810
Now let's create a new hash.

1044
00:30:39.810 --> 00:30:41.170
How to create a new hash.

1045
00:30:41.170 --> 00:30:42.850
What I am going to do is same thing,

1046
00:30:43.810 --> 00:30:45.490
just copy the same code.

1047
00:30:45.490 --> 00:30:47.490
See, just copy the same code.

1048
00:30:47.490 --> 00:30:48.010
This one.

1049
00:30:48.010 --> 00:30:50.290
That is create hmark code.

1050
00:30:50.290 --> 00:30:51.730
What I am going to do is I am

1051
00:30:51.730 --> 00:30:53.410
going to take your password

1052
00:30:53.410 --> 00:30:54.690
that you are giving me in the

1053
00:30:54.690 --> 00:30:57.010
request body and I am going to

1054
00:30:57.010 --> 00:30:58.810
use this salt and generate a

1055
00:30:58.810 --> 00:30:59.170
hash.

1056
00:31:00.300 --> 00:31:01.100
Nice.

1057
00:31:01.100 --> 00:31:02.780
Now what I can say is that, see,

1058
00:31:02.780 --> 00:31:07.260
if the new hash is not equals to.

1059
00:31:07.260 --> 00:31:09.100
Is not equals to the existing

1060
00:31:09.100 --> 00:31:10.060
hash, that means your

1061
00:31:10.060 --> 00:31:11.380
password is incorrect.

1062
00:31:11.380 --> 00:31:12.900
Okay, so we can just say

1063
00:31:12.900 --> 00:31:16.780
response.JSON saying 400.

1064
00:31:16.780 --> 00:31:18.016
Sorry, response.

1065
00:31:18.016 --> 00:31:18.700
Status.

1066
00:31:19.340 --> 00:31:20.460
Okay, so this should be

1067
00:31:20.460 --> 00:31:24.000
status.JSON saying error.

1068
00:31:24.780 --> 00:31:26.270
That ideally your

1069
00:31:26.270 --> 00:31:27.270
password is incorrect.

1070
00:31:27.270 --> 00:31:31.350
So incorrect password.

1071
00:31:31.910 --> 00:31:33.590
So this is your incorrect password.

1072
00:31:33.590 --> 00:31:35.190
But if the password

1073
00:31:35.190 --> 00:31:36.150
matches, you are here.

1074
00:31:36.150 --> 00:31:38.630
So technically here, generate

1075
00:31:39.590 --> 00:31:42.150
a session for user

1076
00:31:42.150 --> 00:31:43.590
and return the success

1077
00:31:43.590 --> 00:31:45.270
response response status.

1078
00:31:46.310 --> 00:31:47.830
Okay, So I can just say,

1079
00:31:48.390 --> 00:31:49.750
status success.

1080
00:31:51.600 --> 00:31:53.040
So this is basically my login.

1081
00:31:53.040 --> 00:31:53.480
Okay?

1082
00:31:53.480 --> 00:31:54.640
So right now we are not doing

1083
00:31:54.640 --> 00:31:55.680
any kind of session management.

1084
00:31:55.680 --> 00:31:57.600
But ideally this is the logic.

1085
00:31:57.600 --> 00:32:00.400
So that means now if I go back,

1086
00:32:00.960 --> 00:32:03.280
copy this, make a new request

1087
00:32:04.240 --> 00:32:06.800
post to the login.

1088
00:32:06.800 --> 00:32:08.800
Okay, Login.

1089
00:32:08.800 --> 00:32:11.760
What I'm going to do is raw JSON.

1090
00:32:11.760 --> 00:32:13.680
Let me just copy this JSON from here.

1091
00:32:14.240 --> 00:32:15.360
Now, technically, name

1092
00:32:15.360 --> 00:32:16.160
is not required.

1093
00:32:16.160 --> 00:32:18.770
Let me give an invalid email sent.

1094
00:32:18.770 --> 00:32:20.130
You're getting 404.

1095
00:32:20.130 --> 00:32:21.050
User with this particular

1096
00:32:21.050 --> 00:32:22.050
email does not exist.

1097
00:32:22.050 --> 00:32:22.770
Nice.

1098
00:32:22.770 --> 00:32:25.130
What if I give you A wrong password?

1099
00:32:25.130 --> 00:32:27.090
1 2, 3, 3.

1100
00:32:27.090 --> 00:32:28.690
Okay, 1 double 23.

1101
00:32:28.690 --> 00:32:30.610
It says incorrect password.

1102
00:32:30.610 --> 00:32:32.490
But if I give you the right password

1103
00:32:32.490 --> 00:32:35.010
and I do a send, I get a success.

1104
00:32:35.010 --> 00:32:36.010
So this is basically how

1105
00:32:36.010 --> 00:32:37.250
you are doing a login.

1106
00:32:37.250 --> 00:32:38.170
But technically this

1107
00:32:38.170 --> 00:32:39.250
is not login, right?

1108
00:32:39.250 --> 00:32:40.690
Login basically means

1109
00:32:40.690 --> 00:32:43.330
generating a session on the database

1110
00:32:43.330 --> 00:32:45.730
or generating a session.

1111
00:32:45.730 --> 00:32:47.890
So for that what I could do is

1112
00:32:47.890 --> 00:32:50.170
I can basically generate a session

1113
00:32:50.170 --> 00:32:51.730
for this particular user, right?

1114
00:32:52.530 --> 00:32:54.330
So session can be stored

1115
00:32:54.330 --> 00:32:55.250
in the database.

1116
00:32:55.250 --> 00:32:55.730
Great.

1117
00:32:55.730 --> 00:32:57.290
So what I could basically do is I

1118
00:32:57.290 --> 00:32:59.290
can just say I can create a new

1119
00:32:59.290 --> 00:33:02.930
table that is user, sessions, right?

1120
00:33:02.930 --> 00:33:05.970
I can just say PG table and name it

1121
00:33:05.970 --> 00:33:07.970
as like user underscore sessions.

1122
00:33:07.970 --> 00:33:08.930
Okay?

1123
00:33:08.930 --> 00:33:10.800
And then this basically.

1124
00:33:10.800 --> 00:33:13.200
And there I can just say, hey,

1125
00:33:13.200 --> 00:33:14.600
every session is going

1126
00:33:14.600 --> 00:33:15.920
to have a unique id.

1127
00:33:15.920 --> 00:33:17.920
This ID can be anything, right?

1128
00:33:17.920 --> 00:33:19.320
So I can just say it is

1129
00:33:19.320 --> 00:33:20.400
again going to be uuid.

1130
00:33:20.400 --> 00:33:21.280
This is session id.

1131
00:33:21.280 --> 00:33:23.400
Okay, Then I am going

1132
00:33:23.400 --> 00:33:25.120
to keep a, user id.

1133
00:33:25.120 --> 00:33:26.760
This particular thing

1134
00:33:26.760 --> 00:33:28.280
belongs to which user?

1135
00:33:28.280 --> 00:33:29.760
So I can just say uuid.

1136
00:33:29.760 --> 00:33:33.280
Okay, And I can basically say dot.

1137
00:33:34.400 --> 00:33:36.670
If you say unique, if you add

1138
00:33:36.670 --> 00:33:38.230
a unique here, which means

1139
00:33:38.230 --> 00:33:40.310
one user can only have one Session.

1140
00:33:40.310 --> 00:33:41.710
That means if he's logged in

1141
00:33:41.710 --> 00:33:44.110
from mobile, he cannot log in

1142
00:33:44.110 --> 00:33:45.670
from laptop because one user

1143
00:33:45.670 --> 00:33:46.630
can only have one session.

1144
00:33:46.630 --> 00:33:47.630
But no, we want that.

1145
00:33:47.630 --> 00:33:48.350
Okay, you can log in

1146
00:33:48.350 --> 00:33:49.230
from multiple devices.

1147
00:33:49.230 --> 00:33:51.150
UUID is okay, I can

1148
00:33:51.150 --> 00:33:52.150
just say references.

1149
00:33:52.710 --> 00:33:54.390
I have to make a reference here.

1150
00:33:54.390 --> 00:33:55.350
How to make a reference?

1151
00:33:55.350 --> 00:33:57.190
I can just say, hey, this particular

1152
00:33:57.190 --> 00:33:59.590
thing in the users table.id

1153
00:33:59.590 --> 00:34:01.110
so this is a foreign key.

1154
00:34:01.740 --> 00:34:02.140
Okay.

1155
00:34:02.140 --> 00:34:03.460
And also make it not

1156
00:34:03.460 --> 00:34:05.180
nullable, not null.

1157
00:34:05.180 --> 00:34:05.660
Nice.

1158
00:34:06.220 --> 00:34:08.860
And you can also keep created

1159
00:34:08.860 --> 00:34:10.860
at that when this particular

1160
00:34:11.820 --> 00:34:13.219
session was created.

1161
00:34:13.219 --> 00:34:13.380
Right?

1162
00:34:13.380 --> 00:34:15.340
You want to store that if this

1163
00:34:15.340 --> 00:34:16.860
session is only valid for, let's say

1164
00:34:16.860 --> 00:34:18.540
10 minutes, you want to invalidate

1165
00:34:18.540 --> 00:34:20.219
this session after 10 minutes.

1166
00:34:20.219 --> 00:34:21.820
So you should also keep this thing.

1167
00:34:21.820 --> 00:34:23.420
So I can just say created at

1168
00:34:23.420 --> 00:34:25.340
is actually a timestamp.

1169
00:34:25.340 --> 00:34:27.500
Okay, so let's just keep a timestamp.

1170
00:34:28.119 --> 00:34:32.039
Okay dot DEFAULT is now and not null.

1171
00:34:32.039 --> 00:34:32.839
Nice.

1172
00:34:32.839 --> 00:34:34.518
So this is your sessions table.

1173
00:34:34.518 --> 00:34:35.559
Now because you have made

1174
00:34:35.559 --> 00:34:37.839
a new table, you have to say pnpmdb

1175
00:34:38.839 --> 00:34:41.239
Colon, push and enter.

1176
00:34:41.239 --> 00:34:42.839
So now you can see if I go into

1177
00:34:42.839 --> 00:34:45.079
my studio and I do a refresh.

1178
00:34:45.079 --> 00:34:46.518
Now I have user sessions

1179
00:34:47.079 --> 00:34:48.199
now on login.

1180
00:34:48.199 --> 00:34:49.119
What you should do now

1181
00:34:49.119 --> 00:34:49.918
tell me the logic.

1182
00:34:49.918 --> 00:34:50.799
Okay, you have to search

1183
00:34:50.799 --> 00:34:51.719
for the logic.

1184
00:34:51.719 --> 00:34:53.159
I have to basically

1185
00:34:53.159 --> 00:34:55.090
create a new session.

1186
00:34:55.090 --> 00:34:56.010
Okay, how to create a new

1187
00:34:56.010 --> 00:34:57.410
session, I can just say await.

1188
00:34:58.770 --> 00:35:00.250
In the users table, I can just

1189
00:35:00.250 --> 00:35:02.610
say user session, User session.

1190
00:35:02.610 --> 00:35:05.455
So I can just say user sessions.

1191
00:35:05.455 --> 00:35:08.767
Insert sorry, DB.

1192
00:35:08.767 --> 00:35:11.392
Insert into user session.

1193
00:35:11.392 --> 00:35:12.130
Values.

1194
00:35:12.690 --> 00:35:14.850
So I have to just say user ID, which

1195
00:35:14.850 --> 00:35:17.730
is whichever user tried to log in.

1196
00:35:17.730 --> 00:35:18.130
Right?

1197
00:35:18.130 --> 00:35:19.130
That is this user.

1198
00:35:19.130 --> 00:35:20.330
So I can just give it an ID.

1199
00:35:20.330 --> 00:35:23.680
Also that is user table.id.

1200
00:35:25.920 --> 00:35:30.240
so I can just say existing user.id.

1201
00:35:30.800 --> 00:35:31.840
and when this particular

1202
00:35:31.840 --> 00:35:33.960
session is created, you want

1203
00:35:33.960 --> 00:35:35.360
to say dot returning.

1204
00:35:36.080 --> 00:35:39.040
Okay, I can just name it as id,

1205
00:35:39.040 --> 00:35:42.320
that is user sessions dot id.

1206
00:35:43.280 --> 00:35:44.880
Once a session is created,

1207
00:35:44.880 --> 00:35:46.720
you can just send this session

1208
00:35:47.380 --> 00:35:50.420
ID as session id.

1209
00:35:50.420 --> 00:35:52.740
Now, best thing is to actually

1210
00:35:52.740 --> 00:35:54.820
also create a cookie.

1211
00:35:54.820 --> 00:35:56.340
Okay, now what is a cookie?

1212
00:35:56.340 --> 00:35:58.020
Cookie is basically what you could

1213
00:35:58.020 --> 00:35:59.860
do is like you can store some extra

1214
00:35:59.860 --> 00:36:01.580
information on the user's browser.

1215
00:36:01.580 --> 00:36:03.220
But okay, as of now, let's say

1216
00:36:03.220 --> 00:36:05.220
that you have created a token,

1217
00:36:05.220 --> 00:36:06.980
a session id, a token for him.

1218
00:36:06.980 --> 00:36:08.060
And now this particular

1219
00:36:08.060 --> 00:36:10.020
token is sent to the user.

1220
00:36:10.020 --> 00:36:12.140
Now every time he wants to get some

1221
00:36:12.140 --> 00:36:14.260
resource from the backend, he has to

1222
00:36:14.260 --> 00:36:16.100
it give back the session id.

1223
00:36:16.100 --> 00:36:17.420
So if that user is having

1224
00:36:17.420 --> 00:36:18.620
that session id, that

1225
00:36:18.620 --> 00:36:19.700
means he is logged in.

1226
00:36:20.340 --> 00:36:20.980
That's it.

1227
00:36:20.980 --> 00:36:23.500
Okay, so we can just say pnpm

1228
00:36:23.500 --> 00:36:26.100
dev again to start the server.

1229
00:36:26.100 --> 00:36:27.940
Now Let me just try to log in again.

1230
00:36:28.500 --> 00:36:29.380
Oh, nice.

1231
00:36:29.380 --> 00:36:30.500
I got a session id.

1232
00:36:30.500 --> 00:36:32.100
So this is my session id.

1233
00:36:32.100 --> 00:36:32.820
Okay?

1234
00:36:32.820 --> 00:36:34.140
So that means if I do a refresh,

1235
00:36:34.140 --> 00:36:35.900
you can see that, you know,

1236
00:36:35.900 --> 00:36:37.220
this particular user,

1237
00:36:37.220 --> 00:36:38.980
this particular user has a session.

1238
00:36:38.980 --> 00:36:41.340
So this user has how many sessions?

1239
00:36:41.340 --> 00:36:42.900
As of now, only one session.

1240
00:36:42.900 --> 00:36:43.220
Right.

1241
00:36:43.220 --> 00:36:44.780
That means he's logged in from

1242
00:36:44.780 --> 00:36:46.620
one device, which is this user.

1243
00:36:46.620 --> 00:36:47.820
Piyushkar.

1244
00:36:47.820 --> 00:36:48.540
Nice.

1245
00:36:48.540 --> 00:36:49.740
Very nice.

1246
00:36:49.740 --> 00:36:53.220
So that means if a session exists, if

1247
00:36:53.220 --> 00:36:55.260
he has a session id, he's locked in.

1248
00:36:56.460 --> 00:36:58.060
Now, you have successfully

1249
00:36:58.060 --> 00:36:58.900
done one thing.

1250
00:36:58.900 --> 00:37:01.260
That is how to sign up a user, how

1251
00:37:01.260 --> 00:37:02.860
to log in, a user.

1252
00:37:02.860 --> 00:37:04.380
Now, the problem is how

1253
00:37:04.380 --> 00:37:06.180
to detect that if the current.

1254
00:37:06.180 --> 00:37:07.300
Who is the current user?

1255
00:37:07.300 --> 00:37:07.740
Right.

1256
00:37:07.740 --> 00:37:09.340
How this backend will know

1257
00:37:09.340 --> 00:37:10.700
who is the current user.

1258
00:37:10.700 --> 00:37:11.860
So for that, we are going

1259
00:37:11.860 --> 00:37:13.410
to create a middleware.

1260
00:37:13.410 --> 00:37:14.290
So for that, we, have.

1261
00:37:14.290 --> 00:37:15.530
We will continue this particular

1262
00:37:15.530 --> 00:37:16.730
project in the next particular

1263
00:37:16.730 --> 00:37:17.890
video, because I think this

1264
00:37:17.890 --> 00:37:19.490
video is already long enough.

1265
00:37:19.490 --> 00:37:21.650
So let's meet you in the next video.
