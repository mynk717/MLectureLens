WEBVTT

1
00:00:00.160 --> 00:00:01.480
Okay, so in this particular

2
00:00:01.480 --> 00:00:03.120
video, let's get our hands

3
00:00:03.120 --> 00:00:04.960
dirty with Express js.

4
00:00:04.960 --> 00:00:05.600
Okay?

5
00:00:05.600 --> 00:00:06.880
So what I'm going to do is I'm going

6
00:00:06.880 --> 00:00:08.360
to CD into my coding folder

7
00:00:08.360 --> 00:00:09.680
and into the node js folder.

8
00:00:09.680 --> 00:00:11.160
And here I'm going to create a new

9
00:00:11.160 --> 00:00:14.400
directory that is 01 express, right?

10
00:00:14.400 --> 00:00:15.200
So we are going to

11
00:00:15.200 --> 00:00:16.000
start with Express.

12
00:00:16.000 --> 00:00:19.200
Let's go into this 01 Express folder

13
00:00:19.200 --> 00:00:20.720
and I'll just do a code dot

14
00:00:20.720 --> 00:00:22.040
and now, because you're becoming

15
00:00:22.040 --> 00:00:24.000
a backend developer, these terminal

16
00:00:24.000 --> 00:00:25.920
commands you should know, okay?

17
00:00:25.920 --> 00:00:27.480
Because usually we do remote

18
00:00:27.480 --> 00:00:28.880
configurations on a server.

19
00:00:28.880 --> 00:00:29.210
So.

20
00:00:29.210 --> 00:00:30.010
So it's very important to

21
00:00:30.010 --> 00:00:31.410
understand these commands as well.

22
00:00:31.410 --> 00:00:32.490
So don't worry, these are not

23
00:00:32.490 --> 00:00:34.050
very difficult as you work

24
00:00:34.050 --> 00:00:35.370
on them, you will understand them.

25
00:00:35.930 --> 00:00:38.130
So guys, this is my empty folder.

26
00:00:38.130 --> 00:00:38.810
You can see that.

27
00:00:38.810 --> 00:00:40.010
So first things first, you have

28
00:00:40.010 --> 00:00:42.410
to do npm init, you can do hyphen y.

29
00:00:42.410 --> 00:00:43.810
So let's just do npm in it.

30
00:00:43.810 --> 00:00:44.210
Okay?

31
00:00:44.210 --> 00:00:45.370
So you have a package name.

32
00:00:45.370 --> 00:00:47.450
Let's call it as Express Application.

33
00:00:47.450 --> 00:00:49.570
So Express app, version one,

34
00:00:49.570 --> 00:00:50.690
description, entry point,

35
00:00:50.690 --> 00:00:51.570
test, command, git,

36
00:00:51.570 --> 00:00:52.890
repository, all that stuff.

37
00:00:52.890 --> 00:00:53.770
Cool.

38
00:00:53.770 --> 00:00:56.080
Now we have to install Express,

39
00:00:56.080 --> 00:00:57.000
okay, And the types.

40
00:00:57.000 --> 00:00:58.800
So first npm install

41
00:00:58.800 --> 00:01:01.240
at the rate types/ node so that I

42
00:01:01.240 --> 00:01:02.720
get the typings number one.

43
00:01:02.720 --> 00:01:03.640
Second is you have

44
00:01:03.640 --> 00:01:04.720
to install express.

45
00:01:04.720 --> 00:01:06.640
So npm I express.

46
00:01:06.640 --> 00:01:08.600
So what this does, okay, this will

47
00:01:08.600 --> 00:01:10.160
basically download the Express

48
00:01:10.160 --> 00:01:12.560
module, the Express package for you.

49
00:01:12.560 --> 00:01:14.480
Now if you go into Your package or

50
00:01:14.480 --> 00:01:16.800
JSON, boom, you are using Express

51
00:01:16.800 --> 00:01:19.600
4.2111 and you are using at the rate

52
00:01:19.600 --> 00:01:21.950
type node that is in this version.

53
00:01:21.950 --> 00:01:23.030
So now you are using two

54
00:01:23.030 --> 00:01:24.750
dependencies and you can

55
00:01:24.750 --> 00:01:27.070
see all the code is here.

56
00:01:27.070 --> 00:01:28.230
Now piyush, we just

57
00:01:28.230 --> 00:01:29.710
installed two libraries.

58
00:01:29.710 --> 00:01:31.390
How come these many

59
00:01:31.390 --> 00:01:32.110
libraries are coming?

60
00:01:32.110 --> 00:01:33.470
Like accepts is coming, array,

61
00:01:33.470 --> 00:01:35.070
flatten, body, parser, and a lot

62
00:01:35.070 --> 00:01:36.190
of things are coming.

63
00:01:36.190 --> 00:01:37.749
That's because if you go into our

64
00:01:37.749 --> 00:01:39.670
package JSON and you search

65
00:01:39.670 --> 00:01:42.110
for express here, the Express,

66
00:01:42.110 --> 00:01:44.830
the, the module express actually

67
00:01:44.830 --> 00:01:46.470
depends on a lot of things, right?

68
00:01:46.470 --> 00:01:47.470
Can you see that?

69
00:01:47.470 --> 00:01:49.430
The Express module itself depends

70
00:01:49.430 --> 00:01:51.910
on all these things internally.

71
00:01:51.910 --> 00:01:53.590
So all these code is also pulled.

72
00:01:53.590 --> 00:01:54.550
So you can see accepts is

73
00:01:54.550 --> 00:01:55.750
there, arrow flatten is there.

74
00:01:55.750 --> 00:01:56.950
So this all is coming

75
00:01:56.950 --> 00:01:58.550
from the Express library.

76
00:01:59.190 --> 00:02:01.150
So now you have your Express ready.

77
00:02:01.150 --> 00:02:01.990
Now you have your types

78
00:02:01.990 --> 00:02:03.269
are there node ready.

79
00:02:03.269 --> 00:02:04.110
So let me just create

80
00:02:04.110 --> 00:02:05.790
an index js file where we are

81
00:02:05.790 --> 00:02:06.870
going to code, right?

82
00:02:07.510 --> 00:02:09.070
So what I have to do is first

83
00:02:09.070 --> 00:02:10.389
of all let's import,

84
00:02:10.389 --> 00:02:13.180
let's require the express, okay,

85
00:02:13.180 --> 00:02:14.140
let's require the Express.

86
00:02:14.140 --> 00:02:15.660
So you can see Express is here.

87
00:02:15.660 --> 00:02:17.100
Now what I have to do is I have

88
00:02:17.100 --> 00:02:18.700
to create an application.

89
00:02:18.700 --> 00:02:20.740
Okay, so this is coming all

90
00:02:20.740 --> 00:02:21.700
from the documentation.

91
00:02:21.700 --> 00:02:23.500
So const app is equals to express.

92
00:02:23.500 --> 00:02:24.620
So let's create an app.

93
00:02:24.620 --> 00:02:26.380
So app is equals to express.

94
00:02:27.020 --> 00:02:28.340
So this basically creates

95
00:02:28.340 --> 00:02:29.379
an application for me.

96
00:02:29.379 --> 00:02:32.380
So this app and using this app I can

97
00:02:32.380 --> 00:02:33.700
structure my server.

98
00:02:33.700 --> 00:02:35.620
Okay, so for example, let's say

99
00:02:35.620 --> 00:02:36.740
I want to create a get route.

100
00:02:36.740 --> 00:02:38.860
So I can just say app.uh get.

101
00:02:38.860 --> 00:02:40.180
Now see guys, do you see that

102
00:02:40.180 --> 00:02:41.460
I'm not getting the typings

103
00:02:42.100 --> 00:02:43.780
for this express package.

104
00:02:43.780 --> 00:02:44.860
I am not getting any

105
00:02:44.860 --> 00:02:45.660
kind of suggestion.

106
00:02:45.660 --> 00:02:48.420
So that means you have to install at

107
00:02:48.420 --> 00:02:51.060
the rate types for the express now.

108
00:02:51.060 --> 00:02:52.420
Okay, so you have

109
00:02:52.420 --> 00:02:53.820
to install the types for this.

110
00:02:53.820 --> 00:02:55.700
So this will help the VS code to see

111
00:02:55.700 --> 00:02:57.140
that what are the typings available?

112
00:02:57.140 --> 00:02:58.860
So yeah, you it's installed now

113
00:02:58.860 --> 00:03:00.620
you can see app get is there.

114
00:03:00.620 --> 00:03:01.500
So you can see all

115
00:03:01.500 --> 00:03:02.780
the modules are now here.

116
00:03:02.780 --> 00:03:04.860
Okay, so let's say that I want that.

117
00:03:04.860 --> 00:03:06.820
Hey, if there is a get request

118
00:03:06.820 --> 00:03:07.860
on what path?

119
00:03:07.860 --> 00:03:08.580
On slash.

120
00:03:08.580 --> 00:03:09.940
That means the homepage.

121
00:03:09.940 --> 00:03:11.020
Then you can have

122
00:03:11.020 --> 00:03:12.180
a function here, right?

123
00:03:12.180 --> 00:03:14.180
That is a request, a response.

124
00:03:14.180 --> 00:03:15.100
And then you can just

125
00:03:15.100 --> 00:03:16.580
say response dot end.

126
00:03:16.580 --> 00:03:19.340
Okay, response dot end saying that

127
00:03:19.340 --> 00:03:20.500
you know you are at a homepage.

128
00:03:20.500 --> 00:03:22.420
So you can just say home page.

129
00:03:22.980 --> 00:03:25.780
Then if there is a get request

130
00:03:25.780 --> 00:03:28.660
on slash contact us.

131
00:03:29.220 --> 00:03:30.580
Then what you can do is you can

132
00:03:30.580 --> 00:03:32.180
just write a function that is

133
00:03:32.180 --> 00:03:34.020
request and response and you can

134
00:03:34.020 --> 00:03:35.540
just say response dot end.

135
00:03:35.540 --> 00:03:37.770
Okay, response dot end Saying

136
00:03:38.460 --> 00:03:43.130
you can contact contact me

137
00:03:43.130 --> 00:03:46.170
at my email address.

138
00:03:46.170 --> 00:03:48.250
Okay, so this part is also good.

139
00:03:48.250 --> 00:03:49.320
Then you can just say

140
00:03:49.320 --> 00:03:50.730
app dot let's say post.

141
00:03:50.730 --> 00:03:51.850
Okay, app dot post.

142
00:03:51.850 --> 00:03:52.330
You want to make

143
00:03:52.330 --> 00:03:53.930
a post out, go ahead.

144
00:03:53.930 --> 00:03:54.970
Slash tweets.

145
00:03:54.970 --> 00:03:56.570
Okay, so what you can do, you can

146
00:03:56.570 --> 00:03:58.010
just say hey, here is a function.

147
00:03:58.010 --> 00:03:59.370
You can even give an arrow function.

148
00:03:59.370 --> 00:04:00.130
That is what we are going

149
00:04:00.130 --> 00:04:01.210
to use majorly.

150
00:04:01.210 --> 00:04:03.130
So request response and you

151
00:04:03.130 --> 00:04:05.400
can just say response.uh

152
00:04:05.400 --> 00:04:07.960
end and you can say tweet created.

153
00:04:07.960 --> 00:04:09.880
Okay, tweet created.

154
00:04:09.880 --> 00:04:10.280
Success.

155
00:04:10.920 --> 00:04:12.320
Now you want to set

156
00:04:12.320 --> 00:04:13.880
a status code, right?

157
00:04:13.880 --> 00:04:15.680
By default Express is always going

158
00:04:15.680 --> 00:04:17.600
to send a 200 but you

159
00:04:17.600 --> 00:04:18.640
can change that functionality

160
00:04:18.640 --> 00:04:20.360
by doing dot status and you

161
00:04:20.360 --> 00:04:22.160
can pass a status code of 201.

162
00:04:22.160 --> 00:04:23.440
So now this particular line

163
00:04:23.440 --> 00:04:25.240
is going to send a 201.

164
00:04:25.240 --> 00:04:27.480
By default it is 200 status quo.

165
00:04:27.480 --> 00:04:28.200
But now it is going

166
00:04:28.200 --> 00:04:29.640
to send two zero one.

167
00:04:29.640 --> 00:04:31.100
And finally let's just do an app

168
00:04:31.100 --> 00:04:32.660
dot listen on some port.

169
00:04:32.660 --> 00:04:33.780
Let's say I want to listen

170
00:04:33.780 --> 00:04:35.500
on port 8000 and A.

171
00:04:35.500 --> 00:04:38.260
Callback function saying console.log

172
00:04:38.260 --> 00:04:40.500
that your server is

173
00:04:40.500 --> 00:04:43.620
running on port 8000, right?

174
00:04:44.260 --> 00:04:46.740
So yeah, that, that's amazing, right?

175
00:04:46.740 --> 00:04:48.460
So with this Express, can you see

176
00:04:48.460 --> 00:04:50.420
that how clean the application is,

177
00:04:50.420 --> 00:04:52.820
how I, I can define the routes.

178
00:04:52.820 --> 00:04:53.740
So I can say, hey,

179
00:04:53.740 --> 00:04:55.060
post route for this.

180
00:04:55.060 --> 00:04:56.370
Similarly you can just say I,

181
00:04:56.370 --> 00:04:59.110
have dot get so slash tweets so

182
00:04:59.110 --> 00:05:00.870
I can just make a slash tweets.

183
00:05:00.870 --> 00:05:02.950
And then there is this particular

184
00:05:02.950 --> 00:05:04.350
stuff and you have

185
00:05:04.350 --> 00:05:06.310
request, you have response.

186
00:05:06.310 --> 00:05:07.870
So you can just copy.

187
00:05:07.870 --> 00:05:09.110
I'll just copy this line

188
00:05:09.750 --> 00:05:11.310
and I can say that here are your

189
00:05:11.310 --> 00:05:14.470
tweets, here are your tweets.

190
00:05:14.470 --> 00:05:16.390
So how well I am able

191
00:05:16.390 --> 00:05:18.070
to structure my code, right?

192
00:05:18.070 --> 00:05:19.590
Everything is modular.

193
00:05:19.590 --> 00:05:21.630
So if even I hire more developers,

194
00:05:21.630 --> 00:05:23.190
they can go on adding their routes.

195
00:05:23.190 --> 00:05:24.610
So this, this is one block,

196
00:05:24.610 --> 00:05:25.770
this is one block, this is

197
00:05:25.770 --> 00:05:27.090
one block, this is one block.

198
00:05:27.090 --> 00:05:28.890
So this framework is providing

199
00:05:28.890 --> 00:05:30.490
you a structure on how you can

200
00:05:30.490 --> 00:05:32.290
structure your code, right?

201
00:05:32.290 --> 00:05:33.810
So let me just configure

202
00:05:33.810 --> 00:05:34.770
a start script.

203
00:05:34.770 --> 00:05:36.570
So here we can configure a start

204
00:05:36.570 --> 00:05:38.250
script and this start script

205
00:05:38.250 --> 00:05:39.370
is going to be node hyphen,

206
00:05:39.370 --> 00:05:40.890
hyphen Var and I can just say

207
00:05:40.890 --> 00:05:44.530
index js so npm Start enter.

208
00:05:44.530 --> 00:05:45.810
Your server is running.

209
00:05:45.810 --> 00:05:46.650
Let's give it a try.

210
00:05:46.650 --> 00:05:48.290
So you have the Thunder client here.

211
00:05:48.290 --> 00:05:49.970
So if I make a post request,

212
00:05:50.660 --> 00:05:51.900
I'm getting a 404 because there

213
00:05:51.900 --> 00:05:53.020
is no post request, right?

214
00:05:53.020 --> 00:05:53.940
There is no post request

215
00:05:53.940 --> 00:05:54.820
for contact us.

216
00:05:54.820 --> 00:05:56.340
It's actually a get request.

217
00:05:56.340 --> 00:05:58.180
So yeah, it's working good.

218
00:05:58.180 --> 00:06:00.940
Similarly, if I go here and I do

219
00:06:00.940 --> 00:06:02.900
a send homepage is also working.

220
00:06:02.900 --> 00:06:05.940
If I do let's say slash tweets,

221
00:06:06.980 --> 00:06:08.700
slash tweets and send.

222
00:06:08.700 --> 00:06:10.020
You can see here I have tweets,

223
00:06:10.020 --> 00:06:11.580
so everything is working fine.

224
00:06:11.580 --> 00:06:13.620
But the only difference is that this

225
00:06:13.620 --> 00:06:15.780
particular piece of code is now well

226
00:06:15.780 --> 00:06:18.210
structured and managed by Express.

227
00:06:18.210 --> 00:06:18.930
Okay?

228
00:06:18.930 --> 00:06:20.490
So you can do all this stuff like

229
00:06:20.490 --> 00:06:22.410
request headers, request single

230
00:06:22.410 --> 00:06:24.610
header, request raw headers.

231
00:06:24.610 --> 00:06:26.170
So it internally does a lot

232
00:06:26.170 --> 00:06:27.330
of things and gives you

233
00:06:27.330 --> 00:06:28.450
all these things, right?

234
00:06:28.450 --> 00:06:29.290
Request cookies.

235
00:06:29.290 --> 00:06:30.610
Is there request accepts,

236
00:06:30.610 --> 00:06:32.209
is there accepted is here.

237
00:06:32.209 --> 00:06:34.250
So you can see that you have a lot

238
00:06:34.250 --> 00:06:35.810
of things on the request also.

239
00:06:35.810 --> 00:06:36.890
Similarly, you can just say

240
00:06:36.890 --> 00:06:38.970
response.end to send a simple

241
00:06:38.970 --> 00:06:40.890
response response JSON to send

242
00:06:40.890 --> 00:06:43.300
a JSON response response.x response

243
00:06:43.817 --> 00:06:45.480
What else you have

244
00:06:45.480 --> 00:06:46.960
response.render is there.

245
00:06:46.960 --> 00:06:48.520
Then if you want to do a server side

246
00:06:48.520 --> 00:06:49.760
rendering, so don't worry, we

247
00:06:49.760 --> 00:06:51.320
will talk about these all things.

248
00:06:51.320 --> 00:06:53.800
But Express not only gives you

249
00:06:53.800 --> 00:06:56.080
a structure, but also gives you

250
00:06:56.080 --> 00:06:57.920
a lot of capabilities, plugins

251
00:06:57.920 --> 00:07:00.040
and you know, a lot of batteries.

252
00:07:00.040 --> 00:07:01.880
So cool stuff.

253
00:07:01.880 --> 00:07:02.200
Right?

254
00:07:02.200 --> 00:07:03.280
So now I think you are able

255
00:07:03.280 --> 00:07:04.400
to understand this code.

256
00:07:04.400 --> 00:07:05.880
So just try to understand this code.

257
00:07:05.880 --> 00:07:06.640
Are you able to understand

258
00:07:06.640 --> 00:07:07.560
what we are doing?

259
00:07:07.560 --> 00:07:09.250
So we are requiring the express,

260
00:07:09.250 --> 00:07:09.890
creating an express.

261
00:07:09.890 --> 00:07:11.170
So they have extracted this

262
00:07:11.170 --> 00:07:13.010
port as a 3,000 as a variable.

263
00:07:13.010 --> 00:07:14.370
So they're trying to listen

264
00:07:14.370 --> 00:07:16.730
on this port and console log example

265
00:07:16.730 --> 00:07:18.290
app is listening on this port.

266
00:07:18.290 --> 00:07:19.770
And you have a get route that

267
00:07:19.770 --> 00:07:21.570
is the slash root and response

268
00:07:21.570 --> 00:07:23.330
send just in hello world.

269
00:07:23.330 --> 00:07:24.530
So amazing.

270
00:07:24.530 --> 00:07:26.170
Now if you see, if you see

271
00:07:26.170 --> 00:07:27.690
in the guideline, you have a lot

272
00:07:27.690 --> 00:07:28.490
of features, right?

273
00:07:28.490 --> 00:07:30.290
You have routing middleware,

274
00:07:30.290 --> 00:07:32.290
you have overriding express APIs,

275
00:07:32.290 --> 00:07:33.970
templating, engine error handling,

276
00:07:33.970 --> 00:07:36.530
debugging express behind proxies.

277
00:07:36.530 --> 00:07:38.290
So all these things we are going

278
00:07:38.290 --> 00:07:40.290
to cover in the upcoming videos.
