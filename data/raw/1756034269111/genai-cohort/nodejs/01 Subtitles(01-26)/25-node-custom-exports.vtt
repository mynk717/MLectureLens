WEBVTT

1
00:00:00.160 --> 00:00:01.800
Okay, so guys, we are doing

2
00:00:01.800 --> 00:00:03.200
really, really, really great.

3
00:00:03.200 --> 00:00:04.880
And in this particular video,

4
00:00:05.680 --> 00:00:07.560
before moving on to this router,

5
00:00:07.560 --> 00:00:08.640
middlewares and all,

6
00:00:09.280 --> 00:00:11.760
let's go back to the modules, right?

7
00:00:11.760 --> 00:00:12.840
Do you remember that we had

8
00:00:12.840 --> 00:00:14.640
a chapter on modules in which

9
00:00:14.640 --> 00:00:15.760
we covered that you have

10
00:00:15.760 --> 00:00:17.480
like built in modules, right?

11
00:00:17.480 --> 00:00:19.960
Built in modules that you can use

12
00:00:19.960 --> 00:00:21.480
like node and something like this,

13
00:00:21.480 --> 00:00:23.360
like using the require function.

14
00:00:23.360 --> 00:00:25.120
Okay, you remember that, right?

15
00:00:25.120 --> 00:00:26.360
Then we have talked about

16
00:00:26.360 --> 00:00:27.640
third party modules, right?

17
00:00:27.640 --> 00:00:28.790
Third party, third party modules.

18
00:00:28.790 --> 00:00:31.510
So third party, modules like

19
00:00:31.510 --> 00:00:32.590
we are using Express,

20
00:00:32.590 --> 00:00:34.470
we are using More of things.

21
00:00:34.470 --> 00:00:36.790
Okay, right now let's cover that.

22
00:00:36.790 --> 00:00:38.510
How can we create our custom

23
00:00:38.510 --> 00:00:40.190
or I can say user defined.

24
00:00:40.190 --> 00:00:42.190
Okay, user defined modules.

25
00:00:42.190 --> 00:00:43.510
So in this particular video, let's

26
00:00:43.510 --> 00:00:45.550
talk about this user defined modules

27
00:00:45.550 --> 00:00:47.350
that how can I have a custom module?

28
00:00:47.350 --> 00:00:49.230
And just for a refresher, if you

29
00:00:49.230 --> 00:00:51.110
remember it was something like I

30
00:00:51.110 --> 00:00:52.510
told you, like require and then you

31
00:00:52.510 --> 00:00:54.580
can do a dot slash or dot slash.

32
00:00:54.580 --> 00:00:55.300
So this is what we are

33
00:00:55.300 --> 00:00:56.260
going to cover today.

34
00:00:56.260 --> 00:00:57.900
Okay, so this is really important

35
00:00:57.900 --> 00:00:59.540
to understand user defined modules

36
00:00:59.540 --> 00:01:01.500
in order to understand the router,

37
00:01:01.500 --> 00:01:03.220
middleware or routers in express.

38
00:01:03.220 --> 00:01:06.100
Okay, so let's create a simple

39
00:01:06.100 --> 00:01:09.100
index js file and okay, so what I

40
00:01:09.100 --> 00:01:11.180
can do is let's say I have

41
00:01:11.180 --> 00:01:14.020
a function, I have a function add.

42
00:01:14.020 --> 00:01:15.780
This add function can take

43
00:01:15.780 --> 00:01:17.180
two numbers A and B

44
00:01:17.180 --> 00:01:19.140
and it returns a plus B.

45
00:01:19.140 --> 00:01:20.820
Very simple function, right?

46
00:01:20.820 --> 00:01:21.540
Similar to this.

47
00:01:21.540 --> 00:01:23.110
Let me just zoom in a little bit

48
00:01:23.110 --> 00:01:23.710
similar to this.

49
00:01:23.710 --> 00:01:24.910
Let's say you have one more function

50
00:01:24.910 --> 00:01:27.110
that is subtract, it takes A and B

51
00:01:27.110 --> 00:01:29.230
and returns you A minus B.

52
00:01:29.230 --> 00:01:29.830
Okay?

53
00:01:29.830 --> 00:01:30.910
Let's say you have one more

54
00:01:30.910 --> 00:01:31.910
function that is multiply.

55
00:01:31.910 --> 00:01:33.210
And so we'll just create

56
00:01:33.210 --> 00:01:34.070
four functions.

57
00:01:34.070 --> 00:01:34.870
So let's say you have

58
00:01:34.870 --> 00:01:36.270
a multiplication function

59
00:01:36.270 --> 00:01:37.510
that is A and B.

60
00:01:37.510 --> 00:01:38.830
And this also returns

61
00:01:38.830 --> 00:01:40.710
a b to multiply.

62
00:01:40.710 --> 00:01:42.030
And then you have a function

63
00:01:42.030 --> 00:01:43.910
for division which takes A and B

64
00:01:43.910 --> 00:01:46.550
and returns a divided by B.

65
00:01:46.550 --> 00:01:47.910
So this is what basically

66
00:01:47.910 --> 00:01:49.460
we have credit.

67
00:01:49.460 --> 00:01:50.340
Now how can you use

68
00:01:50.340 --> 00:01:51.180
this functions, right?

69
00:01:51.180 --> 00:01:52.220
You can use it something like

70
00:01:52.220 --> 00:01:54.380
hey, console log and you can just

71
00:01:54.380 --> 00:01:56.820
say add two and five, right?

72
00:01:56.820 --> 00:01:58.580
So now if you run this particular

73
00:01:58.580 --> 00:01:59.500
code, you can see that

74
00:01:59.500 --> 00:02:01.140
you are getting seven, right?

75
00:02:01.140 --> 00:02:02.260
Similarly you can call

76
00:02:02.260 --> 00:02:03.220
these functions.

77
00:02:03.220 --> 00:02:05.860
Now the problem is or if you see that

78
00:02:05.860 --> 00:02:08.020
if you create all the functionality

79
00:02:08.020 --> 00:02:10.300
in just one file, your file is

80
00:02:10.300 --> 00:02:11.780
getting little bit messy, right?

81
00:02:11.780 --> 00:02:13.100
You have a lot of code

82
00:02:13.100 --> 00:02:14.740
in just one file and this is

83
00:02:14.740 --> 00:02:16.060
not a maintainable code.

84
00:02:16.060 --> 00:02:17.500
So in reality you will have a lot

85
00:02:17.500 --> 00:02:19.220
of functionalities, lot of features.

86
00:02:19.220 --> 00:02:20.620
So usually what we should do

87
00:02:20.620 --> 00:02:22.080
is we should, should Move

88
00:02:22.080 --> 00:02:23.760
the related features

89
00:02:23.760 --> 00:02:26.960
to a module to a separate file.

90
00:02:26.960 --> 00:02:28.520
So what I can do is actually

91
00:02:28.520 --> 00:02:29.840
I can see that these all

92
00:02:29.840 --> 00:02:30.640
functions are related.

93
00:02:30.640 --> 00:02:32.560
Like it's a kind of math operation.

94
00:02:32.560 --> 00:02:33.840
So I can create a separate

95
00:02:33.840 --> 00:02:35.600
file that is math js.

96
00:02:35.600 --> 00:02:37.280
And what I can do is I can

97
00:02:37.280 --> 00:02:38.680
move these all the functions

98
00:02:38.680 --> 00:02:40.480
to this math js file.

99
00:02:41.040 --> 00:02:43.120
Now the question arises that if I try

100
00:02:43.120 --> 00:02:45.000
to now run this particular code, you

101
00:02:45.000 --> 00:02:46.720
will get an error because the add

102
00:02:46.720 --> 00:02:48.770
function is not defined, right?

103
00:02:48.770 --> 00:02:50.130
You are trying to call the add,

104
00:02:50.130 --> 00:02:51.250
and that is not.

105
00:02:51.250 --> 00:02:52.930
That is not defined here.

106
00:02:52.930 --> 00:02:54.690
So how can I bring this add

107
00:02:54.690 --> 00:02:56.850
function to this index js?

108
00:02:56.850 --> 00:02:58.490
So for that you have to use

109
00:02:58.490 --> 00:03:01.250
module, you have to export.

110
00:03:01.250 --> 00:03:04.010
You have to like tell the JavaScript

111
00:03:04.010 --> 00:03:06.050
that hey, there is a function add.

112
00:03:06.050 --> 00:03:08.210
Please export this function add

113
00:03:08.210 --> 00:03:09.410
from here so that

114
00:03:09.410 --> 00:03:11.490
the index file can import it.

115
00:03:11.490 --> 00:03:13.250
Okay, so it's basically like, see

116
00:03:13.250 --> 00:03:14.490
if you want to get something

117
00:03:14.490 --> 00:03:15.770
from usa, let's say, or some

118
00:03:15.770 --> 00:03:17.170
from from some foreign country,

119
00:03:17.860 --> 00:03:19.740
that country should export that

120
00:03:19.740 --> 00:03:21.140
material, then only you can

121
00:03:21.140 --> 00:03:22.100
import it.

122
00:03:22.100 --> 00:03:23.340
If that country is not

123
00:03:23.340 --> 00:03:24.460
exporting that material, you

124
00:03:24.460 --> 00:03:25.500
cannot import it, right?

125
00:03:25.500 --> 00:03:26.620
And if you are not importing,

126
00:03:26.620 --> 00:03:27.460
you cannot use it.

127
00:03:28.100 --> 00:03:30.180
So now how can we export

128
00:03:30.180 --> 00:03:31.220
these functions?

129
00:03:31.220 --> 00:03:33.140
So to export these functions

130
00:03:33.140 --> 00:03:34.420
you have two methods, okay?

131
00:03:34.420 --> 00:03:35.540
You have two ways.

132
00:03:35.540 --> 00:03:38.020
Number one is known as named exports.

133
00:03:38.820 --> 00:03:39.660
Number two is known

134
00:03:39.660 --> 00:03:41.380
as default exports.

135
00:03:41.380 --> 00:03:42.820
Okay, default exports,

136
00:03:43.890 --> 00:03:44.930
so named exports.

137
00:03:44.930 --> 00:03:46.010
Let's first check out

138
00:03:46.010 --> 00:03:46.850
the named exports.

139
00:03:46.850 --> 00:03:48.530
In named exports you can

140
00:03:48.530 --> 00:03:50.730
give your exports a name.

141
00:03:50.730 --> 00:03:52.130
For example, this can be

142
00:03:52.130 --> 00:03:53.410
a different export, this can be

143
00:03:53.410 --> 00:03:54.730
a different export, this can be

144
00:03:54.730 --> 00:03:55.770
a different export, and this

145
00:03:55.770 --> 00:03:56.770
can be different export.

146
00:03:57.330 --> 00:03:59.489
So to do a named exports.

147
00:03:59.489 --> 00:04:01.570
Do you remember that when we call

148
00:04:01.570 --> 00:04:04.610
node index js or any file, do you

149
00:04:04.610 --> 00:04:06.770
remember that wrapper function?

150
00:04:06.770 --> 00:04:08.530
Do you remember that wrapper function

151
00:04:08.530 --> 00:04:10.770
that internally node js creates

152
00:04:10.770 --> 00:04:12.570
a wrapper function, a function.

153
00:04:12.570 --> 00:04:15.410
Let's say wrapper and it has exports,

154
00:04:15.410 --> 00:04:17.170
it has let's say module,

155
00:04:17.170 --> 00:04:19.250
it has your require function.

156
00:04:19.250 --> 00:04:20.250
It has underscore,

157
00:04:20.250 --> 00:04:21.170
underscore file name.

158
00:04:21.170 --> 00:04:22.570
Okay, file name, it has

159
00:04:22.570 --> 00:04:23.810
underscore, underscore dername.

160
00:04:23.810 --> 00:04:25.010
Do you remember that?

161
00:04:25.010 --> 00:04:27.170
Now here, do you see that?

162
00:04:27.170 --> 00:04:28.250
Here is your source code, right?

163
00:04:28.250 --> 00:04:29.810
Here is your user defined code.

164
00:04:29.810 --> 00:04:31.970
User defined code.

165
00:04:31.970 --> 00:04:33.330
Do you remember that

166
00:04:33.330 --> 00:04:35.570
the first parameter is exports.

167
00:04:35.570 --> 00:04:37.810
So using this exports, you can

168
00:04:37.810 --> 00:04:39.330
actually do a named export.

169
00:04:39.910 --> 00:04:41.350
So what I can do is I have

170
00:04:41.350 --> 00:04:43.430
the exports available here, okay,

171
00:04:43.430 --> 00:04:45.030
Exports is already available here

172
00:04:45.030 --> 00:04:46.950
because of that wrapper function.

173
00:04:46.950 --> 00:04:48.390
So I can just say, hey,

174
00:04:48.390 --> 00:04:50.310
I want to do exports.

175
00:04:50.310 --> 00:04:51.350
Let's give it a name, let's

176
00:04:51.350 --> 00:04:53.630
give it my add function.

177
00:04:53.630 --> 00:04:54.630
I'm just giving It a name

178
00:04:54.630 --> 00:04:56.390
and set it equal to this.

179
00:04:56.390 --> 00:04:58.230
So now what is happening?

180
00:04:58.230 --> 00:05:02.790
This math js file is exporting a name

181
00:05:02.790 --> 00:05:04.430
that is my add function

182
00:05:04.430 --> 00:05:05.700
which is equals to this function.

183
00:05:05.700 --> 00:05:06.980
So we are just exporting one thing.

184
00:05:07.540 --> 00:05:10.420
Now how can we import it here?

185
00:05:10.420 --> 00:05:11.860
So to import you have

186
00:05:11.860 --> 00:05:13.060
to just say const.

187
00:05:13.060 --> 00:05:14.260
Okay, const.

188
00:05:14.900 --> 00:05:16.340
Let's say I'll just call it

189
00:05:16.340 --> 00:05:18.500
as value equals require.

190
00:05:18.500 --> 00:05:19.580
Okay, so let's use

191
00:05:19.580 --> 00:05:20.660
the require function.

192
00:05:20.660 --> 00:05:21.659
Now you can see that we are

193
00:05:21.659 --> 00:05:22.540
not getting the typings.

194
00:05:22.540 --> 00:05:23.380
So for that you know

195
00:05:23.380 --> 00:05:24.020
what we have to do?

196
00:05:24.020 --> 00:05:25.940
So first of all do an npm init

197
00:05:25.940 --> 00:05:27.940
and you have to do npm

198
00:05:27.940 --> 00:05:30.980
install @ the rate types node.

199
00:05:30.980 --> 00:05:31.900
Okay?

200
00:05:31.900 --> 00:05:32.660
So that we have the node

201
00:05:32.660 --> 00:05:33.580
and yeah, this should be dev

202
00:05:33.580 --> 00:05:34.900
dependency, but I have installed

203
00:05:34.900 --> 00:05:36.500
it as a normal dependency.

204
00:05:36.500 --> 00:05:38.020
So let's move it to a dev dependency.

205
00:05:38.020 --> 00:05:40.300
Okay, so yeah, that's fine.

206
00:05:40.940 --> 00:05:44.380
Now in this require if I say dot

207
00:05:44.380 --> 00:05:46.700
dot basically means the current

208
00:05:46.700 --> 00:05:48.180
directory, correct the current

209
00:05:48.180 --> 00:05:50.220
directory slash math.

210
00:05:50.860 --> 00:05:51.700
So what will happen?

211
00:05:51.700 --> 00:05:53.260
There is no need to put js, okay,

212
00:05:53.260 --> 00:05:54.460
because of course we are working

213
00:05:54.460 --> 00:05:56.140
in JavaScript, so that's fine.

214
00:05:56.140 --> 00:05:57.180
So now this value.

215
00:05:57.830 --> 00:05:58.710
Now what is this value?

216
00:05:58.710 --> 00:06:00.150
Let's try to console log.

217
00:06:00.150 --> 00:06:01.830
Okay, Console log the value

218
00:06:01.830 --> 00:06:03.510
and let me just remove it.

219
00:06:03.510 --> 00:06:05.670
So now if I console log the value.

220
00:06:05.670 --> 00:06:10.150
Sorry, node index, node index js.

221
00:06:10.150 --> 00:06:11.630
So what you see that this value

222
00:06:11.630 --> 00:06:12.950
is basically an object

223
00:06:12.950 --> 00:06:14.910
in which you have myadd function,

224
00:06:14.910 --> 00:06:16.470
which is actually a function.

225
00:06:16.470 --> 00:06:17.310
So that means I can

226
00:06:17.310 --> 00:06:19.230
say.myadd function and I

227
00:06:19.230 --> 00:06:21.190
can pass 2 and 5, right?

228
00:06:21.190 --> 00:06:23.030
So what is happening here is

229
00:06:23.030 --> 00:06:25.230
this value is basically whatever you

230
00:06:25.230 --> 00:06:26.880
have named it to this require.

231
00:06:26.880 --> 00:06:27.880
Now this require will

232
00:06:27.880 --> 00:06:29.200
go inside the math.

233
00:06:29.200 --> 00:06:31.400
This math has just one named

234
00:06:31.400 --> 00:06:33.240
export that is my add function

235
00:06:33.240 --> 00:06:34.240
which is equals to this thing.

236
00:06:34.240 --> 00:06:35.840
So this my add function you

237
00:06:35.840 --> 00:06:37.440
are available here, right?

238
00:06:37.440 --> 00:06:39.560
If I name it as add, then here

239
00:06:39.560 --> 00:06:41.120
also you have to say it add.

240
00:06:41.120 --> 00:06:42.600
So what that is exporting.

241
00:06:42.600 --> 00:06:43.400
So now you can see it

242
00:06:43.400 --> 00:06:44.320
will continue to work.

243
00:06:44.960 --> 00:06:46.680
Similarly what you can do is

244
00:06:46.680 --> 00:06:49.014
you can just say exports.

245
00:06:49.014 --> 00:06:51.294
Okay, exports

246
00:06:51.294 --> 00:06:53.120
uh.subtract equals to this.

247
00:06:53.120 --> 00:06:53.850
So so you are now

248
00:06:53.850 --> 00:06:55.370
exporting a subtract also.

249
00:06:55.370 --> 00:06:56.410
So now you can see that you

250
00:06:56.410 --> 00:06:58.170
have add, you have subtract.

251
00:06:58.170 --> 00:06:59.610
Now you are exporting two functions.

252
00:06:59.610 --> 00:07:00.810
So you can just do a subtract.

253
00:07:00.810 --> 00:07:02.250
So this is going to subtract it.

254
00:07:02.250 --> 00:07:03.690
That is negative 3.

255
00:07:03.690 --> 00:07:06.090
Then let's also do it for others

256
00:07:06.090 --> 00:07:08.250
Exports multiply

257
00:07:08.250 --> 00:07:10.970
and you can do exports div.

258
00:07:10.970 --> 00:07:12.290
So now what you have done is you

259
00:07:12.290 --> 00:07:14.690
have done four named exports

260
00:07:14.690 --> 00:07:16.730
in this particular file, right?

261
00:07:16.730 --> 00:07:19.210
And you can see that this value,

262
00:07:19.210 --> 00:07:20.050
whatever you want

263
00:07:20.050 --> 00:07:21.770
to call it, dot, has all those

264
00:07:21.770 --> 00:07:23.260
four functions, correct?

265
00:07:23.980 --> 00:07:25.940
Now, interestingly, okay,

266
00:07:25.940 --> 00:07:27.780
interestingly, what you can do is

267
00:07:27.780 --> 00:07:28.980
like you can call these functions.

268
00:07:28.980 --> 00:07:29.620
That's fine.

269
00:07:29.620 --> 00:07:30.780
We have already seen that.

270
00:07:31.500 --> 00:07:33.140
And even if you don't want

271
00:07:33.140 --> 00:07:33.980
to use this value, you can

272
00:07:33.980 --> 00:07:35.740
destructure it directly here.

273
00:07:35.740 --> 00:07:36.740
So destructure.

274
00:07:36.740 --> 00:07:37.860
So you can see you have add

275
00:07:37.860 --> 00:07:39.340
function, you have multiply

276
00:07:39.340 --> 00:07:40.500
subtraction function, you have

277
00:07:40.500 --> 00:07:42.060
multiplication, you have division.

278
00:07:42.060 --> 00:07:42.980
So now there is no need

279
00:07:42.980 --> 00:07:43.860
to add this value.

280
00:07:43.860 --> 00:07:45.420
You can just directly say add.

281
00:07:45.420 --> 00:07:47.540
Okay, so from where this ad is

282
00:07:47.540 --> 00:07:49.670
coming, this ad is coming from,

283
00:07:49.670 --> 00:07:52.390
from this required, that is do math.

284
00:07:52.390 --> 00:07:54.390
That is this particular ad.

285
00:07:54.390 --> 00:07:56.150
Okay, what if you were having a,

286
00:07:56.150 --> 00:07:57.510
let's say a folder lib.

287
00:07:57.510 --> 00:07:58.550
And in this lib you

288
00:07:58.550 --> 00:08:00.030
had this math js file.

289
00:08:00.030 --> 00:08:02.350
Okay, so what you in this case

290
00:08:02.350 --> 00:08:04.390
you have to say dot slash lib.

291
00:08:04.390 --> 00:08:05.950
Hey, go into the lib folder

292
00:08:05.950 --> 00:08:07.510
and from there get the math.

293
00:08:07.510 --> 00:08:09.270
So you have to give the path,

294
00:08:09.270 --> 00:08:11.030
you have to give the full path.

295
00:08:11.030 --> 00:08:12.150
Got it.

296
00:08:12.150 --> 00:08:14.510
Now let's say just for this

297
00:08:14.510 --> 00:08:15.670
is just for a demonstration

298
00:08:15.670 --> 00:08:16.910
purpose, you have a folder,

299
00:08:16.910 --> 00:08:19.110
let's say, you know, test.

300
00:08:19.750 --> 00:08:20.870
Inside the test folder

301
00:08:20.870 --> 00:08:21.830
you have a folder A.

302
00:08:21.830 --> 00:08:22.870
Inside the A folder

303
00:08:22.870 --> 00:08:23.750
you have a folder B.

304
00:08:23.750 --> 00:08:25.230
And inside the B folder you

305
00:08:25.230 --> 00:08:26.950
have some test js file.

306
00:08:26.950 --> 00:08:28.390
Now this test js file

307
00:08:28.390 --> 00:08:29.270
is doing exports.

308
00:08:29.270 --> 00:08:34.470
Dot xyz equals to I am, xyz string.

309
00:08:35.270 --> 00:08:38.030
So let's say that math js, okay,

310
00:08:38.030 --> 00:08:40.150
math js wants to import this.

311
00:08:40.150 --> 00:08:41.309
So what it has to do.

312
00:08:41.309 --> 00:08:44.320
Okay, see, first of all you have to.

313
00:08:44.320 --> 00:08:47.000
Let's say this is the value require.

314
00:08:47.000 --> 00:08:48.880
See, if you do dot slash you can see

315
00:08:48.880 --> 00:08:50.680
you are getting nothing because you

316
00:08:50.680 --> 00:08:52.640
are currently inside the lib folder.

317
00:08:52.640 --> 00:08:53.840
And do you see any other

318
00:08:53.840 --> 00:08:54.920
file in the lib folder?

319
00:08:54.920 --> 00:08:55.480
No.

320
00:08:55.480 --> 00:08:57.720
Let's create a file, let's say S js.

321
00:08:57.720 --> 00:08:59.800
Okay, now inside the current you

322
00:08:59.800 --> 00:09:01.400
can see that you are getting S.

323
00:09:01.400 --> 00:09:03.120
So dot slash means

324
00:09:03.120 --> 00:09:04.520
in the current directory.

325
00:09:04.520 --> 00:09:06.560
Okay, let me do a dot dot slash.

326
00:09:06.560 --> 00:09:08.600
This goes one directory up.

327
00:09:08.600 --> 00:09:10.820
So that means go one directory up.

328
00:09:10.820 --> 00:09:12.500
That is your root directory.

329
00:09:12.500 --> 00:09:13.900
In the root directory you want

330
00:09:13.900 --> 00:09:15.060
to go into the test.

331
00:09:15.060 --> 00:09:16.380
Inside the test there is a folder

332
00:09:16.380 --> 00:09:18.340
A, inside B and inside test.

333
00:09:18.340 --> 00:09:20.060
And now if you will check the value

334
00:09:20.060 --> 00:09:22.660
for V, you have that XYZ thing here.

335
00:09:22.660 --> 00:09:25.300
So this is how your custom exports,

336
00:09:25.300 --> 00:09:27.300
your user defined modules work.

337
00:09:27.300 --> 00:09:28.420
Got it.

338
00:09:28.420 --> 00:09:30.220
So this was your named exports.

339
00:09:30.220 --> 00:09:31.420
So let me just delete this test

340
00:09:31.420 --> 00:09:32.580
folder, we don't need it.

341
00:09:32.580 --> 00:09:34.340
And let me just bring back the math.

342
00:09:34.340 --> 00:09:35.580
And now I can just say yes,

343
00:09:35.580 --> 00:09:36.780
now VS code is smart.

344
00:09:36.780 --> 00:09:37.980
Enough to automatically

345
00:09:37.980 --> 00:09:39.650
update my index js file.

346
00:09:39.650 --> 00:09:40.330
Okay, so yeah, that's

347
00:09:40.330 --> 00:09:41.330
a VS code feature.

348
00:09:42.130 --> 00:09:44.290
Okay, so this was your named exports.

349
00:09:44.850 --> 00:09:48.530
So for your named export,

350
00:09:48.530 --> 00:09:49.570
okay, so what, what is

351
00:09:49.570 --> 00:09:50.290
the meaning of this thing?

352
00:09:50.290 --> 00:09:52.810
Number one, you have to say exports.

353
00:09:52.810 --> 00:09:54.690
Here you can add the name and then

354
00:09:54.690 --> 00:09:55.770
here you can have the value.

355
00:09:55.770 --> 00:09:57.050
This value can be a function,

356
00:09:57.050 --> 00:09:58.050
string or anything.

357
00:09:58.050 --> 00:09:59.930
And to use it, to use it, what you

358
00:09:59.930 --> 00:10:01.090
have to do is either you can do

359
00:10:01.090 --> 00:10:02.930
a destructuring like require

360
00:10:02.930 --> 00:10:05.440
d dot slash your module name,

361
00:10:05.440 --> 00:10:07.440
okay, whatever is your module name.

362
00:10:07.440 --> 00:10:08.960
So either you can destructure

363
00:10:08.960 --> 00:10:11.240
the name here, or what you can

364
00:10:11.240 --> 00:10:14.000
do is you can just say like const

365
00:10:14.000 --> 00:10:15.800
value or any variable.

366
00:10:15.800 --> 00:10:17.120
I mean, I'm just calling it value.

367
00:10:18.240 --> 00:10:20.280
Let me just copy this and then

368
00:10:20.280 --> 00:10:22.760
you can just call value.whatsoever

369
00:10:22.760 --> 00:10:23.920
name you have given.

370
00:10:23.920 --> 00:10:26.240
So this was your named export, right?

371
00:10:26.880 --> 00:10:28.720
This was your named export.

372
00:10:28.720 --> 00:10:29.800
Now let's see what is

373
00:10:29.800 --> 00:10:31.340
the default export?

374
00:10:31.340 --> 00:10:32.140
Okay, let's see what

375
00:10:32.140 --> 00:10:34.620
is a default export.

376
00:10:34.620 --> 00:10:35.580
Now when you talk about

377
00:10:35.580 --> 00:10:37.900
default export, there can be,

378
00:10:37.900 --> 00:10:43.260
There can be only one default

379
00:10:44.300 --> 00:10:46.700
export in one module.

380
00:10:46.700 --> 00:10:48.780
So one js file can only

381
00:10:48.780 --> 00:10:51.180
contain one default export.

382
00:10:51.180 --> 00:10:53.020
And, default exports don't

383
00:10:53.020 --> 00:10:54.540
have any name, okay?

384
00:10:54.540 --> 00:10:59.340
So default exports do not.

385
00:10:59.340 --> 00:11:01.700
Don't have any name there

386
00:11:01.700 --> 00:11:02.780
because they are default, right?

387
00:11:02.780 --> 00:11:03.580
That's why.

388
00:11:03.580 --> 00:11:04.940
So let me show you what this

389
00:11:04.940 --> 00:11:05.820
particular thing means.

390
00:11:05.820 --> 00:11:06.540
Okay?

391
00:11:06.540 --> 00:11:08.340
So right now, in this particular

392
00:11:08.340 --> 00:11:09.420
module, like I have only

393
00:11:09.420 --> 00:11:10.820
one module that is math js,

394
00:11:10.820 --> 00:11:12.700
you have four named exports.

395
00:11:12.700 --> 00:11:14.300
Let's create a default export.

396
00:11:14.300 --> 00:11:16.020
So for default export you have

397
00:11:16.020 --> 00:11:17.740
to use this module thing.

398
00:11:17.740 --> 00:11:18.660
Do you see this module

399
00:11:18.660 --> 00:11:19.820
in the wrapper function?

400
00:11:19.820 --> 00:11:21.340
This module is used to do

401
00:11:21.340 --> 00:11:23.020
a default export, okay?

402
00:11:23.020 --> 00:11:26.830
So you can just say module.exports

403
00:11:26.830 --> 00:11:27.790
and some value.

404
00:11:27.790 --> 00:11:29.790
Okay, so let's say my default

405
00:11:29.790 --> 00:11:32.310
export is a function, okay?

406
00:11:32.310 --> 00:11:33.350
It's a function that

407
00:11:33.350 --> 00:11:35.470
says console dot log.

408
00:11:35.470 --> 00:11:39.310
Hey, I am, default.

409
00:11:39.870 --> 00:11:42.270
So now what will happen is if I go

410
00:11:42.270 --> 00:11:43.630
back now, this is a default export.

411
00:11:43.630 --> 00:11:45.710
This one is a default export.

412
00:11:45.710 --> 00:11:47.670
Default fault.

413
00:11:47.670 --> 00:11:49.390
Now what will happen if I go back?

414
00:11:49.390 --> 00:11:50.910
If you're destructuring something,

415
00:11:50.910 --> 00:11:52.310
these are coming from the named.

416
00:11:52.310 --> 00:11:54.170
But if I just say anything like

417
00:11:54.170 --> 00:11:56.530
xyz, okay, am I giving anything?

418
00:11:56.530 --> 00:11:58.690
So by default this will actually

419
00:11:58.690 --> 00:12:00.530
point to the default export.

420
00:12:00.530 --> 00:12:02.210
By default, this will actually

421
00:12:02.210 --> 00:12:03.930
point to that default export.

422
00:12:03.930 --> 00:12:05.290
You can name it as anything.

423
00:12:05.290 --> 00:12:06.370
Seriously, like you can

424
00:12:06.370 --> 00:12:07.490
just name it anything.

425
00:12:07.490 --> 00:12:09.609
And by default it will always point

426
00:12:09.609 --> 00:12:11.010
to that default export.

427
00:12:11.010 --> 00:12:12.450
For the rest, you can

428
00:12:12.450 --> 00:12:13.370
just destructure them.

429
00:12:13.370 --> 00:12:14.850
Add, multiply.

430
00:12:14.850 --> 00:12:16.890
So see what is happening right now

431
00:12:16.890 --> 00:12:19.690
here is that the default export.

432
00:12:19.690 --> 00:12:21.250
If you just give any

433
00:12:21.250 --> 00:12:22.610
value here Right?

434
00:12:22.610 --> 00:12:24.090
You are not specifying that what

435
00:12:24.090 --> 00:12:25.290
you want to export, right?

436
00:12:25.290 --> 00:12:26.650
You are not specifying.

437
00:12:26.650 --> 00:12:28.450
So what happens is JavaScript

438
00:12:28.450 --> 00:12:29.490
gives you the default

439
00:12:29.490 --> 00:12:30.970
exported member that.

440
00:12:30.970 --> 00:12:32.490
Hey, you are just saying,

441
00:12:32.490 --> 00:12:33.770
hey Math, can you please

442
00:12:33.770 --> 00:12:35.450
give me the default export?

443
00:12:35.450 --> 00:12:37.930
Right, Math will say, hey, by default

444
00:12:37.930 --> 00:12:39.610
I just have this default export.

445
00:12:39.610 --> 00:12:40.330
So this will give you

446
00:12:40.330 --> 00:12:41.490
the access to the value.

447
00:12:41.490 --> 00:12:42.490
So now you can see that you

448
00:12:42.490 --> 00:12:44.170
are getting the value only.

449
00:12:44.170 --> 00:12:47.450
But rest are named exports, right?

450
00:12:47.450 --> 00:12:48.410
They have a name.

451
00:12:48.410 --> 00:12:49.450
So if you specify

452
00:12:49.450 --> 00:12:50.730
the name, let's say div.

453
00:12:50.730 --> 00:12:52.625
So this will only give you the div.

454
00:12:52.625 --> 00:12:53.310
But because that's

455
00:12:53.310 --> 00:12:55.950
a named export, okay?

456
00:12:55.950 --> 00:12:56.950
Div is not a function.

457
00:12:56.950 --> 00:12:58.270
Oh, just was just one second.

458
00:12:59.550 --> 00:13:00.630
So this is what, this

459
00:13:00.630 --> 00:13:01.750
is a named export.

460
00:13:01.750 --> 00:13:02.150
Okay?

461
00:13:02.150 --> 00:13:03.910
So like you can say but for

462
00:13:03.910 --> 00:13:05.430
the named export, because this

463
00:13:05.430 --> 00:13:06.750
is a named export, right?

464
00:13:06.750 --> 00:13:07.950
These are named exports.

465
00:13:07.950 --> 00:13:09.110
So now what you can do, you

466
00:13:09.110 --> 00:13:10.510
can export them with the name.

467
00:13:10.510 --> 00:13:12.030
For example, there's a ad name.

468
00:13:12.030 --> 00:13:13.150
Okay, just remove this.

469
00:13:13.150 --> 00:13:14.550
So there is a add name,

470
00:13:14.550 --> 00:13:15.510
there's a div name.

471
00:13:15.510 --> 00:13:16.550
So that, that is the difference

472
00:13:16.550 --> 00:13:17.190
between default

473
00:13:17.190 --> 00:13:18.430
export and named export.

474
00:13:18.430 --> 00:13:20.620
So for named exports you have

475
00:13:20.620 --> 00:13:22.140
to, you, you get all the names,

476
00:13:22.140 --> 00:13:23.060
so you get an object back.

477
00:13:23.060 --> 00:13:23.940
But if there is a default

478
00:13:23.940 --> 00:13:25.300
export, the default exports

479
00:13:25.300 --> 00:13:25.980
don't have any name.

480
00:13:25.980 --> 00:13:27.340
You can just name it anything

481
00:13:27.340 --> 00:13:29.180
when you are importing them.

482
00:13:29.180 --> 00:13:30.780
So that's a default export.

483
00:13:30.780 --> 00:13:31.940
So this is how your

484
00:13:31.940 --> 00:13:33.260
custom modules work.

485
00:13:33.260 --> 00:13:35.300
So moving further in our project, in

486
00:13:35.300 --> 00:13:37.300
that bookstore project, we are going

487
00:13:37.300 --> 00:13:40.220
to refactor that particular thing to

488
00:13:40.220 --> 00:13:42.820
be a module where we can split the

489
00:13:42.820 --> 00:13:44.500
code across the files so that our

490
00:13:44.500 --> 00:13:45.820
code is more clean and more

491
00:13:45.820 --> 00:13:46.860
maintainable.

492
00:13:46.860 --> 00:13:48.380
So I'll meet you in the next video.

493
00:13:48.380 --> 00:13:50.220
Until then, bye bye and take care.
