WEBVTT

1
00:00:01.040 --> 00:00:02.880
All right, so let's move ahead

2
00:00:02.880 --> 00:00:04.760
further and the next topic that

3
00:00:04.760 --> 00:00:06.920
we want to cover in our Python

4
00:00:06.920 --> 00:00:09.320
series is going to be another

5
00:00:09.320 --> 00:00:11.000
famous topic, which is known as

6
00:00:11.000 --> 00:00:13.560
how we can actually access the

7
00:00:13.560 --> 00:00:14.320
base class.

8
00:00:14.320 --> 00:00:17.600
So accessing base class, this is

9
00:00:17.600 --> 00:00:19.440
a really fun topic because you

10
00:00:19.440 --> 00:00:21.680
learn so many things with this one.

11
00:00:21.680 --> 00:00:22.640
So I'll walk you through

12
00:00:22.640 --> 00:00:23.600
with this one.

13
00:00:23.600 --> 00:00:24.880
All right, in order to understand

14
00:00:24.880 --> 00:00:26.400
this, there are a couple of ways

15
00:00:26.400 --> 00:00:28.000
where you do actually do,

16
00:00:28.560 --> 00:00:30.640
something known as code duplication.

17
00:00:30.640 --> 00:00:33.950
So code duplication, and we

18
00:00:33.950 --> 00:00:35.470
really want to avoid that.

19
00:00:35.470 --> 00:00:36.590
There are a couple of ways.

20
00:00:36.590 --> 00:00:38.750
There is an explicit call and there

21
00:00:38.750 --> 00:00:40.430
is something known as the super.

22
00:00:40.430 --> 00:00:41.350
So first of all there

23
00:00:41.350 --> 00:00:42.750
is a code duplication.

24
00:00:42.750 --> 00:00:44.430
The second one is known as

25
00:00:44.990 --> 00:00:47.110
explicit call, little bit

26
00:00:47.110 --> 00:00:49.710
difficult to pronounce that.

27
00:00:49.710 --> 00:00:52.030
And the last one which is using

28
00:00:52.030 --> 00:00:53.870
a method, known as super,

29
00:00:53.870 --> 00:00:55.630
and it's actually a method.

30
00:00:55.630 --> 00:00:57.590
So all of these methods are a way how

31
00:00:57.590 --> 00:00:59.150
you can access your base class if

32
00:00:59.150 --> 00:01:01.170
you're trying to do the inheritance.

33
00:01:01.170 --> 00:01:02.690
And again, there is no right or

34
00:01:02.690 --> 00:01:04.730
wrong, it all depends on situations

35
00:01:04.730 --> 00:01:06.690
and there are usual trade offs.

36
00:01:06.690 --> 00:01:08.170
But most of the time you're going to

37
00:01:08.170 --> 00:01:10.130
see this method being taught quite

38
00:01:10.130 --> 00:01:11.850
a lot and is being used quite a lot.

39
00:01:11.850 --> 00:01:13.210
And there are reasons because it's

40
00:01:13.210 --> 00:01:15.090
simpler, it's easier, and that's

41
00:01:15.090 --> 00:01:17.250
the way how it actually works.

42
00:01:17.250 --> 00:01:18.410
So let's go ahead and write

43
00:01:18.410 --> 00:01:19.610
some code for this one.

44
00:01:19.610 --> 00:01:20.970
We are going to go ahead and create

45
00:01:20.970 --> 00:01:24.450
a new file and call this one as 07

46
00:01:24.450 --> 00:01:26.530
and this one is base class.

47
00:01:26.530 --> 00:01:27.530
So let's call this one

48
00:01:27.530 --> 00:01:29.580
as base class Python.

49
00:01:29.580 --> 00:01:31.180
It's going to be fairly simple.

50
00:01:31.180 --> 00:01:32.980
I'll just turn off my AI here

51
00:01:32.980 --> 00:01:34.780
so it doesn't bother us.

52
00:01:34.780 --> 00:01:36.020
So for example, let's just say

53
00:01:36.020 --> 00:01:37.620
you have a simple class, we call

54
00:01:37.620 --> 00:01:39.620
this one as chai, as we have

55
00:01:39.620 --> 00:01:41.660
been calling for so long, this.

56
00:01:41.660 --> 00:01:44.140
And we simply go ahead and define a,

57
00:01:44.140 --> 00:01:45.980
constructor here, which is init,

58
00:01:45.980 --> 00:01:48.140
Just like that we pass on the self,

59
00:01:48.140 --> 00:01:49.700
but apart from the self, you also

60
00:01:49.700 --> 00:01:51.620
pass on what type of this chai is,

61
00:01:51.620 --> 00:01:52.740
and of course type with an

62
00:01:52.740 --> 00:01:53.260
underscore.

63
00:01:53.260 --> 00:01:55.010
Without that it doesn't work.

64
00:01:55.010 --> 00:01:55.930
And you also go ahead

65
00:01:55.930 --> 00:01:56.890
and pass on that.

66
00:01:56.890 --> 00:01:59.010
What's the strength of this chai?

67
00:01:59.010 --> 00:02:00.610
Is it really too hard?

68
00:02:00.610 --> 00:02:02.130
Is it easy, normal, whatever

69
00:02:02.130 --> 00:02:03.490
you want to go with that.

70
00:02:03.490 --> 00:02:05.610
And also what I'll do is I'll

71
00:02:05.610 --> 00:02:07.970
say self type a new variable

72
00:02:07.970 --> 00:02:09.050
which will get the value

73
00:02:09.050 --> 00:02:11.250
from the type, just like that.

74
00:02:11.250 --> 00:02:12.690
And we'll also get

75
00:02:12.690 --> 00:02:18.850
the self.self.strength,

76
00:02:18.850 --> 00:02:20.210
if I can write that.

77
00:02:20.210 --> 00:02:20.890
There we go.

78
00:02:20.890 --> 00:02:21.930
Strength is going to get

79
00:02:21.930 --> 00:02:23.170
the value from strength.

80
00:02:23.740 --> 00:02:24.980
All right, so this

81
00:02:24.980 --> 00:02:25.820
is our basic class.

82
00:02:25.820 --> 00:02:27.100
You have seen this many times.

83
00:02:27.100 --> 00:02:28.540
Now let's just say you define another

84
00:02:28.540 --> 00:02:30.380
class and you say this one is

85
00:02:30.380 --> 00:02:34.500
gingerchie, which also takes kind

86
00:02:34.500 --> 00:02:36.420
of inherit from the chai itself.

87
00:02:36.420 --> 00:02:38.300
Just like this, the syntax.

88
00:02:38.300 --> 00:02:40.380
And we again go ahead and define

89
00:02:40.380 --> 00:02:43.740
a constructor for us init.

90
00:02:43.740 --> 00:02:44.860
There we go.

91
00:02:44.860 --> 00:02:45.980
And as you can see this

92
00:02:45.980 --> 00:02:48.590
automatically takes the type,

93
00:02:48.590 --> 00:02:50.140
the strength and it calls the super.

94
00:02:50.140 --> 00:02:51.220
We don't want to do that.

95
00:02:51.220 --> 00:02:53.230
We want to go with the classic way.

96
00:02:53.230 --> 00:02:53.830
So I'll just go ahead

97
00:02:53.830 --> 00:02:54.430
and remove this.

98
00:02:54.430 --> 00:02:55.350
We'll definitely talk

99
00:02:55.350 --> 00:02:56.710
about the super, the auto

100
00:02:56.710 --> 00:02:57.870
completion of that.

101
00:02:57.870 --> 00:02:59.150
We take couple of parameter,

102
00:02:59.150 --> 00:03:00.870
the self, the type one,

103
00:03:00.870 --> 00:03:02.670
the strength and we also take one

104
00:03:02.670 --> 00:03:03.870
more which is going to be

105
00:03:03.870 --> 00:03:05.870
in this case the spice level.

106
00:03:06.510 --> 00:03:08.390
All right, so how do we go ahead

107
00:03:08.390 --> 00:03:11.150
and define this kind of thing?

108
00:03:11.150 --> 00:03:12.950
So first of all the two common

109
00:03:12.950 --> 00:03:14.470
things are going to be copy pasted.

110
00:03:14.470 --> 00:03:15.190
So yes, you have

111
00:03:15.190 --> 00:03:16.350
to write that code again.

112
00:03:16.350 --> 00:03:18.070
I'm just going to go ahead and copy

113
00:03:18.070 --> 00:03:19.930
paste this and then we are

114
00:03:19.930 --> 00:03:21.890
going to go ahead and say self,

115
00:03:21.890 --> 00:03:26.490
spice level and that will get

116
00:03:26.490 --> 00:03:27.970
the value from spice level.

117
00:03:28.610 --> 00:03:29.210
All right.

118
00:03:29.210 --> 00:03:31.170
Is this correct code?

119
00:03:31.170 --> 00:03:32.410
Yes, absolutely correct.

120
00:03:32.410 --> 00:03:34.280
Is there anything wrong in this one?

121
00:03:34.280 --> 00:03:36.530
No, absolutely nothing wrong in this.

122
00:03:36.530 --> 00:03:37.690
It's just little bit

123
00:03:37.690 --> 00:03:39.010
of the duplication of the code.

124
00:03:39.010 --> 00:03:40.290
This thing was not available

125
00:03:40.290 --> 00:03:41.930
in my top class, so

126
00:03:41.930 --> 00:03:43.250
again no problem there.

127
00:03:43.250 --> 00:03:44.810
But this one is actually a little bit

128
00:03:44.810 --> 00:03:45.770
of a code duplication.

129
00:03:45.770 --> 00:03:46.650
And that's what I said,

130
00:03:46.650 --> 00:03:47.610
code duplication.

131
00:03:47.610 --> 00:03:49.570
This is exactly what I mean to say.

132
00:03:49.570 --> 00:03:50.910
You can inherit that,

133
00:03:50.910 --> 00:03:52.070
you can write your own constructor,

134
00:03:52.070 --> 00:03:53.110
but you are actually repeating

135
00:03:53.110 --> 00:03:54.590
the code quite a lot.

136
00:03:54.590 --> 00:03:55.750
So I can just comment this

137
00:03:55.750 --> 00:03:57.270
and try out another way

138
00:03:57.270 --> 00:03:59.630
of doing this exact same thing.

139
00:03:59.630 --> 00:04:01.190
Let's just say we go ahead

140
00:04:01.190 --> 00:04:02.910
and define the class again

141
00:04:02.910 --> 00:04:04.910
and we say we want to make another

142
00:04:04.910 --> 00:04:06.670
ginger chai which will inherit

143
00:04:06.670 --> 00:04:08.430
from the chai just like that.

144
00:04:08.430 --> 00:04:09.750
And this time what we're going

145
00:04:09.750 --> 00:04:12.070
to do is we are going

146
00:04:12.070 --> 00:04:13.950
to create another constructor.

147
00:04:13.950 --> 00:04:16.880
Let's just say initial and I'll

148
00:04:16.880 --> 00:04:18.399
auto select this again we will

149
00:04:18.399 --> 00:04:19.399
come back onto the super.

150
00:04:19.959 --> 00:04:22.520
Just ignore this for a moment.

151
00:04:22.520 --> 00:04:25.800
I'll say strength again, spice level.

152
00:04:27.480 --> 00:04:29.200
But this time instead of just doing

153
00:04:29.200 --> 00:04:30.880
everything manually, we are going

154
00:04:30.880 --> 00:04:33.040
to call the constructor from this

155
00:04:33.040 --> 00:04:34.720
chai and we can just go ahead and

156
00:04:34.720 --> 00:04:38.160
borrow his constructor and we can

157
00:04:38.160 --> 00:04:39.560
say you obviously get the self

158
00:04:39.560 --> 00:04:40.040
value.

159
00:04:40.040 --> 00:04:42.240
You obviously we go ahead and pass on

160
00:04:42.240 --> 00:04:44.400
this type of as well as we go ahead

161
00:04:44.400 --> 00:04:46.920
and pass on this strength as well.

162
00:04:46.920 --> 00:04:47.400
All right.

163
00:04:47.400 --> 00:04:49.040
So at least the couple of values

164
00:04:49.040 --> 00:04:50.120
that were initially passed

165
00:04:50.120 --> 00:04:51.280
to my constructor, I'm just

166
00:04:51.280 --> 00:04:53.320
going ahead and passing them up.

167
00:04:53.320 --> 00:04:54.720
But one more thing that I have to

168
00:04:54.720 --> 00:04:59.080
do is known as self dot, spicelevel

169
00:04:59.800 --> 00:05:03.040
spicelevel and that's going

170
00:05:03.040 --> 00:05:05.560
to get a value from the spice level.

171
00:05:05.560 --> 00:05:06.640
So this is also another

172
00:05:06.640 --> 00:05:07.720
way, another syntax.

173
00:05:07.720 --> 00:05:08.840
You're going to see them a lot.

174
00:05:08.840 --> 00:05:10.440
It's not like it's a bad syntax,

175
00:05:10.440 --> 00:05:11.680
it's being used quite a lot.

176
00:05:11.680 --> 00:05:13.290
So this is also a syntax.

177
00:05:13.290 --> 00:05:13.930
But what you're going

178
00:05:13.930 --> 00:05:15.530
to see this is explicit call.

179
00:05:15.530 --> 00:05:17.290
So you are explicitly going

180
00:05:17.290 --> 00:05:19.610
ahead and calling the constructor

181
00:05:19.610 --> 00:05:20.610
of the class from

182
00:05:20.610 --> 00:05:21.850
where you are inheriting.

183
00:05:21.850 --> 00:05:22.570
Is it good?

184
00:05:22.570 --> 00:05:23.930
Yes, of course it is good.

185
00:05:24.510 --> 00:05:25.570
But there is a better way

186
00:05:25.570 --> 00:05:26.290
of doing the things.

187
00:05:26.290 --> 00:05:27.730
So we're going to write that again

188
00:05:27.730 --> 00:05:29.570
for the third time and probably the

189
00:05:29.570 --> 00:05:31.810
last time we again go ahead and say

190
00:05:31.810 --> 00:05:33.690
class and this time we can actually

191
00:05:33.690 --> 00:05:35.170
take an advantage of the auto

192
00:05:35.170 --> 00:05:36.010
completion.

193
00:05:36.010 --> 00:05:37.930
So gingerchie, which goes ahead

194
00:05:37.930 --> 00:05:39.570
and take the constructor or

195
00:05:39.570 --> 00:05:41.755
an inheritance from the chai itself.

196
00:05:41.755 --> 00:05:43.650
And, and this time if I go ahead

197
00:05:43.650 --> 00:05:46.770
and define a constructor which is

198
00:05:46.770 --> 00:05:48.850
init and I can actually go ahead

199
00:05:48.850 --> 00:05:50.650
and use this exact same thing.

200
00:05:50.650 --> 00:05:53.090
Now notice what you will notice here.

201
00:05:53.090 --> 00:05:55.010
Compare this to line number 15

202
00:05:55.010 --> 00:05:58.850
to 17 and line number 21 and 22.

203
00:05:58.850 --> 00:06:00.850
Here we are simply saying init.

204
00:06:00.850 --> 00:06:02.570
So this init is the start

205
00:06:02.570 --> 00:06:03.290
of the constructor.

206
00:06:03.290 --> 00:06:05.010
But what we are saying is super.

207
00:06:05.010 --> 00:06:06.770
The super is a method which

208
00:06:06.770 --> 00:06:08.370
instead of saying chai.

209
00:06:08.370 --> 00:06:09.890
You can actually just super says

210
00:06:09.890 --> 00:06:11.090
just like this.

211
00:06:11.090 --> 00:06:13.090
And this automatically means

212
00:06:13.090 --> 00:06:15.170
that I want to call the constructor

213
00:06:15.810 --> 00:06:17.570
of the base class.

214
00:06:17.570 --> 00:06:19.730
This is known as base class as well

215
00:06:19.730 --> 00:06:21.170
or parent class as well.

216
00:06:21.170 --> 00:06:22.730
And I'm going to go ahead and pass

217
00:06:22.730 --> 00:06:24.370
on these values up here.

218
00:06:24.370 --> 00:06:26.330
Now surely, for sure you have

219
00:06:26.330 --> 00:06:27.450
to write this piece of code

220
00:06:27.450 --> 00:06:29.170
on your own because now you're

221
00:06:29.170 --> 00:06:30.770
accepting more values that

222
00:06:30.770 --> 00:06:32.290
the constructor actually takes.

223
00:06:32.290 --> 00:06:34.170
So if you go ahead and take that

224
00:06:34.170 --> 00:06:36.330
value, copy that and place it up

225
00:06:36.330 --> 00:06:38.320
here and what you'll notice that

226
00:06:38.320 --> 00:06:41.040
yeah, this one and this one are

227
00:06:41.040 --> 00:06:42.800
pretty similar, but this one is an

228
00:06:42.800 --> 00:06:44.320
explicit call because you're making

229
00:06:44.320 --> 00:06:45.800
this chai as a call.

230
00:06:45.800 --> 00:06:46.720
While on the other hand

231
00:06:46.720 --> 00:06:48.520
the super is a common method,

232
00:06:48.520 --> 00:06:50.400
which is expected that, hey,

233
00:06:50.400 --> 00:06:52.040
you kind of know this method.

234
00:06:52.040 --> 00:06:53.160
So that's what it is.

235
00:06:53.160 --> 00:06:55.000
And as you can see, this is exactly

236
00:06:55.000 --> 00:06:56.440
what we studied about the accessing

237
00:06:56.440 --> 00:06:57.400
of the base class

238
00:06:57.400 --> 00:06:59.320
can be done by the code duplication.

239
00:06:59.320 --> 00:07:01.240
Surely not the good way you can do

240
00:07:01.240 --> 00:07:03.050
that explicit call or the super you

241
00:07:03.050 --> 00:07:04.010
usual method which people

242
00:07:04.010 --> 00:07:06.010
prefer to use is the super one.

243
00:07:06.010 --> 00:07:07.490
But again, there is no harm

244
00:07:07.490 --> 00:07:09.210
in the explicit method as well.

245
00:07:09.210 --> 00:07:10.690
So I hope this video gave some

246
00:07:10.690 --> 00:07:12.570
added advantage to your knowledge.

247
00:07:12.570 --> 00:07:14.330
It's something that we've discussed,

248
00:07:14.850 --> 00:07:16.250
quite in depth, and let's go

249
00:07:16.250 --> 00:07:18.010
ahead and catch up in next video.
