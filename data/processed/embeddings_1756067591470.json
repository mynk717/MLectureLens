[
  {
    "id": "genai_cohort_python_01_Virtual_Environment_with_venv_vtt",
    "content": "Hey there everyone, and welcome to the video. In this video we are going to learn how we can create a virtual environment in Python. And just want to heads up on that that there are many ways of creating virtual environment and there are variety of tools available to create virtual environments and we're going to see all of them, but we have to start somewhere. So we're going to start with the most commonly used. As of now I am moving on to the new tool. Actually, I'll be honest with you, I now prefer to use UV and as a virtual environment tool I will definitely cover that up eventually in the series. But I would want you to have an experience where everybody is going right now. So majority of people haven't moved on to the uv that's latest and cutting edge. Majority of the people use pip, VENV as a tool. I will walk you through how we can work with that and you will also learn how you can install other dependencies as well with this. So, so first of all let's go on to the screen and try to understand that why anybody would want to have a virtual environment. So there is a simple explanation for this. Let's just say this is your machine, a pretty big one. This is your machine and I happen to call everything as a machine. You can feel free to call it as computer. This is my old habit of calling computers as machine. I love to call them and I have a habit of this. So in this machine, let's just say you go ahead and install a Python version. So we go ahead and say, hey, now I have installed Python in my machine, this is my Python. And along with the Python, let's just say you are working on something interesting which includes database as well. So we'll just go ahead and say we are working on postgres as a database. All right, no problem at all. We can go ahead and install all of them and keep on working with them. But there is a problem. There is a new project and which uses a different version of Python. So let's just say we are going to tilt this a little so that we can just reference this as a different version of Python. How you're going to work on a different version of Python. All right, for this version to work on, you have to uninstall this version and go ahead and install this version. That's little bit difficult. Now apart from this, that's just one tip of the iceberg of the problem. Let's just say you want to again go back onto the latest version. So you will uninstall this and you will install the latest version. This is the problem, this. But there could be other tools as well that you want to use. For example, let's just say this is another utility that you have installed to work on the Python. This could be a utility to talk to CSV files or PDF files or anything else. If you go ahead and want to use it, you can install that using Pip, which is a utility that comes up by default with the Python. So you can go ahead and say, hey, I want to install this utility on my machine. That's great, you can go ahead and install this. Similarly, there are utilities like Flask, there are utilities like Numpy for Data Science. Now, all of them you're installing, and if any one of them gets a change in the version, you have to actually uninstall this and have to grab another version of it. So this needs to go out and this new version needs to come into this. But maybe your other files were dependent on this previous version. I hope you are getting the sense of why this is getting a nightmare as we go further into this. So what we do or what we try to do is instead of doing installation on the whole of my machine, I really don't like to install these days, even any database. I use the docker for this docker for another day. But I don't prefer to install any Python utilities on my whole system. What I prefer to do is that, hey, give me inside my computer a, virtual environment. This is a temporary environment which you can activate and deactivate based on when you are using it or not using it. And inside this environment, I prefer to install all of my utilities, so I can just go ahead and keep on adding my utilities as I need them. Now, this utility and whatever I'm installing on my main machine have no connection at all. This is a sandboxed environment. This environment is not going to talk to your real environment or real Python installed. You, you have to get a copy of Python into this. Luckily for us, the tools that we are going to use like pip, they actually go ahead and install a version of Python automatically for you. And on top of that, you can go ahead and install any further utilities, like Numpies, Flask, Pandas, whatever you wish, any Python utility, you can go ahead and install that. If you want something to be on your main machine, you can still use Python and PIP and install that on main machine, but that will not be available inside your virtual environment. You have to go ahead and say, hey, this is my Virtual Environment. This is activated and I want to just work within this. Once I'm done working I can go outside. Now apart from this, there are also a couple of ways that you create a special file. And the name of this file, at least for the initial one, is called as requirement Txt. This file has nothing, it just has all the things that you're installing. So as soon as you install something you go ahead and mark this, that hey, I want to move this information that I have installed this file in my requirement txt so that if anybody else wants to work on it they can actually consult the requirement Txt and can install my file. I hope you are getting it. It's not that hard. It's just a text file in which the information for all of this file is available. All. Right, good enough. So one of the most common way of installing these virtual environment or creating this sandbox is known as Venv. Virtual Environment. Yeah, that's the name. But this is not the only one. There are a couple of others available as well and out of that one of my favorite one is uv and we're going to cover the installation of UV as well. And we'll cover both Virtual Environment and uv. There are others as well, like there is one known as Poetry. We will not cover that but again there could be like five others as well. I don't know much about them. The most common one which are used in the industry are Virtual Environment and uv. These are the ones that we are going to cover. Now let's go ahead and see a practical example of how this actually can be done. This is not really that hard of a program to work on with super easy. Just go ahead and create a new folder and we're going to create a virtual environment within this folder. So I'll go ahead and create a new folder and I'm going to call this one as Test Venv. I'll actually remove this folder after creating this video because there's no point of providing this folder. It's just a configuration file. You can always regenerate that. Now inside this folder I would like to right click and we'll click on Open Integrated Terminal. Now this is our Python environment and terminal. Let's go ahead and see that I do have a Python and if I go ahead and say V, I don't remember it's a dash V or dash dash version I have to always look for what's the version? Come on. Oh My bad, it's actually Python in my case. So Python and I guess then I can say V. Again it's little difficult to find it out. I usually don't check the versions like this. But anyways, so we'll just kill this and I will walk you through that how we can actually generate a virtual environment. So now notice here I am inside this. So if I check the pwd present working directory, I'm in the test vnv. That's the most important part. Once I'm here I have to use Python in my case and in your case it's just Python because you are on Windows and then I have to provide an option of dash that I want to use a module with Python. The module name is venv and I want to create a virtual environment. Now virtual environment will like to keep some of the files and Python installations somewhere in your directory. So that can be kept in any directory. Some people like to call it as dot venv Some people like to call it as directly venv. Whatever you do, there is no right or wrong in this one. As soon as I hit enter you will notice that this will take a second, but if I open this up folder now I do have this venv and I have bin include lib all of this. This whole thing actually is saying that hey, you have a Python version, we can change the versions as well. Apart from this we have this bin and inside the bin you can see that we have this activate script as well. We have the pip and a whole bunch of other things. Now the next thing that you have to do is go inside this venv and activate your virtual environment. Right now it's not activated. So first I'll walk you through how you can do that in Windows and then I will walk you through that how we can do that on Mac and Linux. So Windows user, your file environment is venv v Env. Go inside that, then you can just press the forward slash, that's a Windows thing and you will have something known as script and this always remains exactly same. So inside the scripts you will further can have a forward slash and activate. As long as you just press this, that is it. You will activate your virtual environment. If any point you want to deactivate it, just write deactivate, hit Enter and that's it for if you're on Linux or a Mac, then you have to write source in front of it and then we will go again, exactly in the same directory. For in our case it's venv. Venv. And then we know that it's inside the bin. So let's go inside Bin and then again the same file activate as soon as I hit enter for this. Oops, my bad. The file name is actually venv. I missed a V. And there we go. Notice here it says Venv at the very start of it. This means the virtual environment is active. Now I can go ahead and run all these commands which we are going to see in a second. And now let's go ahead and see that. Can I go ahead and deactivate it? Yes, the command is same, deactivate and hit enter. That's it. Your virtual environment is gone. So what just happened? You just asked your terminal that, hey, I want to be inside this box or I want to be in the whole machine. So this whole machine is your basic Python where you have installed, but we have a one copy of Python installed in our virtual environment as well. So we are into this Venv. Let's go ahead and try this again. Source Venv Bin Activate. So if you're calling it as vnv, go inside that folder. If you're calling it as vnv, go inside that folder. Windows, exactly same, just the path is forward slashed. All right, now sometimes what will happen that your VS code might not be able to detect the whole thing that hey, we haven't seen that. Where is your virtual environment? In that case you can just go ahead and say pwd as a present working directory, copy this whole thing along with this whole thing. Because this is where your Activate file is. And at least you have to walk till the bin. And then what you can do is let me just go ahead and run the command again. Let's just say I have copied this whole thing. Copy that. And then press on your VS code command shift P. If you're on the Mac or Control Shift, push on Windows and this will open up this whole terminal thing. And then write Select Interpreter. This is the first thing that will come to you, the select interpreter. Click on this and then you can actually go ahead and create a virtual environment from here as well, which I usually don't recommend. And then you have to enter the path you can select from the recommended one which will select a few for you. Like there's one in the user Bin, there's one Anaconda installation as well. But if you click on Enter the path now you can just enter the path. So Whatever we have copied using pwd, just place that and then we know that inside this we have venv and we have a slash bin. This is where my activate script is. So you can just give that path. In my case it has already activated, so I'm fine with that. But this is also another way of activating your virtual environment. Sometimes when we do that, you will notice that with the uv, it sometimes is not able to recognize this virtual environment because the flow of UV is kind of fresh. It's not that much known by the interpreters and VS code. So it happens. All right, let's go back. And this is the basic of virtual environment. Now the interesting part is what can I do with this virtual environment? You can do a lot of stuff. First and most common stuff is now first of all, I don't have to say Python now because we are in this virtual environment and it's exactly same for you and me whether you are on Windows, I'm, on Mac, doesn't really matter for all of us it's just Python now. And another utility that we have is pip. So if you just write, hit PIP and enter, you are going to notice that we have the PIP installed and this is how we can run this command. Let's go ahead and run the PIP command. So I will say that hey pip, I want to install the PIP, which is already installed, but I want to upgrade it. So I can just go ahead and provide a flag of dash dash so it will get me a latest version of the pip. And you will notice it says you have installed Python package global environment. You may have that and conflicts. Would you like to create Virtual environment? No, I am already on Virtual environment, so please ignore this message. Now we have the latest version of pip, being installed. I can install dependencies with it. I can go ahead and say pip, install and whatever I want to install. That is nice. Let's just say there is a package known as Request which helps you to make web request. I can go ahead and install this. That is it. It will go ahead, take the dependencies, sub dependencies, everything. There is another package known as Flask. So I can go ahead and say I want to install Flask or Django or Fast API. There are so many of them, I can go ahead and enter this and this will install this package as well. Now most important part is I'm installing these packages in the virtual environment, not in the main environment. So if I go outside of this and I say that hey, I want to use request or Flask, they are not available to me. They're available within this virtual environment. And sometimes people don't ship this venv they simply ship a file which we just studied that requirement txt that if you want to know what all things are installed in my virtual environment, I will give you a file and take consultancy with this file and install all the things which are mentioned there. How do we generate this file? PIP can actually generate that file very easily. The command that we want to use is PIP Freeze. If you enter the PIP freeze command you will notice that these are all the dependencies which we have installed. And you might be wondering, hey, we didn't install this much, we only installed Flask. All right, that is there. We also install request. But what are the other things? Now when you install Flask or request, they are not the alone that comes up. Sometimes they are sub dependent on other modules of Python. They also need to be installed. In this case that's exactly what PIP has done for you. It has gone ahead and installed all these dependencies or sub dependencies for you. And in order to work all of this we need to actually grab all of this. Now here's a command. Once we know that PIP freeze command exists, we can redirect it into any file. And this is a Linux based utility. What we are going here is a Linux based utility which comes in Python as well. So again, if you are in Windows it will work. If you are in a Mac or Linux it will work. But remember this whole thing, a lot of people think that this is a Python specific thing. It is not. It is a Linux. We are just redirecting the output of this command in a file. That is all we are doing. I still wonder that so many people who are so much experienced in Python don't know this requirements txt and this doesn't need to be requirement txt. You can call it as dependencies txt or install txt. Whatever you wish to call, you can just go ahead and call this. This is just a kind of a philosophy that people use that hey, let's call this as requirement txt. If I hit it enter what you will notice. Now inside this file we have this requirement txt and all of the files are available to me. If I install anything I have to go ahead and repeat this process again. Super simple, super easy. Now I can go ahead and install from this and you can just go ahead and say hey, I want to install all this. Or you can install them one by one along with the version and everything we will see this, some of the stuff as well. But this is all. Now I can go back and say that, hey, I want to deactivate it. So go ahead and say deactivate and that is all. Now you are outside of this. Notice the venv also is gone. But again, that's not a true check of this. Always check that. Hey, whether the Python version that we are installing is different or not, or just kill this. And by the way, one more interesting thing I want to walk you through. If I go ahead and activate this command again, source activate. And if you're thinking that, hey, I'll just go ahead and kill this terminal and I will start another terminal. Notice here, this terminal which you're going for, this doesn't have this virtual environment because you're opening the folder terminal in the root of this. But we have the virtual environment in the test vnv. Now let's go ahead and open an integrated terminal here and you will notice your terminal is gone. Sometimes it goes away, sometimes it doesn't go away. So make sure you're aware of whether the virtual environment is activate or not. Always pay attention to this. And I can run this. And there we go. Our virtual environment is activated. Now I can go ahead and install whatever I wish to do. Let's go ahead and say deactivate. And it's gone now. Now sometimes, again, remember, sometimes it goes away by killing the terminal, sometimes it doesn't go away. And that's it. Told you. That is the reason why I said I won't be giving you this file because there is nothing inside this file. It is absolutely the basic. I'll, go ahead and delete this because we don't need it technically. I hope you got the idea of why the virtual environments are important and what they do and how it works. Now UV also does exactly same. We have this sandbox environment. We can install the utilities, but uv, instead of using the requirement txt, it uses a different file name. Rest of the process is exactly same. All right, hope you have enjoyed this video and this was very beneficial for you to understand the virtual environments. That is it for this video. Let's go ahead and catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 Virtual Environment with venv.vtt",
      "originalPath": "genai-cohort/python/10 Chapter Subtitles/01 Virtual Environment with venv.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.004051138,
      -0.001619324,
      0.013980651,
      -0.046449948,
      0.016462546,
      0.004840508,
      0.026634717,
      0.004996969,
      0.015496121,
      0.0016478469,
      -0.023684798,
      -0.022796484,
      0.035528935,
      0.034547165,
      0.113009036,
      0.0054115583,
      -0.0063950364,
      -0.02796104,
      0.008327007,
      -0.016492119,
      -0.002623831,
      -0.003235013,
      0.009368811,
      -0.009502339,
      0.01720003,
      -0.00009108741,
      -0.0016575656,
      -0.005919946,
      0.011241651,
      -0.0315492,
      -0.026464434,
      0.00066879066,
      -0.011666243,
      0.027081609,
      0.009305911,
      0.003724583,
      0.017113714,
      0.009567249,
      -0.0029498732,
      -0.0018545918,
      -0.016787952,
      0.010046553,
      -0.017388923,
      -0.021004852,
      0.019979734,
      -0.019801918,
      0.0042383433,
      -0.033431977,
      0.011275626,
      0.006844761,
      -0.016206473,
      -0.0006562718,
      -0.02316,
      -0.18267027,
      -0.004874265,
      -0.008618965,
      0.002872084,
      0.00035869164,
      -0.0008247311,
      0.005538129,
      -0.030218538,
      0.02943838,
      -0.05373395,
      -0.0011714804,
      -0.0018522394,
      -0.010262394,
      0.01215332,
      -0.0008825045,
      0.003150033,
      -0.017435411,
      0.025612459,
      0.0102999825,
      -0.005385989,
      -0.018680269,
      -0.046203528,
      -0.015997296,
      -0.0019817008,
      -0.025320314,
      -0.004332099,
      0.025040185,
      -0.02261277,
      -0.007561211,
      -0.0015961725,
      -0.00010498899,
      0.018564057,
      0.018900786,
      -0.04086646,
      -0.0076236264,
      -0.011490114,
      -0.0050331755,
      -0.015811477,
      0.028902607,
      -0.023842726,
      0.008476413,
      -0.022500677,
      0.007890758,
      -0.02701975,
      0.009335805,
      -0.014203251,
      0.031049127,
      0.010769801,
      -0.0055666924,
      -0.053019103,
      -0.0011576681,
      0.015081257,
      -0.0003629426,
      0.010201267,
      -0.009712643,
      -0.011617579,
      -0.030487826,
      0.0021122163,
      0.009793024,
      -0.00703189,
      0.034775186,
      0.0015841937,
      -0.17161015,
      0.0033777582,
      -0.013056038,
      -0.008058732,
      -0.00933558,
      -0.009871472,
      -0.009150796,
      0.0067230198,
      -0.0015321445,
      0.0026474248,
      0.013523391,
      0.00019076363,
      0.013307573,
      0.0026928717,
      -0.029411448,
      -0.041469242,
      -0.016181864,
      0.0003546442,
      0.0159304,
      0.011447687,
      0.030341726,
      -0.025373658,
      -0.0047551114,
      -0.034873493,
      -0.01691847,
      -0.008585255,
      0.030229984,
      0.0071294513,
      0.025509633,
      -0.004562738,
      0.012087861,
      -0.0028361466,
      0.02560209,
      -0.0006398358,
      -0.029075049,
      0.007205711,
      -0.019990696,
      0.00021879475,
      -0.008136545,
      0.0121256085,
      -0.0024959997,
      0.0046339887,
      0.0041817427,
      -0.01715189,
      -0.009566727,
      -0.00783651,
      0.00001470073,
      0.008287271,
      0.010393694,
      0.008474581,
      -0.0012606749,
      -0.024258554,
      0.004951495,
      0.027536208,
      0.00573982,
      -0.011145517,
      -0.020922974,
      -0.010189418,
      0.010375145,
      -0.017411156,
      0.006865627,
      -0.010473117,
      0.0017146382,
      0.0037279415,
      -0.013581315,
      0.01738171,
      -0.007090674,
      0.012501896,
      -0.0037149566,
      0.012112044,
      0.0067047137,
      -0.011794307,
      0.020800391,
      0.013781954,
      -0.008898144,
      -0.0021112862,
      0.0167588,
      0.0074947216,
      0.007651715,
      -0.02255167,
      -0.013576487,
      0.004507306,
      0.0017072345,
      -0.017763447,
      0.03176917,
      0.014729125,
      -0.0054775453,
      -0.016618013,
      -0.003265327,
      0.022521665,
      -0.02022741,
      -0.02567848,
      -0.018085852,
      -0.01017352,
      -0.018941492,
      0.0072737094,
      -0.018411499,
      0.005510989,
      -0.0073798373,
      0.007338254,
      -0.0037853785,
      0.02365467,
      0.019885307,
      0.004338159,
      -0.005889934,
      0.011695398,
      -0.0038862792,
      -0.007455155,
      0.0163666,
      0.0109663,
      -0.035867948,
      -0.01565086,
      0.014226628,
      0.0030678075,
      0.010583718,
      0.014979715,
      -0.010130849,
      -0.013101251,
      0.005312293,
      0.008733236,
      -0.0038143264,
      -0.027507462,
      0.008389392,
      0.018834556,
      -0.0037532689,
      0.0032652556,
      -0.009623763,
      -0.0068931095,
      0.028678507,
      0.032331977,
      -0.0047971127,
      0.009484102,
      0.0065915673,
      -0.002667482,
      -0.023038555,
      -0.009643027,
      -0.0038396155,
      0.013527712,
      -0.016280698,
      0.009150963,
      -0.009941526,
      -0.021909423,
      -0.004173319,
      -0.004962632,
      -0.001152617,
      0.011499419,
      -0.017160747,
      -0.018954786,
      -0.015362769,
      0.016043643,
      0.0016831986,
      0.0069381697,
      0.016420778,
      -0.015473129,
      0.028152976,
      0.011556737,
      0.0136518795,
      -0.00077468087,
      0.002479247,
      -0.025547355,
      -0.005193307,
      -0.08192625,
      0.014188304,
      -0.005734945,
      -0.022921238,
      -0.009041985,
      -0.00010773359,
      -0.019658081,
      0.025459921,
      0.010991476,
      0.007767789,
      -0.013319715,
      -0.00827482,
      0.03898055,
      -0.0056205317,
      -0.021114156,
      0.014142535,
      -0.0013089855,
      0.0045990413,
      0.0144478865,
      -0.005890469,
      -0.014359094,
      0.01599264,
      -0.0018445936,
      -0.0040227817,
      0.015390965,
      -0.019436777,
      -0.0066353865,
      0.03507568,
      0.019984521,
      0.012396572,
      -0.03139089,
      0.041981,
      -0.00057899585,
      -0.010286854,
      -0.006464984,
      0.0048161903,
      0.012145989,
      -0.03749842,
      -0.012515979,
      -0.010554853,
      0.0067292373,
      -0.016966574,
      0.015110205,
      0.00674071,
      -0.015785778,
      -0.0042738332,
      -0.01787199,
      -0.010113033,
      -0.018170584,
      0.0017832697,
      -0.018148888,
      0.008687094,
      0.007341612,
      -0.015768701,
      -0.00655063,
      0.0038544075,
      0.00030602096,
      -0.013911285,
      0.020790063,
      0.016335566,
      0.0046229837,
      -0.012531258,
      0.00080334005,
      -0.0063858563,
      0.021376189,
      -0.009888548,
      0.010301278,
      -0.012554795,
      0.013179344,
      0.020880496,
      0.013411595,
      -0.010188598,
      -0.008349959,
      -0.0145925125,
      0.015909899,
      -0.017714223,
      -0.016376887,
      -0.0023578315,
      -0.012258634,
      0.014666043,
      0.01346727,
      0.00071478565,
      0.012820455,
      0.0008485228,
      0.008550271,
      0.0035240222,
      0.002120508,
      0.013018489,
      0.00017982455,
      -0.019250436,
      0.005183378,
      0.018603403,
      -0.0005554281,
      0.011477544,
      -0.0084693525,
      0.011426193,
      0.009566603,
      -0.0121640265,
      -0.017406126,
      0.0019443335,
      0.0033823897,
      0.0056823054,
      -0.025344286,
      0.010140308,
      -0.004823173,
      0.009932043,
      -0.00748863,
      -0.007977256,
      -0.031857155,
      0.005019312,
      0.014662714,
      0.017361034,
      -0.0047806012,
      -0.0017333681,
      -0.011639895,
      0.011441903,
      0.008112979,
      0.017665967,
      0.011060097,
      0.008970446,
      -0.005429823,
      -0.013423686,
      -0.006409319,
      0.0132299345,
      -0.008464493,
      -0.0114195645,
      -0.0091568725,
      -0.0049229865,
      -0.0009746286,
      -0.037613377,
      -0.034691308,
      0.021740774,
      -0.024604952,
      -0.023846358,
      -0.019887257,
      -0.0123291565,
      0.019579103,
      0.016484108,
      0.0062979115,
      0.022049066,
      -0.001813721,
      -0.00039044928,
      0.012553326,
      -0.011959496,
      -0.016845873,
      0.019513175,
      -0.017219895,
      -0.020738939,
      0.0062334314,
      -0.016610254,
      0.0011343794,
      0.0045973505,
      -0.009097101,
      -0.005059901,
      -0.006295434,
      0.02494316,
      0.010217099,
      -0.005257182,
      -0.027028525,
      -0.012245673,
      0.008710641,
      0.012942559,
      -0.0047798506,
      -0.00009138959,
      0.007946709,
      -0.001889792,
      0.016466882,
      -0.007505804,
      -0.0020879933,
      -0.003922743,
      0.0009273395,
      -0.02764725,
      -0.034144346,
      0.002385799,
      0.0026774006,
      -0.0024920749,
      0.035716765,
      0.009433864,
      0.016207047,
      0.008214019,
      -0.0011199459,
      -0.013736425,
      -0.033033296,
      0.013442097,
      0.0034046373,
      0.0374978,
      -0.0073945555,
      0.001059242,
      -0.00878866,
      0.027870307,
      -0.0069637215,
      -0.0053059724,
      0.0018220909,
      -0.006642855,
      -0.005677374,
      0.027310135,
      -0.021424389,
      -0.0033431994,
      0.012646027,
      0.01139429,
      0.0030639453,
      -0.020904033,
      0.009683764,
      -0.0030437761,
      0.0203189,
      -0.012973901,
      -0.0012634903,
      0.0008091196,
      0.006774419,
      0.01665355,
      -0.0022614477,
      -0.0043033664,
      0.0009759645,
      0.013085866,
      0.003680856,
      0.023011899,
      -0.003360195,
      0.0016550187,
      -0.009415953,
      -0.0059447465,
      0.013052087,
      -0.014174421,
      -0.005636117,
      -0.0014287835,
      0.00060752983,
      0.010785702,
      -0.014122959,
      0.008573438,
      0.013942477,
      -0.01432136,
      -0.0060058837,
      -0.009351079,
      -0.009020991,
      0.00795806,
      -0.009749003,
      -0.0017400738,
      0.005405946,
      -0.01259912,
      0.010896158,
      0.018581187,
      -0.0058525978,
      -0.020665837,
      -0.003913023,
      0.0013536722,
      0.004604511,
      0.005753335,
      0.013789632,
      0.0006811689,
      -0.01850118,
      -0.0070279376,
      0.006554644,
      0.038212206,
      -0.00539972,
      -0.02418888,
      -0.0074763983,
      0.013731843,
      -0.01777566,
      0.01689295,
      -0.01909121,
      -0.029075153,
      0.015156325,
      -0.0045822114,
      -0.0013384928,
      0.017183809,
      0.0045361463,
      -0.02358406,
      -0.0025331855,
      -0.013798331,
      0.011351859,
      -0.11338494,
      -0.024160272,
      -0.013354849,
      0.040397495,
      -0.01861805,
      -0.020463452,
      -0.0067992504,
      0.004432133,
      0.027918316,
      0.01013474,
      0.021254485,
      0.0012025035,
      -0.0077783256,
      0.0059038806,
      -0.0005452214,
      0.0018059531,
      0.0016043464,
      -0.0016180935,
      0.027014509,
      -0.013226088,
      0.006335968,
      0.0038031423,
      0.0014508874,
      0.0015079195,
      -0.01599677,
      0.0038905982,
      0.009172513,
      0.0020246592,
      0.006452824,
      -0.011811602,
      -0.008786223,
      -0.0098174205,
      0.011652905,
      -0.0021149635,
      0.0193258,
      -0.005865049,
      -0.030675994,
      0.02331499,
      0.0017644915,
      0.017929928,
      -0.0055103633,
      -0.005243938,
      0.02578471,
      0.013220308,
      -0.007444263,
      0.020496115,
      0.022816412,
      -0.0096933,
      0.001165154,
      0.039178666,
      -0.03602628,
      -0.026315695,
      0.00313607,
      -0.024759984,
      -0.011356034,
      0.019843228,
      0.020047104,
      -0.0019965242,
      -0.007328871,
      -0.0075362157,
      0.006820302,
      0.00034836459,
      0.020225292,
      0.0054211905,
      -0.013157072,
      -0.025595132,
      0.012353058,
      0.009278084,
      0.005205684,
      -0.020551339,
      -0.0026511042,
      -0.0006656543,
      -0.006652321,
      0.009076071,
      0.017342746,
      0.013026584,
      -0.00004345436,
      0.0122466935,
      -0.00644576,
      0.015306943,
      -0.023040282,
      -0.015156739,
      -0.037166417,
      -0.022067575,
      0.0004667888,
      -0.003042184,
      0.021854896,
      0.030564284,
      -0.007990985,
      0.0077951136,
      -0.0026300577,
      0.001001027,
      -0.02637754,
      -0.017899608,
      -0.0037074084,
      -0.010316695,
      -0.018673526,
      -0.00362186,
      -0.0052932594,
      -0.014812642,
      -0.011670402,
      0.014059618,
      0.0014361086,
      0.0012747853,
      0.026992252,
      -0.015094897,
      0.016766962,
      0.024791175,
      -0.0030139082,
      0.001406277,
      -0.008815556,
      -0.0051992876,
      0.01113408,
      -0.16526939,
      -0.0017855068,
      0.009917876,
      -0.0064607393,
      -0.0069155553,
      -0.009343956,
      -0.044872984,
      0.003256989,
      -0.004604388,
      0.006722223,
      0.0026498127,
      -0.011516293,
      -0.030116333,
      -0.009835354,
      0.0030094178,
      0.15977913,
      0.0023671568,
      0.00056221994,
      0.011953828,
      0.021636246,
      -0.023357896,
      -0.0055646175,
      -0.010763342,
      0.03290514,
      -0.009412523,
      0.008196747,
      0.005567115,
      -0.018964088,
      -0.008608149,
      0.004710532,
      0.015570597,
      -0.025949024,
      0.0023128826,
      0.0114484085,
      0.008075883,
      -0.02488626,
      0.00042713733,
      -0.012954402,
      -0.0024327454,
      0.008001595,
      0.009070361,
      -0.001775997,
      0.010319942,
      0.017496565,
      0.002418336,
      0.0025082058,
      0.00092398043,
      -0.026507182,
      -0.005950413,
      -0.021894233,
      0.0032741458,
      -0.07464396,
      0.012798514,
      -0.015312758,
      -0.03332355,
      0.02271412,
      -0.011223069,
      0.020552147,
      0.011743542,
      0.032114524,
      -0.0136686675,
      -0.004855501,
      -0.0049660895,
      0.00819501,
      0.01339418,
      0.0005323486,
      0.03515735,
      0.00986949,
      0.0221194,
      -0.0032132706,
      0.03615294,
      0.024751803,
      -0.010143329,
      0.008946092,
      -0.01922758,
      -0.012194851,
      -0.023715807,
      0.027480679,
      0.017108876,
      -0.0020640201,
      -0.0022708229,
      0.002035583,
      -0.011929856,
      -0.0064069782,
      0.02388759,
      -0.014374938,
      -0.01544309,
      0.00721354,
      -0.011362929,
      -0.0022944116,
      -0.0049095894,
      -0.0019792893,
      -0.004355741,
      0.007593188,
      0.008958093,
      0.0067834873,
      0.0029049153,
      -0.005368849,
      0.03162276,
      -0.01158207,
      0.013940776,
      -0.007435473,
      -0.004303156,
      -0.032425623,
      0.020301344,
      0.020423582,
      0.0094656125,
      0.033214528,
      -0.014873394,
      -0.0177395
    ]
  },
  {
    "id": "genai_cohort_python_01_What_is_Error_handling_vtt",
    "content": "Hey there everyone, and welcome to the fresh new section of handling exceptions in Python. Now if we compare this to the real world, when you are operating your chai shop, a lot of things can go wrong. Maybe you have spilled something, maybe some ingredient is missing, or maybe there's something wrong in the brewing process at all. There are a lot of things that can go wrong in a real world brewing shop of a T. Similarly, a lot of things can go wrong in the T, shop as well as in the code part as well. That's exactly what we want to fix. In this entire section. We want to discuss and talk about how things can go wrong when we are writing some code and how we can gracefully handle that. That handling part is the most important things will go wrong, there is no question about that. But the way how you handle it as best as possible, that's always a good idea. So let me take you on the screen and we're going to write some code and let's discuss about this exception handling in Python. All right, so let me take you onto the screen and where we are going to discuss all of the things that are happening up. So welcome to the first section of exceptional handling. And just to remember this, I'll give you a few analogies so that you can always remember. All right, so what is this kind of exception handling? When you're a part of a big chai journey, you want to sell a lot of chais, a lot of things can go wrong. Some example could be, let's just say we have a milk spill. Spill, Yeah, a Milk got spill. Or maybe a simple missing ingredient, or maybe something is wrong in the brew steps. So these are the common one that we can figure out. But there could be a lot more which can absolutely go wrong. So all of these things, nobody likes them, but they actually happen and we need to learn how we can handle them. So handling all of these incidents, being aware that these are the common mistakes that happens in my chai shop. I just want to handle them so that they don't actually crash my entire shop. I just gracefully handle them. Same thing happens when there is a problem in your code. You don't just crash the entire program, you just handle them gracefully so that the rest of the program can actually work pretty easily. I'll show you some example of that. Like what could go wrong? Usually we write our code very carefully, but no things do happen. And let me show you, by creating a new section, we are on to the 11th section. And let's call this one as exceptions and let's call this one as Basic Py. We will open up our file right here, open an integrated terminal so that we can directly run this. All right? And we'll close our AI feature as well. All right, so what can go wrong? And you might be thinking, hey, I just need an example for it. All right, here is your example. Somebody is placing orders. So here is an array of the orders. The first chai that we have is going to be masala and the second chai that we have is ginger. How conveniently we have said it as second chai, second ginger. But when you go ahead and try to simply have the print statement on orders and you try to access the second value, There we go, the very first error. We have already made it, let's go ahead and run this. So I'll just go ahead and say Python and this is going to run this. And we can see that this is list index out of range. And this is a well known error which is index error. So we found that. Can we handle that? Gratefully, yes we can. But there are some errors which are just like this. We can see index error. We have other kinds of errors as well available to us. So index error is just one of them, which usually happens when the index doesn't exist. But again there are different ways how it works. So there is another one which is known as key error. What is this key error? When a key is missing in the dictionary. So this is another kind of error. Now nobody remembers all of them. I just happen to remember a few of them. Very famous, everybody knows this. This is zero division error in the programming. We don't have a concept of infinity in the mathematical world. When we divided by zero, it tends to infinity. Doesn't really mean infinity tends to infinity. The same goes here. In the programming world we cannot actually do that. We just simply throw an error which is division. Then there is also error, which you'll see these days quite a lot, which is type error. This happens when there are incompatible type String mixed with integer. Integer mixed with string. So type error also happens. And then we have this something known as name error. Yes, this is something comes up when the variable is not even defined and you are trying to use, Does anybody remember all of them? No, nobody remembers all of them. Just happen to remember. You will also get to remember a few of them, but not all of them. Even if you don't remember any one of them, that's totally fine. Eventually just by looking at the error, you'll figure out all right, this is what the error says. And in the special line last two versions of Python, whatever the three after dot, that means that version, they have actually worked quite a lot in the errors, as well as how this error can be helpful for a developer. So they have done pretty interesting and tremendous job onto this one. So I hope you got a brief idea of how it works and how it looks like in the next video. We will further nail it down and try to go in depth about how we can actually handle these exceptions or errors. Let's go ahead and catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 What is Error handling.vtt",
      "originalPath": "genai-cohort/python/09 Chapter Subtitles/01 What is Error handling.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.013724992,
      -0.00068923313,
      0.02811932,
      -0.04286411,
      -0.012445415,
      -0.000505806,
      -0.0027532245,
      0.024126729,
      -0.015033109,
      0.011505671,
      -0.013525381,
      -0.0067868233,
      0.012463554,
      0.01892023,
      0.13622013,
      -0.0038838843,
      0.0046432596,
      -0.0005009484,
      -0.005668249,
      -0.010095389,
      0.0031326388,
      0.0063549425,
      0.008241463,
      -0.016270455,
      -0.0009262479,
      -0.012030136,
      0.0038288813,
      0.004718161,
      0.025160328,
      -0.032287493,
      -0.022043657,
      -0.00572532,
      0.010322851,
      0.018292198,
      -0.00047716202,
      0.0099558225,
      0.0047294805,
      0.021382524,
      -0.017558943,
      0.01387383,
      -0.022762438,
      0.009180021,
      -0.005515931,
      -0.02210682,
      0.007629045,
      -0.024677029,
      0.004464838,
      -0.016118368,
      -0.00061392284,
      0.010013102,
      0.008003359,
      0.002199287,
      0.0020795793,
      -0.18415558,
      -0.0024887256,
      0.0013892287,
      -0.0037810958,
      -0.0091871945,
      -0.009163259,
      -0.010260883,
      -0.029045194,
      0.028601607,
      -0.02696503,
      0.00016698588,
      -0.019129183,
      -0.028983338,
      0.031363092,
      -0.0007590269,
      0.0070297187,
      -0.013625857,
      0.022108467,
      0.019814583,
      -0.009055527,
      -0.011440676,
      -0.03192391,
      -0.027104432,
      0.00087319367,
      -0.019004889,
      -0.011956907,
      0.015773045,
      -0.008881757,
      -0.010711803,
      -0.0048794355,
      -0.011044481,
      0.02261617,
      0.009695382,
      -0.01802562,
      -0.01238415,
      -0.0047202157,
      -0.005628174,
      -0.031832676,
      0.024744513,
      0.0034133457,
      0.002983321,
      -0.013715367,
      0.002429475,
      -0.020183403,
      0.026307091,
      -0.013730159,
      -0.009277395,
      0.010912746,
      -0.022630023,
      -0.017571853,
      -0.007699037,
      -0.00021598832,
      0.0040885266,
      0.009818472,
      -0.011076549,
      -0.03101947,
      -0.00046431398,
      -0.00085939764,
      0.0055214874,
      0.005946875,
      0.022254625,
      0.011175848,
      -0.18880185,
      0.014957594,
      -0.012965316,
      -0.013492548,
      0.016119557,
      -0.009128103,
      0.0033429407,
      0.0066544525,
      0.018701332,
      -0.0073728575,
      0.0052932245,
      0.0072594485,
      0.037515018,
      -0.016176382,
      -0.007249052,
      -0.01885851,
      -0.012326146,
      -0.0063311285,
      0.0076959026,
      -0.007090088,
      0.017096844,
      -0.018280767,
      0.0033548388,
      -0.01150459,
      -0.019737978,
      -0.02472581,
      0.026984999,
      -0.016607156,
      0.019775435,
      -0.0018110713,
      -0.010763157,
      -0.025069103,
      0.010315183,
      -0.016351217,
      -0.023932202,
      0.007457258,
      -0.015541178,
      0.0061569363,
      0.020468447,
      0.03146062,
      -0.03534179,
      -0.008045964,
      -0.01023936,
      -0.0018336341,
      -0.0075718528,
      -0.00011817908,
      -0.0056670103,
      0.0077698994,
      0.012488674,
      -0.0070526144,
      -0.0069473903,
      -0.009631099,
      0.0056526223,
      0.0036577191,
      0.0026448893,
      -0.008791956,
      -0.01890356,
      0.0010923152,
      0.008554996,
      -0.016413169,
      0.01732695,
      0.022493456,
      0.003781051,
      0.016374253,
      -0.0133852055,
      0.0038654194,
      0.019743018,
      -0.0033525638,
      0.01542514,
      0.0032168487,
      0.016020004,
      -0.014426061,
      0.0070979507,
      0.007690257,
      0.012513249,
      -0.0029694382,
      -0.015695801,
      0.019241747,
      0.014215172,
      0.0006939459,
      -0.012307795,
      0.014587434,
      -0.0002661356,
      0.0020692064,
      0.024850588,
      0.018373476,
      -0.01130549,
      -0.011403369,
      -0.027264766,
      0.034150027,
      -0.006307286,
      -0.0010763388,
      -0.008733253,
      0.00021806438,
      0.014603828,
      -0.019125562,
      0.0076073892,
      0.026252871,
      0.0018852631,
      0.019169252,
      -0.0062447297,
      0.0072570182,
      0.0086296545,
      0.011589595,
      -0.008437937,
      0.015059186,
      -0.0027825611,
      -0.00034902038,
      0.0021353578,
      -0.008225406,
      -0.0056329817,
      0.0066628554,
      0.002386379,
      0.018504838,
      0.012409448,
      0.02097737,
      0.0047357567,
      -0.01585725,
      -0.0012558411,
      -0.002789121,
      0.01047063,
      -0.008588315,
      0.029020485,
      -0.005158607,
      0.016841576,
      0.004538524,
      -0.010943036,
      -0.017721638,
      0.012387096,
      0.01748385,
      -0.019660532,
      0.0028572304,
      -0.0040935534,
      -0.014108859,
      -0.02997516,
      -0.016347295,
      0.0015577638,
      0.0026546833,
      -0.02187474,
      0.0019748723,
      -0.022532796,
      -0.013226307,
      -0.016821418,
      -0.019329485,
      -0.007651145,
      -0.010922575,
      -0.019153193,
      -0.018703759,
      -0.017244855,
      0.02706716,
      -0.0049525327,
      0.02069625,
      0.02146096,
      -0.0011979098,
      0.038940348,
      0.0005295778,
      0.002877373,
      -0.004154627,
      -0.0052499548,
      -0.021397432,
      0.003861048,
      -0.10606673,
      0.004447417,
      0.00022547705,
      -0.0013540953,
      0.0116840005,
      0.025441106,
      -0.043960527,
      -0.0038491439,
      0.030091433,
      0.017057931,
      0.011376367,
      0.00040853707,
      0.027569933,
      -0.013601681,
      -0.012877839,
      -0.015006405,
      -0.009444379,
      -0.017222635,
      0.011575628,
      -0.027983693,
      -0.0062062945,
      -0.018133484,
      -0.009706385,
      -0.036624935,
      -0.0045980643,
      -0.01219781,
      -0.020805916,
      0.019317815,
      0.021287639,
      0.014735494,
      -0.002329325,
      0.037290115,
      0.013295129,
      -0.0019266546,
      -0.00599024,
      0.013430745,
      0.0066324174,
      -0.0034856568,
      -0.0044560013,
      0.0011463559,
      0.021054946,
      -0.04672632,
      0.026126863,
      0.03446717,
      0.002527109,
      0.0055646584,
      -0.01517202,
      -0.0013854487,
      -0.00933612,
      -0.010255112,
      -0.0014692383,
      0.01605961,
      0.01447792,
      -0.019905742,
      0.0011069609,
      0.026967252,
      0.0017361179,
      -0.016184783,
      0.015535531,
      0.00524445,
      -0.005144674,
      -0.009448206,
      -0.000070985945,
      -0.010793711,
      0.012051877,
      -0.001162014,
      0.008851028,
      -0.012664036,
      -0.019045787,
      -0.0020462524,
      0.0024613366,
      0.0031838326,
      0.0050957603,
      -0.023500951,
      -0.00542585,
      -0.009060416,
      -0.0024602043,
      -0.016774539,
      -0.018895295,
      0.029561743,
      -0.00053595036,
      -0.016158465,
      -0.006353905,
      0.008133648,
      0.028867764,
      -0.0053377217,
      0.0003501416,
      -0.01602097,
      0.016179789,
      -0.040298402,
      0.0041472,
      0.021326145,
      -0.033899914,
      0.008790707,
      -0.024569644,
      -0.0060889022,
      0.0027241558,
      -0.014902674,
      -0.0034683207,
      0.01573368,
      0.0015073654,
      0.00784924,
      -0.014463376,
      -0.0065009017,
      0.012313929,
      0.0037854973,
      -0.018435437,
      -0.028236786,
      -0.0025395635,
      -0.032351136,
      0.0007486747,
      -0.006721881,
      -0.021652669,
      -0.019508226,
      -0.007315507,
      -0.0011555812,
      0.016099287,
      0.009570566,
      0.0020789048,
      -0.026737237,
      0.00040775287,
      -0.018526955,
      -0.004405767,
      0.004664534,
      -0.010303874,
      -0.002352491,
      -0.021713708,
      0.009784025,
      -0.01971969,
      -0.022387203,
      -0.027728535,
      0.024529604,
      -0.022650743,
      -0.017843116,
      -0.019738412,
      -0.01520458,
      0.026443329,
      0.04155084,
      -0.002435786,
      0.020993175,
      -0.005972273,
      -0.019785663,
      0.013230932,
      0.0043563177,
      0.001587025,
      0.022582661,
      -0.011827341,
      0.008357376,
      0.0036515854,
      -0.012502531,
      -0.01905104,
      -0.021382095,
      -0.011289847,
      -0.0059973863,
      -0.019939303,
      0.013508033,
      0.007643149,
      -0.013964705,
      -0.016574094,
      -0.021313958,
      0.0026697346,
      -0.00030226802,
      -0.02854996,
      -0.01541763,
      0.026378892,
      0.025664749,
      -0.017344963,
      0.0065209097,
      -0.01638382,
      -0.01423277,
      0.0063044373,
      -0.02813075,
      -0.046116248,
      -0.003592414,
      0.014331624,
      0.004199097,
      0.029064087,
      -0.0065922523,
      0.023353204,
      0.02355358,
      0.0103414655,
      -0.0014658289,
      -0.0069115413,
      0.008648991,
      0.008825904,
      0.0017643359,
      0.019414568,
      -0.016521547,
      -0.032808717,
      0.01825304,
      0.0044395565,
      0.003718346,
      0.009240838,
      0.022999913,
      0.012263295,
      0.0119571565,
      -0.005627449,
      0.014871918,
      -0.004632612,
      0.022552479,
      -0.002561594,
      0.00053012354,
      -0.0076366644,
      -0.0049044336,
      0.0070687933,
      -0.018071493,
      -0.009526906,
      -0.015409919,
      0.011904022,
      0.010445241,
      -0.0008278271,
      0.016045181,
      -0.002626865,
      -0.00034884657,
      0.010325663,
      0.030964956,
      0.0012716798,
      -0.00038855834,
      -0.030111006,
      -0.007385892,
      0.008567222,
      -0.008247249,
      0.010776075,
      -0.017061869,
      0.017010929,
      0.00031853683,
      -0.010607053,
      0.015792372,
      -0.01653531,
      -0.0055292184,
      -0.009751036,
      -0.01065566,
      -0.022970606,
      0.00039580118,
      -0.033956204,
      -0.012442128,
      0.01195044,
      -0.0041792453,
      0.0013640838,
      0.01223681,
      -0.017893447,
      0.005599701,
      0.0063163373,
      0.0028869165,
      0.02260265,
      0.0018038123,
      0.019317161,
      0.005252356,
      -0.006322274,
      0.0042154603,
      0.007732256,
      0.027506355,
      0.013799585,
      -0.018499075,
      -0.021024946,
      0.015338819,
      -0.0037246905,
      0.0020713545,
      -0.0086144395,
      -0.011832106,
      0.009410581,
      0.016344149,
      0.006524632,
      0.005024635,
      -0.004268553,
      -0.014564631,
      -0.015029679,
      0.004554643,
      0.013425414,
      -0.1155278,
      -0.011389975,
      -0.00022594885,
      -0.009549264,
      -0.021197835,
      -0.00521594,
      0.0048213294,
      -0.008588032,
      0.0022485913,
      -0.009128475,
      0.02935514,
      -0.001095293,
      -0.007058766,
      -0.016580978,
      0.0050655925,
      -0.024913974,
      0.0062813875,
      0.011998143,
      0.026254049,
      0.0009196572,
      0.007735103,
      0.0017955819,
      0.0075036567,
      -0.022850912,
      -0.021897519,
      0.0008912546,
      0.0069721667,
      0.0040906863,
      0.006698367,
      -0.00578585,
      -0.024575923,
      0.0010412035,
      -0.018319264,
      0.003601982,
      0.018761126,
      -0.019818004,
      -0.012862286,
      0.014751857,
      0.021620145,
      -0.004326047,
      -0.01420265,
      -0.0051224283,
      0.017539123,
      0.0014944838,
      0.0035462207,
      0.03023833,
      0.039404757,
      -0.026640344,
      -0.019758226,
      0.039787646,
      -0.050553646,
      -0.029652877,
      -0.004902905,
      -0.02029472,
      -0.0107062785,
      -0.003324888,
      0.02319202,
      -0.0027036378,
      0.013980007,
      -0.03651083,
      -0.009655705,
      0.017421518,
      0.008630648,
      0.043723542,
      -0.0077396818,
      0.0048190276,
      0.037368085,
      -0.0019316269,
      -0.00019248287,
      -0.012381302,
      -0.010642112,
      0.024753852,
      -0.019912364,
      0.02256856,
      0.0027337428,
      0.003498848,
      -0.0027259937,
      -0.020404857,
      -0.005736014,
      -0.0012471003,
      -0.030610982,
      -0.015552452,
      -0.041378547,
      -0.039120354,
      0.020945145,
      0.00040695764,
      -0.0087219225,
      0.010440614,
      0.003382909,
      0.013234878,
      -0.0056478614,
      0.007564738,
      -0.010086228,
      -0.0037587788,
      -0.00021763262,
      0.009545608,
      -0.030845515,
      -0.003979765,
      -0.00083669665,
      -0.020719454,
      -0.018352047,
      0.016503125,
      0.0098331,
      0.0007947971,
      0.0023901176,
      -0.010915934,
      0.0105019845,
      0.014748323,
      -0.008731552,
      -0.00939534,
      -0.00177815,
      0.0031431455,
      -0.008847085,
      -0.15257111,
      -0.010491559,
      0.0107360445,
      0.021918654,
      0.013772464,
      -0.0007586242,
      -0.017618159,
      0.0027410714,
      0.013636822,
      -0.019210065,
      0.0043636383,
      -0.0054966826,
      -0.0034392043,
      0.00072819693,
      0.011655785,
      0.14197157,
      -0.010524041,
      -0.013307982,
      -0.02944829,
      0.008647906,
      -0.0041636773,
      -0.01634773,
      -0.019934377,
      -0.018926255,
      -0.010776267,
      0.004926169,
      -0.013084337,
      -0.023927215,
      0.007173867,
      0.0036770995,
      -0.006407653,
      -0.020813797,
      -0.0018786821,
      0.00054930645,
      0.008973497,
      -0.0040400173,
      -0.018380191,
      0.0056628683,
      -0.0068654697,
      -0.00895583,
      0.024860235,
      -0.014813898,
      0.00049003144,
      0.01226165,
      0.01018449,
      0.0052133235,
      -0.012932252,
      -0.003708859,
      -0.008866856,
      0.0020155804,
      -0.0076589193,
      -0.036625978,
      0.017826369,
      -0.0005175396,
      -0.022262983,
      0.024550166,
      0.005745507,
      0.018747406,
      0.0015540443,
      0.02249422,
      -0.0047771297,
      0.007662678,
      -0.020848056,
      -0.00046630533,
      0.016014874,
      -0.018527254,
      0.0045766905,
      0.017517239,
      0.017058488,
      -0.002479338,
      0.011547984,
      0.019400313,
      -0.0032992633,
      0.020485487,
      -0.0039629447,
      -0.011099732,
      -0.023276486,
      0.023674143,
      0.0010757613,
      0.0017911546,
      0.0025755756,
      -0.0106498245,
      -0.0066903327,
      -0.009798567,
      0.0039681303,
      0.012278416,
      -0.033815805,
      0.021060655,
      -0.0028643084,
      0.0014430584,
      0.0016562737,
      0.009316053,
      -0.011909354,
      0.019109424,
      0.00039529253,
      0.008390519,
      -0.003202488,
      0.00045034132,
      0.01402909,
      -0.012044787,
      0.005408271,
      0.0011476099,
      -0.015550254,
      -0.015775774,
      0.008881741,
      0.019279873,
      -0.00081433024,
      0.019362418,
      -0.0030841453,
      -0.02418453
    ]
  },
  {
    "id": "genai_cohort_python_02_try_except_else_and_finally_vtt",
    "content": "Next up, we want to go further in depth and learn how we can handle these errors. That would be pretty awesome, pretty fantastic, if you ask me. Let's go ahead, move on and learn the whole syntax of how we can actually work with these errors and gracefully handle them so that the program doesn't crash. Let me take you onto the screen. And here we are on the screen and let's start with this. So the first thing that we're going to do here is, just create a new file. That's always a good idea. Let's go ahead and call this one as That will be try accept py. All right, so what do we want to do here this time? Let's take a different example. Again, this can be done for the previous example as well, but let's just say we have a chimenu and this is an object or a dictionary in this case. And we have a simple masala, which is probably costing us as rupees. And we have one more, which is ginger, if I can write that, ginger, and that's a little bit expensive, so I'll just call it as rupees. And as you know, if I try to accept something known as chimenu with a key of, let's just say eli chi, which is again a spice, it will obviously give me an error. Let's see the error first. So if I just go and open this up, I will say Python Python and we get that. So again, this is a key error. We just saw that the key error also exists here. So this is the key error. The same way we can handle others error as well. Now here's the interesting syntax if you don't want your program to crash. Because if I go ahead and print up here something and then I say hello, check code. What? You will notice that if the key doesn't, we are not able to find the key, then this whole program just crashes. Nothing. Execute. This part of code never executed. But what if we know that this is a sensitive operation, maybe a database call, maybe a web request? Maybe we're trying to open a file which might not exist. So in that case you can just cut this out and open up a simple try block and just paste it inside a try block. The this simply says I'm trying to do something which is sensitive, which can cause a potential error. So I'm just wrapping this up into a safe bubble and you can just try that. And after that you can just look for accept keyword in which you can define the errors. And by the way, you can just name down your error just like as E as well. But since we know that what kind of error can happen in this case, we can just go ahead and say I'm looking for a key error. And if the key error happens, we are going to just go ahead and print a simple message that says the key that you are trying to access does not exist. All right, so pretty nice one. And let's go ahead and try to work with this. We know we have actually invoked this error very carefully, but you will get to see. So notice here, this time we are able to just get a, custom error message and we are able to see hello Chai code as well. This is, is really one of the nicest way of having this. And we can actually go ahead and work with more of this. Let's create another program and have it up there. So let's go ahead and create a new one. We'll call this one as and we're going to call this one as complex Try py. This time, instead of just creating a simple accessing of the value, we're going to go ahead and create a method altogether, which will be serve chai. And obviously this will take a, flavor. And now let's see what happens. The whole block. We are going to wrap it up in the try catch and I want to show you more interesting stuff with that. So first of all, in this we are going to go ahead and take a simple print statement that will be formatted and we'll say preparing whatever the flavor you have given me of chai with a trip triple dot because it's a, brewing process, it's taking its time. And if we go ahead and check if the flavor value that you have given me actually matches to unknown that you haven't defined me, in that case, we can actually raise our custom error. It's not always about printing the statement. Sometimes you want to throw the error, but you want to, willingly throw that error. So I'll throw an error known as value error. By the way, you can throw up any error. It's totally up to you. And I will simply say value error that says we don't know that flavor because I'm not aware of that flavor. Simply just like that. All right? And what we can do is we can still handle the exception just like this. And we're going to say value error. And let's cast this. We don't want to call it value error all the time. We'll just call this One as E. So that's a shorthand for it. Now we can call our value error as E. And in here we are going to go ahead and see simple print. We're going to take an example. Don't worry, I know this is a lot of code and here we are going to go ahead and just print the E value. All right, so far we have seen this, try catch. But there is also one more thing, that hey, if this whole thing is if the flavor is unknown, but what if the case everything all goes good. In that case we can simply run the else statement also and I can just print the value here formatted printing that says whatever the flavor chai is served. In this case, and here's the interesting part which you will see quite a lot. There is also a block known as finally. No matter try catch, try runs or the accept runs finally will always run. This is usually useful when you are trying to close the file. Once everything has happened, crashed or whatever, you want to just clean the memory or, or maybe you have a database connection, you want to just finally close it out, whatever has happened. So in that case you can just go ahead and use finally. It always works, it always prints. In our case what makes sense is come on, next customer please. So whatever the order we are getting, we actually want to have it. Let's go ahead and try to actually use this method now. So we know that we have a serve chai method and we can ask for a masala chai. And similarly we can also go ahead and pass on literal value of unknown. There we go. Let's see what happens in this case. Let's run this and we'll say Python and notice here, so we are seeing preparing masala chai. All right, that we have asked for it. So this is line number three that is getting executed. After that it says masala chai is served. All right, so we are not going in this block of code. And also definitely we are not getting any value errors or anything like that. We simply went up into the else part which is saying masala chai is served. And notice here finally always execute which says next customer please. So here we see the next customer please is being printed. Now next time when the function runs with the value of unknown this time we go up here again. So it says preparing the unknown chai. So we are executing the line number three. Then we simply see that hey, this flavor unknown. I don't know what that is. So the error that we are giving now is Raise the value error, which says, we don't know that flavor. And this is what we get. Notice here, program didn't crash. We gracefully handled it. So the error is we don't know that flavor. All right, but notice here, what happens is this whole thing and everything, nothing gets printed, nothing gets executed. So we are handling the errors nicely. But this part also doesn't execute because, hey, it doesn't execute. In that case, we have gone into the either you go into the if block or you go into the else block. But always remember this if block and this else block are not related. They are not on the same indentation. This else block is a part of this. Try catch. Yes, common syntax. And notice here, no matter what happens, the finally always gets printed out. So this is what we really want to have. We have the error, but we have gracefully handled that error. Now, you can actually handle multiple errors, and that's exactly what we're going to see in the next video. But I hope this code will take a little time to observe and to understand it. But take a time, take your moment and try to understand. This is hardly lines of code, but this is a very common piece of code that you're going to see quite a lot in your development journey. That is it for this video. Let's go ahead and catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 try except else and finally.vtt",
      "originalPath": "genai-cohort/python/09 Chapter Subtitles/02 try except else and finally.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.016794983,
      -0.0005029116,
      0.025256421,
      -0.043997146,
      -0.014215654,
      -0.010578639,
      -0.0030020338,
      0.021045972,
      -0.008441891,
      -0.005123944,
      -0.0128456205,
      -0.013145851,
      0.017119024,
      0.024728265,
      0.13477232,
      -0.012238626,
      -0.008843231,
      0.0102589,
      -0.0048189363,
      -0.02140738,
      -0.007473616,
      -0.0031155152,
      0.008783146,
      -0.013374611,
      -0.004671949,
      -0.008566226,
      0.013146125,
      0.016493434,
      0.020650676,
      -0.019233191,
      -0.014696511,
      -0.0029607192,
      0.022536682,
      0.022644911,
      0.0013351977,
      0.008960707,
      0.00030950157,
      0.0078033875,
      -0.018068623,
      0.0015102061,
      -0.030207869,
      0.008725844,
      -0.00539264,
      -0.012734479,
      0.021949688,
      -0.02244153,
      -0.026390601,
      -0.013997941,
      -0.010034534,
      0.018774055,
      0.010479039,
      -0.008919795,
      -0.00329274,
      -0.18267491,
      0.003079455,
      -0.008160032,
      -0.0055596204,
      -0.013989577,
      0.009418346,
      0.0076308437,
      -0.02919867,
      0.031765066,
      -0.034469545,
      -0.0048308163,
      -0.0099082375,
      -0.018109886,
      0.024633499,
      -0.006531193,
      -0.0013517299,
      -0.008344305,
      0.036619082,
      0.025976231,
      -0.026780091,
      -0.023467788,
      -0.027019486,
      -0.027347364,
      0.008945787,
      -0.03357187,
      -0.01447485,
      0.007894098,
      0.013023966,
      -0.018503966,
      0.00833026,
      0.00084774836,
      0.024016147,
      0.0043906346,
      -0.010629614,
      -0.011301724,
      0.0026568233,
      -0.0049683717,
      -0.0064407866,
      0.011467276,
      -0.006332315,
      -0.011956615,
      -0.005176514,
      -0.008020955,
      -0.0058095725,
      0.0019442869,
      -0.024037724,
      0.005547616,
      -0.0016809049,
      -0.021246688,
      -0.012296388,
      -0.011328753,
      0.012396467,
      -0.0060560447,
      0.0037720755,
      -0.0051308307,
      -0.013028726,
      0.01165609,
      0.0009526033,
      -0.003550663,
      -0.00340859,
      0.009369795,
      0.02070568,
      -0.179171,
      0.008595779,
      -0.00082100404,
      -0.009725743,
      0.018842539,
      -0.002131069,
      -0.0019784805,
      0.016511979,
      0.009718726,
      -0.023046741,
      0.0088181775,
      0.006996096,
      0.019237425,
      -0.0069705597,
      -0.0026815985,
      -0.031463195,
      -0.027633056,
      0.0021971753,
      0.003215888,
      -0.009100582,
      0.0092813615,
      -0.014830985,
      0.005451522,
      -0.013354372,
      -0.02825985,
      -0.005218091,
      0.026046257,
      -0.010255218,
      0.03080356,
      -0.0045160847,
      -0.012185034,
      -0.0148319425,
      -0.005532916,
      -0.0157487,
      -0.021867339,
      0.017812947,
      -0.012299895,
      0.0134254815,
      0.012740925,
      0.03398112,
      -0.027751168,
      -0.0057007647,
      -0.008573883,
      0.006859193,
      -0.0055414047,
      -0.004721445,
      0.0015988998,
      0.0074175172,
      0.009724941,
      0.009573044,
      -0.003967566,
      -0.008276436,
      -0.003269847,
      0.011775918,
      -0.003130877,
      -0.014441347,
      -0.0069585266,
      0.010482056,
      0.0072268033,
      -0.018547302,
      -0.0006631912,
      0.0142019205,
      -0.0068876506,
      0.00624247,
      -0.009758677,
      0.0061039063,
      0.020041449,
      -0.0008984954,
      0.005192148,
      -0.0028005834,
      0.01654122,
      -0.010329585,
      0.0019500207,
      0.009627875,
      0.008380009,
      -0.0026071079,
      -0.0013210314,
      0.004522101,
      0.013189129,
      0.0047592325,
      -0.020044202,
      0.0048549455,
      0.01650732,
      0.0063509033,
      0.0104612885,
      0.035656847,
      -0.014397606,
      -0.02611781,
      -0.0074716406,
      0.029035352,
      -0.015497902,
      0.007251604,
      -0.025152938,
      0.006217336,
      0.007245388,
      -0.022764968,
      -0.0051376456,
      0.024865061,
      0.007110386,
      0.0032194115,
      -0.014090502,
      0.01053951,
      0.0034233907,
      -0.0054494645,
      -0.013145636,
      0.008603954,
      0.0011286169,
      -0.0041988343,
      0.007926574,
      -0.0084035415,
      -0.01294526,
      0.0034213993,
      0.00587226,
      0.009423816,
      0.0067837667,
      0.03649282,
      0.008035354,
      -0.020967398,
      0.010689222,
      0.0114444215,
      -0.0030139184,
      -0.0070853974,
      0.029461043,
      0.013219214,
      0.014064404,
      0.008780653,
      -0.00013478064,
      -0.02321768,
      0.0023784721,
      0.010967197,
      -0.008184321,
      0.0053855563,
      -0.0021602479,
      -0.012367554,
      -0.027983595,
      -0.018464886,
      -0.0077234805,
      0.01127423,
      -0.03221049,
      0.015223744,
      -0.041205715,
      -0.016345097,
      -0.013260993,
      -0.016994556,
      0.00670347,
      -0.010994107,
      -0.017696748,
      -0.009674433,
      -0.00586993,
      0.009225555,
      -0.011246745,
      0.02292038,
      0.020548677,
      -0.006394283,
      0.016267393,
      0.008976037,
      0.020859234,
      -0.015442009,
      -0.0047458587,
      -0.035913385,
      0.007792699,
      -0.104808,
      0.020823631,
      -0.006794751,
      -0.010916931,
      0.02075686,
      0.012073441,
      -0.033836044,
      0.004668403,
      0.0072500533,
      0.005340177,
      0.016322793,
      -0.0087674735,
      0.016346898,
      -0.028477253,
      -0.014228311,
      -0.013863503,
      0.008370746,
      -0.01295885,
      0.026876101,
      -0.019561138,
      -0.015544753,
      -0.03326316,
      -0.029464448,
      -0.024450475,
      0.0050879186,
      0.0032259617,
      -0.011850115,
      0.014515113,
      0.021763327,
      0.00020280622,
      -0.018643819,
      0.018828021,
      -0.003921803,
      -0.015380261,
      0.008931181,
      0.006434556,
      0.020509895,
      -0.016770648,
      0.0029818546,
      -0.017542923,
      0.01259151,
      -0.00946224,
      0.006157735,
      0.03753424,
      -0.0061313612,
      0.023904897,
      -0.0066797594,
      -0.0027291786,
      0.0037970997,
      -0.026034944,
      -0.0041649896,
      0.013173592,
      0.019734927,
      -0.0040265014,
      -0.008948384,
      0.025038345,
      0.01377365,
      -0.016863987,
      -0.013312477,
      -0.006568837,
      0.0014934049,
      0.004419242,
      0.014252982,
      -0.006823025,
      0.006916017,
      0.009044661,
      0.014981025,
      -0.023204423,
      -0.026479278,
      -0.0018008936,
      0.0032441036,
      0.0051035653,
      -0.008638883,
      -0.03366591,
      -0.002940031,
      0.01614507,
      0.016565843,
      -0.025049344,
      -0.014315836,
      0.04060949,
      0.0040571997,
      -0.0056142607,
      -0.016955368,
      0.012363637,
      0.0025849254,
      0.01525214,
      -0.0011582688,
      -0.0116485795,
      0.022729347,
      -0.03191971,
      0.0066865743,
      0.02402461,
      -0.006497763,
      0.0092622535,
      -0.014646502,
      0.005355182,
      0.004816544,
      -0.019489331,
      0.0077996035,
      0.020096408,
      -0.00048226156,
      0.01505167,
      -0.018570641,
      -0.00042752284,
      0.0011805597,
      -0.0006027954,
      -0.033924203,
      -0.029579552,
      -0.0032075653,
      -0.02888319,
      -0.008041274,
      -0.017993094,
      -0.020295125,
      -0.0076527717,
      -0.021019869,
      -0.0066666733,
      0.009412732,
      0.01646379,
      0.0041704415,
      -0.015544181,
      -0.0028612209,
      0.0015001313,
      -0.0038576904,
      0.015906233,
      -0.017584914,
      0.0052825464,
      -0.01919343,
      0.020812333,
      -0.014205258,
      -0.013239526,
      -0.016981527,
      0.024978878,
      -0.018592695,
      -0.033842817,
      -0.011193816,
      -0.008477501,
      0.027168712,
      0.022609932,
      0.009158579,
      0.0016532672,
      0.009599551,
      -0.0015123578,
      -0.0036481286,
      0.012383172,
      0.00456262,
      0.008416162,
      -0.0036899939,
      0.019925661,
      -0.005875566,
      -0.015769705,
      -0.014192739,
      -0.017992051,
      -0.026726773,
      0.0048704557,
      0.0015821581,
      0.008823637,
      0.0034767683,
      -0.023709225,
      -0.008524871,
      -0.03706551,
      0.0070670606,
      0.020256804,
      -0.02645609,
      -0.007748661,
      0.022124287,
      0.0047986447,
      -0.012766131,
      0.008390867,
      0.00026537437,
      -0.008572023,
      0.003832558,
      -0.015880268,
      -0.027055904,
      -0.005038015,
      0.01958205,
      -0.0018465765,
      0.033532165,
      -0.0038358236,
      0.04099527,
      0.020852141,
      0.004336618,
      -0.0054230946,
      -0.0041834493,
      -0.0062142657,
      -0.0012222148,
      0.0077600763,
      0.031172829,
      -0.005386849,
      -0.033730436,
      0.011784665,
      -0.0008206074,
      -0.0070050335,
      0.017802393,
      0.0077447942,
      0.012154534,
      0.02677888,
      0.008338019,
      0.005194672,
      0.0035587675,
      0.0221956,
      -0.00024276639,
      -0.011854975,
      -0.02214133,
      0.0022416026,
      0.026298111,
      -0.01155376,
      0.0027419778,
      -0.003947558,
      -0.00086925627,
      0.014258086,
      -0.008209777,
      0.01773724,
      -0.000103251296,
      -0.0011023416,
      0.020615246,
      0.017579272,
      -0.018657595,
      0.009839496,
      -0.03558242,
      0.002829865,
      0.0018317911,
      -0.0045881113,
      0.012006702,
      -0.0064606327,
      0.018485984,
      0.0029704066,
      -0.0048080604,
      0.0118594,
      -0.008811845,
      0.00034966858,
      0.00035158396,
      -0.013501538,
      -0.020353936,
      -0.00056336896,
      -0.030127581,
      -0.0020040134,
      0.010391199,
      0.002177657,
      -0.012290285,
      0.0070554977,
      -0.0107089635,
      0.00037802884,
      -0.011042082,
      -0.0008398597,
      0.016485158,
      -0.012813985,
      0.013880651,
      0.0073369755,
      -0.018929629,
      0.008705287,
      -0.0018105356,
      0.034592055,
      0.012465438,
      0.004170619,
      -0.019986445,
      0.03171317,
      0.000980468,
      0.009869652,
      -0.015517289,
      -0.005112253,
      0.0009870222,
      -0.0034891425,
      0.0050160433,
      0.008076344,
      -0.0072885803,
      -0.02373576,
      -0.005950491,
      0.008162994,
      0.004995579,
      -0.11912106,
      -0.0015989968,
      -0.0072184918,
      -0.0002486452,
      -0.0067579653,
      -0.009979633,
      -0.01084399,
      -0.022119517,
      0.006814657,
      -0.0068795765,
      0.02353037,
      0.025885431,
      -0.0039924653,
      -0.013552301,
      -0.0050135083,
      -0.023470461,
      0.014823878,
      0.02394171,
      0.03994109,
      -0.007689101,
      0.002647547,
      -0.010125792,
      0.010147005,
      -0.013136358,
      -0.009509163,
      -0.024451254,
      -0.006379588,
      -0.00427363,
      0.007624359,
      -0.009701524,
      -0.023668319,
      -0.00072208117,
      -0.00995864,
      0.0021874222,
      0.030204039,
      -0.019540163,
      -0.014438924,
      0.019622076,
      0.009237485,
      -0.0038470083,
      -0.009847869,
      0.0034592978,
      0.039235868,
      0.015936615,
      -0.012573676,
      0.017774485,
      0.023048673,
      -0.029675081,
      -0.025243742,
      0.032497067,
      -0.03589927,
      -0.04710137,
      -0.023587815,
      0.000057050205,
      -0.00562573,
      0.007899877,
      0.008122458,
      0.002608492,
      0.009370167,
      -0.025131736,
      0.0002853653,
      0.0065082563,
      -0.0051597115,
      0.04947337,
      -0.0008275453,
      0.011864354,
      0.026776047,
      0.013721027,
      0.013071154,
      -0.0024302043,
      -0.008987279,
      0.0151626915,
      -0.02290229,
      0.025848234,
      0.021019934,
      0.004670561,
      0.0046631787,
      -0.010490453,
      -0.0029937152,
      0.00044818473,
      -0.040026024,
      -0.032142814,
      -0.044280127,
      -0.034513753,
      0.014048622,
      0.0006453761,
      -0.008112046,
      0.018060878,
      0.00041260992,
      0.007898948,
      0.0072051133,
      0.0033573245,
      0.0041107563,
      -0.007900117,
      -0.0009842683,
      -0.00766778,
      -0.031197296,
      -0.009509022,
      0.00013944197,
      -0.03410146,
      -0.012325434,
      0.016922498,
      0.0053513213,
      -0.010109375,
      -0.007698217,
      -0.010028123,
      0.010299753,
      0.01314175,
      -0.011822886,
      -0.002038903,
      0.0061138887,
      0.005347126,
      -0.0005615261,
      -0.15669738,
      0.00026085015,
      0.0015817136,
      -0.0014732679,
      0.0118447775,
      -0.014687105,
      -0.0118809035,
      -0.0072660614,
      0.009080868,
      -0.025861155,
      0.009812841,
      0.002551967,
      -0.014393487,
      0.016732294,
      0.014730744,
      0.1312516,
      -0.01336893,
      -0.002695577,
      -0.023400454,
      -0.004650065,
      0.0026666715,
      -0.024787055,
      -0.011008449,
      0.0035891624,
      -0.00812423,
      -0.007839682,
      -0.006693214,
      -0.008842995,
      0.0015127962,
      -0.0001651403,
      -0.031253304,
      -0.013618097,
      0.007266575,
      0.024863992,
      0.0050178673,
      -0.011421178,
      -0.005864304,
      0.005921171,
      0.0014448658,
      -0.0060420753,
      0.009688323,
      -0.0045303097,
      -0.004275626,
      -0.011660731,
      0.0060233716,
      0.0033246782,
      -0.00360017,
      -0.020297343,
      -0.0073476103,
      -0.018505536,
      -0.01650474,
      -0.04128788,
      0.014080906,
      -0.010808291,
      -0.015456205,
      0.035175804,
      0.0072508096,
      0.028838376,
      0.006710699,
      0.0073678764,
      -0.0010527346,
      0.005109563,
      -0.005549143,
      -0.0057850154,
      0.0018018609,
      -0.025186868,
      -0.0074808323,
      0.008855613,
      0.02496648,
      -0.0056307944,
      0.0169161,
      0.023180401,
      -0.012275457,
      0.043176327,
      -0.001355332,
      0.0018190789,
      -0.01727964,
      0.023392484,
      0.006555384,
      -0.0030316126,
      0.006832051,
      -0.0039673736,
      -0.012677368,
      -0.01689471,
      0.016661257,
      0.017416839,
      -0.021396853,
      0.011617413,
      0.0031409722,
      0.0044976845,
      0.0129082585,
      -0.0042576347,
      -0.01782662,
      0.023030968,
      -0.000525003,
      0.0051140795,
      0.0026048764,
      -0.0032907801,
      0.038091347,
      -0.004055784,
      0.0040972685,
      -0.00071672193,
      0.0049952455,
      -0.009754385,
      0.011784637,
      0.009062012,
      -0.010705193,
      0.018361108,
      -0.002137436,
      -0.016747735
    ]
  },
  {
    "id": "genai_cohort_python_03_catching_multiple_exceptions_vtt",
    "content": "We can have multiple exception at the exactly same time. And in this video we are going to learn exactly how to handle multiple exceptions at the same time. And for this we are going to write a very interesting piece of code. And this will help you to prepare for the Python world as well, because such code exists a lot in Python and I also, to be honest, enjoy this quite a lot. So let's close all of this and create a new one. We'll call this one as and this will be multiplexion. Py, of course. And let's go ahead and define a, process order. Process order. So what do we do in this one? We only serve masala chai. And somebody needs to give me an order like what T you want and how much you want to be. Like you want three cups, four cups. So masala chai only. You need to give me pass on a key of masala only and then a number. It can be 2, 3, but it should be number. It should not be tea W, O. It should be a number. Exactly. So for this we expect that you will provide me the item and the quantity. Now, here's a very interesting piece of code that I'll write. First of all, I'll wrap it up with a Try catch, or try, except in this case, again, as I said, try catch is such a common word that I've studied so much of it in Java, in Swift, in TypeScript and JavaScript that I call it as Try catch. But when I write it in Python it is try, except always. So please grant me that much liberty in here. Now, how we can do that? We want to calculate first of all price, because price and the cost for it will calculate that. So how we can grab the price of it. Now, here's an interesting piece of code. Notice here, I'm putting up a key. The key is going to be masala and the value of it is going to be Interesting. And then we are going to go ahead and simply, get the item of it. Now, what is this code? How is it even going on? Just bear with me, I'll explain this, although it's very easy. And then I can go ahead and simply take this price and multiply it by quantity. And then we can simply go ahead and print, print the total. Let's print the formatted string which says total cost is, and then go ahead and have the cost. All right, Those who are wondering, hey, how does this actually work? Don't worry, I'll walk you through with that part as well. So let's Just say we get a simple key error. In this case, somebody has mentioned a key error. Then I can just print this like this. Let's use a formatted string. We don't need formatted string. We can just go with that. We can say, sorry, that chai is not on menu. All right, one exception. Can we raise another exception? You can actually except. And this time we want to have a simple type error and we can again say print. And then we can say quantity must be in number, number. There we go. So what's going on? How is it even working? So the way how this code is going to be used will actually make it much more clear for you that what we are actually doing. Let's just say I go ahead and process an order. First time I go ahead and ask for, let's just say I want a T of ginger because I love ginger T and I provide you a value of And the second time I go ahead and ask you a value in this format with of course the string. But instead of the ginger I go ahead and say masala. Okay, what's going on? Let me help you to understand this. Now the moment for the first time you simply say, process the order. We simply pass on item value as ginger. This goes up here and we have the key and value. So for this dictionary we are looking forward for an item. So notice here, this is the item we are looking up for. So if you try to extract an item from, from a dictionary based on the key value that you are providing here, so item will be eventually replaced with this ginger. So this will just be gone like this. And obviously this is not masala. So this will never actually execute. And immediately the price is not going to be found. Nothing will go inside the price. So you raise an exception which is key error. Hey, this key doesn't exist. So that's why we have raised this error. Key error. And then in the second part, and by the way, this is pretty easy, once you got the value of here, then quantity, you get the quantity of 2, you multiply that, that's okay, that's no problem. That's a super easy code to learn and figure out. It's just a multiplication. Now in the next case what happens is this masala. So you copy this masala inside this item. This item is gone and the masala goes up there. So this time you want to extract a key of masala. And yes, the only key in our dictionary exists is masala. So final value that you get is going to be So price gets a value of and cost. The cost will try to get the value quantity next. And the quantity is So Python doesn't know how to multiply with 2, which is literally and it will raise the type error. That quantity must be in the number. So this is a very, very interesting piece of code that we have written and I hope now you see how generic we have written. But it's a very smart code that we have written. Let's go ahead and print it out to see what we have actually done that will help you to understand it better. So Python There we go. So notice here. Oh my. Bad. So this one needs to be fixed. Quantity must be in the number. We'll fix that. So this one is saying total cost is to Why that is because of a concept known as operator overloading. So this time you say masala, this gets you and when you multiply string with a you actually go ahead and get this whole thing up here just like that. So we should probably provide more of the caution here. Because this time it was able to multiply with whatever the value you are providing, which is Shouldn't be working this way. But you get the idea that even the smartest of the code that we are writing can have this kind of error. So in that case we have to actually convert this into integer first or a number. This also should be converted into number and then only the cost should be calculated. A further if else wouldn't harm that if the cost is actually in the number. And that's how the real world software is different from tutorials that, yeah, we do a lot of checking in that, but you got this idea and you also learned a concept about operator overloading with these. So many tools. This was unintentional, but it happened. And that's the beauty of programming. No matter how much you prepare, no matter how much you actually enjoy, the real fun is actually the raw coding where things happen and you explain them. Why did it happen? And what can be done to solve this. That's the fun part. Let's go ahead and catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 catching multiple exceptions.vtt",
      "originalPath": "genai-cohort/python/09 Chapter Subtitles/03 catching multiple exceptions.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0012398598,
      -0.007683848,
      0.03816961,
      -0.0568033,
      0.003347326,
      -0.009617836,
      0.0037021497,
      0.019817632,
      -0.01496635,
      -0.00018466348,
      -0.011200643,
      0.0039564827,
      0.011187907,
      0.007938121,
      0.13471241,
      0.0104376525,
      0.008931519,
      -0.0038818838,
      -0.012610615,
      -0.00286105,
      -0.008713643,
      0.011417074,
      0.013017533,
      -0.012573034,
      0.00088732515,
      -0.0028606644,
      0.016407039,
      0.014169274,
      0.023556987,
      -0.014781481,
      -0.005467783,
      -0.0046233116,
      0.0034008725,
      0.025928937,
      -0.00003196055,
      -0.0066993674,
      0.001428078,
      0.007559346,
      -0.014109597,
      0.01939429,
      -0.009888232,
      0.010247064,
      -0.014784235,
      -0.005858667,
      0.002138859,
      -0.019111875,
      -0.02322535,
      -0.029400853,
      0.0002819333,
      0.011714329,
      0.008517995,
      -0.009484006,
      -0.0019601034,
      -0.17775647,
      0.010203987,
      0.006167394,
      0.006214177,
      -0.022980396,
      0.026828798,
      0.00551709,
      -0.022197327,
      0.045986786,
      -0.036223155,
      0.0035370148,
      -0.0029445672,
      -0.014699596,
      0.02080871,
      0.0015797456,
      0.015047262,
      -0.017006688,
      0.04128669,
      0.021806607,
      -0.022032665,
      -0.016400626,
      -0.022395236,
      -0.026725892,
      0.014920628,
      -0.017027885,
      -0.014590288,
      0.016687132,
      0.016968332,
      -0.014974595,
      -0.00013540222,
      0.0036334763,
      0.006857777,
      0.004135628,
      -0.009486936,
      -0.014764034,
      -0.0016439785,
      0.006644002,
      -0.023529418,
      -0.0050032856,
      0.011707406,
      -0.0051553817,
      -0.018314859,
      -0.0012168052,
      -0.005142284,
      0.015804848,
      -0.02081088,
      -0.009460005,
      0.0071483683,
      -0.025665814,
      -0.014352186,
      -0.007716917,
      -0.0037786732,
      -0.011374055,
      -0.0071621765,
      0.0033685553,
      -0.0057507595,
      0.00031216338,
      -0.0009836247,
      -0.008228266,
      0.01622959,
      0.021140635,
      0.008252422,
      -0.17714767,
      0.016750848,
      -0.0066828006,
      -0.019578004,
      -0.0017996465,
      -0.015201982,
      0.002641189,
      0.006585256,
      0.018476907,
      -0.020762341,
      -0.0033542365,
      -0.00045744464,
      0.039058726,
      -0.0012001914,
      0.0042854785,
      -0.013455867,
      -0.022095555,
      -0.004844276,
      0.014878338,
      0.0016689149,
      0.023873618,
      -0.012143425,
      0.0048042824,
      -0.016691728,
      -0.008795034,
      -0.023443278,
      0.010615307,
      -0.020192273,
      0.028452827,
      0.0015618658,
      -0.0152888335,
      -0.021821454,
      0.024204334,
      -0.02141014,
      -0.0322109,
      0.017332384,
      -0.023932584,
      0.008330784,
      0.015291254,
      0.040681828,
      -0.04577065,
      -0.007990065,
      0.008013537,
      0.000851389,
      -0.0007616746,
      0.0024476803,
      0.0001176416,
      0.006196926,
      0.0024604148,
      0.0021855482,
      -0.008157978,
      -0.018499622,
      -0.004221559,
      0.011246917,
      -0.0016957471,
      -0.008113882,
      -0.015106713,
      -0.0010884756,
      0.0051449626,
      -0.021073373,
      0.00024281186,
      0.012311111,
      -0.0066612707,
      0.01987522,
      -0.017267644,
      0.019831536,
      0.012600533,
      0.012109363,
      -0.001465494,
      -0.00892855,
      0.0121552935,
      -0.0038558105,
      -0.00004288177,
      0.015817635,
      0.0064992295,
      -0.000027545597,
      -0.017093433,
      0.0051134774,
      0.0012400204,
      0.019130275,
      -0.019352822,
      0.006286645,
      0.012395005,
      -0.0010306376,
      0.004610067,
      0.031987786,
      -0.027140293,
      -0.018125737,
      -0.01396731,
      0.020260608,
      -0.0010490468,
      0.020612681,
      -0.010847252,
      0.018408291,
      0.015333764,
      -0.022699283,
      0.00040799388,
      0.016272977,
      0.012003438,
      -0.0025677653,
      -0.0010334958,
      0.0034090711,
      -0.010636078,
      0.0109486645,
      -0.007941451,
      0.0042322334,
      -0.0021262506,
      0.01480652,
      0.027079841,
      0.0014829511,
      -0.017714156,
      -0.0024830406,
      0.013127102,
      0.006068261,
      -0.0022060235,
      0.04479765,
      0.01983464,
      -0.014608793,
      -0.0117995655,
      0.011043392,
      0.0019681826,
      0.002366568,
      0.0378477,
      -0.00019710253,
      0.023958916,
      0.00574673,
      0.0116850035,
      -0.014794865,
      -0.0047934353,
      0.008506962,
      -0.0123159485,
      -0.008050975,
      -0.013002908,
      -0.0033922151,
      -0.019242313,
      -0.01987868,
      -0.0014944719,
      0.009780963,
      -0.02555265,
      0.009524875,
      -0.033783264,
      0.0017666323,
      -0.012772528,
      -0.013747715,
      -0.0016669532,
      -0.014401401,
      -0.018479282,
      -0.0025917746,
      -0.024532454,
      0.027196888,
      -0.018816575,
      0.0016836517,
      0.029148608,
      -0.0052365875,
      0.021910975,
      -0.0029999157,
      0.010110614,
      -0.014210524,
      -0.008970214,
      -0.013349303,
      -0.00021290258,
      -0.106522694,
      0.016204813,
      -0.009619009,
      -0.014208991,
      0.021025863,
      0.009239167,
      -0.02657596,
      0.01484708,
      0.008282224,
      0.022086978,
      0.0058395653,
      -0.005990126,
      0.026639763,
      -0.034179855,
      -0.016035488,
      -0.0076783677,
      -0.018031582,
      -0.016901536,
      0.027937245,
      -0.0062632584,
      -0.001905451,
      -0.017756786,
      -0.01281466,
      -0.00075414486,
      0.0020321778,
      0.005698755,
      -0.008580156,
      0.017633634,
      -0.00087040727,
      0.0033218255,
      -0.0017908729,
      0.021857802,
      0.0029669108,
      -0.010609966,
      -0.0007272256,
      0.004065884,
      0.017931305,
      -0.012843289,
      0.016623309,
      0.00061588775,
      0.020450637,
      -0.017057577,
      0.019401014,
      0.05069648,
      -0.0073505775,
      0.0074065425,
      -0.006227646,
      0.0053794296,
      -0.0004868384,
      -0.0032960256,
      -0.015008363,
      0.007636769,
      0.009408047,
      -0.007672637,
      -0.01430193,
      0.019824555,
      0.013802338,
      -0.013204577,
      0.0002693229,
      0.0087881135,
      0.000931076,
      -0.005907941,
      0.006640157,
      -0.0075540156,
      0.011054423,
      0.007845836,
      0.014616266,
      -0.02242378,
      -0.03659695,
      -0.0037311846,
      0.01280268,
      0.010649704,
      -0.009081305,
      -0.027485402,
      0.0018507042,
      0.008899769,
      0.016495302,
      -0.019112209,
      -0.0081724785,
      0.04692632,
      0.016743587,
      -0.0066871014,
      0.0011989544,
      0.010487835,
      0.00570583,
      -0.0075193555,
      0.01021247,
      -0.003685205,
      -0.0001038139,
      -0.018545872,
      0.014558462,
      0.005478211,
      -0.0015546884,
      0.013432969,
      -0.027876439,
      0.0045006187,
      -0.001124439,
      -0.008128985,
      -0.012411702,
      0.017073017,
      -0.011075112,
      -0.0058922484,
      -0.018723331,
      0.0005316124,
      0.008267776,
      -0.00609551,
      -0.028302215,
      -0.021291414,
      -0.010344852,
      -0.03575184,
      -0.002670167,
      0.012209064,
      -0.025971904,
      0.008029474,
      -0.020164063,
      0.019755526,
      0.008523164,
      0.018535653,
      0.020745842,
      -0.023578398,
      -0.013842521,
      -0.0143120065,
      0.020152796,
      0.012131341,
      -0.006062068,
      0.014036467,
      -0.022682857,
      0.0031178466,
      -0.013570304,
      -0.02144671,
      -0.03743176,
      0.016556047,
      -0.027784029,
      -0.009456918,
      -0.018663786,
      -0.010087059,
      0.021518907,
      0.039372202,
      0.0054538967,
      0.0034195497,
      0.0026298463,
      -0.002726899,
      -0.010140749,
      0.015187417,
      0.008211244,
      0.015699469,
      -0.0013953588,
      0.008337032,
      -0.005356861,
      -0.019525878,
      -0.028262585,
      -0.03273551,
      -0.017854046,
      -0.0032073925,
      -0.0093968585,
      0.008330457,
      0.0047179298,
      -0.007709206,
      -0.030908909,
      -0.041043643,
      -0.00041318397,
      -0.0011471644,
      -0.028620848,
      -0.0014312557,
      0.014753556,
      0.019500999,
      -0.0014333803,
      0.0030531124,
      -0.015843712,
      -0.02897577,
      -0.0004975404,
      -0.018827211,
      -0.022641798,
      -0.010789159,
      0.01448645,
      0.007862184,
      0.016366467,
      -0.010144733,
      0.022833733,
      0.016529743,
      0.019293716,
      -0.009741247,
      -0.009791903,
      0.013998869,
      0.010347177,
      0.00781532,
      -0.0011430562,
      0.019153453,
      -0.038617454,
      0.0019936173,
      0.0002946915,
      0.0031979468,
      0.018758783,
      0.01965654,
      -0.0020147695,
      0.017833078,
      0.0018000633,
      0.006064361,
      -0.0027425198,
      0.014752075,
      0.0030455764,
      -0.016787523,
      -0.01419742,
      0.000017644757,
      0.0033377812,
      -0.015876729,
      -0.0057183737,
      -0.016192965,
      0.0034563069,
      0.022207793,
      -0.010944568,
      0.014421007,
      -0.0034805152,
      -0.008784282,
      0.020890648,
      0.03069391,
      -0.023010686,
      0.0021016656,
      -0.0418246,
      -0.0076289806,
      0.009903565,
      -0.01233044,
      0.015014552,
      -0.006409163,
      0.022762263,
      0.007823515,
      -0.005285654,
      0.0098168645,
      0.005312333,
      -0.0056271376,
      -0.01585616,
      -0.0016875897,
      -0.017038777,
      0.013780192,
      -0.029551418,
      -0.0059377057,
      0.008754069,
      0.005193005,
      -0.000009958824,
      0.02054619,
      -0.014456434,
      -0.008155395,
      -0.02149155,
      0.005964065,
      0.0122891525,
      -0.023114959,
      0.021368178,
      0.0071867704,
      -0.0031721524,
      0.006665012,
      0.0045933193,
      0.019545265,
      0.0074591693,
      -0.011240913,
      -0.028306125,
      0.04145081,
      -0.0061313,
      -0.0038670977,
      0.016447807,
      -0.0012931589,
      0.029182069,
      0.03142452,
      0.012355156,
      -0.0045828456,
      0.012794813,
      -0.018548338,
      -0.008402003,
      -0.0057104873,
      -0.007850611,
      -0.11633219,
      -0.0064128563,
      -0.011011191,
      -0.010438871,
      -0.004321637,
      -0.0191359,
      -0.015884655,
      -0.019992007,
      0.0038668741,
      -0.012168063,
      0.021042457,
      0.017248027,
      -0.0078041274,
      -0.016599176,
      0.005775577,
      -0.020130739,
      0.02429865,
      0.005809279,
      0.022005219,
      0.011064484,
      -0.008683135,
      0.0051090633,
      0.0051812814,
      -0.012362857,
      -0.020939233,
      -0.010312715,
      0.004272134,
      0.0026084022,
      -0.00079084764,
      -0.0038059182,
      -0.033013027,
      0.0059875958,
      -0.009961214,
      0.011657874,
      0.014613272,
      -0.026044128,
      -0.016042031,
      0.028959373,
      0.020278515,
      0.004234934,
      -0.0027196151,
      -0.0058352672,
      0.03154474,
      0.018050352,
      -0.009436369,
      0.019882912,
      0.03371429,
      -0.0133839315,
      -0.011948478,
      0.021821383,
      -0.027440814,
      -0.028988695,
      -0.012243209,
      -0.0025920405,
      -0.010843615,
      -0.0013755918,
      0.015553707,
      -0.005233442,
      0.005718958,
      -0.025230458,
      -0.0042593107,
      0.008735863,
      0.0022333101,
      0.030781826,
      0.004182007,
      0.0014463575,
      0.029068664,
      0.002794261,
      0.005698786,
      -0.000101439706,
      -0.010052669,
      0.00035824635,
      -0.012604284,
      0.0132199805,
      0.010078348,
      -0.001287863,
      0.00015334318,
      -0.0032535365,
      0.0027028515,
      0.002432107,
      -0.041263107,
      -0.009026128,
      -0.053299125,
      -0.032903682,
      0.009642848,
      -0.011990794,
      0.00048914814,
      0.019651532,
      0.0049146176,
      0.014447879,
      0.006370439,
      -0.00032603266,
      -0.010809471,
      0.004979017,
      0.018686878,
      -0.024617776,
      -0.0229264,
      -0.00014716225,
      -0.008417422,
      -0.02230298,
      -0.007905862,
      -0.000992509,
      -0.008146884,
      -0.009902689,
      -0.002634289,
      -0.017047945,
      -0.003594995,
      0.011353937,
      -0.022480221,
      -0.010215997,
      0.0069163833,
      0.017847233,
      0.016336113,
      -0.15852353,
      -0.021715079,
      -0.016544282,
      0.00264422,
      0.0023545106,
      0.0037779263,
      -0.0062093404,
      -0.006444674,
      0.00820475,
      -0.014630834,
      0.006778646,
      -0.014683735,
      -0.012891827,
      -0.009110034,
      0.026325988,
      0.14005499,
      -0.014560854,
      -0.0060506505,
      -0.021379601,
      0.014090747,
      -0.0046444116,
      -0.0094786445,
      -0.016348785,
      0.005044278,
      -0.008415924,
      -0.0010053626,
      -0.0059760567,
      -0.006027489,
      -0.007547966,
      -0.008121905,
      -0.007585792,
      -0.011025269,
      -0.005498646,
      0.019821793,
      -0.00507037,
      -0.004485918,
      -0.004896941,
      0.00902179,
      -0.0016940832,
      -0.015085481,
      0.018164182,
      -0.0015362758,
      -0.006615692,
      0.00007067609,
      0.010330621,
      0.009234833,
      -0.013800366,
      -0.019254923,
      -0.00914238,
      -0.009356695,
      -0.011406746,
      -0.061957084,
      0.008204124,
      -0.0066268602,
      0.002769266,
      0.014626356,
      0.019239726,
      0.024855383,
      -0.002589223,
      0.0024120254,
      -0.010362321,
      0.013041757,
      -0.005333184,
      -0.005507212,
      -0.00039320128,
      -0.032939557,
      0.007953158,
      0.021631751,
      0.018808227,
      -0.010007703,
      0.0076411045,
      0.012897399,
      -0.008668437,
      0.03517683,
      -0.006363907,
      -0.0046808096,
      -0.01694781,
      0.010687356,
      0.01623994,
      -0.015450837,
      -0.0063530873,
      -0.0014924507,
      -0.009253825,
      -0.016582407,
      0.013367148,
      0.012341628,
      -0.014601897,
      0.004918693,
      -0.0070775207,
      0.00684304,
      0.005706196,
      -0.0035879207,
      -0.031884424,
      0.010082265,
      -0.013079197,
      0.019337269,
      0.009437108,
      -0.0006640187,
      0.036801018,
      -0.007759904,
      -0.010598636,
      0.003432216,
      0.0066001653,
      -0.010512052,
      0.021050429,
      0.0035257787,
      -0.014032287,
      0.024911141,
      -0.017199889,
      -0.012682667
    ]
  },
  {
    "id": "genai_cohort_python_04_Raise_your_own_errors_vtt",
    "content": "All right, next one. Can we raise our own exceptions? Yes, this is exactly what we're going to learn in this video. So without a further ado, let me take you on to the code part. And again, some things actually work better just with the code example. So I don't want you to bore in the theory part. Let's write some code. Let's create a new file. This one will be And, we'll call this one as custom exceptions. Py. The first thing that we're going to do is let's just say we have a brew chai method. All right? We'll code it on the go. This is a brew chai, and we have flavor in this. All right, no problem so far. Now we have a particular set of flavor only that we serve. Let's have an array of this. The first one is going to be masala. Then this time we'll serve my favorite one, ginger. And let's just say we have lig as well, whatever the spelling is. All right, now we are only serving this, so we need to check whether the flavor is within this array or not. So we can just go ahead and check this. If flavor in. And we have checked this and flavor, not in. So now we are checking if the flavor is not in any one of them. Then we want to raise an exception. So we can use a keyword, literally raise. And you can raise an exception. And whatever you want to call your exception, it's up to you. You can call this as a key error, value error, whatever makes sense. In this case, it makes sense to call it as value error because the value that you have provided doesn't exist or I don't want to serve it. I'll just go ahead and work like this and we'll say unsupported, chai. That's funny. But it is literally unsupported chai flavor. There we go. And of course, looks good. Now, in all the other case, we simply go ahead and print this. So we'll just go ahead and print a formatted string that we are brewing whatever the flavor you have given me of the chai. In all other cases, we are actually brewing this. So how we can actually use this? Let's go ahead and use it. Brew chai. And if I go ahead and ask it for a chai which doesn't exist, I want to see. I'm only interested what happens because I know it. If I'll provide it masala chai, this will execute. It's just a one line of code. There is no point of running this one. So in this case we'll just go ahead and say Python run And notice here, this time you are raising an error, which is good. Sometimes crashing the program is also good. Don't worry too much on that. But notice here, this time the error that comes up is in our old syntax. The colors and everything are nice. And it says unsoported. Really badly spelled there. Unsupported. Chai. There we go. Some of you might be yelling from the screen, hey, you are writing this really wrong. There we go. So this is better. Unsupported Chai flavor with three dots came in. So this is nice that we were able to actually raise our own errors. Can we create our own custom exceptions also? That's interesting. Can we do that? Yes, actually we can do that. And let's quickly move on to the next video to actually create our own custom exceptions.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 Raise your own errors.vtt",
      "originalPath": "genai-cohort/python/09 Chapter Subtitles/04 Raise your own errors.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.007272818,
      0.016768612,
      0.0413542,
      -0.04731628,
      0.008591436,
      -0.023494095,
      0.0005892717,
      0.013534029,
      0.0048436937,
      -0.008436307,
      -0.015213424,
      -0.020352822,
      0.0063600754,
      0.015069747,
      0.11494637,
      -0.014202275,
      -0.0028559146,
      -0.013100617,
      -0.006577073,
      -0.0052222586,
      -0.0029712995,
      -0.0061139725,
      0.014804242,
      -0.0154858595,
      0.008081951,
      -0.007356448,
      -0.0017504005,
      0.011714532,
      0.022800125,
      -0.022633653,
      -0.024763253,
      -0.010940069,
      0.011362973,
      0.02823725,
      0.0051187957,
      0.016762609,
      0.016428992,
      0.02531308,
      -0.008010374,
      0.010488645,
      -0.018900735,
      0.00590987,
      0.0026759454,
      -0.021306504,
      0.023101805,
      -0.020214139,
      -0.016130066,
      -0.02853788,
      -0.0095146885,
      0.00891039,
      0.022681098,
      -0.010746474,
      -0.010882382,
      -0.18078104,
      0.005176665,
      0.0030362601,
      0.027078226,
      0.00018239269,
      0.030406572,
      -0.010601109,
      -0.0310542,
      0.012186019,
      -0.027964314,
      -0.019862251,
      0.00065550435,
      -0.04593851,
      0.027399927,
      0.003625041,
      0.0045104227,
      -0.015784042,
      0.031316627,
      0.022029797,
      -0.0019404949,
      -0.014669266,
      -0.037642125,
      -0.0332652,
      0.0014705518,
      -0.018882234,
      -0.0062913466,
      0.021891322,
      -0.0030211515,
      -0.025052564,
      0.00012989299,
      0.0009570586,
      0.00020711363,
      0.013251291,
      -0.027630307,
      -0.0314566,
      -0.0077225566,
      -0.0064285113,
      -0.024551693,
      0.008380244,
      -0.0064574494,
      0.00575762,
      -0.0042125024,
      0.010497249,
      -0.007859012,
      0.013908107,
      -0.034273494,
      -0.00912448,
      -0.00023039257,
      -0.010367119,
      -0.013009768,
      0.007221916,
      -0.0027743538,
      -0.010953803,
      -0.007996404,
      -0.012248477,
      -0.02617908,
      -0.009823433,
      0.0024870979,
      -0.00036774276,
      -0.0069249347,
      0.014646078,
      0.016270831,
      -0.18478116,
      0.010785973,
      0.00022240104,
      0.007859356,
      0.023155821,
      -0.0053584273,
      0.015186254,
      0.0077790385,
      0.016911492,
      -0.010860047,
      0.010202465,
      0.0012023803,
      0.01741651,
      0.0030186146,
      -0.0042471066,
      -0.038044885,
      -0.020413643,
      0.009467689,
      0.0014375226,
      -0.008932142,
      0.025777167,
      -0.016407615,
      0.0013486694,
      -0.008156544,
      -0.0148400245,
      -0.010876358,
      0.01675055,
      -0.02327362,
      0.02206881,
      0.0036191444,
      -0.010487355,
      -0.00706075,
      0.009417469,
      -0.02817265,
      -0.024364395,
      0.028077647,
      -0.028041868,
      0.021819213,
      -0.0057405075,
      0.018460298,
      -0.033305917,
      0.0018432436,
      0.0031247914,
      -0.0130377095,
      0.0033626354,
      -0.006748903,
      -0.0030916987,
      -0.0030103838,
      -0.00068527303,
      0.004727179,
      -0.006771945,
      -0.00945693,
      -0.01007162,
      0.0035877575,
      0.012222804,
      0.002339375,
      -0.02677531,
      0.0066597722,
      0.008098742,
      -0.008642018,
      0.015481383,
      0.012490396,
      0.00040145064,
      0.012708199,
      -0.022369573,
      0.012929271,
      -0.00092521956,
      0.023886954,
      0.0015080306,
      0.012906633,
      -0.00049769593,
      -0.0194388,
      0.008633186,
      0.018813612,
      -0.0008608707,
      -0.008011052,
      -0.0067855176,
      0.025223564,
      0.01976046,
      0.009724138,
      -0.020115953,
      0.004865181,
      0.007796811,
      0.0064448933,
      0.018492829,
      0.020663947,
      -0.01814803,
      -0.016986704,
      -0.0071024084,
      0.029282162,
      -0.0028830806,
      0.01086595,
      -0.013026258,
      0.024210056,
      0.015342674,
      -0.009427168,
      -0.0017979926,
      0.042883035,
      0.0073034507,
      0.003971379,
      -0.011352666,
      0.007877199,
      0.025507495,
      0.013557596,
      -0.021318456,
      0.0008024274,
      0.014523445,
      -0.0067534987,
      0.0023542864,
      -0.011602371,
      -0.01962658,
      0.0053309835,
      0.015625956,
      0.024501959,
      0.016315306,
      0.031055124,
      -0.0030698627,
      -0.025118947,
      0.00700956,
      0.0037716345,
      -0.0040813484,
      -0.013510157,
      0.02828076,
      0.00068696606,
      -0.0037922487,
      0.008929159,
      -0.012457333,
      -0.007975418,
      -0.009308086,
      0.018446108,
      -0.012015178,
      0.017720334,
      -0.009065372,
      -0.015088575,
      -0.045354594,
      -0.012415129,
      -0.008025845,
      -0.008273334,
      -0.010271412,
      -0.009517799,
      -0.021415846,
      -0.01653874,
      -0.015906282,
      -0.006711062,
      -0.0052295444,
      0.003673024,
      -0.02712076,
      -0.010100491,
      -0.005513629,
      0.010665711,
      -0.008744274,
      0.0024497854,
      0.027348604,
      0.009922895,
      0.025864678,
      0.011560343,
      0.007673217,
      0.002204951,
      0.00612338,
      -0.024677433,
      0.009675577,
      -0.099093236,
      0.02697113,
      0.0025619734,
      -0.014533127,
      0.009228262,
      0.011398297,
      -0.039537363,
      -0.0032119108,
      -0.0060687945,
      0.021429911,
      0.008706728,
      0.0067955228,
      0.031510927,
      -0.021936046,
      -0.023817662,
      -0.015308761,
      -0.017189609,
      0.006949978,
      0.03125145,
      -0.011804389,
      -0.00549054,
      -0.022593789,
      -0.023399742,
      -0.019335033,
      0.003126607,
      -0.008475918,
      -0.019139534,
      0.010351126,
      0.009272076,
      -0.007785677,
      -0.002063275,
      0.01631452,
      -0.012355216,
      -0.007078968,
      0.0015238473,
      -0.006282935,
      0.0049711284,
      -0.025339238,
      0.015481867,
      -0.0012683667,
      0.012447981,
      -0.021028662,
      0.016237622,
      0.03676447,
      0.0023424842,
      0.01987853,
      -0.026312914,
      0.0009856574,
      -0.0022742092,
      -0.010002875,
      -0.012344524,
      0.00924517,
      0.021932092,
      0.0070668897,
      0.017036287,
      0.023244476,
      0.0027296727,
      -0.012170744,
      -0.0035839784,
      0.0024034171,
      -0.0025400564,
      0.004735821,
      -0.0020383864,
      -0.008980664,
      0.008853471,
      -0.0070626643,
      0.018156948,
      -0.024321297,
      -0.012001032,
      0.007831751,
      0.0070191417,
      -0.010392781,
      0.00940145,
      -0.03006359,
      -0.005677836,
      -0.013167927,
      0.004673302,
      -0.0121331895,
      -0.02317778,
      0.035468105,
      -0.0042021945,
      -0.01730381,
      -0.01275272,
      0.012001437,
      0.0037004114,
      0.005971528,
      0.013723897,
      0.0020211323,
      0.021134164,
      -0.03146672,
      0.02375229,
      0.014760948,
      -0.019360995,
      0.0039768945,
      -0.006278287,
      -0.0037157945,
      -0.00216557,
      -0.009810269,
      -0.007543414,
      0.016861757,
      -0.015377033,
      0.00367711,
      -0.027106626,
      -0.017655695,
      -0.0041864347,
      -0.0077054612,
      -0.03686133,
      -0.018165695,
      -0.01519735,
      -0.02394392,
      0.0050556823,
      -0.020702537,
      -0.020532843,
      -0.010017906,
      -0.0083375,
      0.0020338518,
      0.014032733,
      0.019235179,
      0.0062356377,
      -0.015426424,
      -0.021302087,
      -0.023868937,
      -0.0093177175,
      0.004796073,
      -0.017837396,
      0.011178202,
      -0.0032444526,
      0.013145508,
      -0.015098488,
      -0.0046237484,
      -0.0170739,
      0.037069686,
      -0.022261713,
      -0.014037456,
      -0.0111757945,
      -0.011200745,
      0.026314123,
      0.026839701,
      0.011890635,
      0.010579124,
      -0.006794939,
      -0.0038393058,
      0.0076155113,
      0.0018368799,
      -0.0008158159,
      0.003462086,
      -0.0019404117,
      0.011396994,
      0.0041148723,
      -0.025972446,
      -0.017409544,
      -0.016308887,
      -0.00014515746,
      -0.0026696217,
      -0.0076720496,
      0.012708165,
      -0.0030955889,
      -0.0075330446,
      -0.013920636,
      -0.012598521,
      0.0015553863,
      0.0072031864,
      -0.018630197,
      -0.016418206,
      0.031693667,
      0.0028490045,
      -0.008471073,
      0.004710504,
      0.0011773044,
      -0.0063629607,
      0.00012428219,
      -0.016432947,
      -0.023579469,
      0.01365032,
      0.0012297459,
      0.00073737954,
      0.024281407,
      0.0051598037,
      0.023813086,
      0.018566987,
      -0.013624781,
      0.0042421333,
      -0.004690604,
      0.0073583857,
      0.004116279,
      0.010133728,
      0.018755315,
      -0.0012060184,
      -0.02999108,
      0.003536803,
      0.0036028808,
      -0.011928555,
      0.0039392794,
      0.0194522,
      0.025409231,
      0.029912313,
      0.014272393,
      0.0152525,
      -0.00078218547,
      0.012582758,
      -0.0060372804,
      0.0077567846,
      -0.02855818,
      0.010495583,
      0.020422809,
      0.009173515,
      0.0022221503,
      0.00087143393,
      0.0023746283,
      -0.0014427275,
      -0.0054813484,
      0.0085938405,
      0.0066457037,
      0.0036677455,
      0.018050147,
      0.01782233,
      0.0026823047,
      0.00080943754,
      -0.025676206,
      -0.0047236667,
      0.0005515474,
      -0.013567626,
      -0.0068568178,
      -0.015878811,
      0.028418863,
      -0.008252768,
      -0.0031660968,
      0.0108493995,
      -0.0014799896,
      -0.008561487,
      -0.009820931,
      -0.021748757,
      -0.018650249,
      0.007997012,
      -0.03584633,
      -0.0111948475,
      0.007080336,
      0.013077601,
      0.010930839,
      0.01963673,
      -0.017243428,
      0.001563609,
      0.0010022223,
      -0.0097461995,
      0.015402333,
      -0.0049884426,
      0.011041973,
      0.002476974,
      -0.024657223,
      -0.0062557883,
      0.0045556603,
      0.016390618,
      0.0053033084,
      -0.021627711,
      -0.04148344,
      0.026747148,
      0.0040859114,
      0.0065155355,
      -0.01381862,
      -0.013420057,
      0.017035088,
      0.013698725,
      0.00037393608,
      -0.015077277,
      0.018229028,
      -0.018128825,
      -0.010280574,
      -0.008553809,
      0.010522605,
      -0.1116599,
      -0.01828249,
      -0.0012598971,
      0.0028752722,
      -0.0243503,
      0.0059577166,
      -0.010927589,
      -0.018181706,
      0.012836626,
      0.004634039,
      0.011141708,
      0.011794616,
      -0.013635154,
      -0.009394753,
      -0.0030331549,
      -0.019406233,
      0.026843855,
      0.003511461,
      0.03376911,
      0.012785782,
      0.013758747,
      -0.0074880887,
      0.004892944,
      -0.017517079,
      -0.013731768,
      -0.0071725617,
      -0.0070210984,
      -0.008359802,
      -0.0015038679,
      0.012178131,
      -0.036100663,
      -0.005619269,
      0.0010141738,
      0.024181582,
      0.008373573,
      -0.025814334,
      -0.028750004,
      0.0008638306,
      0.020302402,
      -0.009414237,
      -0.014681571,
      -0.00950807,
      0.02505762,
      0.01602906,
      -0.008936914,
      0.032319933,
      0.016839152,
      -0.021984031,
      -0.017152812,
      0.045279194,
      -0.03662909,
      -0.032100514,
      -0.017635876,
      -0.023446798,
      -0.025108567,
      0.004914396,
      0.02031396,
      -0.0069467113,
      0.0014145295,
      -0.012718521,
      -0.019331114,
      0.0020093746,
      0.0051644403,
      0.047510292,
      -0.009761529,
      0.006503871,
      0.032235507,
      -0.0018557758,
      -0.004605428,
      0.015030907,
      -0.010404528,
      0.014355947,
      -0.010262935,
      0.029140208,
      0.0077113663,
      0.014299388,
      0.0018735451,
      -0.026548618,
      0.0059332084,
      -0.007837523,
      -0.029268628,
      -0.02315475,
      -0.04643708,
      -0.03194545,
      0.015456526,
      0.013040721,
      -0.0065492736,
      0.03042298,
      -0.0037027723,
      0.0017740844,
      -0.0027630986,
      0.0027381692,
      -0.0125296265,
      0.011656848,
      -0.010019741,
      0.0001821044,
      -0.026701566,
      -0.002886237,
      0.0021669331,
      -0.014626541,
      -0.0035577905,
      0.0120844655,
      0.014237488,
      0.008073636,
      -0.009404835,
      -0.015590385,
      -0.0027828151,
      0.016438443,
      -0.0021591857,
      -0.0067566573,
      -0.005832514,
      -0.0049011116,
      -0.008061479,
      -0.1489495,
      -0.015061088,
      0.011708089,
      0.0077723092,
      0.021161847,
      0.006522143,
      -0.00011447499,
      0.0067851227,
      -0.012799959,
      -0.025034377,
      0.01318374,
      -0.0065937242,
      -0.010523208,
      0.010137442,
      0.013811737,
      0.14147902,
      -0.013118757,
      -0.0050857696,
      -0.022007557,
      0.0058553186,
      -0.0124760615,
      0.0015407517,
      -0.025659764,
      -0.0071904683,
      -0.021096598,
      0.0036896034,
      -0.013443879,
      -0.02538507,
      0.0068228496,
      0.00591039,
      -0.014451802,
      0.0020427029,
      0.009848315,
      0.016634494,
      0.008773615,
      -0.015081071,
      -0.020158919,
      0.020876352,
      -0.005050316,
      -0.002685477,
      0.011512396,
      -0.019346382,
      0.0034993945,
      0.015190596,
      0.0055504446,
      -0.0006888687,
      -0.023263691,
      -0.017449157,
      -0.008241921,
      -0.0034079526,
      -0.030391183,
      -0.043912537,
      0.023339225,
      -0.010129883,
      -0.015264593,
      0.008543979,
      0.010899505,
      0.026218671,
      0.0042213835,
      0.0152949765,
      0.013716207,
      -0.009813964,
      -0.03495681,
      -0.005466409,
      0.021613909,
      -0.010685248,
      0.0136998445,
      0.00832607,
      0.032581117,
      0.003638997,
      0.00969121,
      0.03266373,
      -0.011427251,
      0.032172844,
      -0.00526301,
      0.000024609884,
      -0.021866905,
      0.021751588,
      0.0054976037,
      -0.0012257899,
      -0.002258598,
      -0.0045236275,
      -0.00034801592,
      -0.01947384,
      0.025171088,
      0.0104972385,
      -0.009492412,
      0.007719644,
      0.0019372943,
      0.0045678797,
      0.011610786,
      0.00980167,
      -0.004320258,
      0.01693852,
      -0.006313742,
      0.015620433,
      0.021279275,
      -0.006539845,
      0.009718336,
      -0.011139206,
      0.0003127944,
      0.007953604,
      -0.014964649,
      -0.007973272,
      0.010085732,
      0.0084532695,
      0.008799536,
      0.025901955,
      -0.010041739,
      -0.023916183
    ]
  },
  {
    "id": "genai_cohort_python_05_creating_custom_exceptions_vtt",
    "content": "Continuing from the last class, we saw that we can definitely raise our own errors, but there's still value error. And what we see is raise value error. Now sometimes these kinds of errors which are predefined, like key errors out of bound errors or division by zero error, they're not enough. They are not serving us the way we want it to serve. So what can we do? Yes, you can actually do a lot of. Let me go ahead and close this. Let's create a new file. I want to keep everything in a separate file so that if you're revising them, you just come to that lecture and quickly just download that file and have a revision. So let's call this one as custom. This is actually custom exception. Previously was custom errors raising custom variable. That was a different one. I'll call this one as custom except two, of course. Underscore two. Except underscore two py. So how we can do that? It's actually super simple. You can just go ahead and create a class and let's just call this one as out of out of ingredients error. That's it. You can just literally create a class. And the concept that we studied about inheritance. Yes, that's exactly come into the picture. Now you can, you can actually inherit the exception and we're not going to do anything inside it. You can actually overwrite a lot of things. But as of now, we just want to say pass just like that. And that is it. You have created your own most simplest custom exception. Told you it's really simple. Now let's go ahead and write a simple method that actually uses it. So we are going to call a method which says make Chai. And you pass me on milk as well as the sugar, whatever the quantity it is, and then I check if my milk quantity is zero or if the sugar is zero, then obviously I cannot make chai. So in that case I will raise this time a different error which is out of ingredient error. And I can say missing milk or sugar. Although that's nice, I don't prefer milk, but I prefer sugar in my T. Anyways, I will just go ahead and print Chai is ready with of course three dots. Now how we can use this? Let's just say we call this make chai and we simply go ahead and pass on comma So milk and we have sugar. So will I be able to make the chai? And how does even this out of ingredient error look like? This doesn't exist anywhere in Python. Let's see that it's actually comparatively easy. So Pythonand there we go. Voila. This time we have our own color highlightings and everything, but we have our own exception which is out of ingredient error. This says missing milk or sugar. So it's not that hard to have custom errors. And that's how the custom error happens in all the libraries and frameworks like fast APIs and djangos and whatnot. There is so many things that you can do along with this. So the exceptions are really a really in depth topic. As long as you know the basics of it, that these are used to handle the program gracefully or if you want to crash the program. Crashing the program by the way is not a bad idea. Giving you one such example, let's just say you are running an E Commerce page and on the E Commerce page, on the very home page you show all the product list. But if your application is not able to connect the database, then no point of showing them the whole thing. Instead it's better to crash the application right now, right there so that people can, whoever are the coders can debug your application and can actually have the database connection. So sometimes having the crashing is okay and it's all right. Let's go ahead and catch up in the next video. Hope you are enjoying all of this. If you're enjoying them, please do rate us. We really need that. That is it for this video. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 creating custom exceptions.vtt",
      "originalPath": "genai-cohort/python/09 Chapter Subtitles/05 creating custom exceptions.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.010020407,
      0.0044566067,
      0.030836105,
      -0.047421932,
      0.014120491,
      -0.015467501,
      -0.0027028641,
      0.021556778,
      0.009594449,
      -0.0017578779,
      -0.0067535574,
      -0.023202302,
      0.017316386,
      0.0067729456,
      0.12501769,
      -0.0085532805,
      0.0031944127,
      -0.01660246,
      -0.0120409895,
      -0.0020818308,
      -0.00043701814,
      0.0071228086,
      0.016148392,
      -0.023028526,
      0.01632523,
      0.0028883317,
      0.00002365491,
      0.009402836,
      0.03291346,
      -0.019703409,
      -0.018042224,
      -0.0055072904,
      0.012361617,
      0.020315066,
      0.008123117,
      0.0045607137,
      0.013988754,
      0.02244963,
      -0.016802518,
      0.011136389,
      -0.026448907,
      0.026416402,
      -0.0043852325,
      -0.010498556,
      0.017548818,
      -0.03218826,
      0.0018936909,
      -0.016042547,
      0.0041628857,
      0.011169519,
      0.020088902,
      -0.0056374716,
      -0.015410849,
      -0.18302156,
      0.010403946,
      0.0064925565,
      0.029432585,
      -0.008599612,
      0.014262312,
      -0.003270689,
      -0.036288064,
      0.014000417,
      -0.018073479,
      -0.0051593296,
      -0.0010078219,
      -0.047730338,
      0.025013959,
      0.009253754,
      -0.0026383821,
      -0.01766312,
      0.031346332,
      0.016166665,
      -0.012919,
      -0.008426852,
      -0.028090779,
      -0.035453163,
      -0.0081458185,
      -0.008273288,
      0.0073855133,
      0.030404305,
      0.0063281306,
      -0.025640335,
      0.0058546006,
      0.012885061,
      0.0019698357,
      0.00051201484,
      -0.026221545,
      -0.024642875,
      0.009121977,
      -0.0039956453,
      -0.03019573,
      0.00732598,
      -0.0075761303,
      0.015548438,
      -0.007219905,
      0.01237977,
      -0.015791617,
      0.018727196,
      -0.033101574,
      -0.008246396,
      -0.00020368744,
      -0.0032079502,
      -0.009727929,
      -0.015909664,
      -0.00015088849,
      -0.0062164553,
      -0.014684509,
      -0.004170999,
      -0.022630604,
      0.008497599,
      -0.000017515104,
      -0.0014731092,
      -0.006878706,
      0.022748124,
      0.020652587,
      -0.18000397,
      0.0064354585,
      -0.002701138,
      0.002132896,
      0.020037228,
      0.0022097353,
      0.016717227,
      0.0051470078,
      0.008747198,
      -0.018883457,
      0.005109102,
      0.0021459397,
      0.032426395,
      0.0008491567,
      -0.0084337285,
      -0.028908804,
      -0.012615684,
      0.0064196484,
      0.002832875,
      -0.009236773,
      0.02987031,
      -0.0061606476,
      -0.0026819597,
      -0.012801077,
      -0.017352287,
      -0.016082617,
      0.030264454,
      -0.025977587,
      0.03212341,
      -0.013545088,
      -0.009720751,
      -0.014131686,
      0.006052684,
      -0.029684043,
      -0.031822667,
      0.019634202,
      -0.028029867,
      0.018733101,
      -0.009730487,
      0.021547327,
      -0.041246977,
      -0.002456932,
      0.004917021,
      -0.006956005,
      0.0043249945,
      -0.0060855667,
      0.018612552,
      -0.011013917,
      0.0134856785,
      -0.004438246,
      -0.012001815,
      -0.0010281896,
      -0.008760273,
      0.010573782,
      0.015815878,
      -0.00560699,
      -0.019078463,
      0.017299492,
      0.0033036803,
      -0.018552564,
      0.017776413,
      0.012310657,
      0.0026876999,
      0.020388654,
      -0.017696729,
      0.0099894805,
      0.0015374011,
      0.01494179,
      -0.0004567811,
      0.005453604,
      0.00402856,
      -0.029816806,
      0.006064707,
      0.013658085,
      0.0018519659,
      -0.007834142,
      0.0056333416,
      0.018972859,
      0.018565472,
      0.012229124,
      -0.020453237,
      0.0093372455,
      0.0118345115,
      0.0025224518,
      0.01577491,
      0.031231023,
      -0.0057841972,
      -0.019591305,
      -0.002720611,
      0.020046033,
      -0.0017093022,
      0.008536704,
      -0.0064855893,
      0.010208654,
      0.008835364,
      -0.010430099,
      -0.0033008612,
      0.03885124,
      -0.004417046,
      0.0035742084,
      -0.012546574,
      -0.00074682396,
      0.021330412,
      0.008763912,
      -0.02122652,
      0.0014308406,
      0.0050894804,
      -0.0045865634,
      0.0050374577,
      -0.003858111,
      -0.014844902,
      0.001876781,
      0.01762585,
      0.01996198,
      0.027778883,
      0.022765571,
      0.0022611562,
      -0.018232286,
      0.002669243,
      0.019299963,
      0.01034105,
      -0.01224401,
      0.035559483,
      -0.007998646,
      0.0069876625,
      0.00031445507,
      -0.00954646,
      -0.01178201,
      -0.0027204177,
      0.020569975,
      -0.0073765907,
      0.01485263,
      -0.016857821,
      -0.017438658,
      -0.0375436,
      -0.011507966,
      -0.0040244125,
      0.0030745463,
      -0.020572325,
      0.0029504164,
      -0.027544402,
      -0.025837444,
      -0.0048871823,
      -0.011260395,
      0.0011672409,
      -0.00014181407,
      -0.0286048,
      0.00061065936,
      -0.014937683,
      0.007816408,
      -0.005991153,
      0.0019080386,
      0.017716622,
      0.0010894687,
      0.02643884,
      0.008303995,
      0.005291777,
      0.0016605277,
      0.016924571,
      -0.036084797,
      0.0031477008,
      -0.10276593,
      0.02614048,
      -0.005687776,
      -0.012362835,
      0.01437413,
      0.008837858,
      -0.03134942,
      0.006748472,
      -0.001563447,
      0.015414636,
      0.006720895,
      -0.009333944,
      0.028142722,
      -0.019821797,
      -0.012369085,
      -0.019790873,
      -0.00759041,
      0.004737553,
      0.02758227,
      -0.010581454,
      -0.0075358544,
      -0.03185231,
      -0.009878085,
      -0.0069093658,
      0.004558685,
      -0.007833635,
      -0.014410165,
      0.018452963,
      0.0075879637,
      0.0021578637,
      -0.002311247,
      0.01723251,
      -0.0056049796,
      -0.006094623,
      -0.0101041375,
      -0.0028944586,
      -0.001348958,
      -0.03397948,
      0.007289832,
      -0.0023242466,
      0.014039501,
      -0.034549896,
      0.011647711,
      0.031952087,
      -0.005059598,
      0.014095443,
      -0.016887872,
      -0.0032350854,
      0.0027767473,
      -0.014534376,
      -0.013536434,
      0.01566557,
      0.03356778,
      -0.010618963,
      0.008941828,
      0.014598266,
      0.0069439267,
      -0.023216136,
      -0.00531234,
      0.0047105607,
      0.0114247305,
      0.0043779397,
      -0.00531209,
      -0.016318955,
      0.010181146,
      0.0026802218,
      0.004731504,
      -0.019665971,
      -0.01118382,
      0.013912387,
      0.014203793,
      -0.007401979,
      0.013333694,
      -0.034977157,
      -0.0040780674,
      0.0048263837,
      -0.005609285,
      -0.01297884,
      -0.019523412,
      0.032683488,
      0.00041549135,
      -0.00509672,
      -0.008183133,
      0.01796812,
      0.012186706,
      0.008493349,
      -0.0033950882,
      0.001193373,
      0.01774931,
      -0.028540194,
      0.012020313,
      0.023593582,
      -0.00915817,
      0.0031471376,
      -0.02243209,
      -0.0013754539,
      -0.010260345,
      -0.003928519,
      -0.011182455,
      0.010819264,
      -0.020779584,
      0.011006646,
      -0.03222945,
      -0.009247436,
      0.009402807,
      0.002722589,
      -0.03929124,
      -0.029595071,
      -0.017870419,
      -0.024544459,
      0.005643978,
      -0.018650658,
      -0.022658378,
      -0.0069500054,
      -0.008312421,
      0.005944243,
      0.016189853,
      0.016474409,
      0.016990842,
      -0.016541123,
      -0.014377981,
      -0.026673976,
      -0.006557639,
      0.0096533615,
      -0.011207286,
      0.02117105,
      -0.01746883,
      0.01825078,
      -0.013626311,
      -0.011567465,
      -0.025995435,
      0.034884892,
      -0.02914336,
      -0.01574711,
      -0.022923887,
      -0.011299378,
      0.030672088,
      0.028032836,
      0.0074789673,
      0.0055599464,
      -0.014229111,
      0.0010018898,
      -0.00082489767,
      0.0014744148,
      -0.0026183012,
      0.009301545,
      -0.0030627903,
      0.016971886,
      0.007362765,
      -0.024797536,
      -0.016329017,
      -0.023188036,
      0.0009838662,
      -0.0014596757,
      0.00561204,
      0.01670559,
      -0.0032352558,
      -0.02191979,
      -0.02302195,
      -0.012392831,
      0.0011981537,
      0.0029855024,
      -0.016992426,
      -0.013500695,
      0.03161675,
      0.008850293,
      -0.016289754,
      0.011706282,
      0.0024015512,
      -0.0074067726,
      -0.011581488,
      -0.025504341,
      -0.030164909,
      0.010213944,
      0.010297457,
      0.0051103598,
      0.03593089,
      0.0023590536,
      0.016781732,
      0.025190813,
      0.00095646165,
      -0.0008920664,
      -0.004110057,
      0.005586511,
      0.008056694,
      -0.0005342587,
      0.0110233985,
      -0.012978569,
      -0.03275418,
      0.019077245,
      0.0060722493,
      -0.014885625,
      -0.0032030223,
      0.020943722,
      0.032692775,
      0.025293466,
      0.012028303,
      0.014762316,
      0.004589014,
      0.004075507,
      -0.0073715267,
      -0.0040644803,
      -0.031344075,
      0.006756812,
      0.01636095,
      0.003506421,
      0.0021176427,
      -0.0071440637,
      0.0051069083,
      0.020375405,
      -0.009445759,
      0.013526577,
      0.005750362,
      0.009718354,
      0.00975997,
      0.031012133,
      0.0025377509,
      -0.0043487814,
      -0.026050298,
      -0.010328025,
      0.0132413665,
      -0.019297168,
      -0.0032982177,
      -0.012199399,
      0.027501654,
      -0.011699407,
      -0.008742343,
      0.008448271,
      0.0007204745,
      -0.00014954194,
      -0.007862086,
      -0.011444867,
      -0.0106391655,
      -0.0063846,
      -0.027556729,
      -0.025128085,
      0.011054364,
      0.008503927,
      0.00091604673,
      0.0218877,
      0.0047697076,
      -0.0020215178,
      -0.01756696,
      -0.0049315356,
      0.030678118,
      -0.00009430007,
      0.006182811,
      0.012543281,
      -0.025998238,
      -0.0028509058,
      0.014371732,
      0.031012159,
      0.015538156,
      -0.015871044,
      -0.025779415,
      0.03810179,
      0.0031874015,
      0.0043894113,
      -0.008198035,
      -0.014555326,
      0.021048658,
      0.0067817722,
      0.0017817719,
      0.003036515,
      0.020335732,
      -0.016357128,
      -0.0030622669,
      -0.0068861526,
      -0.000040818348,
      -0.111700624,
      -0.016527187,
      -0.01247019,
      -0.010653228,
      -0.013120064,
      -0.0034421533,
      -0.013265327,
      -0.006155347,
      0.019556036,
      -0.0040722904,
      0.013931248,
      0.015594538,
      -0.022953184,
      -0.014112988,
      0.0050713713,
      -0.015845748,
      0.016488913,
      0.004244614,
      0.036624163,
      0.007359944,
      0.009139413,
      -0.007127789,
      0.00005744843,
      -0.016695576,
      -0.011716323,
      -0.0072420766,
      -0.0034223325,
      -0.004494417,
      -0.0041655693,
      0.005110854,
      -0.028731905,
      -0.0049298164,
      -0.0072930604,
      0.010463049,
      0.006388182,
      -0.015924731,
      -0.013284696,
      0.0045770924,
      0.018354226,
      0.0071736653,
      -0.018882023,
      -0.004660623,
      0.038783785,
      0.013923671,
      -0.0021122356,
      0.01345838,
      0.024177281,
      -0.020518653,
      -0.009719576,
      0.04135102,
      -0.04190845,
      -0.03143833,
      -0.01510435,
      -0.025064588,
      -0.017321588,
      0.007900455,
      0.017314682,
      0.008135356,
      0.010768656,
      -0.022014135,
      -0.010871799,
      0.0027019333,
      0.005985859,
      0.044225585,
      -0.00053376757,
      0.0062216017,
      0.025202028,
      0.0039621806,
      0.008252264,
      0.010669217,
      -0.015492599,
      0.016427994,
      -0.010013918,
      0.023131616,
      0.010775806,
      0.009947833,
      -0.00027469415,
      -0.017339513,
      0.00023311314,
      -0.0069385273,
      -0.03471702,
      -0.025427032,
      -0.045230564,
      -0.026367234,
      0.029186904,
      0.009340032,
      -0.0056015207,
      0.030982163,
      -0.0011953247,
      0.016595786,
      0.0068603978,
      -0.0014575686,
      -0.011723782,
      0.010233019,
      -0.0023242403,
      -0.0026072643,
      -0.023048548,
      0.010220471,
      0.007644557,
      -0.01717203,
      -0.010551666,
      0.009422592,
      0.0065288944,
      -0.004077742,
      -0.02067849,
      -0.021680497,
      0.0006807395,
      0.02248162,
      0.003602934,
      -0.012518712,
      -0.0013898975,
      0.007879644,
      -0.016199531,
      -0.14032024,
      -0.007218567,
      0.0028193344,
      0.012178672,
      0.009750882,
      0.018330464,
      -0.0051873242,
      -0.00768913,
      -0.001262782,
      -0.027116206,
      0.008497708,
      -0.002098428,
      -0.009224838,
      0.013796627,
      0.015150028,
      0.13648848,
      -0.0017405488,
      -0.012443087,
      -0.014301713,
      0.009571287,
      -0.011899441,
      0.0047474927,
      -0.025743816,
      -0.005821161,
      0.0014656017,
      -0.0021726373,
      -0.015559486,
      -0.018835476,
      -0.0011517667,
      -0.0022903846,
      -0.014632015,
      -0.017878827,
      0.009024904,
      0.023783147,
      0.019753486,
      -0.0058448585,
      -0.0127818,
      0.019257154,
      0.0018324731,
      -0.007651197,
      0.001816615,
      -0.023312574,
      -0.008651938,
      0.00998185,
      0.009087338,
      0.0013118042,
      -0.017147915,
      -0.017152015,
      -0.0021195826,
      -0.0017019181,
      -0.025399685,
      -0.047365703,
      0.017562773,
      0.0053177234,
      -0.0038177075,
      0.013020788,
      0.014930677,
      0.028442265,
      -0.0014691124,
      0.0132529875,
      0.011052128,
      -0.0037628817,
      -0.025218317,
      -0.0076503046,
      0.015656602,
      -0.01397937,
      0.015261677,
      0.005159207,
      0.01923879,
      -0.0037607728,
      0.00096688804,
      0.022816926,
      -0.020977544,
      0.015802303,
      -0.016017266,
      0.006258442,
      -0.025398308,
      0.027745105,
      0.0021049571,
      -0.0032935734,
      0.011298765,
      -0.006699328,
      -0.015995668,
      -0.018098146,
      0.025779847,
      0.0058049182,
      -0.014104393,
      0.0022328054,
      -0.0019666092,
      0.0076790457,
      0.013435327,
      0.009078834,
      -0.0161013,
      0.021673031,
      -0.00096412917,
      0.017039234,
      0.023580136,
      -0.0075287097,
      0.020426106,
      -0.0029561063,
      -0.0004323192,
      0.00667774,
      -0.01243324,
      -0.011640184,
      0.017740099,
      0.012947889,
      0.0068535856,
      0.022306873,
      -0.015173905,
      -0.025439486
    ]
  },
  {
    "id": "genai_cohort_python_06_mini_project_with_exception_learning_vtt",
    "content": "All right, so before we wrap up this section, I really want to build a, full kind of app where we see all the things that we have learned so far. Have some code. The more you're going to write the code, the more it's better for you. You are going to enjoy this. And eventually things actually click when you write more code, not just when you Var the videos. So let me take you onto the screen. I have created a new file which is complete order. Now, it's actually hidden behind me, so I can just move it up here. This is the new file name, by the way. In this panel, there is nothing much, it's just the file name. So I'll walk you through, and once you see that after that you don't need to Var it again, feel free to name your file whatever you like. It's complete order. And that is all what we have. I'll, take it back. And that's why I keep myself here in the bottom corner, because there is no important information here. All right, so what we're going to do, we are going to build a simple bill app where I just generate your bill with all the precautionary measure that I have. First of all, I'll go ahead and create a class which says invalid chierror. There we go. I know that how this works. We know that we can just go ahead and pass on exception as a base class to this one. And then in the same line also, I can write this pass. This is one liner, but this is a common sentinel. You can write this in the next line as well. But if you have one liner, it's allowed to write like that. Once I have this, I want to simply define a method which says bill. And this time you give me again the same stuff, which is flavor, flavor. And you pass me up cups, how many cups you want. And this time we'll go ahead and precautionary do the things. First of all, let's declare a variable menu, and inside that we'll have the key value pairs. The first one being masala chai, which will be of price rupees. It has dropped its price. And then we have another key, which is ginger. Ginger. There we go. And the value of the ginger chai. I'll keep it Now, next up is I want to try and check all of the things that are coming up. First of all, I want to check whether the flavor is in the menu or not. I can do the same trick if I have just one value Or I can actually do this in the one line as well. But this time I'll not do that since you understand the concept and the syntax. I'll just check whether if the flavor is not in menu. In that case I would love to raise an error and this time I can raise my own custom error which is invalid chai error. Love that. And I can say that chai is not available. All. Right, Good enough. Now I also want to check whether the cups that you are providing me because previously I know it was 222I I really want to check whether you are actually providing me a number of not. I can go ahead and check. If not, there is a nice thing is instance. So I can check for anything. Whether you are an instance of a class or something like that. I can just go ahead and provide. What do I want to check? I want to check for cups. What type of instance you want to check? And you can see we have integer here. I can just go ahead and check whether you are an integer. I can check for float double all these values. Remember the data types we were studying earlier? Yes. I can go ahead and check that if it is not an instance of integer, I want to raise the error again. This time I will not probably raise my own custom error because it's a well known error of type error. And I can just provide the number of cups. Must be an integer. There we go. All right, that part is done. Now we have checked both the flavor as well as cups. This time we have done a better job than the previous one we did accidentally. And now I can go ahead and calculate the total, which is pretty easy to calculate. You can just go ahead and say from the menu I want to get a key, whatever the key here you have passed me, which is in this case I can just have a flavor just like that again, same style. And I can multiply it by cups confidently because I know this time that you will be an integer. And I can then print out a formatted string just like this. And I can say your bill for whatever the cups you have ordered. Your bill for X number of cups. I can write that cups again, cups and off. Let's use flavor as well. And we can again use chai. Notice we, are just formatting the values nicely. And I can say rupees and then I can say total. There we go. Nicely. Formatted message all right, so this is all good. Now if anything else goes wrong, we can still handle that. We can go ahead and say accept Just like this. And I can say let's print this error, but where is the error? So in the except you can actually catch all these exception with this exception class that we have and, and let's cast this as E so that it's easier to work on with. And I will say, hey, let's go ahead and print all the error and we can actually handle them just by E, otherwise I have to write the whole exceptions and stuff. But this is a common practice and common pattern. Now once I have done this, of course most common thing, which is finally, you don't have to always write it, but in some cases it makes sense. I will just go ahead and print a simple message that will say thank you for visiting Chai code with an exclamation. We are happy. I'm excited. There we go. Now what could be the use case of it? Couple of use case, we'll try all of this. Let's go ahead and try the bill. This time we'll ask for mint. So I know that mint doesn't exist. We'll go ahead and say two cups of it. I know that masala exists, so I'll just go ahead and say masala. But we'll do the same mistake of instead of two we'll go for three. We can go for two as well. And let's order one thing which actually makes sense, which is ginger. And this time we'll just go ahead and go like this and we'll say three. There we go. So we all mixed and match. This one doesn't exist in the key, this one is having a wrong syntax and this one is actually good. So this time we are actually writing code much better, much more carefully. Just like I would have written in the production. Let's go ahead and run this. So Python this time we'll go ahead and say and run this. There we go. Everything handled nicely. First of all it says error that Chai is not available and thank you for visiting because finally always executes good enough. The second time it says number of cup must be an integer. Thank you for visiting Chai and code. That's good enough. And third time it says your bill for three cups of ginger chai is rupees 120, which is good enough. And we are saying thank you for visiting, so this is good enough. Whatever we have learned so far, we were able to execute all of this. The code files is also available within the lecture. And the most important part is do rate us. We really need that. Now let's go ahead and catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "06 mini project with exception learning.vtt",
      "originalPath": "genai-cohort/python/09 Chapter Subtitles/06 mini project with exception learning.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.017155712,
      -0.0045547965,
      0.031068036,
      -0.06688475,
      -0.00075415144,
      -0.011821958,
      0.00015608153,
      0.020610945,
      -0.009951764,
      -0.0006582546,
      -0.012276036,
      -0.0068909647,
      0.011183257,
      0.017545795,
      0.1247341,
      0.013155001,
      0.001037948,
      0.00006590548,
      -0.004352163,
      -0.006575528,
      -0.000028681987,
      0.016419569,
      0.018792313,
      -0.020378657,
      0.0106111495,
      -0.0039562583,
      0.005812238,
      0.02481137,
      0.028151294,
      -0.009191031,
      -0.005758289,
      -0.008037012,
      -0.0009381178,
      0.0120818205,
      0.0059647625,
      -0.0037346557,
      0.010571247,
      0.000026980037,
      -0.021358287,
      0.016171185,
      -0.020062508,
      0.013415552,
      -0.010308166,
      -0.013843579,
      0.02460505,
      -0.019873187,
      -0.0067074127,
      -0.019093163,
      0.005554361,
      0.024837881,
      0.013994392,
      -0.010117769,
      -0.013603014,
      -0.1810193,
      0.018114367,
      -0.0056239315,
      -0.012859701,
      -0.011550904,
      0.005578114,
      -0.002713762,
      -0.018941827,
      0.023883153,
      -0.023524426,
      -0.013431489,
      -0.008544879,
      -0.022977702,
      0.017320208,
      -0.0043161437,
      0.003554744,
      -0.0238282,
      0.029194292,
      0.021642305,
      -0.028086636,
      -0.015207483,
      -0.007298376,
      -0.020288505,
      0.015180453,
      -0.029327778,
      0.00058296905,
      0.009044924,
      0.0052746898,
      -0.018210324,
      0.011347854,
      0.005993657,
      0.0012615075,
      -0.0017245152,
      -0.010396144,
      -0.0037639642,
      0.0031495641,
      0.005042462,
      -0.0076690395,
      0.00298799,
      -0.0028451688,
      0.010257878,
      -0.03282659,
      -0.004987578,
      -0.00089384516,
      0.0075015337,
      -0.03024448,
      -0.023288194,
      -0.0028302942,
      -0.0090211835,
      -0.008466721,
      -0.0046742503,
      0.0013298488,
      -0.0031937945,
      -0.0023130032,
      -0.004044951,
      -0.012422461,
      0.0037244193,
      0.0019017571,
      -0.015070517,
      0.002720486,
      0.006010605,
      0.0018299166,
      -0.18552938,
      0.015631739,
      0.0056267194,
      -0.014581393,
      0.009451928,
      -0.0005905134,
      0.012846235,
      0.006570043,
      0.011591815,
      -0.011157543,
      0.0060842964,
      0.00931613,
      0.019665267,
      -0.0003811839,
      0.011839362,
      -0.020067353,
      -0.020821039,
      0.0036981679,
      0.005053038,
      0.00044817766,
      0.0041934773,
      0.00004471388,
      0.002868497,
      -0.008572457,
      -0.02076041,
      -0.028826576,
      0.025178576,
      -0.020313164,
      0.02885967,
      0.009527737,
      -0.011992029,
      -0.014226888,
      0.006195089,
      -0.029670697,
      -0.015931044,
      0.0074977498,
      -0.025626877,
      0.023116462,
      0.013030962,
      0.042816292,
      -0.03607648,
      -0.0029602495,
      0.018099714,
      0.003730769,
      0.0073052053,
      -0.00046160156,
      -0.003618271,
      -0.009331829,
      0.010807198,
      -0.0004936995,
      -0.008081393,
      -0.016271556,
      -0.014126046,
      0.011136829,
      -0.008753425,
      -0.0023838733,
      -0.010852396,
      0.008827549,
      0.013082834,
      -0.020367699,
      0.00046900695,
      0.017504487,
      -0.013224757,
      0.008171198,
      -0.013362405,
      -0.004318074,
      0.0036931082,
      0.0076416354,
      0.0064222487,
      0.005252898,
      0.019462435,
      -0.010230854,
      0.006538083,
      0.017920818,
      0.0069846665,
      -0.018548677,
      -0.014732537,
      0.011488293,
      0.001193901,
      0.012835905,
      -0.03893801,
      0.0059158565,
      -0.0005093416,
      0.012052444,
      0.019443106,
      0.04455906,
      -0.013470158,
      -0.017278707,
      -0.0035424356,
      0.00850215,
      -0.011238235,
      0.016437007,
      -0.0124189425,
      0.016551351,
      0.008719959,
      -0.028199932,
      -0.0020390314,
      0.02812088,
      0.018549953,
      0.010498703,
      -0.017845888,
      0.0008425667,
      -0.0010807653,
      -0.0036800264,
      0.004469953,
      0.020694375,
      0.0023537576,
      0.006658247,
      0.024497634,
      -0.010633913,
      -0.0055030063,
      0.012784526,
      -0.008071798,
      0.0105484035,
      -0.0024945186,
      0.03611355,
      0.0041009127,
      -0.015047711,
      0.003209362,
      0.011995047,
      -0.0004741096,
      -0.0071730446,
      0.03183323,
      0.008813289,
      0.022379663,
      0.002182077,
      0.008257269,
      -0.0011789263,
      0.0049950085,
      0.011911081,
      0.0070226938,
      -0.0050960705,
      -0.009137881,
      -0.0015191728,
      -0.015808746,
      -0.028465042,
      0.002066129,
      0.010957468,
      -0.020655934,
      -0.0062959683,
      -0.03391251,
      -0.0050706333,
      -0.008687307,
      -0.02302976,
      -0.0051192343,
      -0.0072760675,
      -0.0137845,
      -0.013398432,
      -0.012988709,
      0.016465567,
      -0.021316431,
      -0.00072934234,
      0.027849289,
      -0.014268316,
      0.009909198,
      0.0034262328,
      0.0033046016,
      -0.0037157845,
      -0.0007328121,
      -0.009101992,
      0.018792327,
      -0.1104038,
      0.012249632,
      -0.0126277115,
      -0.026098493,
      0.021137493,
      0.019399166,
      -0.027627142,
      0.0085159615,
      0.007384268,
      0.014565087,
      0.0020837998,
      -0.018858265,
      0.01902604,
      -0.025524424,
      -0.014593542,
      -0.012011326,
      -0.006718485,
      -0.02125133,
      0.024218045,
      -0.02408359,
      -0.0054628314,
      -0.017575901,
      -0.015627764,
      -0.0010139125,
      0.0054546464,
      0.008668952,
      -0.0069320234,
      0.01913536,
      -0.0015819751,
      -0.018552136,
      -0.0019564354,
      0.02275896,
      -0.0026017895,
      -0.011080723,
      -0.0017898645,
      0.014933236,
      0.015601381,
      -0.022873893,
      0.017923037,
      0.0028409811,
      0.020868853,
      -0.010883825,
      0.022144292,
      0.040159542,
      -0.009208646,
      0.012378112,
      0.006527152,
      -0.004275886,
      -0.00486893,
      -0.020480718,
      -0.016950984,
      0.008899111,
      0.012218489,
      0.0012966204,
      -0.009763059,
      0.012490007,
      0.011342224,
      -0.0048354934,
      -0.007582383,
      -0.0019300568,
      0.002000801,
      -0.0009272187,
      0.0070427684,
      -0.012792469,
      -0.0035451022,
      0.004153627,
      0.009272116,
      -0.011761359,
      -0.03249552,
      -0.0032697185,
      0.015336377,
      0.00044564283,
      -0.013408095,
      -0.026032459,
      -0.00089180825,
      0.012037885,
      0.015099839,
      -0.027241858,
      -0.014189757,
      0.025168635,
      0.016054075,
      -0.008945962,
      -0.0009336594,
      0.014458188,
      0.004512042,
      -0.0049717785,
      0.0115872165,
      -0.0020909524,
      0.02048411,
      -0.01932592,
      0.019425243,
      0.001744857,
      -0.00047788685,
      0.014734696,
      -0.022171106,
      0.004019406,
      -0.01645907,
      -0.0035958837,
      -0.012705245,
      0.027833994,
      -0.016904654,
      -0.0019021092,
      -0.008297476,
      -0.007825764,
      -0.003832919,
      -0.012665501,
      -0.030916698,
      -0.03246335,
      -0.0100335,
      -0.019083893,
      -0.0038602846,
      -0.008510612,
      -0.016283521,
      0.0008982752,
      -0.0059430525,
      0.0033101805,
      0.010684546,
      0.011936344,
      0.021384949,
      -0.009376168,
      -0.0036780206,
      -0.01434412,
      0.0011185689,
      0.006616489,
      -0.012262708,
      0.015715282,
      -0.012547907,
      0.013211309,
      -0.017480798,
      -0.030788982,
      -0.03099061,
      0.01563973,
      -0.02306159,
      -0.010970469,
      -0.016978834,
      -0.0028998288,
      0.021599812,
      0.03189768,
      0.021274792,
      0.0045039305,
      -0.0027377035,
      0.003632002,
      -0.004741685,
      0.016198754,
      -0.0009294288,
      0.024100296,
      0.00028507854,
      0.009283517,
      -0.002136392,
      -0.018326486,
      -0.02232703,
      -0.017963419,
      -0.012894762,
      -0.0060398006,
      -0.007183736,
      0.002479302,
      0.0235128,
      -0.018610584,
      -0.02077223,
      -0.03266344,
      -0.010805356,
      0.0052747093,
      -0.022063497,
      -0.014504029,
      0.0069660894,
      0.013512513,
      -0.0091455355,
      -0.000396276,
      -0.005979916,
      -0.014595046,
      0.000060532577,
      -0.025050115,
      -0.021708032,
      -0.016614052,
      0.010136418,
      0.0043697217,
      0.020095184,
      -0.019099534,
      0.041129228,
      0.013142415,
      0.012682811,
      -0.0067047365,
      -0.004004423,
      0.005132923,
      0.013521004,
      0.008323737,
      0.0064236834,
      0.009471288,
      -0.04781788,
      0.006602824,
      -0.010411011,
      -0.0034903877,
      0.017585263,
      0.017939292,
      -0.014711229,
      0.01637405,
      0.010251242,
      0.0030894193,
      0.004735949,
      0.023187293,
      0.0030669915,
      -0.01096509,
      -0.022997085,
      -0.009301875,
      0.02665671,
      -0.006461118,
      0.010665753,
      -0.0092237,
      0.0032918148,
      0.0103348885,
      -0.008045548,
      0.0109692495,
      -0.00509242,
      -0.0043903706,
      0.024804955,
      0.035362676,
      -0.02140182,
      0.008615303,
      -0.04081988,
      0.0015779451,
      0.006170023,
      -0.009230354,
      0.007527056,
      -0.003778671,
      0.021977523,
      0.00676019,
      -0.00961725,
      0.017604481,
      0.0011163482,
      0.003487237,
      -0.018461082,
      -0.008291835,
      -0.015127699,
      0.01979077,
      -0.04626398,
      -0.012030482,
      0.012706537,
      0.008364596,
      -0.005102824,
      0.017913567,
      0.00093281444,
      -0.0032483554,
      -0.00903745,
      -0.010277856,
      0.020126944,
      -0.017595844,
      0.01016416,
      0.003709599,
      -0.004240877,
      0.00773281,
      0.014235194,
      0.026138457,
      0.009553636,
      -0.0030544098,
      -0.018304983,
      0.03161843,
      0.01618082,
      -0.010628633,
      0.00845196,
      -0.00008192431,
      0.009369057,
      0.012575615,
      0.006882476,
      -0.0017707146,
      0.008880681,
      -0.017233338,
      -0.0116862,
      0.0017647336,
      -0.00970943,
      -0.13536538,
      0.0046310425,
      -0.0051895794,
      -0.004259889,
      -0.0026886505,
      -0.016490517,
      -0.018609343,
      -0.006517591,
      -0.0030911656,
      -0.0051432215,
      0.026914824,
      0.0036961813,
      -0.0019216919,
      -0.017286193,
      0.0035653692,
      -0.004508537,
      0.019926235,
      0.009925766,
      0.035532586,
      0.00063604425,
      -0.010384567,
      -0.00079859764,
      0.0059995265,
      -0.012352846,
      -0.023351897,
      -0.013914946,
      0.005506655,
      0.0033748553,
      -0.0025681085,
      -0.00708573,
      -0.021862611,
      -0.0025201119,
      -0.014617508,
      0.0065738726,
      0.011546801,
      -0.026981587,
      -0.008671004,
      0.030163558,
      0.02926035,
      0.011257074,
      -0.005585899,
      -0.002790179,
      0.037229765,
      0.01925174,
      0.007180936,
      0.026947897,
      0.030500585,
      -0.01743459,
      -0.0091513395,
      0.028191235,
      -0.030500429,
      -0.030444754,
      -0.004138701,
      -0.007594464,
      -0.017149346,
      0.00044543404,
      -0.004546773,
      -0.0051704817,
      0.0071931067,
      -0.024333447,
      -0.022011569,
      0.010905392,
      0.009963216,
      0.039468914,
      -0.00773839,
      0.011889311,
      0.025446704,
      0.025559789,
      0.005939591,
      0.007649299,
      -0.001733809,
      -0.008115885,
      -0.008883892,
      0.025208011,
      0.018559478,
      -0.009420521,
      0.0031865677,
      -0.010665624,
      -0.007018102,
      0.0036955513,
      -0.04493255,
      -0.006589131,
      -0.056754876,
      -0.032436017,
      0.008396355,
      0.0047796103,
      0.0023488097,
      0.024166549,
      0.0006020959,
      0.0006241184,
      0.009809072,
      0.0022775517,
      -0.0030571357,
      -0.018970786,
      0.014746459,
      -0.003970493,
      -0.024008192,
      0.009129534,
      -0.0063820845,
      -0.00924631,
      -0.03086286,
      -0.0054114526,
      0.0024959035,
      0.0032900795,
      -0.0067453394,
      -0.017599858,
      -0.0016417527,
      0.01357541,
      -0.017087383,
      -0.007879378,
      0.010545041,
      -0.0021479,
      0.0074326214,
      -0.16296637,
      -0.007671441,
      -0.0072608646,
      0.0025187596,
      0.00002597012,
      0.005683477,
      -0.0021205537,
      0.0018476854,
      0.008445967,
      -0.0042145126,
      0.006458423,
      -0.011028915,
      -0.020913888,
      0.0007733897,
      0.0307571,
      0.13532801,
      -0.012494692,
      -0.007882424,
      -0.022278601,
      0.0007381702,
      -0.011594926,
      -0.019309787,
      -0.013229431,
      -0.011105035,
      -0.00063569983,
      -0.015658097,
      0.0010031052,
      -0.011237459,
      -0.005604127,
      0.0009968907,
      -0.015798178,
      0.005284134,
      0.009866167,
      0.028674867,
      0.0051222234,
      0.003421382,
      -0.009550884,
      0.0173469,
      0.0029101789,
      -0.008375782,
      0.021176588,
      -0.0018914569,
      -0.0065817796,
      -0.0013841388,
      0.013846508,
      0.008217522,
      -0.007993323,
      -0.023776507,
      -0.012661017,
      -0.016939707,
      -0.012229428,
      -0.047563747,
      0.0036072987,
      -0.011223898,
      -0.010683355,
      0.0029035106,
      0.0036659865,
      0.011721778,
      0.0026210907,
      0.02106958,
      -0.005744804,
      -0.0075009866,
      -0.0014883514,
      -0.007884527,
      0.009021078,
      -0.009086716,
      0.009937092,
      0.019602805,
      0.025830336,
      -0.007955053,
      0.007928805,
      0.010014075,
      -0.004315742,
      0.03555179,
      0.0020696109,
      0.002146423,
      -0.027117835,
      0.02471564,
      0.0011471838,
      0.00344795,
      0.00011129752,
      0.015348364,
      -0.001339463,
      -0.019805178,
      0.014484389,
      0.013506963,
      -0.010231324,
      -0.002471715,
      -0.016930848,
      0.008357247,
      0.007359717,
      -0.00090145716,
      -0.031134117,
      0.016089028,
      -0.000980066,
      0.015201542,
      0.0063042953,
      -0.0072348937,
      0.042199787,
      -0.0069030523,
      -0.0016082318,
      0.018710688,
      0.007574514,
      -0.024236321,
      0.011095937,
      0.004844049,
      -0.018418169,
      0.026005488,
      -0.014420151,
      -0.010424263
    ]
  },
  {
    "id": "genai_cohort_python_07_file_handling_with_try_except_and_with_vtt",
    "content": "You are going to handle a lot of files with Python. This is a common thing that we do. PDFs, CSVs, JSons, Excel file and so many other formats that I even don't know about them. There are so many things and Python handles everything, but not natively. There are different libraries that actually helps you to understand the whole process of them and don't even worry about them. For example, Pandas is one such library which handles CSVs and Excels and PDFs and so many other formats super easily. You don't even sweat at a little bit. You just say, pandas, opencsvs and open Python and just provide the path and it does everything for you. And that's majorly is the job. But you also should know how to natively open all the files. And that's exactly what we're going to do. In this video. We'll see what are the precautionary things you have to take here while opening up the file, what can go wrong and how you can actually fix them, and different ways of opening up the file. That's exactly what we'll be doing. So let me take you onto the screen. This is also a pretty fun lecture to be honest, and you're going to enjoy this one as well. Let's close all of this and we'll just open up a new file. So since there we go, hopefully good enough, I'll create a new file and call this one as what? This one is file handling, of course. All right, now let me walk you through what happens in this one. And notice here we don't have any other file or text file into this one, but we want to actually open up something. Let's see what happens in that case. Let's just say I want to open up a file. To open up any file, you simply have an open method. Yes, it's available directly in the Python. It's a file descriptor, which means you can just open up a file. You have to provide the file name as well as in the mode in which you want to open the file. You. And if you read more of the documentation, they tell you more about the modes of it. Like you can open this up. Notice, here they are having this W for writing the mode, X. So many modes are there, hardly anybody uses them. They are just basics. Now that with the topic we have. All right, so which file you want to open? I want to open a file order Txt, but that file doesn't exist in this folder. You're absolutely correct. Let's see if I want to open this up into the right. And as you can see, so many modes. Write, write plus write plus tea. Nobody remembers all of them. I just know W means write. And then I want to store the reference of it into a variable. Let's call this one as a file. And I want to write something into this. So for this I can just say file dot and notice here, buffer close, close, detach. So many things. I just want to write something into it. There we go. And I go ahead and say masala chai and that will be two cups. Two cups. There we go. Now what happened at this point, let's just say when you come to line number three, there is a code which somehow happened and this has crashed your program. This is really bad. Why you might be asking the reason why this is bad is this is your file. So if I go ahead and. Let's just say we have a simple file, this is your file, very teeny tiny one. But this is your file and this is your computer memory. So if I go ahead and write this, this is memory. And any single time you try to open up a file, it actually takes this file from disk and loads this file in the memory. This is what we have done so far. We have loaded this file in the memory. We are trying to write that in the memory. But just before we were trying to just remove it from the memory and put it into the disk again, our program crashed. Lot of things can happen. This file entirely might corrupt. This might corrupt some portion of our memory so that other program might get affected. Hey, we are in a sensitive zone. We are in the memory. So anything happens at this position is really, really bad. You shouldn't do it like this. So what could be the other thing? The taking of reference is of no problem. Once you are writing the file or doing something sensitive operation that can be problem or even you can open the file hole in a closed sensitive manner. I can just go ahead and take this and I can say, hey, I want to just go ahead and use try. So. So let's try to write into the file and once we are all done, we can go ahead and use finally in this. And with the finally I can go ahead and take this file and close this. No matter what happens, finally we just close the file. Can we move this reference also inside the try block? Probably yes, we can actually go ahead and do this. Let's go ahead and try this. What happens in this case if I go ahead and say Python this will be a and notice it. So if you will notice closely, which is little difficult. So this actually creates an order. Txt file? Yeah, it didn't exist before. So I'll just go ahead and remove this again. We can run the program again, no problem. I'll just go ahead and delete this again just to show you this file doesn't exist. But when I run this now, there we go. Order. Txt magically appear. We have created a file and we have handled it gracefully. But there is another way, the modern way of handling this. I'll keep all of this file with you, all of the code with you, so that you can use it later on. And there's another way if you don't want to use Try catch, especially just with the file. Python has a new operator known as with this automatically wraps everything in the Try Catch does everything. I'll show you behind the scene as well. Now you can just go ahead and say open. What do you want to open? I want to open. Open. I want to open a file name as order. Txt or orders. Txt, whatever you want to open. I want to open that up into the right mode. There we go. And I will just say as file. So instead of taking the variable just like this, the syntax is much simpler, easier. Then I can just go ahead and say I want to write some order into this file. I'll open this up and this time I will say ginger T. Ginger T. And the ginger T will be four cups. Four cups is good enough. And that's it. That is the whole code. You don't close it, you does nothing at all. It happens everything safely and it works magically. It does everything behind the scene for you. So let's go ahead and delete the order Txt again and try it again one more time. This is the modern way, my favorite way. And everybody uses this way. So notice here everything happens nicely easily. Ginger teacup. Now, what happens behind the scene is something that you should also know as soon as you take this file. This file is an interesting one. So if I go ahead and take this file, this file variable is interesting. As soon as you take a reference of the context of the file, it actually invokes a dunder. There is another one dunder, it says underscore, underscore, enter underscore, underscore and it executes. This is one dunder which as soon as you open up the file, this starts. And as soon as you close this file, this goes ahead and runs another dunder. If I can just unselect that. And that says exit. Yeah. So like everything that you are doing, appending the file, writing into this, loading the memory. This is one which is responsible for loading this up in the memory. This is the one which is responsible for moving it out. When you actually go ahead and do this safely, like file close, this is the dunder which gets called FileExit. Nobody uses that, but it automatically closes the file. While in the other hand, if you read the documentation about the. With this actually calls all these dunders automatically for you. So you don't have to worry about closing the file, doing anything. It just happens out of the box and that is it. You can open up literally any file, but the format of supporting the text is the easiest one. But when you want to open the binary files, you shouldn't be opening up with the raw Python. There are libraries like Pillow and others which are designed for specifically this purpose. If you want to open CSV, we have Pandas and other thousands of libraries which can actually do the job better. So my recommendation is beyond this, having this is just a wastage of time. You should be exploring the libraries. You know the syntax, you know the behind the scene of what dunders are actually responsible, what can be the gotchas of doing this. But apart from this, that is it. That's majorly it. Now surely some people discuss more about the context and local context. I don't think that's necessary as of now. Surely once you will need them, you'll get to know more about them. But I usually don't go much beyond this, otherwise students get too confused in that this is it very simple lecture. You, you understand the whole concept behind the scene and that is it. That is all you need. Don't worry too much about that. All right, that is it for this video. Let's go ahead and catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "07 file handling with try except and with.vtt",
      "originalPath": "genai-cohort/python/09 Chapter Subtitles/07 file handling with try except and with.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.014385622,
      0.00013613516,
      0.04452758,
      -0.053650286,
      -0.0050515095,
      -0.009955333,
      -0.003959797,
      0.019656122,
      0.002122289,
      0.0007277193,
      -0.007739201,
      -0.023134207,
      0.0017250411,
      0.01816267,
      0.12957142,
      0.008938021,
      -0.01009718,
      -0.00026165237,
      0.00096169324,
      -0.01887794,
      -0.0097085545,
      0.0074201394,
      -0.009525028,
      -0.021841463,
      0.017260605,
      -0.0038177634,
      0.009227962,
      -0.0054327934,
      0.020547092,
      -0.023429917,
      -0.015556022,
      -0.0063586426,
      0.013119362,
      0.016162973,
      -0.0038689077,
      0.021501662,
      0.01010824,
      0.004002065,
      -0.012248168,
      0.008272252,
      -0.028707245,
      0.0025885208,
      0.007374899,
      -0.020637864,
      0.019856583,
      -0.018665956,
      0.0019267058,
      -0.018976422,
      -0.0063005504,
      0.018200211,
      0.010173641,
      -0.006438043,
      -0.017213631,
      -0.1909682,
      0.011709492,
      -0.006083653,
      0.0067488006,
      -0.010376685,
      0.018559966,
      0.0071200565,
      -0.02363883,
      0.029716104,
      -0.01671694,
      -0.0054655657,
      -0.01693301,
      -0.025419438,
      0.013099584,
      -0.02313651,
      -0.005688282,
      -0.010878794,
      0.0361837,
      0.021172466,
      -0.024488991,
      -0.012157466,
      -0.022360733,
      -0.029981213,
      0.017034335,
      -0.011801988,
      -0.001342428,
      0.013866866,
      -0.003612904,
      -0.0021640412,
      0.0020234678,
      0.0061022104,
      0.018452302,
      0.00704876,
      -0.012957949,
      -0.016861383,
      0.0031430358,
      -0.015073384,
      -0.0006923904,
      0.018918771,
      -0.004817429,
      0.019423278,
      -0.01348548,
      -0.019014874,
      -0.0060994113,
      -0.0065121115,
      -0.009619236,
      0.0046511353,
      0.0031127834,
      -0.022409245,
      -0.03147221,
      -0.0058017597,
      -0.025779806,
      0.0062697874,
      -0.013753841,
      0.0071534403,
      0.00091454794,
      0.0028846487,
      -0.016598,
      -0.0028265945,
      -0.007580118,
      0.02368606,
      0.024426725,
      -0.17771299,
      0.013070385,
      -0.011012815,
      -0.009744181,
      0.004388977,
      -0.023308186,
      -0.010873793,
      0.012086105,
      0.0069728633,
      -0.0027125366,
      0.018361224,
      0.005601246,
      0.020974487,
      -0.0009118046,
      -0.022893436,
      -0.03706379,
      -0.018105786,
      0.012582164,
      0.0139997415,
      0.005676631,
      0.0009921963,
      0.0029686731,
      -0.007503441,
      -0.018678542,
      -0.02489961,
      0.004216369,
      0.023809362,
      -0.008371409,
      0.029340453,
      0.006924352,
      0.0064864685,
      -0.007967962,
      -0.000020005777,
      -0.016342154,
      -0.038334373,
      0.00070891524,
      -0.017959455,
      0.0043845307,
      0.005025261,
      0.020083213,
      -0.029934565,
      0.014035189,
      0.016483255,
      0.008103497,
      -0.020840693,
      0.0058423798,
      0.0056280917,
      0.006477767,
      0.03461473,
      0.0052170963,
      -0.00033617322,
      -0.0055846344,
      0.024855187,
      0.0052325167,
      0.014591875,
      -0.01819972,
      -0.01911344,
      0.017897524,
      -0.0028473285,
      -0.03009815,
      -0.0004127185,
      0.0018923125,
      -0.011648393,
      0.0071795597,
      -0.017260006,
      0.01005441,
      0.008805707,
      0.0028391846,
      0.0071655326,
      -0.01006645,
      0.0027691042,
      -0.008880118,
      0.010078192,
      0.014254034,
      0.0035960944,
      0.011181488,
      -0.005505847,
      0.019226527,
      0.005823941,
      -0.00651416,
      -0.025200296,
      -0.0011219488,
      -0.0033223673,
      0.011285455,
      0.020103345,
      0.048461407,
      -0.00020102823,
      -0.0052131815,
      -0.025221627,
      0.042707145,
      -0.022136033,
      0.017423658,
      -0.021419937,
      0.0029490136,
      -0.00896989,
      -0.022106955,
      0.0039648013,
      -0.0013712865,
      -0.0032250334,
      0.02472578,
      -0.0075239036,
      0.014239424,
      -0.0146988435,
      0.003981417,
      -0.010728755,
      0.000017638804,
      -0.0011405989,
      -0.004092312,
      0.008013507,
      -0.0075691617,
      -0.015661644,
      -0.002243442,
      0.016576342,
      0.003044494,
      0.011222247,
      0.016535701,
      0.007008297,
      -0.02639779,
      -0.0050518084,
      -0.014408987,
      0.0008202871,
      -0.011138616,
      0.01890147,
      0.005516653,
      0.013789086,
      0.00684114,
      -0.0113923885,
      -0.029569354,
      0.026342828,
      0.026952542,
      -0.0130723175,
      0.0012247263,
      -0.005612034,
      -0.011279791,
      -0.032567047,
      -0.01256786,
      -0.0091662835,
      0.0048507694,
      -0.02744249,
      0.01262319,
      -0.017814182,
      -0.023606982,
      -0.0159543,
      -0.01856442,
      -0.000670646,
      -0.003849092,
      -0.01192754,
      -0.022515003,
      -0.005962923,
      0.027774582,
      0.010833378,
      -0.0017041188,
      0.0239912,
      -0.0060121906,
      0.034168098,
      0.019818893,
      0.0077943304,
      0.0022905543,
      0.001075353,
      -0.033515036,
      0.0014207085,
      -0.11175972,
      0.0065500303,
      0.008045513,
      -0.020580297,
      0.007900054,
      0.024841297,
      -0.05974789,
      0.02089804,
      0.015089232,
      0.0067855204,
      0.01498249,
      -0.0018326987,
      0.037732266,
      -0.0048772395,
      0.0012790513,
      -0.0004850191,
      0.006355569,
      -0.011046344,
      0.022945264,
      -0.0185868,
      -0.012832976,
      -0.03720756,
      -0.0070773805,
      -0.0118388785,
      0.01802475,
      -0.01883268,
      -0.007743733,
      0.018189713,
      0.033583835,
      0.00044101238,
      -0.0096927555,
      0.031857926,
      -0.003126773,
      0.0049892855,
      0.0059704115,
      0.014650295,
      0.017926527,
      -0.009433828,
      0.007696221,
      -0.010136624,
      0.0026782644,
      -0.0028042337,
      0.006937633,
      0.03223152,
      -0.00958042,
      0.019613748,
      0.0035266404,
      -0.01302511,
      -0.0094464645,
      -0.0050610225,
      -0.017934535,
      -0.00073685515,
      0.036784373,
      0.0073898444,
      -0.0046948865,
      0.016817264,
      0.0049365503,
      -0.019679107,
      -0.0073983865,
      -0.008083565,
      -0.016858803,
      -0.0030400518,
      0.022342067,
      -0.0085224155,
      0.0010151658,
      -0.0012439206,
      0.006052225,
      0.0054838737,
      -0.012829079,
      0.025226649,
      0.004904934,
      0.01336317,
      -0.009748955,
      -0.019986684,
      0.009028918,
      0.009697237,
      0.01151974,
      -0.023265958,
      -0.013402059,
      0.04899906,
      -0.0052774576,
      -0.010732906,
      -0.0048281243,
      0.005062968,
      0.0071356497,
      -0.0065639424,
      -0.0069894707,
      -0.0032343557,
      0.018911522,
      -0.015877139,
      -0.014240978,
      0.0065864096,
      -0.022459872,
      0.0061641983,
      -0.007826251,
      0.00094308046,
      -0.009377029,
      -0.011806074,
      -0.01211802,
      0.018719528,
      -0.004293611,
      0.022142619,
      -0.021134412,
      -0.001289335,
      0.0015704429,
      -0.0020789495,
      -0.014832153,
      -0.023151895,
      0.0077310735,
      -0.012462902,
      0.018055942,
      -0.0110644745,
      -0.026400177,
      -0.008431479,
      -0.0059236586,
      0.003927466,
      0.017737027,
      0.016530488,
      -0.00093432964,
      -0.0069926335,
      -0.0036119227,
      0.0067069917,
      0.00898921,
      0.007138811,
      -0.019473542,
      0.003548116,
      -0.037162017,
      0.014215829,
      -0.0056029265,
      -0.031257555,
      -0.020682609,
      0.023160255,
      -0.016170036,
      -0.021745788,
      0.008453973,
      0.0037826118,
      0.033536218,
      0.028708654,
      0.017430894,
      -0.005027142,
      0.010597309,
      0.008325978,
      0.015570769,
      -0.007600783,
      0.0001653765,
      0.014016755,
      -0.021733453,
      -0.0049806787,
      -0.011337762,
      -0.003771484,
      -0.022380395,
      -0.023223616,
      -0.028378136,
      -0.009102377,
      -0.0033324214,
      0.0019321817,
      0.027699316,
      -0.020241916,
      -0.003187111,
      -0.04078601,
      0.01295945,
      0.009080628,
      -0.01874867,
      -0.016056618,
      -0.00025198585,
      0.03723884,
      -0.014808106,
      -0.01391042,
      0.0017034236,
      -0.009105709,
      -0.005005174,
      -0.006312496,
      -0.037232876,
      0.0045644254,
      0.015720414,
      -0.012112633,
      0.036485918,
      0.0008223083,
      0.015562679,
      -0.006121443,
      -0.0021616602,
      -0.00503887,
      -0.01532157,
      0.0094257295,
      -0.02167951,
      0.016856134,
      0.023149826,
      0.004098174,
      -0.017639576,
      -0.005171586,
      -0.01694643,
      -0.020541063,
      0.02458309,
      0.01108845,
      -0.006201245,
      0.010750646,
      0.006497623,
      0.003954351,
      0.004836986,
      0.009432869,
      0.00026705328,
      -0.030393856,
      -0.0055187503,
      -0.009417776,
      0.017260931,
      -0.0073141623,
      0.018123304,
      -0.02089671,
      0.0072096586,
      0.01374622,
      -0.009808253,
      0.007953637,
      -0.009462333,
      -0.008312733,
      0.00609266,
      0.008553253,
      -0.005880484,
      -0.00923065,
      -0.020424366,
      -0.015863152,
      -0.007550192,
      -0.011568881,
      0.0036466348,
      0.009402297,
      0.007264659,
      -0.0030261942,
      -0.01572412,
      0.016707376,
      -0.02688463,
      -0.0024691978,
      -0.0028774035,
      -0.012425928,
      -0.02479763,
      0.028432602,
      -0.035241753,
      -0.00005444579,
      0.021708963,
      0.0135496585,
      -0.015931498,
      0.0031688216,
      -0.006680037,
      0.0037422986,
      -0.018645488,
      0.017872032,
      0.008612384,
      -0.010398335,
      0.026631072,
      -0.0057097017,
      -0.028532512,
      0.01313355,
      -0.00007562818,
      0.011949188,
      0.0010648498,
      -0.012576717,
      -0.018854834,
      -0.000634369,
      -0.0028951135,
      -0.00327739,
      -0.016141465,
      0.0049020485,
      0.016513182,
      0.010343543,
      -0.0064792987,
      0.022128569,
      0.015636494,
      -0.01714907,
      -0.0048189177,
      0.016356403,
      -0.0028883205,
      -0.114376254,
      -0.006145414,
      -0.0018399227,
      0.0029535436,
      0.009061491,
      -0.015457334,
      -0.009834583,
      -0.005241862,
      0.0018087499,
      -0.0101623405,
      0.03214527,
      0.015587399,
      0.0064328066,
      -0.003921992,
      0.010578689,
      -0.021253282,
      0.004780927,
      -0.0054554725,
      0.041848123,
      -0.017397806,
      0.012953381,
      -0.007073924,
      0.0015161027,
      -0.02214231,
      -0.019883983,
      -0.010106624,
      -0.002574838,
      -0.005271141,
      0.014713022,
      -0.0030027272,
      -0.01423467,
      -0.000013057952,
      0.0039818548,
      0.005008894,
      0.025411412,
      -0.015367979,
      -0.013860947,
      0.027661333,
      0.008492071,
      0.014616969,
      0.0029995197,
      -0.0017981926,
      0.022661848,
      0.0030431838,
      -0.01005938,
      0.014825441,
      0.02232283,
      -0.032375906,
      -0.008616308,
      0.025243541,
      -0.035206493,
      -0.024930052,
      -0.005973658,
      -0.0022987472,
      0.0049362415,
      -0.016894648,
      0.012249377,
      -0.013149922,
      -0.00377783,
      -0.012052776,
      0.013543364,
      0.014322445,
      0.0032342228,
      0.016720226,
      -0.0067574712,
      0.0093944175,
      0.030899508,
      0.016998861,
      0.024352357,
      -0.008399602,
      -0.006893755,
      0.0021901045,
      -0.019319538,
      0.024109412,
      0.0064888666,
      0.0035149495,
      0.006576405,
      0.0007639548,
      0.0030178772,
      -0.0006319306,
      -0.018700087,
      -0.013150555,
      -0.04482363,
      -0.005961547,
      0.011175917,
      -0.013431314,
      0.011555518,
      0.00655593,
      -0.00090174464,
      -0.0021236602,
      0.01880627,
      -0.0021478059,
      -0.013404982,
      -0.00332334,
      0.004122451,
      0.0043570767,
      -0.020742709,
      -0.010844082,
      0.013665044,
      -0.037326016,
      -0.022783373,
      0.005727942,
      0.0058466974,
      0.007704916,
      0.005574743,
      -0.01487069,
      0.019904543,
      0.005748586,
      0.0037291707,
      0.004547187,
      0.0047096442,
      -0.010388739,
      0.0057726903,
      -0.1517491,
      0.003728719,
      0.01797663,
      0.01271695,
      0.007823135,
      -0.010315917,
      -0.004066962,
      -0.0014586886,
      0.0042683044,
      -0.018022222,
      0.0049248654,
      0.0022798828,
      -0.005605239,
      -0.0017708205,
      0.0056521497,
      0.14422114,
      -0.009278446,
      -0.021902192,
      -0.018559808,
      0.0091778925,
      -0.0059969085,
      -0.033140447,
      -0.009728556,
      0.0076763965,
      -0.00308365,
      0.013833609,
      -0.015500124,
      -0.00059429277,
      0.012261503,
      -0.0131349685,
      -0.016280515,
      -0.0150981825,
      -0.0011520549,
      0.021904022,
      -0.008991155,
      0.0069368957,
      -0.002660095,
      -0.007111183,
      -0.005738814,
      0.00005419861,
      0.0008868802,
      -0.0030362085,
      -0.0012454726,
      0.008859561,
      0.011431368,
      -0.003532467,
      -0.004561412,
      -0.030282645,
      -0.028517779,
      -0.011972122,
      -0.020720847,
      -0.03283773,
      0.002397966,
      -0.022820318,
      0.006602192,
      0.017268507,
      -0.015229631,
      0.013659602,
      -0.00070262246,
      0.012474623,
      0.014488186,
      0.014316466,
      -0.012279967,
      -0.003673029,
      0.012655046,
      -0.02950007,
      0.0043904483,
      0.007013994,
      0.0059390645,
      -0.0003236281,
      0.0036787766,
      -0.006072747,
      0.0016553043,
      0.020509947,
      0.008422142,
      0.0066553988,
      -0.016032346,
      0.026295142,
      0.015529683,
      -0.0044847075,
      0.008658041,
      -0.016980875,
      -0.016886014,
      -0.022905665,
      0.014970657,
      0.007497989,
      -0.024881503,
      -0.008877896,
      0.008207286,
      0.0081160525,
      0.0061460473,
      0.010752277,
      0.0016646063,
      0.0023278547,
      0.0055134245,
      0.013503035,
      -0.01572598,
      0.0044484027,
      0.018274937,
      -0.010581248,
      0.0017092726,
      0.005032053,
      -0.0038220426,
      -0.029500797,
      0.021162253,
      0.005959194,
      0.0070056375,
      -0.0042745303,
      0.0076644723,
      -0.023952797
    ]
  },
  {
    "id": "genai_cohort_python_01_Building_your_1st_class_and_Object_in_python_vtt",
    "content": "All right, welcome to the Python course on Udemy. Hope you are enjoying this and welcome to a fresh new section. Every new section is like a spark of new energy and we are always excited to dive into something new. The next new topic that we are going through will be. Where we will go through is going to be Object Oriented programming. Now this object oriented programming, or in short known as OOP is, is also termed as oops. There's no exact shortcut or a long cut of this one. It's sometimes called as object Oriented Programming systems. That's why the name OOPS here. But again the concepts are pretty simple and easy. Now one thing you always have to remember that this object oriented programming is a paradigm of programming. What do I mean by paradigm? Paradigm simply stands for it's a way of writing the code. Now this way of writing the code got evolved during the C era and after that a lot of programming languages adopted it. Java, JavaScript, Kotlin, Swift and a whole bunch of others as well. Now this is nothing new. A whole lot of applications are being written with this kind of a style of writing programming. But there are lots of other ways of writing programming syntaxes, and programming softwares as in general. One of them is functional programming. And these days functional programming is much more preferred compared to the classic object oriented. And in majority of the software that you'll see in the production there is always a mix of little bit functional, little bit of object oriented programming. There is no right, there is no wrong. But yes, through the object oriented programming we learn a little bit about new data structures and we learn how to engage with them. And as well as we also learn about the, some of the new terminologies which are pretty common, things like polymorphism abstraction, although they are very in general English terms and they mean exactly same as what they mean in general as they mean in the programming paradigm as well. So throughout this section we will engage with one activity. We'll keep the videos short so that we can just focus on each one topic at a time. And that's it, that's all the plan is. Let me first walk you through what this whole concept is. Then we are going to write our very first object oriented programming code, file. I think that's going to be fun. Let's go ahead and get started. So with this, let me share the screen with you. We have the screen that we saw in the last demo up here. So what do I mean by this object oriented programming? I'll write them in short as oop you know the idea, object oriented programming. What does this object oriented programming means? You will hear this exact same example, whether somebody is teaching Java, JavaScript, whatever they're teaching. The whole idea is, let's just say if I have designed this blue box, this blue box is going to be my first blueprint, first sample that I'm creating. And based on this now a lot of duplicates can be created out of it. Literally. This software allows me to actually demonstrate this nicely. So notice here, this is a copy of this. Now this copy could be a shorter one, not exactly that big. That's okay, it's an individual copy of this. There could be another copy created from it. And this one will be a little bit like this, different shape, but it's actually a copy of this one. It derived from here, then we changed its shape, change its property. And that's okay, that's totally fine. This one is also a copy of this. But this time let's go ahead and change the this from blue to purple. These all are actually connected to this one. So what do we call each one of them? So this one is actually known as class. So yes, this is known as class. And all of that you see here are actually objects. So there we go. I'll just expand this a little, we'll shrink it a little again and I'll just select this and we'll reduce the font to small. There we go. Now it makes sense, but you got the point, you got the idea. I'll just go ahead and write this. This one is also an object. Now each of the object is individual in itself. Whatever the changes you make, you can make. But these changes doesn't really translate or pass through the main class itself. So what we're going to do in this very first video, we'll see that how we can make this blueprint, this whole class, and that's it, that is all. And we're going to see that how Python behaves and how Python works, some behind the scene details, we are going to see them as well. Let's start our new folder. I really, it's tough to believe that we are on the 10th number. We just started the course and we are so far into this one. So let's call this one as OOP and let's create a new file and call this one as and this will be a simple class py. Now the way how class works is first of all you put up a syntax class that's a reserved keyword, just like for if just like that. And after that we simply name our class. The name of the class usually and should always be starting with the capital letter, and then name it whatever you like. In my case, of course, I'll go with the Chai. There are no parentheses, nothing like that. You simply put up a colon and that's it. I'll not do anything inside this. I'll just say pass. So although this class does nothing, but this is the simplest, most basic class that we have designed, I want to know more detail about this, so I'll just go ahead and print some of the information. First of all, I want to, check the type. What's the type of this one here? And, later on we're going to see how we can actually create objects out of it. So for this, let's open up an integrator terminal and there we go, let's run Python and this one. So notice here it says class type. Now, although it says class type, so what we see here is this one class type. But always remember, everything in Python is an object. This is truly an object language. So although it says that, hey, I am a class, but in reality this class is also an object. Yes, this is asked in interview quite a lot of time, but always remember that this is the case. You were not able to see that. So this is object, and everything here is, an object, although it says class, but internally it is an object itself. Now, how can we go ahead and derive this object, this object, or a pink object? So from the class I can go ahead and say, let's just say I have a ginger T, and this T will be getting the variable value from the chai. There we go, that's it. Now, this is an object of chai class, just exactly what we have seen. This is a class, and this is an object. So we have created this object. Now, okay, I want to see more detail of this one. So I'll just go ahead and say print, and I want to run type, and I want to see what happens with this, ginger T. All right, and we'll also see one more thing which is also very interesting. So let's just say if I go ahead and do a check is chai, I can check whether this whole thing is an object of class. Chai. I can just go ahead and check this. I can check for other as well, like Chai time, which doesn't exist, but I can still make another class, let's just say class, and we'll call this one as Chai time. Again, feel free to Create as many classes as you wish. We'll just get with that. So we'll see whether this ginger T is a type of chai or chai time. This will help us to understand more about the classes. If I go ahead and run this again, notice here, first of all it says yes, the class in itself is of type class. So notice here the type is of class. And then you can see this class. This one here, the type of ginger T. This is the line number seven. So first, this one is going up here. Now the second in the line number 10, we are asking what is this ginger T? So it's saying, hey, ginger T actually is a class, but not just any class, it actually is an object of the type class chai. There we go. So this one is little hard to understand. But all it's saying is hey, I am not a standalone thing. I am an object which was built using the class chai. That's all it's saying. After that we checked whether this ginger type belongs ginger chai, Ginger T belongs to chai or chai time. So it says true. This one is true because hey, it actually belongs to chai. But it says false. So that's what it's saying that hey, I don't belong to the class chai time. I actually belong to a class chai. That is it. That's the most basic. Just to give you an idea, this is how you define the classes. So line number one, this is literally one line. This is how you create classes. And. And line number nine, this is how you create objects. That is it told you it's really simple. And especially when you are with me, it is always going to remain simple. Let's go ahead and catch up in next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 Building your 1st class and Object in python.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/01 Building your 1st class and Object in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0010025447,
      0.0016662789,
      0.028314643,
      -0.039929174,
      -0.0114193745,
      -0.005951431,
      0.017137565,
      0.019395376,
      0.001918809,
      -0.0044048596,
      -0.02510529,
      -0.012912306,
      0.0014762707,
      0.020462468,
      0.12823443,
      -0.0014408673,
      -0.015680498,
      -0.027214719,
      0.011812561,
      -0.0052399216,
      0.0026813825,
      -0.007100778,
      0.008166459,
      -0.010722607,
      0.015160024,
      0.0024370546,
      0.0044422923,
      0.01924311,
      0.035423104,
      -0.016926376,
      -0.03634673,
      0.030119143,
      0.008964434,
      0.026924744,
      0.012853986,
      0.021085097,
      0.0017238081,
      0.0048534856,
      -0.024135076,
      0.0024978416,
      -0.028196132,
      0.009061053,
      -0.0132939005,
      -0.0047912607,
      0.027155008,
      -0.024266055,
      0.0019582326,
      -0.019507492,
      0.0019122394,
      0.008388872,
      0.008324401,
      0.0013175919,
      -0.021653166,
      -0.18618132,
      0.0013574044,
      0.00985698,
      -0.0047844434,
      -0.0009430967,
      -0.0034234643,
      0.0065227505,
      -0.008832503,
      0.013728868,
      -0.022763403,
      0.00356234,
      -0.0059628407,
      -0.026907966,
      0.019523144,
      -0.0011415593,
      0.020294966,
      0.0012345543,
      0.024338776,
      0.016130304,
      -0.026994713,
      -0.014444856,
      -0.025726605,
      -0.018733516,
      0.013606957,
      0.013233036,
      0.01607022,
      0.024183784,
      -0.020814769,
      -0.005409157,
      0.0012640548,
      0.0029014477,
      0.025608035,
      -0.019671366,
      -0.029476454,
      -0.030486284,
      0.00031847227,
      -0.018061725,
      0.0042713247,
      0.019403217,
      0.008427432,
      0.016948842,
      -0.0028096482,
      -0.01822981,
      -0.02936677,
      -0.004435668,
      -0.008296377,
      0.017498186,
      0.007499474,
      -0.0048705554,
      -0.028829167,
      -0.019934792,
      0.005184104,
      0.012582246,
      -0.007638324,
      -0.0072763893,
      -0.036907006,
      0.009801823,
      -0.008717231,
      -0.015070302,
      -0.00432117,
      0.017896958,
      0.0018740862,
      -0.18334995,
      0.009020388,
      -0.0064197206,
      -0.014547358,
      -0.016311187,
      -0.008504358,
      -0.00040768366,
      -0.002122752,
      0.0004883718,
      -0.0099659525,
      0.006584415,
      -0.021271802,
      0.021704914,
      0.005142041,
      0.004875602,
      -0.014308434,
      -0.028612113,
      0.0062086238,
      0.0067461017,
      0.00585903,
      0.016268054,
      -0.015294882,
      -0.0070782476,
      -0.018064462,
      0.0017660317,
      -0.0084251845,
      0.008283604,
      -0.022935897,
      0.045461286,
      -0.003114592,
      -0.0037448353,
      -0.014173163,
      0.0016349474,
      -0.025734583,
      -0.034683365,
      0.011326002,
      -0.010607321,
      -0.00017236514,
      -0.002919468,
      -0.0007477062,
      -0.025983239,
      0.005872752,
      -0.0071132504,
      -0.02732212,
      0.0027066462,
      0.0008424695,
      0.011532952,
      0.0021863028,
      0.009823107,
      -0.020842213,
      -0.011326271,
      -0.015692135,
      0.012990398,
      0.020818852,
      0.010516132,
      -0.00462068,
      -0.0157726,
      -0.0003590732,
      0.017404635,
      -0.008431021,
      -0.016229734,
      0.009325449,
      -0.011533766,
      -0.00076753367,
      -0.0066366387,
      0.007690654,
      -0.006955909,
      0.006181352,
      -0.013133328,
      -0.0023807005,
      0.0051716845,
      -0.009992404,
      0.000121955716,
      0.022451505,
      0.013581084,
      0.018197866,
      -0.0026873215,
      0.018991992,
      0.007050172,
      0.013334562,
      0.0044240253,
      0.0019773466,
      -0.009150625,
      -0.00687372,
      0.026340375,
      0.039186463,
      -0.0046763443,
      -0.011817172,
      -0.034891278,
      0.0261818,
      -0.0008076327,
      0.010935717,
      -0.02711771,
      -0.000023778539,
      0.024391452,
      -0.03145038,
      -0.008135359,
      0.019156488,
      0.0017368426,
      0.024305386,
      -0.012645958,
      0.017230771,
      0.009103519,
      -0.013514199,
      -0.0053936886,
      0.0122430315,
      -0.0014851874,
      -0.0027256135,
      0.018733248,
      0.015059783,
      -0.005394845,
      -0.0069657927,
      -0.006420022,
      0.00629969,
      0.016189685,
      0.0054925797,
      -0.0038731897,
      -0.022546519,
      0.00055290916,
      0.0043556085,
      0.008127481,
      -0.022981903,
      0.013428861,
      -0.0020434142,
      -0.0025969495,
      -0.0006605242,
      -0.01623123,
      -0.0013971634,
      0.038120076,
      0.036831312,
      0.01261419,
      0.010290449,
      0.014405454,
      -0.0042400234,
      -0.023395069,
      -0.024634736,
      0.0038944161,
      0.012391641,
      -0.006994579,
      0.004488973,
      -0.030278359,
      -0.03541127,
      0.0035874236,
      -0.0069301696,
      -0.008648061,
      -0.009239263,
      0.0073986975,
      -0.0136174,
      -0.0044010263,
      0.028334528,
      0.006464461,
      0.0057830294,
      0.024609903,
      -0.009793236,
      0.024653262,
      0.009789674,
      0.0004284546,
      0.014372491,
      0.04166059,
      -0.01802208,
      0.009883184,
      -0.0954826,
      0.024482477,
      -0.0012140145,
      -0.03399242,
      0.031269602,
      0.0051455554,
      -0.049897965,
      0.00048856216,
      0.012861476,
      0.03082466,
      0.010207429,
      -0.005299819,
      0.02800029,
      -0.004986213,
      0.008574071,
      -0.013886817,
      -0.000011430352,
      -0.009970407,
      0.018602898,
      -0.017105544,
      -0.000010747116,
      -0.0019232427,
      -0.011248742,
      0.0050719823,
      0.007977249,
      -0.02353163,
      -0.0067557204,
      0.01407503,
      0.0039167004,
      -0.009318454,
      -0.016324125,
      0.013502817,
      0.00943413,
      -0.008326806,
      0.0011687069,
      0.0011522209,
      -0.0026168444,
      -0.016798977,
      -0.0058484543,
      -0.0066937394,
      0.020033604,
      -0.0110194115,
      0.034768634,
      0.02524304,
      -0.0019140803,
      0.011836243,
      0.005177162,
      -0.0025707788,
      0.0006002316,
      0.0049439324,
      -0.010644853,
      0.0083017815,
      0.031456374,
      -0.03630352,
      0.012371445,
      0.013084215,
      0.0011982219,
      -0.025505424,
      0.01062446,
      0.007943945,
      -0.0035335987,
      0.0046744933,
      -0.00778853,
      -0.008321916,
      0.0020452805,
      -0.011768447,
      0.01273337,
      -0.013522876,
      -0.014794043,
      -0.00006990704,
      0.016207676,
      -0.0025214741,
      -0.007619268,
      0.0063907877,
      0.004168554,
      -0.0029247305,
      0.0044714105,
      -0.009724591,
      -0.018447079,
      0.018352076,
      0.028050188,
      0.0020708013,
      0.0052514495,
      0.017428556,
      0.012586855,
      0.009301402,
      -0.015349138,
      -0.015212967,
      -0.011618825,
      0.004279736,
      0.017383844,
      0.021604974,
      -0.011487229,
      -0.004820344,
      -0.009810028,
      -0.022891324,
      -0.029745443,
      -0.0112503,
      -0.015375618,
      0.017287625,
      -0.027133001,
      -0.00791959,
      -0.021029131,
      -0.015758079,
      0.008807822,
      0.011112458,
      -0.026837638,
      -0.02174858,
      0.01405486,
      -0.010623743,
      -0.0027071496,
      0.0003655075,
      -0.01380154,
      -0.0102449255,
      -0.019466229,
      0.0072765066,
      0.00023833643,
      0.007833961,
      0.011026398,
      -0.024040522,
      -0.015911022,
      -0.01679206,
      -0.0053286063,
      0.0044753477,
      -0.009479547,
      -0.00015220087,
      -0.0013323826,
      -0.0019048101,
      -0.010632581,
      -0.022728596,
      -0.028268887,
      0.0032220348,
      -0.016066274,
      -0.023707598,
      -0.015849696,
      -0.009579637,
      0.024877846,
      0.02386499,
      -0.003221642,
      -0.009112656,
      -0.01689064,
      0.012464872,
      0.026900183,
      -0.012862082,
      -0.009998619,
      0.020779781,
      -0.028526995,
      -0.013021134,
      -0.0051089646,
      -0.01910026,
      -0.018067729,
      -0.015878066,
      -0.016407078,
      -0.011398465,
      -0.0064499164,
      0.007055083,
      0.001275635,
      -0.009753733,
      -0.0140138175,
      -0.008842762,
      0.012052096,
      0.011136276,
      -0.010272278,
      -0.0049177012,
      0.02745461,
      0.013247951,
      0.0010266291,
      0.026079975,
      -0.004030999,
      0.0036855105,
      0.009802718,
      -0.020694954,
      -0.034563575,
      0.010859141,
      0.009419774,
      -0.001087067,
      -0.0026106702,
      0.00248977,
      0.008338982,
      0.007860801,
      0.0121942535,
      0.0062630167,
      -0.020982366,
      -0.0010615923,
      0.007507851,
      0.011523422,
      0.009801927,
      -0.0061349077,
      -0.03706,
      0.014030216,
      -0.002363699,
      -0.017087538,
      0.008636694,
      0.0006555355,
      0.008958618,
      0.027390203,
      -0.010747831,
      0.0056596664,
      0.0014975419,
      0.016121762,
      -0.0026714914,
      -0.01855849,
      -0.0033781033,
      -0.00983712,
      0.014019293,
      -0.021266086,
      -0.0037491734,
      0.002346754,
      0.01594578,
      0.013341889,
      0.0048121167,
      -0.0021222003,
      -0.010231949,
      0.0019601772,
      0.0062120142,
      0.012981725,
      0.023215225,
      0.00089477864,
      -0.027078915,
      -0.004540503,
      0.002013988,
      -0.020133395,
      -0.021972273,
      -0.0103574395,
      0.01603829,
      -0.0024985727,
      -0.017141378,
      0.00061940454,
      -0.010725848,
      0.0045206673,
      -0.007417852,
      -0.015899504,
      -0.027286006,
      0.0038531718,
      -0.001066956,
      -0.021458682,
      0.01423658,
      0.0028126156,
      0.00042727843,
      0.022721902,
      -0.005471783,
      -0.0055082277,
      -0.0073154536,
      0.018249882,
      0.012331354,
      -0.010289082,
      0.032423515,
      0.006501973,
      -0.013308695,
      0.020226834,
      0.017540254,
      0.024211697,
      0.018715853,
      -0.024100797,
      -0.032549184,
      0.023537548,
      -0.00607112,
      0.01763087,
      0.006452652,
      -0.009223033,
      0.01957068,
      -0.002282246,
      0.008449801,
      -0.014652397,
      -0.015477022,
      0.0003593997,
      -0.02477446,
      -0.009209701,
      0.017817872,
      -0.11871574,
      -0.0069807693,
      -0.015218372,
      0.01009687,
      -0.0036281194,
      -0.009003352,
      0.0018154946,
      -0.0068342392,
      -0.006800555,
      -0.026286107,
      0.022668311,
      0.008197325,
      -0.022947682,
      -0.00538463,
      0.013459481,
      -0.00811683,
      -0.0015751013,
      -0.0035519332,
      0.031239865,
      -0.0015701463,
      -0.01047748,
      0.008399971,
      0.001185451,
      -0.0010526784,
      -0.014662498,
      0.00032092718,
      0.001485963,
      -0.00018325789,
      0.0023507222,
      -0.01137154,
      -0.010599081,
      -0.013018446,
      -0.011501587,
      0.009564308,
      0.0016031809,
      -0.017003518,
      -0.015340607,
      0.0022876614,
      0.009486312,
      0.012321984,
      0.0056025973,
      -0.013153563,
      0.020448707,
      0.012632726,
      -0.004455843,
      0.012500031,
      0.036369093,
      -0.011634544,
      0.0038172957,
      0.038875174,
      -0.025750402,
      -0.012504259,
      -0.007420024,
      -0.036366556,
      -0.0026106436,
      -0.008666227,
      0.019952431,
      -0.005194092,
      0.021992473,
      -0.02276187,
      -0.0077645443,
      0.0043987366,
      0.036091745,
      0.029915899,
      -0.0052459897,
      0.0014716598,
      0.04641621,
      -0.0042028143,
      0.008975599,
      -0.01351399,
      -0.01244327,
      0.003552916,
      -0.009629105,
      -0.0016027342,
      0.007257933,
      0.013144729,
      -0.0029265215,
      0.013939833,
      -0.009907253,
      0.0058333506,
      -0.027570348,
      0.0026604736,
      -0.06389739,
      -0.014654074,
      0.021499373,
      0.012820885,
      0.024876736,
      0.038757976,
      -0.010732441,
      0.004074292,
      -0.0138922855,
      -0.0069362544,
      -0.02436021,
      -0.0019927528,
      0.019283291,
      0.00050920295,
      -0.033032086,
      0.008892428,
      -0.01875691,
      -0.0100724045,
      -0.027928468,
      0.0051312256,
      -0.004567244,
      -0.006554041,
      0.0023364183,
      -0.01818386,
      0.011915588,
      0.04621659,
      0.007796314,
      0.004233407,
      -0.020935254,
      0.009080897,
      -0.0024441304,
      -0.15601672,
      -0.015453443,
      0.031003378,
      0.008598386,
      0.008627622,
      -0.00668405,
      -0.0028235628,
      -0.028593775,
      0.010263519,
      -0.0042724074,
      0.008012066,
      -0.007929553,
      -0.011704517,
      -0.005319527,
      0.030544762,
      0.12828436,
      -0.006662859,
      -0.0026682327,
      0.0013631823,
      0.004017786,
      -0.014129109,
      -0.0053735757,
      -0.018678576,
      -0.0018726694,
      -0.0068182913,
      -0.017757216,
      -0.010112833,
      -0.005069883,
      0.0014551538,
      -0.027349856,
      0.004915205,
      -0.029704457,
      -0.0042213444,
      0.017957844,
      0.01624961,
      -0.006276679,
      -0.0075887665,
      -0.0015146433,
      0.0029653516,
      0.00013133322,
      0.01815666,
      -0.008037555,
      -0.0030607593,
      0.02175448,
      0.025435451,
      -0.0023949333,
      -0.005304389,
      -0.011891912,
      -0.003477047,
      -0.011589194,
      -0.008606403,
      -0.05173362,
      0.014382485,
      0.0046899957,
      0.0028758654,
      -0.0011398137,
      -0.014403749,
      0.014107356,
      0.014424481,
      0.018407624,
      -0.012689303,
      0.00531653,
      -0.025737766,
      0.0032922425,
      0.015252773,
      -0.0026453882,
      0.013666853,
      0.0063594515,
      0.00067089713,
      -0.019644883,
      0.027457304,
      0.02295017,
      -0.008141997,
      0.0063250437,
      -0.018150838,
      -0.012679515,
      -0.025634602,
      0.029332513,
      0.00061749417,
      -0.0013235505,
      0.004691544,
      -0.009767787,
      0.011089523,
      -0.018888328,
      0.01587488,
      0.012571766,
      -0.0017288495,
      0.032633897,
      0.010946423,
      0.006866683,
      0.016106974,
      0.005474984,
      -0.019744622,
      0.018588804,
      0.005379688,
      0.010533713,
      0.020877631,
      -0.012127462,
      0.015314515,
      0.0015740104,
      0.01090406,
      -0.0020503474,
      -0.019326372,
      -0.026354164,
      0.02681144,
      0.012996593,
      -0.0054555857,
      0.02113487,
      0.0037836034,
      -0.005985258
    ]
  },
  {
    "id": "genai_cohort_python_02_Class_and_object_namespace_vtt",
    "content": "All right, let's get started more and talk a little bit more about the classes and the namespaces. You usually see me beg one a big image of me. But now I'm just keeping myself in the short so that we can focus on the screen itself. So let me take you on to this one. So what we're going to study, we are still going to study the same diagram which we drawn. So notice here, this is a class and I wrapped it up inside a box for a reason. This is also an object. This is also an object. And this is also an object. Now each object possess some of their properties. Properties like their variable names. Like I have a property like what's the color of my tea shirt in this case you can see it, it's yellow, bright yellow. What's other property? It fits me. So there might be some size, like large, extra large, some size does fit me. These are all properties of this tea shirt. So exactly like this, there are some properties of this object. Like this is a smaller object, this one is having more width than the length. This one is having a different color. And what you have also noticed that each of this object although came from this class itself, possess some different properties, but are not actually overlapping anybody else's property. Each object has its own entity that's called as namespace. I repeat this again. Each object is its own entity. It can possess its own features, its own properties, but doesn't bother other ones. This is exactly the namespaces and the concept of namespaces in in the world of object oriented programming demo time. Of course it is. Let's write some code. I love this code part. Let's create a new file and we will create so many files in this section because we have so many topics to cover. Let's call this one as namespace. This namespace topic in itself is a pretty in depth. It actually exists in Linux ecosystem as well. But anyways I'll not go too much depth of that. So let's go with the namespace, let's create another class and we'll call this one as simplechai. There we go. And this time we'll not just write pass, we'll declare some variable. By the way, in the class you can have your variables, you can have your functions, generators, whatever you want. It's just a wrapper and inside the wrapper you can have as much or anything that you want. I want to have an origin. So most of the chai the origin is in my country India. Now let's see how we can create different objects from it. First of all, I would love to print one statement. So I can just go ahead and say, this chai. And just by putting a dot, you can access whatever you have named inside it, whatever the values are. So right now I just want to print what's the value inside the origin. And again, there's no guesswork there. It's super easy to guess what's going to be printed out. So I'll just go ahead and say, there we go, no exception, no surprises. We get this one. Now let's go ahead and create a two different object. And by the way, it's not like you have to declare all the objects or all the variables. And by the way, when the variables goes inside the class, we call them as objects. So from here onwards we'll refer to them as objects, not objects, properties. My bad, sorry for that. So inside the class, whenever the variable goes, we call them as properties. So from here onwards we'll call them as properties. You can go ahead and add more property to this just by putting up a dot and says let's just say is hot is the new property I want to add. And I can just put up a value. This can be a boolean, this can be anything else. And now I can access it directly by pointing towards the class. And as soon as I put up a dot, I have more access to this one, which is ishot. Now you might be wondering, can I go ahead and print this value? Let's go ahead and ask this. Although there was no suggestion, but if I go ahead and run this, you can see we got the true value here. So now this class technically has two values. One is origin, one is is hot, which is true. Now let's see that if I can go ahead and create more objects out of it. Creating objects from class chai the way how we create that. Let's just say we want to have a simple masala. This one can come from the chai, so all the values goes inside it. It can have by default as an axis of origin. Can have an axis of is hot. Would you like me to go with that? Of course. You want me to go with this. So I can just say masala and as soon as I put up a dot, this one is going to say origin origin. And I can have a duplicate of this and say is hot. Although we don't get the suggestions, but this is all what we have. Let's go ahead and run this. Do we have this? Yes. So the first two are Actually being printed by the class itself. The rest of the two are actually coming up from the masala itself. And just to make sure that we get this idea, so I'll just go ahead and simply go like this and have a value just like this. And we will say masala space. And we can actually copy this copy and we'll paste this one masala. And there we go. Just a second. I'll just arrange the things so that we get the idea. This one is easier to understand that okay, this is masala India and masala true. All right, can I go ahead and create more chai just like this? And what happens if I go ahead and change some value? So for example, that's interesting case. If I go ahead and take this masala and I say ishot and I turn it as this was previously true, but I turn it as false. So what do you think will happen? I want to print the two things. The first one is directly accessed with the chai. So I'm accessing the value in the chai. So this is class value. So I'll just go ahead and say class. This is printing of the class. And what do I want? Why are you having. I forgot to put up a comma. There we go. And I also want to print this masala as well. So let's go ahead and copy this and print this. So in line number 14, I have changed a value which is is hot inside the masala. We'll actually draw the diagrams as well. And this one is here. So my question is, if I change anything inside an object, should this change be propagated inside the class as well? This is like saying I do have a value here which is is underscore hot. And if I go ahead and change this value here somehow, should this change be propagated here as well? That's the question. And we will answer that by just running the file. If I run this notice here, it says this masala India and true. That's okay. After that we see the class is still true, but in the masala it becomes false. So this proves the point that each object is actually having its own namespace which doesn't affect other objects. Also doesn't affect the classes as well. By default, if you wish, you can, but by default it doesn't change any value. You can also go ahead and add more values to it. Just like this could be a color changed and this could be a size. So you can add more values to this masala as well. How do we do that? Super easy, super simple. Now that you have an object Masala, you can simply go ahead and say that I want to add a flavor to it. Flavor. And feel free to add whatever the flavor you want to add. I will call this flavor as Masala. There we go. Now I can just go ahead and print this simply masala flavor. My bad flavor. And super easy, super simple concept. I hope you are focusing now on the concept so we get the new property. But this property doesn't exist in the class. So all I'm saying is coming back onto the point that you can go ahead and have your own unique properties. You can go ahead and change the properties that you got from the class. Just like we did it here. We got the property of blue, but we changed this property to purple. And that's okay. It doesn't affect other object. It doesn't affect the original class as well. If any new object will be created from this class, they will be exactly same. So we can just still go ahead and do this. And That is all. That is all the concept of the namespaces. I hope you got it. It was a fun lecture. Please do rate us and let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 Class and object namespace.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/02 Class and object namespace.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0057062004,
      -0.013639587,
      0.03868113,
      -0.05110591,
      -0.010541313,
      0.0070642214,
      0.008707635,
      0.025070667,
      0.025059901,
      -0.013083397,
      -0.013796392,
      -0.010598601,
      0.017357467,
      0.0083326185,
      0.12574923,
      -0.0017035084,
      -0.026414894,
      -0.0321842,
      0.013338743,
      -0.00654318,
      0.0043301433,
      0.0059149615,
      0.015693279,
      0.0052316003,
      0.010649367,
      -0.0054073627,
      0.013289581,
      0.028692463,
      0.013631889,
      -0.018378943,
      -0.021471541,
      0.013775693,
      0.013452982,
      0.01768162,
      0.021334553,
      0.01942751,
      -0.0017870108,
      0.0038809455,
      -0.040441003,
      -0.0066620205,
      -0.033197742,
      0.028890472,
      0.010429946,
      0.0008106177,
      0.02408769,
      -0.019658078,
      0.014182134,
      -0.005843929,
      0.02775017,
      0.007132224,
      0.011143754,
      -0.0069009745,
      -0.0030653288,
      -0.17693815,
      0.031379867,
      0.00092916907,
      -0.0023490821,
      0.0016717188,
      0.004628708,
      -0.0034079081,
      -0.024529716,
      0.018099975,
      -0.040353104,
      0.002705895,
      0.0047334875,
      -0.014889654,
      0.021862915,
      -0.007630964,
      -0.0034470207,
      0.017059075,
      0.019759871,
      0.009658242,
      -0.017122548,
      -0.012634927,
      -0.020676091,
      -0.019756157,
      0.018784968,
      0.007535566,
      0.009268048,
      0.021964973,
      -0.021001758,
      0.0021878588,
      -0.010538852,
      0.0036036829,
      0.019501327,
      -0.00441854,
      -0.018370986,
      -0.029559795,
      -0.005381846,
      -0.013236336,
      -0.0074037933,
      0.011270804,
      0.012513314,
      0.013423217,
      -0.013446764,
      0.0035942046,
      -0.015316621,
      0.012798496,
      -0.01243963,
      0.023419112,
      0.032039292,
      -0.009398294,
      -0.03383681,
      -0.014505378,
      0.0049976925,
      -0.0002757723,
      -0.01450951,
      -0.0067276726,
      -0.02690345,
      0.0077920947,
      -0.0012888508,
      -0.023476783,
      0.008459046,
      0.015426467,
      0.014470967,
      -0.17564602,
      0.031094829,
      -0.016267749,
      -0.021171795,
      -0.00019877296,
      -0.00016416665,
      -0.007248212,
      0.00051391806,
      -0.00398991,
      -0.0080799535,
      -0.0043106372,
      0.0024056754,
      0.012086134,
      0.017536873,
      0.0036891357,
      -0.008118094,
      -0.025235884,
      -0.008393584,
      0.008122891,
      0.012632795,
      0.0204668,
      -0.013393568,
      0.0019455977,
      -0.0324155,
      -0.0013200756,
      0.0017752293,
      -0.0012746564,
      -0.018863592,
      0.03224472,
      -0.012624093,
      -0.010406554,
      -0.018907478,
      0.00585127,
      -0.036792655,
      -0.021722639,
      0.012081046,
      0.00037044563,
      0.020852037,
      -0.012518961,
      -0.005396574,
      -0.0120047685,
      0.025469963,
      -0.008926791,
      -0.019254548,
      0.013554707,
      0.000602217,
      0.010354116,
      -0.0031040215,
      0.022090541,
      -0.007536326,
      0.0000917427,
      -0.011052467,
      0.018528862,
      0.025723448,
      0.015485186,
      -0.00878213,
      -0.0301092,
      0.009945771,
      0.0116078155,
      -0.016921015,
      -0.014038653,
      -0.004179266,
      -0.004955623,
      0.010144411,
      -0.007143989,
      0.003785013,
      -0.024839815,
      0.016736949,
      -0.0117751695,
      0.010182896,
      0.013656999,
      0.006702602,
      0.016249448,
      0.027341187,
      0.019878218,
      0.024337092,
      0.01774043,
      0.003937195,
      0.018196862,
      0.0014910495,
      -0.017985148,
      -0.0057927542,
      0.002374722,
      -0.0064947032,
      0.021348367,
      0.028356891,
      -0.004372606,
      -0.011459541,
      -0.04344077,
      0.02925888,
      0.01560287,
      0.022316955,
      -0.021572024,
      0.0071388762,
      0.03173487,
      -0.029222246,
      -0.007631051,
      0.026810646,
      -0.005288007,
      0.008214044,
      -0.023626657,
      0.0195786,
      0.008330867,
      -0.0005070276,
      -0.023904342,
      0.022562573,
      0.0050379494,
      0.000032818643,
      0.04217035,
      0.021405086,
      -0.01246637,
      -0.015564791,
      0.00415257,
      -0.00038975987,
      0.008205301,
      0.013403889,
      -0.0022693598,
      -0.020394837,
      0.008252536,
      0.013801336,
      -0.0024819386,
      -0.022863608,
      0.011469535,
      -0.007956057,
      0.002501134,
      -0.007526553,
      -0.021689406,
      0.0051384545,
      0.006944364,
      0.025565747,
      -0.0014769715,
      0.0040199286,
      0.009705,
      -0.004582306,
      -0.0075430023,
      -0.012229764,
      -0.007961298,
      -0.0053371633,
      -0.004454238,
      -0.005404094,
      -0.03319989,
      -0.017408308,
      0.00830731,
      -0.021875238,
      -0.0027153557,
      0.0016451493,
      -0.0009422402,
      -0.01026479,
      -0.0022189189,
      0.005210902,
      -0.0054306537,
      0.004767074,
      0.03985382,
      -0.022555646,
      0.016340142,
      0.0038549185,
      0.015306389,
      0.0056368643,
      0.027944973,
      -0.020908305,
      0.018000532,
      -0.10054468,
      0.020048484,
      -0.008517197,
      -0.01590529,
      0.021897955,
      0.007459123,
      -0.03101306,
      0.0020157963,
      0.0058171777,
      0.026158618,
      0.008674601,
      0.0104801785,
      0.020121714,
      -0.0037639677,
      0.010867551,
      -0.018459637,
      -0.0084277,
      0.00010161161,
      0.024732014,
      -0.017756222,
      0.0018002407,
      -0.0050593354,
      0.0030238566,
      -0.011939807,
      0.011904892,
      -0.011076304,
      0.015708828,
      0.024362521,
      0.00011915325,
      0.011037797,
      -0.008137926,
      0.018008472,
      -0.008391046,
      -0.025688255,
      0.0031200233,
      0.0045956145,
      0.010698297,
      -0.023221374,
      0.0038380865,
      -0.015388672,
      0.004802128,
      -0.00369235,
      0.013399589,
      0.032484062,
      -0.021545026,
      0.01418401,
      -0.0010194901,
      -0.012420433,
      -0.010696563,
      -0.0048085568,
      -0.014239675,
      0.007882834,
      0.007670342,
      -0.03558755,
      0.003611198,
      0.022242213,
      -0.006087948,
      -0.013165469,
      0.005338247,
      0.006602235,
      0.0073056594,
      0.010858174,
      -0.0014283572,
      -0.004084231,
      0.01777284,
      -0.013237885,
      0.0100639565,
      -0.022299338,
      0.008733894,
      0.005595829,
      0.019498415,
      -0.013794924,
      -0.0055118813,
      0.0054445076,
      0.00876039,
      0.013326206,
      0.012550117,
      -0.0067615504,
      -0.0088108145,
      0.037355155,
      0.009671021,
      0.00021909054,
      0.015131016,
      0.009068195,
      0.0140652545,
      0.014478008,
      -0.012196575,
      -0.0032103444,
      -0.00041369724,
      -0.028526898,
      0.002768851,
      0.021288281,
      0.0023266412,
      -0.007914943,
      -0.008097807,
      -0.0055005057,
      -0.03317048,
      -0.014129934,
      -0.014779133,
      0.028364323,
      -0.0031275018,
      -0.02097447,
      -0.032664508,
      -0.00067639945,
      -0.0013121918,
      0.0046310034,
      -0.024830276,
      -0.0062929047,
      0.0017620682,
      0.006283912,
      -0.0016895785,
      -0.0031882322,
      -0.02005628,
      -0.021055479,
      -0.015254184,
      -0.0014865192,
      0.004418229,
      0.025731094,
      0.020493114,
      -0.033173986,
      -0.018283281,
      -0.007873732,
      0.0026553117,
      -0.011793468,
      0.0007591192,
      -0.0023551602,
      -0.011934572,
      -0.0036162597,
      -0.014826445,
      -0.029926574,
      -0.04124674,
      0.017798876,
      -0.014700781,
      -0.018059492,
      -0.0017907106,
      -0.008946487,
      0.027837425,
      0.008963767,
      0.012273104,
      -0.004653035,
      -0.030613419,
      0.0008575414,
      0.007797374,
      -0.0017297077,
      -0.0109066265,
      0.021463873,
      -0.016055228,
      -0.0149160735,
      -0.0056487084,
      0.011168962,
      -0.013199191,
      -0.010827515,
      -0.002681327,
      0.0027075598,
      0.011167727,
      0.022765102,
      -0.0076389434,
      0.0094051985,
      -0.025779387,
      -0.021149272,
      -0.0026705435,
      -0.003109415,
      0.0053916113,
      -0.00511606,
      0.025173383,
      0.005614567,
      0.0060059456,
      0.011575219,
      -0.0031686511,
      0.004915316,
      0.012023822,
      -0.020347802,
      -0.020303488,
      0.0128002055,
      -0.009707013,
      0.000811601,
      -0.0058877976,
      0.00050373335,
      0.012292188,
      0.0063830744,
      0.0083402265,
      -0.002131332,
      -0.017547732,
      -0.0062393635,
      -0.0121736815,
      -0.00052123587,
      0.005291742,
      0.0076018367,
      -0.032805562,
      -0.0029206644,
      0.0030392264,
      -0.023372885,
      0.011347739,
      0.01047707,
      -0.0010784502,
      0.02233855,
      -0.0059260987,
      0.012429537,
      0.0015517445,
      0.014853386,
      -0.011439837,
      -0.023974614,
      -0.009920721,
      -0.010026974,
      0.002127266,
      -0.021098448,
      0.013468798,
      -0.008536515,
      0.010659523,
      0.022125907,
      -0.008998326,
      -0.0002701559,
      -0.010577718,
      0.0140334945,
      0.002938867,
      0.022102054,
      -0.005714683,
      -0.016439427,
      -0.03238727,
      -0.009893877,
      0.0045369673,
      -0.012522955,
      -0.009206273,
      -0.00157101,
      0.0026577662,
      -0.0030853641,
      -0.0045990315,
      0.00517068,
      -0.005919812,
      0.0054303706,
      -0.005428841,
      -0.001154773,
      -0.01631932,
      0.0078071463,
      -0.00666628,
      -0.021459289,
      0.008794268,
      0.016476324,
      -0.011566348,
      0.021445563,
      0.0012802852,
      -0.007134466,
      -0.014321564,
      0.003641741,
      0.0056654736,
      -0.011390552,
      0.018180847,
      0.0020410987,
      -0.0043871603,
      -0.0012981449,
      0.010047642,
      0.021686317,
      0.0044920463,
      -0.015865533,
      -0.014174402,
      0.024005476,
      -0.008967847,
      0.01927251,
      0.022055337,
      0.009811152,
      0.022124238,
      0.0021084317,
      0.00016830499,
      -0.017255517,
      -0.01668797,
      -0.00070630194,
      0.0027214554,
      0.0021927655,
      0.02191771,
      -0.13686007,
      -0.014325586,
      -0.0011305882,
      0.011715635,
      -0.00257754,
      -0.010799839,
      0.005822851,
      -0.01051142,
      0.0009224531,
      -0.014726759,
      0.011367356,
      0.0075588515,
      -0.002176644,
      -0.008494493,
      0.011854978,
      -0.015141649,
      0.010813105,
      0.01879567,
      0.036543563,
      0.015393365,
      0.0015938546,
      0.0138371615,
      0.0031526056,
      0.006373923,
      -0.0070488304,
      0.0006906512,
      0.012840261,
      0.0021351737,
      -0.0043136063,
      -0.017959794,
      -0.01261236,
      -0.004521342,
      0.00010517206,
      0.022491913,
      0.0019856382,
      -0.022309091,
      -0.011341288,
      0.003517061,
      0.00039880513,
      0.027638532,
      -0.0018360157,
      -0.021772651,
      0.03446495,
      0.01076751,
      -0.0120460065,
      0.021285722,
      0.028237805,
      0.003919145,
      0.0007798577,
      0.029613985,
      -0.013390522,
      -0.0010761752,
      -0.007510088,
      -0.032879267,
      0.004678613,
      -0.018126858,
      0.01461916,
      -0.023532102,
      0.007642593,
      -0.02656031,
      0.005662427,
      0.0103004845,
      0.019776667,
      0.02485347,
      -0.004681951,
      0.010687885,
      0.03174525,
      0.010216787,
      -0.0071794786,
      0.0058910963,
      -0.0043308195,
      0.015410375,
      -0.018637596,
      0.0072697927,
      0.0022819957,
      -0.008547282,
      -0.012283761,
      0.0059826057,
      -0.017477311,
      0.0015804882,
      -0.027063504,
      -0.0031339906,
      -0.075839974,
      -0.014146914,
      0.021121966,
      0.013043941,
      0.01757415,
      0.013673895,
      -0.022560311,
      -0.011238327,
      -0.016798113,
      0.00067537086,
      -0.00990831,
      -0.009729057,
      -0.0034515818,
      0.00066400593,
      -0.016922697,
      -0.0089323325,
      -0.0038631805,
      -0.020791164,
      -0.031519983,
      0.00018545862,
      -0.0065852795,
      -0.0068405946,
      0.0020986956,
      -0.030130483,
      0.014693122,
      0.031857427,
      0.010345412,
      0.0004701763,
      -0.0010813505,
      0.0075731957,
      -0.0009941714,
      -0.14824875,
      -0.014771519,
      0.023994869,
      -0.0023825269,
      0.012778066,
      -0.0055048144,
      -0.00046801218,
      -0.029626504,
      0.005600933,
      -0.010354237,
      0.011887264,
      -0.002033575,
      -0.021978883,
      -0.011240771,
      0.01714225,
      0.13102747,
      -0.02732771,
      0.01731677,
      -0.017360404,
      -0.0061471434,
      -0.014169149,
      -0.0045399736,
      -0.007055164,
      0.010269353,
      -0.014270978,
      -0.012067743,
      0.0016705166,
      -0.021872044,
      0.0030703037,
      -0.033234615,
      0.009162921,
      -0.03171631,
      -0.0075972416,
      0.0454619,
      0.014635935,
      -0.02662623,
      0.002669395,
      0.004802947,
      -0.010523685,
      0.00080686697,
      0.008724696,
      0.0013554787,
      0.016256543,
      0.0058777938,
      0.023443205,
      -0.0012172561,
      -0.008524725,
      -0.021545729,
      0.004653776,
      0.0009117836,
      -0.020916745,
      -0.06105957,
      0.006445948,
      0.02138286,
      0.012637673,
      0.0051411996,
      -0.0045802607,
      0.023148092,
      0.0021001284,
      0.02091742,
      -0.018515542,
      0.006980049,
      -0.010871463,
      0.0053422907,
      -0.006080483,
      -0.0034314939,
      0.031168083,
      0.014501822,
      0.0055488697,
      -0.0081935655,
      0.014059873,
      0.03045415,
      -0.008934667,
      0.013073229,
      -0.027431723,
      -0.015639296,
      -0.025623098,
      0.020771034,
      0.010404481,
      0.0029666577,
      -0.006630616,
      0.008514907,
      0.0008959115,
      -0.010057816,
      0.01479724,
      0.0012279446,
      -0.00011291802,
      0.026615318,
      -0.0035577926,
      0.0049374555,
      0.011193173,
      0.012847141,
      -0.020831462,
      0.025776906,
      -0.0041539012,
      0.017240569,
      0.012307305,
      -0.016615624,
      0.030109124,
      0.00096931896,
      -0.0012576563,
      -0.01892436,
      0.0010979845,
      -0.020913687,
      0.0285093,
      0.02556591,
      0.0030092988,
      0.0120334895,
      0.008308556,
      -0.0007708353
    ]
  },
  {
    "id": "genai_cohort_python_03_Attribute_shadowing_in_python_vtt",
    "content": "Alright, so the next topic we are going to study in this object oriented programming is attribute shadowing. What is attribute shadowing? The term sounds really fancy, but the implementation is super easy. The concept is easy, but it has its own meaning. So without wasting any more time, I would like to take you directly to the code part because this is actually super easy to understand in the code, rather code rather than the diagrams and all these stuff. So let's create a new file. Call this one as and this one is attribute shadowing. Shadow shadowing. There we go. Py. All right, so we have seen a couple of things. First thing that you know that this is hot is known as attribute. Yes, these are technically variables. We have seen variables. So yeah, internally they are just variable just like this. So I can just go ahead and work on this. This is also a variable. So these are exchangeable. We can call attribute as variable, variable as attribute. But the only difference that comes up here is when you actually go ahead and have this inside a class or an object. So when it goes inside an object or technically a class, this whole thing variable is called as attribute. Yeah, the functionality remains same. There's no change at all. We just like to call it different. So that is all. So you got the first part, the attribute. But what is the shadowing for this, shadowing. Let's go ahead and have a simple class. Let's call this one again as chai. There we go. And this chai class has temperature. So each chai has its own temperature. And maybe the temperature we are going for is hot. Good enough. And what's the strength of the chai? The chai has different strength, like strong, mild, light, all of that. This one is by default strong. Strong chai. All right, let's go into this. So let's just say we have a cutting chai which comes from the chai itself. So this cutting has all the properties, temperature and the strength as well. I go ahead and say that, hey, I want to print this cutting chai as temperature. So can I go ahead and print this? You might be thinking, all right, I can go ahead and do that. No much of an issue. There we go. It gets a hot. All right, everything expected. Now what happens if I go ahead and take this cutting chai and take its temperature and instead of the hot, I convert this into mild. Surely I know that this will be changed. And if I go ahead and print this again, the cutting dot temperature and we'll put up a message as well, just like this. After changing looks good. And I also want to check one more thing. Direct look into the class. So you might have guessed already what I'm trying to do in this case I'm trying to directly access the chai and the temperature here. Fair enough. What do you think will be the values at line number and line number 11? Guess it. It's actually good activity. So what you're going to notice in this one that if I go ahead and check it after changing it smiled, that's obviously and direct look into the class, it's still hot. We have seen that already. We have had a quite discussion on this one. Now the only thing which changes now let's just say I use a del, which is a deletion operator and I go ahead and say that cuttingchai temperature now needs to be deleted and now after deleting it I want to check that what's the value of this cutting dot temperature? That's interesting. You have deleted that in line number and just after deleting it you want to check it. What could be the value? Is it unknown? Like is it none undefined? Don't get the value, get the error or we get still the mild or we get the strong. Lots of question and that's what investigative study is. And this is exactly the attribute shadowing is if I go ahead and run this, it still gets the heart. So if somehow the reference of this variable or the object attribute is no longer available, then it fall backs to the value of the attribute which was defined in the CHAI itself. That's the interesting part. Now let's go ahead and say that if we don't have the temperature or if we try to add some value and we don't have this, here. So for example, let's just say in this cutting I go ahead and say I have a cup and the cup value is going to be small, can I go ahead and print the value? Of course you can go ahead and print the value. Let's go ahead and duplicate this. And we'll say not after changing, we'll say cup size is. And we will say this will be directly cup surely doable. Very, very doable. If I go ahead and look at this, cup size is small. No problem there. We got this value. But what if I go ahead and try to delete this one very interesting case. So if I go ahead and delete the cup reference and now if I try to just print the value, what will happen in that case? This time the value doesn't exist. In the class. Now this also gives an interesting result. You need to see this. So notice here this time. This is an attribute error. The chai object has no attribute because you injected that attribute, but you actually deleted that attribute. So there's no fallback. But if it happens that the fallback is there in the chai, it will get the value the default fallback there. And that's exactly the shadowing. So if there is nothing to fallback, the shadow will fall onto the class itself. If it doesn't exist in the class, there is no fallback for it. And that is it. That is your attribute shadowing. Hope you understood this. Hope you got the concept clearly, nicely, and please rate us. Let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 Attribute shadowing in python.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/03 Attribute shadowing in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0009999603,
      0.0020906522,
      0.027458848,
      -0.06013582,
      -0.031446483,
      0.006091489,
      -0.0024498662,
      0.02493817,
      0.009150845,
      -0.0025294619,
      -0.007012723,
      -0.0070645674,
      -0.000756989,
      0.013047896,
      0.117215954,
      -0.0108537935,
      -0.028351773,
      -0.021052642,
      0.0053146156,
      -0.009221948,
      -0.005369709,
      -0.0048747906,
      0.0038135925,
      -0.0040634084,
      0.0060551134,
      0.0061580576,
      0.015942479,
      0.017802984,
      0.03881481,
      -0.008869938,
      -0.030100208,
      0.028620705,
      0.022952396,
      0.022133967,
      0.005619729,
      0.00685021,
      0.00804451,
      0.008087092,
      -0.030131381,
      -0.0073577194,
      -0.030937495,
      0.014792349,
      -0.0030984627,
      0.003208034,
      0.01772977,
      -0.022170113,
      0.025441376,
      -0.013987336,
      0.008243382,
      0.0033582037,
      0.020246422,
      0.018381283,
      -0.0133436145,
      -0.17757683,
      0.018903498,
      0.005146392,
      -0.0052635157,
      0.007158933,
      -0.0002453407,
      0.0016657322,
      -0.02528658,
      0.0130184265,
      -0.010993705,
      0.00067116495,
      0.012222481,
      -0.02935228,
      0.014297971,
      -0.0005866941,
      -0.00545493,
      0.011205188,
      0.025788393,
      0.008305816,
      -0.03520976,
      -0.0070972247,
      -0.017250655,
      -0.026937725,
      0.009119898,
      0.007570039,
      -0.011485751,
      0.016725367,
      -0.010150721,
      -0.001733684,
      0.01764675,
      -0.014748367,
      0.021934642,
      -0.0033928058,
      -0.023526387,
      -0.022519298,
      -0.00376635,
      -0.011373115,
      -0.013793728,
      0.0069261673,
      0.010056523,
      0.025799485,
      -0.0032107632,
      0.021401865,
      -0.019758852,
      0.014864014,
      -0.0068917186,
      0.010934196,
      0.01100632,
      -0.0073986324,
      -0.017303355,
      -0.0255717,
      -0.016393704,
      -0.012823207,
      -0.0072842436,
      -0.016444052,
      -0.021169726,
      0.013742778,
      0.0095320875,
      -0.01351751,
      -0.0116681,
      0.012014479,
      0.013862274,
      -0.16833594,
      0.024384975,
      -0.019336993,
      -0.015285905,
      0.0060275816,
      0.005782331,
      -0.00016664194,
      0.005688436,
      -0.0004070761,
      -0.015947303,
      0.0050636176,
      0.016306464,
      0.021891208,
      0.00006556885,
      -0.014262206,
      -0.028190587,
      -0.012780884,
      0.0016391482,
      0.0066553866,
      0.00782289,
      0.00589015,
      -0.0039085695,
      -0.012916647,
      -0.030014554,
      0.011615818,
      0.0017122542,
      0.006424814,
      -0.0005800259,
      0.02274566,
      -0.014502607,
      -0.02805506,
      -0.004039196,
      0.0029728815,
      -0.025505992,
      -0.036755487,
      0.014377628,
      -0.020810312,
      0.018086508,
      -0.012244991,
      0.014316661,
      -0.028650012,
      0.0016850492,
      0.017616024,
      -0.009108216,
      0.018970978,
      0.024773883,
      0.006544964,
      0.005435711,
      0.0029659215,
      -0.021943146,
      -0.0066656573,
      -0.010083311,
      -0.0015701512,
      0.025354136,
      -0.0069923606,
      -0.015326967,
      -0.01785939,
      -0.008485734,
      0.017093422,
      0.012969344,
      -0.012130358,
      -0.00032699495,
      0.012130804,
      0.011243619,
      -0.0036821011,
      0.00360512,
      -0.011639019,
      0.014042056,
      -0.0024024197,
      0.004717926,
      -0.008412264,
      -0.01090688,
      0.02220832,
      0.004486447,
      0.026976166,
      0.012476884,
      -0.0060280124,
      0.014608533,
      0.010406305,
      0.022521276,
      -0.010329906,
      0.0019203468,
      0.013740875,
      0.015278461,
      0.0246993,
      0.026965067,
      -0.0016365554,
      -0.011867691,
      -0.012860783,
      0.023534229,
      0.0062392936,
      0.016434962,
      -0.018277505,
      -0.0035135343,
      0.029165925,
      -0.02385733,
      0.002310093,
      0.022452213,
      -0.019773318,
      0.022119673,
      -0.012536978,
      0.009272611,
      -0.01388081,
      0.012937881,
      -0.025729174,
      0.0015720497,
      -0.00848091,
      0.003974509,
      0.017317232,
      0.016824165,
      -0.017141478,
      -0.019078337,
      -0.00035435284,
      -0.0053213844,
      -0.008337668,
      0.032009482,
      -0.004103785,
      -0.036142465,
      0.010383733,
      -0.017564017,
      0.01014899,
      -0.03299216,
      0.016020613,
      0.008071058,
      -0.006539125,
      0.0059654196,
      0.009419239,
      0.015184654,
      -0.0030546892,
      0.035836127,
      0.0035388728,
      0.0055850763,
      0.010327505,
      -0.019441253,
      -0.022750793,
      -0.004298425,
      0.0001514933,
      0.0039154436,
      -0.022017522,
      0.012780096,
      -0.021607881,
      -0.026945569,
      0.006791413,
      -0.014989353,
      -0.005810615,
      0.002343172,
      0.0029130809,
      -0.01895949,
      -0.0023375116,
      0.015596245,
      -0.007806652,
      -0.001705438,
      0.0372855,
      -0.011424859,
      0.023624687,
      0.0063245925,
      0.0177049,
      0.0028143947,
      0.01624074,
      -0.028091496,
      0.008964654,
      -0.09476861,
      0.03512867,
      -0.008374516,
      -0.024538051,
      0.018607037,
      0.014804423,
      -0.040218864,
      -0.022074541,
      -0.002726501,
      0.016720444,
      0.0022745354,
      -0.009542487,
      0.0107173035,
      -0.015390052,
      -0.0042726654,
      -0.034075916,
      -0.020944273,
      0.006795382,
      0.007841521,
      -0.025728274,
      -0.0074350946,
      -0.015826853,
      0.013160372,
      0.0013252646,
      0.024709875,
      -0.011064469,
      0.0028001643,
      0.017149935,
      -0.0009348341,
      0.013939576,
      -0.005825946,
      0.023911644,
      0.009540248,
      -0.0027304513,
      0.004622449,
      -0.0054896316,
      0.0031429832,
      -0.03417761,
      -0.0024091457,
      -0.012186194,
      0.03250783,
      -0.014311511,
      0.017155802,
      0.030563416,
      -0.0046037817,
      0.011021468,
      0.00059842685,
      -0.0063318564,
      -0.015372522,
      -0.00025356608,
      -0.010006594,
      0.009164129,
      0.03314279,
      -0.013952505,
      0.003980354,
      0.03255769,
      0.005567079,
      -0.010839343,
      -0.00034730983,
      0.013442785,
      -0.0056270845,
      0.005115209,
      -0.010644203,
      -0.008373668,
      0.029698707,
      0.0046058088,
      0.00865381,
      -0.016276361,
      0.004524325,
      0.029753242,
      0.011546271,
      -0.003911526,
      -0.002796953,
      -0.0040728236,
      0.015396952,
      -0.0011206302,
      0.0075766947,
      -0.020295538,
      -0.024844147,
      0.034195993,
      0.008299912,
      0.00014231377,
      -0.0042705196,
      0.008151863,
      0.008837373,
      0.013759206,
      0.008075911,
      -0.009026523,
      0.011118543,
      -0.030311024,
      0.013186039,
      0.011958365,
      -0.012463684,
      0.0030159936,
      -0.017954124,
      -0.00097596494,
      -0.015666217,
      -0.0101291565,
      -0.0067379763,
      0.028432019,
      -0.00959092,
      0.004438838,
      -0.045612607,
      0.0054709883,
      0.009193667,
      0.015823154,
      -0.026158204,
      0.0005090384,
      0.008101856,
      -0.007150918,
      0.012123705,
      0.0051583494,
      -0.016955616,
      -0.009981637,
      -0.012025794,
      0.0067960834,
      0.017464316,
      0.02835017,
      0.014684828,
      -0.026787592,
      -0.008604943,
      0.004994372,
      -0.008907133,
      -0.01621374,
      0.015678605,
      0.007940876,
      -0.016738633,
      0.01015227,
      -0.015336476,
      -0.024957176,
      -0.03932111,
      0.013955686,
      -0.011131048,
      -0.016398288,
      -0.015613381,
      -0.00879521,
      0.0084803775,
      0.0041828128,
      -0.022011027,
      0.004251804,
      -0.040806025,
      0.0036594865,
      0.0056692623,
      -0.013193002,
      0.0012728843,
      0.008394218,
      -0.021481212,
      -0.0038573176,
      -0.022889458,
      -0.009207618,
      -0.018104913,
      -0.03134584,
      0.0039614625,
      0.012899982,
      -0.0075977324,
      0.015337252,
      -0.012505817,
      -0.016548209,
      -0.022506613,
      -0.023742173,
      0.015646715,
      0.015723879,
      -0.008649275,
      0.009464203,
      0.040872503,
      -0.0007368588,
      0.0006747889,
      0.025046092,
      -0.018457428,
      -0.01282458,
      0.0036230285,
      -0.006965725,
      -0.033691216,
      -0.008543934,
      0.007576618,
      -0.0072253253,
      0.016567677,
      -0.0028001948,
      0.0039056027,
      0.021014038,
      0.029675292,
      0.019264894,
      -0.013370989,
      -0.0049393214,
      -0.0008728722,
      0.0012636107,
      0.01633139,
      0.006261137,
      -0.03137349,
      0.000109470275,
      0.010622507,
      -0.01322611,
      0.0039836485,
      0.013791599,
      0.012091644,
      0.005893856,
      -0.0077211973,
      0.005139294,
      -0.007603885,
      0.01606634,
      0.0038979321,
      -0.032177866,
      -0.02239787,
      -0.0067412537,
      -0.005104373,
      -0.033473328,
      -0.0085275015,
      -0.010330906,
      0.015046871,
      0.026304407,
      0.015615124,
      0.004650551,
      -0.0073460005,
      -0.0073216427,
      0.009965637,
      0.010390555,
      0.0015930977,
      -0.0054124114,
      -0.013700207,
      -0.0042627035,
      0.012740955,
      -0.026063355,
      0.017606197,
      -0.023446754,
      0.009564693,
      -0.0052874144,
      -0.010370696,
      0.008570111,
      0.004621698,
      0.010323008,
      -0.009579359,
      -0.013948373,
      -0.003745756,
      -0.0015525676,
      -0.029529212,
      -0.0126583865,
      0.019937495,
      0.00442572,
      0.0038263523,
      0.022447431,
      -0.011308079,
      -0.0052613667,
      -0.012907108,
      0.0051258877,
      0.019994125,
      -0.009096698,
      0.018513955,
      0.0022220965,
      -0.00016764253,
      0.004174374,
      0.013002934,
      0.018961111,
      -0.0051153027,
      -0.0027481152,
      -0.033683766,
      0.020228084,
      -0.017377146,
      0.017830422,
      -0.018940827,
      -0.004611031,
      0.016075999,
      0.021209583,
      -0.009964795,
      0.008026239,
      -0.0030061323,
      0.017321218,
      0.0009755533,
      -0.0014636929,
      0.010415666,
      -0.12716281,
      -0.012216746,
      -0.006290899,
      0.004717181,
      -0.00038644506,
      0.012043731,
      0.0030232044,
      -0.03646129,
      0.018045587,
      0.001970119,
      0.032988504,
      0.008145642,
      -0.0038685373,
      -0.017475614,
      0.024261296,
      -0.0053295875,
      0.008596891,
      0.00638072,
      0.011355699,
      -0.0056631663,
      0.00040796044,
      -0.014318673,
      0.008671433,
      0.0040910747,
      -0.013409647,
      -0.021392005,
      -0.0020867346,
      -0.011322483,
      -0.0069891787,
      -0.0008303886,
      -0.018789316,
      -0.008262259,
      0.0030603656,
      0.027240817,
      0.007957104,
      -0.01995789,
      -0.020313822,
      -0.01253582,
      0.018181343,
      0.020762943,
      -0.007921686,
      -0.023273198,
      0.0269332,
      -0.0034981354,
      -0.000022753815,
      0.015217657,
      0.03476392,
      -0.00040817336,
      -0.010180398,
      0.024469282,
      -0.02858045,
      -0.014709267,
      0.003689513,
      -0.050800987,
      -0.03016439,
      -0.00610679,
      0.019877747,
      -0.007005063,
      -0.011098571,
      -0.020477202,
      0.0007457206,
      0.007643225,
      0.02612354,
      0.016151022,
      0.016979663,
      0.008243251,
      0.026001304,
      0.0040603117,
      -0.009622492,
      0.0017257477,
      -0.01752997,
      0.016184647,
      -0.009713961,
      0.0046688956,
      0.016718693,
      0.00071611954,
      -0.0050315927,
      -0.0056450516,
      -0.02395054,
      -0.00857818,
      -0.017140696,
      -0.008938976,
      -0.0844333,
      -0.03985167,
      0.009122633,
      0.023887739,
      0.016855868,
      0.021086102,
      -0.010803536,
      0.0152819725,
      0.0037174283,
      -0.007907647,
      -0.0046413154,
      0.01133207,
      -0.00012032899,
      -0.010083987,
      -0.004135188,
      -0.007921054,
      -0.013702375,
      -0.018147016,
      -0.026029523,
      0.00016259476,
      0.0028934125,
      -0.025473159,
      -0.0126110045,
      -0.023848351,
      0.013329882,
      0.021540117,
      -0.0034314014,
      0.025817405,
      0.004608767,
      0.0044983584,
      -0.0008626214,
      -0.1393003,
      -0.00068724714,
      0.008449663,
      -0.011986488,
      -0.009318541,
      0.0056976355,
      -0.014246666,
      -0.017145054,
      0.0121835945,
      0.004970274,
      0.02151187,
      0.009683387,
      -0.00044892673,
      0.00342059,
      0.014021175,
      0.12936138,
      -0.013340142,
      0.014289916,
      -0.020561341,
      0.0052413996,
      0.0013921307,
      -0.010130126,
      0.00887067,
      0.0161694,
      0.010400807,
      -0.010293716,
      -0.004386345,
      -0.003544902,
      -0.000490156,
      -0.029823393,
      -0.0037062217,
      -0.03810777,
      -0.0063982857,
      0.035464223,
      -0.0065703103,
      -0.012870404,
      0.011629617,
      0.014860648,
      -0.0071207746,
      -0.0068804338,
      0.015557941,
      -0.010564418,
      -0.0020843153,
      -0.011032676,
      0.010649908,
      -0.008694611,
      0.008191787,
      -0.015468003,
      -0.016739273,
      -0.0057956506,
      -0.026350308,
      -0.054488532,
      0.012619457,
      0.001051647,
      -0.011940788,
      0.002743623,
      0.007335894,
      0.038264897,
      0.016474383,
      0.00974183,
      -0.0005032355,
      -0.00029449866,
      -0.020010592,
      0.01205672,
      0.014156651,
      -0.0029137018,
      0.019527828,
      0.029899351,
      -0.005004615,
      -0.0014449536,
      0.016748764,
      0.022097468,
      -0.013976235,
      0.017468248,
      -0.006764478,
      -0.01633391,
      -0.016442139,
      0.015668536,
      0.0061942916,
      -0.004728894,
      0.007923541,
      -0.006038409,
      0.005669807,
      0.0034478393,
      0.020689309,
      -0.0076947487,
      -0.0039030984,
      0.026984919,
      0.0020408407,
      0.0026478902,
      0.015500836,
      -0.011914884,
      -0.020487126,
      0.017384315,
      -0.010924709,
      0.013758367,
      0.0048810593,
      -0.019035904,
      0.030366987,
      0.02077881,
      0.0085541345,
      -0.015960982,
      -0.023628596,
      -0.034364507,
      0.014628938,
      0.031243404,
      -0.010310038,
      0.014902104,
      -0.013105018,
      -0.01625715
    ]
  },
  {
    "id": "genai_cohort_python_04_Self_argument_in_python_vtt",
    "content": "Alright, so next up we want to see about the self argument. And so far we have seen that we are just creating properties. Now we want to see how we can create methods. And don't you worry, methods are just a fancy name to functions. If they are created inside the class, they are called as methods. Again, there is no right and wrong. You can call them functions as well. There is no big deal. But most of the time we want to be technically accurate. There are a lot of names in the world of programming jargon, so I just wanted to make sure that it's there. Let me share the screen and actually we can just directly go onto the code file without much of the explanation. That would be super simple for you. Let's create a new file and call this one as This is self args. I'll show you what the self args means or in short for self arguments. Let's open this up and the first thing we'll do is make sure that the AI is not bothering us. So, so let's go ahead and create a class. So this is our class and we're going to create a class that call as chai cup. Yeah, we are taking a different route this time. Not just chai chai cup. I know that the size of a chai cup is going to be, let's just say Wondering what this is? We are internally referencing as milliliters. Feel free to use any other size, like medium small, whatever you wish. Now I do have a method inside this. Now notice the indentation. This is the most important part. But we are defining a method, but we can call it as function as well. Nobody's going to judge you except interviewer. I will call this one as describe. So what this describe function does, it actually goes ahead and reference the size and print it nicely that this is milliliters of cupchay, something like that. So for this, the first thing that you always do in all the methods is you write self. This is the step one. What is this self that we are passing in here? Self is a reference to all the parameter, all the properties that you are defining here. It could be one, it could be many as well. Just after passing this self, you can actually refer to any variable that you have declared within the class. After you come up here you can simply go ahead and say I want to return a simple formatted string that says a. And now I can refer to this. But how do I refer? Just say size. Nope. You actually don't do this, you have to refer it like this, self dot and then you see the size. Whenever you are doing anything inside the class and you want to refer to any function or any property variable, you use self, then a dot and then only you refer that. And this says ML cup Chai. All right, ML Chai cup would be better. Chai Cup. There we go. That is it, that is all it takes. How do we use it? Surely we can create a simple cup that comes from chai cup. Just like that, we have created an object from the class. Now all I have to do is just print the value just like this and I can say cup dot describe. It's a method, so you execute it just like that. Super simple. I can just go ahead and do more fun stuff on this. I'll show you that actually I can refer to this directly as well. So that's also possible. Instead of creating an object, I can directly refer to my class. And you will do this quite a lot in your Python code. And then further I can just go ahead and say describe. But this is going to give you an error. We need to see the error as well. So first we'll just comment this down and we'll see what the error actually comes up and how it works. So let's first run this as it is. So there we go, we'll just go ahead and say Python and please run the This is as it is, as expected, a 150ml cup of chai. But what happens when I go ahead and try to describe? I know that this is a cup Chai Cup. It is my class name. I'm well aware of it. I do have a describe method as well. It should work technically. All good. But you forgot one thing. We are passing a parameter self here that is really important. So what good goes wrong when I don't go ahead and pass on this? It says, hey, the Chai cup describe is missing one positional argument, as we said, this self here. So how can we pass on. Now this is a positional argument, but also it's a type of self. That means it is referencing to the class as of now right now, but can also refer to the object. Notice here we created one object cup here, so I will give you the context right now. It doesn't understand that, hey, who is calling the describe? And if an object calls the describe? Okay, I got the context that this guy is calling it, but there could be hundreds of other objects as well. For example, if I go Ahead and say this is going to be cupto and this is also a chicup. And if same thing happens, somebody is trying to print, that cup two is also calling the describe just like this. There should be some difference between the line number nine and line number So this is also calling the describe method. This is also calling the describe method. Which should I listen, maybe this has modified my size to milliliters. That could be the case. So we need to pass on the context, we need to pass on the reference. And when this object calls this method describe, it automatically passes its references. When this Cup passes to the describe, it passes its reference. But when we call it directly from this, it has no idea what reference should I take up and how to fill up these variables. So one quick solution that could be that, hey, I'll just go ahead and pass on cup to you and I will comment this for a moment now that you understand the context of it. There we go. Now if I go ahead and run this, this says okay, I am 150ml of cup chai. That's great, but maybe you have modified this in the Cup So for example, in the Cup you came forward and says the size value is going to be just milliliters. Maybe we are showing some frugality here. So I'll just go ahead and say Now if I go ahead and run this describe, it again needs some context to be passed on. I'll say that, hey, I'll pass you the cup too. So there are two different references of this one. I'll go ahead and run this. And there we go. And my bad, we actually shouldn't be passing up like this. So cup2 dot describe and where is it founding the mistake Describe. Let me just quickly. Oh, my bad. It shouldn't be calling as an object, it should be calling up as a class. My bad. I'll take that responsibility fully. And now if you run that, we can see that one is 150ml and another one is 100ml. This is bottom one is 100ml. This one is 150ml. So both are totally accurate way of calling the methods inside the class. In one you are calling via the object so it has the context. But on the other hand you are calling it directly from the class itself. The class doesn't have the context so you have to pass on the context. And almost every method that you are going to pass like this. Almost all the class they are almost like 99% of the time they do held the self have the self reference. So the easiest way is always to create an object and then call the methods. But there are exceptions. They're always there. That is it for this video. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 Self argument in python.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/04 Self argument in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.007696535,
      -0.006352034,
      0.02605229,
      -0.059454285,
      -0.0007562323,
      -0.015131747,
      0.0024468347,
      0.028525019,
      -0.0023046576,
      -0.0006907536,
      -0.014963464,
      -0.017206198,
      -0.013098205,
      0.022750188,
      0.1160757,
      -0.013513115,
      -0.008045805,
      -0.014770694,
      -0.0061741294,
      -0.019720871,
      -0.010009209,
      0.020969292,
      0.01069885,
      0.023511207,
      0.02173316,
      0.0035687278,
      -0.0033900607,
      0.010850117,
      0.039325844,
      -0.014537234,
      -0.025553193,
      0.017642552,
      0.0059910314,
      0.016778948,
      0.01587278,
      0.012522623,
      0.01734308,
      -0.0001213445,
      -0.01069336,
      0.0060919337,
      -0.029140837,
      -0.00008332846,
      -0.00071225,
      -0.00030200853,
      0.019329553,
      -0.03004112,
      0.01773621,
      -0.022093238,
      0.0020994332,
      0.013148686,
      -0.0028539307,
      0.006928067,
      -0.016487874,
      -0.1735552,
      0.018769395,
      0.0085365055,
      -0.0069496324,
      0.0064679706,
      -0.0045620264,
      0.015535692,
      -0.0146910725,
      0.019249652,
      -0.01602907,
      -0.0024560832,
      -0.0026563394,
      -0.025892006,
      0.02853379,
      0.013393621,
      -0.005998819,
      0.008113831,
      0.026737995,
      0.01534395,
      -0.014410775,
      -0.015245353,
      -0.015522757,
      -0.020777749,
      0.005685242,
      0.0049268575,
      0.008015113,
      0.018632358,
      -0.0038856599,
      -0.01931618,
      0.0014418279,
      0.0054621384,
      0.018884335,
      -0.024289621,
      -0.030412177,
      -0.02867935,
      -0.0024986851,
      -0.015388943,
      -0.0026697053,
      0.013154281,
      -0.00047162425,
      0.012178547,
      0.0026700597,
      0.00048023686,
      -0.036185298,
      -0.007201351,
      -0.018180307,
      -0.0046479637,
      -0.012701176,
      -0.009148519,
      -0.0344871,
      -0.0029448122,
      0.0062551643,
      -0.0066610263,
      -0.006184647,
      0.0062471093,
      -0.03166172,
      0.0035816038,
      0.0053732074,
      -0.032277573,
      0.010538624,
      0.009437552,
      -0.0013507602,
      -0.17953782,
      0.010133546,
      -0.0064740926,
      0.0010332506,
      -0.006805781,
      0.006603314,
      0.001052071,
      0.0035721683,
      0.003273193,
      -0.013314999,
      0.009564842,
      -0.007184734,
      0.008052542,
      0.015926532,
      0.0091407355,
      -0.030171286,
      -0.024779163,
      0.00720804,
      -0.00005376261,
      0.0012993965,
      0.022362852,
      -0.004653617,
      -0.010564285,
      -0.016484711,
      -0.0015554148,
      0.011593575,
      -0.007503329,
      0.0023614608,
      0.026364777,
      -0.009558917,
      -0.013182612,
      -0.0034787704,
      -0.006129797,
      -0.041706577,
      -0.033513978,
      0.020096496,
      -0.002265118,
      0.018472217,
      0.0020465874,
      0.0059643285,
      -0.01195795,
      0.016835513,
      -0.010181669,
      0.0077654375,
      0.015631186,
      0.0037788155,
      0.01621987,
      0.0044258144,
      0.009161285,
      -0.013834217,
      -0.001506474,
      -0.010452308,
      0.020156546,
      0.025449583,
      0.034092862,
      -0.0015160793,
      -0.023577709,
      -0.00037027083,
      -0.01223067,
      -0.010271216,
      -0.007833634,
      0.005826078,
      0.00719362,
      0.0051196357,
      -0.019294668,
      0.0027553802,
      -0.017004315,
      0.01829565,
      -0.01937226,
      0.022746237,
      -0.006875042,
      -0.009784317,
      0.01599447,
      0.018076373,
      -0.004555339,
      0.02108242,
      -0.00023781903,
      0.02309648,
      0.011405286,
      0.011901356,
      -0.0071470854,
      -0.014013115,
      -0.008333186,
      -0.008707774,
      0.022446467,
      0.023921246,
      -0.0012365605,
      0.0057467753,
      -0.022597011,
      0.012794537,
      0.0054925606,
      0.012632894,
      -0.00445152,
      0.0047683516,
      -0.002676933,
      -0.029870879,
      0.0011547043,
      0.010856854,
      0.023675727,
      0.023663167,
      -0.0047796867,
      0.020608228,
      -0.01413279,
      -0.0024562897,
      -0.016109519,
      0.019860204,
      0.007186992,
      -0.0038224421,
      0.0063860384,
      0.010037095,
      -0.0042283516,
      -0.0011037744,
      -0.005826042,
      0.010101521,
      0.027216563,
      0.019827323,
      -0.006168626,
      -0.014663053,
      0.0012522495,
      0.005910986,
      -0.0033825594,
      -0.024327934,
      0.03153453,
      0.004142842,
      0.0024331254,
      0.0008711786,
      -0.009549204,
      0.0004846455,
      0.005897009,
      0.020496158,
      0.018437319,
      0.001335881,
      0.009635065,
      0.0053705997,
      -0.024934435,
      -0.030311286,
      -0.011860625,
      0.013107237,
      -0.0063558565,
      0.007880012,
      -0.028216928,
      -0.010518279,
      -0.0076514794,
      -0.03544605,
      -0.006016189,
      0.0024933277,
      0.008538584,
      -0.009869007,
      -0.0030516468,
      0.013646259,
      0.008338575,
      0.0024719408,
      0.024658669,
      -0.0059767407,
      0.023602087,
      0.01946975,
      0.0017034413,
      -0.0019282763,
      0.030258331,
      -0.031684566,
      0.008889524,
      -0.09726584,
      0.041874822,
      0.004633371,
      -0.042689838,
      -0.002540685,
      0.0063207806,
      -0.04819638,
      -0.003731794,
      0.012072539,
      0.021803366,
      0.010546134,
      0.009837299,
      0.018260786,
      -0.015849812,
      0.001457606,
      -0.0054201013,
      0.006795845,
      -0.020632094,
      0.03068768,
      -0.015580543,
      0.017284613,
      -0.01740404,
      0.010940573,
      0.010551735,
      0.011540967,
      0.0075959386,
      0.009644769,
      0.018943192,
      -0.016922917,
      -0.018565264,
      0.008356035,
      0.00970955,
      0.004362227,
      -0.023531819,
      0.001962587,
      0.006697856,
      0.015438579,
      -0.019613411,
      -0.017192895,
      -0.0026564826,
      0.005479214,
      -0.008464272,
      0.0065354425,
      0.033918165,
      -0.0067229345,
      0.031776648,
      -0.0035367173,
      -0.0028665697,
      0.010744043,
      0.012962421,
      -0.002444055,
      -0.003227721,
      0.014507687,
      -0.016817011,
      0.005574608,
      0.01503786,
      0.0036488615,
      -0.03890791,
      -0.002100055,
      0.0112392185,
      0.00213961,
      0.015421551,
      -0.0010006593,
      0.006650023,
      0.033645667,
      -0.018093565,
      0.032830518,
      -0.0010147115,
      -0.018878708,
      0.013080554,
      0.03142442,
      0.00030009905,
      0.007098056,
      -0.020395346,
      0.008528676,
      0.0076541346,
      -0.017453695,
      -0.005056784,
      -0.022276428,
      0.028340645,
      0.017469835,
      -0.006624161,
      0.008926644,
      0.01827023,
      -0.0034595183,
      0.01828471,
      -0.009677517,
      -0.000044349414,
      0.007276726,
      -0.011396725,
      -0.0011257578,
      0.012731103,
      -0.007222706,
      -0.0012845332,
      -0.0030208726,
      0.009573141,
      -0.030323068,
      -0.0016848046,
      -0.0170973,
      0.014724868,
      -0.019776639,
      -0.007029911,
      -0.005162297,
      -0.015438473,
      -0.0074260016,
      0.0027660613,
      -0.041461974,
      -0.011964265,
      -0.010598418,
      0.012383553,
      0.012384509,
      -0.008855132,
      -0.035820547,
      0.0025498248,
      -0.013555012,
      0.002442999,
      0.0045466814,
      0.025839398,
      0.02559607,
      -0.002723132,
      -0.008417204,
      -0.006570692,
      -0.014977402,
      0.002336304,
      -0.000544356,
      0.006460468,
      -0.015275107,
      0.0033073009,
      -0.0004481794,
      -0.042686787,
      -0.03797623,
      0.004657524,
      -0.01657786,
      -0.013441846,
      -0.010046068,
      -0.012248607,
      0.023379672,
      0.0051119514,
      0.012902476,
      -0.0028742296,
      -0.03768443,
      -0.007829615,
      0.00835314,
      -0.00038378747,
      -0.0073381145,
      0.025155852,
      0.0003792006,
      -0.0044658706,
      0.0046407194,
      -0.027075524,
      -0.018461032,
      -0.004490418,
      -0.0044352887,
      -0.010275518,
      0.0037591888,
      -0.0013209216,
      -0.0064830473,
      -0.013278755,
      -0.0063809417,
      -0.028197223,
      0.0139546925,
      0.010385406,
      0.0009750575,
      0.01068255,
      0.017767552,
      0.02180399,
      0.0092506595,
      0.0138925845,
      0.0032905736,
      -0.00042742168,
      -0.017498536,
      -0.008554148,
      -0.028922625,
      0.003479206,
      -0.0053245453,
      -0.0057411874,
      -0.0035810147,
      -0.023441538,
      0.009312467,
      0.0019710958,
      -0.0018885707,
      0.0044419407,
      -0.006330296,
      -0.006347257,
      -0.007028226,
      0.014226236,
      0.007245445,
      0.00028500377,
      -0.030849237,
      0.006927547,
      0.011585188,
      -0.024201324,
      -0.0036368526,
      0.008832107,
      0.020586442,
      -0.0044845305,
      -0.0022267823,
      0.005575164,
      -0.012598212,
      -0.0016942683,
      -0.005234007,
      -0.004238912,
      -0.02550893,
      -0.008268998,
      0.013446911,
      -0.016435182,
      -0.008198637,
      -0.008029764,
      0.00087856903,
      0.012076431,
      0.018663397,
      0.011286267,
      -0.01931256,
      0.01957342,
      0.030137207,
      0.01280325,
      0.028420193,
      0.005499047,
      -0.031225573,
      -0.015062172,
      0.01244659,
      -0.0018406335,
      -0.0041496167,
      -0.029445877,
      0.007716203,
      -0.0041120965,
      -0.012213233,
      0.0032323478,
      0.005551511,
      0.014777857,
      -0.023730867,
      0.0029968712,
      -0.011303603,
      0.0037782516,
      -0.0037062683,
      -0.012455406,
      0.018306784,
      0.015219671,
      -0.015523013,
      0.035518993,
      -0.013022086,
      0.00605441,
      -0.012679216,
      -0.004057329,
      0.00957397,
      0.007602491,
      0.012054148,
      0.007099783,
      -0.000008658073,
      0.0022215396,
      0.024224712,
      0.01487778,
      0.007093876,
      -0.010597589,
      -0.023442522,
      0.014724262,
      0.007189988,
      0.019660167,
      -0.0010256518,
      -0.0011815164,
      0.030089356,
      0.0100570405,
      -0.017305806,
      -0.0055157337,
      -0.015550239,
      0.0038245642,
      -0.0048357877,
      -0.0030270661,
      0.0066932035,
      -0.14028007,
      -0.006145641,
      -0.03480072,
      0.009425121,
      -0.012043825,
      -0.0046270043,
      -0.0053634797,
      0.0047453423,
      -0.0074879923,
      -0.026738567,
      0.025063816,
      -0.009918463,
      -0.011791694,
      -0.01138647,
      0.01850689,
      0.009933535,
      0.0090630045,
      0.028171781,
      0.020121323,
      0.010047423,
      0.0009691484,
      0.007876979,
      -0.011100854,
      -0.001314388,
      -0.0141890235,
      -0.004373528,
      0.0019315127,
      -0.00043872607,
      0.0016483028,
      -0.0064511215,
      -0.02472334,
      -0.0181604,
      0.0011378026,
      0.0056933328,
      0.018826442,
      -0.015339304,
      -0.012730697,
      -0.005513776,
      0.024570726,
      0.027545776,
      0.006291215,
      -0.025701802,
      0.019321484,
      0.0076695257,
      -0.01774706,
      0.019223576,
      0.011054413,
      0.00217634,
      -0.0043810806,
      0.04757994,
      -0.019963082,
      0.0041145924,
      -0.0015424049,
      -0.027568087,
      -0.0048407703,
      -0.008018056,
      0.022234516,
      -0.0032075874,
      0.0014008222,
      -0.0070818895,
      0.010182059,
      -0.007943252,
      0.011171405,
      0.025802176,
      0.0014770926,
      0.003160595,
      0.024579024,
      0.0030723547,
      -0.023309477,
      0.016820278,
      0.0032921531,
      0.0033171696,
      -0.011910055,
      0.019248387,
      0.011369597,
      -0.0084907515,
      -0.019493239,
      0.021138864,
      0.004661146,
      -0.00060885487,
      -0.024183098,
      -0.00854458,
      -0.06600843,
      -0.021229519,
      0.008012821,
      0.019069675,
      -0.002553009,
      0.01973492,
      -0.02215031,
      0.008125093,
      -0.009275336,
      -0.009469846,
      0.008430381,
      -0.013655495,
      0.01879486,
      0.0071011935,
      -0.015088178,
      -0.014243856,
      -0.00069351797,
      -0.012075259,
      -0.018399717,
      -0.0069270814,
      0.021304294,
      -0.014704698,
      -0.01621185,
      -0.008764435,
      0.014923537,
      0.03944665,
      0.0034879143,
      0.011800889,
      -0.012967967,
      0.008078928,
      0.0071740136,
      -0.15037425,
      -0.0033011471,
      0.0062601333,
      0.020186245,
      0.014497321,
      0.018652733,
      -0.009354833,
      -0.005416172,
      0.0053715273,
      0.0043982286,
      0.02209914,
      0.016596222,
      -0.015486046,
      0.010173002,
      0.020343343,
      0.11731878,
      -0.016398365,
      0.022255935,
      -0.010811994,
      -0.010791319,
      -0.005439645,
      -0.018141009,
      -0.032922287,
      -0.0031005698,
      -0.0011245625,
      -0.013275636,
      0.008078426,
      -0.00011976767,
      0.014148703,
      -0.012484363,
      0.0110470615,
      -0.0035224666,
      -0.027031956,
      0.052231822,
      -0.0072906483,
      -0.011351296,
      -0.011718072,
      0.0034045035,
      -0.015034145,
      -0.008699296,
      0.0147583885,
      -0.011294813,
      0.0031403138,
      -0.004843959,
      0.017626166,
      -0.0046355035,
      -0.025444224,
      -0.0029353788,
      0.008619539,
      -0.008913822,
      -0.016076665,
      -0.04680589,
      0.0038892545,
      -0.007590577,
      -0.014259025,
      0.0036043162,
      0.01032412,
      0.0055756513,
      0.007701496,
      0.019163223,
      -0.007321023,
      0.0037972834,
      -0.01628588,
      0.0083347075,
      0.00935888,
      -0.013301162,
      0.014612236,
      0.02163845,
      -0.00025039303,
      0.0036832097,
      -0.0047252653,
      0.031233441,
      -0.0073872153,
      -0.0020096668,
      -0.0004639042,
      -0.006348826,
      -0.0034119484,
      0.033130385,
      0.0014696803,
      0.0035770703,
      0.0052590673,
      0.0048119235,
      0.012755927,
      -0.00384494,
      0.021416945,
      0.022386119,
      -0.0123155,
      0.02580567,
      -0.011907109,
      0.018677514,
      0.007910551,
      0.0004640536,
      -0.01978344,
      0.022202851,
      -0.006850167,
      -0.0066505084,
      0.010483004,
      -0.0135369105,
      0.019517316,
      -0.006104166,
      -0.0062281056,
      -0.015430595,
      0.0011943845,
      -0.017869055,
      0.0084524695,
      0.019457456,
      0.0066023786,
      0.014826927,
      0.004210657,
      -0.022825973
    ]
  },
  {
    "id": "genai_cohort_python_05_Constructors_and_init_in_python_classes_vtt",
    "content": "Hope you are having fun because I am having so much fun in teaching all of these context and great examples as well. Hope you are enjoying them and you have rated us as well. This is. I know I've been saying this a lot, but if you look at the number of ratings and number of people who are enjoying the courses, there is a strike difference between them. And we pour in all of our heart and soul into this. Just small kind words will make this course as world's best course and people will be able to benefit from it. That's all I want. All right, so let me take you onto the screen again and first of all, what we're about to see, we're about to see the INIT function, which is a pretty interesting and important function. And I'll show you why is it so much important. We again, don't need to have any diagrams for this. Notice this here. So this is the function or the class that we have created. As soon as I create this object, it automatically gets to property the size and the describe. It has access to all of this. But maybe I want to change it something. I want that. Hey, whenever you create an object, just pass me some data so that I can make the first reference really nice. Maybe every single object that creates have this property always. How do I do this? This is known as process of initialization. Initialization in short, is known as init. We'll create a different file for this one. Don't you worry, you'll get the reference of this. So we'll call this one as and we'll call this one as init objects py. So how do we do this? First of all, let's say we want to have a simple chai order this time. So for the order it makes sense. And the very first thing that you do before you declare any variable or anything, you can actually do it afterwards as well, no problem. But the name of the method always remains same and there are couple of terminologies as well. So. So the moment you actually create a copy of this class just like this, there is a process to it. This is known as I want to init it. Init, which is also known as initialize. But in the world of Python, this is a reserved keyword, so you actually suffix it and prefix it by 2/ and the whole process is known as I am creating an object. So initiate, initiate, initiate an object for it. And the way you define it is through a reserved keyword or a reserved method known as constructor. Yeah, there is a name for it. We don't call it constructor as per se. In the world of Python itself, this is known as. Yeah, it is actually known as constructor. But the way how we do it is via this init. So this, what you're doing is you, you are creating a constructor Y init. Or you can say, I'm, creating a constructor Y init or init creates a constructor, it just turns, no big deal there. So this method needs to, and needs to always have a name of underscore, underscore init. As you can see, if I just take the auto suggestion, it automatically fills it with the self as well. Self always needs to be there in everyone, but we'll write it so it in it. Then underscore, underscore. Then create a method, call it as self. Any method that you're creating needs to have a self and we'll pass it just as a moment. So this is a valid instructor, but it doesn't do anything. It needs to do something at least. So what we can do is we can just say that, hey, whenever you're creating an object, you just pass me, the type and we can actually use type underscore. I'll show you what it means and how does it work, and I'll just go ahead and create a regular variable size. So so far you have seen the variable names or the properties name as just size or self. What is this type underscore? I'll show you. So what we can do is a, common syntax that, hey, this self dot type, I haven't created the type variable, but the value that I'm going to go ahead and provide you is type underscore. So this is almost like saying that I do have a variable known as type, which was having a, empty value, empty string, none. There could be a variety of values, is there? But this is so much redundant that you don't actually create a variable just like this. If you create your variables for the first time here, that is also totally allowed. So each of the object will have a property known as type, whose value you are going to pass it like this. And then I will go ahead and say I have a one more variable, self dot size. And I know this variable also doesn't exist, but since we are in a very special method known as constructor, we are allowed to do so. In other methods you are not allowed to do so. So I'll go ahead and fill it up with the value size. It is a very common thing that you Name these variable exactly same as you are declaring up here. Surely I can change the name here as well, but that's not a good practice. Let's go ahead and define another one. So I'll just go ahead and say summary. And again, this will also have a self just like this. And I want to return a formatted string that says, what should it say? Self dot size. And it will say ML of and then we'll go ahead and say self dot type chai. All right, so you got this. We are simply saying that what is the size of the type of chai that you are getting to us? A really very vague example, but it's okay, it works. Now let's go ahead and create an order. This time it's not just about saying that, hey, chai order, and that's it. This time we have to pass on some arguments. You don't have to pass on self. That is okay, I'll just go ahead and say I will have a masala, masala chai. And that will be of size That's all I have to do. Let's use a print statement for the order. I can use a method of summary, execute that. So that gives me the value. Now similarly, I can go ahead and provide the more values up here. So let me go ahead and have this order and let's call this one as order two. And this will be like chai order. And this one, my favorite one. Ginger. I'll take a little bit more. I think milliliters. milliliters is already too big. milliliters. All right, and I'll just print this and in the printing I'll say order two dot summary and execute that. All right, so this is the code that we have. And don't you worry, I haven't forgot this underscore. I'll come back onto this in a minute. So I'll just save this and I will go ahead and run this. This time we'll just say Python 3, run the and all of this. So this works fine. Now let's come back. This is a pretty good example and demonstration of how the constructor works, the init files and whatnot. Now you might be wondering, what's this type about? Why have you given an extra underscore to this type? Does this work? Yeah, but you see an extra formatting. Why this extra formatting? Because you forgot one very interesting thing which I, showed you in the very first class, that actually type is an operator in The Python world, it's a function which gives me the type of whatever you ask it. It is supposed to be used with the function, but since in our case it made sense to use the type, that's why I used the type. But I actually added a trailing underscore. This is a common practice in production as well. Sometimes you want to use the variables which make sense for our software that I want to use type, or I want to use init or I want to use def. Don't use def. Try to avoid it. But I just showed you this very special case. I've seen this in production so many times. So I thought, if I'm not going to discuss these production things with you, who will? And these are small gotchas which. Oh, I knew about the type, but I forgot momentarily about it. All right, you got it. This is simple order which creates a new instance of the class. We are getting technical now. We don't call it as object, we call it as instance of a class, which takes masala as argument. And as argument, which are passed as a parameter. How technical we are. And we just assign these values. If you have more variables, you can just go ahead and define them. If you have more functions, you can just also go ahead and. And define them. So this is all about how we get the constructors and INIT objects or INIT values in the world of Python. That is it for this one. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 Constructors and init in python classes.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/05 Constructors and init in python classes.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0056879674,
      -0.0032912826,
      0.053612493,
      -0.061056912,
      0.0035852229,
      0.002164619,
      -0.0022224833,
      0.023489837,
      0.002056004,
      -0.021654783,
      -0.018145286,
      -0.0006824842,
      0.009797769,
      0.012501637,
      0.13200992,
      -0.012903501,
      -0.015129061,
      -0.030263105,
      0.009710237,
      -0.010633638,
      -0.014147512,
      0.020208681,
      0.014753485,
      0.0073739286,
      0.012830812,
      -0.016491562,
      0.0070424043,
      0.014210238,
      0.039093558,
      -0.010959972,
      -0.02841824,
      0.014577856,
      0.012689809,
      0.03315772,
      0.01726241,
      0.014735258,
      0.011846564,
      -0.0063044024,
      -0.017362736,
      -0.0077223466,
      -0.01931235,
      0.013741123,
      -0.00033169673,
      -0.0014995196,
      0.020094495,
      -0.029156368,
      0.014664449,
      -0.014713355,
      0.0015033003,
      0.015662428,
      -0.0012358266,
      -0.004213968,
      -0.0063530966,
      -0.15917595,
      0.016865522,
      0.005861582,
      0.017665138,
      -0.013013741,
      0.005740386,
      0.009021391,
      -0.022569278,
      0.014645246,
      -0.028972749,
      0.004611276,
      -0.009758457,
      -0.0179309,
      0.022573879,
      0.0023448626,
      0.0052283765,
      -0.00016174739,
      0.027798412,
      0.008494153,
      -0.0052418057,
      0.00056661153,
      -0.0076262183,
      -0.02516989,
      0.018544223,
      0.0042789155,
      0.0063948412,
      0.0152022485,
      -0.00016261965,
      -0.0028819565,
      -0.0029246425,
      0.010120847,
      0.020458704,
      -0.0115320785,
      -0.023299238,
      -0.022930743,
      0.005640668,
      -0.012344085,
      -0.01134108,
      0.012926994,
      0.006014489,
      0.011778954,
      -0.026528519,
      0.0024845297,
      -0.005760739,
      0.00022700889,
      -0.025108058,
      0.0011802505,
      -0.0020134628,
      -0.0110791875,
      -0.03342952,
      -0.02058272,
      -0.00038382038,
      -0.0019919164,
      -0.0081215305,
      -0.0039676935,
      -0.021235883,
      0.0053122626,
      0.011238199,
      -0.0029282824,
      0.013656923,
      -0.0047864555,
      0.0065315072,
      -0.17005742,
      0.007969604,
      -0.004820921,
      -0.021917183,
      0.004013016,
      -0.0028040863,
      0.008015021,
      0.013718247,
      0.0043217163,
      0.013831221,
      0.012329196,
      0.0017571572,
      0.019133916,
      -0.0019580289,
      0.0060249674,
      -0.018178102,
      -0.021233272,
      0.009769165,
      0.010715631,
      0.007830229,
      0.014801537,
      0.002233966,
      -0.02190409,
      -0.02205063,
      0.0032062999,
      -0.00019099584,
      -0.005164991,
      -0.016866906,
      0.048777882,
      -0.0074816057,
      0.0010929585,
      0.0020620667,
      0.0006915244,
      -0.030560466,
      -0.035524428,
      0.010899997,
      -0.015612822,
      0.01860257,
      0.007921438,
      0.0235965,
      -0.02380881,
      0.00004573818,
      0.0032089439,
      -0.018362759,
      -0.00009370421,
      0.007930644,
      0.01788341,
      -0.0009603721,
      0.017299451,
      -0.00733384,
      -0.010380866,
      -0.00999071,
      0.012442677,
      0.02146296,
      0.016821593,
      -0.014074824,
      -0.0067286217,
      -0.00020138896,
      0.013294565,
      -0.016031882,
      -0.0044678277,
      0.008028611,
      -0.014969883,
      0.02351271,
      -0.023838632,
      -0.004493412,
      -0.025614604,
      0.0063900156,
      -0.0108288955,
      0.009276509,
      0.0003669304,
      -0.014790628,
      0.01028277,
      0.015755005,
      0.0017574421,
      0.0074008363,
      0.0069901445,
      0.030302431,
      0.00024971203,
      0.011398175,
      -0.019587934,
      0.001837472,
      -0.01066242,
      -0.0078650005,
      0.020529548,
      0.035718463,
      0.0015386323,
      -0.0032517863,
      -0.015537981,
      0.030899718,
      -0.00321365,
      0.027116915,
      -0.027180038,
      0.0041826544,
      0.0031757718,
      -0.030360434,
      0.00649098,
      0.01187386,
      0.0059054615,
      0.022049166,
      -0.009234875,
      0.005812243,
      -0.004969785,
      0.012495325,
      -0.0122975465,
      0.0042387904,
      0.005615943,
      0.001389119,
      0.031550992,
      0.0096144555,
      -0.009344568,
      -0.013663825,
      -0.0029784054,
      0.00082982006,
      0.015297245,
      0.008205563,
      -0.005238395,
      -0.016481934,
      0.012474277,
      0.020419141,
      -0.004615121,
      -0.005828655,
      0.022175476,
      -0.004063985,
      0.0027983547,
      -0.0070870747,
      0.0014640696,
      0.005244425,
      0.0076574627,
      0.037783038,
      0.012169789,
      0.013564281,
      0.003562341,
      0.018643124,
      -0.006001746,
      -0.04013729,
      -0.0036885417,
      -0.0008574796,
      -0.013409962,
      0.013017216,
      -0.025291478,
      -0.012159396,
      -0.00315526,
      -0.020804757,
      0.0043710354,
      0.00018647785,
      0.016550029,
      -0.009604533,
      -0.006985214,
      0.006471002,
      -0.0124876555,
      0.013107089,
      0.033840742,
      -0.010249774,
      0.019370053,
      0.020194285,
      0.006612793,
      0.002580247,
      0.022365175,
      -0.029639058,
      0.00625087,
      -0.10726298,
      0.025296973,
      0.0055028494,
      -0.031920437,
      0.0042148065,
      0.0063256654,
      -0.040574472,
      0.0047725844,
      0.01136828,
      0.023585768,
      -0.0078013446,
      -0.01564916,
      0.026951004,
      -0.014874528,
      -0.0028694766,
      -0.014249836,
      -0.012556524,
      -0.0154278055,
      0.014096561,
      -0.002064897,
      0.01115737,
      -0.0031031426,
      0.008212385,
      0.010060617,
      0.014216587,
      -0.0077719553,
      -0.01894501,
      0.026459647,
      -0.004682502,
      -0.014725279,
      0.0064725974,
      0.0035136219,
      -0.0074784807,
      -0.016668115,
      -0.0029805761,
      0.01480852,
      0.0064866613,
      -0.0072147343,
      -0.0055905143,
      -0.015315474,
      0.018255627,
      -0.0027824726,
      0.03256272,
      0.034095235,
      -0.0072108307,
      0.018765317,
      -0.00070737576,
      -0.011369138,
      -0.0056690443,
      0.012159951,
      -0.008263266,
      0.009937319,
      0.0032007336,
      -0.03257025,
      0.008105207,
      0.01409885,
      -0.0030606873,
      -0.018684309,
      0.0065033003,
      -0.0059688217,
      0.015235005,
      0.014640787,
      -0.0034945882,
      0.003153208,
      0.007600735,
      -0.009121426,
      0.006825639,
      -0.002242643,
      0.005909945,
      0.0014755432,
      0.013320443,
      0.0051534898,
      -0.006696116,
      -0.004765769,
      -0.0006642292,
      0.01512043,
      0.0015415652,
      -0.0049242987,
      -0.01631969,
      0.04991336,
      0.011480708,
      -0.0052064927,
      -0.0011687421,
      0.023910882,
      0.0055515515,
      0.030188791,
      -0.0032780122,
      -0.0018571978,
      0.006327667,
      -0.016950881,
      0.01372412,
      0.0076507684,
      -0.0028932088,
      -0.0026618831,
      -0.015026783,
      -0.00041587927,
      -0.0155002745,
      -0.01056064,
      -0.02454791,
      0.021602325,
      -0.01517499,
      0.0019237803,
      -0.019547489,
      -0.0054572313,
      -0.004105421,
      0.0016083795,
      -0.043032587,
      -0.0038683284,
      -0.0050158636,
      0.0039792093,
      -0.0014774248,
      -0.0126085915,
      -0.014715517,
      -0.0065492643,
      -0.017359521,
      0.024224173,
      0.001339335,
      0.011712408,
      0.025057865,
      -0.016599625,
      -0.017592393,
      -0.020295197,
      -0.008314224,
      0.01320812,
      -0.008513958,
      0.0055829156,
      -0.012654342,
      0.013560701,
      0.0022710597,
      -0.042358883,
      -0.016666066,
      0.009642116,
      -0.023100499,
      -0.021643944,
      -0.015685575,
      -0.008199378,
      0.025003077,
      0.008943415,
      0.023448404,
      -0.019944841,
      -0.014804613,
      0.004105781,
      0.007294286,
      0.014328144,
      -0.010988998,
      0.020357706,
      0.0018235982,
      -0.02129324,
      0.00065597735,
      -0.01738135,
      -0.022518951,
      -0.02687329,
      0.000028855142,
      -0.0069387318,
      0.0085692,
      -0.014335114,
      0.011023826,
      0.008873235,
      -0.0079200445,
      -0.031185018,
      0.016507968,
      0.0140647935,
      -0.010017763,
      -0.010798004,
      0.019400794,
      0.017114228,
      0.0012410627,
      -0.0017862706,
      0.028503954,
      0.009953065,
      -0.0013618206,
      -0.02802779,
      -0.0312816,
      0.012238367,
      0.008560694,
      -0.0028270024,
      0.002167202,
      -0.0045624287,
      0.0005979591,
      0.018597767,
      0.008109588,
      0.0012804859,
      -0.009905835,
      0.0059971507,
      -0.003389263,
      0.007095347,
      -0.00016117426,
      -0.0049244827,
      -0.040642302,
      0.0048438986,
      0.0053248703,
      -0.025949756,
      -0.006450193,
      0.015380813,
      0.009346296,
      0.008161983,
      -0.009964232,
      0.00711049,
      0.015856137,
      0.0020171304,
      0.0030596068,
      -0.014400996,
      -0.01701452,
      -0.0011650143,
      0.017492738,
      -0.024011929,
      -0.014920532,
      -0.009187311,
      0.0055564907,
      0.018810792,
      0.0002366603,
      -0.0013673204,
      -0.009080599,
      0.0051181796,
      0.0059381844,
      0.02030746,
      0.014124983,
      -0.0061955326,
      -0.028790973,
      -0.013859276,
      -0.0062392913,
      -0.00675723,
      -0.008209651,
      -0.021381037,
      0.008760609,
      0.0035177858,
      -0.008579592,
      -0.0030225664,
      -0.0139076,
      0.00921791,
      -0.013333896,
      -0.018741064,
      -0.018605122,
      0.010358852,
      -0.023634054,
      -0.026968788,
      0.017259622,
      0.012466738,
      -0.02494531,
      0.026245179,
      -0.004220067,
      -0.010914973,
      -0.015733859,
      0.00569392,
      0.009490897,
      -0.009024824,
      0.015016562,
      0.008871556,
      -0.0028536846,
      0.028077781,
      0.012545828,
      0.015345414,
      0.0063015814,
      -0.015668506,
      -0.026105005,
      0.028482405,
      0.0058675166,
      0.0022849862,
      0.005280504,
      0.0066931183,
      0.021165587,
      0.006282515,
      0.006645744,
      0.001993365,
      -0.0118056275,
      0.00370099,
      -0.012426338,
      -0.007369868,
      0.0057358313,
      -0.13030098,
      -0.004202908,
      -0.0170145,
      0.02193982,
      -0.0065612104,
      0.012792916,
      -0.00019066504,
      0.0005864762,
      0.004331319,
      -0.014620059,
      0.029941378,
      0.0019754665,
      -0.0010403496,
      -0.019190451,
      0.013087237,
      0.0014612844,
      0.007426285,
      0.008247055,
      0.019817768,
      0.001981316,
      0.007493093,
      0.022313898,
      0.010679301,
      0.0025585052,
      -0.011596507,
      -0.003625013,
      0.0046358225,
      0.0038911016,
      0.0016237156,
      -0.0017976138,
      -0.012445517,
      -0.014030004,
      -0.0008290444,
      0.008574949,
      0.013135585,
      -0.028069789,
      -0.0047306446,
      0.009506626,
      0.025120895,
      0.0112709645,
      -0.0021894781,
      -0.011638124,
      0.03932838,
      0.000067080495,
      -0.00015812324,
      0.029228516,
      0.016239122,
      -0.0012062661,
      -0.011645077,
      0.041791964,
      -0.02864101,
      -0.015156077,
      -0.0038598576,
      -0.02329272,
      -0.021022962,
      0.0017934663,
      0.005353054,
      -0.02412864,
      0.011370697,
      -0.008598954,
      0.0037801885,
      0.01825609,
      0.014955562,
      0.033902857,
      0.0037981418,
      0.0040266407,
      0.039617002,
      0.0029993812,
      0.00134435,
      -0.008520546,
      -0.0038450651,
      0.003569892,
      0.0020592068,
      0.014795983,
      0.0105462205,
      0.009623917,
      0.0014594322,
      -0.006808049,
      -0.0027045738,
      0.015670652,
      -0.026730508,
      -0.009770778,
      -0.07629938,
      -0.023692714,
      0.015496326,
      -0.0067707896,
      0.016337486,
      0.024254806,
      -0.020356856,
      -0.005958408,
      -0.0023690453,
      -0.018476574,
      -0.006027996,
      0.003123721,
      0.018598868,
      -0.010954274,
      -0.008544936,
      0.019941684,
      -0.006602415,
      -0.02396269,
      -0.030521978,
      -0.020483833,
      0.009371843,
      -0.017822057,
      -0.008703263,
      -0.027643869,
      0.009979025,
      0.04746682,
      0.0079887705,
      -0.0012745241,
      0.006316312,
      0.0038959577,
      0.009873101,
      -0.15874204,
      -0.0078038494,
      -0.0058195014,
      0.022395179,
      0.010120555,
      0.0058437167,
      -0.004658559,
      -0.012460679,
      0.012198184,
      -0.012434464,
      0.018786468,
      -0.001347405,
      -0.01338081,
      0.0073312004,
      0.035107493,
      0.13273863,
      -0.007008061,
      0.0021649299,
      -0.013448334,
      -0.0058068098,
      -0.0056630536,
      -0.003531366,
      -0.022727367,
      -0.00029348835,
      -0.011317504,
      -0.011932031,
      -0.011167086,
      -0.013785343,
      -0.010497009,
      -0.026192443,
      0.003998013,
      -0.016310789,
      0.011997142,
      0.047140434,
      0.0011790501,
      -0.011495312,
      -0.0030344008,
      0.014676322,
      -0.017408274,
      0.005792374,
      0.007645897,
      -0.00073507545,
      0.00006795129,
      0.0077317664,
      0.013249737,
      0.014853082,
      -0.008555971,
      -0.01140468,
      -0.0026944845,
      -0.0039455383,
      -0.020701827,
      -0.0432619,
      -0.002920189,
      -0.009596547,
      -0.007656289,
      0.005733008,
      -0.005776662,
      0.010249687,
      0.009171169,
      0.025043545,
      -0.005569236,
      -0.0149125885,
      -0.015382876,
      0.0016208983,
      0.0049151606,
      -0.020021262,
      0.024375992,
      0.0020657831,
      -0.0063659465,
      -0.006891774,
      0.009823201,
      0.017175445,
      -0.0080926595,
      0.0026803291,
      -0.013198413,
      -0.0075414195,
      -0.021679172,
      0.013506429,
      0.0072995606,
      0.0009835879,
      -0.008468309,
      -0.010396289,
      0.006337767,
      -0.011682498,
      0.015264021,
      0.028229855,
      0.005108099,
      0.031101301,
      -0.00025552986,
      0.007292435,
      0.006017308,
      0.0047336505,
      -0.026124733,
      0.020690205,
      0.008056268,
      0.019902496,
      0.025721794,
      -0.028546192,
      0.028253626,
      -0.0041054282,
      0.0090069175,
      -0.0034209788,
      -0.00225744,
      -0.043017786,
      0.020475755,
      0.0044948263,
      -0.0069453893,
      0.024860797,
      -0.004436212,
      -0.018995434
    ]
  },
  {
    "id": "genai_cohort_python_06_Inheritance_and_composition_in_python_classes_vtt",
    "content": "Hey there and welcome to a really interesting video. For this particular video, I want your undivided attention. So if you're watching this video, laying down on the sofa or while commuting, please pay a little bit more attention. This video actually requires that. In this video we're going to study about inheritance as well as composition. Inheritance you might have studied in Python quite a lot. Composition is talked really less, but it's used quite a lot in the production. So I want to walk you through. First, let's talk about inheritance. Knowing the inheritance will solve like 90% of our problem. For this video, just like you might have seen inheritance in the real life, that some people inherit a car, some people inherit some great amount of money, some people inherit some house or a great property. That's exactly like how it works. If your dad has earned a great amount of property, you inherit that you don't start from scratch. That's reality of life as well. So same we can do with the programming as well. If some class has done some work, you can just go ahead and inherit that. Yeah, that's allowed in programming. You can inherit from any class. Like there are rules as well. But as of now, let's see that we can inherit from any class. Let's see the demo of this one. I have already created a file for you and we're going to first see the inheritance, then we are going to see the composition as well. It's easy. It's easy. So how do we create a class? Let's go ahead and say that we create a class, call this one as base chai because hey, this is how we create a chai. The base chai always remains same. We create a simple constructor. Remember init in it, that's our constructor. It takes the self as parameter in this and there we go. What it will do is apart from self, let's also take the type. What kind of a chai you would love to have? I would love to have a self type which will be type underscore. There we go. Chai is prepared. Now let's also create a method for preparing a chai. Prepare. This one will be self. Just like that. Every single method gets this. There we go. And this time it prints. It doesn't return anything. Again, my choice. I want to print it. I'll print it. This one is going to say preparing what type of chai you are preparing. I can use self to address any variable. This variable is not being created, but still it exists. Because constructor variables don't need to Be created. Again, if you are creating in constructor, that means it's known that it will be there. And I will say chai with four dots, because four dots makes life fun. All right, so this is how you create the class. We shouldn't have any problem in this the way how inheritance works. Now that you have the, basic idea of how the chai is being made, you can go ahead and say masala chai. There we go. No big deal. Now we use parenthesis. But hitesh, you said no parenthesis in the classes. Yes, I'm still correct. You only use parenthesis in the name of the class. If you want to inherit something. This is where it is compulsory that you present some of the class here. Otherwise it will always give you error. That's a special syntax. Now in this, all I do is, in this inheritance, I just add the spices. So somebody told me in my ancestor that, hey, this is how we make the chai. The next generation came in and just learned how to add the spices on it. That's all we do. So in this one we simply go ahead and say print and there we go. We are going to say adding cardamom. Cardamom, My favorite one. Ginger and I don't like it much, but let's just say it is also adding the clothes. There we go. So this is it. And you might be wondering, okay, how do we create objects and everything? Don't worry, I will walk you through. The creation of object is exactly same and the process also works same. But since we are already here, let's also see how the composition works. That's an interesting concept and idea. This is it, by the way, this is it. This is how all you define the inheritance. This is your base class. Any class needs it. You can just go ahead and pass on that class and that's it. It works. We will see more such example. Now let's see that if I define, another interesting class that says, a chai shop here. All right, no big deal. We can create that. Now notice here, this is not inheriting any class. So what can we do here? Let me show an interesting concept which says chicls, just short for class. By the way, this is just a variable name. Feel free to call it whatever you like. Now in this I can actually hold any of my class as well. Excuse me on that, we'll keep our classes informal. It's just fun. I love to teach. So there we go. I can just go ahead and say base chai. Now notice here something really, really odd. This Is base chai. This is the syntax of inheriting. But hey, where are those things? If we are creating an object, where is the syntax? No, it doesn't exist. If you are actually inheriting all the values of this base chai, then you don't actually put the parenthesis inside the class. That's the syntax of composition. When you actually create object, that's a whole different story. Remember creating object VS creating classes, these are two different syntax entirely. So now that I have access to this whole, thing that exists in the base child, I can actually do some fun stuff. Let me show you. First of all, I can just go ahead and create my init and I can pass on this self and, just work like that. So this is my basic chai shop. It has its own constructor. In this I go ahead and say self chai will be available like self, but I'm not going to do it like this. I will go ahead and say I want to refer to the base class. And in the base class I will go ahead and always prepare a regular chai. Can you see the linking here that I'm not actually directly creating a constructor. Through this constructor, I'm actually passing the value into this chai Cls, which further down will pass on this value to the base chai when it will be executed. These are just instructions right now. They are not executed, they're executed with the parenthesis. So it will pass on this regular value to this base chai constructor. This will be passed on here, just here at line number two and they will assign the value in line number three. Oh God, that is too much of passing a variable. But now that you know the journey of variable, this will make you a professional Python developer. All right, pretty good, pretty good. What else we can do? You can also define your regular methods, just like in this. Let's just say we also serve. Because we are a chai shop, we should be serving that. So in this I can just again use self. No big deal. I can print. What do I want to print? A, formatted string that says serving. What type of chai are you serving? All right, I'll put some variables into this chai intheshop and what it also does, it actually calls some methods as well. First of all, one problem at a time. What type of chai are you preparing? How can you refer that? Because. Can I just say self chai, probably, but actually the type is not available here. The type is available in here because that's the variable inside the base class. So you will see this syntax quite a lot that in this we'll go ahead and say first of all we have to address it as self dot then chicls and I can go ahead and say chai Cls type as well. But remember now that you have transferred all of this control inside this variable, I don't need to say this chicls. Let's keep that reserved only for accessing the methods of the base class. Now that the control is being transferred here, you'll be surprised to know I can just go ahead and put up a dot and notice here prepare and type. I have access to both the methods. Isn't it fun? It is. So let's just say we say simply Chai type and the Chai type will be printed. Not only that, I can here just go ahead and say self dot and chai and I can run this method prepare as well. And I have to run this. How interesting that is. And even interesting to this, let's just say there is another. This is our regular Chai Shop. We will have another. Yes, I know too much. That's why I say is undivided attention. We also have one more Chai Shop which is fancy. Chai Shop. It's too fancy. This one just inherits let's just say Chai shop. So you have opened up a new branch. We are going too much in depth and that's what the production code looks like here. All I have to do is simply say that hey chicls, I'm taking a reference of this and I will simply go ahead and take a reference of this Masala Chai. So everything is available from the Masala Chai and you can use the same syntax. You can define the constructor, take all the values up here and conserve this. This would be reputation. I don't want to do that. But let's go ahead and take a summary of this. I know that's a lot. What we did here is just simply creating a class. There is no big deal here. I can just even minimize this. We know this part in the Masala Chai. For the first time we saw the syntax of inheritance which is just this much. It. That is it. We didn't did anything extra. We assume that if you create an object from the Masala Chai you will get all the values. You can just put up a dot and use add spices. But also you can use a dot and have the prepare method access as well. That is it. Now if I go up here, this is where the composition starts. So notice here this chai shop doesn't inherit anything, but inside the class I said I want to keep a reference of this base chai and this variable gets a reference to everything that's there in the base chai. Pretty interesting syntax. Now when we create and initialize and constructor, I simply says, hey, I will say self chai cls, but as soon as I create an object from it, now the regular thing starts. It's creating, literally creating an object and passing a reference in this. So I create a regular type of chai and pass on a reference to this one. Since this self chai is ultimately creating a base chai for me, what I can do is I can access all the methods of the base chai. So if I can access type, I can access prepare as well. And that's what exactly we did here. So here we access the self chai type because it's an object that's a composition and we can also access self chai prepare. Pretty interesting. Now let's create also some objects, although not really necessary, but I'll show you anyways. So let's just say you go ahead and say this will be a Chai shop. There you go. Access everything. So now if you go ahead and say shop, put up a dot, you get access to Chai Chai CLS serve, whichever you want to use, you can go ahead and use it. I will also have a fancy variable and I will say this one actually comes from Fancy Chai shop and and feel free to access any fancy method which are available. Chai Chai CLS, serve. Because hey, it also comes from there. So we can just go ahead and work on that. For example, the shop can actually go ahead and serve just like this. Not only that, fancy can also go ahead and serve because it actually inherits Masala chai, which further inherits the base chai as well. Pretty fun, isn't it? Yeah, that's linking this diagram is something that you have to make up in the brain only that only works. So this one can actually also go ahead and serve. There we go. Fancy also serves. The Chai shop also serves the chai. Now fancy the advantage is fancy has a method of not, like this. Do we have any method of adding, since fancy is add spices. My bad, its add. And we cannot actually go ahead and use it like this because I don't have an access to this masala chai directly in the fancy Chai shop. Because we are actually inheriting Chai shop but we never inherited the Masala Chai. So in order to access this I have to use this reference, this composition. So I have to say chaicls and through which I can actually access the add spices. Isn't it very interesting? It is little bit of a production level code, so it will take a little time to digest. But you'll get the idea. I can print it, no problem. But printing is not going to make any life easier. So you still have to figure out that. Okay, this is. Oh, we have a problem. Masalachaya is missing one positional requirement argument. Did we accepted any argument into this one? Oh yes, we shouldn't be actually doing it. But let me just go ahead and fix this. Now let's go ahead and read this error because this is the real programming. Nothing works out of the box. Let's see what is the problem that's going on. It is saying that the Masalachay addspices is missing one argument. And if you remember, we have discussed this exact same problem, the argument self. So what is happening here is you are using this reference of the object and, and this requires some of the context. It doesn't have any context. So in the fancy you're creating the object. But Masala Chaya requires that hey, you give me something as self. It has no idea who is calling it. It is a missing context problem. So how can we go ahead and fix this? It can be fixed, with the existing solution as well. If you remember. Now this fancy, instead of referencing this because what it's doing, it's actually going into the Masala Chai. All right. But you forgot one thing. We are inheriting the Chai shop as well. So that means as soon as the fancy Chai shop is being created, always and always, whenever an object is created, it always is created by the constructor. If there is no constructor, the class will automatically create a constructor behind the scene for you. So constructor is always there. And it also gave us a chance to discuss about the constructor, how good the errors are. So if I go ahead and create a constructor via this fancy Chai shop, this might have done it somehow. So this one no constructor here. So whose constructor might be used? The base class. Does the Chai shop has any constructor? Yes, it has the constructor. This is the one. Are we storing the all references of Chai Cls here in the Chai? Yes, we are. And this is an object of the base chai. So the problem is solved here. This one didn't had an idea of how to provide a reference. But if I go ahead and use the constructor, that means now my object is calling the method, so I have the reference. Got it. I know it will take one more Var time to Var this, but let's go ahead and run this. Probably another error will help us to learn something more. Oh, this time it works. So this whole sequence of how things are going on. Let me summarize this one more time so that it will help you to understand this. Here's the summary part. We simply created a base class. Every class has a constructor. If you don't create a constructor, the class will automatically create one behind the scene at the time of execution. We have two methods, Init and prepare. That's it done in the Masala Chai we have just one method. But hey, I cannot use this method directly because it has no constructor. So either call it via the class, but if you'll create directly call it via the class the self, how you will pass on the context. Very difficult. So either just create it an object and then call it. Got it. Then this starts the composition. So sometimes we don't want to inherit the classes, but we want to take a reference of it. So we have got the reference of it. And now within this class I am actually calling an object. So this is literally creating an object from this class just by passing it here. I'm not using the parenthesis so that I can hold the reference that okay, I'll create an object, but in some time, not just immediately. So this is exactly where we created and we hold the reference all of this up here. So this is literally an object and this object can be used anywhere in the class. Pretty easy. Fun stuff. We also created another one which is Fancy Chai Shop which inherits as well. So it's an example of inheritance. It's also an example of composition as well. So we are inheriting and as well as you are compositing as well. Pretty complex, but this is how the production grade. Now we'll increase the level of complexity in the code. So Shop Chai Shop. Pretty easy. Fancy Fancy Shop. Pretty easy. We use the serve method in both of them. No problem, because serve actually doesn't do much. Not here. The serve is here. If any object creates it. Where is the serve? Here it is. The serve method is in the Chai shop, obviously. And any object created from the Chai shop or any of the class which inherits it like Fancy shop can actually call it no problem at all. It has the context. All right, so object is calling it. Object is calling it. We saw an error when we tried to Fancy, when we try to add the spices. Why? Because in order to add the spices, you are not calling from the base class, you're calling from a composition. Now, in the composition, this is the reference that I'm having. So there might be some constructor that might have called while creating this. If I haven't provided a constructor, Chai Shop might have provided. So Chai Shop actually gives me a reference of this and I create a constructor, from here. So this is the constructor and I take the reference or I create a new variable which is chai. So this has the context. So my context problem is solved. And simply I go up here that. Hey, fancy. Now you have access to this chai, and through the chai, the object of this class or the base class can call any of the method. So there we go. All right. Similarly, you can have a, composition for the base chai as well. You can have this and run those methods as well by creating this. Pretty simple. Not that simple, to be honest. So again, as I mentioned, this class requires undivided attention, but the topics like inheritance is being taught all over the places. But topics like composition are very rare to see in the video courses. I brought it up for you. Make sure to rate us as well. Let's go ahead and catch up in next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "06 Inheritance and composition in python classes.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/06 Inheritance and composition in python classes.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.006060164,
      0.02496923,
      0.034707755,
      -0.06351679,
      -0.013850918,
      0.014121812,
      0.013730167,
      0.030363858,
      0.0020579614,
      -0.0014817723,
      -0.022765825,
      -0.016560836,
      0.012186839,
      0.020483484,
      0.12369553,
      0.0010344712,
      -0.007853931,
      -0.022907702,
      0.005297085,
      -0.019276557,
      -0.009004005,
      0.00950643,
      0.021085907,
      -0.00039296478,
      0.0032468752,
      0.0044002915,
      0.002552585,
      0.0118180895,
      0.04477312,
      -0.017675813,
      -0.009026646,
      0.016086552,
      -0.0037388362,
      0.024971204,
      -0.0019757815,
      0.019040277,
      0.019554548,
      0.013419955,
      -0.027048528,
      -0.0076910504,
      -0.02732123,
      0.02412961,
      -0.0044000535,
      -0.003905678,
      0.018021101,
      -0.041283794,
      0.012549088,
      -0.021436494,
      0.0054630586,
      0.013908213,
      0.0042351387,
      0.013920539,
      -0.008681619,
      -0.18247639,
      0.006103388,
      0.009491695,
      0.005602497,
      -0.013526258,
      -0.0049984283,
      -0.0011240141,
      -0.01553739,
      0.0064168423,
      -0.028693894,
      0.005132498,
      -0.0042988644,
      -0.028867979,
      0.02966317,
      0.008816162,
      0.012399449,
      0.0042922194,
      0.02186214,
      0.016636448,
      -0.02029268,
      -0.02167514,
      -0.013503257,
      -0.025763152,
      0.012584044,
      0.0025171442,
      -0.0065781237,
      0.02623409,
      -0.012641092,
      0.0017370934,
      0.0144956065,
      0.0008672143,
      0.0049372897,
      -0.011597762,
      -0.00895353,
      -0.011670055,
      0.004534316,
      -0.005145105,
      -0.0009116813,
      0.016865185,
      -0.0039205495,
      0.02702333,
      -0.023208102,
      -0.009962083,
      -0.01279649,
      -0.00072078046,
      -0.011954339,
      0.006317388,
      0.0057240576,
      -0.016831106,
      -0.02390932,
      -0.02583978,
      0.00883278,
      -0.004446617,
      -0.01304469,
      -0.0067925393,
      -0.021748379,
      0.017335959,
      0.0044796155,
      -0.009782144,
      0.020164477,
      0.004188649,
      -0.0022799494,
      -0.18327935,
      0.0055717463,
      -0.013934475,
      -0.015310368,
      -0.005288266,
      0.004756668,
      -0.0074564456,
      0.01723035,
      0.0030886556,
      -0.0042692795,
      -0.003667348,
      -0.008686467,
      0.017417435,
      -0.010744582,
      -0.0007999181,
      -0.018250488,
      -0.013130301,
      -0.00045572722,
      0.0100353705,
      -0.0047068726,
      0.011685867,
      0.006435198,
      -0.0038584634,
      -0.03517697,
      -0.0055843187,
      -0.0018215941,
      0.011549209,
      -0.012610478,
      0.04862656,
      -0.0064654225,
      -0.013313525,
      -0.016563816,
      0.009977034,
      -0.031185534,
      -0.034844436,
      0.018492537,
      0.009388795,
      0.0008762514,
      -0.010544447,
      0.01688321,
      -0.023011215,
      -0.0038709575,
      -0.004864758,
      -0.011304494,
      0.009015418,
      0.011440043,
      0.022256084,
      0.0020996837,
      0.014509691,
      -0.0043046474,
      -0.014178786,
      -0.012205512,
      0.020541683,
      0.032082617,
      0.007491618,
      0.013833493,
      -0.006034764,
      -0.0020020916,
      0.016544985,
      -0.014359866,
      -0.008710141,
      0.010779978,
      -0.010421761,
      0.012447283,
      -0.0011056582,
      -0.008125893,
      -0.01818003,
      0.007905699,
      -0.012065508,
      0.006952504,
      0.013989987,
      -0.036215357,
      0.009698759,
      0.018958673,
      0.009685378,
      0.0017748021,
      0.0034864084,
      0.01918303,
      0.0067457412,
      0.017871201,
      -0.015976405,
      0.009587354,
      0.010855185,
      -0.010081403,
      0.023700062,
      0.038674388,
      -0.010639024,
      -0.0051395963,
      -0.013585168,
      0.019596398,
      0.008594372,
      0.018855505,
      -0.020371264,
      0.00025037382,
      0.011111365,
      -0.03099996,
      0.0038955966,
      0.022460183,
      0.013525988,
      0.020855546,
      0.0016643554,
      -0.00070058455,
      -0.009002676,
      -0.008113505,
      -0.020759137,
      0.0018052396,
      -0.015065397,
      -0.0044194446,
      0.02111366,
      0.009944534,
      0.0012078201,
      -0.012263934,
      0.00741739,
      0.021286374,
      0.012218847,
      0.016904874,
      -0.005176928,
      -0.019110454,
      0.009604631,
      -0.0001388408,
      0.001470124,
      -0.023716746,
      0.01255596,
      0.012862723,
      -0.009035721,
      -0.008421922,
      -0.0035720607,
      -0.0039063604,
      0.011387225,
      0.035223357,
      0.004737422,
      -0.0022082948,
      -0.0004202078,
      -0.006281733,
      -0.028084204,
      -0.015069865,
      -0.004476551,
      0.01590865,
      -0.011182136,
      -0.00086923514,
      -0.035230633,
      -0.022578437,
      -0.0044809463,
      0.0019668401,
      -0.011654202,
      0.0054956153,
      -0.006171503,
      -0.012277815,
      -0.008400089,
      0.0062397295,
      0.003781638,
      -0.0032518546,
      0.03506194,
      -0.0066890274,
      0.019703515,
      0.011731297,
      0.01013074,
      0.010691091,
      0.010210989,
      -0.03773459,
      0.0049808812,
      -0.10140376,
      0.022835637,
      -0.004858616,
      -0.038368337,
      0.01689253,
      0.018440252,
      -0.031424575,
      -0.0014166959,
      0.007501608,
      0.014745237,
      -0.0007839806,
      -0.022803504,
      0.03462368,
      -0.012968296,
      0.0049156635,
      -0.009299852,
      -0.008600127,
      0.006100825,
      0.028319249,
      -0.022324631,
      0.001695937,
      -0.019594846,
      0.008473861,
      0.013305546,
      0.0051914398,
      -0.0154552115,
      -0.0068580275,
      0.0072161774,
      0.015938908,
      0.0055229394,
      0.0041578487,
      0.0039146612,
      0.014113382,
      -0.006890935,
      -0.0010820895,
      -0.00072802475,
      -0.007462859,
      -0.026413083,
      0.00020931146,
      -0.011295725,
      0.018798085,
      -0.024571978,
      0.029170996,
      0.035150446,
      0.005950025,
      0.01578996,
      -0.0042429413,
      0.010380379,
      -0.012635797,
      0.0032858842,
      0.0009299688,
      0.0029679323,
      0.013210186,
      -0.012941966,
      0.00031159172,
      0.016519805,
      0.008520251,
      -0.0063138674,
      -0.003122311,
      0.011554313,
      0.009039349,
      0.014725734,
      -0.014261297,
      -0.009430516,
      0.026785227,
      -0.0021908146,
      0.015842527,
      -0.012051655,
      -0.002722482,
      0.013144478,
      0.00887736,
      -0.011193348,
      -0.015774844,
      -0.01085025,
      0.008981068,
      0.008027732,
      -0.0037688278,
      -0.015454333,
      -0.026377723,
      0.03083114,
      0.0070581026,
      -0.0145806745,
      0.00012661952,
      0.009548841,
      0.003620324,
      0.013827397,
      -0.004707059,
      -0.012614197,
      0.0044539734,
      -0.022864597,
      0.007911023,
      0.015835091,
      -0.010676808,
      0.007189067,
      -0.0098799765,
      0.0012971993,
      -0.022376772,
      -0.014385336,
      -0.018792933,
      0.01831201,
      -0.008506545,
      -0.010066626,
      -0.015724897,
      -0.016183354,
      0.0063888314,
      -0.0053630564,
      -0.020322891,
      -0.010897273,
      0.0003193345,
      -0.010270887,
      0.0070735323,
      -0.0012666772,
      -0.021213636,
      -0.005297215,
      -0.016293632,
      -0.0003479469,
      0.002402704,
      0.0136665655,
      0.020090384,
      -0.024992127,
      -0.0028795132,
      -0.016982036,
      -0.0074560866,
      -0.0018661136,
      -0.006505804,
      0.0140965795,
      -0.018662302,
      0.019845236,
      0.006586325,
      -0.028304107,
      -0.014626964,
      0.00989619,
      -0.016252402,
      -0.025701448,
      -0.006046201,
      -0.0000631262,
      0.034916937,
      0.014878793,
      -0.0006057193,
      -0.0015864683,
      -0.020645225,
      0.003299549,
      0.01940686,
      0.0034304156,
      -0.008890303,
      0.022910727,
      -0.0073854784,
      -0.019386377,
      -0.019733706,
      -0.014070922,
      -0.01554179,
      -0.018203095,
      -0.012329748,
      -0.011694126,
      0.008153061,
      0.00772439,
      -0.013823429,
      0.0024051212,
      -0.028406288,
      -0.0073442836,
      0.01905834,
      -0.0052926606,
      -0.0037590112,
      -0.010022996,
      0.025080202,
      0.014183439,
      -0.0018841558,
      0.0180726,
      0.024353469,
      -0.022117514,
      0.00045774598,
      -0.014468698,
      -0.03476115,
      0.008732351,
      0.007750423,
      0.009783713,
      0.005158839,
      -0.007472557,
      0.0011116222,
      0.027680809,
      0.00847878,
      -0.009594893,
      -0.005966955,
      -0.0012436352,
      0.0076821693,
      0.005102942,
      -0.0076631107,
      -0.0049297307,
      -0.038937986,
      -0.002446096,
      0.016139606,
      -0.006316968,
      -0.011014299,
      0.01769781,
      0.00040426129,
      0.0018289523,
      -0.004029128,
      -0.005085063,
      0.0067591444,
      0.013236439,
      -0.0007751476,
      -0.008588737,
      -0.011400444,
      -0.014229698,
      0.018654516,
      -0.02121385,
      0.013429407,
      -0.0058211447,
      0.015307159,
      0.03799984,
      0.011938382,
      -0.003171511,
      -0.00027218994,
      0.006687283,
      -0.007059317,
      0.02364011,
      0.01975409,
      -0.008225655,
      -0.008807961,
      0.0055329306,
      0.007049338,
      -0.0068021556,
      -0.014390396,
      -0.02352577,
      0.021047864,
      -0.0014076559,
      -0.0114402305,
      0.006684068,
      -0.005196871,
      0.017402958,
      -0.014518597,
      -0.0070164194,
      -0.019013017,
      0.010776305,
      -0.02536663,
      -0.019373048,
      0.01462141,
      -0.002445144,
      -0.017367823,
      0.024757592,
      -0.009641002,
      -0.004089622,
      -0.014932474,
      -0.0012945487,
      -0.004792528,
      0.0067587523,
      0.024305452,
      0.0054555857,
      -0.004111602,
      0.018097783,
      0.003903455,
      0.02749301,
      0.009057841,
      -0.015180369,
      -0.02316124,
      0.023454942,
      0.000007058269,
      -0.0014734324,
      -0.0017929772,
      0.0042199614,
      0.018321238,
      0.006960661,
      0.00010076389,
      0.0071829828,
      -0.011107925,
      0.0054952977,
      -0.006576319,
      0.011725317,
      0.015710838,
      -0.11841936,
      -0.024654029,
      -0.012907301,
      0.008637079,
      0.0020171485,
      0.011368964,
      0.0028924926,
      -0.01870076,
      0.0018925022,
      -0.012248596,
      0.03813188,
      0.023092667,
      -0.008554344,
      -0.0112611605,
      0.021400057,
      0.0039048493,
      0.010326984,
      0.018769935,
      0.028846912,
      -0.010241623,
      -0.0051892195,
      -0.0021810092,
      -0.0005118003,
      -0.0025558476,
      -0.016592631,
      -0.01859742,
      0.0015080103,
      0.00011577672,
      0.0021316372,
      -0.02532701,
      -0.020159358,
      0.003367926,
      -0.00025835633,
      0.0047969776,
      -0.003365235,
      -0.018046966,
      -0.0016650709,
      0.0026365805,
      0.010664838,
      0.0061641596,
      -0.0070117954,
      -0.013261688,
      0.03836861,
      0.0069964402,
      -0.009026975,
      0.021519078,
      0.032341804,
      0.005136913,
      0.010696704,
      0.037199624,
      -0.041314423,
      -0.0017451145,
      -0.01247752,
      -0.03219783,
      0.00087906217,
      -0.008625344,
      0.020778582,
      -0.011794512,
      -0.0021765258,
      -0.010232503,
      0.01418703,
      -0.005689371,
      0.025824627,
      0.045174465,
      0.0038612715,
      0.0015558883,
      0.034353495,
      0.0023998339,
      0.005207602,
      0.0076333145,
      0.0031539807,
      0.007138999,
      -0.014533338,
      0.016346535,
      0.024264762,
      0.0028307538,
      0.0026665945,
      0.0102985315,
      -0.014830368,
      0.015545425,
      -0.034837816,
      -0.0048470018,
      -0.06418344,
      -0.02914353,
      0.03520402,
      0.0022191748,
      0.021443138,
      0.022923298,
      -0.014811305,
      0.01044593,
      0.011298202,
      -0.015298277,
      -0.0073812855,
      -0.007422403,
      0.008623855,
      0.011521822,
      -0.014550653,
      0.017311009,
      -0.012144184,
      -0.008520695,
      -0.016451757,
      -0.010125932,
      0.008279466,
      -0.010458967,
      -0.007135051,
      -0.02520134,
      0.023739101,
      0.016334115,
      0.012426805,
      0.0068269353,
      -0.020536378,
      0.022679312,
      -0.0064153424,
      -0.142388,
      -0.018251905,
      0.0084444685,
      0.018113976,
      0.015623171,
      0.01893585,
      -0.029273586,
      -0.030220876,
      0.005410045,
      -0.0007632642,
      0.023533043,
      -0.0045511266,
      -0.023626167,
      0.0071398956,
      0.040801182,
      0.13454562,
      -0.006864713,
      0.00776328,
      -0.017528752,
      -0.0040094126,
      0.005945847,
      -0.02280697,
      -0.029786017,
      0.008260082,
      0.0034584703,
      -0.0033922354,
      -0.009853021,
      0.00012614121,
      0.0064881383,
      -0.035445254,
      0.0060393685,
      -0.019778881,
      0.0020628383,
      0.034532804,
      -0.0043621706,
      -0.0034352345,
      -0.009513611,
      0.019517532,
      0.002096058,
      -0.003653871,
      0.008844053,
      0.006768166,
      0.0052675055,
      0.0065181493,
      0.014529309,
      -0.0047443835,
      -0.013760681,
      -0.014642125,
      -0.0019759813,
      -0.0026470018,
      -0.015074901,
      -0.04190164,
      0.008928526,
      0.021095622,
      0.0059924745,
      0.0031551917,
      -0.0013539467,
      0.016693994,
      0.00026124614,
      0.024368318,
      -0.0031842634,
      0.015833838,
      -0.022765005,
      0.00991307,
      0.007813078,
      -0.0012634582,
      0.022851251,
      0.02010125,
      0.012489843,
      -0.017446836,
      0.020587029,
      0.015190209,
      -0.010556494,
      0.013968288,
      -0.003183525,
      -0.017646067,
      -0.029686565,
      0.030165413,
      0.010252926,
      0.0054588746,
      -0.00023360687,
      0.010709276,
      -0.0032736997,
      -0.007132495,
      0.017809212,
      0.019033166,
      -0.008037924,
      0.015770638,
      0.00024198309,
      0.016300112,
      0.011114626,
      0.0043393383,
      -0.022945326,
      0.02476859,
      0.01050151,
      0.019569144,
      0.023674866,
      -0.0148596475,
      0.029499585,
      -0.0059060673,
      -0.0024826222,
      -0.006260412,
      -0.015567375,
      -0.034629334,
      0.008342008,
      0.039414953,
      -0.014935618,
      0.02892208,
      -0.00871619,
      -0.012476678
    ]
  },
  {
    "id": "genai_cohort_python_07_Accessing_base_class_by_3_ways_vtt",
    "content": "All right, so let's move ahead further and the next topic that we want to cover in our Python series is going to be another famous topic, which is known as how we can actually access the base class. So accessing base class, this is a really fun topic because you learn so many things with this one. So I'll walk you through with this one. All right, in order to understand this, there are a couple of ways where you do actually do, something known as code duplication. So code duplication, and we really want to avoid that. There are a couple of ways. There is an explicit call and there is something known as the super. So first of all there is a code duplication. The second one is known as explicit call, little bit difficult to pronounce that. And the last one which is using a method, known as super, and it's actually a method. So all of these methods are a way how you can access your base class if you're trying to do the inheritance. And again, there is no right or wrong, it all depends on situations and there are usual trade offs. But most of the time you're going to see this method being taught quite a lot and is being used quite a lot. And there are reasons because it's simpler, it's easier, and that's the way how it actually works. So let's go ahead and write some code for this one. We are going to go ahead and create a new file and call this one as and this one is base class. So let's call this one as base class Python. It's going to be fairly simple. I'll just turn off my AI here so it doesn't bother us. So for example, let's just say you have a simple class, we call this one as chai, as we have been calling for so long, this. And we simply go ahead and define a, constructor here, which is init, Just like that we pass on the self, but apart from the self, you also pass on what type of this chai is, and of course type with an underscore. Without that it doesn't work. And you also go ahead and pass on that. What's the strength of this chai? Is it really too hard? Is it easy, normal, whatever you want to go with that. And also what I'll do is I'll say self type a new variable which will get the value from the type, just like that. And we'll also get the self. self. strength, if I can write that. There we go. Strength is going to get the value from strength. All right, so this is our basic class. You have seen this many times. Now let's just say you define another class and you say this one is gingerchie, which also takes kind of inherit from the chai itself. Just like this, the syntax. And we again go ahead and define a constructor for us init. There we go. And as you can see this automatically takes the type, the strength and it calls the super. We don't want to do that. We want to go with the classic way. So I'll just go ahead and remove this. We'll definitely talk about the super, the auto completion of that. We take couple of parameter, the self, the type one, the strength and we also take one more which is going to be in this case the spice level. All right, so how do we go ahead and define this kind of thing? So first of all the two common things are going to be copy pasted. So yes, you have to write that code again. I'm just going to go ahead and copy paste this and then we are going to go ahead and say self, spice level and that will get the value from spice level. All right. Is this correct code? Yes, absolutely correct. Is there anything wrong in this one? No, absolutely nothing wrong in this. It's just little bit of the duplication of the code. This thing was not available in my top class, so again no problem there. But this one is actually a little bit of a code duplication. And that's what I said, code duplication. This is exactly what I mean to say. You can inherit that, you can write your own constructor, but you are actually repeating the code quite a lot. So I can just comment this and try out another way of doing this exact same thing. Let's just say we go ahead and define the class again and we say we want to make another ginger chai which will inherit from the chai just like that. And this time what we're going to do is we are going to create another constructor. Let's just say initial and I'll auto select this again we will come back onto the super. Just ignore this for a moment. I'll say strength again, spice level. But this time instead of just doing everything manually, we are going to call the constructor from this chai and we can just go ahead and borrow his constructor and we can say you obviously get the self value. You obviously we go ahead and pass on this type of as well as we go ahead and pass on this strength as well. All right. So at least the couple of values that were initially passed to my constructor, I'm just going ahead and passing them up. But one more thing that I have to do is known as self dot, spicelevel spicelevel and that's going to get a value from the spice level. So this is also another way, another syntax. You're going to see them a lot. It's not like it's a bad syntax, it's being used quite a lot. So this is also a syntax. But what you're going to see this is explicit call. So you are explicitly going ahead and calling the constructor of the class from where you are inheriting. Is it good? Yes, of course it is good. But there is a better way of doing the things. So we're going to write that again for the third time and probably the last time we again go ahead and say class and this time we can actually take an advantage of the auto completion. So gingerchie, which goes ahead and take the constructor or an inheritance from the chai itself. And, and this time if I go ahead and define a constructor which is init and I can actually go ahead and use this exact same thing. Now notice what you will notice here. Compare this to line number to and line number and Here we are simply saying init. So this init is the start of the constructor. But what we are saying is super. The super is a method which instead of saying chai. You can actually just super says just like this. And this automatically means that I want to call the constructor of the base class. This is known as base class as well or parent class as well. And I'm going to go ahead and pass on these values up here. Now surely, for sure you have to write this piece of code on your own because now you're accepting more values that the constructor actually takes. So if you go ahead and take that value, copy that and place it up here and what you'll notice that yeah, this one and this one are pretty similar, but this one is an explicit call because you're making this chai as a call. While on the other hand the super is a common method, which is expected that, hey, you kind of know this method. So that's what it is. And as you can see, this is exactly what we studied about the accessing of the base class can be done by the code duplication. Surely not the good way you can do that explicit call or the super you usual method which people prefer to use is the super one. But again, there is no harm in the explicit method as well. So I hope this video gave some added advantage to your knowledge. It's something that we've discussed, quite in depth, and let's go ahead and catch up in next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "07 Accessing base class by 3 ways.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/07 Accessing base class by 3 ways.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0036844683,
      0.004342841,
      0.036145568,
      -0.049717776,
      -0.02242069,
      -0.0032745027,
      -0.004445971,
      0.004141216,
      0.002442159,
      0.0016977802,
      -0.013880548,
      -0.0022608764,
      0.0022225524,
      0.0014204548,
      0.12228595,
      -0.0041246666,
      -0.0021168906,
      -0.016188428,
      -0.0037314957,
      -0.025775926,
      -0.020657895,
      0.008730081,
      0.0151833445,
      -0.00883178,
      0.010662382,
      0.0021052507,
      -0.0088947555,
      -0.0021843226,
      0.055653274,
      -0.006002482,
      -0.019441085,
      0.012119471,
      0.00736181,
      0.024765499,
      -0.00443184,
      0.008820373,
      0.017869327,
      0.021886474,
      -0.01973468,
      -0.015576419,
      -0.020685852,
      0.009989282,
      -0.009585998,
      0.0013877728,
      0.008260721,
      -0.03884337,
      0.00073483255,
      -0.0424539,
      -0.0038262478,
      0.012590628,
      0.011754557,
      0.001006392,
      0.0010333908,
      -0.17527957,
      0.0019831446,
      0.0028125541,
      0.013518647,
      -0.010570802,
      0.0039238823,
      0.004980274,
      -0.014799939,
      0.025652211,
      -0.028992565,
      0.016312042,
      0.0027729357,
      -0.012100224,
      0.03414038,
      0.002933382,
      0.005086219,
      0.013496557,
      0.015802518,
      0.0076155923,
      -0.012046665,
      -0.009522849,
      -0.009436108,
      -0.00964236,
      0.013389229,
      -0.012147967,
      -0.012816593,
      0.022085914,
      -0.017619234,
      -0.011191943,
      0.007538834,
      0.013217607,
      0.011173811,
      -0.006388363,
      -0.009307016,
      -0.023735045,
      -0.009624718,
      -0.012700026,
      -0.008382796,
      0.026395222,
      0.006265027,
      0.027127178,
      -0.01523555,
      0.0062741,
      -0.008363012,
      0.004615344,
      -0.007157516,
      -0.0014635504,
      0.010963458,
      -0.026511911,
      -0.025499074,
      -0.017818408,
      -0.0026242135,
      -0.0099707525,
      -0.008910372,
      -0.01504513,
      -0.0074212872,
      0.01924483,
      0.011845774,
      -0.011651697,
      0.0002522435,
      -0.0015491858,
      0.008083153,
      -0.18026927,
      0.015984042,
      -0.005019677,
      0.010229717,
      0.016682552,
      0.0052282126,
      -0.0022537326,
      0.008330312,
      -0.008570754,
      -0.029517967,
      0.017368332,
      -0.0050956886,
      0.019732911,
      0.00077898934,
      0.015359355,
      -0.025336415,
      -0.01094505,
      0.010301717,
      0.0010046,
      -0.016085185,
      0.009659215,
      -0.000008203318,
      -0.0030919958,
      -0.045763627,
      -0.009714827,
      -0.0008789557,
      -0.00015436485,
      -0.026295641,
      0.038995508,
      -0.0092840735,
      -0.005625601,
      -0.0045007113,
      0.0069796634,
      -0.018548612,
      -0.031149577,
      0.01303344,
      -0.012818147,
      0.018137183,
      -0.025223058,
      0.02861569,
      -0.025748182,
      -0.013568831,
      0.0047667683,
      0.00013391832,
      -0.0012646962,
      -0.0008652268,
      0.022467716,
      0.0049925814,
      -0.0034081521,
      0.008013801,
      -0.011371112,
      -0.0053421874,
      0.0209018,
      0.032334533,
      0.007246658,
      0.0063461056,
      0.0071476647,
      -0.005884211,
      0.01060127,
      -0.008387269,
      -0.002299534,
      0.017165171,
      -0.017454948,
      0.020187845,
      -0.015011956,
      -0.0010781442,
      -0.0011100713,
      0.013294072,
      -0.016959736,
      0.0266398,
      0.0075807213,
      -0.02388341,
      0.014500656,
      0.019789783,
      -0.0032757174,
      -0.0015777809,
      0.00023391242,
      0.018849093,
      0.0069858823,
      0.01696895,
      -0.009256873,
      0.008677851,
      0.00503853,
      -0.0135266725,
      0.014997802,
      0.041491847,
      0.013909863,
      0.004809311,
      -0.011554258,
      -0.0045153215,
      0.005624864,
      0.026267145,
      -0.01592708,
      -0.008693465,
      0.013882182,
      -0.014237885,
      -0.004896214,
      0.023262812,
      -0.0020958902,
      0.014351889,
      -0.012313542,
      0.008716177,
      -0.009501624,
      0.008727544,
      -0.026218569,
      -0.010374962,
      0.0037779596,
      0.0007424454,
      0.017232377,
      -0.0034294836,
      0.004826419,
      0.012101613,
      0.0064977696,
      0.0057996335,
      0.017562978,
      0.02242482,
      0.010755163,
      -0.02569733,
      -0.01828683,
      -0.0015861489,
      -0.0018409357,
      -0.015821313,
      0.026121538,
      0.009391239,
      -0.005374531,
      -0.0065896707,
      0.01129798,
      -0.0067709116,
      0.006155274,
      0.02905363,
      0.016353425,
      -0.004454142,
      0.018250765,
      0.002955365,
      -0.032448187,
      0.0068202284,
      0.009909743,
      0.016143356,
      -0.019794451,
      0.027303075,
      -0.020885948,
      -0.018714475,
      -0.013637499,
      0.013393178,
      -0.007852771,
      0.019882325,
      -0.014058466,
      -0.022416094,
      0.00046516355,
      0.01689702,
      0.011816426,
      -0.006762414,
      0.021791944,
      -0.0061221286,
      0.026542505,
      -0.003484425,
      0.017188346,
      0.011051202,
      0.03273513,
      -0.0559988,
      -0.01263619,
      -0.096916504,
      0.01728965,
      -0.00006453185,
      -0.036835086,
      0.026088377,
      0.01252647,
      -0.027561115,
      -0.0012960747,
      0.013627631,
      0.0075601484,
      -0.0065817838,
      -0.031754997,
      0.029509874,
      -0.038882717,
      0.002362815,
      -0.006982357,
      -0.0057219057,
      0.00470725,
      0.03584902,
      -0.002612689,
      -0.009755916,
      -0.03543504,
      0.010225677,
      0.0018212163,
      0.011296232,
      -0.0023754481,
      -0.008144312,
      0.015283874,
      0.008357956,
      0.018372128,
      0.011437167,
      0.0070330426,
      0.0059942673,
      0.0023237425,
      -0.0039026006,
      0.005680898,
      0.010406377,
      -0.013278218,
      -0.0014267882,
      -0.011982891,
      0.0137371225,
      -0.01169237,
      0.021778135,
      0.02760659,
      0.007046233,
      0.0124938525,
      0.00028003516,
      -0.0006987092,
      -0.005259624,
      0.0017413754,
      -0.0065395907,
      -0.0011082793,
      0.009774435,
      -0.006080032,
      0.0055266083,
      0.020640103,
      0.018196095,
      -0.017623773,
      -0.008289246,
      -0.017557448,
      0.013758758,
      0.026900899,
      -0.0039971443,
      0.0042514103,
      0.017256629,
      -0.009223416,
      -0.011962994,
      -0.008758034,
      -0.0085036,
      0.011034452,
      0.007051434,
      0.003528219,
      -0.008088567,
      -0.010957991,
      0.0119914645,
      0.010685785,
      -0.00083245354,
      -0.00067167776,
      -0.01818072,
      0.041320473,
      0.00048097907,
      0.005951126,
      -0.014172734,
      0.022113329,
      0.013244157,
      -0.0000023901287,
      -0.012437319,
      -0.01753281,
      0.014124658,
      -0.015886191,
      0.006807896,
      0.01101139,
      -0.009475025,
      -0.0005512179,
      -0.009414703,
      0.012515117,
      -0.021875186,
      -0.013204853,
      0.0024387294,
      0.029879326,
      -0.01240994,
      -0.00038458602,
      -0.016583033,
      -0.023222085,
      -0.0027507513,
      0.0059575457,
      -0.019765496,
      -0.0121775195,
      0.012076418,
      -0.006193142,
      0.015080407,
      -0.005565002,
      -0.020573977,
      -0.005394277,
      -0.009232767,
      0.007446597,
      -0.00025723505,
      0.014877201,
      0.005332742,
      -0.013389193,
      -0.0023402695,
      -0.008792499,
      -0.017514547,
      0.0063928417,
      -0.00294826,
      -0.0046682945,
      -0.020155014,
      0.024211558,
      0.0073669115,
      -0.03169281,
      -0.02523345,
      0.011907829,
      -0.025823586,
      -0.02292346,
      -0.011136179,
      0.009590707,
      0.012792718,
      0.012267517,
      0.0018644136,
      0.0055011404,
      -0.016650705,
      -0.014533611,
      0.025309864,
      -0.006490166,
      -0.013572318,
      0.025078427,
      -0.012922119,
      -0.008130374,
      0.0036518078,
      -0.0058494112,
      -0.006337722,
      0.0024576674,
      -0.004715386,
      0.009176693,
      0.00035826027,
      0.008857134,
      0.01124636,
      0.015518326,
      -0.011528981,
      -0.01926273,
      0.019974971,
      0.00866641,
      -0.018476062,
      -0.013477112,
      0.022778608,
      0.009652961,
      0.0010453683,
      0.017761601,
      0.005434655,
      -0.014794898,
      -0.007860367,
      -0.008756442,
      -0.032040853,
      0.009920749,
      0.004116561,
      -0.005671343,
      0.009943254,
      0.0006328221,
      -0.005809999,
      0.021929735,
      0.018839654,
      -0.0087610595,
      -0.007301549,
      0.018992579,
      0.018449996,
      -0.0027721173,
      -0.0032968454,
      -0.005788808,
      -0.028475946,
      0.0096468,
      0.004284481,
      -0.0045972657,
      -0.027744032,
      0.00711954,
      0.020916037,
      -0.005028597,
      -0.01077572,
      0.0074694036,
      0.011209144,
      0.00765761,
      -0.01181933,
      -0.012806599,
      -0.009186859,
      -0.001894754,
      0.028709449,
      -0.029517822,
      0.01873241,
      -0.008988639,
      0.018002361,
      0.03146273,
      0.0018200434,
      0.0046523665,
      -0.0021232446,
      0.0065609734,
      -0.0038307584,
      0.024730943,
      0.033038855,
      -0.0009301144,
      -0.023771835,
      0.0025349665,
      -0.0026124504,
      -0.025890715,
      -0.0036997856,
      -0.033056,
      0.017706057,
      -0.0027325405,
      -0.029824229,
      0.009986395,
      -0.010735182,
      0.016416343,
      -0.009850515,
      -0.013719274,
      -0.02184662,
      0.020373302,
      -0.035067666,
      -0.021310901,
      0.014739027,
      0.00016675841,
      -0.024985434,
      0.007236427,
      -0.0022534688,
      -0.02182259,
      -0.035870895,
      0.009872063,
      0.0026957816,
      -0.0036937834,
      0.026400412,
      -0.0009264518,
      0.0024023526,
      0.016150132,
      -0.00842197,
      0.02465586,
      0.007819094,
      -0.009487164,
      -0.029539784,
      0.017687209,
      -0.0011584199,
      0.0007570316,
      -0.004330058,
      0.00011766772,
      0.017991442,
      0.0034700907,
      0.011973903,
      0.0052314093,
      -0.012940337,
      0.0022705258,
      -0.014105799,
      -0.009363162,
      -0.003286522,
      -0.13039155,
      -0.011637545,
      -0.011836415,
      -0.0076980935,
      -0.006282931,
      0.018128194,
      -0.0142956935,
      -0.028439336,
      -0.009034397,
      -0.008416059,
      0.035819057,
      0.0153141925,
      -0.008985208,
      -0.017486263,
      0.02701119,
      -0.002666433,
      0.006700121,
      0.0010994535,
      0.021488272,
      -0.013750715,
      0.0098364,
      0.0008549598,
      -0.0029043413,
      -0.0060919346,
      -0.009715343,
      -0.012565163,
      0.0059280917,
      0.0046906336,
      0.010764486,
      -0.009684373,
      -0.010160357,
      -0.016056074,
      0.0036939546,
      0.010127094,
      0.011164684,
      -0.023027962,
      -0.0060851835,
      0.011018482,
      0.018164715,
      -0.013366451,
      -0.0038268191,
      -0.004231408,
      0.043435212,
      0.0035856613,
      -0.0050275675,
      0.017107125,
      0.026153322,
      -0.005265314,
      -0.0025903338,
      0.028810073,
      -0.033436053,
      0.010825235,
      -0.004563279,
      -0.036060102,
      -0.01507977,
      -0.016396862,
      0.01062236,
      -0.0037187582,
      -0.0037455764,
      -0.005955535,
      0.0027844245,
      -0.006116358,
      0.011924915,
      0.0128357075,
      0.0076167216,
      0.0047307597,
      0.031960048,
      0.0074056946,
      0.011954058,
      0.005891224,
      0.011539327,
      0.0000058060787,
      -0.018003238,
      0.01661924,
      0.015128992,
      0.006313595,
      -0.019641832,
      -0.009711489,
      -0.010074062,
      0.00480585,
      -0.043300014,
      -0.020469695,
      -0.06280165,
      -0.015289308,
      0.020883365,
      -0.013406717,
      0.0041077733,
      0.017517675,
      -0.014666179,
      0.013626485,
      0.025285317,
      -0.016933747,
      -0.0031790687,
      0.000036292815,
      0.0013895007,
      -0.007918862,
      -0.009773705,
      0.021729792,
      0.0021190231,
      -0.01944428,
      -0.013209192,
      -0.028620427,
      0.013915612,
      -0.0035800994,
      -0.012665459,
      -0.02232411,
      0.02093036,
      0.012502234,
      0.00023075023,
      0.016546557,
      -0.0010657752,
      -0.0009299397,
      0.008197273,
      -0.14250953,
      -0.021706123,
      0.0070400597,
      0.017619936,
      0.02624579,
      0.019239554,
      -0.01748999,
      -0.014592505,
      0.021577835,
      -0.015609449,
      0.021509787,
      0.0022138585,
      0.0039191,
      0.013376892,
      0.03272695,
      0.12829785,
      -0.012616247,
      0.0029215694,
      -0.012363489,
      -0.00026476264,
      -0.0039582476,
      -0.015743235,
      -0.0062855873,
      0.0084723495,
      -0.015618364,
      -0.016825555,
      -0.0037765086,
      -0.009767079,
      0.0014430671,
      -0.014414907,
      0.023512881,
      -0.01748766,
      0.011345819,
      0.040928647,
      -0.0014728227,
      -0.0030521716,
      -0.003559887,
      0.014965285,
      -0.0052173873,
      0.002319129,
      0.014840547,
      0.0032375858,
      0.008747532,
      -0.009138045,
      0.003952453,
      -0.012884258,
      -0.0072838697,
      -0.012160796,
      0.003703003,
      -0.0059451554,
      -0.032338314,
      -0.036298398,
      0.013751991,
      0.008109604,
      -0.0043393816,
      -0.010947295,
      -0.007503685,
      0.03149944,
      0.0041925255,
      0.016833743,
      0.00663303,
      0.005454676,
      -0.031586185,
      0.0070510325,
      -0.0052512167,
      -0.009588627,
      0.025383275,
      0.0064271376,
      0.02138373,
      0.0042548873,
      0.01008156,
      0.009571943,
      -0.0017279257,
      0.01860636,
      -0.0121148955,
      -0.008130428,
      -0.010205901,
      0.04016667,
      0.013094678,
      0.010652606,
      0.010858819,
      -0.0006610685,
      0.0002346739,
      -0.008334566,
      0.0012727695,
      0.004407402,
      -0.009452141,
      0.025482066,
      0.0030874137,
      0.005955658,
      0.017304974,
      0.020627756,
      -0.006513889,
      0.024589462,
      -0.0010637409,
      0.0065140235,
      0.020150011,
      -0.009346938,
      0.011854694,
      0.0017066465,
      0.014228341,
      -0.012563036,
      -0.021497596,
      -0.04484014,
      0.016547594,
      -0.0031909295,
      -0.008880448,
      0.033327095,
      -0.006619621,
      -0.02346663
    ]
  },
  {
    "id": "genai_cohort_python_08_Method_Resolution_Order___MRO_vtt",
    "content": "So we have talked decently about inheritance and now we want to talk about multiple inheritance. Now to be honest, there is nothing too much to talk about for multiple inheritance. You can have comma separated as many classes as you want to have in that. Usually we don't prefer to have too many classes. are more than enough for us. But even having two of these classes as inherited classes it sometimes can create problems. I will walk you through with an example. But, but the topic that we want to discuss in this is pretty interesting. If you look at this, this is known as Method Resolution order. What does this mean? This is a very fancy one and yes it looks fancy. It is fancy. If you look at the documentation, this is what it says at the very top of the documentation. And don't worry, this is not actually I'm not showing you Python X version documentation. It was introduced in Python but it is still used including in the Python So don't you worry, I'm not showing you anything outdated. The most important part is in the abstract. The document is intended for Python programmers who want to understand the C3 method resolution order used in Python Although it is not intended for newbies. Yes, that's the case, it's not intended for newbies. It's quite pedagogical with many worked out examples. So don't you worry. Although this topic doesn't seem like beginner friendly and especially when you look at the diagram like what is all going on with this one? You will get it absolutely when we start writing the code. But let me walk you through with the examples that what it means by and what's the whole thing about what's the whole fuzz? Let's just say this is our class. And if I go ahead and say this is our class A and we define another class just like this, this is a different class. We are calling them A and B to make sure that we easily understand this. Now let's just say we have another class which is. And also this class, this B is actually inheriting this one. All right, let's make it a little bit more of a complex. This is the class C that we have and let's just say C also inherit from the class A. And now finally you define a simple class which is D. And what this D does, it actually inherits from the class B and as well as inherits from the class C. And all of them have just one single method to work on with. Now if you call that method in the D. Is it going to be called from C or from B or from A? I know this is a little bit confusing and that's the reason I want to actually go through with the code first. Code will actually make life much, much easier. In this case we'll go with 08_mro py. Yes, this topic is known with the name of MRO. Although the full name is really really complex. But nobody calls it with the full name of Method Resolution Order. You will always hear the MRO Word here. Let's just define what we have written there. So let's just say we have a class A and class A doesn't do much. It has oops, shouldn't write that class A. And what the class A does, it has simple a label that is it to make the life easier. And I will mark it as A so that we figure out that. Okay, this is coming up from the class A. I'll call this one as simply base class. And what extra we have, we have class B which also has the same thing label. Nothing else, no init nothing. This time we'll mark it as B and we're going to call this one as Masala Blend. Not only that, we actually go ahead and say this one is going to inherit from the class A. This is exactly what we did. And the question I'm going to ask you is going to be little bit interesting. So pay a small attention. This one also gets inherited from the class A. All right, we are getting interesting there. Label. And this one is actually class C. And we are going to call this one as Herbal Blend. And here comes the question after one more class, actually we have class D which actually goes ahead and inherits B and C. Yes, this one is inheriting from two classes and this one has same thing label. And the label goes like this which says or it doesn't have anything. Let's just say, let's make it even more fun. It doesn't have anything. Now if I go ahead and say that I am creating a cup and that cups come from the class D which doesn't have anything and if I try with the printing of the value that says cup dot and definitely cup has the label. We know this very for sure. But can you discuss what will be the output of this? I'll zoom out a little bit so that you can see all at once. I'll zoom back again, don't you worry. This is very interesting and we need to understand what is happening how Is it happening? A has a label which has a, base class B which inherits from A. And notice this, this is also N by the way, if you're thinking this is too aggressive to going on. No, in the large frameworks and large libraries of Python this is a very common thing which happens all the way along. And the class C also inherits from A. And this says a, label is being overwritten and the class D doesn't have any label. So this one thing is sure that the D doesn't have any labels. So it has to look either in the C or in the B or since B and C both are actually taking this and have this label up in the superclass as well or the parent class as label. Which one is going to print? This is very difficult to determine. I'll tell you a trick as well to actually go ahead and work with this. First let's run the code. So not like that, definitely. I want to open the terminal right up here and we're going to go ahead and say Python and MRO. No, it's MRO. We get the B which is Masala Blend. And in case this is still confusing to you, whichever the class first, if there is any common such method which are being called up, it is being called from the very first class that you are inheriting. If you swipe this up from C to B, now obviously the method will be called from the C. This is a neat trick which everybody knows in the Python ecosystem, those who have been working around. But there is also one more interesting method that you can go ahead and print out. You can actually go ahead and say something like this. So if this cup is there, I can actually go ahead and say cup or I can use the entire class, let's just say I can go for the D. And if you go ahead and look at closely dot, underscore, underscore MRO exists here as well. Yes, this is a dunder that we can go ahead and use. And what's interesting about this dunder is if I run this, notice it, it says okay, I am a class D which further goes ahead and inherit from the class C first. Then I go ahead and inherit from the class B. And then further this class C that I'm inheriting, this since is inheriting from the class A. So this is what is mentioned, that I inherit from the class A. And then further this B actually inherits, B inherits A as well. So you'll notice that, hey, further I have objects so this is not being used much. The only trick that you need to remember always is that how the order of inheritance matters a lot. And that is it. That's your mro. Usually this is a bit of an advanced topic. Usually nobody covers it up and nobody understand the importance of it until unless you mess up with the framework manipulation like you are changing some internals of FAST API or maybe some SQL alchemy. Then you realize, all right, this is important part of it. But again, we are here to get our foundations really strong in the Python and that's why we covered this topic. That is it for this video. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "08 Method Resolution Order - MRO.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/08 Method Resolution Order - MRO.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.005522094,
      0.0038125955,
      0.014543559,
      -0.056384362,
      -0.016822243,
      0.002128229,
      0.0062607946,
      0.020563815,
      0.005650239,
      -0.005195271,
      -0.011640193,
      -0.0026674534,
      0.0081980275,
      0.033367336,
      0.1341736,
      0.011735104,
      -0.008112824,
      -0.0115794735,
      -0.007997525,
      -0.023311729,
      -0.006878414,
      0.00028299037,
      0.0072180657,
      0.0006915635,
      0.015264978,
      0.020772925,
      0.01394268,
      0.017027419,
      0.04523649,
      -0.020916581,
      -0.012751813,
      0.026909946,
      0.0073927348,
      0.031005112,
      -0.006341834,
      0.0023940466,
      0.022912933,
      -0.00064999156,
      -0.027651513,
      -0.007134676,
      -0.016279133,
      0.017168405,
      -0.011069187,
      0.0019814316,
      0.021846235,
      -0.030802365,
      0.010107546,
      -0.021939488,
      0.0026421738,
      0.0031802012,
      0.0015361707,
      0.020541452,
      -0.00018662652,
      -0.17884526,
      0.030300813,
      0.007669947,
      0.011865901,
      -0.008058499,
      0.004771506,
      0.003797901,
      -0.024643129,
      0.008946457,
      -0.0051804204,
      0.00837412,
      0.01607298,
      -0.03323117,
      0.018780971,
      0.014983553,
      -0.0050561903,
      -0.0020064437,
      0.020505385,
      0.010744323,
      -0.0491217,
      -0.02812842,
      -0.02471166,
      -0.018480686,
      0.0020399333,
      -0.0013895982,
      0.01063183,
      0.029453779,
      -0.00070671714,
      -0.0035033927,
      0.015403001,
      0.011620736,
      0.016007341,
      -0.0027529593,
      -0.01342869,
      -0.014936122,
      -0.008065712,
      0.0032699648,
      -0.004835946,
      0.029548695,
      0.006115026,
      -0.00781627,
      -0.019689897,
      0.0021017017,
      -0.020403428,
      0.00969349,
      -0.011225609,
      -0.0022475766,
      0.007983753,
      -0.0064629116,
      -0.015761044,
      -0.005111811,
      0.007992459,
      -0.0058875284,
      -0.028219236,
      0.008460952,
      -0.008645755,
      0.003725398,
      0.016011499,
      0.0024458736,
      0.008080819,
      0.015269437,
      0.016280135,
      -0.17177889,
      0.007746874,
      -0.0005229942,
      -0.0038126397,
      -0.011891434,
      0.0065702703,
      -0.0055302796,
      0.0051159603,
      0.007792002,
      -0.020131947,
      0.024252335,
      -0.006947072,
      0.022433938,
      -0.017316263,
      -0.010362933,
      -0.027042905,
      -0.011285434,
      0.0009393611,
      0.00444351,
      -0.0030381028,
      0.016530216,
      0.0084607685,
      -0.002884717,
      -0.03858549,
      -0.0016815445,
      -0.0069937618,
      0.02024379,
      -0.0052622072,
      0.032470237,
      -0.02000279,
      -0.014508043,
      -0.02111716,
      0.0016146386,
      -0.013245931,
      -0.02726716,
      0.009078957,
      -0.00851233,
      0.011063131,
      -0.028817557,
      0.006103578,
      -0.026404684,
      -0.0028228501,
      0.0073082177,
      -0.0054962533,
      0.00030223324,
      -0.006603218,
      0.0068302313,
      0.0011890283,
      -0.0030825748,
      -0.0025117751,
      -0.0026452262,
      -0.022051953,
      0.013076842,
      0.035420563,
      0.011908756,
      -0.008017185,
      -0.019005194,
      -0.011596433,
      0.019817548,
      -0.024353,
      -0.0053120614,
      -0.0082925055,
      -0.0031755653,
      0.022888346,
      -0.030052556,
      0.0009134565,
      0.0035271312,
      0.030259965,
      -0.004185314,
      -0.00046870863,
      0.00336269,
      -0.015653078,
      0.018857326,
      0.018977797,
      0.026805717,
      -0.0023967593,
      -0.002562057,
      -0.013687011,
      -0.0070594815,
      0.013632181,
      -0.02128453,
      0.009649162,
      0.01195387,
      -0.01633474,
      0.017170103,
      0.023403281,
      0.0031928539,
      -0.0104119675,
      -0.017390227,
      0.0001279657,
      -0.0017206876,
      0.027121138,
      -0.010143081,
      0.0066060545,
      0.008564911,
      -0.01915319,
      0.015738435,
      0.0039253137,
      -0.013618139,
      0.01828537,
      -0.004981101,
      0.0042413063,
      -0.000679851,
      -0.0011966304,
      -0.018060949,
      -0.012195444,
      0.0035417303,
      -0.0020159504,
      0.012881375,
      0.0026581776,
      0.007085533,
      -0.002340831,
      0.021443646,
      0.0060853953,
      0.0028574963,
      0.026367238,
      0.014134391,
      -0.020719722,
      -0.0004013398,
      0.00813572,
      0.004366366,
      -0.023618331,
      0.021603173,
      0.02079832,
      0.009768844,
      -0.008877688,
      0.014577862,
      0.0023041486,
      0.009840925,
      0.028838346,
      0.0043290188,
      -0.005640359,
      0.0025198488,
      -0.00082121405,
      -0.026190082,
      0.00008622611,
      -0.0024578772,
      -0.000017346925,
      -0.014606909,
      0.03075039,
      -0.02804398,
      -0.032125905,
      0.009098129,
      0.0073775216,
      -0.021649087,
      0.0010792273,
      -0.008373299,
      -0.0256067,
      -0.014946625,
      0.028933067,
      0.0049958867,
      -0.0046948185,
      0.01636196,
      -0.015933003,
      0.03678859,
      0.0070264065,
      0.009028754,
      0.014137391,
      0.01442261,
      -0.023358813,
      0.019033419,
      -0.111839205,
      0.009310328,
      -0.024321424,
      -0.028728634,
      0.012651629,
      0.020237021,
      -0.032998297,
      0.00080189254,
      0.007519827,
      -0.004154526,
      -0.002054837,
      -0.014231061,
      0.036749188,
      -0.037181664,
      -0.0072141807,
      -0.026055098,
      -0.011540195,
      0.004397612,
      0.03664244,
      -0.0115880575,
      0.011215963,
      -0.005862018,
      0.013527565,
      0.025664466,
      0.013123932,
      0.008424634,
      0.00024649277,
      0.01654388,
      0.021972865,
      0.0054096915,
      0.010236077,
      0.020574505,
      -0.0011756785,
      -0.017796403,
      -0.0009722518,
      -0.011714474,
      -0.0022674701,
      -0.03928192,
      0.0013972225,
      -0.012304922,
      0.018636132,
      -0.026001913,
      0.014932897,
      0.03362355,
      0.008531216,
      0.029868323,
      -0.010671668,
      -0.0021723066,
      0.0022617993,
      -0.00008644604,
      -0.0045917686,
      0.010491409,
      0.017669022,
      -0.009834226,
      -0.008824586,
      0.022862488,
      0.016098361,
      -0.0014161313,
      0.010263268,
      0.027738964,
      -0.019282803,
      -0.011177401,
      0.009103064,
      -0.011687317,
      0.007803857,
      0.0030920294,
      -0.0005531885,
      -0.016418483,
      0.007479173,
      0.012971546,
      0.023914183,
      0.009748574,
      -0.013722542,
      -0.019083984,
      0.036144983,
      0.000398722,
      0.007880515,
      -0.0350623,
      -0.028003387,
      0.023488024,
      0.006340258,
      0.0030357044,
      -0.0056455242,
      0.0056498316,
      0.00026877754,
      0.0037551965,
      -0.011836524,
      -0.002886819,
      0.015368484,
      -0.030326007,
      0.016901353,
      0.014550828,
      0.00026358783,
      0.0006746269,
      -0.034620978,
      0.008051122,
      -0.009120584,
      -0.01423959,
      0.0027423576,
      0.032988165,
      -0.016577847,
      -0.00058035564,
      -0.014373191,
      -0.004881482,
      -0.003169257,
      -0.010422461,
      -0.021447685,
      -0.0034635407,
      -0.008223135,
      -0.009221849,
      0.0035353065,
      0.0090044625,
      -0.019100342,
      0.00056264945,
      -0.008448388,
      0.026389211,
      -0.0075497697,
      0.016387781,
      0.0041606426,
      -0.021350473,
      0.0031990057,
      -0.001749609,
      0.008412541,
      0.010688926,
      0.0029988,
      0.000046986777,
      -0.014716702,
      -0.0015023766,
      0.008036133,
      -0.024938503,
      -0.035154913,
      0.010150841,
      -0.024489116,
      -0.0076236087,
      -0.010314083,
      -0.0026585886,
      0.01384238,
      0.01675754,
      -0.02282203,
      -0.004285833,
      -0.004284304,
      -0.006988933,
      0.021094326,
      -0.0043254746,
      -0.011863235,
      0.011581988,
      -0.010417274,
      -0.0012933366,
      -0.0051716226,
      -0.015192786,
      -0.007337264,
      -0.008485018,
      -0.015389657,
      0.00486042,
      -0.014446692,
      0.017499946,
      -0.019921413,
      -0.01681421,
      -0.02443091,
      -0.024415743,
      0.0126114525,
      0.007890855,
      -0.02206875,
      0.00876537,
      0.020305514,
      0.007853656,
      -0.0043750214,
      0.024362942,
      -0.011231556,
      -0.014528781,
      -0.01884406,
      -0.0048684804,
      -0.016512875,
      0.0039327955,
      0.006006959,
      0.016064065,
      0.019267272,
      -0.0085907895,
      -0.008546505,
      0.027588172,
      0.017257594,
      -0.0027884492,
      -0.020488197,
      0.012387326,
      0.001955585,
      0.00026597673,
      0.0022725007,
      0.010063087,
      -0.014434169,
      0.0058986004,
      0.029859139,
      -0.015016465,
      -0.006280233,
      0.0038227167,
      -0.004520243,
      -0.0021587138,
      -0.0020551947,
      0.0058376803,
      0.012381606,
      0.011488778,
      -0.0038034406,
      -0.019786974,
      -0.00915966,
      -0.009455351,
      0.0052818023,
      -0.01944267,
      -0.00058024947,
      -0.031889625,
      0.019511763,
      0.02624238,
      0.014832743,
      0.003688384,
      0.009746878,
      0.006949392,
      -0.005805645,
      0.009289195,
      0.03574112,
      -0.0061981105,
      -0.029215567,
      -0.0029196606,
      0.0118342815,
      -0.017341215,
      0.0030418541,
      -0.011243238,
      0.032212645,
      0.006719334,
      0.009930925,
      -0.0053629763,
      0.0035675217,
      -0.0013962893,
      -0.005575173,
      -0.006059896,
      -0.011723881,
      0.021520443,
      -0.035989694,
      -0.0037112169,
      0.021212675,
      0.0046934495,
      -0.014881773,
      -0.0018799359,
      0.0047589857,
      0.0025551338,
      -0.02083179,
      0.014484696,
      0.0033435954,
      -0.013695397,
      0.018193014,
      0.014912414,
      -0.0037510542,
      0.0046715164,
      0.003929226,
      0.029660348,
      -0.01308038,
      -0.0003249862,
      -0.032431975,
      0.032053206,
      -0.013382907,
      0.0047053625,
      0.0032095795,
      0.011343283,
      0.03590325,
      0.021532215,
      0.019163279,
      0.020790733,
      0.0035790403,
      0.00813101,
      -0.0011989232,
      0.004729303,
      0.0005360128,
      -0.12622805,
      -0.012610852,
      0.00093537325,
      0.004897484,
      -0.022930475,
      0.020335687,
      -0.012913316,
      -0.016695375,
      -0.01369025,
      -0.011482952,
      0.023915729,
      0.021541918,
      0.010490168,
      -0.016239021,
      0.027408546,
      -0.009175692,
      0.009913423,
      -0.0008175894,
      0.009649235,
      0.009230029,
      -0.002850763,
      0.0022441226,
      -0.009194832,
      0.023876505,
      -0.019550549,
      -0.011453089,
      -0.0042755585,
      -0.0037823042,
      0.0050222185,
      -0.014683238,
      -0.02831841,
      -0.015199509,
      -0.002318341,
      0.01224095,
      0.01711302,
      -0.00504261,
      -0.016170109,
      0.01386362,
      -0.011121161,
      0.0067466917,
      -0.007975822,
      -0.019904261,
      0.022279527,
      0.0043587894,
      -0.024973217,
      0.009876676,
      0.037029225,
      -0.0034770381,
      0.011754214,
      0.030380419,
      -0.029578134,
      -0.006768199,
      0.009960069,
      -0.025936656,
      -0.0053858403,
      -0.028709685,
      0.015980532,
      -0.0049050744,
      -0.009983096,
      -0.01666556,
      -0.010235295,
      0.0030142001,
      0.0001883247,
      0.020309106,
      0.0048731808,
      0.011274624,
      0.030384807,
      -0.006085914,
      0.010973185,
      0.013757249,
      -0.012206061,
      0.010029376,
      -0.011622203,
      0.02602538,
      0.0037869457,
      0.007329108,
      0.0025110824,
      -0.0006284592,
      -0.012074432,
      0.004900104,
      -0.04213838,
      -0.011002118,
      -0.066921115,
      -0.005305008,
      0.014540802,
      0.003288466,
      0.0146102635,
      -0.00037038876,
      -0.0042047924,
      0.009014056,
      0.009367807,
      -0.014158089,
      -0.031432733,
      -0.0051299073,
      -0.00037450148,
      -0.0006703074,
      -0.019468019,
      0.0076823295,
      -0.0057023917,
      -0.031861134,
      -0.010112962,
      -0.01225101,
      0.009304321,
      -0.018166957,
      -0.0020836617,
      -0.010990427,
      0.018235974,
      0.0008370339,
      -0.02205151,
      0.0053861476,
      -0.011057374,
      0.020039726,
      0.00010121248,
      -0.13917391,
      -0.009175348,
      0.014316903,
      0.012153905,
      -0.0014439842,
      0.01727061,
      -0.014213729,
      -0.023771934,
      0.005034512,
      -0.010528525,
      0.017680567,
      0.00055464497,
      -0.0043488853,
      0.0050782305,
      0.019877743,
      0.13315481,
      -0.0077772713,
      0.006382986,
      -0.011434807,
      0.012651847,
      -0.009393025,
      -0.0048038512,
      -0.033550896,
      0.0106394235,
      0.0013525112,
      -0.0016788011,
      -0.014187324,
      -0.005164089,
      0.01592572,
      -0.016272064,
      0.0059644314,
      -0.01615475,
      -0.007110956,
      0.02997243,
      -0.0068298345,
      -0.0050812797,
      -0.020081937,
      -0.0031939785,
      -0.008982784,
      -0.0023292191,
      0.02138425,
      -0.0060036276,
      0.009451353,
      0.025758618,
      0.0062133935,
      -0.007857467,
      0.0049320622,
      -0.018077308,
      0.012214402,
      -0.017038768,
      -0.026828784,
      -0.045328833,
      0.003014899,
      0.011826889,
      -0.017134113,
      0.0009599538,
      -0.010590467,
      0.019146455,
      -0.0019525277,
      0.0062013557,
      -0.0015367828,
      0.018902956,
      -0.016919468,
      0.00602204,
      0.0015248897,
      -0.01514211,
      0.021077279,
      0.02698893,
      0.0021717416,
      0.0028439208,
      0.018370515,
      0.0066042193,
      -0.03101251,
      -0.00535516,
      -0.012247195,
      0.0017720831,
      -0.019475186,
      0.033677068,
      -0.006808214,
      0.0028098456,
      0.027997123,
      0.010611729,
      0.012190076,
      -0.0073260223,
      0.014987197,
      0.0029071693,
      -0.005057945,
      0.024668518,
      0.0066527175,
      0.0022700937,
      0.01008859,
      -0.0022141566,
      -0.008409911,
      0.03301676,
      0.00092605513,
      0.015101286,
      0.0152916275,
      -0.009334841,
      0.039823595,
      0.0072367378,
      -0.013287473,
      -0.0059862873,
      0.00069446134,
      -0.026711011,
      0.021726746,
      0.01895281,
      -0.008515817,
      0.008599158,
      -0.0014358691,
      -0.018022992
    ]
  },
  {
    "id": "genai_cohort_python_09_Static_Methods_in_python_vtt",
    "content": "Next up in this video we are going to talk about static methods. They are actually very fun and pretty easy to work on with. I'll just walk you through. So let's go ahead and get into the new file. And by the way, static methods are helpful when you want utility functions grouped with your classes without depending on any instance. And I know this is a lot and you might be thinking I didn't got it. What do you really mean to say with this jargon? Don't worry, I will explain you with the code and it will be super, super easy. Let me go ahead and create a new file for you. And let's create this one. And we're going to call and this one will be static method. It can be method or methods. Don't judge me on that. But we're going to just go like that. So let's go ahead and create a new file and start writing some code. Now in order to start with static method, first of all, let me get this up here. Go ahead and create a simple class. This will be a simple class which says chai utils a simple utility for the chai. And again we can go really crazy in that. But we'll just go with the simple one. So I can just go ahead and define a method just like this. Let's call this one as clean ingredients. Clean ingredients. And it will receive a text with this. This method just receives a text. Pretty simple. And what it does, it loops through the value. So it just says for item in text. And it takes the whole text and split it and use a method known as split with all the text and splits it based on the comma. All right, so we receive a long text which might have a comma and we just split them based on the comma. Once we are done with this, we want to actually go ahead and get the response and remove all the spacing from it. Got it. Pretty simple. So I'll just go ahead and put up. This is the part we have studied. So if you remember this, we can create an array just like this. And now I can actually comprehend it. So I'll receive an item here. That is we have studied and I also further want to strip it down. So there we go. And we're going to return this. This is a really classic way of writing, the things. So let me give you an example of how this will actually work. So let's just say you have a simple string just like this. You have a space at the start. Then you simply say water and then probably you have one more space, then you simply go like this and then say you have milk, two spaces, a comma and then we are going to have ginger just like this and goes like that. So if any string like this is being passed onto this, we are actually going ahead and extracting all the values separated by comma, then stripping all the extra spaces. That's why this item strip and. And we get all the value as a nice sorted array. This is what it does. Now there are a couple of ways how you can use it. Let's go ahead and define this. So let's just say this is a raw and this is a simple string with a space. We have a water, then a space, then a comma and then we have milk, then we have a space comma just like this we have ginger, ginger which also have a space and then finally honey. And that is how it looks like. So we want that this string should be passed on to this utility function and we should extract the value. Now most of the time what you're going to do is we're going to go ahead and create an object. So let's call this one as object. This object will be from the chai utils just like this. And now through this object I can just go ahead and call the method cleaningredients and then I have to pass this raw method. Absolutely nothing wrong with this. This is the usual aspect or usual way of how we build the things. But, but there is another way that these are the things which doesn't need any object. We just want that something needs to be passed on through this kind of a method. So there is another interesting way and this is where the decorator comes up. So you can just go just about this one. And by the way ignore this part up here and I can just annotate this with a static method use at the rate and then say static method. Now your way of writing the code is now going to be different. You can directly use this chai utils and have the method. cleaningredients. yes, we can now do this and pass on a raw value just here and we can store this raw value here. So let's just call this one as cleaned. And now we can just go ahead and print this cleaned. There we go. So I hope you got the value that how the static method and they are used quite a lot. They are used quite a lot. Let me show you by opening this up and we will say Python and this will be and there we go. We got all the values. Can we do this with the previous method as well? Of course. But static method are those methods which doesn't require any object creation. They are not dependent on the object. You can directly go ahead and use the classes and as a utility methods and these are very common in utilities. You create a lot of utilities like database interactions and especially in the fastapi, a lot of them are there. So directly use the class name. And this is also another one way of using it. So this is it. For the static methods, there is nothing more to it, nothing less to it. It's just a way and how you do it. And make sure you don't forget the decorator. If you intend it that this method should be allowed to be used without creating an object. Don't forget this decorator. And that is it. Hope you're enjoying these things. And if you're enjoying, please do rate us. We would love to see your rating. This is something that helps us to motivate and build more awesome videos. That is it for this one. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "09 Static Methods in python.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/09 Static Methods in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.013242251,
      0.0122463945,
      0.027096143,
      -0.068551436,
      -0.018451413,
      -0.022721805,
      0.010272184,
      0.031225037,
      -0.0021599308,
      -0.0042318003,
      -0.017450592,
      -0.013906114,
      0.0028034998,
      0.008556527,
      0.106344245,
      -0.011316822,
      -0.009367323,
      -0.0060844393,
      -0.0038059717,
      -0.01832664,
      0.030819243,
      -0.002755416,
      0.012591159,
      0.0100513,
      -0.0022859464,
      0.0020850783,
      0.021220932,
      0.003931377,
      0.026330596,
      -0.01579661,
      -0.0020535674,
      0.027172066,
      0.024370307,
      0.01720943,
      0.024792684,
      0.016585065,
      0.016176095,
      -0.010080903,
      -0.023405366,
      0.009849909,
      -0.030239537,
      0.0055805845,
      0.008176399,
      -0.007276192,
      0.03361242,
      -0.014507966,
      0.024273535,
      -0.027515313,
      0.029749528,
      0.015514752,
      -0.002024682,
      -0.0069643897,
      -0.020332633,
      -0.17939085,
      0.02222047,
      0.015621302,
      0.0075949947,
      0.004799683,
      0.014150111,
      0.01854838,
      -0.02605276,
      0.012920297,
      -0.024591422,
      -0.00017605397,
      -0.013469291,
      -0.031125931,
      0.02295103,
      -0.0076471763,
      0.004197617,
      0.007086037,
      0.020280162,
      0.0005138282,
      -0.027812378,
      -0.0177827,
      -0.009220531,
      -0.038162168,
      -0.0032134415,
      -0.0018559373,
      -0.009428192,
      0.009931391,
      0.001707793,
      -0.023634885,
      -0.00512162,
      -0.017435221,
      0.024368903,
      0.007999835,
      -0.0284624,
      -0.020401794,
      -0.0052541257,
      -0.00941007,
      -0.00315768,
      0.009267988,
      -0.005381249,
      0.010056198,
      -0.00024761475,
      -0.0060620448,
      -0.017285755,
      0.013151177,
      -0.026777184,
      -0.0020463984,
      0.012114106,
      -0.010983301,
      -0.04407433,
      0.0026523506,
      0.022818219,
      0.00013650057,
      -0.017496437,
      0.012513996,
      -0.012353057,
      0.016823389,
      0.014383089,
      -0.008698547,
      0.0054634735,
      0.0048461696,
      0.0021287543,
      -0.1795321,
      0.00995858,
      0.0030501178,
      -0.001734281,
      0.005299557,
      -0.00017393117,
      0.015479542,
      0.018471839,
      -0.0021798986,
      -0.019970823,
      0.0068666,
      -0.006458407,
      0.016118,
      -0.0030839697,
      -0.0022283653,
      -0.022460772,
      -0.035461273,
      0.00070280733,
      0.010239426,
      -0.012486199,
      0.02036911,
      -0.009723348,
      0.0067825187,
      -0.015940672,
      0.0077345,
      -0.012139131,
      0.011408969,
      0.00082676456,
      0.021633182,
      0.001622362,
      -0.016484298,
      -0.008184562,
      0.009377832,
      -0.021197194,
      -0.018110387,
      0.006906019,
      -0.007153761,
      -0.0056222877,
      -0.008941468,
      0.0068851104,
      -0.02072854,
      0.017378092,
      0.0011541613,
      0.0020735057,
      0.024077676,
      0.009164258,
      0.019314572,
      -0.015532994,
      0.0144453235,
      -0.005636651,
      -0.01973076,
      -0.02299736,
      0.02871995,
      0.02213781,
      0.032557372,
      -0.007060231,
      -0.015862906,
      0.015045194,
      0.0059689647,
      -0.009160208,
      0.0029948365,
      0.0013620453,
      0.004352352,
      0.012992763,
      -0.01586367,
      0.00029493327,
      -0.018235112,
      0.037625145,
      -0.014206822,
      0.016633999,
      -0.0016522646,
      -0.017590184,
      0.010519547,
      0.0097686555,
      0.012819806,
      0.028896682,
      0.0051699337,
      0.02648129,
      0.027144112,
      -0.0032307627,
      -0.018036237,
      0.006422387,
      -0.011856284,
      -0.024337621,
      0.024532188,
      0.0281932,
      -0.00045323194,
      -0.00544037,
      -0.028639259,
      0.021701993,
      0.009945865,
      0.028302204,
      -0.014286263,
      0.01555719,
      0.0012794778,
      -0.025749596,
      -0.015893389,
      0.011921237,
      -0.008849835,
      0.0132772215,
      -0.0019007806,
      0.010404251,
      -0.0035790992,
      -0.0055302167,
      -0.011562837,
      -0.008199968,
      -0.01134903,
      -0.0021005422,
      0.01354619,
      0.0012470692,
      -0.008117581,
      0.006707287,
      -0.008103604,
      0.011901861,
      0.022711884,
      0.035444256,
      -0.013565215,
      -0.010917786,
      -0.00748469,
      0.007967565,
      0.003994744,
      -0.031450324,
      0.007746806,
      0.013309147,
      0.00025122837,
      -0.012218604,
      0.010380724,
      -0.010026079,
      0.0008741263,
      0.0150256725,
      0.020079767,
      0.004806286,
      0.0024442414,
      0.0047478396,
      -0.0064343708,
      -0.018640552,
      -0.009423545,
      0.018087849,
      -0.00497358,
      0.014681167,
      -0.00840727,
      -0.03391332,
      -0.010936375,
      -0.020343902,
      0.011719396,
      0.00060916523,
      0.004637137,
      -0.017721133,
      -0.0141237695,
      0.0069110394,
      0.004694236,
      -0.009913328,
      0.01173253,
      -0.008370795,
      0.02892598,
      0.01855961,
      0.009951929,
      0.016595779,
      0.0052423654,
      -0.031823214,
      -0.007648514,
      -0.09117458,
      0.033286635,
      0.010207634,
      -0.046124008,
      0.0030291139,
      -0.009170687,
      -0.049279146,
      0.021411227,
      0.0010708933,
      0.024246903,
      0.0065196254,
      -0.0039069583,
      0.032818656,
      -0.0149328895,
      -0.022525165,
      0.00005236484,
      0.0057417024,
      -0.0037330638,
      0.029453533,
      -0.013616626,
      0.003894861,
      0.005668323,
      -0.007987141,
      -0.00330395,
      0.027095577,
      -0.008199375,
      -0.013285025,
      0.018646456,
      0.014146435,
      -0.01650935,
      0.0055820937,
      0.029072354,
      0.0062822145,
      -0.012802772,
      0.0036810958,
      0.023074344,
      0.0005879066,
      -0.015844751,
      -0.024822244,
      -0.014927099,
      -0.012806058,
      -0.0012476612,
      0.030104358,
      0.03829129,
      0.002925446,
      0.011314936,
      -0.013568184,
      0.0060460777,
      -0.023253687,
      0.021948857,
      -0.010818207,
      0.005142745,
      0.02911953,
      -0.0027491106,
      0.019346055,
      0.00046716846,
      -0.00543948,
      -0.02473044,
      0.016524443,
      0.0041105873,
      0.007258806,
      -0.002836844,
      -0.0012144016,
      -0.015368292,
      0.017385527,
      -0.012147437,
      0.0057371263,
      -0.0045365174,
      0.0073828343,
      0.011544532,
      0.019253276,
      -0.008187479,
      -0.0068493104,
      0.0022402678,
      -0.0066770334,
      0.012556467,
      -0.013835941,
      -0.0052956976,
      -0.024079314,
      0.009942002,
      0.013058417,
      0.012893163,
      0.006207237,
      0.011550935,
      -0.017741736,
      0.013018015,
      0.018265815,
      0.012515256,
      0.011884127,
      -0.029558847,
      0.014345719,
      0.008323103,
      -0.000838167,
      -0.0035230545,
      -0.0037681425,
      0.02397295,
      -0.007658151,
      -0.0032506594,
      -0.009928905,
      0.028220303,
      -0.005814985,
      0.006252557,
      -0.0111650955,
      -0.0048790704,
      -0.009357572,
      -0.0015980948,
      -0.018674383,
      -0.030217046,
      -0.01668343,
      0.0023834663,
      0.0053566797,
      0.010441927,
      -0.014763084,
      -0.010558873,
      -0.006496131,
      0.004759282,
      0.0072399178,
      0.007171403,
      0.023866795,
      0.00876042,
      -0.016530192,
      -0.025464483,
      -0.022917632,
      0.0064006313,
      0.00050480856,
      0.009289826,
      -0.017752385,
      -0.0073598484,
      -0.011680929,
      -0.041674454,
      -0.023685697,
      0.019450346,
      -0.028488789,
      -0.011622007,
      -0.0049359603,
      -0.01908777,
      0.010888816,
      0.0117142275,
      0.03213478,
      0.019548027,
      -0.020618105,
      0.0011533189,
      0.014033493,
      -0.002282634,
      -0.007995663,
      0.018567614,
      0.0008410799,
      -0.005046897,
      0.0024624513,
      -0.035718687,
      -0.019587126,
      -0.007214545,
      -0.023108218,
      -0.0073262067,
      -0.015365748,
      0.012115072,
      -0.0057572485,
      -0.004235774,
      -0.0132945515,
      -0.0045849597,
      0.012688106,
      0.009384441,
      -0.005183677,
      -0.019068077,
      0.021496806,
      0.008601713,
      0.019815687,
      0.004738892,
      0.011573562,
      0.009529497,
      -0.010844985,
      -0.018015211,
      -0.021183575,
      -0.005232354,
      0.007714446,
      0.0028258036,
      0.019267289,
      -0.016571106,
      0.001695492,
      0.0008941858,
      -0.013202845,
      -0.010152108,
      -0.0427443,
      -0.0024129632,
      -0.0033290877,
      0.012672308,
      -0.0043098927,
      0.0040112906,
      -0.024317916,
      0.0004984582,
      -0.023039125,
      -0.024481902,
      -0.00774945,
      0.01627866,
      0.021497866,
      0.0006602454,
      0.005879571,
      0.0006972799,
      -0.0032155097,
      0.023946626,
      -0.017119845,
      -0.024030846,
      -0.014883178,
      0.012769264,
      0.01687337,
      -0.009464717,
      0.005311194,
      -0.015975537,
      -0.008613887,
      0.01443731,
      0.011739721,
      0.002952391,
      -0.008856078,
      0.00701708,
      0.011561905,
      0.03172719,
      0.008528666,
      0.0006722453,
      -0.027375929,
      -0.010389013,
      0.026304394,
      -0.019297004,
      0.0045883795,
      -0.016035592,
      0.013230447,
      -0.027025772,
      -0.021554004,
      -0.0012516321,
      0.009215722,
      -0.0035382162,
      -0.013616593,
      -0.011782618,
      -0.0077794124,
      -0.006032179,
      -0.010918162,
      -0.01740767,
      0.00028979988,
      0.022338415,
      -0.016130483,
      0.025312273,
      -0.0019915802,
      -0.02465574,
      -0.022908453,
      -0.016138962,
      -0.005150871,
      0.021107556,
      0.024619559,
      0.024268774,
      -0.02354481,
      0.0024658232,
      0.007599198,
      0.021019217,
      0.0006960796,
      -0.012723698,
      -0.002821093,
      0.018053038,
      -0.0038671212,
      0.0030646478,
      -0.010039283,
      -0.0036861515,
      0.0070795417,
      0.019637559,
      0.0030817464,
      0.0107591245,
      0.0026958028,
      -0.010736871,
      -0.0048003085,
      0.01507267,
      0.007615872,
      -0.122791804,
      0.010879972,
      -0.014352473,
      0.009177432,
      0.0045682113,
      0.009055278,
      -0.0044802222,
      -0.019307112,
      -0.006688292,
      0.00066237256,
      0.00942077,
      0.013866394,
      -0.013001108,
      -0.005287946,
      0.0172355,
      -0.010188145,
      -0.0035553048,
      0.022161469,
      0.0053010955,
      -0.0027447608,
      0.015802387,
      0.0006182852,
      0.0020698016,
      0.0070564,
      -0.027278185,
      -0.0066460622,
      0.014190158,
      0.0010460884,
      0.007028032,
      -0.0076279463,
      -0.034905147,
      -0.016938375,
      -0.009171183,
      0.01314573,
      0.018538898,
      0.010243017,
      -0.0022636466,
      -0.0012604397,
      0.015666481,
      0.015275789,
      -0.017291293,
      -0.01207554,
      -0.00009330645,
      -0.009165269,
      -0.0027664304,
      0.025273161,
      0.02907974,
      -0.011429742,
      0.010343133,
      0.051356103,
      -0.025593292,
      -0.0038472558,
      0.00043045933,
      -0.02793677,
      0.01002304,
      -0.0044842283,
      0.009925757,
      -0.0013644665,
      -0.00027905783,
      0.00034855216,
      -0.000633096,
      0.005340478,
      0.02469105,
      0.033464346,
      -0.021331122,
      0.0047298134,
      0.030186245,
      0.014515977,
      -0.010178527,
      0.017843172,
      0.00013404958,
      0.009316983,
      0.0025324177,
      0.01873326,
      0.0075064,
      0.009843592,
      -0.013180856,
      0.02481028,
      -0.018683955,
      0.022218892,
      -0.030794116,
      -0.0009546226,
      -0.044571828,
      -0.013837406,
      0.00085814047,
      -0.020738697,
      -0.0064937677,
      0.022121046,
      0.0060759787,
      0.015208914,
      -0.000592702,
      0.008172627,
      -0.027743917,
      0.009921422,
      0.009493493,
      -0.006685272,
      -0.026781002,
      -0.006112429,
      0.001088794,
      -0.01702396,
      -0.016016558,
      0.0039056158,
      0.0052335006,
      -0.0050393622,
      0.011379135,
      0.006995438,
      -0.0034795848,
      0.017346226,
      0.0067224433,
      0.009205226,
      0.006151162,
      -0.0019860642,
      0.012258563,
      -0.14981246,
      -0.013932479,
      0.002486514,
      0.028808605,
      0.004588734,
      0.004048799,
      -0.00079882354,
      -0.007422684,
      -0.007488882,
      -0.011335505,
      0.03252145,
      -0.00385741,
      -0.003571498,
      -0.0061693387,
      0.033048667,
      0.14031334,
      -0.018464908,
      0.008802012,
      0.000037755504,
      -0.0003148745,
      -0.0013908974,
      -0.010696387,
      -0.012179256,
      0.00021834526,
      -0.0043792203,
      -0.016880834,
      0.009957799,
      0.004876657,
      0.0140407635,
      -0.00088450825,
      0.009664231,
      -0.017358003,
      0.0059632696,
      0.03976976,
      0.0019231531,
      -0.013046462,
      -0.008408675,
      0.0028142305,
      0.01463344,
      -0.0012920232,
      0.009249837,
      0.019640101,
      -0.007316977,
      0.0006467574,
      0.0077808183,
      0.006059509,
      -0.0071831765,
      -0.0043147155,
      0.0031762929,
      -0.0011029728,
      -0.014766606,
      -0.04212756,
      0.026588744,
      0.01287855,
      -0.004573484,
      0.0001527832,
      -0.0054446934,
      0.018716684,
      0.015168197,
      0.02501766,
      0.0024250383,
      0.0043719937,
      -0.01785088,
      -0.015196852,
      0.007652696,
      -0.006374239,
      0.0100631,
      0.02045428,
      0.004274066,
      0.0015089315,
      0.0069053415,
      0.0004562127,
      -0.013046489,
      0.019352933,
      -0.008683113,
      -0.014403639,
      -0.0355025,
      0.051024295,
      0.009350826,
      0.0030682902,
      0.012240452,
      0.0044486513,
      -0.012910794,
      -0.016610026,
      0.009070288,
      -0.0051256004,
      -0.012057897,
      0.025160808,
      -0.007260492,
      0.017728336,
      0.011058603,
      -0.011152632,
      -0.013991779,
      0.035367906,
      -0.00873891,
      0.009912607,
      0.011677116,
      -0.011659011,
      0.039493624,
      -0.002204226,
      -0.0059563653,
      -0.008500599,
      -0.018719759,
      -0.0044430285,
      0.02875318,
      0.011736726,
      0.02621589,
      0.01894666,
      -0.022389045,
      -0.012435478
    ]
  },
  {
    "id": "genai_cohort_python_10_Classmethod_vs_staticmethod_vtt",
    "content": "All right, so in the last video we saw that how the static method works. And it's a pretty interesting way to declare utilities and all those things. But there is one, drawback or kind of a thing where the static method doesn't work really well, which is when you initialize an object, the static methods are never designed to initialize any objects. It just work is designed to. So that class can actually direct, invoke that and can just use it like a utility. But there is also one more interesting thing, which is how do you control the constructor? We have seen we can use init method for declaring a constructor, but can we have more than one constructor? Sadly, no. You can have just one constructor, but there are ways to control the constructor and get a feeling like we have more than one constructor and more than one ways of kind of initiating an object from the class itself. It's a very interesting topic and sometimes it feels like it's very similar to static method. But I'll walk you through with that. So, first of all, I've created this nice diagram. So. And I will walk you through how it's being done. So the step one is going to be like this. We will simply go ahead and say that we have this class methods, we have the static method. We'll go through with the difference between each one of them. But first of all, we are going to go ahead and write, some code. So that is the easiest way and the most beautiful way to learn about the class method. So let's take some chi orders. I'll go ahead and say class chorder, and you take the order just like that. And, we simply go ahead and say that we want to create an constructor just like this. And you take, while taking the order, you ask them, hey, what's the T type you want to have, what's the sweetness you want to have? And what's the size you want to have? Pretty basic stuff. And as you know, when we declare the constructor, we simply go ahead and declare the properties within the constructor itself. This will be tea type, and we'll get the value from tea type. We'll have self dot and we'll call this one as sweetness, which will get its value from sweetness. And we'll have one more property which will be self size, which will get the value from size. All right, this is very standard stuff. We have seen this many times now. If you want to have multiple constructor, this is somebody is creating an object and providing you each individual values but there could be a chance that somebody might provide you a value in dictionary format or maybe a string format. And you want to have a constructor just like that. That whenever an object is being created, somebody can provide me direct values. We accept that. Somebody can provide me the value in dictionary format, we accept that. And somebody can provide me value in the string format. We also accept that that is the whole goal. So the step one of doing that is first of all you say class method, it's a decorator. Now that we understand the decorator and importance of it, then this is how it works. First of all, let's define a method. Let's call this one that we are accepting the value in the dictionary format. And the most differential factor from any other method that you design in any class is it doesn't get self. Yeah, that's the most interesting part. It gets cls, which is also a keyword. It means that we are getting a whole class reference in this one. And then you just get the order data just like that. This time you're not getting individual data, you're getting passed on as a dictionary. So how do we work with that? We simply go ahead and return. And how do we return that? That's interesting syntax. Follow this, up. This is a syntax, nothing to do with the logic. We simply go ahead and say this is a class. So I can just go ahead and create a class just like this. This is almost internally like calling the constructor from the same class. The CLS is a reference to the class. So, so this whole class. So when you say CLS just like this, that means I'm passing the whole values within this constructor behind the scene. So I can just come up here and can say that, okay, here from the order data, I want to extract a key. So first of all, the key that goes up here will be in the quotes, of course, will be ttype. And remember, this is how the values are being expected in this constructor. So you go ahead and do exactly same and I'll put up a comma, we need two of them. So the second key, you guessed it right, will be sweetness. This third key will be size, and that is it. So how interesting a way that now you have not only just one constructor, but you can actually accept the value as a dictionary as well. But behind the scene it's the same constructor that is getting called. And, can we design one more method just like this for practice? Of course we can. We will again use class method just like this. And let's Just say this time you want to take the value from string string. Just make sure you are designing it such a way that you are preparing for a string to come up here. This is class. And this time somebody gives us order string or order data. Could be same variable, no big deal there. And this time what I'm going to see is I have three variables. The first one is ttype. I have another one which is sweetness. And I have another one size. And I am getting all of them value from the order string. But I want to split it and I want to split it based on. Depends on how you're taking the value. Let's just say we are splitting them based on dashes. Could be comma as well, but we'll just grab the value just like this. All right, but this is not done yet. End of the day, always, always this kind of a method has to call the class just like this and has to call constructor. The rest of the, whole process is exactly same. We have to get the sweetness and the size. And this is it. This is. You are overwriting the constructor. Now the most important part is, all right, we get this, this part is all easy. How do we create object from this? Now creating the basic object is fine. I know you can do this. I'll show you how to actually utilize, these two methods. Because if still at this point in the course you don't know how to create an object and from this class and get these values. Oh man, you need to rewatch the videos again. Let me go through with this one. So let's just say we have a order one and this order one this time actually takes order from the chai order. But instead of passing it like this, you use a method as soon as you put up a dot. Now you can take order in the dictionary format or string and you will see this pattern quite a lot in Python. And here I have to say the key value pair. So this is my key. So first of all the key will go like this, so ttype. And then I can just provide the value which will be masala. Then another key value pair, sweetness, and its value is going to be, I don't know, medium, I don't know what even stands for medium, but you get the idea. And we'll have the last one which is size. And once I give it a size, the size will be, I'll take a large one this time and this is completely valid. Completely. Fine. And once I have, let me also show you the Order as well. Order this is exactly same chi order but this time you are grabbing the value from the string and as we have designed it this way. So we'll have a ginger ginger. Then we have a dash. We'll take the low sugar and then dash and we'll call this one as small. So automatically it will split this up. Now let's go ahead and print what do we get the value in the order and order That's most important part, we can just grab any one. Doesn't really mean order is fine. This next one you'll automatically get it. I'll open this up and let's see, we have a Python this time There we go. And notice here it says hey, I'm still an object of chi order object at best wherever the location is. This is interesting. Now another interesting thing that you can do is you can use so many dunders here. So one of the dunder that you will see is this dictionary. And let's see what happens when I go ahead and run this. So notice here all the values are here. So all the dictionaries are with me still if I go ahead and pass on the dictionary. Now this dict dunder is actually very interesting. Although you have this as a string. Now notice here, very interesting part, I still have all this value up here. Very, very interesting way. Can we have an order three as well? I guess we can have order three, order three and this time we use simplychai order and we pass on all the values. So we simply go ahead and tea type let's just say we want to pass the value of large. Then the second one, sweetness, we'll call this one as low and we will go like this and size will go with the large as well. Now can we go ahead and print out this exact same thing for the Order as well? That would be super interesting to know about it. And there we go, you still have all the values, so all the key value pairs. If you want to get all the values as dictionary you can actually go ahead and it's a good idea to study more about this dict dunder. Pretty interesting one and I'm pretty sure you learned something new about it. But I don't want to just call this video just right up here. There is little bit more that I want to show you here. Let's just say we have defined these classes and everything. Now I come back here to just show you that how static methods are different. We create another class which is chi utils and the whole job of chi utils is we don't have any construct or anything. We have a static method just like this. And I can define a simple is valid, is valid size and somebody passed me on this size and I can say return return size in and we can just check for it like this. If it is in small or medium we have to be very careful for the uppercase, lowercase how it's going on. So be careful with that large and this is example of how this can be done. So before taking the order or just at the time of taking the order, you can just ask for it. So I can just go ahead and print and I can say hi utils, I want to use a method there is only one is valid size. So customer is ordering me a medium. You can just go ahead and tell me that whether it is a size or not. And then only after getting this if clause, if I get the true, I take the rest of the order. So this is how it's being done. Now coming back onto the part, I hope this actually made it clear that all right, static method has their own place in the world and the class method has its own way of working with that. Coming back onto the diagram which I draw. So the class method it always receive the CLS the class itself while the static method receives no argument automatic first argument like we have seen that. No self, nothing like that. So it doesn't take anything it if you have a sense like there's a use case of passing the argument you can but there is no self there the use case this operates on the class, not on the instance. Remember that we never created an instance, it operates on the class. Whenever we are returning we are actually calling the class itself. No object was created there. Utility functions related to the class. We have seen that. Again, the class method, does it have access to the class? Yes, it has Static never has it. Do they have access to the self and as you have seen, no, none of them have the access to the self. So these are some of the differences between the static method as well as class method. So hope this video has given you enough of idea that all right, I know pretty much really in depth detail of the Python which I have never seen that oh Python can go this depth in such depth. Let's go ahead and catch up in the next video. Don't forget to rate us.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "10 Classmethod vs staticmethod.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/10 Classmethod vs staticmethod.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0017995103,
      -0.009597882,
      0.035285648,
      -0.052419785,
      -0.0069761346,
      -0.008743633,
      0.007704302,
      0.028741872,
      -0.004873469,
      -0.023019688,
      -0.0120450305,
      -0.015986007,
      0.008116951,
      0.016531607,
      0.12936455,
      -0.015178074,
      -0.013043261,
      -0.015150906,
      -0.010889766,
      -0.0074562444,
      -0.011399411,
      0.003399269,
      0.028135952,
      0.002198004,
      0.0062097046,
      -0.010081337,
      -0.0021165523,
      -0.003830076,
      0.031150592,
      -0.008432516,
      -0.018506914,
      0.03359878,
      0.016644062,
      0.01973206,
      0.017227786,
      0.008127664,
      0.029601956,
      -0.007298583,
      -0.024260575,
      -0.0030106653,
      -0.013625269,
      0.005178552,
      0.0024027305,
      -0.011041525,
      0.020909406,
      -0.02970205,
      0.019781087,
      -0.024472702,
      0.017272595,
      0.023018954,
      -0.0019596852,
      0.00017570109,
      0.0000091647125,
      -0.17270006,
      0.017645007,
      0.017852085,
      0.017651543,
      -0.02172626,
      0.015681406,
      0.009675067,
      -0.023281375,
      0.030060783,
      -0.03436398,
      0.0054511256,
      0.009933923,
      -0.026920334,
      0.031781785,
      -0.00372235,
      0.00006517729,
      0.009111818,
      0.039837215,
      0.00399483,
      -0.016197877,
      -0.012719922,
      -0.006693557,
      -0.034769144,
      0.011793326,
      0.0043898136,
      -0.0030080623,
      0.01626587,
      -0.0043025278,
      -0.015218791,
      -0.010072229,
      0.007652628,
      0.014196777,
      -0.0047752913,
      -0.014748929,
      -0.026538536,
      0.013887783,
      -0.0032984023,
      -0.0019311459,
      -0.0063345134,
      0.0037103589,
      0.0015435173,
      -0.01006119,
      -0.010217693,
      -0.016611014,
      0.0074050203,
      -0.0199543,
      0.012995435,
      -0.0043477523,
      -0.008303991,
      -0.021155948,
      0.00027038722,
      0.011153452,
      -0.01040775,
      -0.030184207,
      0.010065057,
      -0.019678662,
      0.01974937,
      0.0055424226,
      -0.015334872,
      0.0047877473,
      -0.00606474,
      -0.0010266685,
      -0.17252988,
      -0.0006618296,
      -0.009697131,
      -0.005200348,
      -0.0029068536,
      0.0030275488,
      -0.009989229,
      0.019785965,
      -0.0012296801,
      -0.010656643,
      0.009551034,
      -0.0026672874,
      0.009390888,
      -0.00012967594,
      -0.0075330976,
      -0.012839192,
      -0.026326638,
      -0.011075504,
      0.0056428225,
      0.0072368234,
      0.012330739,
      0.0004739657,
      -0.0054510874,
      -0.021289485,
      0.009293785,
      -0.010975699,
      -0.0064065754,
      -0.004007432,
      0.032105103,
      -0.014946887,
      -0.012669629,
      0.0035356442,
      0.019636875,
      -0.028106548,
      -0.026685027,
      0.014420204,
      -0.008152893,
      0.0009828222,
      -0.0015592558,
      0.022504443,
      -0.0137316715,
      0.020748401,
      0.013948484,
      0.0014983508,
      0.0056880466,
      0.009988962,
      0.014038936,
      -0.004481847,
      -0.00066644204,
      -0.0071621835,
      -0.01429417,
      -0.017319968,
      0.024365902,
      0.036069255,
      0.022006525,
      0.0021731248,
      -0.01743313,
      -0.0020206678,
      0.025696244,
      -0.009731341,
      0.0033664876,
      0.005428679,
      -0.00025638266,
      0.0071787294,
      -0.025889752,
      -0.0036103784,
      -0.012042095,
      0.012728582,
      -0.01649525,
      0.0073080356,
      -0.008887888,
      -0.0028649983,
      -0.010346768,
      0.021528294,
      0.0059198076,
      0.02188056,
      0.004893996,
      0.03803105,
      0.02633901,
      0.00761148,
      -0.013967703,
      0.008013992,
      -0.00325659,
      -0.020995243,
      0.012428806,
      0.032351866,
      0.007238904,
      -0.018833524,
      -0.021678645,
      0.023672309,
      -0.0063466597,
      0.01997181,
      -0.018245036,
      0.004239116,
      0.017390521,
      -0.037803467,
      -0.0019033091,
      0.005727619,
      -0.009006349,
      0.018583786,
      -0.012058618,
      0.0020341417,
      -0.0052854083,
      0.0022600277,
      -0.011322998,
      -0.0142493835,
      -0.00049283623,
      -0.0011853531,
      0.02536656,
      0.016473152,
      -0.01859081,
      -0.012623121,
      0.0071232053,
      0.009497117,
      0.0076725907,
      0.017695243,
      -0.0031638234,
      -0.0037934952,
      0.0052321358,
      0.0058776983,
      -0.0070747524,
      -0.008402796,
      0.016140012,
      0.016399011,
      0.0028163074,
      0.0020816338,
      0.013312548,
      0.0071620094,
      0.012690583,
      0.020400163,
      0.0073985327,
      0.0035297358,
      0.009027021,
      0.02802382,
      -0.005277133,
      -0.02421105,
      -0.001868768,
      0.013507171,
      -0.029152267,
      0.022053117,
      -0.027643852,
      -0.029768176,
      0.005179768,
      -0.019099817,
      -0.0016495007,
      -0.00087879226,
      -0.005416401,
      -0.005499112,
      -0.018819088,
      0.012148702,
      -0.017875576,
      -0.0032172122,
      0.02670975,
      -0.012172895,
      0.02981029,
      0.022370582,
      0.0036273252,
      0.0056829485,
      0.016434753,
      -0.045799628,
      -0.01316376,
      -0.099218644,
      0.030324375,
      -0.002257766,
      -0.040443435,
      -0.00072261266,
      0.0049715596,
      -0.025853483,
      0.013921517,
      -0.0037986976,
      0.033538807,
      -0.0076481197,
      -0.010260485,
      0.020908816,
      -0.031141374,
      -0.025371581,
      0.000681124,
      -0.018966082,
      -0.0068234582,
      0.031647526,
      -0.0045878687,
      0.0010356124,
      -0.010661918,
      0.0039434033,
      -0.0067154984,
      0.02870225,
      -0.0010156111,
      -0.0030813026,
      0.012975497,
      -0.0023177364,
      -0.008990089,
      0.012244029,
      0.0071554626,
      0.006225139,
      -0.020462377,
      -0.013393827,
      0.0152900815,
      -0.008486922,
      -0.020342901,
      -0.020023411,
      -0.018739417,
      0.007836248,
      0.0044834185,
      0.02260338,
      0.04723385,
      0.00025817053,
      0.03420242,
      -0.010715018,
      -0.009485559,
      -0.009360342,
      0.011593126,
      -0.018973691,
      -0.0111384615,
      0.009429481,
      -0.030709686,
      -0.0019858114,
      0.0030347079,
      -0.0085311765,
      -0.019929402,
      0.007923059,
      -0.0029801885,
      0.014243277,
      0.02206705,
      -0.001856077,
      -0.0012499881,
      0.009492982,
      -0.015331254,
      0.007106155,
      -0.004391772,
      -0.007384839,
      0.008857213,
      0.014011259,
      0.011583439,
      -0.013104266,
      -0.016409304,
      0.0140675455,
      0.0077718925,
      -0.007627863,
      -0.005380549,
      -0.022226086,
      0.03646595,
      0.02283146,
      0.0072736363,
      -0.0007398145,
      0.01720287,
      0.00046568358,
      0.007918329,
      0.019015335,
      0.0029934843,
      0.0041117477,
      -0.008978429,
      0.0137401875,
      -0.00605768,
      0.008534939,
      -0.00785723,
      -0.005748015,
      0.008370848,
      -0.021773469,
      -0.0079032425,
      -0.01727203,
      0.041072126,
      -0.023165772,
      -0.0061173835,
      -0.025019063,
      -0.007371028,
      -0.01763029,
      -0.00015543963,
      -0.03807589,
      -0.009105649,
      -0.013712186,
      0.00074909016,
      0.0023271532,
      0.005470867,
      -0.01842815,
      -0.022241734,
      -0.00006881095,
      0.01915178,
      0.015664747,
      0.01475971,
      0.026377877,
      0.0062130457,
      -0.024350313,
      -0.016491143,
      -0.011986134,
      0.0030853762,
      0.0013399493,
      -0.0010103227,
      -0.020133719,
      0.009881331,
      0.0061469995,
      -0.026360674,
      -0.018835869,
      -0.002308076,
      -0.0404985,
      -0.013809847,
      -0.0071609477,
      -0.022177236,
      0.018761901,
      0.008699594,
      0.035089046,
      -0.009761769,
      -0.010438125,
      0.0123245185,
      0.0032738606,
      -0.0056406124,
      -0.013641601,
      0.0068257833,
      -0.0040953993,
      -0.002075603,
      -0.0134510705,
      -0.026412416,
      -0.026571414,
      -0.023207141,
      -0.012271741,
      -0.0002473422,
      -0.002586521,
      -0.010608393,
      0.0067624273,
      0.002085436,
      -0.021467451,
      -0.018354647,
      0.022152446,
      0.00536676,
      -0.008847373,
      -0.010688372,
      0.020133749,
      0.015691448,
      0.0030797296,
      0.0027495117,
      0.0074353158,
      0.001800902,
      0.0190607,
      -0.014684878,
      -0.029060401,
      0.012634827,
      0.0022914486,
      0.005368636,
      0.01759431,
      -0.02061549,
      0.00369,
      0.023247857,
      0.018092109,
      -0.0003138769,
      -0.023629896,
      0.009697141,
      0.006997202,
      0.018145623,
      -0.006477221,
      0.01644772,
      -0.03730328,
      -0.004433387,
      -0.011538708,
      -0.016159484,
      -0.0107254535,
      0.0051836646,
      0.020232394,
      0.00208933,
      -0.017563997,
      0.00545715,
      -0.0063992874,
      0.008029277,
      -0.010985981,
      -0.007882056,
      -0.015391233,
      0.009686478,
      0.0072123366,
      -0.011930429,
      -0.011027421,
      -0.01628357,
      0.0051829983,
      0.018040927,
      0.012149335,
      0.011374517,
      -0.011737642,
      -0.0031626693,
      0.015144603,
      0.030848647,
      0.008412918,
      -0.007322679,
      -0.0370196,
      -0.02210248,
      0.013191569,
      0.00029245994,
      -0.0039641,
      -0.025012007,
      0.018706353,
      0.003653968,
      0.004758984,
      -0.00054249016,
      -0.0041220086,
      -0.00009149018,
      -0.01069816,
      -0.011422612,
      -0.0062117344,
      0.020040022,
      -0.023454104,
      -0.039137565,
      -0.0077243107,
      0.017214783,
      -0.026186166,
      0.03565131,
      -0.00018400293,
      -0.014432456,
      -0.034933884,
      0.006006746,
      -0.0028104,
      -0.008857684,
      0.021647427,
      0.021003589,
      -0.0097750835,
      0.017487485,
      0.013278618,
      0.02147955,
      -0.012472614,
      -0.023441302,
      -0.019326357,
      0.01596873,
      0.013765332,
      0.015930148,
      0.0063828873,
      0.0051615476,
      0.03740388,
      0.025270406,
      0.011923689,
      -0.0032701024,
      -0.0011334645,
      0.0072022285,
      -0.0059885867,
      0.010837301,
      -0.0035452223,
      -0.11916909,
      -0.0024284886,
      -0.020149257,
      -0.00026082442,
      0.0053224126,
      0.00063972705,
      -0.013245517,
      -0.013134761,
      -0.0022723635,
      -0.0049861227,
      0.023876319,
      0.008198197,
      -0.0034164465,
      -0.0047956146,
      0.01150623,
      -0.016399581,
      0.012542222,
      0.010153268,
      0.016872985,
      0.00036374884,
      0.0039521125,
      -0.0043066456,
      0.007252049,
      -0.00277378,
      -0.02606915,
      -0.0023719836,
      0.0065156147,
      0.003255724,
      0.0020280965,
      0.00067436387,
      -0.021913828,
      -0.020039111,
      -0.006422946,
      0.0153453965,
      0.008965811,
      -0.024019066,
      -0.011883696,
      -0.003985382,
      0.03321187,
      0.015088297,
      -0.0137725305,
      -0.0113198785,
      0.03968067,
      -0.00619384,
      -0.00997721,
      0.025026513,
      0.016761541,
      -0.010461241,
      0.0034371587,
      0.029483909,
      -0.02025221,
      -0.0048066857,
      -0.003410043,
      -0.03224167,
      0.008514035,
      -0.010597311,
      0.0052358215,
      0.0010973024,
      0.00999041,
      -0.008544366,
      0.009309724,
      0.017838841,
      0.004087818,
      0.03276691,
      0.0049491287,
      -0.00039800248,
      0.023843635,
      0.021372017,
      -0.0042207944,
      -0.0048541594,
      0.0058134617,
      0.004543716,
      0.002730064,
      0.010934309,
      0.0059274593,
      0.010368242,
      -0.008126916,
      -0.008677206,
      -0.008871516,
      0.012828855,
      -0.025900885,
      -0.014462353,
      -0.069122195,
      -0.019451274,
      0.023180038,
      -0.020744544,
      0.013015038,
      0.009844828,
      -0.017216874,
      -0.0074543343,
      0.0029189046,
      -0.018888757,
      -0.016288942,
      0.008323712,
      0.015371818,
      -0.013174706,
      -0.014544782,
      0.028748227,
      0.0041770996,
      -0.026842333,
      -0.02111634,
      -0.013169906,
      0.019253107,
      -0.027843995,
      0.0042922944,
      -0.006517083,
      -0.0009641828,
      0.025695577,
      -0.0026598154,
      0.006295074,
      0.0051420396,
      0.025171626,
      0.022454021,
      -0.15039234,
      -0.02068429,
      -0.009502587,
      0.010059893,
      0.008152538,
      0.009093278,
      0.012271564,
      -0.014248386,
      0.023235988,
      -0.015901946,
      0.03065339,
      -0.00539839,
      -0.0063301115,
      0.0038968937,
      0.02624101,
      0.13064653,
      -0.007774084,
      0.00832702,
      -0.01313366,
      -0.002080993,
      -0.009711985,
      -0.01055327,
      -0.023089629,
      0.0013261051,
      -0.00023036516,
      -0.028984297,
      -0.011983254,
      -0.0074677076,
      0.012909685,
      -0.013966136,
      -0.005169465,
      -0.0009612461,
      0.007436591,
      0.034722716,
      -0.0019289351,
      -0.01240823,
      0.0054057054,
      0.0010903206,
      -0.005864133,
      0.005832873,
      0.0065804236,
      0.012730142,
      0.011876282,
      0.004798126,
      0.018335637,
      0.0015631249,
      0.0057254895,
      -0.008186045,
      0.00053639314,
      0.001855494,
      -0.014599241,
      -0.047955666,
      0.0066913874,
      0.0013737817,
      -0.012514681,
      -0.0011041259,
      -0.0130761955,
      0.021327782,
      0.0066030803,
      0.024019033,
      -0.005508328,
      -0.01611653,
      -0.02307877,
      -0.0015266227,
      -0.0001245778,
      -0.01897581,
      0.0077439775,
      0.006928603,
      0.0051487596,
      -0.004123764,
      0.012442719,
      0.021181718,
      -0.0038245742,
      0.01954717,
      -0.0102172885,
      0.0001697879,
      -0.033032082,
      0.04349674,
      0.017366992,
      -0.000051525145,
      0.0019082767,
      -0.009192172,
      -0.012505142,
      -0.017375272,
      0.0147618875,
      0.005579082,
      0.008416747,
      0.02658589,
      0.003334033,
      0.024765793,
      0.013067591,
      -0.012695827,
      -0.0075776125,
      0.01925537,
      0.0043028356,
      0.019434744,
      0.02404891,
      -0.02553876,
      0.028172586,
      -0.0067080846,
      -0.0047063814,
      -0.013699675,
      -0.004449845,
      -0.022186648,
      0.0075447815,
      -0.009466827,
      0.0017194372,
      0.018273285,
      -0.014365946,
      -0.01004379
    ]
  },
  {
    "id": "genai_cohort_python_11_Property_decorator___Getter_and_Setter_vtt",
    "content": "Next up, we're going to take a look at property decorators. Now property decorators are really fun and they are actually solving a purpose of controlling the elements. And what does that even mean? Let me take you on to the screen and walk you through with the whole idea behind, these decorators, or also known as property decorator. So let's just say you have designed a class and in this class you have added some value to it. Maybe there is age factor. So you are having this age of T leaves you're within, and this whole thing just try to assume this is a class. Now as of now, this age is just a property and anybody can actually, let just say this is an object or this is any other user. They have the full capacity to reach out to this age, they can read it and they can also get all the values, whatever is stored in this age, four years, five years. Now not only that, they can also go ahead and reach out and update the value of this age to anything, anything that they want, probably minus That doesn't mean an age, but they have full control over this property. And sometimes in the classes you want that this control should not be given to, or at least for all of the properties. So for that particular case we have a special mechanism, a special way of writing the code so that we can control, these properties. And this can be done for all the properties, or this can be done for just one, two, however you wish to do and accomplish that. So I'll take you up, up here and I will walk you through how this can be done. So we need to have a new file and let's call this one as 11/ underscore and we're going to call this one as property decorators. Py. Of course. All right, the step one is to turn off the AI. I use AI a lot these days. So let's just say we have the same example and we call this one as T leaf. And the step one is to declare a constructor. So we'll just go ahead and say constructor. As you are creating this T leaf, you take this age as your argument and then you simply go ahead and say self dot. And here's the interesting thing, we don't call it as age, we call it as underscore age. And this underscore doesn't mean on its own anything. It's just a Python way of saying that, hey, this is an interesting property. This shouldn't be allowed to touch directly. There needs to be a way of reading, this property as well as writing to this property. And this is a symbol which is used throughout the industry. So whenever you see an underscore that means, this is having something special as a meaning. Now surely this can be done without underscore as well. But this is such a common thing and Python also knows this. So Python doesn't treat this in a lot of places as underscore age. You'll see this as age treated like this. But I want to show you that how this is being done in the industry. So the step one of doing this is first of all go ahead and use decorator again and write that, hey, I want to use property. Yep. After that you simply define the method just after this and you name the property which you want to control. And this is going to be age. But hey, we called our property as underscore age. That's exactly my point. Python knows this, that this variable has to have a special meaning. So anything underscore will be treated as just age. How interesting that is. And we can just go ahead and after this call this one as self. And this method names to be exactly same. You cannot change this. This is called to be as age. All right, so here what we are going to say that while we return this variable which is self dot underscore age, obviously we actually don't return it directly. We can, but just for the fun we'll just go ahead and say we'll always return you an additional two value. So, so if the age you're passing me, as zero, we'll call this as two years probably. I don't know why you will do that, but let's just say that's your use case. And apart from this, now what you can do once you have defined this, now I can actually use an age. That's interesting. It has automatically made it as a decorator and you can use that same variable name. And then you can go ahead and say that I want to use a setter method. So this method that you have made, this is how we get the value outside of this class. This is going to be responsible how you set the value inside this class. So very interesting aspect. And we call this same age. Yep. And we take this one. Since we need to set some value inside it, we are going to take that value, whatever you are adding this. And now we will perform a simple check. If the value is less than or probably equal to the age, it's in the range of one and it should be maximum of five, we can have a space, no problem. All right, then only we are going to go ahead and say self dot underscore age, and we're going to put this as age. And in all the other cases, we are going to go ahead. Let's actually go ahead and have an else case. In all the else cases, we are going to go ahead and say, let's raise an error. We'll call this one as value error. And we are going to mark this as tea leaf age must be between. Between one and five years. Five years, There we go. So notice here how we are actually controlling each aspect in this really beautiful class that we have written. So we have this age, we have single property here, and it could be more, but then you have to perform all this operation for each one of the value that you want to control. Now, here's the interesting aspect. Let's just say we call this as a simple leaf, and we create this object from this class tea leaf, and we provide a value of two. All right, that's surely doable. Now, I want to simply go ahead and print this leaf age. I'll just go ahead and say I want to just print the age, just like I regularly do that. Notice here, I'm not calling it as underscore age or anything. I'm saying, hey, I'm just calling the age technically behind the scene. You're calling this method. But hey, we never called it like this because that's the magic of this, property here. That's what it does behind the scenes. Let's go ahead and actually print the value. That will give us a lot of ideas of how things are going on. We'll go ahead and say Python This one is And there we go. Notice here it says feh. It says four, although we provided the value as two. That's because we have overwritten that. What you are going to read the value, how you are going to read, we are controlling that. Now, on top of this, if I go ahead and try to set some value onto this, let's just say I go ahead and say leaf age, and that age can be four. That's totally allowed. Let's go ahead and print this again. Surely that will be totally allowed that. All right, the value is, although we did set it up four. But we get it six. But if we try to have the value of something, let's just say six, that will give us a problem. Notice here. We get the error and this is something that we have designed. We have designed our own errors, in this case, arrays, as a value error. tea error must be like this T leaf age must be between and value error. So all of this thing, we are controlling the error part as well. Now again, in this case it doesn't make sense that you are calling me that value can only be between and 5, but you are adding the value to. And that's the beauty of learning. We can actually go ahead and control the things that we want to do to make sure that we understand the things. So this is really interesting. You can use a, property to actually have this. Don't forget this underscore. This is kind of a secret handshake between the Python programmers in the world of Python that hey, this is how we define it. Anything with underscore that means it needs to have a setter, getters and setters. This is by the way called as getter. This is called as setter. We have a lot of names, we call them as sometimes properties, sometimes getters and setters, whatever we call them, the goal is same to control the value that how we read the value and control that how we actually edit those values. That is it for this video. Don't forget to rate us and let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "11 Property decorator - Getter and Setter.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/11 Property decorator - Getter and Setter.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0138663985,
      -0.015435332,
      0.033784438,
      -0.059775237,
      0.009045157,
      0.005270483,
      0.0040060338,
      0.0468567,
      0.012787033,
      -0.009417955,
      -0.009802752,
      -0.010380749,
      0.010452476,
      0.019920195,
      0.121792465,
      0.0049679484,
      -0.0127231795,
      -0.020750528,
      0.0040064687,
      -0.002316125,
      -0.015341822,
      0.019541007,
      0.0021641033,
      -0.0048108473,
      0.024557231,
      -0.014609437,
      0.01959688,
      0.008783106,
      0.023282466,
      -0.017801464,
      -0.028417462,
      0.029114466,
      0.013699818,
      0.034817386,
      0.005370385,
      0.010816411,
      0.00993495,
      0.01032771,
      -0.022252934,
      0.019091455,
      -0.028410336,
      -0.0019093548,
      0.021911822,
      0.008397651,
      0.023550129,
      -0.020123508,
      0.009980229,
      -0.019439565,
      0.015644655,
      0.0062820637,
      0.013709273,
      0.0059910584,
      -0.0021074635,
      -0.18333414,
      0.044764712,
      -0.0034186775,
      -0.00052481936,
      0.00028337576,
      0.004104396,
      -0.010434903,
      -0.013402022,
      0.01362411,
      -0.008107406,
      0.0017612277,
      -0.008231874,
      -0.014817896,
      0.02103683,
      -0.00546946,
      0.0049359784,
      0.008518624,
      0.04188262,
      0.017605087,
      -0.02495423,
      -0.018067757,
      -0.0273641,
      -0.025273971,
      -0.005648719,
      -0.007990231,
      -0.001720737,
      0.013440535,
      -0.008495228,
      0.016280504,
      -0.0017826494,
      -0.00088465266,
      0.01570598,
      0.0066876463,
      -0.01368729,
      -0.01865463,
      0.013542065,
      -0.015230593,
      -0.013327129,
      0.000059097758,
      0.0017449537,
      0.0066213207,
      -0.010530668,
      0.0031650686,
      -0.026071627,
      0.0070260577,
      -0.039576415,
      0.0057693715,
      0.0020563586,
      -0.009701055,
      -0.0077457596,
      -0.017122377,
      0.006534558,
      -0.0009380385,
      -0.008331805,
      -0.0072938097,
      -0.018530898,
      0.016538654,
      -0.008162627,
      -0.008351143,
      0.013615607,
      0.0063099554,
      0.025374128,
      -0.17150712,
      0.024187138,
      -0.0060462253,
      -0.007856034,
      0.017706119,
      -0.01650989,
      -0.00066828483,
      0.012140794,
      -0.009050209,
      -0.03813309,
      0.004340126,
      0.0018218806,
      0.020444263,
      0.01997102,
      -0.0070946305,
      -0.016488062,
      -0.028213797,
      0.0077852667,
      0.032342505,
      0.007908606,
      0.016762046,
      0.006781687,
      -0.0060935137,
      -0.015680268,
      0.003325664,
      -0.0052888817,
      0.006305414,
      -0.008920587,
      0.039142698,
      0.0036004698,
      -0.010801382,
      0.0026037898,
      0.0119609265,
      -0.016792927,
      -0.025483496,
      0.010681856,
      -0.017824247,
      0.0006346191,
      -0.0103680305,
      0.028954161,
      -0.007778108,
      0.012063527,
      0.016394645,
      0.0038394858,
      -0.01829725,
      0.00058476004,
      -0.007540293,
      0.0037565532,
      0.004364117,
      -0.011854615,
      -0.015000969,
      -0.010016637,
      0.0011012788,
      0.008707802,
      0.02348365,
      -0.02490594,
      -0.013860796,
      0.01712405,
      0.029420424,
      -0.014520157,
      -0.021231279,
      0.007222752,
      0.013145313,
      -0.0017485151,
      -0.010311758,
      -0.0009428644,
      0.0072337254,
      -0.001028627,
      -0.016791202,
      0.0018047447,
      -0.0028834296,
      -0.002072789,
      -0.003789143,
      0.016917622,
      -0.0056168423,
      0.00848491,
      0.014369483,
      0.035949778,
      0.020566823,
      -0.004506871,
      -0.015000738,
      0.012419516,
      0.004016166,
      -0.0029953753,
      0.014570733,
      0.029126188,
      -0.0108261425,
      0.0020472035,
      -0.025346285,
      0.025385542,
      0.008069774,
      0.018523516,
      -0.019846601,
      0.016178662,
      0.0198036,
      -0.025393583,
      -0.006441535,
      0.030704629,
      0.0034708236,
      0.02436758,
      -0.0012081108,
      0.013348417,
      0.0109302765,
      -0.009632805,
      -0.010779931,
      0.0031330697,
      0.018582692,
      -0.0054914434,
      0.013310889,
      0.022538053,
      -0.016074065,
      0.000021319684,
      -0.006989849,
      0.005640278,
      0.011420107,
      0.017239083,
      -0.005136602,
      -0.018826297,
      0.0065985536,
      -0.00040348194,
      0.017586758,
      -0.006229782,
      0.030507006,
      -0.0011505395,
      -0.002928037,
      -0.014935843,
      0.007907268,
      -0.014089668,
      0.02648329,
      0.0041883667,
      -0.0023254598,
      -0.0042383983,
      0.0074315877,
      0.003807731,
      -0.014591923,
      -0.024468642,
      -0.007137495,
      0.004080834,
      -0.037219703,
      0.015150926,
      -0.017072704,
      -0.02418128,
      -0.0020203842,
      -0.03527941,
      -0.0009198104,
      -0.002271362,
      -0.011561838,
      -0.024722379,
      -0.0029672508,
      -0.002879992,
      -0.01861125,
      0.0032093446,
      0.026347304,
      -0.027659625,
      0.02222491,
      0.017254138,
      0.031013055,
      0.01731557,
      -0.0005097572,
      -0.041746352,
      0.00019578096,
      -0.090227455,
      0.04499612,
      0.017111514,
      -0.03235508,
      -0.006802171,
      0.005206901,
      -0.028306838,
      -0.006915666,
      -0.010650761,
      0.021734877,
      -0.005372667,
      -0.012600295,
      0.025495507,
      -0.019565217,
      -0.004577667,
      -0.01705364,
      0.009818913,
      -0.004233598,
      0.014652084,
      -0.023883056,
      -0.0077017928,
      -0.005115071,
      0.01979064,
      -0.00463036,
      0.022504987,
      0.0061996607,
      -0.0087499535,
      0.03784308,
      0.016484236,
      -0.004812974,
      0.005518191,
      0.018022219,
      -0.008091389,
      -0.022569854,
      0.010081672,
      -0.000726874,
      0.0019805203,
      -0.011932892,
      -0.0064183143,
      0.00075720175,
      0.022291716,
      -0.008378169,
      0.02247544,
      0.030390816,
      -0.005531146,
      0.029084316,
      -0.011862751,
      -0.024535513,
      -0.0009976025,
      -0.01699205,
      0.0011104454,
      0.0021801798,
      0.016821198,
      -0.013555742,
      -0.00031288777,
      0.0282732,
      -0.0009260373,
      -0.019041587,
      -0.01516137,
      -0.007857036,
      0.0029731055,
      0.0073913536,
      0.01138018,
      -0.0016206718,
      0.01954558,
      -0.0076932255,
      0.00646508,
      -0.015882751,
      0.000050159782,
      0.019995864,
      0.019863155,
      0.004970326,
      -0.009547499,
      -0.0058474247,
      0.024051055,
      0.002242465,
      0.014519819,
      -0.002257086,
      -0.013590622,
      0.031038577,
      -0.0008785128,
      0.001648871,
      0.0069913766,
      0.01471618,
      0.0076744375,
      0.007974538,
      0.004806244,
      0.005798275,
      0.008552586,
      -0.013055452,
      0.0069969315,
      0.021181326,
      -0.0022447736,
      0.014342122,
      -0.0011269565,
      -0.0128856115,
      -0.016157378,
      -0.018809615,
      -0.015312139,
      0.012573387,
      -0.019481508,
      0.0046005915,
      -0.035185464,
      0.004202273,
      0.004655039,
      0.013354993,
      -0.051949058,
      -0.022059795,
      -0.005158388,
      0.009756986,
      -0.0011320037,
      -0.0050197854,
      -0.016717477,
      -0.018390846,
      -0.018410495,
      0.008972925,
      0.006330157,
      0.017239258,
      0.03670309,
      -0.023198174,
      0.0020057715,
      -0.0046125446,
      -0.003048966,
      0.005713938,
      0.0067961332,
      0.0100768395,
      -0.005038608,
      0.0052206093,
      0.008478822,
      -0.026923582,
      -0.025508791,
      0.013590457,
      -0.017438842,
      -0.01529686,
      -0.023171777,
      -0.011570007,
      0.037944008,
      -0.00045055363,
      0.007825797,
      -0.008494011,
      -0.014109452,
      -0.015438185,
      0.016352603,
      -0.0017582137,
      -0.0051141162,
      0.018383289,
      -0.006679132,
      -0.01163952,
      0.0152692925,
      -0.0064445436,
      -0.017952679,
      -0.016344763,
      -0.02000802,
      0.004875932,
      0.0020919424,
      0.0017223783,
      -0.004261199,
      -0.0067266123,
      -0.014748498,
      -0.032471344,
      0.015537713,
      0.0059968927,
      -0.021406645,
      0.00666638,
      0.04144975,
      0.0013415917,
      0.001150112,
      0.0060192617,
      0.01474701,
      -0.01488954,
      -0.0073106117,
      0.00022044814,
      -0.03658145,
      -0.0023711505,
      -0.0057324455,
      -0.008615297,
      0.007468608,
      -0.032821108,
      0.004217051,
      0.027457682,
      0.014884218,
      0.0005423704,
      -0.019305298,
      0.013038984,
      -0.010746275,
      0.0065622334,
      0.01674963,
      0.0008554685,
      -0.008400498,
      0.010857921,
      0.00505399,
      -0.021033408,
      -0.0013531089,
      0.02792433,
      0.017129987,
      0.0067313556,
      -0.0224959,
      0.00020419394,
      0.015381601,
      0.002821806,
      -0.0019659353,
      -0.02156134,
      -0.032562975,
      -0.0020373208,
      0.0188028,
      -0.010818358,
      -0.005160496,
      -0.017875107,
      0.004477646,
      0.015328691,
      -0.009032615,
      0.02380822,
      -0.014457281,
      -0.0010518217,
      0.019132834,
      0.020347152,
      0.014406285,
      0.012756954,
      -0.038610253,
      -0.00510569,
      -0.017794508,
      -0.0055532423,
      -0.0043004774,
      -0.00042792436,
      0.008059428,
      -0.0081529375,
      -0.013878814,
      0.020580905,
      0.0009954767,
      -0.011997454,
      -0.022465466,
      -0.025993694,
      -0.0036997881,
      -0.009044741,
      -0.031343658,
      -0.014966327,
      0.014584762,
      0.01790952,
      -0.01298113,
      0.020992132,
      0.012055637,
      -0.0097927125,
      -0.013525164,
      -0.0043777525,
      0.0052091996,
      0.00408348,
      0.00325083,
      0.015955767,
      -0.017940992,
      0.0014743423,
      0.016872754,
      0.024019457,
      -0.012087959,
      -0.0059098043,
      -0.011065604,
      0.011939474,
      -0.0030798856,
      0.0017834905,
      0.006479123,
      -0.0019356454,
      0.015207153,
      0.007866468,
      -0.009604196,
      0.0032742762,
      -0.002533021,
      -0.019130459,
      -0.0076620593,
      -0.016873851,
      0.0031420165,
      -0.12082732,
      -0.00818178,
      -0.006862677,
      -0.015774202,
      0.0022962363,
      -0.010217969,
      0.015646365,
      -0.013572013,
      0.021247098,
      -0.008694405,
      0.020680875,
      0.0067542465,
      0.023395877,
      0.002105209,
      -0.0066674845,
      -0.013439738,
      0.022908026,
      0.004483596,
      0.022107974,
      -0.011292722,
      -0.004726179,
      -0.006612812,
      -0.0047746985,
      -0.017398192,
      -0.023345808,
      0.002206856,
      -0.004813937,
      0.0002365034,
      -0.0009281282,
      -0.011616949,
      -0.018028872,
      0.003530797,
      -0.016190413,
      0.019391285,
      0.017802395,
      -0.010675703,
      -0.023863148,
      -0.002063874,
      0.031604465,
      0.016451588,
      -0.006070135,
      -0.019404793,
      0.038501542,
      -0.0026453668,
      -0.0020769348,
      0.011112009,
      0.032661337,
      -0.015495096,
      -0.0034977715,
      0.04349133,
      -0.027013475,
      -0.013844846,
      -0.013979021,
      -0.040355537,
      -0.013275743,
      -0.006530011,
      0.011451519,
      0.0061198045,
      -0.014060489,
      -0.016115285,
      -0.0020354134,
      0.009510228,
      -0.0031950087,
      0.025965028,
      -0.0014333121,
      0.013104833,
      0.013621424,
      -0.009472433,
      -0.020326441,
      -0.0019275853,
      0.00052382454,
      0.004547402,
      -0.012794928,
      -0.0041077742,
      0.0192164,
      -0.00813905,
      -0.0081229685,
      -0.0018722902,
      -0.014183219,
      -0.008070272,
      -0.0047921264,
      0.012364062,
      -0.06164454,
      -0.019366127,
      -0.0016789626,
      0.00019610862,
      0.023385307,
      0.0077273613,
      -0.013336073,
      0.016737832,
      -0.00182813,
      -0.0067894524,
      0.0058209253,
      0.013980504,
      -0.002642446,
      -0.020943163,
      -0.017735485,
      0.0075289817,
      0.012646254,
      -0.012376098,
      -0.01900668,
      0.0062013376,
      0.015912754,
      -0.013997116,
      -0.02317186,
      -0.013954817,
      0.012738688,
      0.014011863,
      0.008594674,
      -0.009225628,
      0.0039399397,
      -0.00023845519,
      -0.0102672065,
      -0.15138322,
      0.003721395,
      0.009784252,
      -0.0013361466,
      0.005309669,
      -0.0047496194,
      -0.014869873,
      -0.03073265,
      0.012373799,
      -0.023504408,
      0.016110366,
      0.009952179,
      0.0002902417,
      0.0074049425,
      0.012225503,
      0.13308895,
      -0.00885965,
      0.007620806,
      -0.022529056,
      -0.011775789,
      -0.001244422,
      0.008083389,
      -0.030467724,
      0.011723537,
      -0.0012044677,
      -0.00229956,
      -0.0035665866,
      -0.02323247,
      0.0019348979,
      -0.009944922,
      0.0028798312,
      -0.011811293,
      -0.0019689999,
      0.027128994,
      0.00003800509,
      -0.01424083,
      -0.003851336,
      0.0037551944,
      -0.006463092,
      -0.0013947578,
      -0.0064872163,
      -0.016337868,
      -0.0017564198,
      0.0046207253,
      0.017989406,
      -0.0029125968,
      0.0018692473,
      -0.021605548,
      0.0011204759,
      0.00027363098,
      -0.014270061,
      -0.043676604,
      0.008858612,
      -0.007398664,
      -0.011744768,
      0.024331557,
      0.00876133,
      0.018101275,
      -0.0033896244,
      0.011400954,
      0.010530725,
      -0.014571327,
      -0.03051124,
      -0.0042044865,
      0.012672885,
      -0.014124681,
      0.022612037,
      0.014994106,
      0.016516337,
      -0.007048145,
      0.012835396,
      0.020765876,
      -0.01488923,
      0.019722443,
      -0.030411704,
      -0.008340988,
      -0.020636043,
      0.024021978,
      0.01836994,
      0.0032054347,
      -0.0037802844,
      -0.0151961865,
      -0.0056864102,
      -0.00965087,
      0.01453853,
      0.0051445505,
      0.0022444485,
      0.023866283,
      -0.0020761057,
      0.0058526914,
      -0.0037457175,
      -0.007618238,
      -0.019510577,
      0.024266476,
      -0.0021880353,
      0.033585448,
      0.005021284,
      -0.022153126,
      0.03937815,
      0.0025760026,
      0.027094193,
      -0.025581203,
      -0.02456211,
      -0.0048371726,
      0.015708664,
      0.012689931,
      0.009385347,
      0.0058443174,
      -0.009355029,
      -0.007264616
    ]
  },
  {
    "id": "genai_cohort_python_01_Generators_with_yield_and_next_methods_vtt",
    "content": "Welcome to the Python course and welcome to this fresh new section. So in the last section we talk about comprehensions and I'm pretty sure you are now impressed that all right, I get it. A lot of things I understand and eventually as you will write more production level code, you will understand them much better. No need of too much practicing it. The theory, knowledge that you have, the code we have written together, that's enough. Now let's move into generators. Now generators is also a very interesting concept. It's not as difficult as comprehension. It's relatively easy. You just have to train your brain that what's the difference between a regular function as well as a generator. Now whenever there's a generator, always remember one thing which is we are generating things in the function or in the loop. We just get the result immediately. So everything is loaded up in the memory, in the loops or other functions. But when you design generators you get one value at a time. So it's very memory optimized, it doesn't do all the thing at once. It's actually very optimized in certain cases. But this doesn't mean we are going to replace the whole functions with the generators. They do have their need and sometimes they are super helpful, super useful and especially if you're working with fast API or anything like that, it's helpful, it's useful, but not always. So always keep in mind there is a way of how things are being done or there is a use case factor always associated with that. So with this, let me take you up on the screen and we're going to go ahead and talk about the generators one by one. So let's go ahead and expand this. There we go, nice and easy. And we are here with the new topic, let's name this up. So generator or generators? These are pretty fun and interesting topic and couple of things you always have to remember whenever we are talking about the generators, a couple of things you are going to see as special terms but one of the most common term that we see all around the places is yield. This is a keyword just like we have for keyword but generators are always, always going to come up with the yield as a keyword. Now the most important part that you should always remember about generators is first of all you save memory. So that's the part one, another part is some times you don't want the results results as immediately. Hope I wrote that correct. So you don't want the result immediately. And the most important part is lazy. Evaluation. Evaluation. There we go. Hope I wrote that correct. But if I did a typo, please excuse me on that. These are the three most important keyword points of, generators, but not the only one. There are other use cases as well, but these are more than enough for us to understand and remember that how it works. So I think the better way of doing this is to simply go ahead and write some code that is always I love. So let me take you on this and we'll just close all these things. We don't need this. We are now into That's pretty fun. Nope, not here. And there we go. So this one is underscore generators. And we'll start with the basics. So we'll call this1 as 01basics. I don't know what else to call this one. Shouldn't be basics. Where is our extension? Forgot that py. All right, so the way how you define the generators, they look exactly same as functions. So if I go ahead and use, if I go ahead, oh, I, I can expand this. If I go ahead and say, hey, this is my definition. I call this one as serve chai. And there we go. Just like that. Yeah, this is your generator. So what do you mean by having a generator just like that? The only difference that comes up is how you provide a value in the function. We simply go ahead and say return the value that it does. But in the world of generators, you actually use the keyword which is yield. So it yields one value at a time. So for example, I go ahead and say this is my cup one. And the cup one says masala chai. Similarly, we have this one again. So let's just say this is cup two. This time we are saying ginger chai. Another one. What else? Eli Chichai forgotten I. And this is my cup three. And there could be more. So what do you think how this function will, go ahead and work? So if I go ahead and say, let's just say I'm having a stall. And in this stall I call this servechai. And this method executes, if it would be a regular function, we would be looking for a keyword return that this return will give me the value. But here I'm confused whether it will be Cup 1, Cup 2, Cup 3, or all of them. It could be all of them as well. So for this, let's go ahead and print this and you will see some strange result for cup in. And let's just go ahead and say stall. And here's the interesting part and where people also get confused. If I go ahead and work like this, you might be expecting, okay, I'm getting all the values, probably this stall gets all the values and then I'm looping through it. Don't worry, we'll get that. Investigative study is one of the best study where you actually take a moment to think about what will happen, what is about to happen, and then you work with that. So let's just say Python We have one file and we can see, all right, there is no difference. I'm getting all the value in the result, but what's happening is in the memory itself, behind the scene, how it happens. So if I go ahead and take a copy of this, let's go ahead and paste this. So this is my function that I have, and this function is actually, getting called by technically this whole piece of code. So let's go ahead and get this whole piece of code as well. There we go. So what happens in this as soon as you come up here? This stall is actually just keeping a reference of this whole thing. It's not actually using it immediately. The moment you actually run this loop, then it actually goes ahead and use. So for the first iteration of the loop, it's going to refer to this value. For the second iteration it's going to refer to this value. And for the third iteration, this is going to refer to this value. The only difference is in the memory. So yield actually pauses the function and resume the function on the next call, but exactly from that point where it has stopped in the past. And what's the difference between, having a normal function and regular function? Pretty good. And can I show you the difference between them? Because right now it's not very clear. It looks all the same. All right, I get this. Let's create a normal function for this. First, let's just say we have get chai list. And this is my chai list. There we go. And I simply go ahead and say this is return and it returns you an array which has. Let's just call this one as cup one and this will be cup two. Oops. And there we go, we have cup three. All right, no problem. This is our regular function. A similar function could be generator function as well. I'll write a comment. This one is generator function and I simply say def get chai. But this is actually gen generator function. And instead of just returning it like this, what we do is we yield the values. Yield. And this time we are yielding cup one. Then we go ahead and duplicate this. Yield two and yield three. There we go. Nice and easy. So the difference is one just uses the word return, one uses this. So how we're going to use this, Let me show you that how it's actually being done. So if I go ahead and simply say that hey, I want to get chai and this chai will be coming up, from get chai gen. Did we call it as get? We should be calling it as gen, not get get chai gen. And there we go. First of all, let's print the value as it is so that we can actually verify what's actually getting printed here. Can we comment this? Yes, we can comment this. We don't need it now. All right, let's see the value and let's see the result. It says what you're getting is a generator object and you are just holding a reference. As I told you, this is just actually pointing to this whole method. So this is just a reference that we are holding. Nothing more, nothing less. Now what if I want to print the values? If you want to go ahead and print the values, then you have to actually use a method known as Next. You simply go ahead and say, hey, I have the reference, but next I want to run this function once and want to see what's the value of it. So for this we have to explicitly pass it inside this next method. And you will be surprised to know that this function will now run and whatever the first value you are yielding, you will get that value. So if I run this again, notice it says cup one. Now as soon as the cup one comes, this is where you are right now at this cup one and. And your method is now on the pause state. It has not exited. It's still in the memory. It's not executing or calculating all the things at once. It just has executed once. First yield value is with you. But now the function is paused whenever you actually call the next next time it actually keeps track everything in the memory. And the next time it will just go ahead and give you the second result which you are yielding. So for this, if I go ahead and print this again, notice this time the cup won for the first result. But if I print this, notice the function resumes exactly where you left it. If you go ahead and print it again, this is how we get the cup three. But what if I go ahead and print it again? That's interesting. Notice here it says stop iteration. You cannot keep on passing me the next because I'm done yielding the values. I can only yield three values. So you can run this function only three times. And maybe that's an explicit maybe this is exactly what you want, but you have to keep in mind that what's important and what's not. I'll just comment this one because this is going to produce this error. So we'll just say gives error so that you get the notes and everything for you. So I hope this portion of where we studied about the generator, we found them interesting. They're very interesting and as you will write more of the use cases, especially connecting with the database closing the database connections. This generator is actually super useful and you'll see them quite a lot in the fastapi that is it for this video. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 Generators with yield and next methods.vtt",
      "originalPath": "genai-cohort/python/07 Chapter Subtitles/01 Generators with yield and next methods.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.013221098,
      0.0124173835,
      0.028329706,
      -0.056537114,
      -0.0006255001,
      -0.0021756853,
      0.010674508,
      0.01847554,
      0.013284841,
      0.028800072,
      -0.01590141,
      0.012086158,
      0.0095040845,
      0.02697014,
      0.118073456,
      0.0007839247,
      -0.00478081,
      -0.016137505,
      0.020446822,
      -0.02647939,
      0.01049244,
      -0.005358468,
      -0.019210655,
      -0.008840562,
      0.0065832934,
      0.020630512,
      -0.004611565,
      0.014433227,
      0.033585183,
      -0.017706083,
      -0.005500629,
      0.004329087,
      0.00773633,
      0.03134276,
      0.0021558315,
      0.021755777,
      -0.0020844718,
      0.007417535,
      -0.029373685,
      0.002574339,
      -0.012783526,
      -0.011273695,
      -0.006242184,
      -0.016375376,
      0.0045166207,
      -0.03323492,
      0.009156667,
      -0.014342056,
      0.011273805,
      0.020987507,
      0.010332003,
      0.011013604,
      0.0062035657,
      -0.18641001,
      -0.0011965024,
      0.00890516,
      -0.01515943,
      0.012912817,
      0.009283744,
      0.005230885,
      -0.026796797,
      0.017168147,
      -0.024433428,
      -0.019267168,
      -0.027320994,
      -0.019488113,
      0.03623093,
      -0.016402371,
      -0.0050178333,
      0.0055557694,
      0.0122039635,
      0.00785127,
      -0.006168887,
      -0.007809195,
      -0.036765665,
      -0.020675967,
      0.005214197,
      -0.015039303,
      0.0009439523,
      0.005776763,
      0.0036243869,
      -0.015807873,
      -0.0061973827,
      0.016944708,
      0.0066648517,
      -0.0002937628,
      -0.035831407,
      -0.027482843,
      0.020893734,
      -0.0072464054,
      -0.01420151,
      0.020403638,
      -0.012842827,
      0.008009537,
      -0.009269901,
      -0.0161928,
      -0.023364399,
      0.0187375,
      -0.0254296,
      0.0047566425,
      -0.0013589378,
      -0.0018757309,
      -0.016161412,
      0.009451581,
      0.002833457,
      0.017455628,
      -0.008367557,
      -0.00551751,
      -0.027203675,
      -0.01294174,
      -0.0047756806,
      -0.001036696,
      0.002691758,
      0.00901292,
      -0.0043594097,
      -0.17186499,
      0.023384867,
      -0.009912713,
      -0.009635156,
      0.024105402,
      -0.012662831,
      0.0014286558,
      0.01131771,
      -0.004315957,
      -0.011444476,
      0.0125145465,
      -0.00526206,
      0.015658133,
      0.011041292,
      -0.0017409059,
      -0.028351499,
      0.0027208773,
      -0.0058452208,
      0.013797654,
      0.0012067498,
      0.030794233,
      -0.010225326,
      -0.0016335641,
      -0.011875451,
      0.005212953,
      -0.019156722,
      0.022490466,
      -0.009003171,
      0.033756025,
      0.014361114,
      0.0101831155,
      -0.010193875,
      0.012170994,
      -0.01824216,
      -0.013082696,
      -0.007881308,
      -0.012818798,
      0.00045401513,
      -0.019262597,
      0.023021555,
      -0.01231333,
      0.009084136,
      0.0060415715,
      -0.0123108085,
      -0.019285336,
      -0.02027341,
      -0.008719137,
      0.0024798946,
      0.0064862533,
      -0.0054540937,
      0.0031725715,
      -0.015144954,
      0.0012032918,
      0.008812056,
      0.0063266302,
      -0.0010052898,
      -0.015557545,
      0.013437357,
      -0.015938742,
      -0.0035780428,
      0.009067315,
      -0.00396949,
      -0.00416328,
      0.018516822,
      -0.00602279,
      0.021455817,
      -0.0036747633,
      -0.013930925,
      0.002314855,
      0.014723789,
      0.0062309667,
      -0.027267827,
      0.013992682,
      0.012336011,
      -0.013003023,
      0.0025500795,
      0.016830722,
      0.029025273,
      0.009899376,
      -0.005396184,
      -0.016435435,
      0.0021387653,
      -0.007126537,
      -0.0062552034,
      0.02255725,
      0.031427126,
      -0.00840069,
      -0.000992308,
      -0.043940995,
      0.015502349,
      -0.014773061,
      0.009570796,
      -0.009494296,
      0.029153973,
      0.012322368,
      -0.01103965,
      -0.00982461,
      0.021315988,
      -0.0075640916,
      0.01427025,
      0.01257497,
      0.0034998104,
      -0.00049260544,
      -0.0051710056,
      0.004651393,
      -0.0044383104,
      0.015331122,
      -0.006025824,
      0.0105228545,
      0.003673736,
      0.0027347032,
      0.008674792,
      0.0148663,
      0.00337349,
      0.008610132,
      0.015232972,
      0.009077189,
      -0.029743062,
      0.0061153974,
      0.0016673468,
      -0.0028131772,
      -0.0074956925,
      0.023401972,
      0.022916738,
      -0.011452429,
      -0.016721947,
      -0.0090284925,
      -0.019875886,
      0.008410467,
      0.022258317,
      -0.012807321,
      0.011120363,
      0.0024039564,
      -0.0042071296,
      -0.023052236,
      -0.014024988,
      -0.015676653,
      -0.0046797264,
      -0.014527691,
      -0.017730206,
      -0.024235643,
      -0.034081683,
      -0.038990952,
      -0.008538069,
      -0.017272957,
      0.011217688,
      -0.009646473,
      -0.028769637,
      0.0050075995,
      0.014499626,
      0.015644852,
      0.013354059,
      0.034974035,
      -0.027262975,
      0.012984493,
      0.015465936,
      0.02241432,
      0.029774742,
      0.014934983,
      -0.022975244,
      0.016886171,
      -0.085269704,
      0.011725467,
      0.024658225,
      -0.03164422,
      -0.009785691,
      0.016226249,
      -0.016230121,
      0.021214504,
      0.010717434,
      0.008661325,
      0.017801968,
      -0.00026402654,
      0.038863137,
      -0.018171832,
      0.004967072,
      -0.002319883,
      0.015221874,
      -0.009626467,
      0.026257206,
      -0.01737074,
      0.004055989,
      0.016427299,
      0.009539339,
      -0.0046270303,
      0.02063585,
      -0.0016730712,
      -0.0066670678,
      0.021843772,
      0.005517889,
      0.0070459815,
      0.00046211047,
      0.021140317,
      0.0048442064,
      0.015469815,
      0.003429049,
      0.02260425,
      -0.005490001,
      -0.015630953,
      -0.008524557,
      -0.015597173,
      0.009886501,
      -0.002867343,
      0.022547456,
      0.032538593,
      -0.005579281,
      0.016329065,
      0.010259226,
      0.0040412424,
      -0.016230049,
      0.005040233,
      -0.011477391,
      0.0049013225,
      0.021320647,
      -0.013280419,
      0.02812428,
      -0.0097226715,
      0.012906018,
      -0.0021709322,
      -0.0029982943,
      0.01049245,
      0.00004403198,
      0.004000862,
      0.005695943,
      0.0044807578,
      0.015803365,
      0.00041754494,
      0.0139088575,
      -0.010158327,
      0.018486157,
      0.01072768,
      0.0039461353,
      0.0010101502,
      -0.0040404475,
      -0.009967281,
      0.0010574736,
      0.006694839,
      0.031757325,
      -0.0052237203,
      -0.024546713,
      0.046370916,
      0.016099794,
      -0.023460953,
      -0.0028561323,
      0.0036794893,
      0.01283809,
      0.009319375,
      -0.0017142384,
      -0.0041324515,
      0.012436128,
      0.005603075,
      0.007389063,
      0.0015088143,
      -0.033104017,
      0.011337433,
      -0.017282292,
      -0.022944674,
      0.0010950454,
      -0.030164948,
      -0.016158031,
      -0.00069719215,
      -0.0029420608,
      -0.014203981,
      -0.023692146,
      -0.011239392,
      -0.01007961,
      0.006670437,
      -0.017730646,
      0.0035025312,
      0.0023814596,
      -0.021844491,
      -0.013101526,
      -0.014300943,
      -0.011344233,
      -0.033855878,
      -0.013579814,
      -0.0034850407,
      -0.0074944445,
      0.013687758,
      0.012959172,
      -0.028703356,
      -0.005761313,
      -0.018805828,
      -0.0108714085,
      0.011120389,
      0.0036456676,
      0.013483396,
      -0.001873844,
      -0.00737066,
      -0.010186172,
      -0.03940089,
      -0.04032183,
      0.021759482,
      -0.011042217,
      -0.0112337675,
      -0.014493943,
      -0.015852857,
      0.0237409,
      0.023606183,
      0.012515738,
      -0.007994523,
      -0.0155737465,
      -0.0134036895,
      0.025315367,
      0.0076256786,
      -0.026854878,
      0.03055522,
      -0.009649731,
      -0.022613453,
      -0.00025639727,
      -0.026367797,
      -0.011244921,
      -0.028209884,
      -0.009634443,
      0.016131127,
      -0.009036397,
      0.0056635966,
      0.0067063225,
      -0.013232534,
      -0.023938602,
      -0.02652627,
      0.0025780327,
      0.0036754257,
      -0.026251968,
      0.0095850425,
      0.03522594,
      0.007975334,
      -0.0003504309,
      0.0049708365,
      -0.0073061665,
      -0.0054142047,
      -0.009366554,
      -0.014404426,
      -0.05058735,
      0.0057533174,
      0.023022113,
      -0.0001180108,
      0.008392914,
      0.0021031303,
      0.029193204,
      -0.0028037913,
      0.009121516,
      0.0026525229,
      -0.0068422514,
      0.013756255,
      -0.01682962,
      0.02184548,
      0.020553598,
      -0.00959642,
      -0.023694959,
      -0.009100396,
      -0.0052106967,
      -0.0057313805,
      -0.016391316,
      0.018495789,
      0.0011359677,
      0.038389646,
      0.0071088388,
      0.008795056,
      -0.009757267,
      0.006074249,
      -0.013217673,
      -0.008388894,
      0.0037212775,
      -0.0055175917,
      0.007356112,
      -0.02404023,
      -0.021399615,
      0.0067026336,
      0.005472933,
      0.032159474,
      0.0077161747,
      -0.00033424373,
      -0.003779117,
      -0.0006950376,
      0.012009262,
      0.021993198,
      -0.004255292,
      -0.021406833,
      -0.036270455,
      -0.014437949,
      0.007384468,
      -0.012854809,
      -0.0025780105,
      -0.0032842983,
      -0.0012777847,
      -0.012913768,
      -0.004979781,
      0.012149574,
      0.0067579006,
      -0.0034641207,
      -0.015679147,
      -0.0054789847,
      -0.008038487,
      0.014582825,
      -0.017074786,
      0.010071783,
      0.022574479,
      0.014467178,
      -0.020594483,
      0.013411074,
      0.005858549,
      -0.025438268,
      -0.023367805,
      0.013087276,
      0.010803122,
      -0.020557813,
      0.022559969,
      0.004991825,
      -0.022204759,
      -0.0030212286,
      -0.001194082,
      0.0116014695,
      -0.009824829,
      -0.006629118,
      -0.009260553,
      0.020293789,
      -0.004766051,
      -0.016595269,
      -0.0027371014,
      -0.0084103625,
      0.023146963,
      0.021512551,
      0.0006424449,
      0.030111248,
      -0.015020526,
      -0.009907523,
      -0.004559684,
      0.0029637574,
      -0.012723079,
      -0.11509272,
      -0.0030529662,
      -0.011376532,
      0.009373547,
      -0.02489787,
      -0.017538503,
      -0.017835697,
      -0.008863513,
      -0.004513153,
      -0.0024577284,
      0.016613899,
      -0.020563018,
      0.004207437,
      -0.016880715,
      0.0141310785,
      -0.024327192,
      0.020390369,
      0.0019398313,
      -0.00061804696,
      0.0022061563,
      0.0008358918,
      0.007844549,
      -0.011127398,
      -0.009473441,
      -0.012186712,
      -0.0044064494,
      0.010117731,
      0.013042271,
      0.00855526,
      -0.014141,
      -0.032768674,
      -0.00505188,
      -0.01413379,
      0.013139794,
      0.018618366,
      -0.0085110795,
      -0.008905568,
      0.010836115,
      0.016827442,
      0.01590116,
      0.0084755095,
      0.0011768424,
      0.025817722,
      0.010887185,
      -0.009412794,
      0.036049433,
      0.04012062,
      -0.02707683,
      -0.0023301607,
      0.034365088,
      -0.031681497,
      -0.023144731,
      0.012330243,
      -0.03874765,
      -0.012367121,
      -0.008898203,
      0.020058217,
      -0.024114937,
      0.005774406,
      -0.005313949,
      0.009756701,
      -0.016652543,
      -0.0057529337,
      0.018375298,
      0.0123017635,
      0.009711897,
      0.028582247,
      -0.0040764073,
      0.018923458,
      -0.018310487,
      -0.010884404,
      0.013905896,
      -0.016525393,
      0.033142857,
      0.012311953,
      0.0013463158,
      0.0038376688,
      0.009907722,
      -0.0008982972,
      0.0009714102,
      -0.0385164,
      -0.0143073555,
      -0.05707032,
      -0.010173012,
      0.0181655,
      -0.025162,
      -0.009933271,
      0.008654235,
      -0.01604921,
      0.0045415717,
      0.016038561,
      -0.0056547006,
      -0.026602464,
      -0.0059141065,
      -0.0034676108,
      0.011227792,
      -0.017339509,
      0.010743188,
      0.005606735,
      -0.009026595,
      -0.018842613,
      0.010319151,
      -0.0027649563,
      0.010148133,
      -0.009176471,
      -0.029684767,
      0.021984385,
      0.02367558,
      0.0021683783,
      -0.0013015267,
      -0.0048400788,
      0.009841939,
      -0.007867354,
      -0.15342048,
      -0.026871165,
      0.024209999,
      0.008552634,
      -0.0057260897,
      -0.007031233,
      -0.011682627,
      -0.012233135,
      -0.007467321,
      0.020538228,
      -0.00554472,
      -0.018090237,
      -0.013000948,
      -0.015563915,
      0.028593922,
      0.14079086,
      -0.009059402,
      0.020566434,
      -0.01950867,
      0.000805161,
      -0.008320583,
      -0.0055281934,
      -0.016644428,
      0.012811003,
      -0.017442437,
      -0.011133725,
      0.010568176,
      -0.019555792,
      0.00080086035,
      0.015179186,
      0.002135881,
      -0.007051736,
      -0.0050009787,
      0.013500657,
      0.019238234,
      -0.004748779,
      0.00591226,
      -0.0017150878,
      -0.0005078342,
      0.005332419,
      0.021422833,
      -0.0021422282,
      0.0073881084,
      -0.014036649,
      0.0013607874,
      0.00064514537,
      -0.034965158,
      -0.0054668966,
      0.0065288395,
      0.0038294648,
      -0.0030172905,
      -0.0599008,
      0.019792171,
      -0.016044084,
      -0.021363052,
      -0.004225909,
      0.0031046334,
      0.0058249687,
      0.007991598,
      0.009031016,
      -0.022167213,
      -0.010797523,
      0.0065785088,
      -0.012515392,
      -0.011648793,
      -0.012999971,
      -0.0021171633,
      0.018877134,
      0.0019203764,
      -0.0038849034,
      -0.0032674854,
      0.030547606,
      -0.010771753,
      0.005858367,
      0.0073100803,
      -0.012924069,
      -0.00684987,
      0.016267188,
      0.0048853476,
      0.00532968,
      0.010805007,
      -0.016304778,
      0.007491206,
      -0.008916877,
      0.017511422,
      0.0052531147,
      0.008509034,
      0.006747286,
      0.0072807935,
      -0.017784243,
      -0.0010592013,
      -0.012556653,
      -0.010232731,
      0.025163788,
      0.012033354,
      0.01804565,
      0.004238042,
      -0.009691489,
      0.02966105,
      -0.018085318,
      -0.01018071,
      -0.013932224,
      -0.0034562296,
      -0.034900963,
      0.022793792,
      -0.006215851,
      0.0013349577,
      0.011583866,
      -0.008725811,
      -0.002895906
    ]
  },
  {
    "id": "genai_cohort_python_02_Infinite_Generators_vtt",
    "content": "In the world of Python, we also have a concept known as infinite generators. I tend to use them very less, but there are always a use case for them. And especially with the world of AI coming in, they're actually getting used quite a lot. Let me walk you through with the code, because code is much easier way to understand this. So we'll just directly go ahead and write the code for it should be easier for you. Let's go ahead and create a new file. Call this one as 02/ infinite generators py. All right, so how does an infinite generator works and where is it actually useful? It's really useful for the streams as well as the real time systems that where the constant updates needs to go on. Or maybe you want to constantly keep on getting this as a log value. They have their use cases as well, but use them very cautiously. They can actually drain the memory as well. You need a really good memory. But be careful with that. They have their use case. Let's call this one as infinitechai. So how can we actually generate infinite chai? No, we are not going to generate the infinite chai, but let's just say we want to simulate a model where once you buy a T, one cup of it, you can get a refill as many times as you wish. But we are going to keep noticing that, okay, we are having, the refills. So I'll create a variable and we'll call this one as count. And count, the initial value is one because we are pouring this one. And then we simply go ahead and say that we have a true loop. While true is a very dangerous loop, it keeps on running. But we're going to control this a little. We'll just say we are going to yield a simple value which will say just like return, we are going to say refill. And with the refill we can actually use the number of how many times we are refilling. So we'll just say count. And once we actually refill this, then we simply come up here and say count plus equals one. So we are adding a value to it. I like this one. Now this is a very dangerous thing to write if it would be general return statement or anything there. But since we are yielding, we are not troubling the memory that much. So I can just go ahead and say, hey, I want a refill and I will have an infinite child just like this. Now let's just say I don't want to use this variable, so I'll just use an underscore in this one, remember I told and discuss about this a little bit that when you don't want to use this value itself, you can just write an underscore. It fills the syntax but we tend to avoid creating an unnecessary variable. It helps in linting as well. So let's just say we go for a range of till the value is We keep on going with that and simply go ahead and print. I cannot just go ahead and print the refill because that's not how it works. I have to use the next keyword and here I will have to call the refill. There we go. This is how you write the infinite child. Let's go ahead and run this and clean this. We'll say Python infinite generator. Notice it this time we are controlling it, but it's refill as much as you want. So we are having a refill 1, and And again this is a little bit awkward of a new style of writing Python, but this is generators and this is infinite one. So you can run them as many time and you are controlling them. Notice here this loop doesn't tell you that you have to stop for or or This is how we are controlling the range. This is going to just keep on printing. You have an infinite coupons printing machine or infinite refill station that you have it always keep on getting. And since we have a while true and yield, as long as the same guy is going to call it, it will keep on working with that. The advantage of this is now I can just work with this. Let's just say this is another client that comes up or user2 and that user2 also uses the infinite chai. There we go. Now we are keeping a track of both the objects set separately with the same function. So that's really interesting. So for underscore in range, let's just say this guy gets a six cup of refills and I can just go ahead and say print. I have to use next and this time this is user So both of our user gets this value and they are separately just working with that. So notice here, first we are running 1, and so this is for the top one and then this guy gets a six refill. So we get all the six value being refilled. Pretty interesting, isn't it? It's not intermixing the values but it works nicely. So that is it. These are your infinite generators. Hope they were fun. Let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 Infinite Generators.vtt",
      "originalPath": "genai-cohort/python/07 Chapter Subtitles/02 Infinite Generators.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.007819334,
      0.017561726,
      0.030764334,
      -0.06496549,
      0.00041027294,
      0.0010285429,
      -0.0011860968,
      0.021659633,
      0.01647808,
      0.015826559,
      0.008014196,
      -0.0015956796,
      0.006863673,
      0.036391187,
      0.11187031,
      0.018781941,
      -0.010135845,
      -0.020939399,
      0.020238567,
      -0.025126792,
      -0.006233095,
      -0.016834402,
      -0.0010691162,
      0.008435083,
      0.0034292208,
      0.016806787,
      0.0102395145,
      0.009255225,
      0.037876267,
      -0.013202953,
      -0.028678145,
      -0.005832458,
      0.001967694,
      0.03164669,
      0.0010209177,
      0.01581769,
      0.0134483725,
      -0.0022422117,
      -0.01809594,
      0.004697669,
      -0.011907781,
      -0.00051397266,
      -0.00066307595,
      -0.014804837,
      0.008420787,
      -0.043236777,
      0.007240377,
      -0.011539049,
      -0.0005627677,
      0.010227195,
      0.0101565765,
      -0.00023625752,
      -0.012363863,
      -0.17709449,
      0.00700001,
      0.022499014,
      -0.0092875995,
      0.0072870376,
      -0.0011224005,
      -0.014608878,
      -0.00799608,
      0.011341184,
      -0.015698351,
      -0.013653481,
      -0.020665715,
      -0.012154012,
      0.010117867,
      -0.0042692027,
      -0.0024628902,
      0.0075358716,
      0.021923505,
      0.0102500515,
      -0.015516364,
      -0.005398717,
      -0.019446626,
      -0.03201126,
      0.004625034,
      0.0012902117,
      0.00683869,
      0.025677137,
      0.000069574795,
      -0.02582675,
      0.0010221722,
      0.00930424,
      0.01671827,
      -0.0027309116,
      -0.020224871,
      -0.029431278,
      0.010656673,
      0.0013942773,
      -0.026645176,
      0.027011475,
      -0.0125231985,
      0.0057936027,
      -0.011578236,
      0.0005997661,
      -0.016485363,
      0.030493008,
      -0.03332166,
      0.0031889298,
      0.0020261558,
      -0.0112555185,
      -0.019241694,
      0.0025030873,
      -0.007741031,
      0.017621176,
      -0.018889342,
      -0.015492912,
      -0.01676518,
      0.0053989748,
      -0.007262781,
      0.0021492094,
      0.0057492256,
      0.0047490457,
      0.0047650463,
      -0.16515432,
      0.019325664,
      -0.0006840146,
      -0.006604461,
      0.02125086,
      -0.004702292,
      -0.008561161,
      0.017295372,
      0.000744804,
      -0.01550967,
      0.017180478,
      -0.009925592,
      0.005565946,
      0.0075670225,
      0.00050691725,
      -0.029178143,
      0.01583633,
      -0.014902746,
      0.002357835,
      0.012941943,
      0.01639516,
      -0.0017585113,
      0.006386929,
      -0.015315946,
      0.0052586347,
      -0.009518265,
      0.03851887,
      -0.012161292,
      0.019126361,
      0.010351803,
      0.008317865,
      -0.002184595,
      0.025019871,
      -0.00905798,
      -0.01909924,
      0.0039307377,
      -0.01401518,
      0.0054581407,
      0.003163812,
      0.028554404,
      -0.023692125,
      0.013975866,
      -0.0010124628,
      -0.0065285964,
      -0.010167517,
      -0.014107427,
      -0.007509129,
      -0.0045826025,
      0.0017554729,
      -0.0075835246,
      0.004773531,
      -0.0044377255,
      -0.007632876,
      0.017561972,
      0.0069339583,
      -0.01574241,
      -0.011104245,
      0.017274389,
      -0.014184457,
      0.0031306068,
      0.022490714,
      0.0011317354,
      -0.0025522397,
      0.018292861,
      -0.011040045,
      0.011403434,
      -0.00803991,
      0.0006409094,
      -0.0007294851,
      0.02405924,
      -0.0109918825,
      -0.031467035,
      0.012685808,
      0.021899508,
      -0.01010328,
      -0.0016976438,
      0.02575829,
      0.04233035,
      0.0039431346,
      0.0035635415,
      -0.021574128,
      0.0023258796,
      -0.018553948,
      0.000005564078,
      0.023429416,
      0.03380048,
      0.0045967563,
      -0.005395075,
      -0.043215446,
      0.024451608,
      -0.022635039,
      0.0042198356,
      -0.0008132679,
      0.016926358,
      0.003371367,
      -0.016653247,
      -0.00007244829,
      0.03208632,
      0.0099087255,
      0.018292759,
      0.012620768,
      0.021056257,
      0.0042803367,
      0.010861293,
      0.0038569919,
      -0.004129262,
      0.007706528,
      -0.0023805925,
      0.013394172,
      0.012882956,
      -0.0029820502,
      0.004283304,
      0.012972694,
      0.0056256265,
      0.022565678,
      0.02210653,
      0.028238859,
      -0.020787332,
      -0.009160366,
      0.012501373,
      0.002583657,
      -0.0052720336,
      0.015517238,
      0.009606022,
      -0.013704785,
      -0.013620668,
      -0.0037066664,
      -0.020628093,
      0.008454594,
      0.02999949,
      -0.0054418733,
      0.017354604,
      0.00056308706,
      -0.006350348,
      -0.037788104,
      -0.02159626,
      -0.022266414,
      -0.0014496723,
      -0.0053275246,
      -0.007985221,
      -0.018707851,
      -0.029129347,
      -0.01782704,
      -0.0061732642,
      -0.007026999,
      0.00095388107,
      -0.0013326615,
      -0.024333775,
      -0.0006574293,
      0.0028038332,
      0.0076940577,
      0.016599145,
      0.052028637,
      -0.034284987,
      0.016216004,
      0.0047243345,
      0.022852333,
      0.01869247,
      0.018021585,
      -0.020023443,
      0.0063715535,
      -0.08975098,
      0.01927372,
      0.008786404,
      -0.024249464,
      -0.012056172,
      0.010215305,
      -0.011767902,
      0.021773996,
      0.0046176664,
      0.0021001562,
      0.0102830045,
      -0.008640513,
      0.008871314,
      -0.02174077,
      0.011501267,
      -0.019857932,
      0.004220237,
      -0.014561029,
      0.020520933,
      -0.010135973,
      -0.005270324,
      0.0040614526,
      0.0019468912,
      -0.0044963835,
      0.012598058,
      0.006924977,
      -0.015724286,
      0.027222088,
      0.010845737,
      0.010261216,
      -0.004442311,
      0.016995644,
      0.012836756,
      0.014618709,
      0.0019558517,
      0.017399536,
      -0.0011163609,
      -0.016427249,
      0.0049605374,
      -0.012055197,
      0.0026811084,
      -0.012637337,
      0.013711282,
      0.052035835,
      -0.0137216,
      0.009690253,
      0.009802745,
      -0.002037647,
      -0.01640708,
      0.0022821957,
      0.0025904274,
      0.016378328,
      0.027956128,
      -0.005774808,
      -0.002845289,
      -0.0012476504,
      -0.0006766902,
      0.0069716983,
      -0.017471714,
      0.010900883,
      0.01096537,
      0.009410667,
      0.013575892,
      -0.00015198723,
      0.0145234335,
      0.017405408,
      0.0013105986,
      -0.017567554,
      0.0005142894,
      0.01850695,
      0.010919269,
      -0.0057233893,
      0.00965684,
      -0.022153825,
      -0.0009268924,
      0.01153844,
      0.042205617,
      -0.014961394,
      -0.02404884,
      0.037790626,
      0.02213923,
      -0.012835537,
      -0.0068024704,
      -0.004282834,
      0.018064788,
      0.008372895,
      -0.011384808,
      -0.0070914538,
      0.005057544,
      -0.0039327,
      0.0074570323,
      -0.002077323,
      -0.023819646,
      0.008695208,
      -0.01321091,
      -0.02120397,
      -0.018914124,
      -0.023018282,
      -0.0023107575,
      -0.011436438,
      -0.012280837,
      -0.024662111,
      -0.02748492,
      -0.0041959593,
      -0.0009432915,
      0.010418128,
      -0.022396004,
      0.006570347,
      -0.005631324,
      -0.018856348,
      -0.016779587,
      -0.014495875,
      -0.011950974,
      -0.024279894,
      -0.0007090208,
      0.002846334,
      0.0075880983,
      0.019954253,
      0.012320855,
      -0.012738248,
      -0.015864909,
      -0.014481597,
      -0.0024006523,
      0.0044511473,
      0.009064839,
      0.011032558,
      -0.017531782,
      -0.0035652518,
      -0.007980558,
      -0.039769407,
      -0.03443953,
      0.025752505,
      -0.0208016,
      -0.020285,
      -0.0008325445,
      -0.014801906,
      0.037419304,
      0.028228471,
      0.02248111,
      -0.009220568,
      -0.019401513,
      -0.014559985,
      0.015665667,
      -0.0030356513,
      -0.022624055,
      0.024997052,
      -0.0060702176,
      -0.015724754,
      -0.004948201,
      -0.03497659,
      -0.013514812,
      -0.037596278,
      -0.022763753,
      0.008743074,
      -0.011979869,
      0.0033612743,
      0.0029823217,
      -0.018346962,
      -0.029392544,
      -0.01580054,
      0.018006673,
      -0.0056854542,
      -0.025481777,
      0.005294772,
      0.027063228,
      0.0074346927,
      0.0049135825,
      0.0038395845,
      0.011313361,
      -0.013226154,
      -0.0011946429,
      -0.0043930984,
      -0.04992112,
      0.0036432263,
      -0.00032728052,
      0.0025424918,
      0.024888275,
      0.006807741,
      0.020332202,
      -0.0017020608,
      0.0073356587,
      -0.0055505144,
      -0.0055127703,
      0.01613501,
      -0.01427634,
      0.015958512,
      0.01705807,
      -0.0028680621,
      -0.02651923,
      -0.018429182,
      -0.0029460927,
      -0.011720751,
      0.0065657017,
      0.027418155,
      0.0073814923,
      0.034694627,
      0.016582852,
      -0.008922984,
      -0.011946902,
      0.0021686014,
      -0.005039822,
      -0.012387079,
      0.0034584107,
      -0.009295896,
      0.019253246,
      -0.00943402,
      -0.009373893,
      0.009298071,
      0.0069388077,
      0.037501395,
      -0.0018212212,
      0.01955315,
      -0.0018586064,
      0.015470382,
      -0.0028294171,
      0.026891606,
      -0.019551566,
      -0.0055433107,
      -0.021382278,
      0.0025814408,
      0.030916912,
      -0.0081455605,
      -0.018285185,
      -0.01178503,
      -0.0033421556,
      -0.01788483,
      -0.012502811,
      0.017494518,
      -0.009809235,
      0.0066162883,
      -0.010622042,
      -0.014834557,
      -0.00995912,
      0.019758992,
      -0.03096195,
      -0.004290101,
      0.011451212,
      0.00817071,
      -0.02247797,
      0.008488378,
      0.005953411,
      -0.031976674,
      -0.013742922,
      0.011645165,
      0.0216901,
      -0.011138585,
      0.009954436,
      0.009536549,
      -0.019065868,
      -0.0073677106,
      0.0093034785,
      0.01820481,
      -0.0026974801,
      -0.0017774611,
      -0.000014849721,
      0.04364208,
      -0.0023651677,
      0.0019649267,
      0.0076211016,
      -0.0073737614,
      0.025892014,
      0.020270737,
      -0.008684439,
      0.036079522,
      -0.007194241,
      -0.017094627,
      0.004615925,
      -0.0065341294,
      -0.015801083,
      -0.11768996,
      -0.0021050312,
      -0.01246857,
      0.017574033,
      -0.027943611,
      -0.014783002,
      -0.020938197,
      -0.030104604,
      0.016272154,
      0.008355954,
      0.029527083,
      -0.026034694,
      0.008629422,
      -0.010775358,
      0.006539161,
      -0.017539354,
      0.02082493,
      0.011775105,
      0.012194555,
      0.00027336698,
      -0.0036878863,
      0.014752374,
      -0.018832598,
      0.008393804,
      -0.02409162,
      -0.010725644,
      0.0066352896,
      0.013009239,
      -0.0129608605,
      -0.0047451067,
      -0.026409622,
      -0.0032646433,
      -0.002604045,
      0.00078286795,
      0.0133799,
      -0.016533172,
      -0.012905583,
      0.011752488,
      0.02252446,
      0.014118523,
      -0.00044448205,
      0.009635581,
      0.030042317,
      0.01800072,
      -0.011749144,
      0.033196405,
      0.03568182,
      -0.022194661,
      -0.011642986,
      0.023930011,
      -0.041829795,
      -0.01865138,
      -0.016488267,
      -0.051582955,
      -0.013839667,
      -0.0028438773,
      0.016175268,
      -0.018326292,
      0.004262932,
      0.010518111,
      0.004817493,
      -0.0105083985,
      0.010078607,
      0.01825253,
      0.00022699387,
      0.0033636377,
      0.034684103,
      -0.009463358,
      0.020216234,
      -0.013973521,
      0.002471032,
      0.008947208,
      -0.013079174,
      0.029475933,
      0.0020636267,
      -0.0040308633,
      0.0007509632,
      0.019413771,
      -0.005256146,
      -0.007719912,
      -0.022930807,
      -0.023371205,
      -0.0583126,
      -0.009426839,
      0.023617161,
      -0.013909614,
      -0.010854399,
      0.010024215,
      -0.03356987,
      0.012903693,
      0.009877921,
      -0.011170771,
      -0.029861495,
      -0.0045915297,
      0.00014550058,
      0.0042729927,
      -0.016856942,
      0.009979631,
      0.0059738485,
      -0.0137387775,
      -0.0017589544,
      -0.006323768,
      -0.0010683292,
      0.010819363,
      -0.012294029,
      -0.01783231,
      0.01994992,
      0.02154724,
      -0.0062253005,
      -0.0041709756,
      0.0055255555,
      0.02263997,
      -0.007150918,
      -0.14327359,
      -0.011450562,
      0.020679487,
      0.0042076986,
      0.0013192206,
      0.0034825015,
      -0.016303575,
      -0.016349053,
      -0.00043252873,
      0.022803633,
      -0.0012463739,
      -0.022095472,
      -0.0017638671,
      -0.009616907,
      0.01962297,
      0.13614659,
      -0.0128765255,
      0.016822891,
      -0.021378517,
      -0.006022037,
      -0.011993998,
      -0.018790655,
      -0.011069021,
      0.022888584,
      -0.023855522,
      -0.003945035,
      -0.0052432073,
      -0.011728428,
      0.0008614732,
      -0.005669211,
      -0.0008590176,
      -0.0030062108,
      0.0091507,
      0.033252575,
      0.021912722,
      0.0034344508,
      0.00081203197,
      0.017726775,
      0.0047164364,
      0.01644971,
      0.0030046897,
      -0.011859057,
      -0.0036477435,
      -0.0027654294,
      0.0065053385,
      -0.0114688985,
      -0.029456213,
      -0.015315205,
      0.0023877632,
      -0.00027432194,
      -0.016769215,
      -0.06098787,
      0.0037490472,
      -0.022543304,
      -0.0076181865,
      -0.008857987,
      0.00044884882,
      0.007892412,
      0.009004695,
      0.0038385026,
      -0.018894754,
      0.0025814588,
      0.015815299,
      -0.0153619945,
      -0.0016185697,
      -0.008427472,
      0.0020060586,
      -0.0015770731,
      0.023864713,
      -0.007517496,
      0.013542839,
      0.0092874775,
      -0.007002824,
      0.0017067346,
      -0.0061306627,
      -0.010460408,
      -0.00028186027,
      0.016447246,
      0.015933821,
      0.008958087,
      0.0058169058,
      -0.01695248,
      0.021587586,
      -0.015595165,
      0.021500945,
      -0.0020596103,
      -0.015995007,
      0.00078647747,
      -0.0014489908,
      -0.012599705,
      0.011448135,
      -0.012846542,
      -0.01216906,
      0.019402608,
      0.012010117,
      0.019274186,
      0.014744137,
      -0.007010065,
      0.027736213,
      -0.0056646476,
      -0.0022508812,
      -0.01912653,
      0.01071248,
      -0.039430942,
      0.009236794,
      -0.00009355613,
      -0.02161929,
      0.02052869,
      -0.01327322,
      -0.008826216
    ]
  },
  {
    "id": "genai_cohort_python_03_send_value_to_generators_vtt",
    "content": "All right, hope you are having fun with these generators. I'm going pretty much in depth of the generator, leaving no stone unturned. That's why little more number of videos but hey, you're getting more knowledge for that. Hope you'll rate this as well. Let me take you onto the screen and show you something more interesting. Now so far what we have seen is the classic use of the yield statement and there is nothing wrong, this is how majorly it is being used. But there is also a different use case of this yield. You will not see them mostly in the tutorials or the courses which are made just on the surface level or probably like that. But I'll show you how this can be used in the production and you will see, you will unlock a really new way of looking at the yield and also interacting with the yield. So so far we have seen that actually whenever you call this. So let's just say this is the person who is calling the yield. Yield actually generates the data or gives the data when what if this person wants to send some data to the yield? Yeah, that's also possible. That can be possible and that is used quite a lot but rarely anybody discuss about this. So this time we'll just go ahead and say send data. So we'll just go ahead and send the data to this one. Again this is too zoomed in but you get the idea. We want to send the data. All right, let's go to the code part and that's fairly easy, not that easy but comparatively to the comprehensions fairly easy. So let's just call this1 as and send generators py of course, let's create a fresh new method and call this one as Chai customer. So somebody is asking us for a chai and this time here's the interesting part. First of all we're going to print up a message which says welcome. First of all, welcome with an exclamation and we will ask what chai would you, would you like? Just like that. Now what we're expecting is somebody will give me a chai order and from where this is going to come. Yes. Yeah, this is very strange. So far we have used it like a return statement. We but can I actually store the value of the yield in a variable? Yes, you can. This is Python world. You can store anything in the variable. Now apart from this, we are going to go ahead and run a loop as well while true and we will say print formatted string which says preparing and you are preparing an order. So we are printing this. Not only that, we again are going to go ahead and say order equals yield. Why we are doing it again? Why you want to have a yield again? We just took the order above. That is great. But this is the order that you took this time. And right now this is preparing that order. But what if the new order comes up? That's also interesting case. Let me walk you through what happens. Because assuming things is not a good idea in programming. Let's just go ahead and execute them. Let's just say again, we have a tea stall. And in this we call this Chai customer. There we go. This right now is storing the reference of the Chai customer. Not doing anything at all. In order to run this, I have to call the next method and say this stall. So this is interesting. This is actually a point where you are having a start the generator. This is a starting point of the generator. Now after this I can just go ahead and say stall dot send. Once I go ahead and send this, then for the first time I'm sending masala Shai. Let's run this program as it is. What's happening in this case? We'll add more code to this. But right now I just want to execute it as it is. So once I do this notice here, it says, welcome. What chai would you like to have? And it's preparing a masala chai. Okay, it's preparing a masala chai. The order that you are yielding right now is this one. So you have started this. This one. But what if somebody gives me another one? All right, let's go ahead and see. This one is lemon chai. All right, let's run this and I'll show you exactly. Notice here, it says masala chai and lemon chai. So it's preparing nicely. But what if I don't write this order yield. Interesting question. Let's go ahead and remove this. Let's run this. What happens in this case. And we can see. Oh, goodness. This is continuously just running. I'll kill this before it actually, kills my memory. But you can see now we are just constantly going with the memory, memory, all of that. Because the point is this is a while true loop and this is constantly just keep on going with, the infinite amount of loops. Now we need to analyze this to truly understand what just happened here. Because this is a very interesting case study altogether. Let's close this and let's bring it back so that we can actually understand this. And oops. Oh, my bad. All Right. So notice here what is happening in this program. We define a simple program. We simply print the message and this is line number three where we wait for the order. So this order value is not going to get filled if you just run the function like this next, all because you haven't passed on any value. This function is expecting that something will be given to me via the yield. And since nothing is being given to you, you simply go ahead and say, okay, nothing is being given. I will pause here. So technically you never reach line number three. You are always at line number two. So when I simply said stall chai customer, this is just a reference. And when I said next stall, this starts my function and runs this print line here, but actually does nothing outside of this. And to show you the proof of this, I'll just comment this and we'll run this program again. And there we go. So notice here it prints what chai would you like? But now it's waiting that, hey, give me some value so that I can actually store that into the order. The moment you go ahead and first time you send the value using send, this send method directly interacts to your generator. And this is where the yield value comes into the picture. So yield, value comes up here. So we have paused the program in between. And after that, this, while true, this will always execute. Then we are printing that. Okay, you are preparing a, order and then here also we are pausing this program again. If this doesn't exist, there is no way of stopping this program. This is always keep on running. So this is the point at line number six where you stop the program again. So when I run this program again, then the program again comes to the life and says, all right, the order value is yield. So your order gets a value and then it again goes back. Okay, so this is true. So I'll just print that value again and I will wait that you pass me another value. So the program then after that keeps on going with the values that you have, passed on. It's a very interesting case study of how the values are gone. And I know this is a aha moment. All right, so we are always stuck in the while loop in the memory. And this is the reason why this program is getting stopped in running into the infinite generators. And that is the reason I just talked about the infinite generator in the last video, because the infinite generators are used less this one here. But this is the implementation which is used quite a lot, especially in the frameworks. So I hope this gives you more idea of why this is happening, how this is happening, and each line is broken down to you. This was fun. All right, for this video, let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 send value to generators.vtt",
      "originalPath": "genai-cohort/python/07 Chapter Subtitles/03 send value to generators.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0044479426,
      0.020571765,
      0.029422069,
      -0.06505932,
      0.005886562,
      -0.006670657,
      -0.006991869,
      0.03001246,
      0.0168896,
      0.013757347,
      0.011421959,
      0.007781261,
      0.0051271655,
      0.0330631,
      0.11818669,
      0.00023045321,
      0.0088588055,
      -0.021543665,
      0.018275522,
      -0.01994672,
      -0.012972935,
      -0.016416207,
      0.006124546,
      -0.005116875,
      0.008352065,
      0.007360977,
      0.011177933,
      0.014387903,
      0.032341965,
      -0.011654706,
      -0.019199925,
      -0.00013612313,
      -0.0033471358,
      0.0322141,
      0.011767455,
      0.023811108,
      0.015814012,
      0.0033259538,
      -0.031465426,
      -0.0027918336,
      -0.0007390085,
      0.00030596866,
      0.008353255,
      -0.014883682,
      0.012234218,
      -0.024322864,
      0.020256741,
      -0.015209111,
      0.014656287,
      0.016508024,
      0.008496218,
      0.009110715,
      0.002596813,
      -0.16739179,
      -0.005201125,
      0.021060316,
      -0.0023749876,
      0.0023604012,
      0.00036553398,
      -0.007975953,
      -0.015291193,
      0.006446192,
      -0.013710089,
      -0.027014405,
      -0.014744407,
      -0.012978868,
      0.017801171,
      -0.013022027,
      -0.0009980644,
      -0.013786353,
      0.012784156,
      0.0023209902,
      -0.016176948,
      0.0028606334,
      -0.026198566,
      -0.02669972,
      0.0036216322,
      0.0043658456,
      0.008941636,
      0.006424015,
      0.012299192,
      -0.026052158,
      0.00312565,
      0.004669672,
      0.0067460756,
      -0.010765774,
      -0.016640611,
      -0.0030586326,
      0.011892665,
      0.008880605,
      -0.018685563,
      0.017002022,
      -0.008471117,
      -0.004995072,
      -0.009834486,
      -0.004256821,
      -0.02025539,
      0.010095791,
      -0.038102355,
      -0.004359114,
      0.0011176631,
      -0.005912543,
      -0.009956441,
      -0.004997878,
      0.0060828864,
      0.009481888,
      -0.0040022754,
      0.0045096185,
      -0.020369247,
      0.006729848,
      -0.0061565214,
      -0.007347871,
      0.009064021,
      -0.0038815462,
      -0.012258738,
      -0.16603257,
      0.017357407,
      0.0069896104,
      -0.014247399,
      0.020949379,
      -0.012093675,
      -0.006184632,
      0.012641451,
      -0.005708142,
      -0.01796605,
      0.0154581955,
      0.0138138905,
      0.008017947,
      0.004821527,
      0.009194441,
      -0.022519179,
      -0.015546213,
      -0.01195914,
      0.0025529005,
      0.003575984,
      0.0234425,
      -0.012558834,
      -0.013166815,
      -0.015332654,
      0.006089701,
      -0.005747849,
      0.024525348,
      -0.0034462286,
      0.03165914,
      0.01279896,
      0.0060312212,
      -0.0018906773,
      0.018960727,
      -0.031643216,
      -0.016744154,
      0.0016190505,
      -0.0037891974,
      0.013076593,
      -0.009477024,
      0.04086056,
      -0.030660875,
      0.009421582,
      0.0012501128,
      0.0029073933,
      -0.0013385692,
      -0.026476689,
      -0.018865801,
      0.0006829357,
      0.0049594035,
      -0.00649351,
      0.015643796,
      -0.015155064,
      0.0018066432,
      0.0138446335,
      0.018099545,
      -0.013101484,
      -0.011962191,
      0.012975797,
      -0.0067559527,
      -0.005775227,
      0.01319795,
      -0.01332181,
      -0.007018854,
      0.023367679,
      -0.017589362,
      0.013046043,
      -0.007752064,
      -0.0056281495,
      0.007619091,
      0.015486066,
      -0.0055212663,
      -0.019482052,
      0.009694819,
      -0.0039463737,
      -0.0058400542,
      -0.010112049,
      0.028999902,
      0.032842647,
      0.0056580994,
      0.006516978,
      -0.02578069,
      -0.004337867,
      -0.0018019313,
      -0.005411852,
      0.016891643,
      0.026379619,
      -0.01435023,
      -0.011884155,
      -0.029945275,
      0.02366231,
      -0.022331022,
      0.0091959005,
      0.0028409152,
      0.027414491,
      0.01775392,
      -0.016602756,
      -0.012911172,
      0.019195473,
      0.00017755874,
      0.02071533,
      0.009261679,
      0.022370908,
      -0.0025917261,
      -0.0016428984,
      -0.006886636,
      0.0027435052,
      -0.011856331,
      -0.0028774168,
      0.020421691,
      0.0035477416,
      -0.006081685,
      0.00043280047,
      0.020836828,
      -0.0074957614,
      0.01869665,
      0.020515671,
      0.016986892,
      -0.026041366,
      -0.0037512009,
      0.014686694,
      0.0010732537,
      -0.005641328,
      0.023036852,
      0.007822144,
      -0.010833815,
      -0.015479431,
      -0.0029053958,
      -0.009037543,
      0.007647545,
      0.01935137,
      0.0007259584,
      0.008242063,
      0.009510491,
      -0.00060188543,
      -0.02599174,
      -0.0009077313,
      -0.015773114,
      -0.006873313,
      -0.006378791,
      -0.016780246,
      -0.03951405,
      -0.0043028677,
      -0.029678775,
      -0.01295778,
      -0.016593114,
      -0.0022004577,
      -0.0083386805,
      -0.026184065,
      -0.00900903,
      -0.0008271878,
      0.0029137407,
      0.020344771,
      0.040355768,
      -0.031273235,
      0.004449454,
      0.017537609,
      0.013135035,
      0.016640896,
      0.0073359725,
      -0.01651474,
      0.020961525,
      -0.09066226,
      0.022164108,
      0.0037194635,
      -0.038335603,
      -0.015215008,
      0.008221377,
      -0.016468933,
      0.013781477,
      -0.0014019948,
      0.0067463918,
      0.010986813,
      -0.014210494,
      0.01135443,
      -0.032711107,
      -0.005326532,
      -0.009408335,
      0.007801398,
      0.0017770847,
      0.027301006,
      -0.0069164764,
      0.009761828,
      0.0037926482,
      0.011486057,
      0.010452607,
      0.013209365,
      0.0043854658,
      -0.009821524,
      0.03126793,
      0.010052738,
      -0.009390767,
      0.0007856665,
      0.024612501,
      -0.009998121,
      0.012199747,
      0.008132327,
      0.003334116,
      -0.004682876,
      -0.015043533,
      0.0028749164,
      -0.013569938,
      0.0087971715,
      -0.012662305,
      0.01133908,
      0.044277523,
      0.0029763593,
      0.013304146,
      0.020521328,
      0.011583696,
      -0.023911616,
      0.0012988127,
      -0.005828072,
      0.0031713392,
      0.009304929,
      -0.029726602,
      0.0034176963,
      -0.0015632496,
      0.02910576,
      0.0099592665,
      -0.0037441151,
      0.01571242,
      0.012222845,
      0.009601496,
      0.019935904,
      0.00952024,
      0.0051012966,
      0.015344658,
      0.025913252,
      -0.023958595,
      -0.005139823,
      0.019781355,
      0.005935493,
      0.00041889033,
      -0.00009753333,
      -0.023009581,
      0.000796519,
      0.01730776,
      0.038355976,
      -0.016152484,
      -0.023839213,
      0.047091033,
      0.025315834,
      -0.02618325,
      0.0036274884,
      0.001152687,
      0.013575427,
      0.005901773,
      0.008915117,
      -0.0057192123,
      0.020123983,
      0.0025640703,
      0.0071583386,
      -0.006478902,
      -0.024069509,
      0.0029465335,
      -0.011893292,
      -0.00455859,
      -0.015755106,
      -0.016593888,
      -0.017826471,
      -0.005553474,
      -0.001119795,
      -0.007108629,
      -0.013607382,
      -0.009921309,
      -0.003135883,
      0.006029542,
      -0.03863522,
      0.007325011,
      -0.010452531,
      -0.026831118,
      -0.015453319,
      -0.026196579,
      -0.008066663,
      -0.022031892,
      -0.013747841,
      0.003897535,
      0.0054905005,
      0.01080271,
      0.019312156,
      -0.010513879,
      -0.015809229,
      -0.014079722,
      -0.003376633,
      0.0011648295,
      0.001343869,
      0.013476416,
      -0.008274268,
      0.008599441,
      0.012948106,
      -0.039613754,
      -0.03155678,
      0.01761635,
      -0.009815425,
      -0.0119840205,
      0.002926005,
      -0.006103477,
      0.024548236,
      0.020458635,
      0.024115508,
      -0.010049143,
      -0.019731134,
      -0.017302202,
      0.0055693644,
      0.0153509835,
      -0.023776717,
      0.021520592,
      -0.0021660405,
      -0.010750941,
      -0.0022607187,
      -0.03386147,
      -0.002492371,
      -0.0321438,
      -0.009976275,
      0.0056042443,
      -0.0054054656,
      0.0023633824,
      -0.0011045624,
      -0.014102054,
      -0.024231667,
      -0.032038823,
      0.005269524,
      -0.008210851,
      -0.03028683,
      0.0038638352,
      0.02217691,
      0.00047362177,
      -0.015273249,
      0.018107124,
      0.0051371236,
      -0.006410672,
      -0.0017677688,
      -0.016360395,
      -0.048304517,
      0.010451605,
      0.019468216,
      -0.0070682866,
      0.022285443,
      0.0003254371,
      0.040262394,
      -0.00061923877,
      0.0023536438,
      -0.0056918906,
      -0.009830153,
      0.016300118,
      -0.003439132,
      0.022150736,
      0.020133479,
      0.0019926312,
      -0.025876436,
      -0.0047803777,
      -0.005392366,
      -0.0075798477,
      0.0073181055,
      0.03664972,
      0.004783439,
      0.0325649,
      0.020805046,
      -0.016608244,
      -0.002145031,
      0.014825771,
      -0.010543545,
      -0.009762734,
      -0.008686006,
      0.011650368,
      0.01181392,
      -0.030774638,
      -0.016167417,
      -0.009648231,
      -0.0046572806,
      0.02827859,
      -0.009903898,
      0.0010387837,
      0.00086358574,
      -0.008616986,
      0.024617106,
      0.024916703,
      -0.025856066,
      -0.021871146,
      -0.034658723,
      -0.0027631493,
      0.0050066332,
      -0.020549187,
      -0.017206093,
      -0.004695225,
      0.010099215,
      -0.01599917,
      -0.003732241,
      0.016992737,
      0.0047802376,
      0.025584789,
      -0.015321559,
      -0.008712993,
      0.011211923,
      0.014888705,
      -0.023060486,
      -0.011039338,
      0.008667898,
      0.004924723,
      -0.015218135,
      0.013172039,
      0.008826398,
      -0.014123396,
      -0.031246072,
      0.0028543328,
      0.018445337,
      0.0045023663,
      0.019269407,
      -0.00011595042,
      -0.033818457,
      0.0021275906,
      0.01004076,
      0.023067193,
      -0.001953495,
      -0.00633518,
      -0.010588064,
      0.023916544,
      -0.0025604537,
      -0.005385426,
      0.01053243,
      -0.006234684,
      0.035132203,
      0.024303477,
      0.00025445272,
      0.016930139,
      -0.007502535,
      -0.0039260797,
      0.01228418,
      -0.0005131912,
      -0.022390248,
      -0.12566884,
      0.008207917,
      -0.006604315,
      0.0005750557,
      -0.02728022,
      -0.015341297,
      -0.023570767,
      -0.018599426,
      0.003627138,
      0.009985636,
      0.03159736,
      -0.017675018,
      0.0078468425,
      0.0024469318,
      0.010118933,
      0.004416821,
      0.01641742,
      0.01690553,
      0.0060134996,
      0.004536813,
      -0.0036244781,
      0.009267121,
      -0.009831689,
      0.008348741,
      -0.0072999187,
      -0.016560901,
      0.008338171,
      0.01392581,
      -0.015777644,
      -0.0045689624,
      -0.03742173,
      -0.0034655544,
      -0.003116332,
      0.00842667,
      0.022956735,
      -0.024629395,
      -0.013169801,
      0.022527466,
      0.022632172,
      0.017135391,
      -0.005988365,
      0.004780474,
      0.025980406,
      0.0053915833,
      -0.011791946,
      0.025539443,
      0.03888741,
      -0.025408786,
      -0.0036941504,
      0.012336662,
      -0.03182556,
      -0.0108739175,
      -0.0055548428,
      -0.034890875,
      -0.016111959,
      0.0026382292,
      0.021934671,
      -0.015785513,
      0.015199142,
      0.008205491,
      -0.0015932316,
      -0.013196428,
      -0.01067739,
      0.024075689,
      -0.0015509696,
      0.0046950867,
      0.020196857,
      0.0074471366,
      0.02041598,
      -0.015948894,
      -0.0071554845,
      -0.004519201,
      -0.0055818427,
      0.03817104,
      0.007769115,
      -0.012947454,
      0.0027889023,
      0.004387591,
      0.0008381311,
      0.013937676,
      -0.02588124,
      -0.03761435,
      -0.070005864,
      -0.0116199,
      0.012311693,
      -0.028820146,
      -0.0136127565,
      0.0032725334,
      -0.037728738,
      0.0034848866,
      0.006652772,
      -0.013929357,
      -0.018028403,
      -0.0064390055,
      0.008795546,
      0.008890128,
      -0.012397633,
      0.0018695993,
      0.010390269,
      -0.014281115,
      -0.014541947,
      -0.008198092,
      -0.0023396257,
      0.0025513824,
      -0.018454496,
      -0.007955808,
      0.0053015347,
      0.020730006,
      -0.020956647,
      -0.00062162697,
      0.003384678,
      0.025201162,
      -0.01953967,
      -0.15093453,
      -0.012260142,
      0.0020512496,
      0.0068490263,
      -0.0012274538,
      0.0030172328,
      -0.006188807,
      -0.0062716207,
      0.0017736807,
      0.01418817,
      -0.00072992826,
      -0.011092854,
      -0.009535555,
      0.0028114554,
      0.025432501,
      0.13938797,
      -0.0053605973,
      0.032186437,
      -0.011971954,
      -0.010750812,
      -0.00543056,
      -0.0021519123,
      -0.02229451,
      0.016667195,
      -0.019277614,
      -0.003952629,
      0.005377172,
      -0.028864866,
      -0.0032259661,
      0.016968999,
      0.00071430916,
      -0.0013502247,
      0.0029077984,
      0.033773642,
      0.011476529,
      -0.01438684,
      0.012504559,
      0.012731438,
      0.0021218883,
      -0.00061259366,
      -0.0010512768,
      0.0010692662,
      0.0053985165,
      -0.009202088,
      0.004440539,
      0.019717623,
      -0.019285679,
      -0.013928974,
      0.0032926118,
      -0.010183451,
      -0.0244977,
      -0.055439297,
      0.002283103,
      -0.026960991,
      -0.013222427,
      -0.0065490785,
      0.0101852855,
      0.012259941,
      0.0014772875,
      0.00953513,
      -0.02205528,
      -0.019407464,
      0.00065653503,
      -0.005559271,
      -0.009794916,
      -0.006129628,
      0.0064285584,
      0.014721507,
      0.011638533,
      0.0031576694,
      0.0013969864,
      0.018416846,
      -0.018110413,
      -0.003863205,
      0.0074524917,
      -0.00304008,
      -0.013028553,
      0.014895579,
      0.027012885,
      -0.0053648977,
      0.0037388331,
      -0.016402362,
      0.012843255,
      0.00031095,
      0.002594248,
      0.0099246865,
      -0.0076387217,
      -0.011278438,
      0.0025869715,
      -0.0052021304,
      -0.002496198,
      -0.00925051,
      -0.013299848,
      0.03009873,
      -0.0044514406,
      0.025890967,
      -0.004014737,
      0.0049977317,
      0.043948524,
      -0.017597722,
      -0.0149332825,
      -0.015599067,
      0.0124759,
      -0.031751942,
      0.025178157,
      0.004858307,
      -0.018379437,
      0.021103853,
      -0.026958557,
      -0.005605172
    ]
  },
  {
    "id": "genai_cohort_python_04_yield_from_and_close_the_generators_vtt",
    "content": "Moving on. Hope you are having fun in this Python course and hope you have rated us with your kind words. We really need that. So in this portion of the Python course we're going to work on that we can actually yield some value. In case you remember from the last video we are talking about the generators. We have seen quite a lot, quite a hidden details about them. But now we want to see two more things and that is it, that is all about the generators. The one thing which is common that sometimes generator doesn't generate the value or yield the value on its own. It sometimes borrows the value from somewhere else. That is totally possible. We're going to see a right example for that as well as sometimes maybe you don't want to generate rest of the values from a generator, or maybe it's an infinite generator. We don't want to keep it in the memory forever. We want to close it down so that it's removed from the memory and we get the job done. This is a common scenario in the database. Whenever a function calls you yield a connection string from the database. And once it's all done you finally try to close this up. Although the logic is bit different there in the database but you will see somehow similar kind of example appear. Let me take you up on the screen and the next thing that we want to do in this yield is just like we have worked on the send data, now we want to work on yield from and we are also going to work on close. So how do we do these things? How do we yield from and how do we close this? It's actually super easy if you just go ahead and look at this. So let's create a sample example for this. I'll close everything we worked quite a lot and let's create a new file and we'll write both the example in the same file. Let's call this1 as close. Jenny Raytor There we go. Py. Okay, so what we're going to do, first of all I'll shut up my AI. Otherwise I, I hardly use it. I always keep it shut up. But I don't know why. I do have this extension enabled in this. I'll probably get rid of this. So let's just say we simply go ahead and define a local chai. Yes, the chai is the theme of this entire course. We're not going to leave it anytime back. It's fun actually. A lot of people love chai. Or you can replace it with coffee as well in case you Are that big fan. And once we are done with this, we are going to go ahead and say yield. The first time you call this one, it says I'll give you a masala chai. The next time you go ahead and call this one, this is going to give you ginger chai. All right, good enough, Fair enough. We have another one which is imported chai. There we go. And this one also does yield. So we're going to yield and first time we're going to have an imported chai. So I think Macha is one of the imported one, very famous as well the Japanese one. And Oolong is actually not from India. So oolong chai is popular in again Southeast Asia, but not exactly in India. You got some chai knowledge as well. So we are going to define a simple full menu in this full menu. And the way how full menu works is we are going to get the data little from the local chai, little from the imported one. So how we do that, pretty easy actually. We can use yield, but not only just yield, we can actually use another syntax which is from. It's almost similar to when you actually write at the top from this file. I want to import this function. It's almost exactly same. All you got to do is have this local chai and make sure this is a classic mistake execute that you want to call the function here. Similarly in this line we want to go ahead this time we want to have the imported chai. So make sure you execute that and that is it. That is all you have. In order to see that how this function actually works, we can just go ahead and say for chai in full menu, just like this and we're going to yield one at a time. We're not going to use next next, next you know the syntax of it if it is required. But in this case I'll just go ahead and say let's print the chai value here. Pretty easy. Not that bad, not that bad. I'll just go ahead and say, hey python, let's run the and there we go, we see masala chai, ginger chai. So after that we got matcha and Oolong. So pretty good, pretty fun that we have imported that. And once you see yield, it actually goes ahead and does all the job. Now let's go ahead and see if we can run through how we can actually close halfway through the things. Yes, that's totally possible. I'll show you an example. Let's just say we have a chai stall and this one is pretty interesting one because we are going to use another syntax which is Try Catch, also known as Try Accept. In the world of Python we call it as Try and accept, but in most of the world other programming language it's called as Try Catch. So don't get confused with that. Whenever I say Try Catch or anybody else says Try catch that means implement the try except syntax. It's a valid syntax, available In Java, JavaScript, Swift, almost every language. So we'll just go ahead and say we want to try something. I'll write a pass for a second and then we actually go ahead and fill it up with accept. I will go ahead and accept, just like this and we'll say pass. So this is a basic syntax. As of now we'll study more about this, although we don't need to. This is it all about the syntax. If there is an error in the try block, you try to execute some piece of code. If there is a problem, it is handled in the accept pass or the exception stage. But anyways I'll go ahead and say while true, so we are generating a constant one, we'll keep an order and this order is actually coming up from the yield. And we will also pass on a message which says waiting for chai order. Another interesting syntax. Yes, I know. And then once we are done here, we are getting the order, we will just go ahead and print this, a simple message which says stall closed, no more chai. So in case something goes wrong, we go like that. Now where is the closing syntax in all of this? Don't worry, have patience, I'll show you. First of all, let's just say we bring up a stall and that stall comes from the chai stall, just like that. In order to just go ahead and start this, we are going to go ahead and print this. I'll say it like this. I will use the next syntax and in the next syntax I'll just go ahead and pass on this stall. All right. Pretty easy. Pretty. Okay, now let's see what happens if I go ahead and run this much of the code. This is fun. Actually if I run this notice here, it says waiting for chai order. There is no more order. We simply say stall close, no more chai. Okay, but that's okay, that's exactly what we wanted to go with that because we didn't pass on any value, we didn't send anything, remember the send syntax. But interestingly you can actually go ahead and gracefully close it just by using a close Run this. That is it. Now what happens when I run this one? That's interesting. Notice here. Exactly Same. And this is probably the reason why a lot of people don't actually close it. They just wait that hey, it will probably automatic close, which is not a good idea. You should always be responsible for closing your generators. And this is how it goes. This is known as it triggers a generator exit method which actually is responsible for this. So this not only just close this, this is actually a cleanup. You're cleaning up your memory and this should be done. This is important. So. All right. Hope you got this thing. Let me just give you a quick summary because hey, we have studied a lot. So the first thing that we have studied is yield syntax. This is a very, very interesting syntax. What it does it pause and resume an execution of a function. This is the main guy who is responsible for converting into generators. We then studied about the next syntax which is manually getting the next value, whichever the generator is going to yield at me. Then we also went up and studied the send syntax which actually sends data, into the generator. We also went up and studied the syntax of yield from. And that's simply just getting from another generator or delegate the sub generator or iteratable any task. It's not just always getting the value. Sometimes you want to delegate some tasks that hey, you'll do that task. So we can actually go ahead and do that. And last but not the least one that is close. This is usually the cleanup. This gracefully stops the generator again, it stops automatically as well. But we really want to gracefully stop the generator so there are no memory leaks. Your program performs well. No memory crashes, tons of advantage. Let's go ahead and catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 yield from and close the generators.vtt",
      "originalPath": "genai-cohort/python/07 Chapter Subtitles/04 yield from and close the generators.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.00970233,
      0.0062730997,
      0.024027511,
      -0.060300194,
      -0.0012177259,
      -0.013247734,
      -0.0078052077,
      0.036873713,
      0.012733764,
      0.010618958,
      0.0011414494,
      0.005520273,
      0.011859885,
      0.018762756,
      0.12232661,
      0.008942211,
      -0.007690364,
      -0.017254703,
      0.0064357487,
      -0.019565577,
      -0.008543774,
      -0.012156182,
      -0.015395206,
      -0.0160423,
      0.008138288,
      0.008900268,
      0.009471461,
      0.020961514,
      0.03299516,
      -0.013511149,
      0.0043163304,
      0.0008721395,
      0.018826675,
      0.026621511,
      -0.01282992,
      0.023559319,
      0.006017868,
      0.014414399,
      -0.03078575,
      0.0041495673,
      -0.009443678,
      0.009389447,
      -0.010610272,
      -0.007518728,
      -0.0041797343,
      -0.039626155,
      0.008144554,
      -0.016232828,
      0.0006038904,
      0.016652115,
      0.017461436,
      0.011464174,
      -0.002765509,
      -0.16743639,
      -0.0033099896,
      0.0043431097,
      -0.002099392,
      -0.0018997433,
      0.0067834863,
      0.0024404794,
      -0.034407027,
      0.011460836,
      -0.011140154,
      -0.010871037,
      -0.025199106,
      -0.026272004,
      0.024435021,
      -0.011346206,
      -0.0047928393,
      -0.00910377,
      0.022313049,
      0.01654804,
      -0.016587589,
      -0.020099519,
      -0.01837007,
      -0.038674578,
      0.00090465456,
      -0.0006173953,
      -0.0019516315,
      0.022838352,
      0.0093104765,
      -0.015634336,
      0.016327003,
      0.009188246,
      0.011552995,
      -0.00876747,
      -0.014892874,
      -0.01119805,
      0.0034409047,
      0.013609694,
      -0.015561309,
      0.016603481,
      -0.012706686,
      0.008859995,
      -0.013039817,
      -0.0026277844,
      -0.015675081,
      0.00084894226,
      -0.03892984,
      -0.009434158,
      -0.0049487753,
      -0.01977464,
      -0.008028772,
      -0.019239428,
      -0.0020025384,
      0.0065027745,
      0.0027593814,
      0.0005531913,
      -0.015556025,
      0.010651208,
      -0.0010013869,
      -0.023971098,
      0.006609706,
      0.001875212,
      -0.010009001,
      -0.16193523,
      0.020291736,
      -0.0021341885,
      -0.009854094,
      0.004535263,
      -0.0034106018,
      -0.0047023348,
      0.022012101,
      -0.01054197,
      -0.030687809,
      0.009522967,
      0.0019097705,
      0.023507379,
      -0.007902641,
      0.00782006,
      -0.020860178,
      -0.018802786,
      -0.005816574,
      0.0042747897,
      -0.009987576,
      0.03479512,
      0.00012654373,
      -0.015459905,
      -0.023486665,
      -0.0071337093,
      -0.021033697,
      0.022903193,
      -0.0059939274,
      0.038117055,
      0.0076231877,
      0.002947861,
      -0.010108606,
      0.005755592,
      -0.024153551,
      -0.024586417,
      -0.0024737574,
      -0.0009954481,
      0.014290364,
      -0.009709171,
      0.025127135,
      -0.032328904,
      -0.0038893758,
      0.00818144,
      -0.0010202698,
      -0.023628274,
      -0.014458684,
      0.0043951385,
      0.0008380275,
      0.00311147,
      -0.006831282,
      0.0018151625,
      -0.0117407525,
      -0.0021137588,
      0.016289432,
      0.020365266,
      -0.011097606,
      -0.027810264,
      0.013928121,
      -0.0075463527,
      -0.013967676,
      0.007494078,
      -0.00646118,
      -0.0030193673,
      0.015388125,
      -0.008739511,
      0.014730367,
      0.0004066084,
      -0.0059352387,
      0.005187576,
      0.0039491327,
      0.012762403,
      -0.02611712,
      0.020361241,
      0.011156399,
      -0.022936037,
      -0.008929416,
      0.018776618,
      0.02710595,
      0.0007303302,
      0.010483831,
      -0.019640107,
      0.0028070994,
      0.0055744434,
      -0.01687333,
      0.005753523,
      0.043470893,
      -0.0047557703,
      -0.017560182,
      -0.019728562,
      0.0062923585,
      -0.017920483,
      0.012483822,
      -0.008225413,
      0.009716069,
      0.018756788,
      -0.021618558,
      -0.0044344426,
      0.01882947,
      0.006586743,
      0.025985047,
      0.0046942206,
      0.0048344815,
      0.0049788323,
      0.005870426,
      -0.0021791563,
      0.0031196717,
      0.007491651,
      0.0072400426,
      0.019724172,
      -0.015575866,
      -0.005823715,
      0.01639779,
      0.024163587,
      0.013521854,
      0.0104031125,
      0.03073882,
      0.02131305,
      -0.035607986,
      -0.00052044116,
      -0.010286603,
      0.0043812706,
      -0.010871277,
      0.024239838,
      0.01947656,
      -0.0020278622,
      -0.009128743,
      0.017339744,
      -0.006593809,
      -0.0000981308,
      0.021575801,
      -0.012839442,
      0.0057868985,
      0.0060240813,
      -0.01120086,
      -0.026514823,
      -0.007902788,
      -0.013490515,
      -0.004465891,
      -0.03794477,
      -0.019878447,
      -0.04548521,
      -0.014535877,
      -0.018235616,
      -0.008160506,
      -0.009619169,
      0.0029130217,
      -0.0054221195,
      -0.025595384,
      0.0031662828,
      -0.0004035811,
      0.021434529,
      0.0260406,
      0.03604638,
      -0.026607893,
      0.0069176513,
      0.007842649,
      0.015123226,
      0.01624121,
      0.014750945,
      -0.025292939,
      0.020026337,
      -0.10011855,
      0.026541144,
      0.008133525,
      -0.025787931,
      -0.004336256,
      0.012573281,
      -0.043618917,
      0.0113852285,
      0.002090372,
      -0.003901209,
      0.014076902,
      -0.0131283365,
      0.013136047,
      -0.02694711,
      0.004965974,
      0.0015479024,
      0.020764343,
      -0.024491495,
      0.017407313,
      -0.02709402,
      0.0069939955,
      0.0057970495,
      -0.0077243713,
      0.010432228,
      0.009032091,
      0.00072581274,
      0.0068402984,
      0.02276776,
      0.018200666,
      0.0010901284,
      -0.008887291,
      0.027233815,
      -0.012435373,
      0.012521846,
      0.01703054,
      0.013579955,
      -0.0067973756,
      -0.010828237,
      0.00071429415,
      -0.020312006,
      0.013726263,
      -0.0095293205,
      0.00986054,
      0.034273718,
      -0.003691281,
      0.01895004,
      0.012876243,
      -0.0047177384,
      -0.013296285,
      -0.007969513,
      -0.011968136,
      0.010609343,
      0.03303893,
      0.0016757097,
      -0.0067972355,
      -0.0064418726,
      0.024290046,
      -0.0012162746,
      -0.008884369,
      0.014415302,
      -0.0070220074,
      0.0022322645,
      0.014837431,
      0.0039221505,
      0.011337607,
      0.0066034463,
      0.008437662,
      -0.0025738108,
      0.001947405,
      0.016074205,
      -0.009611786,
      -0.007942515,
      -0.007070305,
      -0.02594195,
      -0.0026354908,
      0.017918777,
      0.023306604,
      -0.013819582,
      -0.016784592,
      0.046131138,
      0.026310869,
      -0.030678267,
      0.0015447004,
      0.00045758567,
      0.0043125823,
      0.0012715389,
      0.0104183685,
      -0.009131937,
      -0.0007036412,
      0.0001092153,
      0.0063600917,
      0.001736328,
      -0.022050194,
      0.010653149,
      -0.009229643,
      -0.009578608,
      -0.015528583,
      -0.018512435,
      -0.019991888,
      -0.011593924,
      -0.011141332,
      0.008418333,
      -0.022483887,
      -0.008111847,
      -0.002725613,
      -0.022658424,
      -0.025974266,
      -0.0029486234,
      -0.011165627,
      -0.018854281,
      -0.0075491345,
      -0.021283312,
      -0.010803861,
      -0.016578266,
      -0.01024341,
      0.00024401647,
      0.008955045,
      0.016945004,
      0.016864574,
      -0.021476991,
      -0.012739115,
      -0.0028249337,
      -0.017515993,
      0.006171702,
      -0.006065202,
      0.00774841,
      -0.006518427,
      0.004418915,
      -0.006763312,
      -0.031803995,
      -0.035870686,
      0.012878469,
      -0.002535813,
      -0.017802589,
      0.0051586605,
      -0.0033790185,
      0.02544695,
      0.021213997,
      0.018028045,
      -0.00048779146,
      0.0006748633,
      -0.021010786,
      0.003495091,
      0.008554514,
      -0.015349609,
      0.029023448,
      -0.0019701128,
      -0.00790806,
      -0.017978542,
      -0.02436478,
      -0.008727643,
      -0.026534261,
      -0.012984132,
      0.011189314,
      -0.006957608,
      0.0087221805,
      0.013405729,
      -0.01650721,
      -0.01902572,
      -0.022834267,
      0.0073298346,
      0.014855979,
      -0.027352367,
      -0.0044430927,
      0.028010923,
      0.008702118,
      -0.0045458796,
      -0.0024783083,
      -0.0015103085,
      -0.023655416,
      -0.004757245,
      -0.0055520157,
      -0.04565772,
      -0.00018777917,
      0.011542573,
      -0.0044317334,
      0.030044792,
      0.001280249,
      0.04487986,
      0.0067418944,
      0.004502132,
      -0.002760424,
      0.005285094,
      0.0062546637,
      -0.02014825,
      0.01152091,
      0.018809665,
      -0.0028381855,
      -0.017990325,
      -0.0027098367,
      -0.010795838,
      -0.010369126,
      -0.0045993594,
      0.014766912,
      0.008357378,
      0.03336462,
      0.01763853,
      0.004193999,
      0.016487407,
      0.013716219,
      -0.019674206,
      -0.021467185,
      -0.004905565,
      0.006304752,
      0.008555276,
      -0.02369406,
      0.007893969,
      -0.004524656,
      0.0018574516,
      0.016799381,
      -0.007334572,
      0.0035987245,
      0.003135638,
      0.0025504613,
      0.013766511,
      0.027352655,
      -0.0036371371,
      -0.011999845,
      -0.035711955,
      -0.0132373,
      0.008538055,
      -0.01759139,
      -0.00794239,
      -0.00475084,
      0.016091052,
      -0.012149545,
      -0.010563858,
      0.0090878345,
      0.00028957016,
      0.00938675,
      -0.016731735,
      -0.014590014,
      -0.004323608,
      0.018062647,
      -0.038738348,
      -0.010301012,
      0.031361412,
      0.017135829,
      -0.028157393,
      0.0016535944,
      0.0006700724,
      -0.020490585,
      -0.01992687,
      0.00007681399,
      0.00546815,
      -0.01815458,
      0.027113698,
      0.00086846075,
      -0.024414113,
      0.016221594,
      0.0027876592,
      0.038347133,
      0.0048737647,
      -0.0058625345,
      -0.0011739538,
      0.019159816,
      0.007281922,
      -0.0087622795,
      0.005240802,
      -0.00047086083,
      0.022939758,
      0.014239931,
      -0.0024377666,
      0.015914507,
      0.005240121,
      -0.010440391,
      0.005880792,
      0.008654233,
      -0.016651306,
      -0.11939035,
      -0.009993822,
      -0.0053906622,
      -0.006919919,
      -0.009947232,
      -0.011654271,
      -0.030572945,
      -0.019908477,
      -0.00999176,
      0.015384477,
      0.022949971,
      -0.019160988,
      0.015650498,
      -0.0030319435,
      0.019540593,
      -0.014671142,
      0.017181564,
      0.0034822733,
      0.015169062,
      0.0026728364,
      0.005607958,
      -0.007742626,
      -0.0073852013,
      0.008368747,
      0.0032625373,
      -0.015241782,
      0.0052629723,
      -0.0042686067,
      0.006129214,
      -0.0066801584,
      -0.020658128,
      -0.0015480842,
      -0.009953186,
      0.009140006,
      0.018539093,
      -0.016302094,
      -0.009795074,
      0.027607432,
      0.010616336,
      0.019584656,
      -0.012868373,
      -0.0015707519,
      0.033717662,
      0.010334065,
      -0.010040352,
      0.015152019,
      0.04525352,
      -0.030224333,
      0.014272762,
      0.018247712,
      -0.035913352,
      -0.014804223,
      0.0005910258,
      -0.025674198,
      -0.013419873,
      -0.0059597227,
      0.008914801,
      -0.0098244315,
      0.020560622,
      -0.0005888471,
      0.0014098273,
      -0.016433664,
      -0.0031444114,
      0.021002688,
      0.0069075217,
      -0.0012659243,
      0.021796968,
      0.0099267475,
      0.022441898,
      -0.005242129,
      -0.003333166,
      -0.005236017,
      -0.02354088,
      0.037065186,
      0.012201802,
      -0.005182772,
      0.010606081,
      -0.001787416,
      0.0028724263,
      0.0034626361,
      -0.032612044,
      -0.04443592,
      -0.07574385,
      -0.013337309,
      0.00887515,
      0.003075367,
      -0.019187134,
      -0.0015165685,
      -0.027790863,
      0.001340543,
      0.0389115,
      -0.009137551,
      -0.004238017,
      -0.005151925,
      0.0017644124,
      0.016583541,
      -0.013305446,
      -0.0001175806,
      0.014253054,
      -0.010460741,
      -0.014403518,
      0.00382252,
      -0.0062207244,
      0.01321584,
      -0.025356064,
      -0.018184157,
      0.016312156,
      0.004264247,
      -0.022262739,
      -0.004305221,
      -0.0043690773,
      0.011689765,
      -0.021203453,
      -0.1519825,
      -0.020196006,
      0.01828442,
      -0.0075434227,
      0.0012983765,
      -0.003977235,
      -0.012978968,
      -0.01247093,
      0.0054020034,
      0.007161586,
      -0.016642394,
      -0.023700047,
      -0.025641711,
      0.0052626026,
      0.01225272,
      0.14275317,
      -0.018148655,
      0.019548766,
      -0.033183295,
      0.005040569,
      0.012644177,
      -0.018199151,
      -0.011625512,
      0.009678421,
      -0.01170669,
      -0.008259839,
      0.006096776,
      -0.029382726,
      -0.0009714928,
      0.012456955,
      -0.012967487,
      0.0034109699,
      0.0029119155,
      0.032063022,
      0.0063618906,
      0.0025902146,
      0.0020538864,
      0.011952405,
      0.0005678465,
      0.011769201,
      -0.00146588,
      0.007474059,
      0.004502206,
      -0.028209591,
      0.016333269,
      0.011895952,
      -0.014063118,
      -0.011874612,
      0.001225342,
      -0.021588491,
      -0.030119805,
      -0.05643649,
      0.017662477,
      -0.015915819,
      -0.021764634,
      0.009856327,
      -0.00043826166,
      0.013307722,
      0.0069448072,
      0.004098211,
      -0.012310067,
      -0.014128973,
      0.010438665,
      -0.017015144,
      -0.021188147,
      -0.015753763,
      0.011722114,
      0.016900627,
      0.025973063,
      -0.0011744411,
      0.0047468017,
      0.031049887,
      -0.017272163,
      0.023004321,
      0.014756142,
      -0.00057740643,
      -0.012519964,
      0.018145923,
      0.013225352,
      -0.006032729,
      0.0063810623,
      -0.0129225375,
      -0.006916266,
      -0.012188773,
      0.01722355,
      0.007471012,
      -0.017088447,
      -0.010635062,
      0.004321703,
      -0.005911014,
      0.012241829,
      -0.010558291,
      -0.012957955,
      0.01778399,
      0.013499746,
      0.009021974,
      -0.0036372354,
      0.0024181313,
      0.024963977,
      -0.0023224317,
      -0.008634144,
      0.00054386957,
      0.005225797,
      -0.023762748,
      0.025438882,
      -0.0062433756,
      -0.0061500063,
      0.017573211,
      -0.0073046386,
      -0.0033164711
    ]
  },
  {
    "id": "genai_cohort_python_05_Decorators_in_python_vtt",
    "content": "Hey there everyone. And welcome to the section of decorators. Now initially I thought I'll keep them as a separate section or a separate module, but then I realized, let's combine them, generators and decorators. Generators we have already studied. Now it's time to go with the decorators. Now, although they sound a little bit similar, but they are not like that. The decorators are simply a way of decorations. Now they could be functional as well, but the primary agenda is decoration. Decoration is something that you do on top of something. For example, when you buy coffee, some people actually sprinkles a little bit of a chocolate powder or coffee on top of it. That's decoration of coffee. Now sometimes it changes the taste a little bit, sometimes it doesn't. Sometimes it adds more value to it. Sometimes it's just a wrapper around it. This is the whole point of having the decorator. It is just a wrapper around your function. And Python gives you actually some superpower. So first let's understand this in the theory part and then it will be super clear. Let's just say you have defined this is my function. How can a square block be a function? Give me on that. This could be super easy. So let's just say this, orange block is our function and we have many such functions and each function does a different job. I really don't want to emphasis on what job. But they are really different functions. So let's just say we have a blue one and we have a pink one as well. Now all of them have their different job. You don't want to change the behavior of a function, but for some reason, I'll just choose one example. But it could be other ways as well. You want to simply log that whenever this function runs. I just want to log that whatever the function has run or some function has run. So what you can do is you can create a simple block just like this. This will be your decorator. And in this decorator you can just move this existing function inside it. That is it. Now whatever you are trying to do, before this function, it can actually execute whatever you want to try to execute. After this, it can also execute. And if sometimes it happens that you are actually going ahead and passing some value inside this function, you can actually go ahead and just pass on these values. So let's just say there are some params, also known as parameters. So you go ahead and pass on these parameters. I'll just go ahead and click this. So if you go ahead and pass on these Parameters. You can just go ahead and do that. You pass on these parameters to this outer function and we are going to, as it is, pass on this exact same parameters, whether the keyword argument or whatever. We are going to just go ahead and pass on to this function so that it executes and behave exactly like what we want to do. So as you have noticed, it's pretty good actually. And this wrapper function, I can just go ahead and take this. That. Hey, I this wrapper function, maybe I want to replace it with something else. So I don't like this. I want to use the blue function. You can just go ahead and use it. That is it. That is your decorators. Exactly like that. Nothing less, nothing more. Let me go ahead and walk you through with some examples so that you actually truly understand what decorators is. We'll do some practice on that as well. We'll definitely create a new folder. Not here for sure. And let's call this one as and. And we will call this one as decorators. And let's call this one as basics. Pretty good basics. Py. Okay, so how does a decorator works? Pretty simple. It's just a function. So I call this one as my decorator to exaggerate. And just make sure that you understand this. What it takes as a parameter, definitely a function. This func doesn't really mean function. It could be Superman, it could be Hitesh. But it's just a name as of now. But. But we expect that what you'll be passing in here will be a function. Remember the diagram. This whole block is a function. And this is further a function that we are passing inside this. What do we do here? We simply go ahead and say that inside this function. Further, I go ahead and define a wrapper just like this. All the decorators are designed like this. And the job of this function is first of all to print something that I will say before function runs. We'll have one more which will say after function runs. And just in between, whatever the function I'm accepting as a params, I'll just execute that. That is it. That is your whole thing. One thing that we also prefer to do in these kinds of things, we go ahead and simply say I want to return, the wrapper as well. So whatever the wrapper is going on, that's getting returned. Now in order to use this function, this is a very special function that you're writing that you are taking a function inside you and you are just executing it and returning the Outer wrapper one. There is a special way of how you use it. You put up an at the rate sign and then you simply say mydecorator. That is it. No parenthesis, nothing is just a name with the at the rate this actually says that hey, whatever is coming up just in the next line will be wrapped up. So I'll just go ahead and say def. Let's just call this one as greet basic function. And I go ahead and simply print this print. I will say hello from decorators class from chai code. There we go. So let's go ahead and run this. I'll open up an integrated terminal just right up here will close the rest of the ones, even this one. I'll again start an integrated terminal and let's go ahead and run this. Let's use Python Python and then the basics And We forgot to call the method. We forgot that. Totally forgot that. Greet. Run this. And We are going to run this. Now notice here, since we have this decorator, this says before the function runs, whatever I want to do and after the function runs and believe it or not, that is it. That is your decorator. The moment you remove this line that means hey, I'm not decorating this function with anything. Nothing sprinkled on top of it. There we go. Basics. If I go ahead and decorate it back with my decorator, it works just like before. So this is the whole point of having it. But there is a problem, there is a small problem with this. So if I go ahead and want to print out something more, let's just say if I want to print this like this and I say I want to print this greet not as a function execution, but I want to know this name. So I have a dunder name for this. What happens when I try to go ahead and print this? Now notice here it says wrapper. Why wrapper? Our function name was greet because technically what we are returning back is actually a repr. So this is a common syntax and common mistake. Not mistake, but this is a common thing which is done that hey, the name of the function changes. Not only the name, couple of other metadata about the function also changes. By the way, if you know metadata is about is like data about the data. For example you have a file, the file actual content, whichever the Movie or the MP3, you are listening, that's actual content. But is it an MP3? Is it a wave, is it minute long, is it minutes long that all is metadata? So this is what we have now Is there a solution for it? Yes, this is where I first time introduce you to the third party or actually built in Python libraries, to be honest. So from we have something known as func tools and from this we are going to import something known as wraps. What does this wrap does? The whole job of this wraps is to make sure to place preserve the metadata. So if I go and just come up here and just use at the rate and simply say wraps just like that. And by the way, ignore this Windsurf all this line. I know this might be bothering you, but this actually comes up from my AI plugin. You totally, totally can ignore it. I should have said it earlier. I'll probably make a video, saying that, hey, please ignore this line. This is just generated. It will not appear in your code editor. I should say this earlier. All right, all right. So once I go ahead and do this, all I have to do is this is it. Once you have this wraps again, the way how you use it, it's not truly a decorator. So you use it like this and then you pass on whatever the function you're passing. You just have to pass it here. This is the syntax. Always keep this in mind. And what this small syntax is going to do is if I run this program again, notice here it's preserving the name. It's not wrap anymore, it's actually greeting. That is it. And trust me, this, is all about the decorators. I know people have spent like minutes, minutes, one hour on the decorators, but there is nothing more to decorators. It's just a wrapper function which takes your function, executes that and probably adds some more to it. Probably just the printing statement. Probably checks more things in your function. Inject more values, extract more values. There could be hundreds of things, but the core foundation is this is it. Let's go ahead and catch up in next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 Decorators in python.vtt",
      "originalPath": "genai-cohort/python/07 Chapter Subtitles/05 Decorators in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.02443242,
      0.004691642,
      0.027436182,
      -0.065189324,
      -0.006684449,
      0.0043734596,
      0.023225151,
      0.032844875,
      0.0003864593,
      0.010658599,
      -0.010148696,
      -0.013725123,
      0.0052877455,
      0.03397399,
      0.12742642,
      0.01737678,
      -0.012980577,
      0.0032060049,
      0.0060976376,
      -0.021281173,
      0.00064035534,
      0.0077184457,
      0.008637572,
      -0.012885607,
      0.010736041,
      -0.002733083,
      0.007963054,
      -0.0011010829,
      0.015208474,
      -0.016807156,
      -0.020753404,
      0.011019913,
      0.0052757077,
      0.028336309,
      -0.000039803424,
      0.013074729,
      0.00018238646,
      0.0036677893,
      -0.016435595,
      0.01607849,
      -0.018259414,
      -0.007882396,
      0.014323131,
      -0.00047242927,
      0.03194093,
      -0.024303876,
      0.007722889,
      -0.009700673,
      0.0061058495,
      0.02273929,
      0.0073932977,
      0.008086245,
      -0.009942091,
      -0.1801378,
      0.0068952795,
      -0.0010378305,
      -0.016825402,
      0.021858899,
      0.0131709175,
      -0.014877777,
      -0.021654788,
      0.007918037,
      -0.026883136,
      -0.010303864,
      -0.019073699,
      -0.028311402,
      0.019847114,
      -0.022635778,
      -0.0014647987,
      0.0069286665,
      0.04499516,
      0.012855235,
      -0.024811931,
      -0.013084492,
      -0.02098864,
      -0.006602064,
      0.0074880896,
      -0.017508255,
      0.010446596,
      0.004814745,
      0.009625771,
      -0.0026310903,
      -0.00068058464,
      -0.0018477138,
      0.033598382,
      0.0041498877,
      -0.030220632,
      -0.008001563,
      0.005017683,
      -0.008855794,
      -0.0076754056,
      0.02174379,
      -0.008043085,
      0.01846107,
      -0.017738612,
      -0.007845915,
      -0.02987413,
      0.004182886,
      -0.021342669,
      -0.0064386055,
      -0.00048384495,
      -0.008797247,
      0.0041905516,
      -0.013357078,
      0.012490918,
      0.019348701,
      -0.004459791,
      -0.001226893,
      -0.009266458,
      -0.005963164,
      -0.0013622275,
      -0.008681071,
      -0.000296985,
      0.008991416,
      0.012829301,
      -0.1838086,
      0.031390153,
      -0.003909701,
      -0.005534613,
      0.012504065,
      -0.0021165297,
      0.005869359,
      0.024965579,
      -0.00506967,
      -0.030241638,
      0.022532715,
      -0.012149497,
      0.028201094,
      0.0068176296,
      -0.0021111732,
      -0.030072443,
      -0.014803899,
      0.0060927654,
      0.02953731,
      -0.0022577601,
      0.037009444,
      -0.013497882,
      0.008140167,
      -0.018815566,
      -0.0027600785,
      -0.016780434,
      0.011852583,
      -0.012581885,
      0.03258492,
      0.024533767,
      0.0056987335,
      -0.0072311307,
      -0.010205799,
      -0.029045902,
      -0.021782866,
      -0.0023658066,
      -0.018953145,
      0.008496478,
      -0.011927243,
      0.0271074,
      -0.010640587,
      0.0081777545,
      -0.0095960265,
      0.013894626,
      -0.025464252,
      -0.0030228996,
      0.014387478,
      -0.00013036827,
      0.005644117,
      -0.013113681,
      -0.0071260827,
      -0.0138529865,
      0.008436297,
      0.018671412,
      0.015812432,
      -0.0068972604,
      -0.017191246,
      -0.0019206653,
      0.0029804735,
      -0.005495645,
      -0.013271954,
      0.00019647666,
      0.0048428057,
      0.019452399,
      -0.014574056,
      0.0057203947,
      -0.00628531,
      -0.00639433,
      -0.0041868445,
      0.0034925425,
      0.021576883,
      -0.015266931,
      0.0126548745,
      0.02617884,
      -0.002942904,
      0.010285367,
      -0.0029888323,
      0.023544472,
      0.028992595,
      0.010586279,
      -0.014890919,
      -0.0018282584,
      -0.0024757762,
      -0.015534508,
      0.008328978,
      0.023730526,
      -0.00621679,
      0.015863027,
      -0.027840583,
      0.026530458,
      -0.001729087,
      0.019424371,
      -0.01689933,
      0.019045047,
      0.008854056,
      -0.017811114,
      -0.011581854,
      -0.0035660928,
      -0.00040430503,
      0.0105612045,
      0.00011319159,
      0.016218148,
      -0.019034933,
      -0.0045406017,
      0.007438097,
      0.0242905,
      0.0014646415,
      -0.007475649,
      0.01468305,
      0.0092115635,
      0.010242193,
      -0.012463165,
      0.0032990475,
      0.012396819,
      0.0014421863,
      0.01837407,
      -0.00795618,
      -0.01489629,
      -0.0061023463,
      -0.009778917,
      0.013329814,
      -0.002383374,
      0.008639412,
      0.011689384,
      0.003772701,
      -0.010459214,
      -0.021015914,
      -0.005679496,
      0.022434829,
      0.01744544,
      0.014571449,
      -0.012491602,
      0.004102446,
      0.0012927587,
      -0.014081239,
      -0.012383905,
      -0.0014098806,
      0.005212552,
      -0.025303992,
      -0.004745695,
      -0.014455853,
      -0.03238252,
      -0.0050425576,
      -0.017322017,
      0.0055492762,
      -0.009612895,
      -0.001453272,
      -0.045752913,
      0.014691515,
      0.021628248,
      0.010750296,
      0.00001251287,
      0.028715385,
      -0.02424464,
      0.013341661,
      0.021449063,
      0.019868845,
      0.013964702,
      -0.008682144,
      -0.016909113,
      0.009844242,
      -0.08641912,
      0.040297005,
      0.020670973,
      -0.019774243,
      0.0069675585,
      0.008067037,
      -0.03851192,
      0.0061487923,
      0.0088772215,
      0.01354908,
      0.013558513,
      -0.0068434984,
      0.031658057,
      -0.013030638,
      -0.009297091,
      0.012361173,
      0.01852139,
      -0.009284732,
      0.012984169,
      -0.024652649,
      0.01631301,
      0.024811529,
      -0.0007578253,
      -0.018581206,
      0.007567796,
      -0.001015801,
      -0.018898368,
      0.027134381,
      0.03263046,
      0.022517513,
      0.0033469985,
      0.023200462,
      0.0019315851,
      -0.0029323336,
      0.0034244612,
      0.016527774,
      -0.0024834566,
      -0.017283766,
      -0.00612515,
      -0.0064530848,
      0.002668221,
      -0.002870937,
      0.032826047,
      0.025981333,
      0.022335509,
      0.02403715,
      0.0024441495,
      0.004241006,
      -0.018193373,
      -0.00826734,
      -0.013165898,
      -0.012166852,
      0.019739967,
      -0.019560743,
      0.01930656,
      0.014154509,
      -0.004023485,
      -0.010892232,
      0.008866162,
      0.02246977,
      -0.013439622,
      -0.017830223,
      0.018243913,
      -0.0062890486,
      0.011374929,
      -0.020792607,
      0.011048323,
      0.0031628204,
      -0.014201118,
      0.013597398,
      0.028405996,
      -0.0051308493,
      0.009616254,
      -0.0067425887,
      0.007332993,
      -0.0114871375,
      0.02381766,
      0.0059688524,
      -0.02448698,
      0.018533133,
      -0.0016430559,
      -0.022535516,
      0.031161327,
      0.0045397747,
      -0.0052867266,
      0.0017432346,
      -0.00913371,
      0.0045052753,
      0.0032055029,
      -0.008366912,
      0.019729204,
      0.013766144,
      -0.00075382815,
      0.0135616595,
      -0.015939318,
      0.005279378,
      -0.004411789,
      -0.0398401,
      -0.011330598,
      0.014574522,
      -0.017911393,
      -0.0015163858,
      -0.029534465,
      0.0024057175,
      -0.016122052,
      0.01679487,
      -0.028159626,
      -0.0068098535,
      -0.0065631582,
      -0.030058384,
      0.0032795535,
      0.004266497,
      -0.019625342,
      -0.02102898,
      -0.0050682644,
      0.008586319,
      -0.009244542,
      0.020004766,
      0.010323252,
      -0.02989796,
      0.007443635,
      -0.016369589,
      -0.023398628,
      0.01271575,
      -0.008696492,
      0.006832673,
      -0.0055817654,
      -0.005689458,
      -0.008551552,
      -0.026975561,
      -0.03248951,
      0.024437979,
      -0.020752817,
      0.0034584466,
      -0.014000864,
      -0.019850168,
      0.02034179,
      0.019707669,
      0.0076834927,
      -0.017910793,
      -0.019702645,
      -0.011188707,
      0.025017006,
      0.007616746,
      0.0057569807,
      0.022238426,
      -0.0077958484,
      -0.011531845,
      0.0018885522,
      -0.025759164,
      -0.030546794,
      -0.003318082,
      0.012854665,
      0.0075413184,
      -0.015084221,
      0.01522736,
      -0.0032286553,
      -0.0056031765,
      -0.018878788,
      -0.039245896,
      0.0010909241,
      0.011192599,
      -0.028660916,
      0.018033702,
      0.046128236,
      0.017188933,
      0.013753706,
      0.0072555463,
      -0.0047563515,
      0.00020748527,
      -0.0045620035,
      -0.016088204,
      -0.048941627,
      -0.021897465,
      0.020617025,
      -0.0019449018,
      0.016881568,
      -0.0090413075,
      0.013315356,
      0.02611767,
      0.005119963,
      -0.0050083967,
      -0.026848804,
      0.015944619,
      -0.015730504,
      0.011301261,
      0.01867602,
      -0.011165845,
      -0.03433198,
      0.012772891,
      -0.007058389,
      -0.014393484,
      -0.004704807,
      0.010925462,
      0.0009511395,
      0.009833563,
      -0.010307426,
      0.013651857,
      -0.0023710586,
      0.021227602,
      -0.007507875,
      -0.018469632,
      -0.0010948859,
      -0.0134654455,
      0.021034727,
      -0.015444082,
      -0.0017518466,
      -0.00047986154,
      0.0030622084,
      0.0066428753,
      0.019032892,
      0.0062853997,
      -0.0035794813,
      0.008975649,
      0.011990163,
      0.032582607,
      0.011885393,
      -0.016246773,
      -0.03301111,
      -0.017009526,
      0.0076103793,
      -0.008644077,
      -0.013480872,
      -0.031704642,
      0.012986499,
      -0.014396874,
      -0.018316044,
      0.013154997,
      0.014233192,
      -0.0072469455,
      -0.0067856507,
      -0.0020690619,
      -0.0127191665,
      0.00319873,
      -0.011735934,
      -0.0113981925,
      0.016512573,
      0.015768189,
      -0.021745889,
      0.012586356,
      0.024617562,
      -0.012222604,
      -0.010536582,
      -0.00638445,
      -0.0004591801,
      0.014016642,
      0.0248993,
      0.011573604,
      -0.01996519,
      -0.0036489698,
      0.0068180203,
      0.012951298,
      -0.018684847,
      0.006084468,
      0.008033157,
      0.01712796,
      -0.002426938,
      0.002082814,
      -0.010591213,
      -0.0015710403,
      0.006509628,
      0.011583821,
      -0.00142965,
      -0.003637857,
      -0.0072898814,
      -0.014127125,
      -0.011962397,
      -0.014130498,
      0.01932168,
      -0.123517275,
      -0.0024046267,
      -0.016604437,
      0.004979572,
      0.0017778734,
      -0.0039913966,
      -0.008671831,
      -0.021536857,
      0.013550517,
      -0.0018046871,
      0.0403878,
      0.0065211747,
      0.0032139136,
      -0.010296967,
      0.009455317,
      -0.019233475,
      0.010834124,
      0.016546667,
      0.015570155,
      0.009126668,
      -0.005539995,
      -0.0031715129,
      -0.0020282974,
      -0.0025943392,
      -0.022558985,
      -0.012116907,
      0.0104780905,
      -0.010874092,
      0.008139785,
      -0.029043093,
      -0.021130936,
      -0.0040184264,
      -0.013804483,
      -0.0055385367,
      0.024576398,
      0.000904704,
      -0.023357404,
      -0.002321519,
      0.010605816,
      0.015354898,
      -0.007032084,
      -0.012791197,
      0.032285366,
      0.010147619,
      -0.019654224,
      0.030745171,
      0.017726464,
      -0.010309475,
      0.0026068564,
      0.049271878,
      -0.020604653,
      -0.013924816,
      -0.0012957735,
      -0.03393774,
      -0.013396281,
      -0.0011378004,
      0.015911812,
      -0.013324439,
      -0.013402593,
      -0.00022056267,
      -0.00025508925,
      0.0040026037,
      -0.011013355,
      0.01849191,
      -0.010801112,
      0.006682956,
      0.027274705,
      0.00579368,
      -0.0013108961,
      -0.023587795,
      -0.013676036,
      0.005531325,
      -0.007874204,
      0.026698137,
      0.026586771,
      0.023848312,
      -0.0048039337,
      0.006189262,
      -0.0097541185,
      -0.0021951348,
      -0.034271467,
      -0.009521342,
      -0.05128947,
      -0.006789807,
      0.0023301744,
      -0.022623172,
      0.0057770773,
      0.011424464,
      0.0014577692,
      0.008195565,
      -0.00013528844,
      -0.0076399436,
      -0.027874218,
      -0.0003736725,
      0.01492166,
      0.0032794706,
      -0.02278704,
      -0.00557247,
      -0.002069794,
      -0.0051972372,
      -0.025303792,
      0.016728764,
      -0.00149856,
      -0.0052410564,
      -0.017723761,
      -0.018338453,
      0.027491119,
      0.022245903,
      -0.00022134377,
      0.0042925957,
      -0.018506756,
      -0.0011479262,
      0.0029281257,
      -0.15024064,
      -0.023025455,
      0.015151722,
      0.0035636525,
      0.0077463356,
      0.015371364,
      -0.018761506,
      -0.012846819,
      -0.0027573912,
      0.0035227358,
      0.010570757,
      -0.011003301,
      -0.0057680313,
      -0.013080693,
      0.01519418,
      0.133706,
      0.0035179616,
      0.0082884375,
      -0.0040017706,
      0.0064008185,
      -0.009020727,
      0.0006542922,
      -0.018337747,
      0.017765356,
      0.004296318,
      -0.020090532,
      -0.0023957873,
      -0.008667584,
      0.008945274,
      0.010109809,
      0.005938981,
      -0.026592702,
      -0.0054234453,
      0.009031194,
      0.02361592,
      -0.014981201,
      0.0024587535,
      0.00078909117,
      0.0027145061,
      -0.0012824794,
      0.0113460515,
      0.012716815,
      0.0032254308,
      -0.0063539036,
      0.01671088,
      0.011244998,
      -0.02157236,
      -0.022984594,
      0.017651431,
      0.0074553182,
      -0.009421662,
      -0.06010298,
      0.016879587,
      -0.012393582,
      -0.00028599205,
      0.010393278,
      0.002463065,
      0.0031016325,
      0.0040566185,
      0.010283884,
      0.0174598,
      -0.0012961641,
      -0.009580544,
      -0.0048993714,
      0.000117406285,
      -0.0020441443,
      -0.0005119807,
      0.018858897,
      0.016284438,
      -0.0153343,
      0.019498847,
      0.008678601,
      -0.0057121273,
      0.0063098622,
      -0.0100160055,
      -0.016538024,
      -0.004634536,
      0.012415529,
      0.0040606763,
      0.00061779877,
      0.0013231937,
      -0.0005243543,
      -0.01305714,
      -0.012116486,
      0.008698035,
      0.007105432,
      0.013680971,
      0.030947192,
      -0.0095906155,
      0.008045327,
      -0.010721246,
      0.008819621,
      -0.023102857,
      0.01861236,
      -0.0040468904,
      -0.0006593746,
      0.018382259,
      -0.0070195836,
      0.03094887,
      -0.0059560225,
      -0.00081238145,
      -0.014109908,
      -0.01902931,
      -0.025369702,
      0.014072747,
      0.006181384,
      0.0066352766,
      0.009902384,
      -0.007917985,
      -0.008932538
    ]
  },
  {
    "id": "genai_cohort_python_06_Build_a_logger_with_decorator_vtt",
    "content": "There are variety of use cases of decorators, and to be honest, you actually learn about the decorators as you use them more in Django. You will be using a ton of them in libraries like fastapi. You actually will be using a lot of them. But there are certain decorators that you want to make them on your own and that's how you learn them. So in this video we are going to build a simple logging decorator. It's a fun exercise. You, will absolutely love this. Let me share the screen with you. So let me take you directly on the code part. We don't need any theory for this. Let's call this one as This one will be logging decorator py. Of course. So how does a logging decorator work? It's actually super simple. The first basic steps will always remain same. So we'll always go ahead and say from, function tools, let's go ahead and import the wraps. It should be, oh, my bad. It should not be imported, should be from. All right, good enough. Now let's just say we want to call this one as logactvt. That's the first part of it. And we'll take import as a function, call it as func. Feel free to call it anything else. And the job one is to take this wraps and take this function so that we have all the values preserved. Then we define our wrapper function. It doesn't really need to be called as wrapper, but wrapper makes sense. So we have the wrapper. Now here's the interesting part. This function might also accept some arguments or parameters in that case. So there could be arguments, or there could be key value arguments or keyword arguments. I don't know which one are coming up. So in that case, what you do is you take the wrapper and you simply go ahead and say, hey, whatever, I don't know the numbers of it, whatever the args are coming in, I'll happily accept that. I will also go ahead and accept all the keyword orgs that are also coming in. I'll take them as well. And then I'll just go ahead and execute you. I'll return some interesting stuff as well. But this function will execute and will return you the results. So I'll just go ahead and say, hey, function, just execute that. And also make sure you don't forget to take your parameters. So I'll just go ahead and say args just like that. And I will also go ahead and say take your keyword args. There we go. This is all good. And finally we go ahead and say return the result. And this is what we result here. And here also we go ahead and don't worry, I'll show you the working part as well. But this is not all it we have done this. The job is actually done. You have seen how the keyword arguments can be taken because here you are taking the whole function along with every detail that comes up here in the wrapper. Whatever the values are being passed on can be actually imported up here. Because this function actually has a linking direct. And when you're calling the function you're further down the line passing on these value here. So super simple, super easy. But the only thing that we haven't done is we haven't said which function is calling and which function has finished calling. So just before it calls let's add a print statement and the print statements will be a formatter string which will say calling. And then we'll use a function name. So what's our function name? Super easy. We can just call this func dot underscore, underscore name, underscore, underscore or in short dunder. So this function, whatever is there, it actually comes up. We simply call that. Let's go ahead and say this time this one will be finished. And our library is actually interesting one. So it actually includes some of the. The tick as well, not rake. There we go. So it actually uses a tick that hey, finished calling the function and once it calls let's use another one. So this one looks good. So the rocket is actually calling at least makes it interesting. So how we're going to use this, that's interesting. You simply go ahead and say logactivity. That is it. Now you can define the function. Let's just say our function is brewing chai. You thought we were going to leave the chai? No, absolutely not. And we simply go ahead and pass on whatever the type we are getting. Maybe we can pass on more argument. No problem there. I will just go ahead and print with a formatted statement that says brewing. Should have written that correctly. Brewing. And then whatever the type, you give me chai. All right, good enough. And let's not forget to call this so brew chai. And we're going to call masala chai. All right, pretty interesting. And hope you have learned something about this keyword. This is little bit awkward at first, but eventually you get the habit of it that this is how I write it. Let's go ahead and run this. This will be Python we'll be using and there we go. So notice here any function you pass on into this one with whatever the data type it actually goes ahead and work with that. So notice here it calls the brewchai and we have designed a really pretty custom logging for us. Now the advantage of this if I change this one let's just say instead of the type I also go ahead and say milk. The default value is going to be a simple string that says no and I can just pass on more values to it brewing chai and milk status and then we go ahead and simply print out the milk here. So notice here we have changed the function without worrying about I don't really care what my wrapper does, I just focus on building my function itself and we simply accept more parameters now even the keyword arguments Pretty interesting isn't it? This is actually really fun and this is how in general you build the loggers in decorator. Hope you have enjoyed this. Do rate us and let's catch up in next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "06 Build a logger with decorator.vtt",
      "originalPath": "genai-cohort/python/07 Chapter Subtitles/06 Build a logger with decorator.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.007190376,
      0.018294161,
      0.026402164,
      -0.06158624,
      0.009343583,
      -0.020818388,
      0.0052382206,
      0.04235161,
      0.014274723,
      -0.0141255,
      -0.0066174646,
      -0.01649841,
      -0.00061609765,
      0.03431871,
      0.11484196,
      0.000332279,
      -0.004069159,
      0.008801761,
      -0.002354687,
      -0.015265212,
      -0.0058999965,
      0.0022213762,
      0.011982565,
      -0.016678272,
      0.006000903,
      0.012791589,
      0.016943015,
      -0.0059286663,
      0.0051173265,
      -0.017318599,
      -0.028218852,
      0.009812504,
      0.01989998,
      0.029179903,
      -0.0064439285,
      0.007317914,
      -0.000036811874,
      0.005294447,
      -0.015686683,
      0.01157544,
      -0.013404637,
      -0.0034051163,
      0.009797257,
      -0.010668459,
      0.012743622,
      -0.0061054802,
      -0.001158824,
      -0.009412463,
      0.0022785943,
      0.03117656,
      0.018454826,
      0.0012588466,
      -0.011976654,
      -0.17971133,
      0.018013546,
      0.009547698,
      -0.020564543,
      0.016759748,
      0.03870986,
      0.0005646979,
      -0.025057362,
      0.007289146,
      -0.034945052,
      -0.0045988564,
      0.016466234,
      -0.03784229,
      0.009510309,
      -0.02331044,
      -0.0046612197,
      -0.01160134,
      0.037827563,
      0.021989588,
      -0.018952243,
      -0.013625793,
      -0.027937083,
      -0.028436229,
      -0.00907146,
      -0.013094299,
      -0.00051103503,
      0.019526377,
      0.02101991,
      -0.013319808,
      -0.003475455,
      -0.0035598688,
      0.018452741,
      0.018009786,
      -0.011545177,
      -0.0066892453,
      0.007832408,
      -0.006664367,
      -0.014590802,
      0.026057232,
      -0.00442842,
      0.019262858,
      0.004833202,
      0.0015839154,
      -0.014766922,
      -0.0053709536,
      -0.008828554,
      -0.0018658384,
      -0.007977406,
      0.0038943642,
      0.0090278005,
      -0.009036698,
      -0.0077330736,
      0.003972716,
      -0.0017024007,
      0.0025653942,
      -0.0147793265,
      -0.0146677485,
      -0.00767932,
      -0.012835567,
      -0.005150222,
      0.009372919,
      0.009644267,
      -0.17584734,
      0.02886104,
      -0.015692405,
      -0.0018440185,
      0.010898362,
      0.003964667,
      0.018130789,
      0.02239092,
      -0.0030634461,
      -0.040129617,
      0.026029859,
      -0.0121585615,
      0.020485617,
      0.023453185,
      -0.007054655,
      -0.022431852,
      -0.009666426,
      0.014384193,
      0.018402219,
      -0.021773346,
      0.025952255,
      -0.009547796,
      0.0019722285,
      -0.004296933,
      0.022845114,
      0.0004117944,
      0.006074837,
      -0.011893939,
      0.01070636,
      0.012509123,
      -0.011836326,
      0.0038323656,
      -0.010986465,
      -0.036748193,
      -0.018731661,
      0.021115756,
      -0.025024157,
      0.0126188025,
      -0.010384367,
      0.021940935,
      -0.013472186,
      0.0017795586,
      -0.011862947,
      0.007609266,
      -0.0071793455,
      -0.00532847,
      0.029077895,
      -0.0005161449,
      0.015629077,
      -0.013643352,
      -0.024670068,
      -0.027166445,
      -0.005776246,
      0.014095405,
      0.012654448,
      -0.017256502,
      -0.034862168,
      -0.0034690965,
      0.0070433784,
      0.0022475172,
      -0.016428597,
      -0.0042218147,
      -0.014050662,
      0.008789036,
      -0.02809195,
      0.017045118,
      -0.013291604,
      0.0052080546,
      -0.011869617,
      -0.019326886,
      0.014352537,
      -0.030770293,
      -0.005322522,
      0.021600824,
      -0.014279536,
      0.005246465,
      0.007832579,
      0.009081103,
      0.01598776,
      -0.000021883843,
      -0.00856419,
      -0.0065953294,
      -0.008374956,
      -0.005082377,
      0.0076533696,
      0.029978078,
      -0.005344393,
      0.013937431,
      -0.0051205824,
      0.040823374,
      0.002693275,
      0.020408232,
      -0.0252819,
      0.021734275,
      0.01705222,
      -0.0097385645,
      -0.005679322,
      -0.010951644,
      -0.020582989,
      0.0053371503,
      0.010818937,
      0.006854742,
      -0.015894346,
      -0.00038302052,
      0.009039623,
      0.015473402,
      -0.007748764,
      0.0017324256,
      0.010726025,
      -0.008509976,
      -0.0017664755,
      -0.0030218973,
      0.0033662098,
      0.013601708,
      0.0028814413,
      0.0257839,
      -0.0074025923,
      -0.016889138,
      -0.012259919,
      -0.0014529362,
      0.004569796,
      -0.0071744695,
      0.025101198,
      0.015427699,
      0.0040337197,
      -0.011567953,
      -0.009243163,
      -0.012491133,
      0.016459921,
      0.009461556,
      0.014424103,
      -0.0006735442,
      -0.004219513,
      -0.005434677,
      -0.01994215,
      -0.016997527,
      -0.0068696276,
      0.004550414,
      -0.020327419,
      0.006783463,
      -0.015309738,
      -0.031654827,
      -0.009948379,
      0.0018482405,
      0.019979484,
      -0.0058616293,
      -0.011778451,
      -0.042567886,
      -0.0012382859,
      0.024582604,
      0.0049861954,
      -0.012433228,
      0.025339281,
      -0.02303987,
      -0.0054158494,
      -0.001456547,
      0.001927657,
      0.0034718027,
      -0.017014552,
      -0.014552388,
      -0.012010072,
      -0.08298767,
      0.043754,
      0.009708638,
      -0.020862507,
      0.0005618946,
      -0.0036665613,
      -0.023332573,
      0.009065977,
      -0.0031769786,
      0.012612746,
      -0.0016536913,
      -0.013079132,
      0.01367611,
      -0.021900203,
      -0.025407163,
      0.0012689801,
      0.0048912796,
      -0.024088312,
      0.015570334,
      -0.02117083,
      0.0010109077,
      0.0041805073,
      -0.012716977,
      -0.0046679834,
      0.020858338,
      0.017426409,
      -0.0022915427,
      0.022602519,
      0.012735791,
      0.014382123,
      0.0010946519,
      0.010883235,
      -0.00090876454,
      -0.017274281,
      0.010907899,
      0.016318323,
      -0.0034447557,
      -0.0053259307,
      0.018911423,
      0.0045580743,
      0.021223102,
      -0.002399013,
      0.039015997,
      0.021839708,
      0.002565827,
      0.008015854,
      0.012585167,
      0.0051054247,
      -0.012789405,
      -0.007983979,
      -0.025823995,
      -0.0054130736,
      0.020796275,
      -0.012194433,
      0.019829312,
      0.012265812,
      0.006163363,
      -0.016014662,
      0.011357789,
      0.026148709,
      -0.006816885,
      -0.0016760861,
      0.022254363,
      0.0012769089,
      -0.0008311295,
      -0.010822364,
      0.009112548,
      0.0044111162,
      -0.025319615,
      0.008066717,
      0.027084963,
      0.0031188135,
      0.010218174,
      -0.03156385,
      0.012849845,
      0.014265004,
      0.016362483,
      -0.009493045,
      -0.022639599,
      0.011422994,
      0.0032140415,
      -0.012722624,
      0.011451034,
      0.020202791,
      -0.008862735,
      0.0064361235,
      0.0029145894,
      0.0026806353,
      -0.007990513,
      -0.015126426,
      0.013062028,
      0.01436776,
      0.0017942849,
      0.017200246,
      -0.014110407,
      0.019622676,
      -0.016685186,
      -0.012600463,
      -0.012411941,
      0.0046098526,
      -0.03573442,
      -0.011583502,
      -0.037120335,
      0.0020191825,
      -0.010558527,
      0.0034909467,
      -0.03545732,
      -0.013838002,
      0.0033278798,
      -0.035713762,
      0.02848236,
      -0.008015708,
      -0.026724527,
      -0.006252971,
      -0.0048700115,
      0.020862576,
      -0.011105071,
      0.016196199,
      0.01062888,
      -0.016185706,
      -0.019525575,
      -0.012651839,
      -0.022217302,
      0.013402064,
      -0.010171895,
      0.012075162,
      -0.015659327,
      0.011310906,
      -0.021312257,
      -0.029638506,
      -0.021662064,
      0.016311212,
      -0.023036433,
      0.014874076,
      -0.01614764,
      -0.01981036,
      0.022428364,
      0.02137451,
      0.0005647225,
      -0.012769643,
      -0.013399491,
      0.010370386,
      0.00904875,
      -0.009439093,
      0.004802006,
      0.017673135,
      -0.01327643,
      -0.007787376,
      0.007403785,
      -0.024215017,
      -0.022524627,
      -0.011430939,
      0.00049541314,
      -0.0069780345,
      -0.01657523,
      0.020379744,
      -0.009858245,
      0.0138796335,
      -0.017234202,
      -0.03541645,
      -0.0092511885,
      0.0014140682,
      -0.013064082,
      0.004591825,
      0.011668809,
      0.01934402,
      0.0045237388,
      0.0036401893,
      -0.006519567,
      0.0036108906,
      -0.008014453,
      -0.0020572064,
      -0.030146996,
      -0.020477926,
      0.0005861621,
      -0.0055002966,
      0.011744513,
      -0.0024996905,
      0.0126233455,
      0.022287577,
      0.002355894,
      -0.0037740523,
      -0.026464285,
      0.013583397,
      -0.015868483,
      -0.0053843334,
      -0.0035951885,
      0.013787736,
      -0.027700769,
      0.010920177,
      0.0018555565,
      0.0032602663,
      -0.012542769,
      0.011178942,
      0.004580379,
      0.0037162397,
      -0.015257585,
      0.018621061,
      -0.008531609,
      0.012607204,
      0.012892266,
      -0.005581362,
      -0.002263463,
      0.0047886227,
      0.030899607,
      -0.0100672925,
      0.01795691,
      0.009961919,
      0.0050312406,
      0.028729824,
      0.011373812,
      0.013404627,
      0.014594943,
      -0.005118327,
      0.019743724,
      0.029977681,
      -0.0006206001,
      -0.014582827,
      -0.042727523,
      -0.00792247,
      -0.0012253039,
      -0.0018004838,
      -0.0067784768,
      -0.0134271635,
      0.01417754,
      -0.007663268,
      -0.01024681,
      0.0016073853,
      0.015562257,
      -0.006629452,
      -0.010520179,
      0.0044873715,
      -0.014772225,
      -0.001336771,
      -0.0093141515,
      -0.010850912,
      0.021099169,
      0.011932855,
      -0.0033228525,
      0.030854829,
      0.012185597,
      0.0043351334,
      -0.028268388,
      -0.022475075,
      0.020414392,
      0.0077889278,
      0.004329997,
      0.014241437,
      -0.00856879,
      -0.003730214,
      -0.00035474217,
      0.0080975685,
      -0.011580194,
      0.007693619,
      -0.004012673,
      0.03562525,
      -0.017028634,
      0.0020918357,
      -0.013907937,
      -0.0027544359,
      0.021703303,
      0.01576219,
      0.017423742,
      0.016182326,
      -0.011237117,
      -0.018424641,
      -0.0153495055,
      -0.009572984,
      0.011091908,
      -0.13364595,
      0.010197049,
      -0.035197884,
      0.018610736,
      -0.006619052,
      -0.002077879,
      0.0050951904,
      -0.020842662,
      0.022784544,
      0.006907619,
      0.038582794,
      0.017204285,
      -0.0019812877,
      -0.013977863,
      0.0026647276,
      -0.018611616,
      -0.0074219704,
      0.005809194,
      0.016054135,
      0.014357015,
      0.0019246219,
      -0.025645396,
      0.0023084423,
      -0.006962817,
      -0.016798101,
      -0.0029998797,
      -0.0030872505,
      -0.0019784942,
      -0.025060602,
      -0.017623797,
      -0.013708351,
      -0.008611247,
      -0.01907027,
      0.011303685,
      0.02789316,
      -0.0057537975,
      -0.019194014,
      -0.01988491,
      0.0062936638,
      0.021174494,
      0.0050674286,
      -0.014805366,
      0.029050235,
      0.008235135,
      -0.022978663,
      0.024255158,
      0.0031865474,
      -0.004473657,
      -0.01700659,
      0.041372318,
      -0.027879111,
      -0.030531228,
      -0.003601609,
      -0.031747267,
      -0.027394267,
      0.0062807435,
      0.023166995,
      -0.0026840328,
      0.0041756113,
      -0.010808556,
      0.013204276,
      0.01622262,
      -0.014338794,
      0.010900441,
      -0.02007407,
      0.006282624,
      0.005958175,
      0.001818186,
      -0.015543943,
      -0.006216529,
      -0.0069113355,
      0.028335817,
      0.008454378,
      -0.001640387,
      0.030040547,
      0.026208097,
      -0.008568166,
      0.0052834,
      0.006150067,
      0.009723716,
      -0.041115083,
      -0.017492488,
      -0.054924615,
      -0.012558492,
      -0.0049255616,
      -0.013052088,
      0.003066604,
      0.014773522,
      -0.009068686,
      0.0070754667,
      -0.0010278213,
      -0.0006722835,
      -0.032306556,
      -0.0015591648,
      0.00656953,
      -0.022037482,
      -0.014201864,
      -0.004344489,
      -0.004338594,
      -0.016624812,
      -0.02902214,
      -0.00090970617,
      -0.0015551185,
      -0.0016133568,
      -0.010479928,
      -0.016056465,
      0.009276668,
      0.021581026,
      -0.018743739,
      0.0072663277,
      -0.020400168,
      -0.0030068217,
      0.016433405,
      -0.15092437,
      -0.023522038,
      0.007304923,
      0.0011388744,
      0.0016969335,
      0.02192705,
      -0.00022653113,
      -0.013070256,
      -0.011504143,
      -0.00613415,
      0.028409159,
      0.00030654756,
      0.0023604645,
      -0.023343397,
      0.0072162254,
      0.12740842,
      -0.0074397484,
      -0.008427774,
      -0.0027922601,
      -0.0086484505,
      -0.013164841,
      -0.0066394308,
      -0.021320425,
      0.030780043,
      -0.0014290634,
      -0.019853136,
      -0.019537965,
      -0.0065706163,
      0.0055369586,
      0.023406882,
      0.0057654395,
      -0.028934594,
      0.0023020857,
      0.028359842,
      0.013578852,
      0.0017730509,
      0.0036171433,
      0.009083885,
      0.003596811,
      0.016357033,
      0.01559837,
      0.007064241,
      0.00058413786,
      0.0003377676,
      0.013122514,
      0.0025437358,
      -0.017044086,
      -0.026368503,
      0.011693626,
      -0.0018879647,
      -0.019052539,
      -0.06371695,
      -0.003403645,
      -0.025439281,
      -0.009537199,
      -0.0020944357,
      0.00990841,
      0.015304606,
      0.002636767,
      0.018511865,
      0.0038766651,
      -0.010673406,
      -0.008786004,
      -0.02072404,
      0.012798425,
      0.009609824,
      0.0036717716,
      0.01883111,
      0.015605043,
      -0.014267658,
      0.019975485,
      0.019074075,
      0.0036051972,
      0.0086699,
      -0.0008550129,
      -0.008060892,
      0.0029353604,
      0.024062207,
      0.012994673,
      0.0029571073,
      -0.00329669,
      0.0060750674,
      -0.008494766,
      -0.020405803,
      0.01402808,
      -0.0072826385,
      0.000809301,
      0.026574824,
      0.01135683,
      0.022365244,
      0.0058775423,
      0.0039636483,
      -0.02450407,
      0.024661528,
      -0.0023091433,
      0.0023427417,
      0.01377598,
      0.0010727813,
      0.03967288,
      -0.0108661,
      0.0041193776,
      -0.007952135,
      -0.02233092,
      -0.04294621,
      0.022158401,
      -0.0012136017,
      0.011050725,
      0.022068344,
      -0.0068512657,
      -0.013329134
    ]
  },
  {
    "id": "genai_cohort_python_07_Build_an_Authorization_decorator_vtt",
    "content": "All right, so one more type of decorator that we're going to build. And in fact we are actually manually building it. But you're going to see them in big frameworks and libraries, especially in Django, it is used all over the places. So we're going to build a simple decorator. We're going to face, an error, and unexpectedly it will come and then we're going to learn how to fix them. And these are the things you learn in the production only. So let me go ahead and share the screen with you. So I have created a simple new file which is auth decorator. Again, it's a really simple kind of decorator. You're going to see this a lot. The first step is always same, so we're going to borrow some code. So we'll copy this and paste it. Whenever we are defining any decorator, this is the most common thing that you have to. Let's just say we want to define a simple decorator which says require admin. So we are creating a wrapper function that if any function executes, and I wrap this up without a function, that means only admin can actually execute that function. Pretty useful functionality to be honest. And I go ahead and simply accept function just like this. And we know this at the rate wraps to preserve all of the metadata just like this. And after that I can say, let's just say we define a wrapper, which this time takes user role. Now wrapper doesn't always need to take all the arguments just like this. If you know that we expect only one argument to be passed on, just take that. If you think that more will be coming up. There is no harm in saying args and keyword args, all of them. So all of them automatically pass on. But it's not really precise and I like precise code. All right, then we simply go ahead and check if the user role is not equals to admin. We simply go ahead and say just like this, a simple print message that says, something like this, access denied. And we will say admins only. So this is an admin only area. And after that we put up an else part. And in the else case we simply go ahead and say return whatever the function you are trying to run with the user role, we'll just return that as it is so that it can keep on executing. And we will also go ahead and say return the wrapper. Pretty simple. We have seen this many times, no problem at all. Now we'll see, that this is how we use Decorator. And once this decorator is here, we simply go ahead and say I want to create another method which says access tea inventory. And this is a common thing that you want to access the inventory. Somebody will pass me a role that what role you have so that you can access the inventory and print a simple statement that says access granted to tea inventory. There we go. Now let's go ahead and run this one. I want to run it two times. Access to inventory. Oops. Oh, why I did that. Access to inventory. And we will first of all pass on a user and then we'll go ahead and pass on admin. So what do you think will happen with this piece of code? It's pretty guessable, but the execution will actually shock you a little. So if the user role is user, then we simply go ahead and return the It is not admin, so we'll just go ahead and print this. Hey, this is admin, not allowed. If it is admin, then we'll simply go ahead and execute this. So this will execute as it is. We are not stopping anything. But to your surprise, if I run this whole piece of code and why is it behaving like that? And I have to say exit. There we go. Don't know what happened. I'll just say Python I am actually in the wrong folder somehow open an integrated terminal. This time I'm at right place. Let's run this. And this one is and there we go. Admins only and tea inventory granted. So first of all it actually stopped me. All right, that's good. And access granted. I was expecting that there will be an error, but it didn't came. It might come at some places. So that is okay that it didn't came, but I was expecting, to be honest, I was expecting an error in this one, but that's okay. I'll tell you the reason why. It happens sometimes. Now sometimes when you actually run these things, you actually have to explicitly return something. In all the cases. In this case we are not returning anything. That's okay. I don't know if in the recent version of Python they have changed it. In most of the case. In all of the all cases, if you have switch statement, you have to have to return something. An explicit return is required in Python. So just for the safety you can just go ahead and say return and you can simply return none, which is also a default return. This will make your program foolproof and in most of the cases you're going to see this, we didn't got it probably my python is Most updated I was expecting an error to be honest but python sometimes updates so this will still run this and you got to learn something new this is again I would say this is very optional line you will see them in some of the older code bases now I can say that but always keep in mind writing this explicitly is never going to hurt you especially if you are building decorators this is something that we always use to take care I'll probably not take care of them in the future if it works just like that but I'll still study more on this and that's how we work we always study all of us we continuously learn about the things that happens in the language if I happen to find out something new and interesting I just share that on the YouTube as well as well as on the udemy courses that is it for this video. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "07 Build an Authorization decorator.vtt",
      "originalPath": "genai-cohort/python/07 Chapter Subtitles/07 Build an Authorization decorator.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.012057809,
      -0.011727663,
      0.013495407,
      -0.06633654,
      0.0017273886,
      -0.016741961,
      0.0008020137,
      0.031969495,
      0.006419544,
      -0.014098235,
      -0.018698992,
      -0.010065801,
      -0.003955158,
      0.03246602,
      0.13115007,
      0.00045801845,
      -0.009121393,
      -0.00960122,
      -0.013065888,
      -0.011234018,
      -0.004477332,
      0.01315444,
      0.0040326826,
      -0.012984452,
      0.005888462,
      -0.013139477,
      0.015952192,
      0.015553897,
      0.022767417,
      -0.03613961,
      -0.024423182,
      0.023807038,
      0.009887238,
      0.041486632,
      0.00076155906,
      0.0054093464,
      0.0034480502,
      0.00966788,
      -0.0030697568,
      0.003939573,
      -0.01943045,
      0.007315699,
      0.016500205,
      0.0043510464,
      0.016955929,
      -0.013519012,
      -0.010359088,
      -0.018415933,
      -0.0019663926,
      0.028452778,
      -0.0039700153,
      -0.0032008635,
      -0.014261704,
      -0.18674769,
      0.012780465,
      0.012468944,
      -0.012222781,
      0.007441059,
      0.011493865,
      0.0067465776,
      -0.017984446,
      0.020083522,
      -0.014649515,
      -0.023466228,
      0.010005928,
      -0.01940066,
      0.01700938,
      -0.020082274,
      -0.00846023,
      -0.01976688,
      0.05270668,
      0.017844178,
      -0.02181332,
      -0.022774193,
      -0.007828503,
      -0.017019507,
      0.010789046,
      -0.017401434,
      -0.00617619,
      0.009350601,
      0.018353892,
      -0.015374092,
      0.000729717,
      -0.014393478,
      0.007921129,
      -0.0015268141,
      -0.010865075,
      -0.023091713,
      0.007445815,
      -0.0070514986,
      -0.019480323,
      0.018909775,
      -0.0043713134,
      -0.002158866,
      -0.014125504,
      0.011051663,
      -0.020605562,
      0.014333066,
      -0.013223071,
      0.0059173685,
      -0.01812935,
      -0.0011775579,
      -0.00015307765,
      -0.005871146,
      -0.00026975712,
      0.0111908605,
      0.0017080496,
      0.0007366399,
      0.0033273431,
      0.016173605,
      -0.010699407,
      -0.004947359,
      -0.011710417,
      0.016166274,
      0.013678008,
      -0.16637382,
      0.021595528,
      -0.016836885,
      0.0031246594,
      0.015594786,
      0.0031920434,
      0.028753879,
      0.037159257,
      0.012384524,
      -0.03329355,
      0.016165758,
      -0.0064537,
      0.018689126,
      0.0041957763,
      -0.007995579,
      -0.033747707,
      -0.019246964,
      0.027556887,
      0.008349254,
      -0.02221833,
      0.02616183,
      -0.013423533,
      0.006896173,
      -0.008631874,
      -0.000059707563,
      -0.01343532,
      0.017237201,
      -0.008332672,
      0.024447957,
      0.027343066,
      -0.0024303154,
      -0.006040009,
      0.0040563345,
      -0.019133268,
      -0.021265415,
      0.0013944778,
      -0.038279198,
      0.014435395,
      -0.004149825,
      0.027833357,
      -0.025823643,
      0.005521561,
      0.015911601,
      0.002408162,
      -0.025864523,
      0.002149124,
      0.00024407942,
      -0.000914464,
      -0.01663085,
      -0.007830289,
      -0.017659673,
      -0.006298767,
      0.007945352,
      0.006535534,
      0.025868088,
      -0.01576899,
      -0.0316773,
      -0.010850156,
      0.006432026,
      -0.0038207122,
      0.0052963733,
      -0.004065048,
      0.0038426449,
      0.010057315,
      -0.0092474185,
      -0.010583319,
      0.0006155863,
      0.005365029,
      0.0059946734,
      0.006625877,
      -0.0021815663,
      -0.018069819,
      0.0015254118,
      0.013018911,
      -0.0066628596,
      0.0058540474,
      0.016356463,
      0.0072777737,
      0.017878324,
      0.0030352483,
      -0.01637045,
      0.00275776,
      -0.0019842754,
      -0.008865891,
      0.0012186888,
      0.021745648,
      0.00789642,
      -0.0041823117,
      -0.015905125,
      0.020868475,
      -0.012314337,
      0.02393657,
      -0.012661955,
      0.012069025,
      0.010500187,
      -0.011171085,
      -0.00777559,
      -0.0032392559,
      -0.004463251,
      0.0029323653,
      -0.0090425955,
      0.021369798,
      -0.011181787,
      -0.0013909527,
      0.005695543,
      0.008057414,
      0.020186909,
      0.005722928,
      0.010451905,
      0.003207091,
      -0.0088519305,
      0.015693372,
      0.006357562,
      -0.004458542,
      0.024667125,
      0.027804168,
      -0.005007055,
      -0.02525157,
      -0.015290195,
      0.0034557579,
      0.013555936,
      0.0045058755,
      0.025236566,
      0.016222613,
      0.015368136,
      -0.0053225933,
      -0.010866244,
      -0.024903482,
      0.013669777,
      -0.00018471174,
      0.00010114435,
      -0.01569485,
      -0.013996713,
      0.004323744,
      -0.011264594,
      -0.015845912,
      -0.0003176928,
      0.017126594,
      -0.026268868,
      0.008907845,
      -0.018059788,
      -0.040729288,
      0.005846496,
      -0.013535092,
      0.0035880962,
      -0.003259281,
      -0.0027044083,
      -0.01767668,
      0.0027835052,
      0.023446504,
      -0.006559517,
      -0.01195128,
      0.016145483,
      -0.023428392,
      0.011522039,
      0.006583516,
      0.0013064366,
      0.00326912,
      -0.005143685,
      -0.029929671,
      0.024563018,
      -0.104519024,
      0.03843606,
      0.009303319,
      -0.016457941,
      0.008386494,
      0.030524336,
      -0.026466412,
      -0.0026168907,
      -0.007197265,
      0.017773231,
      0.000040770083,
      -0.0061168256,
      0.03646348,
      -0.014311226,
      -0.028863415,
      -0.010170227,
      0.013169787,
      0.0024731618,
      0.007877523,
      -0.011075736,
      0.010710945,
      -0.0023696981,
      -0.02144915,
      -0.006288572,
      0.014755191,
      0.021608245,
      -0.01145311,
      0.034349304,
      0.012482258,
      0.010899471,
      -0.001466337,
      0.02547776,
      -0.011866916,
      -0.0048236162,
      0.0002873404,
      0.009899386,
      -0.00557064,
      -0.0024263437,
      -0.0037652927,
      -0.010840842,
      0.0069447854,
      -0.011516159,
      0.005918586,
      0.02691969,
      0.0050184494,
      0.0059558256,
      -0.01452006,
      0.0077154404,
      -0.019165711,
      -0.011063986,
      -0.0096450215,
      0.007248352,
      0.00538339,
      -0.018176807,
      0.008593234,
      0.019171594,
      0.0068660523,
      -0.0051323804,
      0.0027279651,
      0.0028325252,
      0.0075129326,
      0.0050156903,
      0.026652437,
      -0.013598826,
      0.0056164498,
      0.007615121,
      0.017256536,
      -0.02331652,
      -0.035753082,
      0.0024824757,
      0.018813977,
      -0.00327801,
      0.00041187092,
      -0.030813282,
      0.028027948,
      0.0010339756,
      0.023067132,
      -0.029462712,
      -0.015134964,
      0.03131102,
      0.003910028,
      -0.021068675,
      -0.0028735125,
      0.02158024,
      0.00014939588,
      0.010635029,
      -0.00068807846,
      0.0036242616,
      0.023116508,
      -0.023085326,
      0.024662413,
      0.010695679,
      0.009736655,
      0.0031529756,
      -0.022967959,
      0.009534995,
      -0.0055255243,
      -0.04433156,
      0.013505317,
      0.016042497,
      -0.017023103,
      -0.0028540539,
      -0.019781513,
      0.0051852195,
      0.010082194,
      0.0065371324,
      -0.040647894,
      -0.01616602,
      -0.0045198537,
      -0.034458004,
      0.0066139647,
      -0.002216028,
      -0.023484902,
      -0.018694531,
      -0.017184764,
      0.008995294,
      -0.009320879,
      0.00013320913,
      0.015627338,
      -0.006285162,
      0.0038975056,
      -0.0044878656,
      -0.005487924,
      0.016211577,
      -0.004621437,
      0.024008563,
      -0.015494763,
      -0.00014298211,
      -0.0067183296,
      -0.010116604,
      -0.02477136,
      0.004077686,
      -0.015309699,
      -0.009995383,
      -0.0077001764,
      -0.013603544,
      0.02870277,
      0.018240234,
      -0.00835044,
      0.006231877,
      0.003916385,
      -0.0007767251,
      0.025570842,
      0.004187823,
      0.01652775,
      0.011866208,
      -0.011697974,
      0.0053089466,
      0.004309903,
      -0.004451741,
      -0.020350834,
      -0.007006766,
      -0.015885202,
      0.001546479,
      -0.009031933,
      0.004207881,
      0.009791054,
      0.0016415265,
      -0.023605978,
      -0.025004031,
      0.0026334838,
      0.003956492,
      -0.026516777,
      0.0026589949,
      0.02550464,
      0.009386447,
      0.0002162727,
      -0.006439388,
      -0.0056736385,
      -0.0047108587,
      -0.016958605,
      -0.020855201,
      -0.036141187,
      0.0051173884,
      0.026993416,
      -0.0010310087,
      0.027110036,
      -0.020561554,
      0.033105977,
      0.030767946,
      0.007862263,
      0.0018031404,
      -0.015594477,
      0.0014884333,
      -0.0058530057,
      -0.022184549,
      0.010784354,
      0.006077142,
      -0.028267233,
      0.016741805,
      -0.0037150907,
      -0.015046857,
      0.00998857,
      0.025940433,
      0.0032057755,
      0.011101044,
      -0.030271849,
      0.023572808,
      -0.004247846,
      0.016247783,
      -0.0030958399,
      -0.013595242,
      -0.02389743,
      0.012295666,
      0.03570397,
      -0.0051149894,
      -0.006691925,
      -0.014165555,
      0.007804662,
      0.01968795,
      -0.010164501,
      0.022116547,
      0.0018637981,
      0.0062436266,
      0.0144885,
      0.041114792,
      0.0030011553,
      0.0035144368,
      -0.03205964,
      -0.013619487,
      -0.0038048038,
      -0.011836993,
      -0.007816795,
      -0.016981207,
      0.02476476,
      -0.0050180224,
      -0.02332073,
      0.0067659803,
      0.010685617,
      -0.005587872,
      -0.007162481,
      0.0074237557,
      -0.010600055,
      0.0009446716,
      -0.03582285,
      -0.018679202,
      0.014370328,
      0.01646992,
      -0.009648264,
      0.013321389,
      0.017287418,
      -0.0070568216,
      -0.0012719806,
      0.00063195603,
      0.016367713,
      0.0101407,
      0.031168293,
      0.005022615,
      -0.01744422,
      0.0088776,
      0.022134967,
      0.021951701,
      -0.011141461,
      -0.013738271,
      -0.022305192,
      0.025633981,
      -0.01712464,
      -0.0023257218,
      -0.009739296,
      -0.0041149477,
      0.0151352035,
      0.017277872,
      -0.0017772594,
      0.007817353,
      0.007840902,
      -0.024023354,
      -0.0007547478,
      -0.015996754,
      -0.0071049538,
      -0.14006329,
      -0.014239538,
      -0.017329203,
      -0.012955449,
      -0.018775187,
      0.003360248,
      -0.0035195986,
      -0.0008870658,
      0.011915625,
      0.0138633,
      0.021654502,
      0.0061919005,
      -0.014435889,
      -0.001847278,
      -0.0049480204,
      -0.013544477,
      0.020072572,
      0.0087655755,
      0.022589162,
      -0.012360766,
      0.007857057,
      -0.011412735,
      0.0085208425,
      -0.0061117224,
      -0.0026560824,
      -0.01970885,
      0.0024073182,
      0.006689107,
      -0.0060535907,
      0.0025242674,
      -0.02515451,
      -0.010064613,
      -0.007634389,
      -0.0051866863,
      0.016769268,
      -0.009518727,
      -0.021686945,
      -0.011601742,
      0.0075167357,
      0.013498724,
      -0.017051596,
      -0.010955976,
      0.03254296,
      0.006359663,
      -0.018400114,
      0.037042435,
      0.018528262,
      -0.01622952,
      -0.005465956,
      0.024997568,
      -0.032552782,
      -0.018595664,
      -0.0023671184,
      -0.02549676,
      -0.03400717,
      0.0067929938,
      0.007136831,
      -0.016714238,
      -0.012307649,
      -0.024859922,
      -0.00052828644,
      0.0045473827,
      0.0049073664,
      0.018119888,
      -0.0022538907,
      0.00007180303,
      0.010372574,
      0.0013459435,
      -0.0026706788,
      0.0052558077,
      -0.013254921,
      0.0045909677,
      -0.015671337,
      0.003637102,
      0.02100406,
      0.010084729,
      -0.022524983,
      -0.013585818,
      -0.003605815,
      -0.010821553,
      -0.023160549,
      -0.012796466,
      -0.057927195,
      -0.014745261,
      0.0057497034,
      -0.0148126045,
      -0.0046563386,
      0.01666117,
      -0.008127212,
      0.013237159,
      0.00076802494,
      -0.0039266953,
      -0.019315088,
      -0.0021268788,
      0.006727324,
      -0.006984994,
      -0.022657834,
      -0.002604031,
      0.01566574,
      -0.0030267292,
      -0.017190695,
      -0.005525344,
      -0.0071422406,
      -0.0052379444,
      -0.014529471,
      -0.020229843,
      0.015249983,
      0.009303604,
      -0.022393424,
      -0.003655438,
      0.001676379,
      0.011268878,
      0.006864578,
      -0.14847782,
      -0.018425323,
      0.0053370055,
      0.015685782,
      0.0006836811,
      0.019607408,
      -0.0026164297,
      -0.015265825,
      0.008261361,
      -0.00029947364,
      0.00821806,
      0.0005230896,
      0.0024600013,
      -0.0012848001,
      0.014002588,
      0.13106598,
      -0.00532926,
      0.0021869342,
      -0.010638527,
      -0.0038906354,
      -0.011945949,
      -0.003474928,
      -0.028264545,
      0.019709842,
      0.008998614,
      -0.020716676,
      -0.0059251585,
      -0.032830037,
      0.010469241,
      0.005712118,
      -0.008835129,
      -0.02595946,
      0.000717926,
      0.0034037398,
      0.0141618,
      -0.016511792,
      -0.001212048,
      0.018528856,
      -0.019871358,
      -0.0059977807,
      0.00016068922,
      0.0029691458,
      -0.00069742417,
      -0.0038291123,
      0.0105098095,
      0.0061780917,
      0.008157497,
      -0.022362428,
      0.009323098,
      0.019319644,
      -0.032652233,
      -0.05297114,
      0.0026300321,
      -0.008619535,
      -0.011299751,
      0.016818378,
      0.016164655,
      0.007588347,
      0.000867976,
      0.019917497,
      0.0028124943,
      -0.025550129,
      -0.010314972,
      -0.010416246,
      0.012608049,
      -0.014672811,
      0.0068007577,
      0.020498674,
      0.022119442,
      -0.020392163,
      0.007858814,
      0.017655581,
      -0.0015792288,
      0.014021774,
      -0.009950829,
      -0.009605383,
      -0.006565076,
      0.012213501,
      0.0022557394,
      0.0058831456,
      0.018651264,
      -0.016042527,
      -0.009512436,
      -0.01725353,
      0.0007811734,
      0.0014714976,
      -0.011372112,
      0.004942965,
      -0.005565784,
      0.0051152236,
      -0.0087487735,
      0.01012704,
      -0.013231113,
      0.027444482,
      -0.007277073,
      0.005369345,
      -0.008045683,
      -0.009416861,
      0.021947425,
      0.0022679511,
      0.0032219193,
      -0.011046461,
      0.0025577608,
      -0.02758681,
      0.015196357,
      0.008517243,
      0.014018695,
      -0.00045189363,
      -0.0065258653,
      -0.0029330787
    ]
  },
  {
    "id": "genai_cohort_python_01_What_are_comprehensions_in_python_vtt",
    "content": "Hey there everyone and welcome to the Python course on Udemy. So in this video or in this section, we are starting comprehensions in Python. Now here's a two very interesting thing about comprehensions. First of all, almost everything that we are going to do with the comprehensions can be done with the loops as well. Comprehensions are just a stylized way of writing Python code. So if we can do all of these things, why we are using comprehensions because sometimes they make our life little easier, they are a shorter way of writing the code and sometimes they feel like writing just English statement and one statement can do the whole job. Yes, it can be done with the loops as well, but this is more stylized way so more people in the production actually uses it. And if you really want to master the comprehensions in Python, you have to Var this section, you have to go through with this. I have made sure that I keep the videos bite sized so that you can actually learn and focus on just one task or one comprehension at the one time. There are multiple of them which we are going to talk about then. The second most important part about the comprehension is that people don't like it in the very first go. There are only handful of people who actually appreciate the importance and the syntax of comprehensions in the first go. Most of people who want to learn Python, they just learn till the loops and functions and say I want to skip the comprehensions. Not really. For me it's little difficult. I agree it is little difficult, but you have to go through with this. This is really important part and you're going to see so many production code with the comprehension. But the most important question, what is comprehension? So for this we will do this entire video with just the comprehensions. I'm going to write some keywords will help you to understand this and all the syntax. And from the later on video, the next video onwards, we are going to study them one by one. So what are comprehensions? A very good question that you have asked since you are in this section. So comprehensions are a way of, are a concise way of creating lists, sets, dictionaries or generators in Python using a single line of code. Your entire focus should be on using a single line of code. So yes, just like the loops, we don't keep on creating this, we just write a simple one line and it can do a lot of logical things for you as well. So the big question that we have is where, they, where are they used? I'll write that patiently where they are used in real Life. And yes, that's a good question. So where they are used in the real life, are they even used in the real life? And the answer is yes, very much. They are used quite a lot. The most common place that where you're going to see is through filtering the items. So filter item. This is where you're going to see them being used. What items you want to filter. Maybe you want to pick all the hot teas from a menu. Maybe you want to pick all the iced T from the menu. So in that filtering you can do the job in just one line and you can also see them in transforming some of the objects as well. So transform what kind of transforming the item? You might want to say I want to convert all the pricing from INR to USD. I can do that all in one line using the comprehensions. There are more things. Maybe I want to create a new, create a new collection. I can do that in variety of ways, but maybe I want to map the tea names to the pricing. So I want to make a fresh collection out of it. So in that case, yes, comprehensions are super useful. And another thing is sometimes you want to flatten nested structure. So maybe there is you want to extract the ingredients out of a T recipe. It's nested quite a lot in the objects and dictionaries and key value pairs. So if you want to flatten a nested structure they can be used. So again, these are some of the common out of top of the head examples that I could have figured out. But I'm pretty sure there are hundreds of other. But this gives you a clear picture that yes, actually if I go ahead and use them in the real life they will actually make sense. So look at this. We have drawn a pretty good diagram of them as well. So this is the most common one. So if they have this one and we can do the same task with the loops as well, what purpose they might serve do they serve? And that's also a good question that if we know them like this, what purpose they actually serve? The most important purpose, that you're going to see it everywhere. It's actually a cleaner code. I would not say easiest of the code to understand, but comparatively to the loops and other things it's rather cleaner and in some of the cases actually faster. So faster execution is also the way you use less memory. You can do all of the things. It's a functional style code as well. But I would give these two things most of the important parts. First of all It's a cleaner code. Not the easiest one to understand, but it's cleaner one. Once you get in the habit, you'll realize, this one is actually much better. And final and last thing that I would like to discuss is, the types of comprehensions. What are the type of comprehensions that wrote a bad spelling? So what are the types of, comprehensions that we have? Great question you might have asked. Actually we have a few of them. Some of them you have already seen not the comprehensions but the data structure types. So I'll just list them. The first one is the list. The second one that we have is set. Remember we saw the set. Yeah, we discussed the math part of it as well. The next one is dictionary and the last one is actually generator. You might be asking what is this generator? We haven't studied them. Yes, you are correct. It's not a data type. It's a whole new structure in itself. We'll study about them. So the first one is list. The second one is set. The third one is dictionary. And the last one is generator, which is very interesting. Again, we'll spend some good amount of time in the generator as well. First we'll see a brief look in here, then we'll go through with them in the detail. So in the next video we'll directly pick up the list comprehension and we'll see that, okay, this is how the list comprehension looks like. The basic structure will first study the theory part of it and then we'll go into the code part of it. It will be fun. Don't you worry. You will get enough of, the confidence that. Okay, now I can write this within just one example, you'll find immense confidence that I can write the comprehensions. That is it. Let's catch up quickly in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 What are comprehensions in python.vtt",
      "originalPath": "genai-cohort/python/06 Chapter Subtitles/01 What are comprehensions in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.011567416,
      0.0022110476,
      0.039420232,
      -0.04766637,
      -0.0074851387,
      0.007993941,
      0.013346544,
      0.026741534,
      0.0062899706,
      0.039348785,
      -0.014367935,
      0.0056539644,
      0.011560822,
      0.037854735,
      0.11094011,
      -0.0058051683,
      -0.017804354,
      -0.022134615,
      0.016582407,
      -0.019222045,
      0.022483027,
      0.009581212,
      -0.008383448,
      -0.0043623727,
      -0.006445449,
      -0.0017121346,
      0.0018957042,
      -0.0011669385,
      0.018184336,
      -0.026308738,
      -0.020289795,
      0.016710369,
      0.003348949,
      0.019513238,
      0.005766106,
      0.004160602,
      0.00042214332,
      -0.014312528,
      -0.028864607,
      0.0030794707,
      -0.027145179,
      -0.003472905,
      -0.006582526,
      0.0034430616,
      0.022758827,
      -0.033654545,
      -0.006999287,
      -0.020381646,
      -0.008414243,
      0.031655394,
      0.0013896816,
      0.010692526,
      -0.007949379,
      -0.18409362,
      0.018285558,
      0.0030129054,
      -0.0023850515,
      0.0073737614,
      -0.006879958,
      0.00774769,
      -0.012845228,
      0.014809229,
      -0.031983282,
      -0.008261594,
      -0.042516567,
      -0.01527051,
      0.017939141,
      -0.0057414784,
      -0.006996341,
      0.009369473,
      0.021289704,
      0.004730966,
      -0.0049043773,
      -0.009903114,
      -0.018078784,
      -0.017955046,
      0.0035778186,
      0.0005783167,
      -0.01699843,
      0.016596768,
      -0.007697493,
      -0.0052435608,
      -0.020660238,
      0.025306385,
      0.00845254,
      0.0029143246,
      -0.02481126,
      -0.025475478,
      -0.0021774152,
      0.0030344587,
      -0.011255329,
      0.00735799,
      -0.024208877,
      0.016165104,
      -0.00444705,
      -0.021678517,
      -0.01105423,
      0.008005912,
      -0.004548871,
      0.0037257127,
      0.016006827,
      -0.012432192,
      -0.013804086,
      -0.010086093,
      0.0010068207,
      0.012221639,
      -0.0019405077,
      -0.023533331,
      -0.021616906,
      0.00006924415,
      -0.002046829,
      0.0103662815,
      -0.004421914,
      0.02647154,
      0.004752006,
      -0.17756441,
      0.007951163,
      0.00088667613,
      -0.032991428,
      0.02186515,
      -0.019114638,
      -0.004809008,
      0.00043321747,
      0.00521836,
      -0.01605925,
      0.01896272,
      -0.0068582,
      0.016895251,
      -0.011905495,
      -0.009996232,
      -0.021778325,
      -0.012122266,
      0.0049475054,
      0.022764709,
      0.0039945897,
      0.0076801954,
      -0.009520675,
      -0.00956996,
      -0.02118082,
      0.0004930921,
      -0.02621117,
      0.02139556,
      -0.0029787177,
      0.033400446,
      0.014574204,
      0.0032711488,
      -0.030108167,
      0.015369408,
      -0.030856313,
      -0.010362972,
      0.005745252,
      -0.008292475,
      -0.011098425,
      -0.003307917,
      0.02253176,
      -0.02724477,
      -0.02039997,
      0.0183879,
      -0.012549434,
      -0.01442135,
      -0.009091404,
      -0.0027449236,
      0.0027092933,
      0.0009124141,
      0.0035760563,
      0.0052907113,
      -0.018371629,
      0.00055800006,
      0.014422458,
      0.0038737638,
      0.0076718125,
      -0.018983515,
      0.016695658,
      -0.013694032,
      -0.0032571068,
      -0.0060547395,
      0.009972779,
      0.0025786464,
      0.0010584478,
      -0.016289389,
      0.013397196,
      0.0017484393,
      -0.002920766,
      0.0076029142,
      -0.003023221,
      0.007302862,
      -0.009453786,
      0.0030830144,
      0.009221182,
      0.003920231,
      -0.004688787,
      0.007858143,
      0.049558777,
      0.017316401,
      -0.0132325385,
      -0.00052227726,
      0.021465315,
      0.011512596,
      0.0020411166,
      0.024411136,
      0.023500342,
      -0.007758413,
      -0.00072415406,
      -0.02222385,
      0.025442276,
      -0.003955767,
      0.015865244,
      -0.0093295835,
      0.030697145,
      0.0007144615,
      -0.008452546,
      -0.012535792,
      0.005401028,
      -0.005251453,
      0.024731982,
      0.003327708,
      0.0130693,
      0.008930244,
      -0.010525416,
      -0.0103231305,
      -0.0005763224,
      0.01104375,
      0.01374604,
      0.0086383475,
      -0.0096728355,
      -0.012052645,
      0.01932915,
      0.0016858762,
      0.0053654313,
      0.009791582,
      0.0066019082,
      -0.0024942898,
      -0.015673656,
      -0.007406629,
      -0.007831572,
      0.0012967262,
      -0.013050232,
      0.014602407,
      0.038850076,
      0.0000047903172,
      0.0007590414,
      0.0046550627,
      0.008423249,
      0.02326124,
      0.030529708,
      0.004940259,
      0.0007003266,
      -0.003527052,
      0.00083700917,
      -0.018132104,
      -0.014521593,
      -0.008213699,
      -0.008233325,
      -0.014686922,
      -0.012613079,
      -0.008139582,
      -0.0338612,
      -0.0066984505,
      0.018115105,
      -0.024591967,
      -0.0064206393,
      -0.030678302,
      -0.024093341,
      -0.0072694463,
      0.018373081,
      0.014138688,
      0.012976348,
      0.027581718,
      0.01106397,
      0.009737025,
      0.0113729965,
      0.007830786,
      0.013409952,
      0.012010359,
      -0.020284152,
      -0.0011472789,
      -0.10585346,
      0.008544786,
      0.030464146,
      -0.017333094,
      0.0022877208,
      0.0061793984,
      -0.02528683,
      0.034340072,
      0.021735191,
      0.014548907,
      0.014332368,
      0.0005014647,
      0.043560646,
      -0.011263519,
      -0.011287431,
      0.0039041028,
      -0.0084014395,
      -0.035789054,
      0.028734671,
      -0.0028686544,
      0.0033033711,
      0.0022470811,
      -0.008469417,
      -0.009380632,
      -0.0018732428,
      -0.007602093,
      -0.015961025,
      0.023173405,
      0.0151197985,
      0.003736409,
      0.0033259746,
      0.029054044,
      0.003263205,
      0.0066327583,
      -0.010136558,
      0.00686405,
      0.0013599063,
      0.00848033,
      -0.01743403,
      -0.006787228,
      0.03138121,
      -0.0077397837,
      0.02089109,
      0.03025733,
      0.00089906226,
      -0.0037146397,
      -0.013394741,
      0.015225506,
      -0.026747512,
      -0.0046916534,
      -0.003236907,
      -0.004659731,
      0.017110022,
      -0.004992179,
      0.0077467356,
      -0.0025680913,
      -0.006925669,
      0.009895238,
      0.0060834046,
      0.0029661988,
      -0.014060911,
      -0.0018022954,
      0.001654153,
      -0.026967378,
      0.004758912,
      0.009077397,
      0.004824583,
      -0.0075241234,
      0.008969992,
      0.008254146,
      -0.00772766,
      -0.010368312,
      -0.0046900427,
      0.0037588684,
      0.0023966127,
      0.0030526281,
      0.012429483,
      -0.012396385,
      -0.028667893,
      0.017741134,
      0.009824566,
      -0.0052582477,
      0.018929366,
      0.0029810069,
      0.0037307679,
      -0.002552387,
      0.0017019653,
      -0.000343848,
      0.01248854,
      -0.0030604508,
      0.016437044,
      0.021347284,
      -0.04210181,
      0.00801099,
      -0.034540024,
      -0.004274157,
      0.021762187,
      -0.020410338,
      -0.0073936586,
      0.012695935,
      -0.022687314,
      0.00016461448,
      -0.018927174,
      0.0067699356,
      -0.024870656,
      0.012885183,
      -0.021995176,
      -0.024135737,
      -0.0054676756,
      -0.009604534,
      0.000962496,
      0.013766317,
      -0.024750836,
      -0.0059754634,
      0.009733435,
      0.0061613903,
      0.014270573,
      0.0028384526,
      0.018341126,
      -0.017638965,
      0.001501766,
      -0.015366564,
      0.0024748289,
      0.01908835,
      -0.0073553133,
      -0.0082706,
      -0.00540244,
      -0.017189333,
      -0.019321268,
      -0.028803648,
      -0.021115748,
      0.014756075,
      -0.0009682557,
      -0.012902883,
      -0.023164663,
      -0.004352014,
      0.02905235,
      0.02267808,
      0.019382484,
      0.009053792,
      -0.014999025,
      0.0052117985,
      0.028918164,
      0.02037877,
      0.004421143,
      0.0155007355,
      -0.007414652,
      -0.01835786,
      0.00029863574,
      -0.022442086,
      -0.027384326,
      -0.020983208,
      -0.013079818,
      -0.008233638,
      -0.0045206677,
      -0.0009687219,
      0.004102546,
      -0.0056147208,
      -0.034562547,
      -0.014466107,
      0.005904607,
      -0.00088408793,
      -0.009435472,
      -0.0058842306,
      0.031069072,
      0.0019447632,
      0.007606931,
      0.013812984,
      -0.012000527,
      -0.012849841,
      -0.012050817,
      0.011303558,
      -0.032992795,
      0.011572852,
      0.027734753,
      0.026990164,
      0.0061837016,
      0.015704516,
      0.024604479,
      0.01529937,
      0.0013822662,
      0.0018604044,
      -0.01108378,
      0.008562808,
      -0.0043161316,
      0.01339087,
      0.022372281,
      -0.0003271105,
      -0.024790885,
      -0.010360507,
      -0.017707853,
      0.014503688,
      -0.00005262448,
      0.0050924886,
      0.009657959,
      0.012896858,
      0.0028280008,
      0.01589949,
      0.0011409938,
      0.0011021697,
      -0.00086868205,
      -0.01636521,
      0.0067432458,
      -0.008781151,
      0.0039482205,
      -0.012983736,
      -0.007377895,
      -0.025202269,
      0.0034593025,
      0.014227526,
      0.018159011,
      0.016775882,
      -0.0046608653,
      0.004548724,
      0.00978932,
      0.026001632,
      0.0044310456,
      -0.012994952,
      -0.0053717326,
      0.005138431,
      0.009173719,
      -0.013515558,
      -0.003993851,
      0.0032554567,
      0.008924698,
      0.012466737,
      0.0072418563,
      -0.005182429,
      0.0014424375,
      -0.00068143103,
      -0.007877892,
      -0.00467403,
      -0.015789228,
      0.019636558,
      -0.008775119,
      -0.008729894,
      0.011422678,
      0.012099179,
      -0.020467328,
      0.01968155,
      -0.0071945083,
      -0.018047618,
      -0.012656724,
      0.0066843904,
      -0.020487526,
      0.005084207,
      0.013266107,
      -0.0028066374,
      -0.018830523,
      -0.008387286,
      -0.016829897,
      0.015434204,
      -0.016634304,
      -0.0093210945,
      -0.008941622,
      0.020440483,
      0.012122573,
      -0.0035638195,
      0.009652273,
      -0.0021802268,
      0.011167771,
      0.0069080433,
      -0.008760598,
      0.020685298,
      -0.0024255344,
      -0.013991162,
      -0.009114604,
      -0.029601581,
      -0.0013891427,
      -0.11221504,
      -0.0023776905,
      -0.008094056,
      0.0092854835,
      -0.018856864,
      -0.0045463177,
      -0.007353431,
      -0.0052053435,
      -0.009455131,
      0.003760261,
      0.02729076,
      -0.024478713,
      0.003019617,
      -0.01442367,
      0.0068704206,
      -0.023197828,
      0.02071733,
      0.01429977,
      0.010806335,
      -0.025326218,
      -0.0011705034,
      0.012823074,
      -0.015449835,
      0.002795698,
      -0.009330528,
      -0.006318748,
      0.021265252,
      0.0009354624,
      -0.00040753803,
      -0.008824963,
      -0.029083885,
      -0.0005739311,
      -0.0063454146,
      0.013125315,
      -0.0014763698,
      0.0038613686,
      -0.018707776,
      0.004695592,
      0.026623879,
      -0.002183435,
      -0.013212861,
      0.0030779329,
      0.013687165,
      0.015666183,
      0.0060192826,
      0.019759469,
      0.044239722,
      -0.017432703,
      -0.0068926644,
      0.039882,
      -0.026707089,
      -0.033903897,
      0.008550542,
      -0.016928619,
      -0.00729117,
      -0.0041951323,
      0.01811842,
      -0.011176049,
      0.0069037173,
      -0.010813901,
      0.008273206,
      0.010000835,
      0.01816205,
      0.0352067,
      0.011642258,
      -0.016518293,
      0.030071247,
      0.002483383,
      0.022582041,
      -0.0075902287,
      0.0114128515,
      0.006587662,
      0.00026949035,
      0.026826607,
      0.010928589,
      0.004556938,
      0.012979183,
      -0.0015384443,
      -0.008751754,
      0.0026028312,
      -0.027518606,
      0.011466382,
      -0.047733296,
      -0.025897717,
      0.02912511,
      0.012873364,
      -0.002073127,
      0.0141118225,
      -0.0036647492,
      0.0057010395,
      0.00905121,
      -0.012674719,
      -0.031196747,
      0.0003520692,
      0.022132028,
      0.02150037,
      -0.026185716,
      0.022085069,
      0.012168501,
      -0.013059754,
      -0.022442233,
      0.010375641,
      -0.004843705,
      -0.0052609867,
      0.0010016474,
      -0.023227993,
      0.025306666,
      0.022582255,
      -0.015431116,
      0.0024246222,
      -0.00630504,
      0.014999805,
      -0.00493647,
      -0.14593928,
      -0.034577962,
      0.011361041,
      0.007761279,
      -0.0153763285,
      0.0010639477,
      -0.014544491,
      -0.03298917,
      0.013609514,
      -0.007828709,
      0.0084226485,
      -0.021564515,
      -0.018439662,
      -0.02367747,
      0.037998345,
      0.14550948,
      0.0026497508,
      0.006475848,
      -0.022134038,
      0.0018928968,
      -0.01942344,
      -0.026488375,
      -0.0072624134,
      0.008955612,
      -0.0073450324,
      -0.004935119,
      0.0036637688,
      -0.018848157,
      0.003958743,
      0.0033230346,
      -0.016394094,
      -0.001995471,
      0.0051924707,
      0.023607168,
      0.003622558,
      -0.0020955068,
      -0.010070784,
      0.0068974644,
      -0.0059915055,
      0.0042636553,
      0.043043274,
      0.0025394135,
      0.009990361,
      -0.0041616308,
      -0.003351366,
      0.00018041159,
      -0.005084759,
      -0.0037583439,
      -0.010003488,
      -0.01655568,
      -0.017734267,
      -0.06902287,
      0.019311203,
      -0.0017161373,
      -0.0013644205,
      0.005244819,
      0.009231676,
      0.025883002,
      -0.0010708295,
      0.026147928,
      -0.018628754,
      0.0020867807,
      -0.009274833,
      0.011956096,
      0.007289171,
      -0.009134115,
      0.007548099,
      0.024793454,
      0.014333222,
      -0.009831704,
      0.014022781,
      0.032158274,
      0.0037841855,
      0.018489165,
      -0.006827179,
      -0.009457356,
      -0.01815369,
      0.025741367,
      0.0011753938,
      0.010099366,
      0.009819645,
      -0.010865588,
      0.008341638,
      -0.02426886,
      0.028281324,
      0.0022224141,
      0.0038323314,
      0.017979473,
      0.010262992,
      -0.014492465,
      -0.0034264917,
      -0.0043695103,
      -0.0018752028,
      0.022988768,
      0.012368509,
      0.010341277,
      0.0069344775,
      -0.012378717,
      0.024155246,
      -0.0015985335,
      -0.011415404,
      0.0029439921,
      0.0036788075,
      -0.043811362,
      0.014745934,
      -0.008784945,
      -0.0138909165,
      0.023665357,
      0.005878032,
      -0.00001568334
    ]
  },
  {
    "id": "genai_cohort_python_02_List_comprehensions_in_python_vtt",
    "content": "All right, going with the chapter one, let me take you directly on the screen. And first of all, let's go ahead and clean everything up. We don't want any files opened up or anything like that. So we'll start with the And, I can now go ahead and delete this. We don't need this. I just shadcn this file with you already. Let's create a new folder. Let's call this one as And that will be comprehensions. There we go. Now, in this, let's go ahead and start with the very first one, which is the list comprehension. So what is this list comprehension? How does it work? So the list comprehension, let's go ahead and write that, because that would be easier for me. There we go. First of all, let's understand the syntax. That's the most important part. So the syntax looks something like this. We have the square brackets. So we go ahead and put up the square brackets. Then you simply go ahead and write your expression here, whatever you want to do. I'll show you what expression and all of this means. And then you simply go ahead and put a loop. Yes, I know I told you that we will be using. We'll not be using the loop. We can do it. But actually the loop is being used. Just look at the syntax. You will get this. So for item in items, and I hope you got the syntax, items is an array. Item is an individual item of that. Rather, it would be correct to write it as iterable. Iterable. So that I can iterate over it. And then you simply write if condition. And you might be thinking, all right, all right, I was there with you, but now I'm not with you. What is all of this? That's why I say sometimes the practicals are much more easier. So expression for item in iteratable. Iterable. If condition. I know, I know, you lost me there, but let me walk you through with an example. The practical examples are much easier. Call this one as and call this one as list, compre py. All right, let's go with this. Let's just say we have a menu. Let's go with the real example. We have a menu, all right? This is your menu, which is a list in itself. And if you remember, list actually can be written in just one line. Or you can hit an enter and can write a list like this. This is much easier to read, actually. So we just have some of the masala chai, and then separated by comma, we can have another chai this one is iced lemon, T. Then we have another one which is green T or chai, whichever you want to have. Another one we have is going to be iced peach T. And we have one last one which is maybe ginger T or ginger chai, whichever you want to call it. That's totally okay. So this is our menu. This is our list. Now, I want to bring all the iced T out of it. So how can I do this? Pretty easy way. You can loop through the values and look for the character that it should have iced, in that particular T. And then I'll filter them out. But the easiest way is with the comprehension. Now let's go through with the syntax. So we have the square brackets. All right, I understand square brackets. That's easy for me. Now then I go ahead and say that, hey, this is expression for items. So what is this expression? Expression means it's not going to be. It's going to be evaluated in a moment, but it will get the value. So I'll just call this as, tea. All right, tea for a moment. We can call this simply a variable. Okay, Acceptable. Let's go ahead and call this one as for tea in menu. This is also acceptable that. All right, you are using a loop in this. The menu is a trable, which is a, list in itself. The tea is each individual item. All right, I got this part as well. And then we simply go ahead and use condition, Remember if condition. So we'll always have a if condition in this. No exception if. And I can go ahead and say iced int. What did I just did here? Remember, each of this is a string. And I can check for the characters that, hey, I want iced inside tea. So this can be done because it's a, whole iterable. Strings are also iterable. I can go ahead and look. I want this to be a part of this tea. So this whole item should have iced somewhere in it. So first. Nope, the second one. Surely it has the third one. Nope, the fourth one will have it, and the fifth one will not have it. So each there should be somewhere iced word into it, either here or here or here. So once we find it, we actually filter that. So we are looping through it. We are checking for a condition. And finally we are actually collecting this, all of this inside an expression, which is teas. And this whole thing will be collected inside the iced tea. And I'm pretty sure you're looking forward. I want to see this. I want to see the print statement of this. And you're Absolutely correct. I can just go ahead and say print. We'll change some of the variables and do investigative study as well. I'll just say iced tea and let's go ahead and print this. What do we get in return? So I'll just go ahead and close this. Open up an integrated terminal just here, and with the Python 3, I want to run single file. There we go. Notice here we have iced T, lemon T, iced peach T, and lemon T all up here. Okay, you might be having. I do have some questions. What is this? T. Can I call this one as my underscore tea? You will immediately notice an error here. The notice here, the error says my T is not defined. How can you say it is not defined? Because this variable actually comes from there. Each individual item of the tea is actually called this one here. This is the syntax part. So if I go ahead and call this as myt, I have to call my variable as myt, then it's all happy. All right, so this part is all clear. Now, this part shouldn't make much of the trouble for you. This is just any table. In this case, since we call it as list comprehension, it expects that you will provide a list, or in short array, then comes up the condition part. So this condition could be iced here, but this could also be that. Hey, if, maybe you want to check for something different. Notice here. This one is also now getting in trouble because we are calling everything as myt, so you should call this as well. So right now we are checking for iced in my tea, but I can also go ahead and check if my tea is or Mighty dot. I can use the length operator, or I can simply go ahead and say, the length. Not like that. If the length of my tea is, probably greater than, 10, again, we can just calculate that. But I want to see the result of this as well. So notice here, if I go ahead for that, all of them are actually bigger than 10, so that's great. So, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, So we should actually try for Maybe we can get some different result just to show you. So there we go. Now we have iced T and lemon T. Because these are three characters and they are definitely more than So we only get the result if we go ahead and change this sign. They should be less than So what we're going to get. And, I hope you get the power of it, all right? It's a pretty fun way of writing the code, and it's actually pretty understandable. Now let's take this one here or I'll actually go back to the previous example. That was pretty much more fun. So this one. Yeah, this one was actually much more fun. Let's go ahead and copy this and compare with the example that we have here. So notice here, this one says expression for item in iterable. Now I hope this is much easier. So this expression is actually my tea here. And then we have this for matching up. So item. This is exactly the item we have in iterable. This menu is our iterable. And the if condition. The. The whole condition part is up here. So I can just go ahead and wrap this up. So this is whole condition part. So. Told you. It looks weird at first, but once you practice this a little bit more, this will actually become easier and you will see. Yeah, this is actually much fun way of writing Python and easier as well. Again, practice is the key, but I hope I have done a good job in making sure that you understand each and every line of list comprehensions. That is it for this video. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 List comprehensions in python.vtt",
      "originalPath": "genai-cohort/python/06 Chapter Subtitles/02 List comprehensions in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0054071597,
      0.011279471,
      0.04760314,
      -0.07038285,
      -0.008414071,
      -0.003536013,
      -0.0033405514,
      0.019792188,
      -0.0095930975,
      0.022780301,
      -0.012445644,
      -0.0028434722,
      0.012577998,
      0.019915333,
      0.1126979,
      -0.006612138,
      -0.023169873,
      -0.009848793,
      0.0056305537,
      -0.028571185,
      0.007892545,
      0.007901585,
      -0.0058473977,
      -0.000111885645,
      0.000960066,
      -0.010860433,
      0.01714061,
      0.013334258,
      0.01706987,
      -0.032721505,
      -0.014458907,
      0.008121069,
      0.0013292201,
      0.006745329,
      -0.012948231,
      0.023100352,
      0.00819292,
      -0.010508722,
      -0.020755617,
      0.014602263,
      -0.015672544,
      -0.0003960014,
      -0.0059508523,
      -0.01990536,
      0.020755092,
      -0.029218582,
      -0.0042662392,
      -0.02353955,
      -0.0036396175,
      0.026252858,
      0.003367889,
      0.0026260642,
      0.0015005894,
      -0.1903553,
      0.023239112,
      0.0014494795,
      -0.0051657218,
      -0.0012713165,
      0.0041958545,
      0.009983699,
      -0.014235924,
      0.0054075234,
      -0.020086704,
      -0.0029227152,
      -0.04262675,
      -0.023463732,
      0.0289508,
      -0.0026672706,
      0.0027861937,
      -0.00009564158,
      0.015443426,
      0.014935129,
      -0.0010097378,
      -0.003643022,
      -0.022213109,
      -0.03467583,
      0.008145427,
      -0.008202422,
      -0.00051373144,
      0.018373717,
      -0.0015965955,
      -0.000013717707,
      -0.010908431,
      0.014817939,
      0.010645227,
      0.0042422195,
      -0.026755309,
      -0.021158924,
      -0.0068671266,
      -0.004788354,
      -0.027976282,
      0.017365614,
      -0.028775834,
      0.0072883167,
      -0.015850352,
      -0.00870547,
      -0.0095494045,
      0.004498013,
      -0.006977774,
      0.0003320766,
      0.015714133,
      -0.019885764,
      -0.010940969,
      -0.012057147,
      0.0056512053,
      0.015464369,
      0.009545678,
      -0.027491936,
      -0.013062461,
      -0.0023110323,
      0.0061526056,
      -0.007100861,
      0.0003759137,
      0.024902996,
      -0.0048269276,
      -0.17182466,
      0.023581738,
      0.0038928608,
      -0.02777364,
      0.009934535,
      -0.012490129,
      -0.017183948,
      -0.00039388106,
      0.025874248,
      -0.01264927,
      -0.0006896935,
      -0.0070998096,
      0.022519657,
      0.00013997804,
      -0.0082647065,
      -0.016390942,
      -0.016533086,
      0.0039260937,
      0.014745778,
      -0.009327952,
      0.0034142293,
      -0.017191388,
      0.0052368413,
      -0.035475563,
      -0.0013224721,
      -0.020781023,
      0.017218778,
      0.0041863364,
      0.030986331,
      0.028132405,
      -0.011441845,
      -0.02656055,
      0.010917704,
      -0.0072757252,
      -0.00568055,
      0.020145776,
      -0.0046463893,
      -0.015103285,
      -0.0031547914,
      0.015089864,
      -0.03218696,
      -0.010695064,
      0.017658757,
      -0.009301356,
      -0.012337027,
      0.0068846,
      0.0037725621,
      0.008934313,
      0.004296606,
      0.010487368,
      0.00003197804,
      -0.024269093,
      -0.0042483797,
      0.0047704917,
      0.009617685,
      0.012270863,
      -0.009125719,
      0.008425687,
      -0.016095262,
      -0.007897119,
      -0.013443071,
      0.0041426825,
      0.0054884385,
      0.013370633,
      -0.010152213,
      -0.009898182,
      -0.014799476,
      0.0081479065,
      0.0077714794,
      -0.0029073127,
      -0.004954262,
      -0.020975884,
      0.0110674985,
      0.0018724827,
      0.0009423281,
      0.0028766396,
      0.0031196708,
      0.035391033,
      0.020845959,
      -0.011970375,
      0.0028714305,
      0.0019745447,
      0.0013461914,
      0.0021309506,
      0.02340235,
      0.04013877,
      -0.015648741,
      -0.009734969,
      -0.01236312,
      0.028077247,
      -0.016414037,
      0.00226253,
      -0.0044044005,
      0.019339377,
      0.013397362,
      -0.010807641,
      -0.009726473,
      0.0033396578,
      -0.0012086374,
      0.024063168,
      -0.0042775893,
      0.011779457,
      0.006161368,
      -0.017875668,
      -0.009134315,
      0.004827975,
      -0.0029132492,
      0.01891212,
      0.01639058,
      0.0022755612,
      -0.005201974,
      0.021460935,
      0.0042409,
      0.0006608177,
      0.0053158402,
      0.023609195,
      -0.0027725243,
      -0.006803881,
      -0.012848921,
      -0.009494855,
      -0.005243692,
      0.0066860784,
      0.027394293,
      0.034468986,
      0.0049227155,
      0.016140332,
      0.0067296135,
      -0.002922255,
      0.006756626,
      0.04061374,
      0.0049619335,
      -0.0073439893,
      -0.007208289,
      -0.013372722,
      -0.019965883,
      -0.025771806,
      -0.01971805,
      -0.01406128,
      -0.008327802,
      -0.00027702635,
      -0.001113971,
      -0.02381017,
      -0.002610955,
      -0.0009564871,
      -0.022452043,
      -0.001257502,
      -0.017657321,
      -0.02459996,
      -0.009152295,
      0.018784383,
      0.0063385065,
      0.004502509,
      0.022662338,
      0.011757481,
      0.012934761,
      -0.003776776,
      0.008259187,
      0.00009567155,
      0.007566333,
      -0.01738817,
      0.021664156,
      -0.115183406,
      0.022747723,
      0.03541699,
      -0.009590922,
      0.016009623,
      0.008901827,
      -0.007618092,
      0.008007223,
      0.015906058,
      -0.0015867966,
      0.011298496,
      0.006811908,
      0.05168869,
      -0.023438144,
      -0.0021722994,
      0.0073376754,
      -0.00031468194,
      -0.016692849,
      0.027585639,
      -0.020308072,
      0.016957734,
      0.00034471316,
      -0.010600263,
      -0.019486114,
      0.0067615365,
      0.0035167374,
      -0.025703749,
      0.013787867,
      0.015704557,
      0.0036494397,
      -0.0030526998,
      0.025699502,
      -0.0012114766,
      0.004588253,
      -0.009472667,
      0.010345607,
      0.0058211857,
      0.015324267,
      -0.015086133,
      -0.0137663195,
      0.025726324,
      -0.0040504117,
      0.028851919,
      0.038279925,
      0.003663073,
      -0.003044523,
      -0.0067144646,
      0.006489392,
      -0.008017411,
      0.011176131,
      -0.008331198,
      0.0043244846,
      0.011708259,
      -0.008044444,
      0.003899662,
      0.011038409,
      0.0008432226,
      0.0014575993,
      0.0049476046,
      -0.00065388595,
      -0.020893235,
      -0.009311246,
      0.0050215777,
      -0.019140564,
      0.021273077,
      0.010647515,
      -0.0024821206,
      -0.013044235,
      -0.005895755,
      -0.0037287662,
      0.0072413962,
      -0.00046246115,
      -0.0031122973,
      -0.003526524,
      -0.0003045965,
      -0.0022119116,
      0.022686597,
      -0.018796328,
      -0.019492684,
      0.018526424,
      0.012287436,
      -0.0076553123,
      -0.00021522709,
      0.0032718603,
      -0.0051680785,
      0.009736734,
      -0.009202989,
      -0.0011142116,
      0.0056924424,
      -0.008128374,
      0.012777902,
      0.02047813,
      -0.036790825,
      0.015474667,
      -0.025425242,
      0.0028884914,
      0.0052698436,
      -0.020048385,
      -0.005219097,
      0.018805632,
      -0.03386978,
      0.0065444326,
      -0.020870738,
      0.012458691,
      -0.011485166,
      -0.005543377,
      -0.020104058,
      -0.019252589,
      0.0094081005,
      -0.025462748,
      -0.009403316,
      -0.010141646,
      -0.02227861,
      -0.007898731,
      0.0005410235,
      0.009129993,
      0.009198905,
      -0.0036638943,
      0.015330376,
      -0.0154956,
      -0.005092065,
      -0.00694431,
      -0.004369121,
      -0.005982725,
      -0.0021519226,
      -0.0031056025,
      -0.011570515,
      -0.007331054,
      -0.026310181,
      -0.033452395,
      -0.029927203,
      0.020579083,
      -0.0021922337,
      -0.012971553,
      -0.01085585,
      -0.009878919,
      0.021004979,
      0.025200633,
      0.014493803,
      0.014075699,
      -0.011796012,
      0.008133431,
      0.022267498,
      0.018396568,
      -0.0047884705,
      0.008260698,
      -0.01530098,
      -0.006374629,
      -0.0012628043,
      -0.020261234,
      -0.016188564,
      -0.017057842,
      -0.010983975,
      -0.007991835,
      0.0043339045,
      -0.0063730315,
      -0.0034715286,
      -0.02773623,
      -0.022022177,
      -0.023268342,
      -0.0024707215,
      0.0130506465,
      -0.003948982,
      -0.00902901,
      0.038901735,
      -0.0057461173,
      -0.0070099593,
      0.016677681,
      0.0011537336,
      -0.013619161,
      -0.008993312,
      0.0023956536,
      -0.047387112,
      0.0060024587,
      0.02952797,
      0.010729602,
      -0.0017668668,
      0.0009899661,
      0.023854587,
      0.0066827945,
      -0.0026472812,
      0.0069111264,
      -0.0065504294,
      0.0033673416,
      0.004762693,
      -0.0015737937,
      0.030956648,
      -0.0024738924,
      -0.025206866,
      -0.0141264,
      -0.009929259,
      0.003251011,
      -0.0026243394,
      0.012638607,
      0.0013795851,
      0.0179352,
      0.014451136,
      -0.0004015922,
      -0.00012735839,
      0.008151207,
      -0.005445422,
      -0.010533564,
      0.00004269483,
      -0.0034040308,
      0.0039734347,
      -0.007431975,
      -0.009813871,
      -0.02626578,
      0.0034205327,
      0.013163555,
      0.0041211536,
      0.011738492,
      0.00038933597,
      0.0053506745,
      0.018879753,
      0.018343678,
      -0.0029136853,
      0.004848859,
      -0.014786307,
      0.017259866,
      0.008723288,
      0.002887284,
      0.0038778451,
      -0.01493415,
      0.010283132,
      0.006036247,
      0.006316003,
      -0.002378282,
      -0.0059610084,
      -0.021014133,
      -0.01104562,
      -0.0057693543,
      -0.005664266,
      0.036380637,
      -0.02201439,
      -0.006943577,
      0.026154483,
      0.015250197,
      -0.018424535,
      0.012762985,
      -0.0007205626,
      -0.014095905,
      -0.0051988736,
      0.0022740513,
      0.0014043945,
      0.006050572,
      0.005515747,
      -0.00042513147,
      -0.007371841,
      -0.0028386703,
      -0.0017702172,
      0.009429131,
      -0.016253904,
      -0.011741178,
      -0.009452111,
      0.010726282,
      -0.0031486265,
      -0.00095357385,
      0.011936366,
      -0.013379403,
      0.013605858,
      0.011486592,
      0.0066660563,
      0.023218159,
      -0.007926183,
      -0.0074802143,
      -0.009585479,
      -0.02667641,
      0.005268996,
      -0.111354075,
      -0.013184228,
      0.011347119,
      0.0026183245,
      -0.015670352,
      -0.009710922,
      -0.012843297,
      -0.010271402,
      0.0051196027,
      0.0056510563,
      0.021050675,
      -0.007096772,
      0.007583905,
      -0.015261448,
      0.014174674,
      -0.027015232,
      0.03319082,
      0.01605852,
      0.019241955,
      -0.022789046,
      -0.0049535073,
      0.017607423,
      -0.014767796,
      0.0027199467,
      -0.019225776,
      -0.010810238,
      0.018194789,
      0.0068070805,
      -0.009103715,
      -0.006417696,
      -0.042740084,
      -0.0038647887,
      -0.007135309,
      0.020155352,
      -0.0024299936,
      -0.005953204,
      -0.02016383,
      -0.0140293855,
      0.03307832,
      -0.011555982,
      0.006182704,
      -0.0063639944,
      0.023612613,
      0.018326133,
      0.02144734,
      0.027721243,
      0.030503906,
      -0.008558382,
      -0.015797514,
      0.029552968,
      -0.041779023,
      -0.032674406,
      -0.0076948614,
      -0.01325082,
      -0.013469266,
      0.008949003,
      0.015701178,
      -0.011487867,
      -0.0032173202,
      -0.01594711,
      0.0059178104,
      -0.00023089137,
      0.023144964,
      0.033819944,
      0.0070452965,
      -0.002143673,
      0.02750272,
      0.010238435,
      0.0142956525,
      -0.008683707,
      0.01788544,
      0.0036043094,
      0.0049464875,
      0.014619702,
      0.015410107,
      0.009951602,
      -0.0016113186,
      -0.0022434941,
      0.0049816417,
      0.022747977,
      -0.02598922,
      -0.007576563,
      -0.045211926,
      -0.014909375,
      0.015433863,
      0.0039035743,
      0.011411582,
      0.022835849,
      -0.0016003189,
      -0.002485195,
      -0.0036946575,
      -0.01842307,
      -0.02984228,
      0.0007517503,
      0.015750173,
      0.022602832,
      -0.006855239,
      0.012743342,
      0.011776977,
      -0.008813173,
      -0.022714142,
      0.031910148,
      -0.00039752258,
      -0.011180174,
      0.014885339,
      -0.020528894,
      0.024539618,
      0.010624248,
      -0.006167163,
      0.0035767965,
      -0.007761382,
      0.0015491622,
      0.0037568836,
      -0.14766297,
      -0.03462998,
      0.013342057,
      0.002037628,
      -0.003840355,
      0.00053729716,
      -0.021998977,
      -0.026217513,
      0.017799808,
      -0.008375942,
      0.017408164,
      -0.014648515,
      -0.011762739,
      -0.005875783,
      0.039209545,
      0.14705475,
      0.0053276457,
      0.0023869558,
      -0.021806968,
      0.016999094,
      -0.02117642,
      -0.014234192,
      -0.022579132,
      -0.0036045215,
      -0.015507378,
      0.0013704834,
      0.007515731,
      -0.016427752,
      0.0007978213,
      0.007457038,
      -0.013082528,
      0.0053067114,
      0.0055688084,
      0.019352524,
      -0.0049357465,
      0.007204815,
      -0.007813276,
      0.0067189033,
      -0.009567321,
      0.007882879,
      0.03713977,
      0.0064559863,
      0.0063553066,
      0.009766839,
      0.0015856079,
      0.009009626,
      -0.011467167,
      -0.010246331,
      0.006273982,
      -0.0040463754,
      -0.008509089,
      -0.05417901,
      0.012463424,
      -0.0033824104,
      -0.005316946,
      0.015328518,
      0.0036581426,
      0.015382722,
      -0.0059788045,
      0.016713386,
      -0.021444866,
      -0.006626059,
      -0.004291787,
      0.0057532447,
      0.0014196326,
      -0.012196364,
      0.025170302,
      0.03550993,
      0.039241098,
      -0.016798018,
      0.015303455,
      0.03291404,
      -0.01238095,
      0.025975099,
      -0.009148482,
      -0.0068743597,
      -0.016323412,
      0.022303386,
      0.004617256,
      0.00765295,
      0.006977241,
      -0.011074138,
      0.023265861,
      -0.03493569,
      0.02522634,
      -0.00059632445,
      -0.01645441,
      0.012994484,
      -0.0075000883,
      -0.00020688899,
      -0.006380375,
      -0.005597446,
      -0.00877585,
      0.02502208,
      0.015100331,
      0.009877183,
      -0.0015528693,
      -0.014950438,
      0.025441766,
      -0.0051405104,
      -0.013836313,
      0.00023578938,
      0.0035729394,
      -0.042768043,
      0.0034985882,
      0.022525042,
      0.0024520848,
      0.013179109,
      -0.004237381,
      -0.0015128729
    ]
  },
  {
    "id": "genai_cohort_python_03_Set_comprehensions_in_python_vtt",
    "content": "All right, so now that you are quite comfortable with the comprehensions, at least the list comprehension, I will challenge you again. Yes. The whole part of learning process is to take enough challenges and help that so that your brain exe start working. So I'll throw up a relatively simpler challenge first, and then I'll give you a really complex challenge and we'll ask you a question. I'm pretty sure you'll get it wrong at the first go. Usually people does. But that's okay. You will learn a lot in this one. So let me take you on the screen directly. And we're going to just work with, the comprehensions first. So this comprehension next is going to be the set comprehension. So set compre py. All right, good enough. Fair name. So how does the set comprehension work? And you will be surprised to know the set comprehension is almost exactly. Not almost exactly. It is exactly same. It works with the same thing expression for item in iterable if condition. So you might be wondering, all right, it goes exactly same. So what can go wrong with this one? This thing, the first bracket that makes it as a list. So if you go ahead and change this to just like this, it becomes a set. Is it that much? Yes, literally is. But now we are going to focus more on this one expression. What does this. This expression means? And you will get more clarity on the lists as well with this example. That's interesting. Let me show you this. So let's go up here. We'll have a simple, the most basic example first. So let's just say we call this as, favorite, favorite choice. There we go. Favorite choice. And this is going to be a list. And again, this guy got up again. So this is how we have it. All right, let's just say the first, we have couple of lines of this. So let's just go with the easy one. Sub. So this is my masala chai. Then we have green T. And let's just assume this is my orders. So I said masala chai again. And let's just say we have more. Although lemon is also my favorite. But let's just say I've ordered it less. Lemon chai. Lemon chai doesn't sound great. I actually prefer lemon T to call it. Don't know, for some reason. We have another one which is green, T. And then we have, maybe lichi, chai. All right, so we can see if we have this favorite chai as a list. We have masala chai. Oh, that's Two times we have green T which is also two time. I don't prefer green T but let's just say if we want to find out how many unique chais are there. So definitely masala chai is one unique green chai is another one Lemon and Elijah. So these are unique teas. How can I find a unique ones? Whenever there is an idea of unique ones, you go with the set. So how does the set work? I'll just go ahead and say this is uniquechai and pretty easy if you know the comprehension that should be easy and expression for item in iterable if condition. So let's not focus much on the expression first. Let's start always with for item in iterable if condition. So this is how the value should be read or this is how you should write it for item in iterable if condition. So we'll also do this one and most of the time you'll see people actually does exactly same. So we'll just go ahead and say for chai in favorite chai's and then we write the if condition. So I'll just go ahead and say for chai in chai's and then the same for chai in favorites and automatically I don't have to put any if condition here. I can, I will do that in later on. But if I go ahead and do this for chai in favorite chais automatically whatever is coming up. And since we have started with the curly braces, I don't have to write much if condition automatically the unique values will come to me and I just have to store this. So what we are calling this so chai so whatever is the final value. Remember the keyword here, final expression which is evaluating. This is what we write at the very top. So automatically don't have to do anything. I hope you get the idea what or where I'm going with this. So if I go ahead and print out the unique chai, I hope you got the answer that if I go ahead and say Python let's just run and there we go, we got all the unique values. Now surely I can go ahead and write this that hey, just say there is an if condition and I go ahead and say calculate the length of same example, length of the chai then what do I want to do? If it is greater than 8, then we'll go ahead and do this. Surely there's a lot of ways how you can work with this. You get the idea, you are now getting it. Probably is everything is greater than Anything less than probably will get nothing. But I would love to save this and run this one more time. So we got the empty set. You can't see it. There we go. So we got the empty set in this one. So again, there could be many ways of doing this, but, you got the idea that how this is being done and how you can have the unique values onto this one. So I'll just remove this if part because it is not required. But now you understand the syntax of it. But the most important part now, which will confuse you for a moment, but you'll get more clarity into this one. Let me just go with this. The thing that will confuse you next is going to be something a little bit complex. So you got the idea how the syntax works. So expression for item in iteratable. If condition. If you have the condition, that's great. Sometimes you can avoid it. We just saw an example. But what goes in this expression? Okay, we have seen this, that whatever you write it here goes up here. But what if we have some complex example? I'll write a complex example for you. So let's just say we have recipes. And this recipes is a dictionary. What does dictionary does? It has a key value pair. So we have a, masala chai. And the value is going to be an array. Very interesting. So we have ginger. There we go. Another masala that we have is cardamom. And the last one that we have is clove. All right, we'll have a comma, and we'll duplicate it two times. So this time. Oh, this should be masala, not masal chai. This one is going to be elaichichai. And for the lychee, we are using cardamom. And the next one. Oh, this should be cardamom. Again, ignore the typos. This one is having milk, but we don't have anything else. Again, this could be. This is just recipe. It could be anything. All right, the last one that we have is going to be spicy. For the spicy chai, we definitely want to put ginger. We don't want to put cardamom. We will put black pepper. That's going to be very, very spicy. And clove is also good. So very spicy chai. All right, so we have a recipe. Now. We want to find all the unique spices. Yeah, this one is complex. You get the idea. All right, so ginger is the one, but ginger is also here. So we need to figure out a way how we can find out all the unique, spices into this one. So first, let's go ahead and work with the unique, spices. So can we go ahead for the uniqueness, since the keyword is unique, can we use this one? All right, now all we have to do is write comprehension. Now here's the interesting part. We actually will use the underscores here. Many of the underscores, because we are about to fill this. All right, the step one is loop through it. So I'll just go ahead and say for ingredients in recipe. So if you go ahead and work with this recipe, this is a key value pair, and you are not iterating through it right now. You are just referencing it. It's not directly iteratable. But I know one thing that if I have a dictionary, if I put up a dot here, I can access all the keys or the values if I go ahead and run the values like this. Now I have all the values. So first iteration will go like this, the second will go like this, and the third one will go like this one. But if I go ahead and just say keys, then I'll iterate over this guy first, then this guy, and then this one. All right, so then the step one, I'm actually going through with all this value. Let me go ahead and get more room for myself. So this is the part one. All right. Notice here we says for item in iterable, and then we have always seen the if condition. Now, it doesn't always need to be if condition. You can actually write more code after this. This is the interesting part, but everywhere the syntax is same. So once I'm inside this, now I'm iterating, I'm going through with this one. So can I run a loop on this one as well? And yes, you can. You can just go ahead and say just a space and say four. And let's call this one as a spice in. And I, will call this one as ingredients, because remember, you are targeting this as ingredients. So for spice, that means for each item in this is what we are referencing as ingredients. Got it. Very interesting way of writing the code. But the bigger question here is what should I write in place of this underscore? Should I write ingredients or should I write spice? Go ahead and vote for it. I would wait for it. Try this out. This is very fun. Now most of the people will say ingredients, because this is what we have seen. Whatever we write here, we go ahead and use it in expression if we are using item. So we go ahead and write in the expressions here, we have seen mighty, always mighty. Goes up here. But no, this is not correct. This is not how it works. Whatever the ultimate value you return from this whole thing is actually going in the expression. So whatever the whole thing you are trying to use or trying to go with this, that actually ultimate goes. So ingredients in this case is a middleman. We are just using it for storing a temporary value inside this, and ultimately we are checking it for spice. So the value that will go here is going to be spice here. There we go. And I, know this is a lot. That's why I say initially, it is very tricky to understand the comprehension. But after watching this video, you'll realize, okay, this is a very extreme case. And that's why I'm here to teach about the extreme cases. Now, if I go ahead and simply say that I want to print, the unique spices, I hope we'll get the results. So I'll just go back onto this syntax. All right, let's open this up and try to run this. And notice here we got the clove, cardamom, ginger, black pepper, and milk. We were able to get unique values out of it. Very interesting aspect of dealing the things, especially when we have these set comprehension. I'm pretty sure you have not seen anybody going this much depth in this, but this is a very use case. It took us some time to actually figure out this use case, but now you have more confidence. All right, I truly understand what goes inside this. And every single time. Now I'll write this syntax of comprehension. I'll go and start with a loop first, because this is. Or this can be filled later on. So I hope this was, a pretty fun exercise for you. Please do rate us for this particular video as well. That. All right, you enjoyed this video. You learned quite a lot. Little bit uncomfortable, but you learned a lot. That is it for this video. Let's catch up, in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 Set comprehensions in python.vtt",
      "originalPath": "genai-cohort/python/06 Chapter Subtitles/03 Set comprehensions in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0051993616,
      -0.0029415253,
      0.044121686,
      -0.061413012,
      -0.00079903734,
      -0.012764279,
      0.010561244,
      0.035068773,
      0.0051630954,
      0.015243991,
      -0.013382958,
      -0.017354947,
      0.007057043,
      0.029868681,
      0.105314754,
      0.001565355,
      -0.018948829,
      -0.008332552,
      0.0011793758,
      -0.018108355,
      0.009064406,
      -0.0004788138,
      -0.0022204148,
      0.002810789,
      -0.0014752712,
      -0.015349914,
      0.0050512976,
      0.01637003,
      0.013211257,
      -0.032310612,
      -0.009337657,
      0.015339489,
      0.013956861,
      0.019337274,
      -0.0032967578,
      0.021815008,
      0.011471152,
      -0.013193733,
      -0.021611461,
      0.008380355,
      0.0006762814,
      0.008310133,
      0.009545331,
      -0.0053541698,
      0.008905174,
      -0.04729902,
      -0.0092698885,
      -0.01015459,
      0.0029251727,
      0.024837479,
      0.008431459,
      0.0016880487,
      -0.0023139722,
      -0.17538409,
      0.025167324,
      0.003274041,
      0.0010088127,
      0.0048572174,
      0.0035554185,
      0.010526015,
      -0.016431572,
      0.022087412,
      -0.04174793,
      -0.011750354,
      -0.019024868,
      0.002179574,
      0.020515116,
      -0.014389386,
      -0.0012547747,
      -0.00487362,
      0.008449302,
      0.00019839703,
      -0.004558386,
      -0.025868857,
      -0.017726025,
      -0.037184343,
      -0.0043748845,
      -0.014437197,
      -0.03077839,
      0.002537128,
      -0.006594579,
      -0.0021501575,
      0.0034818964,
      0.009706973,
      0.010599757,
      -0.002659378,
      -0.01980076,
      -0.011049494,
      0.009300982,
      -0.0022168634,
      -0.016087687,
      0.0048324764,
      -0.018446246,
      0.002442961,
      -0.009818977,
      0.002530563,
      0.0024347412,
      0.0026640529,
      0.0013615588,
      0.008470068,
      -0.0043149996,
      -0.0075403433,
      0.0019324957,
      -0.031219056,
      0.0067802616,
      0.0020803777,
      0.0020905882,
      -0.033366773,
      -0.011215656,
      0.00646174,
      -0.00037949378,
      -0.011123661,
      0.003918883,
      0.0072696824,
      0.007541247,
      -0.18297908,
      0.001286461,
      0.0075502023,
      -0.029740911,
      0.04199628,
      -0.013079551,
      -0.007484589,
      0.0137333395,
      0.014979729,
      -0.023123536,
      0.0071318145,
      0.0026255487,
      0.0003928377,
      -0.0015657201,
      -0.015772128,
      -0.0042849253,
      -0.022740955,
      -0.0012738829,
      0.010278182,
      -0.0034512489,
      0.016524144,
      -0.010067685,
      -0.0046456847,
      -0.019505057,
      0.0005224,
      -0.01486317,
      0.001963159,
      -0.008695945,
      0.015546448,
      0.014642789,
      -0.0056038653,
      -0.023362672,
      0.029580366,
      -0.016590469,
      -0.0012150565,
      0.008003369,
      -0.012233948,
      0.0013133987,
      0.0016524125,
      0.022247553,
      -0.032898556,
      -0.006456652,
      0.015315506,
      -0.0043337015,
      -0.004683475,
      -0.021545785,
      0.0049758237,
      0.002613133,
      0.003589645,
      -0.00014292105,
      0.014700605,
      -0.010147245,
      -0.009533337,
      0.024361087,
      0.0008318359,
      0.010523148,
      -0.018471124,
      0.01798342,
      -0.0059216134,
      -0.012515844,
      -0.017689226,
      0.0026174104,
      0.010894733,
      0.008925115,
      -0.012698903,
      -0.004853099,
      -0.021826409,
      0.0042159087,
      -0.00054743886,
      0.016549299,
      -0.014754675,
      -0.024335252,
      0.012876441,
      0.0042172754,
      -0.013938844,
      0.0067872955,
      0.016169515,
      0.033767745,
      0.018090408,
      -0.0110208,
      -0.01041352,
      -0.0071566757,
      0.01617311,
      0.009288224,
      0.009744251,
      0.022071283,
      -0.00837459,
      -0.015151361,
      -0.010032223,
      0.030643346,
      -0.0074592237,
      0.011187212,
      -0.007611855,
      0.019283948,
      -0.0059178583,
      -0.021508904,
      0.0024452016,
      0.01957082,
      -0.00033929013,
      0.012601452,
      -0.000053461143,
      0.020196615,
      0.004941436,
      -0.012654756,
      -0.017480817,
      0.00340087,
      0.008338668,
      0.019766407,
      0.012418435,
      -0.00040645534,
      -0.0008683812,
      0.018936202,
      0.011070725,
      0.0037155862,
      0.013769369,
      0.016208854,
      0.0040789736,
      -0.015167391,
      -0.02443892,
      -0.010298367,
      0.0016056915,
      -0.019463846,
      0.023571702,
      0.034658734,
      0.000013499271,
      0.00020811282,
      0.013801456,
      0.004983779,
      0.00076698815,
      0.024096025,
      -0.0052554044,
      -0.004675754,
      0.003174315,
      0.000504579,
      -0.015872208,
      -0.013832351,
      -0.01714102,
      -0.007851398,
      -0.022704275,
      -0.0034298687,
      -0.016511235,
      -0.022458557,
      -0.008374906,
      0.0016329935,
      -0.007951317,
      -0.009445989,
      -0.008662762,
      -0.019978138,
      -0.019833343,
      0.009460466,
      -0.011012294,
      0.004837376,
      0.021976234,
      0.009826112,
      0.0038860545,
      0.0058826334,
      0.009815763,
      -0.0061057652,
      0.011450285,
      -0.018414263,
      0.009664436,
      -0.11349032,
      0.00612383,
      0.011208524,
      -0.020021219,
      0.012091118,
      0.0136273755,
      0.0022351767,
      0.01745126,
      0.012304521,
      0.011954742,
      0.0063530845,
      -0.009993819,
      0.04284001,
      -0.032047156,
      -0.0088833645,
      0.0006997549,
      0.008658676,
      -0.026056584,
      0.028868964,
      -0.005736453,
      0.0074884333,
      -0.01996204,
      0.00067358016,
      0.009952231,
      0.00524156,
      0.019944549,
      -0.008043321,
      0.025581995,
      0.007932238,
      -0.0026321064,
      -0.0024856282,
      0.021045953,
      0.001352507,
      0.010638055,
      -0.0046200147,
      0.004538531,
      -0.00012918656,
      -0.0063977954,
      -0.0071408935,
      -0.013245647,
      0.028196473,
      0.0035127366,
      0.015612167,
      0.045062736,
      -0.0092779435,
      -0.0059657623,
      -0.011135284,
      0.0015145198,
      -0.022069786,
      0.00523249,
      -0.0059204395,
      0.0026644554,
      0.0002776162,
      -0.014098692,
      0.007540849,
      0.009554246,
      0.008041029,
      0.0033593522,
      -0.0069870255,
      0.011405594,
      0.002441624,
      -0.0014102168,
      0.018173087,
      -0.01820528,
      0.0010175217,
      0.010001999,
      -0.0061788154,
      -0.024223093,
      -0.0078639975,
      0.010784106,
      0.000101736405,
      -0.009305284,
      -0.0059466325,
      -0.0064649032,
      0.010883592,
      -0.0026104192,
      0.024345806,
      -0.025617067,
      -0.03165714,
      0.013445769,
      0.009593537,
      -0.0018760328,
      0.0042940686,
      -0.0016822965,
      -0.0017672428,
      0.008381037,
      0.012733637,
      0.008004161,
      0.0033017814,
      -0.00033419323,
      0.006605745,
      0.01093997,
      -0.022864284,
      0.009502917,
      -0.039056893,
      0.0120368125,
      0.0019080471,
      -0.034713827,
      0.008768175,
      0.017617587,
      -0.022400985,
      0.0038540377,
      -0.021255637,
      -0.006515768,
      -0.016019743,
      0.008107877,
      -0.022142243,
      -0.015292834,
      0.00596067,
      -0.021076303,
      -0.013276107,
      0.0027682267,
      -0.010043575,
      -0.014971991,
      -0.022646999,
      0.0027718076,
      0.011369378,
      0.005432483,
      0.018924326,
      -0.014513025,
      0.016258461,
      0.0048038983,
      0.008421908,
      0.0021522166,
      -0.0070069935,
      -0.001168668,
      -0.024704136,
      -0.0153879095,
      -0.02357173,
      -0.028015953,
      -0.028787028,
      0.028638938,
      -0.009169241,
      -0.014014707,
      -0.008735697,
      -0.010375463,
      0.018258316,
      0.0042262683,
      0.022828208,
      0.010700773,
      -0.0136394715,
      0.0003311156,
      0.012078649,
      0.03195657,
      0.002740939,
      0.020141328,
      0.007917023,
      -0.014434733,
      -0.0020433662,
      -0.020263642,
      -0.007680014,
      -0.029688653,
      -0.016951233,
      -0.007812422,
      0.005665179,
      -0.0045376676,
      -0.0035276853,
      -0.0157329,
      -0.028243423,
      -0.013061606,
      0.0054560318,
      -0.005764582,
      -0.020937635,
      -0.006891789,
      0.029279402,
      -0.014185399,
      0.00047252435,
      0.027593007,
      0.007740356,
      -0.009485296,
      -0.0024636327,
      -0.0043970835,
      -0.04061,
      0.02165869,
      0.014299392,
      0.02306886,
      0.014205961,
      0.013728605,
      0.019078847,
      0.012193867,
      0.0066901683,
      -0.010689122,
      0.0012853196,
      -0.0064454987,
      0.0038926557,
      0.01739163,
      0.027575966,
      -0.008995771,
      -0.027764179,
      -0.0021326188,
      0.0028311152,
      -0.0033934107,
      0.0018981119,
      0.022535836,
      0.013571248,
      0.024092814,
      0.011688697,
      -0.00080822775,
      0.009769578,
      0.013352203,
      -0.0057686022,
      -0.0015276774,
      0.00066610245,
      0.0007157253,
      0.0052844035,
      -0.0086537,
      0.0042497916,
      -0.023787621,
      0.0077847457,
      0.010802869,
      -0.000977672,
      0.017571384,
      -0.009247198,
      -0.0022680508,
      0.015020503,
      0.027359653,
      -0.015746942,
      -0.00036246315,
      -0.017514616,
      0.0076761437,
      0.011143354,
      -0.0034859243,
      -0.005887504,
      -0.01150936,
      0.0116813015,
      -0.00076250837,
      0.02535763,
      0.011650996,
      -0.004547494,
      0.0042865365,
      -0.018618966,
      -0.0063369847,
      -0.0037328275,
      0.022158245,
      -0.024733791,
      0.00044713297,
      -0.001861357,
      0.03706502,
      -0.0072600287,
      0.018549543,
      -0.009491201,
      -0.01786556,
      -0.008353847,
      -0.005841765,
      -0.014943422,
      -0.009397466,
      0.0020275204,
      0.00061461295,
      -0.006814264,
      -0.015718745,
      0.0052205482,
      0.018247498,
      -0.017078053,
      0.00038223708,
      -0.01244974,
      0.028324071,
      0.0062488625,
      -0.011296909,
      0.016793279,
      -0.012001955,
      0.012681826,
      0.015657345,
      0.0056121387,
      0.021459071,
      -0.0010208709,
      -0.021428451,
      -0.011149533,
      -0.03331598,
      -0.014184094,
      -0.11519123,
      -0.01809234,
      -0.0070409365,
      0.011901343,
      -0.023641909,
      -0.004590811,
      -0.0026696804,
      -0.009545769,
      -0.0059005264,
      -0.002726223,
      0.01835821,
      -0.005946069,
      0.009075106,
      -0.0069222096,
      0.012717169,
      -0.0312382,
      0.032143872,
      0.028380746,
      0.007729896,
      -0.009946574,
      -0.0067090443,
      0.007097981,
      -0.0007494144,
      0.0040764646,
      -0.02007591,
      -0.0149213895,
      0.019305522,
      0.008039194,
      -0.011498729,
      -0.018270386,
      -0.0403218,
      0.01305675,
      0.010093705,
      0.014912826,
      -0.002223169,
      -0.011496232,
      -0.019057993,
      -0.019592263,
      0.02973107,
      0.012525106,
      -0.0030196793,
      0.0042024376,
      0.034678828,
      0.018766118,
      0.007990463,
      0.018150201,
      0.03900164,
      -0.005112902,
      -0.008626226,
      0.022608474,
      -0.028140105,
      -0.017800383,
      0.00019947947,
      -0.0027242021,
      -0.023644201,
      -0.013646121,
      0.01606685,
      -0.008606947,
      0.005458756,
      -0.0034508826,
      0.012434547,
      0.01687836,
      0.008059455,
      0.037734386,
      -0.0017348952,
      -0.011654918,
      0.015748866,
      0.00013943364,
      0.021799358,
      -0.0062416852,
      0.0030944126,
      0.00782041,
      -0.0018393868,
      0.023892038,
      0.009083897,
      0.011037331,
      -0.0012189992,
      -0.009831513,
      -0.01329699,
      0.01824075,
      -0.016290206,
      -0.0030245145,
      -0.048407715,
      -0.017496524,
      0.011476894,
      0.0066278577,
      -0.000676759,
      0.028997295,
      -0.007721685,
      0.0010769921,
      0.009164445,
      -0.03284018,
      -0.027588138,
      -0.0056796675,
      0.0059152516,
      0.011454555,
      -0.025549958,
      0.011815494,
      0.0063340547,
      -0.01258589,
      -0.012685706,
      0.0194917,
      0.0062315743,
      -0.0026238505,
      0.009107308,
      -0.013479325,
      0.022458028,
      0.0060429494,
      -0.004406244,
      0.0005250199,
      0.0034017037,
      0.010252605,
      0.019182429,
      -0.14079164,
      -0.023804862,
      0.0047710044,
      0.0023403855,
      -0.0066267475,
      -0.0017128786,
      -0.0074782246,
      -0.02509266,
      0.0061870823,
      -0.016122393,
      0.012291159,
      -0.03133022,
      -0.0075572017,
      -0.01288219,
      0.049077895,
      0.14794558,
      -0.0121736545,
      0.008019883,
      -0.019174013,
      0.00076867203,
      0.0012012625,
      -0.027644455,
      -0.017975094,
      0.00691927,
      0.002130824,
      0.00214344,
      0.005693271,
      -0.024464132,
      0.0067330115,
      0.011300394,
      -0.025307588,
      -0.0014712235,
      0.0062703216,
      0.032206807,
      -0.0018735547,
      -0.016480183,
      0.0009710612,
      0.013905784,
      -0.00047429066,
      0.00067551597,
      0.040722944,
      0.017122367,
      0.013879367,
      -0.0057652006,
      0.0024613547,
      0.001329036,
      0.006478038,
      -0.008531967,
      0.0063988185,
      -0.010872891,
      -0.015452545,
      -0.06598704,
      0.010100494,
      -0.0027005917,
      -0.0026133049,
      -0.010813867,
      0.01637149,
      0.014935886,
      0.008375956,
      0.01226364,
      -0.01966515,
      -0.0008351272,
      0.006644011,
      0.01496621,
      0.0014475984,
      -0.008672757,
      0.010024324,
      0.028150862,
      0.033173118,
      -0.011069298,
      0.011294621,
      0.04450704,
      -0.016486622,
      0.019761354,
      -0.012769933,
      -0.0028950616,
      -0.023611369,
      0.020763686,
      0.008788711,
      0.0053188577,
      0.0026848295,
      -0.011680944,
      0.00940671,
      -0.022062885,
      0.037771307,
      -0.010386646,
      -0.011364489,
      0.0007698665,
      0.009529419,
      -0.018136095,
      0.0029001557,
      0.0004950606,
      0.008756519,
      0.005561785,
      0.015441208,
      0.020927405,
      -0.00047160653,
      -0.019356372,
      0.03469382,
      0.006720874,
      -0.031258862,
      0.0021253645,
      0.012184809,
      -0.04065581,
      -0.00006175636,
      0.019311765,
      -0.0052906345,
      0.022994166,
      -0.0014105906,
      0.003961101
    ]
  },
  {
    "id": "genai_cohort_python_04_dictionary_comprehensions_in_python_vtt",
    "content": "All right, so we have seen quite a lot and I hope you are having fun with the comprehensions. And now what I want you to do is let's go ahead and work with the dictionary as a comprehension, which is very interesting actually. I don't have too much of the tricks remaining with me in the comprehension. Just one more. But it will help you to understand dictionaries like quite in detail and quite in depth. So I have created a new file which I've called it as dictcompre for py. Very innovative name. And let's call this one as. Okay, so how does the dictionary actually works? So let's just go ahead and copy this one. So this is my dictionary and I want to work with this. And the thing with the dictionary is that you can actually go ahead and copy this. The set also works with the curly braces, and dictionary also works with the curly braces. The only difference is how you store the value as a final expression, if this expression is actually a key value pair. So if we have a key and then a value. So if we are storing this as an expression, this will be treated as dictionary. Otherwise this is regular one. And I'll show you one. Really nice and a neat example for this one. You'll love the example. So let's just say we go back and we have some of the tea prices. So let's just say tea prices. And we have all these prices in inr, which is Indian rupees. And I have a dictionary. And for this dictionary, let's just say we have masala chai, which is right now rupees. It will be really pennies in the dollars. But we'll just do that. We also have green, chai or green T actually sounds better. And then we have the green T, which will be, let's just say And then we have one more. We'll just have three. You can add more if you wish to have. I'll have lemon T. Again, favorite one. And this is bit expensive. Let's just say All right, now here's the thing. I want to convert all of these prices into dollars. So all the prices needs to be divided by rupees. It is general average right now. How can I do this? I have to create a fresh dictionary. So comprehensions comes really handy in this case. And we'll directly write them just like we have learned right now. I'll just go ahead and say, but this time this is in USD and the way how it works again Same just like list. We go like that. And first of all we keep them as underscore because I don't know what to fill this up here. I'll just go ahead and say for and then I have to loop through. So far we have been going through with only, one item itself. But now we want to worry about key as well as value. So I have what's come back as a return value are two things. I'll call them as tea and price. This is just my regular loops, nothing fancy in this. And I have to say in and then tea price is inr. This is the looping part of it. All right, let's get more space for us. And then what you want to do in this, I want to go ahead and take, the prices. So for this I have to actually grab all of this value. So if I go ahead and say just the tea prices inr it's not going to work. I have to say either dot keys or dot values. Or if I want to grab both of them, I have a method for that. We studied that that is known as items. I have to run this. So I have got now the whole thing. So in each of the tea prize, I get this one in the first iteration, this one in the second one, and this one in the third one. All right, got it. But what we're going to put this here and it hasn't. We haven't yet divided it back with the price. So how we're going to get it. So this is where the expression comes up. Expression is something that you want to return. In this case, I want to return tea as a price. tea and a price here. So the way how I'm going to store this, I'll call this one as a tea then colon and then the price here. So this will be exactly. We have done nothing. We have just looped through it, got the value and we're storing it. But I can do something interesting. I can just go ahead and divide the price So before saving the price, now this will be evaluated. This is an expression which will be evaluated and you will get all the prices in dollars. So told you comprehension are a way of shrinking your code. It makes logic everything. You just have to start reading from the for loop always and always. And then whatever comes back, this is always towards the end the expression says something like this, for all of my items here in the tea prices get me back tea and prices. This is I'm sending back and then I'll just divide it by super easy. But really fun. Told you it's really fun. And. And in the very last I'm going to go ahead and print the tea prices in the USD. Let's go ahead and grab it like this And I will love to run Python. Python. And this time we are running. There we go. So I told you it's almost like pennies. So which makes sense. So this is and then we have all of this in this and surely you can use your backticks. You can use your formatted strings. Not backticks, the formatted strings. Whatever you wish to have. You can just go ahead and work with this super easy. But I hope you are now somewhat in there between that. Okay, I'm getting it. I'm started to loving it but I still need more practice and that is totally fine. That is totally okay. So this was it. This was all about your dictionary comprehensions. Hope you enjoyed it. Do rate us. Let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 dictionary comprehensions in python.vtt",
      "originalPath": "genai-cohort/python/06 Chapter Subtitles/04 dictionary comprehensions in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.002332247,
      -0.011049047,
      0.027878154,
      -0.056504108,
      -0.0010586481,
      0.0027330967,
      0.014018921,
      0.012425413,
      -0.0023058208,
      0.016878467,
      -0.018055512,
      -0.016843218,
      0.012552103,
      0.017078957,
      0.10943553,
      -0.0014679533,
      -0.0153661845,
      0.004697543,
      0.0078008,
      -0.025493884,
      -0.00035245155,
      0.006875867,
      0.0042927475,
      -0.012807348,
      0.0075315316,
      -0.009120373,
      0.010374501,
      0.009385713,
      0.013972227,
      -0.020422263,
      -0.01726472,
      0.00068084843,
      0.013003623,
      0.018609438,
      -0.0039096717,
      0.00528725,
      0.00417632,
      0.004734884,
      -0.024754616,
      0.0026899907,
      -0.009052877,
      0.023110049,
      -0.006427219,
      0.0065252893,
      0.024679698,
      -0.03351078,
      0.0043662344,
      -0.0103508765,
      -0.014931485,
      0.03469894,
      0.008794829,
      -0.0085438285,
      0.0010233538,
      -0.17861311,
      0.012364493,
      0.02196543,
      -0.004750278,
      0.0035379254,
      0.014892155,
      0.012599356,
      -0.021706423,
      0.01747217,
      -0.041585118,
      0.0014743081,
      -0.018079318,
      -0.026777502,
      0.011788817,
      0.00081253186,
      -0.01828091,
      -0.0069829696,
      0.0151069565,
      0.003708116,
      -0.010819482,
      -0.00034069695,
      -0.008137674,
      -0.023611065,
      0.0042964015,
      -0.009714117,
      -0.018223934,
      0.018721975,
      -0.00854897,
      -0.00025449216,
      0.0017002372,
      0.023531783,
      -0.0033358464,
      0.0014064794,
      -0.023901546,
      -0.02158986,
      0.0019039179,
      -0.010873693,
      -0.014850289,
      -0.00640458,
      -0.013731759,
      0.003498246,
      -0.01417336,
      -0.0029851592,
      0.014087914,
      0.0027397282,
      -0.007885593,
      -0.0086227385,
      0.010165051,
      -0.015094538,
      -0.01299189,
      -0.0065501407,
      -0.0024955338,
      -0.01047773,
      -0.007830117,
      -0.017811248,
      -0.030232446,
      -0.0020105983,
      -0.008256572,
      -0.0056595732,
      -0.00248401,
      0.025910534,
      0.012700733,
      -0.17599334,
      0.02387281,
      -0.014218167,
      -0.030749802,
      0.011781273,
      0.0030851788,
      0.00006813986,
      0.013543555,
      0.005766332,
      -0.018850269,
      0.012072175,
      -0.0019434554,
      0.013705853,
      0.006641578,
      -0.009681492,
      -0.007721881,
      -0.014826809,
      -0.013348084,
      0.014362947,
      -0.019095154,
      0.012737157,
      -0.012900124,
      0.0015677583,
      -0.030156516,
      -0.0010293771,
      -0.030645117,
      0.016822409,
      -0.009963304,
      0.033660434,
      0.015166543,
      -0.011027483,
      -0.028396515,
      0.01743564,
      -0.026030406,
      -0.005696205,
      0.015071529,
      -0.023765838,
      -0.0042451564,
      0.0014248462,
      0.028406428,
      -0.03517102,
      -0.0087023955,
      0.019083645,
      -0.006569559,
      -0.007114415,
      0.00060715165,
      0.0074999835,
      0.00980342,
      0.013163698,
      0.0056593493,
      0.001768094,
      -0.032727554,
      -0.01702832,
      0.02291941,
      0.00022721049,
      -0.017217362,
      -0.023169147,
      0.0024758633,
      -0.008309527,
      -0.00062661816,
      -0.013298721,
      0.010871106,
      0.0066928314,
      0.011494765,
      -0.008765641,
      0.012780206,
      -0.01694663,
      0.0074784225,
      0.0010556771,
      -0.0042216643,
      -0.0067255124,
      -0.015898215,
      0.0045381947,
      -0.000112951246,
      -0.014893542,
      0.0046099317,
      0.017508464,
      0.025135601,
      -0.0054463893,
      -0.0170495,
      -0.010987845,
      0.00863651,
      0.018200776,
      0.008203358,
      0.025565678,
      0.025564257,
      -0.005696629,
      -0.013091929,
      -0.013796696,
      0.03914998,
      -0.0083340695,
      0.01218125,
      -0.010914845,
      0.039457586,
      0.008065552,
      -0.0024170189,
      -0.018199941,
      0.030461,
      -0.0060004075,
      0.0069018328,
      0.0027921302,
      0.01701233,
      -0.0131045235,
      -0.012311718,
      -0.010312406,
      0.012299544,
      0.00487251,
      0.021241693,
      0.015682671,
      -0.011880491,
      -0.011885415,
      0.020965243,
      0.0060714427,
      0.0062581366,
      -0.014317007,
      0.023347897,
      0.0010334383,
      -0.017915618,
      -0.023177082,
      -0.023370916,
      -0.0055013373,
      -0.020913783,
      0.007951311,
      0.017211456,
      0.0020550028,
      0.016072586,
      -0.00053609075,
      0.00021249097,
      0.015567168,
      0.020702314,
      0.0018908856,
      -0.004218514,
      0.0010661385,
      0.00034784238,
      -0.014952387,
      -0.021154784,
      -0.0055884523,
      -0.007385797,
      -0.040846013,
      -0.009332274,
      -0.012217174,
      -0.024535147,
      -0.01435959,
      -0.009646806,
      -0.011859982,
      -0.011461907,
      -0.03613915,
      -0.018814297,
      -0.017926725,
      0.010538439,
      -0.004874024,
      -0.011079387,
      0.013579661,
      0.003135365,
      -0.0046876124,
      0.0037020585,
      0.012178842,
      0.008125481,
      0.0013746411,
      -0.017716942,
      0.0055815578,
      -0.109707944,
      0.007632599,
      0.01656951,
      -0.0075457105,
      0.01976094,
      0.016610686,
      -0.009044063,
      0.020699916,
      0.0012324513,
      0.02101901,
      0.014883802,
      0.003738703,
      0.035877533,
      -0.0190387,
      -0.008410956,
      -0.016282832,
      -0.005986942,
      -0.019163828,
      0.027348917,
      -0.008537183,
      0.008328658,
      0.009301662,
      -0.00028130377,
      -0.00020339654,
      0.0016795816,
      0.0006957175,
      -0.015265817,
      0.02820495,
      0.0045117037,
      0.003425612,
      -0.004572001,
      0.019507961,
      -0.00014711787,
      -0.006806249,
      0.0026212297,
      0.013939375,
      -0.0024767881,
      -0.006462191,
      0.0066115977,
      -0.006216063,
      0.03897459,
      0.0056280917,
      0.010687556,
      0.04030089,
      -0.0004013598,
      0.001473934,
      -0.009000843,
      0.0016124425,
      -0.027274841,
      -0.0021890807,
      -0.007570565,
      0.0009122126,
      0.008160428,
      -0.0049162614,
      0.009636758,
      0.0037906547,
      0.012438807,
      -0.0041576554,
      0.0021551193,
      -0.0031307673,
      -0.0019913786,
      0.0082096895,
      0.010365601,
      -0.024968497,
      0.019469982,
      0.0046600914,
      0.013151293,
      -0.007257389,
      -0.01181895,
      0.0028155898,
      0.002086238,
      -0.014093869,
      -0.017495831,
      -0.019622585,
      0.0069379103,
      0.0063587897,
      0.024336837,
      -0.028720498,
      -0.028420068,
      0.02754767,
      0.015480891,
      -0.01672365,
      0.023851084,
      0.0030479769,
      0.0057850513,
      -0.010587901,
      0.005656615,
      0.0010445134,
      0.0012093805,
      -0.013789129,
      0.034790523,
      -0.004652402,
      -0.016096894,
      0.0042917165,
      -0.036207575,
      -0.0042073587,
      0.0091997795,
      -0.029524969,
      -0.0102977045,
      0.020080835,
      -0.032458927,
      0.0034156553,
      -0.020961959,
      -0.008110417,
      -0.017486285,
      0.008500207,
      -0.020489497,
      -0.00995493,
      -0.0020961862,
      -0.036703147,
      -0.007092255,
      0.015525882,
      -0.030273922,
      -0.011966333,
      0.0078789815,
      0.009870581,
      0.027380697,
      0.016583024,
      0.025964951,
      -0.00004697744,
      -0.007847692,
      -0.001988062,
      -0.007515547,
      -0.014596024,
      0.0008491429,
      0.010456537,
      -0.009281262,
      -0.0039409045,
      -0.009236094,
      -0.017579064,
      -0.029285818,
      0.019188458,
      -0.01202896,
      -0.010224975,
      -0.018350666,
      -0.01171533,
      0.023954991,
      0.0041426993,
      0.023395086,
      -0.0039556045,
      -0.0062100654,
      -0.0075609568,
      0.0034089081,
      0.018355258,
      0.011575298,
      0.011659575,
      0.0036114955,
      -0.007140905,
      -0.015502032,
      -0.025964778,
      -0.014127244,
      -0.03687904,
      -0.0129085295,
      0.0061791013,
      0.013517686,
      0.0020283428,
      0.005745456,
      -0.0070496406,
      -0.024434334,
      -0.029505974,
      0.00097319635,
      0.0063325115,
      -0.014312154,
      -0.009780581,
      0.025144594,
      -0.002042661,
      0.009395453,
      0.022759236,
      -0.026536847,
      -0.0074356454,
      -0.0063822446,
      -0.0067436937,
      -0.03128513,
      0.013043751,
      0.010873499,
      0.007348423,
      0.00934312,
      0.0023424753,
      0.021247942,
      0.02389911,
      0.00037942006,
      0.0070415004,
      -0.002454264,
      0.007435684,
      -0.002217046,
      0.006683887,
      0.013629723,
      0.018163202,
      -0.026339259,
      -0.00044630896,
      0.005976125,
      0.008151116,
      -0.0067032096,
      0.008796017,
      -0.0073159905,
      -0.0045505594,
      0.004087268,
      0.014438838,
      0.0076879533,
      0.008040408,
      0.006721422,
      -0.012901901,
      0.0005869973,
      0.00032369336,
      0.009199506,
      -0.005342052,
      -0.009498993,
      -0.011737085,
      -0.0037212246,
      0.030790394,
      0.007909852,
      0.04083363,
      -0.007167386,
      0.0025817533,
      0.010748883,
      0.032038182,
      -0.025819633,
      -0.00218658,
      -0.011630947,
      0.0018667047,
      0.011087523,
      -0.004526322,
      0.0045865956,
      0.0027362257,
      0.010241961,
      0.007004702,
      0.008337968,
      -0.0061175893,
      0.007249642,
      0.0029094832,
      0.017811133,
      -0.00840668,
      -0.00077306293,
      0.036465403,
      -0.01669537,
      -0.01961644,
      0.01510504,
      0.027986264,
      -0.011918417,
      0.024783894,
      -0.0032625843,
      -0.016746843,
      -0.0068612453,
      -0.009185456,
      -0.017621199,
      -0.027150694,
      0.004501444,
      0.0039642192,
      0.0022281352,
      -0.022057703,
      -0.0025718098,
      0.026803672,
      -0.026421411,
      -0.011815305,
      -0.0042558103,
      0.033736728,
      0.012675006,
      -0.008732589,
      0.016011551,
      0.01186223,
      0.004326691,
      0.017664798,
      0.008378093,
      0.015470242,
      0.0025694296,
      -0.017864868,
      -0.011082789,
      -0.031724233,
      0.005205847,
      -0.12092195,
      -0.012165556,
      0.010835154,
      -0.0053753858,
      -0.0050650775,
      -0.014533616,
      -0.007684465,
      -0.02932109,
      0.0041825273,
      0.009967671,
      0.023057014,
      -0.0028725707,
      0.0041793594,
      -0.010135364,
      -0.0013331076,
      -0.0332778,
      0.03207501,
      0.024522817,
      0.00857618,
      -0.006672667,
      -0.025912015,
      0.021014579,
      -0.026200496,
      -0.01451793,
      -0.018055039,
      -0.025369082,
      0.023108806,
      0.011526718,
      0.0011221616,
      -0.008318625,
      -0.043689165,
      0.0023773748,
      -0.001834013,
      0.02554851,
      0.015137723,
      -0.0064340215,
      -0.019863248,
      0.014783427,
      0.03025412,
      -0.002916927,
      -0.016353479,
      0.008083849,
      0.026655354,
      0.018824136,
      0.00877253,
      0.022868454,
      0.037582614,
      -0.009102365,
      -0.013890175,
      0.015141503,
      -0.022613468,
      -0.010785234,
      -0.008287679,
      -0.009273958,
      -0.00003009423,
      -0.0023446705,
      0.017377723,
      -0.0036779647,
      0.0013056005,
      0.0032503656,
      0.0027127706,
      0.017150678,
      0.00090577366,
      0.039924253,
      0.013677749,
      -0.004649885,
      0.021482512,
      0.0225248,
      0.02591025,
      0.0009865767,
      0.01298204,
      0.015164053,
      0.007852844,
      0.026480842,
      0.021019787,
      -0.0063480577,
      0.006978568,
      -0.0025631946,
      -0.0066266367,
      0.017248211,
      -0.029680239,
      -0.005204865,
      -0.05228187,
      -0.011469172,
      0.011786208,
      0.016272984,
      0.013290947,
      0.033246573,
      0.007481813,
      0.008088369,
      0.020786079,
      -0.01849607,
      -0.02021761,
      -0.0007356041,
      0.009229311,
      0.0019810235,
      -0.0055395933,
      0.0025593855,
      -0.0027659065,
      -0.014155514,
      -0.019746508,
      0.0009138849,
      -0.000037927817,
      -0.010616859,
      0.005200794,
      -0.017456912,
      0.014936741,
      0.020894734,
      -0.014439364,
      -0.010765761,
      -0.014379632,
      0.0136974,
      0.013122034,
      -0.15004703,
      -0.03353617,
      -0.0015679674,
      -0.0211976,
      -0.018523494,
      -0.0044198744,
      -0.0030887614,
      -0.010450556,
      -0.00041751325,
      -0.017295001,
      0.0029443365,
      -0.024275191,
      -0.022919264,
      -0.0132535435,
      0.023899453,
      0.14107274,
      -0.016855292,
      0.003570914,
      -0.016207198,
      0.007158586,
      -0.020114224,
      -0.03144272,
      -0.00883932,
      0.021806324,
      -0.01060331,
      0.00041705027,
      -0.005388431,
      -0.02599063,
      -0.0011278137,
      0.0021714887,
      -0.02557971,
      0.004370475,
      0.005870304,
      0.022582348,
      -0.010288938,
      -0.01259794,
      0.008426806,
      0.013990873,
      0.003857108,
      0.0005590224,
      0.026567878,
      0.015918115,
      0.014526735,
      -0.0139259035,
      0.0011756374,
      -0.0004340361,
      -0.011415659,
      -0.023053505,
      -0.01845731,
      -0.010891888,
      -0.029913917,
      -0.051511567,
      -0.00055300794,
      -0.0051510003,
      0.00239523,
      -0.0028204485,
      0.022495354,
      0.02304876,
      0.0033789284,
      0.033713534,
      -0.020511255,
      -0.0061666262,
      0.006424728,
      0.0008055507,
      0.004785387,
      -0.010771345,
      0.014330515,
      0.02122465,
      0.013783244,
      -0.0057708956,
      0.011234482,
      0.035935514,
      -0.004438538,
      0.02692886,
      -0.011195752,
      -0.016885746,
      -0.013714351,
      0.013246449,
      0.005142205,
      0.012554237,
      0.0007169684,
      -0.013983072,
      0.0034519907,
      -0.008377016,
      0.041169655,
      0.006602409,
      0.016760983,
      0.011371211,
      0.000872438,
      -0.010750173,
      0.0047510117,
      -0.012456984,
      -0.02616531,
      0.011142325,
      0.010832564,
      0.01113515,
      -0.002569711,
      -0.021568038,
      0.026946219,
      0.0107062515,
      -0.027740875,
      -0.006910592,
      0.019535381,
      -0.03122026,
      -0.008494975,
      -0.010973051,
      -0.017474964,
      0.026163727,
      -0.0017756267,
      0.001759069
    ]
  },
  {
    "id": "genai_cohort_python_05_Generator_comprehensions_for_memory_optimization_vtt",
    "content": "All right, so let's talk about the final type of comprehension, which is generator comprehension. Now, in order to understand the generators, this is your first preview of understanding them. And it's easy, but you need to understand what happens behind the scene in front. If I just give you any example, there is no such example that I have, which has millions of record that I can show you. Okay, this one is faster, this one is not. Generators are used just and just for saving the memory, which is not just, it is a really huge aspect. Most of the Python programs that you see are not really caring much about the memory. But if you're a good software engineer, you do really care about memory. Most of the Python engineers, they work with the heavy machines, which has around, GBs of RAM or GBs of RAM or probably works in the GPU. But if your program is efficient, it can do a lot of job and make Python functions faster. It's already a slow language, but if we can do something about the memory and make it more faster, that is what exactly generator does. The syntax is pretty easy, you will love that. But just get this, this is used entirely for saving the memory. You don't see them here in these small examples. But remember, if you want to save memory in some of the cases, then it's the best thing. So again, it's a super easy one. So we have the final one here. Remember generators? Yep, that's what we are talking about, generator. So if I go ahead and wrap this up, so how does the syntax look like? And you'll be surprised. Exactly. Same. The only thing that changes in this is they start with parenthesis and that is it. That is your generator expression for item in iterable, if condition or for loop or whatever you want to do. Further, you can go ahead and do that. Can we go ahead and take an example of this one? Surely. First I'll tell you how it works actually and what's the difference between them? So you might have seen, for example, I can just use the square brackets and can get exactly same result for X, in, items. And there is another case that we have, or we have to put an expression X for x in items. So this is our first case that we have seen. And there is another one which actually goes through with just like this. So apart from these parentheses, technically there is no difference between, this piece of code and this piece of code. But the only difference is this piece of code actually makes the entire list in the memory it generates it immediately and everything is stored in the memory. On the other hand, this one actually, gives you one item at a time. This is like a stream. So always remember, this thing, is going to make a list or make entire list, in memory. So this is the part where we go with the square brackets. So this is part for this. And this one is more like a stream. So all of your memory is not clogged at once. It actually gives you a constant flow of the things as you require them or as you process them. Let me go ahead and show you how it actually works. It's actually super easy example, don't you worry on that part. So I'll take you onto the screen. We'll close all of this. And this, is probably last video in this section, hopefully. And this one is generator compre py. All right, so let's just say we have a, daily sales. And this could be like hundreds of value. We cannot write hundreds of values as of now. I know we can use range, but I don't want to go with that. So let's just say we have the daily sales and we'll have some of the values. So let's just say we have 5, 10, 12, 7, What else you can have? Let's just say 8, 9, You can have more values, but let's just say we have hundreds of values. In this case, you want to find out that what was the total cup sold? One by one. So we want to find out, analyze that, and only want to figure out if the sale is above the 5rupees. So any sale which is above rupees, I want to calculate the sum of that. So can we find them out? I guess yes, that is super easy. So you want to find out total cups, but that are, above three rupees. So how can we do that? You, can just go ahead and make it like this. Hey, I want a list comprehension, something like that. But I'll show you a neat trick for that. Let's go with the generator comprehension. In this one we'll go with underscore again, just like a syntax. So for sale in daily, sales, we know this part. We can use conditions pretty easy. We'll call this one as sale, which is going to be above So exactly the same syntax. And what goes into this one? This empty one here? Of course, you get the idea that we get the sale. Now this will feel like that. Okay, we got all the values up here just like this. First of all, let's print this. Let's see what actually goes inside this. This will actually probably surprise. I'll just go ahead and say Total Cups. Yep, that's the one I want and I want to see the result. All right, so no big deal. Python 3, and get like this. So we get this notice here generator object. So it's not usable right now. Generator objects need to be consumed since they are streaming this one by one. If I go ahead and change this, that, hey, I will just go ahead and use this, this will be a whole different story altogether. Now notice here, if I go ahead and run this, this gives you a list directly and that is. Okay, that's exactly what I want. And now further through this list I have to go through with the values I have to say that, okay, let's create a global variable which says total sum. If I want to know the sale addition of all of this, then loop through it all that or probably can use a comprehension again. But what the generator allows you to do is if I go back and turn this up into parenthesis I can use inbuilt methods like filter. There's one method which is sum. You provide a iterable to it and it automatically makes the sum of it. And this will be a memory efficient operation because you're not just throwing all the memory of hundreds of this. The sum is given one by one. So automatically the stream of values are given to it. And once you actually do this, what you're going to notice we get the result exactly what we want. But this is a memory efficient operation. All right, so the whole point of teaching you or giving you a glimpse of generator is so that you understand what happens behind the scene and you also get to know about a little bit on the sum operation which we can do. The sum operation can be done on variety of other things as well. But what we have done here is a very memory efficient code. This is very rare to see that somebody writes that. But eventually you'll see that if you work really good in the python, you, you will write similar code out a similar piece of code. That is it for this video. Hope you've enjoyed this section. Pretty fun, a little bit new, little scary, but we have learned a lot and that's kind of a mixed feeling that we get. That is it for this video. Let's catch up in the next one. Don't forget to rate.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 Generator comprehensions for memory optimization.vtt",
      "originalPath": "genai-cohort/python/06 Chapter Subtitles/05 Generator comprehensions for memory optimization.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0009081763,
      0.013993734,
      0.041499868,
      -0.061113533,
      0.004795696,
      0.00070394104,
      0.013811463,
      0.027804079,
      0.011892746,
      0.03549327,
      -0.0068433406,
      0.011148348,
      0.012934608,
      0.020346692,
      0.113636,
      0.015383617,
      -0.010860936,
      -0.008042629,
      0.024985349,
      -0.022947563,
      0.014383511,
      -0.0074506053,
      -0.006613916,
      -0.010814374,
      0.011762426,
      -0.0044411835,
      0.0057764156,
      0.0060254065,
      0.023772838,
      -0.020076824,
      -0.018929027,
      0.016313896,
      0.0063371803,
      0.008391786,
      -0.000663646,
      0.003326259,
      0.002986846,
      -0.0011531843,
      -0.027003564,
      0.014610705,
      -0.013367282,
      -0.010813907,
      0.0054397457,
      -0.0088593215,
      0.009693663,
      -0.026345208,
      -0.0047898875,
      -0.0136067,
      -0.0070188004,
      0.03042473,
      0.013999099,
      0.0010999897,
      -0.004814266,
      -0.17552704,
      0.019301234,
      0.0067611807,
      0.0028718782,
      -0.0026922247,
      0.014039969,
      0.0064180093,
      -0.019543657,
      0.014884239,
      -0.018852327,
      -0.0113061275,
      -0.030016433,
      -0.012428338,
      0.024817092,
      -0.005647641,
      -0.016328303,
      -0.011759013,
      0.006163217,
      0.017247273,
      -0.016394723,
      -0.0071961298,
      -0.02163895,
      -0.026319122,
      0.008780383,
      -0.018791957,
      -0.0014676031,
      0.0077034854,
      -0.0057498715,
      -0.013562937,
      -0.0053187236,
      0.02939872,
      0.0009924008,
      -0.0010031222,
      -0.038622376,
      -0.01992783,
      -0.0069158524,
      -0.00059509947,
      -0.0074738413,
      0.0062915245,
      -0.031544477,
      0.021840531,
      -0.0129467035,
      -0.0050738007,
      -0.015722169,
      0.027496085,
      -0.024649108,
      0.007630305,
      0.015086172,
      0.0050843577,
      0.0097105205,
      -0.006106828,
      -0.0129436385,
      0.0127565,
      -0.0066488865,
      -0.017648887,
      -0.011356849,
      -0.0012495054,
      -0.0027625284,
      -0.009755535,
      0.0065178107,
      0.013734318,
      0.009854756,
      -0.16839276,
      0.024344204,
      0.0114154285,
      -0.019354125,
      0.032258168,
      -0.013426179,
      0.0014893167,
      0.021060044,
      -0.004617325,
      -0.020507379,
      0.018035969,
      0.006762396,
      0.0029086617,
      -0.0016149406,
      -0.005036511,
      -0.016898353,
      -0.0031842324,
      0.0008664215,
      0.012115025,
      -0.025739716,
      0.013591597,
      -0.0017944225,
      -0.00524644,
      -0.029082147,
      -0.0014703277,
      -0.02178586,
      0.020597864,
      -0.011568408,
      0.02704847,
      0.021756373,
      -0.013799236,
      -0.015975196,
      0.010267932,
      -0.010255902,
      -0.015452233,
      -0.010202246,
      -0.017130466,
      -0.002824718,
      0.001743538,
      0.037345022,
      -0.03863078,
      -0.007971314,
      0.037575096,
      -0.0235168,
      -0.028736053,
      -0.018995777,
      -0.0034597616,
      0.011646481,
      0.022416975,
      0.0027206272,
      -0.0037724196,
      -0.023535078,
      -0.010159734,
      0.020813823,
      0.0072890613,
      0.00075301615,
      -0.025924118,
      0.014340813,
      -0.029189205,
      -0.009164805,
      -0.0051502036,
      0.0022769223,
      0.0003601637,
      0.0018666311,
      0.0012048268,
      0.010255729,
      -0.0022308258,
      -0.013570644,
      0.0060943295,
      0.00095519767,
      -0.008232734,
      -0.017075451,
      0.009638105,
      0.011291596,
      -0.0006435459,
      -0.007380579,
      0.024309259,
      0.04171622,
      -0.003307248,
      -0.0069930577,
      -0.004992486,
      0.014221166,
      0.009034313,
      0.00021689406,
      0.0084870085,
      0.052712318,
      -0.0023949076,
      -0.0010357047,
      -0.022051336,
      0.007055151,
      -0.0046908753,
      0.014793473,
      -0.012655457,
      0.029620871,
      0.004570931,
      -0.006764516,
      -0.016049631,
      0.020244302,
      0.00056290743,
      0.026337087,
      0.014163255,
      0.015703406,
      0.006351579,
      -0.013001779,
      0.00060895376,
      -0.0035374851,
      0.023414016,
      0.0102776745,
      -0.0025155526,
      0.00075377454,
      0.0031468533,
      0.019197848,
      0.0106995925,
      -0.007858703,
      0.01684241,
      0.00617745,
      0.013598058,
      -0.031368226,
      0.001638816,
      -0.01273571,
      -0.0069485367,
      -0.0065415064,
      0.01989578,
      0.034889113,
      -0.006038214,
      0.003807665,
      0.011651557,
      -0.006830038,
      0.007828757,
      0.021919025,
      -0.006835789,
      0.003777988,
      -0.0021356158,
      -0.0069625834,
      -0.032613885,
      -0.007451291,
      -0.022013022,
      0.000030133331,
      -0.02690424,
      -0.022565177,
      -0.017579328,
      -0.023234222,
      -0.025669947,
      0.0022707055,
      -0.015982859,
      0.016333675,
      -0.02063215,
      -0.034446497,
      0.0040070647,
      0.00832067,
      0.0008193508,
      -0.0002151958,
      0.02753512,
      -0.00045845238,
      0.011113803,
      0.008274112,
      0.016340612,
      0.0038519097,
      0.033132754,
      -0.021006985,
      0.019020328,
      -0.0912596,
      0.005950025,
      0.020564817,
      -0.029227478,
      0.008723271,
      0.018510405,
      -0.01643685,
      0.01742929,
      0.0065207304,
      -0.016056301,
      0.006383527,
      -0.001987337,
      0.031108383,
      -0.02629247,
      0.009592064,
      0.00361977,
      0.009443857,
      -0.018788658,
      0.029061474,
      -0.0005727515,
      -0.005452447,
      -0.004007946,
      0.0014173217,
      0.008295766,
      0.018749023,
      0.008754308,
      -0.017758576,
      0.023848597,
      0.0032117318,
      -0.002539441,
      0.001205856,
      0.016735625,
      -0.0067705074,
      0.017620321,
      -0.002622852,
      0.016747486,
      0.0123638045,
      -0.0112961065,
      -0.004169781,
      -0.015988776,
      0.02366902,
      0.012795809,
      0.016423583,
      0.04297375,
      -0.0037086117,
      -0.0007390352,
      0.008032154,
      0.00856057,
      -0.01933837,
      -0.002810681,
      0.0042766533,
      0.0056739342,
      0.016922485,
      -0.00063042034,
      0.010509481,
      0.0025533715,
      -0.0027906538,
      0.00005883427,
      -0.01874051,
      0.00612151,
      -0.004194092,
      0.010741471,
      0.012474943,
      -0.01826228,
      0.019790977,
      0.0049936543,
      -0.004510635,
      -0.01100084,
      -0.007253021,
      0.010993565,
      0.009740368,
      0.004175203,
      -0.0078627765,
      -0.016620323,
      0.007981169,
      0.01265112,
      0.039800856,
      -0.0024680984,
      -0.015094189,
      0.042573754,
      0.008248526,
      -0.017984971,
      0.002271441,
      0.01057682,
      -0.0035676495,
      0.0019690911,
      -0.006843383,
      0.002957872,
      0.014669814,
      -0.002127053,
      0.0117557645,
      0.0057965484,
      -0.02960986,
      0.0050457683,
      -0.03239334,
      -0.009369203,
      0.0153961945,
      -0.024026563,
      0.00029931308,
      0.012108433,
      -0.017946161,
      -0.0072265007,
      -0.017110681,
      0.0085625565,
      -0.020781146,
      0.008697887,
      -0.0055562514,
      -0.005439874,
      -0.009369349,
      -0.03198941,
      -0.020105194,
      0.0021021396,
      -0.021185122,
      -0.017358977,
      0.0039058458,
      0.009119934,
      0.0075974637,
      0.013967422,
      0.01795752,
      -0.014834295,
      -0.009659009,
      -0.0063532754,
      0.0015141679,
      0.004819162,
      0.0031269253,
      -0.0067159105,
      -0.0046967585,
      -0.028845983,
      -0.02358866,
      -0.033762287,
      -0.031133471,
      0.02646242,
      -0.004135326,
      -0.024391241,
      -0.0076142107,
      0.00083327835,
      0.028361969,
      0.017399298,
      0.02326473,
      -0.008641608,
      -0.012135009,
      -0.016727183,
      0.015325601,
      0.012196042,
      -0.009691451,
      0.02300475,
      -0.0018040207,
      -0.0003393019,
      0.00035011643,
      -0.0134557225,
      -0.01732711,
      -0.031793807,
      -0.015829826,
      -0.0011795663,
      -0.0054640993,
      -0.004990226,
      0.0010996774,
      -0.015972301,
      -0.031590812,
      -0.009194381,
      0.0065251966,
      -0.0025919056,
      -0.02295481,
      -0.0020473101,
      0.027254332,
      0.0036312842,
      0.0010780388,
      0.013467913,
      -0.004188927,
      -0.013107987,
      -0.009082658,
      0.0037012016,
      -0.037011575,
      0.010180795,
      0.020836059,
      0.007993675,
      0.0044249096,
      0.014705583,
      0.039662,
      0.0054726517,
      0.0042411545,
      0.0047309874,
      -0.0061145076,
      0.02323993,
      -0.015051407,
      0.013355941,
      0.022489628,
      0.00049319357,
      -0.002069222,
      -0.010237861,
      -0.029007498,
      -0.003382587,
      -0.013935135,
      0.023290899,
      0.0016824641,
      0.021847144,
      0.013559099,
      0.0028443786,
      0.012705196,
      0.013676459,
      -0.009746543,
      -0.02057136,
      0.0072373347,
      0.0013339162,
      -0.0021209058,
      -0.00987627,
      -0.0077546756,
      0.0044739624,
      0.012895063,
      0.0256561,
      0.0068499376,
      0.015843501,
      -0.0045647975,
      0.009395502,
      0.012295049,
      0.019336898,
      0.0016266175,
      -0.019012526,
      -0.018394578,
      0.007116588,
      0.0036147663,
      -0.0118930945,
      0.006788016,
      0.0028501132,
      0.012512893,
      0.004690725,
      0.0013498361,
      0.0051792124,
      -0.005906971,
      -0.004073675,
      -0.011714489,
      -0.011409183,
      -0.01352451,
      0.032429554,
      -0.037161343,
      -0.008244764,
      0.01743455,
      0.009124893,
      -0.025395654,
      -0.0031403333,
      0.009735748,
      -0.030897511,
      -0.018368324,
      0.0042823288,
      -0.0154032875,
      -0.006084963,
      0.014991477,
      0.0017401119,
      -0.019303128,
      0.0032880188,
      -0.006801101,
      0.008485172,
      -0.01266169,
      -0.0005868992,
      -0.0077418447,
      0.0058695967,
      0.0042812033,
      -0.024087967,
      0.008472193,
      -0.004881308,
      0.020072037,
      0.016433114,
      -0.005689824,
      0.042710572,
      -0.015236091,
      -0.014217893,
      0.007740527,
      -0.016919997,
      -0.0136789745,
      -0.113942936,
      -0.0048462586,
      -0.0019926794,
      0.0055186446,
      -0.0149057135,
      -0.0127204,
      -0.021534067,
      -0.012939685,
      0.0036668815,
      0.008523021,
      0.026284238,
      -0.019170875,
      0.0027359244,
      -0.022517398,
      0.0165377,
      -0.028907092,
      0.026637148,
      0.007980749,
      0.0015772376,
      -0.014501665,
      0.009687653,
      0.023478122,
      -0.024552768,
      0.0074248635,
      -0.02525841,
      0.0053218985,
      0.011492542,
      0.009601617,
      0.013696761,
      -0.0068017514,
      -0.043257166,
      -0.009999206,
      -0.004235676,
      0.022096282,
      0.011774534,
      -0.008038251,
      -0.015915876,
      0.012517572,
      0.013128019,
      0.0059485273,
      0.009172384,
      0.008699209,
      0.03729227,
      0.01666117,
      -0.0022531443,
      0.010586388,
      0.04237468,
      -0.023398062,
      -0.0057707974,
      0.030272242,
      -0.01994121,
      -0.0202324,
      0.0075502293,
      -0.008433425,
      -0.011959302,
      0.0005115934,
      0.0187209,
      -0.029978849,
      -0.0038133638,
      -0.0076295305,
      0.016935527,
      -0.0068624164,
      0.008215807,
      0.030413646,
      0.014701973,
      -0.0068708705,
      0.026505662,
      0.0070472416,
      0.010821432,
      -0.0118479775,
      0.011993368,
      0.009454133,
      -0.004560609,
      0.029812522,
      0.011849636,
      0.0005771904,
      0.002611545,
      0.010118907,
      0.0018541894,
      0.018162306,
      -0.027113045,
      -0.01600107,
      -0.056120295,
      -0.009779254,
      0.009164065,
      -0.008227301,
      -0.010274243,
      0.026754152,
      -0.008496532,
      0.017340662,
      0.030093431,
      -0.033482946,
      -0.017836986,
      0.009889863,
      -0.0009075221,
      0.013718366,
      -0.0017977213,
      0.015683651,
      0.01844394,
      -0.0030445924,
      -0.018719286,
      -0.0019852172,
      0.0019049941,
      0.00208351,
      -0.00035752318,
      -0.029899508,
      0.020711692,
      0.015273471,
      -0.011231459,
      -0.0052693747,
      -0.00068515947,
      -0.0022196723,
      -0.0047476524,
      -0.14330739,
      -0.03148014,
      0.012149717,
      -0.0069538956,
      -0.009622134,
      0.0057674716,
      -0.0225717,
      -0.019184116,
      -0.0014583342,
      0.011360611,
      0.004972074,
      -0.020469537,
      -0.024509003,
      -0.012852886,
      0.033382427,
      0.1488732,
      -0.0018063827,
      0.010245854,
      -0.01929193,
      -0.00284681,
      0.0044443486,
      -0.02364244,
      -0.013512131,
      0.013459582,
      -0.017871084,
      -0.00872179,
      0.010438903,
      -0.019188099,
      0.0024124482,
      0.01248305,
      -0.00075237255,
      0.011638843,
      0.0017785139,
      0.015125559,
      0.016355721,
      0.0059427177,
      -0.0036934577,
      0.016167382,
      0.0011251785,
      0.011197745,
      0.042353924,
      0.003571003,
      0.00035768675,
      -0.0060361014,
      0.0073405183,
      0.00006627106,
      -0.022744082,
      -0.0068505835,
      0.001854854,
      -0.013347454,
      -0.020936782,
      -0.052880093,
      0.012287994,
      -0.007594741,
      -0.0074147694,
      0.010214191,
      0.0068412884,
      0.017414987,
      0.0012134612,
      0.019483311,
      -0.027541805,
      -0.0031786256,
      -0.006845977,
      0.009212997,
      -0.010538899,
      -0.013766499,
      0.007691563,
      0.018029952,
      0.017147034,
      -0.0016739541,
      0.0022778865,
      0.02504991,
      -0.024435164,
      0.024862412,
      -0.0075512966,
      -0.010872625,
      -0.014237622,
      0.021024233,
      0.0057683103,
      0.009095523,
      0.0031659573,
      -0.021661356,
      0.013356585,
      -0.019434346,
      0.030569743,
      0.005057,
      -0.0023747957,
      0.007023348,
      0.0055346084,
      -0.01812744,
      -0.005573688,
      -0.008154871,
      -0.010360653,
      0.013329646,
      0.016252395,
      0.01687564,
      0.006164075,
      -0.005131055,
      0.02179161,
      0.0020870697,
      -0.0037323185,
      -0.0005290925,
      0.010986196,
      -0.045164973,
      0.0003087195,
      -0.0013536713,
      -0.019150535,
      0.019822735,
      -0.0014749438,
      -0.0029716871
    ]
  },
  {
    "id": "genai_cohort_python_01_Functions___Reducing_duplicationa_and_splitting_complex_tasks_vtt",
    "content": "Hey there everyone and welcome to the section of functions in the udemy's Python course. So in this course we are learning a lot on Python and further down we want to learn and explore about functions. Now functions are nothing much more than a wrapper. So they wrap your code and make your code reusable. But not only just reusable, it has some more advantages of that. And we're going to study each of those advantages. Not only we are going to study, we do have a use case just like a small story or a mini project. And through that we are going to learn about each individual specification that why the functions are being created. Now functions are known with variety of different names, especially functions methods, you can call them whatever you like, the way how they are defined exactly same but depends on where you are defining. Sometimes the naming might change as you know programmers really love to name things really complex, although they are not really complex under the hood they does exactly the same kind of a job. So in this section we are going to learn about them. So let me take you up on to the section and let me take you onto the screen with the screen, let me take you to the screen with me so that we can study. Now not only that, we're going to go ahead and write the code along with me so that we can actually truly understand the meaning of all of them. So I'll just arrange my keyboard a little so that I don't do much of the typos. So we will have a simple functions and just like that, if I can write them better that would be great functions. There we go. And let's start with pretty much exploring about what the functions are and how do they work first of all. So welcome to the topic officially of the functions. Now by the end of this whole chapter and by the term chapter means I mean to say the whole section because we have a lot of videos in this section as well. You will be able to understand the purpose and benefit of the function. Now this first video is, or probably the first two videos are all about understanding the purpose and benefits of the function. We will learn how we can create a reusable and modular code using the def keyword. I'll show you that part as well. And we want to improve the readability, traceability, maintainability with the function. Now I know these are really big words. What do you mean by readability? What do you mean by traceability and maintainability? We do have a separate example for each one of These words so that you truly understand. Okay, this is why I'm creating the function. Otherwise your regular code is working fine. What's the need? What's the problem? Problem we are solving with the functions. We are going to focus on that. After that we have break down larger task into smaller steps using well named function. The well name here is a pretty much big keyword here. So make sure you pay a huge attention on this. Naming your variables as well as your function is one of the most important tasks. This is written in the PEP of Python as well and it's in general good practice. Your function should ideally describe what it does as descriptive as you want to be. Make it really good so that somebody don't have to ask anybody or read the documentation. The function should say it itself that what we are going to be doing. All right, I hope we are clear with the agenda, what we are about to do. And now we have a lot of tasks. So we have this task 1, 2, 3, and So we have five of these tasks. We'll try to do two tasks in this video and three tasks we're going to do in the next video itself. Let's go ahead and study about. So this is the task where we are going to work on reducing the code duplication. So let me go ahead and move it up here so that we can actually understand this, see it a little bit better. So this is what we have. I can expand this a little. There we go. Looks nice now. So this is for reducing the code duplication. What do you mean by even code duplication? Sometimes the code that we are writing needs to be utilized at multiple places. So why to write this code again and again, Maybe we can wrap that up in a function and wherever we need we can actually call the same guy because the functionality is same. So here is a simple example in front of us that we have. You are managing a busy T stall, which is a good stuff. You receive many orders and want to print each customer's name along with the type of chai they ordered. All right, pretty much very much doable kind of a job. And then it says task. We have to do write a function which says print order and it prints the name and the type of chai that the person wants. Call it multiple times for different customer. All right, pretty good example, pretty good one. So let's go ahead and work on with this. This is the problem that we are solving is reducing the code duplication. So let's go into function create a New file. And call this one as and let's call this one as duplication, because that's what we are solving in this one. Duplication Python. All right, so what is the task that we have to do? First of all it's saying write a function print order, which accepts name and child types. So let me tell you how it's being done. It's a super easy process, don't you worry. Every single function, whenever you're writing, starts with the keyword def, just like we have if else for. So it starts with def. Then you simply go ahead and write the function name. So this is my function name in this case print order. And this is a valid function. We can just put up a colon and I'll come back to write the body of the function that what this function actually does. I can just put a pass for a moment here so that we can come back later on. Fill this up so that syntax doesn't bother us. Now whenever you need to actually call this function, all you have to do now is say print order and execute this function, just like we do. The print just like this. It is exactly same print was already defined by the Python developers. Print order is something that we are defining. I hope you got this. Now we also have noticed that in the print, sometimes we actually put the strings and whole lot of different things. So this will print my name. So print order can also takes these parameters. Notice here, this is there is a different name when you actually put the names here and when you put the names here, although they are the same thing, the value is passed on directly like this. But there is a way how we call them up. And I'll show you what this is. So what you accept here is known as parameters. Yep. And when we actually pass up them here, they are called as argument. Yeah, Note them down in your notebook. It's important to be really clear about what we call each things. Programmers really love that. So we're going to pass parameters here. Let's just say you accept two things. The one is I accept names and I also accept chaitype. You can accept as many parameters as you wish to have. There is no stoppage. You can also get no parameters. You can get 3, 5, whatever you wish to have. Now after that we just simply want to process this. We will learn more about this. Right now I just want to print it. So we'll just say that, hey, whatever the name you pass me up, I'll just go ahead and use this. So for this I have to say this and say name ordered, ordered and the chai type Chai type chai. So this is the message that I want to print. Now the advantage of this particular syntax is that I can just pass on these parameter. For example, just say aman and he is ordering a chai of masala. So this is masala. But I can also duplicate this and say that, hey, another guy is ordering ginger. And who is ordering Ginger? Probably me. And there's another guy who might be ordering something else. For example, let's just say jia and she orders tulsi chai. There we go. And again, we don't have to write this line again. Again you don't get it much because hey, it's just one line. I could have done it here as well. That's okay. But it could be a long printing statement. I'll show you one more example of this. So we will first open this up in a new in the integrated terminal and then we are going to. Let's open this again. Too many terminals opened up. Open an integrated terminal. And now I can just go ahead and say Python. Let's go ahead and run duplication and we can see aman ordered masala chai Hitesh. But now there is a problem. The problem is simple that hey, we don't want this message like this name ordered chai. Let's just say we want to add maybe just an exclamation here so we don't have to write the exclamation three times. This is something which is fun here. And notice here, this is what the reducing the code duplication. We are not duplicating the code, we just are appending this or editing this at one place. Now just by editing it one place I can run the code again and I got the exclamation every single place. This is the advantage of it. And I hope you understand that we are reducing the duplication of the code. This piece of code, there could be like different lines. There could be a call to a database, There could be a lot of things and those all lot of things can be easily done at one place. And whenever you want to use it, you can just go ahead and pass on different arguments. Remember this is argument, this is parameter. So you can pass on different arguments and can just get the value a lot of time. It just saves the time. So this is one of the example that we have now let's go ahead and see another example here. We'll do two examples in this one which will help you to Understand more about the functions and as I say, the more you write the code, the better it is for you. All right, so let's go ahead and get this one up. So what the next problem statement say to us? All right, hope this is much more visible now. There we go. So next one is splitting the complex task. All right, so let's just see what the problem says. The problem statement says you are creating a monthly report for a cafe's sale. Pretty much doable. Instead of putting all logic in one place, break it down. Task and write a function, generate report that calls fetch sales, filter valid orders and summarize the data. All right, so this time we are creating different methods and each method is doing some complex task. And that is also one of the key thing about the functions which is splitting the complex task. So we are splitting that. How do we generate the report? We'll keep this somewhere, safe. How do we fetch the sales? We keep it separate and filter valid. So all of these things are definitely reusable, but they are performing each of the task. And maybe you're working in a team. So each team member is doing a different complex task. Let's go ahead and try to work on this complex task as well. Let's close this one and see how that can be done. Let's create a new file and we will say complex python, not js. All right, so the first part of my problem is to fetch the sales. I don't know how to fetch the sales as of now, but I can mimic the functions. I can just go ahead and call the fetch underscore sales and assume that it does complex tasks. Maybe you provide some CSV file into it and all of that. We'll do that later on. Right now I just want to print a message that okay, sales report is generated or it is fetching the sales data. So we'll just say fetching the sales data all. Right. It has done its job. This is one function. What could be another function that we can use? Another function is filter valid orders all. Right, so this one says my job is filter valid sales. This is what I do, how I do it. We will learn about those things later on in the project, but right now we're just focusing on the function. So I'll just go ahead and say print and this is going to go ahead and say filtering valid valid sales data. All right, and what's the third thing that we have to do? Summarize the data. All right, no problem, summarize the data. So this summarize the data. All it does is pretty simple. Oops, my bad. Summarize the data. Syntax mistake. And there we go. And we are going to go ahead and say this is summarizing sales data. Hopefully that's the sales data. But I hope you can see that how we have splitted the complex task into different this could be one line, this could be hundred lines, or probably thousand lines. There could be more. Usually it's not thousand lines, but I'm exaggerating to make sure that you are understanding. And finally we can do is generate report. When the report is generating, we have to call all of these functions. So it's also pretty doable. It's pretty simple. Let's just say I am going to call this one as generate report report. And in this method all we do is first of all we fetch the sales. So there we go, sales data is done. How complex this is, I don't really care, I am just calling the methods just like I've been doing so far. Filter valid sales. There we go, done that task. And now after that we summarize the data. So there we go. And finally we just go ahead and print the ready, report ready message. So I'll just say print. I will say report is ready. There we go. This is how it's literally easy to work with that. Let's go ahead and execute this as well so that we get the idea. So we'll say Python this time we'll print the complex PI and we forgot to call the function. If you're not going to call the function, this is how it will behave. So this all task is being done. But remember you have never called this particular method. You have called other methods, but these methods are called when this method is called. Pretty good catch that we have done here. So all I have to do is once all of this is done then we have to say what's the name? Generate report. Generate report. Call this method just like you call print. And now these are all definitions. So as soon as you use the def, that means you are providing a definition of function. This is where you use the function. All right, let's go ahead and run this. So notice here it says fetching the sales data. Filtering the valid sales data, summarizing the sales data and then says report is ready. So there we go. Pretty good, pretty fun exercise. I hope you have enjoyed this. So this is the part where we have the basics done. We have three more exercises to be done, but let's go ahead and do them in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 Functions - Reducing duplicationa and splitting complex tasks.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/01 Functions - Reducing duplicationa and splitting complex tasks.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.009880445,
      -0.0027107962,
      0.03337264,
      -0.044134602,
      -0.0067910026,
      -0.016460149,
      0.0014320605,
      0.026381908,
      0.0016094447,
      0.0013870104,
      -0.014329068,
      -0.0023176447,
      0.0026871783,
      0.00705385,
      0.12370664,
      -0.002672646,
      -0.0022115496,
      -0.0005563949,
      0.009153153,
      -0.01855229,
      0.005181579,
      0.011792133,
      -0.009967175,
      -0.0041233683,
      0.010140724,
      0.011764849,
      -0.0018119687,
      0.0019846444,
      0.03310756,
      -0.029965134,
      -0.0099393325,
      0.014465953,
      -0.003130153,
      0.02766445,
      0.008713793,
      0.006466078,
      0.003332191,
      -0.0033822055,
      -0.018986864,
      0.012291691,
      -0.022338176,
      -0.013329295,
      -0.008425286,
      -0.0017101322,
      0.026834644,
      -0.035438098,
      -0.001521625,
      -0.031139163,
      -0.002510175,
      0.02410005,
      0.012603515,
      -0.022893189,
      -0.013614024,
      -0.19130893,
      0.00046656537,
      -0.00048131647,
      -0.017539809,
      0.026566964,
      0.0060966853,
      0.007370758,
      -0.019359907,
      0.020579148,
      -0.044379056,
      -0.009259398,
      0.0074685123,
      -0.03082773,
      0.028216558,
      -0.012273324,
      -0.0031587442,
      -0.0000832334,
      0.03805139,
      0.018991092,
      -0.009082729,
      -0.011183156,
      -0.03371672,
      -0.008688597,
      0.009573302,
      -0.015888087,
      -0.0052519483,
      -0.0063592503,
      0.0070567713,
      -0.0059305383,
      -0.006241687,
      0.005705372,
      0.019584484,
      0.0076969983,
      -0.036296915,
      -0.007779586,
      -0.0039300765,
      -0.009599283,
      -0.0073109684,
      0.022878112,
      0.0043772194,
      0.018851746,
      -0.010296682,
      -0.001995401,
      -0.0027110064,
      -0.0037885767,
      -0.0120758405,
      0.004401239,
      -0.0008547653,
      -0.024996303,
      -0.02793233,
      0.00658292,
      0.0072773504,
      -0.0005783758,
      -0.0077993805,
      -0.012759852,
      0.0025213028,
      -0.016146988,
      -0.01108442,
      -0.013667713,
      -0.012633923,
      0.028913949,
      -0.008516048,
      -0.1894518,
      0.00984133,
      0.006264507,
      -0.018676305,
      -0.0009579474,
      -0.006959806,
      0.004599822,
      0.00832289,
      -0.0037608687,
      -0.008487431,
      0.035025116,
      -0.010005981,
      0.024780968,
      -0.0051745526,
      -0.0006225059,
      -0.024750197,
      -0.021475688,
      0.00094757153,
      0.015268997,
      -0.01164767,
      0.028401323,
      -0.031038031,
      -0.014927006,
      -0.025630698,
      -0.007480266,
      -0.004293447,
      0.01781951,
      -0.0020704556,
      0.030678751,
      0.0090552755,
      0.006302317,
      -0.011885679,
      0.01446462,
      -0.034553565,
      -0.0303758,
      -0.0014897655,
      -0.00975707,
      0.0015294224,
      -0.006309423,
      0.023600554,
      -0.028936254,
      -0.007915991,
      -0.029240672,
      -0.0064974213,
      -0.01967275,
      -0.012912541,
      -0.0038381547,
      -0.0021673606,
      -0.0045674425,
      -0.01718503,
      0.0038560303,
      -0.016748358,
      0.0027946762,
      0.014170217,
      0.017223563,
      0.009221764,
      -0.0073242034,
      -0.001979573,
      0.00036027553,
      -0.008250988,
      -0.006025988,
      0.012851531,
      -0.0024765448,
      0.027772166,
      -0.020148743,
      0.009262254,
      -0.006923141,
      0.02672705,
      0.0005886986,
      0.0018190846,
      0.010949489,
      -0.010804044,
      0.0149150705,
      0.013029214,
      -0.008399626,
      -0.009236015,
      -0.012419669,
      0.013810423,
      0.0072251204,
      0.0077272668,
      -0.026829137,
      -0.003065278,
      -0.004692161,
      0.011056064,
      0.028313136,
      0.021762535,
      -0.021937858,
      0.005049927,
      -0.019578602,
      0.042637326,
      -0.0011834018,
      0.00483264,
      -0.010945146,
      0.024683923,
      0.012610914,
      -0.018233301,
      -0.010066335,
      -0.003490782,
      0.0031355096,
      0.007801144,
      0.0042721573,
      0.018471798,
      -0.006441093,
      0.0064861625,
      0.01776768,
      0.018143654,
      0.0036733912,
      0.011126339,
      0.017505916,
      0.00023137426,
      0.0051228795,
      0.00017605166,
      -0.0031239511,
      -0.00054790446,
      0.019429391,
      0.027128855,
      -0.008633743,
      -0.0034982918,
      -0.011402241,
      0.002423977,
      -0.009336597,
      0.005270416,
      0.029327217,
      0.0061675147,
      0.0033654685,
      0.004044286,
      -0.008762112,
      0.0052254116,
      0.0115834465,
      0.029411249,
      0.012754264,
      0.0019418641,
      -0.0033164062,
      0.0036943275,
      -0.009944143,
      -0.019229766,
      -0.0034651102,
      0.009845502,
      -0.0002387853,
      0.0038016846,
      0.001553499,
      -0.012650185,
      -0.0046613165,
      -0.016051685,
      -0.0066696927,
      -0.020395556,
      -0.008067277,
      -0.017034126,
      0.000661985,
      0.03223237,
      0.007116314,
      0.007759897,
      0.033413094,
      -0.016171603,
      -0.0018347752,
      0.008844168,
      0.011592216,
      0.011747427,
      -0.0035654705,
      -0.018166613,
      -0.005009657,
      -0.08874573,
      0.02047595,
      0.013929807,
      -0.015039319,
      0.0065316493,
      0.000044684497,
      -0.023546407,
      0.027994353,
      0.0023224277,
      0.027734173,
      0.009903496,
      -0.002797368,
      0.02856937,
      -0.0037991724,
      -0.012975002,
      0.021007773,
      0.011007821,
      -0.028719848,
      0.025948204,
      -0.009476085,
      0.0030638922,
      0.004356799,
      -0.0018670977,
      -0.022884227,
      0.017774247,
      0.0037503303,
      0.0025213768,
      0.013037773,
      0.005584715,
      -0.0032586793,
      0.0013740049,
      0.033443194,
      0.001378903,
      -0.011732951,
      0.013465215,
      0.004067289,
      0.0034389682,
      0.00012580684,
      0.016101494,
      -0.0013435594,
      -0.0031896126,
      -0.033211082,
      0.041359387,
      0.028388228,
      0.015421633,
      0.018751223,
      -0.0065442277,
      0.01813187,
      -0.013108903,
      0.0012055201,
      -0.022870544,
      -0.004989171,
      0.009837358,
      -0.008004704,
      0.007316418,
      0.010015362,
      -0.0031840191,
      -0.019937048,
      0.018893756,
      0.021563826,
      -0.0055628503,
      -0.00895517,
      0.00854419,
      -0.0068874485,
      0.0058083986,
      -0.012984877,
      0.008111652,
      0.00046619526,
      -0.016149545,
      -0.008497778,
      0.024658179,
      -0.013402405,
      0.012892228,
      0.0018574366,
      -0.0052244915,
      -0.0071840137,
      0.010983731,
      -0.0073981998,
      -0.028029166,
      0.019444315,
      0.005318747,
      -0.0075793397,
      -0.0009885336,
      0.005967139,
      0.011085521,
      0.0042062,
      -0.001959805,
      0.00087523303,
      0.0064876736,
      -0.011990231,
      0.014530917,
      0.0027308404,
      -0.016449178,
      0.01961513,
      -0.018456876,
      0.016204072,
      -0.026453886,
      -0.005798117,
      -0.01718319,
      0.01994383,
      -0.023577739,
      0.0016114187,
      -0.026731296,
      0.0034664087,
      -0.0074706143,
      0.023316799,
      -0.03344835,
      -0.015789801,
      0.007853446,
      -0.026094142,
      0.01594058,
      0.0041549276,
      -0.02321588,
      -0.0014045474,
      -0.0017180457,
      0.015246739,
      -0.0024565698,
      0.0016284854,
      0.0097816335,
      -0.04258168,
      -0.0045778966,
      -0.019610453,
      -0.026449641,
      0.005904086,
      -0.012133689,
      -0.00964348,
      -0.0027430945,
      0.0037291888,
      0.0026464087,
      -0.020365397,
      -0.02697943,
      0.014014375,
      -0.02310648,
      0.0036106787,
      -0.027642176,
      -0.017164007,
      0.022543462,
      0.032954063,
      0.011931494,
      -0.0074964003,
      -0.01024174,
      0.0059120534,
      0.020663109,
      0.0033016072,
      -0.009759499,
      0.023872102,
      -0.01703122,
      -0.02089717,
      -0.0011048152,
      -0.034293637,
      -0.022531634,
      -0.0040208735,
      0.0028064933,
      -0.002594328,
      -0.013078617,
      0.015790492,
      0.0029626552,
      -0.011835575,
      -0.0011896747,
      -0.02340474,
      -0.01669621,
      0.010421867,
      -0.035991203,
      0.0007197513,
      0.019956045,
      0.005278845,
      0.019453518,
      -0.00023720064,
      0.0121394675,
      0.00079749024,
      -0.0006451149,
      -0.0080739455,
      -0.042033274,
      -0.029657906,
      0.019661495,
      0.0000879737,
      0.006831965,
      0.0014293984,
      0.0051692845,
      0.00520776,
      0.0073492713,
      0.009414591,
      -0.026617508,
      0.013596417,
      0.0012885572,
      0.014921681,
      0.010201621,
      -0.0068056034,
      -0.027259964,
      0.01685246,
      0.024790999,
      -0.025464099,
      -0.0021620167,
      0.008324192,
      -0.0024882674,
      0.01386423,
      -0.015779346,
      0.013789083,
      0.00067771436,
      0.0035067275,
      0.008133529,
      -0.0193567,
      -0.00445328,
      -0.005291961,
      0.018553184,
      -0.0134706525,
      -0.008096693,
      -0.005874998,
      0.010883671,
      0.009889819,
      0.0028108507,
      -0.008920266,
      -0.007242917,
      0.0098399725,
      -0.004664967,
      0.03611953,
      0.011784765,
      0.0048048315,
      -0.035170924,
      0.0034308822,
      0.01315666,
      -0.020793784,
      0.002151858,
      -0.03537303,
      0.016661134,
      -0.0012111716,
      -0.008828951,
      0.005528946,
      0.01250822,
      -0.0028137479,
      -0.013785425,
      0.008001244,
      -0.013407837,
      0.001689747,
      -0.0075125103,
      -0.01434071,
      0.004514646,
      0.016260348,
      -0.0060048182,
      0.017769136,
      -0.0143182725,
      0.0012339137,
      -0.02409338,
      0.008773237,
      0.017523091,
      -0.010726235,
      0.03127219,
      -0.004732295,
      -0.01421988,
      -0.00845351,
      -0.004462872,
      0.0046249465,
      -0.0054892856,
      0.003379686,
      -0.018321382,
      0.02984519,
      -0.013156644,
      0.012304402,
      -0.008694043,
      -0.0039304527,
      -0.0010363318,
      0.009010953,
      -0.0067670112,
      -0.010842162,
      -0.01432938,
      -0.017755501,
      -0.014274533,
      -0.009923778,
      0.023532636,
      -0.12563714,
      0.005543085,
      -0.011835945,
      0.012507087,
      0.006825012,
      -0.018645182,
      -0.005354341,
      -0.0042021023,
      -0.008934268,
      -0.011784325,
      0.039082553,
      0.007380974,
      -0.012947142,
      -0.01314487,
      0.002434951,
      0.001811251,
      0.009710199,
      0.0063855406,
      0.028694158,
      0.0026000862,
      -0.0069674654,
      0.012386749,
      0.009039144,
      -0.00012456467,
      -0.0128997965,
      -0.001852472,
      -0.0048588286,
      0.0027333773,
      -0.008332751,
      -0.030281315,
      -0.034388397,
      -0.0030839622,
      -0.024012947,
      0.006702989,
      0.009107175,
      -0.016393546,
      -0.0204728,
      0.011013885,
      0.015558485,
      -0.0010570817,
      0.0022571727,
      -0.008997623,
      0.0036640943,
      0.008302951,
      0.0013000671,
      0.03776661,
      0.02677962,
      0.0022792628,
      -0.0021639217,
      0.032768052,
      -0.022296498,
      -0.014691549,
      0.018412037,
      -0.028268468,
      -0.019725883,
      0.006500012,
      0.024240203,
      -0.029166717,
      0.0036098803,
      -0.008684254,
      -0.017074946,
      0.008423149,
      0.008166591,
      0.014561969,
      -0.0022397633,
      0.0093699135,
      0.020932337,
      0.013538591,
      -0.0033292274,
      -0.016333917,
      -0.006519937,
      0.0015465055,
      0.003530442,
      0.0041800123,
      0.016004585,
      0.007041029,
      0.017021919,
      0.01167219,
      0.005735076,
      -0.0019832908,
      -0.040602136,
      0.005646902,
      -0.053743154,
      -0.02311051,
      0.016320178,
      -0.01953932,
      0.00850144,
      0.0129200425,
      -0.0051782182,
      0.010449413,
      0.001407168,
      -0.00011256667,
      -0.035974544,
      -0.0067740898,
      0.022265675,
      0.006504897,
      -0.014770785,
      0.003298167,
      -0.003977809,
      -0.020493262,
      -0.032039437,
      0.01142238,
      -0.0011410771,
      0.007973519,
      -0.022743495,
      -0.0028686023,
      0.011725076,
      0.024012193,
      -0.02605094,
      0.008741449,
      -0.014131061,
      -0.0062623117,
      0.0030749575,
      -0.15810874,
      -0.028663557,
      0.010745004,
      0.005899301,
      0.009753409,
      0.01301691,
      0.001865646,
      -0.0060258266,
      0.0016484377,
      0.005583778,
      0.0043890225,
      -0.0073109777,
      -0.02737452,
      -0.022101736,
      0.034541834,
      0.12991637,
      -0.01482416,
      -0.00065068866,
      -0.020470602,
      0.0005940824,
      -0.015501847,
      -0.022784065,
      -0.002496106,
      0.008232524,
      -0.00021964104,
      -0.020647176,
      0.006234379,
      0.0042099776,
      0.001899824,
      -0.014483327,
      0.0077278,
      -0.011175406,
      -0.004761053,
      0.0132466145,
      0.010750005,
      -0.007545004,
      -0.016169902,
      0.011561256,
      0.010626806,
      -0.0012830367,
      0.018592067,
      0.0021640619,
      -0.007826993,
      0.011499938,
      0.0011920682,
      0.0041294475,
      -0.016610041,
      -0.010305318,
      0.0058874106,
      0.01207046,
      -0.002020441,
      -0.052547988,
      0.012002571,
      -0.017763332,
      -0.012571833,
      0.017049782,
      0.008413613,
      -0.000588197,
      0.013123495,
      0.010214236,
      -0.007531766,
      0.005075548,
      -0.0062003876,
      0.011947815,
      0.01679853,
      -0.012455569,
      0.017500753,
      0.018872859,
      0.003876906,
      -0.0026541702,
      0.012375675,
      0.016878573,
      0.0067956313,
      0.007785093,
      -0.00938474,
      -0.006908627,
      0.015937427,
      0.03146299,
      0.009242648,
      -0.010082547,
      0.00838064,
      0.006743097,
      0.014020164,
      -0.011459083,
      0.0027845528,
      0.010192038,
      -0.002329706,
      0.03119113,
      -0.00076727103,
      0.004629167,
      -0.005212739,
      0.0014573069,
      -0.02541948,
      0.011858222,
      -0.005993618,
      0.0024313633,
      0.0119019365,
      -0.03431903,
      0.024738563,
      -0.019429063,
      0.00860154,
      -0.0026158136,
      -0.026646648,
      -0.022241917,
      0.015720585,
      -0.0059378836,
      -0.011796061,
      0.025895871,
      -0.0033060436,
      -0.010052271
    ]
  },
  {
    "id": "genai_cohort_python_02_Functions___3_more_features_vtt",
    "content": "All right, so let's go with three more features of functions in Python. So it's better actually directly to go onto the Blackboard or our tutorial guide kind of a thing. So the next one is hiding implementation detail. Now this is not something that we want to protect something there are other mechanism of protecting. This is like somebody should not be able to see what complexity of the function is going on. Once it's done, it should be done how, how we are doing it, how we are managing the complexity that should be usually hidden by other people. We have implemented our brain once. We don't want to get again with that. So let's go with this one. This is another challenge that we have is you are building a simple app that registers the user. We will do that later on as well. It's fun. You want to separate the concerns and by the way, separations of concern, you will hear that a lot. This is a common software design pattern as well. Getting input, validating it and saving it. So there are three jobs that we have here. Get the input, validate the input and save that to the database. I don't know what that database is. I really don't care. Whenever I want to save some information in the database, it should be just a method available to me with of course more information that I can give it to you later on. But let's go ahead and design this. So let's call this one as hiding. Let's close this. This one is and we'll call this one as hiding py all right, so what I need to do step one, get the input. All right, pretty simple. We have done this kind of example as well. We'll call this one as get input. It doesn't pass on any parameter. That is totally fine. We just want to have a definition which says printing and I will just say getting user, input. User input might come from terminal, might be a web page. I don't really care about the complexity of it. Another one is validate the input. There we go, nice and easy. Now how the validation is being done? Probably we are using regex, also known as regular expressions or any other Mechanism. Don't really care about it, just want to hide the complexity of it. And I will just say validating the user, info, short for information. And the last task is save it to the database. So let's define the method, call it as save to db, short for database. And we'll just go like this. Don't really care if it is MySQL MongoDB, whatever that is. The job is, whatever the data, you give it to me, I'll just save it to the database. I'll call this one as saving to database. So there we go, we have separated the concerns as well. Now, finally, let's try to register a user as it says write register user. So let's call this one as register, user, and again, this is also a common pattern. Sometimes you use underscore, sometimes you use camel. Cases. No right or wrong. Each one have their own way of writing the things. There is no right or wrong in this case. All right, the step one, get user input. All right, got it. The step two, validate the data. All right, let's validate the input and then save it to the database. Save it to the database and finally says user registration complete. Simple. It is user registration complete. All right, and then don't forget to call this one. Otherwise if you are not calling it, that means you are not running it. So register user. Let's of course validate it by running this. So I'll just go ahead and say Python wants to run hiding. And there we go, getting the user input, validating the user info, saving to the database. Saving to the database. And finally saying that user registration is complete. Pretty good, isn't it? So this is how you practice defining the methods, and we are doing a lot of practice by these examples. Let's move on to the next one which says improving the readability. First of all, I need to improve this by making this a little larger one so that readability improves. There we go. And we can actually move this just right there. Looks good. Now you sell different sizes of chai. All right, Pretty good. Instead of writing down formulas everywhere, create a function. What it does, it simply goes ahead and says calculate bills. You provide it cups and price per cup returns the total bill. Use the function for multiple orders. This is a very, very interesting problem. Why? Because it says return total bill. So far whatever we are doing is just a print statement. The function itself prints something. It doesn't return you anything back you cannot hold. Like whenever a function returns anything that you can hold in the variable because that's being returned, but but so far is just printing. Printing and returning the value are two different concepts. Let me show you that. So what do we call this? Readability. Yeah, that would be good. Let's create a new one. Call this one as 04readability. Hope I wrote that correct. If not, make sure you correct me up. All right, so we simply Go ahead and define a method that says calculate bills or bill. And what we expect is you pass me a child that how many cups are there? So cups and we'll say price per cup. Price per cup. All right, pretty good. Now based on the information, we want to actually calculate the total bill. It's super easy math. We can just simply take the cups and go ahead and multiply it by, price per cup. Now you could have formatted this as well. Like I will just use the printf formatted string. But when we use the keyword return, that means I don't want to print it. Maybe you don't want to print it. You want to store that in the variable and do some more processing on it. That's totally okay. So this one is never going to automatically print anything at all. Let me show you. What does it mean by that? So if I go ahead and say calculate bill and I provide that, hey, there are three cups and each cup cost rupees. Let's try to run this. This is the most important part of the whole video. And let's call this1 as Python and this will say04 and run this. Although we are calling it, we have seen that in the last time that when we call it, it prints because we asked it to print. This one simply says, hey, we just returned the value. So in such cases you can just go ahead and create a variable and hold this value. So I will call this one as my bill, just like this. And we will hold this value because it's returning me, it's giving me a return value. And then later on I can go ahead and print this, my bill. Because the instruction now is to print bill. If I run this again now we get the 45, which is actually correct. But because we asked it to print, we never said that the function will itself print. Another kind of a thing that you are going to get with this is some people actually directly use it inside the print statement, which is also totally fine. So let's just say I call it like this and I will say order for table two. And just like this. And then, separated by comma, you can actually call this method directly here and provide the details. For example, there were two cups expensive T for rupees just like that. In this case, since we have asked the order to be printed, it just goes ahead and print that. So I hope you got this. There is a huge, huge difference between, both of them. And again both of them have their use cases, their ways of places where they can be used. But remember, the return is a very, very interesting concept that we have. All right, you got a lot of things in this one last one that we have. Definitely need to make it a little bit bigger so that we can see that easily on the screen. There we go. Looks good now. So this one is for improving the traceability. Each one of your functions should be traceable. They should not be like your logic should not be scattered into thousand places. So if you make a mistake in one of them, you, you can fix it at just one place and go with that. And this is one prime example of it. Your shop adds a 10% of VAT. Now VAT is no longer kind, of a thing in India, but I'm pretty sure it is there in the Europe and other countries as well. But consider this like an equivalent of GST or vat, whatever you think, you just add some tax on it. So 10% tax on every order. You want this to be consistent and traceable, right? Add vat. We have to give the price and what is the VAT rate and use it to compute the final price for three orders. So we have to actually give at least three examples for it. And we will use loop for it. We'll try to get our concepts of loop again, let's call this one as a new file. We will have a oops underscore trace py. All right, so the step one is let's create add vat as a method. What it gives us is a parameter price and the VAT rate. Let's call the same. You will give me price and VAT rate. So whatever the price and VAT rate you give me, I will just go ahead and return this. Not printed, but I'll return the order. So for this, simply go ahead and say that price, this is the price that I have. And this is going to be multiplied by whatever the VAT rate is. So what we're going to do is we're going to say plus VAT rate and we're going to go ahead and divide it by so you get the percentage in the VAT rate. All right? So pretty basic maths. If you don't want it, you can do different maths as well. That is totally, totally fine. But what I'm doing is I shouldn't be explaining this. I shouldn't be explaining this. You can use any other methods. If you prefer to multiply it by zero point, whatever the VAT rate, you can try that. But let's just say we have the orders and in the orders we are going to go ahead and put up an array or list in this case. So first order is of 100, then we have 150, then we have maybe So we can use a simple loop to calculate that. So for price in orders, just like that, feel free to call it whatever you like. Order in orders, price in orders, whatever you want to have. And for this, for each one of them we are going to go ahead and create a final or final amount. Final amount would be better word here. And that is calculated by our method which says add vet. And for this you go ahead and say the price is going to be like this. So we can just go ahead and give this as a variable just like that. And we'll say we added 10% of the VAT. So there we go, we have added the and then finally we go ahead and print out a nice message print. There we go. We'll use a formatted string and we'll go ahead and say original, original and the original value is price Price final with VAT is going to be final, not finally. Make sure you keep an eye on that or, or in this case final amount. There we go. Don't worry about this. It's just auto formatted. This is the code that we have. My code auto wrap setup in case you also want that. Click on the view and we have this world wrap. Pretty easy. Let's go ahead and run this and see what happens with this. Have we done any mistake? This one is traces. And there we go. So original was and we have added Pretty good. Accurate 10% VAT. 150, again pretty good. Pretty easy calculation for this we got easy calculation. So at least we can verify that 10% VAT is getting added. So whatever the math formula we have added it actually is working. So this was all about functions. You don't realize it but we have covered so much of in depth about the function. We have covered about the readability, reducing the complexity, segregation of the complexity also known as separation of concern. We have also seen how return and print are different in functions, how to define a function. So so many activities, so many mini challenges we have done. I hope you have enjoyed them and make sure you rate us as well because your rating is something that will help me to make the best course in the world on Python. That is it for this video. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 Functions - 3 more features.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/02 Functions - 3 more features.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.022292618,
      -0.011696813,
      0.041463897,
      -0.056154564,
      -0.0128130205,
      -0.02869452,
      0.006898904,
      0.028361838,
      0.014773142,
      -0.0050936905,
      -0.002338205,
      0.0029844346,
      -0.0065949545,
      0.015592577,
      0.12753999,
      0.017438184,
      -0.008080666,
      -0.00767905,
      -0.000544726,
      -0.017248033,
      0.0114180315,
      0.0055082147,
      -0.01833971,
      -0.006472333,
      0.009249184,
      -0.000070625356,
      0.013075469,
      0.025414728,
      0.037910424,
      -0.020026706,
      0.0018634915,
      0.012934559,
      0.0063593616,
      0.024182593,
      0.0022563518,
      0.013014301,
      0.0029279864,
      -0.004278776,
      -0.00890075,
      0.020696778,
      -0.013975083,
      -0.007462314,
      0.0026457,
      -0.014838759,
      0.01575383,
      -0.031755205,
      -0.0070911217,
      -0.018343795,
      0.0039116405,
      0.028629076,
      0.019369684,
      -0.032796998,
      -0.016959244,
      -0.18976372,
      0.016766978,
      -0.008864587,
      0.0013955071,
      0.0035198908,
      0.017986951,
      0.01026662,
      -0.020605305,
      0.022850119,
      -0.023118934,
      -0.00007292082,
      -0.002264724,
      -0.021122858,
      0.012006335,
      -0.008657389,
      -0.0082776565,
      -0.0081518525,
      0.03146902,
      0.034193892,
      -0.016201258,
      -0.016937455,
      -0.019130463,
      -0.029294461,
      -0.0009034808,
      -0.022115929,
      -0.009600879,
      -0.007997967,
      0.0072637647,
      -0.001663561,
      -0.0022889175,
      0.00008204368,
      0.01868366,
      -0.0040248926,
      -0.02910293,
      -0.007855709,
      0.007069959,
      0.0003345756,
      -0.00082746067,
      0.023410432,
      -0.0058271843,
      0.013074921,
      -0.026541704,
      0.0028631561,
      -0.0056185722,
      0.0010554359,
      -0.014586322,
      -0.010071636,
      -0.006989314,
      -0.015059016,
      -0.021074865,
      0.0012938301,
      -0.012106053,
      0.0036496627,
      -0.0033264786,
      -0.0051407763,
      0.0075138216,
      -0.0037338487,
      -0.018988963,
      -0.009462059,
      0.009889395,
      0.027509758,
      -0.0008729561,
      -0.17915773,
      0.015884183,
      -0.017961562,
      -0.012740948,
      0.0083369715,
      0.0071357423,
      0.0139938425,
      0.012752225,
      0.010447478,
      -0.015137806,
      0.024524994,
      0.00458267,
      0.01424451,
      0.006003062,
      0.0017596406,
      -0.035050925,
      -0.01760102,
      -0.004134066,
      0.0077703507,
      -0.006907669,
      0.021243148,
      -0.031981654,
      -0.01303191,
      -0.012615969,
      -0.006457338,
      -0.014930319,
      0.022106064,
      -0.0015130936,
      0.026652692,
      0.016333807,
      -0.0073873005,
      -0.011807587,
      0.015264335,
      -0.03015786,
      -0.028107863,
      0.012235901,
      -0.008064024,
      0.009350486,
      0.0031087412,
      0.027722266,
      -0.0279785,
      -0.0057307463,
      0.008161324,
      -0.00096099003,
      0.0070078303,
      -0.013297196,
      -0.00049414276,
      0.015082694,
      -0.0063649244,
      0.00405505,
      0.006207343,
      -0.011530272,
      -0.0036774715,
      0.01749312,
      0.022139966,
      0.0017458006,
      -0.0113280425,
      0.009628863,
      -0.0010961915,
      -0.009568247,
      -0.0182925,
      0.011292407,
      -0.0027804193,
      0.020414917,
      -0.0100692455,
      0.013676112,
      -0.003841649,
      0.013733463,
      0.002509534,
      -0.009467687,
      -0.0046682437,
      -0.009612536,
      0.013508903,
      0.002896375,
      -0.001324938,
      -0.015238572,
      -0.0024513428,
      0.007679955,
      -0.010032196,
      0.006674013,
      -0.037019867,
      0.0056126807,
      -0.008822602,
      -0.0037331858,
      0.013484199,
      0.036370397,
      -0.016755383,
      0.011629786,
      -0.017365932,
      0.0127299335,
      -0.019214068,
      0.007298501,
      -0.014526146,
      0.023493817,
      0.0062382924,
      -0.021722538,
      -0.0021197165,
      0.0042487415,
      -0.014893798,
      0.0010133975,
      -0.003978025,
      0.012309581,
      0.000869673,
      -0.007040848,
      0.017925087,
      0.0023250696,
      0.018956842,
      0.0005947666,
      0.015551964,
      0.009339306,
      -0.0130512575,
      0.0191162,
      -0.00580072,
      0.0065895994,
      0.018808806,
      0.029350996,
      -0.004871181,
      -0.023738695,
      -0.002775646,
      0.0100216875,
      -0.012087581,
      -0.008073576,
      0.027580801,
      0.009674834,
      0.021067675,
      0.012066408,
      -0.0026890447,
      0.010713601,
      0.0011653637,
      0.028365308,
      -0.00087060157,
      0.0092623895,
      0.001485227,
      0.0037468686,
      -0.0109270485,
      -0.022506867,
      -0.018184531,
      -0.00057363923,
      -0.0066847126,
      -0.0041129673,
      -0.016232105,
      -0.033350296,
      0.004063357,
      -0.012081353,
      -0.018655133,
      -0.0073821573,
      -0.012080239,
      -0.012774759,
      0.0021473304,
      0.018166382,
      -0.013477737,
      -0.01473498,
      0.026525,
      -0.009273249,
      -0.0011128713,
      0.015587345,
      0.022990428,
      0.0074125915,
      -0.014615073,
      -0.012987023,
      0.011841103,
      -0.10552974,
      0.026178785,
      0.016236795,
      -0.01570085,
      0.002943917,
      0.009880858,
      -0.019691173,
      0.01881089,
      -0.0033892228,
      0.014327258,
      0.0021622349,
      -0.012807548,
      0.015922336,
      -0.0042805322,
      -0.014695426,
      0.006248157,
      0.013274624,
      -0.015482231,
      0.02700451,
      -0.0036297478,
      -0.00039340655,
      -0.014147239,
      -0.0011334898,
      -0.004464,
      0.018573951,
      0.0075578983,
      -0.0008097031,
      0.02215143,
      -0.0010479222,
      -0.0032330013,
      -0.006276782,
      0.027530394,
      -0.000112520414,
      -0.010146766,
      0.012388964,
      0.01059034,
      0.011403589,
      -0.009046783,
      0.01877555,
      0.0032824553,
      -0.0012290509,
      -0.021766435,
      0.02637553,
      0.031077769,
      -0.0020776654,
      0.02756634,
      -0.0071421494,
      0.01902297,
      -0.021209668,
      -0.015978158,
      -0.01920729,
      0.015087749,
      0.015843403,
      -0.004939487,
      -0.00087970606,
      0.013220923,
      0.0067539304,
      -0.013081683,
      0.008961518,
      0.014088096,
      0.002122871,
      -0.00030986543,
      0.00016641003,
      -0.0074173566,
      0.0074980697,
      0.010251672,
      0.013964143,
      -0.0015443596,
      -0.02356177,
      -0.0018898007,
      0.022411399,
      -0.009532739,
      -0.0049764737,
      -0.010982361,
      0.005893578,
      0.010362168,
      0.03118695,
      -0.013923378,
      -0.014424431,
      0.03407086,
      -0.00064890314,
      -0.014714606,
      -0.00045751227,
      0.01018114,
      -0.025961632,
      0.007880328,
      -0.0011320411,
      0.013211491,
      0.01627791,
      -0.02092498,
      0.017034968,
      0.0054206126,
      0.00018297076,
      0.0067421123,
      -0.016799519,
      0.019068746,
      -0.028085804,
      -0.008039329,
      -0.020239703,
      0.012159693,
      -0.002039301,
      -0.0036039772,
      -0.03195028,
      -0.0057122796,
      -0.009723824,
      0.01605819,
      -0.024766706,
      -0.00012108077,
      0.0045763417,
      -0.009597132,
      0.013861542,
      -0.0042143627,
      -0.030663526,
      0.0029650307,
      -0.023962308,
      0.018244544,
      -0.007678094,
      0.010397732,
      0.016961291,
      -0.030209344,
      -0.004860425,
      -0.012527362,
      -0.00784412,
      0.016454529,
      -0.015055418,
      -0.0027771043,
      -0.011282959,
      -0.00016100236,
      -0.010373979,
      -0.017598713,
      -0.034173094,
      0.03460861,
      -0.025772475,
      -0.00594273,
      -0.004024864,
      -0.019893423,
      0.030154461,
      0.017708277,
      0.007774832,
      -0.016087882,
      -0.0015546487,
      0.0019896156,
      0.010380437,
      0.010306687,
      -0.008525711,
      0.032711804,
      -0.0021188217,
      -0.013045473,
      0.011844509,
      -0.026615048,
      -0.028565966,
      -0.0008387742,
      -0.013968728,
      -0.000096950804,
      -0.0027197932,
      0.0126551185,
      0.0031859553,
      -0.010228246,
      -0.019516528,
      -0.026588913,
      0.008114382,
      0.016007649,
      -0.019832222,
      -0.00028405536,
      0.022360299,
      -0.0042754337,
      0.0007317375,
      -0.001749362,
      0.012369481,
      0.005192136,
      -0.0055358903,
      -0.005953147,
      -0.03807558,
      -0.019984465,
      0.010618248,
      0.014389097,
      0.01650458,
      -0.0077325986,
      0.026559645,
      0.00623587,
      0.012104004,
      -0.0031537556,
      -0.010024378,
      0.008549657,
      -0.000864007,
      0.014964665,
      0.023127606,
      -0.0022529233,
      -0.037223253,
      0.009531937,
      0.013731684,
      -0.026055604,
      0.006113252,
      0.025744664,
      -0.0004136691,
      0.026727136,
      -0.008080739,
      0.013383295,
      -0.010903013,
      0.010640277,
      -0.0004889692,
      -0.026195547,
      -0.004317307,
      -0.008335005,
      0.011259049,
      0.0026195685,
      -0.005084226,
      -0.00781897,
      -0.0027211825,
      0.0023388055,
      -0.016327119,
      -0.005311168,
      0.0017581212,
      0.018372368,
      0.020626066,
      0.040451113,
      0.002674849,
      0.0070654186,
      -0.027272677,
      0.000064884654,
      0.0044165873,
      -0.013017606,
      -0.0000058678643,
      -0.012385332,
      0.014783701,
      -0.010591733,
      -0.007963965,
      -0.0031878524,
      -0.0056108,
      0.011948757,
      -0.009101691,
      0.0040847585,
      -0.027436731,
      0.00240272,
      -0.032718133,
      -0.008212786,
      0.009284082,
      0.03404751,
      -0.011743233,
      0.013547916,
      0.005881734,
      0.0028628598,
      -0.019427078,
      -0.0045166602,
      0.0140046105,
      0.0017681828,
      0.023431245,
      -0.012064904,
      -0.010415324,
      -0.0018635074,
      0.00068667915,
      0.019991959,
      -0.015347271,
      0.009839382,
      -0.011806657,
      0.029873364,
      -0.01864403,
      0.001753326,
      0.00466855,
      -0.0070945686,
      0.0003861166,
      0.010117743,
      0.0039983173,
      -0.004923471,
      0.009285301,
      -0.026703166,
      -0.002996545,
      -0.001734527,
      0.013821598,
      -0.13662004,
      0.003819327,
      -0.026474878,
      0.006136677,
      -0.016038906,
      -0.0039851894,
      -0.0038880212,
      -0.005753571,
      -0.0001452506,
      0.002762092,
      0.023901043,
      0.00821746,
      -0.0028102056,
      -0.017208371,
      -0.0006044634,
      0.0030014361,
      0.015103496,
      0.0071581695,
      0.029871123,
      -0.009727672,
      -0.00790631,
      -0.0008964094,
      0.010912643,
      0.0030586794,
      -0.017872265,
      -0.012233248,
      0.0077407965,
      0.0027842217,
      -0.007750601,
      -0.028280329,
      -0.05026054,
      -0.0039050549,
      -0.0010205201,
      0.019444171,
      0.0053465874,
      -0.0039119693,
      -0.0065455106,
      0.009959562,
      0.011835735,
      0.009480306,
      0.0056765457,
      -0.012873113,
      0.028243612,
      0.010056766,
      -0.004524747,
      0.024184301,
      0.023459,
      -0.018175984,
      -0.0026940766,
      0.02236787,
      -0.024809837,
      -0.019442383,
      -0.0010999297,
      -0.031234806,
      -0.005665026,
      -0.01017001,
      0.015878435,
      -0.020014804,
      -0.015882043,
      -0.0052221245,
      -0.0040528527,
      0.014764704,
      0.0065199267,
      0.023089577,
      0.015656268,
      0.007596332,
      0.012875527,
      0.018583825,
      -0.0022924838,
      -0.0010940749,
      -0.018378995,
      0.0101884315,
      0.0034520999,
      0.031523116,
      0.019171687,
      -0.0126960585,
      -0.0038821655,
      0.004303676,
      -0.017482182,
      -0.0021032903,
      -0.03822847,
      0.0177626,
      -0.058556672,
      -0.004918869,
      0.00829864,
      -0.013583682,
      -0.0018403059,
      -0.0036179367,
      0.0018009383,
      0.021769393,
      0.0039940355,
      0.002496929,
      -0.023905486,
      -0.011889996,
      0.0017520842,
      -0.009180516,
      0.004255697,
      0.01635412,
      0.0009441782,
      -0.018412756,
      -0.039686397,
      0.009293529,
      0.004668558,
      0.009919642,
      -0.0088309655,
      -0.013493299,
      0.006073293,
      0.015719555,
      -0.013915661,
      -0.0012187661,
      -0.011949455,
      -0.008717877,
      0.00962544,
      -0.15049905,
      -0.006697709,
      0.0061571244,
      -0.003708064,
      0.0027742465,
      0.005596003,
      -0.0052974573,
      -0.009538893,
      -0.0026584696,
      -0.00010047823,
      0.0020982886,
      -0.018263856,
      -0.01617052,
      -0.008959831,
      0.03181368,
      0.13207579,
      -0.0125974305,
      -0.0077573517,
      -0.012726251,
      0.00608261,
      -0.003191434,
      -0.010602532,
      -0.030443514,
      0.0019313275,
      -0.0009788228,
      -0.029951874,
      0.016646687,
      0.00022951256,
      0.0018683034,
      -0.0025244958,
      -0.0032361518,
      0.0018035739,
      -0.00028196332,
      0.02497584,
      0.009290138,
      -0.006198272,
      -0.0018395756,
      0.019316202,
      -0.010356626,
      0.0003132757,
      0.029906575,
      0.009881644,
      -0.00083563564,
      -0.002535806,
      0.012786167,
      0.00854095,
      -0.0047319094,
      -0.021621859,
      0.018598553,
      -0.0031722249,
      -0.007287496,
      -0.054716095,
      0.0048018703,
      -0.009109591,
      -0.009812391,
      0.019912804,
      -0.0017743832,
      0.021730227,
      0.0057774563,
      0.020628227,
      -0.014051381,
      -0.0055103307,
      0.0044036633,
      0.009666241,
      0.007162479,
      -0.0013152647,
      0.014996801,
      0.01746792,
      0.015971178,
      0.0029610058,
      0.0049966243,
      0.020287178,
      -0.0013851596,
      0.016511723,
      0.0030038995,
      0.004250288,
      -0.0017230476,
      0.024210975,
      0.013051975,
      0.0056235064,
      0.011739722,
      0.0036815493,
      0.00014113908,
      -0.007186357,
      0.011299017,
      0.0039256336,
      0.0016505411,
      0.017925791,
      -0.01029766,
      0.0009813037,
      0.0068412093,
      -0.01248056,
      -0.01553506,
      0.015227428,
      -0.013051004,
      0.005022737,
      0.01815284,
      -0.031410616,
      0.0444435,
      0.008823252,
      -0.014203311,
      -0.004567989,
      -0.018861635,
      -0.023985663,
      0.01911764,
      0.008829331,
      -0.0031592962,
      0.017866699,
      -0.0009297283,
      0.0034907458
    ]
  },
  {
    "id": "genai_cohort_python_03_Scope_and_named_space_in_functions_vtt",
    "content": "Next up in the world of functions we are going to learn about scopes. This is fun topic and too much theory in this topic will make sure that you are absolutely confused. We are not going to do that with just a simple example and moving after the example, we'll just write the code. The code will make all the doubts absolutely clear. And that is the difference between people who teach theory too much and people who have worked in the production. They like to show you the code first. And I'm a guy who have always been into the production for as long as I remember. So I'll just show you the code and you will love this one. For this one, all I need is two things. The first of all, your undivided attention and focus on the screen itself. I'll remove myself from here so that we can focus just on the screen. The second one is please do rate this course as well. I know I've said it many times but you know, a lot of people doesn't rate and this is not really great. So don't worry, I'm just here, I'm just trying to make sure that you focus on the screen more. So we'll just go on that part. So what are these scopes and what does it even mean to have something in the scope itself? So this is pretty, fun. Let's take the example. Imagine you are running a bustling chai cafe. It's called as, let's just give it a name as well for fun. Let's call this one as Global Sip. So this is your cafe name. Pretty fun name. And each team member has their own notepad for the order. So let's just say we are modern, we have the apps for, for orders. So we have one app which is with the team and there is another one which is required by the owner as well. So this is owner, owner. And this owner has an app. And again this app, let's just say this, we call this one as Master Notepad. So this is Master Notepad. This is the app which is owned by the owner and he's responsible for placing all the orders in the kitchen itself. But the team also got their own notepad as well. And each one of the team member will have their own notepad. Maybe we have two workers in the cafe. This one has its own notepad and this one has its own notepad. So this is run and this is also there. So this team member one which gets a notepad and this one also gets a notepad, another one. Now if the kitchen guy writes down, let's just say two masala chai in his own notepad, this guy. It doesn't change your master order. So whatever is written here, it doesn't change it there. Although these are called as notepad, this is also notepad. Let's just say this is not master notepad, this is also notepad. But taking an order here doesn't change this. This has right now no relation with this guy. So again, let's just say for the fun stuff, let's call this one as notepad. Why to call it Master Notepad. This can also be just a notepad and this is fine, this is absolutely fair. So I hope you get this. Why the global scope and local scope whole thing actually comes up in the world of thing. And this has a name itself, we call it as scope, but there is another name for it and this is called as scopes. Surely that's the one. And this is known as name resolution. The word whole name resolution means which one should I resolve to? Is this notepad I'm talking about? Is this notepad I'm talking about or is this notepad I'm talking about? In the world of Python we have a whole lot of ranges and names and all these things. So first of all the scope that you're going to study is known as local. This is called as inside a function. This is a very common one. So this is the first one we are going to study. We will have a lot of examples of this one. Then we have enclosing and yes we are going to study. This is actually from outer function, if nested and yes there could be nested functions as well. So if this is nested, so this is local, this is enclosing. But we have another one. Yes we do have. This is known as global. So this is like a master notepad, but this is like global. We call this as top level, script or sometimes module, whichever makes sense. And also we have another one, this is the final one, don't worry on that part. This is called as built in. So there are some built in things which are reserved like the print. I cannot use the method name print. But yes, there are many of such these scopes and name resolutions. So let's go through them one by one. Again the first one is local, the second one is enclosing or from the outer one. We'll study about that as well, don't you worry. And then we have the global one and then we have the built in one, or rather it would be said not built in. Built in. Built in. That's correct. So I think it's enough. That's all what we are going to study. Let's go ahead and now write some code. Coding always gives more positive response. So let's call this one as new function. We are into the file and call this one as scopes py good stuff. I'll shut up my AI as well so that it doesn't bother us. So let's just say in this very first example we have a simple mechanism of serve chai. That's good enough. And this is our method name. Let's go like that. In this I go ahead and declare a variable that says chai type. And there could be a variety of chai. Let's just say this one is Masala chai. All right, make sure that you understand. I can write the comments like this. This is known as local scope. Local scope simply means the validation of this variable is just inside this method. So I can just go ahead and use it like this. I can say formatted string and I can call this one as inside function and then just use this variable name. This is chai type. This is completely valid. But what if there could be a case that you have declared this chai type here as well? And you call that hey, I will prefer lemon, which is my favorite one. And I call this serve chai. So what do you think this print method is going to refer to? Is it going to refer to this chai type or is it going to refer to this chai type? And again on top of that, if I write the same method again here or the same print statement here with the formatted string and I'll call this one as outside format function. And then we're going to again say chai type. Pretty good. This is definitely confusing and you'll see this quite a lot. One thing you have to remember, whenever you have created a variable inside a function, the scope of it is just within the function, never outside of it. So all the people who are outside of this function, maybe another function don't know what you have done it. This is like you have worked inside your home. So anytime this outside function tries to refer to chai type, it will refer to something which is outside only it cannot refer to inside here. And we'll see that in action. Now let's go ahead and run this, we'll go ahead and say, hey python, let's run this file and you can see inside the function there is masala outside the function. It's level. But what if I go ahead and don't have this chai type? Notice here immediately we have an error that I don't know what you're talking about. I have zero idea what this chai type actually is. So you have to provide a scope for which it can access. It can reach out. And I can only reach out because I am declared an outside file or. Or in the global scope. Yeah, this whole file is a global one. Here it works like that. And as I mentioned, the scope local inside the function. This is exactly what it means. If you have declared something inside the function, it's only accessible inside the function the moment you move it outside. It's not fun. It's not available. Let's also go ahead and talk about the nested function as well. We can create it here. No need to create too many files. I'll now restrict myself from creating too many files. But we'll still write a lot of code. Let's just say we have an example of chai counter. Pretty solid examples related to all the chai. And let's just say we have a chai order. The chai order for us this time is Lemon. Lemon, I can write that. And this one, we call this one as enclosing, scope Scope. So that means the scope that where this chai order is available within the function. That's the whole meaning of enclosing scope. Now let's just say further down we have another function designed in this function. This is interesting one, we call this as chiorder again. And in this I want to say, hey, my chiorder again function inside a function is going to be Ginger. Ginger. And then I go ahead and print this. So let's just say I have a print statement and I go ahead and say inner just to make sure that you understand that we are talking about this chorder chiorder. So we have two chi order and just with the color contrast you can imagine, yes, we are still inside this function and we are talking about this. Only now the moment I go outside of this, this is where people get confused. The moment I have returned this one here, indentation level, that means I'm outside. Now the outer function that we are talking about. So I can just go ahead and say outer just like this, put up a comma and then we have a chai order. Notice here, the color contrast. So the line number Chai order is referring to this chai. The scope of this print order is just here, nowhere outside. And I can just go ahead and print this as well. I can come here outside of this and I can say, hey, I run this print order function just like this. So I am declaring a function inside a function as well as I am calling this function from within the function. I know a lot is happening, but if you truly look at this and take a moment, pause the video here, you will understand it's not that big. We have an outer function within this, we have this small function inside it. We declared some variable, the scope is within the function itself. And I've called this here super easy. Now same thing can happen outside as well. Let's just say here I have no idea about that function. I can just go ahead and have my all variable chai order. And let's just say this time we are looking for the Tulsi chai. This is actually in the global scope. Now global global scope. And here I can have chi counter, being called again. There we go. We execute everything that's inside that and further at the very end of it we print something like this, global, I can write that global colon and then we can simply say chai order. So I hope you can see this, we are using the same variable. And again the common question is why would anybody use the same variable name? It's too common. It's actually too common. But I hope you get that how the functioning and how the reachability of the function works. So let's go ahead and run this again. So, so notice here the inner one is still ginger. It's not getting overridden. The inner one still is ginger, outside that the outer one is lemon. So this is outer what we have within the function and the final, the global one is tulsi. Is there no way that these can actually hinder? Yes, there is no way that they can actually hinder each other. Each function is a scoped one. Let's draw a diagram on this one. So let's just say this is whole, your global scope. And we are going to call this one as global globe global. And this is your global file level access. And inside this file you can have many functions. We have this function, we have this function. And just for representation we can have the smaller ones. So we have many functions and each function is represented like a house itself. Whatever you do inside the house, remain inside the house the moment you go outside of it. Surely you can access all the things which are global, but you cannot access what's happening inside each of the house. That is all yes. There are ways how we can access each of these. Like, if I want to access the global one, there is a way, There is a mechanism for doing it. But right now, let's not do that in the same video. Otherwise we're going to lose the context of this one. I hope it was fun for you. It was definitely fun for you. Fun for me, actually. And, don't forget to rate, and let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 Scope and named space in functions.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/03 Scope and named space in functions.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.018173909,
      0.004826471,
      0.041925393,
      -0.06405215,
      -0.020211304,
      0.0012361465,
      -0.008232051,
      0.019880993,
      0.0054788473,
      0.0018420132,
      -0.009391582,
      -0.005983097,
      -0.00069081236,
      0.027355563,
      0.10734718,
      -0.00082733895,
      -0.03869457,
      -0.016088715,
      0.027019233,
      -0.019268088,
      -0.0016593885,
      0.007829338,
      -0.0018952047,
      -0.015007381,
      0.00047068042,
      0.010144675,
      0.012550687,
      0.025874121,
      0.02314414,
      -0.024692547,
      -0.017476272,
      0.001994816,
      0.009415893,
      0.021405762,
      0.012395601,
      0.01800668,
      0.009470339,
      0.0008452833,
      -0.028060656,
      -0.000646705,
      -0.036770523,
      -0.005386345,
      0.010285353,
      -0.02244895,
      0.0017528121,
      -0.036597244,
      -0.007093123,
      -0.033484768,
      -0.00581098,
      0.008537525,
      0.0063000005,
      -0.0026907066,
      -0.014798474,
      -0.17148352,
      0.007558899,
      -0.0140995905,
      -0.010274357,
      0.007906455,
      -0.0061295847,
      0.015285905,
      -0.031004854,
      0.015885547,
      -0.034281142,
      0.00011510641,
      0.015752478,
      -0.02734399,
      0.0045229387,
      -0.0041813334,
      0.009289227,
      -0.0015548788,
      0.01816748,
      0.012641934,
      -0.016340286,
      -0.00948261,
      -0.03876686,
      -0.010870234,
      -0.0056720763,
      -0.019350361,
      0.007954685,
      0.026473455,
      -0.0007312155,
      0.014287851,
      0.008578357,
      -0.002748296,
      0.030698054,
      0.012911131,
      -0.020171093,
      -0.012833717,
      -0.0016005159,
      -0.0150289005,
      -0.016451862,
      0.044205848,
      0.013908075,
      0.015190257,
      -0.02072587,
      -0.0035108873,
      -0.0068303873,
      0.009627305,
      -0.006301601,
      -0.0042432244,
      0.0046065277,
      -0.010560427,
      -0.009581913,
      -0.016349941,
      0.0008995476,
      -0.004682455,
      0.008615138,
      0.004338975,
      -0.028700726,
      -0.02613375,
      -0.0023869704,
      -0.0016609245,
      -0.0022153493,
      0.022604225,
      0.012959044,
      -0.18291277,
      0.023174474,
      -0.017042328,
      -0.018539805,
      0.0013197382,
      -0.00078907417,
      0.0026702844,
      0.0013580553,
      -0.005087545,
      -0.009126207,
      0.02489335,
      -0.009903578,
      0.022165867,
      0.0048553874,
      -0.0052390206,
      -0.023799388,
      -0.013006823,
      0.005151853,
      -0.007488225,
      -0.0055483175,
      0.03811955,
      -0.010065768,
      -0.014059297,
      -0.040492017,
      -0.016494825,
      -0.004986516,
      0.022476528,
      0.00099353,
      0.024804583,
      0.010852912,
      -0.010430515,
      -0.020688824,
      0.0014409781,
      -0.0371942,
      -0.03458473,
      0.0075671417,
      -0.01393814,
      0.007121222,
      -0.012343204,
      0.035659853,
      -0.02223249,
      0.0096317595,
      -0.017695013,
      -0.006598207,
      0.0005077674,
      0.0046935584,
      0.00038251505,
      0.014614935,
      0.007090906,
      -0.0063473214,
      -0.0010913147,
      -0.018347433,
      0.00300918,
      0.0088446075,
      0.017467447,
      -0.0020747506,
      -0.009188051,
      -0.0051518865,
      -0.0026354864,
      -0.011715514,
      -0.0075068907,
      0.002782879,
      0.017654952,
      0.035938922,
      0.0003550061,
      -0.007161841,
      -0.01617829,
      0.012138904,
      -0.0032541228,
      0.01130056,
      0.002096447,
      -0.013505513,
      0.032669183,
      0.019645963,
      -0.004858106,
      0.0049827117,
      -0.010866935,
      0.008912487,
      0.012936748,
      -0.0015811137,
      -0.02588188,
      -0.0051235766,
      -0.016336145,
      0.003210322,
      0.008113082,
      0.013944296,
      -0.00961016,
      -0.0019528359,
      -0.018158743,
      0.027869623,
      -0.018278733,
      0.006369263,
      -0.011604949,
      0.0017019553,
      0.014946915,
      -0.007417482,
      -0.014528561,
      0.0054077795,
      -0.013262768,
      0.006241313,
      0.012323237,
      0.0023078795,
      0.0032837465,
      0.0053121895,
      -0.0050929706,
      0.018159665,
      0.020211129,
      0.006570485,
      0.013652265,
      0.006420468,
      -0.005573501,
      -0.0029926528,
      0.005467689,
      0.03169681,
      0.0058285696,
      0.043795153,
      0.015258891,
      -0.015783496,
      -0.008312475,
      -0.0073070973,
      -0.014785915,
      -0.0051233983,
      0.026057646,
      -0.0025818197,
      0.011973036,
      0.009518899,
      -0.0065320716,
      -0.0017578444,
      -0.003679735,
      0.026075607,
      0.0013738001,
      0.021980366,
      -0.01586754,
      0.00316483,
      -0.010048487,
      -0.021857204,
      -0.023492098,
      0.006731722,
      -0.011038352,
      -0.00833427,
      -0.030782696,
      0.011766846,
      0.00038825852,
      -0.016014101,
      0.0039200615,
      -0.014199418,
      -0.0077008856,
      -0.033187248,
      0.025349254,
      0.0040438976,
      0.005174739,
      0.005898175,
      0.01884344,
      -0.0076836995,
      0.01794971,
      0.009453484,
      0.011072482,
      -0.0046390216,
      -0.0007164025,
      -0.004576963,
      0.029737612,
      -0.09541739,
      0.024438702,
      0.0075454037,
      0.008827296,
      0.023085073,
      0.015263081,
      -0.0369582,
      0.018888405,
      0.011619397,
      0.020388922,
      0.009429409,
      0.012646216,
      0.009731845,
      -0.009214554,
      -0.000372392,
      0.004939073,
      0.01194984,
      -0.009975488,
      0.0075890003,
      -0.012749385,
      0.015284581,
      0.0109286895,
      -0.0011029235,
      -0.019304179,
      0.02180679,
      -0.007510639,
      -0.011569404,
      0.027878512,
      0.0292523,
      -0.0017896269,
      -0.011142197,
      0.02789567,
      0.00032678773,
      -0.013992709,
      -0.0051654615,
      -0.0041631497,
      -0.0071482076,
      -0.01400279,
      -0.0003245618,
      0.008169761,
      -0.005988048,
      -0.027540915,
      0.026710069,
      0.023931077,
      -0.0045083957,
      0.014046338,
      0.005330051,
      -0.0011255469,
      -0.032760803,
      0.009388919,
      -0.009816686,
      0.0021788923,
      0.013909386,
      0.004538619,
      -0.012754327,
      0.01947404,
      -0.008789244,
      0.008559788,
      0.010740495,
      0.015427612,
      -0.011405173,
      -0.0135406945,
      -0.0035589677,
      0.0025264218,
      0.02104288,
      0.0015216963,
      0.0011941416,
      -0.0047762557,
      -0.014549097,
      -0.0060247397,
      0.022077436,
      -0.002460357,
      -0.004718723,
      -0.01136746,
      0.024958745,
      -0.0066554616,
      0.017596558,
      -0.022798233,
      -0.02169544,
      0.021448128,
      0.0040924023,
      -0.025139058,
      -0.0028775989,
      0.00246709,
      0.026795771,
      0.008041929,
      -0.018457461,
      0.0011458282,
      0.0042431736,
      -0.01930317,
      0.001578798,
      -0.009923927,
      -0.026454533,
      0.015065095,
      -0.02574882,
      -0.01862491,
      -0.015738174,
      -0.020047415,
      -0.0112733785,
      0.0026354014,
      -0.025612958,
      -0.005305963,
      -0.03370073,
      0.010860461,
      -0.0075468626,
      0.01498407,
      -0.017274076,
      -0.0035299265,
      -0.0052035055,
      -0.024943322,
      -0.0026102648,
      -0.0080858655,
      -0.021974154,
      -0.009394295,
      0.012751294,
      0.030530777,
      -0.005050517,
      0.009103901,
      0.013481536,
      -0.028810486,
      0.013624612,
      -0.007563059,
      0.0035095904,
      0.006338581,
      -0.015649445,
      0.017987708,
      0.010519525,
      0.008657199,
      -0.024300518,
      -0.027396394,
      -0.008549186,
      0.01530373,
      -0.021098299,
      0.0019471718,
      -0.01525883,
      -0.0059664054,
      0.02935736,
      0.015225188,
      0.0010127203,
      -0.004655471,
      -0.007977613,
      0.003855768,
      0.014746282,
      -0.002756254,
      -0.00044236297,
      0.036270596,
      0.0102425385,
      -0.01415125,
      -0.0016886494,
      -0.00022161519,
      -0.03789735,
      -0.007770759,
      0.0019096725,
      0.003124942,
      -0.00073063356,
      0.0017097754,
      0.0012758531,
      -0.0011981262,
      -0.020666046,
      -0.019562876,
      -0.00057927513,
      0.0003230203,
      -0.00820177,
      0.007370799,
      0.031613715,
      0.014437637,
      0.015627122,
      0.017439496,
      0.0002123294,
      -0.0038571549,
      0.0074137626,
      -0.012730168,
      -0.044321943,
      -0.0196092,
      -0.00055525324,
      -0.011465794,
      0.011128114,
      -0.0117120845,
      0.026008572,
      0.015677303,
      0.0039760023,
      -0.01380723,
      -0.012900586,
      -0.0053624795,
      -0.0036741975,
      0.009341195,
      -0.009371809,
      -0.0033452099,
      -0.046045423,
      0.0028870965,
      0.01320112,
      -0.017217811,
      0.0005509568,
      0.011393253,
      0.002969939,
      0.023771087,
      0.0063691447,
      0.0035759625,
      -0.005452631,
      0.01669549,
      -0.0010870182,
      -0.032180343,
      -0.0020239232,
      -0.0071807196,
      -0.0012606076,
      -0.022021037,
      0.00061058433,
      -0.029504878,
      0.03260978,
      0.020311678,
      0.0038405962,
      -0.0035977638,
      -0.00039376697,
      0.008704546,
      0.020893522,
      0.017269516,
      -0.005968413,
      -0.020363936,
      -0.024074357,
      -0.010550569,
      0.000007254405,
      -0.041889515,
      -0.005157716,
      -0.012913594,
      -0.006907391,
      -0.013772055,
      -0.007622574,
      -0.0052339802,
      0.009243521,
      0.0040224437,
      -0.00915309,
      0.0055441186,
      -0.025739692,
      0.012507128,
      -0.021032587,
      0.0018390856,
      0.025368461,
      0.01954041,
      0.00058155105,
      0.023011276,
      -0.009416597,
      -0.0049250205,
      -0.0019579038,
      0.002131498,
      0.0064600967,
      -0.009130538,
      0.037168283,
      0.01687345,
      -0.018479083,
      -0.0045953244,
      -0.0056818607,
      0.017007029,
      -0.0014980241,
      -0.00043059516,
      -0.0021235384,
      0.024065215,
      -0.0021426808,
      0.011795977,
      -0.010650945,
      -0.017048888,
      0.019451084,
      0.017430382,
      0.0142009845,
      0.0006496102,
      -0.018492615,
      -0.023110667,
      -0.0040932694,
      0.0055220225,
      0.03304995,
      -0.12737522,
      -0.01242388,
      -0.024397273,
      -0.005063724,
      -0.014531352,
      -0.004585691,
      0.0051743886,
      -0.009461648,
      -0.0021778124,
      0.0037847233,
      0.036554903,
      -0.021660058,
      0.010425495,
      -0.011060788,
      0.020079207,
      -0.0039419252,
      0.0057590497,
      0.016898578,
      0.03842936,
      -0.010690551,
      0.0032611554,
      -0.0036008456,
      0.013722086,
      -0.014244802,
      -0.0028737902,
      -0.010179697,
      0.02033016,
      -0.016652998,
      -0.008284183,
      -0.026201487,
      -0.03120838,
      -0.007774204,
      -0.0043028626,
      0.015542762,
      0.012533194,
      -0.0031236,
      -0.0029442895,
      0.0047773384,
      0.017385798,
      0.013678302,
      -0.0039498964,
      -0.011272046,
      0.026403653,
      0.024993524,
      -0.0073707826,
      0.031888045,
      0.04290269,
      -0.0050341147,
      0.0043418617,
      0.034798864,
      -0.038444337,
      -0.018645383,
      0.0090697035,
      -0.02342202,
      -0.017990382,
      0.0010394569,
      0.003380328,
      -0.019431215,
      -0.01753675,
      -0.022981776,
      -0.0007428022,
      0.020696692,
      0.020087602,
      0.011191021,
      -0.011376675,
      -0.0026371535,
      0.019790936,
      0.0071648206,
      0.00019507112,
      -0.011830135,
      -0.01516174,
      0.0060191983,
      -0.01120417,
      0.026918205,
      0.0015134861,
      -0.015253819,
      0.00040770753,
      0.0009912264,
      -0.01818167,
      0.0026538635,
      -0.012364793,
      0.00028187365,
      -0.059327234,
      -0.020482747,
      0.010265681,
      -0.0117102945,
      0.0034087764,
      0.0041421205,
      -0.02121831,
      0.0018768718,
      0.0025529373,
      0.00703333,
      -0.015331244,
      -0.020565761,
      -0.0064029847,
      0.0023923828,
      -0.009575209,
      -0.022490071,
      -0.014650135,
      -0.022501756,
      -0.023903854,
      0.020072956,
      -0.0019830503,
      0.0017276368,
      -0.012198269,
      -0.026988517,
      0.01748879,
      0.016323876,
      -0.011279606,
      0.012033568,
      0.0020905472,
      0.0059321667,
      0.0056075216,
      -0.15786713,
      -0.016115425,
      0.020249492,
      0.011170696,
      0.00010998748,
      -0.0018216717,
      -0.013677354,
      0.0039732954,
      -0.0018412778,
      0.010229183,
      -0.0039808108,
      -0.0046114163,
      0.0016561302,
      -0.017250013,
      0.017158946,
      0.13462317,
      -0.0123834,
      0.010298991,
      -0.029091945,
      0.010145825,
      -0.013564925,
      -0.012342055,
      -0.007991166,
      0.014066295,
      -0.008390112,
      -0.008840957,
      -0.0018533296,
      -0.011606582,
      0.0025878386,
      -0.019865999,
      0.0015411461,
      -0.015936721,
      -0.009656484,
      0.043889534,
      0.013616064,
      -0.016121296,
      -0.004662458,
      0.0043162885,
      0.007369467,
      0.00018277667,
      0.031282287,
      0.00816031,
      0.008026618,
      0.0017130391,
      0.015661594,
      -0.00914057,
      -0.013905782,
      -0.01809601,
      -0.0023091573,
      0.008553253,
      -0.011531798,
      -0.05821877,
      -0.005999064,
      -0.019204063,
      -0.0022178448,
      0.009408504,
      -0.011122565,
      0.0022716993,
      0.0037094795,
      0.037593655,
      0.00077365665,
      -0.004351856,
      -0.0047565685,
      -0.0019816218,
      0.00054883416,
      -0.0011745403,
      0.017120974,
      0.034360185,
      0.021822993,
      -0.007385607,
      0.016187679,
      0.022968728,
      -0.014951034,
      -0.0005582798,
      0.009667413,
      -0.011896294,
      0.0056331484,
      0.022138191,
      0.0014359037,
      -0.01305465,
      -0.00017214703,
      0.00044308664,
      0.015306025,
      -0.0011927021,
      0.010333738,
      0.0076509407,
      -0.0030707587,
      0.016198633,
      -0.0012973619,
      0.010406914,
      -0.018242607,
      0.004412014,
      -0.0022373013,
      0.014805738,
      -0.0032816078,
      -0.0010573461,
      0.0047770496,
      -0.022656862,
      0.026739076,
      -0.0060699773,
      0.010901863,
      -0.020785263,
      -0.012280326,
      -0.030516185,
      0.020093573,
      0.0055767996,
      0.0061357627,
      0.014770021,
      0.004170622,
      -0.011764899
    ]
  },
  {
    "id": "genai_cohort_python_04_non_local_vs_Global_scopes_vtt",
    "content": "All right, let's go ahead and talk about something much more interesting now. So let's just say you have designed this particular function here that we discussed earlier. And we also have one more function inside it. There could be many, but let's not go too much in depth. And that's a crazy way of writing this, these kinds of functions, but this is justifiable. You have a function inside that probably for some reason you have decided to have one more function inside it. Usually I don't recommend it. I try to keep it separate up here so that I can call it whenever needed. But let's just say there are some issues. So what if some variable are there? So for example, this is maybe a tea, order and I want to access this, this is here, and I want to access it from here. So is there a way that I can go ahead and access this tea order? Or maybe this tea order exists outside as well and from within the function. From this inside one, I just want to access this one. So is there any way that I can go ahead and do this? Yes, actually. But you have to be very cautious that how you're doing it and you should know about this. This is known as non local and global. I'll give you code example because code examples are much easier and fun. And of course you are going to build more code friendly application, not just research work. So research work has its own place by the way. But I think you want to build something based on the research. So there it is. Let's call this one as non local. Local. That's a good name. Py. Let's have our example first. I'll just close this one. Have this on the full screen. Come on, expand a little. There we go. Finally. Okay, so how does it work? Let's just say we have a simple method that says update order. There we go. No problem at all. Now inside this we have a chai type which is not one of my favorite. This is Indian spice Eli Chi. So maybe just like me, you don't like it. And there's also a method which is kitchen. Kitchen and kitchen can actually go ahead and want to for some reason want to update. They don't have the lychee, they don't serve it. So what they can do, they can use a keyword that says non local. The moment you say non local that means you want to refer something which may be just outside the scope of it. Like in this case just above function. So in that case I can just Go ahead and refer this. Now you have access to the chai type which is above this. Previously we didn't have access and now I can just go ahead and override this one. So I'll just go ahead and use another Indian spice, which is kesar. So I'll say that. Okay, now if I go ahead and run this function as Kitchen. So Kitchen has implemented this, what you're going to notice that the value of the chai type is actually keser. It's being changed. So that's a fun one. And make sure to keep it in the notes as well. Non local means from inside to inside function. You are just targeting outside the function. I'll show you one more interesting part of this as well. Right now let's just go ahead and print this and we'll say after Kitchen update, what's the value of chai type? Pretty simple. Now let's go ahead and run this. Have we updated the order? Pretty simple actually. Not a big deal. Let's go ahead and run this again. Python is going to run non local. And there we go. After Kitchen, the value is updated as caser. But what if I go ahead and say this line doesn't exist. So if I comment this line out, what is going to happen in that case? So whatever you have added as a case or child type, let's see the result. That's easier. It's always going to be lychee because you don't have access this. Although you have made a new variable here, but this actually proves the point that you are not accessing this one here, outside this one. This one line is the whole difference. Got it. Pretty simple, no big deal. Let's just say we are here to make some more fun stuff. So this is our chai type that we have. Can we go ahead and comment out all of this? Yes, but I think keeping a new file would be much safer and much fun. I'll create a new one. We are not running short of the variable names or the files herein. So we'll just go ahead and call this one as global. Global scope. I can write that for sure. Global scope py. Let's just say in this case you again have a chai type variable. This time it's a global variable that everybody looks for a plain chai. Don't want to ask it anything. Now there is also a method that says front, desk. And on the front desk of our chai, you might want to define a kitchen. So let's just say this is kitchen, Kitchen. And this kitchen wants to update some things. So there we go. In this case, I want to access the chai type which is available globally. And by the way, you can actually refer this from any place, from function within the function. Within, within, within the function. You got the idea. All I have to do is use a keyword global, and this global now can access the chai type just like this. Now I can actually refer, to this chai type and I will call this one. So there's a very popular chai in India, which is Irani. It's a pretty good, very tasty chai, usually found in the area near Mumbai. But again, enough of the chai knowledge, let's go ahead and work on with this kitchen function is running now. And let's just say we run the whole of the front desk, use this method very, very carefully and be extra, extra cautious. Not just extra cautious, extra, extra cautious. Yes, I know. You might be thinking why. Too much of caution. I'll show you. I'll tell you a reason as well. Final global chai. And what's the value of it? You might have already guessed the value. We are definitely updating it. That's why I'm teaching you. Otherwise why would I. All right, so this time let's just say we are running this one and obviously the chai has been updated. The reason this alone keyword. Now there is another thing which might be bothering you that instead of the global, can I go ahead and use non local? What happens in that case? Let's just say if I go ahead and say non local, then it says, hey, there's already an error. No binding for non local chai type found because it's looking for just above the function. The non local is designed specifically in such a way that it should be looking up just in this outer function, not the global. So don't use non local. There's a specific case for this one. Okay, so let's go ahead and say we want to access the global. Just want to show you one more thing. In the non local of this, let's just say we have, another thing. So let's just say we go ahead and say chai type here as well. Chai type. And that's going to be ginger. It's one of my favorite one. And I want to access this. Can I go ahead and access this? Yes, you can. Here you are accessing still the code will run as it is. No problem there because you're using non local. So if I go ahead and try to use the non local just above. No problem, you can go in. But this is your global scope. Remember always where the global scope is for this entire file. Anything which is outside of this function in the global space. This is global space. Line number 11, line line number two. If you want to access this, you can actually, you can just go ahead and say I want to update the global one. And you can just update the global directly here as well. So global is a reference to global object from anywhere. You can access this anywhere. But if you just want to access just above in the function non local is your friend. You should be doing it like that. All right, I hope you got this. One last thing which we want to mention why you should be extra, extra cautious in using this global keyword. I'll tell you. So let's just say again, we have a beautiful diagram. This is your global scope. And you say that I want to use this chai type. So there we go. Chai type shouldn't be capital. I don't prefer it. Lowercase is good for me. This is our global scope that we have. Now in this you are defining different function. This function is written by you, this function is written by your friend and this function is written by another coworker. Similarly, another coworker. Now if everybody's trying to access this chai type and trying to update it, let's just say somebody says true and, and this guy expects that this function should always be true. But this guy goes ahead and update this, that, hey, I'm not going to be saying this true, I probably need this in a string. And that should be saying, ginger, because that makes sense. Then what you have done, this guy is also accessing this and now you have changed the value. So this whole piece of code is not going to work. So this is absolutely, absolutely gone case here. This code will break. So usage of this local global, all of this should be very, very carefully done because you might break somebody else's code who is dependent on this one. That's why it is recommended. A lot of people you are going to see that they avoid totally using of the global. But again, it's a use case and there might be a specific use case for you in this case or in that, in your code case. That is it for this video. Let's go ahead and catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 non local vs Global scopes.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/04 non local vs Global scopes.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.013974349,
      -0.013669823,
      0.03166371,
      -0.06047876,
      -0.021425508,
      0.005174694,
      0.005041957,
      0.023491569,
      -0.00013898162,
      0.0009317868,
      0.00056017895,
      -0.0047519184,
      0.0019597528,
      0.013118701,
      0.10838938,
      -0.0048192884,
      -0.036576413,
      -0.021327376,
      0.016562914,
      -0.014281056,
      0.006528607,
      -0.0009871871,
      0.0060007046,
      -0.014603816,
      0.011453123,
      0.00406053,
      0.012395012,
      0.030667651,
      0.014953859,
      -0.018693699,
      -0.01019792,
      0.00007547563,
      0.01890536,
      0.0077010617,
      0.011978996,
      0.023492279,
      0.017527906,
      0.012932419,
      -0.023886051,
      -0.01146445,
      -0.03184914,
      -0.00013814722,
      0.0011120342,
      -0.012031532,
      0.00027678872,
      -0.00824095,
      -0.0049532233,
      -0.03570109,
      -0.0002071375,
      0.023060232,
      0.019058648,
      -0.0031792964,
      -0.017890869,
      -0.16924249,
      0.0026660701,
      -0.009692601,
      -0.013010226,
      0.011108126,
      0.00906457,
      0.0203987,
      -0.039362516,
      0.01793276,
      -0.02665424,
      0.0034842885,
      0.0015070509,
      -0.017003173,
      0.012635873,
      -0.01159133,
      0.007258177,
      0.006484683,
      0.021506947,
      0.0057752007,
      -0.026646344,
      -0.006957142,
      -0.034246452,
      -0.01116623,
      0.006044521,
      -0.01770555,
      -0.00036375027,
      0.013914216,
      -0.011133397,
      0.0029843012,
      0.0032865428,
      -0.0021260462,
      0.016987499,
      0.013841899,
      -0.0118934605,
      -0.014149049,
      -0.006162071,
      -0.011920418,
      -0.009693789,
      0.033977296,
      0.01037074,
      0.008361189,
      -0.01800166,
      0.015923852,
      -0.004932704,
      0.008639982,
      -0.022893285,
      -0.004289533,
      0.003068944,
      -0.0028183183,
      -0.0053669037,
      -0.0010714408,
      0.0029308337,
      -0.0066038803,
      -0.0068980157,
      0.008418456,
      -0.020758752,
      -0.013691062,
      -0.00048220516,
      -0.002938344,
      0.005380344,
      0.015049787,
      0.016896872,
      -0.18369456,
      0.0116602825,
      -0.0054842476,
      -0.017852964,
      0.019386716,
      -0.006716714,
      0.012715204,
      -0.0061239633,
      -0.0069857063,
      -0.011510816,
      0.015343833,
      0.00403628,
      0.023048906,
      -0.002594348,
      -0.00992112,
      -0.033871848,
      -0.016800929,
      -0.0053706686,
      -0.0024776335,
      -0.0024625063,
      0.03132432,
      -0.009210867,
      -0.0073311855,
      -0.04611066,
      -0.011277193,
      0.009322659,
      0.022304602,
      -0.0005092429,
      0.010420394,
      0.01304815,
      0.0015198932,
      -0.022546932,
      -0.007427933,
      -0.02533757,
      -0.04630383,
      0.013290946,
      -0.007677057,
      0.013918178,
      -0.009573978,
      0.043958783,
      -0.021486431,
      0.017240483,
      -0.017683715,
      0.00555367,
      0.004622552,
      0.00033102158,
      0.0020949978,
      0.012956329,
      0.0030053393,
      -0.0010030664,
      0.013822516,
      -0.028632391,
      0.011201921,
      0.015091095,
      0.018505327,
      -0.011079615,
      -0.019324766,
      0.0063338703,
      -0.002801145,
      -0.020559527,
      -0.011684971,
      0.0149032455,
      0.008499064,
      0.024834879,
      -0.010483168,
      -0.00089311553,
      -0.007905073,
      0.0055682664,
      0.00072956196,
      0.014464576,
      -0.0136160785,
      -0.00526598,
      0.018272702,
      -0.006803351,
      -0.008933738,
      0.01475928,
      -0.007524479,
      0.0020466568,
      0.019291958,
      -0.016632464,
      -0.012460181,
      -0.0018228161,
      -0.008497463,
      0.006911621,
      0.016373983,
      0.026494363,
      -0.012165805,
      0.012301525,
      -0.022825541,
      0.018524485,
      -0.015885348,
      0.009638247,
      -0.005797668,
      0.015285636,
      0.0042759306,
      -0.0056195417,
      -0.008894758,
      0.012041928,
      -0.013672988,
      0.002878752,
      0.0035414035,
      0.010538764,
      0.0011339182,
      0.004445459,
      0.0021175144,
      0.020068908,
      0.015235148,
      0.014555429,
      0.020350296,
      -0.00013864507,
      -0.008550977,
      0.007993339,
      -0.0042113424,
      0.019553076,
      0.014457863,
      0.050470248,
      0.023825804,
      -0.01464832,
      -0.012968982,
      -0.015206623,
      -0.0100453,
      -0.013717166,
      0.023417788,
      0.006413036,
      0.014111239,
      0.0059797945,
      -0.018004792,
      -0.022385258,
      -0.0029056205,
      0.012594059,
      0.01836794,
      0.017884767,
      -0.02130301,
      -0.0021845328,
      -0.012959441,
      -0.0139513435,
      -0.016375585,
      0.003164462,
      -0.009465274,
      -0.010958488,
      -0.030556425,
      0.0047620446,
      0.0005028113,
      -0.0011948156,
      -0.0015915303,
      -0.002254653,
      -0.018431216,
      -0.02271597,
      0.028868845,
      0.012991497,
      -0.010170757,
      0.012524068,
      0.037555438,
      -0.0031044513,
      0.016046036,
      0.01642936,
      0.016307874,
      -0.0046237283,
      -0.002942448,
      -0.01177555,
      0.016415974,
      -0.09166366,
      0.032636583,
      0.0051717362,
      0.010412279,
      0.002666872,
      0.015350255,
      -0.025776926,
      0.030045876,
      0.0027002527,
      0.0142619135,
      0.02152588,
      0.0053046825,
      0.005732199,
      -0.020680526,
      0.00086375367,
      -0.017957697,
      0.018267963,
      -0.007390869,
      -0.002683464,
      0.0035832187,
      0.015756847,
      0.01308211,
      0.0039909827,
      -0.016298339,
      0.018604757,
      0.010320005,
      -0.000093351424,
      0.030510975,
      0.024764003,
      0.016065141,
      -0.012231747,
      0.022351438,
      -0.011003746,
      -0.017741755,
      -0.0018176817,
      -0.0063128443,
      -0.0034930522,
      -0.016425781,
      0.0051267035,
      0.003585639,
      -0.006736645,
      -0.013103839,
      0.023512216,
      0.031027118,
      -0.00074925233,
      -0.0037046978,
      0.017730195,
      -0.008181389,
      -0.0270229,
      0.009634735,
      -0.012407481,
      -0.01588279,
      0.00047426502,
      0.0040456248,
      -0.010737366,
      0.01462586,
      0.011258034,
      0.0060340837,
      0.0013930472,
      0.012813998,
      0.008098384,
      -0.0034252778,
      0.0019521007,
      -0.01779552,
      0.022019483,
      -0.0030824654,
      -0.0007467221,
      -0.019094253,
      -0.010162693,
      -0.00347826,
      0.010657052,
      -0.0031123264,
      -0.009241769,
      -0.027665105,
      0.020860577,
      -0.0043861433,
      0.023098439,
      -0.0020680625,
      -0.011354959,
      0.029630838,
      0.00057705014,
      -0.023355234,
      0.006720892,
      0.00040610874,
      0.03280663,
      -0.0077870567,
      -0.016701771,
      -0.00090938376,
      0.018359656,
      -0.024358569,
      0.0058021722,
      0.0075457925,
      -0.011979245,
      0.0029217554,
      -0.018802667,
      -0.004528339,
      -0.016115706,
      -0.030146882,
      -0.013931149,
      -0.007960112,
      -0.019039305,
      0.00085970055,
      -0.023176901,
      0.0027343642,
      -0.007717048,
      0.0036982147,
      -0.0113299545,
      0.0013533669,
      -0.0144490935,
      -0.027902596,
      -0.005190204,
      -0.0037470616,
      -0.022633348,
      -0.005363459,
      -0.0019962685,
      0.023951804,
      0.002545109,
      0.015316975,
      0.0047549736,
      -0.01678611,
      0.0052680103,
      0.009990168,
      0.0050598937,
      -0.003991102,
      -0.008850699,
      0.013430054,
      0.0002978365,
      -0.0013659839,
      -0.027988227,
      -0.030069843,
      -0.009370633,
      0.012092635,
      -0.027578894,
      -0.00020168762,
      0.009943393,
      -0.012591572,
      0.028038967,
      0.010698566,
      0.006198704,
      0.0032181283,
      -0.0026956573,
      0.016028909,
      -0.0019207424,
      0.0044017574,
      -0.006613983,
      0.032315534,
      0.0048236824,
      -0.014949216,
      -0.010750504,
      -0.012251402,
      -0.034641236,
      -0.008210888,
      -0.005865213,
      0.005980037,
      -0.0018025645,
      0.0016306546,
      -0.00092281686,
      0.0013159413,
      -0.010856231,
      -0.020038152,
      -0.0008099425,
      0.0006190418,
      -0.011569618,
      0.008845063,
      0.023740968,
      0.001076622,
      0.010399565,
      0.026770387,
      0.0024063194,
      -0.0016413889,
      -0.000106949665,
      -0.012278466,
      -0.053034015,
      -0.01890186,
      0.00986819,
      -0.025230812,
      0.010932162,
      -0.015301997,
      0.024147924,
      0.017461134,
      0.0040750895,
      0.0035717278,
      -0.004259266,
      -0.004036586,
      -0.014333691,
      0.007819689,
      0.0044124266,
      -0.003940749,
      -0.040656734,
      -0.009419586,
      0.020807581,
      -0.017213399,
      0.004590656,
      0.009428576,
      0.0055388063,
      0.018079842,
      0.0046361345,
      -0.005707489,
      -0.00017625958,
      0.034877226,
      -0.0039859824,
      -0.02768558,
      -0.019360257,
      0.00015786335,
      -0.01048806,
      -0.026000341,
      0.00017566825,
      -0.025693376,
      0.028785007,
      0.020227136,
      -0.0073646987,
      0.010892942,
      -0.0061283577,
      0.013639797,
      0.0305328,
      0.019513266,
      0.0032249521,
      -0.021077184,
      -0.021781446,
      -0.00069303263,
      0.008563772,
      -0.038762882,
      -0.004077353,
      -0.018566146,
      0.0016769291,
      -0.018977216,
      -0.016425902,
      0.00064624846,
      0.0012621708,
      -0.0059656766,
      -0.009230503,
      0.0060972013,
      -0.015056137,
      0.0087132985,
      -0.024917316,
      -0.0009031131,
      0.0191678,
      0.031747088,
      -0.01520715,
      0.003057234,
      -0.004907032,
      -0.007787929,
      0.000019195104,
      -0.001975357,
      -0.0108426865,
      -0.014830773,
      0.022587003,
      0.0067648366,
      -0.018155545,
      -0.009447336,
      -0.020777721,
      0.028593557,
      -0.00754014,
      0.005623521,
      -0.013782771,
      0.025003044,
      -0.0042264126,
      0.006046662,
      -0.012918307,
      -0.011319406,
      0.027557861,
      0.014650301,
      0.010458434,
      0.0049564852,
      -0.023216607,
      -0.031942062,
      0.003484558,
      0.013621342,
      0.028729644,
      -0.13774279,
      -0.0066007343,
      -0.012928136,
      -0.005170403,
      -0.02086753,
      0.0070178355,
      0.0094450265,
      -0.024499178,
      -0.0013815734,
      0.013299032,
      0.03963481,
      -0.017317308,
      0.017954476,
      -0.0015992966,
      0.013186415,
      -0.00399866,
      0.011771555,
      0.013081352,
      0.034644358,
      0.00042112198,
      0.0073344503,
      0.0019292013,
      0.009154192,
      -0.0075635165,
      -0.013184104,
      -0.021384237,
      0.027674729,
      -0.009073657,
      0.0011536198,
      -0.027477706,
      -0.034564223,
      -0.0016831186,
      -0.00085088814,
      0.020739445,
      0.0097322,
      -0.010745731,
      0.004833412,
      0.006568661,
      0.0017623813,
      0.017143425,
      0.005064317,
      -0.015090701,
      0.028583365,
      0.018823318,
      -0.017080596,
      0.018262254,
      0.033772636,
      -0.014029375,
      -0.004896746,
      0.027474253,
      -0.029318389,
      -0.015225866,
      0.0054470035,
      -0.03343222,
      -0.02393235,
      -0.0029018403,
      -0.0047625597,
      -0.014909254,
      -0.021840684,
      -0.006673849,
      -0.0038210542,
      0.007313457,
      0.020228133,
      0.01328876,
      -0.005315973,
      0.0015817251,
      0.017420275,
      0.019862572,
      -0.0005773166,
      0.0005926734,
      -0.008146671,
      0.009296296,
      -0.022466974,
      0.009405319,
      0.009462653,
      -0.02842481,
      -0.0072177346,
      0.0014608518,
      -0.011400808,
      -0.00047742735,
      -0.01160659,
      -0.0069736997,
      -0.07172092,
      -0.03541583,
      -0.00014019133,
      -0.0075861956,
      0.012036613,
      -0.0028338032,
      -0.024282811,
      -0.011591466,
      0.0036187817,
      -0.006505601,
      -0.0122881625,
      -0.030566877,
      -0.009645397,
      0.008209161,
      -0.0070567844,
      -0.030299447,
      -0.006857769,
      -0.010221836,
      -0.02424283,
      0.0039707744,
      0.0065029957,
      0.019849058,
      -0.0026474064,
      -0.033096284,
      -0.003663114,
      0.009980847,
      0.0001912366,
      0.009639851,
      -0.009898518,
      -0.0009788012,
      0.0039320155,
      -0.15002583,
      -0.0055530323,
      0.0042197397,
      0.02015504,
      -0.0039886795,
      -0.0035004856,
      -0.012082008,
      -0.015207056,
      0.0007069875,
      -0.015337093,
      0.0036457118,
      -0.0046569896,
      0.01305604,
      -0.002759922,
      0.0064921295,
      0.13578694,
      -0.029497808,
      0.008995432,
      -0.016023654,
      -0.018324848,
      -0.009992177,
      -0.019779002,
      -0.006336911,
      0.02097505,
      -0.01090178,
      -0.0064642373,
      -0.019994667,
      -0.0027853826,
      0.024673808,
      -0.02121972,
      -0.008535099,
      -0.032254003,
      -0.015504336,
      0.030174127,
      0.004154654,
      -0.011431014,
      0.008127267,
      0.0043771295,
      -0.0003869743,
      -0.0024874501,
      0.018046299,
      -0.001992951,
      0.0015967446,
      -0.00034418004,
      0.012781619,
      -0.013383402,
      -0.020317126,
      -0.017377663,
      -0.015579849,
      0.008822263,
      -0.013984805,
      -0.06094873,
      -0.0015820584,
      -0.015606568,
      0.010604194,
      -0.0019276803,
      -0.013297347,
      0.013697803,
      0.0038928401,
      0.02756553,
      0.0014399065,
      0.0047096936,
      -0.0044194325,
      -0.0044220965,
      -0.0025626824,
      -0.013609754,
      0.023956561,
      0.033234473,
      0.022624474,
      -0.0025460308,
      0.009013343,
      0.0296465,
      -0.019224945,
      -0.002160195,
      0.0010747805,
      -0.007271578,
      -0.008997854,
      0.024463162,
      0.0013298488,
      -0.008707949,
      -0.014112818,
      -0.009038376,
      0.003942826,
      -0.004832896,
      0.0040201996,
      0.005409747,
      -0.020911863,
      0.005678677,
      -0.002348291,
      0.0056086346,
      0.0022500372,
      0.011541108,
      -0.015597832,
      0.019385422,
      0.005227898,
      0.0037838626,
      0.0033638063,
      -0.028330011,
      0.021900097,
      -0.010829968,
      0.008054409,
      -0.027810061,
      -0.0016796478,
      -0.033179875,
      0.022177864,
      0.007184493,
      0.0015809987,
      0.0075289602,
      0.0100055,
      -0.015565579
    ]
  },
  {
    "id": "genai_cohort_python_05_Handling_arguments_in_function_in_python_vtt",
    "content": "All right, so let's go ahead and have another discussion on something really really interesting. So let's just say we so far have seen that we have a function, let's call this one as simple function name. We have a placeholder which takes the parameter names and we simply go like this and then we have a simple pass here. This is our function definition. Now what's really interesting that what do you pass in here in this function? Let's just say this is kind of a mysterious box and all the value you go ahead and simply pass on into this place. This is known as parameters. We know this. But what value can go inside the parameter? There are a lot of values two can go into it. Maybe you want to go ahead and pass on just the true, or maybe you want to go ahead and pass on just the name just like this. Or maybe you want to pass on values in this format. So there is a lot of thing that can go inside this as a parameter and what happens to the original value? This is also a piece of question we should be answering. So in this entire video we are going to go through with different ways of how things actually goes and what happens when things goes into this, whether the original one changes or not. What happens to this? We'll just go ahead and figure it out in this one. Let's go ahead and create this. I've already created a file which is known as input params, input parameters and I'll show you one of the most basic example of what happens. So when you let just say decide that hey, this is my chai and and I go ahead and simply say this is my ginger T or ginger chai would be better. And if I go ahead and define a method that says preparechie and I go ahead and take any parameter, this could be order, this could be anything. It's just a placeholder, hence we call it as parameter. And I go ahead and print this out or maybe do some more operations on it doesn't really matter. I'll just say preparing then a space and we'll just go ahead and print the order. Now depends on what value you are passing on. A lot of things might change or might not change. So in this case if I go ahead and pass on the chai, this is like I would just want to read this value in this case. This is a string and if you remember, strings don't change really. So you are just passing on this value and that is it, that is all that you are doing. Of course if you go ahead and Use globals and all of that. That's different use case, but in most of the cases it doesn't change or it will never change the original chai, it will always remain. Like you can go ahead and do manipulation up here. Like we have added this preparing chai and all of that. But in true sense, if you go ahead and print out this variable chai, if you notice it here, if I go ahead and print the variable chai here, if you look at this closely, we have actually appended this so the function actually takes the order and we have passed on a chai but we have actually concatenated this. Now the preparing is appending to this. So does it change the original one? No, no it doesn't. It just reads the value. That is the whole point. I'll show you by running this, don't you worry. So if I go ahead and say I want Python to run still, we have ginger chai, but things actually do change when we have different values to it. So let's just say I'll remove this example, I'll keep this example as comments so that you can later on come onto this and see this. Now let's just say we have again an example of chai, but this time I go ahead and say the values are 1, and Now remember this is a list and list can be mutated. So your whole idea about what we studied about mutated, immutable, mutable, this will come handy in here. Let's just say we have a simple function which says I will edit chai and all it does, it takes the input of cup. How many cups are there? And this is array, we are expecting an array here. In this I will change the first value to be something else, maybe 40, two, whatever, it's just an arbitrary number. And then I go ahead and call the edit chai and notice I am passing on this chai here. What will happen to this chai? Now previously we just passed on, we did of course performed an operation of adding it. Now we are amending this. So what will happen to the original object? So in this case you'll be surprised to know and that's where the mutable immutable comes into, into the handy that. Yes, now we have 1, and So original object or original property is being changed. It's a mutable, the list. So always remember, make sure that you have gone through with this. So this is nice, this is okay, now let's go ahead and work on with this more. This idea can be extended a little bit more. We do have two types of arguments that we can pass on in here. The first you are going to hear about is the args. Yes, this is a proper name. For this one is actually known for positional ingredient, positional parameters. And you will hear another one which is denoted by an asterisk. And then you simply say kwargs. This is keyword args. Remember I told you. Arguments. There is one thing known as parameters. One is argument. So this here is argument. This one, when you are defining the function, this is parameter. Because it can have any value. It can be cup as a list. It can be anything or any kind of a list. So that's why we call it as parameter. But on the other hand, this is our, sorry. This one is parameter and this is our args. Arguments. Based on this, I want to show you something really, really interesting. Let's just say we have a, method which says makechai. And in this you expect that I'll pass you a tea. I. I'll pass you a milk. These are just variable name. It can be anything. And I'll pass you sugar, not cigar sugar. And there we go. And I simply just print them out. I don't do anything else. So I'll just go ahead and say this is my T, this is my milk, and this is what else we have? Sugar. There we go. It does nothing. Now, interestingly, I can just go ahead and say make chai. And I have two ways of doing this. I can just go ahead and say I want a chai from a very beautiful place in India, which is Darjeeling. It's very beautiful. And I will say milk. I'll say yes. And for the sugar I'll say I'll definitely not say no. But I'll say low. This is something known as, positional. Positional. Because I know the position of it. So I know exactly that the Darjeeling will go inside the T. The yes will go into the milk and the sugar is going to go. This sometime can be confusing. So another way of handling this is known as keywords. So how can we do this? As soon as you put up the make chai, you will see you have some parameters here. So I can just go ahead and use this equal sign. Notice this tea equals. And then I'll just go ahead and say green. This makes sure that order doesn't really matter. But my value is going exactly. So I'll swap the value of now sugar. So first I'll pass on the sugar. I know exactly what I'm saying. So I'll just go ahead and say medium. And then we have milk. And the milk will be. Let's, just say no. I actually don't prefer milk T. But this whole syntax is known as keywords, and whenever you define the function automatically. This is available to you and should be basic. I shouldn't be printing this out, but you get the idea. It's green. It says no, it says medium, although we have swapped the value, but it says green. No, and medium. This is where I have to keep in mind that, hey, in what order they are being passed on. So based on this, we can actually design another method which uses, this args and kwargs, or keyword arguments. And I'll show you what does it mean by that? Really? Truly not the theoretical aspect, but impractical. Let's just say we have a special, chai. I know a lot of chai these days. So let's just say we put up an asterisk here. This asterisk is a part of syntax. I will just go ahead and say ingredients. Hope I wrote that correct. And I will also use asterisk. Asterisk. Yes. This is again a syntax. And I will say extras. All right, so what do I mean by that? What's the importance of this? * and 2, *. I'm not giving, T, milk like that. I'm just saying ingredients. And this is a variable name. This is just a placeholder. It can be anything. I just want to print what happens when all of this is written in this format with the asterisk. So I'll just go ahead and say ingredients. Hope I wrote that correct. And second time, I'll not take a chance. I'll just copy this ingredients. Because this is what I want to print. And then second time, we'll just say extras. Copy this with a capital E and this will be extra. So what happens and how does this work? The way to learn this is by seeing an practical implementation for this one. So let's just say if I go ahead and call the special chai. Now that you have seen how positional works, how keyword works, this is actually a mix of both. So here is the interesting part. Let's just say if I go ahead and say, cinnamon. Cinnamon. And I go ahead and say another one, which is cardamom. And then I go ahead and say that I want to use a sweetener. There we go. Very tough. I will use Sweetener as honey and will I use foam? I don't know who uses foam, but anyways foam will be yes. So I hope you got a hint of what we are trying to do. Let me make it on the same line. Notice here some of the parameters don't have a name. Some of them do have a name. And you got that. This is. And this is exactly there. We got args and we got kwargs arguments and key value arguments or also known as keyword arguments. Whatever you want to call them doesn't really matter. But what's interesting here is if I go ahead and run this now, you're going to see that ingredients gets a tuple of all the values that we have. So this is what the asterisk. I didn't say that I'm expecting one, two, whatever is coming up without any name. This is where we are getting. So all the tuples are going to come in. But this is where you actually says that, hey, I'm expecting that you will provide me the name of this value. And this is exactly what we got. Key value. So. So this is a dictionary and as long as you understand and know the data type, you can do magic in programming. Notice here, sweetener is honey and the foam is. Yes, and this is all it is. I know a lot of people, do a whole lot of drama with these kinds of things, but I don't. I prefer to show you practically what it means. And I have seen people spending like minutes, hour on the args and kw args. No, it's not that difficult if you don't get the values or the names. If you don't provide the names, hey, this will go into just one asterisk. I can call this as orgs as well, no problem. Hey, feel free to call it args. Feel free to call it as ingredients. This one usually people call it as kaw. Orgs. Hey, call it kwargs, call it as extras, whatever you wish. It's just a placeholder name. The foundation of programming should be strong. There's one more thing I would like to discuss here, which is also production kind of a thing. So sometimes let's just say I have a simple value here. I'll just go ahead and say chioders and you can actually go ahead and provide default values to all these things. So let's just say user doesn't provide anything. I still want to have a value, so there is nothing which stops me to provide a value just like this. It is totally, totally okay. But here's interesting part if I go ahead and provide a value of empty array which is mutable, that means it can be changed. Let's just see what happens. When I go ahead and say order it has a property of appendix because it's an array and I can go ahead and add a masala chai to this one. That's it, that's all what we are doing. And now we are printing. Come on, write that print and I want to print whatever the value of the order is. Now here's the interesting part. Let me show you the most interesting and gotchas of programming in Python. We want to run this chai order. I run it, but I go ahead and accidentally run it twice. Hey, this is interesting what will happen when I accidentally run it twice. Because you have appended the orders is going to append in a very interesting way. Notice here it says masala masala. So be very very careful for the default trap because this is known as default traps. So default has trapped you. If you have the default value you have nothing inside it and you have tried to append so this whenever you are going to run it second time because first time it has already done this. We have seen actually this kind of error. So it has actually bite us here. Now what we can do, in this case this can be actually made a little bit easier. So I'll just go ahead and first make a copy of this and we'll show you that instead of putting an empty value up here, you can actually make your life little easier. I'll just go ahead and comment this so that you can have it. Instead of putting the empty array, what you can do is make your code little bit secure or safe. I can just say none. So by default it's not empty array, it is absolutely no value. Here it is all none. I don't want to append it like this. I only want to append it in certain cases only if the value is being provided to me or something like that. So we are going to just go ahead and remove this and instead this I'll show you a nice way of writing this. If the order that is being provided is none, notice here we are not providing any value and in this case we are not providing any value. So you shouldn't be appending or something like this. If you provide me a value then only the order append whatever value is coming in here should be there. So in this case I can just go ahead and use if clause and say if order is not in. If Order is none. I'll just go ahead and say order is equals to empty array. Now, no matter how many times I'm calling this, this will always remain because what I'm technically passing here is actually none. Whenever you are passing nothing, that means you're passing on none. It's something that we encountered, in here. So again, notice here we are not printing anything. Obviously we are not printing anything. But if you want to print this as well that, hey, what's the value of this? We can just go ahead and quickly do this. Print the order just like this. And I hope you got the idea of this is now both the time it's empty because you are not passing anything and you can still use the same logic order, append whatever the value is coming in. You can also check whether the length is more than zero. And then. You got the idea. You got the idea. This was just a small incident which I wanted to talk about. It's not something that, hey, just always keep in mind you will eventually learn with them as you will write more code. But that's all. That's all I wanted to talk about this hope you've enjoyed these, fun little videos. Please do rate us. And that is it. Let's catch up in next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 Handling arguments in function in python.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/05 Handling arguments in function in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.011687922,
      -0.00080141844,
      0.03334556,
      -0.06482786,
      -0.00065144844,
      0.007589345,
      0.0044282903,
      0.035082478,
      0.015472779,
      0.0056145643,
      -0.027681477,
      -0.010584684,
      -0.00021371049,
      0.02197327,
      0.10875043,
      -0.01245352,
      -0.0073746573,
      0.0096818805,
      -0.0043927156,
      -0.025720857,
      0.0005003291,
      0.01073012,
      -0.0048655174,
      -0.0044021173,
      0.0020937533,
      -0.0036176797,
      -0.00058588386,
      0.0062014502,
      0.016729575,
      -0.027260762,
      -0.01705948,
      -0.0012842417,
      -0.0050947787,
      0.019966858,
      0.0107085975,
      0.010500853,
      0.010524765,
      -0.016341178,
      -0.019982578,
      0.016970355,
      -0.019898375,
      -0.027428076,
      0.0015970404,
      -0.022684338,
      0.005280376,
      -0.020020453,
      0.026204897,
      -0.020330919,
      -0.0029587646,
      0.02474962,
      0.0052914037,
      -0.0055952664,
      0.00027594052,
      -0.18657061,
      0.014772775,
      0.010531984,
      -0.0054744277,
      -0.002029373,
      0.010870476,
      0.026797457,
      -0.026887625,
      0.022029929,
      -0.024918593,
      -0.004073731,
      0.010305132,
      -0.032121174,
      0.0193509,
      0.0011063227,
      -0.012154137,
      -0.006553537,
      0.052758113,
      0.022715947,
      -0.011320211,
      -0.019658769,
      -0.026703047,
      -0.023480399,
      0.024662843,
      -0.018128354,
      -0.0132532455,
      0.011444217,
      0.010877571,
      -0.010315667,
      -0.015208278,
      -0.016295055,
      0.019433027,
      -0.015507373,
      -0.016812043,
      -0.018825179,
      0.016209455,
      -0.004097458,
      -0.0071086255,
      0.0034733273,
      0.007910609,
      0.003306395,
      0.0024228392,
      0.022255652,
      -0.016866006,
      -0.010298699,
      -0.029529193,
      -0.017641218,
      0.0020739345,
      -0.005978724,
      -0.004424106,
      -0.0014792435,
      0.014438548,
      -0.0065225842,
      -0.002972588,
      0.0002838489,
      -0.0271467,
      -0.0047741956,
      -0.0008096553,
      -0.018228957,
      0.0049010166,
      0.005685015,
      0.0005667428,
      -0.17847991,
      0.010839193,
      0.0013461191,
      -0.021445276,
      0.005972422,
      -0.0021319839,
      0.0038552214,
      0.0062415213,
      -0.0034444428,
      0.00021243532,
      0.02329491,
      -0.00854852,
      0.022019923,
      0.021456096,
      -0.0053683193,
      -0.025946062,
      -0.0246564,
      -0.0017999526,
      0.012384247,
      -0.0007266217,
      0.020852795,
      -0.039937925,
      -0.016918147,
      -0.033939905,
      0.0052255318,
      0.0062777423,
      -0.0005664639,
      -0.0033659732,
      0.021452906,
      -0.000066207525,
      0.0017395845,
      -0.0053745555,
      -0.000961547,
      -0.022616142,
      -0.037445024,
      0.019769348,
      -0.00075668714,
      -0.002051214,
      -0.0062091476,
      0.028991014,
      -0.016167132,
      0.020108137,
      -0.014569765,
      0.00093567284,
      0.007037665,
      -0.008153154,
      0.0092266,
      0.008571192,
      0.0107987635,
      -0.0007963132,
      -0.0004934853,
      -0.024866885,
      0.01636463,
      0.018306801,
      0.020334668,
      -0.007985806,
      -0.010079542,
      -0.013355338,
      -0.0030652194,
      -0.005120961,
      -0.0046998872,
      0.0057351845,
      0.0047074547,
      0.017781522,
      -0.013278938,
      -0.0058375904,
      -0.026350735,
      0.0024382793,
      -0.01372748,
      0.00774843,
      0.004234062,
      -0.016233422,
      0.01644318,
      0.0033516064,
      -0.010848647,
      -0.0031506456,
      -0.0004049833,
      0.02722438,
      0.015079371,
      0.0006690406,
      -0.03303653,
      -0.01316009,
      -0.0035114393,
      -0.00069487875,
      0.024410965,
      0.014894765,
      -0.010672809,
      -0.0075641824,
      -0.021451555,
      0.034328826,
      -0.015121018,
      0.014509197,
      -0.010243408,
      0.025861017,
      -0.0054151556,
      -0.027262956,
      -0.006144316,
      -0.0068224785,
      -0.00390825,
      -0.0016755702,
      0.0039974656,
      0.033301096,
      -0.0041519785,
      -0.00043734227,
      0.0073292786,
      0.0057376768,
      -0.018135564,
      -0.015441523,
      0.006198595,
      -0.0023709114,
      0.006214566,
      0.0032098363,
      -0.014305779,
      0.011233154,
      0.023116432,
      0.021073453,
      -0.0013455519,
      -0.018065529,
      -0.016133308,
      0.0037816474,
      -0.022090869,
      -0.0044500683,
      0.023795035,
      0.014694947,
      0.016562333,
      0.006271509,
      -0.00426518,
      -0.008360569,
      0.008032765,
      0.014467796,
      -0.00031615555,
      0.0025385327,
      -0.008937671,
      0.008405378,
      -0.015758539,
      -0.025611626,
      -0.02368773,
      -0.008575682,
      0.009397285,
      0.0048682545,
      -0.021518638,
      -0.020625688,
      -0.017002663,
      -0.010285944,
      0.00079720287,
      -0.004022854,
      0.006428274,
      -0.0060747857,
      -0.002872298,
      0.020727038,
      0.001117328,
      0.004797546,
      0.04491909,
      -0.02371113,
      0.003511577,
      0.01090829,
      0.006516982,
      -0.009042848,
      0.010244264,
      -0.01710537,
      0.0045639593,
      -0.09254089,
      0.031835087,
      0.015532188,
      -0.022774067,
      -0.0003408812,
      0.0025944838,
      -0.025557829,
      0.028418925,
      0.004677234,
      0.014720961,
      0.006827978,
      -0.011800584,
      0.025264954,
      -0.015867682,
      -0.01376636,
      -0.003387306,
      0.0033757933,
      -0.008870898,
      0.004881617,
      -0.011471907,
      0.02450742,
      0.0049259546,
      0.006989872,
      -0.0066721104,
      0.016747184,
      0.0032043955,
      -0.0025680794,
      0.012565846,
      0.0028433525,
      -0.0041864594,
      0.0095297,
      0.022586688,
      -0.01378873,
      -0.012370829,
      0.008823401,
      0.0028797106,
      -0.010246574,
      0.004574756,
      -0.013938026,
      -0.016273942,
      0.017583136,
      -0.015371112,
      0.035969723,
      0.035106964,
      0.0113798585,
      0.004084873,
      0.016386129,
      -0.007883478,
      -0.004023642,
      -0.00004857306,
      -0.028001918,
      -0.015548578,
      0.006163347,
      -0.021178626,
      0.030755764,
      0.013073599,
      0.005650948,
      -0.014578083,
      -0.0011182849,
      0.008081558,
      0.0072773686,
      0.014460824,
      0.0009644551,
      -0.0060271104,
      0.013133715,
      -0.012523841,
      0.017349346,
      0.0022004975,
      -0.017023237,
      -0.009829008,
      0.025279513,
      -0.0028201132,
      -0.006755423,
      -0.019842103,
      0.0059157554,
      -0.0022448318,
      0.033692133,
      -0.015886445,
      -0.002894998,
      0.03146431,
      0.012577153,
      -0.012516692,
      -0.0077870227,
      0.00709017,
      -0.002836953,
      0.0060237385,
      -0.002064401,
      -0.009019803,
      0.01390285,
      -0.005515776,
      0.020068452,
      0.00096642366,
      -0.0033555885,
      0.016026529,
      -0.01369375,
      0.015154933,
      -0.029111702,
      -0.013412557,
      -0.023544366,
      0.008504395,
      -0.012182673,
      -0.019842375,
      -0.02528809,
      -0.0071926326,
      -0.0210574,
      0.01607254,
      -0.035335876,
      -0.012152877,
      0.0019664962,
      -0.030035146,
      0.014891404,
      -0.012241693,
      -0.029726604,
      0.0011333466,
      -0.010751912,
      0.018950976,
      -0.021410625,
      0.013002514,
      0.0089569185,
      -0.031142795,
      -0.016439047,
      -0.005971058,
      0.00053665024,
      -0.0013869057,
      -0.0042597847,
      0.0058330814,
      -0.010332548,
      -0.0035247994,
      -0.0062627457,
      -0.017423077,
      -0.010284948,
      0.014095154,
      -0.033370618,
      -0.008499417,
      -0.025459081,
      -0.032066576,
      0.020990375,
      0.0142818,
      0.01590775,
      0.0057995636,
      -0.02470031,
      0.005126521,
      0.0015877333,
      0.0086024795,
      -0.004626714,
      0.028215373,
      -0.008099869,
      -0.014775408,
      -0.003976582,
      -0.037851885,
      -0.013442426,
      -0.01741247,
      -0.013352145,
      -0.019688075,
      -0.008515959,
      0.009607343,
      -0.015820239,
      -0.0040891934,
      -0.016977228,
      -0.03299107,
      -0.0063414522,
      0.0050707725,
      -0.012336175,
      -0.007455747,
      0.027509792,
      0.0046195597,
      0.029783623,
      0.005249291,
      0.022819387,
      0.006027695,
      -0.002184795,
      -0.006088243,
      -0.03920213,
      -0.019399362,
      0.014838546,
      -0.008317095,
      0.011280473,
      0.0088107055,
      -0.008141767,
      0.027244633,
      0.024446677,
      0.0076037305,
      -0.016440812,
      0.014788242,
      0.0031625412,
      0.003163355,
      0.014929692,
      0.0078012804,
      -0.025884481,
      -0.00063026656,
      0.02029199,
      -0.00225856,
      -0.0031916173,
      0.011200604,
      0.011304384,
      -0.0042468356,
      -0.019369403,
      0.0056216987,
      -0.0134925945,
      0.011377054,
      0.0014775076,
      -0.007519216,
      -0.010932008,
      0.0059084618,
      -0.0037833152,
      -0.010090253,
      -0.010761019,
      -0.03149052,
      0.004199799,
      0.0132932775,
      -0.00987454,
      0.017294405,
      -0.009192445,
      -0.014582983,
      0.028672248,
      0.02106057,
      0.008808061,
      -0.000088498506,
      -0.03724213,
      -0.011821024,
      0.016723175,
      -0.0019542172,
      0.004822835,
      -0.021456314,
      0.01712955,
      -0.018527163,
      -0.0047185295,
      0.0044584405,
      0.004926565,
      -0.0048963567,
      -0.023178793,
      0.00771231,
      -0.001803378,
      -0.0031150065,
      -0.01106023,
      -0.0061049797,
      0.020021118,
      0.032375876,
      -0.010571531,
      0.035108488,
      -0.005359631,
      -0.003579002,
      -0.029088093,
      0.0042511993,
      0.025389556,
      0.004119598,
      0.014002656,
      0.009133895,
      -0.015085645,
      -0.008282331,
      0.0038245604,
      0.011916263,
      -0.013634233,
      0.0016201277,
      -0.032688722,
      0.034486085,
      -0.019886145,
      -0.0063286996,
      -0.000985637,
      0.00008607745,
      0.02629464,
      0.021829402,
      0.0026731102,
      0.010150383,
      -0.023654018,
      -0.0057055624,
      0.0028596458,
      -0.003382607,
      0.013823865,
      -0.13239613,
      0.011992328,
      -0.014737976,
      0.012836443,
      -0.013316537,
      0.0027256864,
      -0.013110236,
      -0.0124259,
      0.0014820462,
      -0.002981682,
      0.029812278,
      -0.0021781519,
      -0.006290106,
      -0.011379056,
      -0.006083801,
      -0.0035567542,
      0.018380579,
      0.006714011,
      0.008096607,
      0.0043897205,
      -0.0035280103,
      0.0016868792,
      -0.019542666,
      -0.011375451,
      -0.025813442,
      -0.011826487,
      0.0070360736,
      -0.013690794,
      -0.027069716,
      -0.010798656,
      -0.033008438,
      -0.01854365,
      -0.0021065758,
      0.011881982,
      0.009534718,
      -0.008669891,
      -0.009888677,
      0.010651284,
      -0.0004736584,
      0.014095552,
      0.01751628,
      -0.0035844748,
      0.034274947,
      0.012855746,
      -0.0043124035,
      0.026099136,
      0.035729703,
      -0.004392512,
      -0.009927508,
      0.03049677,
      -0.02104668,
      -0.01929458,
      0.0039254143,
      -0.022945462,
      -0.040283542,
      -0.0046898318,
      0.025556749,
      -0.0254311,
      -0.007623388,
      -0.00325807,
      0.012853217,
      0.012216585,
      0.014390823,
      0.002714894,
      -0.005412455,
      0.0039191837,
      0.009269951,
      0.0156034585,
      -0.014671451,
      -0.027822137,
      0.0059329327,
      0.009153754,
      0.004422584,
      0.0060691917,
      0.004004629,
      -0.004676374,
      -0.0005523278,
      0.017132992,
      0.013053926,
      0.008184132,
      -0.04094732,
      -0.0126864305,
      -0.06439362,
      -0.020542013,
      0.017267104,
      -0.020062977,
      0.019508094,
      0.02098275,
      -0.015353895,
      0.010601601,
      0.006444531,
      -0.013446858,
      -0.012548496,
      -0.009126512,
      0.0053893924,
      -0.0053819213,
      0.008010602,
      -0.013190252,
      0.00068225636,
      -0.014213382,
      -0.026485242,
      -0.008862504,
      0.008597851,
      -0.0015119324,
      -0.002622944,
      -0.020968404,
      -0.007293075,
      0.036234904,
      -0.006197063,
      0.017807985,
      -0.006852383,
      0.020893743,
      0.007537154,
      -0.15424117,
      -0.022654515,
      -0.00644643,
      0.018120274,
      0.005410003,
      0.0019240065,
      -0.016190596,
      -0.017109744,
      0.003390268,
      -0.00037668966,
      0.008292291,
      -0.0015573198,
      -0.01848662,
      -0.016688418,
      0.022000274,
      0.1295426,
      0.0057953247,
      0.0068508848,
      -0.019397266,
      -0.011287076,
      -0.0022203857,
      -0.010033866,
      -0.013804121,
      0.00443434,
      0.0060543455,
      -0.013906554,
      -0.007434587,
      0.0055784457,
      0.014942615,
      -0.012349145,
      0.0050388766,
      -0.020499744,
      -0.0090219285,
      0.029644234,
      0.008365487,
      -0.00041942508,
      0.0036608449,
      -0.0004742515,
      -0.006391036,
      -0.0061332774,
      0.023306662,
      0.013517227,
      0.012877788,
      -0.00525459,
      -0.0006015762,
      0.013271529,
      -0.003705189,
      -0.0073238784,
      0.00060874823,
      0.01588176,
      0.0027036772,
      -0.05154633,
      0.0038870596,
      -0.019995935,
      -0.016914727,
      0.005927849,
      0.008257066,
      0.006731199,
      -0.0045820833,
      0.031219361,
      -0.004491744,
      -0.0027782419,
      -0.011420585,
      0.009303247,
      0.008121542,
      -0.01478524,
      0.015202737,
      0.024307068,
      0.0044149607,
      0.012522304,
      0.001840174,
      0.011628347,
      0.009056999,
      0.000018499628,
      -0.0011244611,
      0.007360295,
      0.009335947,
      0.023945726,
      0.010123833,
      -0.0045663854,
      -0.0041279932,
      -0.005954185,
      0.0044303928,
      -0.0010890765,
      0.013835113,
      0.016978998,
      -0.0118991975,
      0.02412499,
      0.0028374086,
      0.022751305,
      0.009586363,
      0.015933089,
      -0.012922224,
      0.015991038,
      -0.00916224,
      0.0061496366,
      0.008114369,
      -0.0181277,
      0.029667636,
      -0.002024795,
      0.007289352,
      -0.0046014297,
      -0.008202953,
      -0.025859715,
      0.010149597,
      0.007970768,
      -0.0023408202,
      0.0052965535,
      -0.00600094,
      0.0026090739
    ]
  },
  {
    "id": "genai_cohort_python_06_handle_multiple_return_in_python_vtt",
    "content": "All right, so the next topic that we're going to discuss is about the return. So if you remember, we briefly touched on this topic, we had a simple function just like this. We have a function name we have discussed about what goes inside these parentheses. We goes like this. And, we usually go ahead and say pass. But you also have noticed, apart from print statement, we once wrote a return, value here or return keyword here. And when I say it's going to return, let's just say hitesh. That means it's returning a value, it's not printing it. What does it mean really? And can we have a small discussion on this for sure. Now I want to focus majorly on this keyword because it's an important one. Now imagine that you are a T seller and you have a great masala chai. What good is the effort if you don't hand in the cup to your customer? Exactly. Similar. This return keyword is this actually goes ahead and simply says, I will return you this value. And this value here can, be any value. So if I go ahead and say this value, this is exactly. Can be any value. Yeah, this is exactly what it's saying. I'll show you a more practical example of it, in fact, multiple examples of it, and then you will truly realize, all right, this is a really powerful keyword in its altogether. Let's go ahead and create a new file and call this one as tenreturn py. All right, so let's just say we simply go ahead and make a function which says make chai. And there we go. And, here it is. The simplest example is return. If I go ahead and use the keyword return, and I simply say, here is your masala chai. This is really interesting. Now further in my instruction, it's not printing by default as a function, but I want to print whatever the value it returns. So there are a couple of ways how this can be done. I can go ahead and say make chai. Now, whatever the result comes back, I'm immediately going ahead and printing this out. That's one way, very common way. You're going to see this quite a lot. So I just say Python 3, run this one. This is totally okay, but this is not really that easy to understand that what happens. So we'll cut this out and instead of going with this, I will just go ahead and use a value, return value. Don't use return as a keyword because it's, a reserved keyword. Python uses it, so we can't use it so now if I go ahead and use this, I hope you can see whenever this function executes and whatever it returns, that gets stored into this value and I can definitely after this print this value as return value, the result will be exactly same. But now this is much more easier for me to understand. So we need to study that. What happens when I go ahead and print this? That could be a case. That's a very interesting case. Let's just say I'll comment this out and I'll go ahead and just say print. And I want to print something like this. And I will say here is your masala. Oh, I did a typo prep before that. Masala chai. What's in this case? What would be the value of return value? And this is exactly, you should be aware of this, that this will be none. So let's go ahead and have a discussion on this one. So whenever there are a couple of cases that goes through like this. So let's go ahead and understand this. So return can actually return nothing. When you go ahead and return nothing, this is simply known as that you are implicitly, implicitly returns as none. That's interesting. Now you can also go ahead. If you don't return anything, the none will be returned to you. So this is again a keyword. But this is interesting. You can also return one value value. You can return multiple value and you can also early return from a function. What do you mean by early? From a function. I'll show you example for each one of them. Don't you worry in that case. So we'll take another such examples for in this case we have seen it once, but I want to show you it again. All right, so let's just say I create a function and I say this is my idle ideal idle chaiwala, which also names as tea seller. And I will go ahead and just say pass. I don't do anything in this one. So if I go ahead and try to print the value here and I say this is my idle chaiwala, runs this. Now you'll also notice again this time first let's comment this one. No printing. And yeah, that's okay. That's it. Save this. Run this again. And now you see print. Of course this also prints. I don't want it to be here. I'll just comment this and this as well. Too many comments. But don't focus on that. Just focus on this. So we can see this ideally gives me none as the value. Just see it up here. The none. Yep. This marks the point that, hey, nothing. When you give me nothing, it will be implicitly returning me a none object. And I can do a lot of things with that. Now what happens if I want to do something more? All right, let's just say you define another function which is sold cups. And in the sold cups you go ahead and return me one number only. So that number could be anything or could be a true false, whatever the value is. The interesting part now is I can go ahead and store this into any variable. I can just run this function just like this and whatever the result comes back, I store that result. I can go ahead and print this total and I'm pretty sure you have guessed the output by now. What's going to be the output for this one? So there we go, run it again. We see that the none is above output, but we have this Pretty nice. Interesting, isn't it? All right, so what about returning early? Because I know multiple value will see that for sure. But right now let's just see. We have seen the one value. Now I want to see the early from a function. We'll surely handle the multiple value. Don't you worry on that. Let's just say you define another one which says chai status. And what I say is this takes parameter as cups left left. And we have a condition here that if somehow the value cups left is equals to zero, and in that case I simply want to return, surely I can use break, but I just want to return that says sorry chai over or chai I can use other words as well in my native language, but I'll go and in the other cases I'll go ahead and say chai is ready. All right, so how can we use this? How can we actually short circuit this one? So if I go ahead and print this out as my chai status and I go ahead and pass on a value of VS I pass on a value of in the first line, we are actually short circuiting it. That means once the return value is there and once a function hits return, no other code is executed. I repeat this once a function hits the return keyword. After that, no matter what happens, other code will not execute. All right, let's see that in action. So in the first line you're going to see that the sorry chi over. If this is getting printed in the first iteration of the function, this chai isready never prints out. But in the other case, when you pass on the value, you never are Short circuiting it and you always get the chise ready. What you'll also notice if I go ahead and say that I want to print something here within this function. Notice here what happens if I go ahead and print say chai. Notice here it's always grayed out. I hope you can see that. Very difficult. But still you can see this. This is grayed out. If I try to run this, the code, no matter what happens, will never reach to line number Because once you return, that means that is it. And that's what it says early from a function. Returns early from a function. All right, hope this is now clear. Now one more thing. How about we talk about returning multiple values. This is what you will see quite a lot. A lot of other languages are also adopting this behavior. But this is actually very fun. I can go ahead and say that I will go ahead and work on with chireport. I'm collecting a report for chai and then I return somehow I return two values. Now by the way, you can return true, false or arrays. You can return anything which you wish. What I am returning for just my reference, I'm saying how many sold and how many remaining. All right, good enough. Now with this, any function, as soon as you execute this method, which is chireport, this will return you two values. So what you can expect, you can declare two values, sold and remaining. And automatically when this function execute, it will give you the two values. Surely you can return third value as well. But since you are not handling this, this will go probably in the air. Nobody is going with that. Let's go ahead and print out the values. So I'll just go ahead and say this one is sold and I want to have the sold variable another one. We are going to go ahead and say remaining. For this one I will say remaining. Hope I wrote that correct. So we get this one. Let's see what's the output of this? You might have guessed the sold is and all of that. But what happens in the case when actually function returns for something? Some people haven't paid for that. So in that case the function will simply say that hey, we are returning unpacking three values. Why are you not handling the three values? And there are a couple of ways how this is handled or this can be handled. Oh, in case you are an experienced programmer, you might be guessing, hey, what if I just go ahead and put up an underscore here. I'll show you directly practical what happens. The code actually runs. And you will see this quite a lot. Underscore means, hey, I know the three values are coming in, I'm handling them, but I'll probably never ever use this value here. So it's, a common practice. You might use underscore here. That's a hack. But most of the time you want to have this, so, I'll just go ahead and say, not paid. And it's up to me that I don't want to use this value or this variable. It's okay. You can actually run both of the cases, so this is really fun. So I hope this gives you the idea of how it works and how the function return can be a really, really interesting topic. So that is it for this video. Let's catch up quickly in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "06 handle multiple return in python.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/06 handle multiple return in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.02845958,
      0.0019881267,
      0.033720493,
      -0.06067135,
      -0.015049045,
      -0.019243015,
      0.006293615,
      0.026253862,
      0.0020152375,
      -0.0032660938,
      -0.00035504086,
      0.009495728,
      -0.0022854267,
      0.017876623,
      0.119712524,
      -0.0025462764,
      -0.010276114,
      -0.019045046,
      0.0059345826,
      -0.012114255,
      0.014946633,
      0.0075012245,
      -0.020675225,
      -0.015411559,
      -0.0053471313,
      0.013051762,
      0.010205813,
      0.026643839,
      0.021491785,
      -0.032529637,
      -0.007444443,
      0.0021728212,
      0.0023421869,
      0.031171761,
      0.008858947,
      0.018962214,
      -0.00038836675,
      0.0027087794,
      -0.009863929,
      -0.00097216584,
      -0.032398928,
      -0.020024681,
      0.001188042,
      -0.022916997,
      0.013328287,
      -0.040161017,
      -0.010219404,
      -0.0071938946,
      0.0039570923,
      0.039293036,
      0.011516651,
      -0.011819421,
      -0.0144211715,
      -0.19848919,
      0.024055544,
      0.0048479154,
      -0.0012812787,
      0.0049617575,
      0.010802416,
      0.0052831643,
      -0.031343937,
      0.006828842,
      -0.020316586,
      -0.010340525,
      0.00490947,
      -0.02507638,
      0.024340054,
      0.0102479635,
      -0.0007907194,
      0.012777377,
      0.02955102,
      0.029380612,
      -0.015458411,
      -0.01506926,
      -0.028469246,
      -0.028570285,
      0.007115391,
      -0.024952741,
      -0.014675416,
      0.0015046395,
      0.026352623,
      -0.010364683,
      0.0014765502,
      -0.0073351525,
      0.015553551,
      0.0018653639,
      -0.023267724,
      -0.008241179,
      0.020831956,
      -0.0009139046,
      -0.009703195,
      0.0077388203,
      0.0005696388,
      -0.0010429702,
      -0.009385686,
      -0.0061257873,
      -0.010432206,
      0.01659259,
      -0.03329457,
      -0.0056686117,
      -0.018715093,
      -0.01150467,
      -0.012717443,
      0.0036152469,
      -0.0007309203,
      -0.00451967,
      0.0038698236,
      -0.00083001866,
      -0.027723307,
      0.0015062342,
      -0.009164387,
      -0.0035624644,
      0.003961259,
      0.028031169,
      -0.003787736,
      -0.17534147,
      0.0096081225,
      -0.007655867,
      -0.017342186,
      0.004742136,
      0.0010540108,
      0.009902883,
      0.0028453853,
      0.013718244,
      -0.007626878,
      0.025905397,
      -0.012471256,
      0.02582399,
      -0.0027292545,
      -0.009190922,
      -0.021528056,
      -0.019867657,
      -0.0032666468,
      0.0031910166,
      -0.0047778836,
      0.03414627,
      -0.024477998,
      -0.005399612,
      -0.024651837,
      -0.0009323583,
      -0.011325577,
      0.019702448,
      -0.00042555822,
      0.028188549,
      0.007911378,
      -0.00053003285,
      -0.01249701,
      0.0022256162,
      -0.027805865,
      -0.028736116,
      0.009716218,
      -0.005959558,
      0.0025914984,
      -0.007113538,
      0.035468914,
      -0.016887983,
      -0.002449858,
      -0.0023389903,
      -0.008336711,
      0.007518263,
      -0.017712899,
      -0.011462095,
      0.014973016,
      -0.0037643544,
      -0.008339792,
      -0.0018065169,
      -0.010028503,
      -0.0039244923,
      0.023432657,
      0.017488288,
      0.0011999739,
      -0.015251796,
      0.0040086326,
      -0.011124954,
      -0.011201461,
      -0.0011755371,
      0.009222094,
      0.0016046085,
      0.011945214,
      -0.01391612,
      0.016979313,
      -0.002106266,
      0.012912594,
      0.011796076,
      -0.0035422095,
      0.005664871,
      -0.006298964,
      0.008502451,
      -0.000630671,
      -0.018790554,
      -0.017863808,
      0.004295524,
      0.0039763134,
      0.012528784,
      -0.0019475206,
      -0.03367049,
      -0.00057244924,
      0.005384088,
      0.005395119,
      0.0040087937,
      0.026609741,
      -0.020207744,
      -0.0022897772,
      -0.02372317,
      0.03494173,
      -0.019772185,
      0.0056380644,
      -0.004227463,
      0.030815655,
      0.004995615,
      -0.018424375,
      0.00032889427,
      0.011886927,
      -0.011173638,
      -0.009717319,
      -0.01142662,
      0.013078092,
      0.0054928423,
      0.0049039638,
      0.011580266,
      -0.0075731045,
      0.005520631,
      0.0032563063,
      0.015669396,
      0.015256194,
      -0.020448325,
      0.0116650695,
      -0.008213999,
      0.014885407,
      -0.0012001263,
      0.026939074,
      -0.011053524,
      -0.00790093,
      -0.010571157,
      0.0049716025,
      -0.011187753,
      -0.0030527774,
      0.027447963,
      0.0033088173,
      0.005293106,
      0.017680945,
      -0.007362634,
      -0.012911021,
      -0.0023342897,
      0.016385878,
      -0.00047597586,
      0.013821255,
      -0.00065365457,
      -0.005585528,
      -0.019807339,
      -0.015068302,
      -0.008359406,
      -0.0038024453,
      0.0025838,
      0.0055958903,
      -0.024843955,
      -0.035868123,
      -0.004801669,
      -0.011189646,
      -0.008114169,
      -0.0022129705,
      0.0009847388,
      -0.017722776,
      0.0021519517,
      0.025770387,
      0.002101397,
      0.00009135887,
      0.038151957,
      -0.024108555,
      0.015887374,
      0.018238219,
      0.023047702,
      0.012667757,
      0.0029759824,
      -0.03372679,
      0.012315549,
      -0.100329794,
      0.007982462,
      0.024108514,
      -0.012263644,
      -0.0068253833,
      0.010795036,
      -0.012301566,
      0.013146,
      -0.0037499906,
      0.0077008605,
      0.0086876815,
      -0.010870148,
      0.019541118,
      -0.011260449,
      -0.015308302,
      -0.0044557885,
      0.014486658,
      -0.0062948414,
      0.011882462,
      -0.00957526,
      0.005858918,
      -0.01398642,
      -0.011523626,
      -0.020322446,
      0.017099282,
      0.009573809,
      -0.0148623865,
      0.022045225,
      0.020153983,
      0.0023031256,
      0.006848708,
      0.014131317,
      -0.007281964,
      0.005717857,
      0.017794156,
      0.011967129,
      -0.000079889985,
      -0.007097661,
      -0.004774914,
      -0.008581624,
      0.013572094,
      -0.01566044,
      0.017494924,
      0.040398184,
      0.0041957577,
      0.013642256,
      0.0037742355,
      0.008242302,
      -0.015637828,
      0.0016350191,
      -0.02106008,
      0.013844629,
      0.0151808085,
      -0.0027881141,
      0.008453977,
      -0.011332998,
      0.018917838,
      -0.0027076618,
      0.00332464,
      0.002635976,
      0.0059429393,
      0.0100199105,
      0.011053055,
      -0.021051036,
      0.012663082,
      0.0067448835,
      0.021037746,
      -0.014045552,
      -0.009343365,
      -0.007007579,
      0.0033360547,
      -0.0027543935,
      -0.015785445,
      -0.022840526,
      -0.00013841853,
      0.0044251685,
      0.02021874,
      -0.022971587,
      -0.012896619,
      0.040399972,
      0.0027092544,
      -0.013044419,
      -0.017791037,
      0.017484896,
      0.00085143675,
      0.01785778,
      0.006975119,
      -0.014072982,
      0.012253841,
      -0.009748411,
      0.00901599,
      0.009991983,
      -0.01676004,
      0.008041042,
      -0.024043482,
      0.011766782,
      -0.01818756,
      -0.026465923,
      -0.023373025,
      0.0055203764,
      -0.0103062745,
      -0.010140676,
      -0.028546594,
      -0.000116102725,
      -0.003233172,
      0.009980111,
      -0.020634484,
      -0.010657473,
      0.012377215,
      -0.035112564,
      0.0057935966,
      -0.026998224,
      -0.032174956,
      -0.013119594,
      -0.02523039,
      0.018643092,
      -0.01503983,
      0.006665617,
      0.008603593,
      -0.022962525,
      -0.008115731,
      0.0010562942,
      -0.01196958,
      0.00045119604,
      -0.004189513,
      0.004609174,
      0.002875681,
      0.02545668,
      -0.01452506,
      -0.022696862,
      -0.020115675,
      0.031768955,
      -0.03517115,
      -0.016415343,
      -0.0077518537,
      -0.009788127,
      0.02174675,
      0.029492235,
      -0.0013678944,
      -0.017938178,
      0.0020487513,
      0.0020972127,
      0.030202297,
      0.006459666,
      -0.0041306033,
      0.018624982,
      -0.0017917961,
      -0.017631443,
      -0.009808002,
      -0.031190623,
      -0.023385921,
      0.002779658,
      -0.010109289,
      0.004168751,
      -0.007432018,
      0.0116226515,
      -0.004264654,
      -0.009853288,
      -0.0073142555,
      -0.0254708,
      0.014887134,
      0.010329202,
      -0.025636492,
      -0.010360233,
      0.017599212,
      0.006553981,
      -0.010974532,
      -0.014673101,
      0.0034300152,
      0.010179776,
      -0.0009193047,
      -0.017238945,
      -0.05350555,
      -0.010419084,
      0.02328679,
      -0.0038684034,
      0.019665696,
      -0.010240559,
      0.034503628,
      0.01239227,
      0.011595805,
      0.011971246,
      -0.018229457,
      0.004724558,
      -0.01710946,
      0.005115362,
      0.009859111,
      -0.0047800234,
      -0.032067284,
      0.00085391034,
      0.009826491,
      -0.015315166,
      -0.007017605,
      0.014711428,
      0.010657195,
      0.03604127,
      -0.011276409,
      0.010326721,
      -0.009394684,
      0.021011505,
      -0.005625174,
      -0.019765,
      -0.0075946706,
      -0.012079976,
      0.014726364,
      -0.016689816,
      -0.009413523,
      -0.020593597,
      -0.0069439546,
      0.006598611,
      -0.02033445,
      -0.004182513,
      -0.00437932,
      0.0021219065,
      0.0229623,
      0.027416414,
      -0.0040494227,
      0.012534948,
      -0.033441417,
      -0.0049924343,
      0.0155562265,
      -0.009666302,
      0.0005178282,
      -0.025027987,
      0.0101610115,
      -0.013565232,
      0.0085147,
      -0.006207054,
      -0.00033315405,
      0.007492258,
      -0.027229926,
      0.0022251487,
      -0.017154668,
      0.0020958367,
      -0.01710222,
      -0.01388426,
      0.021123115,
      0.022530872,
      -0.009576626,
      0.016434526,
      0.00020007498,
      0.003996918,
      -0.0081825685,
      0.016414274,
      0.010087518,
      -0.014095382,
      0.029359171,
      0.0013889277,
      -0.011618604,
      -0.0017686129,
      -0.0039752824,
      0.013972873,
      -0.003628567,
      0.005994634,
      -0.026439538,
      0.042798523,
      -0.017286066,
      0.0035373212,
      -0.0059289834,
      -0.01112492,
      0.012368859,
      0.029806526,
      0.007372063,
      0.0013793436,
      -0.0129204,
      -0.021818135,
      -0.013110221,
      0.016768627,
      0.010503676,
      -0.1263055,
      -0.01633852,
      -0.009378808,
      -0.0043279817,
      -0.018280681,
      -0.007333531,
      0.008584422,
      -0.018870225,
      0.009636616,
      0.0020656574,
      0.020421593,
      -0.01185063,
      -0.0065532043,
      -0.012165181,
      0.0043621194,
      -0.022113957,
      0.019864256,
      0.007997065,
      0.018196112,
      -0.00844769,
      -0.009942712,
      -0.0041264934,
      0.0058554215,
      -0.007852273,
      -0.012574015,
      -0.013217527,
      -0.0008071338,
      -0.0023872317,
      -0.002001957,
      -0.028008161,
      -0.038561016,
      -0.004515651,
      -0.010665107,
      0.00936759,
      0.0069890367,
      -0.009859999,
      -0.0035252573,
      -0.007786945,
      0.004708915,
      -0.0016780619,
      -0.00069786364,
      -0.0074090553,
      0.015816055,
      0.0014842157,
      -0.0011953446,
      0.02942456,
      0.053855576,
      -0.016605152,
      -0.0072164186,
      0.037852373,
      -0.029236259,
      -0.019936066,
      0.0055349558,
      -0.026833873,
      -0.017713903,
      0.004300598,
      0.023852946,
      -0.013251989,
      -0.0041347276,
      -0.008940347,
      -0.000023559938,
      0.0057192836,
      0.01274987,
      0.04630398,
      0.012334805,
      0.005975711,
      0.032723352,
      0.0012768767,
      0.0027670977,
      0.002008756,
      -0.0029569436,
      0.017222732,
      -0.011020627,
      0.036053985,
      0.022437185,
      -0.005698286,
      -0.00043030333,
      -0.0004153089,
      -0.011896671,
      0.007960912,
      -0.030774163,
      -0.0017597093,
      -0.060540356,
      -0.017576246,
      0.012329287,
      -0.010230317,
      0.008767666,
      0.000769926,
      -0.013775418,
      -0.0022651167,
      0.004138849,
      0.0076972744,
      -0.03115238,
      -0.01707251,
      0.0039308313,
      -0.00678614,
      -0.008273333,
      0.0070311036,
      0.008525459,
      -0.010142385,
      -0.031734306,
      0.012097477,
      -0.008945071,
      0.0016473952,
      -0.0152958585,
      -0.019026887,
      0.018694602,
      0.019911734,
      0.0004614762,
      -0.005251605,
      -0.010870778,
      -0.00562247,
      0.0052780686,
      -0.1451654,
      -0.00085210154,
      0.006670308,
      0.01695885,
      -0.0076692738,
      -0.0014434727,
      -0.003999741,
      0.0030138236,
      0.0029722825,
      -0.01331667,
      0.006986533,
      -0.007301479,
      -0.011827319,
      -0.0067567346,
      0.024887126,
      0.12912855,
      -0.014732261,
      0.009132647,
      -0.01987862,
      0.007521349,
      -0.021339362,
      -0.0059364587,
      -0.014175304,
      0.019945778,
      -0.01758219,
      -0.020685358,
      0.017868383,
      -0.0066481037,
      0.005944082,
      0.0022218477,
      -0.014905531,
      -0.009291128,
      0.011332517,
      0.010327214,
      0.002553127,
      -0.008700694,
      -0.002260581,
      0.015432318,
      -0.005729809,
      0.0063438658,
      0.027717099,
      0.01116243,
      -0.0004287317,
      -0.013848575,
      0.016785558,
      0.0039053021,
      -0.00014389097,
      -0.023186272,
      0.0016875874,
      -0.0015511794,
      -0.0028296325,
      -0.05405582,
      0.0003671966,
      -0.018665703,
      -0.01903624,
      0.02227985,
      -0.000113957954,
      0.009844546,
      0.015579688,
      0.012662703,
      -0.01807487,
      -0.021709181,
      0.004872613,
      -0.012054179,
      0.008840488,
      -0.0144315595,
      0.029900812,
      0.016369585,
      -0.0033097076,
      0.007091613,
      0.0042827046,
      0.015695693,
      -0.0011960317,
      0.008634236,
      -0.0006703564,
      -0.010684373,
      0.01220626,
      0.018888105,
      0.0084273,
      -0.0031756763,
      0.009887884,
      0.0027450388,
      -0.0037153384,
      -0.016494803,
      0.020993566,
      0.0040298016,
      0.0060904413,
      0.008448925,
      -0.017351644,
      -0.007463496,
      -0.0018426304,
      -0.013226072,
      -0.010725952,
      0.0112430435,
      -0.011530592,
      0.00391545,
      0.008834403,
      -0.040271215,
      0.021120364,
      -0.015522044,
      -0.004138047,
      0.011678131,
      -0.015273734,
      -0.02120846,
      0.018174112,
      0.002378765,
      -0.0012936359,
      0.023529962,
      -0.0061705816,
      -0.013696091
    ]
  },
  {
    "id": "genai_cohort_python_07_Lambdas__pure_vs_impure_functions_vtt",
    "content": "All right, I hope the videos are packing up you with a lot of knowledge and that's why you probably would consider to rate us as well. Hopefully you have done that. Anyways, let's go ahead and now talk about types of function. This is really an interesting topic. So as we see that the functions are really the core of building large scale projects in the Python, but there are actually variety of types of function. Now again, this is not really specific that there is actually a type, but people love to have a differentiation between them. For example, we have pure VS impure function. I'll show you what they are. We also have another types as well. I'll just go ahead and add this one here. Some things are known as recursive functions. Yes, there's actually a name for it, recursive function functions. Some functions don't even have names as well. Yeah, how does that work if function doesn't have a name? Yes, there is a way of how to deal with them as well. So these are known as anonymous function, but in the world of Python they are famously known as lambdas, lambdas or also known as anonymous function Anonymous. Hope I wrote that Correct, Anonymous functions. But again whatever you call them, they are just functions and they are just type of it. Don't worry too much about that. So let's go ahead and talk about them that how the function can actually behave. First of all, let's start with the basic one which is pure VS impure function. What they are, let's go ahead and close this, we'll have another one, we're not running out of the files. So this one is types of function, types of functions py. All right, first of all let's talk about the pure functions in pure function. So let's just say you define that this is pure chai. Hope you'll remember that always. We simply go ahead and say cups and we simply I'll just close my AI editor, it's bothering and I go ahead and simply say I want to return whatever the cups value pass me up, I go ahead and multiply it by All right. This is known as pure function. It doesn't alter any ingredient globally. The moment you touch anything globally for example, it doesn't need to be at the very top of the file as well. Globally can be any variable which is available in the global scope. So I go ahead and say totalchai, and you can see if the total chai value is, let's just say zero. Our top function still doesn't change or any way manipulate this one. But if I go ahead and say, impure chai, hope this will help you to remember this always. This one also asks for the cup, but apart from the cups, this one somehow manipulates this one. I hope the knowledge is still with you that we can actually use global as a variable. And then I can go ahead and say I have the access now, I want to access the total chai and whatever the total chai that we have is, simply go ahead and plus equals cups or somehow manipulate that. This is known as impure function. And what's the most important part about this is that this is not recommended. Yeah, I have discussed the reason in the past as well. Recommended. All right, so this is not a recommended way. Again, make sure you always remember you never want to touch these things. This can actually eventually lead to some of these implications which we don't see right now. So remember, pure functions just work with their in itself. Impure functions are usually not recommended. They are supposed to be avoided. But if you're writing them, you know that this is not recommended and this is an impure function. The next one that we have, we have talked about this pure and impure. Next one we talk about, want to talk about is recursive function. You might have seen this topic quite often in your data structures and algorithm class. This means the function is going to call itself. Yeah, but it's not going to call like endlessly. There's always a trip, condition which ends it. For example, if I go ahead and say I have a poor chai, I'm pouring the chai and I'll just pass on a variable n here. And we simply go ahead and say if n is equals to zero, then we go ahead and say return. This means we just end the function. We simply go ahead and say, all right, cups poured, something like that. And in all the other cases we simply go ahead and return, the same calling of the function poorchai, but we this time call it with n minus So this is a little tricky. But I'll show you by taking you on the board itself that what does this function actually does. So you're going to notice that if we have this function, this is a very interesting case study of a function itself. If you have this function, let's just say the first value we go ahead and say this value is, oops. The value that we are giving is three. All right? So the value three goes inside this function up here and especially up here. Come on There we go. It goes up here. The value is not zero. So it's going to go ahead and call the function again with the value of n minus So automatically becomes It again goes ahead and call this. But this function will be called with the value Again, it is not So then it again calls the function with the value of one. You guessed it right. So we get the value of one. Now again the function goes inside this one. It goes up here again. Since it's not zero, it will be called one more time. And finally, when the value actually becomes 0, then this will go up here and this will say, okay, this time the n is equals to zero. So it will simply say return all cubs board. So notice here how many times actually we are calling the function itself. And believe it or not, this is actually a technique used quite a lot. So I'll just go ahead and print this one here and I will say go ahead and pour the chai. Let's use the same example. But three. Three is good enough. I'll just go ahead and run this. And notice here, we are just returning it. Notice here remaining is Again, we should be pouring the chai printing. We're just returning the things we are not printing. So all cups are poured. Why we don't get it? Let's run this one more time. Why we are not getting this value? My bad. I'm running the wrong file. That's the reason. Silly me. run this. And there we go. It says all cups poured. So although we get the result. But if we go ahead and print the value of N just before checking off anything, I think that would be useful. So let's just say we print just the N and let's just run this. And there we go. We get this three, then two, then one, then finally one, then finally zero. And then finally it says all cap board. This, recursion is a very, very classic technique of doing a lot of complex tasks. But yeah, it works. Now, last but not the least is the lambdas. They are very fun. Little bit tricky for a lot of people to go through with it, but hey, this is okay. You'll be there. For example, let's go up here. And there we go. Let's say we have, chai types. We have a lot of types of chai. Let's just say the first one being, we have a list of them. The first one being a light chai. Then we have a, karak chai. That means a very strong One. Then we have a famous ginger T. Then we go have and probably have again reputation. Oh goodness. We have seen reputation. So notice here, this is one here, this is one here, this is one here. But this is exactly same. So maybe you want to filter out all the cups that are not Kadak chai. Or you can use any other variable if this is too difficult for you to say. So I can just go ahead and say I will have a variable known as strong, chai. All right, so in this I want to filter out this thing. So here's the interesting part. How can I do this? I can go ahead and call this one as a list. I'll prepare a fresh list again and as soon as I go ahead and use this list, this is a built in immutable sequence. I, I can use a filter here. Notice here it's a filter. It returns an iterator. That means, yeah, it's going to return you again, a list. And the way how you use it is you pass on a function to it. And most of the time you are not going to see people passing you functions. They actually usually pass on a lambda here. And again notice here there's no argument that hey, can I always just only pass lambdas? No, you can pass on functions as well, no problem there. But if I go ahead and use filter, this is the syntax, I go ahead and provide the filter just like this. The first argument is your lambda. And the second argument that you have to provide is where should iterate. So you should iterate over chai types. All right, this is all good. Hopefully that is this is second argument. The first argument is the function name. So the function name could be anything. So for example, if we have function name. Yeah, we have poorchai. You can go ahead and literally say poor chai. This will be all happy. But this is not what most people do. Most people try to write this function just for once because they don't want to use it again. It's a very simple one. For example, I can just use a lambda instead of the def. We use lambda because these functions don't have a name. Now what happens in this one is I go ahead and say chai. And the reason I'm calling this Chai because this is my iteratable and I have to name each of this variable something. It could be chai, it could be anything else. Then you go ahead and put up a colon. That means I want to do something now. And I will say chai is equals, equals. I'll just look for kadak and you can look for anything else. I'll just make this all in one line. It's easier to see this way. This is a little bit of a syntax involved. Syntax. Now what you're going to see what's the expected result. Now the result simply says I want to filter out and only the value gets out of this filter which are true. So first we simply say I want to go through this loop. All right, you go through this entire loop. I am saying that each of the variable, whatever these values are, I'm going to call them as chai. You can call them Superman. Nobody is bothering on that part. But only return me the result when this condition is met. So when the chai name is equals to Kadak, only return me that and store that as a list. So what's going to be in the strong chai? Two times this one because this matches up two times. So that is the result we have got. I'll show you one more interesting result as well which is commonly used. So if I go ahead and print out the strong chai, this is something that I should know what I will get as a result. Value. Notice here we get two times of the Karak chi. Hope that's clear. Now what you're also going to notice sometimes people say I want a result which is not equals to Karakchai. So what do you think what is going to happen when I just say this? That means hey, this is not Karakcha. I will return that this is true. Is this Karakchai? Oh, this is not equals to. So only true part will get that. Is it not Kadak? No, it is Karak. It is true. So I hope you get that we have reversed the logic. If I'll explain it more I'll probably confuse you more. So notice here we get something like this. So whenever we want to make a fresh list where I want to delete some objects or something, whatever the ID you have passed me on in a todo, I usually use this logic that hey, just make a fresh list and which don't use the ID which user has given me. So we just avoid the ones which we match exactly and we get the idea. So this is really really fun that we have and that we can do again. Try to practice this. This is a very new syntax. Because this function doesn't have a name, it's just use and throw. We use it once and then we just forget about it. Little bit of a new syntax. But try it one more time, get some examples. Try to practice it a little bit and you will get it. So this is all about your Lambdas, also known as Anonymous function. Pretty fun, isn't it? Let's catch up in the next video. And don't forget to rate.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "07 Lambdas, pure vs impure functions.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/07 Lambdas, pure vs impure functions.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.013727027,
      0.012676543,
      0.029438311,
      -0.05156372,
      -0.01225487,
      -0.021819405,
      0.023556573,
      0.03530831,
      0.002573718,
      0.010811479,
      0.00220811,
      0.0116699245,
      0.011277407,
      0.03277972,
      0.11115847,
      0.00068785565,
      -0.023544347,
      -0.0136935515,
      0.011998317,
      -0.030358229,
      -0.002868724,
      -0.0110621555,
      -0.007311934,
      -0.01831244,
      -0.00029232804,
      0.004942122,
      0.015151389,
      -0.0015380527,
      0.032085545,
      -0.008586604,
      -0.031572234,
      0.0057421965,
      0.017498245,
      0.028944522,
      0.009952014,
      0.021618888,
      0.0035782387,
      -0.0043703998,
      0.0067357295,
      0.031890713,
      -0.018451365,
      -0.0135517325,
      -0.0067929765,
      -0.018112225,
      0.00718167,
      -0.032382376,
      -0.0022226004,
      -0.023556406,
      -0.014218135,
      0.02241697,
      0.004061426,
      -0.015483325,
      -0.012193679,
      -0.18397315,
      0.007945221,
      0.0035183032,
      -0.004824271,
      0.0077905385,
      0.014045727,
      0.010856251,
      -0.029598312,
      0.015534363,
      -0.02987334,
      0.013018336,
      0.0063686376,
      -0.01752357,
      0.010815868,
      -0.0020442472,
      -0.0017927175,
      -0.019570569,
      0.024543937,
      0.017943846,
      -0.01219124,
      -0.018985877,
      -0.029700639,
      -0.017409958,
      0.0007892928,
      -0.02135166,
      0.0011745881,
      0.012261867,
      0.011081148,
      -0.0021512103,
      -0.0044197715,
      0.0018416095,
      0.026596295,
      0.0019676883,
      -0.013755268,
      -0.019064033,
      0.0064471704,
      -0.0090812165,
      -0.010113982,
      0.010153963,
      0.0005939833,
      0.012705855,
      -0.025049165,
      0.011989229,
      -0.007030547,
      -0.0012453628,
      -0.02771042,
      0.0036700994,
      0.0050433176,
      -0.01676002,
      -0.002225491,
      0.002229559,
      -0.0035293521,
      0.0024308627,
      -0.0020699487,
      -0.006500182,
      -0.024850171,
      -0.019194428,
      -0.014276192,
      -0.0019729405,
      0.01061436,
      0.01855171,
      0.011122237,
      -0.18754436,
      0.012479261,
      -0.012764086,
      -0.014330873,
      -0.00009003464,
      0.007608795,
      0.01684688,
      0.0088296225,
      -0.003263333,
      -0.0057581686,
      0.023372462,
      -0.0061023757,
      0.04170003,
      0.008095744,
      -0.0056785624,
      -0.0147315385,
      -0.01850866,
      0.009345033,
      0.002646058,
      -0.00040505122,
      0.016144097,
      -0.035966624,
      -0.010294742,
      -0.026225396,
      0.00071889686,
      -0.015866308,
      0.027211102,
      -0.0026456504,
      0.015036487,
      0.010700499,
      -0.0028967378,
      -0.014919734,
      0.009571906,
      -0.040756594,
      -0.027215376,
      0.030865563,
      -0.012815752,
      -0.0071109007,
      -0.00862162,
      0.017501542,
      -0.02715037,
      -0.0017591411,
      0.0016003038,
      0.006584588,
      0.003028783,
      -0.029303985,
      0.0036915892,
      0.009579592,
      -0.0023415382,
      0.004189362,
      0.005378127,
      -0.031958014,
      0.007125522,
      0.006924535,
      0.019181406,
      -0.009964078,
      -0.022270171,
      0.0033796902,
      -0.0090475725,
      -0.014626456,
      -0.004978463,
      -0.0003246944,
      0.0044840365,
      0.017318105,
      -0.024715466,
      0.015394971,
      -0.0044944086,
      0.016455546,
      0.021196267,
      0.0031545528,
      -0.008641723,
      -0.014375217,
      0.018854339,
      0.0045377044,
      -0.012085869,
      -0.0053443606,
      -0.0031210938,
      0.017655402,
      0.008390604,
      0.010482044,
      -0.03284513,
      -0.00074406486,
      -0.0143976435,
      -0.010056423,
      0.022375897,
      0.028393844,
      -0.022704042,
      0.020836862,
      -0.036767874,
      0.014112299,
      0.0033105726,
      0.009501515,
      0.0027718414,
      0.03445492,
      -0.0007897371,
      -0.03314872,
      0.000646742,
      -0.0033185268,
      -0.010313662,
      0.020498201,
      0.01520234,
      0.009069726,
      0.015602404,
      -0.011465507,
      0.00035366285,
      -0.0075396188,
      0.01075074,
      0.015006469,
      0.0154205,
      0.0012709051,
      -0.01342478,
      0.0205751,
      0.0012282899,
      -0.009551175,
      0.01091219,
      0.028469369,
      0.019994212,
      -0.02797735,
      -0.029690534,
      0.011061077,
      -0.017474389,
      -0.0035763213,
      0.02661218,
      0.016342487,
      -0.0073605943,
      -0.00957683,
      -0.0054477314,
      -0.008151953,
      0.005895994,
      0.015358874,
      0.0116414605,
      0.006397575,
      -0.01175343,
      0.004451092,
      -0.024863068,
      -0.029977623,
      -0.011215812,
      0.00508686,
      0.0002496717,
      -0.012035955,
      -0.022837304,
      -0.0109823635,
      0.0047771377,
      0.010101087,
      -0.013170117,
      0.0049823257,
      0.010856883,
      -0.014636346,
      -0.0038043032,
      0.016035132,
      0.015055603,
      -0.00015278073,
      0.042092707,
      -0.019507077,
      0.011482764,
      0.016979799,
      -0.0026931008,
      0.0035574737,
      -0.013660799,
      -0.009536679,
      0.0068150284,
      -0.09659821,
      0.040634528,
      0.01631024,
      0.0011502346,
      0.010040966,
      0.012843957,
      -0.020366209,
      0.02234302,
      0.01563941,
      0.010901785,
      0.002029487,
      -0.0035356092,
      0.012054645,
      -0.006540686,
      -0.0041316696,
      -0.015508117,
      -0.002782008,
      -0.020392604,
      0.01212462,
      -0.015264119,
      0.007714176,
      -0.0030936634,
      -0.004181621,
      -0.0052792886,
      0.004231841,
      -0.0029904498,
      -0.02104245,
      0.013625198,
      0.010569007,
      0.0017630468,
      -0.0142097045,
      0.01965168,
      -0.010446688,
      -0.0026385149,
      0.011491504,
      0.0033480448,
      0.014594311,
      0.0007285088,
      -0.013344323,
      -0.019436019,
      -0.010441825,
      -0.0086650355,
      0.02543631,
      0.026974171,
      -0.00882631,
      0.0044176346,
      -0.0010801387,
      0.0033886388,
      0.0027964553,
      -0.0014239079,
      -0.013851516,
      -0.012586835,
      0.018949661,
      0.004751613,
      0.015594016,
      0.013884027,
      -0.0042804987,
      -0.012106484,
      0.00730204,
      0.0007355804,
      -0.003094313,
      0.0025196157,
      0.00266892,
      -0.024401177,
      0.020039618,
      0.00018166409,
      0.007624869,
      0.0077573643,
      -0.0032300274,
      -0.0014922477,
      0.01778619,
      -0.008959696,
      -0.010679202,
      -0.031578843,
      0.011812616,
      0.0019873353,
      0.012574434,
      -0.014891529,
      -0.03158051,
      0.030613808,
      0.010398369,
      -0.012190284,
      -0.009996218,
      0.017270666,
      -0.016996186,
      0.008177571,
      -0.023067363,
      -0.004445521,
      0.006446674,
      -0.01759932,
      -0.00049699383,
      0.0011534286,
      -0.023549702,
      0.014187849,
      -0.032206293,
      0.005616595,
      -0.015772754,
      -0.02822377,
      -0.015319337,
      -0.0038813842,
      -0.038076803,
      -0.011862368,
      -0.026333848,
      0.0052135033,
      -0.013187871,
      0.021305792,
      -0.022247348,
      -0.014298297,
      -0.0049402295,
      -0.030585486,
      0.013546603,
      0.0054214154,
      -0.013120143,
      -0.018488862,
      -0.0060630697,
      0.015409999,
      0.0014226086,
      0.016561309,
      0.016681492,
      -0.03295802,
      -0.0023010133,
      -0.004669725,
      -0.013358042,
      0.004982635,
      -0.0043903105,
      0.012307442,
      0.008747032,
      -0.002146978,
      -0.01421639,
      -0.019000193,
      -0.01837707,
      0.026407462,
      -0.017072523,
      -0.015605175,
      -0.0047489237,
      -0.020611398,
      0.02557023,
      0.030345654,
      0.0030840721,
      0.0026755568,
      -0.0055326005,
      0.00748071,
      0.014648269,
      0.0030314573,
      0.013280957,
      0.0367842,
      -0.013136032,
      -0.018763738,
      0.007768422,
      -0.03297682,
      -0.020428708,
      -0.010811766,
      -0.010539098,
      -0.005349648,
      -0.0071624955,
      -0.0039793467,
      0.018246055,
      0.010625331,
      -0.0032938188,
      -0.021488007,
      0.022428067,
      -0.008558493,
      -0.026906068,
      0.005001156,
      0.020484222,
      0.004618908,
      0.015598555,
      0.0037810467,
      0.006397743,
      -0.011876938,
      0.003488277,
      -0.005043719,
      -0.045493197,
      -0.019535925,
      0.02561303,
      -0.015238506,
      0.011312822,
      0.006349579,
      0.017065238,
      0.00739599,
      0.013761472,
      -0.005165425,
      -0.0061180447,
      0.018372368,
      -0.010903269,
      0.0074427556,
      0.0194184,
      0.0066266363,
      -0.03762282,
      -0.009750069,
      -0.00031153273,
      -0.016648991,
      0.0014918104,
      0.0033676224,
      0.0039734202,
      0.02025856,
      0.0022314324,
      0.00095579267,
      0.004720738,
      0.01685501,
      -0.007815419,
      -0.023881577,
      -0.008646955,
      0.010365602,
      0.004928549,
      -0.0062272996,
      -0.017145129,
      -0.006645093,
      0.017459784,
      0.021935722,
      -0.0027302257,
      0.00011639268,
      0.002920535,
      0.0027714362,
      0.0033706233,
      0.019830665,
      0.004852962,
      -0.012280748,
      -0.018086081,
      0.0012294377,
      0.022703974,
      -0.049223002,
      -0.0136143565,
      -0.02661452,
      0.016355447,
      -0.023756657,
      -0.004135979,
      0.010573451,
      0.012949256,
      -0.016537568,
      -0.011525055,
      0.00811564,
      -0.010471422,
      0.014449157,
      -0.02004767,
      -0.004244647,
      0.016303707,
      0.024925025,
      -0.012195297,
      -0.0003221695,
      0.007900561,
      -0.020313198,
      -0.015860843,
      0.0020106407,
      0.002976169,
      -0.000102204416,
      0.025924243,
      0.010738609,
      -0.005135462,
      -0.013443522,
      -0.005257986,
      0.009147993,
      -0.002808078,
      -0.00053810707,
      -0.016763998,
      0.035688505,
      -0.0065899664,
      -0.008109236,
      0.0025949455,
      -0.01116451,
      0.02232155,
      0.011454719,
      -0.0009569582,
      0.008222807,
      -0.016651092,
      -0.016805993,
      0.0048397356,
      -0.0055343853,
      0.007599152,
      -0.114250995,
      -0.013918412,
      -0.012465105,
      0.0060110344,
      -0.0077896197,
      0.0119049875,
      -0.008238011,
      -0.010138252,
      -0.0035352707,
      -0.00043037985,
      0.033842344,
      0.005050432,
      0.0029222108,
      -0.008166319,
      0.015216411,
      -0.030315742,
      0.003819283,
      -0.009252466,
      0.032023177,
      -0.013408786,
      0.002102293,
      0.0074003674,
      -0.007541838,
      -0.000542342,
      -0.039157692,
      -0.014010987,
      0.025666917,
      -0.004435401,
      -0.018691223,
      -0.018299656,
      -0.017407376,
      -0.0056008133,
      -0.0079992525,
      0.02200286,
      -0.0056668255,
      -0.003964883,
      -0.006016139,
      0.0032654528,
      0.009455421,
      0.009514891,
      0.009922986,
      -0.0077692345,
      0.030684412,
      0.021131448,
      0.000080861275,
      0.011330249,
      0.04109607,
      -0.0064101308,
      -0.009205326,
      0.039225213,
      -0.0424573,
      -0.021719346,
      0.009795851,
      -0.03530899,
      -0.014890845,
      -0.016108481,
      0.019939343,
      -0.009818795,
      -0.034457587,
      -0.024921654,
      0.002914161,
      0.007227824,
      0.001413152,
      0.0034195203,
      -0.005826919,
      0.0026479228,
      0.024170816,
      0.03382529,
      -0.0040722126,
      -0.012187677,
      -0.0039678602,
      0.01799905,
      0.013374989,
      0.026161825,
      0.028406672,
      -0.016724342,
      0.0021905543,
      0.011957539,
      -0.023536747,
      0.0068465443,
      -0.034855213,
      -0.003933269,
      -0.06162099,
      -0.013693908,
      0.016309932,
      -0.019566506,
      0.003909734,
      -0.0027195292,
      -0.0029432147,
      0.0118040815,
      0.00032679582,
      -0.0011413505,
      -0.032908168,
      -0.013427626,
      0.009288858,
      -0.0016388434,
      -0.010376112,
      0.007087357,
      -0.00531194,
      -0.0034999526,
      -0.03172616,
      0.008201236,
      0.006731307,
      -0.00026464617,
      0.003822777,
      -0.01793993,
      0.022000022,
      0.012416909,
      -0.016018184,
      0.0064624776,
      -0.019261075,
      -0.00089700735,
      -0.01226309,
      -0.14096059,
      -0.012347949,
      0.016649844,
      0.013271296,
      -0.00068520434,
      0.0057513113,
      -0.01019633,
      -0.016712468,
      -0.002368141,
      0.010302194,
      0.0024055175,
      -0.025080787,
      -0.0035600134,
      -0.006434918,
      0.029463442,
      0.13668282,
      0.0018629123,
      -0.0012739822,
      -0.0049070623,
      -0.0051234947,
      -0.014042741,
      -0.023858234,
      -0.012130969,
      0.0016834284,
      0.011268361,
      -0.026847797,
      -0.0035722286,
      0.0019389482,
      0.016443389,
      -0.01828138,
      -0.01591142,
      -0.0062978556,
      0.004841479,
      0.016469423,
      0.0170633,
      0.0032947985,
      0.0029789347,
      0.011680954,
      -0.0022406022,
      0.017292755,
      0.029350149,
      0.006341837,
      -0.006374626,
      0.0013711138,
      0.012954839,
      -0.0048040734,
      -0.004963041,
      -0.008086661,
      -0.00011772923,
      0.009204031,
      -0.008333482,
      -0.049236156,
      0.005339072,
      -0.008194732,
      -0.00960089,
      0.010941908,
      -0.014694581,
      0.0058977553,
      0.007051559,
      0.013475868,
      -0.008269768,
      -0.01599446,
      0.0044684275,
      -0.008124904,
      -0.0037649844,
      -0.018603744,
      0.029839078,
      0.022410374,
      0.013273584,
      -0.009496129,
      0.021508785,
      0.016597645,
      -0.000100111174,
      -0.0031815048,
      0.00019643178,
      -0.0128197055,
      0.0031533835,
      0.030064737,
      0.00066612865,
      -0.005861928,
      0.0042208247,
      -0.00090103486,
      0.005261039,
      -0.010155142,
      0.020701157,
      0.0068430486,
      -0.007995902,
      0.016551632,
      -0.014264206,
      0.011813221,
      -0.0022016007,
      0.0030603444,
      0.00034110513,
      0.008747304,
      0.008059559,
      0.0017674804,
      0.025761498,
      -0.033194866,
      0.032014355,
      -0.003016455,
      -0.0010427999,
      0.0046932297,
      -0.009267439,
      -0.03322826,
      0.012121965,
      0.00072943757,
      -0.009424349,
      0.02531815,
      0.007793082,
      -0.0047518713
    ]
  },
  {
    "id": "genai_cohort_python_08_Documenting_your_functions_and_built_ins_vtt",
    "content": "In this huge world of Python we have so many things to cover, but we have covered quite a lot about the Python. Now I want to introduce you something which is built in. We don't have to write anything for this. This actually kind of exists in Python. We don't pay huge attention to this, but we should be paying to this one. So let me take you on the screen and directly walk you through that, what I'm talking about. So this is a direct documentation page that says built in functions. So Python has so many things which we can use directly. The Python interpret has a number of functions and built in types that are always available. They are listed here in alphabetical order. Not only that, some of the functions which you define also comes up with the by default some of the tricks and tips. So I'll show you what actually it means. So we'll just talk about the built ins in Python. So I'll just write this here. Hopefully I'm here. Yep, we are actually on the right track. So let's go ahead and talk about built ins in Python and I think it would be rather accurate to call it as built in. Just like that. Yeah, this is actually fun. So every single function which you go ahead and define. So let's just say we have a simple function name and we go ahead and design it like this and simply say pass. So this is the bare minimum function we are defining. Let's actually go ahead and write the code along with this. Actually that will make much more sense. And I'll close this one and create a new function. This time we are on 12, so underscore. Let's call this one as built in py so let's just say we define a built in or a very basic function. The first step is let's just say we have a chai flavor. Hope I wrote that correct. And this time we are simply saying that the flavor that we have is going to be masala. So we'll put provide a default parameter to this one. By default I mean you can provide the value that will overwrite it, but if you don't provide any, this will be the default value for it. And end of the day I go ahead and simply say whatever the flavor you tell me, I'll just return it back. This is a basic one, but actually you can do something interesting. The very first line in your function definition can be triple quotes. Yeah notice here, triple quotes. This is also a thing in which we are going to use it a lot in which you can add enters and line breaks. And you can define it however you like. This one what it does it return the flavor of Chai. That's all it does. Now this small string, just by adding it. Now you can utilize so many internal things in the Python itself. For example, if I just go ahead and print this chai flavor, I can actually use a dot just on the function name. And you can see so many things, annotations built in, class closure, so many of them. Of course we cannot go with all of them, but there is a small name for this known as dunder. Very, very funny name to go with that. At least I find it funny. The whole point of this dunder is you have one underscore, then you have another underscore. And then the things like for example, we have doc as one of the dunder, then we have also underscore, underscore. So instead of calling it as doc, we just call it as dunderdoc. Yeah, so two underscores are called as dunder, but we don't call it as like underscore, Dunder, dog, Dunder, we just call it once. Yeah, very weird. So one of them is actually this doc, what it does. I'll show you that in a second. But also there is another dunder that you can use. So there is underscore, underscore name for it. Let me show you what each of them does. It's very super easy actually. Python and please run the file. And there we go. The first, when you say doc, this is a doc string, documentation function string or function documentation string or short is better doc string. So this is a doc string which actually prints. So whatever you write it here, it will get printed. What if I go ahead and declare a variable? For example, chai is, ginger, ginger, Something like this. Will it work after this? Here's the interesting part. Now notice here it says none. So it needs to be the very first line and whatever you want to do, you can do after that. Feel free to do it. It needs to be the very first line and then only and only then it works. All right. And then the name of the function, notice here it says chai flavor. So whatever the function you are actually running, you can just provide its name. Why would I do that? I already know the name of it. Yes, you do. But sometimes when you are debugging the application, it's not easy to find that what actually is causing the trouble. Now, not only that, we have actually more inbuilt function. For example, there is one help which is always there and you can pass on anything to it. For example, I don't know what the len does so I just want to know more about it. I can just go ahead and pass on this and any function in between. Notice here it gives you a whole lot of documentation and all that. It's not easy to read it here because it's actually vim based. I don't expect you to work on that. Just press the Q in case you have accidentally opened this up. The better way to learn and study about all of these method is actually this documentation. So built in function just search for that version. Doesn't really matter. They are very standard in every single version. And notice so many of them. There's absolute, there's all and nobody knows what all of them does. We actually find them out as we need some of them. For example filter. Yes, we have seen one of them. Format frozen set, min max Next. Some of them we definitely encounter day to day life. Some of them we never encounter and some of them we don't want to use. Remember we used the zip? Yep, that's exactly. That's where this is coming up from. We have tuple type. Remember we use type once. Yeah, I hope you do. So this is the basics of how it can be done. Now make sure a couple of things you need to take care of it. The first one is it's always a good idea that if you're writing too big of a function on everything, just write the documentation of function right up here. It's actually super easy to be done. It's a good practice as well. So again there's nothing too much but try to give it yourself a couple of more minutes if you're writing production ready app that actually does this. I'll show you a sample example of how it actually looks just to make sure that you get an idea. I'll be little bit exaggerating it but we'll get the point of it. Let's just say I go ahead and create a method which says generate bill which takes chai if nobody gives me I'll take zero as a default. Also snack which is samosa which will also be zero. There we go. Now I take my time by triple quotes to actually write the documentation and you don't have to write it all one line. Once you start with this then I can go ahead and go all freehand. So what it does, it actually goes ahead and calculate the total bill for chai and samosa. And then I can use and say like this, what are the param? This is just for me. Pram chai. And that is number of chai cups. And for example, that would be rupees each. These are just for me. And I can go ahead and say I have another param which is samosa. Samosa and which goes like number of samosa. And that can be rupees each. Again, you don't have to use this format, but it's good. And I also go ahead and calculate what it returns so that anybody who is using it gets to know what the function is expected to return. I just go ahead and return total amount and thank you message. So this gives an idea what this function is. I know you'll not be writing for each one of them, but some companies actually will force you to write all of this because hey, lots of people are going to be using your method. So we'll just go ahead and say we calculate a total like this, which is chai, which gets multiplied by So you get to know that why it is getting multiplied by And we also have samosa which gets multiplied by You get the point. We'll have the consistency. And then we simply go ahead and say we return a, total as well as we return a thank you message. So thank you for visiting chaicode. com, which is my website name. So there we go. Now somebody says returns it returns a total amount as well as a thank you message. Or probably we can actually say thank you message as a string. That is also pretty cool. Now this actually is a nice method although took us a little bit more time and there's a lot more. We can actually return the defined, the return type that there are more ways of playing with that we'll surely do that. But now that you know that, okay, how this is all can be done. And this is the best example for this one. All right. I hope you have enjoyed this, really detailed sessions on Python. I'm enjoying them teaching this whole thing. Hope you are also enjoying learning this. So please do rate us and if you find anything that hey, you should cover more of that topic, tweet me. I'll add this. I want to create the best course on the Python. That is it for this video. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "08 Documenting your functions and built ins.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/08 Documenting your functions and built ins.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.020105617,
      0.0013739299,
      0.026361216,
      -0.06490416,
      0.002977564,
      -0.0063677887,
      0.012135689,
      0.018587982,
      0.0037743535,
      -0.01698473,
      -0.029178055,
      -0.009721587,
      0.014318424,
      0.03370189,
      0.12883724,
      -0.0054611843,
      -0.017592877,
      -0.02502665,
      0.006831469,
      -0.018181724,
      0.006523917,
      0.008294905,
      -0.008380952,
      -0.013159641,
      0.003874401,
      0.0022293574,
      0.010271298,
      0.013142526,
      0.021198101,
      -0.02980294,
      -0.010248049,
      0.011241515,
      0.011377726,
      0.018036215,
      0.003811548,
      0.009978907,
      0.021272752,
      -0.002181373,
      -0.012582526,
      0.006132928,
      -0.013941185,
      0.011581251,
      0.004890679,
      -0.019081766,
      0.0048899963,
      -0.036595568,
      -0.011911314,
      -0.011176045,
      -0.005401002,
      0.014039027,
      0.009432177,
      -0.033425447,
      -0.00454038,
      -0.18145916,
      0.019952934,
      0.0029770776,
      -0.018586326,
      0.0042520603,
      0.0031992553,
      -0.004792665,
      -0.025099713,
      0.000825433,
      -0.036246404,
      -0.007059126,
      -0.0023364983,
      -0.023905687,
      0.0023458002,
      0.0053361594,
      0.009439255,
      -0.016248455,
      0.029411495,
      0.00087778963,
      -0.034719914,
      -0.02446081,
      -0.030398965,
      -0.03349078,
      0.020111006,
      -0.01981267,
      -0.004721651,
      0.008183048,
      0.007830495,
      -0.0064752684,
      -0.0006297684,
      0.0016769978,
      0.034284815,
      0.0072059683,
      -0.02529033,
      -0.015963644,
      -0.0017788407,
      -0.000044646673,
      0.00732754,
      0.012930095,
      0.019624176,
      0.0032881366,
      -0.016631303,
      -0.004966435,
      -0.015285981,
      -0.0020757087,
      -0.026083263,
      0.001776789,
      -0.0005084338,
      -0.026963446,
      -0.019560233,
      -0.014537766,
      0.0040257154,
      0.010464689,
      0.0010253085,
      0.019845681,
      -0.018704137,
      0.006923609,
      0.0016733597,
      0.00679267,
      0.0071206056,
      0.031395655,
      0.0053941947,
      -0.17477182,
      0.0040719216,
      -0.008043375,
      0.0004182446,
      0.006747565,
      -0.01281105,
      0.007191267,
      -0.010141868,
      -0.010074422,
      -0.008864075,
      0.025243305,
      -0.0011427074,
      0.033463,
      -0.008994496,
      -0.000086897315,
      -0.022110613,
      -0.0123216305,
      -0.0063717565,
      0.0016973852,
      -0.00549976,
      0.02136422,
      -0.025338797,
      0.0035435616,
      -0.03347986,
      0.0030860363,
      -0.004775813,
      0.030579304,
      0.0007408279,
      0.013505667,
      0.025259564,
      0.006854534,
      -0.0065275286,
      0.015249745,
      -0.051828522,
      -0.011728443,
      -0.0036827887,
      -0.01829572,
      0.013567863,
      -0.013301289,
      0.04355927,
      -0.01921624,
      0.009127017,
      0.015257563,
      -0.003336379,
      -0.011274763,
      -0.0043290765,
      -0.00091785315,
      -0.008765904,
      -0.0026779638,
      -0.012426511,
      -0.0119236065,
      -0.0103419265,
      -0.0050109555,
      0.00825543,
      0.025326375,
      -0.0179571,
      0.00063634524,
      -0.009901403,
      -0.014392917,
      -0.018007066,
      -0.012645921,
      0.01735161,
      0.001931889,
      0.007418844,
      -0.014422209,
      -0.0011773905,
      -0.002235139,
      0.016012197,
      0.008001095,
      0.00821192,
      0.010348695,
      -0.0022848502,
      0.015262537,
      0.027242772,
      -0.009840617,
      -0.0021202967,
      0.005121651,
      0.034337934,
      0.009276199,
      -0.004105921,
      -0.03496256,
      -0.005362309,
      -0.0008503453,
      -0.007678141,
      0.018605946,
      0.035396174,
      -0.004282381,
      0.0132388,
      -0.026058078,
      0.026189202,
      -0.017709535,
      0.019765073,
      -0.019711273,
      0.0050239707,
      -0.010217734,
      -0.02069786,
      -0.01912589,
      0.011291632,
      -0.0021699008,
      0.03412729,
      -0.00086132763,
      0.0109125925,
      -0.009069242,
      0.004965583,
      -0.013628502,
      0.0025869908,
      -0.0037970599,
      0.014330632,
      0.012818972,
      -0.0067144544,
      -0.011237297,
      0.009047701,
      -0.030845292,
      -0.0011412468,
      0.009757411,
      0.020215308,
      -0.022237865,
      -0.028621241,
      -0.0011369823,
      -0.009278855,
      0.0042292792,
      -0.004003964,
      0.020504292,
      0.0041393414,
      -0.008655745,
      -0.008600421,
      0.012937664,
      -0.0017589957,
      0.012923399,
      0.021768577,
      0.0118117165,
      0.0071695806,
      -0.012131846,
      0.016409244,
      -0.0054217237,
      -0.03735771,
      -0.011115091,
      0.006694026,
      -0.0077081774,
      -0.001766233,
      -0.0055218944,
      -0.03826382,
      -0.015458071,
      0.00065895775,
      -0.005764423,
      0.014436666,
      0.005906975,
      -0.03086095,
      -0.0021571377,
      0.028643971,
      0.0071399696,
      -0.0048287082,
      0.032083165,
      -0.01263683,
      0.015250308,
      0.030376634,
      0.003179775,
      -0.008203589,
      -0.0077580633,
      -0.0059731305,
      0.0015259114,
      -0.11223837,
      0.026877478,
      -0.00034690704,
      -0.011568298,
      0.0054370537,
      0.017872531,
      -0.038713876,
      0.0020380174,
      -0.0050332267,
      0.0049336595,
      -0.021141712,
      -0.0066943653,
      0.03778677,
      -0.017050058,
      -0.012455083,
      -0.015787423,
      0.0018025617,
      -0.02813402,
      0.0020280299,
      -0.000005138241,
      0.007442303,
      -0.0063748057,
      -0.008650738,
      -0.0061052614,
      0.016580062,
      -0.0020140556,
      -0.011672093,
      0.0129185105,
      0.0054129357,
      0.0062343827,
      0.012120206,
      0.013417277,
      -0.008898972,
      0.0035206904,
      -0.010237795,
      -0.0051221694,
      -0.0026787631,
      -0.0069497544,
      -0.0027463797,
      -0.018873379,
      0.013155193,
      -0.01152877,
      0.038047772,
      0.039840177,
      -0.007429816,
      0.004999322,
      -0.017539939,
      0.0067244275,
      -0.0059448667,
      -0.019062769,
      -0.007921681,
      0.0129698515,
      0.013037102,
      -0.0069473446,
      0.00094917294,
      0.006286378,
      -0.012280857,
      -0.028228667,
      -0.0023185974,
      0.0028580916,
      -0.00045007945,
      -0.0068774987,
      0.012578516,
      -0.02630013,
      0.014022577,
      -0.0074566677,
      0.00937204,
      0.005960166,
      -0.005740742,
      0.004162898,
      0.012391282,
      -0.0050478843,
      -0.007061559,
      -0.010127424,
      0.0086421305,
      -0.0031836363,
      -0.008430491,
      -0.017725226,
      -0.021247445,
      0.01756881,
      0.013671375,
      -0.011723691,
      0.011207066,
      -0.00071070425,
      -0.006748473,
      -0.0048922407,
      -0.01981351,
      0.0051489333,
      0.011062359,
      -0.02246795,
      0.009052674,
      -0.009282797,
      -0.023268599,
      -0.005189105,
      -0.022720559,
      0.009715101,
      -0.017531276,
      -0.02415714,
      -0.013778165,
      0.013854441,
      -0.01036128,
      0.009585495,
      -0.027213225,
      0.0006855621,
      -0.012160216,
      0.005820053,
      -0.034799438,
      -0.010961415,
      -0.01604465,
      0.004369084,
      0.012837683,
      0.0035761169,
      -0.022577148,
      -0.010870018,
      -0.0054571773,
      0.021680871,
      -0.015427283,
      0.016434379,
      0.022003371,
      -0.026356136,
      -0.009343096,
      -0.02078266,
      -0.011410784,
      0.0027897975,
      -0.02761702,
      0.02249729,
      0.012829375,
      0.028879741,
      -0.017900772,
      -0.02086937,
      -0.011611728,
      0.0040330533,
      -0.024948873,
      -0.010448682,
      -0.01701861,
      -0.0025541696,
      0.017524617,
      0.01432821,
      0.01535619,
      -0.012288468,
      -0.021141823,
      -0.0061904197,
      0.023135226,
      0.0037565788,
      0.00249488,
      0.027076196,
      0.0105956085,
      -0.008946832,
      -0.02158345,
      -0.020161685,
      -0.02342852,
      -0.010990994,
      -0.01868924,
      -0.004938039,
      -0.004906351,
      0.00012740186,
      0.013419697,
      -0.005076526,
      -0.0015661448,
      -0.016282653,
      0.0062514315,
      0.023661692,
      -0.027545568,
      0.014143583,
      0.022484729,
      0.020994911,
      0.0057902583,
      0.009190213,
      -0.0018955654,
      -0.012832415,
      -0.01715881,
      -0.006113672,
      -0.03562694,
      -0.0054798108,
      0.011257846,
      0.012313321,
      0.0155484015,
      -0.0136476075,
      0.011904889,
      0.030842036,
      -0.0017043417,
      0.0016170857,
      -0.020002263,
      0.024216134,
      -0.0026331705,
      0.0006005715,
      0.0060817017,
      -0.0017055005,
      -0.030505981,
      0.0013936172,
      0.000906106,
      -0.023996398,
      0.006274614,
      0.01810519,
      0.008382606,
      0.006169871,
      -0.027467921,
      -0.00009452911,
      -0.008713894,
      0.012679931,
      0.0027693633,
      -0.018942777,
      -0.006943878,
      -0.0029457086,
      0.013697237,
      -0.020689424,
      -0.0016378032,
      -0.0069825808,
      0.0016302151,
      0.0042077466,
      -0.0018042921,
      -0.010688018,
      0.002059689,
      0.019422315,
      0.0009133813,
      0.031587075,
      0.0058973394,
      -0.006487831,
      -0.03996049,
      -0.015649298,
      0.0144547485,
      -0.019271413,
      -0.012065825,
      -0.023712078,
      0.0071425694,
      -0.007211088,
      -0.011506298,
      0.0018534815,
      0.0042512515,
      -0.006016503,
      -0.012301743,
      -0.010242905,
      -0.019734906,
      0.008220758,
      -0.027369512,
      -0.0076903114,
      0.0183078,
      0.01720503,
      -0.01093979,
      0.015465729,
      0.013487728,
      -0.0028261375,
      -0.0110340705,
      -0.01392462,
      0.00687881,
      -0.014539441,
      0.00244064,
      -0.0044423677,
      -0.012352031,
      0.0018307363,
      0.008792956,
      0.015777197,
      -0.018120773,
      0.008632209,
      -0.014253455,
      0.01574006,
      -0.018436925,
      -0.008813701,
      0.0014050847,
      0.0025646412,
      0.01158637,
      0.016826611,
      0.008028318,
      0.0017399769,
      -0.013865183,
      -0.0017882923,
      -0.0011975409,
      -0.005133777,
      0.0081838425,
      -0.13282274,
      -0.0008328113,
      -0.013845987,
      0.0013721092,
      0.00037680854,
      -0.0034352709,
      0.0068386844,
      -0.0067424253,
      -0.0025791314,
      0.0006177444,
      0.038260795,
      0.013126036,
      0.00021490267,
      -0.023443343,
      0.0059516625,
      -0.019200798,
      0.011168553,
      -0.0075969845,
      0.0055072587,
      -0.00084424915,
      -0.011401874,
      -0.00028627444,
      0.003635382,
      -0.0005538062,
      -0.01925525,
      0.0014754519,
      0.0063042934,
      -0.008050777,
      -0.0051261326,
      -0.01759846,
      -0.03571322,
      -0.017638063,
      -0.0005800196,
      -0.0014208179,
      0.019187845,
      0.0076120095,
      -0.015643125,
      0.009005514,
      0.0043523265,
      0.008904487,
      0.012986956,
      -0.0009012941,
      0.029282905,
      0.013203396,
      -0.0121953245,
      0.028144248,
      0.04427984,
      -0.011162853,
      -0.005703965,
      0.025303999,
      -0.037679818,
      -0.018128037,
      0.00494228,
      -0.028883819,
      -0.024088275,
      -0.022673737,
      0.014217549,
      0.0029313117,
      -0.008127097,
      0.0019919858,
      -0.010024517,
      0.020327676,
      -0.012807619,
      0.023659408,
      0.007842226,
      -0.0030215047,
      0.02381201,
      0.032164715,
      -0.0017621599,
      -0.000034192457,
      0.015349078,
      0.009975835,
      -0.0004523695,
      0.023031203,
      0.005240632,
      0.0016003523,
      0.0018464522,
      0.015923632,
      -0.00031067466,
      -0.01798868,
      -0.028896943,
      -0.0013238369,
      -0.06101288,
      -0.005351635,
      0.017346842,
      -0.01850155,
      0.011504093,
      0.006982964,
      -0.0049051507,
      -0.0016031014,
      0.009741574,
      0.008003868,
      -0.027977526,
      -0.018158808,
      0.010165128,
      -0.0029312386,
      -0.01017508,
      0.0035353908,
      -0.008096841,
      -0.004784556,
      -0.016697777,
      -0.0031135948,
      0.0110243885,
      -0.0068210717,
      -0.0065759434,
      -0.01135619,
      0.010857984,
      0.027422294,
      -0.012870894,
      0.0041310317,
      0.002101917,
      0.0061309673,
      0.024994431,
      -0.1542075,
      0.0041652746,
      0.003980785,
      0.02171913,
      0.0045086993,
      0.023772046,
      0.0011708192,
      -0.0051547275,
      0.0032923573,
      -0.011186849,
      0.016819295,
      -0.01032443,
      -0.010352307,
      -0.013994193,
      0.01742597,
      0.124564834,
      -0.020457054,
      -0.013471113,
      -0.0009453544,
      0.01293465,
      -0.013670186,
      -0.022799088,
      -0.0073704454,
      0.0010217783,
      0.0022059975,
      -0.009265273,
      -0.012152633,
      0.003118378,
      0.01918204,
      -0.002139602,
      0.0028028986,
      -0.0026951942,
      0.011943627,
      0.036997307,
      -0.0008408819,
      -0.005236703,
      0.0029215731,
      0.022706598,
      0.004819788,
      0.014775368,
      0.032086555,
      0.0030996227,
      0.009972181,
      -0.0009883252,
      0.016622618,
      0.005326604,
      0.0023332818,
      -0.016929401,
      -0.0015450664,
      -0.0037094948,
      -0.015309328,
      -0.04253088,
      0.008262681,
      -0.021804541,
      0.0023624036,
      0.01901309,
      -0.007489646,
      0.0072827907,
      0.0105217,
      0.026224364,
      -0.014792755,
      -0.013684254,
      0.00076760066,
      0.0006521286,
      -0.00053290155,
      0.0010755599,
      0.024790226,
      0.024805455,
      0.008670966,
      -0.006636939,
      0.027963411,
      0.0072119017,
      -0.025012651,
      0.028669767,
      -0.008348706,
      0.0047515715,
      -0.0038599772,
      0.019475194,
      0.0006550782,
      0.00506253,
      -0.0036851303,
      -0.00892177,
      0.012282352,
      -0.008482947,
      0.012701393,
      0.00016188108,
      -0.009064368,
      0.029411815,
      0.0044294363,
      0.014679886,
      0.016995877,
      0.01152323,
      -0.0043974495,
      0.016223423,
      -0.008156738,
      -0.00078132417,
      0.0063718488,
      -0.017375266,
      0.029314352,
      -0.0022772166,
      -0.010804843,
      -0.0061831255,
      -0.0047645136,
      -0.030394565,
      0.021959824,
      0.0016207234,
      0.0025912435,
      0.010864537,
      0.0071431613,
      0.00020549628
    ]
  },
  {
    "id": "genai_cohort_python_09_Python_imports__modules_and_init_file_vtt",
    "content": "This one is one of my favorite topic in Python because a lot of people write Python code but just do guesswork when they have to bring in the code from other files in their, actual working file. This is a really fun and interesting topic, but rest assured that after watching this particular video, it might be a little bit longer one, but you will never face any problem in importing any file from anywhere into the Python. I have seen this struggle with the students who actually write code in Django or Fast API. They just keep on wondering why this is happening, how this is happening. You will get answer of all of this. The video could be slightly longer than the usual one, but I want to cover this all in one go. So let me take you onto the screen and we're going to just work with this. So it's a really simple and fun thing to do. Hope you remember the name. What was the name? This is Dunder. I hope you do that. All right, so let's go ahead and talk about the imports. And especially, I'll call this one as importing objects or importing functions would also not be bad. But everything is an object in the world of Python, so calling functions also as an object is also a true statement. Very, very weird. But this is also a true statement here. All right, so let's talk about why we need an import here. Imagine you have a perfect masala chai recipe. You have saved it in a notebook. And, what's that notebook? That notebook is, masala chai py. All right, we'll first grab the theory and then definitely 100% will code out the things as well. So this is one of your file masalachai py. Now, rather than rewriting the same instruction every time you brew a chai in a new shop, let's just say you have opened up a new branch. So let's just call this one as, new branch py. Of course. So we opened up this new branch. So would you rather go ahead and get this masala chai every single time, write a fresh function? No, we want to import this into the masala chai. So how do we do this? How we bring the code from masala chai py into the new branch? There are a couple of ways how we do it. We'll surely write the Python code first, grab the theory. So we can just go ahead and say import masala. I wrote it, correct? Yep. Import masalachai py. Once you write this statement at the very top, what this statement will allow you to do is you can just go ahead and use something like this Masalachai and then use a method. Maybe this whole file. Masalachai py has a lot of methods but we want to use a brew method. I can call all of this method here. So, so this will be my code if I go ahead and bring it up here. Now what we are doing is you are bringing the full recipe notebook to the table. You are not bringing one method or two things, you are bringing the whole recipe. It's just like flipping the pages and finding the right methods for this. There could be another way of doing this. So this is one way. There is no wrong or no right. This is one way of doing the things. Another way is saying that I don't want the whole book to come in. I, I want certain methods to come up. So I can just go ahead and say from Masalachai Py I want to import not everything but let's just say the brew method. So this is what I want to bring in, only the brew method. Now this gives me a really interesting way to use this. Now my file has the functionality of brewing. I can directly go ahead and use the brew. The only difference between this and this here you have to simply say okay from this book use this particular method. Some people prefer this, some people prefer this. And of course there are use case scenarios of this. So this is also a right way and this is also an equally right way. But you should know what we are bringing in. There is also another way. Yeah, there is also interesting way. Let's just say you don't want to call it as brew. Maybe your file still has a method which is doing some brewing. You want to change the name of it. So I can go ahead and simply say from Masala chai, import brew but call it as start brewing. Yeah, this simple as brewing the moment you get it as start brewing. As start brewing. Now I can simply go ahead and call this one as start brewing. So again we have literally three ways of how we can import the same thing from here. So in the new branch you have three ways. Now we can actually import the whole thing and call dot ways and can get the methods out of it. We can actually have the named import that I only want brew but if there are more methods you can just comma separate them and have more values of it. For example the brew is there or there is a prepare. You get the idea. So you can have as many as you wish. Now these are the three ways. I hope you got an idea. Of how this can be done. This was a very fictitious scenario. But I also want to talk on one more thing. Sometimes you are importing things which are not from the other files but rather Python is giving you. So there are other ways. For example, you'll sometimes say from datetime, which is a inbuilt methods and inbuilt functionality in the Python and you want to say import, date, time. So you are bringing from the datetime file the datetime functionality. The name happened to be same, but this is very common. It happens. It's a standard library that we are bringing in. Sometimes we go ahead and say from requests. This is also a really popular library for making web requests. So you simply go ahead and do that. And sometimes you will say that hey, I want to have a localized import. By the way, this is called as localized import. So I would say something like from Chai. This is a fictitious one. So Chai Shop, let's just say. utils I'll show you. What does it mean? I want to go ahead and say import discount and I want to import, calculate, tax and all these things. And this might be a little bit confusing. Okay, from the Chai Shop utils, what do you mean by utils? We haven't seen anything of this syntax. We are actually importing from PY Py to understand this particular syntax, which you'll see quite a lot, especially in the frameworks, we have to actually design something like this. So what we're going to do is let's prepare a structure first. First I'll walk you through what structure we are creating, then we'll create it actually. So let's just say we have a folder which says chibe business. Inside the chai business we will have a recipe recipes which will be a folder itself. I'll denote the folder by having a trailing slash at the end. I think that's easier one. So inside the recipe we are going to further go ahead and have let's just say flavor py and just like we have a recipe we will have another folder. We will have utils Just like we saw this here we will have the utils again I'll denote trailing slash as the folder name and then further inside this we will have discount or discounts py and at the very outside of this we will have a main file just here. So main py so this is what we want to build. Now I'll show you some very interesting part about it like inits and why you should use it. Why you shouldn't use it in all of this. First, let's create this structure whole thing. So I'll just close this and instead of calling this one as just the chai business, we'll call it as, chai chai business. It's easier for us. So underscore. And let's call this one as Chai business. And the first thing that we saw in here, that I want to create a new file which is main py. What we'll write into that, that comes up a little later. Not worried much on that. Let's have a two folder first. First one being recipes. Recipe or recipes. Totally up to you. And we'll have another folder which is going to call as utils. We know in the utils we have discounts. Discounts py. And in the recipe we have flavors. Flavors Py. Hope I wrote that correct. I'm a big type of guy. So in this flavor py, what we're doing is let's define some utilities or some functions for it. One is this chai. So we have a lot of Chai flavors going on in this one. Feel free to add as many as you, want to have. This doesn't print out anything. Most of the function will return. Do you want to print it? That should be your choice. And chai, is ready. Ready. And we'll have another one which is going to be ginger Gingerchi, just like that. And we can have many hundreds of them. No problem here. And we'll say ginger T. No, ginger chai is ready. You get the idea what this flavor is actually doing. All right, now let's go ahead and work on. We'll work on the discounts a little bit later. First, let's see how we can actually bring this into the main py. So, so notice here in this I will just go ahead and say import from the recipes. I'll just go ahead and say dot flavor. That is all I have to do. So if some files are inside a folder, all you have to do is name that folder, then say dot flavors. No need to add the py and all of that. Usually you don't need it, especially in the Python ecosystem. That is it. Now I can just go ahead and say I want to print whatever the thing says. This is like bringing a brook. So I'll just say, hey, recipes, flavors dot. And notice here I have access to elaichi chai and ginger chai. So whichever one I want to run, I can just go ahead and run this. But I Have to flip the whole book. That's one other thing. I can just go ahead and use another option B. So we'll comment this out. You get the import, we'll just do another import. So another way of importing this is from recipes dot flavor. I can use the named import and I can say oops, my bad, this is not import. This is actually from. I want to import the method name. So you can just press control space and it will give you suggestions as well. Elijah. And you have another one. There we go. Now I have the ability to just print them directly. So let's just say I want to call gingerchai. I can just go ahead and call Ginger Chai. This is totally on you. That how you want to work with this. Totally on you. Everything is correct. There is no right and wrong. Whichever makes sense. You can just go ahead and work with that. This is named import VS all import. Now there is another way of handling this. Yeah. So what we can do is we can actually have a, relative imports as well. So relative imports are helpful where the module lives in the same directory tree. They're often used in the packages as well. So from within the recipe package you can try something like this. I'll show you something. This, this is also interesting. So notice here I can just go ahead and say from dot and notice here I can just go ahead and say from recipes. And if the recipe file is within the same part where the main py I can just go ahead and say dot flavors just like this. But it is not. So here's the interesting part. I can use two dots. That means go one directory back and it can actually go. Right now I don't want to go one directory back because it will take me onto the root level. But just wanted to show you that it exists. Now here I have to say the same recipes then I have to say dot flavors. It's also a syntax and I can just go ahead and say import. Very weird syntax. But I want to show you that this actually exists. Now here's the interesting thing that usually I say avoid this. I'll just show you. But please don't do this. So let's just say from I should actually show you. Not here, actually here because this is where we are importing. So what you have to never do or should actually avoid as much as possible is from Masalachai import asterisk. This means I'm importing everything without knowing what it's going to do. What, what it's not going to do. How is it going to impact the things and all of these things? This is something which is usually avoided. Now here's the interesting part I want to show you. Since we are talking about the imports, one thing that you have hundred percent seen is dunder init dunder py now you will see, almost everybody will say that the presence of this init py file turns a folder into a Python package. So technically if we are making a Python package, go into the recipe, create a new file. This is underscore, underscore init in it we don't write anything inside this file, but this actually turns folder into a Python package. It can also contain initialization code, but this is. Okay, but here's the interesting part, what people don't tell you ever probably those videos are a bit old. So anytime that you see Python, which is about or the Python onwards, you don't have to do this anymore. But it is still commonly used. So much so that you're going to see this and people talk about it. But the reality is in the Python this is obsolete. So all the code that you're writing doesn't really need it. But if you still want to have it, you can keep it. There is no right or wrong in this one, so, so just wanted to make sure that you understand that. Okay, this one converts my folder into the Python modules and technically now we can call this one as Recipe modules just for saying it's already a module because it's in the Python structure. There's a Python files and all of that. Python automatically does that, but still people love to use it. I don't do it because I know Python doesn't need this file and anyways this file is always empty. This is just for the Python internal architecture. You don't do anything with this. So I hope this all information was useful for you. And now from this point onwards, importing any file will be your call. It's not just the guesswork. You know exactly where I am going, what I'm doing. Different types of import, I'm aware of them. I know how the named import works, I know how not to do the star work and everything beyond that. That is it for this video. Hope you have enjoyed it. Do rate us and we'll catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "09 Python imports, modules and init file.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/09 Python imports, modules and init file.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0020475106,
      0.0015449959,
      0.04785327,
      -0.058570325,
      -0.00919296,
      0.000977111,
      0.008926511,
      0.022851741,
      0.0080907205,
      -0.009180532,
      -0.011025913,
      -0.014802083,
      0.026120223,
      0.025458565,
      0.12002058,
      0.0030916487,
      0.00008122606,
      -0.014066355,
      0.00008912197,
      -0.034026895,
      -0.0016660559,
      -0.0014393155,
      0.002616343,
      -0.009471962,
      0.00461067,
      0.007361939,
      0.008068552,
      0.001263095,
      0.026683854,
      -0.03045767,
      -0.009160907,
      -0.0056735356,
      0.004344455,
      0.014949345,
      0.0356203,
      0.009211527,
      0.007569568,
      -0.004759078,
      -0.010117387,
      -0.008423694,
      -0.01093346,
      0.008294843,
      0.0056369393,
      -0.01217101,
      0.01522614,
      -0.042808253,
      0.00482878,
      -0.030907487,
      -0.0072465115,
      0.015951406,
      0.002951727,
      -0.004463002,
      -0.013870775,
      -0.17098214,
      0.01902208,
      0.002491895,
      0.011395238,
      -0.0033419505,
      0.015198039,
      -0.0005422214,
      -0.046178102,
      0.026278278,
      -0.04285083,
      0.0032250418,
      0.004436622,
      -0.024862614,
      0.012390666,
      -0.021132039,
      0.01139292,
      0.00015828673,
      0.015323435,
      0.014844284,
      -0.028898438,
      -0.022930104,
      -0.016147634,
      -0.021728588,
      0.014643608,
      -0.005910404,
      0.013655129,
      0.027135694,
      -0.00638547,
      -0.005404868,
      -0.007897667,
      -0.010007515,
      0.032190576,
      0.008587528,
      -0.022708185,
      -0.006621531,
      -0.0159469,
      0.0023501436,
      -0.008790387,
      0.022812696,
      0.008773491,
      0.015307346,
      -0.014714759,
      0.008579465,
      0.0007804411,
      -0.0059354743,
      -0.0057514184,
      -0.010775709,
      0.01566575,
      -0.028851608,
      -0.0321591,
      -0.012091644,
      0.009012065,
      -0.0023066895,
      0.008939993,
      -0.0109186005,
      -0.023130419,
      -0.0014588038,
      -0.01440096,
      -0.005908486,
      0.00016425693,
      0.023116527,
      0.012859213,
      -0.17244457,
      0.005718282,
      -0.019273859,
      -0.011549112,
      0.0014025808,
      -0.0093829185,
      0.0002026562,
      0.0073934603,
      0.0027578808,
      0.0135809155,
      0.031219766,
      -0.01176498,
      0.026103351,
      -0.011982213,
      -0.0014154271,
      -0.010802852,
      -0.032130875,
      0.018100591,
      0.010410258,
      0.006043359,
      0.016875558,
      -0.008649783,
      0.014684162,
      -0.017577853,
      -0.0042776493,
      0.0023168908,
      0.012814821,
      -0.0075252024,
      0.022791693,
      0.0033983379,
      0.00877179,
      -0.0017093241,
      0.011958843,
      -0.024642428,
      -0.025764354,
      -0.0065763798,
      -0.0037785245,
      -0.0025467125,
      -0.011053201,
      0.026658922,
      -0.020891892,
      0.01319458,
      -0.0024136198,
      -0.0047310432,
      -0.0020637403,
      -0.004993493,
      0.009957504,
      -0.003508854,
      0.01204278,
      0.0013454421,
      0.004298052,
      -0.014215699,
      0.015492203,
      0.020030817,
      -0.0008532722,
      -0.0018262399,
      -0.017839622,
      -0.0012614531,
      -0.002415292,
      -0.0139411865,
      -0.013876396,
      0.0032539943,
      -0.009687443,
      0.01203303,
      -0.037857845,
      0.014001427,
      -0.01875539,
      0.029248077,
      -0.0005277294,
      0.0051738857,
      0.000026766296,
      -0.014874233,
      0.025901495,
      0.0150158275,
      -0.006838659,
      0.00971507,
      -0.0114530735,
      0.02054781,
      0.009148745,
      -0.0052589877,
      -0.032283843,
      0.012664293,
      0.00224742,
      -0.0107516125,
      0.009847348,
      0.037016932,
      0.001410067,
      -0.009318204,
      -0.038806964,
      0.036869712,
      -0.0065387925,
      -0.004099564,
      -0.025043163,
      -0.0017449204,
      0.00035832697,
      -0.028550478,
      0.00028681537,
      0.020832546,
      -0.017282704,
      0.017604928,
      -0.0009745979,
      0.029767305,
      -0.0020615375,
      0.00006011449,
      -0.018037187,
      0.0075492505,
      -0.014387441,
      0.015216329,
      0.02703028,
      -0.006797078,
      -0.012823084,
      0.0017868577,
      0.0047987276,
      0.00020683493,
      0.004618036,
      0.031428467,
      -0.001738308,
      -0.025240134,
      -0.011081119,
      0.003185224,
      0.00040344152,
      -0.02951055,
      0.023311721,
      0.0029925597,
      0.004919249,
      -0.0031479707,
      -0.0030207825,
      -0.003949766,
      -0.0037994683,
      0.033894595,
      0.0062866635,
      0.00073777884,
      -0.007621953,
      0.005727798,
      -0.017844226,
      -0.026532,
      -0.009183172,
      0.004751116,
      -0.020647187,
      -0.0010218294,
      -0.019702109,
      -0.01923901,
      -0.008804343,
      -0.012437891,
      -0.0071686227,
      -0.019356497,
      0.017405517,
      -0.027157757,
      -0.00077913323,
      0.013700343,
      0.030739266,
      0.0013996931,
      0.031154593,
      -0.014320515,
      0.030303797,
      0.022709418,
      0.017061185,
      0.019396719,
      -0.0020648777,
      -0.018782813,
      -0.0051108203,
      -0.09841281,
      0.031118656,
      0.0022610594,
      -0.017525267,
      0.012621271,
      0.011634212,
      -0.047335725,
      0.01454356,
      0.004353823,
      0.0065573673,
      -0.002520363,
      0.00004184817,
      0.034839958,
      0.0067569087,
      -0.014557113,
      -0.0036656621,
      -0.004280049,
      -0.021092938,
      0.017346045,
      -0.008248741,
      -0.0030893085,
      -0.004407806,
      -0.0061112596,
      0.0069036935,
      0.011348706,
      -0.013946807,
      -0.011798144,
      0.02243469,
      0.024006343,
      0.012470497,
      0.0002316173,
      0.0034062366,
      0.0053092386,
      0.0013176997,
      -0.0032415483,
      0.010834945,
      0.018762527,
      -0.023114597,
      0.011194539,
      -0.001259067,
      -0.00902162,
      -0.015925048,
      0.011797811,
      0.014032845,
      -0.010301089,
      0.0006438402,
      -0.011901756,
      0.00037381685,
      -0.013983098,
      0.01651372,
      -0.019481646,
      0.0071141305,
      0.01710456,
      -0.0016689277,
      0.008548886,
      0.011036264,
      -0.009695115,
      -0.013679705,
      0.022455722,
      0.00990342,
      0.0074013458,
      -0.003590826,
      0.0066167223,
      -0.010461178,
      0.0047400864,
      -0.026931059,
      -0.00018927982,
      0.0037305127,
      0.004567185,
      -0.006657628,
      0.014752087,
      -0.018422889,
      -0.0071956026,
      -0.0120546855,
      0.010718538,
      0.01729566,
      0.011229249,
      -0.008915615,
      -0.01856785,
      0.018602908,
      0.016208617,
      0.005565002,
      0.010553511,
      0.008580564,
      -0.0065104263,
      0.009251765,
      -0.016136358,
      0.0018292668,
      0.009471226,
      -0.03230315,
      0.008393221,
      0.009261968,
      -0.019168466,
      -0.0010491618,
      -0.015703095,
      0.00826786,
      -0.020119837,
      -0.02279958,
      -0.014978548,
      0.01697171,
      -0.018163528,
      0.0072020106,
      -0.02439855,
      -0.0039380207,
      -0.00095903315,
      -0.009479494,
      -0.009143284,
      -0.007927419,
      -0.00196129,
      -0.0024160715,
      0.006687645,
      -0.004335033,
      -0.0248871,
      -0.011020224,
      -0.012211719,
      0.007782508,
      0.0010224868,
      0.022544317,
      0.0071580415,
      -0.027439613,
      -0.016137071,
      -0.018740509,
      -0.017349837,
      0.004879797,
      -0.007455401,
      0.0065790284,
      0.003030957,
      0.0016405554,
      -0.010504547,
      -0.021372952,
      -0.02334434,
      0.013088374,
      -0.034597117,
      0.0026386424,
      -0.0130579155,
      -0.024510873,
      0.014482278,
      0.023855602,
      0.005898838,
      -0.0004257479,
      -0.01192291,
      0.015386541,
      0.026486952,
      -0.0051156585,
      -0.008391712,
      0.022099486,
      -0.008641044,
      -0.013922201,
      -0.021113597,
      -0.02478749,
      -0.020463789,
      -0.01134294,
      -0.009350172,
      0.0031329524,
      -0.012814714,
      0.00031514003,
      0.009270109,
      0.0037425894,
      -0.02417996,
      -0.016695702,
      0.009199379,
      0.020524966,
      -0.008686624,
      -0.013037422,
      0.031014863,
      0.017782884,
      0.0038490528,
      0.009136213,
      0.00092653907,
      0.00046008563,
      -0.015683787,
      -0.031194596,
      -0.02928138,
      -0.00014160246,
      0.006791487,
      -0.0013876826,
      0.006298169,
      -0.0005835432,
      0.010522331,
      0.017178578,
      -0.006366103,
      -0.0105980495,
      -0.025606737,
      0.019028222,
      0.0044787335,
      0.009632544,
      0.0136095835,
      -0.016301483,
      -0.029303554,
      -0.0037911201,
      0.022290185,
      -0.028337229,
      -0.00012081802,
      0.0138476705,
      0.0039029175,
      0.007227913,
      -0.02000305,
      0.008930029,
      0.016912583,
      0.025687935,
      0.0029237098,
      -0.021045467,
      -0.003506459,
      -0.0057333545,
      0.011144403,
      -0.019225786,
      0.023151582,
      -0.0045093484,
      -0.00026238227,
      0.015772266,
      0.012056754,
      -0.0199614,
      0.0008836075,
      -0.0037082008,
      0.002756132,
      0.015367616,
      0.008583577,
      -0.021226065,
      -0.024856275,
      -0.0073105423,
      0.013596726,
      -0.006183612,
      -0.0001798008,
      -0.019066654,
      0.009207586,
      0.015074887,
      -0.009027234,
      0.0007610365,
      -0.020016603,
      -0.0019147735,
      0.0009614816,
      0.0057515185,
      -0.011822064,
      0.019854728,
      -0.023766503,
      -0.01529062,
      0.0107126245,
      0.027944054,
      -0.003271087,
      0.0019450688,
      0.011616259,
      -0.0025775458,
      -0.023027409,
      0.014146051,
      -0.0015380258,
      -0.009060025,
      0.032610536,
      0.0027584492,
      -0.016312214,
      -0.003298048,
      -0.00059664686,
      0.030737739,
      -0.005250598,
      -0.0002799125,
      -0.02039532,
      0.031822965,
      -0.008159904,
      0.01212357,
      -0.011814537,
      -0.007187641,
      0.01873007,
      0.02799987,
      -0.006402484,
      0.004305941,
      0.0032926966,
      -0.016963158,
      -0.009839158,
      0.02279795,
      0.009113351,
      -0.12697189,
      0.0019487913,
      -0.014819166,
      0.01390389,
      -0.0062209265,
      0.0074297087,
      -0.012324082,
      -0.020449717,
      0.0031777227,
      -0.00006858165,
      0.04391979,
      0.005175906,
      0.009725112,
      -0.024188604,
      0.011296777,
      -0.0077598053,
      0.008417312,
      0.0068053077,
      0.021692198,
      0.004185347,
      -0.014138771,
      -0.0022447724,
      -0.017011555,
      -0.00085529184,
      -0.020714791,
      -0.0066189035,
      -0.0007507123,
      0.0058000167,
      -0.0066635036,
      -0.020427786,
      -0.034457408,
      -0.0143584665,
      0.012516719,
      0.0036473745,
      0.019331494,
      -0.008465209,
      -0.012905303,
      0.017244158,
      -0.00012581277,
      0.010887544,
      -0.01651233,
      -0.0033711893,
      0.016442066,
      0.017973239,
      -0.016001519,
      0.021797128,
      0.032421514,
      -0.0033022184,
      0.017580664,
      0.03923422,
      -0.03126562,
      -0.026456067,
      -0.0044728736,
      -0.017017094,
      0.012405924,
      0.009299675,
      0.006023332,
      0.0034105447,
      -0.004476161,
      0.007043791,
      0.023568023,
      0.0052744444,
      -0.0030780253,
      0.020035807,
      -0.00916938,
      0.010040592,
      0.020348266,
      0.010342388,
      0.021515701,
      -0.010471414,
      0.0006464119,
      0.012072778,
      0.014765381,
      0.010785665,
      0.012958352,
      -0.008304964,
      0.0024682109,
      0.0051550423,
      -0.010820079,
      -0.0037168623,
      -0.02808483,
      0.0032769097,
      -0.058751393,
      -0.0029364135,
      0.01909212,
      0.008817173,
      0.02956872,
      0.025786623,
      -0.007999289,
      0.0065176585,
      0.02651403,
      0.0023292196,
      -0.019642908,
      -0.021702485,
      0.0061694654,
      -0.0074365204,
      -0.015871968,
      0.0052059395,
      0.003988672,
      -0.026643546,
      -0.02742797,
      0.016623562,
      0.020330355,
      -0.002558772,
      0.008713014,
      -0.018175192,
      0.012114661,
      0.013347122,
      -0.00062939414,
      0.012552012,
      0.0041570445,
      -0.017118514,
      0.014835374,
      -0.15506846,
      -0.016286504,
      -0.0048078923,
      0.025462499,
      0.010547244,
      0.004799346,
      -0.010711889,
      -0.003965058,
      -0.013117987,
      -0.01734293,
      0.01579079,
      -0.010163265,
      -0.006401946,
      -0.015256315,
      0.034213785,
      0.1436002,
      -0.01691848,
      -0.0026093882,
      -0.009816409,
      0.0077602253,
      -0.001557802,
      -0.025599914,
      -0.009337326,
      0.023635702,
      -0.00609009,
      -0.0056972834,
      0.01616678,
      0.007002826,
      0.0012006649,
      -0.019465873,
      -0.0007912119,
      -0.021307448,
      -0.0044164043,
      0.027056137,
      -0.0050896485,
      -0.011283711,
      0.004763501,
      -0.0018222127,
      -0.00557371,
      -0.000012199673,
      0.0066300947,
      0.016872773,
      0.0041316035,
      0.0028898288,
      0.00828533,
      0.008168727,
      -0.009051137,
      -0.00799894,
      -0.0017664661,
      0.004453494,
      -0.013085633,
      -0.055370297,
      0.011078236,
      -0.005720083,
      -0.01133891,
      0.017892657,
      -0.0069235726,
      0.014171678,
      0.0004740704,
      0.031617492,
      -0.0017538191,
      -0.0022728238,
      -0.009200498,
      -0.00074460934,
      0.012535004,
      -0.0034334932,
      0.022135297,
      0.030763427,
      0.024211679,
      -0.014643359,
      0.020008255,
      0.024202302,
      -0.020066995,
      0.009791641,
      -0.014151808,
      -0.0016868123,
      -0.02008953,
      0.030565152,
      -0.008491932,
      -0.0036684757,
      0.011684056,
      -0.003529482,
      -0.013370539,
      -0.020750325,
      0.01070156,
      0.013695766,
      -0.013865969,
      0.027572554,
      -0.004617879,
      0.009749282,
      0.000944459,
      0.02393104,
      -0.012192802,
      0.012694881,
      -0.0044175074,
      -0.007214739,
      0.0012038096,
      -0.030595878,
      0.030117672,
      -0.011447648,
      -0.0021013313,
      0.010783867,
      0.010451479,
      -0.031745948,
      0.014189675,
      0.007981021,
      0.0037972713,
      0.02664708,
      0.016779866,
      0.000018852077
    ]
  },
  {
    "id": "genai_cohort_python_01_Introduction_to_loops_in_python_vtt",
    "content": "Right. Welcome to the new section of the Udemy's Python course. So, next up, what we are taking up next, we want to study about the loops. This is an interesting concept in the world of Python, but requires a little bit more additional practice. So make sure you are practicing enough on the Python loop section. The loop simply means I want to do a task again and again. So far in the course, we have seen that based on certain condition, we go either left or right. And by the left and right, I mean to say whether we go onto a route of yes or we go for a route of no. The condition was false, so I'm going this side. If the condition is false, I'm going that side. This is what we have done so far. Now we want to do certain tasks again and again. And you might be asking, why would you want to do that? Why? A task needs to be performed times or times. What's the point of it? Now, sometimes programming, and especially in the world of programming, it requires you to perform a task again, again, sometimes times, sometimes five times, and sometimes you don't even know how many times. I'll give you an example. Let's just say you made a web request to a database, a, backend side, and that backend gave you five books to display. So you have wrote a code, you have written a code that displays the book one time, and based on the request, you get five data to display the books. You repeat the logic again, you display one book, then second book, then third book, and all of this. Now, in the world of programming, we don't say we start with one. In the world of programming, everything, almost everything starts with zero. So first item is always 0th index, then first index. So we display all of the five items like that. This is a common thing that you'll be doing, and we will be learning about them in the course itself. So take a moment and try to understand what we are doing here. Loops are a very interesting concept, but they require a little bit more effort than the regular ones. And don't worry, we will have stories for this one as well. So let's go with the sum of the stories. So we will start the loop section. And loops are pretty fun, actually. They are pretty fun. And by the end of this chapter, you'll be able to use for loop. And while loop, these are the most prominent loop that are used. Just like we have the condition if else if, or else, these are just the keywords. So we will be fully comfortable with working with for and the while loop. Apart from this, we will also learn how we can loop through some of the sequences. Like there is a sequence range, they gives you certain range like this range. If you give a start limit and end limit, it gives you all the data in between. For example, you can put a range of to and it will give you all the numbers starting from to Remember in the Python, range is never inclusive. In the whole of Python, wherever you see whether numbers, strings, range or anything, the range is never inclusive. So, so keep that in mind and we will use it later on. So we'll see that how we can produce some of the sequences. The sequences producers can be range, enumerate, zip, and they all have their equal. I will show you real world stories so that we can actually learn to utilize them. We will see some of the control behaviors on the loop. Like how we can control the loop in between. Let's just say the loop was asked to run between and But there are certain conditions, if those conditions are met, they might met, they might not met. We want to break out of the loop or we want to just skip one part of the loop. There are so many things that we can do so we are going to just work with that. Then we are going to identify when to use for VS while loop. Again they are kind of same, but of course they are two different ones. So we will see that how it can work and we will of course go through with the real world logic. We will have the challenges, we will fix those challenges and work just like that. So with this, I really don't want to waste too much of your time. We will directly jump into very first, exercise here, very first example, but that we'll do in the next video. So let's catch up in the next video quickly.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 Introduction to loops in python.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/01 Introduction to loops in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.00025969063,
      -0.000479129,
      0.01779421,
      -0.0470275,
      -0.021076608,
      -0.012007981,
      -0.002777603,
      0.02154937,
      0.0011212585,
      0.009557258,
      -0.0042619957,
      -0.010828945,
      -0.00047532414,
      0.034591716,
      0.120841935,
      -0.0004972953,
      0.0070115924,
      -0.030623935,
      -0.0020871367,
      -0.0063457307,
      -0.011442848,
      -0.001323797,
      0.01199747,
      -0.036583766,
      0.014025117,
      0.018271305,
      0.00016714839,
      0.0063310615,
      0.029037364,
      -0.023701267,
      -0.028620185,
      -0.0053192796,
      0.0035117145,
      0.031889915,
      0.008099169,
      0.013694282,
      -0.0035034907,
      0.0046007247,
      -0.022603618,
      -0.0034936024,
      -0.0042532375,
      -0.0108199045,
      -0.012572904,
      -0.023077164,
      0.01209606,
      -0.030110216,
      -0.010502968,
      -0.030500557,
      0.008523913,
      0.014998204,
      -0.0018281314,
      -0.010491145,
      -0.010651386,
      -0.19371781,
      -0.0034174665,
      0.006897633,
      -0.006111367,
      0.006255483,
      -0.01216487,
      0.011168966,
      -0.020947257,
      0.0028947413,
      -0.011267935,
      -0.0020527102,
      -0.011917266,
      -0.03265428,
      0.01674936,
      -0.005025122,
      0.0066559254,
      0.0092930235,
      0.016702775,
      0.0124881035,
      -0.000486927,
      -0.021485955,
      -0.027611433,
      -0.036960345,
      -0.008981748,
      -0.007759015,
      -0.014319471,
      0.010135022,
      -0.01378765,
      -0.01658528,
      -0.00574337,
      0.009319256,
      0.016840784,
      0.0060146158,
      -0.029829968,
      -0.01573995,
      -0.011201012,
      -0.005974123,
      -0.03220178,
      0.020857086,
      -0.006663934,
      0.0061658816,
      -0.012577289,
      -0.009455868,
      -0.023395896,
      -0.0011216422,
      -0.0020605228,
      0.0016996753,
      -0.002758099,
      -0.012286975,
      -0.03071245,
      -0.010018815,
      -0.0071418206,
      0.020112531,
      -0.011522333,
      -0.026746789,
      -0.00176027,
      -0.002587925,
      -0.0072619915,
      0.0035341447,
      0.0049008867,
      0.036939252,
      -0.018094584,
      -0.1975723,
      0.020284615,
      0.0050927014,
      -0.026793754,
      0.012347739,
      -0.017339228,
      0.009008263,
      -0.008729487,
      0.012515897,
      -0.015655726,
      0.015661595,
      -0.013840881,
      0.03731545,
      0.0034287514,
      -0.005791024,
      -0.017642643,
      0.004547922,
      -0.0076572145,
      0.019959247,
      -0.008681407,
      0.023840634,
      -0.021576948,
      -0.015234572,
      -0.010197926,
      0.01240648,
      -0.006118559,
      0.014507896,
      -0.0055119777,
      0.041282084,
      0.006751475,
      0.007717934,
      -0.013370456,
      0.017195398,
      -0.016267715,
      -0.0042671366,
      0.009230347,
      -0.005208457,
      -0.0111545315,
      0.0065458864,
      0.02213515,
      -0.025822314,
      -0.0040057893,
      -0.01634511,
      -0.016230367,
      -0.007999843,
      -0.0014438126,
      -0.011181662,
      0.013259107,
      -0.004222649,
      0.009160863,
      0.0010142743,
      -0.017499415,
      0.010355553,
      0.020156462,
      -0.0021389825,
      -0.0058855256,
      -0.0057583107,
      -0.003651045,
      -0.012103319,
      -0.0005909689,
      0.004631395,
      0.00890971,
      -0.0033421917,
      0.0075061982,
      -0.021344367,
      0.019126961,
      -0.006202539,
      0.0009161388,
      0.0043743816,
      -0.0033252598,
      -0.0021443006,
      -0.025620362,
      0.010037151,
      0.012706792,
      0.005602752,
      -0.013375704,
      -0.0078258235,
      0.026411003,
      -0.0048542055,
      -0.017416993,
      -0.0042264694,
      0.0031392039,
      -0.006322126,
      0.0036116792,
      0.024208182,
      0.0071639726,
      0.007499211,
      0.008891293,
      -0.018982274,
      0.031881202,
      -0.016907724,
      -0.009451741,
      0.0016622655,
      0.020608345,
      0.008393431,
      -0.0038652832,
      0.006411326,
      0.012203006,
      -0.0014544745,
      0.01069393,
      0.005118829,
      0.017245311,
      0.014042595,
      0.006787098,
      0.0056022964,
      0.009766207,
      0.012332813,
      0.0045946753,
      0.01947849,
      0.0078037675,
      -0.012196471,
      0.009252548,
      0.0018973111,
      0.01277472,
      0.012856722,
      0.016989546,
      0.013479079,
      -0.020208398,
      -0.019415356,
      0.009072864,
      -0.0042012213,
      0.009099964,
      0.017252637,
      0.017610006,
      -0.00428578,
      0.002143192,
      0.0006493592,
      -0.019714996,
      0.010377712,
      0.021183493,
      -0.009986714,
      -0.007191699,
      0.0080730235,
      0.0059927534,
      -0.040496822,
      -0.0027010043,
      -0.0005104966,
      0.017475098,
      -0.0138416225,
      0.0025272304,
      -0.0061013014,
      -0.015043105,
      -0.014337822,
      -0.009171121,
      -0.026429199,
      -0.022122545,
      -0.013753522,
      -0.024111241,
      -0.005935983,
      0.024107596,
      -0.0067853555,
      0.0060789636,
      0.034199905,
      0.004265323,
      -0.002891661,
      -0.0016957754,
      0.0011359447,
      0.023613589,
      0.006271502,
      -0.020859076,
      0.008232404,
      -0.094188966,
      0.020884966,
      0.012995335,
      -0.012553491,
      -0.006908673,
      0.005080774,
      -0.022662604,
      0.019451737,
      0.02415651,
      0.016428938,
      0.020335438,
      -0.009592935,
      0.029409636,
      -0.023021266,
      -0.0043507055,
      0.0004621671,
      0.004235279,
      -0.030911174,
      0.024458738,
      -0.0030175713,
      -0.0005876078,
      -0.016121194,
      -0.0054403804,
      -0.019352343,
      -0.0013379456,
      -0.0059927213,
      -0.0071677095,
      0.02923888,
      0.019021291,
      -0.0016973006,
      -0.011354376,
      0.04217355,
      0.0027382663,
      -0.004430955,
      0.006635582,
      0.014753971,
      -0.0071529914,
      -0.0057465583,
      0.009245571,
      0.000033361965,
      0.0177054,
      -0.030258587,
      0.022513893,
      0.020607982,
      0.007248843,
      0.011843888,
      0.007291863,
      0.012211668,
      -0.010307745,
      0.0030373482,
      -0.0106423795,
      0.0064636245,
      0.0050126347,
      -0.017690215,
      0.01261805,
      0.016684292,
      -0.013728584,
      0.0025212667,
      0.011560938,
      0.012201371,
      -0.0035885165,
      0.005154986,
      0.0008867175,
      -0.01171358,
      -0.000617183,
      0.00417811,
      0.003916486,
      0.0022882652,
      -0.017737139,
      0.008290369,
      -0.010639242,
      0.0023078558,
      0.006272216,
      -0.0056304475,
      0.00961701,
      0.005462886,
      0.019428022,
      -0.011203971,
      -0.032569733,
      0.027970571,
      0.031778943,
      -0.0036158524,
      -0.0014575613,
      -0.0032852436,
      0.019143233,
      0.00049185316,
      0.0023365626,
      -0.015915496,
      -0.0080948025,
      -0.0038844822,
      0.016410151,
      0.021370107,
      -0.030825032,
      0.013922039,
      -0.030105025,
      -0.019290023,
      -0.0069153886,
      -0.018173948,
      -0.018497966,
      -0.0003483063,
      -0.015117624,
      0.02079731,
      -0.023847874,
      -0.012320194,
      -0.00480055,
      0.018016988,
      -0.004695402,
      -0.01437449,
      0.020641997,
      -0.011800087,
      0.005807481,
      0.011022183,
      -0.0071677845,
      -0.012234415,
      -0.010283999,
      -0.005739115,
      0.0039998167,
      0.009080903,
      0.007054829,
      -0.029639376,
      0.0026285902,
      -0.02160285,
      0.0035125948,
      0.018083103,
      -0.00010318783,
      0.020515535,
      -0.019567356,
      -0.000023194005,
      -0.011719238,
      -0.0307328,
      -0.03103625,
      0.011003581,
      -0.022311242,
      -0.0074894163,
      -0.010874665,
      -0.002808326,
      0.022346264,
      0.037022743,
      0.005475474,
      0.00129263,
      0.004155727,
      0.009203229,
      0.02786714,
      0.008481846,
      -0.028689206,
      0.031694565,
      -0.020053659,
      -0.012414961,
      0.011851722,
      -0.021578163,
      -0.018881844,
      -0.012341105,
      0.0015863256,
      -0.0016916412,
      -0.012027354,
      0.0073267324,
      0.01119044,
      -0.02176241,
      -0.008419131,
      -0.02104283,
      0.0012773986,
      0.00039023688,
      -0.0076748314,
      0.009841454,
      0.034194764,
      -0.0003420363,
      -0.0038653424,
      -0.011864938,
      -0.0022465857,
      0.0075227865,
      -0.013263782,
      0.0020542874,
      -0.041663826,
      -0.020738319,
      0.013790242,
      0.014295062,
      -0.0153714875,
      0.0015273287,
      0.008953764,
      0.012743095,
      0.010874143,
      -0.0022275532,
      -0.014560487,
      0.009891357,
      -0.0019792002,
      0.018193493,
      0.023372762,
      -0.013644277,
      -0.027912056,
      0.015086437,
      -0.0032413541,
      -0.005658581,
      0.0007377292,
      0.01843867,
      0.013752991,
      0.021032432,
      0.0008715155,
      0.0006127893,
      -0.0018052756,
      0.008123228,
      0.008033989,
      -0.008242311,
      0.013460375,
      -0.020978102,
      0.02484479,
      -0.014187178,
      -0.017925771,
      -0.008952397,
      0.01749592,
      0.0029044766,
      -0.020023152,
      0.006439399,
      -0.0028774773,
      0.0074102576,
      0.021784496,
      0.0305879,
      -0.0046265502,
      0.00075356395,
      -0.023346074,
      -0.01612468,
      -0.007922982,
      -0.015225656,
      -0.021823058,
      0.0022668159,
      0.0051546544,
      0.016994016,
      -0.017566271,
      -0.0026036345,
      0.000031353018,
      -0.010688633,
      -0.010251039,
      0.005725253,
      -0.033617713,
      0.022471348,
      -0.022471009,
      -0.012500143,
      0.018312285,
      0.013544805,
      -0.017240686,
      -0.0013337433,
      -0.0013278369,
      -0.0012698432,
      0.011302059,
      0.028871708,
      0.01285839,
      -0.004358735,
      0.018596182,
      -0.0028198247,
      -0.012021355,
      -0.010059822,
      -0.003888638,
      0.011829541,
      0.003982393,
      -0.005306566,
      0.010240746,
      0.022241905,
      -0.0046230257,
      0.008834044,
      0.0037284875,
      -0.015915895,
      0.025642764,
      0.013633865,
      -0.0068125715,
      -0.0066497833,
      0.014040564,
      -0.027247919,
      -0.02259496,
      -0.013097813,
      0.016376963,
      -0.12506776,
      -0.012495716,
      -0.0012701689,
      0.008192692,
      -0.019699946,
      -0.0067213946,
      0.00046282893,
      -0.017537046,
      0.0010117439,
      -0.0058448305,
      0.030334294,
      -0.004984545,
      -0.006415161,
      -0.018590948,
      0.0074847266,
      -0.019945873,
      0.008124179,
      0.004307975,
      0.014965299,
      0.0016045067,
      -0.0048624245,
      0.008970962,
      -0.010124094,
      -0.00042104564,
      -0.016440326,
      -0.015521585,
      0.0041980436,
      0.010520699,
      0.00037428743,
      0.0015010056,
      -0.024924595,
      0.009916326,
      -0.0018565825,
      0.0069200736,
      0.008367831,
      -0.018805034,
      -0.019743105,
      0.014236963,
      0.0139078805,
      0.00041771075,
      -0.011308388,
      -0.013947372,
      0.0023656152,
      0.010000834,
      -0.01374924,
      0.018689899,
      0.023727952,
      -0.012991507,
      -0.0059692543,
      0.017819088,
      -0.040842734,
      -0.016199216,
      0.0041034995,
      -0.039031096,
      -0.011789685,
      -0.00077247707,
      0.0037709759,
      -0.018629557,
      0.0035881205,
      -0.030450294,
      -0.008912263,
      -0.0007248246,
      0.012552662,
      0.016590659,
      0.0042932224,
      -0.0071526063,
      0.04051386,
      -0.0030213245,
      0.015090016,
      -0.0313235,
      0.007809472,
      0.019990675,
      -0.012299113,
      0.014844221,
      0.011495022,
      -0.021058377,
      0.03727059,
      0.0064824335,
      -0.0054234336,
      -0.0050479434,
      -0.0065554655,
      0.0010033048,
      -0.049157187,
      -0.0046120537,
      0.024763739,
      0.012963352,
      -0.0070494427,
      0.0029692752,
      -0.02222067,
      0.005047811,
      0.01663354,
      -0.00017512855,
      -0.046824645,
      -0.0071465056,
      0.025296757,
      0.017743677,
      -0.017656265,
      -0.010128576,
      0.00034793647,
      -0.02609124,
      -0.003406443,
      0.010313059,
      -0.018020961,
      0.016135523,
      0.00699433,
      -0.024710175,
      0.019588942,
      0.013731367,
      -0.011380701,
      -0.00046962328,
      0.0042905407,
      0.011827504,
      0.006155881,
      -0.16011135,
      -0.0100116925,
      0.00907584,
      0.01740569,
      0.003445254,
      -0.013689271,
      0.0019005658,
      -0.013128902,
      0.0104757985,
      0.0059611625,
      0.003203752,
      -0.011369723,
      -0.0140223475,
      -0.0037107945,
      0.014297372,
      0.12904467,
      0.0026081924,
      0.012550665,
      -0.032241043,
      0.0023732714,
      -0.005916977,
      -0.025889223,
      -0.01382786,
      0.012003868,
      -0.011455839,
      -0.023225293,
      0.023673821,
      -0.02070241,
      0.0005956964,
      0.0026748998,
      0.009558431,
      -0.006453534,
      0.005857297,
      0.021574287,
      0.0019494365,
      0.0022160779,
      -0.006497781,
      0.0077382945,
      0.002738028,
      0.01625098,
      0.027763588,
      -0.00227054,
      -0.0009465552,
      0.008999929,
      0.006377316,
      0.0032272923,
      -0.029373415,
      -0.021061264,
      -0.0061691916,
      0.0047117844,
      -0.0029048598,
      -0.060944874,
      0.0074773044,
      -0.011972175,
      -0.0005764207,
      0.011170194,
      -0.012480331,
      0.013839354,
      0.003825133,
      0.009611048,
      -0.02571719,
      -0.0040415004,
      -0.00056637,
      0.0059793135,
      0.015408429,
      -0.0001385941,
      0.018573476,
      0.007617365,
      0.014089002,
      -0.011042427,
      0.008306033,
      0.015107692,
      0.0051882737,
      0.014890597,
      -0.010719533,
      -0.00871495,
      -0.020052047,
      0.020411683,
      0.008178052,
      0.0010129395,
      0.012043015,
      -0.006584281,
      -0.0073093656,
      -0.005646327,
      0.013999341,
      0.007378099,
      -0.021348234,
      0.01503654,
      0.0068838242,
      -0.0053015496,
      -0.0050023873,
      -0.009220119,
      0.008174792,
      0.003404692,
      0.0061978726,
      0.018321566,
      0.00147551,
      -0.0032499756,
      0.019502724,
      -0.0107866535,
      -0.009211867,
      0.009046602,
      -0.013898681,
      -0.036065124,
      0.030294377,
      0.0059352233,
      -0.0024776522,
      0.028378595,
      0.0065391916,
      -0.0053028204
    ]
  },
  {
    "id": "genai_cohort_python_02_Tea_Token_Dispenser_vtt",
    "content": "All right, so we have our very first problem already in front of us. Let me remove myself from here so that we can focus fully on the screen itself. So notice here we have a problem statement written. And just like previous ones, we will just focus on one thing first. Understand the problem, and then we'll write the code for it. Let's prepare the code material first because we have to create a new folder. Let's call this one as loops. So much code that we have written. Let me write that again. Made a mistake. Mistakes are part of writing the code. We'll call them as loop or loops. Both are interchangeable word. So, all right, what's the problem? What kind of software we want to build? The software is pretty easy. A T stall owner has a digital token display. All right. Pretty common. We have seen that in the queue system. Might be T staller, might be in the hospital queues everywhere. For every customer in line, a token number is printed and chai is served. Okay, so task use a for loop to generate a token number between from and using range. So we'll see the implementation of range as well. And print servingchai to token and then also print the token number as well. So this might sound. Okay, I don't know how to even start with that. So because this is all new, you haven't looped through anything at all. So, so how we can print this. And if you see this closely, the goal is pretty simple. The first goal is learn how to use range so that you can generate number between and and then simply print this message times. But the only thing that's changing all the times is the number, hashtag, then whatever the number is here. So that should be pretty. Okay, let me walk you through with the syntax. And I think this is one of the best way to learn about this. So we'll create the new file and I will call this one as, let's just say And this will be token dispenser. That's what it is doing. It's dispensing the token. Of course we have to go through with py. All right, I'll, shut up my AI. Otherwise it will disturb us. There we go, moving nicely. And let me expand this. All right, so how do we start Loop? Loop always starts with the keyword for yes, there is another one while, but this is always how it starts. Then you simply declare a variable. I will call this variable as token. Now feel free to call this as anything. This is just a Variable. Now once you have decided the variable, then you put up the keyword in and then you decide where you want to loop through. This is the range you give and this can be any iteratable object, it can be a list, it can also be a string. But in this case we will learn how the range works. So this is range. This automatically comes up with the python. And here you give a start and a stop range to this one. So my starting point is one, I want to start with one and I want to go till the So I will just put here because range are not inclusive in the manner so it will start with 1, 1, 2, so on will go till the As soon as it goes 11, this is not inclusive. Then hit a column and then hit enter. Automatically the indentation comes up. So I'll just go ahead and say print and then the message, what's the message? We have to get serving chai to token and then token number as well. So we'll just go ahead and say serving chai to token and then put up a hash and then the token number. So this token, the variable that we have declared here, this could be anything right now token makes sense for us so we are calling it as token. But this could be anything. This could be hitesh. This could be chai, this could be index, whatever you like. This will be the range will keep on producing the number. For example 1, the variable will first iteration it will go ahead and say that hey, this is now number one. So let's draw actually a diagram to understand this a little bit that how the whole processing actually works. So this is your range. So in this range your numbers will keep on starting. So I just say that hey, in the range I will have the number one first. And we have also created a variable here. That variable is token token. And the value of the token right now is exactly what you have produced here. So I'll just go ahead and come up here and then simply you do what is the task that I have to do. So everything that you see after indentation, this is the task. So I will just go ahead and say hey, I want to produce or do a task. So I'll just go ahead and put up a task here. There we go. We do a task like this. So I'll just shrink this because it doesn't make sense to have it big and wide. Whatever the task is, it could be one line of task, it could be hundred line of task, doesn't really matter. So as long as we are keeping printing this range. So notice here the range is So first of all it will go ahead and do this task. Then it will come back again. The range will again produce a new number. So it will be two. This number will also be two. It will again go ahead and say that. Hey, now we want to print this one here. Again, sorry for the 2a, it's actually Then we'll go ahead and change the number This will also get So the display of the variable will be So we'll just go ahead and display it like Eventually the number will reach to a point where it is out of the range. We don't have any range. So it will go to we don't want to print. So it will just end it up there. And just before that it will be So the number here will become and for the type it will go ahead. Oops. It will go ahead and print this one. So this will be the last one. So the 10th number will be last. That is how it works. Pretty simple. You asked it to work on times, it is working times. That's the most simplest and basic loop. Let's go ahead and run this so that we can just finally validate what's going on. So I'll just go ahead and say hey Python, I want to run inside the and probably I want to wrong one, delete this. Open an integrated terminal on this one and we'll say Python Just run this file and there we go. So we can see we just added the value token here. And notice here it just always says token, token, token just like that. So this is a little bit of a strange that why we got this one. I'm pretty sure you might have debugged this already. This is not a special string that we are printing. So what wrong we are doing? Just forgotten a F here. I hope that was easy to catch. This was not intentional. I also did a mistake. But again, don't panic on the mistake. It's okay. We always fix those mistakes. So we can see now we have all the values till the And once the was hit, that is it. The loop ended. Pretty good example to work on with. I hope you have enjoyed this. Along with this nice small diagram, we will be keep on drawing them. That is it for this video. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 Tea Token Dispenser.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/02 Tea Token Dispenser.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.020430772,
      0.026141122,
      0.012488007,
      -0.054937687,
      -0.017084278,
      -0.0071130847,
      -0.006096192,
      0.006530156,
      -0.0046253675,
      0.007192364,
      -0.011851587,
      -0.037033863,
      0.0015999489,
      0.02887687,
      0.1217228,
      0.01482914,
      -0.006252294,
      -0.023853742,
      0.00092354196,
      -0.017852735,
      -0.015522411,
      -0.0026119652,
      0.01612111,
      -0.016365886,
      -0.00036392314,
      0.003093613,
      0.0016299252,
      0.02395372,
      0.037844814,
      -0.020568281,
      -0.028479373,
      -0.012150964,
      0.009531869,
      0.02069515,
      -0.006163007,
      0.01666725,
      0.015084878,
      0.000106737316,
      -0.01348842,
      0.00093841506,
      -0.010161928,
      -0.0093268,
      0.00092741207,
      -0.016669713,
      0.007211456,
      -0.013855371,
      -0.027180487,
      -0.039228946,
      0.00930541,
      0.014476304,
      0.0057410947,
      0.0018377665,
      -0.008760907,
      -0.18268965,
      0.0024278134,
      -0.0019568987,
      0.0012393111,
      0.01614582,
      0.008764233,
      -0.011155668,
      -0.012873748,
      0.0010197762,
      -0.03619801,
      -0.010559626,
      -0.011737477,
      -0.032674715,
      0.031317778,
      0.0016210194,
      -0.0036857768,
      -0.0020869193,
      0.024451476,
      0.019297097,
      -0.008985514,
      -0.0038144798,
      -0.031218579,
      -0.024724945,
      0.00788945,
      -0.010137211,
      -0.0034918224,
      0.016654558,
      -0.00007611133,
      -0.012990453,
      0.00030736934,
      0.0061101243,
      0.021492777,
      -0.006293879,
      -0.029858561,
      -0.01259985,
      0.0026931372,
      -0.0061351643,
      -0.027915258,
      0.013917969,
      0.0051507265,
      -0.010826807,
      -0.008114538,
      -0.006753539,
      -0.011211128,
      0.0035990865,
      -0.0056796586,
      -0.005653873,
      0.0035095338,
      -0.01027701,
      -0.029650299,
      0.0035147541,
      0.009837363,
      0.006675408,
      -0.0064574247,
      -0.02690982,
      0.0035229314,
      -0.008716238,
      -0.004335893,
      -0.011882654,
      0.017751904,
      0.01931745,
      0.005853763,
      -0.175065,
      0.024094349,
      0.0061065494,
      -0.010778689,
      -0.008386777,
      -0.012145042,
      -0.0014384896,
      -0.006121661,
      0.028568452,
      -0.021062661,
      0.012093581,
      -0.008434183,
      0.039484568,
      0.008552625,
      -0.0034377298,
      -0.035877585,
      -0.009970083,
      -0.00513797,
      0.008477762,
      -0.0060899067,
      0.018861385,
      -0.019409709,
      -0.010539146,
      -0.013272467,
      -0.008876484,
      -0.013906227,
      0.019445553,
      -0.0103944335,
      0.025441764,
      0.005806031,
      -0.004277252,
      -0.029614426,
      0.019953514,
      -0.019232009,
      -0.02231234,
      0.004743394,
      -0.02401679,
      0.0012656127,
      -0.017024795,
      0.02021244,
      -0.03984473,
      -0.0061626113,
      -0.0043887864,
      -0.02197086,
      -0.0041618887,
      0.015285847,
      -0.015274124,
      0.011909408,
      0.007299143,
      -0.007317194,
      0.008577179,
      -0.009989801,
      0.006484338,
      0.001458448,
      -0.008388473,
      0.000580933,
      -0.012646104,
      -0.0023312294,
      -0.0030313206,
      0.0017673243,
      0.008469688,
      0.00861655,
      -0.01660356,
      0.011805608,
      -0.006679838,
      0.018742388,
      -0.010148572,
      0.002252464,
      0.008961553,
      0.0032894493,
      -0.00041132708,
      -0.031626314,
      0.01171303,
      0.02215382,
      -0.0150370505,
      -0.013215144,
      -0.0054804864,
      0.029057346,
      0.006022913,
      0.006103424,
      -0.011401837,
      -0.01289241,
      -0.008129292,
      0.008137748,
      0.02151788,
      0.0033243028,
      0.0010181699,
      -0.0060206437,
      -0.014546826,
      0.03301174,
      -0.029528514,
      -0.0077858437,
      -0.0041481373,
      0.023596097,
      0.019802164,
      -0.010606719,
      -0.011024358,
      0.013585773,
      0.011697355,
      0.012364076,
      -0.0064521288,
      0.015591791,
      0.01126924,
      -0.0022755018,
      0.0055315136,
      0.025097128,
      0.0122977,
      0.006746295,
      0.011928147,
      0.0058868765,
      -0.009401377,
      0.010854231,
      0.02098489,
      0.019066526,
      0.0066535156,
      0.027752897,
      0.017261392,
      -0.00821799,
      -0.009436221,
      0.007975222,
      -0.008508957,
      0.0053835595,
      0.016062746,
      0.009655035,
      0.002065495,
      0.0103750415,
      0.014515268,
      0.0018926086,
      0.023443962,
      0.041820496,
      0.00256218,
      0.0067725885,
      0.0077420524,
      -0.0048889695,
      -0.022113882,
      -0.011728426,
      -0.0073268013,
      0.0124866655,
      -0.014455686,
      0.005915669,
      -0.0134123415,
      -0.016404474,
      -0.0094248615,
      -0.013009997,
      -0.01531148,
      -0.03125823,
      -0.01647231,
      -0.01832759,
      0.0025230858,
      0.025001265,
      -0.0057365154,
      0.013737877,
      0.034072354,
      -0.013786596,
      0.006679915,
      -0.00072725985,
      0.012298427,
      0.0071633584,
      -0.008576391,
      -0.021604009,
      0.025508408,
      -0.10931999,
      0.012647199,
      0.004987346,
      -0.019353017,
      -0.0088643925,
      0.01416448,
      -0.017548356,
      -0.011661041,
      0.01254159,
      0.013144854,
      0.0074958242,
      0.0009498848,
      0.024376366,
      -0.019609803,
      0.008429447,
      0.000721133,
      0.0000038339354,
      -0.023546195,
      0.03323088,
      0.0064927237,
      -0.008078771,
      -0.007198164,
      -0.011693231,
      -0.019055221,
      0.013655897,
      -0.008902211,
      -0.013254899,
      0.029363766,
      0.005992611,
      -0.013581907,
      -0.0037167226,
      0.03479646,
      0.00096715416,
      -0.020066502,
      -0.0020237397,
      0.016310198,
      0.025190944,
      -0.008434494,
      0.017517658,
      -0.0036924393,
      0.00925393,
      -0.029649682,
      0.02614422,
      0.0244055,
      -0.007102203,
      0.0036215845,
      0.010855915,
      0.011187473,
      -0.01920163,
      0.011807767,
      -0.01952982,
      0.034387607,
      -0.004790192,
      -0.015567065,
      0.0013676056,
      0.023767635,
      0.0029217913,
      0.011056543,
      0.009073778,
      0.030280935,
      -0.012049698,
      -0.005516834,
      0.008067604,
      0.0020246685,
      0.0001345864,
      -0.008312628,
      0.017418273,
      -0.013120667,
      -0.03087197,
      0.0037704175,
      0.007581675,
      -0.0072583603,
      0.0047569787,
      -0.011652214,
      -0.007136301,
      0.0007216327,
      0.021496492,
      -0.018873706,
      -0.027645422,
      0.03006344,
      0.024650158,
      -0.010565989,
      -0.01446561,
      0.0050538857,
      0.013508285,
      0.01206639,
      -0.0027300448,
      -0.010580575,
      0.00009421378,
      -0.012738065,
      0.028160764,
      0.015052701,
      -0.02795122,
      0.016341923,
      -0.03403346,
      -0.012291725,
      -0.02994248,
      -0.007742393,
      0.000101462596,
      0.002218686,
      -0.019898063,
      -0.0040397113,
      -0.020955797,
      -0.01200704,
      -0.008209548,
      0.004602467,
      -0.008005418,
      -0.0203317,
      0.0046697576,
      -0.02481911,
      0.0008913063,
      -0.0044954387,
      -0.006500884,
      -0.010069123,
      -0.015651457,
      -0.002361037,
      -0.010081491,
      0.001623355,
      0.0035200957,
      -0.02367814,
      0.006086527,
      -0.004471934,
      0.008956918,
      0.010062273,
      0.0065579982,
      0.013799661,
      -0.020161869,
      0.012777192,
      -0.015540352,
      -0.030549346,
      -0.047448054,
      0.021931903,
      -0.009980201,
      -0.007087494,
      -0.009531836,
      -0.020404994,
      0.017970063,
      0.02884309,
      0.016346978,
      0.0014782547,
      -0.00853284,
      -0.0048001357,
      0.00784634,
      -0.008081553,
      -0.019983323,
      0.021508053,
      -0.018459765,
      -0.013040396,
      0.0042479923,
      -0.02114815,
      -0.019739946,
      -0.02420784,
      -0.007472461,
      -0.023399416,
      -0.0009953957,
      0.0047659404,
      0.00823947,
      -0.020204792,
      -0.013012633,
      -0.0075935572,
      -0.008825835,
      -0.001817414,
      -0.004168006,
      -0.007250549,
      0.013845756,
      -0.0019807091,
      -0.008089801,
      -0.00859241,
      -0.006295691,
      0.008710066,
      -0.0012836352,
      -0.010434169,
      -0.042789046,
      -0.01882724,
      0.017454935,
      0.0065374873,
      -0.011501971,
      -0.010072329,
      0.023310212,
      -0.0098254215,
      0.011298816,
      0.010117507,
      -0.014099265,
      0.015497633,
      0.0128733665,
      0.009749704,
      0.01798706,
      -0.0015824051,
      -0.0384129,
      0.007355853,
      0.011128614,
      -0.02744359,
      0.01957991,
      0.01122021,
      -0.007549398,
      0.0274216,
      -0.00045660962,
      -0.004441179,
      -0.019583397,
      0.008355169,
      0.016921734,
      0.0045380103,
      0.011973502,
      -0.0038347095,
      0.0120776575,
      -0.01676568,
      -0.012169749,
      -0.004043442,
      0.009640306,
      0.030344654,
      -0.006268285,
      -0.0048473757,
      -0.009150159,
      0.0012697444,
      0.02322121,
      0.026389917,
      -0.021177532,
      0.017644437,
      -0.021190418,
      -0.0050086873,
      0.00043033497,
      -0.006967706,
      -0.013277468,
      -0.0074876854,
      -0.0064969445,
      0.012549389,
      -0.008999163,
      -0.009752111,
      0.005397764,
      -0.0031847747,
      -0.019652072,
      -0.009190124,
      -0.028452553,
      0.012693458,
      -0.026329255,
      -0.01106351,
      0.00997575,
      0.0071535506,
      -0.008828361,
      0.018976789,
      -0.019918256,
      -0.008822796,
      -0.013980553,
      -0.003598873,
      0.013830222,
      -0.014026096,
      0.0014640685,
      0.0050241086,
      -0.007589858,
      -0.0020952558,
      0.00507118,
      0.0033301043,
      -0.00035703563,
      -0.0049031326,
      0.004427687,
      0.024062742,
      -0.0020684425,
      -0.0040905797,
      0.010865869,
      -0.01181839,
      0.01974999,
      0.010340984,
      0.0066215517,
      0.0008236057,
      -0.008143584,
      -0.023540497,
      -0.038751695,
      -0.007538887,
      0.007761382,
      -0.13187754,
      0.0073510185,
      0.00645984,
      0.002324459,
      -0.017271731,
      -0.0248908,
      0.0081406385,
      -0.022166345,
      -0.01846041,
      -0.00382567,
      0.02963892,
      -0.011899008,
      0.0017501132,
      -0.020080782,
      -0.012742473,
      -0.014914882,
      0.02373703,
      0.01994989,
      0.025465475,
      0.0013121624,
      -0.014865798,
      0.009366687,
      0.004287764,
      -0.0030703233,
      -0.007514835,
      -0.010900134,
      0.011626092,
      0.0012680513,
      -0.000498268,
      0.0021998985,
      -0.023303326,
      0.0063197725,
      -0.019175228,
      0.019603707,
      0.022065181,
      -0.017133953,
      -0.019205613,
      0.00021407526,
      0.026467493,
      0.016340803,
      -0.012149906,
      -0.0026195475,
      0.015133307,
      0.005885731,
      0.0016909745,
      0.039651014,
      0.016561417,
      -0.014362869,
      -0.012273673,
      0.018543934,
      -0.035619184,
      -0.015430424,
      -0.025511121,
      -0.027930759,
      -0.010161118,
      0.0083865505,
      0.008057946,
      -0.009124993,
      -0.0050161113,
      -0.02807491,
      0.012293395,
      -0.005614199,
      0.01584864,
      0.024240548,
      -0.0027832899,
      0.010914291,
      0.033157073,
      -0.0013973723,
      0.0070692287,
      -0.017540295,
      0.0016534375,
      -0.003029903,
      -0.0012247604,
      0.008118227,
      0.015379872,
      -0.0029251191,
      0.022740183,
      0.022237893,
      0.0018753387,
      0.023041556,
      -0.021874348,
      -0.003110236,
      -0.06087839,
      -0.011028105,
      0.018461037,
      0.0073158047,
      0.008996638,
      0.017789483,
      -0.019135917,
      -0.005460583,
      0.0017916503,
      -0.0057653193,
      -0.015219398,
      0.0033662736,
      0.018654002,
      0.016017739,
      -0.008434718,
      -0.009227992,
      -0.009131089,
      -0.021069944,
      -0.03475412,
      0.023333553,
      -0.020197637,
      0.017245792,
      0.01097493,
      -0.015458672,
      0.000049788116,
      0.009892181,
      -0.011641005,
      -0.010953165,
      -0.0021183612,
      0.008554431,
      -0.0021032838,
      -0.16178294,
      -0.023417545,
      0.01036202,
      0.010501126,
      -0.0028857277,
      -0.008509855,
      -0.010312704,
      -0.0026105188,
      -0.003671721,
      0.0008892465,
      0.008577382,
      -0.0035410682,
      -0.0041899234,
      -0.0016581028,
      0.033235595,
      0.13009869,
      -0.011318461,
      0.009080417,
      -0.02003283,
      0.023435405,
      0.004818992,
      -0.01840673,
      -0.02085164,
      0.0027097745,
      -0.026077362,
      -0.022840727,
      0.019055828,
      -0.022838382,
      0.0049414695,
      0.016897019,
      -0.0045031616,
      0.0027005211,
      0.0016892288,
      0.021667425,
      -0.0029110496,
      -0.019376138,
      -0.01260072,
      0.011547867,
      0.000085452775,
      0.013957189,
      0.015932688,
      -0.000607394,
      -0.008757151,
      0.012441978,
      0.0005252565,
      0.0022946086,
      -0.029095585,
      -0.02871144,
      0.011996843,
      0.0022782867,
      -0.007702552,
      -0.06357229,
      -0.0017125295,
      -0.022850914,
      -0.0070007057,
      0.029418519,
      0.0054916223,
      0.009573162,
      0.009877403,
      0.012594788,
      -0.023685185,
      -0.0073864665,
      0.0059423693,
      0.0020624488,
      0.03217543,
      0.014475157,
      0.017151276,
      0.0030104655,
      0.0077230297,
      -0.008184169,
      0.0038732765,
      0.0099637415,
      -0.006381747,
      0.012316002,
      -0.008456833,
      -0.005021141,
      -0.0075294804,
      0.020339815,
      0.008366134,
      -0.006151562,
      -0.0051463526,
      -0.004525329,
      -0.00066364376,
      -0.016834607,
      0.006741603,
      0.0073092966,
      -0.014881592,
      0.010274473,
      0.012454402,
      0.0062689716,
      0.018412145,
      -0.013542023,
      -0.002288272,
      0.00995174,
      0.008665045,
      0.016895369,
      0.0020773953,
      0.00075527694,
      0.030413296,
      -0.017499167,
      0.009121629,
      -0.024228346,
      -0.019939316,
      -0.030381005,
      0.022625834,
      0.013882777,
      0.0013629,
      0.045253202,
      -0.008697405,
      -0.018072987
    ]
  },
  {
    "id": "genai_cohort_python_03_Batch_chai_preparation_vtt",
    "content": "All right, welcome to another challenge that we are going to do in this one. And this will sound a little bit similar because sometimes reputation is also quite necessary. So let's see this problem. A, chai shop makes T in batches every minutes. Now don't pay too much attention. minutes. We are not going to be stopping our program for minutes for that. We just want to simulate that. You want to simulate four batches. So the point is, the important part is that we want to simulate four batches. The task is pretty simple. Use the range method to simulate the batch numbers and prepare the chai for the batch. The whole point that I want you to see in this entire problem is we want to simulate four batches. So use the range for simulating the four batches and then print the number for each batch. It's a pretty similar problem that we did in the token dispenser as well. So this is kind of a reputation, but this is okay. Sometimes reputation is actually good. So let's call this one as underscore. And this is, batch chai. So I'll just move my keyboard a little. Batch chai py of course. There we go. And, now let's try to use a simple for loop for batching this. Now for is a keyword. Then we can name the variable. Let's call this as batch, but feel free to call this whatever you like then in and provide your range or anything like that. And again, we'll close our AI so that we can actually discuss these things and then simply go with the range. Now you want to simulate range of how many numbers? So I want to simulate a range of four batches. Now we have couple of options of how this actually works. Range can have a start value and can have end value or just have an end value as well. We'll start with the value of one because I want to start the range not from the zero but from a starting number. And then I'll go till As I mentioned, range is non inclusive in the programming languages. So five is not going to be inclusive. We'll get the range till the four, put up a colon sign, hit the enter, and this is where we are right now. Let's go ahead and print the values. Pretty easy. Use the formatted strings and put up a message, something like preparing, prepare ring chai for batch. And then we'll provide the batch number. So we'll use a pound sign or a hash sign, whatever you want to call this. We'll inject the curly braces to get this variable and the variable will automatically increase. We don't have to do anything. That is it. Pretty simple example and pretty nice one. Let's open our integrated terminal just right here and use Python. And for this we will open up the file. There we go. And notice here it it's preparing exactly for four batches and this is exactly what we wanted. So pretty simple problem. But now that we have this problem, I am super happy that we did it together. It will give you a good reputation as well as more confidence in the loop. Now let's move on to the next video and take down the next challenge.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 Batch chai preparation.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/03 Batch chai preparation.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.015337231,
      0.025685288,
      0.03427011,
      -0.07672808,
      -0.020435879,
      0.0023424288,
      0.0059594503,
      0.02300795,
      -0.0005996438,
      0.00693035,
      0.0008900499,
      -0.022802861,
      0.006065658,
      0.036392283,
      0.11876538,
      0.014633326,
      -0.0066145803,
      -0.031426266,
      0.0038261905,
      -0.020957325,
      -0.021470964,
      -0.008705846,
      0.021830687,
      -0.011143192,
      0.0074656,
      -0.0032936572,
      0.0064478084,
      0.0134593295,
      0.025413638,
      -0.009285027,
      -0.028631799,
      0.002751632,
      0.027687522,
      0.02571979,
      -0.01750763,
      0.023199743,
      0.021226475,
      -0.0033257608,
      0.0014001972,
      -0.0025100457,
      -0.0046523893,
      0.0012853093,
      0.004839115,
      -0.0147056645,
      0.0077811126,
      -0.026159314,
      -0.025392666,
      -0.034074403,
      0.01820026,
      0.011711886,
      0.00839141,
      -0.0073133507,
      -0.017867802,
      -0.16657,
      0.011885567,
      -0.0021192257,
      0.00028629805,
      0.015997715,
      0.025164554,
      -0.010706089,
      -0.014584064,
      -0.00007861562,
      -0.04482582,
      0.0010519469,
      -0.014482798,
      -0.033363264,
      0.012865496,
      0.0053069084,
      -0.0068940464,
      -0.014736492,
      0.018804137,
      0.0094517935,
      -0.017660093,
      -0.007563354,
      -0.016599942,
      -0.026418772,
      0.000020603256,
      -0.0076705553,
      -0.0071805306,
      0.013689858,
      0.0015837313,
      -0.016824296,
      -0.0011755048,
      -0.0022909977,
      0.015243767,
      -0.006583847,
      -0.020428522,
      -0.020085458,
      0.0029040757,
      -0.018305698,
      -0.039679766,
      0.01606652,
      -0.0050372193,
      -0.00046772414,
      -0.010845388,
      0.0064266976,
      -0.0036466469,
      0.00396616,
      -0.020894356,
      -0.004531933,
      0.009100844,
      -0.008230772,
      -0.015188733,
      0.005454253,
      0.010669452,
      -0.005513811,
      -0.0047637653,
      -0.027699836,
      0.010067096,
      -0.0004879312,
      -0.008981742,
      -0.0015089667,
      0.01868887,
      0.021628933,
      0.014181225,
      -0.17914905,
      0.02455913,
      0.003444819,
      -0.018382534,
      -0.0032510078,
      -0.010048761,
      -0.00047596445,
      0.008509299,
      0.022716392,
      -0.008509688,
      0.022335574,
      0.0021740058,
      0.028231068,
      0.013487899,
      0.010167913,
      -0.014741434,
      -0.014851673,
      0.007441987,
      0.0061357683,
      -0.011755902,
      0.013072883,
      -0.0064364527,
      -0.003282907,
      -0.013024581,
      -0.003358547,
      -0.0136381695,
      0.025562102,
      -0.0071487743,
      0.008991843,
      0.00007917799,
      -0.011547383,
      -0.014173929,
      0.027736887,
      -0.016034096,
      -0.004091523,
      0.01006968,
      -0.033288006,
      0.0038717594,
      -0.007946811,
      0.03350273,
      -0.046537872,
      -0.011597227,
      -0.00084287,
      -0.013922484,
      0.012098296,
      0.0148549555,
      0.0010139376,
      0.0029726957,
      0.006050971,
      -0.00031759695,
      0.012836623,
      0.0029088755,
      0.01675169,
      0.0044707293,
      -0.0048355847,
      -0.0035975778,
      -0.0118293315,
      -0.0072278883,
      -0.01524725,
      0.008527711,
      0.0036146303,
      0.0065144096,
      -0.006576439,
      0.013207758,
      -0.007044481,
      0.009595779,
      -0.020440187,
      -0.005832656,
      -0.00394581,
      0.011677649,
      -0.012185149,
      -0.019298984,
      0.020690389,
      0.022975164,
      -0.004686379,
      -0.015256759,
      -0.00067002996,
      0.027194493,
      -0.00015230133,
      -0.0011223113,
      -0.010144177,
      -0.012014725,
      -0.012539729,
      0.000054553646,
      0.0024944323,
      0.00549656,
      -0.0063119167,
      -0.011409713,
      -0.0027501206,
      0.024014184,
      -0.015549755,
      -0.0023834687,
      0.006834889,
      0.015913852,
      0.0187839,
      -0.008166867,
      -0.0064845677,
      0.007645034,
      0.009412261,
      0.007945746,
      -0.00064950733,
      0.021662295,
      -0.0040970775,
      -0.0003150621,
      -0.0015405301,
      0.03357429,
      0.020942708,
      0.0075976164,
      0.0009354449,
      -0.0011052785,
      -0.026898207,
      0.0069994866,
      0.02187787,
      0.0015635237,
      0.00725595,
      0.03994421,
      0.018236369,
      -0.016598867,
      -0.0054306868,
      0.011745733,
      -0.015398457,
      -0.013835291,
      0.012758695,
      0.01727038,
      -0.009882612,
      -0.007645098,
      0.011362006,
      0.014285745,
      0.0088696405,
      0.04041567,
      0.00096804026,
      0.008263886,
      0.012325583,
      0.00027235562,
      -0.017611537,
      -0.0020822382,
      -0.010528834,
      0.012125776,
      -0.015172834,
      0.007279057,
      -0.008078713,
      -0.0006668788,
      -0.01722622,
      -0.013050618,
      -0.0105885845,
      -0.013819521,
      0.0072447495,
      -0.011458866,
      -0.020155504,
      0.0033967209,
      -0.0056676907,
      0.004372262,
      0.033296525,
      -0.011819512,
      0.019760732,
      0.006296159,
      0.015817137,
      0.01582442,
      -0.002948084,
      -0.037542813,
      0.0276626,
      -0.11812239,
      0.015362004,
      -0.0063478933,
      -0.011435,
      0.0048901746,
      0.011730705,
      -0.013040191,
      -0.017145572,
      -0.0046196906,
      0.005824082,
      -0.0007198476,
      -0.0037094268,
      0.015625333,
      -0.027281819,
      0.0051566698,
      -0.00050449785,
      -0.0026754923,
      -0.023745833,
      0.04042867,
      0.004546044,
      -0.006631181,
      -0.007050405,
      -0.01468519,
      -0.008864751,
      0.006216238,
      -0.011898932,
      -0.016666632,
      0.030773478,
      -0.0037427528,
      -0.005293555,
      -0.0052081905,
      0.03191221,
      0.005509907,
      -0.017785642,
      0.0005767705,
      0.01727549,
      0.029805213,
      -0.016586384,
      0.023253346,
      0.0058462266,
      0.02130294,
      -0.032856964,
      0.02196072,
      0.038619887,
      0.0018499023,
      0.016810242,
      0.0125594335,
      0.011054988,
      -0.020586563,
      0.00043892843,
      -0.003524913,
      0.029605327,
      -0.00642661,
      -0.015087304,
      0.009171814,
      0.017766703,
      0.0053301984,
      0.0016492425,
      0.0038786232,
      0.021041522,
      0.00096731004,
      0.011890421,
      0.008901343,
      0.006911891,
      0.011302203,
      -0.013456104,
      0.018403072,
      -0.0073443768,
      -0.016911471,
      0.014817841,
      -0.0037019306,
      -0.0027097494,
      0.009298306,
      0.00067655876,
      -0.00949278,
      0.005543367,
      0.033416297,
      -0.026499184,
      -0.036480103,
      0.038636144,
      0.025375746,
      -0.022407006,
      -0.0013136485,
      0.0046002096,
      -0.0027590992,
      -0.004473266,
      0.0022628452,
      -0.010007377,
      -0.0003077821,
      -0.008660614,
      0.023697663,
      0.010970777,
      -0.015633265,
      0.0030603772,
      -0.037545074,
      0.004989609,
      -0.030134931,
      -0.0011625726,
      -0.005587221,
      0.008487877,
      -0.019918889,
      -0.007413234,
      -0.0136655625,
      -0.024095371,
      -0.0044653895,
      0.0031157867,
      -0.010106072,
      -0.022370165,
      0.02094584,
      -0.021188082,
      -0.000105991945,
      -0.002063419,
      -0.008334954,
      -0.013625296,
      -0.014157514,
      0.000018018844,
      0.00001843726,
      0.003820792,
      0.00526938,
      -0.0066806935,
      -0.008206233,
      -0.004754253,
      -0.011237326,
      -0.006584605,
      0.0034365337,
      0.017427048,
      -0.014414437,
      0.0034935973,
      -0.02321556,
      -0.017849041,
      -0.036995735,
      0.0154114505,
      -0.0068965484,
      -0.006734712,
      0.0006015775,
      -0.015676036,
      0.0159924,
      0.026419437,
      0.011235208,
      -0.00075556093,
      0.00067659846,
      0.005877615,
      0.002702692,
      -0.00971561,
      -0.019431958,
      0.025144706,
      -0.009791389,
      -0.0017341408,
      0.019420609,
      -0.0354006,
      -0.006380234,
      -0.028545996,
      -0.008523482,
      -0.0054478766,
      -0.0018645639,
      0.0010469087,
      -0.00018797026,
      -0.008522713,
      -0.0070817634,
      -0.017815555,
      -0.021632737,
      -0.011202894,
      0.0013458694,
      -0.024422916,
      0.030322319,
      -0.014514135,
      -0.0015635105,
      -0.009457124,
      -0.0078828875,
      -0.004054885,
      -0.015427832,
      -0.022099804,
      -0.029083095,
      -0.019362245,
      0.0035334462,
      0.018481828,
      -0.002460058,
      -0.0034928364,
      0.027922824,
      0.0038746442,
      -0.001278948,
      0.015121161,
      -0.0050569763,
      0.018325333,
      0.0071161543,
      0.005663975,
      0.005142201,
      -0.014657102,
      -0.041338474,
      0.008748898,
      0.011689992,
      -0.031978056,
      0.008237036,
      0.018148929,
      -0.0001650273,
      0.022209749,
      0.015153843,
      0.0006842924,
      -0.013230129,
      0.013914976,
      0.0066312365,
      -0.0006234993,
      0.0059443824,
      0.008618142,
      0.004256116,
      -0.0016857089,
      -0.017076975,
      -0.010166898,
      0.0065551596,
      0.023284325,
      -0.022485647,
      -0.006656783,
      -0.013968811,
      0.004082127,
      0.034952093,
      0.023068849,
      -0.01678212,
      0.009340321,
      0.0029286398,
      0.0032312383,
      0.00088818104,
      -0.010385938,
      -0.0053794063,
      -0.015492515,
      0.011460119,
      -0.015725965,
      -0.0025801617,
      -0.0010090064,
      -0.0029054768,
      0.012303003,
      -0.005773485,
      -0.008414253,
      -0.014534824,
      0.01975389,
      -0.025081312,
      -0.01544415,
      0.013895741,
      0.019436372,
      -0.01728446,
      0.021350766,
      -0.013486729,
      -0.011521329,
      -0.015932657,
      -0.00023249992,
      0.016104355,
      -0.0057918765,
      -0.0029383022,
      -0.004703445,
      -0.008878573,
      -0.0040186616,
      -0.0037298882,
      0.0018380139,
      0.0074982285,
      0.0028491912,
      0.0031932092,
      0.026533006,
      0.00126203,
      0.00004279623,
      0.008114515,
      -0.004691682,
      0.0060861995,
      0.008375387,
      0.0126066515,
      0.016999457,
      -0.007416779,
      -0.02602722,
      -0.010752896,
      0.0033826483,
      -0.0031064746,
      -0.14465475,
      0.01338126,
      -0.007132303,
      0.012905115,
      -0.017637124,
      -0.021428168,
      0.009575525,
      -0.03960859,
      -0.024376076,
      -0.010825563,
      0.021092737,
      -0.004520786,
      0.015108054,
      -0.015606465,
      -0.004621163,
      -0.012216394,
      0.025791578,
      0.023165707,
      0.026647937,
      -0.0026198402,
      -0.008882109,
      0.005052289,
      0.011371852,
      -0.010794836,
      -0.013527248,
      -0.0023270417,
      0.019798819,
      0.016855378,
      -0.012094764,
      -0.0045964615,
      -0.0061387843,
      -0.008889561,
      -0.00946713,
      0.017059198,
      0.016479455,
      -0.012927003,
      0.0032383178,
      0.009012661,
      0.0278729,
      0.006361224,
      -0.022282805,
      0.0024866527,
      0.020217888,
      -0.0054499255,
      -0.010452402,
      0.025764255,
      0.022281528,
      -0.018626718,
      -0.010728425,
      0.011469129,
      -0.023984447,
      -0.009479428,
      -0.028011523,
      -0.034009792,
      -0.017037686,
      0.003989944,
      0.0016081808,
      0.0011987187,
      -0.010890212,
      -0.029523602,
      0.012335649,
      -0.0030121554,
      0.0045200796,
      0.028271992,
      -0.00875841,
      0.015335524,
      0.023837974,
      -0.004616574,
      0.00095063983,
      -0.008662522,
      0.00014512418,
      -0.011629275,
      0.00849529,
      0.012311654,
      0.0019327699,
      -0.01074328,
      0.017810065,
      0.015018599,
      -0.0030295786,
      0.013198651,
      -0.009003025,
      0.0026957989,
      -0.05733978,
      -0.0059556426,
      0.015991172,
      0.01126091,
      -0.0038430335,
      0.008621985,
      -0.022539744,
      -0.0029125132,
      0.010949725,
      -0.004441107,
      -0.02529037,
      0.015385613,
      0.02091389,
      0.028869515,
      -0.01647077,
      -0.0018119249,
      -0.008807876,
      -0.011219546,
      -0.03182169,
      0.007238626,
      -0.016018748,
      0.0026728183,
      0.0152906915,
      -0.0069343178,
      -0.008053456,
      0.018206228,
      -0.008247736,
      -0.0006299814,
      0.004596584,
      0.0020032728,
      0.000672535,
      -0.16967666,
      -0.021810165,
      0.016940594,
      0.015067194,
      -0.0007209179,
      -0.011713898,
      -0.013177553,
      0.0019987202,
      -0.008205583,
      -0.004914217,
      0.008675645,
      -0.0044563124,
      -0.0029207992,
      0.0035437318,
      0.041763168,
      0.12830026,
      -0.012732473,
      0.020473635,
      -0.025302825,
      0.007163033,
      0.010668623,
      -0.014113772,
      -0.03441007,
      -0.008351535,
      -0.02679165,
      -0.010061791,
      0.02587842,
      -0.014271028,
      -0.006772309,
      0.0119940415,
      0.006684502,
      -0.0026959786,
      0.008614009,
      0.022338077,
      0.0024124528,
      -0.0036846194,
      -0.011834508,
      0.013104336,
      -0.0015038489,
      0.00017009588,
      0.02216696,
      0.0035947263,
      -0.011079791,
      0.0066881017,
      -0.0002559443,
      -0.010536247,
      -0.024801869,
      -0.017436787,
      0.0077518066,
      -0.014342497,
      -0.015808187,
      -0.046422288,
      0.00056259445,
      -0.020523388,
      -0.0061490373,
      0.018127425,
      0.015370918,
      0.00959831,
      0.010368609,
      0.0052096047,
      -0.0017380962,
      -0.0050454508,
      -0.0027602715,
      0.0049159103,
      0.013154994,
      0.011416026,
      0.006479978,
      -0.00097143126,
      0.0028740137,
      -0.0051484522,
      0.016053213,
      0.014112106,
      0.01113272,
      0.029091137,
      -0.0014797945,
      -0.007831823,
      0.0016475489,
      0.032756235,
      0.012612502,
      0.0046479343,
      0.004045238,
      -0.0028629245,
      0.01145379,
      -0.0069988957,
      0.01970441,
      -0.0008154172,
      -0.022609504,
      -0.00019287984,
      0.0011867746,
      0.0004738546,
      0.013594696,
      -0.007864174,
      0.009365458,
      0.0035435269,
      0.008559158,
      0.009364703,
      0.006622528,
      -0.0013883444,
      0.02485146,
      -0.01802808,
      -0.0013801468,
      -0.013647271,
      -0.026297476,
      -0.031434305,
      0.01506082,
      0.021107689,
      0.0114323255,
      0.03353189,
      -0.0049433056,
      0.0008956868
    ]
  },
  {
    "id": "genai_cohort_python_04_Looping_through_list___Orders_name_vtt",
    "content": "All right, so moving on, this is another interesting project and I'm pretty sure you're going to love this. Let's read the problem statement. I love to introduce you with the problem statements because this is actually you'll be doing in the real world as well. You received a list of names for chai orders, and the goal is to print out the order queue. Your task is to use a list of names and print the order ready for whatever the name is. So, so far, whatever we have seen or whatever we have done, was just on the range. This was the range, this was the range. But now we want to work on something different. So let's go ahead and create a new file. Call this one as 03, _t order or orders py and the first thing that we have to do here is to create a list which has, names in it. So let's just call this one as orders, which will be a list just like this. It will have a lot of name. I'll go ahead and add my name first. And then let's just say we have other name as well. Let's just say Aman is one of another name and another, one is, let's just say Becky. Another one. Let's just say we have Carlos. So now we want to loop through. And again, keep in mind that you have no idea how many names are in this order. There could be four, there could be four, zero, or there could be No idea. So in such case, just like we have used the range, we can simply go ahead and create a, loop using the for, use the for keyword, provide a, variable. It could be name, it could be my name, it could be your name, whatever you want to go with this, then in and then provide just like the range we are providing, we can also provide a list which is also iteratable. Yeah, this is the word. You'll see quite a lot. A lot of objects in the Python are iteratable. That means you can loop through them. So I'll just go ahead and put up the orders just like this and I'll just go say print just like this and I will say order ready for. And then simply go ahead and put up this name automatically. This loop will go to the list and first time on the first loop this will be the value. On the second loop, this will be the value. On the third loop this will be the value, and on the fourth loop this is going to be the value. So this is it. Super easy. Told you. Python is really really easy if you work just like that. So let's just say I want to run this one. And we can see order is ready for Hitesh. Next time, it's ready for Aman. Next time, it's ready for Becky and Carlos. So pretty good, pretty fun. And we can see we have actually done this task as well. That is it for this video. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 Looping through list - Orders name.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/04 Looping through list - Orders name.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.00014986505,
      0.017815191,
      0.034940228,
      -0.04942339,
      -0.011835518,
      -0.012664507,
      -0.012163729,
      0.019176757,
      -0.005746124,
      -0.0066627283,
      0.0058439607,
      -0.026229234,
      -0.005330268,
      0.014412351,
      0.12810397,
      -0.016005917,
      -0.003389057,
      -0.029226385,
      -0.01925511,
      -0.010537398,
      -0.017374171,
      0.0028505553,
      0.0150013305,
      -0.0130521655,
      0.021425428,
      -0.0003684134,
      0.016043367,
      0.012149477,
      0.029903058,
      -0.014430631,
      -0.024790036,
      0.005290551,
      -0.0040053832,
      0.015464996,
      -0.001357999,
      0.022970028,
      0.022839759,
      -0.0048897206,
      -0.029713707,
      0.016134012,
      -0.008695495,
      -0.00079495006,
      0.0038383878,
      -0.026852474,
      0.009223207,
      -0.024320766,
      0.0021112743,
      -0.040607624,
      -0.00000514847,
      0.02650334,
      0.008109698,
      -0.0066328724,
      0.000013698871,
      -0.17099264,
      0.018308334,
      0.0030751524,
      0.00249153,
      -0.0029137672,
      0.01453885,
      -0.00060377584,
      -0.009188311,
      0.0155767165,
      -0.033985283,
      -0.0073126205,
      -0.0067532496,
      -0.028663617,
      0.019688344,
      0.0009912351,
      0.0028442969,
      -0.0073904237,
      0.0152759515,
      0.019976025,
      -0.0051310896,
      -0.010870001,
      -0.01747082,
      -0.03216353,
      0.0033031243,
      -0.010292265,
      -0.0038125499,
      0.014692222,
      0.0061059236,
      -0.008089948,
      -0.0036677904,
      0.003176553,
      0.016478918,
      -0.012271951,
      -0.019794947,
      -0.0054082116,
      -0.0068880995,
      -0.006630831,
      -0.043675564,
      0.013755981,
      -0.016823051,
      -0.0050926805,
      -0.010956374,
      -0.002542632,
      -0.004626137,
      0.003913065,
      -0.019658828,
      -0.00959954,
      0.0020213907,
      -0.0019070273,
      -0.03216822,
      0.001543429,
      -0.00399027,
      -0.018421268,
      -0.00889045,
      -0.029231282,
      -0.004735149,
      -0.018286506,
      -0.0013717123,
      -0.004533406,
      0.019435696,
      0.02415748,
      -0.006116195,
      -0.16375402,
      0.010714186,
      0.008484039,
      -0.023537964,
      -0.0040381616,
      -0.013727086,
      0.0101144565,
      -0.0062683295,
      0.034241937,
      -0.02178874,
      0.011348532,
      -0.009702109,
      0.02912589,
      0.00789822,
      -0.0028283312,
      -0.022797247,
      -0.022483617,
      0.00625758,
      0.008158398,
      -0.021255545,
      0.011119393,
      -0.021804579,
      -0.008857921,
      -0.0127736125,
      -0.017852502,
      -0.017106974,
      0.029158343,
      -0.0015486709,
      0.030714301,
      0.0066172956,
      -0.012076133,
      -0.0189496,
      0.010558853,
      -0.02111774,
      -0.020072196,
      0.016387507,
      -0.00902093,
      0.005598156,
      0.0031909193,
      0.03305857,
      -0.027414601,
      -0.013479908,
      0.0056368755,
      -0.0066623096,
      -0.0028975594,
      0.0031890564,
      -0.0000751687,
      0.016329927,
      0.0017221773,
      -0.0019256945,
      0.015987325,
      0.0047508194,
      0.00926594,
      0.009028295,
      -0.0018885051,
      0.0016720224,
      -0.013022538,
      0.0009458102,
      -0.012670172,
      0.0039144894,
      0.00034533718,
      -0.00095236674,
      -0.014206272,
      0.02953492,
      -0.023034042,
      -0.0017804021,
      -0.032891303,
      0.010464478,
      0.012660222,
      0.015914153,
      -0.011708832,
      -0.015885029,
      0.011995953,
      -0.009333627,
      0.025475444,
      -0.021329498,
      0.0031860494,
      0.021429198,
      0.001983746,
      -0.0054583056,
      -0.001475013,
      -0.021910422,
      -0.016019128,
      -0.0027596692,
      0.00834027,
      0.018035654,
      -0.00035365546,
      -0.007651518,
      -0.013969632,
      0.031249288,
      -0.038023874,
      0.005941841,
      0.0033023201,
      0.025714723,
      0.020481706,
      -0.0060208817,
      -0.019000037,
      0.013977497,
      -0.0034748353,
      0.02118088,
      0.011637995,
      0.020573156,
      0.004328693,
      0.0022236574,
      0.0059576817,
      0.014658668,
      0.0072019654,
      0.02163112,
      0.011349762,
      0.0031567332,
      0.0023004941,
      0.0020596469,
      0.02965323,
      0.004320708,
      0.00090207084,
      0.04533234,
      0.004669701,
      -0.0118713,
      -0.012609475,
      0.00045710013,
      -0.011252486,
      0.013499846,
      0.032106332,
      0.010824077,
      -0.008176823,
      0.005678433,
      0.01652763,
      0.011089315,
      -0.00271071,
      0.029477686,
      -0.016510807,
      0.0030334755,
      -0.0076286485,
      -0.0015192031,
      -0.023448508,
      0.0018329934,
      -0.018475931,
      -0.0019079658,
      -0.01198852,
      0.0088075735,
      -0.014649366,
      -0.011468425,
      -0.0071402723,
      -0.009049794,
      -0.024106093,
      -0.012263034,
      -0.004557627,
      -0.018418103,
      -0.00021853321,
      0.030678011,
      -0.002726454,
      0.010900315,
      0.01591597,
      -0.0018691156,
      0.016627826,
      -0.008768019,
      0.007487633,
      0.010308119,
      0.0044638705,
      -0.022742657,
      0.013085821,
      -0.11396429,
      0.018270738,
      0.009547905,
      -0.017487375,
      0.0038580177,
      0.013878544,
      -0.02732329,
      0.0054170187,
      0.016400853,
      0.017392078,
      0.026841652,
      -0.018140947,
      0.019627232,
      -0.028588526,
      -0.0066599976,
      0.0045283563,
      -0.0070990883,
      -0.018275429,
      0.043296162,
      0.0027216882,
      0.009071288,
      -0.004950793,
      0.0038970225,
      -0.0069091413,
      0.020007582,
      -0.0076460345,
      -0.0089906035,
      0.022305097,
      0.0032054938,
      -0.011000605,
      -0.023089252,
      0.022532567,
      -0.0071589267,
      -0.017373536,
      -0.003498445,
      0.015035348,
      0.016880238,
      -0.008059479,
      0.0059683467,
      -0.0040526786,
      0.015668344,
      -0.022835996,
      0.027030088,
      0.039780717,
      -0.008793165,
      0.012378831,
      0.011139996,
      0.016079322,
      -0.010126127,
      0.0138958795,
      -0.012877987,
      0.028298799,
      0.01328165,
      -0.02548518,
      0.0006005886,
      0.003944275,
      -0.0024113117,
      0.0023609926,
      0.018644484,
      0.021634582,
      -0.008995871,
      0.003836402,
      0.0011765502,
      0.0016172938,
      -0.004554533,
      -0.0025186187,
      -0.004653841,
      -0.0067122187,
      -0.019481858,
      0.0065718545,
      -0.0003644773,
      -0.009601225,
      0.008832305,
      -0.014534504,
      -0.0037569108,
      0.015269183,
      0.033730805,
      -0.024349367,
      -0.01918696,
      0.03187439,
      0.03214125,
      -0.01137927,
      0.003999018,
      0.019964974,
      0.0014818097,
      0.013542063,
      -0.004669846,
      0.006796021,
      0.010608316,
      -0.021250183,
      0.017013246,
      0.0071051233,
      -0.008794884,
      0.019940458,
      -0.029964563,
      -0.006911147,
      -0.026083026,
      -0.002411937,
      -0.0063857706,
      0.011192313,
      -0.00816647,
      0.01687882,
      -0.021109153,
      -0.0014630157,
      -0.006724945,
      -0.005602897,
      -0.023365263,
      -0.017962418,
      0.009890158,
      -0.03155389,
      -0.009468739,
      -0.010413485,
      -0.01745594,
      -0.011034912,
      -0.0022868242,
      0.023167223,
      0.009433289,
      -0.011175545,
      -0.0036664726,
      -0.022304837,
      -0.015006781,
      -0.008114459,
      0.0023974362,
      -0.0030235946,
      0.0051851156,
      0.014662345,
      -0.0149827385,
      0.0049858675,
      -0.018426146,
      -0.02851435,
      -0.034180082,
      0.02011299,
      -0.0028896143,
      -0.012130585,
      0.0074562645,
      -0.021224989,
      0.022959126,
      0.03174627,
      0.017464478,
      0.009747391,
      -0.019219045,
      0.005615917,
      0.009005886,
      0.007844348,
      -0.030841384,
      0.010010188,
      -0.020499824,
      0.0041607446,
      0.011286309,
      -0.03559575,
      -0.018745381,
      -0.016177773,
      -0.0038494035,
      -0.013331622,
      0.01142047,
      0.00084230735,
      -0.0073944917,
      -0.019813232,
      -0.019984193,
      -0.02028524,
      0.0023650434,
      -0.004580393,
      0.00074832747,
      -0.019721983,
      0.018648345,
      -0.005174314,
      0.0021072472,
      -0.0020476505,
      -0.00036785286,
      -0.008116455,
      -0.011310675,
      -0.00554359,
      -0.031570062,
      -0.03605206,
      0.030702757,
      0.0035315698,
      -0.0040729656,
      -0.006769756,
      0.030564226,
      0.010755316,
      0.00909033,
      -0.005849755,
      -0.011719457,
      0.0067359316,
      0.00041508948,
      0.010596333,
      0.008225266,
      0.011215143,
      -0.019544072,
      -0.014470897,
      0.026918339,
      -0.017335773,
      0.010032567,
      0.021024512,
      -0.0107270945,
      0.013079313,
      0.014611353,
      -0.017770061,
      -0.008042699,
      0.016240314,
      0.011532562,
      -0.008749684,
      0.005732259,
      -0.021695448,
      0.014746284,
      -0.012314982,
      -0.01519827,
      -0.022771442,
      0.008743313,
      0.019789856,
      -0.014564071,
      -0.007571485,
      -0.009215705,
      0.010133539,
      0.02604108,
      0.012161368,
      -0.040515207,
      0.0016407248,
      -0.03358143,
      0.011780006,
      0.003912667,
      -0.012703757,
      -0.0036655983,
      0.0059089577,
      0.0067688585,
      0.0005524092,
      0.005708638,
      -0.010599656,
      0.008629309,
      -0.014576898,
      -0.007005648,
      -0.0064388555,
      -0.0060494235,
      0.015814386,
      -0.014933912,
      -0.007470112,
      0.026367547,
      0.01866052,
      -0.007885694,
      0.009300814,
      0.0011515274,
      -0.008519547,
      -0.010070066,
      0.0014280543,
      0.023675494,
      -0.005720326,
      -0.00021212475,
      -0.009600892,
      0.009588978,
      0.00095635856,
      -0.0020592674,
      0.002871109,
      -0.025733387,
      -0.008554118,
      -0.0022655614,
      0.019140324,
      -0.006934153,
      0.0110088,
      0.009541622,
      -0.0031121154,
      0.019973867,
      0.013356976,
      0.0059988187,
      0.018484961,
      -0.0022262314,
      -0.026290745,
      -0.030302642,
      -0.011674986,
      0.0023376402,
      -0.13728423,
      -0.01242638,
      -0.0051715737,
      0.020465473,
      -0.017770115,
      -0.014299248,
      -0.01062652,
      -0.028946357,
      -0.015116676,
      -0.007701073,
      0.011949236,
      -0.008034074,
      -0.0005637318,
      -0.02056711,
      0.0036459784,
      -0.0151849175,
      0.017070143,
      0.0265464,
      0.023362637,
      -0.0013428802,
      -0.012833273,
      0.021223273,
      0.011191532,
      -0.0011482369,
      -0.019322732,
      -0.024638537,
      0.017721323,
      0.0014809967,
      -0.0028790943,
      -0.0027822875,
      -0.030133817,
      -0.001264752,
      -0.004498928,
      0.013954406,
      0.02756977,
      -0.014552233,
      -0.007159802,
      0.021281006,
      0.019972635,
      0.017326849,
      -0.009832885,
      -0.009343914,
      0.024177363,
      -0.0036413912,
      -0.0034593032,
      0.025316477,
      0.014116545,
      -0.017660258,
      -0.014080793,
      0.024845416,
      -0.0347724,
      -0.018422732,
      -0.0150474645,
      -0.031616632,
      -0.00426658,
      -0.005725822,
      -0.0011379254,
      -0.005931613,
      -0.0065054223,
      -0.03730437,
      0.0076014516,
      0.014339469,
      0.03058874,
      0.022006335,
      0.0048658163,
      0.020930883,
      0.03519189,
      0.004538096,
      -0.005283443,
      -0.010443258,
      -0.0032499798,
      -0.007127123,
      0.0064296406,
      0.027554275,
      0.02962784,
      0.0148053905,
      0.01274473,
      0.0064509325,
      0.0048538465,
      0.01970666,
      -0.02723379,
      -0.018388381,
      -0.053526666,
      -0.0022169258,
      0.0091196755,
      0.0062608286,
      -0.011254907,
      0.0012978772,
      -0.020679794,
      -0.0064835767,
      -0.0023398888,
      0.004942861,
      -0.02651859,
      0.005234573,
      0.027956245,
      0.034949347,
      -0.012225746,
      -0.00863928,
      0.0005491268,
      -0.022210566,
      -0.030593764,
      0.023603667,
      -0.02103193,
      -0.005001645,
      0.019449208,
      -0.011340737,
      0.011297503,
      0.012577762,
      -0.0063962573,
      -0.008228673,
      0.0073064496,
      -0.013969558,
      0.007540578,
      -0.15856068,
      0.002730991,
      0.014851783,
      0.0012015351,
      0.0042999163,
      -0.0071324743,
      -0.010351092,
      -0.014362013,
      0.0084678335,
      0.0071104118,
      -0.009314098,
      -0.0051594577,
      -0.010385853,
      -0.0051582614,
      0.039818894,
      0.13631433,
      -0.013185326,
      0.01184101,
      -0.019520542,
      0.0079796715,
      0.0073148734,
      -0.008443013,
      -0.02687085,
      -0.01005969,
      -0.030030908,
      -0.020117413,
      0.00430771,
      -0.014406263,
      -0.005682283,
      0.010844354,
      0.005532815,
      0.009966574,
      0.005878558,
      0.035460956,
      0.011280741,
      -0.01225343,
      -0.019110315,
      0.024061691,
      -0.027340766,
      0.0043624663,
      0.028385121,
      0.0061253654,
      0.0032365713,
      0.027020808,
      -0.0030291993,
      0.0141119445,
      -0.015005558,
      -0.0228854,
      0.009956296,
      0.0052124523,
      -0.017801633,
      -0.04701251,
      -0.0085147945,
      -0.016898757,
      -0.012181088,
      0.015264372,
      -0.0050363145,
      0.0050386656,
      -0.0076258127,
      0.0057829674,
      -0.017293569,
      0.004453408,
      0.011102817,
      0.008462502,
      0.022172876,
      0.0034151012,
      0.027550224,
      0.005064904,
      0.0131394975,
      -0.0031166798,
      0.012831605,
      0.013982095,
      -0.008987142,
      0.012148057,
      -0.0061370702,
      -0.0025617427,
      -0.012877053,
      0.021986773,
      0.023390595,
      0.013072299,
      0.006891435,
      -0.00896049,
      0.019552428,
      -0.023147391,
      0.0028195323,
      -0.00341118,
      -0.028647669,
      0.00006523099,
      -0.0053757243,
      0.00043109764,
      0.020643113,
      0.0015382642,
      0.004180857,
      0.008599316,
      0.0107359765,
      0.02265234,
      0.0030047954,
      0.0052839303,
      0.03483046,
      -0.010441719,
      -0.0060677403,
      -0.0049234955,
      -0.020491889,
      -0.047416855,
      0.028726863,
      0.020754773,
      0.010942874,
      0.015737046,
      -0.0149757005,
      -0.012790856
    ]
  },
  {
    "id": "genai_cohort_python_05_Why_to_use_Enumerate_vtt",
    "content": "All right, let's go ahead and move on to the next challenge that we have in front of us. And that says you're creating a tea menu board and each item must be numbered. Task use enumerate to print the menu with the numbers. Now this is a very interesting problem because we have a new keyword here which is enumerate. And as you can see, I have opened up the docs. I'll come back onto the docs in a second. First of all, let's see what is the problem and how we can actually deal with that. Just like we saw that we have orders here, let's go ahead and create a new file and see what is exactly the problem. Why can't we deal with this problem using the classic for loop? So let's just say I create a new one and call this one as Yep, that's the number. And we'll be call this one as tea menu py. Let's just say we have a simple menu, we call it like this. And this menu has lot of items of list. For example, there might be a green green T for that, we might have lemon for lemon T, which is my favorite one. We also might have spiced one which is pretty good. I like that part too. And we can have a mint too as well. Not one of my favorite, but still we have now we can definitely go ahead and create a variable for In menu just like this. And we can definitely go ahead and print this. And you have seen this. And we can call this one as menu item is. And then I can use curly braces and I can just put a Here for this menu. This has no problem. You might be wondering, yeah, we have studied this and this works absolutely fine. And you are correct. This works absolutely fine. We can just verify that by running this. So we can see that the menu item is green spice lemon. Everything is good. But what the question says is each item must be numbered. So right now I have this list or an array and I know that this is my 0th position, this is my first position, second position, and third position. But I have no way of right now printing out the numbers of each of these item. And for exactly this problem, the enumerate function is utilized. If you study the docs of this enumerate, you're going to see that we have the seasons. This is exactly like the problem statement that we have in front of us. Now we can go ahead and create a list out of it. Notice here the list and in the list we are using this enumerate method for this seasons and what we get back of course it's a list. So outer one is the list, we get a list and inside this we get each of the item being numbered automatically. So the spring gets zero, one gets summer, or summer gets one, fall gets two and three gets winter. And notice here it says enumerate and I can still give the season and I can say hey, I want to start with one, I don't want to start with zero. So this is also pretty good, we can just go ahead and start just like that. So this is one of the way of how you actually work with enumerate. So this is one example that is being given to us. And surely numerate has more things like it has a next take, it can used as a generator, iterators and lot of things we will study about them later on. But one of the another way this is already you have seen, so no need to discuss more on this. Another way of handling this is something like this. So instead of printing it like this, I can actually declare two variable. The first one is index. You can write the whole index or IDX for short. It doesn't really matter, it's a variable name. And the next thing that I'll say is item and then I'll use the same in and now interestingly I can use enumerate and, and in this enumerate I can pass on two things. The first one is menu and as we just saw we don't want to start with zero. So I'll just create a variable which is start and I'll provide start my value Now as we just saw here in the enumerate portion that now the value can start with 1, and all of that. But when you loop through with an enumerated list you can actually use two variables because notice here this is a tuple. So every time the value gets returned to you it's two set of values one and two. So this is our IDX or index and this is our value itself. So that is why I have two variable here, IDX and item. Once I'm here I can just go ahead and use the classic print statement with the formatted string and I can say something like this, this is going to put my index and I'll just say item just like this and chai. So this is how we construct our menu. Now if I run this program again, you'll notice that the first is greench, the second is lemon chai the third is Spiced Chai and the fourth is Mint chai. So how nicely we have handled this problem because we knew about one more thing in our programming tool belt, which is Enumerate. It's a pretty interesting, very powerful thing, and I highly recommend to at least check out this example as well. This is a pretty beautiful example. We are not yet capable of understanding this yield yet, but surely it will come on later on. We are not skipping anything in this course, so I hope you have enjoyed this. And Enumerate is actually fun and pretty easy to understand, especially after watching this video. Let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 Why to use Enumerate.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/05 Why to use Enumerate.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.016470624,
      -0.005924962,
      0.024614349,
      -0.057796363,
      -0.016141167,
      -0.01990612,
      -0.0032828122,
      0.031882923,
      0.0073963124,
      0.0037054021,
      -0.02870551,
      -0.008830121,
      0.003047466,
      0.019576399,
      0.123994134,
      0.0026304258,
      -0.0012731933,
      -0.028334387,
      0.008256363,
      -0.02158014,
      -0.0029919667,
      -0.005109065,
      -0.0043182694,
      -0.020748818,
      0.021016344,
      0.0037064923,
      -0.0036474827,
      0.016106075,
      0.030645614,
      -0.017918434,
      -0.020244827,
      0.008222645,
      0.012975287,
      0.017055372,
      -0.009186394,
      0.015647992,
      0.039162003,
      -0.0030069728,
      -0.029028852,
      0.0027705277,
      -0.012292001,
      0.0021058724,
      0.013004754,
      -0.015689276,
      -0.0014814695,
      -0.041576713,
      -0.0040290253,
      -0.017283775,
      0.017632492,
      0.01708258,
      0.019821016,
      -0.020235743,
      -0.0025824262,
      -0.1711982,
      0.03305956,
      0.013976268,
      -0.012498246,
      -0.00083064626,
      0.02531981,
      0.0018436081,
      -0.016254678,
      0.0048937043,
      -0.036896963,
      -0.00023352457,
      -0.007782077,
      -0.038937535,
      0.015288102,
      -0.0044306885,
      0.0022506525,
      -0.014622055,
      0.022930171,
      0.030721994,
      -0.029748913,
      -0.01324308,
      -0.022595434,
      -0.033022456,
      0.01536092,
      -0.019871607,
      -0.004103225,
      0.011328677,
      0.0089275455,
      -0.0137500875,
      -0.0057142638,
      0.011790283,
      0.02233776,
      -0.0035753592,
      -0.029793339,
      0.0009279877,
      -0.01848716,
      -0.0013798216,
      -0.039804008,
      0.017841019,
      -0.014925997,
      0.00083067216,
      -0.01689802,
      0.0022210993,
      -0.018642053,
      0.0066614216,
      -0.022327926,
      0.0010638885,
      0.0045501655,
      -0.0020210657,
      -0.026971217,
      0.0015152781,
      0.007026603,
      0.0048663155,
      -0.007841576,
      -0.013759847,
      0.0028359543,
      -0.0151446005,
      -0.0072708144,
      0.00061772886,
      0.0066615697,
      -0.0058544665,
      -0.0010892039,
      -0.16726391,
      0.012145256,
      0.0015787124,
      -0.017727705,
      -0.0027766658,
      -0.012931795,
      -0.0011226473,
      -0.00989913,
      0.020301457,
      -0.03231003,
      0.009759974,
      -0.01141482,
      0.026470998,
      0.019266307,
      0.006742669,
      -0.008504726,
      -0.019060073,
      0.005853976,
      0.020507468,
      -0.01700546,
      0.009243061,
      -0.0074262284,
      -0.006285849,
      -0.014751471,
      -0.009980998,
      -0.0065125832,
      0.008817897,
      0.011664854,
      0.027150624,
      0.0022900875,
      -0.011169939,
      -0.032375462,
      0.02536806,
      -0.017418774,
      -0.011054702,
      0.0075710225,
      -0.013889556,
      0.0024758347,
      0.0018178321,
      0.03327226,
      -0.03663483,
      0.009860382,
      0.008758019,
      -0.016099557,
      -0.012554798,
      0.013359991,
      0.004090227,
      -0.0024644607,
      -0.0016395098,
      -0.0010559973,
      0.009236235,
      0.008318819,
      0.00018900198,
      0.006461991,
      -0.0066316985,
      -0.012494896,
      -0.0134098325,
      -0.0011464338,
      -0.00289159,
      -0.01842448,
      0.01824939,
      0.003107344,
      -0.003196635,
      0.011864904,
      -0.012870221,
      0.021235676,
      -0.018601745,
      0.014169127,
      -0.0043388708,
      0.021436723,
      0.0013171678,
      -0.007515757,
      0.036143184,
      -0.0021589168,
      0.006135534,
      -0.020698339,
      0.0018773725,
      0.023775771,
      0.0013391078,
      -0.0017769854,
      -0.01861427,
      -0.021922551,
      0.0035267198,
      -0.0043578483,
      0.026165245,
      0.018491605,
      0.004870597,
      -0.036167074,
      -0.0039249775,
      0.04176348,
      -0.0150912525,
      0.0034822659,
      -0.0118246665,
      0.03664221,
      0.01565488,
      0.005995722,
      0.00027610632,
      -0.0057657445,
      -0.0060606063,
      0.008737882,
      -0.006318125,
      0.019930916,
      0.0010137416,
      0.0056580324,
      -0.011036322,
      0.018213946,
      -0.0053080306,
      0.021907577,
      0.024173403,
      -0.011476961,
      0.006193809,
      0.0016670529,
      0.01482471,
      -0.00089594594,
      0.010263737,
      0.04123662,
      0.007278622,
      -0.01402776,
      -0.018691178,
      0.008383763,
      -0.038719628,
      -0.0061582285,
      0.010006736,
      0.01542816,
      -0.0031570503,
      0.007255138,
      0.007990517,
      0.0040910915,
      0.011239524,
      0.00889637,
      -0.028822757,
      0.0012643706,
      -0.008330562,
      -0.007023118,
      -0.013263377,
      -0.0152741885,
      -0.029707769,
      0.00079558196,
      -0.013018995,
      -0.00552523,
      -0.017686607,
      -0.008305576,
      -0.012921069,
      0.007645848,
      -0.0037576864,
      -0.020399256,
      -0.010326578,
      -0.029227374,
      -0.010925362,
      0.013346989,
      -0.017065525,
      0.010684324,
      0.030840421,
      -0.011466506,
      0.009892829,
      0.011598135,
      0.0040199505,
      0.0004596236,
      0.011490225,
      -0.019175466,
      0.0141879395,
      -0.11690415,
      0.010358559,
      0.022032179,
      -0.02364268,
      0.0012696437,
      0.010825433,
      -0.030655293,
      -0.0042336993,
      0.011989604,
      -0.011866516,
      0.020444192,
      -0.021442942,
      0.004924533,
      -0.038212854,
      -0.003163106,
      -0.0044908817,
      -0.005098389,
      -0.016568286,
      0.03494126,
      0.0031206263,
      0.0003092685,
      -0.013081958,
      -0.0074309655,
      -0.013427652,
      0.014950533,
      -0.0025486592,
      -0.015124129,
      0.03158751,
      0.0066915895,
      -0.0069579356,
      -0.016103068,
      0.007702008,
      -0.002493663,
      -0.020050654,
      -0.002204653,
      0.0025946554,
      0.0052651605,
      -0.0073448676,
      0.011273864,
      0.0059551494,
      0.022279637,
      -0.02462882,
      0.021674702,
      0.041338857,
      0.0046297386,
      0.019110864,
      0.010840731,
      0.029524842,
      -0.0028519742,
      0.002972695,
      -0.01975295,
      0.01923731,
      0.016287865,
      -0.015971942,
      0.0017307801,
      0.015729377,
      -0.0079568,
      -0.013141953,
      0.015437433,
      0.018436,
      0.0017014476,
      -0.009168427,
      0.024549998,
      0.0025183985,
      0.019533088,
      -0.011523713,
      0.0034466013,
      -0.013901185,
      -0.013847325,
      0.011268792,
      -0.009791887,
      -0.016521983,
      -0.013676873,
      0.013168704,
      0.002512101,
      0.00012665369,
      0.030265575,
      -0.014554518,
      -0.012899983,
      0.029696858,
      0.023096044,
      -0.00877987,
      -0.021751653,
      0.0023660858,
      0.015373552,
      -0.0042410824,
      -0.0027286015,
      0.02478617,
      0.008503888,
      -0.020171214,
      0.028941834,
      0.01928942,
      -0.016750898,
      0.004029682,
      -0.0055483743,
      0.013626831,
      -0.015558649,
      -0.015348007,
      0.002046447,
      0.00236653,
      -0.014259213,
      -0.0093108835,
      -0.029297726,
      -0.009791456,
      -0.011874688,
      -0.0053217136,
      -0.007259574,
      -0.028564923,
      0.0031029624,
      -0.027736275,
      -0.0069242115,
      -0.004556239,
      -0.024082696,
      -0.023487404,
      -0.006653698,
      0.017963652,
      -0.0096843885,
      0.007761399,
      0.0024626716,
      0.009721739,
      -0.01911379,
      0.0028933564,
      0.008721586,
      0.0041141743,
      -0.0021124955,
      0.0011109689,
      -0.01307834,
      -0.005092235,
      -0.0128430715,
      -0.023237487,
      -0.029414978,
      0.024555769,
      -0.017159535,
      0.0093124015,
      -0.020015558,
      -0.008524235,
      0.013224697,
      0.020131167,
      0.011501971,
      0.0025807666,
      0.0037086704,
      -0.007690971,
      0.010457881,
      0.004891514,
      -0.011844237,
      0.00561859,
      -0.0121181505,
      0.00257397,
      -0.0014582982,
      -0.026533803,
      -0.017579058,
      -0.038048945,
      0.002078364,
      -0.010510713,
      0.006939317,
      0.0017943921,
      -0.006813231,
      -0.009813375,
      -0.015826738,
      -0.0045537637,
      -0.006113284,
      0.00854263,
      -0.018603195,
      0.021160597,
      0.02328501,
      0.006805477,
      0.003688749,
      0.0013409377,
      -0.015610339,
      -0.012780421,
      -0.0066060796,
      -0.0126414355,
      -0.032210276,
      -0.04178385,
      0.013643874,
      0.010060421,
      -0.0009420912,
      -0.006316379,
      0.029054316,
      0.005688514,
      0.014231739,
      -0.005228999,
      -0.016034368,
      0.016752208,
      -0.0022875825,
      0.0024911289,
      0.0119935265,
      -0.006118304,
      -0.03379704,
      -0.00564445,
      0.009682855,
      -0.01669433,
      -0.0019793215,
      0.022641327,
      -0.011997956,
      0.03765035,
      0.007259026,
      -0.0069030602,
      0.0010112869,
      0.0055914493,
      0.013361024,
      -0.010471644,
      0.008426991,
      -0.003235675,
      -0.000057960882,
      -0.004503161,
      -0.012433868,
      -0.014961071,
      0.0073746787,
      0.02256197,
      -0.020705968,
      -0.0030330797,
      -0.01212897,
      0.0010435868,
      0.0433295,
      0.023496903,
      -0.0004236675,
      -0.0034817168,
      -0.032845702,
      0.00045692126,
      0.008387312,
      -0.021634324,
      -0.0065706302,
      -0.0032813028,
      0.006677738,
      -0.000016777081,
      0.0022190355,
      -0.008478405,
      0.0024909463,
      -0.015825905,
      -0.01995166,
      -0.020143578,
      -0.0106444955,
      0.011968101,
      -0.04332987,
      -0.007945187,
      0.0073535084,
      0.022977412,
      -0.02164555,
      0.011370369,
      -0.0062845503,
      -0.0054204124,
      -0.019140918,
      0.0016065162,
      0.010999482,
      -0.006982975,
      0.0036914404,
      0.0035331156,
      -0.0070933388,
      -0.008737196,
      -0.008639655,
      0.007779144,
      -0.01096994,
      0.008456583,
      -0.005771028,
      0.014407331,
      -0.0031663035,
      -0.0020499057,
      0.0038557695,
      0.0044904393,
      0.028373618,
      0.020238398,
      -0.000033072447,
      0.017063292,
      0.0016520481,
      -0.0031026735,
      -0.012403363,
      -0.015352836,
      -0.0020277374,
      -0.13067104,
      -0.0067457436,
      -0.0019458832,
      0.0066701346,
      -0.024525281,
      -0.019340487,
      0.009977035,
      -0.025303701,
      0.0017292298,
      0.0013062841,
      0.024184993,
      -0.022810493,
      -0.007170139,
      -0.021157542,
      0.013716464,
      -0.037180927,
      0.032867704,
      0.006647237,
      0.0029443535,
      0.009895796,
      -0.017515317,
      0.01388227,
      0.002128852,
      0.008100163,
      -0.027900977,
      -0.02057141,
      0.000049186885,
      0.017956357,
      -0.0072988197,
      -0.007180391,
      -0.031590596,
      -0.021035263,
      -0.006588623,
      0.008747731,
      0.0028734233,
      0.0047685,
      -0.01373977,
      0.01275013,
      0.021852616,
      -0.0122506665,
      -0.01904095,
      -0.0077127893,
      0.01679012,
      -0.0015713922,
      -0.011472623,
      0.024982164,
      0.028113084,
      -0.023632042,
      -0.012229173,
      0.023422005,
      -0.034288675,
      -0.015255298,
      -0.0066620354,
      -0.030536592,
      -0.025242543,
      -0.0018064465,
      -0.0075350213,
      -0.013581878,
      -0.0077151856,
      -0.03258901,
      0.0019240939,
      0.003106053,
      0.002632169,
      0.029324166,
      0.0051552043,
      0.008405157,
      0.021403931,
      0.009044648,
      -0.016663324,
      -0.008982766,
      -0.00088591827,
      0.008479149,
      0.0016177708,
      0.016116599,
      0.013933932,
      -0.007932563,
      0.00040226243,
      0.004256647,
      0.02999965,
      0.01809937,
      -0.02868752,
      0.0010586153,
      -0.05201213,
      -0.01741764,
      0.0026874256,
      0.0042535528,
      0.009551291,
      0.0053363065,
      -0.0066803377,
      0.0076477975,
      0.00983273,
      0.008457601,
      -0.027125096,
      0.021478113,
      0.01569143,
      0.014332111,
      -0.03668958,
      -0.0046850606,
      -0.009734476,
      -0.015616205,
      -0.024472173,
      0.007663864,
      -0.015878454,
      0.010856282,
      -0.006149615,
      -0.024617355,
      0.0050517805,
      0.016015962,
      0.003535203,
      -0.009172469,
      -0.010741793,
      0.0041749873,
      0.00057508686,
      -0.15865259,
      -0.018053887,
      0.011115263,
      0.0017773447,
      0.0034938995,
      0.0027222168,
      0.008665768,
      -0.007533454,
      0.012350409,
      0.012558294,
      0.010062253,
      -0.025197549,
      -0.01519815,
      -0.0027036516,
      0.020012693,
      0.12666577,
      0.00061310624,
      0.0018527029,
      -0.02370502,
      0.006855623,
      0.0009004025,
      -0.016327403,
      -0.025678976,
      0.0030270563,
      -0.021795012,
      -0.013033396,
      0.004872002,
      -0.025053523,
      -0.008357545,
      0.0053359163,
      -0.008092512,
      0.006771587,
      0.009571509,
      0.030148668,
      0.0035381417,
      -0.0045559844,
      -0.028419087,
      0.0032989641,
      -0.019021695,
      0.013907594,
      0.022111338,
      -0.0017882189,
      0.008667817,
      0.021081746,
      0.007488886,
      0.010144746,
      -0.011133766,
      -0.009974672,
      0.008227952,
      -0.00008256012,
      -0.024910647,
      -0.04475278,
      -0.0008663465,
      -0.01696794,
      -0.00313558,
      0.01658419,
      0.0061554313,
      -0.005382791,
      -0.0028970581,
      0.032559663,
      -0.010900876,
      0.009777075,
      0.004588259,
      -0.006067148,
      0.016217101,
      -0.0049834964,
      0.012748747,
      0.004681749,
      0.004428194,
      0.0013126858,
      0.01272789,
      0.019768806,
      0.0032641324,
      0.015895331,
      -0.0073602046,
      0.0025125367,
      -0.00029626008,
      -0.00013207739,
      0.027643839,
      -0.0153655615,
      0.007195916,
      -0.020937365,
      0.01840954,
      -0.022387521,
      0.010188572,
      -0.01190094,
      -0.022344666,
      0.012775072,
      0.008532101,
      0.007688949,
      0.023020199,
      -0.0027621095,
      0.012818161,
      -0.008957388,
      0.003204946,
      0.028952513,
      0.016378598,
      -0.0040926873,
      0.03362352,
      -0.010063907,
      -0.023555633,
      -0.0010607961,
      -0.018199839,
      -0.0248793,
      0.028359313,
      0.010487323,
      0.01945107,
      0.0139527405,
      -0.018290475,
      -0.011497854
    ]
  },
  {
    "id": "genai_cohort_python_06_Zip_can_combine_lists_vtt",
    "content": "All right, let's move on to the next challenge. And this is a pretty fun and interesting challenge and you will get to know that there are so many situations just like this and without learning a new concept it's very difficult to actually pull this off. Surely can be done but it's rather difficult. So notice here you are preparing an order summary with customer names and their total bill task. Use two list, one for name and one for bills. So let's just do whatever the problem statement is saying. Let's do one by one that exactly this one is and we are going to call this one as order summary Py So it's asking us that we should have two list first of all names. So let's go ahead and create a list for names. I will definitely go ahead and add my name first, which usually I do. And then let's add some more name, maybe Mira, maybe Sam and maybe Ali. Alright, the another list is for bills. So each customer gets a bill. Let's just say the first customer gets rupees, the second customer gets rupees. Sam probably got rupees. He's rich, he can pay. Ali gets let's just say That's good. Now we have four people in the names, four bills in our list. And what we want to do, we want to actually go ahead and print the name and paid this much amount of rupees. So how can we do that? We can loop through the names at the same time. We can loop through the bills because the numbers are same. But it would be very difficult to run these two loops for exactly these kinds of situation. We need to study one more topic which is the zip. So zip is exactly like that, iterates over several iteratable in parallel producing tuples or tuples with an item from each one. So notice here the example says from item. This is just a variable name. Feel free to call it anything. We can use a zip, which is a tuple. It takes tuple as a input parameter. It's a function which takes two lists. This is the first list and this is the second list. Notice here we have the sugar, spice and everything nice just like this. And then when we print the item it actually prints it like this. So we receive a tuple itself. If we are receiving a tuple itself as a back in the item instead of putting this as just item so that we get all of these things, we can use our previous knowledge of enumerate, we can have the index as well as the item and we will get two of these things nicely and we can just do the job. And that is why zip is necessary. So let's go ahead and work with that. Pretty simple. We are going to call this one as name and and comma amount. Feel free to call it as index. These are just variable name doesn't really matter much. So inside the zip we'll provide the two list. The first one being names, second one being bills. And then we can just go ahead and print our statement just like we want it to be. So we'll say first of all let's say name paid and then we can use the amount and rupees. It depends on you how you want to print the statement. Totally on you and very optional, no big deal there. Let's go ahead and clean this up. Call this one as python and we want to print the file and we can see Hitesh paid rupees, Meera paid 70, Sam paid 100, Ali paid So pretty easy and workaround with that. So as you saw that some of the knowledge is really required and some of the knowledge actually builds on top of the others. So we saw already some of the knowledge in enumerate but on top of that we added our knowledge for the zip as well. That is it. Hope you enjoyed these crisp and small tutorial. But actually they pay really good in the sense of knowledge. That is it for this video. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "06 Zip can combine lists.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/06 Zip can combine lists.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0074344613,
      -0.0027621929,
      0.025876421,
      -0.05028228,
      -0.003882097,
      -0.023402626,
      0.0118209515,
      0.025771046,
      0.005161608,
      0.009448975,
      -0.023624746,
      -0.0012745481,
      0.006434496,
      0.0065343226,
      0.10889211,
      0.0065066693,
      -0.0017411229,
      -0.023572113,
      0.014400176,
      -0.0041367197,
      0.008487398,
      0.01268615,
      0.01417087,
      -0.027291823,
      0.02968883,
      -0.01098146,
      0.012985154,
      -0.0007145319,
      0.016370505,
      -0.0047333455,
      -0.011189986,
      0.0058790008,
      -0.0069752266,
      0.035277836,
      0.0014938163,
      -0.004893508,
      0.0063020117,
      0.009390614,
      -0.040319502,
      0.008480335,
      -0.0075186756,
      0.004190074,
      0.011240648,
      -0.006437265,
      0.0062618605,
      -0.036324922,
      -0.0032031036,
      -0.009103403,
      -0.00085096067,
      0.025388056,
      0.016116759,
      -0.0109754875,
      -0.00076756475,
      -0.17824724,
      0.025802577,
      0.00796915,
      -0.014068379,
      -0.009894847,
      0.01918552,
      -0.00008142407,
      -0.0033613127,
      0.0009985121,
      -0.031052692,
      -0.02106312,
      -0.018331867,
      -0.042251863,
      0.01573359,
      0.016030723,
      0.003306209,
      -0.008097659,
      0.032440722,
      0.014677727,
      -0.028398657,
      -0.013828906,
      -0.020361505,
      -0.04292154,
      0.019406505,
      -0.0076793,
      -0.0079613775,
      0.011912166,
      0.00093574834,
      -0.000079633086,
      -0.0020044227,
      0.016441304,
      -0.0017199534,
      0.010140126,
      -0.022790328,
      0.004182715,
      -0.025130503,
      0.011869287,
      -0.03472195,
      0.005214542,
      -0.0032712372,
      -0.0015368932,
      -0.019982988,
      0.013246073,
      -0.009251617,
      0.0006115112,
      -0.018311083,
      -0.015845,
      -0.0036702529,
      -0.016853606,
      -0.02970319,
      -0.008826045,
      -0.011396597,
      -0.021693774,
      -0.004017465,
      -0.019652637,
      0.011032208,
      0.008676854,
      -0.008662407,
      -0.018321402,
      0.0048666648,
      0.02391678,
      -0.0047632935,
      -0.17815976,
      0.008202207,
      0.0069032535,
      -0.03510196,
      -0.005982922,
      -0.018846758,
      -0.00228235,
      0.0002000327,
      0.0031465474,
      -0.025773283,
      0.011607374,
      -0.006134915,
      0.020888964,
      0.008055688,
      0.0006241423,
      -0.010746253,
      -0.02778637,
      -0.0027149818,
      0.0067709624,
      -0.023868421,
      0.0053684325,
      -0.010937446,
      -0.017496513,
      -0.021967402,
      0.0024178799,
      -0.007698505,
      0.020395668,
      0.0008807754,
      0.032387853,
      0.0006905677,
      -0.0040913834,
      -0.03365181,
      0.011879876,
      -0.029971385,
      -0.021112444,
      0.012930111,
      -0.0029478332,
      0.0014724722,
      0.011639331,
      0.021985669,
      -0.0426214,
      0.0015183862,
      0.00111544,
      -0.015281605,
      -0.021528602,
      -0.00042279987,
      0.009464496,
      0.0106871845,
      0.0062995423,
      0.0099534895,
      0.009505006,
      0.00057858153,
      -0.013602101,
      0.009916314,
      0.0012943748,
      0.0068401815,
      -0.010462619,
      -0.00090192776,
      -0.007191643,
      -0.013010581,
      0.014727403,
      0.005884814,
      -0.0037740355,
      0.014222574,
      -0.015979344,
      0.019340584,
      -0.014167964,
      0.015438548,
      -0.009296553,
      0.024295107,
      -0.0045927423,
      -0.0074492795,
      0.013728521,
      -0.0060881753,
      0.006766761,
      -0.018681286,
      0.010362415,
      0.024038108,
      -0.015290689,
      0.0003067665,
      -0.026355399,
      -0.012827252,
      -0.0026190465,
      -0.010709076,
      0.026261454,
      0.017166162,
      -0.008682637,
      -0.0023268333,
      -0.008548298,
      0.015472932,
      -0.018269362,
      0.0033954193,
      -0.014487518,
      0.04063069,
      -0.0058138696,
      -0.007390319,
      0.009246114,
      0.0048292866,
      -0.0054890853,
      0.013155034,
      0.009372675,
      0.014662311,
      -0.0066915723,
      0.0035899286,
      0.015015629,
      0.023520533,
      0.012575369,
      0.026220212,
      0.017556207,
      -0.016593585,
      0.016077297,
      0.0037986871,
      0.009468251,
      -0.006293709,
      -0.0067179054,
      0.039193977,
      0.0155163845,
      -0.02415778,
      -0.018199697,
      0.0099044405,
      -0.016107524,
      -0.009144869,
      0.019060157,
      0.0044399565,
      0.004843632,
      0.008643131,
      0.018269656,
      0.0243694,
      -0.0029403132,
      0.0094904965,
      -0.0064026834,
      0.0050408994,
      0.00209986,
      0.0020223917,
      -0.01171505,
      -0.009386138,
      -0.04120875,
      -0.008674831,
      -0.017566847,
      -0.011916918,
      -0.01706937,
      -0.021170158,
      -0.0023774633,
      -0.013090086,
      -0.01269628,
      -0.0044731246,
      -0.011521565,
      -0.035061102,
      -0.009262453,
      0.019310359,
      -0.00501151,
      0.018816391,
      0.03449619,
      -0.0021650165,
      0.004181483,
      0.0015931823,
      0.019848699,
      -0.009141579,
      0.0016431893,
      -0.016946845,
      0.022047091,
      -0.11509074,
      -0.0033447966,
      0.0085222125,
      -0.02773224,
      0.0105223805,
      0.0293189,
      -0.023568003,
      0.016263466,
      0.0037488723,
      -0.004492278,
      0.0075503304,
      -0.015537915,
      0.014252546,
      -0.022953253,
      -0.010630733,
      0.016100194,
      -0.013234495,
      -0.023463842,
      0.049844533,
      -0.0015625141,
      0.010966881,
      0.005933136,
      0.001720941,
      -0.0014024557,
      0.0066723446,
      -0.007800287,
      -0.007732901,
      0.039055783,
      0.0004744662,
      -0.01227734,
      -0.026020745,
      0.018014187,
      0.0043684132,
      -0.007169969,
      0.0013680176,
      0.0019016765,
      0.010147462,
      -0.0060862047,
      0.012772671,
      0.012321005,
      0.013883483,
      -0.02688667,
      0.03535628,
      0.033069316,
      0.002474183,
      0.019136168,
      0.025526462,
      0.023083277,
      -0.012742135,
      -0.0064037256,
      -0.018742695,
      0.010318639,
      0.006493364,
      -0.012117214,
      0.0129733775,
      0.005846659,
      0.0018907995,
      -0.029368285,
      0.0067278123,
      0.022620793,
      -0.0037688462,
      -0.0026403118,
      -0.00548833,
      0.006413482,
      -0.011027192,
      0.00016788719,
      -0.010417608,
      -0.020537974,
      -0.029554421,
      0.00068863056,
      0.0035452966,
      -0.00008744136,
      0.0005160928,
      -0.0020380637,
      -0.009613233,
      0.0156028075,
      0.022741027,
      -0.029666401,
      -0.020570079,
      0.03490676,
      0.022314189,
      -0.0026059083,
      0.00022874486,
      0.019869722,
      -0.0037651716,
      0.018945877,
      -0.013105355,
      0.020635223,
      -0.005430642,
      -0.007234595,
      0.01249976,
      0.007748427,
      -0.004257255,
      -0.00474532,
      -0.025141684,
      0.015472962,
      -0.017572112,
      -0.0121118715,
      -0.021122802,
      0.006824773,
      -0.018395608,
      0.0058557675,
      -0.025634235,
      -0.01454305,
      -0.01988199,
      -0.010618408,
      0.003840408,
      -0.018065257,
      0.008733974,
      -0.026777301,
      -0.010247898,
      -0.0017721193,
      -0.010565618,
      -0.017747365,
      -0.017266726,
      0.01904739,
      -0.0025418145,
      0.012574025,
      0.013398656,
      -0.013491872,
      -0.0059578074,
      0.0004152772,
      0.0070055886,
      -0.00047918543,
      -0.010144345,
      -0.001345738,
      -0.025062166,
      -0.0188933,
      0.011344987,
      -0.017060868,
      -0.016421998,
      0.013957203,
      -0.0132685425,
      0.0017819059,
      -0.02567168,
      0.0015280189,
      0.019756826,
      0.022416424,
      0.030428605,
      -0.0010742734,
      0.0067368695,
      -0.0009561754,
      0.020130597,
      0.003882925,
      -0.0039390177,
      0.019405782,
      -0.0025415763,
      0.0022683656,
      0.002512116,
      -0.03218621,
      -0.014413018,
      -0.036034867,
      0.0143326605,
      -0.019864671,
      -0.011685998,
      -0.0002661139,
      -0.00055710285,
      -0.015704665,
      -0.02033406,
      -0.014326358,
      -0.023496078,
      -0.009723831,
      -0.018936615,
      -0.0072421967,
      0.026494935,
      0.0070878584,
      0.0077951406,
      0.001091983,
      -0.016291449,
      -0.00027946287,
      -0.010317414,
      -0.018143838,
      -0.031467788,
      -0.03479407,
      0.014183171,
      0.015821146,
      0.000031482556,
      0.003234105,
      0.024562346,
      0.010450198,
      0.008931691,
      -0.008424244,
      -0.016602146,
      0.012998572,
      -0.00095585134,
      0.00584258,
      -0.0063988543,
      0.0017042168,
      -0.03063511,
      -0.008704329,
      0.022936642,
      -0.0050150333,
      -0.0031416619,
      0.020876009,
      -0.0003016436,
      0.023978744,
      0.00037215973,
      0.005290469,
      -0.0019722595,
      0.0020176277,
      0.021193765,
      -0.02822561,
      0.027426803,
      -0.013907706,
      0.012705459,
      -0.0056767664,
      -0.010011734,
      -0.0095715085,
      0.015329987,
      0.020048385,
      -0.023850849,
      0.0092220055,
      -0.012894963,
      0.0033209128,
      0.026978767,
      0.03329134,
      -0.0005853504,
      -0.0029473887,
      -0.027328068,
      -0.005287562,
      0.012302304,
      -0.022242043,
      0.015906952,
      -0.0009066003,
      -0.0015842409,
      0.002515864,
      0.0063264337,
      -0.0098876925,
      0.005378157,
      -0.012414585,
      -0.013015755,
      0.0054189633,
      -0.009447866,
      0.009715046,
      -0.0076582674,
      -0.005212945,
      0.022166055,
      0.020438928,
      -0.01627251,
      -0.0029052976,
      -0.0015353248,
      0.007582825,
      -0.011334294,
      -0.009294022,
      0.01551521,
      -0.009028668,
      0.0044201687,
      0.0067347703,
      0.0043868856,
      0.009194822,
      0.004190493,
      0.009379687,
      -0.013094595,
      0.01193331,
      -0.011565881,
      0.008428245,
      -0.010403212,
      -0.014892954,
      0.003132974,
      0.0073859766,
      0.012868155,
      0.012009226,
      0.010276829,
      0.030001804,
      0.004812535,
      -0.021343853,
      0.0005969475,
      0.0039637615,
      0.012505543,
      -0.13506012,
      -0.006980355,
      0.0035668768,
      0.016654553,
      -0.007527086,
      -0.027633322,
      -0.014365658,
      -0.024545565,
      -0.02185668,
      -0.0048472597,
      0.034178063,
      -0.0052655903,
      -0.013728014,
      -0.0221346,
      0.014389339,
      -0.015877286,
      0.031461436,
      0.00953212,
      0.013525125,
      0.0035315144,
      -0.020248102,
      0.019568108,
      -0.0040616295,
      0.027975962,
      -0.0262068,
      -0.015008016,
      0.007303382,
      0.02220433,
      0.01381868,
      -0.00998244,
      -0.03855479,
      -0.006779066,
      0.009194319,
      0.023142675,
      0.0057605407,
      -0.0049244887,
      -0.0109193595,
      0.017358093,
      0.008295681,
      0.010843126,
      -0.0111259725,
      -0.015292491,
      0.020530721,
      -0.010955315,
      -0.0054488988,
      0.03518039,
      0.03665343,
      -0.0206884,
      -0.01364277,
      0.022126403,
      -0.033215996,
      -0.0077034356,
      -0.004185706,
      -0.020274859,
      -0.01596012,
      -0.008686288,
      0.005545349,
      0.000911706,
      -0.0025252197,
      -0.030363161,
      -0.0009901976,
      0.008504893,
      -0.002093157,
      0.02894791,
      0.013669216,
      -0.010144405,
      0.019909091,
      0.00784565,
      -0.0063241464,
      -0.010105498,
      -0.014092315,
      0.0076346654,
      -0.00760193,
      0.022241877,
      0.010927701,
      0.010601522,
      0.005055842,
      0.010877265,
      0.016299939,
      0.0134875085,
      -0.02627516,
      0.013563494,
      -0.052300993,
      -0.023865992,
      0.0029974908,
      0.014369649,
      0.0019882254,
      0.013879057,
      -0.005802794,
      0.011048549,
      0.026381165,
      0.0058331434,
      -0.022277066,
      0.011200173,
      0.035848636,
      0.00681132,
      -0.017209737,
      0.0056779566,
      -0.007478601,
      -0.0061325566,
      -0.015881088,
      0.0016708798,
      -0.01664269,
      0.015030726,
      -0.009415424,
      -0.031252168,
      0.00048610647,
      0.020004503,
      -0.010302416,
      -0.014841209,
      -0.0035223586,
      -0.004836903,
      0.0103053665,
      -0.15312694,
      -0.010270355,
      -0.00077423296,
      0.010789378,
      -0.00024009068,
      -0.0061166175,
      0.015131485,
      -0.001639737,
      0.013463492,
      -0.002917939,
      0.008807625,
      -0.03360062,
      -0.016876858,
      0.0013795514,
      0.029526236,
      0.13532858,
      -0.010181511,
      0.013843285,
      -0.003248004,
      0.0011742567,
      0.013802536,
      -0.009970955,
      -0.011292848,
      -0.009412443,
      -0.008081185,
      -0.0016059933,
      0.002165694,
      -0.022232112,
      -0.011075194,
      0.0038692476,
      -0.0031244855,
      0.010744456,
      0.016684994,
      0.019168736,
      0.0024528403,
      0.011688559,
      -0.022185763,
      0.018336497,
      -0.021391485,
      0.009470885,
      0.024366502,
      0.006933258,
      -0.008150446,
      0.02469383,
      0.005275775,
      0.013588021,
      -0.014625611,
      -0.019428076,
      0.0019532354,
      0.00052969536,
      -0.018778823,
      -0.05887649,
      0.0073300465,
      -0.0011928888,
      -0.0004092037,
      0.010091485,
      -0.006604477,
      0.0051361974,
      -0.0003013098,
      0.025860557,
      -0.01196524,
      0.009036838,
      -0.00041365417,
      0.004027783,
      0.009672972,
      -0.0031835313,
      0.024058709,
      0.013552815,
      0.008297436,
      -0.0016744434,
      0.015260066,
      0.0050899335,
      0.0028328148,
      0.010457678,
      -0.0015975853,
      0.0064750006,
      -0.014966723,
      -0.0018000585,
      0.023539202,
      0.007985257,
      0.013246556,
      -0.0008325493,
      0.0084044505,
      -0.009470277,
      0.009681655,
      -0.009933925,
      -0.03423284,
      0.008424191,
      -0.0057490165,
      0.01598931,
      0.006681785,
      -0.0074090217,
      0.003445861,
      0.0039423173,
      0.0061886045,
      0.011463608,
      -0.00814656,
      -0.0096531715,
      0.023245022,
      0.0037936873,
      -0.009165043,
      -0.009263683,
      -0.0052121463,
      -0.03960264,
      0.016904455,
      0.014228797,
      0.0049836235,
      0.002960471,
      -0.014052459,
      -0.002952799
    ]
  },
  {
    "id": "genai_cohort_python_07_Introducing_while_loop_in_python_vtt",
    "content": "Another day, another challenge. I love these challenge approach. It teaches us so much. So let's start with this reading the fresh new challenge in front of us. Let's just say the challenge says not just. Let's just say it is saying that you want to simulate a tea heating. It starts with degree Celsius, of course, and boils at degrees Celsius. Your task is pretty simple. Use a while loop. And this is a new kind of a loop. We haven't seen that in the past so far. Increase the temperature by until it reaches or exceeds Print each temperature step. All right. And after that also we'll print some message. So let's go ahead and try out the loops. So this is going to be my, I guess sixth one. So let's create a new file and call this one as 06/ underscore and let's call this one as tea temperature. There we go. So the step one is it asks us to create a variable that is temperature or you can just call it as temp for short and starts with We don't have to put a sign like degrees Celsius or something. For us it's just Now we have to use while loop and we have to take care that it needs to run till the hundred. So the for loop is also pretty good. But for loop is majorly used for iterating over a list or when we know there is something which has auto ending or something. Here we have to check and keep on checking for a certain condition. So just like we have if statement, we also have a while statement also known as while loop. This is going to keep on doing the stuff until the condition becomes false. So for example, the condition which we are checking for is temperature less than You can also check for equals to as well, just like this. Less than equal to But we'll just check for less than The moment it becomes That means it's done, it's boiled. Now first of all it says that I want to print increase the temperature by until it reached or exceed And then we want to print the temperature in each step. So I would prefer to print my temperature first, otherwise if the value is all gone, it's not going to be available. Or anyways you can print it afterwards as well. No problem there. We'll just go ahead and say current temperature and then we'll just print the temperature just like that. It also says that you need to add the temperature by until it decreases So every single time we obviously have the access to this temperature, we are going to go ahead and say that whatever the value of temperature is, we are going to add to this. Now this is a very common syntax and so many times you add or one or whatever the value to itself. And it is such a common statement, by the way, I just press control slash to quickly comment a line. This is such a common statement that you will see that temperature plus equals The line number and line number are exactly same. This also adds to the existing value of temperature. This is a shorthand notation of what we wrote about. So whatever feels good to you, you can use that. Most of the time you'll see people using the short one. So plus equals means whatever the existing values is, we want to Increase it by Python is full of these kinds of things. Now we'll go outside of it, make sure you keep an eye on the indentation and we'll just print up a message which says that T is ready to boil, or T is ready to be served. So water is all ready. So T, you can boil the T. Now we'll save this and see the result and I'll show you different ways of how this result can be manipulated. Pretty simple, no big deal there. So we'll just go ahead and say Python This time it's And there we go. So we can see current temperature is 40, then we have 55, then we have 70, then we have and then it gets ready because it's increasing by in itself The only change that you're going to see if I take this line number four and move it to the very end, or probably we print the message after increasing the value. So a shortcut is just hold down the option key or alt key and move this line at the bottom. Let's try to see what happens when we run the program like this. So notice here, this time it says current temperature is So it comes up here, it increases the temperature, so 40, added 15, it becomes 55, then 70, then 85, and then finally when we are here, after 85, it actually increases it to Once it is 100, that means is not equals to 100, it is it not less than 100, it is actually equal to the So we simply get out of it and we simply print this. So again, depends on what you really want to do. I like to keep this at the very top just like this. Make sure you understand that the how you write the code, it's actually going to execute in the same order as well. So that is it. Now you understand the while loop as well as the importance of it, as well as a use case for it. You have done a practical example for it. That is it for this video. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "07 Introducing while loop in python.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/07 Introducing while loop in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.002901939,
      0.019444948,
      0.025538936,
      -0.07099946,
      -0.002788981,
      -0.025103303,
      -0.0008257995,
      0.01753117,
      0.006821056,
      0.003420267,
      0.003782521,
      -0.00599474,
      0.00678034,
      0.014716592,
      0.11579604,
      0.027823143,
      -0.007140739,
      -0.010672973,
      0.0044242362,
      -0.0037265841,
      -0.029783549,
      -0.007418452,
      0.00863262,
      -0.017931418,
      0.00866871,
      0.006234577,
      0.017254166,
      0.011371154,
      0.033824824,
      -0.018231353,
      -0.018938717,
      0.0089136595,
      0.011930673,
      0.041239794,
      -0.0012471891,
      0.02102951,
      0.02117649,
      -0.010619334,
      -0.00957646,
      0.011276664,
      -0.004947034,
      0.0002883302,
      -0.0027558831,
      -0.014757765,
      0.008127413,
      -0.019023893,
      -0.021601988,
      -0.038514707,
      -0.004944299,
      0.02809328,
      0.008771376,
      0.0048805075,
      -0.018233653,
      -0.18530865,
      -0.000602883,
      0.009286335,
      0.00036069035,
      0.01900125,
      0.018582674,
      -0.010160678,
      -0.018735865,
      0.00883881,
      -0.016255163,
      0.011687445,
      -0.020221567,
      -0.024719285,
      0.007697261,
      -0.008367522,
      0.0064106537,
      0.0024539072,
      0.013949585,
      0.019459622,
      -0.015039105,
      -0.007819287,
      -0.008286382,
      -0.026551941,
      -0.0065626428,
      -0.0024062379,
      -0.0026099405,
      0.0012323381,
      -0.0020057308,
      -0.015210724,
      -0.000016187425,
      -0.011438546,
      0.017670123,
      0.011588938,
      -0.0279138,
      -0.0064400015,
      0.0031335766,
      -0.005425503,
      -0.029517094,
      0.01938287,
      0.00014389544,
      0.01378656,
      -0.006361175,
      0.006827457,
      0.00067132164,
      -0.015177383,
      -0.021886038,
      -0.0019854645,
      -0.01599952,
      0.006070515,
      -0.019172743,
      -0.010725956,
      0.0073061963,
      0.0071502985,
      -0.014461089,
      -0.017204303,
      0.011125329,
      0.0035528992,
      -0.008707789,
      -0.00003237155,
      0.0048022354,
      0.032453373,
      0.011329387,
      -0.18581243,
      0.023992306,
      0.00494657,
      -0.016369672,
      -0.0005797236,
      -0.013135184,
      0.0015676889,
      -0.0037809296,
      0.014699948,
      -0.014225615,
      0.019708619,
      -0.00035808276,
      0.0228363,
      0.012739389,
      -0.0023173017,
      -0.009548793,
      0.0006716639,
      0.0008673751,
      0.0040353057,
      0.000110988876,
      0.017872522,
      -0.022968877,
      -0.015819008,
      -0.021990167,
      -0.007675267,
      -0.013323479,
      0.011969946,
      -0.020444296,
      0.03606827,
      -0.009943716,
      -0.010818863,
      0.0023759264,
      0.02399837,
      -0.0005867461,
      0.0013062116,
      -0.002175363,
      -0.022830572,
      -0.0036228262,
      -0.01996316,
      0.031056056,
      -0.03458479,
      -0.005700546,
      0.0029370533,
      -0.01091991,
      -0.004344925,
      0.009815298,
      -0.007482364,
      0.017069193,
      0.009630481,
      0.005322356,
      -0.0025770671,
      0.003513458,
      0.001936583,
      0.02955113,
      0.01638976,
      0.006557819,
      -0.013894177,
      0.0011673264,
      -0.021285042,
      -0.0071036043,
      0.012965627,
      0.012038377,
      -0.01636244,
      -0.0024417208,
      -0.0129902195,
      0.0063147177,
      -0.022204252,
      -0.0034606222,
      -0.0013682479,
      0.005917831,
      -0.012365358,
      -0.02109272,
      0.020293463,
      0.0149190575,
      0.0008009934,
      -0.0051235575,
      0.0025080906,
      0.019054713,
      0.010308294,
      0.0071045016,
      -0.0046684006,
      -0.013097406,
      -0.0024630148,
      0.01505551,
      0.020889545,
      0.025190083,
      -0.0114218695,
      -0.0034457152,
      -0.018780798,
      0.0144871585,
      -0.021875525,
      0.0063055237,
      -0.0031717801,
      0.022752585,
      -0.005587148,
      -0.010059061,
      0.01510948,
      0.027791815,
      0.015552981,
      -0.002139257,
      0.0073128515,
      0.026027488,
      -0.0014338837,
      0.013259021,
      0.0051160688,
      -0.00013935336,
      0.01910709,
      -0.0020299323,
      0.009225756,
      0.012233663,
      -0.01981664,
      0.017347794,
      0.008212776,
      0.010274363,
      0.009419259,
      0.033197235,
      -0.012486214,
      -0.007720634,
      -0.0088581145,
      0.027784923,
      0.011460708,
      -0.0034138262,
      0.017545536,
      0.018285088,
      -0.0063040005,
      0.0025921483,
      -0.0032217898,
      -0.013866513,
      0.010091157,
      0.023470405,
      0.004373546,
      -0.0044833533,
      0.0018085351,
      -0.01905643,
      -0.03371478,
      -0.015369723,
      -0.0074126604,
      0.011026245,
      -0.016613355,
      0.0020922932,
      -0.021068504,
      -0.015526828,
      -0.015613145,
      0.0047660777,
      -0.009294248,
      -0.014149943,
      -0.00053787994,
      -0.006424711,
      -0.011019253,
      0.029619565,
      -0.013769362,
      -0.0021277247,
      0.02984849,
      -0.016796911,
      0.01338218,
      0.01584586,
      0.00841473,
      -0.0026159782,
      -0.010606917,
      -0.025109772,
      0.020232342,
      -0.107338645,
      0.028761702,
      0.0135304835,
      -0.017910542,
      0.00874396,
      0.005353708,
      -0.0023328066,
      0.007489182,
      -0.0042904806,
      -0.004673829,
      0.020650472,
      -0.00844104,
      0.030171229,
      -0.024766134,
      0.011697568,
      -0.009367116,
      0.011030633,
      -0.026425958,
      0.029310875,
      -0.012464402,
      -0.00817974,
      -0.020193027,
      -0.017703068,
      -0.009741694,
      0.0017276192,
      -0.007928971,
      -0.0036171419,
      0.027063867,
      0.017808262,
      -0.00407309,
      -0.018185625,
      0.018103437,
      -0.003341845,
      -0.02611935,
      0.010326894,
      0.019125964,
      0.013111369,
      -0.0020004758,
      0.0228545,
      -0.01002858,
      0.027442953,
      0.0002978342,
      0.00803019,
      0.03557327,
      -0.00015256373,
      0.009136057,
      0.0045609926,
      0.022304263,
      -0.0030263667,
      0.004788122,
      -0.0035450945,
      0.020612422,
      -0.026796196,
      -0.0160484,
      0.012519187,
      0.02541953,
      0.0037651348,
      0.0010275646,
      -0.0005228726,
      0.016176866,
      0.007927292,
      -0.0061319415,
      0.016497368,
      -0.009729601,
      0.000024134759,
      -0.0034312417,
      0.021442985,
      -0.009562161,
      -0.028342541,
      0.008698799,
      -0.011747471,
      -0.0011266097,
      0.006608301,
      -0.024025414,
      -0.017439893,
      0.00043492456,
      0.014689176,
      -0.02344155,
      -0.02289361,
      0.02729432,
      0.03631104,
      -0.015043827,
      -0.013523197,
      0.00540498,
      -0.0045136656,
      0.001802235,
      0.013341036,
      -0.021857928,
      -0.0014400391,
      -0.014599552,
      0.014277333,
      0.020676663,
      -0.018650442,
      0.011751853,
      -0.0030110902,
      -0.001972306,
      -0.020335503,
      -0.0040832865,
      0.0065862588,
      0.008425186,
      -0.020502066,
      -0.01632174,
      -0.01621694,
      -0.015698215,
      -0.011157878,
      0.003321138,
      -0.017822215,
      -0.03060498,
      0.01569463,
      -0.0054446044,
      0.0036182469,
      -0.01231665,
      -0.010559633,
      -0.0030086343,
      -0.00094706763,
      -0.006313385,
      -0.008156948,
      0.011083142,
      0.010586541,
      -0.0005557637,
      -0.0061533027,
      0.010029225,
      0.00461827,
      0.0047407323,
      0.02228639,
      0.028193284,
      -0.013803857,
      0.012274952,
      -0.0067156055,
      -0.038533688,
      -0.03281645,
      0.022680946,
      -0.017469138,
      -0.0045371265,
      -0.0038812424,
      -0.004010582,
      0.036409106,
      0.01113369,
      0.015809048,
      -0.0029748422,
      -0.0001680706,
      0.016231284,
      -0.008115167,
      -0.010065841,
      -0.0243653,
      0.012428636,
      -0.009972457,
      -0.022220215,
      0.01630675,
      -0.02616527,
      -0.011015864,
      -0.01820422,
      -0.00528107,
      0.0031698882,
      0.0036544804,
      0.0030172607,
      -0.011790806,
      -0.022782054,
      -0.012920001,
      -0.022974769,
      0.00273909,
      0.0038615847,
      -0.0045966734,
      -0.0007159992,
      0.012702191,
      -0.004475911,
      -0.022489885,
      -0.012796834,
      0.0028608867,
      0.001555494,
      -0.02293305,
      -0.007026657,
      -0.032348987,
      -0.015014587,
      -0.002276778,
      0.0063303816,
      0.0060607987,
      0.0008329959,
      0.033388957,
      0.0019368097,
      0.00838638,
      0.0014658914,
      -0.024045408,
      0.0041753054,
      0.011198075,
      0.023689715,
      0.012237007,
      -0.0009216715,
      -0.03341496,
      -0.0042742495,
      0.007043225,
      -0.020959469,
      0.021378547,
      0.019340822,
      0.010239779,
      0.011966766,
      0.015204047,
      -0.0015207862,
      0.00030061818,
      0.021944279,
      0.0076399893,
      0.0077848937,
      -0.0065346127,
      -0.003998902,
      0.028645836,
      -0.009555165,
      -0.008808901,
      -0.0030620194,
      0.00062750204,
      0.009071484,
      -0.020923048,
      0.012472381,
      0.0015686125,
      0.0052409554,
      0.027000083,
      0.023201097,
      -0.020222232,
      0.016216984,
      -0.019595461,
      0.011456077,
      0.0059708073,
      -0.0003865367,
      -0.009328284,
      -0.00582111,
      -0.0036141395,
      -0.0101759955,
      -0.0043313676,
      0.010897592,
      -0.0026937628,
      -0.008024325,
      -0.007871068,
      -0.014736913,
      -0.011872373,
      0.027517032,
      -0.015550876,
      -0.029100973,
      0.010972591,
      0.02383347,
      -0.019640174,
      0.0055121244,
      -0.007120209,
      -0.0127775455,
      -0.018308112,
      -0.00272426,
      0.011949642,
      -0.0027773045,
      0.012056376,
      0.0040504024,
      -0.017630853,
      -0.010023769,
      0.006415517,
      0.008466005,
      -0.008139237,
      -0.001755106,
      -0.009395656,
      0.025344964,
      -0.0017646773,
      0.009322384,
      0.00391468,
      -0.008977082,
      0.02187899,
      0.021812761,
      -0.012532608,
      -0.010644157,
      0.002051359,
      -0.03501677,
      -0.0052612857,
      -0.0059245345,
      -0.00572595,
      -0.14317693,
      -0.012189424,
      0.0017919986,
      0.004969476,
      -0.022210388,
      -0.021815749,
      0.011730284,
      -0.03413293,
      0.015503743,
      0.0076006087,
      0.030873757,
      -0.00019080692,
      -0.007151219,
      -0.010140495,
      0.0022312158,
      -0.015727643,
      0.036064688,
      0.0063665537,
      0.031014575,
      -0.004367232,
      -0.019115904,
      0.009770837,
      -0.004798438,
      0.01114305,
      -0.026505167,
      -0.0135452645,
      0.011704046,
      0.013232273,
      -0.00466158,
      -0.0021162706,
      -0.03238002,
      -0.0037102608,
      0.008695334,
      0.0020936062,
      0.0124485195,
      -0.014389445,
      -0.020883499,
      0.013019143,
      0.024797168,
      0.0045747706,
      -0.009051409,
      -0.012569259,
      0.019316232,
      0.0058212443,
      -0.017811673,
      0.015622169,
      0.02415745,
      -0.018163031,
      -0.0032775807,
      0.030155534,
      -0.037111953,
      -0.012832544,
      -0.0104419105,
      -0.019960402,
      -0.009270828,
      0.023245553,
      -0.009825205,
      -0.0065299743,
      -0.0007541475,
      -0.017282402,
      -0.0012183385,
      0.0044141375,
      0.019040357,
      0.014909511,
      0.011748317,
      -0.0042675934,
      0.026160922,
      0.00680454,
      0.010800138,
      -0.009557394,
      -0.01515971,
      0.014840282,
      0.0020714353,
      0.004265635,
      0.015738271,
      -0.01544008,
      0.02644254,
      0.011586858,
      -0.0003272395,
      0.00431115,
      -0.0035902585,
      -0.014056051,
      -0.056129403,
      -0.025745723,
      0.019371996,
      0.004321305,
      0.0022038124,
      0.005677075,
      -0.009858841,
      0.00006809724,
      0.023947958,
      0.008147352,
      -0.034047306,
      -0.0009865806,
      0.016344534,
      0.0038022008,
      -0.013862864,
      0.0013697332,
      -0.01322584,
      -0.017519712,
      -0.012365118,
      0.017887486,
      -0.009992614,
      0.021257743,
      -0.004915077,
      -0.007963436,
      0.0007769436,
      0.017904388,
      -0.0019818835,
      -0.011480331,
      0.0046414793,
      0.00074233493,
      0.0023665146,
      -0.16362472,
      -0.0001997917,
      0.012439155,
      0.011560776,
      0.0051307105,
      -0.0027020127,
      0.0008837547,
      -0.007865441,
      0.01019213,
      0.011461439,
      0.008125687,
      -0.009772031,
      -0.009324087,
      0.000050181923,
      0.032418225,
      0.1260609,
      -0.01315128,
      0.021866128,
      -0.02142556,
      0.0020564634,
      -0.014066218,
      -0.007433319,
      -0.018919246,
      0.0046104025,
      -0.0070184874,
      -0.023100544,
      0.01247742,
      -0.010081889,
      0.0031414542,
      0.0006420814,
      -0.0107613485,
      -0.008765249,
      0.029837225,
      0.030485658,
      0.0061435406,
      -0.0052116257,
      -0.0059391875,
      0.019166896,
      0.0019901765,
      0.008973846,
      0.0010667129,
      -0.0071524153,
      -0.0055741225,
      0.014656899,
      0.003072406,
      -0.002977889,
      -0.029179854,
      -0.032221448,
      -0.013177837,
      0.0053038034,
      -0.03175355,
      -0.048268124,
      -0.0013197194,
      -0.014596129,
      -0.001494718,
      0.0137204295,
      0.009284822,
      0.01651814,
      0.0044497843,
      0.004271331,
      -0.012701236,
      0.013281056,
      -0.0016480794,
      0.0037295527,
      0.008239832,
      0.0039580567,
      0.034261078,
      0.012481873,
      0.017790059,
      -0.010063005,
      0.027468344,
      0.00026225852,
      -0.0030468307,
      0.017165387,
      -0.004252881,
      -0.009715201,
      -0.008334453,
      0.02902003,
      0.010756132,
      0.0010509291,
      0.004974635,
      -0.007997962,
      0.011856552,
      0.00035225728,
      0.0170533,
      -0.007971918,
      -0.018328216,
      0.0042551695,
      -0.010430864,
      0.008966536,
      0.00032051312,
      -0.013883117,
      -0.016740546,
      -0.0077916957,
      0.00035197937,
      0.029909842,
      -0.0055398797,
      -0.022157026,
      0.03857955,
      -0.012969674,
      0.006148473,
      -0.016870923,
      -0.002026707,
      -0.044906206,
      0.024611482,
      0.023822473,
      -0.0067257583,
      0.019435503,
      -0.0056401435,
      -0.019676812
    ]
  },
  {
    "id": "genai_cohort_python_08_Break_continue_and_loop_fallback_vtt",
    "content": "All right, so let's move on to probably the final video of this section where we are going to study about the two important topic which is one is a skip, another one is a break. So we'll study the first of all the problem statement and then we're going to write the code for it. And then I'll show you one of the interesting case of the loop as well. It's not a part of a subject as such, but it's a pretty interesting use case as well. So notice here it says some chai flavors are out of stock. You want to skip those and stop entirely if someone requests a restricted flavor. So the task is skip if flavor is out of stock and break if the flavor is discontinued. Now let's go ahead and study about them. First of all, so let's just say this is your loop that's going on. So this is your loop. And in your loop you are constantly going ahead and trying to get the values just like this. This is how the loop work. Constantly keep on going into it. Now what this skip and these things means that let's just say you are going to go ahead and loop through it probably five or six different times just like that. So we'll just change this up here a little bit here so that it actually looks good. So let's just assume this is five different times that you're looping. The first thing that you're going to study is known as continue. This is a keyword now the continue. The whole job of the continue is to make sure that whatever the time you're looping, I'll just skip one of them. So let's just say this is one of them and probably we should have one more of them to make sure that we are actually going through with this nicely and we can actually understand this part. So we will put up some of the checking condition and let's just say out of these three, this is the condition which matches. So as soon as we write the continue statement, this whole thing will just go away. So as we can see, this will be deleted. So this part of the loop will be skipped. On the other hand, the break is also another keyword just like the continue. But since the continue just breaks, or kind of allows you to skip one of the loop while the break allows you to just completely stop the loop wherever it has encountered this. It's much more easier actually to see in the code part and realize that what's happening. I hope you got some of the GIST at least 20, 30% of it. But rest you will easily understand as we go through this one. So we call this one as simply underscore. Not like that, out of order. Py. And let's just say we have some of these orders in front of us. Let's just say we call them, flavors. So somebody's asking us for the flavors of the chai, and we're going to literally match with them. So first is ginger. The second flavor in itself, we call this as out of stock. Let's go and say out of stock. Just like this. Another one is, lemon. And just like this, another one is discontinued. Discontinued. And. And let's just say there is another one which is Tulsi. This is also an interesting flavor. So these are all the flavors that we have, and right now we want to loop through all of them. So simple way of looping through that is. Let's call this one as flavor out of in flavors. There we go. So first flavor is a variable. The second flavors is a list. So we need to put up a check. Check always comes up with the if condition. And yes, this again gets up. So we'll just say if the flavor that we have is discontinued, so we'll just match it exactly. First of all, we'll just check for out of stock, and then we'll check for the discontinued. So if the flavor is out of stock, then we can simply go ahead and skip that particular loop. So all you got to do is in this case, we use the keyword which is continue. So we'll just go ahead and say continue. Now, here's a small mistake that we have done. We forgot the semicolon. The moment you put up a semicolon, the continue is going to give you a problem because we have an indentation problem. So make sure you go up here and hit four spaces or tab, whatever you want to wish. Literally in the Python file automatically VS code will give you four spaces, just like as mentioned in the pep as well. Now we also want to check for another condition. So we can just come up here and check for another one. If the flavor is equals to. Let's go ahead and copy this so that we don't make any typo. And just like this. So in this case, we use a keyword known as break. Now, after this, we go ahead and print, whatever the statement we want to print. So we'll just go ahead and say that, hey, I, would love to print and use a printing method. And we'll just say this continued item Foundation. Now here's a very, very interesting, part of it. We can just go ahead and break it and we'll see what happens in this. And notice here the indentation. This is my if statement. This is outside of the if statement, but still inside the loop. And we can have another such statement, but we can actually go ahead and move it outside of the for statement as well. And we can just print and see what happens in this. So I'll just go ahead and remove this and I'll just say F and we'll just go ahead and say outside of, loop. So this is just to make sure that you understand what is happening and we'll definitely add a little bit more to it that how it goes and how it works and everything. Let's just go ahead and run this. You will learn quite a lot, although it looks a little bit confusing, but bear with me. You will learn a lot in this video itself. So let's just go ahead and run and There we go. Notice here it says discontinued item found. Then again, discontinued item found. And then we are simply outside of the loop. This is interesting that. Why did this happen? Why did. We got, this one being printed two times. So the first time it actually looped through, it found ginger and then it went to the out of stock. So the out of stock ginger, one went, all the way through it. We didn't do any printing of the ginger or anything, but. But as you will notice, this was printed at the time of ginger. Then as we simply move to the out of stock, it simply says, hey, I don't want to do anything. So out of stock simply came up here. And as soon as it saw the continue, it didn't worked out there. It would be rather interesting if we go ahead and also print out. Let's go ahead and print this, statement because this is interesting. Instead of saying discontinued out term, find, go ahead and remove this, add this one, and say we want to print the flavor. Can we print the flavor? Much more interesting stuff. All right, let's go ahead and print this. So it says first time the ginger item was found. All right, no problem there. Ginger item was found. Then it found the out of stock. So as soon as it finds the out of stock, it says continue. That means I will not continue the loop. I'll skip right from here. So nothing was printed. Then it says lemon. So lemon was printed here. And then, it didn't match this condition. It didn't match this condition. So it printed out. Then we Simply got interacted with the discontinued. So as soon as you interact with the discontinued, the break statement hits. That means the whole of the loop is not going to run outside of this. So you got only till the lemon. After that nothing prints. This guy never got a chance to be printed. And as soon as we got out of this we simply go ahead and say that, hey, I am printing outside of the loop. This understanding of indentation is pretty important and we really, really need that. Now apart from this, you could have done something like this, that hey, before we break this, we want to print this and obviously we need to work on indentation. So there we go. Now the output will be drastically different. So if I go ahead and run this notice here, Discontinued item found. And we simply say outside of the loop. Because this time we don't have anything to be printed out in in just the loop. We just are checking for the two condition. First one for out of stock, second one for the discontinued. So the only item that gets printed is discontinued because only then you move inside this loop. So that's why we see discontinued outem found. And then we simply have the item, outside of this being found. We can do one more thing, one more very interesting thing. I can just go ahead and have a duplicate of this. I'll print this up and notice here I'm printing it outside. So this is if block. This again is if block. But this is a loop block. Notice here it's inside the loop. So the ability to understand what's happening and how is it happening is actually very, very interesting and important in the world of Python. I'll print this notice here. Ginger, item found. Lemon, item found Discontinued Block also got executed outside. After that nothing gets executed. So this one gets out. So this is the most important part that you learn and understand deeply about the continue break and how the structure of the loop work. Now I have another such example and that will be interesting. I thought to keep it as a separate video, but I'll just introduce you within this video. So this is and we're going to call this one as for else. Yes, there is a such thing as known as for else. Now look at this very interesting example that we have. So I'll just go ahead and call this one as staff. So we have some of the staff members which is a list. Inside the list we have tuples. So first of all we have Amit and we also store the age of them. So let's just say And we have another staff which is also a Tuple. So I'll just go ahead and say Zara and the staff age probably And then we have another tuple and let's just say we call this as Raj, fictitious name. No, no matter there. And we simply go ahead and work on Now we have the tuple, we have name as well as age. Can we loop through them? For sure. We can just go ahead and say name age, because that's what we are about to return. And we'll simply say this in the staff. Now I don't want to use it like that. I only want to print when the age is above Hey Hitesh, what are you saying? Nobody's age is above That's exactly my point. So I can just go ahead and write it like this. If age is greater than or equal to 18, then only we are doing the hiring or we are printing some message. In this case we are simply go ahead and simply use the print just like this and formatted string and we will say name is eligible for. Eligible to manage the staff. Manage the staff or hiring, whatever you want to call this. All right, now once this is all done, we simply want to go ahead and hit the break as well. Now here's the most interesting part. We will go ahead and simply say else. That's interesting. Yes, just in the indentation level of where the for loop is. And I can go ahead and print the value just like this and can have a probably a formatted string however you like that. No one is eligible to manage the stuff. This is one of the most interesting case and interesting style of writing the Python code. I'll run this one and we will call this1as08 and run this notice here. It says no one is eligible for managing the staff. But let's go ahead and reverse the rule we are looking up for less than eight should be less than or again use this. So age should be less than or equal to So all of them are now part of it. Now here's the interesting part. What will be printed? That's the most interesting part of it. Notice here Amit is eligible, so the very first guy is eligible. And after that we are just breaking this. So we are not running the loop anymore. Whoever the first guy comes up and meets the criteria, we're just simply saying that you are eligible for it. But notice here the else statement doesn't print. And this is one of the strangest behavior that where the else statement is used or could be used, the indentation is not in the if statement. This is not a part of if statement. This is a part of a For statement. So this is one of the most interesting way the else block only runs if the loop didn't break. Use it when you are searching for something, it's not found. It's kind of a execution of the fallback logic. So call this one as a fallback one here. Pretty interesting. You will see this quite a lot, but only in the in depth series, just like we are doing here. That is it for this video. Hope you enjoyed this one. It was a pretty interesting video altogether and hope you have learned in that and that is it all about the loops in Python. That is it for this video. And let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "08 Break continue and loop fallback.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/08 Break continue and loop fallback.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.010534111,
      0.009777299,
      0.017766062,
      -0.06499551,
      0.0029556209,
      -0.026678119,
      -0.01720716,
      0.014449004,
      0.0041779056,
      -0.0107186735,
      -0.0027711692,
      -0.019486764,
      0.00064252445,
      0.00931899,
      0.112958044,
      -0.011855951,
      0.0029059206,
      -0.023595631,
      0.008661268,
      -0.00007683686,
      -0.007756758,
      -0.0046874476,
      0.02243095,
      -0.033467725,
      0.015132063,
      -0.009297639,
      -0.0013235566,
      0.018812446,
      0.025691435,
      -0.022322595,
      -0.0073847035,
      -0.0046210834,
      0.010925199,
      0.026482671,
      0.003009182,
      0.021476483,
      0.0040040016,
      -0.0028934004,
      -0.01701156,
      0.0028226404,
      -0.007162816,
      0.009692297,
      0.014015369,
      -0.0043033697,
      0.012925279,
      -0.005778698,
      -0.0077692037,
      -0.0057406947,
      0.006624361,
      0.035061024,
      0.014128913,
      0.0015545959,
      0.005606775,
      -0.18623981,
      0.020504925,
      -0.0024078265,
      0.0032541764,
      -0.0065517565,
      0.003095615,
      -0.00094001135,
      -0.031862438,
      0.005895196,
      -0.018914863,
      -0.017752174,
      -0.007321888,
      -0.017389126,
      0.02443876,
      -0.004827161,
      -0.013165885,
      -0.0018372408,
      0.022816028,
      0.0059436886,
      -0.018261617,
      -0.0126535455,
      -0.017691977,
      -0.044658177,
      0.011878453,
      -0.018262073,
      -0.010014354,
      0.013455347,
      0.010740508,
      -0.010163367,
      -0.012782231,
      -0.009290671,
      0.0031167096,
      0.0074035916,
      -0.018152643,
      -0.014197961,
      0.011437692,
      -0.00028730763,
      -0.043773733,
      0.017369963,
      -0.009471017,
      -0.021686675,
      -0.012437586,
      0.0039164973,
      -0.016213961,
      0.0033035898,
      -0.006931808,
      0.0014823044,
      0.004726664,
      -0.016728308,
      -0.01041179,
      -0.009178323,
      0.005641299,
      0.009223111,
      -0.011869819,
      -0.025295835,
      -0.003499269,
      -0.014907999,
      -0.0038059638,
      0.0023516398,
      -0.0036717865,
      0.012962068,
      -0.00666527,
      -0.17520702,
      -0.000051617742,
      0.01174701,
      -0.022782594,
      0.0045379126,
      -0.012797206,
      0.00015243131,
      -0.011895894,
      0.031382237,
      -0.024177361,
      0.01853234,
      0.0117567675,
      0.018007947,
      -0.0056171464,
      0.0033450364,
      -0.016799377,
      -0.013783942,
      -0.0049478156,
      0.00056326005,
      -0.0008607664,
      0.034934297,
      -0.012616709,
      -0.013478275,
      -0.009867546,
      -0.0029703982,
      -0.022099147,
      0.019277293,
      -0.00016435777,
      0.023215994,
      -0.0054698936,
      -0.009871822,
      -0.023904016,
      0.0024670179,
      -0.013610085,
      -0.024339931,
      0.016862778,
      -0.008362015,
      -0.0046692626,
      -0.018736469,
      0.02050446,
      -0.0244131,
      -0.0000782946,
      0.02155283,
      -0.005769056,
      -0.004733255,
      -0.014949299,
      -0.0056212,
      0.0060666436,
      0.0010306,
      0.0034192828,
      0.0032057664,
      0.0011750909,
      -0.0019310027,
      0.014845318,
      0.006701683,
      0.001154467,
      -0.010421757,
      0.013709208,
      -0.0045640143,
      -0.011854634,
      -0.0036779463,
      0.0006169857,
      -0.014460062,
      0.01201426,
      -0.00960317,
      0.006586731,
      -0.011878751,
      0.0016778413,
      0.02226653,
      -0.002204433,
      -0.007795482,
      -0.012505398,
      0.013576863,
      -0.0029392133,
      0.00036997828,
      -0.0077770944,
      -0.0021524644,
      0.019708967,
      0.007870917,
      -0.007204585,
      -0.013800177,
      0.004193449,
      0.006162357,
      0.0050474233,
      0.025281776,
      0.026639653,
      -0.016059007,
      -0.0036983783,
      -0.009339406,
      0.020569531,
      -0.036580853,
      0.012691536,
      -0.018824693,
      0.011147406,
      0.010814653,
      -0.020052288,
      0.013203793,
      0.0050114207,
      -0.011662654,
      0.014072295,
      -0.01207113,
      0.008482596,
      0.0067011765,
      -0.0049603577,
      -0.010004656,
      0.004029681,
      0.0010544738,
      0.008098367,
      0.02765146,
      0.0014696289,
      -0.0069631813,
      0.02088798,
      0.010975445,
      -0.0014426063,
      -0.000025803629,
      0.028782224,
      0.00019157257,
      -0.02187686,
      -0.0018525316,
      0.0034642534,
      -0.007657209,
      0.011558724,
      0.0451179,
      0.0049259723,
      0.021639572,
      0.0104471,
      0.003984074,
      -0.03144316,
      -0.0018137145,
      0.025600849,
      -0.008131378,
      0.009447186,
      -0.00012419166,
      -0.0030003097,
      -0.032486957,
      -0.00047122053,
      -0.019342294,
      0.004777671,
      -0.0082417345,
      -0.0059254146,
      -0.018498372,
      -0.020059725,
      -0.0048488746,
      -0.0026565006,
      -0.009816022,
      -0.015812771,
      0.0013314813,
      -0.0019539916,
      -0.011422074,
      0.029472014,
      -0.0044147065,
      0.009775349,
      0.022265373,
      -0.0099302055,
      0.021476954,
      0.009837348,
      -0.003114284,
      0.0011230542,
      0.010933223,
      -0.029764352,
      0.01538428,
      -0.11679093,
      0.020408064,
      -0.000704024,
      -0.02660762,
      0.011671834,
      0.005374937,
      -0.025786752,
      -0.0023712586,
      0.014244145,
      0.006799176,
      0.0021614463,
      -0.013550949,
      0.024497705,
      -0.025471019,
      0.010289306,
      -0.011641114,
      0.0063907364,
      -0.017747113,
      0.02942131,
      0.009299067,
      -0.0047065574,
      -0.027939696,
      -0.006816947,
      -0.003546886,
      0.010495365,
      -0.006822465,
      0.012004623,
      0.018423997,
      0.015873143,
      -0.006303021,
      -0.01797134,
      0.029209903,
      -0.005347621,
      0.0072370027,
      0.00019297285,
      0.01782334,
      -0.0070918556,
      0.0044638994,
      0.0021794736,
      -0.011100418,
      0.024396986,
      -0.017773008,
      0.009001528,
      0.040049605,
      0.005548611,
      0.029870266,
      -0.00004362658,
      0.001759057,
      -0.016566455,
      0.004401368,
      -0.0069199484,
      0.019003473,
      -0.014204507,
      0.012717179,
      0.018076198,
      0.020875545,
      0.006129416,
      0.008504395,
      0.006791986,
      0.01721335,
      0.008602365,
      0.0013278743,
      0.0013846628,
      -0.01660563,
      0.016235603,
      0.017725972,
      -0.0016620471,
      -0.015751738,
      -0.017327255,
      0.0027114993,
      0.0030204179,
      -0.0070119863,
      0.021786695,
      -0.022913396,
      -0.0054261014,
      0.005031664,
      0.03595126,
      -0.0119110225,
      -0.025446786,
      0.030600822,
      0.037768077,
      -0.011824183,
      -0.0053593256,
      0.007230549,
      0.007176413,
      0.016384082,
      0.00801444,
      -0.008348375,
      -0.001331976,
      -0.021340935,
      0.014048191,
      0.01656976,
      -0.020447182,
      0.0049905214,
      -0.03384026,
      -0.013845948,
      -0.018008988,
      -0.014844271,
      -0.018704565,
      0.021001687,
      -0.028928453,
      0.009564363,
      -0.020180847,
      -0.007214559,
      -0.005201216,
      -0.01181849,
      -0.0014297052,
      -0.0064054043,
      0.011294003,
      -0.03240797,
      -0.002878274,
      -0.0084068095,
      -0.007979883,
      -0.009926076,
      -0.028777473,
      0.018151717,
      0.009131914,
      -0.005820058,
      0.019668508,
      -0.013222918,
      -0.0022606938,
      -0.007239775,
      0.008382315,
      0.0116238175,
      -0.01283605,
      0.009593594,
      -0.014674673,
      0.0096446965,
      -0.023549305,
      -0.041563693,
      -0.029622577,
      0.042163532,
      -0.033276707,
      -0.014559131,
      -0.0011703164,
      0.0032459493,
      0.017514804,
      0.0363843,
      0.012809426,
      0.0037712948,
      -0.0057323086,
      0.02328552,
      0.006653518,
      0.0032739958,
      -0.017565187,
      0.03192692,
      -0.009880187,
      -0.009927792,
      -0.006237965,
      -0.011931586,
      -0.018108232,
      -0.015891567,
      -0.0067490223,
      -0.009748229,
      0.006664907,
      0.009981302,
      -0.0018508935,
      -0.016633375,
      -0.0060321717,
      -0.012508647,
      -0.012829741,
      0.003614285,
      -0.024638014,
      -0.0033420073,
      0.029439429,
      0.010952356,
      -0.019068388,
      -0.007199594,
      0.0074728634,
      0.004108627,
      -0.009652421,
      -0.0114604365,
      -0.028727803,
      -0.0014705332,
      0.020697922,
      0.0073466944,
      0.019877674,
      -0.006398865,
      0.031875994,
      0.00045281387,
      0.022525292,
      -0.0011199017,
      -0.005697962,
      -0.001187985,
      0.007575464,
      -0.0018134435,
      0.025343195,
      -0.0046663024,
      -0.032820188,
      0.010944479,
      -0.005928476,
      -0.014711534,
      0.00756242,
      0.012005984,
      0.0051080994,
      0.030698702,
      0.021985281,
      0.001036224,
      -0.009417094,
      0.023171967,
      -0.0016764647,
      -0.008451163,
      0.009589784,
      -0.0060790745,
      0.021186268,
      -0.0076178876,
      -0.011255467,
      -0.022933526,
      0.0040693968,
      0.008018089,
      -0.01675059,
      0.003147514,
      -0.013402618,
      0.004879019,
      0.024411486,
      0.031411905,
      -0.008046426,
      -0.00027433728,
      -0.033755142,
      0.0046685417,
      0.011995185,
      -0.016781602,
      0.008832658,
      -0.005139199,
      0.008788089,
      -0.00056134094,
      -0.0016007801,
      0.005250096,
      -0.007235885,
      -0.007961204,
      -0.0090784645,
      0.0031316075,
      -0.0138848815,
      0.0131193735,
      -0.044408888,
      -0.004333723,
      0.017303096,
      0.02555247,
      -0.011621346,
      -0.002516924,
      0.011946626,
      -0.024065387,
      -0.016460465,
      0.009888054,
      0.017056981,
      0.010446303,
      0.030033823,
      -0.007356481,
      -0.007803919,
      -0.024162149,
      -0.02110799,
      0.017265648,
      0.0006709633,
      0.004015408,
      0.0023395359,
      0.040362384,
      -0.007869796,
      0.0030503834,
      0.017928358,
      -0.010923279,
      0.0392936,
      0.021588441,
      -0.001037093,
      0.006692458,
      -0.0040365392,
      -0.030207613,
      -0.01432747,
      -0.0038553826,
      0.007269991,
      -0.13428958,
      0.000028001934,
      0.0066379504,
      -0.0048951274,
      -0.010280427,
      0.0023475713,
      -0.019752422,
      -0.031011315,
      0.0031679247,
      -0.00094221684,
      0.01892975,
      -0.0091299005,
      -0.0009895635,
      -0.028241543,
      0.007408315,
      -0.0090086255,
      0.0052774576,
      0.012588759,
      0.028698416,
      -0.015872017,
      0.00491289,
      0.014320983,
      0.00020335487,
      0.004723846,
      -0.0046704886,
      -0.013201176,
      -0.00345513,
      0.01274222,
      0.00596723,
      0.00623979,
      -0.046005283,
      0.00762995,
      0.0011759014,
      0.008984967,
      0.0077156452,
      -0.021418827,
      -0.013431325,
      -0.0010856638,
      -0.007096379,
      -0.004860994,
      -0.00033307305,
      -0.010906732,
      0.017391685,
      0.0077327285,
      0.00022346746,
      0.0078911735,
      0.023513982,
      -0.016057175,
      0.0025250195,
      0.014793975,
      -0.037118692,
      -0.01948101,
      -0.004727048,
      -0.02257094,
      -0.017342808,
      0.0077778036,
      0.006690765,
      -0.003783935,
      -0.003281838,
      -0.020966211,
      -0.004018844,
      0.007708904,
      0.020115355,
      0.027289033,
      0.009293574,
      -0.012130997,
      0.024777988,
      0.007914889,
      0.013580184,
      -0.00032719612,
      -0.014609708,
      0.024368405,
      0.0013498109,
      0.022332782,
      0.029866168,
      -0.0016716657,
      0.017049631,
      -0.0024996705,
      -0.00018569201,
      -0.0028714424,
      -0.014583308,
      -0.02079176,
      -0.059813097,
      -0.01982397,
      -0.004216541,
      -0.004344261,
      0.0015813222,
      0.018284285,
      -0.0142431045,
      0.00078536913,
      0.009315145,
      -0.01810869,
      -0.025926815,
      -0.016429933,
      0.030814901,
      0.020612247,
      -0.0060590217,
      -0.0044218465,
      -0.0132070705,
      -0.009272236,
      -0.014284054,
      0.009502434,
      -0.020559257,
      -0.008864655,
      0.0040215272,
      -0.022188745,
      0.0074365824,
      -0.0012702583,
      0.00052706065,
      0.007947972,
      0.0160199,
      -0.008772732,
      0.0012000289,
      -0.15640025,
      -0.0021019725,
      -0.0025260316,
      0.0013608492,
      -0.008995267,
      0.008059511,
      -0.015428661,
      -0.02417804,
      0.008207044,
      -0.0025268216,
      0.00605265,
      -0.011685693,
      0.010563087,
      0.006704659,
      0.041231263,
      0.12850411,
      -0.007899056,
      0.0026030398,
      -0.026507081,
      0.017970918,
      -0.008861977,
      -0.014816445,
      -0.022327302,
      0.010912199,
      -0.014669509,
      -0.011774328,
      0.00360562,
      -0.0033404178,
      0.0075512547,
      -0.009178556,
      -0.009906912,
      -0.0042782077,
      0.01221999,
      0.027952835,
      0.006048094,
      -0.01235455,
      -0.0016048548,
      0.026156742,
      -0.021742402,
      0.009768334,
      0.024690337,
      0.010484466,
      -0.011076011,
      -0.001519845,
      0.01624323,
      0.003570542,
      -0.008785517,
      -0.016894167,
      -0.00322387,
      -0.009742139,
      -0.037222784,
      -0.06144571,
      0.0019974867,
      -0.006470426,
      -0.007941286,
      0.022815384,
      0.0071919463,
      0.021173976,
      -0.0005472384,
      0.01932855,
      -0.023013648,
      -0.0007196333,
      -0.010063415,
      0.00019758621,
      0.0075650644,
      -0.0013186793,
      0.0009184365,
      -0.0008303232,
      0.028662687,
      -0.004845407,
      0.015738742,
      0.017828839,
      -0.010004792,
      0.011050631,
      0.0034134758,
      -0.005096277,
      -0.026051566,
      0.03521001,
      0.0068415175,
      0.00055109704,
      0.010980846,
      -0.0039311238,
      0.014096095,
      -0.024260119,
      0.010994526,
      -0.011211684,
      -0.02180065,
      -0.0075733005,
      0.0058691553,
      -0.008400373,
      -0.0042636986,
      -0.0048426664,
      -0.006255347,
      -0.0033622482,
      0.011091295,
      0.0058753984,
      -0.005546178,
      -0.00979697,
      0.0147844935,
      -0.012319488,
      -0.016640913,
      0.007483434,
      -0.009201912,
      -0.026823962,
      0.02294895,
      0.00972643,
      -0.0029903871,
      0.0237072,
      -0.0018453985,
      -0.015035996
    ]
  },
  {
    "id": "genai_cohort_python_09_Walrus_operator_is_interesting_in_python_vtt",
    "content": "All right, so in the last video I said that we are done with the loop section, and that is absolutely correct, we are done with the loop section. But I have these two topics which I want to discuss and I didn't want to create a fresh new section just for the two topics, so I thought it would be bad idea. So instead I will just introduce them in the loops itself. It has nothing to do in the context of the loop itself. These are standalone operator, kind of newly introduced in the world of Python. But now we cannot call them as new. They are pretty much here for a really long time. The first one we are going to talk about is the Walrus. The second is not even operator, just the style of writing the code, especially the Python code. So the walrus operator, you will see this quite a lot these days. It looks like the colon and an equal sign. I will give you the entire history workflow as well as some of the examples of it. But first of all, let's understand, there are certain things in the Python. For example, in Python an assignment like x equals 5, is a statement. Remember this is a statement, it sets something, it doesn't return a value. An expression on the other hand is something that returns a value. For example, if I go ahead and say three plus three, this is an expression, so this actually returns a value. This is going to return us the value six. So, so whoever returns us a value which consider that as an expression. So this is going to be the output here. We are just assigning the value, so it is just a statement. So always remember that this will serve us a little bit purpose in this here. And now for the Walrus operator I'll take you on to the code part because that is much easier than just discussing it. Up here I'll create the new file in the loop itself. I'll call this one as and we'll call this one as Walrus Py. Okay, first of all, let's see that what happens when we don't use the walrus again? Nothing happens, you just write your code. Just like that. For example, let's just say we have a value 13, it's just a number and we also want to have a remainder, so remainder. So we can pretty much easily see that if the value is modulus by 5, we get the remainder, whatever the value is. And let's print out a simple statement. If we have a remainder, we want to print this up. So we'll just go ahead and say print Just like this, a formatted value and we'll say if we have a remainder that means not divisible, obviously it's not completely divisible. And we'll say remainder is. And whatever the value of remainder that we get, pretty simple program, no big deal. I'll comment out a lot of code in this entire program. So this is be aware of that part. I'll go ahead and run the python with the and we can see not divisible, the remainder is Obviously when you divide by you get as a remainder. Now how can you write the exact same program when we have the Walrus operator? Let's convert this exact same program and again this is an easy way select all of them, press control/uh or command/on a Mac and it will just comment out everything. Let's rewrite this exact same program so we have a value which is Now previously we calculated the remainder in a separate line. Then we tested out remainder. But here what we can do is I can just put out this if statement and then I use a parenthesis because I'm evaluating something. An expression will be here. So I'll just use a variable directly that says remainder. And as you can see we cannot use it, it's giving us error. But with the help of Walrus operator I can just use it just like this and I can say value simply moduled by and then I can just keep on writing my code and I can actually go ahead and use this exact same line just right here and uncomment that. And There we go. So we can just, we see that exact same program can be shrinken down a little bit. And what we saw that we first calculated the remainder We found this expression's value and stored that into a variable and then we evaluated the variable. This all can be done just right up here. So this is going to be an exact expression value? Yes, this is little bit shorter version of it. It works fine. Let me show you by doing that also. So if I clean this, run this again, it says not divisible, remainder is So yes, this is a pretty interesting operator. Now not only that, through this operator you can actually work in a pretty interesting ways. It's little hard to digest that. Okay, and by the way, what happens if you go ahead and just don't use walrus here? If I don't use a walrus? You can see we have whole syntax error. Let's see what syntax it says. It says this was not closed. Yes, we are closing this. No problem there. And you're going to see the errors are not easy. Even if I remove this kind of a thing, you're going to see this is still not that remainder is not defined and you cannot actually go ahead and have the value here. What are you trying to do? This is not an allowed syntax, but with the help of Walrus Operator, you, do all the things at once. Let's just go ahead and read a little bit of the docs as well. So I'll just go ahead and move at the very top and hopefully I'll be able to search for it. Can we go ahead and search for it? Walrus? Nope. I guess Google would be a good one to search for it. So let's just say walrus and the reason why I am taking you onto the documentation website so that you develop a small habit of seeing what happens when you study the real documentation or from the original documentation. So it recently came in the Python and you're going to see, this is a walrus, the eyes and the tusk of a walrus, just like this. So they have this whole thing available to us and you get the idea. So pretty simple and pretty easy to work on with and the part is pretty clear, they mention it pretty nice and easily. What we just saw there is a new syntax that assigns the value to a variable as a part of larger expression. Remember, that's exactly why I told you this is a statement, this is an expression. So notice here, this whole thing is an expression, not this whole, this whole thing is an expression. And this will deliver the value here in the remainder. But the moment you actually go ahead and use a walrus, then you actually allows it to be used just like that. All right, so as you can see, it not only gets that, but now it gets a value. So pretty interesting. And I'll show you some of the other use cases as well and you will have fun with this. So, all right, we'll keep it as it is. Let me go ahead and create another example. I'll say available sizes. So you have some of these sizes available to you, and the first one is small, then we have medium, of course, and then we have large. So these are sizes of T cups maybe. And then we want to check whether these are available or not. And user is requesting this. So previously what we do, we create an input variable or some kind of a way to take the user input just like that. But with the help of Walrus Operator we can actually Go ahead and shrink this all. So we can go ahead and call this one as requested size or requested size by user. So I'll just go ahead and say request size. And I can use walrus operator here and use an expression just like input. I will take the user input just here and I will say enter your chai cup size just like this. And on top of this, once we have this requested size, I can actually go ahead because this whole thing is going to be evaluated. Let me just go ahead and get more space. And now just here I can use in which is in checker of available sizes. And based on this I can just go ahead and print it, whatever I want to print. So for example, I want to print like this and I will say serving requested size chai. That's nice. And surely I can go ahead and use an else operator. If somebody request us something other than this, we can just go ahead and say, hey, I want to print just like this. And I will say size is unavailable. And I'll still just want to see that whether I get the access of this, requested size here or not. Obviously I get. But I just wanted to print this out. So let's just go ahead and run this. And it's a pretty interesting one. Let's go ahead and run this. It says not divisible chai is remaining three. That's from above. Let's just say I get a chai of test. Give me a tester. I enter, it says size unavailable tester. Let's run it one more time and let's just say I ask for a small chai and say serving small chai. So you can see it's a pretty interesting way of writing the code in itself. I wouldn't say that it's super easy to work on with, but hey, it's a pretty fun way of doing the things just like that. So pretty fun to use walrus operator. Let's go ahead and finally write, one more interesting aspect of this and it's going to be a pretty fun one. So let's just write one more of the piece of code for this one. Let's just say we have flavors, in our shop we have a lot of flavors available to us. One is masala, a lot of teas that we serve throughout the course. You might have noticed the theme that we use, for the chai. So we have masala, we have ginger, we have lemon, my favorite one, and mint as well. So what I want to do now is based on the Flavors. First of all, I want to give this message to the user. Hey, these are the available flavors that we have in front of us. So I'll just use a classic one and I will say away. Label. Flavors. Flavors. Did I wrote it correct? Absolutely not. So flavors. And I've been writing this all along wrong. Excuse me for that. So available flavors. I can just put up a space or a colon like that and we can just go ahead and say flavors. All right, so we have printed a message to the user. Now I want that user should actually, be stuck in a loop and choose the only flavor that we showed us. And we don't get away. We just keep on asking that, hey, choose another flavor or this is not available or something like that. So we can run an infinite kind of a loop. But this time instead of just saying while true so that it always keeps on going, what I can do is I can just go ahead and say, hey, I will go ahead and say flavor, not flavors. And I'll use a walrus operator. This is going to be fulfilled by an input value. And we'll go ahead and say choose your flavor and we'll just accept the flavor. And not only that, we are going to check it immediately. Not in flavors. So there we go. If it is not in the flavors. This is a very strange syntax. I know. First time it. It bothers a lot of people that, yeah, I kind of forget it, but I'm not fully understanding it. And that's okay. Feeling totally okay. Not a lot of people use this. So we'll just go ahead and say sorry and whatever the flavor you are asking is not available. Is not available. If I can write that. Available. There we go. And once we are done with this loop, we can just get out of it and we can just print it and we will use the formatted string just like this. And we'll say you chose whatever the flavor he is choosing. So I still have an axis of this and we'll just say chai. Now one thing I want you to pay small attention here is this is a part of loop, this line number But line number is not part of a loop. What I usually try to do is just separate them out a little bit so that it makes sense. Okay, this is a loop. This is outside of a loop. Again, you can keep it on the line number as well. But I don't like it. So for this part, let's go ahead and comment out this whole piece of code. Don't want extra information so we just want to see the, walrus operator working in the loop itself. Let's go ahead and run this. I'll clean this. Run this again. It says, available flavors are masala, ginger, lemon and mint. But somehow I want, maybe. What else? Oolong tea. So I say, sorry, oolong is not available. All right, it's okay. I would choose Masala. And it says, you chose Masala tea. And our program exited. So this is pretty nice and pretty interesting way of working through it. So, as I mentioned, this walrus operator is just an alternative way of writing the code. It just makes your one line shorter of the code. You could have taken this input in the separate line and then could have evaluated here. But here you are allowed to take the input on the go as well, which is very, very strange for seasoned Python developers. But I have to teach it it exists and I want to discuss that. So that is it for this video. Hope you have enjoyed this, and let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "09 Walrus operator is interesting in python.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/09 Walrus operator is interesting in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.019275133,
      0.006471644,
      0.02088311,
      -0.06423298,
      -0.013050821,
      -0.016108751,
      0.011227412,
      0.019749485,
      0.013498615,
      -0.010813415,
      -0.020543477,
      -0.022030605,
      0.0026225245,
      0.017821645,
      0.12598273,
      0.021290764,
      -0.012357853,
      -0.015558504,
      0.006821165,
      -0.01709677,
      0.00025411794,
      -0.00032422497,
      0.005344836,
      -0.013055257,
      0.0031854156,
      0.0019916713,
      0.026907405,
      -0.009451503,
      0.028398445,
      -0.023402685,
      -0.022781387,
      -0.008859344,
      -0.0068280185,
      0.025469285,
      0.0065416466,
      0.014521896,
      0.029685896,
      0.010304375,
      -0.015314992,
      0.0004183711,
      -0.009810749,
      -0.003117272,
      0.007837233,
      -0.005466791,
      0.013114244,
      -0.01421941,
      -0.021386564,
      -0.019753834,
      0.0008486475,
      0.026700899,
      0.009640881,
      0.0026870458,
      -0.02088421,
      -0.1785082,
      -0.00914061,
      0.0026660534,
      -0.007289158,
      0.012706807,
      0.006780914,
      -0.007926511,
      -0.0041988594,
      0.0008869762,
      -0.02152244,
      0.006600074,
      -0.016608741,
      -0.01972714,
      0.0045214165,
      -0.009058476,
      -0.009227097,
      -0.013679812,
      0.02895882,
      0.012790865,
      -0.016817644,
      -0.009487395,
      -0.009913897,
      -0.036464952,
      -0.012743158,
      -0.013956499,
      -0.020551568,
      0.016826948,
      0.0058781495,
      -0.015451558,
      -0.006225443,
      -0.0024022516,
      0.008059097,
      -0.0033348075,
      -0.04050656,
      -0.022604976,
      0.0020211667,
      -0.007653906,
      -0.027712775,
      -0.009868693,
      -0.010786448,
      0.007551779,
      -0.016957264,
      0.014567502,
      -0.011440925,
      0.008610533,
      -0.015750796,
      -0.0009314147,
      -0.0026023246,
      -0.009395755,
      -0.0060487855,
      0.011456834,
      0.0035784305,
      0.0152411135,
      -0.0027907805,
      -0.018633936,
      -0.0074970126,
      -0.0018332149,
      -0.016483517,
      0.0041445093,
      0.00073581183,
      0.032709904,
      0.02363098,
      -0.1653156,
      -0.008784737,
      0.00024951674,
      -0.00021122374,
      0.009871475,
      -0.0047846218,
      0.0124681955,
      0.00870524,
      0.012564187,
      -0.00826733,
      0.030342864,
      0.0057019657,
      0.02707935,
      -0.0057125236,
      -0.0046266895,
      -0.044042625,
      -0.00089155283,
      -0.008096006,
      -0.0022713512,
      -0.009411129,
      0.027978422,
      0.0004122605,
      0.0036184574,
      -0.042250447,
      0.004931193,
      0.0025618798,
      0.005453351,
      -0.024890015,
      0.03592289,
      0.009349589,
      -0.001198075,
      -0.0073300526,
      0.008935137,
      -0.00846414,
      -0.02889385,
      -0.0009860587,
      -0.01792888,
      0.0033742953,
      0.008576024,
      0.0061008725,
      -0.026786335,
      -0.010794719,
      0.01978004,
      -0.012767264,
      0.0012470479,
      0.0037540288,
      -0.013661477,
      -0.0029383425,
      0.0003212353,
      -0.012769942,
      -0.009990983,
      -0.009046009,
      -0.013408004,
      -0.0043495907,
      0.01812052,
      -0.002735991,
      -0.023496412,
      0.010290689,
      -0.004820737,
      -0.013282845,
      -0.0053251465,
      0.003347749,
      0.0015847154,
      -0.0065067173,
      -0.021724671,
      0.0119057335,
      -0.014585605,
      0.028736493,
      0.014751408,
      0.00006108196,
      -0.010310614,
      -0.010204124,
      0.037947312,
      0.009744348,
      -0.0038133967,
      0.0016268695,
      0.0036705984,
      0.040168114,
      0.0006190597,
      -0.009687618,
      -0.0054417583,
      0.0016076714,
      0.014141242,
      0.014394398,
      0.019794313,
      0.015716415,
      -0.021248974,
      0.009746246,
      -0.01975166,
      0.0132981585,
      -0.026787166,
      -0.002152323,
      -0.015053006,
      0.023960017,
      -0.011818348,
      -0.00022072576,
      0.0026932969,
      0.0016194934,
      -0.011544194,
      0.025985783,
      0.0020747317,
      0.029922845,
      -0.021575589,
      0.010181616,
      -0.011378818,
      -0.0026166828,
      -0.012079963,
      0.011744821,
      0.02813813,
      -0.00022454304,
      -0.020743294,
      0.012289938,
      -0.0044603767,
      -0.015648022,
      0.019942332,
      0.023973813,
      0.009977541,
      -0.005438031,
      -0.013828034,
      -0.012478215,
      0.014484487,
      -0.008830618,
      0.02670801,
      0.021186475,
      -0.010869188,
      0.010853055,
      -0.010785132,
      -0.013062577,
      0.0060631814,
      0.028247269,
      -0.0066040014,
      0.0020062826,
      -0.0017639642,
      0.014774469,
      -0.018252602,
      -0.015367052,
      -0.012939771,
      0.012695582,
      -0.03110242,
      -0.004971879,
      -0.010884617,
      -0.022583095,
      -0.012886344,
      -0.0038957456,
      0.006424069,
      -0.01247703,
      -0.03191617,
      -0.019394675,
      0.0044368505,
      0.02379363,
      -0.013807742,
      -0.0012342954,
      0.039658297,
      -0.031754516,
      0.019769564,
      0.021317625,
      0.008990104,
      0.026437726,
      -0.0060345624,
      -0.01505819,
      0.016465006,
      -0.09207804,
      0.027487807,
      0.017966567,
      -0.009221664,
      0.009267762,
      0.015419598,
      -0.006936934,
      0.008926466,
      0.010892827,
      0.0032381245,
      0.0038509383,
      -0.006268512,
      0.015512751,
      -0.014711265,
      -0.0039625894,
      -0.0047730734,
      0.00011836019,
      -0.010444825,
      0.02538914,
      -0.005462915,
      0.0081700785,
      -0.017800707,
      0.009688102,
      -0.002522885,
      0.018246638,
      0.01156875,
      -0.0076276725,
      0.02438602,
      0.00460535,
      -0.0014895995,
      -0.013361737,
      0.032374036,
      -0.020097116,
      -0.007502497,
      -0.010224232,
      0.015806926,
      -0.0017444737,
      -0.0026884105,
      0.0018658387,
      -0.016739702,
      0.027585203,
      -0.0013117502,
      0.015230821,
      0.0359182,
      -0.0027486407,
      -0.017184349,
      -0.00023010424,
      -0.008872256,
      -0.01005797,
      0.0021115663,
      -0.002635734,
      0.008598114,
      0.0022679984,
      -0.026368286,
      0.018918449,
      0.0033032855,
      -0.0008193374,
      -0.012040755,
      -0.0061226217,
      0.0050002444,
      0.009169749,
      0.017664228,
      0.0034431508,
      -0.029407151,
      -0.0005624649,
      0.0112449555,
      0.018061979,
      -0.018594887,
      -0.030692542,
      0.0019496222,
      0.00015382773,
      -0.010719566,
      -0.013879096,
      -0.026430974,
      0.013881475,
      0.0004973172,
      0.024087133,
      -0.028867641,
      -0.022232996,
      0.014922881,
      0.014674376,
      -0.017019827,
      -0.0064512123,
      0.0016011705,
      0.014258239,
      0.0033391286,
      -0.010162767,
      -0.017051276,
      0.0006747288,
      -0.023681082,
      0.0078674,
      0.008452153,
      -0.031153848,
      -0.012417022,
      -0.008499138,
      0.027957963,
      -0.008420007,
      -0.024353592,
      -0.024497895,
      0.013207756,
      -0.018579144,
      0.010978192,
      -0.03789116,
      -0.016423699,
      0.006549838,
      -0.004630943,
      -0.032222696,
      -0.01058346,
      0.0005415753,
      -0.014858875,
      0.009950775,
      -0.004237995,
      -0.029583782,
      -0.014616459,
      -0.014106347,
      0.011019781,
      0.01855055,
      0.0005670576,
      0.012760557,
      -0.0036503756,
      0.005174176,
      -0.0020823977,
      -0.009655101,
      -0.011938229,
      0.010555351,
      0.017210677,
      0.002397314,
      -0.0003399658,
      -0.0058065723,
      -0.032033455,
      -0.023253804,
      0.008496468,
      -0.017348802,
      -0.010704879,
      -0.011018662,
      0.012657931,
      0.018939886,
      0.017470995,
      -0.01075185,
      -0.010748449,
      -0.0063648256,
      0.010292929,
      0.0042711166,
      -0.006286288,
      -0.01446344,
      0.029976226,
      0.0012427515,
      -0.01940019,
      0.0021486166,
      -0.015802596,
      -0.019648435,
      -0.02927074,
      -0.009518171,
      0.0035315214,
      -0.0029521515,
      -0.009353951,
      -0.01164645,
      -0.019912029,
      -0.007966427,
      -0.028025756,
      0.0039050248,
      -0.005460972,
      -0.0025433693,
      0.002445293,
      0.032176502,
      -0.01474311,
      0.0021017285,
      0.008159749,
      0.002099173,
      0.00870273,
      0.0057901656,
      -0.005551061,
      -0.03196381,
      0.0036776718,
      0.023633352,
      0.00030750924,
      0.021739252,
      0.018568203,
      0.02479942,
      0.027056204,
      0.003594957,
      0.008084974,
      -0.02102573,
      0.013949707,
      0.009569901,
      -0.014045939,
      0.010690125,
      -0.01646226,
      -0.028981447,
      0.009981062,
      0.008274975,
      -0.011014702,
      -0.0033522965,
      0.022467004,
      -0.0029894721,
      0.0358334,
      -0.0044962205,
      0.0066025383,
      -0.002336277,
      0.028801352,
      -0.0011438658,
      -0.011537395,
      0.00024679056,
      0.014389856,
      0.015406912,
      0.001353899,
      -0.009576084,
      -0.026744653,
      0.0008632657,
      0.019461522,
      0.00084962323,
      0.0010997428,
      0.006492056,
      0.01578292,
      0.007880075,
      0.023889227,
      -0.022931598,
      -0.019045897,
      -0.03076016,
      0.015495795,
      0.00005127612,
      -0.01268262,
      0.009387497,
      0.006191706,
      0.0005417505,
      -0.013422974,
      0.011759775,
      0.0017509565,
      -0.0075720404,
      0.009678185,
      -0.0016789562,
      -0.008088868,
      -0.0120114945,
      0.020823183,
      -0.026522856,
      -0.0018833623,
      0.017331729,
      0.03615885,
      -0.022156354,
      0.014939511,
      -0.00875123,
      -0.019629918,
      -0.0130609125,
      0.0036058987,
      -0.021476459,
      -0.0036660885,
      0.010424434,
      0.004092325,
      0.0016598239,
      0.0014249953,
      0.008231063,
      0.009628516,
      -0.012222116,
      0.007704537,
      -0.018673168,
      0.040660053,
      -0.009496442,
      0.01152534,
      0.0017631486,
      0.012088635,
      0.026497519,
      0.011287543,
      0.0006885688,
      0.012063151,
      -0.007616094,
      -0.02500784,
      -0.0054344987,
      0.000009124664,
      0.006762947,
      -0.14119588,
      0.0018666639,
      -0.015553163,
      -0.0057399822,
      -0.010895392,
      -0.011776527,
      -0.018073944,
      -0.010092544,
      0.010969691,
      0.011953081,
      0.043013494,
      -0.0089277215,
      0.0014351537,
      -0.0047453116,
      0.014305435,
      -0.025930976,
      0.021665495,
      -0.0024432715,
      0.038504355,
      -0.015839864,
      -0.002305717,
      -0.007223706,
      0.0067705945,
      0.008204274,
      -0.0094307475,
      0.0011290336,
      0.010798928,
      0.024938202,
      0.0001703758,
      -0.009544356,
      -0.026800867,
      0.011357336,
      -0.00010748815,
      0.014922862,
      0.017498719,
      -0.0030974348,
      -0.014656666,
      0.031969562,
      0.008956969,
      -0.0039628833,
      0.016928729,
      -0.0050671333,
      0.018288368,
      0.00937648,
      -0.014815455,
      0.0133488225,
      0.036831826,
      -0.0074190632,
      -0.006674243,
      0.021976147,
      -0.041258406,
      -0.003927789,
      0.002348252,
      -0.029975709,
      0.003883445,
      -0.0024661003,
      0.004265013,
      -0.005937326,
      -0.01739134,
      -0.015423869,
      -0.0048135608,
      0.012518535,
      0.025652735,
      0.015028456,
      0.020788515,
      -0.0035462328,
      0.031412452,
      0.014619132,
      0.010731114,
      -0.016264943,
      -0.013883347,
      0.0091471905,
      0.0103791645,
      0.004820382,
      0.000087369684,
      -0.010779781,
      0.005045011,
      0.0010499714,
      0.0060205623,
      0.002834942,
      -0.023270173,
      -0.022699831,
      -0.05525795,
      -0.012951835,
      0.011365996,
      -0.0041735526,
      0.0050506582,
      0.0055536297,
      -0.0033077141,
      -0.0018833162,
      0.010982445,
      -0.0023832335,
      -0.034924906,
      -0.00074078597,
      -0.0077452874,
      -0.0050352872,
      -0.007820513,
      0.0018574662,
      0.0059612715,
      -0.016467754,
      -0.0025476764,
      0.009160756,
      -0.005170686,
      -0.009933406,
      -0.0021696931,
      -0.02535647,
      0.007951122,
      0.012343492,
      -0.02591551,
      -0.00041676694,
      -0.007495399,
      0.025037725,
      0.024380857,
      -0.14773907,
      -0.013687101,
      0.0017092242,
      0.009890633,
      0.005468529,
      -0.009157198,
      -0.010824392,
      0.0013392379,
      -0.0007845887,
      -0.010429717,
      -0.0154600125,
      -0.017913276,
      -0.020763936,
      0.0031871505,
      0.013502493,
      0.14419481,
      -0.0149031365,
      -0.0028715888,
      -0.013833765,
      -0.007183602,
      -0.003106853,
      -0.009123092,
      -0.015718134,
      0.02221897,
      -0.006966008,
      0.0034941041,
      0.0022060822,
      -0.009889586,
      0.0031346625,
      0.006111172,
      -0.020661095,
      -0.002881534,
      0.013272465,
      0.012173365,
      -0.014762447,
      -0.014994903,
      0.0067612655,
      -0.0022119873,
      -0.007626788,
      0.01210318,
      0.013944421,
      0.0076993923,
      -0.010447383,
      0.0064273216,
      0.025893277,
      -0.0063325292,
      -0.018393017,
      -0.009249171,
      -0.0022042172,
      -0.0039342637,
      -0.034766696,
      -0.07077232,
      0.0133907525,
      -0.026944416,
      0.0073994827,
      0.024054453,
      -0.016663173,
      0.017123094,
      0.006755728,
      0.030158706,
      -0.01830553,
      0.0058053774,
      0.010983671,
      0.0050111413,
      0.017064678,
      -0.010328495,
      0.020372272,
      0.008364079,
      0.010543638,
      -0.012620361,
      0.0014887662,
      0.009175746,
      0.0015099932,
      0.019810924,
      0.013950743,
      -0.02538326,
      0.013318467,
      0.0073500816,
      0.018344944,
      0.011360197,
      0.007070463,
      -0.009389236,
      0.016271528,
      -0.01649241,
      0.013770444,
      0.006335118,
      -0.010703816,
      0.019233191,
      0.011637868,
      -0.012080812,
      -0.009219911,
      -0.012652312,
      -0.016023347,
      -0.015777642,
      -0.004748309,
      0.0071127363,
      -0.0038022106,
      -0.0056136935,
      0.030023241,
      0.020569468,
      -0.018325452,
      -0.020648405,
      -0.016803512,
      -0.027866248,
      0.007996482,
      0.011305582,
      0.00071540236,
      0.008951862,
      0.008612302,
      -0.01401236
    ]
  },
  {
    "id": "genai_cohort_python_10_Dictionary_in_place_of_match_case_vtt",
    "content": "All right, so one more example. And again, this is a way of writing code. This is not a new topic. This is how some people do it. And the reason of the whole series is to make sure that you don't just mindlessly write just the loops and functions and conditionals. You understand what it takes to write the industry level code, production ready code. So one of the common practice that you're going to see is people use dictionaries instead of repeated cases. We saw that we can actually, This whole problem that I'm going to show you can be done via the if statements as well. Can be done by the match cases as well. Whatever you want to use, you can actually use it. But I will show you a very interesting example for this which uses dictionary. So again this can only be shown in the code part. There is no point of discussing the theory of it. So I'll just go ahead and say and this will be dictionary, case, just a file name. Don't bother too much about it. All right, so let's just say we have a users and this is just a list, ordinary list. Inside the list we have a sum of the key value pairs. So this is how we define the dictionary, the key value pair. Each one of them gets an id. So let's just say this is ID one and then we get another key which is total pretty simple. No problem there. Hope there is no issue with this. And we get the total of And then finally this guy gets a coupon code and everybody gets a different coupon code. Let's just say the coupon code that he is using is going to be P It could be any coupon code. No problem there. And again, this needs to be a string. So I'll just go ahead and change this into a string. I hope there is no issue with this really simple example. And we need just three copies of it. So we'll just go ahead and change this one. So this one will be two, this one will be three. Let's change the values as well. This gets and Whatever you wish to have. This one is F The first one is P Let's keep all of our coupon codes in uppercase. Makes sense. Most of the coupon codes are usually in the uppercase. It's easier and we just go ahead and say P All right, now we don't have a mapping of how the coupon code works. So I have no idea what P20 means. I don't have an idea of F10 means all of this. So for this I'll go ahead and I can definitely use if else case. I can go ahead and use match cases for this one but I'll instead use discounts as a dictionary. So this is a dictionary and for this dictionary I'll mention that hey, we have created a Coupon which says P20 and some of the coupon have a discount value. Some of them have a flat value. Like you have seen flat rupees off or flat rupees off while some of them gets a discounted like 10% off, 20% off. So let's just say for this one we get uh. and this is a percentage off and we don't give any of the flat discount. Maybe we can give both as well. Right now that's not the goal. Another coupon code that we have is F This one gives again let's just say 50% off and we have another one which is P This one gets a flat off. So you get a here or does means the same and this gives a flat rupees discount. Now you have to process this whole users and give them discount based on the discount. Now surely you can do a case that hey if the case matches with P20 I'll give you the discount like this. But this is a very real world scenario. This is a very real world situation. This is how a lot of coupon codes are designed. This is how you get the value from the database, all the values and, and you have to process this how you're going to do that. Surely 100% this can be done. But there is an interesting way of handling this and this is just a piece of pure code, no extra operator or anything like that. So I can just go ahead and say for user in users, that's the part once. All right, we are looping through all the users. I hope there is no problem in it. Now once I'm looping into this now next thing that I want to do is find out what are the discount values into it. So what I'll do is I'll take so notice here. This is a tuple. This first part will give me percent, the second part will give me flat or fixed, whatever you want to call this. I will call this one as percent and this one as fixed. How you're going to extract the values, pretty simple. I'll just say discount and in that you can use a lot of methods. I'll just say get, which allows me to get a specific key. And the key that I'm going to provide is going to be the coupon. All right, let's use all lowercase coupon. So discounts gets a coupon. And we don't want to get just like this, like coupon. This will give me nothing. So I want to go inside this. So notice here I have the access of this user. This user means this whole access property. And what I want to access is this coupon. So again, let me just remove this. So inside this get again by the way, wrong asset. Let me try it one more time. I have this get, which is a method. All right, hope that's clear now. And now I want to access this user. Each user looks like this. So I'll just say hey user, what property you want to access? Because it's a key value pair. Now I'll use square brackets and I will say coupon. Make sure you don't do any typo. This is the property we are looking for. So now we have access to this coupon. And once you have this I can just go come up here. So just after the discount you have grabbed, the get value. Now in here through this notice here, we are still getting this one discounts. So ultimately the return value you are going to get. This is bit interesting is going to be just like this and we are going to put 0, comma So this is the default value. So if nothing we are able to grab, this is something that we'll get in the percent and discount. So there is no discount, nothing like that. What in the case when there is no coupon. So this is the value which takes care of that. If there is no coupons or you are not able to access this key, then the percentage is zero and the fixed is zero. That is all very, very strange syntax. But just wanted to get you through with this one. Now how can we calculate discount based on this interesting question, but it's now a math question. So we'll just go ahead and say the discount that you are getting is again whoever is the user and we want to access the key of total. Remember the total. Yep, that what I get. And in that we are going to multiply it by percent and we are going to add a fixed one. Maybe we have both, maybe we don't have both. And then finally we have the discount calculated. So you can subtract between the total and all these things. I'll just print out a statement because I want to see all the values so you can do the math calculation of subtracting. Pretty easy. I will just go ahead and say I want a user and not any user. I want to get the ID of it. So I'll just say id. So make sure you mention the key and once we have this so I'll just say paid. Next key will be user. Again the key that I want to access is total and we'll get out of it and got discount for next visit of rupees and then we simply go ahead and put up a discount. There we go. So I hope this is a little bit of a too much but this is the real world code. I don't want to show you just the toy applications and the toy projects. Sometimes it's a lot. But I hope you get this what we are seeing and what we have done. So we have got the discounts and we got the get what discounts you want to get. Whatever the value. There could be multiple values repeating and this code will still work. This is highly scalable code. Let's go ahead and save this and try to run this and see if we are doing any good. This is 10th dictionary and there we go. So the one, the ID one we should actually mention the ID but anyways paid and got a discount for next visit of So this is what we have. So this is what we have. got a discount of because it's a 50% off. And the third one which paid got a discount of rupees So hope you can see how scalable this code is. We can keep on adding the discount. We don't worry about which code gets it. It needs to have an entry in the discount and then you can give the coupon code to any of the user. So it's a very very interesting point of how this is being done. I hope you got the idea of this. So pretty nice, pretty interesting part of it. Hope you all got it. That is it for this video and let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "10 Dictionary in place of match case.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/10 Dictionary in place of match case.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.002005766,
      -0.012945106,
      0.014736458,
      -0.050041527,
      -0.037556995,
      -0.015111496,
      0.00041639007,
      0.028332086,
      0.0030294082,
      0.014763754,
      -0.009404993,
      0.0044473726,
      0.021937445,
      0.0120999105,
      0.110855184,
      0.012189255,
      -0.0059698224,
      -0.0012095827,
      -0.010522618,
      -0.01538308,
      -0.00013598724,
      0.004654627,
      0.012368485,
      -0.028296556,
      0.020923847,
      -0.0048915576,
      0.00041987732,
      0.003170379,
      0.014571698,
      -0.008605576,
      -0.0059533324,
      0.0048978846,
      0.020513885,
      0.03164942,
      0.012674606,
      -0.0022413633,
      0.0059677726,
      0.008088521,
      -0.015087254,
      0.0071336776,
      0.0031453895,
      -0.008612811,
      -0.007317087,
      0.022205641,
      0.024927232,
      -0.0109003475,
      -0.011949335,
      -0.014789572,
      -0.016359162,
      0.016987598,
      -0.0012917281,
      -0.018084293,
      0.0073434263,
      -0.18311372,
      0.025857512,
      0.00628184,
      -0.017054757,
      -0.0038392486,
      0.00057709194,
      0.02381782,
      -0.032768466,
      0.032722954,
      -0.036272474,
      0.009396312,
      -0.009814951,
      -0.009015332,
      0.0009447907,
      -0.0011963984,
      -0.0062933518,
      -0.0012668533,
      0.029829215,
      -0.007003234,
      -0.017505119,
      -0.023525357,
      0.0030699933,
      -0.040636778,
      0.010511544,
      -0.027246408,
      -0.024360066,
      0.001670719,
      -0.018378453,
      0.0008018685,
      -0.011411289,
      0.0026429803,
      0.0030639616,
      0.006775491,
      -0.004883912,
      -0.018974666,
      0.007974607,
      0.0038569053,
      -0.011021934,
      -0.01095751,
      0.0097775515,
      -0.007902486,
      -0.03733901,
      -0.0007495069,
      0.0107760625,
      0.0016550618,
      -0.0018715073,
      -0.014125584,
      0.010659917,
      -0.0067986273,
      -0.021716971,
      -0.0014542071,
      -0.004537872,
      -0.009458683,
      -0.010883084,
      -0.018258136,
      -0.0083999345,
      -0.009717466,
      -0.0057464205,
      -0.016060747,
      0.001067134,
      0.019293709,
      0.010684082,
      -0.17459126,
      0.016706433,
      -0.011963703,
      -0.007685145,
      -0.009668237,
      0.0035428114,
      0.0045898785,
      0.00804828,
      0.025108278,
      -0.019974647,
      0.01946429,
      -0.005503806,
      0.00046594074,
      -0.010612557,
      -0.0014653906,
      -0.015877157,
      -0.00553563,
      -0.00424444,
      0.0067951474,
      -0.008580495,
      0.018622754,
      -0.01288096,
      -0.014105577,
      -0.024600236,
      -0.01655873,
      -0.027701564,
      0.024468813,
      -0.015792836,
      0.02030646,
      0.013263257,
      -0.009515195,
      -0.02359365,
      0.01321627,
      -0.025152648,
      -0.02551001,
      0.016865201,
      -0.0054879,
      0.008367848,
      0.009141135,
      0.02623791,
      -0.027085043,
      -0.001375689,
      0.010621474,
      -0.00032666838,
      0.0018361472,
      -0.00396882,
      0.0018213796,
      0.0047464413,
      -0.0016475782,
      0.004209845,
      0.018089851,
      -0.02688697,
      -0.009309515,
      0.020564616,
      -0.002111062,
      -0.017047659,
      -0.005112991,
      0.00080169045,
      0.0061143297,
      -0.007053123,
      -0.009014203,
      -0.007894386,
      0.0076258346,
      -0.000096625976,
      -0.013346039,
      0.006309078,
      -0.016223723,
      0.0080009615,
      0.011004152,
      0.0099113,
      -0.0097318515,
      0.0030670676,
      -0.0063307295,
      0.0073172855,
      0.007999048,
      0.017102601,
      -0.0071577546,
      0.017361075,
      -0.0072316686,
      0.007909431,
      -0.035684787,
      0.0092400415,
      0.008407838,
      0.0035088575,
      0.01563305,
      0.028468562,
      -0.00005453694,
      -0.007089227,
      -0.019062337,
      0.020105474,
      -0.011874376,
      0.024857823,
      -0.032900605,
      0.032788325,
      0.010610951,
      -0.0115070455,
      0.000089810725,
      0.027368212,
      0.0073555503,
      0.0060943216,
      0.0034186814,
      0.013901857,
      -0.00875778,
      -0.0050840154,
      0.008776166,
      0.00007392736,
      -0.00026344956,
      0.024965469,
      0.026844393,
      -0.0010410213,
      0.00052366406,
      0.0119543895,
      -0.016701212,
      -0.009582463,
      -0.013514399,
      0.047372624,
      0.011517381,
      -0.011108979,
      -0.010613329,
      -0.01092339,
      -0.014135398,
      -0.013260094,
      0.028505893,
      0.011667184,
      0.0027823588,
      0.0006727037,
      0.005164519,
      -0.017337529,
      0.012402053,
      0.00967461,
      -0.007107039,
      -0.013993932,
      0.0010559101,
      0.03111898,
      -0.0034170856,
      -0.0036149079,
      -0.0069816387,
      -0.00058328273,
      -0.02137591,
      -0.0004861182,
      -0.0069859703,
      -0.030255012,
      -0.019010907,
      -0.024804901,
      -0.0003245938,
      -0.009230384,
      -0.018053057,
      -0.013311642,
      -0.02307591,
      0.014870209,
      -0.0074909846,
      -0.015409575,
      0.01352124,
      -0.021457065,
      0.0189148,
      0.0045096064,
      0.0108691165,
      0.007865955,
      0.00028199708,
      -0.013301125,
      0.0068040686,
      -0.10157717,
      0.018092617,
      0.0013334372,
      -0.03271381,
      0.00651464,
      0.015549759,
      -0.0014034966,
      0.025792696,
      -0.009213528,
      0.033394992,
      0.0037552807,
      -0.012937109,
      0.028485268,
      -0.0022790516,
      -0.015439084,
      -0.007868028,
      -0.0053673913,
      -0.023821719,
      0.046639454,
      -0.013967412,
      0.00073656073,
      -0.019107265,
      0.008443475,
      0.014476314,
      0.013418361,
      0.01199544,
      -0.014639769,
      0.0382872,
      -0.008384433,
      -0.000403462,
      -0.0091633145,
      0.033057086,
      -0.0027874215,
      -0.014720242,
      -0.004541667,
      0.022781292,
      0.007890081,
      -0.010391445,
      0.017015826,
      0.0073423064,
      0.004059027,
      -0.005962691,
      0.005929855,
      0.036612973,
      -0.0050427676,
      0.0123679545,
      -0.018220568,
      -0.0007759756,
      -0.020193756,
      -0.013449651,
      -0.0008567669,
      0.004671187,
      -0.008740011,
      -0.016244674,
      0.006051461,
      0.007450853,
      0.010042818,
      -0.01212358,
      -0.0025532723,
      -0.00085178873,
      -0.0011594946,
      0.006122656,
      0.009976717,
      -0.028136434,
      -0.006147155,
      0.02100484,
      0.0024255083,
      -0.018038686,
      -0.021394603,
      -0.008490714,
      0.017295724,
      -0.007105119,
      0.0037246703,
      -0.014396542,
      -0.012140538,
      0.016438289,
      0.013511997,
      -0.027192893,
      -0.018169638,
      0.032382667,
      0.02449241,
      -0.006185653,
      0.0114109805,
      0.0043826103,
      0.007498415,
      -0.008085641,
      -0.00037216456,
      0.018717205,
      -0.0099509945,
      -0.012688912,
      0.026202321,
      -0.018395262,
      -0.003035555,
      0.008923433,
      -0.026987454,
      0.0012686242,
      -0.006756892,
      -0.025458794,
      -0.013021992,
      0.02381232,
      -0.028348802,
      -0.006011154,
      -0.028354546,
      -0.0018094504,
      -0.017861124,
      0.0053327098,
      -0.018971866,
      -0.01230753,
      -0.0032411853,
      -0.03257725,
      -0.008542343,
      0.0052508754,
      -0.024997365,
      -0.0078075626,
      -0.016435817,
      0.012700859,
      0.007040043,
      0.0020078546,
      0.021111695,
      -0.023536438,
      -0.014328422,
      0.0008734994,
      0.0073800967,
      0.0134069575,
      -0.0021043324,
      0.010767237,
      -0.025259346,
      0.0031630632,
      -0.020632638,
      -0.008499672,
      -0.03658856,
      0.018537948,
      -0.024855858,
      0.00040304475,
      -0.013033836,
      -0.009934828,
      0.011939818,
      0.02643773,
      0.016350722,
      0.0025497624,
      -0.00009456691,
      0.0011901347,
      0.00398504,
      -0.0067769387,
      -0.00009348694,
      0.03268049,
      -0.011851601,
      -0.0015165772,
      0.0029618905,
      -0.013485411,
      -0.025496813,
      -0.025944721,
      -0.023844158,
      -0.009460173,
      -0.00790989,
      -0.004919091,
      0.004039155,
      -0.009292317,
      -0.039080564,
      -0.029562445,
      -0.011608618,
      -0.0053806393,
      -0.024531981,
      0.0038212133,
      0.024083443,
      0.0047248313,
      -0.003291448,
      0.00174149,
      0.0051358747,
      0.008655642,
      -0.0015491089,
      -0.017575622,
      -0.028943516,
      -0.004359416,
      0.017885214,
      0.009478502,
      0.007777005,
      -0.0059636454,
      0.021493962,
      0.016892904,
      0.016761204,
      -0.014423151,
      -0.005140735,
      0.0016909589,
      0.00068352435,
      0.003642301,
      0.008556021,
      0.02535013,
      -0.037606973,
      -0.0066362084,
      -0.0053875414,
      -0.0033386992,
      -0.006534374,
      0.02675428,
      -0.007905781,
      0.006429928,
      -0.005458875,
      0.014734223,
      0.0053771413,
      0.004020648,
      0.007851127,
      -0.0063001835,
      0.007422093,
      -0.013500315,
      0.0073578227,
      -0.00034342802,
      -0.00095135474,
      -0.014174525,
      0.004223706,
      0.01676019,
      0.0091930255,
      0.013091714,
      -0.009413976,
      -0.004652029,
      0.0042262715,
      0.025389103,
      -0.022541557,
      -0.0035811728,
      -0.039589986,
      0.017435558,
      0.0117442375,
      -0.008883514,
      0.0047750133,
      -0.009810964,
      0.012282744,
      0.00084449083,
      0.0012908257,
      0.0010192523,
      0.003656599,
      0.00066969753,
      0.0008903325,
      -0.007663993,
      -0.0038137762,
      0.03479032,
      -0.032265227,
      -0.011934403,
      -0.0009561371,
      0.03364039,
      -0.013693959,
      0.013029245,
      -0.00048775398,
      -0.011072213,
      -0.011621784,
      -0.021966802,
      0.005731108,
      -0.008405006,
      0.0070942487,
      -0.0013084871,
      0.00045942908,
      -0.027330328,
      0.0124571975,
      0.017376415,
      -0.011863186,
      -0.005044399,
      -0.012021273,
      0.03323725,
      0.000510574,
      -0.0089388285,
      0.013605165,
      -0.0041459994,
      0.014352407,
      0.018990269,
      0.01504834,
      0.027048232,
      0.020932848,
      -0.019805128,
      0.005571913,
      -0.013776775,
      -0.00545484,
      -0.14378422,
      -0.01011318,
      -0.0034256338,
      -0.0050093345,
      -0.0034108618,
      -0.021576893,
      -0.003463237,
      -0.024771575,
      -0.005897083,
      0.0063423365,
      0.030255899,
      0.00022970058,
      -0.008777768,
      -0.014356486,
      -0.0013888619,
      -0.029877372,
      0.020052606,
      0.029896919,
      0.023690037,
      -0.00788217,
      -0.012817455,
      0.029614476,
      -0.01403464,
      0.008282871,
      -0.012911629,
      -0.024422724,
      0.020114185,
      0.01558081,
      -0.00027320365,
      0.007396846,
      -0.051177662,
      0.0015332762,
      -0.0037487617,
      0.0110419635,
      0.01620952,
      -0.014172445,
      -0.020306977,
      0.022714082,
      0.009360737,
      0.0017033556,
      -0.0043550814,
      -0.004763091,
      0.01908412,
      0.015048682,
      0.0034746588,
      0.018165579,
      0.021412132,
      -0.020397482,
      -0.0072730533,
      0.009473755,
      -0.035419457,
      -0.027408706,
      0.018291892,
      -0.012580101,
      -0.015473338,
      0.011986838,
      0.018239459,
      -0.01543783,
      0.0004072752,
      -0.014831174,
      -0.0114924535,
      0.008024284,
      -0.0019757368,
      0.033251863,
      -0.0070146034,
      0.009849482,
      0.019292654,
      0.02038086,
      0.016176118,
      0.00055922806,
      -0.0047562635,
      0.0052625453,
      -0.0060963114,
      0.024214726,
      0.025392184,
      0.00903371,
      0.00069267396,
      0.0042200405,
      0.000623024,
      0.004801384,
      -0.03179015,
      0.011922791,
      -0.06270686,
      -0.015151806,
      0.0025671106,
      0.0013762331,
      0.0068771094,
      0.028260633,
      -0.004368265,
      0.014905376,
      0.0065585095,
      -0.023111196,
      -0.022699272,
      -0.019133106,
      0.021850655,
      -0.010164864,
      -0.0019567318,
      0.00606996,
      -0.001732575,
      -0.014505355,
      -0.011460989,
      0.010631094,
      -0.0035971862,
      -0.0057199597,
      0.0073366417,
      -0.003929901,
      0.003476434,
      0.022791509,
      -0.005323467,
      -0.0048219315,
      0.012682995,
      0.0031794738,
      0.011196221,
      -0.15279405,
      -0.028804423,
      0.0018936982,
      -0.0011690487,
      0.0033818472,
      -0.008716618,
      0.002723597,
      -0.023824973,
      0.025414625,
      -0.025484936,
      -0.009970753,
      -0.02362134,
      -0.015251143,
      -0.010575954,
      0.02049375,
      0.1385219,
      -0.020603223,
      0.007305415,
      -0.008906359,
      -0.000012066898,
      -0.010893258,
      -0.011459108,
      -0.015943635,
      0.008588674,
      -0.0071658483,
      -0.0122400895,
      -0.0011726383,
      -0.0146482345,
      0.005541712,
      -0.008840728,
      -0.027359502,
      0.0005371677,
      0.0032694861,
      0.021617088,
      0.0015744546,
      -0.010663567,
      0.012446088,
      0.012312008,
      0.015465902,
      -0.0059936508,
      0.019123476,
      0.015150502,
      0.011141659,
      -0.00694775,
      0.002972946,
      0.0049201846,
      -0.0024826934,
      -0.009836026,
      -0.022313353,
      0.0000047152507,
      -0.024858657,
      -0.06296586,
      -0.011485982,
      0.014510625,
      0.002247925,
      0.0072663254,
      0.018190045,
      0.010635387,
      0.008384392,
      0.00929939,
      -0.016752066,
      0.01420999,
      0.0104218805,
      0.0062799514,
      -0.001543117,
      -0.011078159,
      0.009694921,
      0.0091872765,
      0.021106247,
      -0.014798089,
      0.0056000375,
      0.006271269,
      0.0003972691,
      0.020735065,
      -0.0089765,
      -0.012092153,
      -0.0034555988,
      0.028658492,
      0.002489812,
      -0.004312992,
      0.0049330136,
      -0.003911885,
      0.000026800264,
      -0.0065207835,
      0.013454689,
      -0.033171613,
      -0.014893553,
      0.0086248275,
      -0.0121952975,
      -0.004974861,
      0.011979564,
      -0.0049515394,
      -0.010315031,
      0.018494666,
      0.021815913,
      0.022074142,
      0.0009566289,
      -0.021165004,
      0.012846866,
      -0.0028247605,
      -0.01258634,
      -0.021074068,
      0.011844966,
      -0.026421899,
      -0.00062812096,
      -0.016176347,
      -0.020797372,
      0.029453045,
      0.010751613,
      -0.0052822675
    ]
  },
  {
    "id": "genai_cohort_python_01_Kettle_boiling_story_project_vtt",
    "content": "Hey there everyone, and welcome to a fresh new section on the udemy's Python course. Now, from this moment onwards, we are into a position where so far we have studied about what are the data types in the Python programming language. This means I truly understand that data can be of variety of types, it can be numbers, it can be string, date, time and probably others as well. But this is enough of knowledge to start moving forward in the Python. From this point onwards we are going to study about how we can process this data and in fact rest of the whole course is all about processing the data. In programming world there is a whole lot of logics that you can apply to your data and there are a lot of again, another keywords and style of processing the data that you have to go through with Python programming language, in fact any programming language. So from here onwards let's learn and study about how we process the data. And the way we are going to do is going to be very creative, something that you haven't seen anywhere, so far in any Python course. We are directly jumping into the mini projects and mini stories. And yes, these stories are pretty fun. They will help you to understand why we are doing the things, because doing the things is easy, why we are doing, why this particular set of tools were being chosen to do the particular activity. This is what we need right now. So, so let me walk you through in this. You will absolutely love this. So we're going to start with the conditionals first. We are going to study a little bit about what is conditionals, why this is conditional, and then we are going to work on this mini project. We will have many such mini projects throughout this entire chapter and you're going to absolutely love this. So just to give you a brief idea, we're going to go ahead and work on with this. So let's just say I have this small, rectangle. I'll just go ahead and rotate this like this because this is how usually diagrams are drawn in this one. So, so let's just say what we do is we check for some certain things, maybe a pretty basic that whether you have, some T leaves at your home or not. So we go like this, that we simply have T leaves at our home or not. Now based on this, you take decision, for example, if you have T leaves at your home. So this is the route that I'm going to go ahead and call this. This is as, simply yes route. So let me just write this. This is a yes route. You have the tea. If you have the tea I would say do nothing. You don't need to buy the teas or T leaves, so you don't have to do anything. But there could be another route here as well, which could be something like this. So if I go ahead and say you have another route which is a no route, I don't have T at my home. So the place logical answer is go ahead and buy some T or T leaves. This is the whole point of conditionals. You have certain condition. This condition eventually evaluates to a yes or no condition. And based on this we either take some action or we don't take some action or sometimes we take different set of actions. This instead of do nothing could also be that, hey, I don't want to do nothing. I probably want to say make some T. So again these decisions are heavily based on whether the T leaves at your home, the answer of this is yes or no. So you have to work on this. So we're going to simply say either buy some T if you don't have them. If you have them, probably do nothing or make some T or maybe check for sugar. There could be lot of things. So based on these kinds of action, now we're going to study about our simple conditionals. So we have first set of challenge and we're going to take down this challenge. We are going to build a program that actually address this real world problem. So this is the problem that we have. You're creating a notification system for a smart kettle. All. Right. That's a pretty good job. It should remind the user only when the kettle has finished boiling. Task. Okay. A variable kettle boiled equals to true. If boiled, show kettle done. Time to make chai. So this is what we have to do now. At first it might look really overwhelming that okay, this is lot but in real world you will get these kinds of questions and these kinds of problems and you have to convert the problems into a solution. And that solution needs to be delivered via software. That's what we do. So let's go ahead and build this how this can be done. And we're going to go into a new file now, new folder rather. We'll call this one as and conditionals. It's very hard to speak and type at the same time. Let's create a new file and we're going to call this one as Project 1SO or Ministory1PY so all of this project are going to be mini stories and we are going to work with that. I'll turn off my AI Companion so that we just write everything manually. And this is a good practice when you're learning programming in the early days, you shouldn't be using AI because it will stop your learning process. It hinders a lot of. So let's just see how we can do that. The process is pretty simple. The says that hey, you are creating a notification system for smart kettle. Got it. It should remind the user only when the kettle has finished boiling. The task which we have in front of us is there should be a variable kettle boiled which should be. Which can be true or false. So let's just say how we declare the variable. We simply say kettle boiled and usually or sometimes. You'll see these as is kettle boiled. That is also a good variable name. Make sure you always have good variable name. of writing Python. Let's just say this is true. So now I need to learn how can I evaluate the condition. So I can use a special keyword known as. If this is a keyword, you cannot use it for variable name. This is a special thing. And then you simply put up a conditional here. This needs to be a Boolean data type. Remember, boolean data type can only be true and false. So this needs to evaluate as true and false this particular keyword here. Then you put up a colon and hit enter and automatically the indentation comes to you. Python is very, very lean or very interested in the indentation part. Slight wrong Indentation can give you lot of bad answers and a lot of errors as well. Then we simply go ahead and use print statement and simply say, hey, we want to have this. I'll just go ahead and say, kettle done with an exclamation and time to make some chai. That's what was instructed to us. It says kettle done. Time to make chai, not some chai. We have to follow the instructions and that is it. That is all the program. It is. Now this program will work only when the kettle is boiling. So let's go ahead and see that how it actually works. I'll go ahead and open up my integrated terminal within this folder so that I can directly run my program and I'll just go ahead and close all of these previous ones. Time to do it again. All right, looks good. Now all I have to do is simply say Python because I'm on a Mac. If you're on Windows, just say Python and we're going to run this program, the one program that we have, Ministory1Py and it says kettle done. Time to make chai. And if the kettle boiling is not done, let's just say that is having a false value. What does this means? This simply says hey do nothing. That's simply just the example we studied. Now what you need to understand here that this whole thing needs to evaluate either true and false and just after the is if this needs to be a condition which finally evaluates to true or false, we will have more such examples and you will absolutely enjoy it. So don't worry about that part. Hope you have enjoyed this. Exactly like this we will move forward. We will have one small story. We will try to write some code for the story. This will make your habit of writing better program in the Python and will get you in habit of solving a problem by making software small software. But it's a software. Let's go ahead and catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 Kettle boiling story project.vtt",
      "originalPath": "genai-cohort/python/03 Chapter Subtitles/01 Kettle boiling story project.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0008446256,
      0.0007275237,
      0.03406922,
      -0.062316265,
      -0.006288296,
      -0.010582397,
      -0.010711057,
      0.02300946,
      0.0039675776,
      0.010813272,
      -0.01693504,
      -0.0109297875,
      0.0057555586,
      0.027846599,
      0.1251294,
      0.013806127,
      -0.0012526015,
      -0.022198336,
      0.003846807,
      -0.0057745,
      -0.015337856,
      0.012846831,
      0.008559574,
      -0.033253808,
      -0.015240974,
      -0.011822703,
      -0.0054315017,
      0.015878974,
      0.014812665,
      -0.03178929,
      -0.024919936,
      0.000013800752,
      -0.008988455,
      0.03257816,
      0.011452682,
      0.024852023,
      0.0114062475,
      0.0049625514,
      -0.004387375,
      0.017253447,
      -0.023569211,
      -0.012346891,
      -0.007824047,
      -0.0127099855,
      0.0024798666,
      0.00041557525,
      -0.007913724,
      -0.010620765,
      0.010377997,
      0.029364543,
      -0.010341309,
      0.0028049883,
      -0.016233962,
      -0.18061195,
      0.009784455,
      0.0048512393,
      -0.00062260684,
      0.0114772525,
      -0.024044055,
      -0.005579148,
      -0.042381953,
      0.0001454548,
      -0.043636713,
      -0.00989897,
      -0.0064247414,
      -0.009324936,
      0.013734504,
      -0.021965414,
      0.0035352702,
      -0.020757481,
      0.014008943,
      0.00302448,
      -0.021519283,
      -0.012041725,
      -0.01763195,
      -0.020868976,
      0.0060437527,
      -0.008199586,
      -0.004546886,
      0.017045017,
      -0.0044116727,
      -0.0071048103,
      -0.0077619026,
      -0.009014562,
      0.011644622,
      0.0007628364,
      -0.017312622,
      -0.00020714717,
      0.008978576,
      -0.013281794,
      -0.018785907,
      0.009243617,
      -0.0014215292,
      0.012341737,
      -0.027598431,
      0.011071437,
      -0.008725835,
      -0.00887867,
      -0.0036580581,
      0.010510148,
      -0.009189601,
      -0.0107789375,
      -0.024220044,
      -0.021199878,
      -0.009275789,
      0.018797258,
      -0.0075946916,
      -0.025950806,
      -0.0007177496,
      -0.0056047677,
      0.0015561612,
      -0.028498154,
      0.005247041,
      0.021979112,
      -0.00056498067,
      -0.1887182,
      0.010668664,
      0.00085047854,
      -0.023589978,
      0.013552751,
      -0.012042677,
      -0.0020150205,
      0.0025948787,
      0.025039721,
      0.005458675,
      0.012293767,
      0.010642822,
      0.030560477,
      -0.0011274611,
      -0.008024646,
      -0.02288208,
      0.0041276887,
      -0.00121508,
      -0.0019268858,
      0.005933526,
      0.016967826,
      -0.0054374477,
      -0.018971734,
      -0.006461012,
      -0.008667862,
      0.00069132535,
      0.024652563,
      -0.014035617,
      0.023872482,
      -0.00010006701,
      -0.0024019855,
      -0.0073397877,
      0.018247698,
      -0.014294216,
      -0.01155943,
      0.0021451742,
      -0.016726833,
      0.016330874,
      0.0030938068,
      0.02686913,
      -0.023224268,
      -0.013655166,
      0.003884075,
      -0.014047691,
      0.002269531,
      0.010990658,
      -0.0069465153,
      0.0085658645,
      0.0056249094,
      -0.004563891,
      -0.019739049,
      -0.01609446,
      0.0077643907,
      0.0173179,
      0.0030037502,
      0.009360694,
      -0.014620197,
      -0.013776949,
      -0.008793125,
      -0.007264075,
      0.009322988,
      0.0024415534,
      -0.0029692766,
      0.011378516,
      -0.024908906,
      -0.0053564897,
      -0.009010584,
      -0.0060596084,
      0.018002495,
      0.0025904302,
      -0.00046076265,
      0.007127136,
      -0.0003283776,
      0.026200762,
      -0.00090790965,
      -0.0018842231,
      -0.008992341,
      0.015293474,
      0.008097575,
      0.015760768,
      -0.0036584209,
      0.0003040838,
      -0.005093755,
      0.016251445,
      0.0040181163,
      0.029912483,
      -0.0018068965,
      0.008216283,
      -0.012219575,
      0.016467685,
      -0.0006894271,
      -0.0057861395,
      -0.023431806,
      0.01133628,
      -0.0050455746,
      -0.015219194,
      -0.0019952632,
      0.017178738,
      0.010680963,
      0.017111545,
      -0.0053036073,
      0.021666296,
      0.003481108,
      0.010386699,
      0.0030410192,
      0.015649084,
      0.0075235125,
      0.00006087045,
      0.022002926,
      0.005566827,
      -0.023717865,
      0.01875137,
      -0.0068272776,
      0.004248155,
      0.011741291,
      0.026394896,
      -0.015346788,
      -0.004595973,
      -0.0029114662,
      0.010095698,
      -0.0031070665,
      0.0014328667,
      0.018907458,
      0.021733107,
      -0.008628259,
      0.0001985436,
      -0.0011432548,
      -0.017115394,
      0.011270754,
      0.014667769,
      -0.0061433534,
      0.0048679584,
      0.001478229,
      0.0062546106,
      -0.016212044,
      -0.0125807645,
      0.0021182562,
      0.02081143,
      -0.008997085,
      0.010142995,
      -0.029078217,
      -0.015324471,
      -0.000052986114,
      -0.0125452485,
      0.0021404442,
      -0.01275169,
      -0.008705362,
      -0.017442169,
      -0.014628824,
      0.020808868,
      -0.008103093,
      -0.0018784637,
      0.019483244,
      -0.020666312,
      0.023608442,
      0.014376638,
      0.000020480247,
      0.007851156,
      0.0007580183,
      -0.017035251,
      0.018069059,
      -0.116704,
      0.030064935,
      0.0022926026,
      -0.014747907,
      0.011273534,
      0.014644834,
      -0.008024147,
      0.018330717,
      0.015539531,
      0.013658,
      0.026711367,
      -0.015232748,
      0.0399244,
      -0.00999051,
      0.0013214459,
      0.007534235,
      -0.0054745036,
      -0.01421034,
      0.020262577,
      -0.000955821,
      -0.002501478,
      -0.02208872,
      -0.02653497,
      -0.02297435,
      0.010800397,
      0.0009458195,
      0.0068581593,
      0.049975134,
      0.011869792,
      -0.02568419,
      -0.014941957,
      0.035670113,
      0.0070366017,
      -0.0044246013,
      0.006045225,
      0.007632422,
      -0.0016425818,
      0.010361826,
      0.02205767,
      -0.00095118716,
      0.02210362,
      -0.020276342,
      0.014599265,
      0.013862342,
      -0.0069892225,
      -0.0027180128,
      -0.017317764,
      0.010469874,
      -0.019116353,
      0.006525451,
      -0.017264102,
      0.015600456,
      -0.011815447,
      -0.02109061,
      0.0038782512,
      -0.0019026921,
      0.0051380703,
      -0.0047077644,
      0.0006859481,
      -0.0031157348,
      -0.008129011,
      0.009797497,
      0.009334406,
      -0.00066961185,
      0.0018962092,
      0.00007753198,
      0.023848461,
      0.0014574347,
      -0.0030038515,
      -0.010993569,
      0.011488601,
      0.0004163798,
      0.0008563616,
      -0.01017987,
      0.0052822954,
      0.010571971,
      -0.008270742,
      -0.013468189,
      -0.025297485,
      0.02847564,
      0.028615173,
      -0.022022584,
      -0.0062231626,
      0.0052309986,
      0.009903903,
      0.0066078403,
      -0.016618544,
      -0.003086181,
      -0.0066221743,
      -0.01065774,
      0.0064813984,
      0.022830032,
      -0.014441443,
      0.02269622,
      -0.014445272,
      0.00033149024,
      -0.009035227,
      0.0057721627,
      -0.00070901116,
      0.024052922,
      -0.012852009,
      -0.007106408,
      -0.03351465,
      0.011346396,
      0.009365787,
      0.006555388,
      -0.018717075,
      -0.027637089,
      0.013599081,
      -0.02472176,
      0.0041874894,
      0.0067988704,
      -0.011697145,
      0.004013829,
      -0.013979596,
      0.004940505,
      0.0008050586,
      -0.0083262,
      0.017039973,
      -0.021532305,
      0.00732777,
      -0.025104394,
      0.0009648563,
      0.013874135,
      0.00047760017,
      0.025288878,
      -0.0030425035,
      -0.00764986,
      -0.013001666,
      -0.03640852,
      -0.023141038,
      0.01650617,
      -0.026831107,
      -0.009182127,
      -0.0083113415,
      0.004802103,
      0.033929247,
      0.040800426,
      0.0036184785,
      -0.013433211,
      -0.003006979,
      0.010119037,
      0.013953118,
      -0.0017382662,
      -0.023168247,
      0.016614612,
      -0.016946718,
      -0.006547069,
      0.025460934,
      -0.036410682,
      -0.029175669,
      -0.013066572,
      -0.009911587,
      0.00066278724,
      -0.008095047,
      -0.006433034,
      0.0069187074,
      -0.018756641,
      -0.006901143,
      -0.016782593,
      0.017424976,
      0.0049597835,
      -0.008532326,
      0.0038969445,
      0.020258417,
      0.011210166,
      -0.021919122,
      0.0038517558,
      0.000597062,
      0.012941112,
      -0.01494995,
      -0.012962804,
      -0.046209097,
      -0.013595582,
      0.012973271,
      0.002723204,
      0.0058489162,
      0.006360853,
      0.025172867,
      0.005122256,
      0.018815286,
      0.0166548,
      -0.021638246,
      -0.00026760975,
      0.01649425,
      0.015323807,
      0.010375123,
      0.002509322,
      -0.027295236,
      0.009028543,
      0.013102289,
      -0.018252525,
      -0.008614577,
      -0.0067443643,
      0.004442951,
      0.022238132,
      -0.0048514977,
      -0.00858522,
      0.018811475,
      0.021565506,
      0.0015529454,
      -0.01171047,
      -0.0059396224,
      -0.0014360921,
      0.027123813,
      -0.010120649,
      -0.006877681,
      -0.014075275,
      0.0050690547,
      0.010881942,
      -0.007649447,
      0.002497598,
      -0.0090841465,
      0.014740265,
      0.02353646,
      0.027246632,
      -0.030338014,
      0.000010831557,
      -0.014626935,
      0.0018401035,
      -0.00814126,
      -0.0055353707,
      0.0056318063,
      0.00014615699,
      -0.0027626508,
      0.004570342,
      0.009523754,
      -0.01067494,
      -0.018131109,
      0.003548948,
      -0.0047885575,
      -0.0027430607,
      -0.011439775,
      0.019983426,
      -0.024025416,
      -0.036191504,
      0.017855868,
      0.008706667,
      -0.02160816,
      0.018043652,
      -0.009970289,
      -0.019983398,
      0.0036351027,
      -0.0041823187,
      0.004944133,
      0.015280508,
      0.019684272,
      -0.0019242725,
      -0.020915553,
      -0.0047822143,
      0.004774309,
      0.029475104,
      0.0005427199,
      -0.02180218,
      -0.014881327,
      0.025826443,
      -0.0011319177,
      0.008731893,
      0.005811798,
      -0.01719821,
      0.020112624,
      0.013612863,
      -0.013902814,
      -0.008818378,
      -0.01027499,
      -0.020516356,
      -0.019154133,
      -0.011458802,
      -0.0071737887,
      -0.13523589,
      0.0023995496,
      0.0025893624,
      -0.003203298,
      -0.014059852,
      -0.009018287,
      0.020060334,
      -0.012845282,
      0.007884955,
      0.0008397264,
      0.033206996,
      0.0007561362,
      -0.007762236,
      -0.013636245,
      0.0027071075,
      -0.0052137775,
      0.009357546,
      0.005316316,
      0.035386674,
      -0.024057722,
      -0.009407472,
      0.0066289464,
      -0.00081449695,
      -0.01265195,
      -0.02754391,
      -0.006816513,
      0.014159056,
      0.0067511625,
      0.0005821134,
      0.0034140202,
      -0.024182726,
      -0.0046553863,
      0.00928754,
      0.01871236,
      0.0052678105,
      -0.010987244,
      -0.023953788,
      -0.004191422,
      0.023418244,
      -0.009292572,
      -0.010569581,
      -0.009491891,
      0.01176335,
      0.0018213248,
      0.0033167012,
      0.010607433,
      0.026024528,
      -0.009488884,
      0.0048796497,
      0.020021494,
      -0.030159216,
      -0.02843416,
      -0.013233816,
      -0.027742604,
      -0.013048866,
      0.02162037,
      0.00071626395,
      -0.0065659527,
      0.0052045765,
      -0.016276293,
      -0.032922164,
      0.014437982,
      0.013935835,
      0.026895497,
      0.008316094,
      -0.008754881,
      0.040716972,
      -0.004100111,
      0.01877633,
      -0.0045937914,
      -0.017749354,
      -0.001458222,
      -0.0016822236,
      -0.0023499997,
      0.01310071,
      0.0046319366,
      0.021683855,
      0.0071885595,
      0.0013983638,
      0.013155745,
      -0.015617412,
      -0.025674824,
      -0.060996637,
      -0.022011638,
      0.021653019,
      0.011264709,
      0.0031789362,
      0.01650419,
      -0.012147982,
      -0.0022081467,
      -0.0010419626,
      0.0011079065,
      -0.030179968,
      -0.009652654,
      0.024338515,
      0.003822658,
      -0.02347592,
      0.007932167,
      -0.009618784,
      -0.013365431,
      -0.0111600375,
      0.016607689,
      -0.0239626,
      -0.006034041,
      0.011225262,
      -0.018190715,
      0.017712092,
      0.0092197945,
      -0.022282897,
      -0.00052865566,
      0.00102906,
      -0.008716697,
      -0.012076837,
      -0.17122476,
      -0.000032342512,
      -0.008989008,
      0.022768296,
      0.00866488,
      -0.00074415887,
      0.006263931,
      -0.0052311528,
      0.007254861,
      -0.01591853,
      -0.0057195574,
      -0.0040439847,
      -0.015391502,
      -0.00059760263,
      0.015082583,
      0.123092,
      -0.006022378,
      0.014731753,
      -0.020581244,
      -0.0021584188,
      -0.0142904455,
      -0.008563232,
      -0.025553789,
      0.0036379555,
      -0.0012009746,
      -0.011612798,
      0.009090757,
      -0.029069627,
      0.0024308611,
      0.0019587057,
      0.00016136553,
      -0.00023574485,
      0.014401289,
      0.0016754805,
      0.009303569,
      0.005893103,
      -0.011619303,
      0.010122724,
      -0.00716821,
      0.0017016387,
      0.008251897,
      0.0035585735,
      -0.0010210973,
      0.00898465,
      0.021572554,
      0.0044657984,
      -0.0035023696,
      -0.025870003,
      -0.015669566,
      0.0027488242,
      -0.0038255046,
      -0.04472681,
      -0.016349794,
      0.0055337353,
      -0.015887046,
      0.02085334,
      0.0007494451,
      0.017316813,
      0.013236494,
      0.021415882,
      -0.030672546,
      -0.010702268,
      0.013627543,
      -0.0113291815,
      0.02030412,
      0.0056999368,
      0.028518103,
      0.0061184047,
      0.030598206,
      -0.023504835,
      0.024053661,
      0.02538193,
      -0.0041319286,
      0.023612274,
      -0.010527254,
      -0.025683802,
      -0.021969471,
      0.031358387,
      -0.009334392,
      -0.012140105,
      -0.0013159548,
      0.0032800315,
      -0.009379822,
      -0.021776982,
      0.025549108,
      -0.0022653905,
      -0.020759748,
      0.020269766,
      0.012159454,
      0.00030314014,
      -0.017155493,
      -0.006043832,
      -0.0009718409,
      0.0018335226,
      0.018538151,
      0.021466019,
      0.021955978,
      0.0031483814,
      0.020987976,
      -0.017943643,
      0.01264112,
      0.0012937867,
      -0.0063481466,
      -0.040867977,
      0.007875123,
      0.01563391,
      -0.004644674,
      0.015177782,
      0.010835592,
      -0.028878324
    ]
  },
  {
    "id": "genai_cohort_python_02_Building_a_snack_system_vtt",
    "content": "All right, moving into our Python journey, we got another project and we have to serve to this local cafe. Let's see what is the problem that they are facing. And based on that we will create a software. And the best way to learn how to build software is through tackle down these kinds of problem. You will learn so much more than just going through with the syntax. So let's go through with this one by one. So here's what we have. A local cafe wants a program that suggests a snack. So we are building suggestion system, all right? And you will be surprised to know a lot of suggestion systems are actually mapped one to one, just like what we are building right now. In the early days there was no AI machine learning. We were actually doing all the things that we are about to do just like this. If a customer ask for cookies or samosa, which is a local Indian dish, it confirms the order, all right? Otherwise it says it's not available. So what it's saying first task is take snack input. So we have to put the question in front of the user that hey, enter your preferred snack. And then we are going to go ahead and check whether this is cookies or samosa. Both of them are absolutely fine. Then we go ahead and confirm the order. Otherwise we simply show that, sorry, we only serve cookies or samosa. That's it. So this is kind of a software we have to build and you might be wondering, hey, the wording of the software is not really that clear that this is exactly what we have to do. And this is what you do in the real life. You actually try to get as max as possible from the user and then you try to build the software around it and then the feedback loops continue. So let's build this story and try to walk you through with a couple of new things that you haven't seen. But these kinds of things you learn on the go. And this is our on the go. So this is our snack system. So I think instead of mini story, I'll call this one as a snack suggestion. py of course the first problem in front of us is take snack input. So how do I take input from the user, especially on the command line? Later on we are going to learn that how we can take input from anywhere. You can take into a GUI software, you can take input onto a, web interface like website. There are a lot of ways. Right now command line is our best tool. So the way how we take input from the Python input, command line input is simply say input. Really I told you, Python is the most Easiest language of all. We simply go ahead and simply ask a question that hey, enter your preferred snack. And we simply go ahead and add some space here. And we want to store this whole user, input into a variable. Let's call this one as a snack. And there we go. First of all, I just want to print whatever the value, I'm getting it. This is how you build real software. So we'll just go ahead and say let's use a formatted string for this. And user said user said. And then we'll use the variable of snack. Let's run this program and see what happens when we run these kinds of programs. So again we'll just go ahead and say Python, Python and snack suggestion, it says enter your preferred snack. So if I go ahead and say something else, let's just say I want to have a burger. I enter this and it says burger. Now what additionally you can do in such kind of a program is you can just go ahead and add an input. Because I don't want to process burger in so many ways. The B could be capital, the B could be lowercase, the G could be capital. User can enter the input in any way or any format. So what you can do further on to this, because this is just a string that user enters, whenever user gives you input, it always comes into a string format, even the numbers. So we go ahead and simply say I want to run a function known as lower. This is a function so you put up parenthesis just like that. Now no matter how you say this, it's always going to be same. So enter a preferred snack. So I'm going to go ahead and say burger just like this. But the result we are getting is all lowercase. This will make our life little bit easier in just a moment. All right, so this is first part is done. We don't need to validate by printing again we are happy. Then if it is cookies or samosa, confirm the order. So we need to check whether the snack which user is giving the input should be either equal to the cookie or to samosa. And this is where you learn another style of writing. So if we know and this snack needs to convert into some kind of a true and false value. So I can actually go ahead and say this snack needs to be equal to and by the way, one equal that we are using at line number one, that means I'm transferring the value from the right hand side to the left hand side. But once you put two equal, that means you are comparing the thing this is comparison. So I want to compare for one thing which is cookies. That is good. But I also want to compare for another thing which is samosa. So let's go ahead and write simple python or your snack is equals to samosa. That is it. Now if user answers this, then we simply go ahead and print a message to the user that hey, your order, was successfully taken. Or we can also say something like great, choice. It's always a good idea to complement the choice of the user with an exclamation and we will say will serve you and then whatever the user has mentioned snack. That's a good one. But what if user is saying something else? Else we'll say show unavailability. So we're going to go ahead and put again notice the indentation. We'll go back into indentation part. We'll go ahead and say else and then again follow with the colon. This is important, hit enter. And again notice the indentation. We are using four automatically. The editor is giving me four spaces. That's good of it. And then we'll simply go ahead and print something like a message which says, sorry, we only. Not only only serve cookies or samosa, with tea. So let's run this program and see that what user is giving. Now we have created a dynamic program which user actually can use. So let's just say user simply says I want to have burger. So he says, oh, we only serve cookies or samosa. Now again, let's run the program. This time user says samosa, but he tries a little bit different. So he says something like this samosa. Now this definitely is a weird input, but we'll try this. Enter this and it says great choice. We serve you samosa. So notice here, just adding a small method had made our life so much easier for these kinds of program. And this is kind of exactly the thing that you learn when you build these kinds of programs. So this part is all done. And by the way, you have the access to all the notes. I'm just creating the notes back to back so that you have also all the access of them. These stories, yes, do really take a little bit extra effort, but they actually teach really better. And I think you will definitely rate us pretty good and leave some kind words in the review section. That is it for this video. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 Building a snack system.vtt",
      "originalPath": "genai-cohort/python/03 Chapter Subtitles/02 Building a snack system.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0034707303,
      0.0077895015,
      0.029305236,
      -0.051601596,
      -0.0010061503,
      -0.026810097,
      -0.025451044,
      0.024426445,
      0.015583255,
      -0.00092034944,
      -0.0074300454,
      -0.020025522,
      0.015589791,
      0.013691349,
      0.1310573,
      -0.010552599,
      -0.016627418,
      -0.025981506,
      -0.008041172,
      -0.019478852,
      -0.0057598744,
      0.014013316,
      0.009800429,
      -0.01571205,
      0.004401832,
      -0.01567163,
      -0.000744256,
      0.02616104,
      0.019682677,
      -0.030579528,
      -0.01230232,
      0.0066052964,
      -0.00054072984,
      0.03958573,
      0.01870579,
      0.012252513,
      0.017444195,
      0.0017021595,
      -0.004992525,
      0.0151677895,
      -0.022664456,
      -0.011027991,
      0.010248085,
      -0.014120634,
      0.022322021,
      -0.008756602,
      -0.0124862315,
      -0.018744655,
      0.02098737,
      0.016586453,
      -0.0028355476,
      -0.001824961,
      -0.016461192,
      -0.17887819,
      0.012877987,
      -0.0063667637,
      0.0128209945,
      -0.0016283703,
      -0.020248927,
      0.0005523402,
      -0.030800173,
      0.016588137,
      -0.028955646,
      -0.010214277,
      0.0032030286,
      -0.0199636,
      0.021039996,
      -0.015541359,
      0.0039803046,
      -0.016677523,
      0.027706563,
      0.021863556,
      -0.016650604,
      -0.0006597572,
      -0.01931415,
      -0.022157473,
      0.0070710825,
      -0.010388781,
      -0.015042065,
      0.011424607,
      0.0056635253,
      -0.008255093,
      -0.000035739933,
      -0.007123526,
      0.007996485,
      -0.004402846,
      -0.013332494,
      0.002816818,
      -0.0005820875,
      -0.002073879,
      -0.028057367,
      -0.0033113332,
      -0.0029426715,
      -0.0025847706,
      -0.01903373,
      0.014588622,
      -0.01997152,
      -0.008216942,
      -0.009510685,
      0.0070846905,
      0.0018640164,
      0.004290537,
      -0.036800243,
      -0.005640115,
      -0.009559181,
      -0.0015591583,
      -0.00957222,
      -0.014262087,
      0.0073859007,
      0.0011125241,
      -0.007651463,
      -0.002164691,
      0.006337807,
      0.027140252,
      -0.00062069565,
      -0.17090298,
      0.0067847106,
      0.0043795765,
      -0.017585592,
      0.0019207132,
      -0.021420585,
      0.0031874562,
      -0.005143772,
      0.019353792,
      -0.013064726,
      0.013450632,
      0.012363767,
      0.010672859,
      -0.005300534,
      -0.008947364,
      -0.035915792,
      -0.025370164,
      0.0048584943,
      -0.003089372,
      0.0024953228,
      0.024307871,
      -0.0072650835,
      -0.023830267,
      -0.018415427,
      -0.0173398,
      -0.008278336,
      0.024402265,
      0.0019613088,
      0.011495836,
      0.010227407,
      -0.016918119,
      -0.006583239,
      0.014346527,
      -0.0050916756,
      -0.036132537,
      0.022752669,
      -0.0032294812,
      0.023222346,
      -0.0023009228,
      0.02997081,
      -0.024926659,
      -0.01104945,
      0.0037285623,
      -0.019387072,
      -0.0031782961,
      0.011217646,
      -0.02008129,
      0.014319394,
      -0.0040040435,
      -0.009284113,
      -0.0039023983,
      -0.011254953,
      -0.0119447,
      0.014675502,
      0.011985136,
      -0.0002220268,
      -0.0023900534,
      -0.005703634,
      -0.0044772048,
      -0.01521842,
      0.0042439024,
      0.005193411,
      -0.013430476,
      0.019649409,
      -0.015292377,
      -0.013065943,
      -0.010845776,
      0.014046423,
      0.017366815,
      0.0049936026,
      0.007526112,
      -0.013028788,
      0.011605114,
      0.018274853,
      0.014170075,
      -0.0018507155,
      -0.0066272006,
      0.011452991,
      0.009899234,
      0.0153895905,
      -0.012277922,
      -0.005659335,
      -0.0053706155,
      0.006762655,
      -0.0013090791,
      0.032463502,
      -0.005354278,
      0.0028781046,
      -0.007148283,
      0.026217904,
      -0.02008757,
      0.014406467,
      -0.027263885,
      0.023967253,
      0.015794847,
      -0.008364623,
      -0.021198932,
      0.00003321945,
      0.010883522,
      0.019834068,
      -0.0107620405,
      0.027643831,
      -0.0017688851,
      0.0069505405,
      0.011001166,
      0.003906522,
      0.008153652,
      0.0026715032,
      0.024739629,
      0.0052689076,
      -0.011822762,
      0.017965106,
      -0.007953012,
      -0.018314589,
      0.019108994,
      0.03201192,
      -0.016871598,
      -0.023184735,
      0.010424873,
      0.0020909428,
      -0.00021755714,
      0.01038362,
      0.04205695,
      0.011449901,
      0.0103147905,
      0.009754949,
      -0.0017961742,
      -0.019130755,
      0.010029736,
      0.031610336,
      -0.008569425,
      0.0069827978,
      -0.014100478,
      0.013248219,
      -0.02878353,
      -0.010556919,
      -0.014038876,
      0.0054237554,
      -0.014939537,
      0.00797014,
      -0.04024114,
      -0.02253843,
      -0.008323287,
      -0.012958201,
      -0.0020191504,
      -0.0033793368,
      -0.008071136,
      0.008799287,
      -0.0039791977,
      0.025484698,
      -0.018237436,
      0.015591876,
      0.01442507,
      -0.015652379,
      0.029581977,
      0.011174712,
      -0.014335943,
      0.0067565455,
      -0.0006364822,
      -0.0127389245,
      0.012889937,
      -0.10895339,
      0.014949555,
      -0.0024707294,
      -0.013793147,
      0.01022304,
      0.005995517,
      -0.02170748,
      0.003124769,
      0.0051055094,
      0.023940567,
      0.017049164,
      -0.008611667,
      0.034670968,
      -0.007588074,
      -0.0036933448,
      -0.0001655823,
      -0.015554307,
      -0.01896694,
      0.031283602,
      -0.010911958,
      0.0010795954,
      -0.03421296,
      -0.010059287,
      0.009760092,
      0.025603743,
      0.00064964825,
      -0.008061038,
      0.03726818,
      0.0113277165,
      -0.011634368,
      -0.012776102,
      0.024544392,
      -0.008687032,
      -0.02104945,
      0.0023121706,
      -0.0021134443,
      0.021675836,
      -0.0054317405,
      0.01567424,
      -0.01624232,
      0.028837545,
      -0.033518314,
      0.016528407,
      0.023264306,
      -0.012678918,
      0.01839489,
      -0.029977761,
      0.0019723726,
      -0.027171673,
      0.010585672,
      -0.0145370625,
      0.012658746,
      -0.0033827643,
      -0.026888123,
      -0.0046828417,
      0.023120945,
      -0.005670062,
      0.002646614,
      -0.012289922,
      0.00763005,
      0.0028903412,
      0.0005175583,
      -0.005651804,
      0.004005795,
      -0.00077015994,
      0.0009014902,
      0.008830923,
      -0.007149259,
      -0.022868106,
      0.00016982415,
      0.011726796,
      0.02344037,
      0.011311817,
      -0.026966525,
      -0.007253151,
      0.014558295,
      0.011828272,
      -0.035800505,
      -0.013648004,
      0.019122338,
      0.013288236,
      -0.021721603,
      -0.007902312,
      0.0063749054,
      0.0055308044,
      0.0063793813,
      -0.0030883057,
      -0.008682654,
      0.016989952,
      -0.0126740895,
      0.014852642,
      0.012087644,
      -0.007110155,
      0.007243031,
      -0.0071012164,
      0.00809792,
      -0.019213272,
      0.016662749,
      -0.004782154,
      0.016246002,
      -0.008152021,
      0.014304669,
      -0.014987736,
      0.016847352,
      -0.0055700233,
      -0.002571764,
      -0.023628099,
      -0.013110828,
      0.019827563,
      -0.019739443,
      -0.001301928,
      0.0025143824,
      -0.011332621,
      0.008198117,
      0.00054418185,
      0.02050166,
      0.006916851,
      0.0036468387,
      0.013855448,
      -0.019170785,
      0.0034719268,
      -0.009099214,
      -0.0026729598,
      0.008508293,
      -0.006696133,
      0.0074830446,
      0.0022952405,
      -0.006507673,
      -0.00017724956,
      -0.02535279,
      -0.0186449,
      0.013872671,
      -0.022534845,
      -0.020207053,
      -0.014126526,
      -0.0105255125,
      0.02674933,
      0.019561272,
      0.010471914,
      0.00034364947,
      -0.010988222,
      0.027236624,
      0.00011662095,
      -0.011494354,
      -0.018237239,
      0.018617252,
      -0.011963999,
      0.0016296462,
      0.007923705,
      -0.034623712,
      -0.01635276,
      -0.014433309,
      0.007167355,
      -0.02413071,
      0.004912607,
      -0.0024676756,
      0.011320862,
      -0.02558785,
      -0.014668838,
      -0.03154857,
      -0.00006116853,
      -0.004667372,
      -0.007399784,
      0.0054986053,
      0.020837,
      0.0069261407,
      -0.0067609535,
      -0.011844043,
      0.0060645095,
      0.00047956544,
      -0.012252355,
      -0.007450195,
      -0.0367394,
      -0.0068835043,
      0.0089205485,
      0.006437573,
      0.011730312,
      -0.006348982,
      0.033128075,
      0.01222379,
      -0.0009860778,
      0.007637324,
      -0.009955222,
      -0.012322079,
      0.018225254,
      0.022210173,
      0.009514508,
      0.009795649,
      -0.02825508,
      0.0002901408,
      0.007635218,
      -0.015796164,
      -0.0020361182,
      0.019675275,
      0.00487089,
      0.021271316,
      -0.010436728,
      -0.009642278,
      -0.00442112,
      0.015556074,
      0.0074257744,
      -0.008048817,
      -0.011362136,
      -0.004751584,
      0.020598488,
      0.005423897,
      0.002442498,
      -0.025912084,
      0.0006763509,
      0.019944383,
      -0.02139576,
      -0.0066842656,
      -0.016070746,
      -0.0029520965,
      0.038359277,
      0.03399385,
      -0.02294944,
      0.00015040467,
      -0.024724478,
      0.0048138667,
      -0.001931508,
      -0.01261871,
      -0.00083202735,
      -0.021986924,
      0.0037042527,
      0.0029386748,
      0.013257771,
      -0.002359099,
      -0.011317293,
      -0.002679061,
      -0.0036242267,
      -0.0015136086,
      -0.0028642905,
      0.0011936924,
      -0.029753854,
      -0.026158752,
      0.003925862,
      0.020889552,
      -0.011452404,
      0.010702153,
      -0.009603592,
      -0.023366025,
      -0.0057274415,
      0.0015069902,
      0.006444063,
      -0.0044451784,
      0.016242633,
      -0.0045371354,
      -0.008819641,
      -0.002666364,
      0.0068215826,
      0.027256794,
      0.009556534,
      -0.0014853856,
      -0.009092349,
      0.018235803,
      -0.013967406,
      0.0007835047,
      0.008449197,
      -0.0027294138,
      0.014510847,
      0.014461315,
      -0.013560589,
      0.00005450701,
      0.007242124,
      -0.016827086,
      -0.026925018,
      -0.011495802,
      -0.0028015245,
      -0.14084543,
      0.0066362442,
      0.004501232,
      0.0037798434,
      -0.010052695,
      -0.020119738,
      -0.0100701135,
      -0.00552882,
      0.014744115,
      -0.007870023,
      0.03199423,
      0.0025651779,
      -0.014312884,
      -0.017899673,
      0.0061877156,
      0.004848797,
      0.011502001,
      0.0063983016,
      0.049220517,
      -0.018005721,
      -0.0018594642,
      0.008464612,
      -0.0005352474,
      0.0008914956,
      -0.011512395,
      -0.021641776,
      0.0033055465,
      -0.010703626,
      -0.025270801,
      -0.0046233702,
      -0.028572606,
      -0.0149233425,
      -0.0009860152,
      0.020700432,
      0.011957142,
      -0.013895623,
      -0.025937248,
      0.010993365,
      0.0047258236,
      -0.010558011,
      0.0013767105,
      0.003431239,
      0.0327896,
      0.009440138,
      0.0019531553,
      0.005911517,
      0.012250978,
      -0.0075174966,
      0.0029346987,
      0.015716778,
      -0.04523621,
      -0.02121102,
      -0.031868197,
      -0.013900208,
      -0.004914663,
      0.01801123,
      -0.0026091288,
      -0.0044613774,
      -0.0021389003,
      -0.00771783,
      -0.012923954,
      0.014793938,
      -0.0070542446,
      0.03403565,
      0.014915703,
      -0.0064195264,
      0.03518748,
      0.02101342,
      0.015672544,
      -0.005724774,
      -0.01070425,
      -0.006552855,
      0.010019694,
      0.012254645,
      0.01996988,
      0.015409891,
      0.0051939264,
      -0.010684737,
      -0.0059314934,
      0.019146638,
      -0.019229114,
      -0.01613125,
      -0.06302088,
      -0.005647954,
      0.0077330293,
      -0.004682311,
      0.012929968,
      0.032287404,
      -0.013972408,
      -0.0028405513,
      0.0048484523,
      -0.0013461367,
      -0.025091175,
      -0.012508365,
      0.019463466,
      -0.010826074,
      -0.016177144,
      -0.005327005,
      0.014542998,
      -0.022323351,
      -0.021634787,
      0.011394575,
      -0.019803818,
      -0.0076691946,
      0.022218585,
      -0.02230342,
      -0.005678359,
      0.0069712694,
      -0.014572639,
      0.013039647,
      0.009328486,
      0.00783353,
      -0.0009847436,
      -0.17158788,
      0.00525112,
      -0.00761224,
      0.009512789,
      0.011882159,
      0.007239276,
      0.0054034055,
      -0.008723344,
      0.0100582875,
      -0.005356755,
      -0.004071377,
      -0.015213223,
      -0.032904062,
      0.011524445,
      0.022536105,
      0.12959282,
      -0.003604648,
      0.0114832735,
      -0.01627469,
      0.008756577,
      -0.002096588,
      -0.016492706,
      -0.02002456,
      0.0026817166,
      -0.00021031305,
      -0.008633687,
      -0.0033051705,
      -0.018788721,
      0.008436603,
      0.0041952347,
      0.000061013176,
      0.010093059,
      0.015537487,
      0.025204342,
      -0.0014762314,
      0.0024036367,
      -0.01534551,
      0.012314151,
      -0.016914126,
      0.005543071,
      0.004675244,
      0.018192902,
      0.005623518,
      0.0022895853,
      0.01488023,
      0.016015744,
      -0.010727615,
      -0.016030835,
      0.006943361,
      -0.011435784,
      -0.019603929,
      -0.05890877,
      -0.0070771566,
      0.006502667,
      -0.011217089,
      0.027632253,
      0.0141727915,
      0.009069293,
      0.004655824,
      0.018919349,
      -0.016681671,
      -0.009396745,
      0.002430876,
      0.0039081555,
      0.013648446,
      -0.0037661432,
      0.0153628625,
      0.0019097462,
      0.024012413,
      -0.024265366,
      0.030200403,
      0.014608586,
      -0.006253407,
      0.025326839,
      0.004126337,
      -0.0049101016,
      -0.007297956,
      0.012161824,
      0.003692378,
      -0.010934655,
      -0.0018167967,
      0.0000419207,
      0.002473598,
      -0.01766787,
      0.0184426,
      0.01745942,
      -0.04085062,
      0.015035086,
      0.008367025,
      0.0061847637,
      0.0043277047,
      -0.0019404826,
      0.00033349873,
      -0.0030574787,
      0.0065122065,
      0.00847488,
      0.0077257715,
      -0.0034374285,
      0.026955694,
      -0.027410906,
      -0.008380073,
      -0.009095558,
      -0.008430261,
      -0.037472975,
      0.016021645,
      0.01658517,
      -0.0019578105,
      0.011570216,
      -0.001334504,
      -0.018406836
    ]
  },
  {
    "id": "genai_cohort_python_03_Building_a_chai_price_calculator_vtt",
    "content": "All right. Another day, another project that we have to do. So this time the project is going little bit complex and as you will move forward the project are going to be little bit more complex. Nothing much, nothing to be worried on. So the next project that we have is this one. We have a T stall which offers different prices for different cup sizes. Very valid. Write a program that calculates the price based on the size. And I want your attention fully on the problem statement. So I'll remove myself from the screen so that you get full attention on the screen itself, nothing else. So try to analyze this program. No need to hurry up. Try to pause and even see that how you will approach this program, at least, at least some part of the task, you can actually go ahead and do this. So write a program that calculates the price. So the first step is input small, medium or large. That simply says that user is trying to give me an input based on small, medium or large as a price size. And we have done this in the past as well. This is not anything new to us. Then we have to evaluate for the three conditions. This time it can be a small, it can be a medium, or it can be a large. But the difference is this time we have to take different decision based on what's happening. Previously we were just checking for the OR condition cookies or samosa. This time we are actually taking different steps or we are taking different measures based on different condition that we are checking. So we have to be little bit more thorough this time. And if we don't see any of the cup size between small, medium and large, we simply say is unknown cup size. So let's take down this problem and try to build this small chai price calculator. Let's go ahead and close this and create the new one. And this one is chai price calculator. PY of course. So the step one should be very clear and I think everybody should be able to do this. This is input. We have done this in the past. You simply go ahead and put up a message which says something like this. Choose your cup size. And we also will give some message to the user, an indication that you can only choose from small or you can choose from medium, or you can choose from large. And whatever the user says, we'll just go ahead and add a dot lower. We have already seen this is a good practice that we can apply and we have to store this into a variable. Let's call this one as simply cup or user input cup, whatever you want to call now don't worry. Automatically this my co data actually wrap the lines. If they don't fit in the same line, it automatically moves into the next line. But again, nothing to worry. It's still on the same line. No indentation is going on. Okay, once this is done, now we have to evaluate. For evaluation we simply can say if the cup is equals to the variable small or the checking that we are doing for is small and we pretty much know what to do. We have seen this part so far, so this shouldn't be a problem anymore. And we're going to go ahead and say that Your price is 10, rupees. All right, this is all good. We have seen this. So this is rupees. Or we can use the rupee symbol as well. But this is all okay. Now we have to check for another condition. So so far we have seen that in the very first problem statement we have if and else. But what about this case when we have to check for three condition or probably more, we have another keyword that we are going to study instead of the else. Just rewrite that. We have another one which is elif, also known as lf. No other way. We simply can check for cup now and again put another condition that I want to check the cup for medium. Now if the cup is of size medium, I can go ahead and do another print statement, something like this. And I can say price is medium. How much is the price for medium? and rupees. rupees. Rupees. There we go. We also have to check another one. So no worries. We can again use the same lf and we can put up a check for the condition. And there we go. We simply go ahead and check for large. We all have to check for the lowercase large because we are converting our input into the all lowercase. And in this part we'll just go ahead and say print and we will say price. Oops. In the quotes I have to say price is rupees. rupees. For rest of the all things. This is our conditional part. So this is our part two where we check for all the condition. If invalid show cup unknown cup size. So for rest of all the things, I don't want to check anything when you don't want to check anything else is again your best friend. So we simply go ahead and say print and we are going to say unknown cup size. So I hope now you understand that why I didn't want it to teach you about just the conditionals and just the keywords, because these kinds of real world implementation, you only and only learn when you actually solve these kinds of problems. Again, we have studied that. What's the importance of converting everything, what we are taking from the user into a single case, whether that's an upper case or lowercase. And what's really important that we go through with these cycles of this. This is really boring of a, learning process if you just go ahead and learn the syntax. But this time we are actually taking down a problem for a real cafe. Yeah, it is very real. I know this. So I hope you have enjoyed this. Don't forget to rate us and hope you are enjoying the entire content. If yes, do tweet as well. We would love to enjoy to see your progress as well. That is it for this video. Let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 Building a chai price calculator.vtt",
      "originalPath": "genai-cohort/python/03 Chapter Subtitles/03 Building a chai price calculator.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0043215947,
      -0.00083110086,
      0.03688743,
      -0.07145751,
      -0.017024117,
      -0.017176427,
      -0.007315091,
      0.017147148,
      0.011377444,
      -0.001905691,
      -0.005876906,
      -0.015564985,
      0.017635064,
      0.012395847,
      0.123128705,
      0.0050038663,
      -0.00979684,
      -0.009573674,
      0.0012252051,
      -0.0027059566,
      -0.008952195,
      0.027253406,
      0.012043888,
      -0.013618615,
      0.0021682277,
      -0.013397954,
      0.0023837255,
      0.020273993,
      0.01962489,
      -0.0275565,
      -0.01238646,
      -0.014364243,
      0.011911218,
      0.027468598,
      0.008662434,
      0.011648633,
      0.02329771,
      0.002325255,
      0.0011205241,
      0.019399961,
      -0.01347094,
      0.004747014,
      0.0037045947,
      -0.010135541,
      0.0042070653,
      -0.017627003,
      -0.01070839,
      -0.037635244,
      0.021855434,
      0.03502442,
      0.0055035227,
      0.0070297187,
      -0.034365587,
      -0.17599495,
      0.010260261,
      0.009151848,
      -0.0010105043,
      -0.0027558075,
      -0.01615156,
      0.009103849,
      -0.029401986,
      0.014824078,
      -0.025680872,
      0.0021678396,
      0.007891238,
      -0.02239293,
      0.017046584,
      0.00018669624,
      -0.008516542,
      -0.026039446,
      0.019091433,
      0.01958241,
      -0.0048131696,
      -0.008569455,
      -0.023962853,
      -0.016881282,
      0.01273772,
      -0.010264295,
      -0.0070261424,
      0.011228187,
      0.0021567752,
      -0.009263059,
      0.004918552,
      -0.009419019,
      -0.0046296455,
      -0.004500036,
      -0.009412474,
      -0.0009365332,
      -0.010256061,
      -0.013002046,
      -0.028900202,
      0.01703383,
      -0.0016151977,
      -0.00169873,
      -0.026822038,
      0.0129798725,
      -0.012410385,
      -0.0019152014,
      -0.012934334,
      -0.0043594614,
      -0.006276886,
      0.006685172,
      -0.012466214,
      0.00090126356,
      0.0042926073,
      0.002185776,
      0.000923104,
      -0.020661032,
      -0.0019206001,
      0.0007825809,
      -0.00927311,
      0.0010962179,
      0.009516806,
      0.021833632,
      0.008655771,
      -0.18795109,
      0.010629594,
      -0.005330831,
      -0.021443218,
      -0.008838985,
      0.0023707596,
      0.010560935,
      0.0110970065,
      0.022928521,
      -0.010905564,
      0.020894248,
      0.017207993,
      0.02295989,
      0.00071546534,
      -0.0069843065,
      -0.025955189,
      -0.014301608,
      0.017860733,
      0.00091448444,
      -0.008541481,
      0.022578599,
      -0.012811961,
      -0.02648898,
      -0.020450637,
      -0.018419057,
      -0.006931421,
      0.026207643,
      -0.013106688,
      0.01175219,
      0.018039584,
      -0.023244021,
      -0.009850695,
      0.019349208,
      -0.00446104,
      -0.030107252,
      0.009679805,
      -0.009557382,
      0.021809613,
      0.017311914,
      0.0214258,
      -0.03459412,
      -0.008446992,
      0.0127247665,
      -0.0075763133,
      0.018548323,
      0.011196491,
      -0.0062436825,
      0.009310953,
      0.017976776,
      -0.020554714,
      -0.00096103246,
      -0.00049026124,
      -0.017476398,
      0.0039060267,
      0.002234176,
      0.0031547898,
      -0.012017589,
      -0.011198929,
      -0.00221456,
      0.005749681,
      0.008333017,
      -0.0006120526,
      0.00708387,
      0.02251622,
      -0.034188587,
      -0.024638552,
      -0.018961752,
      0.008900991,
      0.016030058,
      0.0072830818,
      0.008147672,
      -0.0059801233,
      -0.0028788508,
      0.024949806,
      0.0039674714,
      0.006818458,
      -0.015610011,
      0.021965984,
      -0.0002892464,
      0.026488304,
      -0.015061309,
      -0.003339819,
      0.005374317,
      -0.004507266,
      -0.012795057,
      0.029802691,
      -0.021768471,
      -0.0022522702,
      0.00060534436,
      0.012980057,
      -0.0053781867,
      0.010837945,
      -0.020441145,
      0.015507307,
      -0.0029373094,
      -0.013887119,
      -0.009401523,
      0.009821079,
      0.031795315,
      0.011021373,
      -0.0028505493,
      0.010910935,
      -0.0100774495,
      -0.0044966373,
      0.006885032,
      0.01947051,
      0.00860366,
      0.006192589,
      0.031001428,
      -0.0072201854,
      -0.0019338919,
      0.021128736,
      0.0047322675,
      -0.009935157,
      0.015555271,
      0.042002074,
      -0.010696261,
      -0.021130636,
      -0.0022165694,
      0.005434081,
      -0.0038232154,
      -0.023591757,
      0.03758149,
      0.017310057,
      -0.00006553402,
      -0.000473263,
      0.024595035,
      -0.015794925,
      0.00816904,
      0.010711884,
      -0.012276337,
      -0.0054135066,
      -0.018774105,
      0.0066695153,
      -0.021577874,
      -0.016284982,
      -0.0054739662,
      0.004938506,
      -0.023031652,
      0.009855115,
      -0.0407182,
      -0.0008017534,
      -0.005858432,
      -0.003458766,
      0.0026042406,
      -0.008758753,
      0.0004100315,
      0.0040583047,
      -0.0026650764,
      0.036838017,
      -0.014423534,
      0.016060445,
      0.032177504,
      -0.022992764,
      0.028726308,
      0.011896435,
      -0.005043261,
      -0.0033056268,
      0.003693411,
      -0.019629544,
      0.015280485,
      -0.11444522,
      0.009916788,
      -0.0027469676,
      -0.015206857,
      0.014090441,
      0.011805807,
      -0.0021353008,
      0.0004167867,
      -0.0069456035,
      0.014375093,
      0.02585453,
      -0.011250945,
      0.03225803,
      -0.032105517,
      -0.02411937,
      -0.01306118,
      -0.009458949,
      -0.014340374,
      0.01687692,
      -0.014276006,
      0.004125716,
      -0.027268907,
      -0.020418866,
      0.0007235921,
      0.019629536,
      0.003432823,
      -0.004466758,
      0.021871606,
      0.024039151,
      -0.0049749403,
      -0.017792786,
      0.016393106,
      -0.0040107495,
      -0.014024039,
      -0.004863531,
      0.01230735,
      0.029767284,
      -0.016455697,
      0.010709546,
      -0.0127420025,
      0.01570076,
      -0.023764528,
      0.0014872968,
      0.02788545,
      -0.0076898863,
      0.008754045,
      -0.013639089,
      -0.00037177527,
      -0.019387161,
      -0.003951604,
      -0.004683265,
      0.022869818,
      -0.015674828,
      -0.013688423,
      0.000053063235,
      0.017402008,
      0.019330401,
      -0.004489533,
      -0.013184432,
      -0.0028158852,
      0.0036272358,
      -0.0039669327,
      -0.01062271,
      -0.006748416,
      0.013332716,
      0.0010244653,
      0.008250345,
      -0.005020828,
      -0.022602098,
      0.00223319,
      0.01610477,
      0.01506056,
      -0.00479151,
      -0.03117657,
      0.000022263714,
      0.014413182,
      0.008675721,
      -0.026844494,
      -0.012212766,
      0.01922715,
      0.02444495,
      -0.017128844,
      -0.017771972,
      0.009404096,
      -0.0061250674,
      0.008578077,
      0.0043007284,
      -0.003248663,
      0.0016272918,
      -0.025604913,
      0.018698797,
      0.005363722,
      -0.008323124,
      0.008087079,
      -0.016941912,
      0.010291064,
      -0.020388758,
      0.011522023,
      -0.00083841744,
      0.030448444,
      0.0051977406,
      -0.00641268,
      -0.0011290924,
      0.00060799916,
      -0.018092223,
      -0.0065624877,
      -0.03359596,
      -0.02655277,
      0.015490083,
      -0.018579703,
      0.013355068,
      0.0018400126,
      -0.021190913,
      -0.0027988108,
      -0.006730217,
      0.020464335,
      0.0186517,
      0.01441937,
      0.0150752505,
      -0.0063839597,
      -0.0019636117,
      -0.0021882802,
      -0.0035499197,
      0.011014521,
      0.008391531,
      0.008401037,
      -0.009534398,
      0.0074616657,
      -0.021962877,
      -0.014895391,
      -0.022790724,
      0.031908877,
      -0.030845992,
      -0.015309646,
      -0.011698181,
      -0.004104767,
      0.020257097,
      0.026717743,
      0.021038234,
      -0.0031552126,
      0.001117836,
      0.013621078,
      -0.0039938013,
      -0.0018759279,
      -0.022357553,
      0.012739137,
      -0.008050209,
      0.00034777043,
      0.00993415,
      -0.022495944,
      -0.02355734,
      -0.027171176,
      -0.006888293,
      -0.0010137426,
      0.010209297,
      -0.0019169217,
      0.0058368,
      -0.0065793083,
      -0.021593384,
      -0.017031932,
      0.004927491,
      -0.0036320959,
      -0.011081246,
      0.0024307368,
      0.029066034,
      0.008375681,
      -0.0016356808,
      0.005837811,
      0.011742854,
      0.0068333806,
      -0.010485353,
      -0.014103698,
      -0.011289463,
      -0.002838177,
      0.0018398174,
      0.0056566396,
      0.020422064,
      -0.015740681,
      0.021097703,
      0.02233175,
      -0.0074114846,
      0.011188682,
      -0.010045579,
      -0.00115909,
      0.008777211,
      0.007413273,
      -0.000900563,
      0.01965029,
      -0.0526076,
      0.016066557,
      0.003925393,
      -0.015474522,
      -0.0032872055,
      0.011840243,
      -0.004739507,
      0.007141913,
      -0.0028866602,
      -0.0038244594,
      -0.0020221656,
      0.0031413545,
      0.004578837,
      -0.0035200536,
      -0.011697277,
      -0.0027294573,
      0.012560636,
      -0.00029170615,
      0.003071799,
      -0.0027543895,
      -0.010141184,
      0.0026633323,
      -0.014351108,
      -0.0018818579,
      -0.011091651,
      0.008101174,
      0.044646475,
      0.017933356,
      -0.035959825,
      0.012509795,
      -0.019863613,
      0.011004751,
      0.011445771,
      -0.013939201,
      0.013795223,
      0.0020164568,
      0.012069421,
      -0.0013089858,
      0.014141417,
      0.008310105,
      -0.0074070203,
      0.0026024699,
      -0.01438487,
      0.019007634,
      -0.008214519,
      0.011028076,
      -0.05118331,
      -0.025916457,
      0.00946318,
      0.019758448,
      -0.020926163,
      0.01625375,
      -0.00942116,
      -0.012139013,
      -0.0031430323,
      -0.008679897,
      -0.002775028,
      -0.009061261,
      0.0227032,
      0.007875322,
      -0.0025947369,
      -0.0039362805,
      -0.003990509,
      0.013428542,
      -0.00008884293,
      -0.009929258,
      -0.015604704,
      0.024533564,
      0.0033687335,
      -0.0069746305,
      -0.0048796786,
      -0.005283413,
      0.028431257,
      0.01723903,
      0.0016423143,
      -0.00023798166,
      -0.0017552522,
      -0.019218203,
      -0.005820042,
      -0.0138476165,
      -0.0045011183,
      -0.1450049,
      0.006119239,
      0.012264706,
      -0.007846317,
      -0.0205793,
      -0.0059529473,
      0.0010186275,
      -0.017050207,
      0.018023951,
      -0.012097824,
      0.039072916,
      0.0005944854,
      -0.0068150535,
      -0.021825694,
      0.0022223133,
      0.00039669758,
      0.016102968,
      0.017235272,
      0.028647013,
      -0.012813252,
      -0.005419491,
      0.0068816566,
      0.018702725,
      -0.0041464106,
      -0.01421416,
      -0.018069196,
      0.0019305063,
      0.006184277,
      -0.009259137,
      -0.011311338,
      -0.034439836,
      -0.008526013,
      -0.01042751,
      0.016587107,
      0.006493695,
      -0.010316279,
      -0.013270167,
      0.005570959,
      0.02662511,
      -0.016164364,
      0.008752688,
      -0.00029172318,
      0.04499792,
      0.016071593,
      0.0016607934,
      0.0041159797,
      0.02373931,
      -0.013835959,
      0.0001376159,
      0.029089404,
      -0.031836506,
      -0.018421793,
      -0.021391809,
      -0.0027167473,
      -0.002554976,
      0.0039259894,
      0.0024161588,
      -0.0062632114,
      0.00004864526,
      -0.020496728,
      -0.020829998,
      0.0109852655,
      0.010051943,
      0.032766264,
      0.0054818485,
      -0.0043786713,
      0.031057583,
      0.024972068,
      0.009447892,
      0.0022507247,
      -0.013427483,
      -0.028992161,
      -0.013061217,
      0.0053566527,
      0.014883696,
      0.013542061,
      0.016634878,
      -0.009164125,
      -0.0028781884,
      0.01694042,
      -0.017131057,
      -0.016086675,
      -0.056628,
      -0.018152423,
      -0.00032720494,
      0.011677389,
      0.0067593143,
      0.02725095,
      -0.0057646525,
      -0.015057788,
      0.003221578,
      0.006011025,
      0.0010149688,
      0.009944822,
      0.018508274,
      -0.009979911,
      -0.008736812,
      -0.0015835743,
      -0.02180719,
      -0.0005077562,
      -0.0141932415,
      0.008726592,
      -0.01644173,
      -0.009913981,
      0.020019751,
      -0.032596774,
      -0.004106697,
      0.018859668,
      -0.015142329,
      0.012502813,
      0.010459361,
      0.0016623244,
      -0.008001379,
      -0.15835983,
      -0.0031255886,
      -0.0005018358,
      0.008286561,
      0.0049546207,
      0.00495818,
      -0.006253253,
      -0.007734492,
      0.01278304,
      -0.0045387647,
      0.00676644,
      -0.017862838,
      -0.026921602,
      0.010493122,
      0.04537927,
      0.1250102,
      -0.016727956,
      0.0136644915,
      -0.013367484,
      0.01141474,
      -0.0017431624,
      -0.006050634,
      -0.025362419,
      0.002208996,
      0.000052652013,
      -0.001282517,
      0.002278779,
      -0.011380997,
      0.0070444327,
      0.0010421808,
      -0.0007036406,
      0.013445763,
      0.014823308,
      0.018596916,
      -0.002582932,
      -0.015695054,
      -0.0091341715,
      0.020762723,
      -0.014140535,
      -0.019992243,
      0.024764396,
      0.006973652,
      -0.0049795466,
      -0.00035686503,
      0.01423922,
      0.0011922513,
      -0.021197824,
      -0.031900402,
      -0.0077578123,
      -0.0062233508,
      -0.030998958,
      -0.059771847,
      -0.010954366,
      0.0039567486,
      -0.0045044026,
      0.015082765,
      0.024835931,
      0.009882815,
      0.017923985,
      0.023154512,
      -0.0059910533,
      -0.014537805,
      0.0028857063,
      -0.009523505,
      -0.0037699696,
      -0.0065311384,
      0.026810963,
      -0.00035884354,
      0.018035011,
      -0.017830972,
      0.022023391,
      0.015239767,
      -0.008541691,
      0.022398734,
      0.0031674863,
      -0.022575088,
      -0.015024284,
      0.028160838,
      -0.0066787675,
      -0.0038477941,
      -0.004808841,
      0.010466295,
      0.009475808,
      -0.021183299,
      0.027015757,
      -0.007959574,
      -0.02638057,
      0.009667823,
      -0.0066789496,
      0.004155757,
      0.00817769,
      -0.01628092,
      -0.025167288,
      0.011268833,
      0.016266659,
      0.011448939,
      0.0006362147,
      -0.004730377,
      0.0222285,
      -0.011303195,
      -0.0037004682,
      0.0121209705,
      -0.004163191,
      -0.026717743,
      0.009900219,
      0.023349442,
      -0.017215308,
      0.004822726,
      -0.007206997,
      -0.028899493
    ]
  },
  {
    "id": "genai_cohort_python_04_Building_Smart_Thermostat_system_vtt",
    "content": "All right, let's move on. And this one is a little bit of a complex problem. But yes, we have to deal with the complex problems as well. The ability to handle the complex problems will make you a great developer. Don't shy them away. They look really, scary at first. But eventually you will nail down much, much greater problems than this. So let's read this one by one. The step one is always to read the problem as closely as you can. So notice here you can. You are building a smart thermostat alert system. Pretty good. We are building a thermostat alerting system. And what do we want to do in this, system? Just read this pretty easy. If the device status is active, okay, so we have to measure the device status first and the temperature is above Then we have to put up a warning sign that high temperature alert, all right? Else the temperature is normal. If the device is off, device is offline. So notice here we are not checking just for one condition, but we are checking for one condition and inside that also we are checking for another condition. And this is a kind of a leveling of the condition. As you can say. This is also known as a nesting of if statements. But again, that doesn't really matter or doesn't really sound much. Now you have seen the problem statement. You can see, it makes sense. I'm checking for one condition, then inside that I'm checking for further another condition. And then only I'm putting up the warning message. Else part is pretty clear. And we are checking for here. So first let's see how we can actually take down this problem. So we'll close this one and we'll create a new file and we'll call this one as smart, probably lowercase smart thermostat. Py the first thing that we have to measure is device status. I don't know how that is coming up, but as of now, let's assume that the device status is active. Now as the problem statement says, it could be device status as active or it could be as device is offline. So that's good. And I another thing that will come up here is notice here the temperature is 35, so we are checking this only when the device status is active. So let's just say we create a variable. We call this one as temperature. Temperature. And the temperature is Okay, so how do we write a program? We simply go ahead and say if the device status is equals to active. If it is active, we simply go ahead and Put some message. And by the way, just for temporary point, you want to write the else part first. There is a nice trick in these kinds of statements. You can write a keyword as pass. Pass simply means I will come back here. We'll do about it later on. Right now just ignore this so that you don't give me any warning. I come back here and I write the else part here and else part. The writing of the else part is easy. If the device status is active, we are doing something else. If the device is off, we are saying device is offline. So here I can simply go ahead and print a statement that says like this. And we simply call this one as device is offline. So I hope you can see, the keyword pass helped me to write the else part first. Without giving me any warning. If I just go ahead and remove this and write it like this, it always keeps me yelling give me that squiggly line. So I don't like them. So I sometimes temporarily write these kinds of code just because I want to come back here later. Now notice here it says okay, device is active. If we go into this part, then we simply check for the temperature. If it is above 35, we put a warning. Otherwise we say temperature is normal. So inside this we can again start if condition here or conditional block and we can check for temperature here. Now temperature. If it is greater than 35, we simply go ahead and say some message. So I'll just go ahead and print a simple statement, high temperature alert. And if it is an alert, it should end with an exclamation. And here also I can put up an else part. And this is the most interesting and point where you should pay a little attention. So I'll just go ahead and print this and I will first say temperature is normal. So the most important part here is. Notice here we have two else's here, but each one is denoted inside a block. The block is the most important part that we are studying here. This is the outer block. The else part here is of the outer if. But here we can see this is if statement and the if can be easily found out. The else part with the indentation. Now here the else part is actually totally optional. We could have it. We couldn't have it. Doesn't really bother us much. We can have it. We might ignore it, but in this case we have it. Our problem statement says that we need to have it. But again, pay small attention on the indentation and how the leveling. And again there is nothing which is stopping you to start another block inside the if statement. Maybe after printing a message you want to start another condition here, so you can go ahead and start another condition. So so let's just say I will simply write it as true and then I want to write another print statement. I can just go ahead and write that I will not do it here. This was just to explain you, but get the point that yes, we can write as many if else nesting of them as we like. Or the problem statement says right now, our problem statement says that hey, you should do only this much. So yeah, we are okay, we are doing this much only. Hope you have enjoyed building this smart thermostat warning system and hope you have enjoyed this. If yes, please do rate us. Let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 Building Smart Thermostat system.vtt",
      "originalPath": "genai-cohort/python/03 Chapter Subtitles/04 Building Smart Thermostat system.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.00024961564,
      -0.000028788716,
      0.022264864,
      -0.06473789,
      0.000616175,
      -0.018605756,
      0.0050756624,
      0.024440791,
      0.003611094,
      -0.01101154,
      0.002454712,
      -0.019680062,
      0.013199072,
      0.026258988,
      0.117370486,
      0.0119593525,
      -0.01023158,
      -0.0049054213,
      0.016165018,
      -0.0022777787,
      -0.000533673,
      0.0060415096,
      0.0020094921,
      -0.01649636,
      -0.00010141741,
      -0.0018780568,
      0.0023430167,
      0.025261529,
      0.01824042,
      -0.034467746,
      -0.009941407,
      0.005031595,
      0.0142207965,
      0.018873833,
      -0.010260655,
      0.0048418147,
      -0.003118707,
      0.00224973,
      -0.01640462,
      0.022334915,
      -0.014725051,
      0.003490659,
      0.009564578,
      -0.010748246,
      0.0177196,
      -0.004906592,
      0.0003489927,
      -0.009152907,
      0.010571841,
      0.042721752,
      0.002426651,
      0.01639295,
      -0.03404267,
      -0.19187926,
      0.016183475,
      0.007156839,
      -0.011067644,
      0.007549538,
      -0.0062733837,
      0.008475286,
      -0.030219141,
      0.015214867,
      -0.029269688,
      -0.015254042,
      0.002266224,
      -0.009317496,
      0.026031233,
      -0.012287247,
      0.0059013343,
      -0.009989746,
      0.010072832,
      0.012334814,
      -0.0063111144,
      -0.008286693,
      -0.01614368,
      -0.021976383,
      0.004917653,
      -0.012124602,
      -0.014394308,
      0.0050340286,
      0.001252189,
      0.004492083,
      0.0070628054,
      -0.0066389297,
      0.0011979225,
      -0.02093038,
      -0.021630565,
      0.0031569996,
      -0.0037855667,
      -0.004966171,
      -0.029743098,
      0.0021643946,
      0.009968099,
      0.024635416,
      -0.010175729,
      0.0024797667,
      -0.008723965,
      0.00081592816,
      -0.004132253,
      -0.0005180586,
      -0.0027304417,
      0.0007644255,
      -0.009575764,
      -0.011338553,
      -0.0006602683,
      0.0020048087,
      -0.015181889,
      -0.011793476,
      0.0012532219,
      -0.0061341785,
      0.012136324,
      -0.018923301,
      -0.006380647,
      0.022263674,
      0.007061363,
      -0.17817767,
      0.0008492103,
      -0.0009768844,
      -0.0025657273,
      0.0067804456,
      -0.00651591,
      0.0016196177,
      0.0218955,
      0.019522326,
      -0.011665901,
      0.009227413,
      0.013002091,
      0.019362656,
      0.0072246497,
      0.0019882785,
      -0.017649094,
      -0.019440556,
      0.01579255,
      0.005263274,
      -0.0077247974,
      0.01417227,
      -0.017803622,
      -0.010128928,
      -0.02598418,
      -0.01428137,
      -0.007434367,
      0.021848734,
      -0.010708904,
      0.015783353,
      0.0075418632,
      -0.020001635,
      -0.006150595,
      0.030738713,
      -0.007959279,
      -0.038730837,
      -0.00489515,
      -0.023253037,
      0.013558265,
      0.01496025,
      0.028709691,
      -0.034155935,
      -0.013530327,
      0.006178398,
      0.0023410472,
      -0.006515144,
      0.0010067757,
      0.0018373231,
      0.0027376944,
      0.012481257,
      0.013455396,
      -0.019065702,
      0.013901553,
      -0.004900097,
      0.011627631,
      0.01284383,
      0.0153264385,
      -0.0152974045,
      -0.006337603,
      -0.005379345,
      0.0026457147,
      0.004783534,
      0.0056203455,
      -0.0015353729,
      0.0067188237,
      -0.0011649302,
      -0.017247697,
      -0.009596239,
      0.010560874,
      0.012796109,
      -0.00048572198,
      -0.017500194,
      -0.0034514247,
      0.013680049,
      0.0015501023,
      0.007895839,
      0.006659601,
      0.0014025186,
      0.015134883,
      0.0066253617,
      0.031207267,
      -0.011371879,
      -0.0030488337,
      -0.00103105,
      0.0010368965,
      0.0014155129,
      0.035584625,
      -0.019079447,
      0.002184297,
      -0.008783734,
      0.015131468,
      -0.0031896143,
      0.012257409,
      -0.030395431,
      0.015112586,
      -0.004664942,
      -0.0012197123,
      -0.0022630235,
      -0.0006869205,
      0.012028494,
      0.018304465,
      -0.017997643,
      0.02399241,
      -0.0006429893,
      0.009025437,
      0.02166129,
      0.009390208,
      0.020241711,
      -0.0026083768,
      0.03642043,
      0.0024357915,
      -0.004101936,
      0.016993089,
      0.0005742868,
      0.0022930237,
      0.01907919,
      0.02530163,
      -0.019864442,
      -0.0036795477,
      -0.0020422572,
      0.01875776,
      0.009040164,
      0.007836627,
      0.027995728,
      0.020039322,
      0.011642022,
      0.008693248,
      0.018136436,
      -0.022564009,
      0.019959139,
      0.019986978,
      -0.015015524,
      -0.0042365273,
      -0.017699838,
      -0.00031597822,
      -0.025811443,
      -0.00029145583,
      -0.0118242735,
      0.006028315,
      -0.008170177,
      0.0009957571,
      -0.017358022,
      -0.010468127,
      -0.0062311105,
      0.013320063,
      0.0065394677,
      -0.0106857335,
      -0.012817476,
      0.0022718257,
      -0.0009828472,
      0.025120731,
      -0.0321659,
      0.019846777,
      0.026038444,
      -0.011236181,
      0.023099912,
      0.01609652,
      -0.007790718,
      -0.014700489,
      -0.011328879,
      -0.02431839,
      0.023779497,
      -0.09423513,
      0.021826226,
      0.0055921823,
      -0.028066386,
      0.011920071,
      0.002016347,
      -0.024538457,
      -0.0014523008,
      0.012395812,
      0.012543446,
      0.012370822,
      -0.01818821,
      0.011100723,
      -0.032205768,
      0.009314178,
      -0.016878774,
      -0.01083657,
      -0.023960523,
      0.03503372,
      -0.02065093,
      0.0032433674,
      -0.040343992,
      -0.027186561,
      -0.011313954,
      0.02824607,
      0.022095846,
      0.01901647,
      0.036380436,
      0.017695121,
      0.0011489653,
      -0.018181339,
      0.020755937,
      -0.0036920612,
      -0.027740385,
      0.0033251871,
      0.011773855,
      0.018905567,
      -0.009030578,
      0.011018509,
      -0.012519581,
      0.018077837,
      -0.006493184,
      0.012022157,
      0.0172461,
      -0.0017951378,
      0.0016039192,
      -0.011322168,
      0.01338683,
      -0.04511897,
      0.0012611134,
      -0.0043249186,
      0.033842858,
      -0.011149497,
      -0.011286865,
      0.0053840745,
      0.014702445,
      0.01668754,
      -0.004285829,
      -0.009483699,
      0.0030955644,
      0.0063813813,
      -0.011038503,
      0.0049541583,
      -0.0053197537,
      0.0024653103,
      -0.001284059,
      0.013991093,
      -0.006944559,
      -0.02130606,
      0.00044683294,
      -0.001164083,
      0.014314164,
      0.0021872008,
      -0.03058551,
      0.010880899,
      0.0037444804,
      0.0053685205,
      -0.021597622,
      -0.027381474,
      -0.002092727,
      0.018460615,
      -0.010509046,
      -0.016890844,
      0.022247799,
      0.0033314943,
      0.014037198,
      0.0020887179,
      -0.013010396,
      -0.013762831,
      -0.02567445,
      0.010852165,
      0.009827387,
      -0.018272396,
      0.0077362084,
      -0.025234252,
      0.0013701037,
      -0.019481633,
      -0.010984196,
      -0.0062300507,
      0.005730369,
      -0.020010049,
      0.0129305385,
      -0.021212194,
      0.0012286995,
      0.00090410357,
      0.008825764,
      -0.01873432,
      -0.03492859,
      -0.0039497623,
      -0.017539086,
      0.0075799124,
      0.011205255,
      -0.010705813,
      0.0050194603,
      -0.021127623,
      0.008438359,
      0.009585956,
      0.010968438,
      0.0057215947,
      -0.0018637474,
      -0.004277123,
      -0.0027044665,
      0.0023258347,
      0.029906362,
      0.00041293164,
      0.021532457,
      -0.005981225,
      0.009186344,
      0.00030377638,
      -0.0319645,
      -0.03569998,
      0.01884243,
      -0.013775578,
      -0.020786522,
      0.0076332767,
      -0.004616597,
      0.011098782,
      0.016709602,
      0.010479805,
      0.000055805664,
      0.00460381,
      0.012767769,
      -0.007218998,
      -0.020285478,
      -0.010931172,
      0.01404113,
      0.0035357145,
      -0.0057928385,
      0.013866873,
      -0.021562362,
      -0.016835334,
      -0.01917722,
      -0.0283876,
      -0.001117786,
      -0.0073157544,
      0.0044089076,
      -0.012785552,
      -0.012981549,
      -0.02680723,
      -0.030920217,
      0.020422678,
      0.010791542,
      -0.032445163,
      0.0091775805,
      0.021402003,
      0.0037831326,
      -0.020670429,
      0.0070342766,
      -0.0029420767,
      0.019240992,
      -0.017999906,
      0.006064653,
      -0.007215533,
      -0.0055932687,
      0.0053848517,
      0.012846029,
      0.019458296,
      -0.0069794715,
      0.04561039,
      0.01861399,
      -0.0017474425,
      0.00556874,
      -0.013003495,
      -0.0034675263,
      0.009925381,
      0.004842952,
      0.015215905,
      0.009106448,
      -0.018513976,
      0.007019245,
      -0.0052738204,
      -0.022281623,
      0.01249751,
      0.00184979,
      0.010551705,
      0.023851942,
      -0.0023657202,
      0.0019950543,
      0.014953668,
      0.019358434,
      0.003789021,
      -0.0015301242,
      0.002961004,
      -0.004030614,
      0.0142975105,
      -0.00079981313,
      -0.001506069,
      -0.016165541,
      -0.0027464926,
      0.010381796,
      -0.0213352,
      0.004789279,
      -0.008094619,
      0.005620889,
      0.021395275,
      0.019461837,
      -0.016706767,
      0.01856,
      -0.024642538,
      0.009744974,
      0.009312632,
      -0.009585162,
      0.018467126,
      0.0014325142,
      0.0065993806,
      -0.010016272,
      0.01059383,
      0.0029289774,
      -0.018101564,
      -0.0025212432,
      -0.00920329,
      0.012872553,
      -0.012106754,
      0.026935173,
      -0.024279224,
      -0.019213926,
      -0.0028802613,
      0.027310465,
      -0.026758786,
      0.0014920769,
      -0.0017513768,
      -0.007794411,
      -0.01283919,
      -0.012455909,
      -0.0007417468,
      0.002509808,
      0.014275567,
      -0.00407277,
      -0.017603837,
      -0.0023017111,
      -0.0015635096,
      0.034063697,
      0.007917982,
      -0.0023832251,
      -0.025544122,
      0.0244475,
      -0.0026214384,
      -0.00043191662,
      -0.0041656303,
      -0.012450903,
      0.031190526,
      0.012938091,
      -0.0006593937,
      0.01391423,
      0.0043078414,
      -0.057313118,
      -0.0057936115,
      -0.0025864902,
      -0.007498448,
      -0.15237078,
      0.017782887,
      0.0030411403,
      -0.024470469,
      -0.008493131,
      -0.013607453,
      0.03532987,
      -0.015500779,
      0.022348074,
      -0.0077266875,
      0.027144173,
      0.009209237,
      -0.010848595,
      -0.0037235639,
      -0.0043979213,
      0.003069296,
      0.023389349,
      0.023812456,
      0.038960066,
      -0.026440779,
      -0.006430579,
      -0.0076265694,
      0.013314975,
      0.00667156,
      -0.0050955294,
      0.002083691,
      -0.0043411795,
      0.014656919,
      -0.0037617867,
      -0.0107174795,
      -0.03934665,
      0.0058800704,
      0.015414042,
      0.019260703,
      0.0009805085,
      -0.0008430668,
      -0.014293205,
      -0.0031057815,
      0.0074045183,
      -0.011236689,
      -0.010624423,
      -0.006583974,
      0.013398266,
      0.010696117,
      -0.0139272865,
      -0.016154708,
      0.021445988,
      -0.006517078,
      -0.005504569,
      0.021703513,
      -0.02947765,
      -0.003631349,
      -0.012669995,
      -0.015011452,
      -0.011531386,
      0.019657059,
      0.009846968,
      0.0044571613,
      -0.019269733,
      -0.015563703,
      -0.029565869,
      0.010385725,
      0.0070630093,
      0.011810699,
      0.010048527,
      -0.008543144,
      0.019885158,
      0.014149974,
      0.019460948,
      0.016613077,
      -0.014628617,
      -0.00089936075,
      -0.006241059,
      0.0016025446,
      0.00682322,
      0.0027651074,
      -0.0045727217,
      0.013106291,
      -0.013705143,
      0.012987067,
      -0.012513384,
      -0.021558931,
      -0.072596766,
      -0.022073854,
      0.018882342,
      0.008796714,
      -0.006650984,
      0.02115303,
      -0.0012157984,
      0.0022995179,
      -0.0027169196,
      0.0054823547,
      -0.0051132883,
      0.007531249,
      0.013786112,
      -0.013410934,
      -0.014836712,
      -0.0091347555,
      -0.012891916,
      -0.00034444995,
      -0.006337477,
      0.019969525,
      -0.004987489,
      -0.0009356489,
      0.0008047647,
      -0.017471815,
      0.029992735,
      0.013638243,
      -0.014439171,
      0.007373175,
      -0.000023352817,
      -0.022263672,
      0.0017947655,
      -0.15107656,
      -0.018506777,
      -0.00016144707,
      -0.0018484949,
      0.011033061,
      0.000030163073,
      -0.0030472209,
      -0.01648508,
      -0.0097634485,
      -0.0053539053,
      0.014284234,
      0.0003724927,
      -0.012691198,
      0.0004436594,
      0.024299044,
      0.12309719,
      -0.013925829,
      -0.007437848,
      -0.0023126106,
      0.006439531,
      0.008526983,
      -0.006509492,
      -0.017556516,
      0.027943123,
      -0.00227017,
      -0.008896262,
      -0.0032108773,
      -0.00444557,
      0.020943202,
      0.006773103,
      -0.005693028,
      0.0015190247,
      0.002131461,
      0.017789477,
      0.0047392016,
      -0.012054103,
      0.005959997,
      0.017286744,
      -0.00073810574,
      -0.00741424,
      0.0055834185,
      0.0051947194,
      -0.00033644043,
      -0.00021270405,
      0.020793345,
      -0.006639364,
      -0.0021388913,
      -0.04326743,
      0.001198394,
      -0.014217422,
      -0.04181515,
      -0.05893613,
      -0.006712907,
      -0.013508421,
      0.0044448236,
      0.023839805,
      0.016897587,
      0.017735466,
      0.009848759,
      0.014570051,
      -0.0088921515,
      -0.006259978,
      0.002162688,
      0.0003242643,
      -0.009833231,
      -0.009579728,
      0.020941306,
      0.0027729962,
      0.028392455,
      -0.031187018,
      0.024947243,
      -0.004041919,
      -0.01031978,
      0.024285154,
      -0.014825252,
      -0.015379866,
      -0.010004118,
      0.044784043,
      0.011459708,
      -0.0028781716,
      0.0023582624,
      0.009162947,
      0.0070697037,
      -0.026523262,
      0.018203652,
      -0.020161185,
      -0.020071559,
      0.022711111,
      0.012309392,
      0.012738391,
      -0.0010509264,
      -0.016175281,
      -0.010689048,
      0.015039267,
      0.015208258,
      0.016352994,
      -0.012244296,
      -0.014667517,
      0.026488885,
      0.00065017963,
      -0.000050725426,
      -0.00143082,
      -0.0010512018,
      -0.022104228,
      0.0044778106,
      0.018336337,
      -0.014880717,
      0.006694574,
      0.0013052055,
      -0.028100599
    ]
  },
  {
    "id": "genai_cohort_python_05_Delivery_fees_waiver_system_vtt",
    "content": "All right, so the next problem that we are going to deal up with is little bit had to do more with the syntax of Python rather than just solving the problem. This exact same problem can be solved by if and else, and rightly so, it can be easily done. But the whole point of learning the Python so that we can understand variety of syntax that other people are writing. And this is one of the common way of writing the Python syntax. So notice here the problem statement. First let's go ahead and read this. This is the most fun part. You run an online T store. I would love to run an online T store. If the order amount is more than 300, delivery is free, otherwise it costs rupees. Fair deal. Now the task that we have is input the order amount and use a ternary operator to decide the delivery fees. Now there are a variety of ways how this problem can be solved and rightfully so. I can simply take the order amount, then I can do an if and else. If the order amount is more than 300, I can mark a variable delivery fees as If it is less than 300, I can mark it as rupees. Surely I am pretty sure you can do this now. But the way how it is asked us to do so is use the ternary operator to decide the fees. This is where the syntax comes and it's a really interesting syntax. So let's call this one as new file and we're going to call this one as delivery fees waiver or calculator. I think waiver would be good waiver py. So the way how we want to do it, first of all we have to grab the order amount. So let's go ahead and say this is our order amount that we have and the order amount. Again my AI needs to shut up and the order amount. So how we're going to do this, we are going to first go ahead and take the input and we'll ask the user to say enter the order amount. There we go. Now whatever the user enters at his order amount first we need to check that how we are getting the data. And for this I would like to print this order amount just like this. Let's use a formatted string and say order amount. And I can definitely go ahead and get the order amount as a value. But what I really want is to check the type of it. And the way how we do it is just put the type and I simply say order amount. Now this will teach you a really interesting aspect of how we go ahead and run the program or how we get the input data. So I'll just go ahead and say Python and we are going to run this delivery fees. It asks us the order amount and I just say this is 40, rupees. Now, notice here it says the class of string. So the data that we are getting from the user back is actually in the string format. You might be wondering, no, this is a number. This is a number. But in the world of Python, there are two different things. Once you write a like this, and once you write a like this, there is a huge difference between them. One inside the double quote is a string. One, this is a number. So we need to figure out a way how we can convert this string into a number. And trust me, there is a super easy way. Just take your input, wrap them, in a parenthesis, and this just at the front of it, write int. Int stands for integer. Just like this, you can convert them into float as well or a string as well. The moment you say int, that means whatever the value is coming up from, which is a string, it will try its best to convert into the string. If it fail, that's okay, but it will try its best. Let's run the program again. And when I say this time, notice here, the class changes to the integer and the order amount is But yes, our program is still prone to some of the errors. We will talk about them as we go forward. Let's just say instead of the amount, if I just go ahead and add my, it will crash. That, hey, I don't know how to convert hitesh into a number or rather a specific integer. So this is the first part that you have learned so far and pretty good. Notice here. Each project gives you a new knowledge which is absolutely, I love. All right, next up, what we want to do now that we have gone through with this, particular cycle, let's see how we want to calculate the delivery fees. So I have another one. Delivery fees. Delivery fees. Now you can just go ahead and do something like this, that my Delivery fees is as of now and I can do a simple if statement. If the order amount is greater than 300, I can just go ahead and change the value of this delivery fees instead of pointing towards zero. If it is above 300, then I can just keep it as it is zero. And in the else part, if it is less than or I can use an else if that is also if the order amount is less than 300, I can mark it. All we can do. But I want you to pay attention on this ternary operation. In the world of ternary operation, how you can actually shrink this piece of code instead of if and else. It might sound a little bit overwhelming at first, but just pay attention. Right now we have a variable, delivery fees. After that you're putting up what should go inside this variable. It can be zero or it can be something. The way how ternary operation work, you simply say the delivery fees is zero if the order amount that you have is greater than And on the same line you can say else the order fees will be rupees. Now this looks like a lot, but notice here what's happening. This whole thing is being calculated, this whole thing is being evaluated. And whatever is the result that goes into the delivery fees as a variable, the first value that we are Putting up is If the order amount is above 300, if this statement is correct, then this value will go inside the variable. If this statement is false, then the else part, whatever the value are putting up will go inside the delivery fees. Let's go ahead and try this and try to print the delivery fees so that we can see that in action. So we'll just go ahead and print the statement and we're going to say delivery fees is. And we'll use our classic just like this, delivery fees. All right, and why is it having the issue? I guess delivery fees is. And I forgot to close this one should be all happy now let's try to run this program and see what happens. So let's just say enter the order amount. Let's just say my order amount is So in that case the delivery fees is If I run it again and if my order amount is, let's just say 400, the delivery fees is zero. So you can see both the things in action. We get the delivery fees as and And this is a lot that we are writing in just one line of code. And that is why I say Python looks simple. It's just like reading English. But sometimes the logic is little bit interesting to Var out for. So, so that is what I'm saying. Go ahead and Var out for these things. And again we can only learn about them as we write these kinds of real world programs and try to solve real world problems as a software problems. That is it for this video. Make sure to review us and let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 Delivery fees waiver system.vtt",
      "originalPath": "genai-cohort/python/03 Chapter Subtitles/05 Delivery fees waiver system.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0051965388,
      -0.003993077,
      0.029279808,
      -0.063983895,
      -0.005274901,
      -0.0025333576,
      0.005127439,
      0.0278509,
      0.0044026696,
      -0.015550661,
      -0.0013840896,
      -0.01761216,
      0.004604555,
      0.020216256,
      0.13228577,
      0.007071943,
      -0.004563623,
      -0.01908002,
      0.014495905,
      -0.0048838677,
      -0.008827006,
      0.030223647,
      -0.0013575973,
      -0.023803275,
      -0.0030638454,
      -0.007883344,
      -0.008327294,
      0.008657727,
      0.02096336,
      -0.02583444,
      -0.027263382,
      0.0041715745,
      -0.00042888522,
      0.028612537,
      -0.018374007,
      0.0044868146,
      0.023358108,
      -0.005824444,
      -0.0067844125,
      0.010539565,
      -0.011822267,
      0.011511653,
      0.014133662,
      -0.02312049,
      0.018379493,
      -0.010602701,
      -0.004365181,
      -0.027287971,
      0.016300196,
      0.021634245,
      0.0164984,
      -0.0014326152,
      -0.038088363,
      -0.18419418,
      0.0095008295,
      0.0069612134,
      -0.007120343,
      -0.013320718,
      -0.0063231615,
      0.01231705,
      -0.009431731,
      0.01587327,
      -0.03296713,
      -0.022502435,
      -0.017220581,
      -0.004103905,
      0.007091015,
      -0.0118500665,
      -0.014150187,
      -0.017268512,
      0.023909556,
      0.017121471,
      -0.011380732,
      -0.01878991,
      -0.018546615,
      -0.02713791,
      0.0035474435,
      -0.014734449,
      0.00024001018,
      0.021100009,
      0.00875058,
      -0.021316884,
      0.0017560289,
      0.013583993,
      -0.003950855,
      -0.004366602,
      -0.02064986,
      -0.008739169,
      0.00749222,
      -0.009955459,
      -0.03127079,
      0.00386406,
      -0.0055923155,
      -0.0024031093,
      -0.008886663,
      0.014092916,
      0.015438889,
      0.001093184,
      -0.010912186,
      0.004666374,
      -0.0011602385,
      -0.009225573,
      -0.00271756,
      0.00017855475,
      -0.010942871,
      -0.0058972957,
      0.003095423,
      -0.007692197,
      0.0023001214,
      -0.005991943,
      -0.012722045,
      -0.013672088,
      -0.0044160234,
      0.02214028,
      0.014043845,
      -0.16580957,
      0.0053840843,
      -0.0045413575,
      -0.014597745,
      -0.0036180834,
      0.0009850274,
      0.0019177004,
      0.007516192,
      0.024376769,
      -0.017581653,
      0.027874514,
      0.021196932,
      0.032789,
      -0.011423826,
      -0.003889776,
      -0.010607014,
      -0.014852909,
      0.013917035,
      0.016365338,
      -0.0041173087,
      0.032974273,
      -0.0012389234,
      -0.004530937,
      -0.022647481,
      -0.018357491,
      -0.01328111,
      0.015690122,
      -0.027658433,
      0.027838288,
      0.016870882,
      -0.013958884,
      0.002882408,
      0.021540402,
      -0.013396041,
      -0.03963154,
      0.005263361,
      -0.020783518,
      0.00837906,
      0.020610208,
      0.023937313,
      -0.02938282,
      -0.009069651,
      0.029343277,
      -0.013453769,
      0.004537666,
      0.010057467,
      -0.010828016,
      0.01903606,
      0.00021496293,
      -0.018226897,
      -0.0029664277,
      -0.008096947,
      0.0031190931,
      0.009005764,
      0.004013754,
      -0.0005078922,
      -0.01291538,
      -0.004857076,
      -0.0018793636,
      -0.018648766,
      0.004798914,
      0.006778249,
      -0.005957871,
      0.019058585,
      -0.019572843,
      -0.0026477897,
      -0.0076079695,
      0.014048833,
      0.011288061,
      0.008994203,
      -0.001366535,
      -0.00066576264,
      -0.0022857545,
      -0.002458563,
      0.016101032,
      -0.0019186428,
      -0.0036801286,
      0.01751339,
      -0.0034097899,
      0.030456347,
      -0.02770285,
      -0.0016469852,
      0.01743347,
      -0.0030219886,
      -0.008693671,
      0.025084307,
      -0.02131733,
      0.008808896,
      -0.022342915,
      0.01626519,
      -0.02847343,
      -0.0013440072,
      -0.01552625,
      0.026006896,
      -0.0012236197,
      -0.0041513215,
      -0.015479862,
      0.013626769,
      0.018406484,
      0.02659624,
      -0.0076590814,
      0.019386815,
      -0.0018965026,
      -0.003036908,
      0.0040331366,
      0.03933831,
      -0.0038939607,
      0.0019399667,
      0.028944567,
      0.0048649902,
      -0.019821823,
      0.017812561,
      -0.0014038368,
      -0.019655198,
      0.00026395597,
      0.032203984,
      0.019557096,
      -0.0034514596,
      -0.00084143115,
      0.009958425,
      0.018513532,
      0.013113787,
      0.017391276,
      0.024641983,
      -0.008877237,
      0.010829353,
      0.016272342,
      0.00094633835,
      0.009994928,
      0.020642435,
      0.013293419,
      0.0011995645,
      -0.008953606,
      0.0063344035,
      -0.017888218,
      -0.0030463678,
      -0.008621575,
      0.0198139,
      -0.03924228,
      0.013764544,
      -0.024796732,
      -0.014544851,
      -0.003317904,
      -0.01357837,
      0.010457818,
      -0.007286979,
      -0.0292144,
      -0.0101636555,
      -0.0054910574,
      0.03226436,
      -0.0033204048,
      -0.008196195,
      0.03207622,
      -0.016136033,
      0.027410401,
      0.003690847,
      -0.00081943796,
      -0.001036494,
      -0.006333011,
      -0.020261267,
      0.0059329253,
      -0.09762153,
      0.028468486,
      0.011204828,
      -0.014386365,
      0.011429505,
      0.020737229,
      -0.0072256657,
      0.017029606,
      0.0031572971,
      0.028694244,
      0.021752294,
      -0.012488775,
      0.02366304,
      -0.025930839,
      -0.007521517,
      -0.0044703735,
      -0.019132843,
      -0.011403103,
      0.037032828,
      -0.0070740525,
      0.0145587865,
      -0.013105115,
      -0.016108984,
      0.006790598,
      0.024192242,
      0.008782422,
      -0.016511278,
      0.038019296,
      0.0025890414,
      -0.005373255,
      -0.019341659,
      0.015906774,
      -0.012788676,
      -0.014863278,
      -0.011613686,
      0.023591204,
      0.020148667,
      -0.00675815,
      0.018927053,
      -0.013519519,
      0.015723825,
      -0.008305318,
      0.0155026615,
      0.041152004,
      -0.014012395,
      -0.0033614375,
      -0.018727476,
      -0.0015303178,
      -0.01543107,
      0.0035561512,
      -0.003306534,
      0.029545747,
      -0.0008534358,
      -0.023387874,
      -0.0020171595,
      0.020890428,
      0.011079193,
      0.0010653213,
      -0.014039836,
      0.012422834,
      0.013904428,
      0.011766112,
      -0.0068916758,
      -0.032734472,
      0.003659466,
      0.0073874122,
      0.012727066,
      -0.013176701,
      -0.014262507,
      -0.0053827916,
      0.0036799686,
      0.017312448,
      -0.019446874,
      -0.022532467,
      -0.004967995,
      0.015285118,
      0.009573625,
      -0.008197024,
      0.0034946231,
      0.015469914,
      0.0071552526,
      -0.025648138,
      -0.0008917575,
      0.009643193,
      -0.003914254,
      -0.0014395921,
      -0.005468069,
      -0.012019095,
      0.008452191,
      -0.010718962,
      0.006848728,
      0.0042121466,
      -0.0035433185,
      0.0030116807,
      -0.02610155,
      0.006880628,
      -0.0068194494,
      -0.008620963,
      -0.017040985,
      0.010525816,
      -0.01655349,
      0.0006716122,
      -0.032579478,
      0.006088905,
      -0.01643039,
      0.008095842,
      -0.037116744,
      -0.027111605,
      0.028499981,
      -0.029213093,
      0.013508104,
      0.001203982,
      -0.019980572,
      0.0030737598,
      -0.0060606934,
      0.028771024,
      0.011513873,
      0.012920132,
      0.0114563685,
      0.007853407,
      0.0031415385,
      -0.014695612,
      -0.0136957215,
      0.016200557,
      0.0065975753,
      0.010757758,
      0.009432256,
      0.0071585895,
      -0.004447227,
      -0.027098529,
      -0.022912094,
      0.016433068,
      -0.024117712,
      -0.017730683,
      -0.013207572,
      -0.00743708,
      0.020794326,
      0.024817,
      0.017643351,
      -0.008667738,
      -0.00032583746,
      0.01577259,
      0.02027606,
      -0.006332741,
      -0.015416816,
      0.027737943,
      -0.011680543,
      0.01484524,
      0.02645385,
      -0.029208472,
      -0.02627881,
      -0.015190662,
      -0.0036510741,
      -0.003644672,
      -0.009653296,
      0.0019687563,
      0.0007454994,
      -0.007597705,
      -0.021290908,
      -0.014871751,
      0.0029626836,
      0.0042920522,
      -0.020745274,
      0.027119996,
      0.002136419,
      0.0058310437,
      -0.0035539872,
      -0.0051901108,
      0.0028645599,
      0.0031516082,
      -0.010060343,
      -0.016734077,
      -0.021493748,
      -0.0013154253,
      0.023615038,
      -0.0021888542,
      0.015981039,
      0.0009135715,
      0.02113991,
      0.014769855,
      0.0117024155,
      -0.0072786724,
      -0.013767246,
      0.026333388,
      0.012983457,
      0.010906388,
      0.006783851,
      0.014262156,
      -0.02828579,
      -0.0018208214,
      -0.004866993,
      -0.026643246,
      -0.010609793,
      0.019588253,
      0.011341059,
      0.020914963,
      -0.022579432,
      0.006494937,
      0.020382632,
      0.015012001,
      0.00788159,
      -0.011032517,
      -0.0040043807,
      0.004014009,
      0.006661962,
      -0.00893664,
      -0.012339256,
      -0.012750898,
      -0.009096482,
      0.0031853896,
      -0.0063064066,
      0.0021099234,
      -0.002903094,
      -0.0041033663,
      0.014254698,
      0.019329252,
      -0.039854888,
      0.0083243465,
      -0.022647673,
      0.01752829,
      0.012605888,
      -0.006980223,
      -0.0012067821,
      -0.00081035576,
      0.02182534,
      0.004024367,
      0.0043725404,
      -0.006932627,
      -0.0006563106,
      -0.0055361083,
      -0.015210657,
      -0.011407095,
      -0.015398408,
      0.019148622,
      -0.031779923,
      -0.019898541,
      0.011571075,
      0.019760001,
      -0.01271652,
      0.005513833,
      -0.016483536,
      -0.021065904,
      -0.010582251,
      -0.0019334197,
      -0.002378848,
      -0.004333234,
      0.028948788,
      0.0030523657,
      0.0028065022,
      0.009630659,
      -0.005349564,
      0.019802662,
      0.005693756,
      -0.002282215,
      -0.029944807,
      0.024636494,
      -0.0030611139,
      0.011139324,
      0.0029060093,
      0.0053252233,
      0.0445624,
      0.014848763,
      -0.014607233,
      0.0057387245,
      -0.0034812551,
      -0.013820084,
      -0.0075031547,
      0.0036824092,
      -0.01541873,
      -0.13677494,
      0.006983905,
      0.016299643,
      -0.0003246648,
      -0.0048684203,
      -0.017754022,
      -0.016308839,
      -0.0043594963,
      0.0062612207,
      0.0058163293,
      0.04743932,
      0.0011670941,
      -0.019072087,
      -0.0023208868,
      0.0033055048,
      -0.015498459,
      0.0346319,
      0.023200398,
      0.028046507,
      -0.01427017,
      -0.012391051,
      0.010342548,
      0.005752334,
      0.013295881,
      -0.027977208,
      -0.0032790974,
      0.0029814818,
      0.011164929,
      -0.0019575572,
      -0.0023037887,
      -0.03493558,
      -0.02235966,
      0.011719793,
      0.00349151,
      0.01140075,
      -0.009407909,
      -0.020911695,
      0.015869087,
      0.014975551,
      -0.0081600975,
      0.00867576,
      0.009255076,
      0.021320838,
      0.009209191,
      -0.00087042747,
      0.00052082667,
      0.033731483,
      -0.00782704,
      0.0038316534,
      0.025676908,
      -0.040927798,
      -0.03311315,
      -0.020937264,
      -0.00218443,
      -0.0007023185,
      0.012300909,
      0.004692404,
      -0.020093083,
      -0.00018828547,
      -0.019953623,
      -0.03221322,
      -0.009448739,
      0.017264633,
      0.03559397,
      0.0226649,
      -0.009858343,
      0.035827477,
      0.027619112,
      0.028953757,
      0.0010985096,
      0.0076668323,
      -0.016917348,
      0.012187151,
      0.014847408,
      0.028079396,
      -0.0013941347,
      0.008206415,
      0.0023301875,
      0.008977072,
      0.03098761,
      -0.016258022,
      -0.023917502,
      -0.050541755,
      -0.005605626,
      0.0032513142,
      0.0021203302,
      0.012455035,
      0.02896329,
      -0.012758542,
      -0.0022395211,
      0.004641454,
      -0.0033435428,
      -0.015017666,
      0.013933093,
      0.022057682,
      -0.005867911,
      0.00061974966,
      0.001980687,
      0.0060803867,
      -0.0057030357,
      -0.028704477,
      0.004354142,
      -0.0070125414,
      -0.003457988,
      0.02157067,
      -0.017162457,
      0.00018430609,
      0.016458781,
      -0.024618085,
      0.0038268848,
      0.008576645,
      0.006666775,
      -0.013154221,
      -0.1475004,
      -0.018049441,
      -0.009485224,
      -0.0028825244,
      -0.00784924,
      0.004635614,
      0.0030431065,
      -0.018421719,
      0.02440034,
      -0.023292888,
      -0.0015533785,
      0.00014713242,
      -0.017484112,
      -0.00034681687,
      0.038240544,
      0.14610271,
      -0.009766643,
      0.005726389,
      -0.006821629,
      0.010985889,
      -0.004027316,
      -0.00819115,
      -0.0192751,
      0.011778926,
      0.0051276637,
      -0.0136738615,
      -0.012038288,
      -0.023453299,
      0.0069887694,
      -0.0009397792,
      -0.012514761,
      0.022559425,
      0.0058082556,
      0.011218345,
      0.00005188985,
      -0.013774806,
      -0.009880574,
      0.0068305694,
      -0.0077459645,
      -0.0039248336,
      0.020307364,
      0.006064205,
      -0.017757658,
      0.006887476,
      0.026626144,
      0.012475968,
      0.0021483693,
      -0.026597975,
      0.0033344098,
      -0.00006241717,
      -0.028515015,
      -0.05017933,
      -0.015679987,
      -0.0115325125,
      0.0021243074,
      0.02367564,
      -0.0020565866,
      0.010246576,
      0.021546904,
      0.004553613,
      0.008021139,
      -0.0062235766,
      0.003280229,
      0.0022855646,
      0.009550504,
      -0.0040507857,
      0.026825372,
      0.011375724,
      0.02177082,
      -0.01619761,
      0.0047972873,
      0.0017840946,
      -0.010348948,
      0.02659521,
      -0.01084461,
      -0.018221462,
      0.00225088,
      0.016594434,
      0.019075576,
      0.0012835435,
      0.00038609677,
      -0.0058717844,
      0.0037452371,
      -0.02501584,
      0.022826025,
      0.010554781,
      -0.013937467,
      0.008362289,
      0.0010824249,
      -0.001421126,
      0.007234457,
      -0.011901467,
      -0.022636464,
      0.002370146,
      -0.01091807,
      0.0014597214,
      -0.002557053,
      0.006684137,
      0.023192145,
      -0.001780561,
      0.009157112,
      -0.0069759376,
      0.0038567535,
      -0.031355344,
      -0.0008642743,
      0.005762668,
      -0.004854764,
      0.00017608643,
      -0.0035450328,
      -0.008878975
    ]
  },
  {
    "id": "genai_cohort_python_06_Build_a_train_seat_information_system_vtt",
    "content": "Hey there everyone. And welcome to another problem. Now this next problem that we have in front of us is a very interesting problem and actually a real world problem. This is something that you will be building in your application. Maybe you'll build something for an aeroplane system or for a train system. This is exactly how you build them in the real world. Also, we'll write the exact same code. Let's read the problem statement, which is my favorite part. You're building a ticket info system for a railway app or a railway application. In short, based on the seat type, show its features. All right. I don't have the idea how to show the features or what features are available, but we'll try our best. The first task is take the input, sleeper, ac, general or luxury. So we have four categories of them and you might be wondering, all right, I have to write a lot of if and else. If the user input is sleeper else if user input is ac, else if the user input is general else if you get the idea. And then we have to match using the match case. So I'll show you another interesting way. Then once you have too many cases to check, you can actually skip the if else loop and the drilling of the whole if else if, else if, else or else if, else if. And then we'll show the unknown. If somebody gives us message which is not matching into these four categories, we'll just show invalid seed type. This is a very interesting problem and a very interesting set of code that we go ahead and write for this one. So we'll just go ahead and get into the conditional and we are going to go ahead and say this one is train seat py. So the step one, the obvious step is to take input from the user. So in this one we'll just go ahead and say input and we'll ask the user enter the seat type or enter seat type. And we'll give the user a message that what kind of seats? You can choose. You can, you can choose from slipper sleeper and you can choose from ac. Obviously air conditioned. You can choose from general if you are in a hurry and we will choose luxury. So these are all the options that user can choose from. And just like always, we'll do the lower so that we don't have to match for so many conditions. We can just reliably check for a couple of conditions only. Now let's store this into a variable. Let's call this one as seat type. There we go. Now once we are done with this, then we can use Instead of else. If we can use a really smart and interesting way of writing the code that is known as match syntax. So what is the variable that you want to match for variety of condition? I want to match for a seat type and it should be a seat type, not tie. Seat type. There we go, seat type. Now then put up a colon and hit enter. Now once you're done with this you can write a keyword case and you can match for a variety of case. Now this case could be integer, could be a float, it could be a string. Lot of things you can match for. And the first case that we are matching for is sleeper. If user has selected sleeper then we want to provide a message based on sleeper. So for example, what are the specialty of a sleeper? I have no idea what user wants to put up here. But we'll just go ahead and say in the sleeper you don't have ac. So no ac. But beds are available. So we'll just say beds available. So this is the features of it. Now not only this, it also can match for another case. So write as many case as you wish to have. Let's just say another case we want to match for is ac. Now behind the scene, what's happening in this is this seat type. Whatever the variable is behind the scene, we are doing something like this. Seat type is equal, equal to sleeper. So behind the scene it is matching for all of this AC just like this. But we don't write this syntax when we actually go for the case we simply go ahead and say if the case is ac. So in that case we simply go ahead and print ac. What do we want to write in the ac? So AC is going to be air conditioned hopefully. And we'll say comfy, right? Comfy. Right. And we have couple of other cases that we have to match it. I'll just go ahead and say case. What else you want to go for? Maybe we want to go for next is general and we want to print a message for the general. There we go. And we will say general, these are usually the cheapest option. Cheapest option. And we'll say no reservation. Hopefully I wrote that correct. And then we simply can have for another case which is luxury. And probably they give meal in the luxury. So I'll just go ahead and put up a print statement and we are going to call this one as luxury just like this. And we'll say premium seats with meals. And what about the case when it doesn't match anything? So in that case what we can go ahead and simply put up a statement case and then you can just put an underscore. Yes, this looks little weird, but this is how it works, underscore. And then you can simply say a print message that simply says invalid seed type. There we go. So notice here it's a very strange kind of a, mechanism if you're seeing this for the first time. But this actually looks much more readable as compared to constant if and else. And yes, you can use anywhere, wherever you like. Let's go ahead and try to run this program and first let's check what happens when we give any type of seat and see if, if we're doing anything wrong. Let's go ahead and clean this up and we'll say Python and this time we'll run for the train seats, enter the seat type. I would say something and it says invalid seat type. All right, so at least our last case is getting matched. Let's run it one more time. This time I want to say I want to match for ac and it says ac air conditioned, comfy ride. And the best part about this program is now I can just write it like this, this general, general. There we go. And still it will match because we have actually taken care of it by putting up a lower here. So this is a great way of how we can actually work with that. And trust me, these are the only cases you want to walk through. So in the entirety of the program that we have written, these are only the cases. I've given these exercise for you in case you want to try them again in the same program. But again just giving you a walkthrough, these are the only problems that we have. So if we go ahead and build the mini store, this is simple. If and else if you want to break for more suggestion. This is classic if and else. If you want to go for more nesting of it. Yes, we saw that as well. We also saw that we can use ternary operator. We have also seen that we can actually go ahead and do a lot of if and else. And another alternative of lot of if and else is this match and case. So I hope you have had an interesting time in building this train seat classification information program and enjoyed this as well. That is it for this video and you know the drill. I always ask for the reviews. That's it for this video and catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "06 Build a train seat information system.vtt",
      "originalPath": "genai-cohort/python/03 Chapter Subtitles/06 Build a train seat information system.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.016321944,
      0.0033427142,
      0.019389825,
      -0.06452801,
      -0.020106694,
      -0.025589244,
      -0.002360482,
      0.021243196,
      -0.010696638,
      0.010995601,
      -0.019427482,
      -0.00941971,
      0.0011965963,
      0.031359028,
      0.12412643,
      0.0005887501,
      -0.020006472,
      -0.00938259,
      -0.0043176156,
      -0.010550213,
      0.003740524,
      0.010573905,
      0.013098207,
      -0.034267474,
      0.009426751,
      -0.0011281219,
      0.000005755652,
      0.011450315,
      0.010281251,
      -0.03302265,
      -0.012326159,
      0.021356508,
      0.0033805429,
      0.042996354,
      0.014375999,
      0.016905736,
      0.02437165,
      0.01766265,
      -0.0021647946,
      0.017233472,
      0.0062557766,
      0.0023343605,
      0.0128949145,
      0.002975324,
      0.016212663,
      -0.016120188,
      -0.0015791978,
      -0.012697293,
      0.010752909,
      0.030870521,
      -0.012184747,
      -0.00617858,
      -0.019133234,
      -0.18813613,
      0.0042078528,
      0.0059026773,
      -0.0101758465,
      0.005108113,
      -0.010513189,
      -0.0010809334,
      -0.028351223,
      0.007127601,
      -0.022335371,
      -0.00476928,
      0.028691363,
      -0.016787156,
      0.012845189,
      0.0010540157,
      -0.01788868,
      -0.0050555044,
      0.026771074,
      0.007189135,
      -0.017942341,
      -0.021596173,
      -0.0054186587,
      -0.022810077,
      0.01706641,
      -0.009191687,
      -0.013916827,
      0.017145159,
      -0.0020846007,
      -0.013146846,
      -0.020939328,
      0.00031239845,
      -0.00006927374,
      -0.0023244086,
      -0.036146484,
      -0.009447894,
      0.0018348286,
      0.00010575271,
      -0.009012051,
      0.0028475565,
      -0.0027727466,
      -0.015551982,
      -0.015206661,
      -0.0029944542,
      -0.015060558,
      0.0069428417,
      -0.007963823,
      -0.0037496437,
      0.008901486,
      0.0011586145,
      -0.024744939,
      -0.003066072,
      0.0045327926,
      0.0068861633,
      0.0048462246,
      -0.006100675,
      -0.00513352,
      -0.0004238833,
      -0.0042904974,
      0.0016648222,
      0.003040099,
      0.027741699,
      0.016162476,
      -0.1785829,
      0.0027194184,
      -0.003971545,
      -0.021643255,
      -0.005579451,
      0.0018842826,
      0.0028126154,
      0.029927537,
      0.0065182475,
      -0.018573493,
      0.040653754,
      0.008235043,
      0.010198634,
      0.0070552677,
      -0.008472566,
      -0.023331843,
      -0.0055601713,
      0.01126694,
      -0.010983252,
      -0.014628479,
      0.0171161,
      -0.006452697,
      -0.030946609,
      -0.016208434,
      -0.012736461,
      0.0015385804,
      0.01261789,
      -0.008939092,
      0.016475743,
      0.018748939,
      -0.012195096,
      -0.01876264,
      0.023078196,
      -0.0013762382,
      -0.02769229,
      0.014579424,
      -0.0137183545,
      0.012129459,
      -0.008558456,
      0.025112756,
      -0.040351003,
      0.0052698078,
      0.0048606684,
      -0.01572421,
      0.0061976598,
      -0.004272028,
      -0.006662975,
      -0.011449098,
      -0.0037854342,
      -0.0020774917,
      -0.017201982,
      -0.008309873,
      -0.006790818,
      -0.0019858328,
      0.02322147,
      0.0059652403,
      -0.0069520697,
      0.0014324029,
      0.00852734,
      -0.0016378481,
      0.00024575792,
      0.004975355,
      0.019555258,
      0.010194838,
      0.0015789698,
      -0.023088414,
      -0.0035357724,
      0.013352283,
      0.013371374,
      -0.0013786698,
      -0.0035856604,
      -0.009965645,
      -0.00083961186,
      0.026413603,
      0.0019574496,
      0.012419287,
      -0.004653154,
      0.017662033,
      0.008922698,
      0.011692137,
      -0.012541616,
      0.0142176105,
      0.015004222,
      -0.009681127,
      -0.0145968245,
      0.023202725,
      -0.016258365,
      0.004176748,
      0.0028828038,
      0.017479038,
      -0.015293656,
      0.01012853,
      -0.03088393,
      0.0034348995,
      -0.012457903,
      -0.009231154,
      -0.016000494,
      0.008727675,
      0.010825323,
      0.021687306,
      -0.009471401,
      0.018710779,
      -0.001923032,
      -0.012566654,
      0.006734878,
      -0.0064712665,
      -0.007461379,
      0.019462345,
      0.02635282,
      -0.012024824,
      -0.0137666045,
      0.014083269,
      -0.013622091,
      -0.00009842263,
      0.018718498,
      0.03290495,
      -0.008392325,
      0.00091918116,
      -0.0011967798,
      0.024091648,
      -0.009601295,
      -0.01827577,
      0.020849802,
      0.034505572,
      0.011681947,
      0.012662844,
      0.0041823373,
      -0.029197058,
      0.019085974,
      0.017566767,
      -0.00080823153,
      0.0028523547,
      -0.031612728,
      0.02106246,
      -0.01805522,
      -0.012705348,
      -0.017996527,
      0.0006290259,
      -0.015212698,
      -0.010939713,
      -0.033025492,
      -0.02426009,
      -0.013176991,
      0.0049818535,
      -0.00089547166,
      -0.00091468263,
      -0.005405376,
      0.010211733,
      -0.018450847,
      0.014659127,
      -0.01357045,
      0.00075218553,
      0.02507178,
      -0.018693471,
      0.012261662,
      0.025944643,
      -0.007279092,
      0.0018221469,
      -0.007066019,
      -0.012474809,
      0.01468102,
      -0.10107985,
      0.012003466,
      -0.0076112216,
      -0.027704038,
      -0.003250213,
      0.013311617,
      -0.004220427,
      0.012715028,
      -0.0066575385,
      0.019291343,
      0.02086699,
      -0.016520454,
      0.023317913,
      -0.027023567,
      -0.019202087,
      -0.0026216977,
      -0.02394353,
      -0.014512285,
      0.03253582,
      -0.012809616,
      0.00061934814,
      -0.034838345,
      0.0034309279,
      0.015123491,
      0.02372961,
      0.010190245,
      0.009852368,
      0.026670685,
      0.02118967,
      -0.003125314,
      -0.022223853,
      0.017683955,
      0.0048965113,
      -0.025694832,
      0.009870917,
      0.003188735,
      0.020978857,
      0.00076803955,
      0.011033172,
      -0.02573113,
      0.022335894,
      -0.039109625,
      0.017381594,
      0.035126183,
      -0.013215286,
      0.004910503,
      -0.014087046,
      -0.0008420977,
      -0.029451737,
      -0.0076026204,
      -0.0043887026,
      0.011234857,
      0.00025786614,
      -0.025347656,
      -0.0012452311,
      0.01938436,
      0.007181094,
      -0.0071276906,
      0.01809846,
      -0.007566956,
      0.01123799,
      0.015956892,
      -0.00016230743,
      -0.011203877,
      -0.011607485,
      0.014228395,
      0.0070196385,
      -0.01616319,
      -0.029542893,
      -0.0051029623,
      0.015495046,
      0.0036915918,
      0.001776538,
      -0.027567543,
      -0.005306222,
      0.0031902883,
      0.0026516845,
      -0.03649041,
      -0.018834645,
      0.008527627,
      0.02264328,
      -0.009664839,
      -0.014429163,
      0.006002609,
      -0.00611088,
      -0.00020162028,
      -0.002201186,
      -0.003234491,
      0.0017329034,
      -0.023568017,
      0.022491807,
      0.0049487413,
      0.0024478238,
      0.009498377,
      -0.0041583627,
      0.022334931,
      -0.010515349,
      -0.013244247,
      0.00091347884,
      0.010321257,
      -0.022258474,
      -0.00254129,
      -0.02104084,
      0.017830784,
      0.008626278,
      0.0019486721,
      -0.027187858,
      -0.022426698,
      0.011240173,
      -0.014568978,
      0.0070724385,
      0.007821646,
      -0.016544454,
      -0.008833504,
      -0.012475898,
      0.015182251,
      0.006686883,
      0.0040517645,
      0.013856112,
      -0.010013327,
      0.0010181405,
      -0.0026754423,
      -0.0011190849,
      0.026369687,
      -0.002794775,
      0.00043650498,
      0.00009807331,
      0.009806501,
      -0.006184085,
      -0.016587945,
      -0.034510814,
      0.015299636,
      -0.034001928,
      -0.0147814695,
      -0.0072810305,
      -0.016687876,
      0.012936686,
      0.033522062,
      0.008890604,
      0.0055066743,
      0.009301538,
      0.01758481,
      -0.00069172983,
      -0.0006369252,
      -0.014274243,
      0.031577677,
      0.004004495,
      0.0029907357,
      0.006761576,
      -0.007964408,
      -0.022527218,
      -0.024880918,
      -0.0051391395,
      -0.00008700421,
      -0.02629796,
      -0.012139982,
      0.007262254,
      -0.01648711,
      -0.034834426,
      -0.021410279,
      -0.012607209,
      0.019403746,
      -0.00096298783,
      0.004310448,
      0.026865913,
      0.0053922697,
      -0.017735234,
      -0.0130309565,
      0.020381682,
      -0.0011575222,
      -0.00076534477,
      -0.0035099448,
      -0.013109077,
      -0.00087202206,
      0.013510375,
      -0.005030103,
      0.015973432,
      -0.013028983,
      0.033315834,
      0.02308255,
      -0.019307958,
      0.0028261542,
      -0.0008443583,
      -0.010879563,
      0.012299157,
      0.0020111538,
      0.0047242637,
      0.028042957,
      -0.019855402,
      -0.008268621,
      0.021354815,
      -0.03143854,
      -0.0027077028,
      0.011495128,
      0.0019286573,
      0.035152968,
      -0.00060188014,
      -0.006808519,
      0.010215379,
      0.01730355,
      -0.011160604,
      -0.018107764,
      -0.0055507664,
      0.002554573,
      0.017152222,
      -0.0076592923,
      -0.0015043648,
      -0.014094017,
      0.007677296,
      0.021565236,
      -0.008973632,
      -0.013972333,
      -0.011012331,
      -0.0010902783,
      0.033214115,
      0.021487739,
      -0.009376768,
      0.032143436,
      -0.0044842064,
      0.012048935,
      -0.008141714,
      -0.003915329,
      0.010702262,
      -0.0011596193,
      0.013214325,
      -0.003393677,
      0.008917532,
      0.009616586,
      -0.019006371,
      0.0055349423,
      -0.0039435155,
      -0.018158041,
      -0.013577326,
      -0.0048334934,
      -0.038815156,
      -0.018015351,
      0.009041402,
      0.027708286,
      -0.014746805,
      0.016757451,
      -0.013369085,
      -0.018794134,
      -0.025252802,
      -0.007569515,
      0.013058702,
      0.009035329,
      0.012944573,
      0.0056974906,
      -0.013727038,
      -0.0015827322,
      0.011725349,
      0.027503831,
      0.016237386,
      -0.011801967,
      -0.032906335,
      0.023501256,
      0.0033648636,
      -0.0035299854,
      0.0068441858,
      0.0012854662,
      0.037677027,
      0.00017455872,
      -0.0019594224,
      0.0073057525,
      0.011387952,
      -0.0093721645,
      -0.019636007,
      -0.008829784,
      0.0020047291,
      -0.14707571,
      0.008997851,
      0.010800911,
      0.011422892,
      0.00081334007,
      -0.033255875,
      -0.0063871513,
      -0.016292915,
      -0.0019623493,
      -0.01064125,
      0.036449116,
      0.0057835886,
      0.0009226555,
      0.00039537586,
      0.01320305,
      -0.013647241,
      0.009716242,
      0.017874299,
      0.02544417,
      -0.021160945,
      -0.002983144,
      0.0032987776,
      0.006585231,
      0.009324063,
      -0.002513843,
      -0.019223735,
      0.0075970357,
      0.01473388,
      -0.020293336,
      -0.010284948,
      -0.010363515,
      -0.0029512984,
      -0.0057368414,
      0.019313017,
      0.0023623372,
      0.0011739427,
      -0.0180981,
      0.020942412,
      0.018903483,
      -0.018083395,
      -0.015787274,
      0.009803234,
      0.019742735,
      0.019597726,
      0.0030493124,
      0.00200013,
      0.024780793,
      -0.020646762,
      -0.012028318,
      0.010732225,
      -0.038279098,
      -0.014452429,
      -0.019575048,
      -0.008686837,
      -0.028487317,
      0.009664563,
      0.00907992,
      -0.0013968848,
      0.007689598,
      -0.019789519,
      -0.017705813,
      0.0049451636,
      -0.012989048,
      0.035241764,
      0.006486627,
      -0.00015173169,
      0.029132405,
      0.015872277,
      0.019231487,
      0.015226277,
      0.00023022608,
      -0.017797396,
      0.009476423,
      0.00085161044,
      0.001801946,
      0.015539086,
      0.0038998656,
      -0.007080519,
      0.0048509575,
      0.0037928673,
      -0.023116896,
      -0.010278831,
      -0.059645817,
      -0.0153207155,
      0.004778123,
      -0.005130769,
      0.012133322,
      0.019769423,
      -0.006252332,
      0.0018168677,
      -0.00020121266,
      0.01159031,
      -0.014068181,
      0.009918922,
      0.010512017,
      0.001971585,
      -0.007145777,
      0.0037054343,
      0.017809572,
      -0.0014097682,
      -0.0030136039,
      -0.0053477045,
      -0.011849803,
      0.0020269016,
      0.006993203,
      -0.021613976,
      -0.0093175545,
      0.016400674,
      -0.022323938,
      0.0054335827,
      0.008468717,
      -0.009557723,
      -0.0049828314,
      -0.1468558,
      -0.008019316,
      0.008935165,
      0.015328164,
      0.024527494,
      0.0016473155,
      0.004758494,
      -0.035144188,
      0.015329288,
      -0.01561913,
      -0.0035006914,
      -0.013861292,
      -0.014957523,
      0.0076169646,
      0.031062592,
      0.1266775,
      -0.0068495725,
      0.006888938,
      -0.010555489,
      -0.011801718,
      -0.004075792,
      -0.012998458,
      -0.012671389,
      0.008465836,
      0.0060745617,
      0.0034392125,
      0.0034817026,
      -0.016377041,
      0.009393241,
      0.021579903,
      -0.011349473,
      -0.001981172,
      0.022657454,
      0.0020093916,
      -0.013026728,
      0.004478959,
      -0.008510696,
      0.01726761,
      -0.0100370925,
      -0.00840413,
      0.016997214,
      0.0077738655,
      -0.0034280263,
      0.014723509,
      0.0025802425,
      0.0054655047,
      0.005121335,
      -0.011996619,
      -0.008662489,
      -0.012054182,
      -0.039492298,
      -0.060937453,
      -0.013996488,
      -0.001445431,
      -0.009634432,
      0.015645169,
      0.0037297206,
      0.013294977,
      0.022420267,
      0.0052665183,
      -0.0094894525,
      -0.00930625,
      -0.0019663754,
      0.019905223,
      -0.0072643696,
      -0.009210001,
      0.030126438,
      0.00033712247,
      0.028935218,
      -0.025155434,
      0.028264012,
      0.011800215,
      -0.011550506,
      0.022986809,
      0.0022097689,
      -0.008919813,
      -0.0022471398,
      0.015220637,
      0.001179035,
      -0.01819041,
      -0.0077078887,
      -0.006390399,
      0.015136878,
      -0.023154275,
      0.019032419,
      0.011298426,
      -0.041093312,
      0.009035675,
      0.0057268185,
      -0.0030981281,
      0.014870084,
      -0.00022842138,
      -0.011867518,
      0.008529091,
      0.0076812967,
      0.006225687,
      -0.0038345123,
      -0.0024618749,
      0.025967019,
      -0.0066655367,
      -0.008630131,
      -0.0077985437,
      0.0014748054,
      -0.037883814,
      0.0069783917,
      -0.0027636334,
      -0.010582604,
      0.011467555,
      0.0068229167,
      -0.016216833
    ]
  },
  {
    "id": "genai_cohort_python_01_Objects___Mutable_and_Immutable_in_python_vtt",
    "content": "Hi and welcome to the chapter two or section two, whatever you like to call this one. Now in this section we would go with the data types. Now whenever you learn any programming language there are just two types of thing you have to learn formally, the first one being what is the type of data. For example, are those data numbers or are those data like names? We call them as strings in programming terms. Now numbers could also be of variety of types. It could be regular number, it could be with the decimal number, it could be imaginary numbers. In case you are not familiar with the math, we do have IOTA numbers which are maths heavy number which have a real part as well as imaginary part. We have a lot of mathematics that can be done in the Python world. So the first part of learning programming language is to understand the types of the data as we call them as data types. The next part is how do we manipulate that data? For example I want to add the numbers, multiply the numbers or probably change the name to uppercase or lowercase or validate, that's a valid email or not in the format. There are a lot of things that we do. This is exactly what we're going to learn in this section, the data types part and we will understand some of the behind the scene of the Python that how it stores the data. There's a great concept in Python known as mutability immutability. We'll have a discussion on this one. It's a very fantastic concept. Once you actually see it from my perspective you will absolutely love it and you will never forget about it. So this is all that we will be doing in this section and with this let me go ahead and take you onto the screen. Let's start with the section one. We'll go on our board, by the board I mean the black board that we have been using. So let's go up here and we will be working and learning through this one. So this one we want to go with two things first and then we'll study about anything else. And these are our objects. Now what are objects? We will have a discussion on this and as well as we are going to talk about mutability. So this is our objective for this entire whole section as well. But we'll pick the topics one by one. So let me just get your entire focus on the screen itself so that we can go ahead and just talk about that. First of all let's talk about what is object. Now in Python there is a concept that you're going to see that Is called as everything is object in Python. And this is very true. What do you mean by object? Literally anything that you see is an object. And the one thing that you have to remember always about the object, that if we are terming anything as an object, so let's go ahead and write that it needs to have few of the properties mentioned up. For example, this is the object. So every single object will have a unique id. And we call this one as identity. And this is like a tea has a unique blend. And again, this is a bit of a vague example, but you will get this in a minute. So we have this identity, Every object have this unique identity. And I will walk you through how to find out that every object will also have a unique type as well. What do you mean by unique type? The type simply means just like in the T, we have the black T, we have green T, we have herbal T. So every object will have its own type as well. And further, each of the object will have some of the value. For example, like 2, maybe hitesh, maybe chai code. Each object will have the value and we will see them, don't you worry on that part. So we're going to see that we do have this object with us. And once we have this object, we are going to see that. All right, so we have this identity types and everything they are associated with that. Let's put them in the nice diagram so that we actually enjoy learning part of it as well. And let me go ahead and grab this. So whenever object comes to your mind, make sure object will have an identity, make sure the object will have a type and make sure the object actually represents all the values. The value could be empty, that is also a part of this. But we'll actually go ahead and visualize this. Now there's another minor concept that we are going to go through about this is mutable, and image mutable. This is really an interesting concept. Mutable simply means, that is changeable. And this is the concept where a lot of people get it absolutely wrong about the mutability and immutability. So the word mutable means that this thing can be changed and then there is immutable that is not changeable. So always keep that in mind. This is the easiest example. So immutable means no, I cannot go ahead and change this. We will see an example. And this actually ID helps us. This identity helps us to figure out whether it's actually changeable or it's not changeable. Never ever go through with the value. If you go ahead and have this, confirmation about whether it's mutable or immutable with the value, then that is the wrong way. Never do it like this. So this is where I would love to write as no, never check it with the value. This is not a good idea. Never check it with a value. Same goes for here. If you're checking whether it's changeable or not changeable with the value. Nope, that's always a bad idea. If you want to check it with the identity. Yes, that is how we do it. If the identity is same, that means hey, value didn't got changed. If the identity is different, hey, value got changed. So this yes part is all up here. Let me go ahead and put some diagrams or some boxes around it to make it look nice. There we go. All right, makes sense. Looks good. Okay, time for some practical to understand this. Just to summarize this again. Each object has some identity, some type and some value. And objects can also be mutable or immutable. Mutable means this is changeable. Immutable means this is not changeable. And we always validate that through the identity, not through the value. A lot of beginners who get started in the world of Python always look for it with the value, which is a wrong indicator. Please make sure you don't do the mistake. You will not do that mistake because I am here with you. Let's go ahead and create a new folder. Let's call this1 as underscore. This is data types. All right. We will also open this up in the integrated terminal so that we can actually work on it easily and nicely. I will go ahead and create a new file and we're going to call this one as chapter one dot P Y. We can use chapter underscore one. That will be good dot P Y. Now how do we go with that? First of all, we can name anything as variable. So let's just say, for example, you want to get a sugar amount, how much sugar you want to have in the cup. Maybe you want to have two cups or two spoons of the sugar. I really don't judge you based on if you want to have tablespoon or teaspoon, whatever you like. Now first of all, let's see how we can actually print this value. This is something which is stored in memory. And I will depict you with the diagram as well. We use a keyword F. Then we can use double quotes to put up the string. And then we can use something like initial sugarsugar and then put up a column, then use the curly braces and yes, they come always in the pair. Now here I can actually go ahead and inject the variable to actually go ahead and print this out. This is it. We have written our first program where we have a variable and we are trying to print that variable along with a, string. First let's see the output of it. Then we'll actually draw some diagrams to understand this. So all to run for this or to make sure that this runs, I have to say Python 3, please run a file known as chapter1py. Make sure the path is correct for you. I have opened the integrated terminal just right here. So it says initial sugar If I change this from to again. Now the program actually says So let's see what is happening here with the help of diagram. So this is your computer memory and in this memory you say that, hey, I want to store this value or 12, would be good inside my memory. So you said, okay, so the memory is going to create a number two for you just like this. I'll make this a little bit bigger one. And now how do you actually call this memory? So to call this memory you actually created a variable known as sugar amount. And then you actually said that, hey, in order to point to this memory I will just go ahead and use this. And through this I will go ahead and point out this part here. Again, super simple. You have this one here, pretty nice. I'll just go ahead and remove this, draw it again, let's use the arrow. There we go. So this is what exactly happened. Now, interestingly, what I want to show you about the mutable and immutable part, which most people goes absolutely wrong. When I go ahead and say sugar amount is going to equal to, let's just say this time. And I actually go ahead and use the same thing again. Let's go up here. So we are printing sugar. So what do you think should have happened here? The sugar amount was and sugar amount is And now if I try to print it and we'll call this one as second, easier to find it out which one is what if I go ahead and run this, we can say initial sugar is and second initial sugar is Now here's the interesting part. Now this thing is here what we have done. The numbers are considered as immutable. They do not change. But again, the point is, hey, Hitesh, this just changed here. We initially were having the value of Now we have a value of So it definitely changed. How can you say that? This is immutable. This cannot be changed. This is where a lot of people make it absolutely wrong in the Python, as I mentioned, you never check it with the value. The value definitely of the sugar amount is getting changed. But behind the scene, this number itself is actually immutable. This never changed. What Python did behind the scene for you is it took this number and it actually created a new number. This time it says, hey, you want 12? Okay, we'll give you So a new number was created for you, and this time instead of pointing to the two, you are pointing actually to Yeah, this is a little bit of an interesting aspect of how Python actually works. So instead this time we simply go ahead and say that, hey, we are pointing to 12, not two. This two is still here. This is immutable, you cannot change it. What you're changing now is reference. Always remember what we are changing. What seems to be changing in the world of mutable is the reference. So you are changing the reference. You are not changing the actual value itself. I'll show you that. Yes, some of these values do get changed. You might be asking, what's the proof of it? Yeah, that's a good question. As I mentioned, always check for identity, never for the value. Yeah, our value got changed. But I asked you, hey, not to track with the values. There's a big no here. Now, what I want to do is change or track based on identity. So how can we find the identity of it? It's actually super easy. All we got to do is print. And for any of the ID you want to check, let's just say we will use F strings. Again, these are formatted strings. So I will just say ID of and then I want to print an ID. So I'll just go ahead and say that, hey, use curly braces. Inside the curly braces you have a keyword ID to find ID of anything. I want to find an ID of 2, and similarly I want to find the ID of, also. So let's just say And what you're going to notice, the ID of is always same in your program, but what's being changed is this ID of Let's go ahead and run this program to understand it better. So you will notice you get a unique ID here, and you get a unique ID of this one is actually We just missed one here. Let's run this again. And what we see is this one is different for your program, and this one is totally different in your program. This is at the end, this is 3, at the end. And this is the most important part because you have created a new reference. It's just the variable which is behind the scene pointing to a different memory location. And that's the magic. That's the part which a lot of people don't understand about mutable and immutable. So summarizing this, mutable means that's changeable. Immutable means this cannot be changed. Never reference them by the value. Always check the mutability and immutability via the identity itself. A pretty interesting concept, isn't it? So that's really nice. You might be wondering, hey, can we get some of the examples, of the things which are mutable that really do get changed? Yes, of course, why not? You ask for it, I will deliver it. Let's just call this one as, chapter two PY and let's write some of the code which is mutable, which is changeable. So I'll just go ahead and say I want to have a spice mix and which is going to be represented by set. Set is also a data type which represents a collection of the things. So so far we have been doing and checking just the numbers. Numbers are individual, but, but let's just say you want to collect a whole lot of numbers or whole lot of other things, maybe collection of strings, collection of names. So for that set is used, we will learn a lot of these different types. So let's just say I want to print and I will go ahead and say, initial spice mix. What does it mean? So I'll just go ahead and say initial spice mix id, just like that. And we're going to go ahead and say use curly braces. Then we'll use again the ID and we're going to go ahead and say give me the ID of spice mix so that I can see whether it's changing or not changing. This is mutable, this is supposed to change. So now if I go ahead and say, hey, spice mix, I want to add tolu. Python is all about if you can read English, you can read this. So let's just say my favorite one, I want to add ginger for it. So we have added ginger and we're going to use one more probably cardamom. Cardamom. There we go. So we have added two values in it and now we would look to see that whether the ID has been changed or not. So I'll just use this one and I'll just Move it. And by the way, I love keyboard shortcuts. I have spent a good amount of time in VS code, so I know the shortcuts of. If you want to know about this one, let me just show you because I'm pretty sure you'll be asking if you want to duplicate any line, you can just press shift and option key on or the alt key on your keyboard and it actually duplicates that. And that's how I duplicate that. And if you want to have it duplicate and then want to move any line, just press the alt key or the option key and then it moves up here. So that's how I actually run fast in the VS code. Again, super fun to have it. So let's just say initial Spice Mix and then we are going to go ahead and say after Spice Mix, let's see whether the ID gets changed or not. This. So we're going to go ahead and say Python Please go ahead and run chapter two this time. And there we go. So we can see this ID. Actually we can see this. This is This is So there we go. We can see this. This is mutable. This is changing. So if I print out what is inside the spice mix, before that. Yes, definitely we have added something. But again this always is. This is mutable part. All right, I hope you got this. And yes, I do understand this confusion here that hey, this value didn't change up here. So how you're calling this as mutable, immutable and all of these things. Let me get you back onto the board because I know this requires more explanation. So we get this set here. So this is how the set looks like. Let's also print the set as well. That how does the set actually looks like. So we're going to go ahead and say, instead of putting up the id, we'll just go ahead and just print the spice mix so that, you know, how does it look like? And after printing this, we will also print this. All right, so this is the initial ID that we have. Initially the set was empty and then we actually were able to add values into this and still we get the exact same id. So the whole concept. Let me just write this here. So the whole concept of mutable and immutable is what value can I change and what values I cannot change in the memory itself. So when I said the numbers are immutable, this simply means that I cannot change this number's existence in the memory. This will always remain like That I can change the reference where I'm pointing, but nothing can actually be changed. This is known as immutable. I cannot change it. But when I went into the spice mix, I was able to constantly add more spices into this. Notice here. First we added ginger, then we add cardamom. So I am just always pointing this so the same object can be changed. I can just go up, come up here and can say, hey, instead of cardamom, I'll probably add a lemon. And that is totally fine. I can mutate it. It is mutable. So if I run this again, yes, I'm able to mutate this thing. I'm able to change this thing still. The ID remains exactly same. And that's the whole concept behind mutable and immutable. You change it or you don't change it in the memory. And again, this is the whole point. So I hope now it makes it absolutely clear that numbers, they are immutable. We cannot change them. The reference can be changed, but they always remain same. While on the other hand, the things like set, they are mutable, they can be changed in the memory. You can always point to the same thing. You actually always points to the same thing. So I hope this gets you now the clear about the confusion of mutable, immutable, what it's like, because this is the core foundation in the whole object. Rest of the things are super easy to work on with. I hope these diagrams helps you to actually clear, up the confusion. And if you enjoyed this lecture, please don't forget to rate us. We really need that. We really work hard for this. And even your smallest rating can help us in boosting our emotions and morale. Let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 Objects - Mutable and Immutable in python.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/01 Objects - Mutable and Immutable in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.025702566,
      -0.007516914,
      0.024701027,
      -0.053091474,
      -0.01660697,
      0.0042118332,
      0.0070319274,
      0.019695818,
      0.011906813,
      0.008094407,
      -0.021506315,
      -0.00035860727,
      0.014493775,
      0.023737092,
      0.12924471,
      -0.0056619854,
      -0.018063607,
      -0.011411117,
      0.007911593,
      -0.02420106,
      -0.0025867196,
      0.008230994,
      -0.011963354,
      -0.0082257055,
      -0.002449481,
      -0.00771795,
      0.0065298676,
      -0.00028914167,
      0.029415008,
      -0.020035477,
      -0.0134387445,
      -0.005002626,
      0.0072212624,
      0.022380305,
      0.005937028,
      0.0018518404,
      0.008559651,
      -0.009343613,
      -0.022650126,
      0.008045419,
      -0.012715029,
      -0.0008563147,
      0.0062619476,
      -0.0062770946,
      0.029229252,
      -0.0151832905,
      0.007969312,
      -0.009367693,
      0.0073627667,
      0.011386248,
      -0.024936741,
      0.0016092744,
      -0.0038682383,
      -0.18377036,
      0.02859627,
      -0.010248948,
      -0.008911463,
      0.017420182,
      -0.010227827,
      0.005463152,
      -0.012031361,
      0.005607591,
      -0.030156806,
      0.0080909105,
      0.0027431303,
      -0.006126569,
      0.008049625,
      -0.0034875476,
      0.009364601,
      -0.0045459247,
      0.029745582,
      -0.001230025,
      -0.027507143,
      -0.027856072,
      -0.039372552,
      -0.031274177,
      0.011469134,
      -0.020975875,
      -0.0026164176,
      0.022938907,
      -0.017977646,
      0.0034820896,
      -0.0033367015,
      0.005224914,
      0.023582835,
      0.000845783,
      -0.027290076,
      -0.0061384863,
      0.010498456,
      -0.020858418,
      -0.006202497,
      -0.007856732,
      0.012369056,
      0.0006619234,
      -0.00065528776,
      0.009073853,
      -0.038765207,
      0.0034741357,
      -0.022835346,
      0.0004496333,
      0.01684303,
      -0.019818332,
      -0.031333886,
      0.00019807833,
      0.009101193,
      -0.0047538276,
      0.0018688653,
      -0.018291933,
      -0.02772349,
      0.007968984,
      0.0060818074,
      -0.013607899,
      0.029696394,
      0.022010649,
      0.0061903168,
      -0.17671505,
      0.009902775,
      -0.002473014,
      -0.028791362,
      0.0071306983,
      -0.013546544,
      0.0104715815,
      -0.012292622,
      -0.0006130376,
      -0.0031396695,
      0.0053240187,
      -0.011083391,
      0.03806911,
      0.024886051,
      -0.011170934,
      -0.018544573,
      0.0010074711,
      -0.025481548,
      0.012177788,
      0.016278792,
      -0.005892257,
      -0.028278193,
      0.0036184278,
      -0.02821658,
      0.010553516,
      0.012696283,
      0.019230852,
      -0.009792259,
      0.035769794,
      0.012069537,
      0.010408101,
      -0.026388695,
      0.019308878,
      -0.023125732,
      -0.036035497,
      0.008854989,
      -0.0019887027,
      -0.0032089525,
      0.017191676,
      0.021946276,
      -0.012545099,
      0.003328344,
      0.009302058,
      -0.028454436,
      -0.0011587131,
      -0.0017268655,
      -0.006145387,
      0.008196183,
      0.0030681272,
      -0.0138399005,
      -0.006084353,
      -0.014134565,
      0.0045220945,
      0.015661327,
      -0.013554648,
      -0.00751172,
      -0.011858005,
      -0.008282289,
      -0.0030851034,
      -0.018455809,
      -0.0053444034,
      0.015789596,
      -0.004503101,
      0.012169259,
      -0.005459811,
      0.004730385,
      -0.005534685,
      0.0070290407,
      0.01061206,
      0.0105511295,
      0.010791315,
      -0.0025137514,
      0.020416241,
      0.010880048,
      0.01914561,
      0.0017531341,
      -0.013204108,
      0.020819163,
      0.012043647,
      0.015658513,
      -0.005625882,
      -0.012001236,
      -0.004827265,
      -0.0060608257,
      0.029632675,
      0.0154943215,
      -0.0092322035,
      -0.015365053,
      -0.027482526,
      0.035884026,
      -0.0011761143,
      -0.009713998,
      -0.01530205,
      0.00785842,
      0.0112201655,
      -0.018191246,
      -0.0054430217,
      0.015103241,
      -0.0048563206,
      0.025478674,
      0.002965089,
      0.023502978,
      -0.005354084,
      0.00011465323,
      -0.007146914,
      0.016334224,
      -0.0040130806,
      -0.009889164,
      0.029141275,
      0.017828468,
      -0.0010900412,
      -0.010249081,
      0.00017216192,
      -0.008243683,
      0.005808352,
      0.0072429455,
      0.004307628,
      -0.013729608,
      -0.01673479,
      0.013382612,
      -0.011075002,
      -0.010169711,
      0.0070850435,
      -0.0027643275,
      0.007469396,
      -0.0058147646,
      -0.0047889496,
      -0.002955637,
      0.020017644,
      0.02911501,
      -0.0021549764,
      0.009316038,
      -0.001783244,
      -0.0029605406,
      -0.0043480494,
      -0.024027785,
      -0.002564704,
      0.00063312583,
      0.006891263,
      0.013847067,
      -0.016553741,
      -0.025694648,
      0.0058145924,
      -0.006947572,
      -0.01062662,
      -0.02792701,
      -0.0019438188,
      -0.006317355,
      0.0035915878,
      0.017227245,
      -0.013043015,
      0.017604265,
      0.04070078,
      -0.020860454,
      0.011358234,
      0.019952664,
      0.0073230295,
      0.010855311,
      0.00889889,
      0.00309834,
      0.027964953,
      -0.101245485,
      0.010000162,
      0.009645831,
      -0.009522437,
      -0.0009722132,
      0.010141466,
      -0.013704572,
      0.019779095,
      0.0104566235,
      0.051096395,
      0.0021073974,
      -0.0068852827,
      0.01896519,
      -0.00507088,
      0.019329531,
      -0.028615784,
      -0.0087020565,
      -0.014180054,
      0.0034496607,
      -0.0021765456,
      0.013998467,
      -0.01217716,
      -0.00089847884,
      -0.0222786,
      0.0054328716,
      -0.008986272,
      -0.008386735,
      0.04043522,
      -0.009456358,
      -0.0118572675,
      -0.011406253,
      0.025455372,
      0.010365313,
      -0.014742871,
      0.016062237,
      0.00090098917,
      -0.007038455,
      0.0003593083,
      -0.013783792,
      -0.011862677,
      0.027650243,
      -0.008197942,
      0.023304177,
      0.030651368,
      -0.00932235,
      0.0033136436,
      0.0070383837,
      -0.00922984,
      -0.0034621092,
      0.0055661118,
      -0.020738855,
      -0.007469572,
      0.0056335027,
      -0.018527936,
      -0.002442833,
      0.018620586,
      -0.001315061,
      -0.023010623,
      0.0040902635,
      0.0093277255,
      -0.016042221,
      0.013931579,
      0.0078006205,
      0.00446501,
      -0.005743624,
      -0.01895937,
      0.026841208,
      0.0047996114,
      0.009273239,
      -0.0058495845,
      0.03941573,
      0.004452498,
      -0.014705965,
      0.014567552,
      -0.0012629818,
      0.005003974,
      0.0061871214,
      0.007971287,
      -0.007955924,
      0.044753265,
      0.006244971,
      -0.0023006024,
      0.003070814,
      0.011712952,
      -0.0011198617,
      0.015961824,
      -0.0031990444,
      -0.022052951,
      0.0033638768,
      -0.022162383,
      0.0005488286,
      0.021595035,
      -0.027239744,
      0.0110576665,
      -0.022389663,
      -0.0021758995,
      -0.016506925,
      -0.017751101,
      -0.010224179,
      -0.0018231673,
      -0.021529758,
      -0.017745772,
      -0.02127766,
      -0.010438159,
      0.013737728,
      0.015011465,
      -0.039095372,
      -0.0059020617,
      0.0014470787,
      -0.01571353,
      -0.0057175253,
      0.005362814,
      -0.0130981095,
      0.0011919105,
      -0.0011376457,
      0.017666245,
      -0.010162238,
      0.005130386,
      0.027322708,
      -0.025982426,
      0.008100164,
      -0.011382956,
      0.01703401,
      0.007014355,
      -0.015107861,
      0.005654943,
      -0.012093051,
      -0.009081431,
      -0.019452827,
      -0.03068631,
      -0.023021651,
      -0.0040213037,
      -0.025569437,
      -0.005402569,
      -0.021570332,
      -0.013705975,
      0.039263748,
      0.012598143,
      0.007069256,
      0.005647492,
      -0.016348617,
      0.008393884,
      0.026121395,
      0.011309533,
      -0.015736401,
      -0.0001126647,
      -0.0052736304,
      -0.030998139,
      0.008215065,
      -0.016987657,
      -0.024287311,
      -0.02311955,
      -0.02920546,
      -0.011452625,
      -0.025242936,
      0.00648832,
      0.002424385,
      -0.026680121,
      -0.02135622,
      -0.015062391,
      0.013715415,
      0.018972712,
      -0.013628747,
      0.0047924574,
      0.019265901,
      0.01567099,
      0.004268647,
      0.0120918555,
      0.0037822933,
      -0.0012089104,
      0.0037654163,
      -0.003350524,
      -0.04210753,
      -0.008132705,
      0.013769452,
      -0.010377033,
      0.020452896,
      0.0033339371,
      -0.0094292145,
      0.024300132,
      0.0071531227,
      -0.0031962267,
      -0.029514296,
      0.01661551,
      0.013288481,
      0.011576934,
      0.014442209,
      -0.0036353215,
      -0.02178241,
      -0.0027725622,
      0.024731558,
      0.000059910963,
      0.0061540054,
      0.007950857,
      -0.012699998,
      0.012494145,
      -0.024668286,
      -0.0015052421,
      0.004357837,
      0.025428202,
      -0.00094383745,
      -0.0050124805,
      -0.0017801037,
      -0.004981554,
      -0.0044508628,
      -0.007842457,
      -0.027189711,
      -0.014436857,
      0.015252624,
      0.011795364,
      0.018840572,
      0.006834971,
      -0.024306,
      0.03095285,
      0.00880885,
      0.012342576,
      0.0066590267,
      -0.008344312,
      -0.017686104,
      -0.0056264093,
      0.0009262575,
      -0.022453954,
      0.0009942767,
      -0.00020291285,
      0.000460935,
      0.010161541,
      -0.00303916,
      0.0025209193,
      -0.028487131,
      0.0027962956,
      -0.0021542972,
      -0.0011854126,
      -0.024017146,
      0.008055691,
      -0.017715141,
      -0.01184017,
      0.014584112,
      0.013514817,
      -0.01021114,
      0.015951212,
      0.008144573,
      -0.0027433282,
      -0.001051525,
      0.016037527,
      -0.0011413307,
      -0.0069192643,
      0.017394714,
      0.0052176346,
      -0.01669567,
      -0.004896121,
      0.010012472,
      0.01856401,
      -0.0034112695,
      -0.00712825,
      -0.0304735,
      0.01565882,
      -0.0027878655,
      -0.008546677,
      -0.009832315,
      -0.019613076,
      0.033077043,
      0.01918517,
      -0.003340526,
      -0.006958216,
      -0.02454883,
      -0.005252854,
      -0.025142726,
      -0.003401148,
      0.002170327,
      -0.1221202,
      -0.0021358642,
      -0.0093042385,
      0.01583038,
      0.003220254,
      -0.010385324,
      -0.0007332278,
      -0.012363807,
      0.005601452,
      -0.015207396,
      0.029275915,
      0.0069399234,
      0.00056377926,
      0.0057935445,
      -0.0064489306,
      -0.019250866,
      0.013975723,
      0.009699553,
      0.02373343,
      -0.0072991815,
      -0.010192767,
      -0.0038302005,
      0.0015747526,
      -0.0011216343,
      -0.03581,
      -0.0027643493,
      0.0137127405,
      0.014660847,
      -0.016377652,
      -0.013285669,
      -0.03126796,
      0.00006363982,
      -0.00753108,
      0.008587415,
      -0.0016069105,
      -0.004317428,
      -0.025049003,
      0.00333279,
      0.010900343,
      0.008669543,
      -0.008772337,
      -0.0018051664,
      0.023545962,
      0.022565745,
      0.014889135,
      0.03231249,
      0.046749864,
      -0.010983241,
      -0.025020625,
      0.03941901,
      -0.03014006,
      -0.019323725,
      -0.005358904,
      -0.019707326,
      -0.008029169,
      -0.0019838875,
      0.020248182,
      -0.012565323,
      0.0030703994,
      -0.008429468,
      -0.013142455,
      0.00987064,
      0.022135466,
      0.024430547,
      0.012370689,
      0.006852921,
      0.030814948,
      -0.0033298428,
      -0.0139950765,
      -0.017538762,
      -0.00022924859,
      0.011146046,
      -0.0068795164,
      0.022293482,
      -0.003354443,
      -0.007697884,
      0.0022395777,
      0.0022320384,
      0.0035816245,
      0.0013960038,
      -0.026620861,
      -0.0053530377,
      -0.06927696,
      -0.036660213,
      0.034157064,
      0.0067871017,
      0.011279537,
      0.026981473,
      -0.009262069,
      -0.0065260315,
      0.0007286382,
      -0.009113139,
      -0.016456762,
      -0.012788486,
      0.0073792753,
      -0.0007098912,
      -0.028288033,
      -0.0012460258,
      -0.0038375189,
      -0.01549461,
      -0.015978403,
      0.00033859507,
      -0.013155742,
      0.019482384,
      -0.0011846868,
      -0.01907734,
      0.02015741,
      0.030341387,
      0.0053071007,
      0.007991033,
      0.009216536,
      0.0079977065,
      -0.006661898,
      -0.14644562,
      0.0015821058,
      0.012930784,
      0.0068293815,
      -0.0066174134,
      -0.01873689,
      -0.0041771806,
      -0.015013009,
      0.0138864275,
      0.000011778875,
      -0.0047409753,
      -0.0030806726,
      -0.0148809785,
      0.0011892318,
      0.0380966,
      0.13847676,
      0.0023036546,
      0.0047386447,
      -0.027006553,
      -0.008730045,
      -0.019321246,
      -0.017978277,
      -0.01070858,
      0.010891386,
      -0.013858477,
      -0.0012687106,
      -0.0046462794,
      -0.00045807942,
      0.007287089,
      -0.011157943,
      0.0042515458,
      -0.04936274,
      0.008199883,
      0.026889382,
      -0.0010621626,
      0.001341857,
      -0.0098415045,
      -0.009860668,
      -0.008102464,
      0.004599539,
      0.027516847,
      0.0029144073,
      -0.005913608,
      0.014559039,
      0.012679989,
      -0.0055646813,
      0.004016848,
      -0.007912757,
      -0.025595093,
      -0.0040706317,
      0.012474159,
      -0.038695317,
      -0.0051827603,
      -0.0117154755,
      -0.00050376385,
      -0.003930087,
      0.0049131853,
      0.01470484,
      0.009557524,
      0.0069491756,
      -0.022390172,
      -0.005413473,
      0.0034983133,
      0.007341184,
      0.015663035,
      -0.018498993,
      0.0333989,
      0.0046859845,
      0.0027478037,
      0.0008339053,
      0.0084204385,
      0.026937766,
      -0.012399891,
      -0.007249613,
      -0.018835034,
      -0.010801252,
      -0.030198507,
      0.003426495,
      0.0066894814,
      -0.01028446,
      -0.009614205,
      -0.007699059,
      -0.010672928,
      -0.00704152,
      0.0030847052,
      0.007542464,
      -0.004697326,
      0.025796471,
      0.023426104,
      0.0033519806,
      0.017326647,
      0.012526077,
      -0.00837426,
      0.008321572,
      0.0021441735,
      0.019290585,
      0.04354362,
      -0.023475911,
      0.025414284,
      0.0021111397,
      0.0014182908,
      -0.011535924,
      -0.02750845,
      -0.014621446,
      0.017641608,
      -0.0035505074,
      -0.004371872,
      0.001513447,
      0.010961984,
      -0.001989806
    ]
  },
  {
    "id": "genai_cohort_python_02_Numbers_in_depth_in_python_with_logical_operations_vtt",
    "content": "Hey there and welcome to another video. So in this video we're going to go through with another search topic. Let's go ahead and draw the. These are the blackboards which I absolutely love. They are super easy to teach. So we're going to go ahead and discuss about numbers in this one. Numbers are pretty interesting and we do have limited type of numbers in every programming concept in itself. So the first number that we're going to talk about are numbers, numbers in general, but we do have a special name that how we represent them. They're called as integers. And throughout the entire programming course you're going to realize that programmers actually love to call things with a fancy names. Integer is among one of them. Now apart from integer, we also will love to see about another type of numbers that we use known as Booleans. These are true false value and they are used quite a lot in figuring it out, what to do, what not to do. They just have two values, true and false. We'll actually see the practical aspect of it. Apart from this we also have another one which is a real number. So you might be wondering, hey, every number is real, which one is fake? By real number they actually want to represent about the precision. So these are floating point numbers, also known as sometimes and they simply represent everything which is decimal. So where the decimal is important like stock price or rupees or maybe temperature, where the decimal is of super importance, that's called as real number. Yeah, programming people love to deal with that. Then since Python is very friendly with scientists, mathematicians, they also support the concept of complex numbers in which one part is real, the another part is fictitious the iota values. We won't be going too much into depth of it but still just want to mention that complex number do exist and they look something like this like plus 3J. It's not really J, it's iotas and all of that. I don't want you to go in too much depth of it but yes they do actually exist in Python, only restricted for very very rare use case. We won't be probably going with that. So we have integer, we have Boolean, we have these real numbers or floating point number and we do have complex numbers. So these are types of numbers that we have and yes they do each one of them have their own fancy names so we actually represent them just like this. Super easy to have the diagrams for each one of them but where they shine actually really is the code part. So I will walk you through with the code of it. And yes, we'll be writing a lot of it, but, it will be super easy. So let's go ahead and close all of this and let's go ahead and move on to chapter three. Chapter three py. Let's write a lot of code to understand what it means by each one of them. First of all, we are going to press control slash or command slash. This gives you a pound sign automatically. This means we can actually comment things. This will not be executed. So these are comments, everybody use them for notes, for mentioning what you're doing in the code, or to strategize write algorithms. A lot of things. It's like your rough part of the code where it doesn't execute. It's just a rough section that you can write whatever you like. So let's go ahead and start. So let's just say I want to create a variable also known as reference in the memory. So this is my, black table grams. So how many grams of the black T you want to have? Let's just say I want to have a That means grams. And then we're going to go ahead and say I want to have, ginger. If I can write that. Ginger grams. How much ginger T you want? Maybe you want three grams. I know. And now you want to add all of this. This is super easy. You can just go ahead and say I want to grab total grams, which is super easy. Now that you have a reference in the memory, you can just say black teak in the grams and go ahead and add ginger grams. And that's it. Now you have the total gram. Super easy. I can just go ahead and say print a simple string in which we say total grams of base tea is, and then use this curly braces. And then you can inject variable here. So we'll just go ahead and say total grams and that's it. So this is the basics of how it actually works. And maybe you want to do more calculation. For example, you want to go ahead and calculate remaining, T. So that can be easily calculated by saying that, hey, black T in grams. And we're going to subtract it with, ginger grams. And that's it. We have got this one. So we can actually use the same line to represent that. And we're going to say total grams of remaining tea is. Now don't go too much in. What does it make sense or not? That doesn't really matter here. This is all what we have. So just like this, we can do addition. Similarly you can do multiplication, whatever you wish. You can actually go ahead and do that. By the way, the sign of multiplication is this asterisk and you can multiply the things however you like. Whatever you like. Super easy to work on with nothing complex. Python is one of the easiest language now where it actually shines a little bit. And by the way, if you are big fan of running everything, yes, we can do that part, no worries. We can simply go ahead and say run the chapter three and oops, forgot the extension. There we go. We have 17, we have No big deal. plus 3, minus that. You get the idea. It's super easy. Now where Python actually shines is the true division. The division is actually a little bit complex in the world of Python. For example, if I just go ahead and say we have milk liters, let's just say we have liters of milk and we are servings. Serving is liter. I don't know how we are serving, but we are somehow doing a, serving of four liters of milk. So I will go ahead and say milk per serving and I want to find out that in order to find out that the obvious answer is, you go ahead and take the milk liter, you go ahead and divide it by the servings and you get this. So super easy. And I'll just go ahead and say print again with a formatted string and we're going to say milk per serving is use the curly braces and we'll say milk per serving. That's it. This is interesting. We want to see the output of it because this one will be little bit interesting. So we see that the milk serving is exactly the way we want it to be. But sometimes you want not to be that exact. So I'll give you another example. Let's just say we have, total teabag. And again, make sure you also develop this habit of writing a lot of things in the programming. A lot of people just want to copy, paste, no, write it on the keyboard. It will develop a good habit. Let's just say you have total teabag and the pots that you have are four. Again exactly same. But we want to now calculate that how much bags per pot. So we'll just say bags per pots or pot will be total teabags that we have. And this time we want to use two slashes and you will see the meaning of it in just a second. As I mentioned, this is investigative study and we will see what happens when we go ahead and do this. Let's Just say we format this and we're going to say whole tea bags per pot. Pot is going to be like this and we'll say bags per pot. Now, you will notice a bit of a strange that this time we get just 1, not the All the numbers are same. So the whole point of having two slashes is I really don't care about what comes after the decimal. I'm not worried. And there are a lot of cases where you're not worried about it. And that's totally okay. And this is how it is supposed to work. Not every time you should be caring about after decimal in the point of money, in the point of stocks. Yes, I do care, but there are also times when I don't care about it. And there's another thing which we have. Let's just say we have a total, cardamom. Cardamom pods are with us. Okay. And we, want to have pods per cup is three. Okay, now you want to find out what are the leftover pods. So how you'll do this? So we'll just go ahead and say that leftover pods. How do we calculate that? That's interesting. I want to calculate the leftover ones. And it's, super easy. We can just divide this. So after dividing whatever is the remainder, that is where we are worried about. We want to have the remainder, the leftover. So this is interesting example. Let's just go see how we can calculate that. So we have a total cardamom pods. And if I go ahead and divide it by the pods per cup, I hope you can see the problem here. There is a problem. This is not an accurate code. This will not give you the exact result. I want to say the leftover pods or cardamom pod. For the cardamom, I'll just write C. Leftover cardamom pods are leftover pods. Can you detect what's the problem in this code is? It's a logical error. So the Leftover pods are Is this accurate? Probably not. Because if we are putting up three pods per cup and we have total pods of 10, so technically it should be just one. But when we divide it, it just shows that, hey, now the three division, is three. That is, we get. So each cup gets three pods. So three, three and three. That we already know. But this is not accurate. We want to see the leftover. So for the leftover, in the world of Python, we use something known as modulo operator or known as percentage, which gives you the remainder of the division. So notice here the leftover part is one, which is exactly what we want. So pretty good and pretty nice. Now one last thing. Not last, but still, before we go back onto the blackboard, I will show you that how it actually works with the scaling. So let's just say we want to have an exponential power. Just say we have a base flavor strength. There we go. Base flavor strength is And what we want to do is we want to have a scale factor, scale factor. And I want to scale, have a scale factor of three. So now the powerful flavor, how much is it going to scale? I know this is a very weird example, but, but I couldn't come up anything better. So let's just say we have a powerful flavor. And how do we calculate the powerful flavor? The whole point of this example is to have the base flavor strength and use two asterisks. This means I want exponential. So this will be scale, factor. This means that we will have two to the power of three. That means two multiplied by two multiplied by two, two is multiplied three times. That's the whole point. Yeah, and we'll just go ahead and duplicate this, move it up here and we will just change this one to scaled flavor strength is going to be this one powerful flavor. Very weird example, doesn't make much of the sense. But you get the point if we get this. So it's super easy to work on with. What it does is actually it's the power. So we simply say two multiplied by two multiplied by three multiplied by two. I mean if this would be scale would be four. So we would add just one more time. So whatever the number is, this is being multiplied this many times. That's the power. Now one last thing that I would love to show you. This is rarely used, but I would still love to show you. So let's just say you have a value where you want to see and want to have total tea leaves harvested. This is a big number that you want to have. What Python does, it allows you to actually separate the number. Let's just say you want to write billion of the leaves. So you can actually go ahead and write billion just like this. So I can have a here and I can have a here. This improves the readability, doesn't really bother. It's still being treated as without underscore. This is a unique thing about the Python. Just to improve the readability. I hope this gives you an idea how much important is readability in the world of Python. And yes, it's printable, in case you want to know about that. So I'll just go ahead and say T leaves. And we'll just go ahead and say total T leaves harvested. And yes, it doesn't impact anything. The number still comes up just like this. So looks little bit weird, but a lot of Python people love to do it. And this is it. This is what we have done in Integer. So this part of the integer is considered as done. This is all about the integer. You know, how to deal with them, how to work, work with them. Next up, let's take the boolean as well. So can we take this in the same file? Probably use the next one. Let's go ahead with the chapter four. Yeah, we're quite far here. So the Boolean is actually pretty easy. Let's just say I want to ask question that is is boiling. We ask a lot of questions like this is boiling, for the T boiling. I can write that. So the answer of the boiling is either true or it can be false. The first letter is capital and that's it. That is it. You ask a lot of questions like, hey, is the user logged in? Is the credit card there? Is he a paid user? A lot of these questions have just true and false answers. For example, is the temperature hot outside? Is the temperature above degrees? Is the temperature below degrees? A lot of this and then we simply go ahead and say, let's just say we, have another variable, the stir count is five that you want to stir it five times. So one more interesting thing that you will find that this true is actually represented as and the false is represented as This is also a short notation for it. And to prove that this exists, I can show you this, that sometimes people does this, that total actions, actions can actually be represented like this. And we can just have a stir count and we can just go ahead and add is boiling to it. And to your surprise, this true will automatically get converted into one. This is known as upcasting. I'll write this as well. This is known as upcasting. Yeah, There is a fancy word for almost everything in Python and yes, this is exactly how you can write your notes and comments. So I think the better version would be just to have a pound sign or a hash and a space looks good. And then I can just go ahead and use a printing of the formatted string and I can say total action or actions. And that would be total actions. That is it. So super nice. And we'll use a Python to run a chapter four. There we go. So we can see the total action is six five plus one, which is true. So this is really nice and sometimes we actually use that. And you can also do one more thing. Let me show you one interesting aspect of it. Let's just say you say that whether the milk is present in the shop or not, this is zero and this actually represents that we don't have any milk. So I'll just go ahead and say no milk. This is a representation of it. Now you can actually go ahead and print it into the Boolean format just like this. So I'll just go ahead and say formatted and we'll say is there milk? And I can use this one. And I have a strong keyword or interesting keyword known as bool. This is actually a method or a function and anything that has a function it has two parentheses. And in here I can pass on the variable milk present. It automatically will convert zero to false. Let me go ahead and try that. And yes, it actually does that. And let's try it for one as well, because I know you are wondering that as well. Run this. And yeah, it is true. So pretty good. What happens when it's not one? What happens when it is 11? That's a very interesting answer. It is still true. What happens if I just go ahead and give it a name like Hitesh? What happens in this case? That's very interesting as well. This is still true. So there are only a handful of values which are represented as false. is one of them. But we do have more as well. Like there is a one more keyword none. What does this gets converted when you want to convert that that obviously is converted into false. We will There's nothing much, although you have gone through with almost all of them. But yes, I usually hate to actually convert things like that. I convert them when I'm absolutely sure that this is the result I'm probably get. Or these are the only two option which will give me the result. This is really nice. And since we are talking about the Boolean, there's one more thing which we should really talk about when we are talking about the Boolean, which is logical operations. And yeah, it's actually super easy. Don't worry, don't sweat it out. We'll actually cover this part here as well. What are these logical operation. So logical operations are of just majorly of type in the python which is and there is or and there is not what do you mean by all of them? Simply say somebody is asking you for, a T or coffee. So when somebody asks you for a T or coffee, you simply say, hey, T or coffee. You say hey, I'll pick only one. And when somebody says, hey, we would love to have T and biscuit, and means hey, we would love to have both T and biscuit. That's it. And not simply just converts true to false. False to true. That's it. Yeah. I hope you remember the examples as well. So the one example that we worked on is simply T or coffee. So when somebody says T or coffee, this likely means that we are talking about the or part of it. And when somebody is saying T and biscuit, that means, hey, both needs to be true. T and cookies. I like cookies. So when somebody says T and cookies, we'll just go ahead and say, hey, this is the and part. This simply means any one can be true. That is totally fine for our program. We'll still move on. This means both booth, not Booth, both, Both should be true. So this is the meaning of it. Let's go ahead and now work on with this. You will see a variety of examples like hey, is user logged in? Is user having the card information? Then only I, will allow him to check out lot of such incidents. In this case, since we are making the T shop, let's just say water hot is true as well as, T added is false. So what do you think should happen in the variable can serve? So should I be serving the T when the water is hot and I haven't added the T? If you haven't added the tea, that is not tea. So I'll, just go ahead and say water should be hot and the T should be added. Then only it makes a T. So I hope you get the answer of it. Pretty nice. Good example this time. So we'll say can serve Chai will not call it tea. We'll call it chai. We'll use this variable and we can see can serve. That's it. Super easy to work on with can serve chai. False. You cannot serve it. You haven't added the T. And once you have added the tree tea, that means hey, this is all good now. Now probably you should be able to serve and yes, you are. You can now serve this one. So this is pretty nice. All right, I think this part is all done now. The only thing that's remaining for us is the real numbers or the floating point numbers. These are very interesting, examples. We'll take them as a separate example in the chapter five. Let's go ahead and create this. Usually people just prefer to create one video for each one of them. I prefer to have a bit of a longer video. It's okay to have longer videos as long as you are enjoying. So I don't find it as a hesitation or a problem. People get panics out when the video goes about two minutes of length. I don't. All right, so let's just say we want to have chapter five. I'll rename this chapter five. py. there we go. All right, so what does this means? Real number? Real number simply means I want to have precision in my program. Let's just say I call this as. I'll show you a very interesting example. So let's just say I have an ideal temperature which is Of course this is all in Celsius and let's just say current temp and the current temperature is a little bit more. So we have dot and we have four. A lot of nines. I don't know how many, but a lot of them. So what does this means? I want to have approximation and in this case I'll just go ahead and say let's print all of them. So print. I will go ahead and say ideal temp is going to be ideal temp and we'll have duplicate of this. This one should be current temperature and we'll have another one which is going to be difference difference, difference temperature. And for the difference temperature I would say that we will take the ideal temperature and we're going to go ahead and subtract the current temperature with it. This is an interesting activity to do. So let's go ahead and call Python, investigate this, what happens when I do so. And we're going to go ahead and say chapter five. I'm pretty sure you're also excited. Hey, what is about to happen? How can I go ahead and work on with this? Now notice you can see the difference temperature is You didn't expected that. Yeah, of course you didn't expected that. You expected or something. This is not exactly zero because sometimes the precision are there and the way how Python calculate the precision is bit different. This actually drastically changed when I go ahead and remove this much of the precision and try to run this program again. This time we get So this is much more of an expected number. So when you want to deal with higher numbers there are packages, as I mentioned, we borrow the code from somebody else's who has written the code. We simply take that and work on more precision. Python is a very favored language for scientific computings and mathematician, so it does that one. Another interesting thing that you can do is you can actually go ahead and say hey, I want to use sys. And then you can use floatinfo. This is the package. And to actually import this piece of code, this is the code somebody else has written. It's not written by me. So all you just go ahead and say I want to import the sys. We will learn how we can actually do this. This is a code we are bringing in that we haven't written, but Python has written it. So we can actually borrow this. And this gives me a float information that hey, what's the float information you can give me about? It gives that, hey, the float information is like this, the max. This is the number that you can go for. The maxed exponential you can go for. And this actually varies on system to system that how much calculation you can do. More ram, more memory, the system float. This will give you totally different result in your case compared to mine case. So we explored pretty nice. I hope you enjoyed this part as well. And again we actually can have a lot of things, moving on. We have fractions as well, we can work with the decimals as well. A whole lot of things actually work in the world of Python. I probably don't want to go into that, but can I show you a little bit of this just by importing this. All right, so you are going to see that when you want to deal up with the fractions, Python actually go ahead and say that hey, from a package file from known as fractions, fractions, you can go ahead and import fractions. This is a common syntax now you will be able to deal up with a whole lot of fractions, to the power of six and seven. So six decimal point numbers, you can go ahead and do that. Not only this, we have whole powerful decimals as well. So similar to this we have from decimal. Yep, from decimal go ahead and import decimal. And we actually can actually typecast them as well as D. I want to call this as D. Weird syntax, but they do exist. I'll still show you on the Google as well that hey, they do exist, decimal in Python. And we actually will go ahead and see this. Yeah this is the one we have the documentation. So decimal, decimal point, all of this right now you don't have to do much into this but yes, just remember that these Things do exist and they have a huge importance now. You can see that they can actually deal up with a huge number of after decimal values. Yeah, they are designed just for this. We won't be using them right now, but it's actually important that we know about them. That hey, a floating send decimal. They have fractions, they have decimal. You can consist, you can borrow whenever you need more power, anytime from the system. But we can work with that complex number. We are not going to touch because this is bit of out of the scope as of now for this course. But just to give you an idea, yes, complex number do exist. For the complex number, usually we bring out fractions and that library actually works way better in that I haven't dealt much with the complex numbers, especially the imaginary numbers usually in the university scientists and all of them, they work more on it. I don't have much experience with it. I'll be just honest with you on this part. But yes, they do exist. All right, so quite a lot about the numbers that we have dealt up. I hope you have enjoyed this long lecture. Bit long, but very valuable. We have learned so much, we have written so much code. Go ahead, go through with this code entire part and I'm pretty sure you'll love it. Don't forget to rate us and let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 Numbers in depth in python with logical operations.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/02 Numbers in depth in python with logical operations.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.014623383,
      -0.0074602705,
      0.031593524,
      -0.04645236,
      -0.010693969,
      -0.00060816674,
      0.011034344,
      0.020316442,
      -0.0022311169,
      0.007490999,
      -0.0074261436,
      -0.016294573,
      0.0135315955,
      0.014182132,
      0.12976919,
      0.025453502,
      -0.003998023,
      -0.008051767,
      0.011366493,
      -0.006415454,
      -0.007859047,
      0.01695014,
      -0.005068536,
      0.006553263,
      -0.007587775,
      0.004645325,
      -0.0018832575,
      0.0028402566,
      0.029954242,
      -0.027901758,
      -0.017756313,
      -0.0025987742,
      0.0053762565,
      0.0066056587,
      -0.009918431,
      0.011033213,
      0.007889628,
      0.00021942648,
      -0.016177695,
      0.026911257,
      -0.011975124,
      0.0085346205,
      -0.0043478734,
      -0.03554662,
      0.02123907,
      -0.0052953837,
      -0.022155713,
      -0.018950503,
      0.0027889297,
      0.018196624,
      0.0045414874,
      -0.012809211,
      -0.023959704,
      -0.18930109,
      0.022196958,
      -0.0119263185,
      -0.0032303627,
      -0.002486171,
      -0.0018136561,
      -0.009805072,
      -0.010166207,
      0.026237868,
      -0.037533443,
      -0.0004728641,
      -0.01461814,
      -0.015228173,
      0.016927088,
      0.0066437223,
      -0.00002022026,
      -0.012544956,
      0.02903114,
      0.012958851,
      -0.031331666,
      0.00023362467,
      -0.010463176,
      -0.022482267,
      0.00898745,
      -0.008233097,
      -0.018298684,
      0.02479771,
      -0.00197854,
      0.0018606819,
      -0.0057796347,
      -0.0007638786,
      0.011229508,
      -0.007077878,
      -0.02372038,
      -0.014072454,
      0.0017124849,
      -0.008432616,
      -0.005495289,
      -0.0040813778,
      0.0026782968,
      0.017475897,
      -0.034742005,
      0.0028991376,
      -0.00018867225,
      -0.0040082172,
      -0.023905652,
      -0.0015226362,
      0.006182459,
      -0.0016552922,
      -0.033805102,
      -0.0039802366,
      -0.004020801,
      0.0037496083,
      0.007151784,
      -0.010349345,
      0.00032925303,
      0.000055620392,
      -0.017137391,
      -0.016262557,
      0.0066280426,
      0.029943047,
      0.009757596,
      -0.17786254,
      0.009458904,
      -0.0031167066,
      -0.012315966,
      -0.00022249314,
      -0.022351606,
      0.0027809981,
      -0.025954852,
      0.018996157,
      -0.0075461236,
      0.01676706,
      -0.01037152,
      0.044262365,
      0.007419778,
      -0.0017164212,
      -0.022870198,
      -0.002084754,
      -0.021184705,
      0.00083034416,
      0.0141867865,
      0.0044463496,
      -0.013304225,
      0.0072259377,
      -0.029019076,
      -0.008259414,
      -0.015044425,
      0.004301492,
      -0.005306694,
      0.041206785,
      0.009938212,
      -0.008860438,
      -0.024733702,
      0.029626105,
      -0.025876572,
      -0.030510193,
      0.0124904625,
      -0.027644385,
      0.01969283,
      0.004744194,
      0.022597618,
      0.00038882336,
      -0.0061675,
      0.03411152,
      -0.010304138,
      -0.01259906,
      -0.008967775,
      0.00025159187,
      0.0034122735,
      0.010802601,
      -0.01730714,
      -0.03558391,
      -0.007124302,
      0.01163228,
      0.010970449,
      0.00013209827,
      -0.013114938,
      -0.002296602,
      -0.01212408,
      -0.0102078,
      -0.012988127,
      -0.0065540364,
      0.0166352,
      0.0014520282,
      0.018218802,
      0.0012048322,
      -0.0015477497,
      -0.0019891642,
      0.013101983,
      0.00982322,
      -0.0036882765,
      0.012256259,
      -0.0010557814,
      0.01735715,
      0.02330786,
      0.012538011,
      0.0015862288,
      -0.018491786,
      0.012544286,
      0.0030354091,
      0.01827718,
      -0.027875226,
      0.0006822636,
      0.004093362,
      -0.005811486,
      0.015230816,
      0.022732653,
      -0.0030763769,
      0.00030859237,
      -0.03512737,
      0.013742422,
      -0.018668523,
      -0.015361523,
      -0.021418663,
      0.014019341,
      0.0015036461,
      -0.004181895,
      -0.012905505,
      0.02035431,
      -0.006710602,
      0.023956906,
      0.007678235,
      0.026044045,
      -0.017899062,
      -0.015604634,
      -0.0004967039,
      0.018852986,
      0.0010230157,
      0.004538339,
      0.018309722,
      0.03101602,
      -0.015013594,
      0.016095458,
      -0.0015302803,
      0.0012944198,
      -0.002808277,
      0.0130705405,
      0.010243134,
      -0.008243334,
      -0.011559827,
      0.0077810413,
      0.0039910087,
      -0.0024581868,
      0.019324165,
      -0.006087018,
      -0.0007169026,
      0.0030455876,
      -0.0053706532,
      -0.017643562,
      0.01293704,
      0.030610705,
      -0.0027026003,
      0.0056979586,
      0.008395577,
      -0.00057352765,
      -0.0015783001,
      -0.01962892,
      -0.0065034255,
      0.0128463255,
      -0.020749973,
      0.009936746,
      -0.018291848,
      -0.01885089,
      -0.0130002145,
      0.0030603453,
      0.0021160815,
      -0.00406212,
      -0.0021873566,
      -0.008433615,
      -0.008743152,
      0.027722526,
      -0.02482681,
      0.006727093,
      0.016191443,
      -0.015770553,
      0.022902649,
      0.008962763,
      0.0108799925,
      0.010443469,
      -0.013848101,
      -0.018206315,
      0.0091788145,
      -0.11183233,
      0.023821166,
      0.012339861,
      -0.014836227,
      0.0056488053,
      0.008007403,
      -0.023105782,
      0.01635976,
      0.0020209334,
      0.022925904,
      0.008835515,
      -0.022617152,
      0.014086453,
      -0.011604187,
      0.016897146,
      -0.0230564,
      -0.0094649615,
      -0.0053118863,
      0.025115628,
      0.0033081267,
      0.0038907859,
      -0.013280716,
      0.010168409,
      -0.007128145,
      0.0070411647,
      -0.005730673,
      0.006685601,
      0.029341921,
      0.0006511338,
      -0.00063883374,
      -0.013212105,
      0.021488264,
      0.00074034935,
      -0.014705005,
      -0.016926859,
      0.011876902,
      0.01675236,
      -0.014068826,
      0.0041496744,
      -0.0021832606,
      0.011824838,
      -0.01967946,
      0.027454909,
      0.0351762,
      -0.010623054,
      -0.004130096,
      -0.01401111,
      -0.004267305,
      -0.018110517,
      -0.0055803168,
      -0.03801742,
      -0.0036459751,
      0.018380953,
      -0.0032742152,
      0.0065277666,
      -0.0038261702,
      -0.015351655,
      -0.016015375,
      0.010724456,
      0.0013641746,
      0.007984202,
      0.009643266,
      0.01030189,
      -0.0073344028,
      0.0057406374,
      -0.0015467625,
      0.009986067,
      0.001991249,
      -0.00263086,
      -0.0015637194,
      0.0036293184,
      -0.007478995,
      -0.011476941,
      -0.012723808,
      0.0039200624,
      0.008036129,
      0.0063787648,
      -0.010933618,
      -0.0060741752,
      0.037039537,
      0.015706886,
      -0.021264302,
      0.0019253173,
      -0.0012325764,
      0.0035683212,
      0.0010742855,
      0.0076382766,
      -0.016972052,
      -0.011244212,
      -0.02081238,
      0.0041210484,
      0.016699351,
      -0.019326303,
      0.0056283535,
      -0.022050444,
      -0.0029984263,
      -0.014929339,
      -0.005146465,
      -0.018376635,
      -0.0017270746,
      0.0091047585,
      -0.0073713567,
      -0.030928036,
      0.0010699622,
      0.0017703013,
      0.012994444,
      -0.017849114,
      -0.014353912,
      0.016549231,
      -0.019141011,
      -0.0047592437,
      0.016678477,
      -0.020400504,
      0.000585247,
      -0.007637051,
      0.008982772,
      0.008422841,
      0.020303044,
      0.009749713,
      -0.013893267,
      0.010413895,
      -0.0021465612,
      -0.010031288,
      -0.002018841,
      -0.008195372,
      -0.0022028699,
      -0.01685054,
      -0.005299893,
      -0.020807581,
      -0.0376591,
      -0.021015145,
      0.006901451,
      -0.0061214697,
      -0.011182037,
      -0.010591559,
      -0.0073822644,
      0.030835785,
      0.03306482,
      0.0039967834,
      -0.0008495456,
      0.0023201269,
      0.0025610747,
      0.015144005,
      -0.007992149,
      -0.007732811,
      0.03062526,
      -0.00313152,
      -0.0033149384,
      0.017304873,
      -0.02225928,
      -0.026591647,
      -0.016524091,
      -0.008364354,
      0.00091318524,
      -0.0016613072,
      0.013030316,
      0.011446361,
      -0.015100902,
      -0.0121589,
      -0.0035761772,
      0.0034747454,
      0.008579508,
      0.0056393365,
      0.018338064,
      0.0016529452,
      0.019030403,
      0.007600778,
      0.020932024,
      0.0029740194,
      -0.01607436,
      -0.016810186,
      -0.0106363185,
      -0.032893345,
      -0.013012952,
      -0.005465359,
      -0.0075459285,
      0.007718817,
      0.0022444825,
      0.008716204,
      0.019599255,
      0.025827598,
      0.006318759,
      -0.009720887,
      0.018936189,
      0.014250842,
      0.0035320465,
      0.027406843,
      0.003627482,
      -0.016186835,
      0.00027809307,
      0.008685182,
      -0.0017761586,
      0.012082904,
      0.005923761,
      -0.009794277,
      0.0023007253,
      -0.02294628,
      -0.007469755,
      0.02017364,
      0.029727645,
      -0.00016955442,
      -0.023131883,
      0.01350588,
      0.0024585915,
      -0.0074410653,
      -0.0071357125,
      -0.019395195,
      0.005073601,
      0.004772619,
      0.017750828,
      -0.0039064083,
      -0.002302535,
      -0.0054444103,
      0.003417789,
      0.016644105,
      0.0071169026,
      -0.018188668,
      -0.004645636,
      -0.022102136,
      0.012335278,
      0.010219005,
      -0.015388805,
      0.00037337924,
      0.006150794,
      0.008796585,
      -0.0037836046,
      -0.008150396,
      0.008857188,
      -0.019231375,
      0.012656501,
      -0.023019906,
      -0.016237663,
      -0.004530128,
      0.0059254607,
      -0.030913103,
      -0.013580571,
      0.006451172,
      0.006133714,
      -0.019381106,
      0.0064948243,
      -0.000016734293,
      -0.0172046,
      -0.01991607,
      0.017412232,
      0.0009062909,
      -0.015559328,
      0.0047243247,
      0.002623781,
      -0.010964614,
      0.0061842743,
      0.0042026653,
      0.020185947,
      -0.0016964505,
      -0.012151751,
      -0.0188303,
      0.047299463,
      0.0011951837,
      -0.0046223705,
      -0.008554523,
      -0.0044805743,
      0.02727569,
      0.024457728,
      0.0004387376,
      0.008140141,
      0.0017461474,
      -0.012037725,
      -0.025085866,
      -0.009083755,
      0.008747141,
      -0.12783056,
      0.008371548,
      0.00048835017,
      0.007565402,
      -0.00063025777,
      -0.02003776,
      0.009844728,
      -0.02284617,
      0.0016645392,
      -0.0124371685,
      0.0376561,
      -0.0037897548,
      -0.00031049416,
      -0.0049576648,
      0.00023956446,
      -0.020046635,
      0.026233235,
      0.010357243,
      0.02157692,
      0.01214147,
      -0.023314944,
      0.000063774576,
      0.0037909995,
      -0.015684906,
      -0.05840641,
      -0.0014835884,
      0.006428946,
      0.0052215136,
      -0.00958691,
      -0.0033057353,
      -0.017416183,
      -0.018724317,
      -0.013393071,
      0.021575099,
      0.0054377033,
      -0.0053321216,
      -0.02942158,
      0.021287687,
      -0.0032576988,
      0.00086098077,
      -0.000053449003,
      -0.0053950315,
      0.024033044,
      0.018572373,
      -0.012078086,
      0.009847872,
      0.047236256,
      -0.017241938,
      0.00053122966,
      0.01940494,
      -0.049214695,
      -0.0027945326,
      -0.0011299688,
      -0.013863376,
      0.0044859657,
      -0.0027282843,
      0.022283418,
      -0.0128641995,
      -0.0046756733,
      -0.020963918,
      -0.0040377397,
      0.016620195,
      0.009290144,
      0.021139158,
      0.015674626,
      -0.011018478,
      0.020712387,
      0.015107797,
      0.025283212,
      -0.02101347,
      0.0084326165,
      0.005556174,
      0.01649071,
      0.0073290924,
      0.003993423,
      -0.012041039,
      0.009293503,
      -0.0013893684,
      -0.0087175,
      0.006700978,
      -0.041754376,
      -0.024252055,
      -0.049641293,
      -0.022890512,
      0.020137273,
      0.012064906,
      -0.0011728138,
      0.018747045,
      -0.0048479475,
      0.012596545,
      0.018819895,
      -0.016087828,
      -0.021403464,
      0.0039039387,
      0.017556207,
      0.00019171347,
      -0.0142911,
      0.010123622,
      -0.0071422886,
      -0.012360659,
      -0.008753383,
      0.01079913,
      -0.00985506,
      0.0058757807,
      0.012507121,
      -0.019225484,
      0.011643298,
      0.00475273,
      -0.010381557,
      -0.003472835,
      0.0164614,
      0.007468508,
      0.00717566,
      -0.16116959,
      0.00025169784,
      -0.0012227616,
      0.005181188,
      0.009001061,
      0.007942692,
      -0.02068407,
      -0.004660763,
      0.001571762,
      -0.008333315,
      -0.0144233685,
      -0.010421672,
      -0.022379791,
      -0.011462484,
      0.02304973,
      0.14252688,
      -0.011339593,
      -0.002275793,
      -0.02904353,
      0.0031426672,
      -0.01818904,
      -0.021774964,
      -0.014658268,
      0.008243588,
      -0.010975317,
      -0.007922324,
      0.00045982996,
      -0.0054905056,
      -0.0022408064,
      0.0037571737,
      0.0024828834,
      -0.0023457345,
      0.009196755,
      0.01391875,
      -0.011435839,
      -0.0045159385,
      -0.007298543,
      0.011177688,
      -0.0024270355,
      0.008678828,
      0.011106127,
      -0.023203745,
      0.0025267438,
      -0.0011647792,
      0.018970432,
      -0.017187089,
      -0.010534676,
      -0.026248246,
      -0.003094393,
      0.007191799,
      -0.014245264,
      -0.039922997,
      0.00027205094,
      -0.009309252,
      -0.0075121294,
      0.023405189,
      0.0058122985,
      0.014558499,
      0.004518722,
      0.013397011,
      -0.018229224,
      -0.0041392054,
      -0.002747709,
      0.013221436,
      0.02501298,
      -0.0044210935,
      0.033801317,
      0.008237046,
      0.01960315,
      -0.007090777,
      0.013348611,
      0.009818184,
      -0.022676958,
      0.017186062,
      0.011213943,
      -0.024339853,
      -0.011501587,
      0.021819724,
      0.000591373,
      -0.004110155,
      -0.0046828887,
      0.013421736,
      -0.00450608,
      -0.016581813,
      0.022510778,
      0.01532734,
      -0.01167588,
      0.0016946922,
      -0.0073000286,
      -0.015874362,
      0.00960378,
      0.0071336143,
      -0.011063035,
      0.017589463,
      0.0003103705,
      0.014843193,
      0.038003374,
      -0.021496216,
      0.045478515,
      -0.0058953622,
      0.011721927,
      -0.009418579,
      -0.011759952,
      -0.019738076,
      0.009597907,
      0.00921308,
      -0.007472929,
      0.024062661,
      0.011564029,
      0.0024492987
    ]
  },
  {
    "id": "genai_cohort_python_03_String___index__slice_and_encoding__vtt",
    "content": "Moving ahead into the journey of our Python, let's take one more topic which we are going to briefly touch. We will not go too much in depth as of now because we are just exploring the data types that is known as string. So anytime you see the word, the string itself or the word like fraction, these are treated as string in the world of Python. And yes, I am hundred percent aware that string is this much of the in depth. They have a lot of methods, you can do lot of things with the strings, format them, uppercase them, lower them, count the values, manipulations, a whole lot of thing exist with that. But I personally think that the best time to learn the string is when you actually build something, do some projects in it, or actually have a use case of the string. So what we're going to see is just the basics of string, one or two use cases so that we understand the part of it and we'll learn about a little bit of the slicing of the strings, indexing as well as slicing. So the only two topics that we want to start with is the core string itself, what does it mean by to have a string in itself? Once we understand the core of it, then we just want to touch briefly about indexing. So each letter in the string, how does it mean and what does it actually does. And apart from this one final one which is actually pretty interesting and useful, is known as slicing. So these are the only three topic we are going to cover. We'll go with the foundation of it, the code, the indexing part of it and the slicing part of it. Yes, I 100% agree. String deserves a lot of videos, they have a lot of use case. But we'll do that right now. Let's just go with the basics of it. All right. And by the way, string is, in case you haven't just figured it out, it's actually immutable, they cannot be changed. So always remember strings are actually mutable, they cannot be changed. So in the memory they always actually create a new reference. All right, so let's go ahead and we still are in the data types actually. So let's go into the chapter six. We are running with a lot of chapters. So chapter six py and there we go. So in order to have a string, let's just define a chai type. The chai type is one of my favorite one which is ginger, chai. This is a string. Anything that you see in the double quote is a string. That is it. Nothing much, nothing less. That's it. And let's Just say you also are having, let me just shut this down. You also have a customer name. Who is asking for this one? Let's just say the customer name is Priya. So how do we do that? How do we use the string? Using the string is actually exactly same. Let's just say I want to print, I want to print a formatted string. So we'll just say order for. Inject a variable. We're going to go ahead and say customer name, order for. And then we are going to say chai. Type please with an exclamation. There we go. And if I go ahead and run this, the output should be pretty expected. Python chapter Py There we go. Order for Priya, Ginger. Chai please. That is it, that is the whole string. Now let me go ahead and add more to this one. So let's just say we want to have a description for the chai. How does the description for chai works? Let's just say we want to call it as aromatic and bold. This is our chai. Now we want to have the first word and the last word of this, string. I don't know why the reason for it, but we just want to grab it. So how do we do this? We actually go ahead and take this whole string and this is where we learn about the indexing part of it. So, so indexing is actually super easy. For the indexing, I'll just go ahead and say let's paste this. There we go. So this indexing means that each letter in this string is represented by a number. So the 0th letter is actually represented by this one. So the letter numbering actually starts with zero. After that, if you want to have the first character, then you simply go ahead and say, hey, this is my first character. So the first character is actually R and we can just keep on moving that. Always remember that the letter and the indexing always starts in the programming, especially starts from zero. So if I want to get the first world, this is my zeroth world. So 0, 1, 2, 3, 4, 5, and Also remember one of the thing in indexing range, slicing, whatever, that the last number is not inclusive. In the world of Python, last number is not inclusive. So when I say 0, 1, 2, 3, 4, 5, 6, So is not going to be inclusive. So if I just put it to 7, the C is never going to be inclusive. So I have to say from zero to the eight so that I can get the first letter and that's it, that's all it takes. So if I go ahead and say I want to print the first number, so I'll just go ahead and say first, not number. First word is going to be like this. So I can just take the chai description and then I can use the square brackets. That's how you define that. Okay. And this has two part the start, the end, and the step. And the step. So this is how I start from the 0th. I know if I just print out the This is not going to be inclusive, but I still want to see. This is investigative study. I want a proof of everything. So this is what we have. Aromatic. We want C as well, so you get the point. We have aromatic as well. This is what we have. If I print this. There we go, nice and easy. There is also one more thing. After the colon, you can actually go ahead and put up a one here. And then let's see what happens. Investigation. Nothing happens because one means, each letter do not skip anything. One simply means one character. So but if I go ahead and say two, that means every second character, the one means every character, and two means every second character. So what you're going to get in this one is you get A, then the next character, R is being skipped. So every second character is being skipped. This one we get it. But after that Is being skipped. And you might be wondering what's the use case of this? This sounds really bad. It's not usable anymore. But it has its own use cases. Now if I go back onto this, there are some Pythonic way of doing the things. For example, if it is zero, you can avoid this, but you cannot avoid the starting colon. Yeah, Python guys loves to use this and show off a lot. But, again, you get the point. Now similar to this, if you want to have the last word just like this. So I can just go ahead and say, hey, last. And I have prepared in advance, what is this? So I can just say, hey, start point. I will just go ahead and say 12, but I don't mention the last point. That means go ahead at the end, whatever it takes. So if I go ahead and start with this, we get the bold. So the 12th letter is B. And after that whatever it takes. So if I add more things here, so for example aromatic and bold, more, it will just keep on going and will never stop. So that's how it is done. I hope you get the idea how this indexing and slicing works. Pretty nice and interesting, isn't it? Now one last thing, which is, being shown off Quite a lot. One more thing that you can do is now that we know we have a start, then a colon, then we have an end, and then we have a colon, and then we have a step. In the step, you can go ahead and add minus one. Yeah. What's the point of this minus one? The minus one is a shorthand for reversing the whole string. So this aromatic and this is a shorthand notation for that. The steps can be negative indexed. And yes, in the world of Python you can actually negative index. So it will start from the rotative way. You get the idea. So if I go ahead and run this notice here, now it says dolb, which is bold and DNA. So everything goes. So this is a nice trick to actually reverse the string. A lot of people use it and they actually love to use this part as well. All right, so this is pretty interesting. One more thing I would like to mention about the string which we will use quite a lot and a lot of time these strings, we are writing all the English strings, but it's not always that you'll be writing English scripts sometimes. Maybe you want to write Hindi, maybe you want to write, Tamil, maybe you want to write Japanese, Chinese or Mandarin, whatever. The language you want to write, they have own characters. Like for example, in the Spanish you might have seen if you press A quite a lot, there are tilde is over the A. So if you want to use these kinds of things, there is a special way of do it. But for example, we do have a variable, let's just say labeltext. And this label text needs to go onto a variety of places. So we'll just call this one as chai and let's call this one E as special one. So I'll just go ahead and use this e and we'll just say special. Now this is not an ordinary character that we are working with and this can actually create problem. So for these kinds of things, when you have these special characters or special symbols, we actually use encoded string. So let's just call this one as encoded label. How do we do that? We actually take the label text and we have a function, we just put a dot and you can see there are a lot of methods in the string. We can capitalize it, case, fold it, center it, we can count it. There are a lot of things. One of the things which is important for us as of now is encode and then you provide the encoding for it. The common encoding that we use is UTF This is a, Way to symbolize the strings in the computer format. So we have UTF 8, we have UTF There's a lot of them right now. UTF will do our job. Let's try to print what happens in this one. So when I go ahead and print this out and I say encoded label, and I try to print this, I want to print the encoded label. I also want to print the non encoded one as well. So I'll just go ahead and say non encoded label. And we'll just go ahead and say label. Very bad label. We should actually have a label text. I'll just copy this and paste it everywhere so that we have at least nice one. All right, so once you actually do this, you actually see that, the encoded label looks like this, which is okay. This one looks okay. In this case it's okay. But when you actually deal up with the Mandarin characters, and especially Japanese characters, very, very difficult. And you might be wondering, hey, this actually messed up all the things. This is not how I want to print it. But behind the scene, this one has a guarantee that all of your characters are truly encoded and all these special meanings actually carry on. But in order to actually properly print this up, you actually don't print it like this. You have to. You have encoded it, you will decode this. So I'll just go ahead and store this as decode or decoded label. This time, no spelling mistake. And you again use encoded label, and you have a property of decode, decode, and then you provide the exact same encoding that you have used, probably UTF 8, probably UTF 16, whatever you are using. So I'll just say that, hey, I have used encoding of UTF Now you give me this. And now we can actually go ahead and say instead of encoding label, we'll use decoded label, and we'll just go ahead and change this decoded label. There we go. This is a proper syntax and a proper way to actually take this. This looks okay, at least in terminal, but you will be thanking me that yes, I taught you the way of properly taking these special symbols in the string. This is rarely being taught, but I have worked with one of the client in Japanese and I learned it through the hard way that how important these conversion is. Although it was a web development project, but that was the lesson I learned once and for all. So we actually studied about the indexing slicing as well as we explored encoding as well. How awesome that is. Encoding, decoding. There we go. And that is it. That is all that we wanted to go through with a string. Hope you have enjoyed this chill back investigative study. And that's it for this video. Don't forget to rate us and let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 String - index, slice and encoding_.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/03 String - index, slice and encoding_.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.017160648,
      0.0005118022,
      0.0143668195,
      -0.054197352,
      -0.015789075,
      0.013348149,
      0.0055652554,
      0.03145293,
      -0.0046637272,
      0.0015019408,
      -0.022214407,
      -0.0069592046,
      0.014509649,
      0.02584601,
      0.12563097,
      -0.005848681,
      -0.02409378,
      -0.0053288364,
      -0.0026182462,
      -0.01371597,
      0.0027579896,
      0.017154446,
      -0.006992089,
      -0.012466822,
      0.00968971,
      -0.010223409,
      0.006834483,
      -0.009800246,
      0.023742095,
      -0.02096024,
      -0.011784044,
      0.004056017,
      0.016456867,
      0.0065045822,
      0.0011044134,
      0.002591384,
      0.010018063,
      0.0022167726,
      -0.028564023,
      0.012835509,
      0.005065093,
      -0.006701191,
      -0.006384422,
      -0.02641762,
      0.024448903,
      -0.023756519,
      0.016583996,
      -0.008123243,
      -0.0033328536,
      0.013417586,
      0.009834207,
      -0.011552248,
      -0.018491624,
      -0.18901648,
      0.02294532,
      0.0054324246,
      -0.0035830906,
      0.00093800604,
      0.009382265,
      -0.0010178727,
      -0.01102601,
      0.021048125,
      -0.010678222,
      0.002284873,
      0.0033429696,
      -0.01865509,
      0.018459069,
      0.012738671,
      0.006073895,
      -0.0019104889,
      0.012271474,
      0.0014707573,
      -0.031544354,
      -0.016484147,
      -0.021639606,
      -0.03974358,
      0.017703105,
      -0.009297765,
      -0.01459958,
      0.029003663,
      0.0012926406,
      -0.014649737,
      -0.0020798305,
      0.008408836,
      0.027413253,
      0.0006084366,
      -0.015380467,
      -0.005244242,
      -0.0066932854,
      -0.00141798,
      -0.02140196,
      -0.0060627568,
      0.0140963495,
      -0.0032710717,
      -0.014631787,
      -0.00062294665,
      -0.0089995675,
      0.012516872,
      -0.011325827,
      0.009210399,
      0.015948053,
      -0.010428723,
      -0.016183197,
      -0.0084113665,
      0.0062351334,
      -0.011623037,
      0.006206159,
      -0.0010882171,
      -0.01249912,
      0.002887219,
      -0.017989328,
      0.012596009,
      0.007848558,
      0.022234514,
      0.003202291,
      -0.17505892,
      0.0016037815,
      -0.027138393,
      -0.020887392,
      -0.007059034,
      -0.02041059,
      -0.009524229,
      -0.0133837955,
      0.007672618,
      -0.012658016,
      0.012516429,
      0.016563045,
      0.030257035,
      0.007195139,
      -0.005732575,
      -0.015217783,
      0.009167703,
      -0.006931062,
      -0.015005437,
      -0.00810115,
      0.017394941,
      -0.030520692,
      -0.0015585308,
      -0.023479607,
      0.00034107085,
      0.010486379,
      0.02113264,
      -0.006298789,
      0.012694673,
      0.014930317,
      -0.0027947996,
      -0.009974837,
      0.025650553,
      -0.017643437,
      -0.030846281,
      -0.0054127276,
      -0.017633373,
      0.014822088,
      -0.012913865,
      0.02638842,
      -0.015829759,
      -0.0003561431,
      0.005268383,
      -0.011020487,
      0.005478646,
      0.0030767177,
      -0.0063753906,
      0.009662553,
      -0.008559206,
      -0.013575461,
      -0.004110095,
      -0.018954048,
      0.012745311,
      0.02811152,
      -0.013520788,
      -0.0013596846,
      -0.0054267645,
      -0.0029445696,
      -0.011702585,
      0.000494611,
      0.0007050176,
      0.013685962,
      0.0179442,
      -0.0009470459,
      -0.003627448,
      -0.0046147755,
      -0.0112621905,
      0.021354016,
      0.010015924,
      -0.0061877607,
      0.016259212,
      0.0045161974,
      0.023917269,
      0.027000235,
      0.00075060566,
      0.004474553,
      -0.005820356,
      0.01505253,
      0.01869895,
      -0.018327544,
      -0.0059274565,
      -0.012747918,
      -0.0041242554,
      -0.007471167,
      0.01004432,
      0.010625011,
      0.0053482396,
      0.0049624965,
      -0.0233538,
      0.037203804,
      -0.020298129,
      0.0105191935,
      -0.025103733,
      0.011327895,
      0.021058815,
      0.0010930683,
      -0.0006126222,
      -0.0011953214,
      -0.0103848195,
      0.027934587,
      0.0057195323,
      0.016926028,
      0.010457494,
      -0.010473415,
      0.00885808,
      -0.011980368,
      -0.009736854,
      0.008844932,
      0.018498031,
      -0.0041872174,
      -0.011542838,
      0.0073387595,
      0.008020826,
      0.0013549872,
      0.000028294104,
      0.014058152,
      0.0031724568,
      -0.027168792,
      0.0116132395,
      -0.001959333,
      -0.012263751,
      -0.0019567322,
      0.010284544,
      0.0021265422,
      0.015837787,
      0.026100172,
      0.0046509802,
      0.015365927,
      0.004541031,
      0.04791961,
      0.0023947915,
      0.008246437,
      -0.0011028207,
      -0.009509525,
      -0.025386827,
      -0.016398154,
      -0.01785089,
      0.005960095,
      -0.005397747,
      0.017087713,
      -0.02760729,
      -0.03774431,
      -0.015808614,
      -0.012897169,
      -0.007056809,
      -0.013981603,
      -0.0030622473,
      -0.0076721204,
      -0.005992206,
      0.015879855,
      -0.0043458086,
      0.01888226,
      0.04282858,
      -0.010165971,
      0.009614438,
      0.024160417,
      -0.0033469615,
      0.0151310675,
      -0.011295559,
      -0.024670662,
      0.027789809,
      -0.10777873,
      0.019133052,
      0.012919195,
      -0.012649755,
      -0.002434172,
      0.006917829,
      -0.019989327,
      0.007242148,
      0.0036323108,
      0.014528275,
      0.013887584,
      -0.006118459,
      0.024412468,
      -0.01805194,
      -0.0035235733,
      0.0018748775,
      -0.004978003,
      -0.017015604,
      0.011973043,
      0.0039548515,
      0.000046351146,
      -0.0039173984,
      0.012442565,
      -0.02416769,
      0.01434347,
      -0.016685396,
      -0.011719419,
      0.024509335,
      0.01863239,
      -0.008283689,
      -0.0001557301,
      0.022065988,
      -0.0029213845,
      -0.0076909685,
      -0.00031228733,
      0.01003188,
      -0.0017466849,
      0.014079634,
      -0.0052084033,
      -0.01804325,
      0.011403996,
      -0.037421256,
      0.027894963,
      0.041182682,
      0.0070988135,
      0.0006617887,
      -0.005933059,
      -0.009296172,
      -0.009825145,
      0.012090378,
      -0.014242503,
      -0.0070367972,
      0.0036777267,
      -0.008206565,
      0.01646184,
      0.023117589,
      -0.021987986,
      -0.03786233,
      -0.005007647,
      0.0031374418,
      -0.026930746,
      -0.0060735377,
      0.0052437554,
      0.016273612,
      0.0091089085,
      -0.011828517,
      0.018636389,
      0.010328398,
      -0.011028911,
      -0.0077115553,
      0.015966902,
      0.0037307122,
      -0.015526466,
      -0.0076782196,
      0.008121157,
      -0.0035076812,
      0.02070506,
      -0.0018711359,
      -0.005974753,
      0.040302288,
      0.011068495,
      -0.008829759,
      -0.0046384274,
      -0.017924132,
      0.004464737,
      -0.0018393426,
      0.016141534,
      -0.012730401,
      0.022206912,
      -0.042737138,
      0.014344495,
      0.013614784,
      -0.04535048,
      0.007581265,
      -0.031103253,
      -0.0016357251,
      -0.0073667453,
      -0.0036745437,
      -0.0207789,
      0.0029400138,
      -0.022556055,
      0.007155603,
      -0.017066548,
      -0.0017267978,
      -0.0068418416,
      0.0026676187,
      -0.016892621,
      -0.010018105,
      0.003881186,
      -0.023568217,
      -0.0009836208,
      0.0136205265,
      -0.012915531,
      -0.012303576,
      -0.0043547777,
      0.016007012,
      0.011823627,
      0.014209922,
      0.01992383,
      -0.021324828,
      -0.0017787277,
      -0.010746407,
      -0.014487405,
      0.024002295,
      -0.004474783,
      -0.009865882,
      -0.01771225,
      0.010500732,
      -0.0029163524,
      -0.024830356,
      -0.016072586,
      -0.0026548184,
      -0.0097549595,
      -0.000017507085,
      -0.015959255,
      -0.017339626,
      0.011648189,
      0.016955087,
      0.004146796,
      0.014388506,
      0.007773195,
      -0.004727013,
      0.006858838,
      0.012038097,
      -0.018513417,
      0.0065565943,
      -0.003949054,
      -0.013919911,
      0.010555193,
      -0.025181493,
      -0.0079976395,
      -0.02821492,
      -0.014706628,
      -0.011051398,
      -0.017333396,
      -0.00079192704,
      0.0041173296,
      0.004506023,
      -0.012541522,
      -0.009860468,
      0.010769887,
      0.0025262348,
      -0.036829997,
      0.019367281,
      0.030439148,
      0.023145102,
      -0.005011192,
      -0.013655754,
      -0.0031465443,
      -0.032301027,
      -0.0028375417,
      -0.015517899,
      -0.025299402,
      -0.011206586,
      0.00059586857,
      -0.013775495,
      0.010596832,
      0.0009981063,
      -0.0008615178,
      0.025679136,
      0.022735618,
      0.016096545,
      -0.0065369746,
      0.01815172,
      -0.00077957223,
      0.019173585,
      0.012617362,
      0.014036133,
      -0.019368507,
      -0.003852001,
      0.012834109,
      0.002385294,
      -0.01911145,
      0.017476542,
      0.0034811862,
      0.009580866,
      -0.020872796,
      -0.0024167348,
      -0.004399373,
      0.0024404312,
      0.0020075084,
      -0.005053347,
      0.0065293815,
      -0.00031471663,
      0.005362467,
      -0.015831523,
      -0.021930685,
      -0.021241087,
      -0.0039078207,
      0.011263046,
      0.007855608,
      0.008443656,
      -0.020474441,
      0.008688019,
      0.00092387956,
      0.023402497,
      -0.010841143,
      0.0011259079,
      -0.0128637245,
      -0.0037570642,
      0.013536906,
      -0.023456134,
      -0.0041221175,
      -0.0016122556,
      -0.00038702998,
      -0.0035780761,
      -0.023013093,
      0.006234949,
      0.009424841,
      -0.021198547,
      -0.0139199495,
      -0.021833217,
      0.0007191474,
      0.015804803,
      -0.024729438,
      -0.018905422,
      0.012631064,
      0.013693571,
      -0.000054430046,
      0.016940882,
      0.019588426,
      -0.0015779574,
      -0.011849458,
      0.010548248,
      0.01263487,
      -0.011005185,
      0.01622233,
      0.00022075823,
      0.009312648,
      0.014750272,
      0.000036317484,
      0.020832215,
      -0.007086379,
      -0.014278654,
      -0.0076903724,
      0.023372343,
      -0.0107947895,
      0.0012977656,
      -0.023756804,
      -0.011395816,
      0.01902896,
      0.03142171,
      0.00039601524,
      -0.0026988932,
      -0.015460174,
      -0.005291733,
      -0.020076908,
      -0.007991708,
      0.018377112,
      -0.12146933,
      -0.0054349015,
      -0.00044574207,
      0.00027116752,
      0.012062111,
      -0.014648516,
      -0.010507923,
      -0.024387961,
      -0.014456546,
      -0.02946161,
      0.034201812,
      0.00840203,
      0.0072864713,
      0.022139117,
      -0.00004316901,
      -0.010051912,
      0.02817249,
      0.025892135,
      0.018235968,
      -0.019222548,
      -0.013730743,
      0.015718281,
      -0.010696271,
      0.00031727154,
      -0.026407802,
      -0.015285392,
      0.0011130186,
      -0.004699709,
      -0.013687234,
      0.0049259104,
      -0.045000106,
      -0.019822001,
      -0.008728964,
      0.026742758,
      0.017957868,
      -0.008861718,
      -0.03674392,
      0.018048061,
      0.0064525837,
      0.005529494,
      0.0015466651,
      0.005349308,
      0.010761433,
      0.010758057,
      0.004941142,
      0.015525545,
      0.047347363,
      -0.012758384,
      -0.0039765784,
      0.043079797,
      -0.04063975,
      -0.0004134113,
      -0.0017113887,
      -0.020147514,
      -0.0010021065,
      0.008446854,
      0.0059216376,
      -0.0027516037,
      -0.0033983546,
      -0.028749047,
      0.007689939,
      0.019085523,
      0.0049561206,
      0.03192501,
      0.003564127,
      0.0072054416,
      0.02882442,
      0.009052582,
      -0.0079711415,
      -0.016825592,
      0.003579596,
      0.012022528,
      0.0051361774,
      0.006239459,
      -0.00907946,
      -0.0070357737,
      -0.0046496484,
      -0.013657352,
      0.00748425,
      0.011698063,
      -0.020721767,
      -0.009839751,
      -0.06464294,
      -0.024462046,
      0.039124336,
      -0.013714289,
      0.0000103554885,
      0.009143419,
      -0.01403987,
      0.00048669195,
      0.013239003,
      -0.013755489,
      -0.029441984,
      0.0059853764,
      0.014478864,
      -0.008961477,
      -0.027554333,
      0.02045593,
      -0.017865757,
      -0.025060708,
      -0.02071324,
      0.0141096,
      -0.0030291502,
      0.00088653166,
      0.0008085491,
      -0.018911166,
      0.0030459478,
      0.017177004,
      0.0010445107,
      0.0004791779,
      0.0012136269,
      0.0053173327,
      0.0152789345,
      -0.15317932,
      -0.0064385063,
      0.005644315,
      0.0141250165,
      0.004067055,
      0.0082751205,
      -0.00043113614,
      -0.0033235338,
      0.0035615512,
      0.0014661418,
      0.01294966,
      -0.0037564326,
      -0.028994154,
      -0.0140058715,
      0.017099675,
      0.13701998,
      -0.0016930931,
      0.031030646,
      -0.03118745,
      0.0066517363,
      -0.0018396203,
      -0.026684804,
      -0.00448942,
      -0.0052367495,
      -0.018105777,
      -0.013848263,
      -0.01915125,
      -0.026331114,
      0.016660964,
      0.00050071254,
      0.016159894,
      -0.022127198,
      0.020809103,
      0.01905365,
      -0.0049161455,
      -0.004837298,
      0.0024940053,
      0.005615502,
      -0.012528922,
      0.0049723317,
      0.013532354,
      0.019640101,
      -0.007406888,
      0.000054410342,
      0.006064815,
      -0.00009080418,
      -0.014410455,
      -0.027437277,
      -0.011602534,
      0.006677919,
      0.003023529,
      -0.03358779,
      -0.0024216552,
      -0.004115535,
      -0.008279644,
      -0.0034915751,
      -0.0037865941,
      0.008734903,
      -0.000020152913,
      -0.0009433757,
      0.010231714,
      -0.023083258,
      0.005013813,
      -0.006028309,
      0.016666811,
      -0.0140236905,
      0.030472303,
      0.0039535905,
      0.0056574,
      -0.004310875,
      0.021361785,
      0.010953381,
      -0.015482521,
      0.008453379,
      0.00052074355,
      -0.0073565682,
      -0.019404648,
      0.023881765,
      0.01329953,
      -0.007470717,
      0.0053074863,
      -0.006042596,
      0.0026907306,
      -0.008077999,
      0.022432359,
      0.012410364,
      -0.023693794,
      0.02765634,
      0.0026843334,
      0.005728478,
      0.01763641,
      0.0131663075,
      -0.024478814,
      -0.0060764486,
      -0.024901044,
      0.01489542,
      -0.0054120757,
      0.002077366,
      0.033440363,
      -0.012495186,
      -0.013751542,
      -0.011943885,
      -0.029408712,
      -0.029638702,
      0.0018589018,
      -0.0051213023,
      0.0033015488,
      0.010647509,
      0.004943711,
      0.014902113
    ]
  },
  {
    "id": "genai_cohort_python_04_tuples_and_membership_testing__vtt",
    "content": "Hey there everyone. Hitesh here and welcome to the core Python training that we are going through. In case you haven't yet, posted a review. Please do that. We really need that. A lot of people, sometimes try to push us down and your kind words in the, in the review section really help us in motivating and putting more content as well. Anyways, let's go ahead and get started with the next topic in the Python, which is tuples. Now there are a lot of ways, how you say it out, some call it as tuples, which is also good. Some, some say as tuples, which is also good. And I still haven't made my mind what to call them. I usually sometimes call them as tuples, but again, don't judge me based on that. We will just study and learn about them. It is actually a really fun topic. You're going to absolutely enjoy this. And these are used quite a lot. Let me take you on the screen itself and this, is where we are going to go with that. So for this let's go ahead and create a new file in itself. This is going to be chapter, seven, I guess. Yep, pretty accurate there. All right, so let me bring your focus entirely on the screen itself. Hope that's great. Now let's go ahead and study about the tuples. What are tuples? So just like we have been going through with a lot of data types, like string was one of them, so now we have another one of the data type which is tuples. Tuples. There we go. That's how we say it. Now tuples comes with this kind of a thing, known as parenthesis. And yes, in the world of programming, brackets have their own importance. This is known as parenthesis. We do have another one which we call them as brackets. Yes, these square ones. And we have another one which is known as curly braces or braces in general. So yes, they have their own names, parentheses, brackets and braces. Anyways, we are not here to talk about that. This is tuple. So anytime somebody says tuple, that means we have to use these parentheses. And they have really strange way of working with them. They're very interesting. They are immutable. Yep. They cannot be changed. That's the only thing you need to know about it. All right, so let's just say we are going to call this one as masala spices, Quite spicy. And whenever you want to define tuples, just go ahead and use parenthesis and I'll shut up my AI agent so that we can Talk about the code. Not that. Let's just say we want to have some spices. So, cardamom is going to be one of them. Then probably some of the spices, name even you don't know that is also fine. We will use clove and we will use, cinnamon. So these are my fixed ingredients, immutable. They cannot be changed ever. Now, sometimes you want to unpack them, so this is how you create them. But sometimes there is an object which is already being created and now you want to extract values out of it. So, for example, all of my values are in masala spices. Now I want to add them into variables. Spice one, spice two, spice three. How do we do that? That's actually very interesting and an easy syntax. You can just use tuples again. And this time I'm going to call this one as spice one, and then spice two and then spice three. The only thing I have to be careful is that I should know that what kind of and what amount of values are coming in, I should know the number. So. So that I can allocate a variable for each one of them. And then all I have to do is simply say print and let's just say go for like this. And we are going to call this one as main masala spices. And then I can just use variables. So I can just call this one as spice one. And then separated by comma, we will have spice two. Of course, separated by comma, we will have the spice three. And that's it. Now we can run this file, clean this up, and I can call my Python interpreter that, hey, Python 3, I want to run a file, chapter And there we go, we got all the values being extracted, or as we call them, as we call them, as unpacking in the world of this. Now, this is Tuple actually gives you a lot of superpower in the Python, especially superpower like this, for example. Let's just say we have some special ratios. We are making a good T. So we have ginger ratio. Ratio, as well as we have, cardamom. Cardamom. Yep, that's correct. Cardamom ratio. And we are calling this ratio as two is to one. So this is my ratio and I call this as two is to one. So yes, you can actually directly have the variables. So these are two variables. And separated by comma, I am able to allocate these variables. So two will automatically go to ginger, one will automatically go to cardamom. And I'm able to do this because behind the scene, this Tuple is responsible for this, yes, I do agree. We are not writing it in this format. We are writing it directly. But behind the scene, Python gives me this ability is all in all because of the tuples. So just remember that. And yes, we can actually go ahead and use that. There is another interesting part of it. First, let me go ahead and print, a string here. There we go. And we're going to call this one as ratio is for the G for ginger. I hope you understand. I'll write this in short, ginger. And we're going to use G is in this ratio, and C for cardamom is going to be in the ratio of cardamom ratio. So we can see that we have all these ratios being nicely available to us. I can print this out. No worries. I will do that. But what's really interesting now is that I can actually flip the ratio. I can just go ahead and call this hey, ginger ratio and the cardamom ratio. The value of them can be switched as well. So first of all, I'll just say cardamom ratio as well as now the ginger ratio. So the values, Python is really smart that will automatically put the cardamom ratio's value into, ginger, and the ginger ratio will go into the cardamom ratio. This is one unique behavior of Python that you can swap the variables just like that. Pretty interesting. And now if I check the ratio after this, obviously the ratio will be flipped, but I'll still run the program and we'll show you what's happening. So we can see, previously the ginger ratio was two is to one, ginger to cardamom, and now we have ginger to cardamom ratio as is to Pretty interesting, isn't it? This is one of the really neat trick that is being used quite a lot. You will see this a lot. That variable swiping doesn't need a third variable. We can just do it like that. Told you. Python is a language which makes life lot easier. Now, one more thing that I would love to show you is membership. Yes, you can test the membership just like you test the membership, in a club. Just like this, we can actually do print and I can say is, we have to make it exactly same in the tuple. So I'm calling this a, ginger ratio. I have to call it exactly like ginger ratio. So here it's not really good. This is a better tuple. So let's go ahead and check this. So we would love to first check whether ginger is in masala spices. So let's go ahead and do that. So we'll say that is ginger. Ginger is ginger in. Come on, masala spices. And then I can just use my variable and then I have to mention exactly what I'm asking for. And this needs to be all case sensitive and stuff. So I'll go ahead and say ginger just like this in and then name of this. So masala spices again, let me just expand this. So remember, this is the variable I'm testing for. It's not a variable on to say it can be a variable. But this is my string that I'm checking whether it is available in masala spices or not. So I'll just open up this and show you what's going on. And that's the beauty about it when I don't show up myself on the screen that you can see and totally focus on this. So, right now it's false, obviously, because it doesn't exist. Now let's just say if I check for cinnamon, is cinnamon available here? So let's just check for cinnamon. We'll ask the question for cinnamon as well. And if I run the program again, this is true. Now what happens if I go ahead and check for a cinnamon with a capital C? If I try this, it is false. So just wanted to show you that yes, this is investigative study, that it is case sensitive. You need to ask that what you are looking for in the tuple as availability. This is known as a membership testing or membership test, whatever you want to call it. This whole thing is dependent on this keyword which is in. In works with the tuple. And that is it. That is all that I wanted to teach you about the tuple. Eventually you will learn more about it as you will use it.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 tuples and membership testing_.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/04 tuples and membership testing_.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.020783449,
      -0.0088520665,
      0.0064004045,
      -0.060216676,
      -0.011853867,
      -0.0017009167,
      0.017976588,
      0.029062878,
      0.011185141,
      0.004376982,
      -0.026389329,
      -0.00038086367,
      0.008950079,
      0.016154336,
      0.10744525,
      -0.006205886,
      -0.018903488,
      -0.021430947,
      -0.0052607143,
      -0.00897864,
      -0.006998872,
      0.013225553,
      -0.009262935,
      -0.0086181,
      0.013838899,
      0.00050691963,
      0.0041024983,
      -0.011354136,
      0.02188685,
      -0.019617666,
      -0.01732304,
      0.009364795,
      0.0016008698,
      0.034392558,
      0.009073238,
      0.0039212364,
      0.0045516104,
      -0.0016901316,
      -0.025503691,
      0.011361473,
      -0.010828996,
      0.0035728358,
      0.002300504,
      -0.009495979,
      0.018628748,
      -0.03745035,
      0.00982913,
      -0.009436743,
      -0.0011803681,
      0.022100538,
      0.009275006,
      -0.017174236,
      0.004212258,
      -0.18555975,
      0.015972402,
      0.0062656202,
      -0.0024915503,
      0.00646385,
      0.014314658,
      0.00998934,
      -0.029971834,
      0.00157397,
      -0.030541597,
      -0.009840526,
      0.0059966054,
      -0.030585438,
      0.005482351,
      0.010361111,
      0.005096538,
      0.008061754,
      0.03528033,
      0.017125236,
      -0.015638908,
      -0.03168207,
      -0.028091906,
      -0.016803354,
      0.0031326774,
      -0.0107519,
      -0.018675566,
      0.01236446,
      0.013415006,
      -0.027153192,
      -0.017180031,
      -0.0029826849,
      0.0072875083,
      0.004152833,
      -0.0068771816,
      -0.0052286433,
      -0.0025734243,
      -0.006098316,
      -0.031243935,
      0.015915701,
      0.003696578,
      0.0046299705,
      0.0046462547,
      0.011076442,
      -0.016136764,
      -0.0031209341,
      -0.02616097,
      -0.007712952,
      0.008866673,
      -0.009473662,
      -0.014621615,
      -0.012052817,
      -0.005314474,
      -0.0030109878,
      -0.001614244,
      -0.017510321,
      -0.015793886,
      0.0067368136,
      0.004444481,
      0.0006496068,
      0.016320439,
      0.015271083,
      -0.0019884983,
      -0.17363636,
      0.0018226648,
      0.0044314684,
      -0.041465703,
      0.006188408,
      -0.005156897,
      0.00031510965,
      -0.0025447863,
      -0.004970146,
      -0.02882982,
      0.02318778,
      0.0028862746,
      0.022114715,
      -0.0015566973,
      -0.008105745,
      -0.022985667,
      -0.011122592,
      0.0075464263,
      0.022913666,
      -0.024456104,
      0.03320694,
      -0.009074882,
      0.008924384,
      -0.04936625,
      0.004614142,
      0.014113131,
      0.023915797,
      -0.010096683,
      0.030417876,
      0.0076640476,
      -0.0030267981,
      -0.008554731,
      0.015738126,
      -0.029545456,
      -0.034300894,
      -0.00237394,
      0.0019438533,
      -0.00847715,
      -0.012136966,
      0.02178545,
      -0.018986916,
      0.00924923,
      -0.0012436542,
      -0.014959054,
      0.018784886,
      -0.014743271,
      0.0008577148,
      0.011149468,
      -0.0039879023,
      -0.013399226,
      0.0007587314,
      -0.02962657,
      -0.0021725404,
      0.054855887,
      -0.0009372931,
      0.0034757867,
      -0.0014264823,
      0.0020080036,
      -0.01568175,
      -0.01760326,
      -0.007740291,
      0.004568714,
      -0.00398312,
      0.0047179447,
      -0.0018364327,
      -0.0033265073,
      -0.00998058,
      0.016939126,
      0.0020223325,
      0.025869332,
      -0.008457234,
      -0.0031274704,
      0.016196908,
      -0.0021150769,
      -0.008204825,
      0.0014480632,
      -0.004202273,
      0.019937687,
      -0.0007139503,
      -0.012724391,
      -0.0010715954,
      -0.0012174823,
      0.000071311544,
      -0.011896247,
      0.023094567,
      0.03122347,
      -0.0008354901,
      -0.0027345996,
      -0.016129246,
      0.0365321,
      -0.011770541,
      0.006581762,
      -0.03815772,
      0.014341043,
      0.0101279635,
      -0.013354338,
      0.00027072176,
      0.005813169,
      -0.01267541,
      0.016132273,
      0.009264907,
      0.033119787,
      -0.011905045,
      0.005803264,
      0.00370718,
      -0.007268251,
      -0.0069764093,
      0.007149418,
      0.038225587,
      0.009420107,
      -0.017629733,
      -0.0019070528,
      -0.0020579891,
      0.009214928,
      -0.00011960512,
      0.01083788,
      -0.008362369,
      -0.011696646,
      -0.0061690803,
      0.01727931,
      -0.0085657835,
      -0.0066916035,
      0.015045765,
      -0.0060242973,
      -0.00047509698,
      0.023474187,
      0.0072673075,
      0.002560035,
      0.0041764304,
      0.026910033,
      -0.0036503726,
      0.00031461942,
      0.004926644,
      -0.0020479495,
      -0.0021044866,
      -0.026564082,
      -0.019077677,
      0.0122409165,
      -0.013768506,
      0.002814213,
      -0.0015459362,
      -0.04226243,
      -0.0072504873,
      0.0038934818,
      0.007014242,
      -0.00836495,
      -0.014681438,
      -0.00797157,
      -0.0044851354,
      0.006767851,
      -0.005828133,
      0.01617462,
      0.025283061,
      -0.00538083,
      0.008111428,
      0.01920953,
      0.018203568,
      0.030507827,
      -0.0025317841,
      -0.0056141806,
      0.003515666,
      -0.09683535,
      0.01764709,
      -0.0043051667,
      -0.006392198,
      0.012443617,
      0.021320097,
      -0.019593915,
      0.037186086,
      -0.0008133117,
      0.012630007,
      0.022872193,
      -0.011168594,
      0.0305808,
      -0.023939895,
      -0.00110021,
      -0.004531738,
      -0.004339633,
      -0.028268205,
      0.024832798,
      0.006093239,
      -0.000500011,
      0.0024301899,
      0.0069284,
      -0.007016369,
      0.01021677,
      -0.022587257,
      -0.011075533,
      0.041164145,
      0.012909302,
      -0.006962859,
      -0.0011797977,
      0.027167765,
      -0.009911339,
      -0.022268252,
      0.012678269,
      -0.022083275,
      0.008072748,
      -0.0108543625,
      -0.008432684,
      -0.011746825,
      0.016317299,
      -0.004222724,
      0.027255408,
      0.0386721,
      0.00993213,
      0.00030336052,
      0.0060739717,
      -0.0016349469,
      -0.0027530852,
      -0.0052084383,
      -0.012099991,
      0.0029581827,
      0.002873994,
      -0.0095507465,
      0.029189156,
      0.018561436,
      -0.0060751876,
      -0.016325675,
      0.013375972,
      0.015935391,
      -0.009248452,
      0.0043670395,
      0.015637953,
      -0.03190445,
      -0.0074031707,
      -0.0250085,
      0.017982906,
      -0.011938019,
      -0.0020115052,
      0.005262956,
      -0.00896413,
      0.0060778875,
      -0.016768025,
      0.011630134,
      0.008251557,
      0.0028160335,
      0.010319644,
      -0.014670017,
      -0.008995387,
      0.033364087,
      0.012676527,
      -0.002982068,
      0.0054123234,
      0.006842016,
      -0.010992909,
      0.019762296,
      -0.0102326395,
      -0.016023962,
      0.012796987,
      -0.03980261,
      0.004331832,
      0.0026954382,
      -0.025569795,
      0.004217329,
      -0.020934224,
      -0.0025221896,
      -0.014068151,
      -0.018754654,
      -0.012720956,
      0.0034664795,
      -0.016804107,
      -0.00019209432,
      -0.028517488,
      -0.0017020503,
      0.010673443,
      0.0064300033,
      -0.01398606,
      -0.004433292,
      -0.0017720911,
      -0.022552013,
      0.00057920313,
      0.0062507764,
      -0.017801197,
      0.0022315425,
      -0.017134165,
      0.031185178,
      -0.012163277,
      0.0071533644,
      0.0075685605,
      -0.041210003,
      0.0076664793,
      -0.002272345,
      0.02492957,
      0.0025188108,
      -0.016532961,
      -0.004122889,
      -0.017611394,
      -0.004719886,
      0.005267759,
      -0.010537965,
      -0.01856896,
      0.0118528735,
      -0.027555333,
      -0.011754635,
      -0.021741804,
      -0.006654408,
      0.029124282,
      0.027368682,
      0.013634465,
      0.0040312596,
      -0.0069145043,
      0.0027268683,
      0.014240594,
      0.014600383,
      -0.01861541,
      0.030462667,
      0.015810126,
      -0.0012770739,
      -0.006799441,
      -0.032463428,
      -0.020022208,
      -0.025809124,
      -0.008601185,
      -0.0014924947,
      -0.0021343592,
      -0.004255811,
      -0.00020443281,
      0.0007145658,
      -0.019769764,
      -0.011662731,
      0.001735787,
      0.014192914,
      -0.00068367255,
      -0.0019482636,
      0.023975702,
      0.013767858,
      -0.004989154,
      -0.0059113014,
      0.0030880594,
      -0.021378163,
      -0.0123317735,
      -0.015696786,
      -0.031577587,
      -0.0051478525,
      0.010917271,
      -0.009137014,
      0.006305866,
      0.0032574465,
      -0.0025678626,
      0.02450371,
      0.026544135,
      0.006306749,
      -0.019426838,
      0.0069775083,
      -0.0034861087,
      0.0058733854,
      0.0109853055,
      0.0057522305,
      -0.012815889,
      -0.009075304,
      0.025348965,
      0.0055342773,
      -0.0019077745,
      0.013412144,
      0.009113351,
      0.010664681,
      -0.019081432,
      0.0027340457,
      0.011078366,
      0.01147389,
      -0.006067828,
      -0.009460287,
      0.006014589,
      -0.0032181796,
      -0.011427902,
      -0.015611268,
      -0.006335081,
      -0.023472724,
      0.015347832,
      0.0064033032,
      0.0076497765,
      0.024622718,
      -0.00798867,
      0.008394178,
      0.0036043716,
      0.040434696,
      0.0001455822,
      -0.0010716819,
      -0.030180987,
      -0.003258605,
      0.0066088024,
      -0.002867666,
      0.0048635867,
      -0.011177959,
      -0.0011205839,
      -0.0072600474,
      -0.008747443,
      0.0021526027,
      0.0066260067,
      -0.0017301625,
      -0.011190486,
      0.006909718,
      -0.0068789097,
      0.0052900882,
      -0.023371253,
      -0.017534459,
      0.012698569,
      0.013411174,
      -0.015990013,
      0.010179907,
      0.0020979827,
      -0.012404719,
      -0.0011591893,
      -0.009252362,
      0.004585208,
      -0.010468006,
      0.02066994,
      0.00039303192,
      0.00136265,
      -0.008179257,
      0.016733697,
      0.008177817,
      -0.011605753,
      0.002866576,
      -0.01666651,
      0.014301022,
      -0.022894416,
      -0.014561279,
      -0.00036932377,
      -0.013398159,
      0.0010261546,
      0.01235485,
      0.0002328577,
      0.02006815,
      0.0020877859,
      -0.023349173,
      -0.012518265,
      0.010324957,
      0.022512494,
      -0.13082916,
      -0.02087746,
      0.011382555,
      0.0066040745,
      0.0055546933,
      0.000982144,
      -0.021620348,
      -0.034274258,
      -0.006332435,
      0.0008165038,
      0.021462224,
      0.0016833688,
      -0.0054561845,
      -0.007376579,
      0.0016197856,
      -0.018695656,
      0.033385817,
      0.006123417,
      0.017116163,
      -0.0033884295,
      -0.013215526,
      0.0017858564,
      -0.00960459,
      0.011939399,
      -0.03597334,
      -0.011137518,
      0.0024446647,
      -0.0059645106,
      0.0017890743,
      -0.026280992,
      -0.027188722,
      -0.008263617,
      0.0045939786,
      0.0032239482,
      0.010083337,
      0.003721852,
      -0.023295315,
      0.014731032,
      0.010900751,
      -0.008590765,
      0.0010759654,
      -0.0019685936,
      0.008081871,
      0.011770474,
      0.012466326,
      0.024237158,
      0.06147279,
      -0.028783835,
      -0.020942103,
      0.03717459,
      -0.0319464,
      -0.0023685629,
      0.007937625,
      -0.013187526,
      -0.014127648,
      -0.0007392018,
      0.008372811,
      -0.0040868167,
      -0.0066175307,
      -0.015438285,
      -0.0067172847,
      -0.0047738897,
      0.012170314,
      0.03902138,
      0.008837797,
      0.017961238,
      0.030321708,
      0.006225398,
      -0.010080942,
      0.004276325,
      0.0028477127,
      0.018661546,
      -0.00018899103,
      0.039055202,
      -0.007856166,
      0.0034357195,
      -0.001696121,
      -0.009403007,
      0.011570835,
      0.0018572747,
      -0.019682433,
      -0.0115727605,
      -0.056737386,
      -0.033642896,
      0.027524546,
      -0.008779588,
      0.008980562,
      0.035140358,
      -0.021049712,
      -0.0054992945,
      -0.0068938,
      -0.014267573,
      -0.026581632,
      -0.009856935,
      -0.0036046226,
      0.008216884,
      -0.023737108,
      -0.00021725097,
      0.02232573,
      -0.013853984,
      -0.021845916,
      -0.01868377,
      -0.008463714,
      0.0040829405,
      -0.0120449895,
      -0.025862517,
      0.0070662554,
      0.029597046,
      -0.0025312689,
      -0.01664316,
      0.0018989422,
      -0.0031234846,
      0.0163748,
      -0.15216246,
      -0.020061713,
      0.0064946306,
      0.004174529,
      0.007904806,
      -0.011289127,
      0.010458946,
      -0.011195882,
      0.019903287,
      0.0006484577,
      0.0010808586,
      -0.013975265,
      -0.018928085,
      -0.006179131,
      0.015120867,
      0.14692944,
      -0.011687256,
      0.0010726294,
      -0.04539939,
      -0.004774327,
      -0.011553023,
      -0.041722577,
      -0.027047493,
      0.0032531582,
      -0.012134282,
      -0.0026608692,
      0.0016407726,
      -0.0037438662,
      0.0017594,
      -0.0030202034,
      -0.0029692985,
      -0.008765192,
      0.013631532,
      0.030456508,
      -0.0057234527,
      0.009974274,
      -0.016814541,
      0.0002472718,
      -0.006238566,
      0.00034521188,
      0.027255526,
      -0.0037299106,
      -0.0087222755,
      0.0054477383,
      0.0014642782,
      0.0033327471,
      -0.019204732,
      -0.0073004565,
      -0.018907307,
      -0.0016976966,
      -0.01259171,
      -0.053968202,
      0.015173541,
      -0.00096561346,
      0.0058348104,
      0.0055926614,
      0.004029999,
      0.0003511008,
      0.009340707,
      0.012213447,
      -0.02068703,
      0.009974745,
      0.00030897395,
      0.010819414,
      0.004925302,
      -0.010704096,
      0.052423127,
      0.0038032825,
      0.015235381,
      -0.00017576029,
      0.025715373,
      0.011792867,
      -0.012522741,
      0.00008963534,
      -0.013186204,
      0.0034621567,
      -0.02918938,
      0.004607744,
      0.013620157,
      -0.011275828,
      0.004731997,
      -0.008151052,
      0.005572958,
      -0.007491735,
      0.0072267707,
      0.0016605275,
      -0.010600461,
      0.0072691226,
      -0.0002377743,
      -0.0043090866,
      -0.011684613,
      -0.0036264907,
      -0.010102842,
      0.00075616833,
      -0.015855499,
      0.016161576,
      0.0062304866,
      -0.020740535,
      0.027196942,
      0.0058458922,
      -0.000009569742,
      -0.0071979384,
      -0.0027553425,
      -0.033650294,
      -0.00080745947,
      0.0012187602,
      0.0019017007,
      0.00897837,
      -0.0038209076,
      -0.004110089
    ]
  },
  {
    "id": "genai_cohort_python_05_Basics_of_list_in_python_vtt",
    "content": "Hey there, Hitesh here and welcome to another video of Python learning. Now, this video, or from this video onwards we start another section. I know the video is still in the section of the Udemy, but so far what we have studied are immutable sections. That means they cannot be changed once the memory reference is done, that is means it's done, it cannot be changed. Yes, you can create the fresh one and have a reference of it, just like number two is being changed to number three. Surely that can be done. But the whole goal is once a memory reference is done, it cannot be changed. It gets a unique id. That unique ID never changes that. Now there are other type of things as well, data types which are known as mutable, they can be changed and that's exactly what we're going to study from here onwards. There are not much of them, but yes, a lot more methods exist of them, a lot more functionality exist on them because they can be changed. So there can be append method, there can be insert method. A lot of them exist just because they are mutable. That's what we are going to study and I highly request you that please do review us. We want to make it world's best Python course. We are working really hard on it and your support will help us to make that. Let's go onto the screen and discuss about this. So let's talk about them. So there are mutables and there are immutables as well. We are going to the mutable or journey now first let's write that. That would be super fun to write actually. So this one that you have is mutable. There we go. So the first sequence that we're going to study in the mutable data type is going to be list. Now list has variety of name. I'll call this some, list but you will find as an alternate name or the neighbor cousin in another language known as array. We don't call it as an array in the world of Python we call it as list but treatment. The defining way the data structure is exactly same, there is no difference between the list and the array and we can actually mix and match things into it. And that's it, that is it. We can reorder them, change them because they are mutable. I think let's go ahead and talk about them. I think rest can be discussed on the code editor, which is better. All right, so let's close all of this and another chapter in the data type. Look at this, how many chapters we are going for. Too many. Chapter Py. There we go. So what is this list? Let's just say I want to call ingredients. I sometimes have a tough time in spelling it out. Hopefully I did a correct job. Ingredients shouldn't have used that. But anyways we have to because that's the ingredients of making a good T. Let's just say we have water and what do we have? Milk. I don't prefer milk in my T. But still I will consider this. And let's just say we have a black T as well. These are my ingredients. Now let's just say this is what we have defined. That is it. That's what we want to have. And I'll focus up here. Now let's just say you forgot to add sugar. So what we are going to do if it would be tuple, I had no choice. I had to come up here and add it here because once it is defined, I cannot change it throughout the lifecycle of a program. But in the world of mutable sequences and mutable data types, that's not the case. I can just go ahead and say hey, ingredients, I want to add one more thing. That means I want to append it. Append will add it at the very end of it. What do you want to append? I want to add sugar, or append sugar into this one. That is it. And let's just say let's print it first because I think that would be fun. So printing a formatted string. And I would say ingredients are. And then we can use a variable here. There we go. So we are printing it up now. Not only just we can add things, we can remove the things as well. I don't know who would love to remove it, but let's just say I want to remove the water. So all I do is put up a dot and I can see all the method that are available here for me to use in this list or in the sequence. So append, clear, count, extend, index. Now obviously nobody can teach you all this because the better way to learn about them is via implementation. But again most of them make sense. Like we have count, it is going to count how many elements are there. Similarly we have one known as remove. So this is what we want to use and just mention what do you want to remove. So I want to remove water from this one. If it will be available, it will be removed no matter what the position is. So let's just say we are saying, we have the boiling water, we don't need this so we can just work like this. And I will just like to print this. Let's see what happened. All right, so this time, this is chapter eight. We run this and we can see that we have water, milk, black T and sugar is being added. Because we have printed this after adding the sugar and then we are printing this one. So again, doesn't really matter if it is at the very start end. It will just find it and will remove it. There are a lot of methods available in the world of list. Let's try some of them. I think the best way is to learn them on the go. But let's just say we want to have some practice on this. I will say I have ginger. I usually go first for the ginger, always. And then we have, cardamom. Hopefully I wrote it correct. Yeah, looks good. So let's just say we want to have another ingredients for chai. So these are my spice options, and these are my chai ingredients. And, the chai ingredients are water and milk. That's it. Water and we got milk. There we go. Now, first of all, what we want to do is we want to add spice to our chai. So how I can do that, the easiest way is chai ingredients can actually extend to an existing list just by this. And I can say spice options. Pretty easy. What's the output? Yeah, that's a good question. So I would love to just directly print it without any formality. I will just say, chai and I will say chai ingredients. Let's go ahead and print it out. There we go. And as you can see, we have chai and we have water, milk, ginger. So all of this is combined. This is one of the common way that you might want to combine two of the list and stuff like that. There is another interesting stuff. As you can see right now we have, this is known as 0th position. So on the 0th position we have water, then we have milk. So let me just copy this and bring it onto our board. So there we go. So this is whole how a list looks like. And always remember that you have the position first. So who is at position? Always remember that water is at position. Come on. Can you point this? Yeah, there we go. And then similar to this, we have position number one and one position is milk. Super easy. Not too tough. So let's just say on a certain specific position, you want to add something and you know the position where it's going to be. It's super easy. I Can just go ahead and call the chai ingredients and use the method insert appends always adds it at the very end of it. But insert. You have to provide what position you want to add. This position is known as index. You're going to see this index quite a lot. So let's just say my index or my position is number two. And I want to add something like black T here. Black T, where it will go ahead and add it. So since this is my zero position, this is my one position. And I know that ginger is at position number two. And I have asked something to add in the position of the two. So obviously these things will move towards the right. Let's see if we are actually correct or not. Let's go ahead and use this quick keyboard shortcuts always help. So we can see that we have the water, milk and black T is at position number two now. And obviously the ginger and cardamom got shifted. So this is what happens when we go ahead and work like this. So I'll just copy this for you to compare. And I think I should add it up here. And there we go. So we still have the water and milk. So water is still at a position zero. Milk is still at a position one. But this time the position two is for black T. And there we go. So this is how the basics of it, how it works. And in the world of list there are some more details just like this. Usually this is the important part. But yes, there are other stuff that exists and I would love to show you. So let me show you some of the more methods that you can use in the list. And let's carry that on. Okay, we have inserted the list. Let me show you that how we can remove something. Yeah. From a particular position that would be good to have. So I would say that, let's pop something. So let's just say last added. This is the value. And I will use chai ingredients and I can use a method pop. Now what this pop actually does whatever is the last element we have. So in this case we have this cardamom. It will remove it from the list as well as it will give it to you back so that you can actually use it into a variable and just use it wherever you like, but it's emptied out from the list itself. Let me go ahead and show you what we have in the last added so that you can see it. And there we go. Let's run this. And what we see is cardamom. So cardamom is now removed from the list. If I just go ahead and print this list again at the very end of it, I know there's a lot of printing that is. Oops. There's a lot of printing that is going on. But that's okay. So we see that the cardamom is here, but cardamom is gone from the list itself. And that's the whole point of having the pop here. Now we have another thing which is pretty fun is I'll show you directly in the print statement. I think that is also possible and doable and it's actually fun. I can store that into a variable as well. But I can use directly a method known as reverse here. And again it's a method, it needs to execute immediately. Now if I try, obviously will reverse the list. Not like each word will be reversed, but whole list will be reversed. So didn't worked out well. So we have to actually it doesn't return you anything. That's why it's saying none here. Because it doesn't return anything in order to do. So I have to actually copy this and have to execute this because this is mutable. That means list do get changed. So I have to say chai ingredients reverse. So whatever the value is, we have reversed that. And now if I print this up, it has actually changed my list entirely. Let's run this again so we can see. Previously it was water, milk, black T and ginger. Now we have ginger, black T, milk and water. So each position is being reversed. Pretty nice. Pretty interesting. Okay, we can also do some kind of a sorting as well. And for sorting as well I have to use the same method. Oops. And I have to say that I want to sort. That's it. And now we can actually print this again. So notice here we have reversed it. Now we are sorting it. And again these are very interesting examples. And again they take little bit time to digest, but that's okay. So we have B as a black T, then we have G as a ginger, then Then W for water. Pretty interesting. Pretty nice. Pretty going good. So pretty interesting stuff. But what I say is this method doesn't make sense as of now too much that hey, why would I reverse this? Why would I sort this? If I had to reverse, I would have written this in that order. But yes, there are some points, there are some times like when you see the buttons which says sort the items from price low to high or low to high, when you actually make real world application, they're much easier to connect with. So I say Just remember them. Don't sweat it out too much. That is totally okay. Now let me show you one. Another interesting example. Let's just say we have a variable that calls as, sugar levels. Each T shop should have sugar levels. So we have 1, 2, 3, 4, I don't know who drinks that much of sugar, but maybe, maybe there are people. So I'll just go ahead and print the stuff like this. I'll format this and what I can use is I can find out what is the maximum out of it. So maximum sugar level. And again, as I say, you might be thinking, hey, I know already what the maximum sugar level is. It's five. But sometimes in the program you are not aware of this array, this might be coming up from the database and you only want to show the maximum item with the highest pricing or something like that. So in that case you can actually go ahead and use the function known as max. Yes, this exists directly and you can pass the list to it. So for example, our list is sugar level. So this will give me whatever the maximum value of this is. Pretty easy, pretty fun to work with. So maximum sugar level is And just like this, we do have a minimum as well. So in case I want to find minimum and you guessed it right, just like this is max, we do have min. So yeah, no surprise there. We have the maximum sugar level. We have the minimum sugar level. Pretty easy, pretty fun to run. Now there is one couple of more things I want to discuss this. And again, I'm not in a hurry. That's why I say my lectures are little bit longer, but they are fun. Usually people prefer to break these lectures into two parts or three parts. I think we are also running a little bit higher on the time. So instead of this, let's go ahead and start this video right here and I will show you two more things and let's discuss them in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 Basics of list in python.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/05 Basics of list in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.021700239,
      -0.011310622,
      0.022657378,
      -0.062300775,
      -0.014988643,
      -0.00092371926,
      -0.0007397658,
      0.03504236,
      -0.009565459,
      0.00664408,
      -0.022674324,
      -0.009773486,
      0.015124219,
      0.017242316,
      0.12045851,
      -0.013804258,
      -0.010425352,
      -0.010346428,
      -0.009080121,
      -0.011070307,
      -0.0033769356,
      0.011336912,
      -0.012551404,
      0.0027663144,
      0.0007216052,
      -0.004289744,
      0.028512793,
      -0.00922714,
      0.026135307,
      -0.026360203,
      -0.0077747847,
      0.011661709,
      0.0040357695,
      0.010117177,
      0.0063705873,
      0.013416362,
      0.027320763,
      0.009775546,
      -0.016102703,
      0.013712963,
      0.0010047503,
      -0.0066985744,
      0.0029668172,
      -0.031467658,
      0.0073881573,
      -0.019681286,
      0.011705239,
      -0.026543017,
      0.001474525,
      0.019119458,
      0.0064442665,
      -0.014235332,
      0.0058173207,
      -0.1784587,
      0.021798873,
      0.0016140917,
      -0.006119798,
      -0.012408051,
      -0.0035596245,
      0.0035956965,
      -0.011846659,
      0.009706617,
      -0.013141002,
      0.0029712904,
      -0.009210425,
      -0.015726775,
      0.012606812,
      0.004161049,
      0.0008408532,
      -0.0025518548,
      0.012890868,
      0.0022851976,
      -0.007184818,
      -0.046781562,
      -0.006087875,
      -0.038762085,
      0.0071069687,
      -0.0110476995,
      -0.0063990145,
      0.028087776,
      -0.014448618,
      -0.0019547935,
      -0.014479114,
      0.0054504094,
      0.0064646597,
      0.0042623817,
      -0.028998433,
      0.003700553,
      -0.014992052,
      0.006546792,
      -0.012171486,
      0.007100193,
      -0.01426638,
      -0.00084878487,
      -0.015086507,
      0.005315018,
      -0.016958551,
      -0.0008712574,
      0.002856858,
      0.00435377,
      0.016285343,
      -0.011540763,
      -0.022322867,
      -0.015726127,
      0.00096540805,
      -0.0055578123,
      -0.016399268,
      -0.00897262,
      -0.002779835,
      -0.0010766145,
      0.01409845,
      0.005964442,
      0.022236506,
      0.014446356,
      0.0021139018,
      -0.1870333,
      0.023872433,
      0.019013582,
      -0.025968015,
      0.011453715,
      -0.015729498,
      0.01657146,
      -0.013160948,
      0.010086538,
      -0.023385162,
      0.0068482687,
      -0.011248683,
      0.024002561,
      0.0014233859,
      -0.0278546,
      -0.022415075,
      -0.019819526,
      -0.0016535077,
      0.015258613,
      -0.007024053,
      0.0018594912,
      -0.019686075,
      -0.0057642586,
      -0.036641937,
      -0.000016712602,
      0.0103203645,
      0.017190527,
      0.006625186,
      0.022053344,
      0.010614583,
      -0.002641218,
      -0.007986586,
      0.0069987564,
      -0.0159209,
      -0.016250322,
      0.012447997,
      0.009291354,
      -0.013054555,
      -0.0023387463,
      0.02739963,
      -0.012051873,
      0.008133913,
      0.0030301013,
      -0.014203918,
      0.001304399,
      -0.0064278077,
      0.0043453067,
      0.012540941,
      -0.0064810663,
      0.0032377888,
      -0.004642658,
      -0.03267157,
      0.014222835,
      0.040053647,
      0.019997597,
      0.001080388,
      -0.004829017,
      0.013938825,
      -0.005586657,
      -0.02110722,
      0.0034767925,
      0.0016821077,
      0.0076612937,
      0.013000281,
      -0.012735045,
      -0.0066701304,
      -0.0051217396,
      0.008468606,
      0.0247041,
      0.023654966,
      0.0077990335,
      -0.004992131,
      0.020308016,
      0.006258584,
      0.022241965,
      -0.013471666,
      -0.0037671987,
      0.018163124,
      0.007261203,
      0.0017473657,
      -0.010577036,
      -0.00028204257,
      -0.01140226,
      -0.0050072484,
      0.019335834,
      0.027026683,
      -0.0000882586,
      -0.020182503,
      -0.028780997,
      0.01915194,
      -0.009949108,
      0.015313942,
      -0.014440053,
      0.022207694,
      -0.004007132,
      -0.0055001397,
      0.010052708,
      0.0024190668,
      -0.014989925,
      0.026042202,
      -0.005980616,
      0.024850234,
      0.019492125,
      -0.015488281,
      -0.0038361198,
      -0.002599229,
      -0.019362288,
      0.009554869,
      0.014638346,
      0.013523106,
      0.008389234,
      0.0047242395,
      -0.005848662,
      0.018187122,
      0.011739444,
      0.029022561,
      0.0038999203,
      -0.01369646,
      -0.012366308,
      0.0008231155,
      -0.012082815,
      -0.009181444,
      0.01935733,
      0.010488781,
      0.0036596584,
      0.004981952,
      -0.0038168486,
      0.0024019314,
      0.009999984,
      0.028880548,
      -0.009202888,
      -0.0026480963,
      -0.011057906,
      -0.0008300964,
      -0.011698922,
      -0.0040073814,
      -0.01608429,
      -0.0024072859,
      -0.010895796,
      0.00833373,
      0.014116418,
      -0.026793413,
      -0.009739519,
      0.011425573,
      -0.014482003,
      -0.018773057,
      -0.006794328,
      -0.014975107,
      -0.008999704,
      0.021896433,
      -0.005950555,
      0.008919789,
      0.018685775,
      -0.014505876,
      0.018638145,
      0.015935412,
      0.006081698,
      0.00731739,
      0.008830126,
      -0.02533336,
      0.021457452,
      -0.105336405,
      0.021855485,
      0.012390875,
      -0.010822927,
      0.012673669,
      0.013274762,
      -0.016494147,
      0.034808498,
      0.0045468323,
      0.006170986,
      0.0067565357,
      -0.0030341053,
      0.021498393,
      -0.019347271,
      0.008970848,
      -0.0071480125,
      0.0032140259,
      -0.019978024,
      0.015514364,
      -0.010150643,
      0.015473681,
      -0.010135349,
      0.00455238,
      -0.018719733,
      0.008173092,
      0.0022348394,
      -0.012620291,
      0.02409685,
      0.020718554,
      0.0047995024,
      -0.0022290456,
      0.041336957,
      -0.00044200942,
      -0.008965509,
      -0.005404264,
      -0.00524534,
      -0.010512565,
      -0.006558947,
      -0.021788545,
      -0.005310451,
      0.016716365,
      -0.0157158,
      0.020526607,
      0.017218985,
      0.026798937,
      0.012191244,
      0.013975414,
      -0.003488291,
      0.0027672579,
      0.007972695,
      -0.005018851,
      0.0025830425,
      0.024648886,
      -0.0028173563,
      0.012642634,
      0.0028755816,
      -0.009867513,
      -0.02957107,
      0.016008748,
      0.008351146,
      -0.0074939174,
      0.00030918056,
      -0.0044920603,
      -0.019360792,
      0.012083385,
      -0.02318806,
      0.010921538,
      0.00031622557,
      0.012025559,
      -0.004696309,
      0.0061443625,
      -0.0024337978,
      -0.0068263984,
      0.004409001,
      -0.0026840623,
      0.004829999,
      0.016564943,
      0.000069503745,
      -0.00019164599,
      0.037464947,
      0.026074147,
      -0.009409868,
      0.0038109543,
      0.008669577,
      0.0014300134,
      0.008976173,
      0.0113982735,
      -0.0136204185,
      0.012932647,
      -0.02170676,
      -0.011224777,
      0.014797248,
      -0.028983563,
      0.004944067,
      -0.018235698,
      -0.00034744086,
      -0.010539686,
      -0.012490825,
      0.00034125836,
      0.01033779,
      0.0008403222,
      0.0014192145,
      -0.01830902,
      -0.016046612,
      0.0042996933,
      0.0023769995,
      -0.02526782,
      -0.0070259515,
      -0.006494609,
      -0.007844578,
      -0.0059137316,
      0.004695904,
      -0.011049629,
      -0.01183555,
      -0.009769686,
      0.024561962,
      0.00087297626,
      0.0010981736,
      0.010409808,
      -0.038257338,
      -0.005375346,
      -0.012861166,
      0.0071640084,
      0.011416001,
      -0.010550759,
      0.0076522324,
      -0.022580877,
      -0.0036799288,
      0.0008622605,
      -0.026995765,
      -0.010152944,
      0.010223183,
      -0.030658206,
      -0.0037702925,
      -0.0083598,
      -0.026747797,
      0.02034112,
      0.012530189,
      0.009251255,
      0.018122414,
      -0.031413876,
      -0.0016453093,
      0.00977503,
      0.009941881,
      -0.012261719,
      0.007957792,
      -0.0110812625,
      -0.010701285,
      0.0049249176,
      -0.033612072,
      -0.0037443836,
      -0.011414073,
      -0.013955431,
      -0.018515786,
      -0.008295386,
      0.0022988345,
      0.0004959815,
      -0.019610897,
      -0.017093321,
      -0.011636964,
      0.0042482014,
      0.0053885155,
      -0.022365188,
      -0.006005954,
      0.0358299,
      -0.00013848029,
      -0.0017813082,
      0.0063527725,
      0.003348427,
      -0.0055063837,
      -0.010920155,
      -0.0053919223,
      -0.046319403,
      -0.029848153,
      0.019137906,
      -0.003777831,
      0.008891958,
      -0.009341549,
      -0.0007488433,
      0.027224721,
      0.016995715,
      -0.00058120384,
      -0.031116301,
      0.012354885,
      -0.0014356093,
      -0.0019077854,
      0.016911829,
      0.008523674,
      -0.022824349,
      -0.0013056742,
      0.010644146,
      0.016753554,
      0.012980991,
      0.017523456,
      -0.0039770626,
      0.0065851607,
      0.0035700353,
      -0.0000014026159,
      0.006974203,
      0.0047314996,
      0.004691097,
      0.017266171,
      0.018314674,
      -0.017713092,
      -0.0009799652,
      -0.024689116,
      -0.02577755,
      -0.03994444,
      0.0051188935,
      0.027049676,
      0.018250246,
      0.0070554526,
      -0.013880789,
      0.014744191,
      0.0044613127,
      0.027368162,
      0.0045604357,
      -0.007989755,
      -0.030332504,
      -0.0026105999,
      0.017429445,
      -0.030249687,
      -0.009889067,
      0.0026889965,
      0.008698458,
      0.020975554,
      -0.0021645885,
      -0.016111217,
      -0.002105291,
      -0.0055369996,
      -0.0045257336,
      -0.015181146,
      0.0012896175,
      0.026478034,
      -0.03862639,
      -0.009193057,
      0.029566828,
      0.021680927,
      -0.033105616,
      0.008604222,
      0.010446164,
      -0.0010233723,
      -0.007455717,
      0.018755432,
      0.0046128687,
      0.004912184,
      0.0073838593,
      0.0016432642,
      -0.0036065287,
      -0.00019006926,
      0.005252127,
      0.013174799,
      -0.01633937,
      -0.0037267052,
      -0.020839974,
      0.017051406,
      -0.011713699,
      -0.005452743,
      -0.00003056264,
      -0.0009620887,
      0.008539447,
      0.026510736,
      0.000114009614,
      -0.0014548012,
      0.0015851472,
      -0.0018943478,
      -0.017584426,
      -0.006322778,
      0.021434234,
      -0.1227806,
      -0.02471836,
      -0.0074144113,
      0.017134765,
      -0.012516488,
      0.004743653,
      -0.010025426,
      -0.016031543,
      0.00084586645,
      -0.0059403265,
      0.0089533,
      -0.014492722,
      0.013565998,
      -0.020220378,
      0.0029754045,
      -0.017070927,
      0.0057536406,
      0.017370883,
      0.02254562,
      -0.023590198,
      -0.0061638397,
      0.0104035875,
      -0.0048403866,
      -0.004436312,
      -0.034895506,
      -0.028372545,
      0.0060738726,
      -0.013816812,
      -0.028548144,
      -0.0018358146,
      -0.039480794,
      -0.008822961,
      -0.001719541,
      -0.011650947,
      0.0023876773,
      0.010938983,
      -0.01319554,
      0.019930458,
      0.02042555,
      0.005770854,
      0.0030704578,
      -0.014520411,
      0.020823626,
      -0.0032450124,
      0.0044985306,
      0.022121433,
      0.0601026,
      -0.017740354,
      -0.0016752323,
      0.042235807,
      -0.038188167,
      -0.021544136,
      -0.0032411716,
      -0.02441764,
      -0.010308545,
      -0.011189953,
      0.0068158777,
      -0.0053933444,
      -0.0067214794,
      -0.009752558,
      -0.0081515275,
      0.0037348482,
      0.024086649,
      0.026637753,
      -0.009049723,
      0.009439499,
      0.030575046,
      -0.00022347584,
      -0.017288538,
      -0.011489016,
      0.008457066,
      0.005845325,
      0.0054936255,
      0.029409572,
      0.011345295,
      -0.016723575,
      0.007302652,
      -0.0077720685,
      0.015304418,
      -0.012680005,
      -0.020452514,
      0.0022710972,
      -0.05610914,
      -0.02565446,
      0.029697089,
      -0.0041967817,
      0.0132025555,
      0.019648807,
      -0.022423903,
      0.003701345,
      0.0061602304,
      -0.0077241478,
      -0.035182502,
      -0.0068122856,
      0.008475378,
      0.013897384,
      -0.026786946,
      -0.005508846,
      0.013043173,
      -0.020015992,
      -0.008123987,
      -0.0030972508,
      0.003988827,
      0.0039801416,
      0.00915042,
      -0.014735206,
      0.0071982807,
      0.016290423,
      0.011023745,
      0.0041483254,
      0.005095502,
      0.0079499995,
      0.00002325169,
      -0.15613765,
      -0.008442088,
      0.013440234,
      0.026119523,
      0.011292079,
      -0.0071714646,
      -0.003973488,
      -0.021805769,
      0.030442107,
      0.009120112,
      0.01097114,
      -0.010732079,
      -0.010972548,
      0.0016017145,
      0.025488695,
      0.13482359,
      0.0038661354,
      0.0016044669,
      -0.04100647,
      -0.0053663915,
      0.0015661819,
      -0.019998003,
      0.0036880865,
      -0.014100899,
      -0.015324567,
      -0.017770415,
      0.021256812,
      -0.0033265473,
      0.012915062,
      0.0050035375,
      -0.011359901,
      -0.013602639,
      0.008936916,
      0.029200396,
      -0.008420817,
      0.01070225,
      -0.016315186,
      -0.0063982434,
      -0.0069399346,
      0.010496582,
      0.03545543,
      -0.007897282,
      0.004799934,
      0.0032887314,
      -0.016808854,
      0.0083464915,
      -0.006697686,
      -0.0014687233,
      -0.014667261,
      0.0035438314,
      0.012797616,
      -0.032785248,
      0.0025472676,
      -0.0031337622,
      -0.0134267155,
      -0.00758042,
      -0.0009343135,
      0.015583105,
      0.0025420215,
      0.01763757,
      -0.01707408,
      0.009567734,
      0.002856295,
      0.0018009191,
      0.0020238555,
      -0.016492885,
      0.02331019,
      0.014600187,
      0.011271418,
      0.009220845,
      0.024568176,
      0.022790965,
      -0.007709762,
      0.003198179,
      -0.013230033,
      -0.017730923,
      -0.016289972,
      0.015792739,
      0.0011894141,
      -0.011547254,
      -0.0024182738,
      -0.0056343568,
      0.00024421868,
      -0.016315805,
      0.0046302765,
      -0.001595494,
      -0.02836532,
      0.011656734,
      -0.012302946,
      0.008293738,
      0.018496959,
      0.0040714657,
      0.007114154,
      0.02218754,
      -0.014911637,
      0.024227193,
      0.01632,
      -0.005094833,
      0.032134604,
      0.002408439,
      -0.009405386,
      -0.0065187626,
      -0.022552973,
      -0.038660545,
      0.015514995,
      0.009511369,
      0.008338887,
      0.011633436,
      -0.012960159,
      0.008482202
    ]
  },
  {
    "id": "genai_cohort_python_06_Operator_overloading_and_bytearray_in_python_vtt",
    "content": "All right, so we'll continue the lecture right, from here because this is a continuation of our talk on, list itself. Now again, there's not too much to discuss about it here, but still want to give you a little bit base of operator overloading. So what is this operator overloading? There are a lot of operators in the world of programming. Like plus is an operator which adds two things, which is on their left and right like this and whatever is here and it just adds it. This is designed to add numbers. But whenever this operator, whether it's a plus minus, whatever it is, it's being used for doing more than one task that is called as operator overloading. Let me show you a base example and you will understand it much better. So let's just say I have a base liquid. And this base liquid is, let's just say we want to have water and another base liquid of milk. Okay, no problem. Then we have some extra liquids as well. Or probably better one would be extra flavor. Flavor looks good. Extra flavor. There we go. Now we have extra flavor of liquid. And in that again, my favorite, which is ginger. Now we want to combine all of them. We want to make a full liquid mix. How can we do that? Surely I showed you the append. Or we actually saw that we can actually, combine all of this. Remember this ingredient append. We can actually use this or we can actually go ahead and use the method that, hey, I just want to add all of them. And a lot of methods can be done just like we saw this extend here. But there is another way, another shortcut that I can simply go ahead and say, hey, base liquid. And I just want to add an extra, flavor. Now again, this plus was not supposed to do these things, but it is able to do this thing. This is your operator overloading. Yeah, very surprised. But this is all it is. What would be the result of it? No, no surprises here. Exactly what you have guessed for it. So we'll just go ahead and say liquid mix. And then we are going to say that, hey, just give me a full liquid mix. That's it. That is it. No big deal. No surprises, nothing. So we can see the liquid milk mixes, water, milk and ginger. So it just works exactly like concatenations. All right, so this is nice and operative. Overloading exists a little bit more as well. Not just by combining this in the array especially they, work like for example, let's just say you want to have a strong brew and this T is going to be pretty strong. So let's just say I have one ingredient for having a strong T which is black. Black T. So I'll just say now you can use operator overloading here as well. Like I want to multiply it by three. So what is the result? You might be wondering for that. And this might surprise you a little bit, but again this is investigation study. So just guess what could have happened. So I'll just say strong brew and we will use strong brew variable here. Just guess, take a guess. Will this black T will be three times or will three be added just here what will happen? And again, in case you were able to guess it right or probably not, we get three shots of the black T. That's what multiply by three. And what would have happened if there would be another element in it? That's very surprising. Let's just say we have a water in this one. Now what happens does this three gets multiplied only by this or by this or by both of them? Yeah, that's where the operative overloading and their knowledge, is important. So notice here, black T and water, then again black T and water, and then again black T and water. So technically you can say yes, it gets multiplied by each of the element. That's absolutely correct. But notice here it was able to maintain the order as well. This whole thing one, this whole thing as twice and this whole thing as thrice. Yeah, that's very interesting part of it. So, so I hope you get this now that how this actually goes and how this actually works. Now there are a lot of things which you can actually go ahead and bring more components onto it. Like for example, I usually never like to import anything in between. I prefer all of my imports at the top. But there are things that you can import as well. So for example, there is something known as operator. And from this whole module we'll discuss about them later on as well, you can actually get item getter. Now notice here it says return a callable object that fetches the given item from its operand. Hi. This is gibberish. This is 100% gibberish. I don't think so. Anybody can understand this, what's going on in here. But if you wish I can show you some examples as well. But again the point is that not just list is powerful, you can actually bring more operations. Just like we have seen the operator overloading, we can bring more things and we can perform more operations on the list. You will see this item getter much quite in the lot of source codes. And you can Sort them, based on variety of steps. But my goal is not to just scare you away for this. The last topic that we're going to study about this is an interesting concept. Let's just say I want to have one string. My string is cinnamon. This is my string and I want to convert this into a list. How do I do this? Because this is a list. So you might be wondering, can I go ahead and do this? For example, if I have a variable raw spice data and can I go ahead and use it like this? Yes, surely you can actually go ahead and do this. But then you have one element in the list. I want a list of just this string. That's an interesting concept in itself. How you can do that is a really different way. You have something inbuilt known as byte array. I'll show you more about the byte array. But you will use it very rarely. But still it exists. I wanted to show you. And this is a method, so you don't use square brackets, you use actually parenthesis, because parenthesis is used for tuple as well. But it is also used for methods. And inside this you say B for byte array. And then you use the quotes and inside this you use the cinnamon. So I'll just go ahead and paste this. Now this is. Each element will be treated as almost like array. But what's the output? Yeah, pretty sure you are interested in that. So I'll just say raw data or bytes. Yeah, byte would be good. Bytes. And let's just say we have raw spice data. What is the output of this? Pretty interesting actually. You will see that still gives you bytes. And then it says byte array B cinnamon. So yeah, it's not an ordinary thing to actually work with that. You have to modify this, you have to replace this. There's a lot of thing that goes on, into this one. And printing is not that easy. You will use it rarely, but it exists. Now the advantage of this is you can actually perform all these replace and all these things. For example, just to show you a brief example, let's just say we have a raw spice data in this you have again lot of methods like append, capitalize, center, just like you have in the list. Let's just say I want to have a replace method that I want to use. So replace also has a way how it works. So I'll just say I want to replace cina. Instead of cinnamon, we want to have cardamom. So I'll just go ahead and say B and I'll say Cardamom. And that's it. Now if I print this again, I'm manipulating the bytes array. And again, did we print it up so. Nope. And again, the reason is simple. You expected something different, but the result is going to be different. So what happens in the bytes array? I'll show you the documentation and then we'll fix it to the expected result. Right now we are expecting that when we print this raw spice data, it should have cardamom instead of the cinnamon. But we are getting cinnamon. That is okay, we will fix that. But for this, let's read a little bit of documentation so that we can actually fix this. This is what investigation study is. I love that. So if I come back, I have opened up the documentation. This is my bytes array. One thing that you need to understand that it returns a new array of bytes. Okay, that's good. And the byte array type is a mutable sequence of integer. Okay. So I can change it in the range of to So it's a very small range. It's usually used only for characters like this, the string that we have. So it breaks it down into characters. It has the most usual method of mutable sequence. So yeah, sequence means list. Yeah, they actually interchangeably use, use this quite a lot. Now if it is a string, you must also give the encoding. We haven't given that it's optional, but you should give them encoding like it is a UTF 8, UTF 16, whatever that is. And a lot of things are also mentioned up here. Now what is the wrong that we are doing here now whenever you actually provide or run a method on this, bytes array, it actually returns you a new array or bytes. Bytes array. What we are doing is we have performed an operation. It has given us return back a value, but we are printing the original one still. So one of the fix or a quick fix that we can do is we can simply say, hey, raw spice data, small data would be the value. Now that whatever the value you actually return me after performing this operation, this will go back onto this one. And now probably we will have a different result. Probably again, because it's an investigation study. If I run this again now I see that I do have bytes array as cardamom. Okay, it's working as we expected. But now you also have learned what and when it is not working, what to expect and how does it work. Again, I love this investigation study because you actually don't get the answer directly, but you actually investigate and then reach onto a point where it is actually working. This is my favorite part of it. All right, so, quite a lot. But we have now finished the list entirety as a topic. Hope you have enjoyed it. And this is it. But surely there are lots of more methods I can create probably five more videos on. Just use cases of the list methods. Like we have seen a lot, like we have seen these methods, up here at the top, like reverse and sort. And I can dance with the examples, but I don't want to do that. So that is it for this video. And I hope you have enjoyed the journey of lists in Python.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "06 Operator overloading and bytearray in python.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/06 Operator overloading and bytearray in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.00103848,
      -0.014263542,
      0.03584118,
      -0.07121285,
      -0.0032262108,
      -0.008901172,
      0.008730843,
      0.034007147,
      0.007797197,
      0.002207756,
      -0.021925723,
      0.0020929228,
      -0.0007994672,
      0.006042716,
      0.13989589,
      0.0077528004,
      -0.029358799,
      -0.019596871,
      -0.011762682,
      0.0060261157,
      -0.005024819,
      -0.015431326,
      0.004345284,
      0.0012716695,
      0.014720093,
      -0.009035059,
      0.021619525,
      -0.0093318755,
      0.02411596,
      -0.019802874,
      -0.017837772,
      0.0143994065,
      0.0041443347,
      0.007615716,
      -0.021050965,
      0.0013336395,
      0.010096494,
      0.0005702088,
      -0.028784426,
      0.024565883,
      0.0025140734,
      -0.0036543966,
      0.0042957608,
      -0.018616132,
      0.010835731,
      -0.009813057,
      0.006141559,
      -0.03769601,
      -0.007894531,
      0.029144516,
      0.02575839,
      -0.009451403,
      0.014260033,
      -0.17334697,
      0.025938405,
      0.0042183087,
      0.002291415,
      -0.0065833367,
      0.014090865,
      -0.004206107,
      0.012184128,
      0.03171183,
      -0.01744855,
      0.019924361,
      -0.01808701,
      -0.015703317,
      0.008165178,
      0.01748572,
      0.0009837924,
      -0.002072099,
      0.016801992,
      0.013011639,
      -0.03390406,
      -0.032934528,
      -0.0034623146,
      -0.04267607,
      0.011605458,
      -0.016882455,
      -0.027811434,
      0.01717666,
      -0.0120732235,
      -0.016644789,
      -0.019647587,
      -0.0014800843,
      -0.000238152,
      -0.0019918433,
      -0.018000308,
      -0.015101156,
      -0.01611804,
      0.008481088,
      -0.009839511,
      -0.0091275275,
      -0.0038282252,
      0.017680151,
      -0.011447415,
      -0.0016574957,
      -0.011653186,
      0.009067986,
      -0.021950439,
      0.014234751,
      0.012210095,
      0.0047143083,
      -0.016120903,
      0.0025287422,
      -0.012770664,
      -0.0036119309,
      -0.012746185,
      -0.012555945,
      -0.00058876013,
      0.017718926,
      0.0019298057,
      -0.011884226,
      -0.0040649893,
      0.03297681,
      -0.006562138,
      -0.17194624,
      0.012009559,
      0.008397972,
      -0.005793386,
      0.009597086,
      -0.036682144,
      -0.0061139185,
      -0.0032353688,
      0.024817914,
      -0.02080589,
      0.000086616696,
      0.016552178,
      0.032938715,
      -0.0025448247,
      -0.030345785,
      -0.0050928146,
      -0.022883477,
      -0.00046911454,
      0.0102405315,
      -0.02840269,
      0.013735536,
      -0.019562157,
      -0.00016389672,
      -0.033597287,
      -0.0017846265,
      -0.0042776214,
      0.0048922733,
      -0.0018446613,
      0.022409791,
      0.026480012,
      -0.0059811715,
      -0.015996527,
      0.020673461,
      -0.024948748,
      -0.008629941,
      0.008651604,
      -0.012460143,
      0.004276191,
      0.0009929071,
      0.012470385,
      -0.024255859,
      0.0075912215,
      0.02009451,
      -0.019007122,
      -0.013091032,
      -0.007071816,
      0.005777248,
      0.009525795,
      0.0045608007,
      0.014606056,
      -0.011345305,
      -0.012424006,
      0.023908008,
      0.01623352,
      0.018008161,
      -0.0070370594,
      -0.00007127171,
      0.0061971513,
      -0.0067417873,
      -0.017616501,
      0.015215381,
      -0.0074339937,
      0.0008556888,
      0.019443424,
      -0.02961535,
      -0.010447654,
      -0.002214088,
      0.022983365,
      0.022343304,
      0.005491829,
      0.0027662583,
      -0.005583684,
      0.006200159,
      0.012804074,
      0.005936289,
      0.007150414,
      0.0037430553,
      0.02706916,
      0.005422947,
      -0.020371303,
      -0.010048868,
      -0.0043180836,
      -0.0136608835,
      -0.017293535,
      0.0061421907,
      0.034699034,
      -0.009150192,
      -0.0008363866,
      -0.018715585,
      0.020763818,
      -0.008915347,
      0.004700424,
      -0.019545395,
      0.013790767,
      0.009722847,
      0.0022357644,
      0.0022678035,
      0.0031117531,
      -0.010059389,
      0.016342571,
      -0.022881877,
      0.022346724,
      -0.0049550906,
      -0.0008315561,
      -0.0025203628,
      0.0030186062,
      -0.0053835963,
      0.019150672,
      0.016208267,
      0.005581802,
      -0.016022317,
      0.004003154,
      0.009626731,
      -0.0008787724,
      -0.00904768,
      0.01207446,
      0.011637001,
      -0.019989818,
      -0.017335793,
      -0.005710358,
      -0.0008171635,
      -0.010023666,
      0.003045378,
      0.004806628,
      -0.003137761,
      0.0024629314,
      -0.008114642,
      -0.00699627,
      0.0025020638,
      0.0315653,
      -0.005639773,
      -0.009471907,
      -0.0029100415,
      -0.018379727,
      -0.01368966,
      -0.0039212024,
      -0.0042484966,
      -0.013922319,
      -0.015877403,
      0.02320811,
      -0.00231946,
      -0.033505134,
      -0.005311156,
      0.0073827975,
      -0.0072640763,
      0.0048199925,
      -0.0041926163,
      -0.014808597,
      -0.027800582,
      0.015256695,
      -0.025780778,
      -0.0137196565,
      0.033608023,
      -0.013730518,
      0.025592675,
      0.00576269,
      0.008564652,
      0.009462228,
      0.007500064,
      -0.03190279,
      0.009752702,
      -0.09658815,
      0.017127847,
      0.013638615,
      -0.016911667,
      0.022258993,
      0.018410003,
      -0.021512944,
      0.01837537,
      0.0037168474,
      0.0048927483,
      0.0004798489,
      -0.021971302,
      0.02318667,
      -0.012026606,
      -0.000116150746,
      -0.013575084,
      -0.019232333,
      -0.008530347,
      0.018003313,
      -0.011946235,
      0.023203107,
      0.0028630542,
      0.012236295,
      -0.007135763,
      0.0047492646,
      -0.008126777,
      -0.008920654,
      0.025655463,
      0.017965859,
      0.008191309,
      -0.01103574,
      0.026664302,
      0.0068737417,
      -0.010360194,
      -0.00721168,
      -0.0016838607,
      -0.013650389,
      -0.008683136,
      -0.015988477,
      -0.018326538,
      0.016665641,
      -0.0012304748,
      0.038421605,
      0.050927058,
      0.011714785,
      0.006706137,
      -0.00035051195,
      0.0085325055,
      -0.0032092351,
      0.0072268224,
      -0.024523161,
      -0.004996962,
      0.0156040285,
      -0.021222387,
      0.01772642,
      0.009946367,
      -0.012390352,
      -0.025212552,
      0.008096959,
      0.003346736,
      -0.00039178054,
      0.0019385554,
      -0.012387228,
      0.00094711327,
      0.01734301,
      -0.016484514,
      -0.0040009096,
      -0.012022311,
      0.0015250494,
      0.0013412206,
      -0.0012509847,
      0.0068302955,
      -0.03081057,
      -0.005872955,
      0.007919976,
      0.008589463,
      0.011991476,
      -0.00525164,
      -0.00599767,
      0.03111105,
      0.027728222,
      -0.0024152438,
      0.008817996,
      -0.010343444,
      0.009455543,
      0.0018193884,
      0.013750044,
      -0.0051856823,
      0.013277795,
      -0.018279025,
      -0.010404076,
      0.032020167,
      -0.020690251,
      -0.0052639055,
      -0.0145017365,
      0.0074136923,
      -0.025075488,
      -0.017753106,
      0.010712027,
      0.009088674,
      -0.013531191,
      0.005310769,
      -0.02640813,
      -0.0013497971,
      -0.008630888,
      -0.00028082967,
      -0.021794634,
      -0.01582203,
      -0.01999409,
      -0.008945503,
      -0.0059229685,
      0.004045769,
      -0.011009861,
      -0.0046184314,
      -0.007210912,
      0.025450261,
      0.0076642395,
      0.014207816,
      0.012988084,
      -0.02903468,
      -0.005403145,
      -0.0042254548,
      0.018609056,
      0.018242666,
      0.0026610503,
      -0.0023879928,
      -0.019963862,
      0.0019488166,
      -0.007536572,
      -0.013187685,
      -0.00420285,
      0.01205138,
      -0.026556466,
      -0.014570285,
      -0.00712207,
      -0.013976813,
      0.010472614,
      0.011846887,
      0.0073895357,
      0.0066213612,
      -0.014482572,
      -0.0018576819,
      0.012111809,
      0.0011446889,
      -0.007559168,
      0.013131637,
      -0.018505756,
      -0.015012076,
      0.0005204075,
      -0.011854294,
      -0.012940122,
      -0.027496286,
      -0.010277766,
      -0.008484499,
      0.000052810574,
      0.004871122,
      -0.0006029269,
      -0.014016603,
      -0.018812956,
      -0.008169591,
      0.011624734,
      0.005757468,
      -0.016581172,
      0.0012867856,
      0.04525204,
      -0.009840761,
      -0.0003330295,
      0.0027625232,
      0.005166918,
      -0.018766059,
      -0.016383003,
      -0.009982165,
      -0.030876057,
      -0.027115883,
      0.02798412,
      0.0037572712,
      0.005044814,
      -0.006091034,
      0.003721563,
      0.023144072,
      0.023286616,
      0.021771392,
      -0.042268068,
      0.028754773,
      -0.0007527588,
      -0.0033193796,
      0.0040092943,
      0.020750038,
      -0.025120484,
      -0.01985637,
      0.0071021663,
      0.0049453494,
      0.019900652,
      0.02212617,
      0.012242153,
      0.010187386,
      0.00642626,
      -0.0010705432,
      -0.0001950841,
      0.01839013,
      0.0020709292,
      -0.011771592,
      0.0032523486,
      -0.0097993845,
      0.0014722296,
      -0.00860605,
      -0.0075758817,
      -0.026289435,
      0.0012629877,
      0.028118,
      0.0047817323,
      0.005838043,
      -0.0066691115,
      0.0057618464,
      0.012417855,
      0.019896835,
      0.0015451522,
      -0.031381123,
      -0.019327337,
      0.0018280068,
      0.020520926,
      -0.015085833,
      -0.0040172883,
      -0.012815303,
      0.013341218,
      0.0003358197,
      0.004073756,
      -0.0020617326,
      -0.006049276,
      -0.02584375,
      -0.013583492,
      -0.0042512673,
      -0.0066652717,
      0.028850816,
      -0.032687366,
      -0.006004337,
      0.027740337,
      0.013165331,
      -0.023777496,
      0.007455296,
      0.0113592055,
      -0.011937713,
      -0.028503861,
      0.00085726,
      0.0020254385,
      -0.02012152,
      0.024658907,
      -0.0033696755,
      -0.014010271,
      0.008769504,
      -0.0011189148,
      0.013184182,
      -0.02320076,
      0.008912254,
      -0.03208189,
      0.028722052,
      -0.022715874,
      0.007951764,
      0.012354611,
      -0.011062736,
      0.008791727,
      0.02373332,
      0.01367008,
      0.02959288,
      -0.0076351473,
      -0.029069604,
      -0.00839408,
      0.0010627664,
      0.006638799,
      -0.12443481,
      -0.012566669,
      -0.02279056,
      0.010185003,
      0.0005132321,
      -0.0002643173,
      -0.022446789,
      -0.026524888,
      -0.00064427056,
      -0.010918234,
      0.030620346,
      -0.019098155,
      -0.0020183008,
      -0.017328214,
      0.023599751,
      -0.04307003,
      0.04010911,
      0.009680675,
      0.0022160644,
      -0.009763384,
      0.016507205,
      0.022172999,
      -0.009872785,
      -0.010243258,
      -0.030303143,
      -0.00821874,
      0.014552897,
      -0.0018362624,
      -0.0055982494,
      0.0066102883,
      -0.039517663,
      -0.0025504613,
      -0.005449297,
      -0.00019520498,
      0.008878988,
      -0.014023519,
      -0.022340348,
      0.01599583,
      0.0111426795,
      0.0071714814,
      0.0063688313,
      -0.018017506,
      0.0280347,
      0.0016239994,
      -0.015365989,
      0.014331474,
      0.046475824,
      -0.009334645,
      0.0004979572,
      0.04048331,
      -0.027453344,
      -0.010869733,
      -0.0115183415,
      -0.030219827,
      -0.007167231,
      -0.009047556,
      0.008314211,
      -0.0034592454,
      -0.0063423887,
      -0.017028373,
      0.014646863,
      0.00053298543,
      0.010205273,
      0.023599416,
      0.011235413,
      -0.0026156816,
      0.009857695,
      0.004500147,
      -0.0054079336,
      -0.006361329,
      -0.010698435,
      0.018488323,
      0.009659419,
      0.012024357,
      -0.004231673,
      0.005062693,
      0.009725971,
      0.01099218,
      0.005957252,
      -0.0025362275,
      -0.027078068,
      0.00007764754,
      -0.07022606,
      -0.020397302,
      0.024219144,
      -0.010358205,
      0.02496278,
      0.0067104837,
      -0.0028644775,
      0.0026414832,
      0.016424699,
      -0.009065036,
      -0.03432726,
      -0.0018712443,
      0.023271723,
      0.0011033785,
      -0.015960326,
      0.01085075,
      0.00849251,
      -0.0016070158,
      -0.018889472,
      0.004954737,
      0.0052964175,
      -0.012305442,
      0.018349327,
      -0.0137896035,
      -0.0040151244,
      0.014735967,
      -0.005095166,
      0.0034124926,
      0.004450199,
      0.015116919,
      0.008674297,
      -0.14392726,
      -0.021653036,
      0.019634813,
      0.009221399,
      0.010796332,
      0.0036862204,
      -0.004098277,
      -0.022967832,
      0.027993556,
      -0.016258389,
      0.008443239,
      -0.015444134,
      -0.018937768,
      -0.008483798,
      0.029002069,
      0.14795844,
      -0.018799428,
      0.008613396,
      -0.02225332,
      -0.009928753,
      0.002336715,
      -0.013731455,
      -0.00015984647,
      -0.007585434,
      -0.0063527287,
      -0.022645626,
      0.019710643,
      0.016717823,
      0.011746319,
      -0.00953863,
      0.0022419835,
      -0.010301772,
      0.0058168895,
      0.01792073,
      -0.013150436,
      0.0017167486,
      -0.017384257,
      0.0037316247,
      0.00024583886,
      0.018991001,
      0.021371601,
      -0.004472157,
      0.008236975,
      -0.0016082316,
      0.009192621,
      0.010056849,
      -0.0018558858,
      -0.0030608329,
      -0.015340261,
      0.0047473954,
      -0.0023650965,
      -0.040725794,
      0.0042328294,
      0.0011667297,
      0.004015364,
      0.013260812,
      -0.005592469,
      0.013353785,
      -0.011548149,
      0.022991372,
      -0.016285898,
      0.005989587,
      -0.014170449,
      -0.011163871,
      0.0057520056,
      -0.011192661,
      0.034727067,
      0.012484254,
      -0.0032466953,
      -0.00032807584,
      0.010570886,
      0.022537189,
      -0.0075656334,
      0.01913286,
      -0.010685556,
      -0.0144080985,
      -0.0089409575,
      0.013584672,
      0.011782245,
      -0.011126211,
      0.0032928898,
      -0.023571577,
      0.009682291,
      -0.02266883,
      0.009690178,
      -0.00026788606,
      -0.017765112,
      0.00953574,
      0.00036988867,
      0.002022495,
      0.019654913,
      0.021854758,
      0.00025187677,
      0.009910249,
      -0.019867802,
      0.023769688,
      0.014496553,
      0.003937002,
      0.020423522,
      0.013280986,
      0.0071555525,
      -0.014638343,
      -0.0145598855,
      -0.029255366,
      0.0118821105,
      0.017164078,
      0.00052623026,
      0.010910822,
      -0.0053780144,
      -0.0054215053
    ]
  },
  {
    "id": "genai_cohort_python_07_Set_and_frozenset_in_python_vtt",
    "content": "Next up, we're going to take sets. And sets are super easy in Python. No need to overcomplicate them. I have seen a lot of people who complicate them. These are known as set or sets, whatever you want to call them, no big deal. Now the way how set works is first you go through with the diagram. So in case you have studied them in, your engineering or maths, that's okay. If you haven't, let me give you a small tour of that. No worries, I'll be your math teacher for a while. So the word and the concept of the set is mathematical. And the way how it works is you have some of the data just like here. And we'll get this data into orange. That's nice. And we have another data which is in another color, maybe yellow. So the way how set works is when you actually overlap these two things, what you are getting and how you are getting. So we can see this whole thing is divided into multiple portion. But the interesting portion is just right here. This is where the interesting portion is. I'll just go ahead and make it transparent. So what we see that if this is called as set A, this one is set B means any amount of data. So we can see this here is a whole of A. This thing is whole of B here. But when we make an intersection, this is point where we actually mix, some portion of A and some portion of B. And yes, this is it. So whatever is the common part here, this is known as intersection. Yeah, pretty unique name, Intersection. So this whole thing in between is known as intersection. Pretty easy. When you want to combine everything, that means you want to have everything with you. This whole thing, this whole thing is known as union. That means I want to have everything which is in the A, everything in the B, everything. I doesn't really care. But the only thing that I care about, if there is something common in both of them, don't repeat it again, don't write it again. Set is known as for their uniqueness. So set is designed in such a way that, hey, everything should be unique. So whenever you study about the set, make sure one thing is there in your mind, which is everything is going to be unique. Unique. So set simply means things are unique. And again, union means I want to have everything of this, this is known as union. But if you want to have just portion of it, this portion of it. Again, if there is anything common between both of them in this part as well, I will not take them. But if anything is present in the A, but Not in the B. I will not take that in the intersection. So that is the most common. We have some of the others as well. Like you want to have difference. That means, hey, give me the A. But if anything is there in the B also, don't give me that. I think the better would be to take an example. Now that you understand the theory, part of it. Example would be super, super easy. Moving on to the chapter number nine. We are into chapter nine. Py now. What can we do? So let's just say we have, essential spices. And the way how we write the set is like this. There are other ways as well, but this is the most easy way to write the set. So we have, cardamom, and we have ginger. And another set that we have is maybe cinnamon. All right, we have another one. This time we'll not call them as essential spice, but rather we'll call them as optional spice, optional spice. And we have to change them. So instead of cardamom, let's have cloves, and we'll keep the ginger. But we're going to change the cinnamon. So ginger is the common part. Again, the order doesn't matter. It can be at any position. That really doesn't matter. So we'll have the black pepper. All right. Yes. Being from India, I know a lot of spices. Now, let's just say I want to have an all spices box. And in the all spices box, I want to have all of them, but there's no point of having duplicate of them. So for this, I can have a union. And union combines unique spices. So for this, all I have to do is take the essential spices, use this sign, which is just below your backspace key. This is a pipe operator, also known as union. And then I can go ahead and have the optional spices. And you get the idea the all spices is just like that. Should we print it out? Probably yes. All spices. And we'll have all spices. Open this up and let's run the chapter nine. And there we go. We have the ginger, clove, cardamom, black pepper, and cinnamon. But there is no presence of the ginger twice. That's the whole goal. That's the union. You get all of them, but you don't get the reputation. It's a very unique property of this and used actually quite a lot. We can actually go ahead and find, what are the common one of them. So we can just go ahead and write like this. So I want to find the common spices. What are the common between both of them? For This, I have to say essential spice. And we want to have an intersection of it. Remember, the intersection is this portion. So we want to have an intersection. And this is how you write. No, I wish it would be in for intersection, but it is actually ampersand. So. So we have the optional spices. And the interesting part is, what do we get in here? So first of all, this is going to be common spices. And then instead of the all spices, we'll have the common spices. Let's run this. This would be fun to see. So in the common spices, we can see the only ingredient which is common is ginger. Between both of them, if there would be no common ingredient, we would get nothing. That's it. One last thing that's remaining up here is the differences. So let's try to leave that. Let's also learn about that. We are going to call this one as only in, not like that. Only in essential. So how do we do that? I want to find the spices which are only in the essential, not in the optional. So easy part. I can take the essential spices and I can remove all the optional. There we go. And then we can just go ahead and print it. So instead of common spices, we'll just go for only in essential. And we will say only in essential spices. Pretty easy. I hope this demo gives you an idea about how it works. Only in essentials, are cinnamon and cardamom, because ginger is common for both of them, so it's being removed. Pretty fun. Pretty easy. There is also a final thing in the world of set, which is known as again, membership test. And yes, membership test remains exactly same. Whenever you want to check whether this member exists in a particular set or not, you ask questions and you can simply ask them. For example, I can just have a simple print statement and formatted string. I will say is. Then again clove. Again, I have to be case sensitive here. Clove. Or did I wrote it as cloves? Yeah, I wrote it as cloves. Is cloves in essential spices? And then simply use the curly braces and ask, what do you want to check? I want to check for cloves. Where do you want to check in? And whatever the variable that is essential spices. That's it. You put this up and there we go. We run this and it says, is clove in essential spices False because it doesn't exist. Probably I wrote it wrong. Cloves. We'll copy this. Oh, it's actually not in essential spices. It is in optional spices. So that's why I thought little different so is it an optional spices? Let's just see. Optional spices. Okay let's see. Yes true this is available in this. Now there is one more thing known available in this so far you can actually do all the manipulation and everything in the set set by default is known for uniqueness only. We don't worry about too much but if you want to freeze any of the set there is a concept known as frozen set. It is available it has built an immutable unordered collection of unique elements. It is also being used sometimes but again no need to worry too much about this. Just remember there is a set there is a frozen set both of them are available the working wise they are exactly same no problem there. That's it and pretty much it about the sets. Hope you have enjoyed it and let's catch up in the next video. Hope you have reviewed us.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "07 Set and frozenset in python.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/07 Set and frozenset in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.018069804,
      -0.012527532,
      0.029324409,
      -0.06248333,
      -0.018468687,
      -0.007353211,
      0.0017498088,
      0.027294593,
      -0.004318659,
      0.0012004412,
      -0.019805932,
      -0.011811154,
      0.0072542336,
      0.019900935,
      0.11604425,
      0.00016315344,
      -0.017157285,
      -0.024148252,
      -0.003507162,
      -0.020705968,
      0.013688388,
      0.007285481,
      -0.016833542,
      -0.0044329655,
      -0.0024136635,
      -0.001050089,
      -0.00076402555,
      0.0035620166,
      0.008886608,
      -0.021037059,
      -0.009257397,
      0.016354304,
      0.0050723637,
      0.033311937,
      0.0019697547,
      0.014210094,
      -0.0022783938,
      0.01161158,
      -0.01819745,
      -0.0019190039,
      0.015498319,
      0.009269397,
      0.011485692,
      -0.023678133,
      -0.0018845877,
      -0.038066536,
      -0.0056713573,
      -0.0068648164,
      -0.0007521991,
      0.008613295,
      0.007973136,
      0.002002039,
      -0.012713316,
      -0.1814843,
      0.042366013,
      -0.023332799,
      0.0011671146,
      -0.007113003,
      -0.020963134,
      0.019806255,
      -0.018389568,
      0.023627013,
      -0.044222962,
      -0.01600509,
      -0.013661247,
      -0.0114646675,
      0.02512362,
      -0.020542506,
      0.00091829087,
      -0.007393974,
      0.026080376,
      -0.0010660107,
      -0.024204168,
      -0.024494547,
      -0.023660798,
      -0.025726857,
      -0.00970008,
      -0.017320558,
      -0.038257778,
      0.004828258,
      -0.0068354886,
      0.0061220457,
      -0.005364024,
      -0.006718569,
      -0.0014435388,
      0.0032169917,
      -0.024026517,
      -0.009675963,
      0.0073150527,
      0.0008759198,
      -0.0040156906,
      -0.012117116,
      -0.024469336,
      -0.0007736886,
      -0.010620615,
      0.0034191331,
      0.0026602503,
      -0.0060509876,
      -0.013052591,
      0.014400555,
      0.007926846,
      0.0026641064,
      -0.017306678,
      -0.020473659,
      -0.010214475,
      -0.010183212,
      0.010376732,
      -0.025145855,
      -0.0052842153,
      0.008512383,
      -0.0033066166,
      0.0025509363,
      0.023086736,
      0.005685407,
      0.016851813,
      -0.18586998,
      -0.020331727,
      0.0017657898,
      -0.025697201,
      0.038265333,
      -0.016628036,
      -0.016701235,
      0.013017039,
      0.0026943807,
      -0.03375633,
      0.01359988,
      0.0037884286,
      0.009234955,
      0.0023358213,
      -0.01989271,
      -0.013514699,
      -0.024631055,
      -0.01813242,
      0.013824055,
      -0.007757841,
      0.014740181,
      -0.019486383,
      -0.0042807655,
      -0.03176391,
      0.00016457152,
      -0.0033766383,
      0.0073384373,
      -0.02328549,
      0.016499618,
      0.008687022,
      0.008815786,
      -0.0054793125,
      0.010856875,
      -0.01209878,
      -0.016606068,
      0.0031199337,
      -0.014454556,
      0.0013164268,
      -0.0046371813,
      0.016109962,
      -0.022992851,
      0.0033327406,
      0.02302236,
      -0.008269643,
      0.016459694,
      -0.016018989,
      0.012838533,
      -0.013520269,
      0.012500137,
      -0.015505233,
      -0.0045462037,
      -0.008724126,
      0.009465531,
      0.03640645,
      0.0018400607,
      -0.009868628,
      -0.0032148093,
      0.018967012,
      -0.001627476,
      -0.019288303,
      -0.0067702765,
      -0.0012482668,
      0.02412583,
      -0.007184421,
      0.0015881467,
      -0.014420621,
      -0.022529695,
      0.005830763,
      0.002946157,
      0.0060761007,
      -0.0021899682,
      -0.007918259,
      0.008987947,
      0.010939986,
      -0.01082738,
      0.006534691,
      0.0056671333,
      0.017472083,
      0.004428588,
      -0.0039754766,
      -0.023837749,
      -0.0034856077,
      0.0056279823,
      -0.0058181626,
      0.020257557,
      0.024457525,
      -0.00076078717,
      -0.002913524,
      -0.027119722,
      0.0313493,
      -0.01397762,
      0.007416682,
      -0.016359253,
      0.008282525,
      0.0041185934,
      -0.028001873,
      -0.011657589,
      0.02082235,
      -0.002960475,
      0.026948933,
      -0.006863129,
      0.020676523,
      0.004895139,
      -0.008182374,
      -0.0097709745,
      0.010050372,
      0.0053259027,
      -0.00009442086,
      0.011451874,
      0.010920176,
      -0.005114963,
      0.00964423,
      -0.0052505336,
      0.010124409,
      -0.012200731,
      0.014889856,
      0.0060275453,
      -0.02532299,
      -0.014177984,
      0.0049241497,
      0.0068915808,
      -0.029643057,
      0.014570044,
      0.00024414193,
      -0.006169281,
      -0.0021021136,
      0.013725691,
      0.001981529,
      0.008866573,
      0.03092179,
      0.0022011807,
      -0.008667944,
      -0.0027535479,
      -0.0026628391,
      -0.019412473,
      -0.009614521,
      -0.014541315,
      0.006864784,
      -0.03013095,
      -0.0049293027,
      -0.009399253,
      -0.024730776,
      -0.0062345853,
      -0.00048550943,
      -0.001485296,
      -0.013778093,
      -0.016507145,
      -0.031111972,
      -0.02141846,
      0.0076923915,
      -0.02668265,
      0.012433739,
      0.013600839,
      -0.0031230047,
      0.03346464,
      0.022316588,
      -0.006491528,
      0.009025981,
      0.021786043,
      -0.017388009,
      0.0001365736,
      -0.104909435,
      0.0152463205,
      0.001699166,
      -0.022248982,
      0.011540206,
      0.012326744,
      -0.01963256,
      0.024554716,
      0.0072350074,
      0.016762467,
      -0.0048588836,
      -0.016793033,
      0.03196653,
      -0.01766208,
      0.011186488,
      0.008827009,
      0.000665893,
      -0.0038944439,
      0.023629509,
      -0.020408507,
      0.012107718,
      0.0010231431,
      0.008083863,
      -0.00080042984,
      0.010823669,
      0.007787421,
      -0.006320054,
      0.04017515,
      0.010820735,
      0.004282476,
      -0.021520913,
      0.033535387,
      0.0095993085,
      0.011176523,
      -0.0077648144,
      -0.018213682,
      0.00494702,
      -0.008017829,
      -0.021841612,
      0.0050246106,
      0.018017132,
      -0.010981991,
      0.013908581,
      0.036190387,
      0.0062961183,
      0.0032351608,
      -0.013559072,
      -0.018699327,
      -0.0059390822,
      0.00023241882,
      -0.02189787,
      -0.013016079,
      0.011107221,
      -0.017493078,
      0.010394015,
      0.009846767,
      -0.01195919,
      -0.0080272015,
      -0.005600854,
      0.013995251,
      -0.0032387578,
      -0.0016053645,
      -0.0013260804,
      -0.014566801,
      -0.015661009,
      -0.0062907944,
      -0.0032723034,
      -0.015248162,
      -0.012431207,
      0.005461464,
      0.00051147793,
      -0.015393391,
      0.0007162243,
      0.002588192,
      0.0020521216,
      -0.009116762,
      -0.010568095,
      -0.017820308,
      -0.008202988,
      0.022772476,
      0.022259949,
      -0.010546767,
      0.009943293,
      -0.0113403415,
      0.0139881605,
      0.013735822,
      0.0031043421,
      0.0033430676,
      0.015940433,
      -0.02727642,
      0.0045970445,
      0.009608756,
      -0.028693713,
      -0.0040374864,
      -0.027544597,
      -0.0018498679,
      -0.012668632,
      -0.02694772,
      -0.014769935,
      -0.0015915711,
      -0.008417715,
      -0.008089592,
      -0.029628992,
      -0.0042429776,
      -0.006408869,
      -0.000660826,
      -0.007094362,
      -0.013184052,
      -0.0007734061,
      -0.016658284,
      -0.00004487011,
      0.013657199,
      -0.003669135,
      -0.01765083,
      -0.03577277,
      0.022199452,
      0.0019044818,
      0.013599309,
      0.010027909,
      -0.04067948,
      0.020903228,
      0.0056586675,
      0.00023750718,
      0.0011843009,
      -0.013247182,
      0.002889105,
      -0.022086399,
      -0.017682845,
      -0.0027129585,
      -0.04059592,
      -0.012085231,
      0.01572534,
      -0.016824136,
      -0.023056488,
      -0.014716017,
      -0.008956129,
      0.007759212,
      0.008821431,
      -0.00048555897,
      0.0016480512,
      -0.01607159,
      -0.000591837,
      0.009352956,
      0.020858023,
      -0.012011062,
      0.030587792,
      -0.00042857163,
      -0.011750996,
      0.010891025,
      -0.03616654,
      -0.011512945,
      -0.011109034,
      -0.02578094,
      -0.008655438,
      -0.0067442083,
      0.010979814,
      0.0049584755,
      -0.031071844,
      -0.029815707,
      -0.0069475127,
      0.0060109263,
      -0.0008656999,
      -0.02849326,
      0.017058302,
      0.008631588,
      0.002948799,
      -0.0038464211,
      0.011439767,
      0.0073868525,
      -0.009025557,
      -0.0017398412,
      -0.022129992,
      -0.04155508,
      0.005079365,
      0.002082684,
      -0.0063294703,
      0.017321361,
      0.015714563,
      -0.0057867826,
      0.028649084,
      0.018700503,
      -0.00664793,
      -0.0050349515,
      0.004579991,
      -0.009195689,
      0.031537972,
      0.0054522054,
      -0.0014919355,
      -0.0159211,
      0.019208075,
      0.008351128,
      -0.008655698,
      -0.0011152715,
      0.010631464,
      0.004411974,
      0.0122417845,
      -0.009049012,
      0.0062043564,
      0.01571672,
      0.012230064,
      -0.010353837,
      -0.007611402,
      0.00712889,
      -0.0034532961,
      0.02669067,
      -0.013646381,
      -0.0011979667,
      -0.0144633455,
      0.010868178,
      0.0126939975,
      0.020578071,
      0.011250258,
      -0.008819472,
      0.0047888057,
      0.007762783,
      0.026600994,
      -0.0061590443,
      -0.001314415,
      -0.015104138,
      -0.0013592741,
      0.020219343,
      -0.029400868,
      -0.0041632834,
      -0.011751635,
      0.0025940407,
      0.005333533,
      0.0056523914,
      0.016087715,
      0.015051208,
      0.020189498,
      -0.019405317,
      -0.0113795325,
      -0.0068235844,
      0.01220659,
      -0.011494568,
      -0.009186635,
      0.0032719988,
      0.021969939,
      -0.010740073,
      0.015377863,
      -0.013893129,
      0.0029595422,
      0.0009037064,
      -0.0006763686,
      -0.006570714,
      -0.011602046,
      0.015278974,
      -0.00040757415,
      -0.009659352,
      -0.010911181,
      -0.0027438519,
      0.013885369,
      -0.0072164857,
      0.0040183547,
      -0.016126627,
      0.024395358,
      -0.012486159,
      0.0025347113,
      -0.007820835,
      -0.00825036,
      0.016840165,
      0.02807455,
      0.011074481,
      0.010567418,
      -0.0030341262,
      -0.007438026,
      -0.014355789,
      -0.0011341934,
      0.00033783508,
      -0.12442098,
      -0.010947017,
      -0.006305755,
      0.027366325,
      0.0018414662,
      -0.007830424,
      -0.013556108,
      -0.013835846,
      -0.019347155,
      -0.007871496,
      0.02565869,
      0.007905747,
      0.01097962,
      0.0046684006,
      0.016972708,
      -0.020476691,
      0.011957013,
      0.02040642,
      0.0102317445,
      0.0029824623,
      -0.0036893112,
      0.003585707,
      0.0037277164,
      0.013174367,
      -0.029635234,
      -0.0041244947,
      0.020075403,
      -0.018685,
      -0.008402135,
      -0.0052556526,
      -0.011964489,
      0.011661171,
      0.00012459118,
      0.0031743194,
      -0.0045362674,
      -0.005439168,
      -0.032594915,
      -0.003060288,
      0.0017756559,
      0.015869271,
      0.007577896,
      0.008582165,
      0.026959265,
      0.00955117,
      -0.003936823,
      0.0204598,
      0.056852642,
      -0.014848996,
      0.0035426896,
      0.030904647,
      -0.03492886,
      -0.011082256,
      -0.0122531485,
      -0.016064584,
      -0.017742896,
      -0.02494225,
      0.016122788,
      -0.008292902,
      -0.0015354916,
      -0.008437088,
      0.015168115,
      0.017814063,
      0.014789755,
      0.015128841,
      -0.008407261,
      -0.0070712557,
      0.017164936,
      -0.0060374145,
      0.015863271,
      -0.015112653,
      -0.007851509,
      0.006073472,
      -0.019141212,
      0.011256876,
      0.00006375164,
      0.006299574,
      -0.00039211538,
      -0.013050678,
      -0.01217133,
      -0.010526857,
      -0.021659413,
      -0.005483785,
      -0.049461868,
      -0.023269903,
      0.015300329,
      0.018011233,
      0.013849795,
      0.033017777,
      -0.015646245,
      -0.0017831984,
      0.017914508,
      -0.006539203,
      -0.033463042,
      -0.012056478,
      -0.013414653,
      -0.005728248,
      -0.03490491,
      0.017271338,
      0.008461359,
      -0.0059848307,
      -0.0033918233,
      0.007745209,
      0.0014252274,
      0.0040137605,
      -0.010422095,
      -0.015293789,
      0.023979578,
      0.023657393,
      0.007242084,
      0.0016155286,
      0.023498453,
      0.0021306747,
      0.040898193,
      -0.14751403,
      0.004121166,
      -0.011900428,
      0.0024646758,
      0.0018163286,
      -0.0065313843,
      0.0026837988,
      -0.025835762,
      0.014070061,
      -0.009629626,
      -0.00084613694,
      -0.01672145,
      -0.018807529,
      -0.0071036727,
      0.023721747,
      0.1414652,
      -0.01869041,
      0.016839176,
      -0.01874783,
      -0.011431883,
      0.00088889565,
      -0.038173944,
      -0.015982548,
      0.007857196,
      -0.006600607,
      -0.0044141803,
      0.010519926,
      -0.008233854,
      0.011939668,
      0.0025429523,
      -0.02366687,
      -0.031262167,
      0.0060903584,
      0.027026147,
      -0.013070798,
      -0.029901871,
      -0.023586726,
      0.010214079,
      0.00582093,
      0.002473995,
      0.020595614,
      0.0021233093,
      0.013322421,
      0.005052933,
      0.007150497,
      0.0042464426,
      -0.006586621,
      -0.0038130193,
      -0.0045810184,
      -0.015840745,
      -0.0041757394,
      -0.0410013,
      0.015853846,
      -0.008133562,
      -0.0037994273,
      -0.0034158127,
      -0.008829484,
      -0.0024144852,
      -0.010374784,
      -0.00025229223,
      -0.0074341893,
      0.004838773,
      0.0051674563,
      0.00081027846,
      0.011635094,
      0.00882742,
      0.018549807,
      0.007028435,
      0.0054843943,
      -0.0024097327,
      0.015496209,
      0.023909546,
      -0.016727546,
      0.0081738895,
      0.0019040554,
      -0.006851054,
      -0.020983784,
      0.017246,
      0.009444116,
      -0.005821084,
      -0.00582476,
      -0.0040878714,
      0.0067200945,
      -0.008370909,
      0.02470403,
      -0.006473922,
      -0.014010559,
      0.009226278,
      -0.0023454013,
      -0.01893089,
      0.0033700974,
      -0.0030504093,
      0.004318252,
      -0.0067614582,
      0.0062168655,
      0.0010527564,
      0.003947789,
      -0.02348725,
      0.043027595,
      0.007928262,
      -0.018701218,
      -0.015799364,
      -0.0059916074,
      -0.03507004,
      0.008197078,
      0.0014732825,
      0.018519573,
      0.013782042,
      0.008875931,
      -0.011053703
    ]
  },
  {
    "id": "genai_cohort_python_08_Dictionary_in_python_vtt",
    "content": "All right, so first of all, let's close this and then make sure that you have reviewed us. Your review is truly important for Udemy. And without the reviews, the Udemy course don't grow much. That's why I'm reminding you again and again, I don't like it, but I have to do it. All right, so the next topic that we are going to work is dictionary. So why does dictionary exist? Once you understand the meaning of it, then you'll be probably okay. That okay, why this exist? So so far whatever we have seen, like for example, we have seen the list exist. The whole point of list being existing here. So for example, let's just say we choose Ginger and we choose Lemon and all of this. There is no way of pointing out that hey, where is Lemon? Or is this. What type of this? So in order to address any one of them, we have indexing system. So we have zero and then we have one just like this. So we have a zero. Come on, don't do it like this. So we have indexing based on this. So we have this zero here. And if we have one here just like this in no matter what happens, I have to always call this from the number zero. This one always from the number one. But it would be really nice that if you have something which is named based indexing, I can call it as something like name. Or for example you are using or you are storing another things in the database. For example, I want to call this as Hitesh and I want to call this one as my last name. So there should be a way that I should call it as. Instead of and I should be able to call this I don't like this one here. I would love to call this as first name and I can point the first name to this. It would be super awesome. And that's exactly what dictionary does it. It gives you named argument. You can actually store the data just like this. But each data will be pointed through the name instead of the zeros and one. That is all. That is all your dictionary is about. And why do you go like this? There we go, dictionary. So let's go ahead and code it out. It's a super simple piece of code. We will call this one as chapter Py quite far, isn't it? In the journey. And I think we should rename this bothers me a little bit. Oops, don't want to delete it. Let's rename this and I want to call this one as chapter Okay, so how do we have a dictionary in us. So first of all let me close this and let's just say you have chiorder and you want to store them in the dictionary. You call dictionary just like this, then a parenthesis because it's a function. And then you simply define that. Hey, the type is going to be this one is masala chai. And then we want another one. We have size and the size could be large. What else information you want to store? Maybe sugar information, how much sugar you want to have. So there we go. Now this actually makes my list much easier. This is still list, but it is a dictionary. So it's a dictionary list and I can store my information, which gives me much more idea. And I'm pretty sure you are wondering how does it look like when we print this up? Always remember in the dictionary order doesn't really matter. Masala chai could be first or sugar could also be first because we reference the element by their name. So we're going to call this one as chai order just like this and we'll say chai order. Let's go ahead and print this out. So we'll just go ahead and say this one is one. There we go. So we can see we have the chai order. Then we have type, masala, chai, size, sugar and all of them. This is much better of information. Now let me walk you through more of how we add the data. Accessing data. This is just a brief overview of it. Let me go in depth of this now. So for example, we have a chai recipe. Recipe. There we go. We have chai recipe and in this we have an empty dictionary. This is another way of creating the dictionary. If you have data, use dict or you can use this curly braces as well. But this is the most common way. Now in each of this chai recipe I want to add more data. The way how we add the data is by square brackets. Then name your key. This will be my key. So this key name is, let's just say base and then value, that I want to add here is going to be black T. This is exactly same the way we call it as type or maybe size or maybe sugar. This is exactly what we are doing here. Base the value. Like it could be masala chai, it could be large, it could be two. The same as here the black T. That is it. Now let's just say we want to add one more thing, but this time instead of base. Otherwise we will overwrite it. Let's call this one as liquid. And I want to have a liquid base of milk. I don't prefer it, but let's just say we have it now. How do we access the data for this? We'll print this just like this and we will say recipe base and I want to access just the base, not the liquid. So all I have to do is say chai recipe and again use the same mechanism how you added the data. So there we go. We add the base again. Don't worry too much about the single quotes. Double quote. That is totally fine both way. It is absolutely fine. If I go ahead and open this up, clean this and run this notice here we get the black T, not the whole milk and everything, just the black T. This is how you access this. You can definitely go ahead and remove some of the data as well. We use del del to delete any component inside the dictionary. So how do we do that? We simply say, hey, chai recipe inside you there is known as a, liquid and I want to just remove it. You just have to provide the key to remove it. That is it. Now let's just say if we go ahead and print out the chai recipe, not the base, I want to print out the whole and we'll just call this as recipe and we'll have another one. So one printout we are doing before deleting and after deleting the liquid, we are doing one more printout to just verify the claim that we have made just right now. So we'll clean this up. There we go. We have a base black T. Then we have a liquid key with the milk. And now we can see we have just the base black T because we have removed, we have removed the liquid. That is it. Super simple. Remember, there's nothing too much going on in this one. No surprises, no magic. And yes, we can also do membership testing in this one as well. Whenever there's a data, there's a list almost everywhere. When there's a list, however, it is contained in the square brackets and curly braces and set. You can perform membership test. Let's go ahead and do this. So we are going to say like this and we will say is sugar, in the order you want to test now whether sugar exists in your very first element, the chai order, is it available or not? So we can do a pretty easy stuff. We can just go ahead and use the curly braces and I will just ask for sugar in wherever you want to ask. I want to ask for chai order. Again, super simple. We have seen the membership testing many, many times. So true, because sugar is there and no worries at all. Now there are a lot of things that you can do with this. I will actually go ahead and walk you through with this. So let's just say we redefine the chai order. So I'll just go ahead and have a new order in this one. So there we go. This time the new order is type ginger chai. We have a size of medium sugar, just like we have at the top. So I've just redefined the new. It's a new order. Now we can actually check what are all the keys, what are all the values, what are the full order items. All of this. This is something that you will be doing quite a lot and this is super easy to work on with. So I will just go ahead and say I want to print and I will say order details. This time I want to print the keys only. So if you want to print just the keys, it is super simple. I can just have the chai order and I have dot. This gives me all the things that I can do. And yes, we have already seen the pop. The way how POP works in the list that exactly how it works in the dictionary as well. Items, keys, get from keys. There's a lot of things. Update the things. If you want to update certain things, values. All of this when you simply run the keys. And again this is a method so you have to just go ahead and put parenthesis after it. You will get all the keys. What do I mean by keys? The type is a key, size is a key, sugar is a key. And similarly I can get all the values as well. So I can just go ahead and say values. And again this time we'll say values. So we have separated them, each one of them that hey, this will be my printout for all the keys. And this will be my printout for all the values. If you want to get all the items. Yes, there is a way or a detail. I'll just say items and you guessed it right, there is items here as well. Let's go ahead and print it out so that we can see what's happening. There we go. A little bit hard to see, but again, just pay a little attention. This is Order details Keys 1, these are DICT keys. So dictionary keys. Again, there is a way how you extract each one of them. We have to go through with one of them known as loop. But again you get the point. We are just getting back. A list means an array and it has type, size and sugar. Then in the values notice here, order detail values, we are getting values which has ginger, chai, medium and one. Pretty nice. Now when we are getting the order details in the items format, then we get all of this. So we have an array. Notice the data type. That is the most important part. A lot of people study the data type. Don't focus on the data type. Don't do that. So we have a whole list outside of this. But inside the list we have a tuple. We just studied about it. In the tuple we see a key pair. The type is ginger chai, the size is medium and the sugar is one. So we have a tuple of each one of them. And this is really useful. It's really beautiful. So let's go ahead and do a couple of more stuff. I will just comment this out so you can select all of them and press slash so that it gets commented out. Otherwise it will be keep on printing. I don't want it to be. I don't want to execute this whole piece. So I can just use last item and I can use the chai order and I can pop an item. I will just go ahead and say pop item. Not just pop, I want to pop the whole item. This will obviously remove this thing, the entirety of the thing. And you can actually print this as well. I will print just like this and I will say removed last item. And the value is last item. There we go. Similarly, we can actually pop the sugar level as well. If you want to pop, some like. I will give you the example. I think first let's print this out. That will be better. So removed item, sugar is one. So now in our order there is no sugar item. So let's go ahead and use this. We can actually use it in quite a lot of ways. But I think you got the idea. I should not be confusing you with more example pop item just removes the item. That is it. Now you can also go ahead and update certain things as well. Just like this. So let's just say I have a simple and a small example. I'll just go ahead and bring it up because don't want to write it. So let's just say we have spices. We have previously written this. No big deal. We have cardamom. We have crushed ginger will be sliced. So again, key value pair could be anything. Key can be anything. Value could be anything. Almost anything. This time my key is just like this, this one is value again. So a lot of things can happen. Now you want to update certain thing. Maybe, you want to update extra spices or you want to update a chai recipe. Remember we have a chai recipe which has a base liquid. Now you have more detail. So what happens when I go ahead and say, hey, chai recipe, I want to go ahead and update you. And while updating, I'm providing you these extra spices. Yeah, that's an interesting observation to have. And again, we can just print it out. So let's just say we simply go ahead and remove this. And we will say updated chai recipe. Updated chai recipe. Recipe. There we go. And we will say chai recipe now. There we go. So this is what we have, chai recipe. And again, we will investigate this first, try to predict what might happen. That's always a good idea. Let's go ahead and run this. And there we go. Updated chai recipe. We have a black T, we have cardamom crushed and we have ginger. Pretty good. And if you're wondering, hey, in the chai recipe, don't we have the liquid as well? Don't forget we have updated the code. The liquid was removed. So again, no worries on that. And we have other things as well. Like safely getting the values out of this. Let's just say we have, we want to get some of more things. Let's just say there is a customer note I want to get out of the order. But hey, when we design the order, we have type ginger size, medium, sugar one. But there's no such thing as customer order. So what will happen if I try to print this out or I want to get this? Let's just say I want to get size. So I'll just go ahead and say size is going to be equal to or I will just say better would be chai size. And you know this already that from the chai order I can extract any one of them. So I'll just extract the size. And if I try to print this chai size, that is okay, I will update the message as well. Chai size is. Now focus on this. This is a good code. No problem at all. If I go ahead and print this out, all good choice. Size is medium. But what about if I try to get something which is not yet there? Maybe I want to get customer note. Does customer note exist? Probably not. Or maybe customer underscore note. What happens when I try to grab this? If I grab this, I crash my entire application. It's not working anymore. So there is a safe way of getting the values out of this. So in this case I would use that hey, in the chai order, I would like to use a method that is dot get what it does. It safely gets whatever you're trying to get. For example, I want to grab a customer note and I will just go ahead and call this one as note. We'll still call it as chai size or I'll change this one as well. But if I don't get the note, I mark this as no note. No note was given to by the customer. I think instead of the chai size now it's better to call it as Customer Note. And then I can just print this one as Customer Note. Customer note is. And what you will notice that now the app is not crashing but it's saying hey, no note was available. And just to give you an example, instead of the no note you can actually provide that hey, I want to grab the size. The message doesn't make sense but you will get the point. What I'm trying to say that hey, it's medium so it gets the thing which you want but it doesn't crash. Instead of if it doesn't find it. I can provide the default value here, which is pretty cool. I like this approach. And there are a lot of things that you can do with the dictionary. Again you have to read a little bit of the docs and you can provide a lot more information in the dictionary. And one last note before we wrap this up video. All the thing that we studied in the sets. Yeah, these all things actually apply to dictionary as well. I don't think there is a need of again kind of redoing the things. But yes, all the union operation that you studied and all these things, yes, they do exist in the dictionary as well. I think that is more than enough information. No point of doing it again and again and again. I hope this lecture was interesting for you. You enjoyed the learning part of the data types. We will do more operations on this data type. Right now we are just studying them. That okay, this is another type that exists. That is it for this video. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "08 Dictionary in python.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/08 Dictionary in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.02054421,
      -0.022506544,
      0.017893288,
      -0.049682744,
      -0.009715668,
      0.0008447357,
      0.0022504062,
      0.023420544,
      -0.0113223875,
      0.0010363214,
      -0.031659964,
      -0.014903298,
      0.013609775,
      0.015207769,
      0.1185981,
      -0.013785345,
      -0.005176081,
      -0.0063080317,
      -0.012761819,
      -0.0199028,
      -0.016184786,
      0.023066008,
      0.012712611,
      -0.02210209,
      0.017410127,
      -0.010938232,
      0.009714676,
      0.008456916,
      0.018801209,
      -0.023454938,
      -0.02438076,
      0.0051037758,
      0.010970787,
      0.028188607,
      0.004207129,
      0.008475146,
      0.008738428,
      0.0074595776,
      -0.028647799,
      0.0009966935,
      -0.0061740056,
      -0.0064214156,
      -0.014425001,
      -0.008146252,
      0.019144475,
      -0.027304422,
      0.008146426,
      -0.009798488,
      -0.014155371,
      0.010657955,
      0.013273938,
      -0.013165403,
      -0.009363451,
      -0.18219846,
      0.037746448,
      0.0013060559,
      -0.020949949,
      0.0016686828,
      -0.004663842,
      0.007818756,
      -0.043467216,
      0.014285363,
      -0.048820812,
      0.0036136955,
      0.0028402142,
      -0.020236924,
      0.023656463,
      -0.00861521,
      -0.00027901676,
      0.002466833,
      0.020616936,
      0.0007305322,
      -0.0042460565,
      -0.009302843,
      -0.015179045,
      -0.023018098,
      0.013632155,
      -0.021982184,
      -0.0065904967,
      0.013850782,
      -0.011964107,
      -0.005889269,
      0.00052235805,
      0.020506423,
      -0.0010714572,
      0.010148237,
      -0.0038799972,
      -0.01643963,
      0.0029117588,
      -0.008967793,
      -0.013906379,
      -0.009864107,
      -0.0018288351,
      0.0015724823,
      -0.007971538,
      0.0029297613,
      -0.00049603486,
      0.00023386908,
      -0.010550646,
      0.009609717,
      0.015267708,
      -0.015520424,
      -0.015444435,
      0.00030857418,
      -0.0020791611,
      -0.001544851,
      -0.008545977,
      -0.02033552,
      -0.008490479,
      0.0026401088,
      0.0056463927,
      -0.0070645898,
      0.015462334,
      0.018225592,
      0.01909481,
      -0.19634363,
      -0.0016374188,
      -0.02000668,
      -0.020723855,
      0.015862865,
      -0.0062657814,
      0.0015914317,
      0.00044815984,
      0.005577344,
      -0.032464202,
      0.0019373106,
      -0.00030431454,
      0.023452593,
      0.008745393,
      -0.01870886,
      -0.0286907,
      -0.018578622,
      -0.015214539,
      0.016860282,
      -0.0074073304,
      0.014358045,
      -0.0243485,
      -0.011517209,
      -0.018392552,
      -0.008117166,
      -0.003414376,
      0.018368866,
      -0.024605224,
      0.020629896,
      0.006491948,
      -0.01018074,
      -0.0119215585,
      0.008327736,
      -0.03204135,
      -0.016196838,
      0.02167952,
      -0.01089631,
      -0.00045741285,
      -0.0022687411,
      0.030603925,
      -0.015089508,
      0.0041323197,
      0.0026371211,
      -0.001683159,
      0.006245765,
      0.01645299,
      0.012685696,
      0.006966923,
      0.0044917557,
      -0.0051495098,
      0.0045844773,
      -0.029414104,
      0.00051870005,
      0.044481058,
      -0.009720073,
      -0.011550649,
      -0.011404535,
      0.007422218,
      0.001066489,
      -0.017118966,
      -0.007248678,
      0.010351361,
      0.005207751,
      0.010464913,
      -0.01629304,
      0.0008412298,
      -0.03179251,
      0.0068884282,
      0.011144447,
      0.0069440403,
      0.0021594388,
      0.011349764,
      0.0101351235,
      0.008635508,
      0.017169876,
      -0.00038622326,
      -0.0048348554,
      0.029272124,
      0.004184289,
      -0.009668831,
      -0.020963823,
      -0.012416164,
      0.013895769,
      -0.0025206774,
      0.026548812,
      0.024513109,
      0.004345132,
      -0.010997644,
      -0.023777131,
      0.0443733,
      -0.010100253,
      0.025390798,
      -0.02094815,
      0.033137824,
      0.0052748835,
      -0.008854971,
      -0.0049058404,
      0.026265744,
      -0.005052209,
      0.021348791,
      -0.017452562,
      0.013860858,
      0.0038310175,
      0.00423504,
      -0.011350729,
      0.01068062,
      0.0026058776,
      0.01373172,
      0.025385452,
      0.00754021,
      -0.0060237935,
      -0.004690185,
      -0.0046257074,
      0.013690811,
      -0.013154826,
      0.042183768,
      0.00003114959,
      -0.020472202,
      -0.012683101,
      -0.01420018,
      -0.011609093,
      -0.011462687,
      0.010433644,
      0.013448596,
      -0.0042966376,
      0.0056198193,
      -0.0069321385,
      -0.0014691715,
      0.011363763,
      0.022689244,
      -0.015106514,
      -0.007937337,
      0.006740564,
      0.006556399,
      -0.012107912,
      -0.011594916,
      -0.004716468,
      0.008075083,
      -0.019301414,
      -0.0030243099,
      -0.023181986,
      -0.027168462,
      -0.0189408,
      -0.018951897,
      0.0027134917,
      -0.01859653,
      -0.02521685,
      -0.01958123,
      -0.004758064,
      0.02873866,
      -0.0057633114,
      0.0065819775,
      0.010999412,
      -0.005523822,
      0.026062736,
      0.02774791,
      0.011766335,
      0.0051965625,
      0.022629581,
      -0.023286598,
      0.010995175,
      -0.108090565,
      0.014290344,
      0.0062733693,
      -0.0073184366,
      0.009301638,
      0.0155310435,
      -0.011831042,
      0.0097794635,
      0.0013092615,
      0.021436824,
      0.008343413,
      -0.021154268,
      0.032033607,
      -0.0123796025,
      -0.002006962,
      -0.018761575,
      -0.0024385157,
      -0.012530913,
      0.022392852,
      -0.010192412,
      0.00833954,
      0.002042235,
      -0.00090213853,
      -0.019508753,
      0.010074009,
      0.002050128,
      -0.010277617,
      0.028710589,
      0.017017595,
      0.0076290644,
      -0.017939577,
      0.032056343,
      -0.0016507726,
      -0.0050564925,
      -0.009165325,
      0.0054710777,
      -0.006310836,
      -0.017236454,
      0.005705396,
      -0.007814148,
      0.022264106,
      0.0045155836,
      0.0004692854,
      0.024852352,
      0.004512066,
      0.015515787,
      -0.006957589,
      -0.012545314,
      -0.0171388,
      0.0010721986,
      -0.012682401,
      0.007834682,
      0.020196447,
      -0.009718029,
      0.0050455253,
      0.0025487717,
      0.0020011743,
      -0.01548333,
      0.0034838028,
      0.0055241673,
      -0.0056731296,
      -0.0017886248,
      0.015041476,
      -0.035369724,
      0.007910912,
      -0.021160815,
      0.008962888,
      -0.014527836,
      -0.0039615943,
      0.00074774405,
      0.0067808945,
      -0.009521294,
      -0.013319604,
      -0.0038391717,
      -0.0029049136,
      0.0019316486,
      0.0010664173,
      -0.01013368,
      -0.020503348,
      0.032450967,
      0.02050722,
      -0.020538544,
      0.008630767,
      0.009943388,
      -0.000112017646,
      -0.006022124,
      0.0032300442,
      0.0071390383,
      0.0012947137,
      -0.02129224,
      0.012782218,
      -0.0021375015,
      0.0005461419,
      0.0059663854,
      -0.028255355,
      -0.006168369,
      0.00019874731,
      -0.027802378,
      -0.0019693582,
      0.016825503,
      -0.009957747,
      0.0010103572,
      -0.027111897,
      -0.016183315,
      0.00943938,
      -0.004829907,
      -0.027610168,
      -0.016453588,
      0.0032661213,
      -0.027201775,
      -0.0084429355,
      0.008987083,
      -0.028487252,
      -0.016281322,
      -0.006146916,
      0.010638123,
      0.025065938,
      0.01944533,
      0.0049248734,
      -0.027654085,
      -0.009095564,
      -0.006946942,
      -0.009772918,
      0.00084884086,
      -0.0050236033,
      0.0008586487,
      -0.02350842,
      0.011531222,
      -0.004816593,
      -0.026136778,
      -0.02562628,
      0.0058763325,
      -0.028305475,
      -0.017629808,
      -0.014321872,
      -0.038237087,
      0.015513067,
      0.0077330032,
      0.017878892,
      0.010489199,
      -0.013189762,
      0.0067216493,
      -0.00614647,
      0.018014334,
      -0.0011452914,
      0.01180947,
      -0.008570087,
      -0.014138546,
      -0.00499991,
      -0.024499554,
      -0.020162988,
      -0.023745762,
      -0.019812576,
      0.0016445272,
      0.0101171965,
      0.015675232,
      -0.009005361,
      -0.0109509295,
      -0.028945128,
      -0.026888544,
      0.0063733766,
      0.006803409,
      -0.02991113,
      -0.0023007614,
      0.028214036,
      0.007188797,
      -0.0013386122,
      0.0073180418,
      -0.004285804,
      -0.0052791107,
      -0.0056194854,
      -0.016599996,
      -0.036386874,
      -0.013905209,
      0.011637469,
      -0.0051198215,
      0.007057107,
      0.002207865,
      0.00523919,
      0.020611545,
      0.018602783,
      0.0015446325,
      -0.00977521,
      0.00046262523,
      -0.0060758824,
      0.007246969,
      0.023702137,
      0.013603412,
      -0.021915209,
      0.0011100057,
      0.00044849893,
      0.01402019,
      0.00026859797,
      -0.00073873636,
      -0.01309427,
      0.0013906284,
      0.0069550998,
      0.006962548,
      0.007216527,
      0.0067103943,
      -0.0010208864,
      0.004558563,
      -0.00017302211,
      -0.016969081,
      0.0064075748,
      -0.030466953,
      -0.0034367654,
      -0.037418935,
      0.0010551077,
      0.026230004,
      0.0027001458,
      0.02639042,
      -0.006961766,
      -0.00040983642,
      0.0037589963,
      0.028181696,
      -0.010872087,
      -0.0063314615,
      -0.03535815,
      0.0039908197,
      0.016326042,
      -0.015227267,
      0.0018595714,
      -0.015912386,
      0.013510749,
      -0.0021070144,
      -0.014210532,
      0.012885365,
      0.009239161,
      0.013796248,
      0.0093629155,
      0.0016373029,
      0.005397182,
      0.018753355,
      -0.011591142,
      -0.01887664,
      0.019958442,
      0.020620773,
      -0.0007383476,
      0.024651844,
      0.0025386873,
      -0.006461806,
      0.0010410025,
      0.0058859168,
      -0.0038909535,
      -0.015699925,
      0.0045304527,
      -0.009725373,
      0.0070708073,
      -0.0074464097,
      -0.008382711,
      0.01904115,
      -0.020147372,
      -0.009616867,
      -0.0008648607,
      0.016806506,
      -0.0017118286,
      0.0018746109,
      -0.00030837176,
      0.006906076,
      0.006449428,
      0.01786464,
      0.00489765,
      0.004602755,
      -0.010022908,
      0.010524508,
      -0.01730499,
      -0.0041918745,
      0.0081800455,
      -0.12152391,
      -0.022934226,
      -0.006769736,
      0.0027380819,
      -0.005119126,
      -0.009579702,
      -0.020878676,
      -0.030712446,
      -0.010216355,
      -0.013027163,
      0.019387376,
      0.0008433209,
      -0.011132125,
      -0.012591108,
      0.006574949,
      -0.02321245,
      0.013413513,
      0.020221248,
      0.014074408,
      -0.010105269,
      -0.0132733695,
      0.005051102,
      -0.020573832,
      -0.0049959975,
      -0.020842327,
      -0.03742547,
      0.016755847,
      -0.006574228,
      0.0038708656,
      -0.001493543,
      -0.032452628,
      -0.004786585,
      -0.008494133,
      -0.0009445598,
      0.0099836355,
      -0.0048215794,
      -0.0171311,
      0.013293686,
      0.021049242,
      -0.001264071,
      -0.0058848895,
      -0.0020579235,
      0.022305246,
      0.008448509,
      -0.003910678,
      0.019133927,
      0.040593483,
      -0.017046701,
      -0.009540587,
      0.026144804,
      -0.03408959,
      -0.015254457,
      -0.012393281,
      -0.028906358,
      -0.013496116,
      -0.0012410689,
      0.012998668,
      -0.008973043,
      0.002861349,
      -0.0055315886,
      -0.008021677,
      0.022245958,
      0.0069239633,
      0.034007125,
      0.0040928666,
      0.021148259,
      0.033915404,
      0.0035917573,
      -0.01421077,
      0.0031783814,
      0.006094227,
      0.011644592,
      -0.0040795454,
      0.011748298,
      0.009918828,
      0.00015087538,
      0.0052465377,
      -0.008109805,
      -0.003137491,
      0.0035038718,
      -0.033727646,
      0.004652025,
      -0.06330276,
      -0.026092729,
      0.02030406,
      0.0075422064,
      0.0019775731,
      0.033414368,
      -0.011060036,
      0.0024748517,
      0.011979059,
      -0.0057247644,
      -0.021407392,
      -0.015599033,
      0.005370471,
      0.0031483774,
      -0.026945734,
      -0.0043133474,
      -0.004049142,
      -0.013409707,
      -0.020857116,
      -0.005537354,
      0.00597161,
      -0.014659099,
      -0.0035549365,
      -0.011017689,
      0.006688417,
      0.025529847,
      0.0023790388,
      3.7681122e-7,
      0.0043775374,
      -0.004311606,
      0.014119566,
      -0.15478425,
      -0.024475055,
      -0.009588439,
      0.0021824774,
      -0.0022081127,
      0.0011977407,
      0.009019192,
      -0.01733322,
      0.027620034,
      -0.010854888,
      0.013557016,
      -0.0205493,
      -0.027300308,
      -0.0018751867,
      0.01339173,
      0.1323753,
      -0.007839818,
      0.016021889,
      -0.019084267,
      -0.002121848,
      -0.013558653,
      -0.026322529,
      -0.0026181552,
      -0.007163906,
      -0.014560169,
      -0.004769307,
      0.0013307472,
      -0.018602025,
      0.0178159,
      0.007106893,
      -0.008607154,
      -0.007191631,
      0.010601125,
      0.02729064,
      0.0022841352,
      -0.008495577,
      -0.0070829266,
      -0.0030860624,
      -0.008695712,
      0.014175907,
      0.035583448,
      -0.0017908325,
      0.02307594,
      -0.0026725468,
      0.015510815,
      -0.0043362994,
      -0.0069638574,
      -0.013633574,
      -0.020127818,
      -0.00630021,
      -0.006217441,
      -0.037231464,
      -0.007137761,
      -0.004904942,
      -0.011844962,
      -0.0016780434,
      0.011917885,
      0.022300981,
      0.002835135,
      0.018233374,
      -0.014545644,
      0.0028472105,
      0.015895892,
      -0.002639305,
      0.010343097,
      -0.015336682,
      0.02585023,
      0.009542686,
      0.0064090583,
      -0.00082918257,
      0.016369123,
      0.023640776,
      -0.008242013,
      0.0072817337,
      -0.0040476862,
      -0.024719976,
      -0.015208103,
      0.0270408,
      0.012781282,
      -0.001558675,
      0.0094098095,
      -0.00045128545,
      0.0033357195,
      -0.013230032,
      0.026958002,
      0.0072478526,
      -0.009609585,
      0.014099349,
      -0.008525389,
      -0.009877429,
      0.012638369,
      0.00541061,
      -0.018754961,
      0.020658674,
      0.0041402387,
      0.014078737,
      0.008419544,
      -0.018955275,
      0.04130301,
      0.0028571687,
      -0.017295007,
      -0.0033191792,
      -0.0061943023,
      -0.0414626,
      0.0027414858,
      -0.0039187404,
      0.0042960085,
      0.031133275,
      0.0012330834,
      -0.0109628085
    ]
  },
  {
    "id": "genai_cohort_python_09_touch_on_advance_data_type_like_collections_vtt",
    "content": "Hey there. Welcome to the video on advanced data type. To be honest, I don't want to make this video yet because this is too early for you just getting started with Python now, these advanced data type do exist, but they don't exist in Python itself. You have to bring in code that is written by somebody else. That means we want to bring in some third party modules into our code. The module is just a fancy name. You are bringing somebody else's code in our computer or in our program rather. And you shouldn't be watching this video to be honest. But still, I don't want to keep this knowledge just with me, I want to share it with you as well so that maybe later on, probably after having six month into the Python experience, you want to have a taste of it, you at least get the idea of what I'm talking about. So I will be just showing you briefly of some of the code and then we will not discuss them too much. But still you will have an idea that okay, this, these things do exist and I probably can work on them on someday. That's the whole goal, that's the whole idea about them. So first of all let me just get this, that what are the advanced data types that are available for us in this? So there are a lot of them. First of all is date time. Yes, it includes date and time both at the same time. But there is a separate one known as just for time. There's also a data type known as calendar and this is little bit strange calendar. Hope I wrote it correct. But, but yes these data type do exist and they don't are not default, they are not being used that much. But you can actually manipulate date, you can manipulate date time, you can manipulate time and you can manipulate calendar as well. There's also a package which actually can works with something known as time delta. What is this time delta? Maybe you want to discuss some duration duration between when order was fetched and the order was delivered to the user. Or maybe just how much time it took for your program to run. There are a lot of deltas. Deltas simply means difference between the two things. So yes, you can work with time deltas as well and there are some of the utilities that you bring in. For example there is one utility known as arrow. Yes we import this so import arrow. There is another one which is known as date util. We can actually work with them and go with this. I will just show you briefly a little bit idea of how the arrow or the date util works. I think we should separate this out, otherwise it can be a point of confusion. So arrow is one separate one and another one is date util. So make sure you remember these are not the core python. It's kind of a core Python now, but you have to import them and whatever the code we have written so far, we don't have any import statement because we don't have the knowledge of how the import works. So I'll just go ahead and briefly show you. It was not supposed to be a part of the chapters, but still, just to make sure that you understand that, yeah, a lot of things can be done. So the step one is go ahead and import arrow Arrow and once you've imported the arrow, now you can actually do a lot of things and please don't suggest me the things because most of the time you don't do a good job. So arrow, as soon as you put this, you have a lot of things. I hope the suggestion will be there. But there is one thing that you can use UTC now it gives you a UTC time and you can store that and can work with a lot of things. Maybe you want to store that like, brewing, brewing, underscore time. That is your time. And maybe you want to convert this time later on so you have the option of that. Hey, I have this brewing time and now I want to convert it into some another time zone, so you can just mention it like this. And maybe I want to convert it into Europe, slash, maybe roam. If you know any other time zone, go ahead and fill that. So it just converts it into time zone. Not only that, we have a lot more things available to us in the world of data type. This is just one time is very common and most easy one. But there is something known as whole thing available to us. This is mostly advanced data type known as collections. Yeah, collection is a big thing in the python. If I'll just show you directly. I don't think so, I can actually show you here, I have to search it again. Collections, Python. If I just search for it. There we go. Official documentation. So we have these things available. We have named Tuple. We don't have it, but we can actually bring it up. We have named Tuple, we have deck. Yes, this is called as DEC, not DQ. I'm 100% sure about it. We have chainmap, we have counter, we have ordered dictionary, we have default dictionary, user dictionary. There's a lot of them and you can use any one of them. But there is a way how you actually use Them right now we don't have the capacity to use it but still I'll show you. Usually I keep all of my imports above but for this just example I'll make an exception. So from collections you can actually import whatever you like. Probably you like. Maybe you want to bring the named tuple and want to see how that works. Now this will just give you additional data type. You have to bring it at the very top, otherwise you cannot use it. We can use strings, we can use dictionary, no import was required but for this it is required. So for example maybe you are bringing chai profiles. Should I use it like this? Chai profile it is good Chai profile and what we are going to do is in the chai profile we'll use the named tuple and then we can actually use this named tuple just like this. So what difference does it make? Now since my tuple is going to be referred by a name, I can provide a name like Chai profile. This will be the name of my tuple, not the variable and I think we should keep it just like that. And then I can have my tuple and the way how you do it is iteratable. That means an array or a list just like this. So we'll have a flavor, what else? We can have aroma, what else? Color maybe all the things and this is how you do it. Now you just print the profile of this. So a lot of things can be done. But yes again each of them are built on top of your default things. Like this is a string we have studied about them, this is a list, they are built on top of that. What nametuple does is it brings it up all together. That's all it does. Now usage and everything is very use case sensitive. You have a special case where you want to use them. Forcing them right now to learn is not a good idea. So that is why I say this is just a bonus extra lecture. We have more data types in available in Python and surely there is no end of it. But right now is not the good time. We will surely cover them up and later on we'll discuss them. And if I forget, don't forget to tweet me about it that hey, we discussed something about it. I would love to enhance this course as one stop solution to learn Python. So don't hesitate to tweet this out. But again right now this is more than enough data type knowledge for you. Now we need to learn how we can manipulate the data data storage. We are all clear now what kind of processing we can do with the data. That is our goal. Now, let's go ahead, move on to the next video and talk about that in there. And again, don't forget to review us.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "09 touch on advance data type like collections.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/09 touch on advance data type like collections.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.028232567,
      -0.015518964,
      0.017369373,
      -0.048562445,
      -0.019385457,
      0.0045815175,
      0.013118996,
      0.019597337,
      0.0060866373,
      -0.008893318,
      -0.020238958,
      -0.007940098,
      0.01161989,
      0.035895538,
      0.11560081,
      0.0072969706,
      -0.020777574,
      -0.02383294,
      -0.007908099,
      -0.0034474994,
      0.0010590252,
      0.005527742,
      0.0039579757,
      -0.01118224,
      0.015960941,
      -0.010280189,
      -0.006230424,
      -0.020088177,
      0.020602385,
      -0.008452184,
      -0.014013056,
      -0.0050544487,
      0.0019128311,
      0.008084082,
      0.0125941085,
      0.006639678,
      0.008393874,
      0.0053416793,
      -0.004811479,
      0.005803423,
      -0.021520669,
      0.005369109,
      0.005959476,
      -0.008069204,
      0.007996444,
      -0.0121115865,
      0.007588051,
      -0.02446113,
      -0.0092283115,
      0.016803278,
      0.007959049,
      0.0021544395,
      -0.0039523556,
      -0.17594554,
      0.039037306,
      0.008896505,
      -0.0023353088,
      -0.001855206,
      0.004640399,
      0.009638248,
      -0.031835586,
      0.020181919,
      -0.038308788,
      0.019988,
      0.008252217,
      -0.021785177,
      0.008438544,
      0.0064990246,
      -0.0025147349,
      0.0030118534,
      0.027217798,
      -0.022007162,
      -0.029571759,
      -0.022597522,
      -0.006591466,
      -0.027084343,
      0.0118131405,
      -0.012477005,
      -0.020665396,
      0.020686943,
      0.00033443636,
      -0.013900278,
      -0.016374525,
      0.003451617,
      0.013306294,
      0.0052425824,
      -0.012734995,
      -0.013110739,
      0.0009838575,
      -0.007710393,
      -0.0148436455,
      0.004809685,
      -0.002822879,
      0.015640058,
      -0.010589863,
      0.009316801,
      -0.007180756,
      -0.00094953657,
      -0.012231318,
      -0.00884749,
      0.01628893,
      -0.0038726279,
      -0.016339792,
      -0.0152392,
      0.0030979533,
      0.013800174,
      -0.015972225,
      -0.0037605437,
      0.0016573998,
      -0.0030723722,
      0.012593533,
      -0.018407352,
      0.0032363937,
      0.038377758,
      0.020239111,
      -0.18632822,
      0.0064395084,
      0.015616596,
      -0.021304647,
      0.007326844,
      -0.0062505356,
      0.008235505,
      -0.009390383,
      -0.0045138397,
      -0.025420638,
      0.0037573026,
      0.0029000936,
      0.016578995,
      0.010517564,
      -0.003879,
      -0.0067398096,
      -0.010308328,
      -0.00021618117,
      0.012788819,
      -0.016977852,
      0.00646048,
      -0.018853877,
      -0.0030115873,
      -0.010781417,
      0.0032200825,
      -0.0035006308,
      0.020029165,
      -0.0063322443,
      0.019488156,
      -0.0016265402,
      0.00095841987,
      -0.0010967782,
      0.0036076987,
      -0.02950537,
      -0.029434616,
      -0.002879353,
      -0.021912936,
      0.0037105922,
      -0.0013894469,
      0.028923305,
      -0.02869771,
      0.0038751673,
      0.0051045367,
      -0.0021691066,
      0.002641865,
      -0.009441041,
      -0.0057148812,
      0.0033525522,
      0.008872644,
      -0.002105947,
      -0.002092593,
      -0.03556894,
      0.004515204,
      0.04873291,
      -0.0071672215,
      -0.015265049,
      -0.02123016,
      -0.021810832,
      0.002805108,
      -0.026466921,
      0.013237274,
      0.0047840024,
      0.002974944,
      -0.0017167773,
      -0.039665226,
      0.0020614362,
      -0.012514337,
      0.026009437,
      0.001392103,
      0.024773581,
      0.006685148,
      -0.003426195,
      0.00985567,
      0.018344287,
      0.008054157,
      -0.0019358407,
      -0.018589616,
      0.037216377,
      -0.0057281316,
      -0.010843099,
      0.009113715,
      0.007080758,
      0.021160493,
      -0.009789329,
      0.015709296,
      0.028743174,
      0.002826129,
      -0.010705273,
      -0.028974777,
      0.0080145,
      -0.012643165,
      0.0018800396,
      -0.017300555,
      0.014167739,
      -0.0064821453,
      -0.006165805,
      -0.0036597108,
      0.010060953,
      -0.015435933,
      0.024237264,
      0.0010629575,
      0.027740072,
      0.010730109,
      -0.0010918886,
      0.0035073154,
      0.0134129515,
      0.0018167023,
      0.015859678,
      0.027216453,
      -0.007513358,
      -0.017043816,
      0.0037375686,
      -0.013145515,
      -0.00105561,
      0.0041758297,
      0.010196498,
      -0.0051295413,
      -0.027491188,
      -0.014993259,
      -0.001132117,
      -0.008369912,
      -0.015210441,
      -0.0031126628,
      0.020889452,
      -0.0041208146,
      -0.012302923,
      -0.00050049333,
      0.003738445,
      0.005472914,
      0.030329129,
      -0.0059716445,
      -0.0005543313,
      0.00673965,
      0.015174316,
      -0.024958381,
      -0.012436981,
      0.0016468026,
      0.01002352,
      -0.019437721,
      0.0031862431,
      -0.0022448367,
      -0.02246732,
      0.007094046,
      -0.01570764,
      -0.011458463,
      -0.014209895,
      -0.015230115,
      -0.008203351,
      -0.014357582,
      0.017374905,
      -0.01793386,
      0.012598034,
      0.031477507,
      0.010757471,
      0.019992992,
      0.027110845,
      0.005937621,
      0.029859236,
      0.009274685,
      -0.009211727,
      0.010520944,
      -0.091468446,
      0.010178172,
      0.0001243256,
      -0.01852123,
      0.02666061,
      0.0027889323,
      -0.027813004,
      0.024830613,
      -0.010820794,
      0.014202532,
      0.01732789,
      -0.03404564,
      0.013531646,
      -0.015737271,
      -0.0084561715,
      -0.0071731796,
      -0.0109943375,
      -0.024091795,
      0.0066483547,
      0.0032244863,
      0.018545005,
      -0.01896852,
      -0.006138747,
      0.00023699469,
      0.0054095173,
      0.0050468673,
      -0.024639506,
      0.0497899,
      0.025286833,
      -0.009156771,
      -0.023501126,
      0.018757666,
      -0.010103532,
      -0.005692885,
      -0.0073649082,
      -0.0033061183,
      0.00038078421,
      -0.0161851,
      -0.005117193,
      -0.00867196,
      0.009451627,
      -0.0029442422,
      0.0131075075,
      0.036830954,
      -0.019286057,
      0.012933154,
      -0.01384978,
      0.003941261,
      -0.010208926,
      -0.008006006,
      -0.012571721,
      0.0023240303,
      0.0067557045,
      -0.007192391,
      0.025502285,
      -0.0090219565,
      -0.0039037056,
      -0.022781704,
      0.0004057374,
      0.029659262,
      0.0029358775,
      0.0031095694,
      0.0035595528,
      -0.009916382,
      -0.0012144239,
      -0.016011616,
      0.015059357,
      -0.012522259,
      -0.0032892402,
      0.0019399083,
      0.006467998,
      0.0021177165,
      -0.02241503,
      -0.012900264,
      -0.0010180594,
      0.012574123,
      0.004893001,
      -0.003912945,
      -0.009282119,
      0.03542132,
      0.018380202,
      0.0003976887,
      0.027320687,
      -0.0101835765,
      -0.017646872,
      -0.008048138,
      -0.0028847188,
      -0.006176315,
      0.0073584705,
      -0.029193139,
      0.014532601,
      0.0074661463,
      -0.009954553,
      0.00006025596,
      -0.046964552,
      0.0047566607,
      0.000743961,
      -0.037236396,
      -0.016570173,
      -0.00935105,
      -0.00687581,
      -0.0056213546,
      -0.027649457,
      0.0015572587,
      -0.0006847999,
      -0.0012019416,
      -0.023655364,
      0.005518173,
      -0.0035512953,
      -0.0032942737,
      -0.005837496,
      0.0078804875,
      -0.0036071124,
      -0.011999869,
      -0.0016238743,
      0.031777095,
      0.008023718,
      0.015663149,
      -0.005483854,
      -0.03922554,
      0.013819995,
      -0.007742969,
      -0.0019393429,
      0.009064577,
      -0.013004401,
      0.013647805,
      -0.014346787,
      -0.001037267,
      -0.0016879063,
      -0.026304679,
      -0.00088048796,
      -0.0013623467,
      -0.034650482,
      -0.017462848,
      -0.0025111751,
      -0.012528309,
      0.025557205,
      0.01627884,
      0.016668683,
      -0.005857889,
      -0.008527373,
      0.006218156,
      0.012646098,
      -0.009542392,
      -0.0018944467,
      0.0070237466,
      -0.010522732,
      -0.0050647017,
      0.002438069,
      -0.023280183,
      -0.019237233,
      -0.016051905,
      -0.019312697,
      -0.0017789615,
      -0.012669355,
      0.0011600215,
      -0.0009068172,
      0.0055485643,
      -0.036014047,
      -0.007004422,
      0.01731231,
      -0.0030336364,
      -0.019386437,
      -0.0040243724,
      0.029554449,
      0.00022985246,
      0.010611845,
      -0.007639221,
      -0.011215746,
      -0.008254138,
      -0.018271126,
      -0.015396377,
      -0.033133276,
      -0.018135305,
      0.009491499,
      -0.0030132511,
      0.0017312717,
      0.006342971,
      0.011326402,
      0.03204465,
      0.01937975,
      -0.0065531423,
      -0.017795201,
      0.028224505,
      0.0021617294,
      0.0033238523,
      0.017501663,
      0.024887241,
      -0.012661237,
      -0.0167424,
      -0.0024209465,
      -0.0030574612,
      0.009033601,
      0.0022527918,
      0.020667309,
      0.017908633,
      -0.011057113,
      -0.0027891737,
      0.0129315425,
      0.02857645,
      -0.00084981474,
      0.0026227855,
      -0.0033911378,
      -0.0073592328,
      -0.0006602322,
      -0.0037753896,
      -0.0015554286,
      0.0025168073,
      0.012141098,
      0.02321004,
      0.011522477,
      0.019216012,
      -0.00047468743,
      0.014552162,
      0.000046992674,
      0.022049913,
      0.0030000624,
      -0.013988043,
      -0.039575774,
      0.0020735816,
      0.023074584,
      -0.024462117,
      0.0037263376,
      0.02169882,
      0.00961249,
      -0.0008820068,
      -0.004140418,
      -0.0001820827,
      -0.0023147408,
      -0.013062649,
      -0.02061183,
      -0.0051567606,
      -0.014917605,
      0.001967634,
      -0.0212789,
      -0.03070642,
      -0.004560661,
      0.01997802,
      -0.035034515,
      0.01511845,
      0.003731243,
      0.0072843237,
      -0.02297502,
      -0.0057152184,
      0.0057802917,
      -0.009866531,
      0.021121085,
      0.007436166,
      -0.0021070791,
      0.006326722,
      0.01018064,
      0.02064258,
      -0.013995549,
      0.003963672,
      -0.02269531,
      0.03649335,
      -0.011728039,
      0.003896429,
      0.008153681,
      -0.020903336,
      0.008687365,
      0.031728193,
      0.0012212418,
      0.008916826,
      0.006730392,
      -0.0152993,
      0.00047153299,
      0.01311736,
      0.012501939,
      -0.12081138,
      -0.0250298,
      0.0076769083,
      0.009474875,
      -0.0043301675,
      0.008046639,
      0.0010600812,
      -0.021986347,
      -0.016408764,
      0.0065994957,
      0.017966488,
      0.0076542827,
      -0.0036560218,
      -0.01706284,
      0.010300151,
      -0.019620499,
      0.016634181,
      0.013755093,
      0.014611844,
      -0.016757052,
      -0.008373029,
      0.0051331436,
      -0.000036328944,
      0.008861907,
      -0.01941111,
      -0.008565476,
      0.015213339,
      -0.0013896163,
      -0.017072406,
      -0.036511824,
      -0.0327738,
      -0.019299893,
      0.002246321,
      0.00087895355,
      0.012134115,
      -0.020812519,
      -0.042521108,
      0.009769669,
      0.022207163,
      -0.00038810458,
      -0.019227263,
      -0.012349033,
      0.026664652,
      0.003118051,
      -0.008790154,
      0.0068223528,
      0.056037944,
      -0.022572761,
      0.001633039,
      0.043942925,
      -0.033588015,
      -0.015704034,
      0.005291807,
      -0.013916951,
      -0.0065209274,
      0.0024878334,
      0.01159448,
      0.0017088047,
      0.0010822474,
      -0.005169871,
      -0.023543317,
      -0.0008999602,
      0.0054969853,
      0.03960586,
      -0.004360389,
      -0.0054071536,
      0.033773437,
      0.0029913452,
      0.022614816,
      0.009424743,
      -0.009373847,
      0.014029184,
      -0.0005345901,
      0.031139614,
      0.0057808454,
      -0.016692357,
      0.016342008,
      -0.0034976664,
      0.009451377,
      -0.003941635,
      -0.023182746,
      -0.013217883,
      -0.07626755,
      -0.036288317,
      0.028013527,
      -0.00094309455,
      0.01682554,
      0.017935313,
      -0.00805687,
      -0.003336521,
      -0.003973107,
      -0.022078138,
      -0.03452761,
      0.0064424886,
      -0.0044431565,
      -0.012465551,
      -0.027114961,
      0.028404174,
      0.009265166,
      -0.013734569,
      -0.0030624352,
      0.0051347404,
      0.009927662,
      0.007947183,
      -0.0028492596,
      -0.018076954,
      0.0089062955,
      0.023978854,
      -0.011749037,
      -0.007917787,
      -0.0072902646,
      -0.012520552,
      -0.0020650642,
      -0.14922236,
      -0.009054195,
      -0.0035736347,
      0.012967522,
      -0.00091526826,
      -0.0066601373,
      -0.0035641065,
      -0.029005183,
      0.028542409,
      -0.011861183,
      -0.006010212,
      -0.02397072,
      -0.018016642,
      0.013616085,
      0.028241739,
      0.12826863,
      -0.011978342,
      -0.0017553847,
      -0.018919988,
      -0.022389114,
      -0.0037521461,
      -0.014980905,
      -0.0060387403,
      0.006902715,
      -0.018668182,
      -0.010365303,
      -0.0025265992,
      -0.0063057677,
      0.016187673,
      0.0018927663,
      -0.0095147425,
      -0.020541416,
      0.0141773075,
      0.020921363,
      0.0031603123,
      0.01367371,
      -0.005760874,
      -0.004146026,
      -0.0010934639,
      0.009619024,
      0.015610458,
      -0.0009357614,
      -0.0031317794,
      -0.0012024983,
      0.017696884,
      0.0019300617,
      -0.010364999,
      -0.015782066,
      -0.019093044,
      -0.006376626,
      -0.02410946,
      -0.043097727,
      0.014558374,
      -0.001404018,
      0.007662927,
      0.013033416,
      -0.017659672,
      0.018389983,
      0.006832067,
      0.021983778,
      -0.0066421875,
      -0.0040772054,
      0.0071340734,
      -0.0037104983,
      0.015654152,
      -0.000046607274,
      0.011842418,
      0.006459247,
      0.012076974,
      0.00058306346,
      0.01651299,
      0.033959765,
      -0.014011265,
      0.010513335,
      -0.009437353,
      -0.0112386225,
      -0.03852052,
      0.025655527,
      -0.0004330335,
      -0.014016805,
      0.015614583,
      0.00510866,
      -0.0032352176,
      -0.012421594,
      0.034858894,
      -0.007244037,
      -0.02320229,
      0.025085015,
      -0.0030495361,
      0.008343752,
      0.0012255639,
      0.023203667,
      -0.0068155252,
      0.0020428572,
      0.007077132,
      0.0052599385,
      0.02317968,
      0.016749699,
      0.029258598,
      0.0040535578,
      -0.003537259,
      0.012180141,
      -0.005983819,
      -0.044789128,
      0.010721739,
      0.0054210806,
      0.0017780924,
      0.01012467,
      0.01597074,
      -0.0033311257
    ]
  },
  {
    "id": "genai_cohort_python_02_Meet_your_instructor_vtt",
    "content": "Hi and welcome to the video of meet your instructor. Hi, meet me. My name is Hitesh. I really wanted to have this video because we'll be spending so much of time together in learning Python and we're going to be enjoying this so much. I really wanted to have a personal connection and knowing a little bit more about me and my style of teaching and what I've been doing in life makes our connection more stronger and you'll be feeling much more comfortable in the course now. Don't worry, I'm not going to. I will not bore you too much with the details of every single thing, but enough that you get the confidence that you are in the right hand. And I've been doing this for a really long time. My name is Satish and I did my engineering in electronics and communications, specifically not in computer science. So yes, anybody can learn how to code. It really is also not a walk in the park, but especially it's not really that difficult. Anybody can learn to code now. Once I finished my engineering I moved into the Python ecosystem, especially in the cybersecurity, but then quickly moved into the development role, especially iOS development. And then thereafter I moved into web development and databases and JavaScript and again Python based development and a whole lot of things. Now during my life I have done a fair bit of my startups as well. Some of them failed and really I love to show off about them as well. Two of them worked really well and they got acquired with a pretty big deal and I enjoyed that deal after that. Currently also I'm running two of my startups, running pretty good, one of them serving around million users. So yes we really know how to scale up the things and how to write great quality softwares. And apart from that I also run two YouTube channels. One is hitting a million subscribers, it is already done by the time you will be watching. Another one has already crossed half a million subscriber and my specialty is to turn the toughest topic into the easiest one. I read a lot of books about teaching and especially yes I do read about the tech as well like Python, JavaScript and all that but I also read a lot about the teaching mechanism, how to deliver engaging content and one of my specialties to turn the toughest topic into the easiest one. I use a lot of approach in teaching like for example for frameworks and library I use the approach of first style of learning that is you get into the details, explore every bit out of it and see that oh, there is no magic in this framework, go inside detail and create those features. This is also first person kind of a learning, first principle learning. But there is another style that I have explored over the year which is kind of exploration learning or hunting learning and experimenting learning in which you just go ahead and investigate the things. I officially termed it as investigative learning but there is no official documentation about it in which you try to investigate the things as you write them. This especially works really well in the programming languages and especially when the ground details are required. So for this entire course we'll be providing and we'll be focusing on moreover this investigative style of learning and you'll be thoroughly loving this part. We'll be questioning every output, we'll be questioning every single line of code that we're going to write. And this is going to be one of the most amazing class that you have ever seen in the Python. I've delivered Python in the past as well in my YouTube channels as well in Hindi and other languages, regional. But this course is exceptional. I have spent months in just preparing notes for this entire course and then I realized now that I have done my startups and I enjoy teaching now I have no hurry, nothing really is important for me now. It just all sit back and relax. You will truly understand what it takes to truly master a language like Python. And I'm pretty sure you're going to be enjoying this part. If you have any doubt anything, reach me out on LinkedIn or Twitter. I'm pretty much active there. I tweet a lot, I spend a lot of time on that. So reach me out, don't hesitate and if there is any topic which requires more video, more knowledge or more explanation or something is missing, just tweet me out. I would love to add that topic here. So I guess that is quite more than enough in the intro about me and now I, I think you also get that, that okay. And again another thing that I would like to mention about me is I enjoy not just mindlessly like a robotic way of just delivering the videos. I prefer to have a style in it, ups and downs on the videos and voices and I love storytelling as well. And my lectures are a little bit laid back. It's not really fast paced. You're going to enjoy that. If you wish you can turn me up into but I prefer a laid back style because your brain actually needs some time to process the videos and move it into the secondary storage so that it's permanently saved a lot of time. People try to just move things quickly in 5x or 2x and then realize, I don't get the confidence about this because you didn't allow your brain to process this and move into secondary storage so that it's permanent. So please don't do this. Enjoy, the style. It's not a race, it's a marathon. Once you do Python with me, you never have to look back again. This is not going to be a tutorial help, and this is going to be one of the course which you will absolutely commit complete. Yes. And we do run, also a lot of reward programs as well on Twitter. Whoever completes some section or we give away tea shirts as well. So there's a lot that going on. Follow me up on Twitter as well, and I think that's more than enough of an intro. Let's catch back and move into the Python journey.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 Meet your instructor.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/02 Meet your instructor.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.004401677,
      0.0056048413,
      0.01066771,
      -0.054704323,
      -0.0032160603,
      -0.017531928,
      -0.011596093,
      0.021335542,
      -0.00691881,
      0.025341414,
      -0.03658547,
      -0.012167474,
      0.013938942,
      0.048994217,
      0.13980356,
      0.009360068,
      0.0016707064,
      -0.0193019,
      -0.0027475865,
      0.007968051,
      -0.011876375,
      0.014040455,
      -0.0003325102,
      -0.020685207,
      0.0072564227,
      0.0024934842,
      0.006003947,
      0.0026956354,
      0.019108575,
      -0.03519726,
      -0.011591661,
      0.029175183,
      0.0020420868,
      0.044602264,
      0.016651591,
      0.017614366,
      0.014590187,
      0.0011169985,
      -0.025064673,
      0.011771932,
      -0.026424535,
      -0.011262914,
      0.0030607183,
      -0.0091783125,
      0.016458025,
      -0.02750948,
      0.018056154,
      0.0014574769,
      0.010020295,
      0.013403731,
      -0.014147346,
      -0.0055897348,
      -0.020818498,
      -0.1866322,
      0.005045085,
      0.0049824305,
      -0.003397739,
      -0.0017471501,
      0.004456115,
      -0.011855434,
      -0.019753125,
      0.034920715,
      -0.026283542,
      -0.007838208,
      -0.011422618,
      -0.0068945703,
      0.01905425,
      -0.00843007,
      0.032926496,
      -0.0060568554,
      0.005622562,
      0.00030412848,
      -0.0036617015,
      -0.01298019,
      -0.01720899,
      -0.023427391,
      -0.0009650193,
      -0.03018451,
      0.0012445715,
      0.010627053,
      0.0014021224,
      -0.0038598068,
      -0.012572993,
      -0.018139746,
      -0.006254177,
      -0.014159005,
      -0.017619941,
      0.003586974,
      -0.010813783,
      -0.0055612503,
      -0.017140443,
      0.0158954,
      0.00033006002,
      0.030976342,
      -0.008494917,
      -0.017457036,
      -0.01721733,
      0.009775085,
      0.0011225995,
      -0.014846676,
      0.011156222,
      -0.008189866,
      -0.037593722,
      -0.037431132,
      0.0058725737,
      0.012053704,
      -0.0031029219,
      -0.012299062,
      -0.011930267,
      -0.004088168,
      -0.027208716,
      0.01064326,
      0.0015212948,
      0.013997778,
      0.016358659,
      -0.184931,
      0.0052171363,
      -0.00362389,
      -0.005173598,
      -0.010049451,
      0.0010080816,
      0.008820983,
      0.010265378,
      -0.004694137,
      -0.023392031,
      0.0015045952,
      0.01779448,
      0.010637741,
      -0.013235692,
      -0.02507108,
      -0.016144143,
      0.0035389953,
      -0.004665112,
      0.0020477418,
      -0.00128065,
      0.025393536,
      -0.0052687405,
      -0.013417839,
      -0.025654435,
      0.005982583,
      -0.0018387764,
      0.004027732,
      0.005086787,
      0.02374608,
      0.008019298,
      0.00094691437,
      -0.002663498,
      0.01091243,
      -0.032082837,
      -0.02556303,
      0.028103523,
      0.0038838952,
      0.024598526,
      -0.0014297002,
      0.009089281,
      -0.03839331,
      0.0071353205,
      -0.011466648,
      -0.025765285,
      -0.0018357584,
      -0.0031092963,
      -0.0001721057,
      0.0088580325,
      -0.0024451122,
      0.004188539,
      -0.009990714,
      -0.015395552,
      0.015264187,
      0.033723656,
      0.0066035152,
      0.0004189538,
      0.0032334167,
      0.0015463276,
      0.006878041,
      -0.004107187,
      -0.014767853,
      -0.011101936,
      0.005711387,
      0.023418242,
      -0.014805913,
      0.008715382,
      0.009148725,
      0.008124446,
      -0.0010392887,
      0.00050938776,
      -0.0164785,
      -0.01284643,
      0.01230352,
      0.014144189,
      -0.0012178936,
      0.008309711,
      0.0010346853,
      0.0069730775,
      0.024994738,
      0.012912917,
      0.0006150389,
      0.0031719017,
      0.0056168004,
      -0.0071493285,
      0.0035966241,
      0.016821794,
      -0.016715115,
      0.0041843667,
      -0.0073228995,
      0.034413397,
      -0.001380613,
      -0.0011351798,
      -0.02181571,
      -0.005580978,
      0.0012296238,
      -0.030095102,
      0.015764704,
      0.020508777,
      -0.01661978,
      0.016638666,
      0.0016558474,
      0.025334867,
      -0.013014719,
      0.012202171,
      0.004085883,
      0.0054469937,
      -0.0033219934,
      0.012442949,
      0.013420476,
      0.0028812822,
      -0.008323016,
      0.011222497,
      0.0009781918,
      0.001608074,
      0.008779042,
      0.0045533613,
      -0.007558977,
      0.009199624,
      -0.005292952,
      0.0059162835,
      -0.0075114807,
      -0.006767389,
      0.0038215113,
      0.003757895,
      -0.00077506184,
      -0.008347309,
      -0.0010510213,
      -0.007615413,
      0.020624788,
      0.03345312,
      -0.0011906452,
      0.008809941,
      0.013893683,
      0.015266122,
      -0.012296594,
      -0.0072357715,
      0.00018781182,
      0.01517433,
      -0.016902566,
      -0.0034657223,
      -0.03524028,
      -0.033456054,
      -0.0088069895,
      -0.012580713,
      0.005549538,
      -0.020304993,
      -0.0033896153,
      -0.025097303,
      -0.014100149,
      0.021069638,
      -0.006676746,
      -0.0039387536,
      0.016638052,
      -0.011888444,
      0.030724032,
      -0.0026828838,
      0.005662253,
      0.003067167,
      -0.004268067,
      -0.016569817,
      0.008766129,
      -0.09660217,
      0.015136126,
      -0.0045978455,
      -0.032862827,
      -0.0017142117,
      0.0062153563,
      -0.037734665,
      0.0056111896,
      0.009774942,
      0.012234439,
      0.025025317,
      -0.009423128,
      0.030704513,
      -0.008929505,
      0.006965517,
      -0.017525434,
      0.001052201,
      -0.0078036557,
      0.022084698,
      -0.0065851947,
      0.011312397,
      -0.008252261,
      -0.0014391718,
      -0.01863632,
      0.01369453,
      -0.006527009,
      0.0041480632,
      0.0431176,
      0.0053026294,
      -0.014115961,
      0.005471726,
      0.042350672,
      -0.013719118,
      -0.011442743,
      0.0018652864,
      0.00718296,
      0.006810919,
      -0.012410552,
      -0.00037578391,
      -0.0133394655,
      0.012883143,
      -0.02506837,
      0.027885817,
      0.036349405,
      0.0063926354,
      -0.013011962,
      -0.0009839196,
      0.01993908,
      -0.005599752,
      -0.0068009943,
      -0.0339149,
      0.008673414,
      0.033441752,
      -0.0033067884,
      -0.014999515,
      0.0309797,
      -0.0011663651,
      -0.009554458,
      0.00023458926,
      0.0123318145,
      0.0053509166,
      -0.0029399628,
      0.012461083,
      -0.011912026,
      -0.0041665058,
      -0.011328861,
      0.012620933,
      -0.008691641,
      0.0030847965,
      -0.018903712,
      0.0015390108,
      0.0133159235,
      -0.0021720591,
      -0.01214223,
      -0.010343886,
      0.00280204,
      0.0011992165,
      -0.011531796,
      -0.011955656,
      0.022286091,
      0.012722685,
      0.0077831433,
      0.0015942354,
      -0.0001375972,
      0.016085409,
      0.0022039332,
      0.0047108633,
      0.001890945,
      0.010423639,
      -0.02234401,
      0.013818263,
      0.010784933,
      -0.029904783,
      -0.00014636284,
      -0.011322347,
      -0.0090756,
      -0.0066043865,
      -0.020140328,
      -0.0055813687,
      0.011131321,
      0.00828646,
      0.014111577,
      -0.038894076,
      -0.012420307,
      -0.002660412,
      0.027056126,
      -0.013808624,
      -0.022339841,
      0.013067055,
      -0.009200405,
      0.00012311817,
      -0.0017810198,
      -0.024537412,
      -0.009466186,
      0.013135606,
      0.026278054,
      -0.0020947314,
      0.002910197,
      0.006929723,
      -0.025005225,
      0.0034906683,
      -0.023397049,
      -0.0025578844,
      0.017643437,
      -0.017412521,
      0.016517898,
      -0.007435505,
      0.016744502,
      0.0039792447,
      -0.019035576,
      -0.016914528,
      0.004273442,
      -0.013132505,
      0.005739197,
      -0.007344509,
      -0.007541543,
      0.03155702,
      0.025719073,
      0.013416406,
      0.005009209,
      0.0034041046,
      0.0035717718,
      0.023203049,
      -0.0033913911,
      -0.014146156,
      0.0038269777,
      -0.019326625,
      -0.02363262,
      -0.007951991,
      -0.005668621,
      -0.01720888,
      -0.012582167,
      0.0038793632,
      0.0011741436,
      -0.013669235,
      0.011056853,
      0.0010845306,
      -0.010012599,
      -0.016334372,
      -0.02519108,
      0.007144957,
      0.0044410843,
      -0.0049047475,
      0.01594049,
      0.0054302695,
      0.018412188,
      0.006083176,
      0.0038088243,
      0.031838726,
      -0.017552437,
      -0.0153561365,
      0.003010758,
      -0.031914826,
      0.0021499177,
      0.027738841,
      0.0036285468,
      -0.00037402025,
      -0.012797501,
      0.008772453,
      0.030491704,
      -0.009603845,
      0.009864638,
      -0.008099784,
      0.0002169767,
      0.0049528754,
      0.014372082,
      0.010434667,
      -0.005367247,
      -0.022553341,
      -0.012734466,
      -0.0031361487,
      0.010078249,
      -0.004917178,
      0.0038463112,
      0.011521968,
      0.020384587,
      -0.012256365,
      0.0072098803,
      0.00064882066,
      0.014845177,
      0.020103762,
      -0.025028266,
      -0.00462171,
      -0.0059588887,
      0.022349518,
      -0.017811952,
      0.0033307602,
      -0.022475284,
      0.022465978,
      0.012355893,
      -0.006959845,
      0.009993805,
      -0.006881744,
      0.017138446,
      0.0010136949,
      0.025893826,
      -0.0028524208,
      -0.0014312023,
      -0.023804355,
      0.0025259035,
      -0.015055984,
      -0.027041685,
      -0.011976801,
      -0.016940085,
      -0.003908858,
      0.018977318,
      -0.0030650066,
      0.0046053682,
      -0.012903618,
      -0.013325683,
      0.0058409767,
      -0.014139832,
      -0.018907525,
      0.017482655,
      -0.0035940676,
      -0.011869846,
      0.0023804833,
      0.0015737214,
      -0.013688499,
      0.020982746,
      0.00006705138,
      -0.015136105,
      0.0046125487,
      -0.008073921,
      -0.002809148,
      -0.003277109,
      0.03264969,
      0.018564742,
      -0.012486569,
      0.0052991733,
      0.028589133,
      0.03838041,
      -0.00466019,
      -0.019754138,
      -0.02391616,
      0.032744586,
      0.014662735,
      0.011136128,
      -0.012674619,
      -0.0011946636,
      0.018837305,
      -0.007048488,
      0.0017608291,
      0.006483342,
      0.0043901377,
      0.0005071842,
      -0.0187536,
      0.011873109,
      0.0099390885,
      -0.10872452,
      0.004605477,
      -0.008234623,
      0.0011680027,
      -0.008329763,
      -0.0002439915,
      0.0014544869,
      -0.023008035,
      -0.012835006,
      -0.01659657,
      0.0069376105,
      -0.013747836,
      -0.0069716936,
      0.012282859,
      0.013284536,
      -0.0030461024,
      0.008973543,
      0.007927131,
      0.004444215,
      -0.020839581,
      -0.007846568,
      0.012458671,
      -0.0036346384,
      0.007801272,
      -0.023455564,
      0.008886004,
      0.035384987,
      0.0059622126,
      0.009528433,
      -0.0051079406,
      -0.019167371,
      0.0116005,
      0.011969217,
      0.026989361,
      0.009198887,
      -0.0051723034,
      -0.033626176,
      -0.0015629879,
      -0.004572964,
      -0.0019176468,
      -0.008890781,
      -0.0001968826,
      -0.00076529296,
      0.016935606,
      -0.022500709,
      0.020900836,
      0.037062395,
      -0.0066809226,
      -0.0029975076,
      0.03152425,
      -0.04034993,
      -0.023510473,
      0.0018706416,
      -0.03149366,
      -0.0071880594,
      0.019569572,
      0.016998764,
      0.00054488087,
      0.011496977,
      -0.010034056,
      -0.0065054335,
      0.0014631277,
      0.002228224,
      0.032626186,
      0.004611054,
      0.011167958,
      0.038400274,
      -0.005978461,
      0.007092314,
      0.0035909123,
      0.0033440536,
      0.023727968,
      -0.008861802,
      0.021613244,
      0.0022610952,
      0.008547156,
      0.0102776745,
      0.0038105408,
      -0.0019833955,
      -0.0031191665,
      -0.012829165,
      -0.001491629,
      -0.050319012,
      -0.009326917,
      0.029908607,
      -0.0036286367,
      -0.0056633106,
      -0.0032629361,
      -0.021363439,
      0.025696099,
      0.018540487,
      0.011566063,
      -0.021145478,
      -0.013072823,
      0.031923432,
      0.0035969254,
      -0.036106393,
      0.0056613698,
      -0.0004097276,
      -0.0094242925,
      -0.0009758807,
      0.006114902,
      0.011920477,
      0.008503749,
      -0.017347977,
      -0.03625552,
      0.015917592,
      0.024772294,
      -0.0023203634,
      -0.006917393,
      -0.023068367,
      0.01613196,
      0.003158989,
      -0.15916152,
      -0.011813027,
      0.0065210112,
      0.009784371,
      -0.0051148776,
      0.0013591724,
      -0.01628406,
      -0.013382693,
      -0.00010003733,
      -0.0054908837,
      0.003134152,
      0.0024195823,
      -0.03014317,
      0.008495564,
      -0.0019396329,
      0.14185068,
      0.010452181,
      -0.00012736359,
      -0.025607519,
      0.003180679,
      -0.002520687,
      -0.040044922,
      -0.01907752,
      -0.0077813724,
      -0.0074681886,
      -0.007842303,
      0.007851283,
      -0.011866432,
      -0.009900922,
      0.0052265297,
      0.01270909,
      -0.0109281065,
      0.005434839,
      0.01977895,
      0.010781724,
      -0.0032554942,
      -0.011758913,
      -0.008992876,
      -0.013730421,
      0.013423206,
      0.021987613,
      0.002552703,
      -0.0027906029,
      0.0135151055,
      0.0013683569,
      -0.0161103,
      -0.0059999116,
      0.0016359235,
      -0.015850997,
      0.0026662122,
      0.010867238,
      -0.052367333,
      -0.0028840506,
      -0.007717558,
      0.0139153255,
      0.006457894,
      0.0023744928,
      0.0032918984,
      -0.016932167,
      0.007875208,
      -0.02545858,
      -0.006584519,
      -0.005163116,
      0.0018525306,
      0.0036761945,
      -0.015007904,
      0.017724672,
      0.017099066,
      0.01309328,
      0.0025896754,
      0.03188093,
      0.02168872,
      -0.0047575147,
      -0.009702146,
      -0.0017219579,
      -0.0034966771,
      -0.028065661,
      0.037541684,
      0.00060517737,
      -0.01108927,
      -0.014023661,
      0.012504951,
      -0.0030737522,
      -0.00743417,
      0.011208331,
      0.022108624,
      -0.0048274896,
      0.022743015,
      -0.0060278806,
      0.0024252203,
      0.010647303,
      0.0053523774,
      -0.01519636,
      0.021031322,
      0.0070748436,
      0.014085254,
      0.026172675,
      -0.015222181,
      0.0037215648,
      0.0042264825,
      0.008261604,
      -0.010624451,
      -0.015005929,
      -0.015843963,
      0.022395108,
      0.007936073,
      0.010905796,
      0.0075945435,
      -0.010355339,
      -0.028140457
    ]
  },
  {
    "id": "genai_cohort_python_03_What_is_programming_vtt",
    "content": "Hi and welcome to the Udemy's Python course. Now let's go ahead and get started. Let me walk you through some of the tools that I'll be using for explaining the things, for writing the code. And don't worry, we have the videos about installing and doing everything on Windows as well as on Mac. So don't worry about that part. We have covered that. We have been doing the teaching for like years. We know the drill, how to work with that. Now. One more thing I would like to mention is that I usually am down on the screen on this part, but sometimes when I want you to focus more on the screen or entirely on the screen, I just switch on to this mode so that you can focus just entirely on the screen. But when it's required a little bit of engagement or you want me to see, or I want you to focus on me as well, I switch it back. But most of the time you're going to see that. Okay, you just need to focus on the screen itself. I want your 100% attention on the screen itself. So coming on that part, we are going to be using VS code as a code editor. Go ahead and download it. Don't worry. We'll walk you through with the installation part and Python install and everything. Apart from this, I also use a mix of couple of tools like one of them is Eraser. I will provide you the link of this. This helps me to teach. I can draw diagrams easily and attach them like these are two boxes and I can just link these boxes just like this and if I move one box it normally goes like that. This whole stuff helps me to teach. This is like my whiteboard or rather accurately blackboard on the screen. You will find me using other tools as well. I don't use them that much. But still if you want to know about a little bit more, there's a tldraw. You'll find that I draw a lot of diagrams and this helps people to actually learn. I use Excalidraw as well, in my YouTube videos extensively. Not just a little bit extensively. So I do have a lot of habit of drawing the diagrams and stuff. But for the courses specifically especially I prefer to use this one, because it's easier to actually work on with and it's generally pretty interesting to work on with. All right, so this is the basics of it, like let's go ahead and get started. I don't want to waste much of your time in just overviews. Let's directly start with somebody who has never been coded or never have programmed in the life as well. So let's start with the basic and obvious question, what is programming in itself? If you have never heard or thought about it in that way. So programming, it's a great subject. Programming is more about like giving instruction to a computer and especially the instruction which computer do understand that is the most important part of this one. Computers really can't think on their own. And you might be wondering, hey, AI is there. They can think. No, they cannot. In the AI Also they just repeat the steps that they have seen on the Internet quite extensively. And they are just fancy word completions. And they are pretty good in that I do give you on that. But they can't really think still. And you have to provide them exact instruction, exactly as written how we'd give them so that they can think a little bit. So that's go for that. Now let's create analogy like what it's like to have a program. So let's go ahead and create a program for making chai or T as you call now. Now I usually will give you whole story and example and narrative throughout this course. We do have, let's just say a chai store or a cafe. And in that we will take examples of each of the exercise that we do related to the chai. It's one of my favorite thing. So how are you going to make the chai? How you'll give computer instruction about making a chai. That is bit challenging, but we'll try our best to actually give that instruction. So all right, let's go ahead and buckle up. You also try it along with me. So step one would be like gather, water. All right, I got the water. Then go ahead and grab some milk. If you prefer to have a milk T, then go ahead and grab T leaves as well. So you might want to have some T leaves. Obviously it's a chai. And then go ahead and grab sugar. Maybe you like sugar T. And then also go ahead and grab some utensils as well. So these are gathering part. This is collection of the data. This is the part one you have to have to do this. There is no exception. There is nothing in that. Like. So this is the part one of giving the instructions. Hey, collect all of this. Now once you have done with this, then obviously the job is not yet done. This is just collection and then we have to provide some of the conditions as well. So check conditions and conditions could be something like we want to have enough water, maybe clean cups and then we have to give a precise instructions after that. So you can see there are a lot of moving parts into the coding as well just like this. So making chai, you have never thought about it, but this is all like gathering the stuff, then check some condition and then finally there will be thorough steps. We will work on the steps as well that how to actually make this tea. So these are the three components and these are the exactly three components we are going to learn throughout in this Python course. Apart from this, I also would like to address one more thing which is is coding really that much hard? This is a tangent example, but I would say yes and a no. Is coding truly super easy walk in the park? No, it is not. Everybody says coding is easy, but it is not that easy. It requires extensive amount of effort over the years. Sometimes you will get comfortable within months, few months, but it requires definitely couple of years to truly get the hand of what it takes to be programming. It's not the easiest job and that is the reason why people get paid highly for the computer programming. I would want to have you realistic aspect of this. It's not going to be easy, but it's surely doable. And especially when the languages are like Python or JavaScript, they're super easy to learn. And Python specially is like a language which is almost feels like you know the English, you know the Python, but there are nuances of it, there are complexities of it as well. So I want you to keep very realistic ground on this. It is not that easy, it takes time to master it. But getting started writing simple code is super easy. You can do this within few months. But again coding is all about having the process, breaking down the steps and, and thinking more. Writing the code is the easy part. Thinking about it, having the thought process of a programmer, that is where the real magic is and that is the toughest part of it. All right, so now that you know about the tangent part of it, let me go ahead and give you one more example before we wrap this up. So how would you make this the steps of this? So let's go ahead and try to have some of the steps for making the tea. First of all what I would like to do is check if cattle, we are making the T in cattle, so cattle has water. So this is my step one. What would be your step two? And again it doesn't really matter if should have five step or six step. Whatever it takes. Whatever it takes. Then I would love to simply have a, plug, plug, plug in kettle. Then obviously boil, boil water. So these are the basic steps I would love to have. Let me shift my keyboard a little bit. And this is the second step. What would be the third step? I would say get clean cup or cups, whatever you like. This is my third step. What would be my fourth step in that? Give it a shot, think a little. I would be saying that add T leaves so that it gets the color. And probably also let's add sugar to cup or maybe to boiling water, whatever you prefer. And after that I would have something more probably. Pour, boiled. Oops. Pour boiled water into cup and then add, sugar. Or if you want milk as well, you can pour that as well. And then I would say stir and serve. So these are my steps of making a tea. And again, everybody's steps are different and that's why they say programming code is different for everyone. So these are my steps. So as you saw, this is super easy and we can have the things like this. So we actually turned making Chai into a simple piece of code. Super easy, super nice. And we have a, great diagram as well. There we go. So we first worked on gathering the things, checking the condition, and then we wrote the steps and we have all the steps for making the table. And in the very next video, we will go ahead and try to convert this into a piece of code. It is not going to be truly a python code, we'll just mimic the Python code. This is not going to be accurate, but it will give you an idea that, okay, Python is not that really hard. It's super easy to work on with. Let's go ahead and move on to the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 What is programming.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/03 What is programming.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0061404705,
      0.008779292,
      0.015521942,
      -0.043012056,
      0.0016409396,
      -0.008982426,
      0.0010806085,
      0.023792706,
      0.0068440447,
      0.024779122,
      -0.024707813,
      -0.011813304,
      0.014181627,
      0.03083931,
      0.13650455,
      0.0012659694,
      -0.0021960638,
      -0.0071019433,
      0.011091439,
      -0.0141805755,
      0.001610469,
      0.025249569,
      0.0060585584,
      -0.008630649,
      -0.005183339,
      -0.015953232,
      0.009649605,
      0.017449236,
      0.029816082,
      -0.031674664,
      -0.0067084166,
      0.008260305,
      -0.004917284,
      0.020598978,
      0.017697286,
      0.021477304,
      0.010381032,
      -0.010147632,
      -0.014276742,
      0.0168257,
      -0.036055893,
      -0.008933682,
      -0.012256028,
      -0.01059107,
      0.020821227,
      -0.00686823,
      0.0045243697,
      -0.018992424,
      0.0072246976,
      0.021420803,
      0.009306011,
      0.010119863,
      -0.013990199,
      -0.19040483,
      -0.00020749141,
      -0.016085884,
      -0.0059150136,
      -0.0036526425,
      -0.006287585,
      -0.006297557,
      -0.027243027,
      0.005709639,
      -0.03626588,
      -0.00026505723,
      -0.01724347,
      -0.01993889,
      0.020638501,
      -0.0035703352,
      0.022540437,
      -0.006916562,
      0.013279044,
      0.004212346,
      -0.013545422,
      -0.000029182745,
      -0.023924721,
      -0.013442954,
      -0.008312301,
      -0.013526762,
      -0.011693456,
      0.010771666,
      -0.0038422954,
      -0.0042296117,
      -0.008419141,
      -0.0052641663,
      0.02792637,
      -0.004381972,
      -0.0224386,
      -0.004283746,
      0.0019770062,
      -0.013778929,
      -0.021297274,
      0.030397765,
      0.0017191514,
      0.014634521,
      -0.020396672,
      -0.017988421,
      -0.023205409,
      0.00050875975,
      0.0010424757,
      -0.005006756,
      -0.0043612123,
      -0.007969275,
      -0.026063101,
      -0.028577682,
      0.004360727,
      0.02097721,
      0.01143631,
      -0.012782832,
      0.003495174,
      -0.016380627,
      -0.010156036,
      -0.0072913123,
      0.0078747785,
      0.00879772,
      0.0047967182,
      -0.18923327,
      0.0026055013,
      0.0038089312,
      -0.01526631,
      0.0025813084,
      -0.0081118,
      0.001612541,
      0.0023424977,
      0.012114565,
      -0.012283422,
      0.004169925,
      -0.0017714055,
      0.023973823,
      -0.015164089,
      -0.0068566957,
      -0.030890524,
      -0.017256295,
      -0.013592474,
      0.015215119,
      0.005030019,
      0.01420322,
      -0.0072887116,
      -0.015543713,
      -0.02492363,
      -0.021673162,
      -0.016896205,
      0.008337592,
      -0.0054955496,
      0.021984108,
      0.013846551,
      -0.0060072257,
      -0.005233508,
      0.013480908,
      -0.03199641,
      -0.026226584,
      0.016674317,
      -0.016320633,
      0.00074920134,
      -0.005849725,
      0.014518804,
      -0.033557568,
      -0.008053838,
      -0.008249256,
      -0.0130120125,
      -0.0055222474,
      -0.0009123525,
      -0.011000347,
      0.0035169665,
      0.004268894,
      -0.01181663,
      -0.015665438,
      -0.015292659,
      0.010435283,
      0.021704722,
      -0.0036772336,
      0.011746121,
      -0.0017240954,
      -0.0054236334,
      -0.0024242878,
      0.0071857003,
      -0.0059571853,
      0.016788749,
      -0.015748264,
      0.015415158,
      -0.021551356,
      0.009120144,
      -0.0025972717,
      -0.0044915453,
      0.013852017,
      0.00414463,
      0.00471539,
      -0.0057052555,
      0.01894965,
      0.019328572,
      -0.0031095005,
      0.0031373848,
      -0.014222159,
      0.009849111,
      0.0022359064,
      0.017211497,
      -0.009725039,
      -0.003810029,
      0.0033646484,
      0.013177861,
      0.01635963,
      0.031192264,
      -0.026071262,
      0.00508142,
      -0.029519632,
      0.031453717,
      0.00016811173,
      -0.0033478632,
      -0.004395269,
      -0.005634715,
      -0.00067756674,
      -0.020218102,
      0.003620103,
      0.020902537,
      0.007412117,
      0.010806698,
      0.0072324234,
      0.024212047,
      -0.009805087,
      0.0062470706,
      0.005710241,
      -0.000082329214,
      -0.004273754,
      0.012319677,
      0.021198928,
      0.0064046504,
      -0.02584607,
      0.0077650286,
      -0.0066067167,
      0.009870743,
      0.0038975356,
      0.013702896,
      -0.0157527,
      -0.0010263803,
      -0.0042464747,
      0.01030311,
      -0.0032563063,
      -0.0114343595,
      0.019356875,
      0.008437556,
      -0.007431523,
      0.0029607618,
      -0.007995422,
      -0.0085813785,
      0.033778258,
      0.020391556,
      -0.006558473,
      -0.0015321517,
      0.016091622,
      -0.0045780013,
      -0.022195471,
      -0.0049192877,
      0.004700274,
      0.014909882,
      -0.008629151,
      0.009383259,
      -0.025546309,
      -0.016055694,
      -0.010665676,
      -0.0010317133,
      0.0003850436,
      -0.021931332,
      -0.008686048,
      -0.009299494,
      -0.011168288,
      0.026214207,
      0.0027260259,
      0.00014966242,
      0.016835468,
      -0.00736425,
      0.028194664,
      0.0046390393,
      0.006777894,
      0.004083467,
      0.0027792677,
      -0.018560695,
      0.013691854,
      -0.10978902,
      0.031347834,
      0.006366826,
      -0.022624863,
      0.003556098,
      0.02214725,
      -0.019105418,
      0.020226452,
      0.014275846,
      0.019293327,
      0.019058099,
      -0.0048466697,
      0.052248783,
      -0.010570668,
      0.0030594128,
      0.0014921312,
      -0.00011987182,
      -0.012276913,
      0.022301039,
      -0.01638127,
      -0.008680505,
      -0.0072821667,
      -0.004695837,
      -0.020995175,
      -0.0008913736,
      -0.021806404,
      0.0020545812,
      0.021907464,
      -0.007786756,
      -0.0076629603,
      -0.0033030813,
      0.045458544,
      0.015632879,
      -0.015459567,
      -0.0066068345,
      0.0047581033,
      0.0057216915,
      0.0020925282,
      0.0061648693,
      0.010529829,
      0.028593792,
      -0.029344479,
      0.028963096,
      0.030226115,
      0.0010289841,
      -0.005042675,
      -0.010976884,
      0.007363444,
      -0.018737964,
      0.006361518,
      -0.027102752,
      0.014143155,
      -0.013278201,
      -0.023549266,
      0.00384638,
      0.020904958,
      0.005553352,
      -0.02015599,
      0.00050571654,
      0.011445794,
      -0.01241296,
      -0.01741025,
      0.0034077915,
      -0.00982957,
      0.0011451623,
      -0.0058387225,
      0.024751939,
      -0.023474747,
      -0.004163848,
      -0.0056958175,
      0.012478402,
      -0.0041279667,
      -0.012646847,
      -0.0033460534,
      0.006964351,
      -0.009920722,
      -0.009575324,
      -0.022642467,
      -0.022476649,
      0.028178638,
      0.006501189,
      -0.014672008,
      -0.006310242,
      0.0060602864,
      0.012043783,
      0.01337548,
      0.0076827668,
      -0.017788265,
      -0.0017884822,
      -0.013609321,
      0.02166387,
      0.031696465,
      -0.017822618,
      0.015202475,
      -0.022445269,
      -0.004447799,
      -0.013167148,
      0.004464704,
      -0.017263236,
      0.01568354,
      -0.015109452,
      0.00927745,
      -0.015908794,
      -0.0021569384,
      -0.0019201178,
      0.015614898,
      -0.02792655,
      -0.014542077,
      0.014919853,
      -0.017941229,
      0.021153007,
      0.008965472,
      -0.0053808475,
      0.013306855,
      0.005885791,
      0.0057857614,
      -0.014886758,
      -0.00037821571,
      0.021324996,
      -0.01264127,
      0.005692956,
      -0.014353496,
      -0.021606617,
      0.013912554,
      -0.01642142,
      0.008605892,
      -0.011736987,
      -0.0026797694,
      -0.0056330315,
      -0.021406675,
      -0.015774025,
      0.0051161903,
      -0.015945705,
      -0.010132803,
      -0.0155258635,
      -0.0008260772,
      0.022703744,
      0.032877985,
      0.009954375,
      -0.0011583001,
      0.0026881397,
      -0.0015539633,
      0.021480324,
      0.0045376443,
      -0.005712806,
      0.021208959,
      -0.021687347,
      -0.01353669,
      0.008761973,
      -0.024622602,
      -0.013832397,
      -0.016486423,
      -0.01538429,
      -0.0040373188,
      -0.004403428,
      0.009316297,
      0.02143173,
      -0.022773147,
      -0.020173201,
      -0.01972406,
      0.006448458,
      0.0023130951,
      -0.0042780973,
      -0.0047474494,
      0.027890082,
      0.013614596,
      -0.0051559582,
      0.009639641,
      0.0043114726,
      -0.012196742,
      -0.0007505908,
      -0.023874981,
      -0.04997135,
      -0.001491616,
      0.016624404,
      0.008953838,
      0.011181711,
      0.0005220578,
      0.026347747,
      0.013395049,
      0.004722708,
      0.00083216885,
      -0.009187401,
      0.0017251218,
      0.019224234,
      0.013536404,
      0.018408803,
      -0.0010015873,
      -0.02283059,
      0.0039631505,
      0.005819181,
      -0.00024178361,
      0.008918343,
      0.01947769,
      0.0042377342,
      0.0027933791,
      -0.0127199255,
      -0.016021194,
      -0.003915064,
      0.007143523,
      -0.00017988753,
      -0.014299205,
      0.008215805,
      -0.0040204786,
      0.007927197,
      -0.000007157869,
      0.008329525,
      -0.012362622,
      0.0021591359,
      0.013552552,
      -0.02091517,
      -0.008251167,
      0.001325028,
      0.003187913,
      0.029689472,
      0.014201868,
      -0.013840374,
      -0.004518913,
      -0.023785671,
      -0.0012369725,
      0.021094177,
      -0.0053585656,
      -0.006728515,
      -0.018977314,
      0.00380539,
      0.0028276881,
      -0.001175498,
      0.0016706829,
      -0.0016456933,
      0.0013108405,
      -0.0112543795,
      -0.011849113,
      -0.0039346847,
      0.003546679,
      -0.004783514,
      -0.014602328,
      0.014054993,
      -0.0007234907,
      -0.018474465,
      0.027715644,
      -0.008033551,
      -0.012899649,
      0.008803841,
      -0.011369339,
      0.0010216143,
      -0.0045724134,
      0.020975959,
      0.012297693,
      -0.017506585,
      -0.0010240391,
      0.0073741158,
      0.034610365,
      -0.011621651,
      -0.017352251,
      -0.010047077,
      0.020702567,
      -0.0033189105,
      -0.015916843,
      -0.012096645,
      -0.007638621,
      0.01980566,
      0.008842739,
      -0.006890274,
      -0.007578363,
      -0.013505641,
      0.0017184636,
      -0.010118801,
      -0.004560617,
      0.0095782885,
      -0.12721473,
      0.0032045865,
      -0.015947264,
      -0.0052801548,
      -0.013013384,
      -0.010862686,
      0.012820113,
      -0.032787263,
      -0.0039060288,
      -0.0063354936,
      0.028629495,
      -0.014495476,
      -0.010794401,
      -0.0024431907,
      0.00038938873,
      0.007384902,
      0.009880039,
      -0.0016187226,
      0.031333543,
      -0.020653531,
      -0.015892113,
      0.0071524414,
      0.009157402,
      -0.0078921225,
      -0.03439889,
      -0.0062254774,
      0.026043281,
      0.007243127,
      0.00026807445,
      0.0024376328,
      -0.019025583,
      -0.0011680889,
      -0.016602123,
      0.0076331897,
      0.012606589,
      -0.0002805305,
      -0.017612824,
      0.0048709116,
      0.016925432,
      -0.001789324,
      -0.0093800295,
      -0.00912906,
      0.0028962777,
      0.0148528805,
      0.0015316304,
      0.019263785,
      0.03791391,
      -0.02369537,
      0.0035992183,
      0.026307946,
      -0.0481151,
      -0.031810455,
      -0.009362056,
      -0.036631234,
      0.0035739136,
      0.009168301,
      0.018008666,
      -0.002781341,
      0.003239345,
      -0.012354998,
      -0.001608555,
      0.006790504,
      0.018233255,
      0.033159018,
      0.00056737603,
      0.008209153,
      0.04427037,
      -0.002920837,
      0.0026626617,
      -0.022798525,
      0.002131745,
      0.0062390347,
      -0.003464559,
      0.010468864,
      0.005260328,
      0.0013686279,
      0.008307227,
      -0.0012239512,
      0.004395589,
      0.022447566,
      -0.024222149,
      -0.0048401295,
      -0.05003842,
      -0.019258851,
      0.02212071,
      0.0005749689,
      0.005304401,
      0.008459987,
      -0.0070261937,
      -0.006482216,
      0.006569005,
      0.0046842224,
      -0.023879629,
      0.0014860032,
      0.021209707,
      0.006620156,
      -0.022578567,
      -0.0025104217,
      -0.012443979,
      -0.0076234043,
      -0.008536242,
      0.023332344,
      -0.0012173117,
      -0.005082293,
      0.025484204,
      -0.012002054,
      0.018158177,
      0.008702292,
      0.004535191,
      0.0019130625,
      -0.0009710923,
      0.01134738,
      -0.009351586,
      -0.1667313,
      -0.02375735,
      0.013657663,
      0.026032608,
      0.01382888,
      0.0017463894,
      -0.014548839,
      -0.010322612,
      0.002090552,
      -0.012177596,
      0.0056996867,
      -0.013319282,
      -0.026785305,
      -0.006292254,
      0.02286711,
      0.1320692,
      0.0015622324,
      0.004965636,
      -0.015920483,
      0.01838373,
      -0.014112325,
      -0.02560246,
      -0.009034323,
      -0.00409735,
      -0.008514642,
      -0.007899725,
      0.004521828,
      -0.009374724,
      -0.0015884878,
      -0.0068876497,
      0.0057908413,
      -0.018530007,
      0.0053189034,
      0.008314929,
      0.004994888,
      -0.007413025,
      0.00513808,
      -0.022645315,
      -0.014978195,
      0.0045751906,
      0.023913715,
      -0.00203223,
      0.0015514498,
      0.020740801,
      0.011236114,
      -0.015265307,
      -0.017568173,
      -0.017195353,
      -0.017402781,
      -0.003940465,
      0.0012620452,
      -0.0433735,
      0.009595607,
      -0.010219873,
      -0.0028528513,
      0.02526089,
      -0.0077974116,
      0.027990809,
      -0.00093196623,
      0.03598769,
      -0.02369073,
      0.005616011,
      0.001000693,
      -0.00081668847,
      0.0057661054,
      0.0021264749,
      0.024295632,
      0.008857575,
      0.01997781,
      -0.01290759,
      0.034508094,
      0.026710212,
      -0.0102744335,
      0.031129166,
      -0.0073930924,
      -0.017677054,
      -0.011247327,
      0.037323453,
      -0.007142411,
      -0.0030064767,
      0.018017543,
      0.0039651105,
      -0.015264807,
      -0.010799595,
      0.024433428,
      0.009596422,
      -0.02269946,
      0.02445251,
      -0.0020929195,
      -0.011125988,
      -0.014936024,
      -0.0077245203,
      -0.009208875,
      0.014177349,
      0.017067254,
      0.019565327,
      0.021066858,
      -0.008346952,
      0.021605197,
      -0.006349601,
      0.012417298,
      0.0012349974,
      -0.021129629,
      -0.030255953,
      0.02544288,
      0.01567576,
      0.00079132704,
      0.010769337,
      0.007361129,
      -0.016738588
    ]
  },
  {
    "id": "genai_cohort_python_04_Convert_that_into_python_code_vtt",
    "content": "All right, continuing this exact same thing that okay, we do have the steps. Can we convert these steps into Python program? Not really the perfect Python program, but somewhat little bit like that so that I get an idea what it's like to code in the Python. So I will go into the code editor, this is how it looks like and I literally have just drag and dropped a folder to it. A super easy work on that. So I'll even show you what I did here. So let me just show you. I do have a couple of other stuff as well going on, but let me just show you. So I opened the program and once I opened this up, or I can actually go ahead and show you again. Fresh. So this is how it freshly looks like when you open this up. This is VS code. I have installed a couple of themes. I will walk you through as well. But I have just literally created empty folder on my English subfolder there. Python udemy is where we are going to write all of our code. I'll just drag and drop up here. So that's all I did here. Now once I go ahead and open this up, first of all the theme that I use because a lot of people love it and I'm super proud of it that I created this. So you can go up here and search for a chai theme. It actually comes up very top. So chai theme. I love chai. I love T. So go ahead and use it. I use a dark color of it. The code looks absolutely beautiful in this. So that's why I go ahead and use it. You can also install this, it will look absolutely good on your screen as well. And we do have a couple of Python extension as well. If you just go ahead and search for Python you will find other instructions, other extensions which will make your life a little easier. For example, you just have this Python install it. It will give you the color codes and type hinting. You can also install Pylance as well. Again color code, type hinting. They will help you to write the code. You don't have to type everything manually. They literally helps you out in that. Now in this we can click up here at the top to create a folder and create a file. We'll create a folder because we want to mimic this. So this is not going to be original code. Let's call this one as and we'll use an underscore and we're going to call this one as Python. So this is my chapter inside this I'll create a new file and we're going to call this one as non Python code because it's not really a Python code but, but the extension is important. We're going to call this as PY so that we get a feel of what it's like to code in the Python itself. Now don't worry, I will walk you through with installation and everything of it. And in fact let me write this. This whole part is just to get an experience. You don't have to write the code or even follow along with me. So I will just say do not follow or probably I'll say just experience. Just experience it. It's really hard to type in. To type and talk at the same time. But go ahead and just experience this part. You don't have to write any code, even if it's actually not a real code itself. It's not going to work. But I just wanted to have explanation or brief overview. So just like we have actually extracted the things into a separate box. This box in the world of programming known as function. And yeah, function means I will just wrap the things, whatever my instruction is, into a box. So literally function is a box. So this is how you create your box. So we'll call our box as makechai. Pretty good. And we use a syntax of these parenthesis, then a simple column. This is syntax. You don't have to even remember that. Eventually you will just learn them. Then I hit enter and I see that I do have four spaces automatically. This is Python. Python works on indentation. If you go ahead and remove this, this is bad. Your code is not going to work. We will learn about these details later on. But you should give indentation. And it's usually not recommended as tab, it's recommended as four spaces. So 1, 2, 3, I will walk you through why it is four spaces, not the tab. And internally tab also gives you four spaces. But we'll talk about it later. Then we go ahead and simply say not if not. And yeah, it's a little bit weird, but you'll understand that kettle has water. And then I simply go ahead and put the same parenthesis colon and we simply say fill cattle. There we go. Can you understand this piece of code? And I'm pretty sure you can. It's saying if not kettle has water. So it's probably saying that if cattle doesn't have the water, go ahead and fill it with the water. And yes, if you can understand this part, yeah, this is it. That's how we actually go ahead and write our program. Let's go ahead and move on further. So Katl part is done. Then let's go ahead and ask somebody to say that plug in kettle so that they can actually plug in. So we'll just go ahead and say plug in the cattle. That's another function that means somebody will do it. There's more instruction how to do it, like pull up the cord, move nearby, switch, plug it. Like there are more instructions, but let's just call this, this is again a function. Then this will help you to actually, boil water. There we go. Write another function for it. And we're going to say if not, let's just say is cup clean? So what should I do if the cup is not clean? You might be saying, hey, just wash the cup. Probably yes. Or pick another cup. It could also be correct. After that we simply go ahead and say add to cup. What do you want to add to the cup? Now probably, we'll see T leaves. Yes. And let's go ahead. And what else do you want to add? Maybe sugar. So let's use the same method because we are adding to the cup itself. Then we probably want to pour it. So let's just go ahead and say there's a pouring, method which says that, hey, where do you want to pour? We want to pour it into a pour. What to pour? Probably let's just say boiled water. Maybe just like that. Then probably you want to stir. Where do you want to stir? Maybe cup. Oops, cup. And then we simply want to say serve, chai. And there we go. And function in the world of Python also needs to be called. So we'll just move a little bit there and we'll just call this as make chai. And there we go, we call the function. So although you probably didn't understand how to write this, but if you can understand, okay, I get like 60% of it or even 30% of it, that how this is. Eventually our Python code will look exactly like this. And this, believe it or not, is Python programming. That is why everybody says that it is super easy to learn. If you can read English, you can definitely read Python code. And this is actually a legit Python code. We have used so much of the functionality already into it. Now surely it's not an accurate code. I would 100% say that, but it's fairly understandable. And that's the whole point of the Python that anybody can learn it as long as you know how to read it. Like, if not, kettle has water. So probably it's saying, if kettle doesn't have it, we'll fill this. So based on condition, we have learned so much conditions and functions and whatnot, even methods and strings and whatnot. But the whole point is that you understand this piece of code and we have converted this whole thing, probably not line by line, but a lot of it, into this piece of code. And that's exactly what we'll be doing throughout the course. We'll design the diagrams like this. Hey, these are my steps. And now let's convert these steps into the code. That is whole programming experience. So I hope now you understand that what it is like to experience in writing the Python code, it has a lot more. We will definitely explore that part, but at least this gives you a little bit. Probably 20% would be good. 20% confidence that, yes, you can also write it. As long as you got this, that is okay. That's all I want. So let's go ahead and move on to the next video where we are going to discuss more on the Pythonic stuff of the things. Let's move into the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 Convert that into python code.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/04 Convert that into python code.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.016917007,
      0.015472011,
      0.010742519,
      -0.05732666,
      0.0017940045,
      -0.017161597,
      -0.00905273,
      0.016928049,
      0.0018138227,
      0.012149534,
      -0.019065136,
      -0.020226713,
      0.014512507,
      0.038311902,
      0.13484825,
      0.00437833,
      -0.009273621,
      0.003373084,
      -0.0057185693,
      -0.011495117,
      -0.0010960142,
      0.017289892,
      0.010344757,
      -0.007143967,
      -0.0017760197,
      -0.020906426,
      0.0029631204,
      0.022035526,
      0.017462656,
      -0.030134596,
      -0.0147958845,
      0.0038249264,
      0.0030371428,
      0.019068243,
      0.012494571,
      0.02453385,
      0.0035855803,
      -0.007544467,
      -0.0074998727,
      0.024414038,
      -0.036753654,
      -0.0055287736,
      -0.019945396,
      -0.0067410907,
      0.025966106,
      -0.008285382,
      0.000050917963,
      -0.021909608,
      0.01369085,
      0.017812349,
      0.007854796,
      0.0045018815,
      -0.015323029,
      -0.18394195,
      0.0022756218,
      -0.01655999,
      -0.013367397,
      0.010093376,
      0.004096504,
      0.0016911615,
      -0.02936944,
      0.015555907,
      -0.040907353,
      -0.00028450793,
      -0.016134303,
      -0.026601482,
      0.014521534,
      -0.018113045,
      0.021917913,
      -0.01177024,
      0.014803982,
      0.013635173,
      -0.014579211,
      0.004723781,
      -0.026644062,
      -0.013865647,
      -0.0050354046,
      -0.020277891,
      -0.009206318,
      0.021173729,
      -0.0048793554,
      -0.0025006665,
      0.004257685,
      -0.0024504857,
      0.025174156,
      -0.0025366591,
      -0.012007039,
      0.007502773,
      -0.00049657037,
      -0.01644672,
      -0.018400554,
      0.026331551,
      -0.0036718275,
      0.013537491,
      -0.033921916,
      -0.0051343185,
      -0.008524083,
      -0.01144433,
      0.0022688399,
      0.00014569733,
      -0.004283665,
      -0.026099408,
      -0.021229023,
      -0.025243899,
      -0.0058866185,
      0.008510201,
      0.016187942,
      -0.008652559,
      -0.0039144857,
      -0.01868361,
      -0.017918546,
      -0.01759179,
      0.00389211,
      0.0270967,
      0.0055216188,
      -0.18452312,
      0.0036743372,
      -0.001516018,
      -0.01934546,
      0.005370099,
      0.008943106,
      0.0028930684,
      0.0021858057,
      0.018626804,
      -0.012167187,
      0.0074644955,
      0.0052727745,
      0.017067563,
      -0.009892594,
      0.0046586143,
      -0.019960904,
      -0.017135158,
      -0.015795644,
      0.013935207,
      -0.004520873,
      0.0069581536,
      -0.008840826,
      -0.0066711726,
      -0.02439345,
      -0.020958489,
      -0.010614188,
      0.022584695,
      -0.009377736,
      0.028797286,
      0.013344656,
      -0.011597156,
      -0.0038655119,
      0.011693523,
      -0.023031767,
      -0.029780196,
      0.013563221,
      -0.026754107,
      0.008239391,
      -0.009295828,
      0.02051223,
      -0.029443309,
      -0.0063119046,
      -0.006450996,
      -0.016455127,
      -0.007507368,
      -0.0027505073,
      -0.01613589,
      0.0020835416,
      0.0027173802,
      -0.000559374,
      -0.012445603,
      -0.011125081,
      0.002528115,
      0.020947898,
      0.0026658962,
      0.009242587,
      -0.0148798395,
      0.004131264,
      0.0003174253,
      0.007019606,
      -0.006421034,
      0.01079619,
      -0.022261936,
      0.009095331,
      -0.01934452,
      -0.0019880438,
      -0.015687363,
      -0.011408841,
      0.009799415,
      0.017480794,
      -0.011436843,
      -0.019142179,
      0.032556973,
      0.03110969,
      -0.008403982,
      0.0029200912,
      -0.01003215,
      0.015401842,
      0.0003590369,
      0.021848114,
      -0.017959597,
      -0.006299646,
      0.008924424,
      0.010311636,
      0.018280735,
      0.039135985,
      -0.013194305,
      -0.008657669,
      -0.023242665,
      0.040207274,
      -0.008087259,
      -0.0038162144,
      -0.018692235,
      0.005385866,
      -0.0025569466,
      -0.016839113,
      0.0033517275,
      0.011753199,
      0.011886781,
      0.014211822,
      0.0006946216,
      0.01925991,
      -0.0025403318,
      0.003758629,
      0.0004794507,
      0.012918826,
      0.007941915,
      0.013069837,
      0.020305753,
      -0.0059760194,
      -0.020812316,
      0.012663151,
      -0.014070474,
      0.005329289,
      0.0031106956,
      0.019683037,
      -0.007054429,
      -0.008420033,
      0.0019692837,
      -0.00052696496,
      0.0053816955,
      -0.005798302,
      0.01661247,
      0.0031007144,
      -0.00505896,
      -0.0014287683,
      -0.0058157365,
      -0.0052096713,
      0.021369856,
      0.024197232,
      0.0040349704,
      0.007185586,
      0.009073109,
      -0.00551172,
      -0.020320129,
      -0.017860001,
      -0.002999678,
      0.016905487,
      -0.01294442,
      0.0012200099,
      -0.019956449,
      -0.014469966,
      -0.012102534,
      -0.0045299754,
      -0.007014116,
      -0.017102936,
      0.013559901,
      -0.012471689,
      -0.01954116,
      0.021390725,
      -0.0053306157,
      0.005689729,
      0.025236031,
      -0.006875787,
      0.016515385,
      -0.0003331688,
      0.020956272,
      0.006831722,
      -0.009909504,
      -0.03227935,
      0.029841434,
      -0.11292327,
      0.04234582,
      0.010899357,
      -0.021784289,
      0.0225386,
      0.017204233,
      -0.021036256,
      0.005627971,
      0.0037132632,
      0.01777139,
      0.007608337,
      -0.005528371,
      0.039331045,
      -0.0040726988,
      -0.0020997399,
      -0.00782487,
      0.0053761704,
      -0.019769927,
      0.029670045,
      -0.014356162,
      0.0018419987,
      -0.014911287,
      0.0014705415,
      -0.022426935,
      0.00602389,
      -0.015932053,
      -0.0052583255,
      0.01101262,
      0.005345735,
      -0.017161792,
      -0.014897867,
      0.026749982,
      -0.0034547169,
      -0.019359259,
      -0.003576114,
      0.005689778,
      0.010443539,
      -0.0013509666,
      0.013748469,
      0.00056416285,
      0.026502015,
      -0.018926043,
      0.016432354,
      0.020439971,
      -0.0050752335,
      0.00608647,
      -0.014942602,
      -0.0028028723,
      -0.0172005,
      0.006319443,
      -0.028980687,
      0.024660008,
      -0.0057736565,
      -0.018730037,
      0.006911597,
      0.029259404,
      0.010278557,
      -0.017974362,
      0.013435184,
      0.013323522,
      -0.019772002,
      -0.004941735,
      0.0041200933,
      -0.0019771145,
      0.0009893957,
      -0.0063545504,
      0.023890294,
      -0.02243837,
      -0.012650729,
      0.0027971407,
      0.019465007,
      -0.011979564,
      -0.006309682,
      -0.013428134,
      -0.0029401192,
      -0.011796901,
      -0.0076708165,
      -0.018078087,
      -0.020901006,
      0.021696042,
      0.00922229,
      -0.010548862,
      0.000112347305,
      0.005036891,
      0.0035252725,
      -0.0011249157,
      -0.004686447,
      -0.007098076,
      0.0032708715,
      -0.015861684,
      0.023469863,
      0.020162499,
      -0.012584209,
      0.0074035376,
      -0.017564427,
      0.00059493794,
      -0.020319892,
      -0.0073029567,
      -0.005814458,
      0.016155664,
      -0.017198445,
      -0.005516811,
      -0.001617713,
      0.0009267404,
      -0.010630732,
      0.0046487036,
      -0.020612486,
      -0.01923922,
      0.011397988,
      -0.022486115,
      0.012638023,
      -0.014758006,
      -0.007384349,
      0.005665258,
      0.0049235485,
      0.0027138575,
      -0.0014768358,
      0.0042149737,
      0.026806744,
      -0.013191556,
      0.0019860498,
      -0.013826824,
      -0.031818278,
      0.0072414787,
      -0.014409497,
      0.013261252,
      -0.01357939,
      0.0030422434,
      -0.0065455763,
      -0.018438306,
      -0.013654173,
      0.010515633,
      -0.020932756,
      -0.0058526173,
      -0.0044358065,
      -0.0007538089,
      0.02327386,
      0.03083052,
      0.0151012195,
      0.0021448606,
      -0.0018562706,
      -0.009643622,
      0.016690906,
      -0.00037856348,
      -0.00864265,
      0.01818589,
      -0.02721022,
      -0.022168746,
      0.0014273173,
      -0.025640422,
      -0.012395084,
      -0.0011841684,
      -0.020333942,
      -0.005771363,
      0.0014752127,
      0.011695785,
      0.011045482,
      -0.022574512,
      -0.02118161,
      -0.025094794,
      -0.0030129496,
      0.013517743,
      -0.015311293,
      -0.0080253715,
      0.021304721,
      0.013473944,
      0.004146344,
      0.011540457,
      0.007596044,
      -0.00760227,
      -0.0012062854,
      -0.019236142,
      -0.038367588,
      0.00006597269,
      0.016850494,
      -0.0024050237,
      0.014581429,
      0.0020192203,
      0.028794074,
      0.0040053916,
      0.008815679,
      0.017352503,
      -0.011711323,
      0.0020340611,
      0.007219098,
      0.0063791494,
      0.008968195,
      -0.0020732335,
      -0.025711235,
      0.0066562626,
      0.0033653695,
      -0.023563905,
      0.0011185479,
      0.013406687,
      -0.0066261673,
      0.015176865,
      -0.0082092965,
      0.003018663,
      -0.0023722386,
      0.0124243675,
      -0.00011239982,
      -0.0131942965,
      -0.008642153,
      -0.008704493,
      0.010262523,
      0.001818723,
      0.0066840546,
      0.001375404,
      -0.001827179,
      0.030483792,
      -0.018351568,
      -0.0091811605,
      0.008238209,
      0.00128727,
      0.027626008,
      0.026514858,
      -0.014806742,
      -0.00392388,
      -0.02772718,
      0.009760968,
      0.011191938,
      -0.009347383,
      0.001653873,
      -0.02916941,
      -0.00058731827,
      -0.0075711748,
      0.006668761,
      0.0020489313,
      -0.004028697,
      -0.003243603,
      -0.008135759,
      -0.009699892,
      0.0070362687,
      0.006033337,
      -0.01319879,
      -0.016481891,
      0.01243553,
      0.019135121,
      -0.01950822,
      0.03075825,
      -0.012866591,
      -0.0095884325,
      -0.0005374438,
      -0.0108647775,
      -0.00005701719,
      -0.0017232613,
      0.028872965,
      -0.005459278,
      -0.0049839914,
      -0.005711039,
      -0.0016035871,
      0.04509333,
      -0.010751862,
      -0.008601613,
      -0.008678743,
      0.024756534,
      -0.004687269,
      -0.0051350184,
      -0.0059505133,
      -0.019571517,
      0.0049374206,
      0.0023721268,
      -0.0012781575,
      -0.005964593,
      -0.015887424,
      -0.0033224078,
      -0.0145705845,
      0.0008024162,
      0.0040745316,
      -0.14483485,
      0.009791887,
      -0.020249639,
      -0.006682823,
      -0.0019778367,
      -0.0028570862,
      0.013483197,
      -0.021863766,
      0.00014922049,
      -0.0036981597,
      0.031755175,
      -0.0033745684,
      -0.0007850856,
      -0.002737654,
      0.0098229945,
      0.0096582,
      0.0037809198,
      0.0027071396,
      0.035879094,
      -0.013402164,
      -0.010128462,
      0.015647223,
      0.02185369,
      -0.019842675,
      -0.038172565,
      -0.013127877,
      0.018853704,
      -0.006686862,
      -0.011832476,
      -0.007579196,
      -0.041517295,
      -0.011759546,
      -0.007154891,
      -0.00032159392,
      0.020047722,
      -0.0007191963,
      -0.027232496,
      0.008578043,
      0.013136264,
      -0.0052543874,
      -0.0063854638,
      -0.0068371487,
      0.0062845065,
      0.021564905,
      -0.013110431,
      0.017176105,
      0.02931152,
      -0.0207048,
      0.0070111537,
      0.020290015,
      -0.03581954,
      -0.029181125,
      -0.015209369,
      -0.025498182,
      -0.01290864,
      0.016344985,
      0.0041438085,
      0.0016286187,
      0.005615113,
      -0.009895271,
      0.004786942,
      0.010995037,
      0.010421143,
      0.025242489,
      0.002282318,
      0.00040610324,
      0.035263248,
      0.009905312,
      0.003563122,
      -0.0092738,
      -0.005695992,
      0.0031984143,
      0.006824735,
      0.009528628,
      0.013286662,
      0.0017308076,
      0.00397448,
      -0.00678563,
      0.002206415,
      0.0072524245,
      -0.030501576,
      -0.006358681,
      -0.05734628,
      -0.031001497,
      0.01821171,
      -0.009427164,
      0.005307666,
      0.023651704,
      -0.0038919733,
      -0.006890505,
      0.0052868305,
      0.0035661284,
      -0.034261372,
      0.0016782167,
      0.017588088,
      0.0046289125,
      -0.022849983,
      0.0029160106,
      -0.011440561,
      -0.010441034,
      -0.0053541996,
      0.021649804,
      0.0073738517,
      0.010721814,
      0.021947514,
      -0.01896618,
      0.017591188,
      0.009405081,
      0.001197664,
      0.008252141,
      0.00846847,
      0.0033651523,
      -0.0022584992,
      -0.1638098,
      -0.018691631,
      0.014067903,
      0.0114716515,
      0.036161695,
      -0.004168767,
      -0.0017981284,
      -0.008881341,
      -0.0019943956,
      -0.0073602633,
      0.008444786,
      -0.016663838,
      -0.029131219,
      0.00034415038,
      0.026005005,
      0.1281848,
      -0.014351358,
      0.0058687334,
      -0.019127278,
      0.015407746,
      -0.008086025,
      -0.018611109,
      -0.011407086,
      -0.0065849,
      0.002656376,
      -0.011139179,
      0.004290614,
      -0.0003112574,
      0.0058127423,
      -0.013079061,
      0.007856037,
      -0.00031600436,
      0.004367418,
      0.011075298,
      0.004429635,
      -0.01691733,
      0.008740069,
      -0.00097317545,
      -0.011019533,
      0.000896393,
      0.012045701,
      0.0065680644,
      0.00299592,
      0.015291661,
      0.011275137,
      -0.010382851,
      -0.01931606,
      -0.013584797,
      -0.0073795663,
      -0.0075360974,
      -0.0047353636,
      -0.036978908,
      -0.0018465177,
      -0.016241226,
      -0.013348666,
      0.025985682,
      0.0005505999,
      0.00625075,
      0.015566292,
      0.031116325,
      -0.019674212,
      0.006322909,
      0.009308814,
      0.003190311,
      0.0025711178,
      -0.0002428167,
      0.030791953,
      0.016845392,
      0.03094868,
      -0.008661642,
      0.01983466,
      0.024732197,
      -0.008997098,
      0.034182817,
      -0.010900646,
      -0.019351145,
      -0.0045237048,
      0.034282774,
      0.00082935946,
      0.002899254,
      0.01693366,
      0.0042777164,
      -0.0059363754,
      -0.010183411,
      0.012649906,
      0.01496199,
      -0.031314474,
      0.016239267,
      -0.0023138907,
      -0.004326439,
      -0.008342068,
      -0.0021174958,
      0.00056553085,
      0.012100055,
      0.0050219838,
      0.013682025,
      0.008263118,
      -0.02668595,
      0.029974388,
      0.0015020577,
      0.0022676934,
      0.0004919881,
      -0.0061256774,
      -0.03434574,
      0.019625474,
      0.026421584,
      -0.0006369651,
      0.010738179,
      -0.0046033924,
      -0.019290725
    ]
  },
  {
    "id": "genai_cohort_python_05_A_real_world_python_code_intro_vtt",
    "content": "All right, I hope you are enjoying this in this video also I will introduce you to the more code and more keywords. Now don't take it too much on the pressure side, take it light. I'm just introducing you with a lot of keywords on the code. You will understand it more as we grow and we got into the course. But I just want you to taste the Python right now. We are not writing accurate Python, but I just want you to feel the language. How does it look like? It's not that scary. Just type on the things on the keyboard, you will be all in under control. Let's explore more part of the Python. Let me take you on the screen and you will get to know more about it. So we'll explore a little bit about the Python. Objects, properties, methods. So what this is all about, so whatever we have written here, like boil waters, this is function. This is also known as methods. So it wouldn't be wrong if I just go ahead and name this whole thing as a method. Yeah, method or call it as function. These are like interchangeably terms. So again, this makechai is also a function. And this whole fill kettle, this is also a function. Anything that has parenthesis, this is a function. Now, not all the time, we actually write functions like this. Sometimes we actually write them something like this. So we have a whole big box and just like we have this small box up here, we actually like to write a lot of these functions. So imagine this is one, this is another one. This is another one, this is another one. That's exactly what we, we saw that we have fill kettle, we have plug in kettle, we have boil water. All these are functions, so consider them as like this. Now when we have these kinds of things as methods or properties, sometimes we call this outer box as another name. Yeah, this is known as whole class. So I'll just go ahead and name this, this is known as class. And class could be named anything, whatever you like, like chai, chai, shop, whatever. So this is whole big, like a factory. And each factory has its own smaller units. Would you like to actually go into the depth of it? Surely we will write some of the example code for it so that we can understand more of it. Apart from this, I also want you to understand couple of more things. First of all, there is something known as object. What is an object? So in the world of programming, a lot of things are called as object. In the real world, let's just say you want to call an object a cup. Definitely it's an object. Probably a, kettle. This is also an object, or probably chai. This is also in itself an object. This is like a thing in the world of programming in itself. Apart from this, you will also get to know about something known as properties. So what are properties? Just like English, nothing else. Properties is like probably cup, color, that's the property, or probably chai sweetness. So that is also a property. Yeah, as I told you, it's exactly like how it is in the real world. And then finally we have something known as methods, or we call them as functions. This is the most important part. This is the actionable step. Or I can call this as in simple actions. This is like performing something. Probably you are staring or you are pouring. I'll just write pour, not pouring, you're pouring or pour or, or probably drink. These are methods and this is all what we're going to learn in the world of Python that, okay, this is all the things that I have to go through and learn. And yeah, this is all it is all about, the Python. All right, nicely captured, nicely drawn. I'll put up a box so that when you see this, this looks good, beautiful to you. So a whole Python program can be a mix of these classes, these methods, objects and properties. And that's what makes a program. Can we go ahead and write another fake program which doesn't work, but still gives you an idea of all the thing that we are trying to do here. Let's go ahead and try this. Let's close this. This is not going to work again, but we can create a new file. We are going to call this one as, non Python Shop Py. Of course, py is an extension to write Python files. And, and don't worry, very soon we're going to again see that how to actually install the Python and go for it again. This is also again a part where I just say, just experience it. And again, don't worry, you will write a ton of code in the Python. So right now just experience it with me. As I said, sometimes we call it as class. So this is a bigger, bigger function, like big boss of a function. We call this one as a chai. There we go. We don't put parentheses around it because it's a class. And as I mentioned, this is exactly like this. We have a class, we can call it whatever you like. In this case we are calling it as chai. In this we can have multiple of these small factories or small area in a chai shop or Just a function. So let's go ahead and see more keywords which you haven't seen that. So then we will discuss them. Don't you worry. We actually use to underscore. Then we call init. Then we use to underscore again. And then we put it like this. This means we have opened the Chai factory. Whenever you open a factory, it requires some of the minimum things in that, we will use them. So whenever you open a new shop, you need licenses, you need some table and chair, maybe a stove, something like that. So we first of all, whenever we use something like this, there is a keyword known as self. We will go in depth of it. Don't worry about it, don't sweat it too much. This is just an experience part that what's about to come. We will go in depth of each and everything. Right now just sit back, enjoy it. Then whenever you open, this one, you actually go ahead and divide something like sweetness. That okay, by default if I'll cook, a T or I'll brew a T, this is going to be my sweetness level. This is going to be my milk level. Of course customer can customize it, but this is my factory. I'm just setting this up blueprint of it. So I'll just go ahead and say self again. This is a syntax. Don't worry on too much. I'll just go ahead and say sweetness. So whenever I make it, this is going to be my sweetness again. What is this syntax? Don't you worry, we will understand this. Right now I just want you to have this. This is a syntax similar to sweetness. We are going to go ahead and have the milk level of it as well. We are going to go ahead and say milk underscore level. And we're going to go ahead and say milk level. So whenever I open up a factory, there is a method known as init. And again, this has its own importance. So whenever you open up a class, you have to have to provide an INIT method. Init. And that's what we are doing. So class INIT means class has been initialized. As soon as you initialize, you cannot have an empty shop. There needs to be some cup, some T, or some preparation method, something like that. So this is our preparation method. If you understand it, that is okay. If you not understand it, please remove it. As of now, we are not focusing on these. I just want you to have. Because as many time as you're going to see in the iteration these words, this will make your life a Little easier right now. It might feel a little bit overwhelming, but that's okay. Then let's try to set up the factories. Okay, so factory number one, let's call this one as sip. Somebody sip the T. So we're going to define method computer. Is that dumb? You have to define everything in it. And whenever you define anything inside the class, you have to actually get the self. What is the self? It has its own important meaning. We will explore it, we'll cut through it like in depth and we'll see everything. And right now we just want to have a print statement. You're going to see in the Python a lot of printing statement. Get ready for does nothing. It just prints nothing in a black terminal. That's it. Okay, so we're going to say sipping chai. That's it. We can have another factory or a, small factory for it. Let's just say somebody wants to add a sugar. So let's just create a method for it. I want you to add sugar. Again, self is obviously going to be always there. And then we ask how much amount you want to have and we're going to do nothing. We're going to just go ahead and say print like added the sugar just like it. So this is the most basic part of how it's being done. So we have a class, we have this one basic factory. Then we have two of these methods inside this. So you can add more as well. We had just added two more. Feel free to add more. Like maybe you want to have how strong you want to have T so the customer can tell the amount of T. Now how do we go ahead and get started with this? So again, a little bit more code. But again just experience this. We will go through it, we'll dissect of it. But again I just want to have you a little bit of experience. People try to delay it as much as I don't want. I want you to have at least a look that. Okay, this is coming up. It's okay. It's okay to have this much of line of code. So how do we do it? We simply go ahead and use this chai. Remember we have used the uppercase letter here. So that's how we do it. As soon as I make my chai, this method will kick in. This is init. So as soon as initialized or means you have set up a factory, you have to tell me how much sweet it is going to be, how much the milk level is going to be. And again it's super easy. I'LL just go ahead and say that, hey, my sweetness level is going to be probably three. I don't know what that three is. Maybe three teaspoon, maybe three, tablespoon. I don't know, but it is something. Then I also give milk level. I don't know. We have probably milk level one, two or three. I'll just say 50, 50, like two portion of milk. I don't know how it is. And then we can store it into a memory with some reference. And we can call with a name like my name is Hitesh. Your name might be Rahul or John, whatever it is. So we're going to call this one as my chai. So we're going to go ahead and say my underscore chai. And then we're going to say equal. And again, I can write that better. Mychai now mychai can use or can run any of these methods. You don't have to say define again. You just have to name the method. That's it. So notice here, mychai can actually use a dot and it has all the methods like I can add sugar, I can sip. I don't want to sip right now. I want to add sugar. How, how much sugar you want to add? I don't know, probably one, probably five. Whatever. So again, this is really a lot of code in the very first section. But I want you to taste this. Not the T, but the whole code part of it. I could have avoided this and got you into the course first and just get you comfortable. But I want you to write the code by the end of this course. That's why I've written this much of the code in front of it. lines of code in the very first section is usually avoided by most teachers. I don't, I want you to get right into it. So I hope you got this part that. Yes, this is like an object. And again now just see that whatever we have done, do we have some of the objects like cup, kettle, chai? Yeah, probably yes. A little bit of the sweetness. We do have some of the cups as well. Probably sipping. We can add some cups. We have some properties as well, like chai, how much sweet it is. We are manipulating these properties as well. We do have some methods as well, like stirring, pouring, drinking. So we have a drinking method like sip. We have a method for adding the sugar and we are controlling some of the properties like sweetness or milk. So this is how a Python program and believe it or not, you have written a, really, really remarkable and Complex Python code already. This is exactly right now it doesn't have a meaning. But as eventually we'll go through and we'll learn about the logic part of it, you will be able to turn everything into logic, like what happens when you click on the screen, what happens when you move the cursor away from the screen. All of this can be controlled here, and that's what I want you to see. Yeah, Programming is nice and simple again in this section. From here onwards, we are not going to be writing any more code. Don't worry about it. Your experience part is over. But as long as you are decently comfortable in this piece of code, and this piece of code, you probably don't write it right now, but at least you understand, okay, the SIP is a smaller factory inside a bigger factory and I can use it. The add sugar is also like a small factory, which does some work. I don't know what work, but it does some work to my program, to my variables, or mean some information on the program. As long as you're comfortable with this, that's it. Your journey will be super easy in the Python and this is what it is coming up. All right, so this is all the code part for the section one. Now let's go ahead and take a little bit tour of the theoretical part. And in the very next video, we're going to learn one more thing which is super important for you to understand that why we are going with the Python. Of course you are in this course, that's why we are going with it. But there are other reasons that why Python is getting popular and why I made this course as well. Let's go ahead and move on to the next video and explore why Python part.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 A real world python code intro.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/05 A real world python code intro.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.004786296,
      0.0027435012,
      0.030827323,
      -0.055460457,
      0.0039945412,
      -0.01583152,
      0.00040736797,
      0.015488562,
      0.003475733,
      0.008260014,
      -0.021620253,
      -0.0128933955,
      0.004817276,
      0.028358012,
      0.13397837,
      0.0017040261,
      -0.00926704,
      -0.01722585,
      0.0021183712,
      -0.0016451889,
      0.0029507882,
      0.011744932,
      0.02412981,
      -0.010519119,
      0.0031681876,
      -0.0040510073,
      0.005089045,
      0.024829729,
      0.024284627,
      -0.031941827,
      -0.013286577,
      0.025079597,
      0.012376654,
      0.02064791,
      0.013151489,
      0.030734796,
      0.008984287,
      -0.021612367,
      -0.015100614,
      0.008521232,
      -0.040118307,
      0.005781373,
      -0.0057201716,
      -0.006344592,
      0.01704153,
      -0.014578888,
      0.008448182,
      -0.025245553,
      0.024602424,
      0.015717922,
      0.009398123,
      0.0062793107,
      -0.013340657,
      -0.18175377,
      0.011872645,
      -0.010333627,
      -0.015606592,
      0.0001224742,
      0.0111140115,
      0.0050264425,
      -0.023454398,
      0.025925813,
      -0.037121095,
      0.002674131,
      -0.0074818837,
      -0.025417367,
      0.021977313,
      -0.011633766,
      0.02281528,
      -0.0019151376,
      0.018737974,
      0.013624492,
      -0.021074243,
      -0.009994696,
      -0.029449327,
      -0.021033175,
      0.005557651,
      -0.0019804947,
      -0.0058259643,
      0.021955531,
      -0.007614343,
      -0.0029284204,
      0.00636309,
      -0.0045883427,
      0.02279322,
      -0.012084108,
      -0.0267915,
      -0.015652323,
      -0.0025846472,
      -0.01585193,
      -0.0082049575,
      0.015798751,
      0.0051784543,
      0.014689251,
      -0.023357948,
      -0.008812123,
      -0.025600068,
      -0.017105414,
      -0.011959539,
      0.0069934437,
      0.0007166769,
      -0.019808406,
      -0.02540699,
      -0.028337592,
      0.006236731,
      0.007994841,
      -0.0010683091,
      -0.0017193636,
      -0.020406064,
      0.010998094,
      -0.014114516,
      -0.013624232,
      0.023736203,
      0.024946531,
      0.004737333,
      -0.18533906,
      0.012147136,
      -0.0016409656,
      -0.01862404,
      0.003226823,
      -0.008806233,
      0.0012726283,
      -0.0022515948,
      0.005948307,
      -0.003073938,
      0.008200019,
      0.002444989,
      0.022725644,
      -0.00820805,
      0.0075701093,
      -0.011886469,
      -0.015933225,
      -0.010318644,
      0.016362844,
      0.0053868713,
      0.011452509,
      -0.0040375046,
      -0.011361286,
      -0.029961703,
      -0.009468576,
      -0.012741334,
      0.005465027,
      -0.009179504,
      0.032617457,
      -0.0002539057,
      -0.0035940246,
      -0.006294272,
      0.0020362886,
      -0.024601916,
      -0.025814982,
      0.011785972,
      -0.0073941243,
      0.0035428912,
      -0.009052892,
      0.013002023,
      -0.024617307,
      0.010244056,
      -0.006990854,
      -0.01940536,
      -0.0010693917,
      0.008652374,
      0.0032048614,
      0.00017574965,
      0.013012636,
      -0.0124817,
      -0.00848533,
      -0.024330134,
      0.001750023,
      0.02641908,
      0.0132967755,
      -0.004925995,
      -0.01027027,
      0.004506768,
      0.009334767,
      -0.01185095,
      -0.010682846,
      0.0034939023,
      -0.012788288,
      0.009148436,
      -0.005121835,
      -0.0016980838,
      -0.00482876,
      -0.008773384,
      -0.0078113372,
      0.019049045,
      -0.00249523,
      -0.010787516,
      0.015939789,
      0.024120405,
      0.015666824,
      0.008968913,
      -0.0026019157,
      0.024629304,
      0.008111147,
      0.019736711,
      -0.014610905,
      -0.0016795369,
      0.0014235588,
      0.00006837242,
      0.021847025,
      0.047380537,
      -0.000351003,
      -0.012100794,
      -0.025811618,
      0.030936677,
      0.0035038802,
      0.012230767,
      -0.01487925,
      0.0052125338,
      0.0062826644,
      -0.04247748,
      -0.0048837224,
      0.020838875,
      0.016667347,
      0.013528756,
      -0.0023085703,
      0.012852876,
      0.0030847348,
      -0.007740729,
      -0.0009881997,
      0.013272332,
      0.009292638,
      -0.0018683327,
      0.02084476,
      0.0055570467,
      -0.009564561,
      -0.0052146413,
      -0.0051421123,
      0.007351018,
      0.011593072,
      0.00807465,
      -0.0076808035,
      -0.01700798,
      0.012088841,
      -0.0002497789,
      -0.0034944764,
      -0.007562389,
      0.02058985,
      -0.009125572,
      -0.012312024,
      -0.012032972,
      -0.014182932,
      0.0039146207,
      0.011688146,
      0.028914291,
      -0.00024791688,
      0.00089513476,
      0.011341169,
      -0.009699228,
      -0.017597405,
      -0.029150002,
      -0.0059677786,
      0.00867802,
      -0.012998213,
      -0.0042680386,
      -0.03300619,
      -0.017839326,
      0.0006161166,
      -0.011251193,
      -0.004330599,
      -0.008515267,
      0.015376192,
      -0.012911266,
      -0.018615007,
      0.017028054,
      0.0063091437,
      0.006747042,
      0.032154545,
      -0.017901301,
      0.03055358,
      0.010477035,
      0.0028987976,
      0.0065368176,
      0.0046177674,
      -0.027816625,
      0.011772264,
      -0.11306622,
      0.034339998,
      0.002945898,
      -0.030535063,
      0.024014007,
      0.0038396034,
      -0.04314496,
      0.0009851515,
      0.009884371,
      0.025812946,
      0.0045452937,
      -0.007976087,
      0.028793478,
      -0.0050435094,
      0.0054525463,
      -0.011024011,
      0.0021196746,
      -0.01822104,
      0.02311919,
      -0.02278463,
      0.0076625436,
      -0.019037448,
      -0.0014743072,
      -0.0013199096,
      0.0018734687,
      -0.017193519,
      -0.00320165,
      0.017158024,
      -0.0055760737,
      -0.011084385,
      -0.0021878607,
      0.011193726,
      0.010934531,
      -0.01579352,
      0.002612322,
      0.013665065,
      0.0041054264,
      -0.0110173095,
      0.0068907957,
      -0.010970768,
      0.023785815,
      -0.021317113,
      0.026008856,
      0.022117903,
      -0.009684398,
      0.015639145,
      -0.00015636494,
      -0.008840495,
      -0.0015743038,
      0.005463182,
      -0.02016084,
      0.025337765,
      0.011182881,
      -0.030713737,
      0.0034650646,
      0.02224571,
      0.0013767132,
      -0.0252749,
      0.0038737964,
      0.009206845,
      -0.012997881,
      0.016583053,
      -0.00058456033,
      -0.011509226,
      0.006620524,
      -0.012482325,
      0.020502737,
      -0.014659143,
      -0.002750616,
      -0.004870331,
      0.02997095,
      0.003342,
      -0.0042977305,
      -0.01321794,
      -0.0016185244,
      0.001399772,
      -0.010588492,
      -0.013615212,
      -0.020379316,
      0.034906685,
      0.01456256,
      -0.01851231,
      -0.011417814,
      0.013438103,
      -0.0020254343,
      0.013129333,
      -0.004767163,
      -0.019895665,
      0.005054684,
      -0.018520998,
      0.015872907,
      0.019207835,
      -0.014986111,
      -0.00209493,
      -0.015779832,
      -0.0041962666,
      -0.022437997,
      0.0008708289,
      -0.016656816,
      0.010299594,
      -0.006146172,
      -0.003032949,
      -0.009074861,
      -0.005224971,
      -0.001573365,
      -0.0020668362,
      -0.031748388,
      -0.015762942,
      0.009198565,
      -0.016356098,
      0.015834969,
      -0.01430112,
      -0.015043025,
      -0.007198223,
      -0.011285605,
      0.004331371,
      -0.0016862428,
      0.0011387769,
      0.027173504,
      -0.014199794,
      -0.005272396,
      -0.0136301005,
      -0.02053244,
      -0.00024969073,
      -0.014428801,
      -0.00035168466,
      -0.019182079,
      0.0023104954,
      -0.008126086,
      -0.029899828,
      -0.024067331,
      0.010878764,
      -0.02867978,
      -0.0053164205,
      -0.018984945,
      -0.01820162,
      0.037373062,
      0.0288453,
      0.012552667,
      -0.0037329204,
      -0.016126795,
      -0.012533774,
      0.017735634,
      0.0001235021,
      -0.01600495,
      0.032372747,
      -0.023902696,
      -0.020302877,
      -0.0054912446,
      -0.024089657,
      -0.021582488,
      -0.010785039,
      -0.013131527,
      0.00050579495,
      0.0012033713,
      0.001315347,
      0.00014985554,
      -0.017560033,
      -0.0090296725,
      -0.02888596,
      0.004891077,
      0.0059208013,
      -0.0103991255,
      0.0034370057,
      0.020198403,
      0.02041058,
      0.0046806466,
      0.013243277,
      0.007483999,
      0.0020860478,
      -0.0021640966,
      -0.0054682973,
      -0.040268503,
      -0.006467956,
      0.0016029981,
      0.000339687,
      0.005516038,
      -0.018151995,
      0.013420699,
      0.0077656773,
      0.015187877,
      0.01130612,
      -0.014324032,
      0.0004647384,
      0.009411911,
      0.014632962,
      0.012212053,
      -0.0045423345,
      -0.033981152,
      -0.0029647632,
      0.0062823244,
      -0.030652124,
      0.012755504,
      0.010752146,
      -0.0029951069,
      0.019512517,
      -0.007819248,
      0.0019540957,
      0.004717933,
      0.019801846,
      0.003058924,
      -0.020740973,
      -0.013810218,
      -0.009358618,
      0.014432742,
      -0.014632228,
      0.003703956,
      0.00047289516,
      0.012874156,
      0.023801707,
      -0.0060026464,
      -0.011786498,
      0.0029557084,
      -0.0008726969,
      0.017524697,
      0.018751174,
      0.0052169585,
      -0.004654467,
      -0.029607756,
      0.0063458877,
      0.01672101,
      -0.0031156389,
      -0.0064525222,
      -0.024506755,
      0.01600441,
      -0.003459133,
      -0.0011842103,
      0.004523804,
      -0.015624426,
      0.00057794305,
      -0.015369194,
      -0.002172245,
      -0.0014734395,
      -0.0053991103,
      -0.0048413062,
      -0.022524718,
      0.010925059,
      0.017236648,
      -0.01763211,
      0.033797417,
      -0.008861554,
      -0.011024356,
      -0.00674706,
      -0.002343156,
      0.0058754887,
      -0.007144143,
      0.028745363,
      0.013169317,
      -0.0073957993,
      0.013911249,
      0.013217944,
      0.035448533,
      0.010588607,
      -0.016112063,
      -0.012709824,
      0.03563535,
      -0.0004086725,
      0.012644743,
      0.0072152712,
      -0.009086042,
      0.007752757,
      0.0064328234,
      -0.004247871,
      -0.014733923,
      -0.029892638,
      -0.0024187805,
      -0.017073618,
      -0.0038132549,
      0.010720283,
      -0.13726145,
      -0.0012044008,
      -0.018952407,
      0.00224148,
      -0.0063493056,
      -0.011022473,
      0.0058584246,
      -0.017112501,
      -0.0043597505,
      -0.023050409,
      0.022054834,
      0.00039605144,
      -0.016352337,
      -0.016154487,
      0.008146256,
      0.01547616,
      -0.0013026445,
      0.0030498228,
      0.023289867,
      0.00092503615,
      -0.0030964152,
      0.008030867,
      0.014110241,
      -0.013929408,
      -0.028949905,
      -0.006926805,
      0.006702634,
      -0.0072899517,
      -0.0049738684,
      -0.014167482,
      -0.02353019,
      -0.0071218773,
      -0.011039432,
      0.0064004315,
      0.0071241665,
      -0.0095845405,
      -0.017265838,
      0.0026739226,
      0.013136392,
      0.018118326,
      0.0028495793,
      -0.011648805,
      0.012708069,
      0.0035999005,
      -0.020089535,
      0.021408562,
      0.02893251,
      -0.0039651175,
      0.005173279,
      0.026150135,
      -0.030580977,
      -0.021997066,
      -0.016019957,
      -0.024850136,
      -0.0050338986,
      0.0014075236,
      0.01428804,
      -0.0031738516,
      0.014243308,
      -0.017569084,
      0.002432007,
      0.011645448,
      0.016616276,
      0.031491816,
      -0.005222374,
      0.014557274,
      0.048766475,
      0.00096941437,
      -0.0034934885,
      -0.0077503384,
      -0.008284499,
      0.016278956,
      -0.004350506,
      -0.000241454,
      0.0036862637,
      0.004744206,
      0.0015688182,
      0.013676219,
      -0.003739953,
      0.0023701303,
      -0.025123296,
      0.0002286796,
      -0.0606638,
      -0.029921167,
      0.02088001,
      0.0022908521,
      0.013599458,
      0.021843204,
      -0.021902762,
      -0.006549264,
      -0.0114875045,
      -0.008029949,
      -0.02415599,
      -0.0033696007,
      0.007685782,
      0.003300011,
      -0.024141284,
      0.0015743988,
      -0.010762239,
      -0.011573308,
      -0.02069968,
      0.019481292,
      0.00937868,
      -0.013515598,
      0.018544042,
      -0.023416596,
      0.014061352,
      0.02348149,
      0.008860529,
      0.0063365796,
      -0.0006384835,
      0.011939596,
      -0.0032862155,
      -0.152368,
      -0.0047346256,
      0.011194235,
      0.02091675,
      0.0324434,
      -0.0042631105,
      -0.01064132,
      -0.015645018,
      0.009678695,
      -0.0052010454,
      0.020283971,
      0.005313255,
      -0.022368312,
      -0.0036603077,
      0.038135737,
      0.1213505,
      -0.017900579,
      0.009185036,
      -0.024532992,
      0.00542872,
      -0.013999466,
      -0.012157399,
      -0.015383833,
      -0.0026778323,
      0.000098322984,
      -0.016434072,
      -0.0019918429,
      -0.0055738767,
      0.0049306815,
      -0.024866804,
      0.0048095984,
      -0.020086706,
      0.001247689,
      0.035620693,
      0.00072645687,
      -0.019728957,
      0.003729983,
      0.00726996,
      -0.009704765,
      -0.0034039628,
      0.0226776,
      0.01015236,
      -0.006072389,
      0.012218951,
      0.010896393,
      -0.011464858,
      -0.014875197,
      -0.012933244,
      0.00089879043,
      0.005631185,
      0.004781814,
      -0.03307613,
      0.014621657,
      -0.00024888368,
      -0.013004237,
      0.017428052,
      -0.016064405,
      0.009438056,
      0.017595038,
      0.020627096,
      -0.015446653,
      0.002592728,
      -0.004509941,
      0.0053928127,
      0.021702347,
      -0.009010175,
      0.022378981,
      0.01761174,
      0.011935082,
      -0.01634478,
      0.020511836,
      0.022797879,
      -0.006609617,
      0.014868378,
      -0.007471278,
      -0.018972946,
      -0.022702465,
      0.031325724,
      0.003927335,
      -0.000492626,
      0.012459867,
      0.007979156,
      0.009117906,
      -0.0001624659,
      0.015602936,
      0.023339694,
      -0.016134303,
      0.018114004,
      0.0030121256,
      0.01000241,
      0.003521995,
      0.009065329,
      -0.018548684,
      0.025168385,
      0.0031731958,
      0.01345396,
      0.020871408,
      -0.027296614,
      0.027610898,
      -0.0091303075,
      0.0043655927,
      -0.003988531,
      -0.0010109314,
      -0.017384987,
      0.022143314,
      0.01810104,
      -0.002629991,
      0.009619989,
      0.0077916635,
      -0.0037938748
    ]
  },
  {
    "id": "genai_cohort_python_06_Why_to_use_python_vtt",
    "content": "All right, so continuing further from the last video which says, hey, why do you want to learn Python? The easiest answer would be because it's easy. That is why I want to learn it. And most, for most of the people it is actually true. And I also started with Python because it was super easy to learn and eventually I switched to other languages which I also enjoy. But still I come back onto the Python every now and then. So the first reason that you want to learn about it is it's really portable. Yeah, once the program is being written in the Python they can actually go ahead and run on variety of operating system including Windows, Mac and everybody's favorite Linux as well. So there is no such thing as hey, I've written this, you need exact same system. No, it's not like that. Once it's being written it can be used on anywhere at all. That's the first major advantage of it. Also another example is Python is very, very readable and it's super easy to guess what things are doing, as long as you maintain some form of readability in your code as well, but it's fairly readable. Whatever you are doing, it's very kind of predictable. And I like predictability. And one of the major reason why this language even was invented is for productive reasons. Writing code in Java and C definitely could be a little bit faster, you can do the same task but you can also do the same task in Python as well. Almost same, almost all task and it's meant to be productive, friendly. Python and Java code looks too verbose. There is a steep learning curve for that. But Python you can pick it up pretty quickly. Within a week you can pick up decent Python. And that is one of the reason, other reason why everybody love this is something known as STL or I will call this one as easier one standard library. What do you mean by standard library? A lot of code is already being written in the Python and people are very generous that they have open sourced their code. That means those codes are available for you even to use commercially. And that is the reason, one of the reason why it's getting popular in the world of data science and machine learning and AI. Hundreds, probably not hundred millions of people have written the code and made it available for people, hey, go ahead and use it for free. And this huge standard library, availability of the code built in tools is the reason why everybody loves and we will learn a lot about pre built libraries and we just import these code. It's like moving up here so somebody has created this class. All I got to do is bring up this part of it and now I can use it. I am commercially allowed to use this piece of code from somebody else's code that makes it super powerful as a language. So this is the beauty of it. Now apart from this, this language is actually pretty flexible and multi use. So I'll call this one as multi use. So Python a lot of people think is just terminal or just for data science. But no, it can actually use for a lot of web apps. Yes, you can build full stack application with it. We use it actually in that majorly. We can do a lot of automation stuff. We can do a lot of data science, data manipulation, CSVs, even for machine learning AI. It's really a lot and my most important reason is most favorite is I call this one as simply Chai level happiness. So yeah, this language is super amazing to learn and you enjoy every bit of writing of it and I'll make sure that you actually go through with each part of it. So this whole thing is at one place. But this is my reason for using. It's a Chai level happiness that you get through writing the code for this language. And I will show you some of my neat tricks and my super easy scripts that I use still to this date and every day to do some of my regular tasks. So these are my reason why I use Python and I'm pretty sure you will also leave some of your reason to learn the Python or enjoy the Python or write the Python. Please do tweet me out. I would love to know your reason why you are using Python or you want to learn Python. Probably it will help me to improve to make these kinds of videos as well. Let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "06 Why to use python.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/06 Why to use python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0015521233,
      0.00026765672,
      0.026493648,
      -0.066717416,
      -0.018945796,
      -0.020070495,
      -0.016772619,
      0.033973273,
      0.011028843,
      0.0035586953,
      -0.0011434302,
      -0.012859738,
      0.013558835,
      0.031233601,
      0.12218424,
      0.019708611,
      -0.014356394,
      -0.032613646,
      -0.007901208,
      -0.012121709,
      -0.0024006062,
      0.015909301,
      0.004515976,
      -0.007481343,
      -0.0054329718,
      -0.0016821555,
      0.0128367795,
      -0.0039940076,
      0.018216044,
      -0.049603593,
      -0.011994044,
      0.0011656374,
      0.013770161,
      0.02813739,
      0.004298928,
      0.02097632,
      0.032730564,
      0.009379794,
      0.00066342636,
      0.01639333,
      -0.020639984,
      -0.0022486988,
      -0.0038921593,
      -0.012660702,
      0.0058853873,
      -0.009955829,
      -0.00049042545,
      -0.027502289,
      -0.009988477,
      0.0022506765,
      0.016724693,
      -0.01984089,
      -0.01939849,
      -0.18881735,
      0.020442596,
      0.0014331416,
      -0.015927425,
      -0.018772503,
      0.012795017,
      -0.005403068,
      -0.034712665,
      0.019898836,
      -0.04307911,
      -0.012458337,
      0.0017802906,
      -0.0386116,
      0.01982322,
      -0.0024980453,
      0.010678802,
      0.0014203435,
      0.016585458,
      0.02137788,
      -0.0077313394,
      -0.012067632,
      -0.011662226,
      -0.012685902,
      -0.011018777,
      -0.02174164,
      -0.0066002267,
      0.016960574,
      -0.008183417,
      -0.014218563,
      -0.003201377,
      0.007315396,
      -0.0017688662,
      0.0029900048,
      -0.025390549,
      -0.015012823,
      -0.0002882671,
      -0.0007499477,
      -0.017582402,
      0.0139997,
      -0.008368212,
      0.03201077,
      0.0046231365,
      -0.021519855,
      -0.011198973,
      0.0032314546,
      -0.004628462,
      -0.0052403957,
      0.0132642025,
      -0.018560395,
      -0.02523877,
      -0.0032955343,
      -0.0024919452,
      0.0051706196,
      0.01635005,
      0.00018359111,
      -0.012259127,
      0.009770713,
      -0.019959308,
      0.007680744,
      0.0020935326,
      0.04478703,
      0.0023290452,
      -0.18312775,
      0.017335862,
      0.0007010508,
      -0.020980164,
      0.0009931128,
      0.0020376262,
      -0.0007338923,
      -0.0058260295,
      0.016966507,
      -0.019284561,
      0.01033189,
      0.0067067393,
      0.012829921,
      -0.00039189984,
      -0.0056460276,
      -0.041236848,
      -0.015085812,
      -0.017523944,
      0.0062413854,
      0.0058458215,
      0.02533839,
      -0.020357681,
      -0.012257715,
      -0.024426635,
      -0.01246783,
      0.001172893,
      0.019092102,
      0.010801978,
      0.022977253,
      0.005065039,
      0.0072814533,
      -0.0074558626,
      0.00091878517,
      -0.021996655,
      -0.031805415,
      0.016597327,
      -0.011967739,
      0.019614521,
      -0.013624191,
      0.013234842,
      -0.02336849,
      -0.017541148,
      0.01732859,
      -0.01241527,
      -0.009533492,
      -0.010165551,
      -0.0073170243,
      0.015716722,
      0.006986959,
      -0.013974343,
      -0.011408165,
      -0.017343396,
      0.018393263,
      0.019879615,
      -0.0007867374,
      0.0004188515,
      -0.006572991,
      -0.0028365979,
      0.006430609,
      0.00948054,
      0.008585159,
      0.009851917,
      0.0015529691,
      0.019430157,
      -0.031052005,
      0.03595094,
      0.007748775,
      0.0020701943,
      -0.013609695,
      0.0030478896,
      0.00879543,
      -0.019400017,
      0.019531483,
      0.010798819,
      -0.005997737,
      -0.001299115,
      0.0045880447,
      0.018067531,
      0.013098855,
      -0.003029259,
      0.00014851963,
      0.007703189,
      0.008359858,
      -0.0012890458,
      0.017522514,
      0.02800048,
      -0.010790729,
      0.0077922763,
      -0.029519955,
      0.034983136,
      -0.01532411,
      0.012367608,
      -0.018321091,
      -0.0052368483,
      0.009917202,
      -0.016108528,
      -0.0040886533,
      -0.0029837932,
      -0.017371187,
      0.008924095,
      -0.007848629,
      0.02415387,
      0.0031790987,
      0.005326351,
      0.004131596,
      -0.029408617,
      -0.0025915147,
      0.0121868,
      0.014216756,
      0.0043725367,
      -0.034626085,
      0.014543224,
      -0.004933994,
      -0.014421455,
      0.012060709,
      0.019710768,
      0.0056368555,
      -0.005573761,
      0.002668777,
      0.0051654177,
      -0.0040048775,
      -0.0040814155,
      0.020140033,
      0.024700621,
      -0.0025108866,
      -0.006489563,
      -0.00848729,
      -0.014397887,
      -0.0023259292,
      0.025500325,
      -0.0066493517,
      0.020967958,
      0.010110928,
      0.00032316367,
      -0.0065092137,
      -0.012925454,
      0.010880789,
      0.019336976,
      -0.0029944095,
      0.007305133,
      -0.018024955,
      -0.041188248,
      -0.0022286728,
      0.0008196833,
      0.009503724,
      -0.01111023,
      -0.008550477,
      -0.013115983,
      -0.01965939,
      0.036621064,
      0.010329468,
      -0.0026443566,
      0.0043273093,
      0.0043756207,
      0.021786975,
      0.0106732985,
      0.02092152,
      0.00030133352,
      0.0053064,
      -0.021917528,
      -0.008271733,
      -0.08963258,
      0.028577749,
      0.0038987007,
      -0.014654442,
      0.009191121,
      -0.0008313613,
      -0.040092807,
      0.024869995,
      0.0016938158,
      0.0076462394,
      0.016283967,
      0.00478011,
      0.028384674,
      0.0020176764,
      -0.007697727,
      0.0060708327,
      -0.00012685767,
      -0.016151182,
      0.017347006,
      0.0025745851,
      0.0049231113,
      -0.017171495,
      -0.008517658,
      -0.0014627652,
      0.0015268393,
      -0.011279526,
      0.0061630993,
      0.027084436,
      0.010961812,
      -0.0034716472,
      0.0000437136,
      0.023528708,
      -0.00058707537,
      -0.0035642907,
      0.011889997,
      0.011413697,
      0.005265787,
      -0.008925338,
      0.0024512513,
      -0.026285445,
      0.014298621,
      -0.021659816,
      0.0113467,
      0.017745078,
      -0.022630831,
      0.0016271769,
      -0.010431664,
      0.01209036,
      -0.021592645,
      0.005668148,
      -0.020208925,
      0.0060734516,
      0.023933945,
      -0.017662568,
      -0.008504723,
      0.011966022,
      0.0020390577,
      -0.020383859,
      0.0137611125,
      0.009047932,
      -0.013751506,
      0.010059446,
      -0.0075644143,
      -0.014998802,
      -0.0030485077,
      -0.01261101,
      -0.008267813,
      -0.008211272,
      0.0044638785,
      0.011948799,
      -0.0079046935,
      -0.006213086,
      -0.0058746496,
      -0.018977141,
      -0.0033680666,
      0.00028519516,
      -0.0024227991,
      -0.012442683,
      -0.025556596,
      0.022272382,
      0.013269703,
      0.0077404566,
      0.0015867715,
      0.009366389,
      0.006721377,
      -0.007980837,
      -0.009726518,
      -0.013184153,
      0.0033718052,
      -0.013543339,
      0.0120370155,
      0.030161468,
      -0.024687013,
      0.012420604,
      -0.01886267,
      0.011759466,
      -0.0050826045,
      -0.005503059,
      -0.0072558564,
      -0.004452446,
      -0.0065092207,
      0.017400121,
      -0.018324453,
      -0.008172254,
      0.00011947238,
      0.0128112165,
      -0.018471636,
      -0.020843156,
      -0.0011213917,
      -0.0060981982,
      0.017925872,
      0.0010072207,
      -0.023364516,
      -0.0026820109,
      0.0235975,
      0.01666341,
      0.0229134,
      -0.0025720948,
      -0.00007029804,
      -0.015281366,
      -0.015217735,
      -0.007765822,
      -0.0024100675,
      -0.00730764,
      -0.0067291623,
      -0.0025627508,
      -0.0031140412,
      0.024523614,
      -0.0043217707,
      -0.021593543,
      -0.012292891,
      0.0072925948,
      -0.014187861,
      0.007315098,
      -0.007253128,
      -0.013675775,
      0.032797046,
      0.022516523,
      0.00039819186,
      0.014080807,
      -0.0134561565,
      -0.002907375,
      0.028543333,
      0.000053007487,
      -0.007948002,
      0.006656088,
      -0.008045897,
      -0.023884166,
      -0.0007706578,
      -0.024599886,
      -0.015815768,
      -0.008638455,
      -0.0155483605,
      -0.0105987815,
      -0.0008947911,
      0.03493284,
      0.0044848598,
      -0.04291489,
      -0.03322576,
      -0.025778415,
      0.007475432,
      0.00095192046,
      0.0033654375,
      0.001224505,
      0.026622066,
      0.0062015527,
      0.010794126,
      0.0016401501,
      0.005018739,
      -0.009302152,
      -0.012152761,
      0.0053229565,
      -0.028819619,
      -0.007700713,
      0.0040658014,
      0.0052955784,
      0.014849537,
      0.007917772,
      -0.002292989,
      0.022666449,
      -0.0063253907,
      0.020790746,
      0.0049918103,
      0.0029684666,
      -0.004499601,
      0.006753672,
      -0.0005996058,
      -0.0052723554,
      -0.006455689,
      -0.0004349536,
      0.012253113,
      -0.0046176105,
      0.017178532,
      0.004486316,
      0.003001493,
      0.0001438812,
      -0.024892654,
      0.0061607813,
      0.009127358,
      0.018251702,
      0.015468586,
      -0.04714776,
      -0.013765864,
      0.012895396,
      0.022703556,
      -0.018342584,
      0.010790968,
      -0.014533889,
      0.019658165,
      0.005212741,
      -0.033834886,
      -0.0055297147,
      0.0029154122,
      0.012464874,
      0.016050976,
      0.008711175,
      -0.0060506635,
      -0.0059516076,
      -0.023258727,
      -0.007851608,
      0.019876923,
      -0.0052790623,
      -0.019724322,
      -0.017636368,
      -0.01964311,
      0.00020074451,
      -0.013979229,
      0.02290004,
      0.0031618015,
      -0.006519618,
      -0.003592372,
      -0.0046185986,
      -0.004142717,
      0.0052190986,
      -0.022007283,
      -0.015283173,
      0.00070750026,
      0.0034215723,
      -0.01718129,
      0.013403577,
      -0.0013498666,
      -0.023741527,
      -0.021073375,
      0.010600686,
      0.0061983424,
      -0.006605223,
      0.02959055,
      -0.0136696305,
      -0.019311089,
      0.013687673,
      0.000733363,
      0.017036304,
      0.0014833901,
      -0.010572885,
      0.008992471,
      0.017353911,
      -0.0061984183,
      0.00029740413,
      -0.004980584,
      0.000121805926,
      0.013109294,
      0.00014519163,
      -0.006175756,
      0.0013657399,
      0.013507407,
      -0.018057693,
      -0.009407806,
      -0.005803183,
      0.021985445,
      -0.118289664,
      -0.01137426,
      -0.011829526,
      -0.00039377424,
      0.005026594,
      -0.012833449,
      -0.019331472,
      -0.030850412,
      -0.008136229,
      -0.001546406,
      0.029712941,
      0.01362725,
      -0.00010032989,
      -0.0032255182,
      0.0015964152,
      -0.002210304,
      0.009498315,
      0.0071381135,
      0.025435308,
      -0.022764742,
      0.00061418244,
      -0.0021620488,
      -0.012963119,
      0.018469378,
      -0.021007586,
      -0.003398033,
      0.008384504,
      0.0019864459,
      -0.0013745747,
      -0.0114537645,
      -0.046370856,
      0.0035686023,
      0.008955102,
      0.01112709,
      0.003221072,
      -0.009903271,
      -0.029959574,
      0.014822771,
      0.005447888,
      0.0041903313,
      -0.019256521,
      -0.0024311328,
      0.006072929,
      -0.00067622383,
      -0.007362059,
      0.0084380675,
      0.035369538,
      -0.0017486727,
      0.0025935757,
      0.048758335,
      -0.046930015,
      -0.018243663,
      -0.0062721325,
      -0.018984359,
      -0.009638674,
      0.0014329633,
      0.01978509,
      -0.010153306,
      0.014617558,
      -0.0012264041,
      0.01150051,
      -0.008436759,
      0.0013468015,
      0.033825338,
      -0.010756228,
      0.016979583,
      0.033296302,
      -0.0022119575,
      0.0011421177,
      -0.00965871,
      0.009087,
      0.017714424,
      -0.0103410315,
      0.017838972,
      0.015226261,
      -0.016920723,
      0.0034579793,
      -0.0010023396,
      -0.004918513,
      -0.0011998786,
      -0.023435086,
      0.00051023066,
      -0.05887494,
      -0.023716329,
      0.019311817,
      -0.006658357,
      -0.0023088355,
      0.012418472,
      -0.013764087,
      0.007655074,
      0.0040129004,
      0.010085552,
      -0.008718531,
      -0.009491564,
      0.0145119205,
      0.0055357283,
      -0.021653753,
      0.0028902015,
      0.009400214,
      -0.01295615,
      -0.012515526,
      0.0014574454,
      0.022369811,
      -0.025612146,
      0.010102815,
      -0.0009628713,
      0.007884535,
      0.021359596,
      0.005151624,
      -0.0004288602,
      -0.0048274053,
      -0.0023164384,
      0.0016014253,
      -0.15479058,
      0.011205561,
      0.019605406,
      0.0062663066,
      0.0075499243,
      0.004964588,
      -0.013395047,
      -0.014535798,
      0.0045115757,
      -0.0014515088,
      0.007672748,
      -0.01140579,
      -0.015778905,
      -0.0181508,
      0.012851414,
      0.15371892,
      0.014140554,
      0.0024508159,
      -0.008271354,
      0.012301765,
      -0.02200758,
      -0.016473603,
      -0.0065150084,
      0.00018536857,
      -0.008072173,
      -0.0070825503,
      0.015127687,
      -0.0024098365,
      -0.006450946,
      -0.0050846897,
      0.014258663,
      -0.018446026,
      0.013520215,
      0.01117121,
      -0.0016985121,
      -0.008278798,
      -0.018156769,
      -0.0078108637,
      -0.002951358,
      0.0071032597,
      0.016785389,
      0.0014412783,
      -0.0067131547,
      0.017126432,
      0.00022687837,
      -0.0025542837,
      -0.014811046,
      -0.0026790851,
      -0.0057728393,
      -0.020512568,
      -0.0067754383,
      -0.035765253,
      0.009147255,
      0.004372202,
      -0.022253742,
      0.014551953,
      -0.011727004,
      0.018677175,
      0.00033615623,
      0.01652679,
      -0.023229884,
      -0.010499245,
      0.008926297,
      0.00485334,
      0.012229434,
      0.006818812,
      0.03144349,
      0.010186262,
      0.011101883,
      0.013378126,
      0.019233035,
      0.016527,
      -0.012274042,
      0.022730207,
      -0.012164606,
      -0.02754002,
      -0.011407145,
      0.046265535,
      0.0016832385,
      -0.009766303,
      0.011743464,
      0.0049157133,
      -0.0031328183,
      -0.022125864,
      0.029839285,
      0.008535953,
      -0.010105385,
      0.034079723,
      -0.02452731,
      -0.0045518233,
      -0.0050824913,
      0.0035616793,
      -0.012251075,
      0.034078933,
      0.004810372,
      0.0098503595,
      0.017967787,
      -0.01849187,
      0.031832326,
      0.0049757645,
      0.016126761,
      -0.0053393934,
      -0.0058127027,
      -0.027189499,
      0.029154493,
      0.014550536,
      0.011243278,
      0.037830923,
      -0.007873072,
      -0.03428657
    ]
  },
  {
    "id": "genai_cohort_python_07_Writing_1st_python_code_on_MAC_vtt",
    "content": "Hi. And in this video I'm going to show you on a Mac that how you can install the Python as well as how you can run the Python programs. Now there are two basic ways of how you can run the Python programs. One is in the shell itself. That means in the terminal. Yeah, the black thing on the screen, terminal, shell, whatever you call that, you can simply go ahead and install that, use an existing one and you can just run Python in that. The only problem is once it's gone, it's just gone. There is no memory or there is no stored way of keeping the files. Other way of writing the Python programs are into a file with a special extension PY so that you can just store the code that you have written into a file and you can reuse it. And yes, obviously the second one is much more easier way, but I'll show you that how it's being done and how you can actually install the Python. Now installing the Python is one of the most easiest thing, one of the most simplified thing. I have installed a lot of programming language, nothing comes nearby when installing the Python. It's the most easiest one. Simply go to python. org and just click on the downloads and you can just download it for or this one, it automatically detects your system whether it's a Mac or Linux or Windows and it just gives you the exact version which you want. Now also in here you can see there are a lot of ways you can actually use this. This is the shell. I will walk you through how you can use this in your system as well. But actually you can just click on this and it loads up a shell where you can write some basic Python within just this one. So it's not really the best and the fun way, but I'll still show you some of the way I that I can just go ahead and run it like this. So I can just go ahead and say two plus two and yeah, it does the job, it adds, it's not a calculator, it does more thing. For example, I can just go ahead and say import sys before recording the video. I was trying this as well and it's import sys which is a library in Python. Remember I told you that Python has a lot of rich extensive set of library. This is one of that which is there in Python by default. But I can install so many other third party libraries which other great programmers have written and can work with this and then I can just ask it that, hey, I want to show you that what kind of system version is there and print it in the parenthesis and it just gives me that hey, the current version of Python you're working on is and whole lot of details. We can understand that details later on. But right now if I click on the download and just click on this download button, it takes me on the page where I can see the whole different versions of Python which are available. So different versions which you can install. My recommendation is go ahead and install the latest one. Although the code that we're going to run here is not going to be too much dependent on version, any latest version is going to be just fine. And you can just go ahead and look for other versions like Windows and Linux and all that. You can just click on that and it will show you all the other Windows installers as well. Pretty easy. Now let me take you onto this. So once you click on the download on the Mac, it will give you a package just like this. Just double click on this and there we go. It opens this up. I'll remove this so that it's not really that bothered onto your screen. And please excuse my other code part, I keep on working on the stuff so it's okay. And let me click on the continue. This is the first step, then click on Continue again, then accept the licenses. Yes, I do agree. I have read them thoroughly of course. And then look for the installation. This is going to take this much of installation and the type and just click on install and it is going to install it for you. Now for me it is already being installed, so no need to do this again for me. But if you do it again it's not going to bother you anything or like that. So I can just click on this and close it. Now next is you need a terminal to verify that and I can just press command space and click on Terminal and you can just open up your default terminal which is available. So no, remind me later. This is not here, so please excuse me, I'll just quit this. This is not the terminal that I'm looking for. I'm looking for this Terminal app and please excuse me, this is my other system. I'll just open up the Terminal app and this is the second one which I was looking up for. This is on the Mac so I can just go ahead and use it. I'll tell you another better version of it, but here I can just go ahead and say Python. In the Mac you have to say Python with the correct spelling of course, Python 3, because on the Mac Python comes as A default which is Python I don't know why they are still shipping it Python 2, but Python is something that you have to write. Then simply say dash dash, that is two minus and then simply go ahead and say version and this gives you that, hey, I have installed Python As long as it is giving you some version back, that's okay. That is all good. Now I these days don't use this terminal too much because I have a better thing installed on my system and I will still walk you through. Now again, I love it. That's why I'm showing you. Feel free to not use it. I use Warp and this is a terminal which is available these days also on Windows as well. I happen to use this. So if you look at this, I do have available up here. So this is my Warp. I use it and again I can just run the same command here as well. I can just go ahead and say Python and, and it gives me suggestions, AI assistant and whatnot. I can just hit enter. So this is the one way of running the Python. If you want to run up, fire up the same shell that we saw on the website, we can actually go ahead and do this. All I have to do is say python3 and hit enter and it loads up the same shell that I saw there and I can do all the things that I saw there, two plus two, which is very interesting. And it gives me four. That is nice. I can go ahead and import the sys and now I can just go ahead and say print and then I can say sys version and it gives me the system version or what Python I'm installed I have on my system. I can go ahead and type the exit and it exits it out. Previously it was not the case. Previously it was all the time exit with the parenthesis and then only it exit. But in the latest version of Python they actually made a change and wrote even a blog post that now exit works because a lot of people just write exit. It was a common thing. And throughout this course you're going to hear these kinds of stories which I think you will enjoy. Now, apart from this, let me also go ahead and show you another way of running and running the Python files. So I'll just close this terminal because I don't need it. So I have this VS code as my code editor, in case you're wondering. Yes, you can go ahead and download this as well. So let's just Google this quickly. This is VS code. This is, these days one of the Most popular editor available for Mac, Windows and Linux. And it does have AI as well. We will be using it very less in the initial time and after that I'll walk you through how you can use that a lot, better way. And you can just go ahead and download it for Mac, Windows, whichever you want. And this is what gives you installation. It's pretty easy and straightforward. Now you'll see it like this. And why is it looking the way it is? Because I have installed a theme on it. So if you google it, just for Chai theme, VS code. This is the one theme which I design and I'm super proud of it. And it's almost 91, installs. It looks good. The code looks really beautiful in it. Use the dark mode only and it looks out of the box. So all you can do is click on the extensions here. This is the icon for the extension. Just click up here and look for the Chai theme. So Chai theme and this is the one. Just click on the install and that's it. It works. And look, code looks beautiful. Now apart from this, what you can do is just drag and drop this folder. So I have this folder Python ds. Just drag and drop a folder and that's it. And we are going to write, we are going to learn how to write all of our Python code up here. Now forget about all these installation that is happening up here. These are all my AI editors and assistants and extension that I have. I do work a lot in Python and when the very first time you actually write some Python code or save some file, it might ask you to install some additional extensions to help you, to give you better suggestions for the code. And don't hesitate, just go ahead and install them. Now for the first time we are going to remove this, but I'm going to go ahead and create a folder and inside this folder we're going to create some Python code file. So we're going to say basics. This is where the folder is. Inside this folder I'm going to create a new file. I'm going to call this one as test Python py. The PY extension is really important because this makes the compiler know that this is a file that is supposed to be run by the Python interpreter or the Python programming language software. Just go ahead and write the exact same code that we have seen here. So import sys we're going to do that and I'm going to zoom this up a little bit so it's much Easier for you to see. And there we go. Once we have this import sys, we're going to go ahead and say print. Notice here the suggestions comes up automatically for me. This is because it has already installed the Python sys intellisense for me. Go ahead and install that for you. But again, no big deal, we can just go ahead and write this and I can just go ahead and see much more suggestions compared to what I was able to see on the interpreter. That's why we use these editors. Once I go ahead and use this, then I can actually open up the terminal. I can just go ahead and click on the terminal and say new terminal. Or I can use the shortcut, for me it's control and the tilde just below your escape key. And this opens up a terminal. And in this terminal I can just go ahead and say Python of course, three because I'm on a Mac. Then go into the folder When you open up your terminal, it automatically opens up this folder for you and then you can just walk through. So I'll just go into this, I press the tab, by the way, and then I can again, write this test Python py. Once I hit enter, this actually runs my code. Now the only difference is this code is permanently with me. So this is so much easier to work on with and we'll be using this. But I'll walk you through a little bit minor details before writing the files like this. But yeah, this is a fully functional Python code. And congratulations, before even writing hello world, you have written a much bigger and much better of a code. So this is what we have as of now and I'm pretty sure that you have enjoyed this. It was not that bad. It was easier comparatively. We just downloaded a Python version, we wrote some code in the shell, we wrote some code, we learned about the VS code as well as Warp, a really good terminal. And I'll show you a lot of details as we go further. This is the very basics, very first of the Python code. And you might have already realized, yes, we are not going into the basics. We will be going into extensive, in depth. And yes, I've been writing code for years. I want to transfer this, all of this knowledge to you as well. That is it for this video. Let's catch up into the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "07 Writing 1st python code on MAC.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/07 Writing 1st python code on MAC.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.010294123,
      0.0051198676,
      0.017393233,
      -0.046501588,
      -0.012540718,
      -0.0079128295,
      0.0015149654,
      0.012707081,
      0.007936454,
      0.009107633,
      -0.00877979,
      -0.021124039,
      0.025105432,
      0.02396513,
      0.124098204,
      0.008174427,
      -0.014497982,
      -0.024452716,
      0.003758072,
      -0.020358091,
      0.006852163,
      0.006105149,
      0.009033795,
      0.0031184591,
      -0.0015741572,
      -0.0057890555,
      0.008618608,
      -0.010380312,
      0.019523537,
      -0.022288049,
      -0.034331076,
      -0.002981809,
      -0.011659289,
      0.008599268,
      0.008198132,
      0.017594365,
      0.0015221965,
      0.0119403,
      0.007864606,
      0.008108289,
      -0.02038066,
      0.00441901,
      -0.00050029065,
      -0.018285636,
      0.017180908,
      -0.012685373,
      -0.0038220491,
      -0.023956047,
      -0.010014777,
      0.008336107,
      -0.0010963376,
      -0.006493432,
      -0.04111811,
      -0.1895146,
      -0.0045625544,
      -0.00441828,
      -0.006334409,
      0.009356912,
      0.016532447,
      -0.0010072823,
      -0.027896738,
      0.026109485,
      -0.045690455,
      -0.0013655555,
      -0.002611549,
      -0.015765559,
      0.02568538,
      0.00016169675,
      0.009267788,
      -0.012256514,
      0.017196974,
      0.020304706,
      -0.0038414947,
      -0.0081768455,
      -0.033187952,
      -0.0059161675,
      0.022004142,
      -0.020589974,
      -0.01224991,
      0.03811501,
      -0.0043003038,
      -0.002141189,
      -0.0072492175,
      -0.004171188,
      0.016396457,
      -0.004352855,
      -0.032102086,
      -0.0038469208,
      -0.0046060723,
      -0.006377019,
      -0.018168503,
      0.027290272,
      -0.014725923,
      0.023050299,
      -0.020578304,
      -0.0010352272,
      -0.027672628,
      0.000005932849,
      -0.009077943,
      -0.0036129993,
      0.026200578,
      -0.013783907,
      -0.04282601,
      -0.015135379,
      0.0021644726,
      0.0005218474,
      0.016450176,
      -0.012323128,
      0.0013106004,
      -0.017605115,
      -0.010114657,
      -0.01635615,
      0.012917209,
      0.036362242,
      0.005613971,
      -0.17945904,
      0.007062344,
      0.008045264,
      -0.009872228,
      -0.013372899,
      -0.00015688669,
      0.003782403,
      -0.00165624,
      0.009725143,
      -0.0131422095,
      0.022589814,
      0.0036837552,
      0.017541047,
      -0.012818542,
      -0.022958593,
      -0.016253943,
      -0.023437262,
      -0.027159289,
      0.010503048,
      0.012078005,
      0.019022243,
      -0.01343555,
      -0.0026807596,
      -0.021446865,
      -0.017795172,
      0.00083950534,
      0.02178448,
      0.012304446,
      0.026071867,
      0.007870109,
      0.00717592,
      -0.0018466838,
      -0.0029175354,
      -0.012445883,
      -0.030298177,
      0.0088964235,
      -0.014478229,
      0.027481968,
      -0.011327284,
      0.019319978,
      -0.0094323605,
      -0.0006572987,
      -0.0019537592,
      -0.00076049066,
      0.0028747509,
      -0.004263864,
      0.00893344,
      0.009598237,
      0.0108147105,
      0.008087019,
      -0.017627094,
      -0.008472958,
      0.008459486,
      0.025741579,
      0.0018681189,
      0.001463771,
      -0.0094761755,
      -0.018175539,
      -0.010415937,
      -0.018829314,
      -0.0033831364,
      0.012995351,
      -0.010774534,
      0.014165958,
      -0.018960128,
      0.01800485,
      -0.008812203,
      0.012427622,
      0.01117106,
      -0.015129625,
      -0.017603671,
      -0.012482646,
      0.030722661,
      0.029263683,
      0.0039874525,
      0.0067430106,
      0.0053583225,
      0.025576774,
      0.01579185,
      0.013490303,
      -0.011932149,
      -0.00878638,
      0.0062357755,
      -0.012133992,
      0.01854001,
      0.02357599,
      0.0036309483,
      0.0018860133,
      -0.034620117,
      0.03560018,
      -0.0006867205,
      -0.0005972472,
      -0.025350442,
      -0.003305929,
      -0.02052081,
      -0.020178027,
      -0.009714247,
      0.014133698,
      0.00041833695,
      0.02870914,
      0.00044469544,
      0.028169839,
      0.0001570736,
      0.0152795445,
      0.01625368,
      -0.014081167,
      0.0071089016,
      -0.0028623543,
      0.015808545,
      0.0072358013,
      -0.03325111,
      -0.006471794,
      0.0021462634,
      0.0023288615,
      0.005032869,
      0.033415478,
      0.014780127,
      -0.017500417,
      0.01093805,
      -0.007946813,
      -0.0041273553,
      -0.0052273595,
      0.015248841,
      0.005777401,
      -0.018072005,
      0.007623065,
      -0.0012248093,
      -0.017904326,
      0.026503723,
      0.032833535,
      -0.008784868,
      0.011225396,
      0.007831237,
      -0.014700096,
      -0.009159043,
      -0.009893874,
      -0.0007750907,
      0.00043595923,
      -0.027609175,
      0.013153576,
      -0.014563103,
      -0.026988028,
      -0.009842417,
      -0.007550005,
      -0.013318239,
      -0.010543874,
      -0.0040482176,
      -0.012387474,
      -0.01730287,
      0.02869167,
      0.010198606,
      -0.0024395804,
      0.02515344,
      -0.00211206,
      0.029295612,
      0.014707825,
      0.021496091,
      0.010738616,
      -0.023757126,
      -0.035455246,
      0.012284452,
      -0.08737169,
      0.0153026255,
      0.011895996,
      -0.026438108,
      0.007635591,
      0.013509514,
      -0.029731542,
      0.001045156,
      0.0038110341,
      0.008055032,
      0.0017397583,
      0.0025199591,
      0.035078716,
      -0.010538656,
      -0.0033857168,
      -0.0081305355,
      -0.0007196083,
      -0.00547094,
      0.0031033866,
      -0.0016441289,
      -0.008674011,
      -0.011498292,
      0.0059865606,
      -0.0014429725,
      0.0074527995,
      -0.016824028,
      -0.0061776424,
      0.02320464,
      0.007832707,
      -0.00072794704,
      -0.00084457156,
      0.05235571,
      -0.007905952,
      -0.012159724,
      0.0034614766,
      0.0045718914,
      0.012916933,
      -0.018620627,
      0.005748825,
      -0.014503644,
      0.016046112,
      -0.019168222,
      0.02695155,
      0.02676131,
      -0.036393307,
      0.0023386274,
      -0.0045535746,
      -0.004156807,
      -0.014761705,
      0.012529737,
      -0.027863424,
      0.029062197,
      0.0073042866,
      -0.011260525,
      -0.0024343252,
      0.007264699,
      0.014548713,
      -0.01308201,
      0.0024819525,
      0.010448792,
      -0.004265689,
      0.0064684087,
      0.003514131,
      -0.014160592,
      0.001586662,
      0.0042999,
      0.022158418,
      -0.006596152,
      0.012240674,
      0.010255939,
      0.01722704,
      0.00598494,
      -0.016873457,
      -0.013238211,
      -0.0040778,
      -0.010219026,
      0.004301259,
      -0.010282359,
      -0.008127722,
      0.019554984,
      0.015528595,
      -0.00765482,
      -0.0101076225,
      0.0015353552,
      0.0006578458,
      -0.014043855,
      -0.01723538,
      -0.027577344,
      -0.0040458664,
      -0.011916254,
      0.020650147,
      0.026624272,
      -0.010740054,
      0.011138055,
      -0.0062740375,
      0.004201726,
      -0.006573158,
      -0.011593298,
      -0.0013901677,
      0.009755395,
      -0.0076956605,
      0.009771583,
      -0.013840121,
      -0.00090022286,
      -0.008430208,
      0.00216889,
      -0.006814821,
      -0.008817299,
      0.011337075,
      -0.009366493,
      0.014712878,
      0.002981456,
      -0.0034703221,
      -0.00290956,
      -0.0034828668,
      0.012783506,
      -0.001499944,
      0.011552062,
      0.0026628324,
      -0.005282516,
      0.01824537,
      -0.015270254,
      -0.014030825,
      0.0049675754,
      -0.016364837,
      0.008683681,
      -0.004532227,
      0.0022618975,
      0.0002974723,
      -0.032911412,
      -0.027713992,
      0.012147164,
      -0.020066805,
      -0.0063238707,
      -0.0016422215,
      -0.0059373914,
      0.038673654,
      0.017248442,
      0.0032758377,
      -0.0061602406,
      -0.0036127958,
      -0.0023320427,
      0.02318616,
      -0.006527075,
      -0.0043436466,
      0.031749997,
      -0.02584221,
      0.0010579852,
      0.0017366468,
      -0.0009857207,
      -0.016072068,
      -0.0172802,
      -0.017396616,
      -0.008723221,
      0.0040499354,
      0.018227281,
      0.022750184,
      -0.034873035,
      -0.02617515,
      -0.0188566,
      0.018086586,
      0.013530656,
      -0.009126567,
      -0.006361356,
      0.016993819,
      0.01325008,
      -0.003581615,
      -0.0007010878,
      -0.0014204554,
      -0.011412885,
      -0.0065502166,
      0.014150437,
      -0.028461425,
      -0.005231489,
      0.0035057527,
      -0.022285089,
      0.016475325,
      0.0033712967,
      0.026431574,
      0.013775568,
      -0.012896447,
      0.020319767,
      -0.01285934,
      0.0111662485,
      0.021962628,
      0.017569542,
      0.007042723,
      0.0052329185,
      -0.015796045,
      0.004831748,
      0.005086794,
      -0.0039797416,
      0.012919461,
      -0.0011361202,
      -0.007654293,
      0.016675746,
      -0.016968697,
      -0.0056936624,
      -0.0002837187,
      0.02990987,
      0.005979637,
      -0.02031323,
      0.001946241,
      -0.0029538781,
      0.036156945,
      -0.010373023,
      0.009411264,
      0.0047430764,
      0.017369237,
      0.030015096,
      -0.019565517,
      -0.0035645743,
      -0.004904557,
      0.010326177,
      0.018403191,
      0.016596748,
      -0.007626862,
      -0.0011103643,
      -0.027356418,
      0.0068294434,
      0.013212712,
      0.014737563,
      -0.017389908,
      -0.018152922,
      0.009601308,
      0.0033190488,
      -0.014074622,
      0.011112566,
      -0.016822357,
      -0.013978901,
      -0.005256492,
      -0.0063042017,
      0.009767848,
      0.016573627,
      -0.01945331,
      -0.0019257087,
      0.005525365,
      -0.011522329,
      -0.0038461434,
      0.013345615,
      0.0034522284,
      -0.025011584,
      -0.0069097774,
      0.004564691,
      -0.013768355,
      0.0011669949,
      0.03073435,
      -0.012037755,
      -0.002585286,
      -0.00010789555,
      0.0065520327,
      0.038276136,
      -0.003426959,
      -0.009861695,
      -0.023598284,
      0.028569233,
      -0.015535714,
      0.013696831,
      -0.023822576,
      -0.020265002,
      0.027642837,
      0.0077810986,
      0.008681583,
      -0.0016640474,
      0.0071837595,
      -0.011110049,
      -0.016667001,
      -0.005603555,
      0.0063953754,
      -0.11709002,
      -0.015729262,
      -0.02439819,
      0.029572222,
      0.0010335202,
      -0.013040593,
      -0.009581097,
      -0.017714906,
      0.0013083916,
      -0.010452156,
      0.021468468,
      -0.011672615,
      -0.0031069953,
      -0.008353601,
      -0.00788186,
      0.001526905,
      0.018849438,
      0.0073951087,
      0.03676872,
      0.007241775,
      -0.015498654,
      0.0030494079,
      0.009093617,
      -0.0020165576,
      -0.041991826,
      -0.012007401,
      0.005009216,
      0.0022517866,
      -0.00073027244,
      0.00022452197,
      -0.027140785,
      -0.003540585,
      0.02198064,
      -0.0034824882,
      0.027771842,
      0.004447772,
      -0.032134492,
      0.0030842568,
      0.0068443073,
      0.0042553293,
      -0.02322558,
      0.011343524,
      0.017914549,
      0.017983455,
      -0.022617571,
      0.012281497,
      0.037235733,
      -0.00797794,
      -0.0055749784,
      0.034334574,
      -0.05013726,
      -0.017379291,
      -0.012322906,
      -0.018970521,
      0.0026619593,
      0.007401261,
      0.00033075633,
      0.0006064716,
      -0.011569485,
      0.006084263,
      0.0062565766,
      -0.0053835185,
      0.0029730657,
      0.030300105,
      -0.0014564077,
      -0.0021703748,
      0.024295125,
      0.008917755,
      0.011564595,
      -0.028410701,
      -0.0010538286,
      -0.00726454,
      -0.009278017,
      0.009970791,
      0.0105396025,
      0.009885533,
      0.0013892106,
      0.0084850015,
      0.0049011107,
      0.0022462464,
      -0.0219859,
      -0.0076094917,
      -0.05412751,
      -0.023209305,
      0.011366963,
      0.010147556,
      0.008724889,
      0.021751922,
      -0.01758402,
      0.002827565,
      0.021029843,
      0.006379335,
      -0.0151875755,
      -0.009197949,
      0.019492079,
      -0.009036932,
      -0.030752053,
      -0.014258685,
      0.008916466,
      -0.008116692,
      0.0006837074,
      0.010956365,
      -0.00604997,
      -0.008960476,
      0.019571789,
      -0.024862608,
      0.030501166,
      0.016111216,
      -0.0029273974,
      0.0020410805,
      -0.012712438,
      -0.006841601,
      0.03130978,
      -0.15849994,
      0.00823026,
      0.017291948,
      0.010981418,
      0.01280001,
      -0.012993951,
      -0.02641711,
      -0.003635228,
      0.012478401,
      -0.015087231,
      0.013699555,
      -0.013686585,
      -0.028232565,
      0.0071799285,
      0.0047298744,
      0.14205138,
      0.00066462386,
      0.015226904,
      -0.011787259,
      0.019340416,
      -0.011724681,
      -0.00991606,
      -0.005265403,
      0.00499069,
      -0.012518516,
      0.008283837,
      -0.01650058,
      0.00031676661,
      0.014200406,
      0.015729059,
      0.0027764428,
      -0.02080816,
      0.012929802,
      0.014960732,
      0.004055213,
      -0.008652103,
      -0.0040353257,
      -0.013938307,
      0.00017366782,
      0.004443986,
      0.0163136,
      0.008553365,
      0.00041128602,
      0.0037191622,
      0.006515894,
      -0.0027172528,
      -0.010267164,
      -0.013458149,
      -0.019260937,
      0.0016233878,
      -0.0044364547,
      -0.038561724,
      0.008702599,
      -0.02836752,
      -0.0075491844,
      0.03392891,
      -0.019423006,
      0.013245702,
      0.012101248,
      0.015058844,
      -0.018829651,
      -0.010562565,
      0.008082319,
      0.00014982594,
      0.022770382,
      -0.013449339,
      0.025951609,
      0.0062714927,
      0.019476384,
      0.003999503,
      0.041507013,
      0.012503089,
      -0.01739046,
      0.018849067,
      -0.022347545,
      -0.013004552,
      -0.0074086273,
      0.021674072,
      0.003982466,
      -0.014999983,
      0.006202983,
      -0.007162537,
      -0.012173021,
      -0.008311547,
      0.022911325,
      -0.008027217,
      -0.017907158,
      0.024417797,
      -0.009275861,
      -0.00817595,
      -0.020361973,
      -0.004400006,
      -0.0101588415,
      -0.004015337,
      0.0007786858,
      0.009105174,
      0.01825769,
      -0.009810984,
      0.027226998,
      -0.0044359053,
      0.014681598,
      -0.013635447,
      0.0070833634,
      -0.025041878,
      0.020788535,
      0.015028112,
      0.021244602,
      0.025957024,
      -0.0008646736,
      -0.029396847
    ]
  },
  {
    "id": "genai_cohort_python_08_Writing_1st_python_code_on_WINDOWS_vtt",
    "content": "These days softwares are very compatible. You don't have to worry about Mac or Windows too much. But still, just for the sake of having it, I will walk you through that how you can install and run Python programs on Windows as well. Again there are two ways of writing Python programs. One in the shell itself, another one is into file so that we can save them forever. And obviously the second method is really good. So let me just take you onto a Windows screen and walk you through that how you can actually have a Python program being installed as well as run your very first fil file. And it's exactly same as if you have watched it on the Mac or probably if you have skipped it, you should really Var it. It's a great way and probably you'll learn a thing or two. Anyways, if you don't want to do that, that's totally okay. Now I am on a Windows machine and together we're going to go through. So just go ahead and fire up any browser of your choice and go ahead and have it for me. I just use the default version and I will just go ahead and use python. org to download the Python. Now apart from this I will also use one more website to download the VS code. This is my choice of editor and I prefer to use it instead of others just for the sake of. It's good, it's really nice and I enjoy writing code in VS code so that's why I use it. Just download it for Windows. Simple installation, nothing big deal. No big deal there. Now once you go onto the python. org what we can do is we can click on download and just download the version whichever version you want to have with and usually it detects the system whichever you are on and it gives you appropriate version for it. But in case not you can always click on the download and look for the version you are looking for. In my case it is Windows. So all the things you can see specific version of Windows I recommend to choose the latest one. But you can click on Windows or Linux or Mac and can choose that. Hey, I want this specific version of the Windows so you can see there's lots of installers and things available for you. Usually the default installer which is next next I agree one is usually the best one. You can just go ahead and install this one. I have got one here on my desktop. It doesn't look like it's the file but hey this is my virtual machine so just bear with me. Now once you click on this it says, hey, install the Python where you want to install it. The first thing I would love to add a path so that I don't have to manually go ahead and add the path. I can just use it and, and use the admin privileges when installing the Python. So you can just go ahead and use it wherever you like so it doesn't really bother much. So I just happen to click on the admin privileges when installing so that it can be simply used. Click on install now and it just includes and install everything and allow this app to make changes. Yes, please go ahead and install this. And once you go ahead and install this, this should take fairly less time. And apart from this I also as I mentioned in my Mac video as well, I actually don't use the default terminal or the command prompt from either the Mac or Windows. I happen to use one another software which I really love. Feel free to use it, Feel free to ignore it, feel free to use the original terminal, but I happen to just use it. I just love it. It's available on Mac, Windows and Linux, so I just happen to use it. So just thought to mention it now apart from this, once it's installed, which is taking a little time and let's wait for it and let's wait for it to finish. All right, since it's a Windows you will see these kinds of things that sometimes the path is too long and all of that. So we'll just disable the length and yes, just allow it so that sometimes the path where the Python install is too long. So Windows has its own default configuration so we can just close it now once we have it, I can just go ahead and open up any terminal. In this case I will use Warp and I'll open up a new shell of Warp and so I'll just open this up and I'll start a fresh one. So this is a new shell that I've installed and here I can just go ahead and type Python and then I can say version and hopefully this will give me that. Hey, Python is installed on your system. I'll just zoom this a little bit. Oops to zoom. Shouldn't have done that, but anyways, let me fix this. Anyways let's go up here. So now that we can see that we have Python 2, any version that you have installed and as long as this command is giving you an output that means we are all okay, we can just get started working with that now on your desktop. Just go ahead and create A new folder, wherever you like. So I'll just go ahead and say new, folder. I'm going to call this one as Test Win. Because anyways, I'm going to go ahead and delete this after this recording and I'll just close this one. I'll fire up my VS code, in the. So once I have this, I'll just go ahead and say that, hey, let's go ahead and minimize this. And now just go ahead and drag and drop this Test Win. And as soon as you drag and drop this, yes, I do trust the author, because I am the author. And just click on this new folder. We're going to call this one as 01basics. And inside this we're going to create our new first file, which is going to call this one as Python Test document. The extension PY is really important. Once you have this, this might prompt that. Hey, do you want to install some Python extension? Yes, I would love to install it because it will help me to get suggestions so that I can just write faster. Just like Python has. Every language has these suggestions so that you can write your language faster. It's taking a little bit while to install this and in case you're wondering, I do have a theme installed on my VS code, which is known as chai theme and which makes the code look a little bit better. So that's why I use it. Once you have this installed, that's it. It's an official extension by Microsoft. So I can just go ahead and close this, close this, close this, come back to your code, click on this icon so that you can see all of the code files. And now I'm going to go ahead and just again, this, not this. I just wanted to open the font size editor so that I can have some bigger font and hopefully that will help you to see the code much easier. On my Mac it's much easier. I can just go ahead and say import sys, just like we have been writing it on the very first installation. This is just importing some system libraries, with the Python and now you can just ask it that, hey, just go ahead and print sys and as soon as I put up a dot you can see we have so much things to learn about it. And as of now I just want to have the version that is it. It's going to give me some output. But this is really what I want now. I want to open up the terminal and the easiest shortcut for that is command and tilde. The tilde is the key just below your escape key. And here I can just go ahead and say, hey, Python, I just want to run this file, which is inside the 01, the basics and inside this Python test. As soon as I run this file, it says, hey, this is the expected output, this is what we have, and as long as you are able to run this, that means, hey, it's all good. Now we have all the things up and ready and, and we can see everything is working fine. Absolutely. On Windows, this is exactly the same thing that we had done on the Mac as well. And I highly recommend you to Var that video as well, so that you can see how intercompatible this is. You don't have to worry about anything, it just works out of the box. The same instruction are on Mac, the same instruction are on Windows. The only difference is in the path, that is it. So in the Windows it is, forward slashes, in the Mac it's the backslashes that is it. Apart from that, no difference at all. So this is good. We have done the installation as well as have run the first, decent, Python code. It's not a hello world, but it's definitely a good one and we have done it all awesomely. So that is it. We are now compatible with the installation as well as running the first command. We have a good foundation of knowing the Python as well. And from the next video onwards we can start writing some good amount of Python code, have some ground basics and the knowledge behind the scene of Python. It's all fun. Let's go ahead and get started with Python.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "08 Writing 1st python code on WINDOWS.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/08 Writing 1st python code on WINDOWS.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0034699966,
      0.012093373,
      0.020665849,
      -0.04652054,
      -0.0069011436,
      0.008314106,
      -0.010655251,
      0.01258458,
      0.009796295,
      -0.0008086306,
      -0.012190544,
      -0.027247267,
      0.023746865,
      0.027269477,
      0.10754373,
      0.007646154,
      -0.015862402,
      -0.018019235,
      0.0147922,
      -0.013075847,
      0.0079287505,
      0.005785249,
      0.011967541,
      0.001348366,
      -0.00050805695,
      -0.0041706725,
      0.005322002,
      -0.009301639,
      0.026063453,
      -0.03572394,
      -0.02602393,
      0.005727903,
      -0.0179543,
      0.021394268,
      -0.0043310085,
      0.020465687,
      0.0027626895,
      0.009139834,
      0.008934213,
      0.019057121,
      -0.03247026,
      0.0029625066,
      -0.0015671796,
      -0.026001064,
      0.01975753,
      -0.004552626,
      -0.004534541,
      -0.014698129,
      -0.010404531,
      0.009630518,
      -0.0016184758,
      -0.010454241,
      -0.031977404,
      -0.18088421,
      0.0026737107,
      -0.0033963243,
      -0.0011740852,
      0.0075492673,
      0.013931372,
      0.0005874028,
      -0.023288334,
      0.025977852,
      -0.043419894,
      -0.01249543,
      -0.01591439,
      -0.027397327,
      0.02212246,
      0.0044562803,
      0.0017056263,
      -0.010728663,
      0.015460325,
      0.008398187,
      -0.0042980523,
      -0.0066843606,
      -0.03555289,
      -0.015681932,
      0.008922636,
      -0.0311531,
      -0.019697366,
      0.05399049,
      -0.00836454,
      -0.0055211713,
      0.0036479626,
      0.008381562,
      0.014938322,
      -0.01301616,
      -0.043269526,
      0.011434998,
      -0.004533975,
      -0.011933287,
      -0.010589815,
      0.035162717,
      -0.0074797724,
      0.024794377,
      -0.021701943,
      -0.0016122009,
      -0.014331947,
      -0.002982098,
      0.008578358,
      0.012313535,
      0.03193072,
      -0.00489111,
      -0.061657183,
      -0.021658977,
      0.011230028,
      -0.0010451324,
      0.009116695,
      -0.003187534,
      -0.004894513,
      -0.02944484,
      -0.013818387,
      0.004798784,
      0.009941025,
      0.03857535,
      0.0054099644,
      -0.17691386,
      0.011049799,
      0.013160211,
      -0.010089094,
      -0.013469657,
      0.0037937693,
      -0.0046168095,
      -0.015314149,
      0.019289793,
      -0.014871379,
      0.020782353,
      0.00712048,
      0.021992376,
      -0.0031116153,
      -0.0034545239,
      -0.022663884,
      -0.015805706,
      -0.025235455,
      0.0022033833,
      0.0015594999,
      0.012486074,
      -0.01875435,
      -0.0037907283,
      -0.028847547,
      -0.028075822,
      0.0064683934,
      0.009251008,
      0.0030371705,
      0.01864226,
      0.0059732874,
      0.023601329,
      -0.0005170277,
      -0.011443983,
      -0.019828394,
      -0.033187382,
      -0.0033936526,
      -0.013296626,
      0.027588071,
      -0.013895189,
      0.021851297,
      -0.011395252,
      0.0014451487,
      -0.012946001,
      -0.015560038,
      -0.00974929,
      0.003620334,
      0.0039852583,
      0.0014043027,
      0.024723025,
      0.0010285453,
      -0.0059569725,
      -0.017730163,
      0.005847979,
      0.013235404,
      -0.0006908013,
      0.010516648,
      -0.0136225745,
      -0.007899948,
      0.00020523528,
      -0.024740197,
      -0.006034429,
      0.017175863,
      -0.0063313963,
      0.018090662,
      0.0008784414,
      0.0033963607,
      -0.0083528245,
      0.0010619911,
      0.007658481,
      -0.009197428,
      0.0002693757,
      -0.024126966,
      0.03160764,
      0.02484194,
      -0.0068515507,
      0.002210554,
      0.0036422266,
      0.009650822,
      0.022405986,
      0.0046458268,
      -0.0074700844,
      -0.005019535,
      0.006018467,
      0.0059716464,
      0.008843885,
      0.015677948,
      -0.014279152,
      -0.0030512712,
      -0.015142754,
      0.028961184,
      -0.012912008,
      -0.00096316845,
      -0.019568456,
      -0.0020440002,
      -0.0036338938,
      -0.01248912,
      -0.01166187,
      0.0070540337,
      0.010309591,
      0.018798156,
      0.0055444343,
      0.02389243,
      0.0062384806,
      0.022347175,
      0.025582002,
      -0.020521326,
      0.009846761,
      0.006221515,
      0.012468382,
      0.0020808568,
      -0.027879454,
      0.002206819,
      0.0061830743,
      0.0005397223,
      -0.00054211804,
      0.019749645,
      0.0077700885,
      -0.022425935,
      0.0014834502,
      -0.0018770554,
      -0.021217998,
      -0.012628938,
      0.016439991,
      0.0060800994,
      -0.02075687,
      0.002080508,
      -0.0019950068,
      -0.004135861,
      0.034435384,
      0.03779486,
      0.0046859905,
      0.005713698,
      0.007851052,
      -0.0144591415,
      -0.012659588,
      -0.008187577,
      0.0070377286,
      0.020187998,
      -0.021289958,
      0.014647954,
      -0.02507458,
      -0.021516204,
      -0.0044631865,
      -0.007212107,
      -0.0138953645,
      0.0017986629,
      -0.004328385,
      -0.030261312,
      -0.019082889,
      0.03633552,
      0.013246147,
      0.0039576115,
      0.0122201545,
      0.00033048994,
      0.02435181,
      0.010334907,
      0.014934481,
      0.0055333236,
      -0.017418401,
      -0.016353892,
      0.015990939,
      -0.09195681,
      0.007006706,
      0.008339428,
      -0.019467816,
      0.011434206,
      0.02062786,
      -0.037639476,
      0.0011281735,
      0.0026888887,
      0.00006963054,
      -0.0005580032,
      -0.0046443567,
      0.030179732,
      -0.016722115,
      -0.004017078,
      0.006388346,
      -0.003387035,
      -0.0027899977,
      0.01160391,
      -0.008425843,
      0.0020768032,
      -0.014311269,
      -0.0059289397,
      -0.015203633,
      0.015424077,
      -0.007671835,
      0.007708103,
      0.028981395,
      0.0035160838,
      -0.014921912,
      -0.011405835,
      0.03315962,
      -0.002514045,
      -0.014509487,
      -0.0025402107,
      0.0110078035,
      0.007201095,
      -0.0043579144,
      -0.00071418943,
      -0.01358102,
      0.019183546,
      -0.043536052,
      0.02256074,
      0.02770802,
      -0.026492871,
      0.0128035275,
      -0.004995111,
      0.005411103,
      -0.02291659,
      -0.005576784,
      -0.03375516,
      0.021744208,
      0.01091483,
      -0.017547717,
      0.004088491,
      0.008389908,
      0.017631367,
      -0.013583516,
      -0.0006695283,
      0.004594708,
      -0.0054505086,
      0.012059424,
      0.008143991,
      -0.013893368,
      0.008135308,
      0.010634497,
      0.02485473,
      -0.015012289,
      0.010829168,
      0.0008112177,
      0.019935394,
      -0.002277923,
      -0.0071100495,
      -0.01745015,
      -0.0117673315,
      -0.0195532,
      0.010877639,
      -0.0070051397,
      0.0003345355,
      0.032995682,
      0.0075715072,
      -0.002041521,
      -0.0048129307,
      0.007286382,
      0.0035591212,
      -0.012254972,
      -0.015109007,
      -0.017712802,
      0.011547276,
      -0.0239511,
      0.0030096513,
      0.027542228,
      -0.0018338055,
      0.005243196,
      -0.0034851476,
      -0.00065535336,
      -0.0072618104,
      -0.01751667,
      -0.0006372517,
      0.015094382,
      0.001579685,
      0.007293142,
      -0.0028907836,
      0.006007943,
      -0.006278933,
      0.0035605237,
      0.0028457723,
      -0.007570218,
      -0.0013475585,
      -0.0043757176,
      0.009973398,
      0.002347445,
      -0.0049085533,
      0.010151518,
      -0.013212889,
      0.0039974586,
      -0.003034825,
      0.007773787,
      0.00015909947,
      -0.00924466,
      0.01384543,
      -0.019641344,
      -0.0012728969,
      0.009975358,
      -0.011049039,
      0.007565997,
      0.0063951206,
      0.007734355,
      0.004807893,
      -0.030746998,
      -0.029256074,
      0.017700203,
      -0.023874976,
      -0.008948524,
      -0.005078709,
      -0.015322106,
      0.022329725,
      0.01930225,
      0.0038495816,
      -0.0026480139,
      -0.005406566,
      0.0021113097,
      0.027798181,
      -0.0006259685,
      -0.010447876,
      0.02303687,
      -0.035316564,
      -0.0050791707,
      -0.0028262401,
      0.0057300325,
      -0.00070669956,
      -0.021128459,
      -0.02328422,
      -0.016722616,
      0.005067742,
      0.010016189,
      0.024016341,
      -0.025374226,
      -0.017116196,
      -0.031747993,
      0.0051604197,
      0.015396627,
      -0.008948845,
      -0.0050575463,
      0.011326858,
      0.011081249,
      -0.0017350493,
      -0.016712226,
      0.0005239158,
      -0.003978864,
      -0.0032845377,
      0.002796922,
      -0.036017258,
      -0.016841827,
      0.009317341,
      -0.004912788,
      0.023487145,
      0.015103458,
      0.022148108,
      0.015859134,
      -0.0034582114,
      0.009686593,
      -0.013767204,
      0.0053664055,
      0.009371971,
      0.026250424,
      0.0031137217,
      0.011941076,
      -0.012683067,
      0.0092087295,
      0.006452244,
      -0.010106977,
      0.01843744,
      -0.0011270436,
      -0.016400034,
      0.016443975,
      -0.02457634,
      -0.013453705,
      -0.0022755384,
      0.021417582,
      0.01032241,
      -0.016101029,
      0.0032123455,
      -0.0095719565,
      0.025522849,
      -0.0054823514,
      0.0077177277,
      0.004663563,
      0.019687159,
      0.010007192,
      -0.017852154,
      -0.002384099,
      -0.010987458,
      0.009861753,
      0.017472202,
      0.01688894,
      -0.010659793,
      0.005952512,
      -0.01894852,
      -0.004132796,
      0.0011168781,
      0.009903574,
      -0.011485785,
      -0.007861406,
      0.0038521683,
      0.011280934,
      -0.024043832,
      0.015052124,
      -0.0050151604,
      -0.018311154,
      0.012710925,
      -0.005371216,
      0.014601012,
      0.01075181,
      -0.007573857,
      -0.0046899565,
      0.008957567,
      -0.0050095925,
      0.0062669925,
      0.016507719,
      0.00074532285,
      -0.013783524,
      -0.009022713,
      0.010812325,
      0.00024353694,
      -0.000057255103,
      0.018720826,
      -0.0037621967,
      -0.014941043,
      -0.0041535636,
      0.012919725,
      0.038132012,
      -0.0024598648,
      -0.016543977,
      -0.0225218,
      0.027809897,
      -0.016886888,
      0.015157857,
      -0.02035146,
      -0.02432845,
      0.021692865,
      -0.0030398937,
      0.0024021014,
      0.015862672,
      0.00799128,
      -0.017222164,
      -0.015820004,
      0.007372333,
      -0.0063456553,
      -0.1250952,
      -0.021746706,
      -0.014588526,
      0.03275161,
      0.0028966323,
      -0.022898892,
      0.0031108947,
      -0.018579202,
      0.0007210366,
      -0.005364792,
      0.020975173,
      -0.007455513,
      -0.015463377,
      -0.0028530515,
      -0.004319621,
      0.020487925,
      0.0012608648,
      0.0035809053,
      0.034020096,
      0.012534586,
      -0.026454777,
      -0.007097168,
      0.011404311,
      -0.0106755225,
      -0.038963284,
      -0.016776256,
      0.005614315,
      -0.00043307393,
      0.0017249796,
      0.0076694353,
      -0.023976214,
      -0.0016676908,
      0.012841928,
      -0.008427999,
      0.045501903,
      0.0040997625,
      -0.033937722,
      0.008804117,
      0.0020148938,
      0.0018945748,
      -0.007110272,
      0.015338646,
      0.023401694,
      0.023583366,
      -0.026451904,
      0.012383157,
      0.031435654,
      -0.007545069,
      -0.0018942168,
      0.03721336,
      -0.049020853,
      -0.023134891,
      -0.011944557,
      -0.022588208,
      -0.0034714115,
      0.013507256,
      0.0097302385,
      0.010169307,
      -0.014954484,
      -0.006690342,
      -0.0009808154,
      -0.0023411133,
      0.013193632,
      0.019601453,
      0.009913743,
      -0.009369285,
      0.025453787,
      0.0030100264,
      0.0056365444,
      -0.029287228,
      0.007232342,
      -0.0030660385,
      -0.014349416,
      0.010010974,
      0.016926795,
      -0.0044186125,
      0.01681218,
      0.011230817,
      0.00017303818,
      -0.003198106,
      -0.023332223,
      -0.0015242145,
      -0.054979403,
      -0.021077998,
      0.008050092,
      0.014957934,
      0.00023059784,
      0.016599672,
      -0.0072719613,
      -0.0028543237,
      0.008341112,
      0.012784297,
      -0.015714817,
      -0.006707294,
      0.024038792,
      0.002536137,
      -0.026242862,
      -0.012049033,
      0.0093909,
      0.000785688,
      -0.013568476,
      0.010412784,
      -0.0073675523,
      0.011095719,
      0.013219576,
      -0.030649053,
      0.019107448,
      0.019142272,
      -0.010142477,
      -0.00982423,
      -0.021932278,
      -0.0067627975,
      0.015980514,
      -0.15764129,
      0.0039046903,
      0.011880687,
      0.009414182,
      0.013673983,
      -0.008929115,
      -0.02547179,
      0.0012713958,
      0.0022331139,
      -0.012969227,
      0.009676806,
      -0.012085624,
      -0.024634557,
      0.0010439357,
      0.009966709,
      0.14559038,
      -0.004905409,
      0.0017484205,
      0.0011125528,
      0.022861162,
      -0.015668076,
      -0.0019487812,
      0.012198639,
      0.01303366,
      -0.009069815,
      -0.0010299202,
      -0.0102050435,
      -0.0079658115,
      0.007160756,
      -0.008906072,
      0.010916259,
      -0.025832936,
      0.01626139,
      0.0115056215,
      -0.002142851,
      -0.0023979328,
      -0.009777766,
      -0.009195712,
      0.0012056847,
      0.011427985,
      0.012901853,
      -0.0035127879,
      0.007760612,
      -0.0071727885,
      0.0039092065,
      -0.0054909145,
      -0.008108069,
      -0.033758853,
      -0.018648053,
      0.0015917628,
      -0.020614471,
      -0.043001965,
      0.0060287635,
      -0.012581462,
      -0.013247532,
      0.036659505,
      -0.008715588,
      0.008523826,
      0.014732864,
      0.018319812,
      -0.017182862,
      -0.0039396905,
      0.0044669625,
      -0.006474014,
      0.029693056,
      -0.016317865,
      0.034208216,
      0.007528109,
      0.012420596,
      0.004042949,
      0.046414256,
      0.0111524025,
      -0.018704893,
      0.009070111,
      -0.0074224677,
      -0.0072882236,
      -0.013758496,
      0.016738024,
      -0.0039209444,
      -0.00501131,
      0.0074463254,
      -0.0056085056,
      -0.013753885,
      -0.002184923,
      0.030692182,
      -0.00010009913,
      -0.012538507,
      0.01663804,
      0.004260895,
      -0.021233885,
      -0.012198345,
      -0.023488374,
      -0.019908128,
      -0.007101483,
      0.0006107183,
      0.0010228351,
      0.002797889,
      0.000447699,
      0.025709137,
      -0.0098247295,
      0.017354826,
      -0.0016586428,
      -0.002414034,
      -0.020891277,
      0.024219634,
      0.014649975,
      0.01895305,
      0.006071444,
      0.009218368,
      -0.022621581
    ]
  },
  {
    "id": "genai_cohort_python_09_Get_everything_in_virtual_environment_vtt",
    "content": "Hey there and welcome to the Python. Now that the Python is installed and you have written at least one hello world. Now the next topic that we need to work on is virtual environment. Why does it even exist and why do we even have the virtual environment? So let me tell you that. What's the story behind Virtual environment? It's like safeguarding your application from other versions and don't clutter your operating system and also so that your program actually moves safely in other environment as well on Linux, on Mac or other people's computer. So the most important part of it is, let's just say that I want you to say that this is your whole computer, all right? And you have installed Python on it, all right? Once you've installed the Python, you will also bring third party code. Remember I told you that you can actually borrow this piece of code anywhere you like? Yeah, this is exactly like that. And let's just say you're working and you have installed Python on your computer. Now you go ahead and say, hey, I want to borrow this piece of code. So this piece of code is installed on your system, probably in an orange color, and you work on that. Now you will have Python programs in your computer just like this. This is a small piece of another standalone Python program that you're working on. This is also another one. This is also another one. Now all of these Python piece of code, if they are dependent on this, they have to actually go ahead and communicate with this one. So all of this is dependent on this one. And let's just say this piece of code gets an update and now it's not of orange color, it's actually red in the color. But your application, at least some of the application, was dependent on it, on the orange version of it. Now what will happen? This is not going to work, so this will turn purple. Not a good idea, that you install the whole thing, whatever the dependency you need, into a single place. And now if there is a dependency on previous version, it just gets really bad. What could be the alternate version of this entire thing, the alternate version is actually super easy, that instead of just installing it like this, let's go ahead and turn this back into the orange color. And instead of everybody marking this as a dependency like this, we simply go ahead and say, hey everybody, you get your own Python. I will have Python on my whole operating system, that's okay. But you also get your own version of the Python, the smaller version. And whenever you have a dependency of it, you don't install the dependency on my Whole computer. You actually go ahead and install the dependency on your system as well. Now this is actually behind this. So there we go. And similar to this, we will have. Oops, we will have this dependency here. So we'll just go ahead and take this one here as well, and this one here as well. Now if this operating system want to stay up here, so let's just say let's turn this into green, everybody is happy. But this application now says, hey, I want the upgraded version of it and I'll be fine with this. This can turn into red. This application is okay, but this one is still using the orange version. Maybe this one also wants to get even higher version than the red. Probably a yellow version of it. It's not visible. We'll choose another color, probably sharper. Yellow. Yeah, this one use a yellow version of the Python or any sub module of the Python. And this is the whole concept of a virtual environment. You virtually create an environment and this environment is just isolated for this application only. It's not dependent on your whole operating system. You can install whatever you like on your operating system, but you have a virtualized environment. That means for every application that I create, I create a, standalone Python environment. And then whatever I install gets installed in this ecosystem, not on my whole ecosystem. And that's your virtual environment. I hope you love this diagrammatic explanation. These are super awesome. I love them actually. So let me walk you through that, how you can actually create them. There are many ways. The one that I'm showing you is the most common one, the first one. I'll show you the most latest one as well, which is my favorite and you will also love that. And that piece of tech as well. The most important and the easy way of having this is first, let's just say we want to have a folder. We're going to call this one as 01, not minus And we're going to call this one as, virtual. Feel free to name it whatever you like. The easy way is right click on this and open the integrator terminal. Now you will have a terminal or also known as command line opened up in this particular folder. So I do have Python installed on my system. I can just verify it. I'm on the Mac, so I have to say Python If you're on Windows, just say Python. So I'll just say Python Just give it option dash And then we will use a program which automatically comes up, which is venv. This is known as Virtual Environment. Now, in what folder or in what directory you want to install this virtual environment. Remember I told you we will install this in yellow one. We will install this in, in this one. Whatever you want to call this one, you can just go ahead and call this one. Usually you'll see that either people call it also Venv, the same name, or some people call it as venv. Just to make sure that it's hidden from your regular files. That's the only reason for creating, you can call it Superman. No problem there. Once I hit Enter, this actually goes ahead and create this whole thing. Now notice here it created a new folder. I'll create one more folder here so that it looks nice and I'll call this one as temp, or I can call this as src for Source. And now you can see that we have this whole virtual environment folder. This actually creates a separate version of the Python in itself. Now this has just created it, it's not activated. Currently you're using the Python version, which is installed in my whole computer, not the small box here to activate it. There are actually two commands, one for Mac, one for Windows. You can use any one of them. First I'll walk through with the Windows. So name your folder, call it as vnv, Env. Whatever you have named your folder, I have called it as Venv. So I'll name this one. Then on the Windows and again it's always same, it's a forward slash. Then you have to go ahead and say scripts. You will have a folder. So go ahead and open this up and see the folder and inside the scripts you have slash, again forward slash and activate. This is how you activate your virtual environment in Windows if you're on the Mac. What I have to do is say Source. That is how you load this. Then I can see I do have a bin folder. So I'll go inside the bin. Not like that. So source. And then I'll go ahead and say first let's go ahead and dot, venv. Then I'll go inside the Bin folder and in the Bin I can see that I do have an activate. So just open this one. This activate. This is the file that I want to run. So I'll just go ahead and say activate. Once I hit Enter, you will see something like this parenthesis vnv. That means now you are not in my computer's Python, but you are into the virtual environment. This is where you can install and bring the third party. It will not affect anything that you are Bringing in one. So let me also walk you through now that you understand this part that why this was being done. To actually go ahead and install a third party, I have to write it better third party software or third party modules. So let's just say I want to bring in a module of web development Flask, which is very, very popular. All I have to do. There are a couple of ways how you can do this. I can just go ahead now say pip install and simply say hey, I want to install flask. It will go ahead and install flask. And if I want to bring in, let's just say request a module which helps me to make web requests, I can just go ahead and do this. But there is another way. Yeah, there is another way which is more popular. In this folder, whichever folder you are, you actually tend to create a new file known as requirements Txt Again it's a simple text file and there is no strong reason to call it as requirements. It can be hitesh txt as well. But I'm telling you the standard way and you simply go ahead and write what do you want? For example, I want requests. So it will install request. I can have a flask and it will have the flask and then I can simply go ahead and say one more command, pip install install. But use the installation from a file so dash R for the file and just go ahead and say I want to have this from requirements. Other thing which most people does is don't install requests just like this. They want a specific version of it. Like this version will be not red of course or a yellow like I want to install I will walk you through how they get the version specifically later on. But this is how they mention it this one. Let's just say I want a version of There is a website from where you get all of this information. So don't use sweat on it. Don't you worry on that. Now once I do this and if I go ahead and say install this one and I hit enter on this, this is going to go ahead and work on it. You can ignore totally this. You may have installed Python package in a global environment, all of this. So no, don't worry, totally ignore it. We know that 100% we are into this one virtual environment. It's asking us that hey, you can upgrade your pip as well and all of this detail. But hey, rest assured that you have actually installed everything in your virtual environment. That's the reason. So again It's a simple process and it makes your environment totally separate. So we have the yellow one and in this and the beauty about it, the best part is now I can give this software to anyone and I don't have to include this virtual environment. They can install these dependency which are required for my software to run using this requirement files super easy. How cool is that? Actually that is why I love this and I will walk you through with this entire process. So now that you know that how you can actually have a virtual environment, one and only important thing that I would recommend you. Everyone is always work in venv. That means virtual environment. It is kind of a good practice and a must have practice in the entire Python ecosystem so that your every software that you're writing, every package that you're writing is independent of your software, independent of your computer. And anybody can actually install your software and run through it, whether Mac, Windows or another system, always and always work in virtual environment. So we will bring this habit of having virtual environment. And the best part is that I don't have to give this file to you. Vnb, you can create a fresh virtual environment, install the things from the requirement and that's how the softwares are being shipped. We usually put it into git ignore, but you can just go ahead and simply delete it as well. But first I'll actually go ahead and say deactivate so that it actually deactivates this virtual environment. And then we'll just go ahead and say hey, I will just delete this. This is how softwares are being shipped. You actually install a fresh copy through the Python requirement and we ship only requirements as well as we ship just the Python code. So this is one way of having the virtual environment. This is a traditional way. Yes, you need to know this is traditional way. Traditional. This is a traditional way. There is also a new way of installing the Python. So the traditional way says that you always go ahead and use venv. But there is a new way as well. And new way actually uses more tool of the Python which is uv. This is actually much, much powerful. And a lot of people are loving this. This is too bright. A lot of people are loving the UV way, including me. And in the next video I will walk you through that how you can actually have UV to work all of this. You don't have to do all of this installation, everything, it works much smoother than this. I would prefer to teach you the UV way because hey, it's modern world. This was used like seven, eight years ago. Still, it works fine, and you will see a lot of source code with this, but I want to walk you through with a newer way as well. So in the next video I will walk you through with this. Probably at the very end of the section. I still want to discuss a little bit more on how to organize your files and folders and structure in the Python in a production way. So let's talk about that first, and then I will walk you through with the UE as well. Don't worry, I'll teach you this part as well. As a bonus, let's go ahead and catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "09 Get everything in virtual environment.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/09 Get everything in virtual environment.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0014232746,
      0.0013311048,
      0.018108206,
      -0.050465092,
      0.020014757,
      -0.0012489647,
      0.025940256,
      0.011477321,
      0.014714618,
      -0.0062766965,
      -0.013478519,
      -0.012240433,
      0.03818415,
      0.039431155,
      0.120630376,
      0.017960757,
      -0.0063515916,
      -0.007844687,
      0.0045938483,
      -0.012620655,
      0.0053628646,
      0.0036897922,
      0.016118627,
      -0.0125702955,
      0.021868426,
      -0.0013528093,
      0.004184552,
      0.00076846674,
      0.006773475,
      -0.032022856,
      -0.026305543,
      0.0028773772,
      -0.009247982,
      0.031812135,
      0.019132825,
      0.0041276123,
      0.022275677,
      0.006289476,
      -0.0053948183,
      -0.006269777,
      -0.022070572,
      0.012420678,
      -0.0075314846,
      -0.020692116,
      0.019876046,
      -0.022700975,
      0.0076746596,
      -0.03410678,
      0.01773345,
      0.013111126,
      -0.013655775,
      -0.011982292,
      -0.0150160305,
      -0.18287632,
      -0.0023238075,
      -0.009877382,
      0.0043012816,
      -0.004462515,
      -0.005119598,
      0.018311163,
      -0.034020383,
      0.020512145,
      -0.041146953,
      0.0017103079,
      -0.01066232,
      -0.01933282,
      0.012043305,
      -0.007032001,
      0.01326642,
      -0.017662767,
      0.01841365,
      0.0049271514,
      -0.012617612,
      -0.011123839,
      -0.042178866,
      -0.010620684,
      0.0033502735,
      -0.03028119,
      0.0019676166,
      0.027028909,
      -0.016284512,
      -0.010811938,
      0.004061099,
      0.0036895801,
      0.018351853,
      0.014279117,
      -0.031709023,
      -0.01286171,
      -0.0049239774,
      -0.00981463,
      -0.010578935,
      0.016931925,
      -0.024195252,
      0.0035968109,
      -0.02199258,
      0.015014012,
      -0.028848726,
      0.006184771,
      -0.010251087,
      0.019343724,
      0.019238403,
      -0.00008670228,
      -0.037955865,
      -0.008569842,
      0.007008619,
      0.0064725955,
      0.010370537,
      -0.015998792,
      -0.00043599453,
      -0.019846585,
      0.0015384627,
      0.0061677326,
      0.00006809631,
      0.032561902,
      0.0040378068,
      -0.18123707,
      0.017845191,
      -0.010800178,
      -0.003955628,
      -0.004682448,
      0.0003894338,
      -0.0017049138,
      0.00020931319,
      0.0000146667935,
      -0.013030862,
      0.01298712,
      -0.0033318177,
      0.021899188,
      0.0016297055,
      -0.023180889,
      -0.03621848,
      -0.022994407,
      0.0014121046,
      0.026886515,
      -0.000009326501,
      0.03161477,
      -0.026920453,
      -0.009223263,
      -0.030744908,
      -0.018682223,
      -0.007571639,
      0.03303956,
      0.01505521,
      0.024302205,
      0.00095788867,
      0.015115821,
      -0.015377288,
      0.009558657,
      0.00012342686,
      -0.034523312,
      0.012148915,
      -0.0176471,
      0.016862392,
      -0.004171993,
      0.02079454,
      0.0045680427,
      -0.0039879614,
      0.0020234273,
      -0.020471621,
      -0.013800691,
      -0.0021859794,
      0.002887853,
      0.011895918,
      0.0095297955,
      0.008138657,
      -0.0033496704,
      -0.019917166,
      0.009848342,
      0.032052815,
      0.011119974,
      -0.008661924,
      -0.017434096,
      -0.008352611,
      0.013032489,
      -0.014654141,
      0.0023944697,
      -0.012993357,
      -0.0038242175,
      0.0077898945,
      -0.029811755,
      0.0115139065,
      -0.011351389,
      0.014262771,
      0.0076545747,
      0.0034734844,
      -0.004843419,
      -0.007668327,
      0.017068073,
      0.0060522845,
      -0.004226825,
      -0.004586165,
      0.017100418,
      0.005742793,
      0.0066688377,
      0.000569626,
      -0.008775263,
      0.008651441,
      0.0037418902,
      -0.014848878,
      0.024190241,
      0.021002019,
      -0.007694233,
      -0.010792605,
      -0.016225263,
      0.024270538,
      -0.015348413,
      -0.018463014,
      -0.023911694,
      -0.0019544896,
      -0.006820971,
      -0.0030677738,
      -0.025553474,
      0.020107077,
      -0.0068210172,
      0.010090897,
      -0.0018028282,
      0.021694489,
      0.011585906,
      0.0023288084,
      0.0009516578,
      0.014250753,
      -0.0025473135,
      -0.0026743228,
      0.026110947,
      0.0123192975,
      -0.022934115,
      -0.014191939,
      0.009173469,
      0.0031050676,
      0.009909906,
      0.012553506,
      -0.007023398,
      -0.0154122645,
      0.007253926,
      0.013321894,
      0.00031206448,
      -0.015229038,
      0.0106497435,
      0.011729368,
      0.0009758623,
      0.0053479946,
      -0.016048674,
      -0.012013826,
      0.021876793,
      0.034029428,
      -0.002018272,
      -0.0014332504,
      0.009392146,
      -0.00003795041,
      -0.026741842,
      -0.0083455015,
      -0.005576929,
      0.015435291,
      -0.015209579,
      0.0045470553,
      -0.012490792,
      -0.020019135,
      0.0044960366,
      -0.012973593,
      -0.0035261647,
      0.013625448,
      -0.011690356,
      -0.023505965,
      -0.009168993,
      0.020280696,
      -0.0014004464,
      0.006615752,
      0.022564357,
      -0.011732561,
      0.023491992,
      0.008579971,
      0.024253368,
      0.003549647,
      -0.006981961,
      -0.015406132,
      -0.0070814593,
      -0.090910636,
      0.019100344,
      0.004901821,
      -0.02227522,
      -0.0006459297,
      0.0031773283,
      -0.03208534,
      0.0018891998,
      0.009592321,
      -0.0015919483,
      -0.014982553,
      -0.0060761385,
      0.03569164,
      -0.006531746,
      -0.018255344,
      0.008691284,
      -0.0019246682,
      -0.005535434,
      0.009233431,
      -0.00944849,
      -0.012463873,
      0.007675952,
      0.0013776687,
      0.0016736984,
      0.014150579,
      -0.025145618,
      0.0020201528,
      0.02773083,
      0.013992463,
      0.011925574,
      -0.029326132,
      0.029549988,
      -0.0052293115,
      -0.004804769,
      -0.0071246647,
      -0.004370208,
      0.01239135,
      -0.039492413,
      -0.000010463,
      -0.014041813,
      0.012534179,
      -0.012007659,
      0.021955865,
      0.01572206,
      -0.012680611,
      0.0024996912,
      -0.021746045,
      -0.0013409026,
      -0.025665887,
      0.0081313,
      -0.011385219,
      -0.0049471688,
      0.01052435,
      -0.019452728,
      -0.0044528283,
      -0.0025486744,
      -0.0029424147,
      -0.006655964,
      0.01648037,
      0.01761041,
      0.006491309,
      -0.012326616,
      0.0026180164,
      -0.008903601,
      0.019611541,
      0.0002974489,
      0.009500324,
      -0.01491428,
      0.015071565,
      0.022187127,
      0.022895666,
      -0.013842787,
      -0.009621596,
      -0.016007993,
      0.017443517,
      -0.012458809,
      -0.009667893,
      0.00790572,
      -0.015061679,
      0.0061516496,
      0.0055075465,
      -0.0018548304,
      0.009822635,
      0.004786424,
      -0.0017271783,
      0.01286485,
      -0.0152196605,
      0.01029885,
      0.001398234,
      -0.017519545,
      -0.0023951612,
      0.02570408,
      -0.008233526,
      0.00962786,
      -0.0062411525,
      0.012755643,
      0.0050794343,
      -0.01189979,
      -0.01211646,
      0.0011689302,
      0.0056094485,
      0.010368371,
      -0.02148056,
      0.01565932,
      -0.00761302,
      0.0034182929,
      -0.014414172,
      -0.014331754,
      -0.023772748,
      0.0049523823,
      0.0121989045,
      0.0147622535,
      -0.011401044,
      -0.0035763828,
      -0.012976924,
      0.012480571,
      0.003226451,
      0.027141152,
      0.009185999,
      -0.0037944342,
      -0.0050455476,
      -0.012324889,
      -0.0040359385,
      0.011130822,
      -0.018453125,
      -0.008736205,
      -0.014995496,
      -0.0027553353,
      -0.0017347547,
      -0.029595798,
      -0.031540208,
      0.021742549,
      -0.022712613,
      -0.019057304,
      -0.015080308,
      -0.012358616,
      0.028035609,
      0.014282696,
      0.0031418279,
      0.025537461,
      0.0041294484,
      0.003059957,
      0.0041233078,
      -0.008280181,
      -0.014405282,
      0.026979264,
      -0.019428313,
      -0.016151669,
      0.0066107735,
      -0.018777125,
      -0.0015433611,
      0.0078016547,
      -0.010788019,
      0.0017132749,
      -0.0098752435,
      0.02316053,
      0.01913524,
      -0.006735873,
      -0.02105016,
      -0.015580215,
      0.0069494797,
      0.016575785,
      -0.010826306,
      0.007623652,
      0.0120810075,
      0.0030962045,
      0.009814612,
      -0.005058259,
      -0.002938164,
      0.0010312797,
      -0.017106375,
      -0.02078495,
      -0.039375123,
      0.0007828401,
      0.0031028143,
      -0.008724651,
      0.03124622,
      0.007002907,
      0.018080851,
      0.014871683,
      0.0035116333,
      0.000034406625,
      -0.01980658,
      0.012754722,
      0.0018991266,
      0.030487796,
      -0.0023057994,
      -0.0046465374,
      -0.009290513,
      0.019836398,
      -0.003508725,
      -0.010504199,
      -0.00046394346,
      -0.004300154,
      -0.008338315,
      0.026855579,
      -0.022231996,
      -0.005212083,
      0.016305353,
      0.014267061,
      -0.003938591,
      -0.023113396,
      0.014873184,
      -0.012221191,
      0.019225644,
      -0.013611411,
      -0.0030072336,
      -0.0034155063,
      0.018747123,
      0.026243452,
      -0.009641359,
      0.0010333642,
      0.0048968825,
      0.014269433,
      0.012106911,
      0.013554614,
      -0.012344709,
      -0.0023528445,
      -0.009594471,
      0.009175292,
      0.017648024,
      -0.0013633912,
      -0.0054173702,
      -0.0077661015,
      0.00035512232,
      0.008688882,
      -0.011003284,
      0.012709529,
      0.008863949,
      -0.01622189,
      -0.009036288,
      -0.009234071,
      -0.00036111107,
      0.010906607,
      -0.02070544,
      -0.0034334597,
      0.0056070783,
      0.0041420124,
      0.009861139,
      0.014247067,
      0.0006268688,
      -0.020864973,
      0.0020077077,
      0.0015536702,
      0.0034377032,
      -0.0036769465,
      0.020406159,
      -0.009946313,
      -0.009787003,
      -0.003598363,
      0.009484274,
      0.039098773,
      -0.0031764077,
      -0.029479846,
      -0.017889183,
      0.021621404,
      -0.010265354,
      0.02145731,
      -0.015860416,
      -0.026959537,
      0.016616818,
      0.0015121831,
      -0.010096008,
      0.02173705,
      0.010721415,
      -0.022859735,
      -0.005925074,
      -0.011779376,
      0.02209706,
      -0.11957459,
      -0.030803649,
      -0.018051766,
      0.03837787,
      -0.0111133205,
      -0.023984857,
      -0.0020952965,
      0.00093211624,
      0.024726378,
      0.005136346,
      0.016749846,
      0.0027216643,
      -0.007905378,
      -0.0070162853,
      -0.0017018779,
      0.0058696885,
      -0.00095283234,
      0.0040162983,
      0.03036505,
      -0.005427323,
      -0.003221217,
      0.0004699554,
      0.0045670434,
      -0.00034239853,
      -0.012897076,
      -0.0008285731,
      0.010153777,
      0.0006206498,
      0.0035799656,
      -0.011402102,
      -0.008928914,
      -0.012827898,
      0.015904296,
      -0.007854826,
      0.018552214,
      0.00016699877,
      -0.029450297,
      0.016481705,
      0.0005932624,
      0.014418495,
      -0.017894018,
      -0.0032599461,
      0.029142959,
      0.013623611,
      -0.012757627,
      0.009626098,
      0.013462587,
      -0.005094614,
      -0.0013873627,
      0.039277077,
      -0.038944405,
      -0.009102067,
      0.00040835052,
      -0.030264188,
      -0.005416959,
      0.022210298,
      0.018514749,
      -0.003176123,
      -0.011549271,
      -0.010037325,
      0.0034244854,
      -0.00063115364,
      0.012430566,
      0.014263715,
      -0.007440721,
      -0.010884658,
      0.014226749,
      0.014728753,
      0.002622237,
      -0.017889628,
      -0.006771794,
      0.0023557406,
      -0.010833425,
      0.01231515,
      0.010469864,
      0.013515509,
      -0.00857389,
      -0.00028419442,
      -0.0062078782,
      0.011397803,
      -0.01818751,
      -0.010283894,
      -0.04692613,
      -0.017277503,
      -0.007412409,
      0.0030127056,
      0.032804087,
      0.025936546,
      -0.007313762,
      -0.0015270854,
      0.0024322926,
      0.015475454,
      -0.020494508,
      -0.021910327,
      -0.0032818303,
      -0.008356778,
      -0.023230063,
      -0.00649108,
      0.0057839155,
      -0.016076291,
      -0.009088752,
      0.0051118764,
      0.0054944227,
      -0.004541363,
      0.018168189,
      -0.0018508107,
      0.02332991,
      0.01606201,
      0.00031191294,
      0.008415656,
      -0.005689327,
      -0.007840302,
      0.0066597825,
      -0.16862033,
      0.0054330137,
      0.0042636865,
      -0.003215919,
      0.0036520208,
      -0.009266977,
      -0.042179465,
      -0.0015355748,
      -0.0016551815,
      0.0017797253,
      0.009825678,
      -0.012874701,
      -0.020368138,
      -0.014287068,
      0.001175727,
      0.15148275,
      0.0069452794,
      0.0010294444,
      -0.0008983015,
      0.020914182,
      -0.027638752,
      -0.009027928,
      -0.0062110825,
      0.037542947,
      -0.0042734076,
      0.0001202223,
      0.008198882,
      -0.021171272,
      0.0009334316,
      0.0007339911,
      0.010529705,
      -0.0136525985,
      0.011798055,
      0.009942568,
      -0.003225868,
      -0.022817856,
      0.007398822,
      -0.0015745453,
      -0.0026570424,
      0.0074523496,
      0.016646858,
      -0.0023463094,
      0.005488393,
      0.011791616,
      0.014565115,
      0.0015933681,
      0.004923437,
      -0.012779617,
      -0.009250928,
      -0.0080799125,
      0.0043769535,
      -0.0695614,
      0.0068798773,
      -0.024131775,
      -0.027910003,
      0.025695536,
      -0.008886318,
      0.022017542,
      0.0069298265,
      0.03529922,
      -0.01936013,
      -0.0058410754,
      -0.00046009704,
      0.0066548493,
      0.0167391,
      0.0018701582,
      0.03859827,
      0.0064713997,
      0.024204748,
      -0.009212627,
      0.036820404,
      0.022974394,
      -0.009616005,
      0.011000391,
      -0.017266458,
      -0.015970102,
      -0.02492465,
      0.026262773,
      0.021543529,
      0.004788205,
      0.003209316,
      0.0057784375,
      -0.014669279,
      -0.0035154293,
      0.023562005,
      -0.011212055,
      -0.01760706,
      0.0058573177,
      -0.021263048,
      0.00082538446,
      -0.008457789,
      0.0013416134,
      -0.005743244,
      0.008825524,
      0.008450742,
      0.0027501117,
      0.009300566,
      -0.0039471444,
      0.028707715,
      -0.011403211,
      0.016268536,
      -0.0038832324,
      0.0040961625,
      -0.031421192,
      0.013594824,
      0.02755512,
      0.0069312435,
      0.027984377,
      -0.021101683,
      -0.01676721
    ]
  },
  {
    "id": "genai_cohort_python_10_Organize_python_code_like_a_pro_vtt",
    "content": "All right, so before we move any further, I would like to discuss very briefly about how do we actually structure Python code. Or probably more better word would be organize, your Python code. Organize your. I can write that. Organize your Python code. So there are a lot of debates about how do we organize Python, code. And again, there are a lot of right and wrong and a lot of very opinionated people working on it. I'll show you my way of doing it and then you can just go ahead and follow along most of the part of it. But again, feel free to experiment with this. There is no such thing. Let's just say we want to have a code for running a chai shop. There are a lot of things that happens with it. So I call this my as first or the top level folder, just like we are creating here, things like 01, virtual or all of this. So this is my first folder level structure. Now once I have this folder level structure inside this, I simply go ahead and say inside this I will always have a run script which runs my whole program. It could be run py, it could be main py, it could be index py. A lot of people have opinions, but this is majorly used to start my application. So I call this one as starter or starts the app. This is my first folder or the file that I have after this, what do I have is all the helpful files, whatever is required for the code part of it. So let's just say there's a chai py all the functional part of the code. Now not all the part can actually lie is just in this folder. We need some more organization like some of the part, maybe web servers, maybe some code for the client, maybe some process for processing machine learning. So again, lot of folders can actually be there. So for example, there is a folder of processing. Yeah, go ahead and have that inside this, have more files onto it. That's okay. Another thing which I usually recommend people that sometimes you want to have, naming vocabularies in the Python as well. So let's just call this one as utils. And you will find some folders like processing. This is also utils known as utilities. But in some of these folders like utils, what do we have is an underscore, underscore init py. What do we write inside this files? Actually nothing. This file is empty. It's just the name of the file which matters and which actually differentiates this processing with the utils. And I'll tell you what's the reason and what's the name of each one of them? So we do have first name known as module or modules. So I'll just call this one. So this modules every single file that you have, like this run py and this chai py all these files are known as modules and you will see them a lot. Another word that you're going to see a lot in the world of Python is known as package or packages, whatever you want to call them. Any folder which has this initial this is known as package. And yes, that's the difference. Any folder which has underscore underscore in it py empty file is called as package. But this processing since it doesn't have this file is not going to be called as packages and that's it. Now inside these files like chai py we have the classes, just like we saw at the very top of it here. Like we call this class, then we have some functions inside it, or maybe file just have the function, don't even have the class. These are the files and we call them just as classes or functions. So just always keep in mind this is organization, structure. Again it could have been different name like source controllers, whatnot, whatever you want to call them. That's not the problem. Just remember few things that hey, these are my modules. Like normal Python files. If a folder has initinit underscore that means it's a package, it's a Python vocabulary and then rest of the folders are just programs or files and folders just like that. We don't have a specific name for them. All right, apart from this, one more thing I would like to mention here is just keep this in mind that we will have a lot of folder based structure or files. These are things. Just remember one thing that anything that goes, let's just say diagrams will surely have. Let's just say this is again a class and inside this you have created this folder and you have created this folder. Whatever you create. For example, let's just say you create a smaller thing, outside in this class and you also create some things inside this. And you also create some things inside this. So whole other thing that I want to say in this is if this program wants to access this, it is perfectly okay because it's outside. And if this program wants to access this thing which is inside here, that is not okay. Yeah, this part is not okay. So treat each of the function as an individual house and anything inside this house is accessible only by these people. So they can access anything outside the house, which is here in public, in open. But if you want to go anybody's house and want to use anything, that's not possible. Now again, I just want you to keep this in mind. As of now it, will get much more clear as we write the code. But I just want you to keep this in mind as this is whole of your city and this is your house. Anything that you bring inside the house or you make inside the house, maybe you're just a carpenter, you like to make stuff, you can actually, your family members can access all of these things, no problem at all. This guy can access this, this guy can access this, no problem. But when you try to access somebody else's house, he has to explicitly give you the permission that, hey, you can use this. But if anything, this is here like it's a public park or public road, hey, anybody can access this. If this guy wants to access it, that's okay, totally okay, no problem there. But if something is inside the house, that creates a problem. So this is something known as namespace and scope. And yes, it will get much more clear as we write the code. But just remember this concept that, hey, this is my house, this is whole of my city, this is public park, and this is again, somebody else's property in their house. So I cannot access that. And yeah, this is all that I wanted to have you about. The basics of how can I actually organize my Python code. And this is it again. I know this is a lot of theory, but this is all required, this is important. I don't want to skip even a tiny bit detail to make you a Python programmer, even a good Python programmer. That is it for this video. Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "10 Organize python code like a pro.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/10 Organize python code like a pro.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.008161476,
      0.0054766284,
      0.033692412,
      -0.04866683,
      -0.009347623,
      -0.0003680417,
      0.00803779,
      0.020623105,
      0.0037891464,
      -0.012414744,
      -0.022535928,
      -0.002939231,
      0.025315464,
      0.033327922,
      0.120152906,
      0.00044942735,
      0.0060867886,
      -0.017259978,
      0.0019069482,
      -0.0291037,
      0.00096610346,
      0.014953809,
      0.00083994673,
      -0.0037962657,
      0.0052981614,
      -0.009818176,
      0.0049767247,
      0.013714429,
      0.020519769,
      -0.027538544,
      -0.022805968,
      0.002804064,
      0.0063454523,
      0.0088593885,
      0.035541233,
      0.021617541,
      -0.006003848,
      -0.0067481985,
      -0.016446289,
      -0.0041875327,
      -0.022418838,
      -0.00036387396,
      0.0062879776,
      -0.0094805695,
      0.0139486315,
      -0.016401742,
      0.0006708315,
      -0.024940304,
      0.01966404,
      0.013547091,
      -0.008074959,
      -0.014521513,
      -0.021498809,
      -0.17865632,
      0.010861742,
      0.005848226,
      0.0040963986,
      -0.0040045823,
      -0.0033435642,
      0.015267402,
      -0.039908838,
      0.026900472,
      -0.033084176,
      0.0097194575,
      -0.010165729,
      -0.028658934,
      0.02786426,
      -0.013170759,
      0.024290856,
      -0.0078104325,
      0.008484558,
      0.009493915,
      -0.023593595,
      -0.011160141,
      -0.028172959,
      -0.005255725,
      0.010186948,
      -0.012915526,
      0.0026891353,
      0.044510424,
      -0.012326942,
      -0.0036295936,
      -0.007994433,
      0.010361965,
      0.029722463,
      -0.00559374,
      -0.016794225,
      -0.015405412,
      -0.008887249,
      -0.010771255,
      -0.013816629,
      0.034478895,
      0.009152642,
      0.022811608,
      -0.0068675103,
      0.0071547003,
      -0.014668449,
      -0.008724587,
      0.0064865346,
      -0.0073488005,
      0.010963382,
      -0.01452426,
      -0.03131312,
      -0.023090668,
      0.0014485957,
      0.0144901145,
      0.014179006,
      -0.0044558463,
      -0.014346654,
      -0.01974291,
      -0.010370541,
      -0.005908702,
      -0.0040614917,
      0.015881797,
      0.010228429,
      -0.18192916,
      0.012743485,
      -0.030083835,
      -0.018259276,
      0.0003688182,
      -0.005843547,
      0.0042584036,
      0.006298114,
      -0.004027334,
      -0.0038347256,
      0.009365172,
      0.00014706791,
      0.031152848,
      0.013114985,
      -0.0032153132,
      -0.018978681,
      -0.010400485,
      0.0033193869,
      0.022412326,
      0.013936423,
      0.022650544,
      -0.009494786,
      -0.010860142,
      -0.022090666,
      -0.010833108,
      -0.007966917,
      0.02413492,
      -0.004131208,
      0.027836056,
      -0.00033763782,
      0.009858887,
      -0.008383744,
      0.002481843,
      -0.029186,
      -0.037608415,
      0.0099985935,
      -0.020289207,
      0.0121156005,
      -0.010723625,
      0.025932085,
      -0.013729467,
      0.015877921,
      -0.007600005,
      -0.011210964,
      0.002243277,
      0.0003130368,
      -0.006315669,
      -0.0136042405,
      0.0135282595,
      0.010597062,
      0.011963962,
      -0.005217286,
      0.01028929,
      0.037786245,
      0.006158955,
      0.00044844986,
      -0.010962636,
      0.0022081465,
      0.014978222,
      -0.006415265,
      -0.026987592,
      0.008060417,
      -0.012891089,
      0.018010387,
      -0.02817824,
      0.0025974815,
      -0.018584039,
      0.017567653,
      -0.0017358485,
      0.020000469,
      -0.004497057,
      -0.01783193,
      0.02617804,
      0.031703103,
      0.0024986991,
      0.009227909,
      0.00043319564,
      0.017772196,
      -0.005418932,
      0.016583456,
      -0.031445183,
      0.017129425,
      0.012184484,
      -0.0043640444,
      0.024517123,
      0.028402073,
      -0.009745316,
      -0.013522659,
      -0.04498054,
      0.032975454,
      -0.008382251,
      -0.0050554723,
      -0.032720305,
      -0.010767644,
      0.011384362,
      -0.011269805,
      -0.012056878,
      0.016880445,
      0.0113653615,
      0.010212332,
      -0.0076093525,
      0.01572684,
      0.0056690606,
      -0.016587913,
      -0.0046208417,
      0.024711853,
      0.0060359146,
      0.0015157711,
      0.03308796,
      0.0013257872,
      -0.008142227,
      -0.002460347,
      -0.004346253,
      0.0076765306,
      0.0050838445,
      0.020395355,
      -0.006567459,
      -0.017668735,
      -0.0044800052,
      -0.0009894111,
      0.012604824,
      -0.016077982,
      0.010318128,
      0.0013811921,
      0.009511664,
      -0.0017660996,
      -0.009134255,
      -0.005070032,
      0.006071142,
      0.020698758,
      0.0071920203,
      -0.012000597,
      0.0012485428,
      0.010074077,
      -0.008626336,
      -0.019050272,
      0.004628133,
      0.004658812,
      -0.018979032,
      0.0041321754,
      -0.01839088,
      -0.019906595,
      0.006283293,
      -0.019672306,
      -0.0049764444,
      -0.000985022,
      0.001859853,
      -0.021120252,
      -0.00021763054,
      0.010121103,
      0.016045742,
      0.017590705,
      0.02261968,
      -0.018702203,
      0.02363874,
      0.0005838699,
      0.008181706,
      0.008651678,
      -0.0036569294,
      -0.0036896355,
      0.021867596,
      -0.09262741,
      0.03350006,
      0.007421687,
      -0.0052362285,
      0.0070460252,
      0.0040821456,
      -0.040880647,
      -0.00084826443,
      0.01445718,
      0.0091619305,
      -0.0024310187,
      -0.0025413185,
      0.03664131,
      0.0033406164,
      0.0060402583,
      0.00025091527,
      -0.0034980837,
      -0.017122395,
      0.021394571,
      -0.02321001,
      0.004500378,
      -0.0037489242,
      0.002910316,
      -0.009948649,
      0.011524815,
      -0.022815201,
      0.0040238667,
      0.026666066,
      0.022181047,
      0.007913663,
      -0.01649755,
      0.017909046,
      0.00032473498,
      -0.0050853984,
      -0.012528492,
      0.011746225,
      0.008599498,
      -0.020491928,
      0.002764572,
      0.0034560852,
      -0.01270162,
      -0.02070814,
      0.016888654,
      0.011392302,
      -0.012308482,
      0.009495368,
      -0.004503621,
      -0.015043226,
      -0.018286323,
      0.010540231,
      -0.022203168,
      0.0024198983,
      0.0040682233,
      -0.013731282,
      -0.003785323,
      0.019339249,
      -0.001854218,
      -0.013896811,
      0.02421379,
      0.02703723,
      0.0039565023,
      -0.0056079538,
      0.010954392,
      -0.009756657,
      -0.0031675822,
      -0.014920089,
      0.00046343837,
      -0.009662367,
      0.0051738927,
      -0.011761163,
      0.021368463,
      -0.018875878,
      -0.001703707,
      -0.010417154,
      0.03280415,
      -0.0015681245,
      0.0023633852,
      -0.013959628,
      -0.015392087,
      0.01153736,
      0.012497531,
      -0.015105362,
      0.012366505,
      0.009692347,
      0.020742308,
      -0.0045887055,
      -0.025668511,
      -0.0050411317,
      0.016416725,
      -0.038036972,
      0.007711414,
      0.012464056,
      -0.017889746,
      0.008234767,
      -0.016064523,
      -0.009172839,
      -0.006914462,
      -0.002544021,
      -0.016962238,
      0.010733855,
      -0.007562316,
      -0.0012416923,
      -0.032185912,
      0.008168386,
      -0.009966349,
      -0.0026794833,
      -0.010016012,
      -0.005886856,
      0.007974389,
      -0.005703253,
      0.002026065,
      0.0058202124,
      -0.015660679,
      -0.005242615,
      -0.010452844,
      0.018729517,
      0.0064774835,
      0.0033935157,
      0.022437824,
      -0.028122438,
      -0.01469119,
      -0.0031480065,
      -0.016791394,
      0.011997173,
      -0.008571414,
      0.0030519979,
      -0.0023943463,
      -0.0056069163,
      -0.0045226314,
      -0.02132751,
      -0.017818408,
      0.012093037,
      -0.03686708,
      -0.009150379,
      -0.007870671,
      -0.006996409,
      0.028193362,
      0.03609585,
      0.0051752427,
      0.009488135,
      -0.00065633474,
      0.0063133747,
      0.028032562,
      -0.0017658502,
      -0.014338943,
      0.031906895,
      -0.019565409,
      -0.025334697,
      0.00441164,
      -0.018674605,
      -0.024394859,
      -0.0016005969,
      0.0012154292,
      -0.0001673433,
      -0.00341545,
      0.002180787,
      0.019573987,
      -0.0023836878,
      -0.027815567,
      -0.034669172,
      0.0073240027,
      0.005416676,
      -0.009260525,
      0.011081135,
      0.022812879,
      0.03025364,
      0.011207797,
      0.0015221892,
      -0.0036802217,
      0.0017078228,
      0.0014297664,
      -0.027426641,
      -0.042516578,
      -0.017202675,
      0.012401049,
      -0.0086288145,
      0.008744814,
      -0.00018739076,
      0.0118002165,
      0.0030530994,
      0.0031100975,
      -0.025813272,
      -0.0144354915,
      0.010077258,
      0.0017311227,
      0.027191954,
      0.013270891,
      -0.0038725068,
      -0.022532757,
      -0.0014741633,
      0.011610841,
      -0.025374444,
      -0.0016607046,
      -0.008429496,
      -0.0005843485,
      0.015654689,
      -0.006753101,
      0.0001525913,
      0.013847114,
      0.027488446,
      0.00014747404,
      -0.028584,
      -0.003437761,
      -0.024458403,
      0.005358233,
      -0.026471281,
      0.021168865,
      -0.0072979676,
      0.02049909,
      0.025320632,
      0.0031295565,
      0.0071020615,
      -0.0071051945,
      0.007144019,
      0.012661581,
      0.019684559,
      0.0015680636,
      -0.019552099,
      -0.033032387,
      -0.02022792,
      0.015677279,
      -0.008896142,
      0.0041218656,
      -0.008075294,
      0.007735985,
      -0.0025634356,
      -0.01594257,
      -0.000987756,
      -0.021869391,
      -0.007891815,
      -0.00911785,
      0.0055750594,
      -0.010624764,
      0.0077091344,
      -0.01328206,
      -0.0038453697,
      0.020072697,
      0.01781924,
      0.0019361062,
      0.011193116,
      0.0021210338,
      -0.0012796567,
      -0.014225401,
      0.008374717,
      0.00468303,
      0.00438065,
      0.0437042,
      -0.0027955142,
      -0.009085425,
      0.0066387122,
      0.0069995658,
      0.041399766,
      0.0035132514,
      -0.0052346806,
      -0.007521051,
      0.024783876,
      -0.0029122892,
      0.012582811,
      -0.0006107667,
      -0.011856816,
      0.0019063089,
      -0.000086202344,
      -0.014486344,
      0.004145416,
      -0.0050278166,
      -0.02505403,
      -0.010370731,
      0.017212402,
      0.015570162,
      -0.13390002,
      -0.002523807,
      -0.0123316515,
      0.01656761,
      -0.0061470186,
      -0.009213401,
      -0.015717933,
      0.0059099174,
      0.0020644055,
      -0.00090881775,
      0.026157884,
      0.0016311634,
      -0.0067596626,
      -0.0058995374,
      0.005173219,
      0.005849105,
      -0.007316343,
      0.0018095011,
      0.043199696,
      -0.01176172,
      -0.0055923876,
      0.009137249,
      -0.004664458,
      -0.014750918,
      -0.0072264997,
      -0.0033478802,
      0.0068598664,
      -0.010702354,
      0.01126823,
      -0.01807378,
      -0.022390177,
      -0.007677829,
      -0.0007348253,
      0.0063505108,
      0.021427704,
      -0.00651181,
      -0.013800679,
      0.0044882246,
      0.006092168,
      0.0025540031,
      -0.015758017,
      -0.0023756777,
      0.0058064503,
      0.014544716,
      -0.0041792365,
      0.019358862,
      0.023194773,
      -0.002501237,
      -0.00092794764,
      0.049220458,
      -0.03786913,
      -0.019324142,
      -0.0017412391,
      -0.020863777,
      -0.002152325,
      0.007673442,
      0.013433089,
      -0.015430896,
      0.0026276528,
      -0.0050238003,
      0.010394748,
      0.012326249,
      0.0077054678,
      0.016329389,
      -0.0055724974,
      0.011033433,
      0.029451843,
      0.012837971,
      0.005077423,
      -0.008843103,
      0.0051733116,
      -0.0005286756,
      0.004304494,
      0.016816625,
      0.0057322113,
      -0.0030997135,
      -0.012052216,
      0.0075869965,
      -0.009759564,
      -0.0031228166,
      -0.015697636,
      0.014312101,
      -0.062050242,
      -0.012424268,
      0.022494553,
      0.017640136,
      0.0041375924,
      0.026617398,
      -0.028265351,
      -0.0033581452,
      0.0034227304,
      0.0033826581,
      -0.016426463,
      -0.018346565,
      -0.005001762,
      0.015033663,
      -0.021433687,
      0.009154566,
      0.002282086,
      -0.024753494,
      -0.01846078,
      0.008065198,
      -0.0016497963,
      0.003403084,
      0.014946067,
      -0.026428703,
      0.02899146,
      0.023056759,
      -0.012049433,
      0.010477408,
      0.012148781,
      -0.0063715465,
      0.0043424694,
      -0.15339753,
      -0.020925112,
      0.014683246,
      0.0063789953,
      0.027973859,
      0.0012584194,
      -0.005459436,
      -0.0067189536,
      -0.015152449,
      -0.009540652,
      0.013063371,
      -0.01196867,
      -0.009514088,
      -0.0033283662,
      0.012681069,
      0.14312156,
      -0.009164356,
      0.0031221085,
      0.0029173032,
      0.0049432716,
      -0.026012778,
      -0.0035862485,
      -0.00472465,
      0.008651939,
      -0.014150054,
      -0.01772126,
      0.007848935,
      -0.016974084,
      0.0067773373,
      -0.0006893916,
      0.008499433,
      -0.02143163,
      -0.005277621,
      0.023381205,
      -0.0022598915,
      -0.011189961,
      -0.0062498553,
      -0.011018541,
      -0.0035491027,
      0.009813469,
      0.022569114,
      0.0064628054,
      0.0038621223,
      0.014183383,
      0.025582373,
      0.0037581671,
      -0.0016514355,
      -0.014325085,
      -0.0076025636,
      0.0020559866,
      -0.012777028,
      -0.051070366,
      0.010884541,
      0.0018894955,
      -0.0006356664,
      0.022341372,
      -0.01031091,
      0.00983941,
      0.009690732,
      0.029103667,
      -0.006453061,
      0.008020718,
      0.0071782074,
      0.015788754,
      0.010678391,
      0.011713668,
      0.038688213,
      0.011623627,
      0.021097118,
      -0.008618876,
      0.02630802,
      0.01966724,
      -0.0038332844,
      0.006824513,
      -0.029467296,
      -0.006385683,
      -0.012476663,
      0.03190171,
      0.003915984,
      0.006515668,
      0.0047491896,
      0.01274901,
      -0.0062619434,
      -0.01607524,
      0.014047874,
      0.011554586,
      -0.014417243,
      0.027526755,
      -0.007822196,
      0.007568959,
      -0.0016434655,
      0.01998599,
      0.0029642328,
      0.026015598,
      0.010395178,
      0.023113744,
      -0.007428351,
      -0.01895866,
      0.033744074,
      -0.0068703266,
      0.016061185,
      -0.00078197947,
      0.006350559,
      -0.029038474,
      0.023409352,
      0.017009987,
      -0.001531858,
      0.016966088,
      0.0020943359,
      -0.010181427
    ]
  },
  {
    "id": "genai_cohort_python_11_PEP8_and_Zen_of_python_vtt",
    "content": "All right. I have already introduced a lot of concepts in this very first section. Usually people just give a brief lightweight intro, but I wanted to have you the taste of the Python. That's why we are organizing things in the professional way. I don't want to get overwhelmed with it, but I still want to show you one of the another document that you study once you learn the Python. This is something that you learn after learning Python. It's the style of writing code. And yes, there is a proper way of how you write the Python code. And everybody goes through this documentation or this template that what are do's and don'ts while writing the Python code. Again, reminding you this is not something that should be learned or gone through by a beginner or especially somebody who's just probably one year or one and a half year in writing the Python code. This is for usually people that eventually are comfortable with Python and want to improve their code. But still, I don't want to miss any bit of the Python part of it. So, so let me walk you through with this again. This is super nice, but just want to have it. There is something known as, in the Python world known as PEP This PEP8 is the style guideline for Python code. We don't know right now how to write the Python code that is okay, but there is a guideline by the man himself who created the Python and it's a very simple guideline. There is not too much included in it. I'll just walk you through with the things. Like one of the point that they always say in this, so let's just go ahead and say that the name of this is PEP 8, call it as preparation talk or something like that. So in the whole PEP they mention a lot of points and don't worry, as we write the code I will automatically incorporate these habits into you. But some of the things like always use four spaces, your editor does it for you automatically. But this says always use four space, never tabs. So although tab also does four space, but they actually avoids it because sometimes the tabs are configured for two tabs or two spaces, but again they say explicitly use four spaces. Another things, it's just a way of writing the code, use better meaningful names for your methods and functions and classes, all of that. So call it as something like chai and not C1 or C Although in the tutorial you'll see me using these names like F and G. They're easier to explain. That's why I do it, but their whole goal is use better names. That is always a good idea. And then they also mentioned that use formatters. We are not going to talk about them as of now, but formatters like Black, rough, flakate, whatever you want to use, what formatter does, it automatically makes your code more beautiful, more pepe way. It does it automatically. We don't want to go into that. But this is just few of them. They have a whole lot of guidelines, as you can see. They have a whole examples what to do, what not to do, how to write this. Definitely not this. Rather not. They have a lot of things when to use trailing commas. They have a lot of ways of defining how to write better, readable, maintainable Python code. We will not go into that much of it. One last thing I would like to show you is a Zen of Python. This is known as Pythonic way of writing the code. So what's the Pepit? Pepit is also the same, but they have this nice interesting thing. So I'll just walk you through with that. So we can actually go ahead and see this in the terminal itself. Open up your terminal doesn't need to be virtual environment. Anything is fine. Just go ahead and open your Python in the terminal or in the shell. We'll just do it here. If you're on the Mac, do Python If you're on the Windows, just do Python. So I'll just go ahead and do Python Three arrows means I am into Python way. Then just go ahead and say import this. Yeah, that's it. One line, import this. As soon as you do this, this actually gives you the Zen of Python. It's like a poem, but again it is just basics. So beautiful is better than ugly. Explicit list is better than implicit. Simple is better than complex. Complex is better than complicated. Flat is better than nested. The whole point is write your code as simple as possible. That is the whole this poem is saying about it. Again, I don't want you to get too much into depth of it. This is something once you are comfortable in writing the Python code, that is it. But still I didn't want it to actually not have in this course. Rather to have this in early. This is the point when you tell it because there is no other point When I actually come back and hey, use this. This should be introduced as early as possible so that you know, okay, there's a good way of writing the code and there's a documentation. Once I'm comfortable with the Python I can go ahead and read that. So keep that in note, big and bold. That. Yes. Always write simple code. The most beautiful code is the simplest code. It should be readable. It should be like, Anybody can read it, understand what's going on in this code. That's the best code, actually. So that is it for this video. And let's catch up in another such video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "11 PEP8 and Zen of python.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/11 PEP8 and Zen of python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0077900966,
      -0.000014022056,
      0.016427662,
      -0.050951544,
      -0.0015883556,
      -0.005410422,
      -0.01746543,
      0.015390187,
      0.010296137,
      -0.0026226593,
      -0.008760958,
      -0.017760474,
      0.021504095,
      0.039018564,
      0.1295188,
      0.017740509,
      -0.0020574648,
      -0.019057108,
      -0.004772687,
      -0.014406053,
      -0.0049805474,
      0.012710587,
      -0.0083826585,
      -0.011237355,
      0.020523135,
      -0.0064084986,
      0.013197592,
      0.006735384,
      0.0017746616,
      -0.014714802,
      -0.03328017,
      0.020531772,
      0.005701681,
      0.021772034,
      -0.0038273088,
      0.02191098,
      0.008665,
      -0.0014553751,
      -0.015968677,
      0.0107283415,
      -0.029022042,
      0.01635589,
      0.009291015,
      -0.018626934,
      0.024226924,
      -0.017276002,
      -0.0008034677,
      -0.026674576,
      -0.004397032,
      0.027206615,
      0.009623412,
      -0.021240855,
      -0.024417156,
      -0.18379241,
      0.018817648,
      0.006156717,
      -0.0077347914,
      0.018116051,
      -0.0038892806,
      -0.0007493187,
      -0.038156327,
      0.025589507,
      -0.019709794,
      0.0071781636,
      -0.0066153747,
      -0.022480678,
      0.007714183,
      -0.021226155,
      -0.0012879169,
      -0.0080308365,
      0.016264213,
      0.0012884587,
      -0.028404288,
      -0.0048043276,
      -0.025095614,
      -0.022814402,
      0.009417296,
      -0.013225674,
      -0.0078978585,
      0.024899127,
      0.0016419303,
      -0.015510901,
      -0.012221278,
      -0.0054991823,
      0.016009098,
      0.011491847,
      -0.012640091,
      0.004341759,
      -0.0021657369,
      -0.009119218,
      -0.0034574103,
      0.010208629,
      -0.0075311246,
      0.02199243,
      -0.021342127,
      -0.0013920453,
      -0.022950297,
      -0.0006267568,
      -0.014989189,
      -0.017022235,
      0.0019495027,
      -0.018339692,
      -0.019956192,
      -0.02327236,
      0.0034812018,
      0.01826205,
      0.011556834,
      0.0007126161,
      -0.0018007536,
      -0.0024752521,
      -0.005153637,
      -0.010213072,
      -0.023918869,
      0.024593052,
      0.006589822,
      -0.18235753,
      0.000799091,
      0.0052182614,
      0.012711323,
      -0.00030980862,
      -0.0037021453,
      0.004659887,
      -0.0023534184,
      -0.0033247015,
      -0.019645372,
      0.008985975,
      0.006907414,
      0.028026879,
      -0.0017667505,
      0.00832291,
      -0.029194614,
      -0.009042486,
      -0.0037486076,
      0.00314572,
      0.002563804,
      0.016444266,
      -0.021858906,
      -0.018912727,
      -0.02794165,
      -0.0037573397,
      -0.0045780693,
      0.016078485,
      -0.008345907,
      0.037574995,
      0.016789466,
      -0.010212118,
      -0.022124562,
      0.00064180756,
      -0.03414338,
      -0.03667978,
      -0.0062088845,
      -0.031906627,
      0.01700122,
      -0.0074696965,
      0.018684153,
      -0.026484536,
      0.010474341,
      0.0016986154,
      -0.009113884,
      -0.013561854,
      -0.007508293,
      0.006255694,
      -0.008699168,
      0.01702036,
      0.0010841644,
      0.0004700656,
      0.009232229,
      0.0057618613,
      0.0077206534,
      0.011617873,
      -0.015061221,
      -0.008901609,
      0.014039422,
      0.0034549427,
      -0.020207023,
      -0.021915974,
      0.014153045,
      -0.0036630784,
      0.011966381,
      -0.016596751,
      -0.0033508714,
      -0.011343644,
      0.01758277,
      -0.008318159,
      0.018190864,
      -0.005152605,
      -0.010535603,
      0.031547915,
      0.029581452,
      0.01748076,
      -0.0059404746,
      0.0133030955,
      0.028287187,
      -0.00097530946,
      0.023972752,
      -0.014303325,
      0.007100617,
      0.003227721,
      0.0025131062,
      0.021627724,
      0.031321608,
      -0.009589418,
      -0.0018109415,
      -0.03858415,
      0.020604745,
      -0.021922676,
      -0.00025517304,
      -0.04005029,
      0.011969968,
      -0.0053813253,
      -0.020801323,
      0.0022485422,
      -0.0052575157,
      -0.015662342,
      0.0148220025,
      -0.0032383103,
      0.023537733,
      0.011023949,
      -0.009354465,
      -0.0065509174,
      0.0024796065,
      -0.00030378395,
      0.023799166,
      0.013825541,
      -0.007727676,
      -0.009369243,
      0.010653686,
      -0.0044309814,
      -0.017220333,
      0.019227304,
      0.013455536,
      0.0034905006,
      -0.015393299,
      0.009811578,
      -0.017263854,
      0.013025499,
      0.0072712325,
      0.008151631,
      0.00153853,
      0.023247853,
      -0.008614309,
      -0.0028074272,
      -0.007117189,
      0.01802042,
      0.0084553445,
      0.014107203,
      0.019969158,
      0.004476001,
      0.013679216,
      -0.023221083,
      0.0025731954,
      0.022146909,
      0.014673586,
      -0.007268321,
      -0.00451048,
      -0.016125806,
      -0.037665013,
      -0.022310533,
      -0.0051840544,
      0.0016629351,
      -0.017780691,
      0.008146676,
      -0.016140303,
      -0.019934144,
      0.02803776,
      -0.0030920338,
      0.01491568,
      0.016212849,
      -0.016218793,
      0.031383067,
      0.00820816,
      0.011399694,
      0.00515192,
      -0.0019249549,
      0.0029620635,
      0.0298917,
      -0.0999929,
      0.03892757,
      0.0036839654,
      -0.027441874,
      -0.0069594025,
      0.008096575,
      -0.029780168,
      0.0053250804,
      -0.0005400323,
      0.0084463535,
      -0.00703728,
      -0.003172338,
      0.027857242,
      0.00032395005,
      -0.018844385,
      -0.015433049,
      -0.004774826,
      -0.027075,
      0.018701466,
      0.003993306,
      0.006017588,
      -0.0062860306,
      -0.012711554,
      0.0015017319,
      0.008396822,
      -0.016806018,
      0.01768664,
      0.031871162,
      0.009571445,
      -0.004537403,
      -0.010652963,
      0.020714333,
      -0.004837819,
      -0.023239713,
      -0.0047448636,
      0.01014131,
      -0.0034279753,
      -0.011505626,
      0.0017328905,
      -0.009880411,
      0.028562136,
      -0.01657607,
      0.015342667,
      0.016809491,
      -0.015561524,
      0.001442599,
      -0.014930739,
      -0.007170514,
      -0.013097529,
      -0.0018585693,
      -0.014687539,
      0.025215702,
      0.01399986,
      -0.008964812,
      -0.0034209706,
      0.017349415,
      0.007964739,
      -0.024179148,
      -0.0017460546,
      0.017949363,
      -0.005270923,
      0.0034155608,
      0.011492049,
      -0.01604387,
      0.0012646508,
      -0.00017590882,
      0.0026808893,
      -0.0066261576,
      0.0017910721,
      -0.0003260385,
      0.010736618,
      -0.019690279,
      0.00036650966,
      -0.0047806813,
      0.011182345,
      -0.014696083,
      0.016835818,
      -0.021330519,
      -0.0062975776,
      0.013062874,
      0.009888339,
      -0.006563923,
      0.013693925,
      -0.0065688705,
      0.006282448,
      -0.0012560044,
      0.00096833287,
      -0.005532721,
      0.0077763707,
      -0.02538793,
      0.0041396287,
      0.015718715,
      -0.017120779,
      -0.011173395,
      -0.0135940155,
      -0.0011543492,
      -0.019204386,
      -0.021017494,
      -0.01101614,
      -0.0037625115,
      0.009631834,
      0.012606513,
      -0.008166617,
      -0.017886935,
      0.003842101,
      -0.0069786543,
      -0.026733603,
      -0.0073293406,
      0.016951349,
      -0.011547763,
      0.009777221,
      0.011917522,
      -0.019221926,
      -0.0012534632,
      0.012670085,
      0.014327704,
      0.003968859,
      0.006147089,
      0.0021457933,
      -0.012525429,
      -0.0004039608,
      -0.021728951,
      -0.011550759,
      -0.012904222,
      -0.006983014,
      0.015308846,
      -0.002365894,
      -0.011824741,
      -0.01335984,
      -0.03734978,
      -0.025224244,
      0.017054634,
      -0.023561798,
      -0.0055004554,
      0.006364144,
      0.009511245,
      0.033823207,
      0.016282162,
      0.0018456002,
      0.015167797,
      -0.0046607894,
      -0.003168715,
      0.0262512,
      -0.00059871556,
      -0.005172267,
      0.038941152,
      -0.0064812796,
      -0.016664183,
      -0.004229608,
      -0.023331001,
      -0.021879388,
      -0.008427489,
      -0.012146081,
      0.002827479,
      -0.011285984,
      0.00560053,
      0.009082049,
      -0.014723849,
      -0.02514223,
      -0.02126803,
      0.004150762,
      0.0075037344,
      -0.022171943,
      -0.00009638727,
      0.012711674,
      0.012539863,
      0.01197211,
      0.008805923,
      0.010611193,
      -0.013601953,
      -0.0062291785,
      -0.016560826,
      -0.025219208,
      0.00007934016,
      0.009642243,
      -0.0043561454,
      0.0102619985,
      0.0012275409,
      0.013832776,
      0.02656421,
      0.0069655045,
      -0.006946226,
      -0.027503036,
      0.0079907775,
      0.008986025,
      -0.0045638513,
      0.008333026,
      0.007037623,
      -0.009474111,
      0.0011750432,
      -0.0032778145,
      -0.00054249645,
      -0.0029387507,
      0.012509943,
      0.0049084574,
      0.019313445,
      -0.021348564,
      0.012001895,
      0.015400116,
      0.013111909,
      0.0038767364,
      -0.01568098,
      0.010982568,
      -0.007106378,
      0.013316168,
      -0.015950527,
      0.0077893776,
      -0.010665699,
      0.0070230374,
      0.026999628,
      0.0043880637,
      -0.009073983,
      -0.020159801,
      0.026361668,
      0.011149967,
      0.023490971,
      -0.007121013,
      -0.013595438,
      -0.033418458,
      -0.0066497345,
      0.009748379,
      -0.0013085322,
      -0.0032734373,
      -0.0136548765,
      0.0077519813,
      0.0077944803,
      -0.0006643631,
      -0.00022396693,
      -0.014879711,
      -0.005444219,
      -0.015573068,
      -0.011597559,
      -0.02390819,
      0.010539622,
      -0.013362634,
      0.01032759,
      0.007191486,
      0.026801085,
      -0.012133546,
      0.010500256,
      0.013569821,
      -0.009620354,
      -0.0052420907,
      -0.01958102,
      -0.01727726,
      -0.0020919605,
      0.029390408,
      -0.020010222,
      -0.020564301,
      -0.011336005,
      0.0037346762,
      0.0355192,
      -0.0074894843,
      0.00083176553,
      -0.0016514186,
      0.026495367,
      -0.017871927,
      -0.0018390464,
      0.007334079,
      -0.018836508,
      0.010016701,
      0.009627045,
      -0.0013133767,
      0.0072197923,
      0.014199955,
      -0.017791184,
      0.008026354,
      -0.0025075327,
      -0.004186264,
      -0.14195433,
      0.004995838,
      -0.016339142,
      -0.0048749675,
      -0.0042769946,
      -0.011981852,
      0.0014971424,
      -0.007019139,
      0.0048943735,
      -0.0075609805,
      0.037405122,
      0.0009848395,
      -0.0103853475,
      -0.012070149,
      -0.009651157,
      -0.0031662679,
      0.0070671085,
      -0.0026788542,
      0.02113233,
      -0.0045324476,
      -0.016621117,
      0.0029872647,
      -0.0018736088,
      -0.008694101,
      -0.028685099,
      0.008314781,
      0.0073962114,
      -0.00018128431,
      -0.0015996791,
      -0.014432233,
      -0.05896475,
      -0.017975852,
      0.020053202,
      0.012319405,
      0.01790063,
      -0.0025103253,
      -0.03182018,
      0.020838622,
      -0.00066082296,
      -0.008084304,
      0.004243169,
      -0.0014494545,
      0.0144357,
      0.008671726,
      -0.011686704,
      0.0037348694,
      0.020613212,
      0.0014276878,
      0.004073998,
      0.030681496,
      -0.03800588,
      -0.020680482,
      -0.0028584423,
      -0.010347467,
      -0.017775733,
      0.0028836506,
      0.0062169675,
      -0.012074896,
      -0.0034996534,
      -0.001890306,
      0.0060130414,
      0.0063553066,
      -0.0030091202,
      0.02346003,
      0.000090002686,
      0.012292169,
      0.03409795,
      0.017205894,
      -0.0011478364,
      -0.027719133,
      -0.012692948,
      0.008408465,
      -0.008875992,
      0.026355218,
      -0.028261928,
      -0.0012684759,
      -0.009825077,
      0.017303832,
      -0.0024203174,
      -0.009810301,
      -0.01045853,
      0.013275398,
      -0.057603065,
      -0.0013508733,
      0.012540197,
      0.0117081255,
      0.0139588015,
      0.016696552,
      -0.0023783362,
      0.0010951591,
      0.013971845,
      0.012455402,
      -0.0325038,
      0.006032735,
      0.016328197,
      0.000008410649,
      -0.031784322,
      -0.00828073,
      -0.001523779,
      -0.0279828,
      -0.0048686163,
      0.007049633,
      0.015425966,
      0.009689733,
      0.000977062,
      -0.019367216,
      0.00873959,
      0.013402408,
      0.011197604,
      -0.01102276,
      -0.0043253056,
      0.003416898,
      0.0223385,
      -0.1549046,
      -0.010256958,
      0.009856188,
      0.0070338077,
      0.008514663,
      0.01415039,
      -0.004091791,
      -0.012293021,
      -0.0050996547,
      -0.019054683,
      -0.004772913,
      -0.001581118,
      -0.028720966,
      0.0045904065,
      0.014069931,
      0.13142726,
      0.0029025667,
      0.0048128422,
      -0.024554348,
      0.01845474,
      -0.010020635,
      -0.02085951,
      -0.0012335806,
      -0.0017948867,
      -0.01644825,
      -0.0071828025,
      0.0021219193,
      -0.008586989,
      0.0072133774,
      -0.0047241934,
      0.017713843,
      -0.013347797,
      0.016316973,
      0.00490367,
      -0.0054937047,
      -0.009561871,
      -0.0040399763,
      -0.005655299,
      -0.012902048,
      -0.0017239113,
      0.020810781,
      0.005543565,
      -0.017777828,
      0.013127841,
      0.019340077,
      -0.020928109,
      -0.0073212236,
      -0.021479761,
      -0.012413471,
      0.00223252,
      -0.013616578,
      -0.055933908,
      0.0138302,
      -0.00786882,
      -0.0053084665,
      0.016425313,
      -0.011815838,
      0.009972409,
      0.02019286,
      0.013011662,
      -0.023461755,
      -0.0026605972,
      0.014406322,
      0.01597355,
      0.005753764,
      -0.000018671231,
      0.014304955,
      0.011927602,
      0.028643597,
      -0.00037194413,
      0.0067459075,
      -0.0036320647,
      -0.021123601,
      0.022420492,
      -0.015316097,
      -0.017119123,
      -0.02331953,
      0.010847158,
      0.0094091445,
      0.006269667,
      -0.004403784,
      0.013402966,
      0.019832,
      -0.023867976,
      0.009607189,
      -0.0029351506,
      -0.02852053,
      0.03796153,
      -0.012395459,
      0.01070473,
      -0.0019840416,
      -0.009400108,
      0.0016951344,
      0.038717803,
      -0.00335967,
      -0.0051803812,
      0.013666076,
      -0.0006229996,
      0.02563385,
      0.0052408804,
      -0.0111729195,
      0.0018876757,
      0.0018348133,
      -0.024867006,
      0.022845067,
      -0.000030128143,
      0.00446085,
      0.013295982,
      0.01500028,
      -0.023674462
    ]
  },
  {
    "id": "genai_cohort_nodejs_01_NodeJS_SystemDesign_SectionInto_vtt",
    "content": "All right, so hey there and welcome to a very exciting new section on system design. So in this particular section we are going to master the fundamentals of system design. We are going to see how in real world these servers work. What is a server? What is your scaling? What are different, different scaling policies? What is vertical scaling? What is horizontal scaling? How do systems work at a scale? What are queue systems? What is pubnub and how these systems, how these all the components of system design work together to become a robust system, how Your Netflix and YouTube works at that much scale and how even this platform where you are watching this video is getting delivered to you. This particular section is really, really, really important for all the beginners because this is where you actually get the gist of all the system design components and what is happening behind the scenes. So I welcome you to this very interesting section of system design and with that, let's start with the section.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "01-NodeJS-SystemDesign-SectionInto.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/01-NodeJS-SystemDesign-SectionInto.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.002699733,
      0.004157071,
      0.012091127,
      -0.04732842,
      -0.039665315,
      0.0041357004,
      0.014735178,
      -0.0028175164,
      -0.009371406,
      0.03757298,
      -0.007134088,
      0.0059132446,
      0.019402253,
      0.030924175,
      0.11909668,
      -0.0024569114,
      0.013478996,
      -0.019606603,
      -0.00338574,
      -0.013050555,
      0.011918487,
      0.0023241357,
      -0.005892622,
      0.006472258,
      0.0033642875,
      0.011515092,
      0.017395394,
      -0.016140232,
      0.03109013,
      -0.013703264,
      -0.01022428,
      0.009837355,
      -0.00033817237,
      0.031387486,
      0.0097242715,
      0.024531128,
      0.014104442,
      0.010712354,
      -0.027181575,
      0.015536207,
      -0.007817737,
      -0.016001731,
      -0.0053995796,
      -0.019576997,
      -0.0062741754,
      -0.009915463,
      0.009752874,
      -0.0154160205,
      0.0018953172,
      -0.000008727203,
      -0.02845048,
      -0.025829121,
      -0.019804198,
      -0.18512021,
      -0.013921758,
      0.00076840323,
      -0.016469628,
      0.016602281,
      -0.013287666,
      -0.00038833966,
      -0.024220908,
      0.024836034,
      -0.014166063,
      -0.0012850125,
      -0.017047307,
      0.0032991983,
      0.027866768,
      -0.004128871,
      0.0066590062,
      -0.010562628,
      0.012507212,
      -0.011853928,
      0.010445195,
      -0.01660963,
      -0.02278874,
      -0.017057786,
      -0.010977716,
      0.0026561362,
      -0.012521269,
      0.023962243,
      -0.019756684,
      -0.0084435,
      0.0030239974,
      0.0001514785,
      0.0019158719,
      -0.0032487805,
      -0.013498863,
      0.0057752426,
      0.002899226,
      0.010636191,
      -0.0021564753,
      0.007948431,
      0.0033511752,
      0.0026042785,
      -0.012402238,
      -0.0052022943,
      -0.02460074,
      -0.006319345,
      -0.022758784,
      0.0033403619,
      -0.014865876,
      0.007204718,
      -0.030780662,
      0.005240293,
      0.0027253425,
      0.007663419,
      0.024193328,
      -0.0048240633,
      -0.0045680725,
      -0.026573066,
      0.006773229,
      0.005364021,
      0.014795367,
      0.010916109,
      0.005156085,
      -0.1929763,
      0.0122676175,
      0.016941749,
      0.0027067685,
      -0.007377187,
      -0.020345695,
      -0.00032816298,
      0.031282928,
      0.002082445,
      -0.0063662026,
      0.016104443,
      -0.0020926942,
      0.02189312,
      -0.004052942,
      -0.0024815407,
      -0.010826464,
      -0.003940206,
      -0.013432925,
      0.016229097,
      0.035349585,
      0.01042822,
      -0.017668094,
      -0.0138121005,
      -0.008024322,
      -0.012102254,
      0.003363712,
      0.014984519,
      -0.0003743994,
      0.038371865,
      0.0023967943,
      0.00080579746,
      -0.040552553,
      0.010133866,
      -0.012987334,
      -0.020792635,
      0.002946557,
      0.00127866,
      0.016448846,
      0.012756931,
      0.017883537,
      -0.02184301,
      -0.0002077499,
      -0.024527457,
      0.004531249,
      -0.004186762,
      -0.011980146,
      -0.009319533,
      0.017355362,
      0.0016790718,
      0.006456071,
      -0.005351397,
      -0.021336911,
      0.016544536,
      -0.0033073248,
      0.0028589547,
      -0.03011694,
      -0.017518576,
      -0.019197019,
      0.009927799,
      0.00019893672,
      -0.0053077815,
      -0.0075520086,
      0.01497473,
      0.0097878445,
      -0.025666447,
      -0.004233786,
      -0.004599157,
      -0.005518167,
      -0.012289251,
      -0.003917034,
      -0.01633541,
      -0.008736894,
      0.005829466,
      0.020322522,
      0.001815184,
      0.020861993,
      -0.012014549,
      -0.0016435377,
      0.012491155,
      -0.012423371,
      -0.03425466,
      0.022283867,
      -0.01309818,
      -0.018021554,
      0.027899157,
      -0.006833856,
      -0.005127749,
      0.019238066,
      -0.015643902,
      -0.006775556,
      0.0029285364,
      0.0031738076,
      -0.019541286,
      -0.009263656,
      0.032802902,
      -0.009425614,
      -0.013798277,
      0.030808449,
      0.002574906,
      0.0071309516,
      -0.0062008747,
      0.021244004,
      0.022322318,
      -0.0091833975,
      -0.00923414,
      -0.021549853,
      -0.012708718,
      0.0007080167,
      0.008371274,
      0.030957023,
      0.017073441,
      -0.017468672,
      0.0028903808,
      0.0042124605,
      -0.00968694,
      0.014263761,
      0.0038710306,
      -0.00051429315,
      0.010923842,
      0.014902371,
      0.015745161,
      0.0064762756,
      0.01653525,
      -0.005153794,
      -0.0020628432,
      -0.006689685,
      -0.0006532546,
      0.0106409555,
      0.026700297,
      0.021202113,
      0.012957449,
      0.00040131016,
      0.010929843,
      -0.0036347394,
      -0.005329713,
      -0.0016887356,
      0.01661233,
      -0.00057158654,
      -0.0007031433,
      -0.0052408394,
      -0.018557673,
      -0.04495808,
      -0.03244845,
      -0.0035362283,
      -0.009373557,
      -0.021833349,
      -0.019195745,
      -0.019921362,
      0.0038606925,
      -0.0027601542,
      0.0052353106,
      0.0074761705,
      0.030863648,
      -0.02427189,
      0.002550211,
      0.02821565,
      -0.006778079,
      -0.0022851024,
      -0.005221872,
      0.0105717825,
      -0.003528026,
      -0.08274988,
      -0.008706869,
      0.006066812,
      -0.017629892,
      -0.0019676646,
      -0.0069759423,
      -0.007117763,
      0.025180949,
      0.023228323,
      0.02466287,
      0.023683578,
      -0.0052414103,
      0.009429633,
      -0.014073083,
      0.008336025,
      -0.008002576,
      -0.016099572,
      0.0029270428,
      0.000989214,
      -0.027579198,
      0.0034216037,
      0.0010331258,
      0.00045200248,
      -0.0137765305,
      0.00094948674,
      -0.038035367,
      -0.011801873,
      0.009113398,
      0.0041325167,
      0.0087143965,
      0.012293916,
      0.026279818,
      0.009511779,
      0.012194658,
      -0.0057234704,
      0.0006131776,
      -0.009071495,
      -0.001297023,
      0.007943565,
      -0.0027132276,
      0.013133003,
      -0.029929437,
      0.016373934,
      0.015731096,
      0.007906291,
      0.0024045578,
      0.015270404,
      0.021775372,
      -0.020001762,
      0.006676318,
      -0.011812981,
      -0.0030076322,
      0.020856736,
      -0.02436947,
      -0.008188806,
      0.001787234,
      -0.020858945,
      -0.008876218,
      0.002415292,
      0.017319907,
      0.0070141074,
      -0.0008291574,
      -0.020065228,
      -0.0054977597,
      0.012164824,
      -0.016878476,
      0.014100313,
      -0.023033625,
      0.0119647505,
      -0.003280264,
      -0.007472737,
      -0.007030825,
      -0.00034076258,
      -0.028429085,
      0.020735934,
      0.0059899166,
      0.0040844786,
      -0.011230966,
      -0.017665789,
      0.00713681,
      0.004356107,
      0.021390986,
      0.016059631,
      -0.0031891293,
      0.022682847,
      0.0060060075,
      0.0099264905,
      -0.011188657,
      -0.014385595,
      -0.020324111,
      0.019344743,
      0.018665988,
      -0.020102918,
      0.013470119,
      -0.01827337,
      -0.0032193316,
      -0.0105205355,
      -0.005737348,
      0.005308051,
      0.013820999,
      0.0035573784,
      0.009413703,
      -0.009047436,
      -0.019535922,
      -0.010560028,
      0.027549615,
      -0.0045559467,
      0.0000068602963,
      0.010178576,
      -0.005396808,
      0.0062839296,
      0.021646783,
      -0.021292599,
      -0.017804835,
      -0.00023275471,
      0.0031036276,
      0.01768191,
      0.00035232448,
      -0.019083276,
      -0.019875381,
      -0.0085906405,
      -0.01074221,
      -0.0014974343,
      0.015308521,
      -0.042125523,
      -0.014251331,
      -0.008837041,
      0.010957759,
      0.00783496,
      -0.031102903,
      -0.018508682,
      -0.002214533,
      -0.0049770437,
      -0.016600829,
      -0.021735635,
      -0.020905228,
      -0.0016945715,
      0.010176745,
      0.0015883117,
      0.012626615,
      -0.003407619,
      0.018657342,
      0.022101078,
      -0.006241595,
      -0.015761802,
      0.006184733,
      -0.02288282,
      -0.0055832537,
      -0.0049882093,
      -0.001007982,
      -0.014945285,
      -0.008991656,
      0.008658843,
      -0.009879855,
      -0.010451216,
      0.0004158694,
      0.015506442,
      0.009036928,
      -0.0071255667,
      -0.016909514,
      0.0077497163,
      -0.010244103,
      -0.023541916,
      -0.002676627,
      0.029651336,
      -0.0011145333,
      -0.019426938,
      0.0067042573,
      -0.003257781,
      -0.010317608,
      0.0065428657,
      -0.022087324,
      -0.038503293,
      0.0141491685,
      0.014455941,
      0.026407462,
      -0.0027304068,
      -0.016814947,
      0.0006760606,
      0.011302656,
      -0.0049768556,
      -0.00043146155,
      -0.033871863,
      -0.0031227537,
      0.012269028,
      0.010267982,
      0.0064124144,
      -0.012191627,
      -0.024907377,
      -0.010771956,
      -0.0036230013,
      0.0073325313,
      -0.010984032,
      -0.0051908754,
      -0.0030654562,
      0.007938976,
      0.010511341,
      -0.026077295,
      -0.0029760702,
      -0.006652497,
      0.02876334,
      -0.021038389,
      0.019034788,
      -0.026794607,
      0.03519289,
      -0.009868431,
      -0.0033104229,
      -0.014941585,
      0.008523216,
      0.0009599751,
      0.0066216835,
      0.0017929176,
      -0.014362571,
      -0.0044667483,
      0.012399086,
      0.028568482,
      -0.0033567334,
      0.0034474507,
      -0.009915292,
      0.0068917745,
      0.025355712,
      -0.021614341,
      -0.0029715654,
      0.002221452,
      -0.004163581,
      0.010672276,
      -0.019442268,
      0.008619866,
      -0.025655344,
      0.006506399,
      0.01642796,
      0.021754393,
      -0.0058860094,
      0.021336611,
      -0.007693823,
      -0.0037202607,
      -0.011553256,
      -0.0023015707,
      -0.009806041,
      0.016924215,
      -0.011558597,
      0.013739031,
      -0.0023814773,
      -0.0060550603,
      -0.012674203,
      -0.02727532,
      0.030086435,
      0.017499486,
      -0.00826138,
      -0.009575478,
      0.029828543,
      0.019401034,
      0.015624689,
      -0.009331014,
      -0.0038359805,
      0.035054114,
      -0.008191426,
      0.0040465584,
      -0.0034020457,
      -0.008502955,
      -0.009120458,
      -0.004822701,
      0.0033123202,
      -0.004161763,
      0.002667786,
      -0.020990308,
      0.014452565,
      -0.010827813,
      0.0068295174,
      -0.1139323,
      -0.001175795,
      -0.008572849,
      0.011400242,
      -0.03084825,
      -0.013464468,
      -0.00834218,
      -0.02839656,
      0.0029122178,
      -0.027211476,
      0.0029828066,
      0.010380194,
      0.013623361,
      0.011624752,
      -0.014150197,
      -0.0052411854,
      -0.008568799,
      0.040727586,
      0.004717811,
      -0.014165937,
      0.01044806,
      0.0053974576,
      -0.008531379,
      0.020230487,
      -0.0055327294,
      0.0068823565,
      0.00758239,
      0.009248394,
      0.0027181923,
      -0.005686491,
      -0.013605088,
      -0.004661996,
      -0.0005819306,
      0.014694535,
      0.017343441,
      0.006596952,
      0.011101603,
      0.0021050496,
      -0.0025891594,
      0.011480292,
      -0.0017156884,
      0.006005312,
      -0.010487983,
      0.011479856,
      0.026575904,
      -0.0012120911,
      0.029639795,
      0.0028706286,
      -0.0011724365,
      0.036069598,
      -0.03566827,
      -0.02211246,
      -0.017879153,
      -0.034454655,
      0.0020427178,
      -0.014167092,
      0.03516592,
      -0.007149861,
      -0.0023008103,
      -0.015239391,
      -0.030171474,
      0.02338089,
      -0.01081332,
      0.02970817,
      -0.01665706,
      -0.010243039,
      0.010217228,
      -0.008368718,
      0.011440126,
      -0.013606949,
      -0.0050144894,
      0.0015148524,
      0.0021151984,
      0.02022314,
      -0.012367621,
      0.005923532,
      0.0061474997,
      0.00057309185,
      -0.018209623,
      0.012971504,
      -0.018068114,
      0.010179264,
      -0.077952124,
      -0.008827818,
      0.011612134,
      -0.006925017,
      0.025114032,
      -0.005248757,
      -0.030764919,
      0.014242357,
      -0.016229378,
      0.007387687,
      -0.039326813,
      0.0014942568,
      -0.011273867,
      -0.008130937,
      -0.026214477,
      0.0042477786,
      -0.0017970344,
      -0.017475381,
      -0.025068073,
      0.002970877,
      -0.009315472,
      -0.0030889227,
      0.009758276,
      -0.0038816782,
      0.014944837,
      0.029763669,
      -0.017506614,
      -0.0058037713,
      -0.0104262605,
      -0.005589882,
      -0.012124653,
      -0.1632384,
      -0.019329226,
      0.0045033637,
      0.009748727,
      0.000054655862,
      0.0014373406,
      -0.00870108,
      -0.032640625,
      0.0014228199,
      -0.0018994823,
      0.011240403,
      -0.019062728,
      -0.014192473,
      -0.011571083,
      0.0014528716,
      0.15594919,
      0.00042948508,
      0.0008041593,
      -0.013905236,
      0.0067498,
      -0.0021522797,
      -0.004796731,
      0.005114948,
      0.021841701,
      -0.017627794,
      -0.00035070765,
      0.002774082,
      -0.017728034,
      0.015398145,
      0.007545784,
      0.019817282,
      -0.0131991105,
      -0.018425317,
      0.0075356117,
      0.0059217443,
      -0.01998719,
      0.004464405,
      -0.020460637,
      0.008979216,
      -0.007916279,
      0.01486899,
      -0.022511853,
      0.000121178244,
      0.009586507,
      0.00087622995,
      -0.01051707,
      -0.0027192144,
      0.006525889,
      -0.013798414,
      0.0146702435,
      0.012628663,
      -0.06796333,
      0.0055800807,
      -0.000084467654,
      -0.002000472,
      0.009773131,
      -0.016342917,
      0.01296387,
      -0.023691509,
      0.0112532005,
      -0.014024352,
      -0.0076144673,
      0.030128688,
      -0.0037641784,
      0.010884515,
      -0.010139016,
      -0.00035950865,
      0.022271976,
      0.021510897,
      -0.008258658,
      -0.0032936812,
      0.026465314,
      -0.0021650253,
      -0.026688468,
      -0.018253343,
      -0.008268243,
      -0.0058648763,
      0.004015434,
      -0.011030301,
      -0.014063275,
      0.014387185,
      0.0034245425,
      -0.006384872,
      -0.0058715716,
      0.028021999,
      -0.00199316,
      0.02004191,
      0.03133717,
      0.005453597,
      0.004179647,
      -0.009156387,
      0.0107269995,
      0.0031884057,
      0.039960973,
      0.0037621865,
      0.014486917,
      0.009064757,
      0.00969457,
      0.007259504,
      0.01406957,
      0.015444596,
      -0.01650706,
      0.016423117,
      -0.011069848,
      0.0129734315,
      -0.014970936,
      0.01705683,
      0.026128717,
      0.011146896,
      -0.017275156
    ]
  },
  {
    "id": "genai_cohort_nodejs_02_NodeJS_SystemDesign_SimpleSystem_vtt",
    "content": "All right, so in this particular video, let's start from very basics and from the beginning. Okay, so what is a, system design? So system design refers to a, mechanism or a study where you design the systems to work on a scale. Let's start from the very beginning that what is a simplest system design can look like. For example, in your system design you have a component and everything starts from a, user who is a user who is basically interacting with your server, who is basically using your application. So in your system design component, you have users who are talking to your server. So let's create a server here. So let's say this is my server, right? So what happens? Your users send a request to the server. So this is your request. Your server internally processes this request. What do I mean by process? Process basically means to do something on this particular request, right? It's your application logic. For example, this can be anything for examp, this can be talking to database, maybe a DB query. So user is asking for all the books. So you have to make a DB query to get all the books. This can be a DB mutation. Okay. This can be something like, you know, authentication. This can be a, signup request. This can be a simple validation. So anything is basically a part of your processing. Okay, now to do this particular processing, your system, your server is connected to a database. So let's say you have a database here. So we are using postgres database, but it can be any database. So you are basically have a connection with the database. So you use this for primarily storing something, right? To store your data and to retrieve the data. And once the request is processed, you send back something known as a response. Okay, so this is how a typical system design works. And let me just reduce this to a, medium. Yeah, now this looks good. So what happens? A user sends a, request to the server, server processes this particular request and then sends back a response. And this is known as a request, response cycle. This is the simplest system design diagram that you can see. Okay, now what happens here is a problem. The problem is what happens when your users tend to scale, when you have a lot of users. Right now there was only one user, and your system was able to interact and was able to process this request. But the problem happens when you have a lot of users. Even I will not, I'll not say millions of users. Even if you have hundreds of users, which is a very small number, your server might crash. Your server can crash for many reasons. Maybe your server was not capable of you, know, handling requests, your server didn't have enough resources. So this is where your system actually starts to crash. And this is where the system design as a subject comes in. Okay, now let's do one thing. Let's quickly analyze that, you know, how these systems are internally working and all that stuff. What is this server? Tell me just in one line, what is the server? Can I say that this server is nothing but just a physical machine. At the end of the day, it's just a physical machine running on a power. Now this machine, a physical machine running on a power which is connected to an Internet. Let's say this machine has two CPU, okay? And the configuration is that it has a 4GB of RAM. Now this particular machine is, you know, somewhere, maybe it is at my home, maybe it is in a data center. And it has a, by power supply. Right, by 7, power supply. Okay, so let me just, write it down. Power supply. And it has an Internet connection. It has a public Internet connection. Because only then, only then the users can basically come to this particular machine. Okay, When I talk about Internet connection and public availability, can I also say that this machine will have an IP address? Let's say the IP address of this particular machine is Okay? So just taking a random example. So what happens is these users, in order to reach to your server, they need to know the IP address, right? You have to publicly tell that, hey, my IP address is So if you want to visit my website, please open this particular IP address on your browser. But do you really think that this is a really nice way to promote your server? Is this a really nice way to promote your application? Can users really remember your IP address? No. So what you can do is you can actually buy a domain, right? So let's say I can buy a domain that is piyushgurk. dev and what I want is that whenever someone visits this particular domain, piushkurk. dev it actually, it should basically redirect the users to this particular machine. But wait, how can this be even possible? How can magically just typing pushkube. dev in the browser can actually redirect the user to this server which is running on So the answer is actually it is not possible. This is where, your first system design component comes in. That is a DNS server. Okay? The full form for DNS is Domain Name System. So think of it as a public phone book, okay? It's a public phone book which is a public database, okay, which stores which domain has what IP address. So this public domain name system has a phone book, is a large database which knows that piyushka. dev has this IP address. Google. com has this IP address. So it basically has records of all the websites on the Internet. So in your browser when you very first time type in piushka dot dev, your browser has no idea where to go. So your browser makes a request to a DNS server. This step is known as a DNS resolution. Okay? Your DNS server returns this particular IP address that hey, from for piushka. dev this is the IP address. And now your browser is basically redirected to this particular server. So whenever you type google. com you are actually not interacting with google. com your request goes to a DNS server, DNS server first returns an IP address and then internally your browser redirects you to that IP address. Because by name you cannot reach any server. You need a, physical IP address and it is very hard to remember IP addresses. That is where the DNS server really shines in. Okay, now you might be thinking, it's an overkill, right? For every domain you need to make a DNS query, the answer is no. There is something known as DNS caching. So your browser, whenever you type a URL, if it doesn't have it in the cache, that means it's a first request, it goes to the DNS server, asks for the IP address and then it stores locally on your machine. Okay, it caches that particular value on your machine so that you don't have to do the DNS resolution step again. So, which basically saves you some milliseconds and it also saves some load on the DNS server. Okay, so this is how your DNS server works and this is how your users are redirected to your server. So this is your single server and a, database. Now this particular video was on DNS server and you know, just a kickstart on the system design topic. This is going to be really complex. We are going to grow this system a lot. So be with me. So right now we just know one problem that you know, we just have single machine and because you know our DNS is redirecting the user to this machine and as the user increases, my system crashes, my machine crashes. Because CPU 4GB RAM is such a small configuration, requests come in and that's it. My server is gone. So in the next video, let's see how can I solve this particular problem using something known as scaling policies. So let's meet you right there.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "02-NodeJS-SystemDesign-SimpleSystem.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/02-NodeJS-SystemDesign-SimpleSystem.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.009247251,
      0.0017455752,
      0.012991294,
      -0.04560758,
      -0.023494542,
      0.0056514987,
      0.027275672,
      0.009528392,
      0.01465259,
      0.04622946,
      -0.012476988,
      -0.0021482147,
      0.010556871,
      0.029253885,
      0.11876013,
      -0.0074557806,
      -0.0049370266,
      -0.00020402332,
      -0.0007945072,
      -0.03342466,
      0.02269626,
      0.002881835,
      0.0021898814,
      0.001024123,
      0.0033627988,
      0.000076904464,
      -0.012336329,
      -0.013209558,
      0.023565108,
      -0.008137115,
      -0.007679904,
      -0.003835523,
      0.0052351747,
      0.015028391,
      0.018377962,
      0.02229253,
      0.013786006,
      0.00834063,
      -0.010496743,
      0.0045755226,
      -0.012359363,
      -0.0071110185,
      -0.0011284833,
      -0.0113197,
      0.015497955,
      0.005757629,
      -0.00093747664,
      -0.012335878,
      -0.015184866,
      0.00347587,
      -0.01863392,
      -0.015150929,
      -0.008619205,
      -0.18639816,
      -0.0029453773,
      0.008537848,
      0.008688512,
      0.00383435,
      -0.018994456,
      -0.0028544492,
      -0.03317189,
      0.017402064,
      -0.009158383,
      0.01420962,
      -0.012105944,
      -0.004246303,
      0.028093198,
      -0.0021590984,
      -0.0069133597,
      0.008840045,
      0.023026178,
      -0.0031919496,
      -0.0031310667,
      -0.027450103,
      -0.021864742,
      -0.012745506,
      -0.004768418,
      -0.0015927738,
      0.0019227022,
      0.010019617,
      -0.003256025,
      -0.007450204,
      -0.006417955,
      0.004763539,
      0.0047010495,
      -0.0098025,
      -0.0126694655,
      -0.012558133,
      0.0038303658,
      0.00065518037,
      -0.00076776557,
      0.013813849,
      0.019646358,
      0.0035512752,
      -0.02124715,
      -0.0015575321,
      -0.017604453,
      -0.005057221,
      0.0053668395,
      0.0060189553,
      -0.0022389058,
      0.006283264,
      -0.021730946,
      0.0327323,
      -0.004366288,
      0.0026757375,
      0.02858517,
      -0.017370388,
      -0.005082829,
      -0.020398283,
      0.011539751,
      -0.017288953,
      0.016823364,
      -0.010978061,
      -0.0015537109,
      -0.18570442,
      0.021574736,
      -0.0007815513,
      0.014800364,
      -0.018118238,
      -0.027229143,
      -0.028886484,
      0.021561606,
      0.008110969,
      0.00015292226,
      -0.0068994123,
      -0.018556574,
      0.0152520025,
      -0.008967934,
      -0.0031184629,
      -0.0075892485,
      -0.011056995,
      -0.0066002216,
      0.025246585,
      0.025622576,
      0.0107617825,
      -0.035925757,
      -0.0144086145,
      0.0040716343,
      -0.015480188,
      0.013298958,
      0.023109242,
      0.004356989,
      0.039282583,
      0.0043295408,
      0.013994577,
      -0.045025453,
      0.024468837,
      -0.02581117,
      -0.023845822,
      0.0063522714,
      -0.010374634,
      0.023428233,
      0.004216638,
      0.021483652,
      -0.02880796,
      -0.02454921,
      0.005545331,
      0.0058764042,
      0.008032475,
      0.002747933,
      -0.0015704003,
      0.022745073,
      0.0070201806,
      -0.0011708764,
      -0.0038944485,
      -0.022420991,
      0.012686323,
      0.008441308,
      0.0048388913,
      -0.023817215,
      -0.003629086,
      -0.029947337,
      -0.0052593057,
      -0.0031960343,
      -0.010590391,
      -0.017193569,
      0.03006868,
      0.0045856996,
      -0.0173817,
      0.0069209314,
      0.0051224306,
      0.0047233007,
      -0.012684734,
      -0.002591822,
      -0.009161125,
      -0.009871113,
      -0.022945425,
      0.03156544,
      -0.008134275,
      0.006415319,
      -0.011631593,
      -0.004604336,
      -0.010589388,
      -0.00091431424,
      -0.034809716,
      0.00062544836,
      -0.010391726,
      0.0070885047,
      0.023089208,
      -0.006103891,
      -0.006694421,
      0.013393395,
      -0.011941318,
      -0.007311986,
      0.0075683333,
      0.015099391,
      -0.030207925,
      0.00539433,
      0.015949687,
      -0.021513812,
      -0.016925387,
      0.0142555125,
      0.007923192,
      0.01594814,
      -0.00051837444,
      0.007033436,
      0.018042307,
      0.0029331006,
      0.013678146,
      0.0018493094,
      0.0057181153,
      0.0071352758,
      0.012697589,
      0.03704839,
      0.003720635,
      -0.0032698028,
      -0.004706984,
      0.00971045,
      -0.0089402,
      0.007590219,
      0.0059046415,
      -0.021053422,
      0.005666521,
      0.01921709,
      0.016138587,
      -0.0016600693,
      0.0017187112,
      0.0030215357,
      0.0037358962,
      0.00011588084,
      -0.01714344,
      -0.0063894517,
      0.02917433,
      0.013879488,
      0.025454136,
      -0.005237727,
      0.017485239,
      -0.007352452,
      -0.0007912134,
      0.009722219,
      -0.002509875,
      -0.012094796,
      0.013776225,
      0.020813594,
      -0.016064575,
      -0.041156095,
      -0.02729588,
      -0.004647581,
      -0.003285087,
      -0.019926729,
      -0.027558355,
      -0.0022662268,
      0.0040977825,
      -0.006580376,
      -0.0050456827,
      -0.004833053,
      0.025234345,
      -0.009848546,
      -0.0016567548,
      0.022590185,
      -0.0020025116,
      -0.021158742,
      -0.0146068605,
      0.015590217,
      0.018482681,
      -0.09296143,
      -0.008394981,
      -0.011314174,
      -0.0023184307,
      -0.0037286154,
      -0.0091210455,
      -0.0057651433,
      0.0106132375,
      0.02184817,
      0.01782566,
      0.017105563,
      0.007515579,
      0.01916072,
      -0.0047634076,
      0.011028048,
      0.009901579,
      0.0023880445,
      0.0029628999,
      0.014250589,
      -0.03592284,
      -0.014036276,
      0.012512115,
      -0.0019646839,
      0.00018372897,
      -0.006424587,
      -0.0033546782,
      -0.015528249,
      0.009693399,
      0.0033160937,
      0.002147476,
      0.017476154,
      0.0429047,
      0.002596086,
      0.0048692334,
      -0.009469024,
      0.017764503,
      -0.0074656457,
      -0.013080218,
      0.013785792,
      -0.007305185,
      0.0017410778,
      -0.016144082,
      0.015513652,
      -0.0021332402,
      -0.01755881,
      0.01532747,
      0.0035203842,
      0.01562704,
      -0.04248997,
      -0.0057617035,
      -0.005940604,
      0.005571216,
      -0.0008790132,
      -0.024219632,
      -0.01898049,
      0.01123228,
      -0.0037452474,
      0.00013283535,
      -0.018474994,
      0.015245145,
      -0.0101537,
      -0.018448196,
      0.0013618794,
      0.0071689733,
      0.006938185,
      -0.014828552,
      0.000011742729,
      -0.031592917,
      0.006378948,
      -0.013714813,
      0.0034908857,
      -0.025233552,
      0.001983594,
      -0.03692366,
      0.024788287,
      0.021244852,
      0.00062601094,
      -0.010839105,
      -0.024308218,
      0.019563926,
      0.00000917806,
      0.021552136,
      0.01569713,
      0.009947486,
      0.016466444,
      0.0043805917,
      -0.003071415,
      -0.008834705,
      -0.018307017,
      -0.024036966,
      0.018007932,
      0.032153104,
      -0.00812682,
      0.017666252,
      -0.016030727,
      0.0057188673,
      -0.0014118373,
      0.012377609,
      0.012029142,
      0.019120147,
      -0.007364292,
      -0.0008464495,
      -0.010390319,
      0.0028417283,
      -0.01580427,
      0.026580663,
      -0.024248673,
      0.0009850529,
      0.0049015754,
      0.00029724595,
      -0.009286354,
      0.0076428624,
      0.010633987,
      -0.004324858,
      0.0020052292,
      -0.014127514,
      -0.0068080504,
      0.0130557045,
      -0.0074520386,
      -0.028419895,
      -0.012826237,
      0.00041769218,
      0.018578155,
      0.024347885,
      -0.042475007,
      -0.006600481,
      -0.031710744,
      0.0037689817,
      0.006382448,
      -0.021444255,
      -0.022028357,
      -0.009471583,
      0.008389712,
      -0.020107126,
      -0.0126311835,
      -0.021420285,
      -0.007408493,
      -0.0010681952,
      -0.0029114494,
      0.012913508,
      0.0013537719,
      0.019481562,
      0.0059699295,
      0.0012376622,
      -0.01019621,
      -0.019308051,
      -0.025886899,
      0.010391196,
      0.014847582,
      -0.007833979,
      -0.020460203,
      -0.011403545,
      -0.01095627,
      -0.0032553542,
      0.0073975283,
      0.01889114,
      -0.0031992688,
      0.014671205,
      0.005680552,
      -0.009006549,
      -0.015936304,
      0.00043945893,
      -0.009738581,
      -0.0063906354,
      0.025396701,
      -0.0036457914,
      -0.016872771,
      -0.0016039552,
      -0.0022393044,
      0.0028993972,
      -0.0011164909,
      -0.0222311,
      -0.04149244,
      0.008979209,
      0.012279882,
      0.009338979,
      -0.0043478576,
      -0.0056885676,
      0.007874112,
      0.011260047,
      -0.0036754338,
      -0.0064388895,
      -0.015025967,
      0.0065281205,
      0.016444672,
      0.00037704516,
      0.023380633,
      -0.006694845,
      -0.020592237,
      -0.008724001,
      -0.016359294,
      -0.001453913,
      -0.009337423,
      0.00081875455,
      0.0031602816,
      0.0027174272,
      0.0008093704,
      -0.003747695,
      -0.012725806,
      0.007899513,
      -0.0013719059,
      -0.022474125,
      0.0080543,
      -0.016462015,
      0.020958323,
      -0.0047156005,
      -0.0074567096,
      -0.016254365,
      0.01764352,
      0.011320765,
      0.003950103,
      -0.0040540947,
      0.005186258,
      -0.007861893,
      0.008442667,
      0.010733959,
      -0.0031494275,
      -0.0010510525,
      -0.021873986,
      -0.010794996,
      0.020617995,
      -0.016679436,
      -0.011362544,
      -0.011980986,
      -0.010896223,
      0.005755706,
      -0.027951242,
      0.009925009,
      0.0018933458,
      -0.0023305023,
      0.01920876,
      0.016720755,
      -0.0049158703,
      0.008494819,
      -0.011675335,
      -0.01907396,
      -0.006121075,
      -0.0079304045,
      -0.006117128,
      0.021415804,
      0.008806489,
      0.0013034773,
      -0.018321538,
      -0.019510621,
      -0.008355799,
      -0.020076513,
      0.031694617,
      0.013258406,
      -0.00869913,
      -0.03043794,
      0.01979833,
      0.029849192,
      0.018304612,
      -0.007564456,
      -0.0026122655,
      0.0178837,
      -0.023382327,
      -0.011670542,
      0.0040565627,
      -0.008055798,
      -0.03468884,
      -0.026677733,
      0.012695475,
      0.023558723,
      0.004642813,
      -0.027854986,
      0.009766398,
      -0.012431969,
      0.004133942,
      -0.12085474,
      -0.00015414118,
      -0.02108323,
      0.001188801,
      -0.019382427,
      -0.010375255,
      0.00051110884,
      -0.018318119,
      -0.00013264366,
      -0.015646197,
      0.01987448,
      0.012352885,
      0.010118395,
      0.008554273,
      -0.007152946,
      -0.0054662577,
      -0.011838226,
      0.029899292,
      0.023473727,
      -0.011267703,
      0.0019040636,
      0.0068809106,
      -0.0070325793,
      0.027616657,
      -0.008424372,
      -0.013569347,
      0.009791953,
      0.016835889,
      0.0022743929,
      0.0010754992,
      -0.017925367,
      -0.02198267,
      -0.00827733,
      -0.007378532,
      0.025588248,
      -0.007575344,
      0.016884806,
      0.008993182,
      0.014038301,
      0.015199935,
      -0.0050821607,
      0.012366039,
      -0.004591798,
      0.02238531,
      0.026653998,
      0.0060619977,
      0.010821722,
      -0.018259635,
      -0.018968713,
      0.024851156,
      -0.051537625,
      -0.015844226,
      -0.009781964,
      -0.020504223,
      0.018287728,
      -0.0011768487,
      0.0252808,
      -0.009962815,
      -0.008981718,
      -0.01566793,
      -0.012380076,
      0.02581735,
      -0.020906895,
      0.023522876,
      -0.0032982968,
      -0.016437756,
      0.0024378477,
      -0.022309164,
      0.026657656,
      -0.0032231398,
      0.0008289166,
      0.0056092506,
      0.016855868,
      0.028454972,
      0.013104806,
      0.004017831,
      -0.0028593761,
      0.008694749,
      -0.019657316,
      0.00644377,
      -0.021581355,
      0.016043553,
      -0.07533071,
      -0.01652073,
      0.013944276,
      -0.00014404248,
      0.02781002,
      0.0017061757,
      -0.022903617,
      0.020572254,
      -0.010885744,
      0.012137104,
      -0.01027435,
      -0.0101972,
      -0.014135154,
      -0.028680367,
      -0.03855728,
      0.019802477,
      0.006394385,
      -0.015598706,
      -0.029364387,
      -0.0043828734,
      -0.015670761,
      -0.00854717,
      0.006708015,
      -0.011576003,
      0.00056248734,
      0.019357119,
      -0.027782718,
      -0.0011025878,
      -0.0011595306,
      0.010557968,
      -0.0131330695,
      -0.1362778,
      -0.0069288765,
      0.018702697,
      -0.004584668,
      0.0022064187,
      0.011181281,
      -0.010643578,
      -0.019418737,
      0.012756333,
      -0.015737703,
      -0.0038280482,
      -0.011080502,
      -0.017340304,
      -0.0031618762,
      0.009140021,
      0.147225,
      -0.00160889,
      0.014146064,
      -0.007752202,
      0.012112833,
      -0.013385527,
      0.006575986,
      -0.001674143,
      0.010122658,
      -0.014761211,
      0.013325924,
      0.002671906,
      -0.036626343,
      0.012290507,
      0.014023299,
      0.010654763,
      -0.017408766,
      -0.01703672,
      0.022880215,
      0.0071805725,
      -0.02733249,
      0.010045922,
      -0.031360697,
      -0.00086062803,
      -0.008436981,
      0.0091100475,
      0.003461354,
      -0.017281855,
      0.012541108,
      0.0000099260205,
      -0.0012163436,
      0.0022899618,
      0.010993806,
      -0.02263976,
      0.015669432,
      0.006258823,
      -0.06338676,
      -0.0009247521,
      -0.008374183,
      -0.0053220405,
      0.023158548,
      -0.0056154174,
      0.010668129,
      -0.01753348,
      0.0040350314,
      -0.016566085,
      -0.01491641,
      0.03108421,
      -0.0077706696,
      0.011072989,
      0.0029225769,
      0.012860365,
      0.03276337,
      0.028786927,
      0.004624544,
      0.004671125,
      0.024750074,
      -0.026553337,
      -0.015630303,
      -0.016796766,
      -0.010063462,
      -0.0009950427,
      0.018157536,
      -0.0032554525,
      -0.007947887,
      0.0041308505,
      -0.0028934425,
      -0.017605826,
      -0.00089175714,
      0.034692455,
      0.0021649806,
      -0.00041154586,
      0.032308765,
      0.002143168,
      0.010852807,
      0.0012844232,
      0.014865041,
      0.0052553187,
      0.019185865,
      0.023166718,
      0.005667979,
      0.0025017504,
      0.004117089,
      0.030155286,
      0.007482272,
      0.017883627,
      -0.03167718,
      0.0059073204,
      -0.0019133427,
      0.026222348,
      -0.009298847,
      0.035023164,
      0.020193897,
      0.018846301,
      -0.026791038
    ]
  },
  {
    "id": "genai_cohort_nodejs_03_NodeJS_SystemDesign_VerticalScaling_vtt",
    "content": "All right, so welcome to the second video of system design section. And in this particular video, let's understand how are we going to solve this typical problem of not able to handle so many requests. Okay, so what is the fundamental reason that you are not able to handle the request? Because you have a lot of users, right? The problem is that your machine is just a CPU and 4GB RAM. And it was able to maybe handle requests, it was able to handle requests, but. But it eventually crashed on request. So Piyush, if this. Let's, let's do some of the calculations, right? Some, estimates. This machine configuration, that is a CPU, 4GB RAM machine can handle these many requests. What if I spend some more money, okay, And I double my configuration? This time I can use a CPU. Okay, let's say a CPU machine and I can use an 8GB of RAM. So what I'm basically doing is I'm doubling on my resources. I am spending some money on the infrastructure, I am upgrading my system. And now can I say that my system can actually handle somewhat, okay, somewhat around, to request. Can I say that? Of course I can say that, right? So that means when my users increased and my server got crashed, what should I do? I should spend some money because of course the business is also increasing, right? So now what I will do is I will do 8gb of RAM and 4gb of CPU. So this solves my problem. Now, hundred users or maybe users is not a problem for me because now my system is tuned. Now my system is capable of handling to request. So that means this was a good solution to have spend some more money. And that's it. You have your server up and running, but now still, still, still, still, still. The problem is that if you have users or more than users, like users, your server is going to crash. Now what will you do? Okay, you will say when I reach to that threshold, that is users, I'll again spend some money. And this time what I'm going to do is I'm going to do CPU and I'm going to do 16GB RAM. And this time I can maybe handle to, users. This is your new benchmark, right? So now you have finally spent some more money. So now your machine is even more upgraded. You are, you know, upgrading your machine. You're spending some more money on the machine, and now you can handle users. So initially you were just able to handle to users and now you are able to handle to users. And it's an upgrade, right? It's a scale, right? So this is one way of scaling your servers. And this technique is known as vertical scaling. So this is known as vertical scaling. So what you basically do in the vertical scaling is you add more power slash resources to the system or to the server. So what is a vertical scaling? That what you do, you basically spend more money on the infrastructure, you add more power and resources to, to the server. So this is your vertical scaling. Now the pro is very good, right? The pro there. What is the pro of this particular scaling stuff? That you have more power, okay, you have more power on server. But there is a drawback, There is a trade off. There is a con of this particular mechanism of this vertical scaling. Number one, tell me one thing. Maybe you have a flash sale, maybe you have a sale on near Diwali where you have a lot of users, you are expecting a lot of users. What will happen is you are expecting some users, okay? So for users you need more CPU and more RAM. So okay, you, you go to the market, you invest more in the CPU and and RAM. So now you have CPUs, which is a lot. And now you have a 128GB RAM. So now your system can even handle more than 3, users. That's good. But on a typical day when the sale is not there, on an average you only have users, let's say, or users or users. So do you, so do you really think that this is, this money that you're spending is worth it? Because once in a year you need this particular scale, that is of 3, users, right? But once you have already upgraded your machine, once you have already invested on it. Now on an average day, on a typical day you only have users, right? But you still have CPUs and 128GB RAM running. So the problem is that overall cost is more. Okay? So that means you are always prepared for the best case. You are always prepared for the sale. So even if you are not running a sale, even if you have just to users, you still have CPU and 128GB RAM, which is an overkill. So most of your system is sitting idle. You are not using the system to the full potential. So this is one con that you have second con is. Okay, what happens Even if you have upgraded too much, you have CPUs, which is a lot. Okay? You have invested good amount of money and you have GB of RAM. But for some technical reasons, this machine has some fault. I'm not saying you that it is not scalable. I'm not saying you that it cannot handle the load. It can handle the load. But for some reasons, something technical failure happened in this particular machine. Some circuit went off, there was, some kind of mishap, there was some kind of power issue, or maybe the motherboard got some spark. Okay? This machine is dead. So now what happens? Even if you have spent a lot of money on your resources, right? Even if you have spent a lot of money on your resources, your server is still down. So you have a single point of failure here, okay. That if this server goes down, there's a single point of failure. Even though this machine was a big, giant machine, it was a very powerful machine. But because of some technical issues, this machine is off. And now you have a single point of failure. So this is your vertical scaling. Okay? So. So in this particular video, we have understood what is vertical scaling. So let's see how can we solve these particular problems in the next scaling strategy.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "03-NodeJS-SystemDesign-VerticalScaling.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/03-NodeJS-SystemDesign-VerticalScaling.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0073637855,
      0.0057892245,
      0.010798372,
      -0.065169714,
      -0.028267745,
      0.004575288,
      0.021153567,
      0.013177401,
      -0.011773982,
      0.033494238,
      -0.023249784,
      -0.0038531385,
      0.016788935,
      0.005255426,
      0.10999833,
      0.00014051986,
      0.004487915,
      0.0038973487,
      -0.001409697,
      -0.008754207,
      0.006539633,
      -0.0055538365,
      -0.021802133,
      -0.008902231,
      0.0062947874,
      -0.0015046458,
      0.013952075,
      -0.010270237,
      0.015977176,
      -0.016418928,
      -0.01677889,
      -0.008725172,
      -0.0056520193,
      0.017609725,
      0.005011949,
      0.014130542,
      0.018460179,
      0.0019046213,
      -0.023314789,
      0.015264726,
      -0.022552198,
      -0.0013864759,
      0.012116487,
      -0.00553266,
      -0.0037561872,
      -0.024965767,
      -0.0042115063,
      -0.0373106,
      -0.003078982,
      0.0029233738,
      -0.013936252,
      -0.019668987,
      0.0048256866,
      -0.180275,
      -0.005060481,
      0.0067061386,
      -0.008214946,
      -0.013772367,
      -0.0051532676,
      0.0055224304,
      -0.036232173,
      0.026836207,
      -0.010758751,
      0.0010320558,
      -0.025392821,
      -0.0122254165,
      0.04641785,
      0.023349617,
      -0.0060319724,
      -0.0108635,
      0.017978389,
      -0.028611291,
      -0.0023363936,
      -0.02052924,
      -0.02686694,
      -0.025745105,
      -0.007035216,
      -0.0020317829,
      -0.0134728355,
      0.016829254,
      -0.011712946,
      -0.022584574,
      -0.0013763974,
      -0.0107105365,
      -0.0075722462,
      0.0057537258,
      -0.013260355,
      -0.0066220807,
      0.008354086,
      -0.0069997613,
      0.0012232625,
      0.010120335,
      -0.00006404432,
      0.009412159,
      0.009473039,
      0.008168221,
      -0.0106688645,
      0.0051125726,
      -0.016914958,
      -0.013711777,
      -0.009180896,
      0.0044848737,
      -0.03723243,
      0.02465992,
      -0.012778191,
      -0.008112433,
      0.0030276848,
      -0.016722145,
      -0.0020744095,
      -0.014958324,
      -0.0028693702,
      0.00835165,
      0.009649061,
      0.01657351,
      -0.0125165675,
      -0.18421482,
      0.01603033,
      0.013537928,
      -0.005259826,
      -0.0075179283,
      -0.022736976,
      0.0040001795,
      0.03881993,
      -0.013539877,
      -0.00644235,
      0.002741853,
      -0.0006546343,
      0.004154892,
      -0.000030060535,
      -0.009977918,
      -0.020458428,
      -0.0013487188,
      -0.001426185,
      0.029876055,
      0.017912097,
      -0.007584307,
      -0.012975111,
      -0.028292596,
      -0.020958077,
      -0.027649045,
      0.004496456,
      0.01483353,
      -0.0051579215,
      0.037650343,
      0.021777226,
      -0.0015351936,
      -0.034469586,
      0.011512088,
      0.006472825,
      -0.02758898,
      0.016484719,
      -0.005418715,
      0.02046582,
      0.011654222,
      0.03302182,
      -0.027328404,
      -0.019332733,
      0.012122368,
      0.00948611,
      -0.014777316,
      -0.009196181,
      -0.009451375,
      0.004032654,
      0.022808893,
      0.012604127,
      -0.014698465,
      -0.017085155,
      0.00039183523,
      0.0032362433,
      -0.0027244273,
      -0.022346428,
      -0.0111744115,
      -0.02187365,
      -0.006353107,
      0.012251941,
      -0.017889656,
      -0.018924551,
      0.016112125,
      0.014547673,
      -0.010166834,
      0.0029310202,
      0.00946429,
      0.011046577,
      -0.01776607,
      -0.0067185047,
      -0.0398117,
      -0.0072456407,
      0.009808711,
      0.018175539,
      0.0005183338,
      0.017137242,
      -0.00982853,
      -0.005053195,
      -0.016888127,
      0.001087654,
      -0.036020204,
      0.012780775,
      0.0006172957,
      -0.0070061674,
      0.030111827,
      -0.0014450235,
      -0.004433551,
      0.026136965,
      -0.011982287,
      -0.003374489,
      0.008389771,
      0.017023323,
      -0.0078977095,
      0.0027548212,
      0.024359606,
      -0.006178078,
      -0.017657313,
      0.012593353,
      0.01064018,
      0.010234709,
      -0.002788546,
      0.022824159,
      0.022220109,
      -0.0022355954,
      -0.00087622914,
      -0.025142279,
      -0.0070578097,
      0.009279025,
      0.011654348,
      0.056232672,
      -0.0023371342,
      0.00066806265,
      -0.00957888,
      -0.0014917427,
      0.0106753195,
      0.023099307,
      0.025139177,
      0.000961401,
      0.0061720917,
      0.012776565,
      0.00039700154,
      -0.01086568,
      0.02007267,
      0.0011999739,
      0.017655099,
      -0.01915763,
      0.0042735445,
      -0.010601883,
      0.0019672816,
      0.01970928,
      0.0049251034,
      -0.010565559,
      0.010545445,
      -0.00853187,
      -0.02158038,
      -0.010239145,
      0.020110497,
      0.00091675814,
      0.010903052,
      0.026875567,
      -0.032580893,
      -0.04858255,
      -0.014516168,
      -0.014386884,
      -0.0045326333,
      -0.0025352887,
      -0.027199551,
      -0.0007184269,
      -0.018520026,
      0.0057506384,
      0.009664608,
      0.011874808,
      0.021152621,
      -0.004060275,
      0.00091060734,
      0.022433404,
      0.0049749245,
      -0.036494516,
      -0.0025685972,
      -0.0027122654,
      -0.00091991166,
      -0.08278641,
      -0.0038461408,
      -0.0019710246,
      -0.014810025,
      0.00393428,
      0.010356321,
      0.0031216778,
      -0.0026523746,
      0.012979392,
      0.01685315,
      0.012094295,
      0.016165216,
      0.017535139,
      -0.017343638,
      -0.0015340446,
      0.011305317,
      -0.013682476,
      0.0015600875,
      0.010120119,
      -0.024270033,
      -0.025119921,
      -0.017021544,
      0.0012576324,
      -0.0129228635,
      -0.011465872,
      -0.011335917,
      -0.022734644,
      0.022859028,
      0.008971595,
      0.0093666725,
      0.0092738075,
      0.018073285,
      -0.015610843,
      -0.010656906,
      -0.012986991,
      0.021321287,
      -0.00014606923,
      -0.020529695,
      0.00002495166,
      -0.0043192226,
      -0.006609297,
      -0.022522299,
      0.011644567,
      0.0034190188,
      -0.008278154,
      0.011251749,
      0.0014808003,
      0.019453414,
      -0.040741194,
      0.0058562187,
      -0.011114832,
      -0.013451264,
      0.0017133428,
      -0.016004605,
      -0.011377814,
      0.0077889063,
      -0.007065926,
      -0.010444024,
      -0.012153701,
      0.013518822,
      0.00964801,
      -0.022983855,
      -0.0077744606,
      -0.00057361426,
      0.021531923,
      -0.004660381,
      -0.003484395,
      -0.010487283,
      -0.004822622,
      -0.0011478263,
      0.0077181817,
      0.0014778901,
      0.014276039,
      -0.031647075,
      0.03316785,
      0.013739174,
      -0.005878474,
      -0.013920439,
      -0.020375589,
      0.035804365,
      -0.005580152,
      0.01370353,
      -0.009092156,
      0.004189397,
      0.01172168,
      -0.002105925,
      -0.001233189,
      0.0056483718,
      -0.026240325,
      -0.02258038,
      0.0016986569,
      0.029943505,
      -0.015498232,
      0.012491753,
      -0.022546127,
      -0.00032926112,
      -0.014183077,
      0.0065717283,
      0.009627488,
      0.016985554,
      -0.007403613,
      -0.011112929,
      -0.008543479,
      -0.02103125,
      -0.0204004,
      0.03594149,
      -0.0079812845,
      0.001950024,
      -0.00042985936,
      -0.026904617,
      0.009032026,
      -0.004768627,
      -0.01394718,
      -0.005811138,
      -0.0010213522,
      0.008076349,
      0.007356825,
      0.014152691,
      0.0032201705,
      -0.011456721,
      0.00013169611,
      0.0011882959,
      0.0012510796,
      0.00021469414,
      -0.013525988,
      -0.0137105575,
      -0.02375819,
      0.0117082605,
      0.007177895,
      -0.016451512,
      -0.018067813,
      0.027864425,
      -0.012712463,
      -0.020658633,
      -0.0024622572,
      -0.021585323,
      0.0098070735,
      0.012518592,
      -0.00076098845,
      0.016875634,
      0.0047313124,
      0.021520581,
      0.017804243,
      -0.01649378,
      -0.012083416,
      0.0012408464,
      -0.0043370984,
      0.001289214,
      0.0059374995,
      -0.005301646,
      -0.016138125,
      -0.027779667,
      -0.013504606,
      -0.018766303,
      0.00082307705,
      0.028612368,
      0.002775956,
      0.007624143,
      0.018041901,
      -0.0008229046,
      -0.0025486734,
      -0.012896193,
      0.0019065632,
      -0.014742035,
      0.027309397,
      -0.009950952,
      -0.004214141,
      0.0002493332,
      -0.008676321,
      0.011505629,
      0.0075818673,
      -0.015969139,
      -0.028712813,
      0.0057916455,
      0.015106,
      0.025423933,
      0.0025667606,
      -0.024090884,
      0.0087275915,
      0.0074638105,
      0.010600623,
      0.01838348,
      -0.024561582,
      0.0045260885,
      -0.0081285685,
      0.0012076669,
      -0.008079976,
      0.0083939405,
      -0.03035258,
      -0.0005933464,
      -0.014725957,
      -0.003655976,
      -0.0027753566,
      0.0050737434,
      0.024483087,
      -0.0021929704,
      0.002751323,
      -0.0011872769,
      0.000063383246,
      -0.014462261,
      0.0064518964,
      -0.03978338,
      0.022938255,
      -0.023873847,
      0.01804328,
      -0.0050679343,
      -0.0054102484,
      -0.021461936,
      0.016119761,
      0.0078767575,
      0.007083729,
      0.01212315,
      -0.0019592023,
      0.0018726962,
      0.015743073,
      0.034191716,
      0.011256129,
      0.009726729,
      -0.005932582,
      0.00617616,
      0.019909883,
      -0.016370405,
      -0.0019909295,
      -0.0048027835,
      0.0039064544,
      -0.009591019,
      -0.000073359784,
      0.001154847,
      -0.0102808075,
      -0.007850427,
      0.021732189,
      0.01431143,
      -0.0066175666,
      0.029134167,
      -0.04242592,
      -0.0056846654,
      -0.010232171,
      0.00938399,
      0.0039534415,
      0.0190496,
      -0.01953443,
      0.00024908208,
      -0.010598161,
      0.0005297608,
      0.007303305,
      -0.0008479182,
      0.036697783,
      0.03127415,
      -0.0087492755,
      -0.0062857755,
      0.0344887,
      0.0112567535,
      0.0019673656,
      -0.0067805196,
      -0.024770677,
      0.01970154,
      -0.017147359,
      0.010314476,
      -0.0052805436,
      -0.006495461,
      -0.03103477,
      0.0017540501,
      0.009598215,
      0.008193353,
      0.011811191,
      -0.022562293,
      0.013906057,
      -0.01166581,
      0.010048177,
      -0.117956825,
      -0.00026700218,
      -0.018062593,
      0.0039213905,
      -0.029042384,
      -0.017759072,
      -0.002102111,
      -0.027477995,
      0.01411345,
      -0.014333135,
      0.011653322,
      -0.008736353,
      0.0045223106,
      0.0011479104,
      -0.015843652,
      -0.014276969,
      -0.0016252073,
      0.023376437,
      0.033444427,
      0.002135269,
      0.02356467,
      -0.0009803995,
      -0.0116708595,
      0.020880926,
      0.00700274,
      -0.018471958,
      0.012296772,
      0.009296568,
      -0.005279476,
      -0.0017005438,
      -0.014447921,
      -0.011470731,
      0.0080902595,
      0.012642857,
      0.036859047,
      -0.018844604,
      0.011287539,
      -0.002120944,
      0.008233803,
      0.022483127,
      -0.010008013,
      -0.00007526182,
      -0.0042042923,
      0.017666824,
      0.013265446,
      -0.0036927839,
      0.007084128,
      -0.012565545,
      -0.014561858,
      0.044640668,
      -0.03577781,
      -0.010762921,
      0.00091693574,
      -0.026733842,
      0.024319185,
      -0.005963556,
      0.02254994,
      -0.010033033,
      -0.021641025,
      0.0026393945,
      0.0030949956,
      0.005530716,
      0.0025162518,
      0.02080308,
      -0.004489353,
      -0.022651384,
      0.00365627,
      0.004443599,
      0.012921076,
      0.002452619,
      -0.024060281,
      0.013493727,
      -0.0060267267,
      0.023459563,
      0.012078401,
      -0.013604659,
      -0.0020633917,
      0.008468035,
      -0.019498708,
      0.0080979,
      -0.024131732,
      -0.008090122,
      -0.07316204,
      -0.02992186,
      -0.0059770145,
      -0.0111617,
      0.03463859,
      0.011952261,
      -0.018788781,
      0.029105956,
      -0.008509852,
      0.009443008,
      -0.011650617,
      -0.003552083,
      0.0034941912,
      0.00093870825,
      -0.010434105,
      0.008979546,
      0.0046095746,
      -0.014577993,
      -0.02168536,
      -0.0131745655,
      -0.007861697,
      -0.006978693,
      0.025719257,
      -0.007889927,
      0.006406647,
      0.026785761,
      -0.021175401,
      -0.006065902,
      -0.0032733092,
      0.0022598912,
      -0.011165521,
      -0.12551719,
      -0.019568238,
      0.016083792,
      -0.008802482,
      0.010929598,
      0.012957743,
      -0.0009560897,
      -0.025421211,
      0.0025041327,
      -0.004595059,
      -0.003113044,
      -0.017751954,
      -0.013901476,
      0.010805992,
      0.008750999,
      0.15635577,
      -0.009519376,
      0.0056613,
      -0.009922301,
      0.021824123,
      -0.01864794,
      0.0018356665,
      -0.0010476556,
      0.021580046,
      -0.019139465,
      0.018469883,
      0.0012684731,
      -0.017112724,
      0.019773735,
      -0.0045616757,
      0.015532516,
      0.0033051271,
      -0.0087015135,
      0.00758962,
      0.009542039,
      -0.027725892,
      -0.001686467,
      -0.009027288,
      -0.0059701926,
      -0.03926993,
      -0.0015917394,
      -0.0033005078,
      -0.022265479,
      0.0084403865,
      0.0016382,
      -0.010872474,
      -0.006097176,
      -0.0105070025,
      -0.004690733,
      0.0015558796,
      -0.0071393815,
      -0.08472658,
      -0.008245813,
      -0.0115760015,
      -0.014189035,
      0.0034291998,
      0.0072580664,
      0.03308094,
      -0.020687979,
      -0.010217423,
      -0.009557624,
      -0.000084212785,
      0.012969432,
      -0.0003911624,
      0.008595544,
      -0.008042771,
      0.004876936,
      0.026925566,
      0.021657469,
      0.014555638,
      -0.006172793,
      0.037605185,
      -0.0097710965,
      0.001042638,
      -0.021654159,
      -0.0020892145,
      -0.019302255,
      0.000031687494,
      0.00033534685,
      -0.011090032,
      -0.0048019206,
      0.0076523097,
      0.008316123,
      0.00533784,
      0.031550873,
      -0.017920617,
      -0.013745291,
      0.034225572,
      0.017116465,
      -0.004991429,
      -0.018732045,
      -0.003864834,
      0.009498151,
      0.008316708,
      0.015742691,
      0.020403804,
      0.0012203254,
      -0.0023892922,
      0.021709306,
      0.0062310174,
      0.023351703,
      -0.02948231,
      0.00920307,
      -0.0009313706,
      0.00077147776,
      -0.0061605885,
      0.0262078,
      0.025812086,
      0.0064432523,
      -0.016691083
    ]
  },
  {
    "id": "genai_cohort_nodejs_04_NodeJS_SystemDesign_HorizontalScaling_vtt",
    "content": "All right, so now let me talk about another scaling strategy that is known as horizontal scaling. Okay, so in the last video we have already seen the vertical scaling. So now this system, you know, what are the pros and what are the cons? Let's redesign the system. This time. What I'm going to do is we are going to have a lot of users. Of course, right? We have a lot of users. Instead of having one server, let me just have first one server. Let's say this is my one server. And this server has a bare minimum configuration that is CPU and you have a 4GB of RAM, right? So CPU, 4GB of RAM. This machine is capable of handling maybe to people. Now what happens as my load is increasing, what I'm going to do is I am going to add one more server. I am not upgrading the server, I am not touching the server. I added one more replica, one more copy of the server. As my load increases, I am going to add one more server. But here is a problem. Okay? You can see that I have added more servers. But the problem here is how users will know to which server to go. Because technically, let's say this server, has an IP of this thing. Okay? This is the original ip. Now you are spinning up one more new machine, the IP address will be different. You are spinning up one more machine, the IP address will be different if on your DNS because you can only have one IP per domain. If piyushgurk. dev okay. dev is actually pointing to All the users are anyway redirected to this machine only, right? No one is going to this and no one is going to this. So the problem is that either you have to create multiple domains, you have to create something like fuse kirk. hyhendev then you have to create, then you have to buy one more domain that is like two and then you have to buy one more domain that is something like this. And then you have to basically point them to respective servers. And you have to ask the users that please choose any randomly. If that server is not working, you can choose any other of them. Either one of them is for sure working. That's not the right thing, right? Because eventually everyone will first try to go to first server. If it is not working, go to here. So there is going to be a chaos. The problem here is that you are not able to balance the load between them and that's where your load balancer comes in. So whenever you do this kind of Scaling, where you add more servers, you add more replicas of the same server. You need something known as a load balancer. Okay, this load balancer, is again a machine which has its own IP address. Okay, so let's say, the IP address of this particular machine is, you know, maybe nine. Let's take nine. So what you are going to do is on your DNS, you are going to redirect the users on your load balancer. So there is no direct request. You can just drop all these, you know, direct requests. So direct requests are not allowed anymore. What users need to basically do is users will interact with what users are going to make all the requests to the load balancer, and your load balancer internally will balance the load between the servers. So first request to first server, second request to second server, third request to third server, fourth request to the first server. 5, 6, 7, And this is known as round robin load balancing. Okay, so in round, round robin load balancing, what happens? First user goes to first server, second user goes to second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth, eleventh, twelve. Round robin load balancing. So this solves the problem that now what happens is number one, you are scaling number one, you are scaling number two. There is no single point of failure. If this machine has some technical issue, let's say this machine is down. Now you still have two machines. If this machine is also down for some reasons, right, you still have one machine running. So what you can do is you can actually keep on spinning more machines as your traffic grows. So you know here that, you know, one machine, okay, one machine is capable of handling around approximately users, let's say to users. So when you have more than loads, keep another machine ready. When you have users, keep third machine ready. So this is how you scale. And this strategy is known as horizontal scaling. Scaling. So what is horizontal scaling? Horizontal scaling by definition means adding more replica of the server is known as horizontal scaling. Okay, so in horizontal scaling you add more replicas and to, to actually balance the load between multiple servers, because now you have multiple replicas, you need a load balancer. Okay, so vertical scaling, adding more power and resources to a single server, horizontal scaling, adding more servers. And you know, most cloud providers like aws, they give you something known as auto scaling policy. Okay, Auto scaling groups and auto scaling policy. So this is known as auto scaling, asg, auto scaling group. So what happens is you can define a policy saying, okay, that if my average CPU goes, okay, goes above, let's say you know, 70% keep another machine ready. So this is known as scaling out. Okay, scaling out policy, which means that if the how many machines are running, I don't care when the average CPU utilization is more than 70%, please keep the another machine ready. And similarly, if it goes okay, if it goes below 70%, okay, 70% for let's say more than one hour, just kill all the machines and keep one machine. Okay, kill all extra machines. So what happens when you have a spike traffic? You add more servers when this, when the traffic is gone on your typical day, you delete all the machines and just keep one or two machines ready. So this is how you do auto scaling. So this is a nice balance between resources. When you need them, you add them. When you don't need them, you just destroy them. So this is known as horizontal scaling. So now you know two scaling methods of a server, that is vertical scaling and horizontal scaling.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "04-NodeJS-SystemDesign-HorizontalScaling.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/04-NodeJS-SystemDesign-HorizontalScaling.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.010911868,
      0.013684393,
      0.015237216,
      -0.05417054,
      -0.024837133,
      -0.0018666609,
      0.024399027,
      0.008466867,
      0.002299462,
      0.021166041,
      0.0039112535,
      -0.002003431,
      0.030638317,
      0.015044091,
      0.11956374,
      -0.0011726534,
      0.0010705583,
      -0.0025807514,
      -0.00062047935,
      -0.010957538,
      0.021952713,
      -0.011316501,
      -0.012801863,
      0.013343692,
      0.0038163846,
      -0.0027868329,
      0.009384333,
      -0.011782533,
      0.02274306,
      -0.012819988,
      -0.025331862,
      -0.00026816613,
      0.00041688557,
      0.030203238,
      0.0031714735,
      0.009582443,
      0.027000045,
      0.011311797,
      -0.014682012,
      0.02969439,
      -0.012963005,
      0.000281583,
      0.011636505,
      -0.007180909,
      -0.0002324607,
      -0.015217302,
      -0.00048620973,
      -0.021417625,
      -0.013485821,
      0.0070061563,
      -0.022507837,
      -0.028229687,
      0.0056659314,
      -0.17818506,
      0.0040300665,
      -0.0014789685,
      -0.010040036,
      -0.00033091754,
      -0.009897499,
      0.009142174,
      -0.02133183,
      0.0123406155,
      -0.00901232,
      0.0009164197,
      -0.019698767,
      -0.002867159,
      0.04508331,
      0.02290611,
      0.002603013,
      -0.008527512,
      0.02367923,
      -0.013224713,
      0.0009361221,
      -0.0034685652,
      -0.016279249,
      -0.038290836,
      0.000045513476,
      -0.008489345,
      -0.018937765,
      0.02255133,
      -0.017801717,
      -0.0137661295,
      -0.013511545,
      -0.010890708,
      0.0010835069,
      -0.011910559,
      -0.017005323,
      -0.015987694,
      0.017317846,
      0.015943034,
      -0.002394154,
      -0.00032976278,
      0.0017243319,
      0.0027301626,
      0.0023822796,
      -0.005238894,
      -0.004102616,
      0.0007317226,
      -0.017470943,
      -0.00804692,
      -0.010576623,
      0.002209563,
      -0.03432907,
      0.03925596,
      -0.031176465,
      -0.0049548363,
      0.02099135,
      -0.008102933,
      0.0016986568,
      -0.008394498,
      0.0014273247,
      0.011788912,
      0.019244255,
      0.01649061,
      -0.0053164787,
      -0.17822012,
      0.010762893,
      0.007097724,
      -0.010907806,
      -0.0034634522,
      -0.014161201,
      -0.0035747732,
      0.017408945,
      0.0040565236,
      -0.017781083,
      -0.005744484,
      0.0026728727,
      0.0063491743,
      0.0030375503,
      -0.009884431,
      -0.01280871,
      -0.011269038,
      -0.0016000168,
      0.025346437,
      0.028808817,
      -0.0077681416,
      -0.008536548,
      -0.029921722,
      -0.020762416,
      -0.018907113,
      0.011375545,
      0.019628238,
      -0.0025757402,
      0.040742025,
      0.0053840135,
      0.009931786,
      -0.03344847,
      0.009829791,
      -0.0080062775,
      -0.032465726,
      0.007959636,
      -0.0126912985,
      0.019381503,
      -0.0021191372,
      0.01110056,
      -0.016220277,
      -0.016967613,
      0.014834962,
      0.014481925,
      -0.008131294,
      0.0090878345,
      0.0014505736,
      0.009217801,
      0.02190152,
      0.010405334,
      -0.0008439564,
      -0.0021809987,
      0.0006491219,
      0.004252172,
      0.009859951,
      -0.03643794,
      -0.026616104,
      -0.012287213,
      -0.003577876,
      0.017152986,
      -0.011100843,
      -0.017134286,
      0.011624429,
      0.004692101,
      -0.02070147,
      0.002683385,
      -0.006626083,
      0.008299962,
      -0.023068435,
      -0.016440576,
      -0.038622607,
      -0.022324089,
      0.000028172512,
      0.025423463,
      -0.0047452883,
      0.013494371,
      -0.014753063,
      0.0066023148,
      -0.018784227,
      -0.00093947194,
      -0.03287537,
      0.0077053485,
      -0.020023862,
      -0.011655484,
      0.032702956,
      -0.0013593814,
      -0.00916209,
      0.015552844,
      -0.027144633,
      -0.015300103,
      0.000725301,
      0.017764341,
      -0.020022754,
      0.0035546166,
      0.016387273,
      0.00035487034,
      -0.009507645,
      0.0052199615,
      -0.009255636,
      0.019650765,
      0.01811705,
      0.021833785,
      0.015747726,
      -0.0017684534,
      -0.002857373,
      -0.02361926,
      -0.0068111396,
      -0.00009233883,
      0.016578441,
      0.03621184,
      0.000203529,
      -0.015712177,
      0.0057285116,
      0.004377509,
      0.004962221,
      0.027675902,
      0.018119138,
      -0.012974891,
      0.01429735,
      -0.00042388987,
      -0.004759979,
      -0.012267688,
      0.017531084,
      -0.0006430026,
      0.013848698,
      -0.022296071,
      0.00012376842,
      0.00040157908,
      0.010389133,
      0.02827823,
      0.011193106,
      -0.0016559481,
      0.0017700101,
      0.0042275307,
      -0.004056654,
      -0.009495012,
      0.014874082,
      -0.014469521,
      -0.015769023,
      0.017459271,
      -0.020816864,
      -0.04942201,
      -0.027728539,
      -0.0030512784,
      -0.008072914,
      -0.002665387,
      -0.028485479,
      -0.015995052,
      -0.0027927551,
      -0.0029679623,
      -0.011834263,
      0.01565005,
      0.023423087,
      -0.017674465,
      0.005905982,
      0.02396736,
      0.00020190612,
      -0.025518844,
      -0.013626536,
      -0.0053705843,
      -0.0031911351,
      -0.07355966,
      0.013274504,
      -0.0019879488,
      -0.013284187,
      0.004337333,
      -0.0017481635,
      -0.009916275,
      -0.008571189,
      0.007286689,
      0.026581943,
      0.009612496,
      0.004142084,
      -0.0052822316,
      -0.007431024,
      0.0027881628,
      0.014647005,
      -0.010854322,
      -0.012111402,
      0.0118304305,
      -0.02275678,
      -0.027734742,
      0.005005768,
      -0.011455489,
      -0.01237112,
      0.0014349772,
      -0.0065229572,
      -0.023961637,
      0.015594067,
      0.012261184,
      0.011051891,
      -0.0051523694,
      0.020869184,
      -0.028707277,
      -0.008324161,
      -0.016364567,
      0.007751008,
      0.0097211655,
      -0.01972646,
      0.005734891,
      -0.016868336,
      -0.004369374,
      0.0011479628,
      0.016596213,
      0.012082535,
      -0.01280316,
      0.031141339,
      -0.0019395006,
      0.017975345,
      -0.026210783,
      -9.708489e-7,
      -0.007454684,
      0.004301576,
      0.0040795966,
      -0.012984634,
      0.004188886,
      0.0037917332,
      -0.02385084,
      -0.00902699,
      -0.015689012,
      0.015691547,
      0.004678222,
      -0.0013467746,
      -0.021091463,
      0.0060371226,
      0.021968858,
      -0.0054728594,
      -0.008279478,
      -0.005244572,
      -0.005421409,
      -0.009853031,
      -0.016151335,
      -0.0154282525,
      0.014582747,
      -0.04270289,
      0.03978917,
      0.012462072,
      -0.0033638445,
      -0.006705272,
      -0.034658644,
      0.02115005,
      -0.004672304,
      0.021606622,
      -0.0010363006,
      -0.005751052,
      0.005355695,
      -0.002868197,
      0.0006244393,
      -0.013244526,
      -0.008330459,
      -0.020718949,
      0.0026727081,
      0.027302217,
      -0.0052794693,
      -0.0041930173,
      -0.021945817,
      -0.00066575076,
      -0.017182954,
      0.015563908,
      0.023089452,
      0.017448248,
      -0.03177924,
      -0.00553007,
      -0.0082232095,
      -0.024818238,
      -0.013218629,
      0.03311193,
      0.0054734605,
      -0.003932721,
      0.0054986626,
      -0.03311582,
      0.020845665,
      0.020548001,
      -0.006037854,
      0.0022264435,
      0.005528452,
      0.014826263,
      0.009651995,
      0.013622681,
      -0.017437484,
      -0.014333866,
      -0.0003650661,
      0.006117788,
      0.009097671,
      -0.0011433852,
      0.0022163803,
      -0.0063514533,
      -0.0067480574,
      0.013898577,
      0.011159164,
      -0.021718562,
      -0.03163176,
      0.009969408,
      -0.0015450689,
      -0.009588221,
      -0.0020511437,
      -0.013365298,
      -0.003804448,
      0.0026589453,
      0.0038049647,
      0.014783928,
      0.0035431033,
      0.015081401,
      0.0030419673,
      -0.014608219,
      -0.01440584,
      0.0006055506,
      -0.01315803,
      -0.00416958,
      -0.0025294716,
      -0.0074270675,
      -0.015457687,
      -0.017726595,
      -0.019504085,
      0.010905953,
      0.014422513,
      0.032150242,
      0.0022773778,
      -0.011002961,
      0.022122715,
      -0.011654156,
      0.0030404148,
      -0.0125005115,
      0.0083950125,
      -0.014284821,
      0.030399982,
      -0.016733326,
      -0.009105287,
      -0.006520318,
      0.00934945,
      0.0064033414,
      -0.004951187,
      -0.012933893,
      -0.034542978,
      0.009005052,
      0.0035387403,
      0.022078155,
      -0.0008178895,
      -0.011732003,
      0.0025060845,
      0.016255476,
      0.0148670925,
      0.0012481926,
      -0.026113566,
      -0.0022251275,
      -0.0018328907,
      -0.012231266,
      0.005244272,
      -0.009537954,
      -0.023070598,
      -0.010791697,
      -0.019571772,
      -0.021856656,
      -0.011372482,
      0.011662763,
      0.014326744,
      -0.0026074182,
      0.011763497,
      -0.013718604,
      0.001464045,
      -0.006260663,
      0.009398553,
      -0.025425818,
      0.026271442,
      -0.01808251,
      0.014250737,
      0.0016754412,
      0.00077363325,
      -0.006484431,
      0.010105572,
      0.013757227,
      0.0018455812,
      0.016618833,
      0.017157618,
      -0.0044343206,
      0.017327694,
      0.022334112,
      0.0005371731,
      0.021442765,
      0.00035475023,
      0.014683067,
      0.03923675,
      -0.008790841,
      -0.015741857,
      0.0068065035,
      -0.010317307,
      -0.014563825,
      -0.008989001,
      -0.0038503194,
      -0.013066067,
      -0.010418668,
      0.026042417,
      0.010871674,
      -0.0062416657,
      0.025470609,
      -0.023378635,
      -0.008527488,
      0.016647179,
      0.02096962,
      -0.0075605134,
      0.000020008536,
      -0.013127972,
      0.018483166,
      -0.012650796,
      -0.0010628746,
      -0.00237346,
      -0.015410322,
      0.03913423,
      0.017764622,
      0.006830139,
      -0.020242335,
      0.024125522,
      0.02331216,
      0.0073586055,
      -0.010513623,
      -0.0032671415,
      0.031211296,
      -0.01232212,
      -0.009694876,
      0.0018149049,
      0.003936136,
      -0.028379794,
      0.004942887,
      0.0015257959,
      0.018126974,
      0.014497646,
      -0.016785087,
      0.013145588,
      0.0014507985,
      0.022175483,
      -0.12453783,
      -0.0065315533,
      -0.023576379,
      0.014938366,
      -0.020312792,
      -0.009676153,
      -0.016595371,
      -0.02006803,
      -0.0056832726,
      -0.0040297345,
      0.01537736,
      0.00023068397,
      -0.011622681,
      0.0037230528,
      -0.022619152,
      -0.0115797315,
      -0.0012211545,
      0.027604366,
      0.033158276,
      0.0038168728,
      0.027446156,
      -0.0024886238,
      0.0012169817,
      0.0142022595,
      0.013422009,
      -0.021113653,
      0.012233773,
      0.00139484,
      0.010901941,
      -0.011626536,
      0.00085348514,
      -0.007958408,
      0.020030694,
      0.026840903,
      0.02757792,
      -0.013941152,
      0.00793776,
      0.008917487,
      0.013306604,
      0.011051087,
      0.009838181,
      0.008073018,
      -0.0013025817,
      0.010816187,
      0.003763739,
      -0.011869372,
      0.011011086,
      -0.006909036,
      -0.012382555,
      0.032829013,
      -0.047770586,
      0.0048134876,
      -0.015564492,
      -0.02419476,
      0.022738595,
      -0.016801773,
      0.019170158,
      -0.0049186856,
      -0.021507142,
      0.00088018924,
      -0.00012733259,
      0.017985275,
      -0.009437783,
      0.013774246,
      -0.005718209,
      -0.007856389,
      0.005662967,
      -0.0002247116,
      0.00882465,
      0.012381861,
      -0.022737605,
      0.007584024,
      -0.0063673183,
      0.02855263,
      0.008672178,
      -0.0110849235,
      -0.005392763,
      0.002048546,
      -0.021824284,
      0.017348193,
      -0.020587934,
      -0.006716451,
      -0.080748454,
      -0.019728186,
      -0.007015199,
      0.011424327,
      0.037749954,
      0.003926342,
      -0.020074472,
      0.028263967,
      -0.007394187,
      -0.004097986,
      -0.027090715,
      -0.011591674,
      -0.008449958,
      -0.012763921,
      -0.023506498,
      0.014958612,
      0.008147907,
      -0.018177481,
      -0.011591383,
      -0.012910565,
      -0.011362907,
      -0.030251952,
      0.013845713,
      -0.0010833682,
      0.0036534367,
      0.0230667,
      -0.020176101,
      0.004869459,
      0.0036125362,
      -0.0043107844,
      -0.0070694187,
      -0.12855373,
      -0.019234585,
      0.008297986,
      -0.0026562717,
      0.0046713864,
      0.005612961,
      -0.019364117,
      -0.010078077,
      0.0047791954,
      0.00659313,
      -0.00020698909,
      -0.016927,
      -0.0066163084,
      0.011859925,
      -0.0076937927,
      0.14573188,
      -0.005686266,
      0.010223038,
      -0.0024809346,
      0.008367067,
      -0.0036245366,
      -0.0021399572,
      0.0074175745,
      0.021988614,
      -0.017512625,
      -0.008699944,
      0.0057617957,
      -0.02146164,
      0.016314654,
      0.0009074456,
      0.028999163,
      -0.015082017,
      -0.003325716,
      0.002407714,
      0.018324772,
      -0.032416083,
      0.011225381,
      -0.0025357297,
      -0.010832917,
      -0.028679322,
      -0.009074294,
      -0.018360468,
      -0.025438145,
      0.011596841,
      0.01536402,
      -0.006715758,
      -0.008569548,
      -0.0023206265,
      0.017589685,
      -0.005882781,
      0.0056483243,
      -0.07959346,
      -0.016951745,
      -0.0042077536,
      0.0068091834,
      0.012961217,
      0.008262512,
      0.030827489,
      -0.021433761,
      0.002840835,
      -0.018957082,
      -0.0028695352,
      0.018158033,
      -0.011546031,
      0.015636899,
      -0.016809879,
      0.008627435,
      0.018202396,
      0.024258394,
      -0.007470188,
      -0.013467939,
      0.024947831,
      -0.017575154,
      -0.014973698,
      -0.030130176,
      0.00042981052,
      -0.011821637,
      0.025769273,
      0.0062944256,
      -0.014109524,
      0.006482098,
      -0.00021175858,
      0.005753195,
      0.011075926,
      0.051482137,
      -0.024668222,
      -0.023888111,
      0.026050767,
      0.00859632,
      -0.0038246755,
      -0.0071786973,
      -0.0035722037,
      -0.0046480615,
      0.018685473,
      0.0025752997,
      0.0021848218,
      0.0012804958,
      -0.0032675453,
      0.020614512,
      0.01805413,
      0.010539719,
      -0.03889491,
      0.024515377,
      -0.012681042,
      0.0039372267,
      0.009673981,
      0.020690529,
      0.025853626,
      0.008767895,
      -0.015750548
    ]
  },
  {
    "id": "genai_cohort_nodejs_05_NodeJS_SystemDesign_DBScaling1_vtt",
    "content": "All right, so you have done a good job in scaling your servers both vertically and horizontally. But guys, what about this little piece? What about the database? Because when load increases, it is not only about the server. It's a good thing that you have already scaled your server. But your database also becomes a bottleneck. So let's understand how can we scale the data layer, also known as the database. So one way is very simple that what I can do is when my email know, the scale is increasing, when my users are increasing, I can also give more compute power to my database. If my database was originally 2, CPU, let's say CPU, CPUs, I can make it 8, I can make it 12, I can make it 20, I can make it like 36, right? I can make it So what I can do is I can still have a single database instance running and then based on the load, based on how many active users I have, I can make this particular database more powerful. So this is one way of scaling, but still the same problem number one single point of failure that what happens if this database goes down? Secondly, what happens if this database goes down? My all data is lost. So yes, you can make the databases more powerful by adding more CPUs and more power to it. But that's not the right way to scale a database. Now you might be thinking that how can we actually scale a database, right? Vertical scaling is good, it works, it works out of the box. But now you will be thinking, hey Piyush, what about horizontal scaling? Let's add more databases. So technically that is not possible. You cannot add more databases because database is not a server, it's not a stateless thing. It is something which holds a data. So you cannot really scale a database like this because let's say you have some data here, you have some data here, you have some data here. So if you are actually making it horizontal, how will you keep the data in sync? Are you also copying the data? If you are copying the data, then what's the point of scaling? Or are you actually dividing the data? If you are dividing the data, then how you will know that which data is in which server instance? So let's understand, how can we, you know, scale the database in this particular architecture? Okay, the first way is actually something known as having more replicas, kind of like horizontal scaling, but not exactly. So we can say multi replica of db. But in this particular scenario, when we talk about multi replica of db, we follow an architecture or an algorithm Known as master slave architecture. In this particular thing, what happens is you have one master, this is your one master, and you have multiple slaves, so the size will be decreased. Okay, so let's say you have one master and you have four slaves. And these are exact replica of the database. What happens that the main, okay, the application always inserts or always do the operation on the master database. Let's say you want to insert something into the database, so you always and always do it in the master. Okay, the master instance. So let's say this is the master instance. Always do an insert operation in the master. So master has its own storage. Let's say this is a storage of the master. So it is going to create a record in its database periodically. These slaves are basically syncing themselves from the master and they actually maintain a copy of the data. Okay, so this is not, not real time, right? This is not real time because let's say some, some data is inserted here. So it will take some time to propagate to get copied of that data. So what these slaves are going to do is eventually, maybe after a minute or so, they are also going to update their local copies with the exact data. Now what happens is when your application wants to retrieve some data, rather than disturbing, rather than making all the requests to the master instance, they can actually choose one of the replica. They can actually ask one of the replica to give the data. Now here is the thing. If you want the accuracy, if you want the accuracy and consistency that hey, I want real time data, I don't want any latency. In that case, both read and write. Okay? Both read and write. Goes to master. Okay, goes to the master. What am I typing for? Inserts. Inserts are always done on master. If you are okay, if you are okay with little delay of data, read them from these slaves. Okay, let me give you an example. If you are watching a video on YouTube, you have seen the count, you have seen the like count. So those counts and like count are actually not real time. Okay, Might be a video has 10, views and you are seeing 9, views. Okay? Because what happens is thousand views are still yet to be propagated in the slaves. So where the data accuracy can be little bit, little bit up and down, that is where you can actually use, actually read the data from the slave and avoid some load on the master database. For example, likes on an Instagram post, right? Views on a reel. So all these kind of data or analytics about something, they can be read from the slave rather than putting a load on the master instance. So this is one way of scaling the database. So this is, known as the replication of the databases. So these are known as read replicas, okay? These are known as read replicas. And this one is known as primary instance, okay?",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "05-NodeJS-SystemDesign-DBScaling1.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/05-NodeJS-SystemDesign-DBScaling1.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0034643828,
      -0.0062295073,
      0.017435871,
      -0.06317098,
      -0.030127537,
      0.008293994,
      0.01757728,
      0.015506814,
      -0.003720615,
      0.030264564,
      -0.0072657387,
      0.01441311,
      0.027665483,
      0.026308184,
      0.11740042,
      0.0017800529,
      -0.016053228,
      -0.011362628,
      -0.0068605132,
      -0.013948316,
      0.0014100038,
      -0.023715012,
      -0.02238925,
      0.001036426,
      0.007113912,
      0.008859782,
      0.018204851,
      -0.010078865,
      0.026230821,
      -0.019967407,
      -0.0105874855,
      -0.010838404,
      0.0044713845,
      0.03350479,
      0.011055637,
      0.0014022378,
      0.004424174,
      0.011367731,
      -0.020404099,
      0.021609416,
      -0.002010895,
      0.0133571895,
      0.0029854318,
      -0.0057515157,
      0.009901088,
      -0.010567392,
      -0.0035346523,
      -0.028857281,
      -0.012989457,
      0.0015605837,
      -0.0017462167,
      -0.02320403,
      -0.010418612,
      -0.17652312,
      0.013894041,
      0.001777637,
      0.003479133,
      -0.009745263,
      -0.004729256,
      0.004063752,
      -0.023149623,
      0.020589057,
      -0.008337632,
      0.012989667,
      -0.010726063,
      -0.010163868,
      0.033373114,
      0.025540655,
      0.013826865,
      -0.012395405,
      -0.0016804104,
      -0.002375425,
      0.0070480774,
      -0.00019352343,
      -0.015229652,
      -0.041639946,
      -0.001001251,
      -0.0012696222,
      -0.029190931,
      0.018875513,
      -0.007037519,
      -0.0233674,
      -0.014361944,
      0.0010986833,
      -0.017719695,
      -0.014804669,
      0.0016522912,
      -0.019553004,
      -0.0025902258,
      -0.0016634177,
      -0.016178321,
      -0.007559342,
      -0.0022741116,
      -0.0071547413,
      -0.010128513,
      -0.006034838,
      -0.0037406932,
      -0.0068208333,
      -0.010338311,
      0.000013433143,
      0.013179432,
      0.02895409,
      -0.04217734,
      0.02661062,
      -0.008788838,
      -0.009035034,
      0.0016005049,
      -0.011930696,
      0.0044289627,
      0.0092986375,
      -0.005469437,
      0.0017723639,
      0.0023646376,
      -0.0014727596,
      0.0020572052,
      -0.17370312,
      0.016755804,
      0.0023223397,
      -0.0077425316,
      0.00031842748,
      -0.018402258,
      0.020270284,
      0.027428733,
      -0.0068060057,
      -0.0006715223,
      -0.00031188005,
      0.0033884014,
      0.0055804094,
      -0.012266756,
      -0.016977021,
      -0.021022193,
      0.0015632965,
      -0.007965616,
      0.023030993,
      0.008754463,
      -0.0033604538,
      -0.016336171,
      -0.032866135,
      -0.029051922,
      -0.024489034,
      0.012024249,
      0.037836116,
      -0.0044238633,
      0.032437764,
      0.005351897,
      0.007021693,
      -0.028454684,
      0.0035559987,
      -0.011946388,
      -0.019802175,
      0.030086406,
      -0.0033778679,
      0.0262076,
      0.026977673,
      0.03393896,
      -0.019534754,
      -0.0130987,
      0.010514594,
      0.009754999,
      0.008705377,
      -0.012227277,
      -0.0009248458,
      0.014350738,
      0.012144428,
      0.011617705,
      -0.014441529,
      0.0025684924,
      0.0019967873,
      0.0043434408,
      -0.0007543053,
      -0.032973755,
      -0.0059609944,
      -0.023205545,
      0.009361974,
      -0.0029091078,
      -0.013221645,
      -0.0127378795,
      0.023685694,
      0.016434457,
      -0.013560002,
      0.008892002,
      -0.017816832,
      0.018740155,
      -0.0071479985,
      -0.019634105,
      -0.018924642,
      -0.014375469,
      -0.006438826,
      0.022228166,
      -0.0023242212,
      0.03033124,
      -0.019520981,
      0.012761761,
      -0.01394631,
      -0.009983017,
      -0.032624174,
      0.015419397,
      0.0005867853,
      -0.0045429417,
      0.027395187,
      -0.007626458,
      -0.0025569673,
      0.0039448165,
      -0.01834758,
      -0.01304564,
      -0.016233144,
      0.02361454,
      -0.030256603,
      0.009566454,
      0.024915071,
      -0.0061129564,
      -0.001477697,
      -0.00031917577,
      -0.011941037,
      0.01335476,
      0.0036065294,
      0.030492282,
      0.016396254,
      -0.013813093,
      -0.017327966,
      -0.030865084,
      -0.0058773253,
      -0.0042969934,
      0.02200765,
      0.033702236,
      -0.0061433646,
      0.0019345059,
      -0.0008192359,
      0.020263327,
      -0.0041974476,
      0.031070612,
      0.028148713,
      -0.024154302,
      0.008364576,
      -0.00076972536,
      -0.004527715,
      -0.017168516,
      0.0003424925,
      -0.0054453546,
      0.024351085,
      -0.013198881,
      -0.0011535871,
      0.00059657946,
      0.015887385,
      0.02787805,
      -0.00036975657,
      -0.016105382,
      -0.0070811994,
      0.007874794,
      -0.0061148773,
      0.016121032,
      0.012008799,
      -0.008864601,
      0.010978999,
      0.020798765,
      -0.03696031,
      -0.05216877,
      -0.012396055,
      -0.012816225,
      0.0023614194,
      -0.00546207,
      -0.033614725,
      -0.008353144,
      -0.013396169,
      -0.015504581,
      -0.0064718663,
      -0.00539691,
      0.021186402,
      0.00017133824,
      0.012070469,
      0.034202985,
      -0.0027476994,
      -0.00061445415,
      -0.010665571,
      -0.00041024506,
      0.009855597,
      -0.07687871,
      -0.0019336756,
      -0.006121259,
      -0.014284636,
      -0.0019999924,
      0.0044040973,
      0.006259342,
      0.007302515,
      0.0045039556,
      0.023324221,
      0.013337059,
      -0.0038979829,
      0.0044604847,
      -0.021829681,
      0.010425634,
      0.0054174103,
      -0.0016025912,
      -0.0033451922,
      0.020871121,
      -0.02557783,
      -0.030493664,
      -0.004989782,
      0.0028198191,
      0.0041727745,
      -0.009761817,
      -0.009200269,
      -0.014650831,
      0.027704773,
      0.012617188,
      0.009914117,
      -0.005112257,
      0.015444374,
      -0.021403965,
      -0.010816183,
      -0.022901706,
      0.013767027,
      -0.003196305,
      -0.029290147,
      0.0011742457,
      -0.007749561,
      -0.023103498,
      -0.0049827285,
      0.010341106,
      0.008285897,
      -0.009622378,
      0.026121385,
      0.010751579,
      0.01289499,
      -0.021009207,
      -0.0051050503,
      -0.0051047667,
      -0.007882802,
      0.009556344,
      -0.008872435,
      -0.0044682096,
      -0.0060871826,
      -0.015681421,
      -0.009745932,
      -0.002109534,
      0.006491056,
      -0.007638399,
      0.0051257634,
      -0.016014962,
      -0.00062354427,
      0.016383039,
      -0.008558177,
      0.0016164553,
      -0.008879086,
      0.0031100556,
      -0.0056867674,
      0.01395803,
      -0.0059087444,
      -0.010040134,
      -0.025392372,
      0.04776762,
      0.027424354,
      -0.0059736865,
      -0.0019313447,
      -0.027786603,
      0.03331708,
      -0.0038169692,
      0.025491579,
      0.016646758,
      -0.008587239,
      0.019350342,
      -0.009311961,
      0.005959964,
      -0.024856357,
      -0.0025603378,
      -0.026636181,
      -0.004304123,
      0.023299456,
      -0.008032293,
      0.010985985,
      -0.023360789,
      0.00887898,
      -0.020588793,
      0.0064197443,
      0.0056367433,
      0.022230556,
      -0.004418742,
      -0.0053156894,
      -0.01393833,
      -0.020951636,
      0.0008017501,
      0.032170136,
      -0.015575649,
      -0.0011527324,
      0.0011947313,
      -0.0038421361,
      0.02243967,
      0.002067024,
      -0.01625565,
      0.0022600547,
      -0.00684077,
      0.015021167,
      0.011308869,
      0.0035057731,
      -0.0028576325,
      -0.020237658,
      0.0028835712,
      0.0046788678,
      0.004315704,
      -0.0013457368,
      -0.024079645,
      -0.027225023,
      -0.033904154,
      0.01000197,
      0.016808815,
      -0.01920511,
      -0.01922757,
      0.01122423,
      -0.0007640591,
      -0.008888578,
      -0.00023429135,
      -0.019528689,
      -0.007524755,
      0.009373783,
      0.0063108364,
      0.017982038,
      0.011733443,
      0.004886771,
      0.0041326713,
      -0.0085855005,
      -0.011979704,
      0.02941218,
      0.00024589308,
      -0.018276688,
      0.00575723,
      -0.007314011,
      -0.038728405,
      -0.029329035,
      -0.009158565,
      0.004304723,
      -0.0067932443,
      0.028422195,
      -0.02606386,
      -0.004070019,
      0.009311087,
      0.00023713266,
      0.0006959489,
      -0.008670372,
      -0.0002960612,
      -0.012297907,
      0.03225178,
      -0.0023321863,
      -0.015354388,
      0.0066337185,
      0.0048565827,
      0.0016081799,
      0.00081469055,
      -0.011344286,
      -0.04762218,
      -0.009352042,
      0.008292828,
      0.016189922,
      -0.0008094114,
      -0.015572164,
      -0.0019100554,
      0.0155586675,
      0.013802102,
      0.0042025666,
      -0.03556626,
      0.0029882395,
      -0.00659557,
      -0.0012862174,
      -0.0113420775,
      -0.0052972375,
      -0.016574932,
      -0.012474527,
      -0.011205757,
      -0.005179361,
      -0.026896587,
      0.015117863,
      0.015272086,
      0.01087335,
      0.005992125,
      -0.0066760387,
      0.00037167707,
      -0.0024324174,
      -0.0016607716,
      -0.016953763,
      0.023828221,
      -0.025290271,
      0.0044910773,
      0.010477742,
      -0.0182376,
      -0.011852003,
      -0.00039361374,
      0.021914607,
      0.026339961,
      0.018686507,
      0.008173571,
      -0.006986518,
      0.009005614,
      0.02252796,
      0.017443825,
      -0.014826627,
      -0.014545147,
      0.008589362,
      0.04638548,
      -0.00935653,
      -0.0045407144,
      0.008334053,
      -0.005577203,
      -0.0013321851,
      -0.009363206,
      -0.007818007,
      0.010758096,
      -0.0014059978,
      0.013584935,
      0.010502059,
      0.002560323,
      0.025079116,
      -0.019409789,
      0.0026320578,
      0.0037125854,
      0.0018728529,
      -0.014827399,
      -0.010297097,
      0.014785422,
      -0.0028286225,
      -0.008514845,
      -0.005680969,
      -0.007509088,
      -0.016283141,
      0.033105016,
      0.030113902,
      0.0026017535,
      -0.012817781,
      0.02461974,
      0.02559015,
      -0.01071025,
      -0.009597766,
      -0.014928022,
      0.03813782,
      -0.016523957,
      0.010148934,
      0.003812879,
      -0.0019601518,
      -0.02183653,
      -0.0069954353,
      0.008080064,
      0.0035243412,
      0.0063648513,
      -0.03147066,
      0.028079987,
      0.015608563,
      0.033536177,
      -0.1079512,
      -0.007072834,
      0.0025710082,
      0.002515609,
      -0.003929752,
      -0.016574962,
      -0.025338974,
      -0.023907363,
      -0.0040121097,
      0.00034238992,
      0.008964033,
      0.0063484856,
      0.0006922156,
      0.0057204473,
      0.0034819143,
      -0.0067375037,
      0.010967173,
      0.03701422,
      0.025744934,
      0.0013590739,
      0.002280351,
      -0.0018450011,
      -0.011381104,
      0.012061055,
      0.00597077,
      -0.00800876,
      0.020820526,
      -0.0075940583,
      0.0035054563,
      -0.00046010964,
      -0.021357369,
      -0.026614392,
      0.0054676956,
      0.019674174,
      0.0209617,
      -0.012038178,
      0.004824329,
      0.0010274424,
      0.011774313,
      0.007935157,
      -0.00309226,
      -0.0041017993,
      -0.0072145234,
      0.0119248815,
      0.021283593,
      0.0047447872,
      0.038410444,
      -0.0089461785,
      -0.002543005,
      0.04643962,
      -0.04248487,
      -0.0019432021,
      -0.0025350323,
      -0.020113565,
      -0.011806979,
      -0.01559443,
      0.011724102,
      0.011623636,
      -0.037937183,
      0.00078191294,
      0.013208024,
      0.01084881,
      -0.008432002,
      0.022681864,
      -0.01802037,
      -0.018087836,
      0.0008358714,
      -0.005817067,
      0.0050347047,
      0.014480068,
      -0.0016682632,
      0.011217299,
      -0.0062359367,
      0.025075387,
      0.00542451,
      -0.01199727,
      0.0034125773,
      0.0031299086,
      -0.037459362,
      0.029420072,
      -0.012883192,
      0.0015391728,
      -0.07286136,
      -0.025650866,
      0.003799387,
      0.0062058317,
      0.025061343,
      0.011981294,
      -0.010617849,
      0.020975279,
      -0.00036138776,
      -0.014435168,
      -0.030242417,
      -0.004132276,
      -0.0015608985,
      -0.00078691106,
      -0.035932127,
      0.021560295,
      -0.00518968,
      -0.0044389972,
      -0.0139318565,
      -0.0031090558,
      -0.0025561478,
      -0.005376776,
      0.0067982133,
      0.007217272,
      0.015989125,
      0.021433348,
      -0.019670531,
      0.0059509035,
      0.0131359985,
      -0.007952211,
      0.012244251,
      -0.12851188,
      -0.025090002,
      0.03072045,
      0.009544895,
      -0.00542546,
      -0.0012959274,
      -0.036895048,
      -0.021554265,
      0.0009200533,
      0.0025615257,
      -0.0037257564,
      -0.0006744388,
      -0.01113115,
      0.018651197,
      0.0148216495,
      0.1380327,
      -0.0055757803,
      -0.010627679,
      0.0007348876,
      -0.0015369862,
      -0.00632553,
      -0.01018843,
      0.0033665719,
      0.0289813,
      -0.008990938,
      -0.005122625,
      -0.008548355,
      -0.013465254,
      0.011855141,
      0.005362675,
      0.02990525,
      -0.012675836,
      -0.014128508,
      0.011912786,
      -0.0006306591,
      -0.013086109,
      0.014554203,
      -0.002956231,
      0.008742107,
      -0.018724797,
      0.02263897,
      -0.00802845,
      -0.018583257,
      0.013347684,
      0.014803462,
      -0.0055828337,
      -0.0070855687,
      0.0041733654,
      -0.012664352,
      0.016099073,
      -0.00040663092,
      -0.073594265,
      -0.01777653,
      -0.017624285,
      0.007621621,
      0.011068839,
      0.0026406294,
      0.0345222,
      -0.01525821,
      -0.0035902248,
      -0.008609192,
      -0.0052103936,
      0.0052834977,
      -0.0059981844,
      0.009906536,
      -0.017962627,
      0.0046008495,
      0.014940773,
      0.036912497,
      -0.004155091,
      -0.019380558,
      0.027891725,
      -0.010138598,
      -0.0012572682,
      -0.03464665,
      -0.004318929,
      -0.020872517,
      0.021042114,
      0.0036376505,
      -0.01910411,
      0.0018081608,
      0.0023054432,
      -0.0022949518,
      0.00041321167,
      0.03605027,
      -0.03228118,
      -0.0037251436,
      0.018091267,
      0.0137363775,
      0.0032467598,
      0.0030419524,
      -0.0001363104,
      -0.012537348,
      0.035537705,
      0.001182236,
      0.016643692,
      0.01044464,
      0.0033449219,
      0.02846419,
      0.021219065,
      0.023044247,
      -0.03136626,
      0.02169617,
      -0.03975409,
      0.004220566,
      -0.0125967935,
      0.01057307,
      0.022331808,
      0.014806437,
      -0.014070444
    ]
  },
  {
    "id": "genai_cohort_nodejs_06_NodeJS_SystemDesign_DBScaling2_vtt",
    "content": "All right, now let's understand the other way of scaling the databases on scale. That is known as partitioning. So let me show you what happens in partitioning thing. Let's take one instance of the database. So let's say that this is your instance, okay? What you can do is you can actually create multiple instances of your database. These are multiple different, different servers. There is no redundancy, there is no duplication of data. Okay? What you can do is in this case, let's name these instances, right? This is your instance zero. So, so I'll just name it as zero. This is your instance, one. Okay, Then this is your instance number two. I'll just quickly name them. And finally we have the five here. Now what you can do is see a lot of data is coming, which I need to put it here, right? So what I can do is I can actually create a hash function where you can, you can give me some key, most probably the user id, and this hash function will return an index. How can you return an index? The simplest function is take the ID and mod it with the size of your instances. How many instances do you have? You have six instances, right? Zero to five. So I'll just say six. Whatever is returned to me, I will use that database to store. Now what happens is, let's say you are storing something. So the data is basically divided it into this six, six partitions. Your some data is stored here, some data is stored here, some data is stored here, some data is stored here, some data is stored here. Now the best part about this particular strategy, which is known as partitioning, the data is actually divided into the multiple databases. Okay? So that means one database is not storing the data. Multiple databases are there which are storing your data. How to choose that, which database is perfect for you, you have a hash function. So this is the simplest hash function. You can even write this hash function in such a way that hey, all the India traffic will go here, all the US customer data will go here, all the European, traffic will go here. You can even partition based on the geolocation. You can partition based on the IP address. You can partition it on the user ID basis howsoever you want to do it. So partitioning algorithm is yours. But this is also one way of scaling the databases where you can divide the load between the databases. For this particular approach, there is this one problem that if you have to do a, join lookup, for example, some data is here and some data is here, then you have to query it from two tables and then you have to join them manually in your application. So joining is not easy. It can take time. So that is one downside of this particular method. But yes, partitioning of databases is again a popular strategy to scale the databases. That is by dividing the load into multiple instances of the database. Okay, so now you know two ways to scale a database. That is one is the multi replica. So you can have redundancy. But the only problem is that data is late. The data in the read replicas are late and a master slave architecture is followed. Then is data partitioning that you can actually spin up multiple databases, independent databases which can store the data. And further you can even have read replicas of every instance. I mean it is going to be very costly, but yes, you can do it. Now this is the master. Just a second. Now this is the master database. Then it has three replicas. So this further scales every partition by a lot. So this is how you can actually scale the databases as well in the system design.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "06-NodeJS-SystemDesign-DBScaling2.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/06-NodeJS-SystemDesign-DBScaling2.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.008558962,
      0.0043499507,
      0.023774091,
      -0.0615998,
      -0.032348834,
      0.012329137,
      0.043672577,
      0.016316887,
      -0.0028495628,
      0.029045656,
      -0.00510649,
      0.01245365,
      0.035869908,
      0.022175167,
      0.10433535,
      -0.0055548307,
      -0.026091065,
      -0.0029551745,
      -0.0052432977,
      -0.008549716,
      0.012518966,
      -0.011201005,
      -0.0053330613,
      0.002856324,
      0.012667218,
      0.009658536,
      0.010953294,
      -0.015765764,
      0.01670801,
      -0.0062804967,
      -0.023594711,
      -0.007372339,
      0.0065079746,
      0.028439423,
      0.011365723,
      0.012834595,
      0.004666257,
      0.028103504,
      -0.0134342,
      0.022770967,
      0.00491667,
      0.0050409073,
      0.001739296,
      -0.0071347146,
      0.008768626,
      -0.016313123,
      -0.0065870434,
      -0.011205075,
      -0.013189708,
      0.0007893913,
      -0.0021609731,
      -0.03420049,
      -0.013255638,
      -0.1907648,
      0.010902503,
      -0.0041481233,
      0.00985522,
      -0.011543188,
      -0.008809757,
      0.009165647,
      -0.014172721,
      0.01845789,
      -0.011753037,
      0.018047873,
      -0.008748268,
      -0.009974169,
      0.02370037,
      0.021018509,
      -0.0061017596,
      -0.01797725,
      0.024360899,
      -0.017914295,
      -0.0019993098,
      -0.0052809985,
      -0.025573341,
      -0.038015954,
      -0.009971627,
      -0.0026961856,
      -0.013050504,
      0.025445906,
      -0.011388982,
      -0.02865399,
      -0.0045257476,
      -0.002264454,
      -0.016953006,
      -0.013124382,
      -0.0044989046,
      -0.02155259,
      0.00707531,
      -0.0048792395,
      -0.019775495,
      -0.013167322,
      0.0028916802,
      0.00421732,
      -0.00031015082,
      -0.00034294344,
      0.009956094,
      0.007232197,
      -0.0046451367,
      -0.013455178,
      0.018514225,
      0.013498465,
      -0.041400585,
      0.019526547,
      -0.0105174035,
      -0.020214882,
      0.010512606,
      0.013017154,
      0.011477473,
      0.0064311842,
      0.016824512,
      0.000729002,
      0.00004852728,
      -0.007005198,
      0.009840594,
      -0.17725652,
      0.0055001294,
      -0.0013272119,
      0.0034047968,
      0.008842399,
      -0.008590901,
      0.02927388,
      0.019809501,
      0.00027518047,
      -0.008227659,
      0.008266574,
      0.0049197925,
      -0.007864427,
      0.0018805366,
      -0.022359893,
      -0.02535647,
      0.0034483413,
      -0.0066793677,
      0.015032764,
      0.00010651207,
      0.014084505,
      -0.02334934,
      -0.026628984,
      -0.025410995,
      -0.024094788,
      0.011246135,
      0.03230424,
      -0.010264961,
      0.029059796,
      0.0066538556,
      0.01685341,
      -0.024832573,
      0.015685633,
      -0.0013185246,
      -0.021784293,
      0.037226886,
      -0.0036971907,
      0.020088563,
      0.032245535,
      0.027433898,
      -0.030039784,
      -0.0131184,
      0.016346844,
      0.0017736555,
      0.016102832,
      -0.012711203,
      -0.008924542,
      0.0074588414,
      0.015205616,
      0.012536111,
      0.00515554,
      -0.004348792,
      0.007638025,
      0.013595515,
      0.013760324,
      -0.016232911,
      -0.017033683,
      -0.023860268,
      0.016312892,
      -0.005469883,
      -0.0022426117,
      -0.013994921,
      0.022270987,
      0.0064858086,
      -0.020154415,
      0.009926402,
      -0.01637803,
      0.012623267,
      -0.008316068,
      -0.010557211,
      -0.0072225183,
      -0.0008058169,
      0.0037900577,
      0.025274407,
      -0.006012171,
      0.019923622,
      -0.014054104,
      0.0041228593,
      -0.012978222,
      -0.014180513,
      -0.032725677,
      0.021621589,
      -0.0011675465,
      0.0125443665,
      0.026533997,
      0.0044804807,
      -0.00023849828,
      0.008498419,
      -0.028869685,
      -0.009334635,
      -0.0010787394,
      0.01975038,
      -0.02975992,
      0.010477258,
      0.020791886,
      0.0036662675,
      0.012179788,
      0.0013983913,
      -0.013017683,
      0.0031781506,
      0.0075552952,
      0.015901769,
      0.005108656,
      0.0016615076,
      -0.0154873775,
      -0.029442659,
      -0.006989234,
      -0.0058705118,
      0.015770255,
      0.032491717,
      -0.01081641,
      -0.015816966,
      -0.009089676,
      0.0045081573,
      -0.014057923,
      0.029194709,
      0.022608137,
      -0.02298183,
      0.014858874,
      0.0041396157,
      -0.016690405,
      -0.01578374,
      -0.0047976035,
      -0.009498148,
      0.0155488,
      -0.006379519,
      -0.008687233,
      -0.000050685285,
      0.026864601,
      0.028857054,
      0.007994863,
      -0.001984387,
      0.007560826,
      0.0040820693,
      0.0038324378,
      0.0154036945,
      0.0121611,
      -0.008560652,
      -0.0058329543,
      0.020040693,
      -0.018498218,
      -0.052952047,
      -0.011688273,
      -0.034424342,
      0.00095887424,
      -0.018625977,
      -0.02542882,
      -0.013855235,
      -0.020736985,
      -0.008761002,
      0.010104878,
      0.0041808323,
      0.03436292,
      -0.021167351,
      0.010602828,
      0.04024663,
      -0.0070186327,
      0.0063662985,
      -0.014429492,
      -0.00461363,
      -0.0006192226,
      -0.08919049,
      -0.005963632,
      0.000077197765,
      -0.014312899,
      -0.00071093685,
      -0.003962516,
      0.0063065034,
      0.014580494,
      0.0026778395,
      0.028587304,
      0.00135639,
      -0.0075339596,
      -0.009250804,
      0.00014015046,
      0.00026079224,
      -0.0009062979,
      0.0026113712,
      -0.014350246,
      0.014549616,
      -0.020417014,
      -0.018935326,
      0.0039148917,
      0.0018677909,
      -0.002230287,
      0.011543412,
      0.003724398,
      -0.0064903796,
      0.032119054,
      0.007758572,
      0.015729725,
      -0.005178125,
      0.023414101,
      -0.02361135,
      -0.0020974062,
      -0.018417886,
      0.001137956,
      -0.005092898,
      -0.017158221,
      0.00864417,
      -0.006464633,
      -0.02017392,
      -0.012272455,
      0.002982002,
      0.0007400184,
      -0.0016685374,
      0.012827755,
      -0.0028851803,
      0.0070003923,
      -0.014099138,
      -0.008524132,
      -0.00042345724,
      -0.006980602,
      0.009696597,
      -0.010744928,
      0.0047646267,
      -0.014767478,
      -0.026348835,
      -0.0099831,
      -0.01979052,
      0.009961977,
      -0.0027799057,
      -0.0034911772,
      -0.020025901,
      0.007301608,
      0.017593835,
      -0.005604492,
      0.0060496717,
      0.0012980476,
      0.003094112,
      -0.020399688,
      0.017606191,
      -0.0025852788,
      -0.01009803,
      -0.029362554,
      0.024820404,
      0.025316687,
      -0.0057592886,
      -0.013089643,
      -0.032449998,
      0.022552973,
      -0.00062776054,
      0.039573703,
      0.0021582993,
      -0.019540755,
      0.014156975,
      -0.0072024763,
      -0.004489884,
      -0.016717423,
      -0.010569579,
      -0.02667422,
      0.0036398764,
      0.013542051,
      0.0001829794,
      0.0025446743,
      -0.02264351,
      0.010509804,
      -0.020602036,
      0.014078613,
      0.009194271,
      0.0100647,
      -0.020320002,
      -0.00019361597,
      -0.013066009,
      -0.021104861,
      -0.0076411227,
      0.02554751,
      -0.01992238,
      -0.011032611,
      0.0012371395,
      -0.015112153,
      0.020284766,
      0.011316374,
      -0.016616318,
      -0.016456675,
      -0.017834716,
      0.013677022,
      0.022974616,
      0.019273292,
      -0.005153935,
      0.002609371,
      0.003995164,
      0.0008383557,
      0.01276442,
      0.0096192015,
      -0.027996076,
      -0.028554047,
      -0.027776372,
      0.01319131,
      0.01815481,
      -0.021592114,
      -0.02706929,
      0.0015032667,
      -0.0236774,
      -0.015506761,
      0.0021546148,
      -0.014292041,
      -0.00082759495,
      0.011845703,
      0.0046791965,
      0.015085758,
      0.010665513,
      -0.0102406405,
      0.0079789385,
      -0.0101800095,
      0.004985546,
      0.017568914,
      -0.0007519298,
      -0.019610345,
      -0.00090825657,
      -0.02321995,
      -0.033018164,
      -0.03617654,
      -0.0006862568,
      -0.0023608697,
      0.0027020054,
      0.031717204,
      -0.0045022992,
      -0.0079309875,
      0.0008515728,
      -0.008210978,
      0.015327775,
      -0.0011674981,
      -0.009160031,
      -0.006861609,
      0.021437688,
      0.007537068,
      -0.015482301,
      -0.006103243,
      0.010648001,
      0.009552359,
      0.0019647651,
      -0.005496502,
      -0.035582583,
      -0.008707477,
      0.008842577,
      0.0073112473,
      0.009152173,
      -0.030319562,
      -0.00020026855,
      0.014141381,
      0.01107377,
      0.014331089,
      -0.029727504,
      0.009391853,
      -0.010224487,
      0.014289408,
      0.00321778,
      -0.010142399,
      -0.0064138314,
      -0.01618613,
      -0.008564442,
      -0.0009372724,
      -0.01470853,
      0.004186927,
      0.012582374,
      0.024748817,
      0.00420591,
      -0.010711636,
      0.011108957,
      -0.008965319,
      -0.0013708905,
      -0.02105479,
      0.012168878,
      -0.022794193,
      -0.002896207,
      0.005071181,
      -0.02465617,
      -0.01040334,
      0.005304064,
      0.028635526,
      0.026134938,
      0.01575671,
      0.008021132,
      -0.0091285575,
      0.0008749676,
      0.025379121,
      0.026950352,
      -0.0008214637,
      -0.013634535,
      -0.00088656344,
      0.05867535,
      -0.016996227,
      0.005671185,
      -0.002004073,
      -0.004547963,
      -0.006156016,
      -0.00641169,
      0.0033656112,
      0.017285507,
      0.0055072126,
      0.022116976,
      0.02152681,
      0.010382944,
      0.019933797,
      -0.025370555,
      -0.0022374913,
      -0.0027872603,
      -0.005158876,
      -0.017553216,
      -0.007421083,
      -0.009181022,
      0.008857684,
      -0.012376456,
      -0.009136878,
      -0.015641697,
      -0.024252934,
      0.03836924,
      0.01348955,
      -0.00032781542,
      -0.021292394,
      0.014900764,
      0.020430299,
      -0.0042495946,
      -0.0068398225,
      0.0068123313,
      0.032307334,
      -0.015443096,
      0.0018915297,
      0.0070850514,
      0.005449809,
      -0.018594459,
      -0.0012843646,
      0.015141094,
      -0.0012180721,
      0.012625425,
      -0.017184887,
      0.027465668,
      0.0020800943,
      0.025442626,
      -0.10732913,
      -0.0042025205,
      0.0026919958,
      0.0033706177,
      0.00581863,
      -0.012818445,
      -0.035814337,
      -0.027486634,
      -0.0151886325,
      -0.0013688423,
      0.00561009,
      0.024321694,
      -0.0027563726,
      -0.00571981,
      -0.0021263037,
      0.0021416477,
      0.006533258,
      0.036969367,
      0.01781006,
      0.007541341,
      0.0061529144,
      0.011438902,
      -0.010016514,
      -0.002065506,
      0.019490555,
      0.0010782833,
      0.01037163,
      0.013352208,
      0.003792754,
      -0.013838625,
      -0.023503115,
      -0.015887763,
      0.010085926,
      0.01652034,
      0.01373567,
      -0.0050163236,
      0.008539033,
      0.003399256,
      0.00026582065,
      0.012842446,
      -0.009245096,
      0.0010102745,
      -0.00860508,
      0.017562853,
      0.016833767,
      0.0031854277,
      0.027570074,
      -0.0075310185,
      0.008381642,
      0.043628126,
      -0.030273745,
      0.012159388,
      -0.007924806,
      -0.021158135,
      0.00039763958,
      -0.003232253,
      0.013297735,
      0.014181478,
      -0.017235108,
      -0.005353834,
      0.009185183,
      0.016788991,
      0.0037671963,
      0.0149025265,
      -0.0077030626,
      -0.013197608,
      -0.0021843428,
      -0.005415552,
      0.014359117,
      -0.001567715,
      -0.004920384,
      0.012048748,
      0.002554692,
      0.028805463,
      -0.0014063733,
      -0.015277813,
      0.008063181,
      0.005063874,
      -0.039299216,
      0.019013029,
      -0.02548634,
      0.0052915034,
      -0.06979,
      -0.018141298,
      0.0020613256,
      0.0049971407,
      0.023766238,
      0.033291943,
      -0.02622155,
      0.023286387,
      0.0012787508,
      -0.0034790032,
      -0.019554857,
      -0.0057801446,
      -0.0014142004,
      -0.0073920614,
      -0.025849575,
      0.016265932,
      -0.0047723455,
      -0.0066833347,
      -0.018327102,
      0.006808734,
      0.0022106424,
      -0.028469259,
      0.0098933745,
      0.013781438,
      0.015759464,
      0.021320608,
      -0.014513665,
      0.013962089,
      -0.0031928958,
      -0.003332236,
      0.020250216,
      -0.12129119,
      -0.036547795,
      0.022076102,
      -0.00003780299,
      0.0008451309,
      -0.0045114257,
      -0.024923414,
      -0.02245824,
      -0.006889933,
      0.0019448424,
      -0.0017635509,
      -0.012189584,
      -0.015563037,
      0.0077739395,
      0.010734961,
      0.14096652,
      -0.018747121,
      -0.010535928,
      -0.005966546,
      0.005939559,
      -0.0031628977,
      -0.013487202,
      0.005124697,
      0.03119233,
      -0.01702466,
      -0.000009794353,
      -0.0067753503,
      -0.004818598,
      0.005013441,
      0.003275125,
      0.012718542,
      -0.0031372395,
      -0.016522769,
      0.018927502,
      0.012060643,
      -0.019634128,
      0.0009254128,
      0.0039256243,
      0.013992707,
      -0.007353638,
      0.0196421,
      -0.012358624,
      -0.0035912602,
      0.007516148,
      0.0027482458,
      0.0048464714,
      -0.007652937,
      -0.0013701221,
      -0.005610485,
      0.010924603,
      -0.003675248,
      -0.07129825,
      -0.014721528,
      -0.019098422,
      0.009775256,
      0.010630925,
      -0.0013417499,
      0.024252726,
      -0.01220575,
      0.0041560666,
      -0.009408556,
      -0.002561489,
      0.015798585,
      -0.0025528723,
      0.019156246,
      -0.017908208,
      0.008599693,
      0.017174892,
      0.027210029,
      0.0032126615,
      -0.022077614,
      0.018385917,
      -0.009186236,
      0.01019547,
      -0.01551601,
      -0.0024965515,
      -0.005110498,
      0.034409706,
      0.010988288,
      -0.011023559,
      0.005736827,
      0.007001038,
      -0.023049464,
      0.00032713855,
      0.023894051,
      -0.027377268,
      0.0024734447,
      0.03266503,
      0.008093132,
      -0.0050984207,
      0.0033925704,
      -0.011019821,
      -0.021562966,
      0.030607134,
      -0.013029892,
      0.0133327395,
      0.012331316,
      -0.015265961,
      0.015517556,
      0.027552163,
      0.021685379,
      -0.03949063,
      0.014726467,
      -0.02956448,
      0.007910569,
      -0.022776693,
      0.005849057,
      0.02089139,
      -0.0053942334,
      -0.005697482
    ]
  },
  {
    "id": "genai_cohort_nodejs_07_Nodejs_SystemDesign_Monolith_vtt",
    "content": "All right, so in this particular video, let's understand something known as monolith architecture. So monolith architecture is actually a very common thing, and that is something we have been already doing. Okay? So till now you already have a knowledge about horizontal scaling, vertical scaling, and how to scale databases. Now let's understand what is this monolith architecture, okay? Now in reality, how the whole workflow happens is that you have a source code, right? Now what is a source code? Source code is something that you write, that you as a developer writes. And what you do, you push this particular source code to the GitHub, right? To your Git, GitHub or whatever you are using. Now this source code, which is your Node JS course in our case, has a lot of endpoints and has a lot of services. For example, if you're building an E Commerce application, this source code has authentication code. It has all the payment code, it has all the order code, it has all the, let's say, payment, payment processing order, and all the emailing and notification code. Now this code is packaged into one single repository, pushed onto the GitHub. And then what you do, you basically create a server out of it, right? So let's say this is my server, okay? So this is my server. So you pull this particular code from the GitHub. And now this is a, server. Let's say your application is running on port number Now this particular port 80, the server contains all the code you can, your authentication code, your payment code, your orders code, and even your, you know, emailing code. All the code is in this particular service. Now this particular thing is known as a monolith architecture because everything is in single server. Now what happens is, let's assume, let's, you know, take something that this order service is something which is very busy. Let's take, because authentication is not that busy, because let's say users have already signed up, they are not doing something. Payments are also okay. It is not that much. But orders is something which is actually very overwhelming coming, okay? People are fetching their orders again and again. And it is a very, very, very expensive and very, you know, highly used route. Now what happens is, because people are making a lot of request on the order service, your server is getting overwhelmed. You have to horizontally scale your server. So see, what I'm doing is I'm basically horizontally scaling my server, right? And now what will happen because I'm doing a horizontal scaling, you need some kind of a, reverse proxy, a load balancer. So let's say nginx is our load balancer. So your request basically goes to this nginx. Not from the GitHub. My basically the users will interact from NGINX and NGINX will load balance these servers. Now, understand one thing. In this particular architecture, because it was a monolith architecture, all these servers have same code. Now, even your AUTH server, AUTH service has six codes. Your payment also has six instances. Your order also has six instances. Just because you wanted to scale the order service, you actually have to scale all the servers at once. Because we are here following the, monolith architecture. So monolith architecture is basically, that is all your code into one single code base deployed on a server. And then when you want to scale, you basically scale the whole server. So there is no segregation behind the services, right in between services, there is no segregation. Everything is just one. If you want to scale out, you have to scale everything. If you want to scale in, you have to scale in everything. So this is known as a monolith architecture. There are very common practices. A lot of companies use this monolith architecture because it is simpler to implement and, you know, it gives scaling out of the box. And in the next particular video, let's understand the reverse of monolith. Like, how can we break this particular thing, monolith, and what that thing is known as?",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "07-Nodejs-SystemDesign-Monolith.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/07-Nodejs-SystemDesign-Monolith.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.010801705,
      0.018087994,
      0.018292006,
      -0.070497826,
      -0.026948435,
      0.015003359,
      0.025126824,
      0.009091126,
      -0.006517228,
      0.02446947,
      -0.0044204504,
      0.0017477617,
      0.0032318167,
      0.03051697,
      0.11936483,
      -0.007849554,
      -0.020177245,
      -0.005968439,
      0.0021802138,
      -0.02454555,
      0.01549186,
      -0.011103139,
      -0.0007896396,
      0.019233244,
      0.0037213666,
      0.008495077,
      0.0022322156,
      0.0014562922,
      0.019586444,
      -0.013482749,
      -0.008235046,
      -0.0055311937,
      -0.014594342,
      0.0285352,
      0.0013765062,
      0.006662281,
      -0.0030602014,
      0.014795437,
      -0.030511895,
      0.0013437048,
      -0.017511696,
      0.0058618723,
      0.004595357,
      -0.016743105,
      0.021554839,
      0.008202061,
      0.001347332,
      -0.043695673,
      0.0006731292,
      0.0014848268,
      -0.0066980463,
      -0.0059190993,
      -0.0042700204,
      -0.17142895,
      -0.0037050254,
      0.013254778,
      -0.0050143055,
      -0.0022107428,
      -0.009835499,
      0.022000266,
      -0.039886296,
      -0.0018531913,
      -0.012763137,
      0.017051939,
      -0.018524729,
      -0.013611267,
      0.045891833,
      0.017688477,
      0.00034234748,
      -0.027781298,
      0.002314084,
      0.0149826985,
      -0.0047287727,
      -0.003970783,
      -0.018698089,
      -0.00022204978,
      -0.005262021,
      0.00088174804,
      -0.026446324,
      0.017534537,
      -0.030791707,
      -0.020863384,
      -0.009794694,
      -0.014998155,
      -0.017093744,
      -0.00086885464,
      -0.02795116,
      -0.00044943564,
      -0.0018796087,
      0.014492893,
      0.010711475,
      0.008972214,
      -0.0023300406,
      -0.0037158893,
      0.005194895,
      0.0083259605,
      -0.020188957,
      -0.0019416865,
      -0.0015471561,
      -0.0073414464,
      -0.010061522,
      0.014921403,
      -0.02619955,
      0.01227362,
      -0.011069776,
      0.005569057,
      0.00101638,
      0.010540487,
      0.021030309,
      -0.0004959701,
      -0.0002575905,
      -0.0049150456,
      0.0066091246,
      0.025715683,
      0.003946625,
      -0.18254374,
      0.033093937,
      -0.009315389,
      0.0014088105,
      0.0019381974,
      -0.013324157,
      0.00001283246,
      0.024424065,
      -0.003128735,
      -0.024620704,
      -0.00033146224,
      0.0076255603,
      0.025875838,
      0.003108776,
      0.0055444157,
      -0.01097144,
      -0.008697908,
      -0.015746541,
      0.021154022,
      0.01970636,
      -0.0022126054,
      -0.002479062,
      -0.021571435,
      -0.021345552,
      -0.032476798,
      0.020010926,
      0.038537897,
      -0.005170457,
      0.030457113,
      -0.0078098592,
      0.017403975,
      -0.021321852,
      0.0011370883,
      -0.019770768,
      -0.031771403,
      0.010956628,
      0.0043147006,
      0.009604073,
      0.0042264974,
      0.020367084,
      -0.039230514,
      -0.018054657,
      -0.0042850506,
      0.025495896,
      -0.015078812,
      0.0059407847,
      -0.0049865674,
      0.011732018,
      0.0055964007,
      -0.003218774,
      0.0012688353,
      -0.010383242,
      0.00036211227,
      0.016165514,
      0.017099857,
      -0.021370498,
      -0.0038389585,
      -0.018797727,
      -0.0019871052,
      0.0009803576,
      -0.029002944,
      -0.027784396,
      0.0069893175,
      0.021364769,
      -0.014457718,
      -0.0072895004,
      -0.00441768,
      0.009624162,
      -0.025841808,
      -0.0052962606,
      -0.016691145,
      -0.026873488,
      0.010328097,
      0.022257661,
      0.0059233434,
      0.022380356,
      -0.02386378,
      -0.013019206,
      -0.013678213,
      0.009061448,
      -0.007792047,
      0.0071950248,
      0.008079225,
      0.009158633,
      0.018423779,
      -0.00398572,
      -0.020268697,
      0.007486378,
      -0.041910153,
      -0.003708556,
      0.026037386,
      0.016147092,
      -0.0072609084,
      0.021606477,
      0.024380278,
      -0.0076203155,
      -0.0028642055,
      0.008566713,
      -0.004279131,
      0.009021637,
      -0.0027463965,
      -0.0003413579,
      0.02408926,
      0.0020806012,
      -0.0005385018,
      -0.018523665,
      -0.017592384,
      0.011983106,
      0.018572537,
      0.029190388,
      0.0021049364,
      0.012622165,
      -0.004201809,
      -0.0011057879,
      -0.005056736,
      0.017958278,
      0.0212129,
      -0.008903403,
      0.0004963171,
      0.013709352,
      0.007949231,
      -0.017661907,
      0.00928716,
      -0.010213357,
      0.015839735,
      -0.016822409,
      -0.0052025476,
      0.0001387092,
      0.010596369,
      0.042251408,
      -0.0008634753,
      -0.010883594,
      0.00015820125,
      -0.007065338,
      -0.008486189,
      -0.018305853,
      0.008529059,
      -0.012947563,
      -0.0081095295,
      0.021179197,
      -0.013474454,
      -0.041505307,
      -0.004852262,
      -0.014051939,
      -0.014974263,
      0.0018705477,
      -0.011690772,
      -0.013456603,
      -0.0077722743,
      0.009121254,
      -0.002455501,
      0.011663828,
      0.027536672,
      -0.004355917,
      0.016429085,
      0.0051988545,
      0.0046261363,
      -0.008210296,
      -0.0054571573,
      0.016851397,
      0.02874709,
      -0.07696891,
      -0.008750657,
      0.0022329069,
      -0.026932364,
      -0.01393186,
      -0.0015380072,
      -0.012290501,
      0.011547602,
      0.016794229,
      0.011433355,
      0.0048034666,
      0.0012188083,
      0.009884386,
      -0.0064372695,
      0.00012995204,
      0.006516397,
      -0.009878821,
      -0.018611666,
      0.026416685,
      -0.023537412,
      -0.021773802,
      0.0014578016,
      -0.002096599,
      0.008469738,
      -0.003947212,
      -0.022939755,
      -0.015741812,
      0.027143614,
      0.016989345,
      -0.00014715105,
      0.017199742,
      0.01808138,
      -0.024280552,
      0.012685198,
      -0.023582686,
      0.0030713305,
      0.023822846,
      -0.022347476,
      0.011615978,
      0.00619574,
      -0.01086149,
      -0.02130897,
      0.022197723,
      0.027617654,
      -0.0050946376,
      0.005715361,
      0.0081814,
      0.011173488,
      -0.01926325,
      0.0019736001,
      -0.0074931937,
      -0.017793534,
      0.013469945,
      -0.02074533,
      -0.0055928594,
      -0.008441499,
      -0.013052203,
      -0.005687851,
      0.023144886,
      0.018979445,
      -0.016047053,
      -0.010169966,
      -0.018909752,
      0.015162435,
      0.007982455,
      -0.0016962624,
      -0.020929314,
      -0.025594076,
      0.011772437,
      -0.01055586,
      -0.0033841154,
      -0.0045620636,
      -0.005202916,
      -0.029511007,
      0.029207129,
      0.010829234,
      0.0050513,
      -0.008563652,
      -0.028186178,
      0.015762184,
      -0.0056242137,
      0.019624375,
      0.014616762,
      0.023163512,
      0.01889042,
      0.0048628193,
      0.017889306,
      -0.008742979,
      -0.015356731,
      -0.011237984,
      0.014272659,
      0.013971846,
      -0.0021050237,
      -0.0035504173,
      -0.029812424,
      0.01021136,
      -0.010481462,
      0.0043317764,
      0.0056906915,
      0.02516924,
      -0.020646749,
      -0.022982404,
      -0.0020365883,
      -0.011235203,
      -0.0172077,
      0.026367826,
      -0.017027935,
      -0.011202492,
      0.0048060454,
      -0.022213224,
      0.001522549,
      0.009937734,
      -0.018274868,
      -0.00427167,
      -0.007111448,
      0.005657289,
      0.0025936398,
      0.0016426805,
      -0.0065065185,
      -0.006912601,
      -0.0023435184,
      -0.0034919654,
      0.004801769,
      0.0057838066,
      -0.00081014447,
      -0.003558391,
      -0.0063060047,
      0.022842692,
      0.006027013,
      -0.009617678,
      -0.03262476,
      0.0017101711,
      -0.013823234,
      -0.0020896953,
      -0.008602217,
      -0.017155362,
      0.01192193,
      0.007478469,
      0.010998182,
      0.01973955,
      0.0022597248,
      0.009260319,
      0.006447068,
      -0.0148024205,
      -0.011719067,
      0.013514982,
      -0.016163353,
      -0.000389317,
      0.003698316,
      -0.0027436204,
      -0.024934873,
      -0.008174628,
      -0.007975528,
      -0.009301294,
      -0.010217985,
      0.035125226,
      0.007877712,
      0.010180586,
      -0.0048293006,
      -0.017511886,
      -0.0042056213,
      -0.003994506,
      0.0042324713,
      -0.02546683,
      0.01525319,
      0.0120450575,
      -0.0029814888,
      0.008308448,
      0.008465744,
      0.008062535,
      -0.00547938,
      -0.02480178,
      -0.036700457,
      0.023560135,
      0.02227085,
      0.01751555,
      0.0016031201,
      -0.024384562,
      0.008254234,
      0.0030693174,
      0.008469848,
      0.0037376538,
      -0.020249577,
      0.0090473695,
      -0.0019574775,
      0.011810345,
      0.011396333,
      -0.020543408,
      -0.03561653,
      -0.0014377326,
      -0.01631816,
      -0.005831274,
      -0.035322763,
      -0.0038626017,
      0.013501515,
      -0.0019563849,
      0.012049329,
      -0.0071350522,
      0.0063776844,
      0.012580487,
      0.007311885,
      -0.018188719,
      0.017416585,
      -0.03565227,
      0.01962721,
      0.01027211,
      0.0087758,
      -0.009822549,
      0.0047471146,
      0.0123020895,
      0.019626195,
      0.014949923,
      -0.0016190378,
      -0.0031483443,
      0.027524648,
      0.022935733,
      0.020736407,
      0.002784557,
      -0.030035127,
      0.013578072,
      0.026258841,
      -0.012448096,
      0.0055198157,
      -0.013743073,
      0.0075549292,
      -0.013641536,
      -0.015875192,
      0.0058694757,
      0.002954406,
      -0.0118859615,
      0.010692146,
      0.010929868,
      -0.000304009,
      0.013385333,
      -0.026403481,
      0.017967623,
      0.010648041,
      -0.0019849348,
      0.020330235,
      -0.0021214848,
      -0.007876055,
      0.00045851895,
      -0.004779176,
      -0.00048327315,
      -0.0065725846,
      -0.010880821,
      0.02553562,
      0.019420024,
      -0.012560603,
      -0.010577647,
      0.024825472,
      0.026899248,
      0.003980283,
      -0.0059429333,
      -0.02783961,
      0.02539931,
      0.0036916742,
      0.0105336765,
      -0.000008901195,
      -0.0016070078,
      -0.018467698,
      0.0037810756,
      0.0036607203,
      0.011505955,
      0.0012167817,
      -0.029328404,
      0.014173562,
      0.0053618127,
      0.016961962,
      -0.12066494,
      -0.015998151,
      -0.0072098407,
      0.00909743,
      -0.009581045,
      0.0039208615,
      -0.005465849,
      -0.023477063,
      -0.014677524,
      -0.0075533246,
      -0.001113501,
      0.00044413697,
      -0.00080710073,
      0.020160634,
      -0.01086793,
      -0.008555681,
      -0.01932612,
      0.029095039,
      0.03606326,
      -0.0011926234,
      0.013468359,
      0.008102526,
      -0.0069213347,
      0.017843602,
      -0.0064574676,
      -0.0031194685,
      0.023215095,
      -0.011290057,
      0.008450065,
      -0.016928941,
      -0.016924463,
      -0.014313339,
      0.0022669751,
      0.023248903,
      0.029340683,
      -0.019360356,
      0.0099066915,
      0.021949235,
      0.00918786,
      0.014913697,
      0.006876872,
      0.022931863,
      -0.013534996,
      0.015735822,
      0.015818845,
      0.013121384,
      0.02792209,
      -0.0086160265,
      0.007016908,
      0.05259463,
      -0.031536836,
      -0.014427933,
      -0.00058903656,
      -0.021687226,
      0.0077999826,
      -0.0034108453,
      0.020529546,
      -0.009184735,
      -0.019091731,
      0.015164804,
      0.0022718515,
      -0.0042844065,
      0.008440936,
      0.029529167,
      -0.015299138,
      -0.016388413,
      0.01080934,
      -0.005651351,
      0.0038927507,
      -0.0050987457,
      -0.0014045405,
      -0.009315816,
      -0.022288028,
      0.0046742978,
      -0.0021418778,
      0.010236493,
      -0.017418249,
      0.0027102188,
      -0.0223417,
      0.022536226,
      -0.031319305,
      -0.004492418,
      -0.08132589,
      -0.028863082,
      -0.008862781,
      0.01085088,
      0.032878816,
      0.012732919,
      -0.017136881,
      0.015523919,
      -0.01290787,
      0.0013736334,
      -0.03249487,
      -0.02680833,
      -0.0033272975,
      -0.00050777616,
      -0.009608277,
      0.013604463,
      0.016902031,
      -0.016248295,
      -0.02951668,
      0.0055359504,
      -0.003702041,
      0.0026566752,
      0.023325136,
      -0.0061373143,
      0.002260347,
      0.027996292,
      -0.043850698,
      0.0006289534,
      0.0025174266,
      0.007559815,
      -0.0040353914,
      -0.1226852,
      -0.012197994,
      0.033017375,
      0.0035975983,
      0.004377731,
      0.009303539,
      -0.010210443,
      -0.032612134,
      0.012280282,
      -0.0076803677,
      0.011284364,
      -0.0075354665,
      0.00021719204,
      0.011544369,
      -0.005731471,
      0.13835518,
      0.003268257,
      0.016296946,
      0.0031846354,
      0.011514947,
      -0.022574825,
      -0.002245386,
      0.010125186,
      0.015553037,
      -0.0016582859,
      -0.0068786927,
      0.010983089,
      -0.01971733,
      0.04143803,
      0.016293101,
      0.026751252,
      -0.012685261,
      -0.02977362,
      -0.0061597354,
      -0.0017850153,
      -0.024515469,
      0.019890435,
      0.0032455856,
      -0.0027786766,
      -0.017985752,
      0.01098923,
      -0.023996929,
      0.0028606874,
      0.012910822,
      0.014448769,
      0.012250146,
      -0.0045009684,
      -0.014762729,
      -0.0046412563,
      -0.008111702,
      -0.00583274,
      -0.07163058,
      -0.014303083,
      -0.014170606,
      0.0041091316,
      0.006410533,
      0.0025380352,
      0.030006016,
      -0.030145004,
      -0.00036931672,
      0.002762603,
      0.0031351915,
      0.017339652,
      0.014243006,
      0.011455899,
      -0.023458792,
      0.012182931,
      0.026883228,
      0.024432983,
      -0.001260158,
      -0.022085503,
      0.018683413,
      0.0061672577,
      -0.0045004287,
      -0.024163065,
      -0.011855615,
      -0.0026116562,
      0.016848264,
      0.00069206627,
      -0.027231665,
      0.01054658,
      -0.004796929,
      0.013798235,
      -0.010484865,
      0.025128063,
      -0.021428864,
      -0.012445667,
      0.016594106,
      0.008452565,
      -0.017266508,
      -0.017407104,
      0.02246124,
      -0.0023814654,
      0.035829175,
      -0.0011903908,
      0.01196393,
      -0.00012497217,
      0.01736627,
      0.020794459,
      0.031277608,
      0.01664902,
      -0.024600476,
      0.03614509,
      -0.01890876,
      0.02585895,
      -0.0032435234,
      0.016346503,
      0.039344862,
      0.008910354,
      0.006917993
    ]
  },
  {
    "id": "genai_cohort_nodejs_08_Nodejs_SystemDesign_Mircoservice_vtt",
    "content": "All right, so now what we can do is now to make it more scalable and independent, what we can do is we can break down our source code into multiple source codes. Okay? So now in this particular scenario, what we can do is I will actually maintain four different repositories for. So I will just say four different projects. I will maintain. One project is going to be my auth service. Okay? Service, not service. I'll just say service. Then I will have a payment service which is an independent server, independent code, okay? Independent running on a port. I will have an order service, okay? And then I will have an email service. Now the best part about breaking this down is, number one, now all the services are isolated from each other. That means these services can have their independent databases. Independent tech stack. For example, you might write auth service in Python. You might, okay, you might write your payment services in Golang. You might write your order service in Node JS, that is your JavaScript. And you might write your email service again in the node js. There is also a possibility that your auth server can use a MongoDB as a primary database and rest of the services can actually rely on a postgres or some other database in this case. Okay? So let's say this is also using postgres, this is also using your, you know, postgres, and this is also using your postgres. All right, now what happens is how you basically deploy these services. Number one, you have to deploy them separately and every service can have their different auto scaling policy. Let me just create a diagram for you. Let's assume that this is your auth service. Okay? So I'll just name it as auth service. Let's say this auth service is written in Python language. Okay? Now auth service is somewhat not that busy. So let's say I want three instances of auth service. That is it. Okay, so this is your one, and this service, will have its own load, reverse proxy. Okay? Or a load balancer. So this is a load balancer, which is load balancing between 1, this, 2, and this is the third one. That's great. Now if I copy this particular thing, let's have another one. You know, completely isolated. Let's say this is your payment service. You want your payment service to be very highly available. And you know you will have much more servers here. So let's say you have more servers. You again have a reverse proxy. I mean a load balancer. And this is also done. Okay, now let's say your order Service is something which is very busy, right? That is what we discussed. So in your order service you actually have more data, more servers right here to deploy. So let's rename it as order service. Okay, Order service. So now you have a lot of servers for your order service. Now see, we are independently scaling. Okay, so I'll just paste it here. And then finally let's also have our email service. Now let's say email service is a very simple service. You know, there is not much load in the email service. So I'll just have two servers. So let's remove that. So now this is your microservice architecture, micro service architecture. Because what you are basically doing is you are breaking down these concepts. You are breaking down all the services and routes into their separate service. Now the best part is the AUTH service can be scaled independently that if more request is coming, you can just scale auth service tomorrow. Let's say authentication service has more load, just add one more server. For the AUTH service, you need not to touch payment service, you need not to touch the order service. One more advantage is that let's say in your monolith architecture something failed in email. Something failed. Okay? There was a bug in your email code due to which this whole server is going to crash. Due to which this whole server is going to crash. So that means the problem in one service, that is email service can lead to crash of the whole system. But that is not the case here. If in this particular scenario the email service is causing an issue, only and only the email service will go down. Rest all services, that is your order service, your payment service and your authentication service will still work as fine. So this is the main advantage of microservice architecture. There is of course a drawback or a cost associated with the microservice architecture that now you have to maintain a lot of servers, right? The cost is high. You have to monitor, you have to maintain. You have to maintain a lot of code, a lot of segregation about the code. And you have to maintain a lot of new repositories, right? For every service you have to create a new source code. You have to maintain a source code. And monitoring can be sometimes very difficult and it is costly on infrastructure. It costs a lot of money. Okay, now there are two more fundamental problems with the microservice architecture. Number one, how will user decide that where to route the request? Should I talk to the AUTH server, Should I talk to the payment service or should I talk to the order service. This is one fundamental problem. Second fundamental problem in microservice architecture is how these services can communicate to each other. For example, when an order is successful, maybe it want to talk to the payment service that hey, is this, have you received this payment? Or maybe the order service wants to talk to email service to send an email to the user. So how this communication will happen? So this is one fundamental problem which we are going to understand in the upcoming videos.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "08-Nodejs-SystemDesign-Mircoservice.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/08-Nodejs-SystemDesign-Mircoservice.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.011051895,
      0.007658247,
      0.011182567,
      -0.06057986,
      -0.019828048,
      0.0027809213,
      0.027783686,
      0.010910438,
      -0.003839807,
      0.0143567035,
      0.0021077897,
      0.023792395,
      0.0064008627,
      0.029299526,
      0.12741427,
      -0.010217051,
      -0.011233989,
      0.0010479613,
      -0.007498027,
      -0.011716748,
      0.0060073924,
      0.0022418546,
      -0.00616513,
      0.027648315,
      0.011910459,
      0.023035094,
      0.020565974,
      -0.008236201,
      0.0017502254,
      -0.012299768,
      -0.019688442,
      -0.013599565,
      -0.002700042,
      0.0345503,
      0.018985735,
      -0.0013957471,
      0.0104610305,
      0.0065755895,
      -0.029197024,
      0.004560731,
      -0.021790305,
      0.009803529,
      0.008584625,
      -0.005349838,
      0.0020177297,
      0.009503884,
      -0.0014944781,
      -0.02081902,
      0.008790873,
      -0.0033487447,
      0.008451012,
      -0.010753455,
      0.010681369,
      -0.18600883,
      0.0026231296,
      -0.004458358,
      -0.00022767404,
      -0.011712408,
      0.0015920689,
      0.0186521,
      -0.03444494,
      0.014023368,
      -0.015465304,
      0.0071226456,
      -0.007868159,
      -0.011824984,
      0.028863024,
      0.020376692,
      -0.0064243013,
      -0.019681606,
      0.00509647,
      0.00890239,
      -0.015217727,
      -0.011889109,
      -0.021491874,
      -0.008588562,
      -0.005877836,
      -0.0027674413,
      -0.020173443,
      0.019429116,
      -0.013535838,
      -0.026016163,
      -0.009619635,
      -0.006390126,
      -0.0058375825,
      0.006306925,
      -0.021021761,
      0.0010918383,
      0.0038395056,
      0.015422353,
      0.0021615496,
      0.00829618,
      -0.003257297,
      0.002969087,
      0.0008953099,
      0.009981243,
      -0.01707042,
      0.006422417,
      0.005755263,
      -0.018590925,
      0.003232337,
      0.0035714235,
      -0.029213002,
      0.02333424,
      -0.002436757,
      0.00025141024,
      0.002994156,
      0.0017184742,
      -0.008418268,
      -0.018941551,
      -0.016225643,
      -0.017150631,
      0.01627174,
      0.011389934,
      0.0025504709,
      -0.17737274,
      0.026877472,
      -0.00085682125,
      -0.0050947126,
      -0.0076542585,
      -0.0061968784,
      0.00045035948,
      0.009638591,
      0.007502108,
      -0.026872912,
      0.00478435,
      0.0051273666,
      0.016722279,
      0.0053410577,
      -0.000094317475,
      -0.0036892847,
      -0.014878079,
      -0.021192065,
      0.020557467,
      0.008087827,
      -0.008047232,
      -0.015336772,
      -0.021138938,
      -0.030270409,
      -0.025671499,
      0.009690153,
      0.020901224,
      -0.0050255517,
      0.02915739,
      -0.019918432,
      0.013673589,
      -0.012407831,
      0.011016371,
      -0.016342225,
      -0.05372952,
      0.030539233,
      0.002098726,
      0.009968011,
      -0.009822502,
      0.022679638,
      -0.02836946,
      -0.026275994,
      -0.0027816282,
      0.011854693,
      -0.021616602,
      -0.0060118544,
      0.0039896327,
      0.009747251,
      0.0066359728,
      0.014695724,
      0.0066287257,
      -0.0015006067,
      0.007336923,
      0.007958072,
      0.0054497933,
      -0.012528715,
      -0.01730937,
      -0.012066527,
      0.0027858214,
      0.0004905569,
      -0.0025465097,
      -0.021290392,
      0.008628259,
      0.014026488,
      -0.023226703,
      0.008348863,
      -0.01365565,
      0.01663993,
      -0.015418012,
      -0.0073705055,
      -0.028302655,
      -0.028188255,
      0.011883627,
      0.01874659,
      -0.0128246015,
      0.02207447,
      -0.0046777204,
      -0.0025542069,
      -0.020811282,
      0.013421905,
      -0.019256786,
      0.009454879,
      0.013059259,
      -0.0022428303,
      0.026009385,
      -0.0058775893,
      -0.02345342,
      0.005852169,
      -0.035505705,
      -0.0050046653,
      0.0034976145,
      0.018163957,
      -0.0151421325,
      0.008113602,
      0.024154674,
      -0.0036420887,
      -0.012838607,
      0.0031158817,
      -0.008985414,
      0.004576447,
      -0.010045033,
      0.013689707,
      0.017627405,
      -0.013089047,
      -0.008413257,
      -0.01620272,
      -0.019357486,
      0.0045692306,
      0.017202938,
      0.02885273,
      -0.006697198,
      0.009398488,
      -0.014424702,
      0.007815516,
      -0.0020163446,
      0.02351009,
      0.026827935,
      -0.0011059573,
      -0.007969368,
      0.027921854,
      -0.010719525,
      -0.012293328,
      0.03164792,
      -0.0028946628,
      0.020226343,
      -0.024523495,
      -0.012655888,
      -0.0008162024,
      0.0127447685,
      0.035396636,
      -0.0157983,
      -0.0031118088,
      -0.0056114397,
      0.0059293914,
      -0.013584902,
      -0.0012166953,
      0.0043255156,
      0.0022765517,
      -0.015432654,
      0.016376534,
      -0.02599751,
      -0.033172537,
      -0.0013981871,
      -0.017527144,
      -0.007002229,
      -0.004527187,
      -0.026644703,
      -0.0139567405,
      -0.014409295,
      0.006719737,
      -0.008675977,
      0.0101092355,
      0.017872553,
      -0.005808703,
      0.027582733,
      0.013390498,
      0.014202552,
      -0.013966886,
      -0.008889953,
      0.012340352,
      0.004661022,
      -0.08469643,
      -0.0015047288,
      -0.0135524515,
      -0.03221726,
      -0.007685243,
      -0.0034484114,
      -0.010155716,
      0.0035775248,
      0.018089429,
      0.0036338365,
      -0.0065016462,
      0.008356812,
      0.012417209,
      -0.011649994,
      -0.013895369,
      0.022008896,
      -0.009949672,
      -0.022372462,
      0.023957299,
      -0.025180992,
      -0.011786519,
      0.004432833,
      -0.009437916,
      0.0038635498,
      0.010837415,
      -0.026908552,
      -0.01939189,
      0.027590761,
      0.011918161,
      0.0013255434,
      0.012693614,
      0.03011749,
      -0.009870622,
      0.0036122429,
      -0.015944991,
      0.011008751,
      0.0022193869,
      -0.018979715,
      0.022073634,
      -0.010533454,
      -0.018586844,
      -0.014207238,
      0.004975996,
      0.015283222,
      -0.008675639,
      0.008956217,
      -0.00497118,
      0.013049349,
      -0.023377724,
      0.00322447,
      -0.00207451,
      -0.005613117,
      -0.0003628404,
      -0.020297628,
      -0.015256944,
      -0.002146558,
      -0.019348204,
      -0.025278913,
      0.010647793,
      0.03268552,
      0.00040469316,
      -0.010970207,
      -0.017069163,
      0.006418454,
      0.016779186,
      0.01235959,
      -0.015822781,
      -0.022632215,
      0.012252598,
      -0.011081563,
      0.013321574,
      -0.021389926,
      0.0042345934,
      -0.037236847,
      0.024803974,
      0.026209088,
      0.010321946,
      -0.0003852541,
      -0.037748236,
      0.016060546,
      0.009975951,
      0.022295598,
      0.013244624,
      0.0043320996,
      0.022221839,
      0.0063943453,
      -0.0052781985,
      -0.010576185,
      -0.018211007,
      -0.024301572,
      0.00863575,
      0.011253523,
      0.0043886816,
      -0.00933499,
      -0.023482252,
      0.017565824,
      -0.0033044352,
      0.011862298,
      -0.0074818335,
      0.02875679,
      -0.028678166,
      -0.016605843,
      -0.01729865,
      -0.025326492,
      -0.0020130211,
      0.018607061,
      -0.021761375,
      -0.01323947,
      -0.0038874375,
      -0.018371131,
      0.008335525,
      0.008260362,
      -0.023266213,
      0.00082480814,
      -0.0060476395,
      0.023897633,
      0.011328069,
      0.003417355,
      0.014116818,
      -0.0061476496,
      -0.01657843,
      0.009471667,
      0.008022743,
      0.006335076,
      -0.0017571696,
      -0.013639636,
      -0.015325226,
      0.034270644,
      0.00026821584,
      -0.024524324,
      -0.03491478,
      -0.0032830706,
      0.0016657403,
      0.0027227923,
      -0.0022723775,
      -0.020055974,
      0.010031654,
      0.0026527143,
      0.010639406,
      0.004544726,
      0.004573221,
      0.019171042,
      0.009121341,
      -0.0050162124,
      -0.013049188,
      -0.0066701104,
      -0.010586386,
      -0.0047856597,
      0.014157726,
      -0.0043372754,
      -0.034500774,
      -0.008030042,
      -0.024135303,
      -0.015616305,
      0.0013956763,
      0.033558022,
      -0.0058322316,
      0.026135549,
      -0.0153566105,
      -0.013926859,
      0.006397181,
      -0.0106429625,
      0.009461357,
      -0.012874675,
      0.013561655,
      0.0038233548,
      -0.014014554,
      -0.0015603276,
      0.001517146,
      0.014385938,
      -0.006263815,
      -0.037029862,
      -0.025314419,
      0.0070540956,
      0.013192413,
      0.033241022,
      0.003148343,
      -0.014380639,
      0.013219924,
      0.0031234676,
      0.012450086,
      -0.0010167276,
      -0.013884734,
      0.005499735,
      -0.007938805,
      0.019672822,
      0.0050366092,
      -0.0034191788,
      -0.031548794,
      0.00036513183,
      -0.010159258,
      -0.02035197,
      -0.034795646,
      0.015443733,
      0.007351254,
      0.009317452,
      0.0023614378,
      -0.007949275,
      -0.0030102571,
      0.0005520211,
      0.00075214653,
      -0.020699278,
      0.009115733,
      -0.024942962,
      0.020691685,
      0.00088972854,
      -0.0043767686,
      -0.021405479,
      -0.007522696,
      0.022125708,
      0.022498036,
      0.0127519015,
      -0.0016256964,
      0.01869916,
      0.015393591,
      0.032563947,
      0.0033559103,
      -0.0016777216,
      -0.0016839853,
      -0.0071222456,
      0.027933724,
      -0.01611094,
      0.000817088,
      -0.011189722,
      -0.017754748,
      0.008012071,
      -0.01368647,
      0.017998515,
      0.010605758,
      0.0078874985,
      0.01387017,
      0.027768152,
      -0.00004898022,
      0.020873852,
      -0.033005573,
      0.0023398069,
      -0.0045356583,
      -0.0014207832,
      0.01600682,
      0.0017660459,
      -0.0060839425,
      -0.011800834,
      -0.0033713186,
      0.00038977875,
      0.0019899297,
      -0.00978627,
      0.03137361,
      0.02866442,
      -0.005951256,
      -0.015129562,
      0.024299763,
      0.033264518,
      -0.0034535262,
      -0.015048931,
      -0.017708052,
      0.022567125,
      -0.000048423386,
      0.005528274,
      0.010455814,
      0.0050266925,
      -0.017271189,
      -0.009631034,
      -0.0032660717,
      -0.001484374,
      0.014429101,
      -0.036041226,
      0.008281998,
      0.010322521,
      0.043276038,
      -0.106234446,
      0.0074430467,
      -0.007850651,
      0.01173625,
      -0.0010295269,
      -0.011576966,
      -0.012955413,
      -0.01597174,
      -0.018105382,
      0.016214823,
      -0.0030209909,
      0.009288132,
      0.010139386,
      0.011114512,
      -0.0041410606,
      -0.0051672976,
      0.0036205736,
      0.022963334,
      0.026644561,
      0.00008805047,
      0.017622992,
      0.009198771,
      -0.0039534466,
      0.012835827,
      0.0005225004,
      -0.014569291,
      0.0039676237,
      0.0029482918,
      0.013930706,
      -0.018785153,
      -0.0274525,
      -0.0029871257,
      -0.0020714907,
      0.015145221,
      0.014749474,
      -0.009669072,
      -0.0032073883,
      0.017587354,
      0.0015717595,
      0.016492065,
      -0.0044122464,
      0.02160627,
      0.0012436346,
      0.008126938,
      0.014309935,
      0.0005937436,
      0.0070698243,
      -0.0048461854,
      0.0053456696,
      0.045301862,
      -0.03527201,
      -0.02080201,
      0.0010062564,
      -0.031184638,
      0.007187209,
      -0.012157084,
      0.012287589,
      -0.0056183357,
      -0.021462508,
      -0.0009367853,
      -0.00025295006,
      0.019838452,
      0.011511012,
      0.04015172,
      -0.0099474685,
      -0.00071789534,
      0.0029446648,
      0.008088902,
      0.004361849,
      0.0029097747,
      -0.0074774874,
      -0.0002018409,
      -0.008777022,
      0.010324847,
      -0.009207409,
      -0.013170103,
      -0.032564703,
      -0.0021595815,
      -0.0211086,
      0.021157907,
      -0.029568762,
      -0.008614429,
      -0.07924259,
      -0.023317317,
      -0.013313815,
      0.0020854971,
      0.012132275,
      0.00980416,
      -0.013066309,
      0.014359578,
      -0.014375308,
      0.0010793598,
      -0.015681779,
      -0.011558899,
      0.0078976825,
      -0.008188075,
      0.00049958297,
      0.0070348512,
      -0.0034175937,
      -0.01961367,
      -0.019165719,
      0.0027588292,
      0.0030053696,
      -0.005608118,
      0.0137049975,
      -0.010729225,
      0.002809425,
      0.027918665,
      -0.03332503,
      0.005763077,
      -0.013913408,
      0.00854264,
      -0.010596375,
      -0.13812563,
      -0.022583181,
      0.014677891,
      -0.003929571,
      0.017516496,
      0.022376327,
      -0.024135282,
      -0.03222503,
      -0.0068137906,
      -0.020240745,
      -0.00035593545,
      0.0032354528,
      -0.0019599737,
      0.015155572,
      0.004079458,
      0.13457106,
      -0.012551076,
      -0.0010131084,
      0.00034478266,
      0.011578949,
      -0.018954655,
      -0.00044712485,
      -0.0000010517421,
      0.022917934,
      -0.01494548,
      -0.014228432,
      -0.0017092193,
      -0.027276328,
      0.03114974,
      0.01611435,
      0.0030135543,
      -0.008337082,
      -0.03265776,
      -0.008248865,
      0.0031469262,
      -0.032833006,
      0.008700697,
      -0.005093239,
      -0.00034745588,
      -0.026236976,
      -0.0019172847,
      -0.02559679,
      0.0038220696,
      0.017787537,
      0.011290611,
      0.011654188,
      -0.00058834255,
      -0.014183186,
      0.012998963,
      -0.014805982,
      0.0046598283,
      -0.06591066,
      -0.015417977,
      -0.0037149286,
      0.0027511595,
      0.012292679,
      0.01310674,
      0.025550643,
      -0.027253963,
      0.011861828,
      -0.0010341294,
      0.007178236,
      0.016992353,
      -0.0006261333,
      0.021063024,
      -0.00875371,
      0.009611847,
      0.012850545,
      0.031104026,
      0.0011579464,
      -0.014293133,
      0.016662175,
      0.0032910455,
      -0.01463129,
      -0.012627256,
      -0.014745197,
      -0.0015979648,
      0.03189481,
      0.0028673653,
      -0.02742608,
      0.008148201,
      -0.0033510947,
      -0.012755434,
      0.001565998,
      0.026264234,
      -0.025627606,
      -0.0031195087,
      0.020599362,
      -0.005975729,
      -0.017770758,
      -0.009283042,
      0.014259402,
      -0.008196451,
      0.049981404,
      0.0056255935,
      0.020988185,
      -0.0022502504,
      0.0059053153,
      0.021825148,
      0.019071493,
      0.010064317,
      -0.022751767,
      0.031437367,
      -0.018445738,
      0.010124742,
      -0.010457857,
      0.02749164,
      0.02833895,
      0.0051649325,
      -0.014645125
    ]
  },
  {
    "id": "genai_cohort_nodejs_09_Nodejs_SystemDesign_APIGateway_vtt",
    "content": "All right, so in this particular video, let's understand two fundamental things. That is how scaling works in microservice architecture. And second is how does people, the external users, talk to the microservices. So with that, let's start with the video. Now, one thing is that the first benefit that you get of a microservice architecture is that every service is independent. They can be scaled independently. And one more thing is what I can do is I can actually host my order service on Amazon aws. I can host my, my email service on maybe digitaloceans. I can host my payment service on some other cloud provider, because these services are decoupled from each other. Now, the problem is that, hey, let's say you have users, right? Ultimately this is a user. Now user wants to create an order. Where should this user go, right? What is the DNS server? How to communicate, like how the API structure works. So when you talk about microservice architecture, one more component comes into the picture that is known as an API gateway. Okay? So this is an API gateway. So this is a service from Amazon. Or you can even have more API gateways, okay, from other services. API gateway basically has some rules. Number one, and this is your entry point to the system. That means on your DNS server, if I have a Piyushkar dev as a domain, piyushkarg. dev let me just bring it here. So you are going to map this IP address to the API gateway, okay? So, so that means all the Internet traffic is routed to where all the Internet traffic is routed to this gateway. Now what you can do is to this particular gateway, okay, you can set up some rules. So let's say my rule is if the request, that is my host name. So Pushkar is my host name. That is host slash. If it starts with auth slash something, something. Okay, Something, something, we must redirect this particular request to the authentication service. SVC is for the service. Okay? So this is my rule number one. So that means this is the rule. Second is if this is your host, so whatever is your host name. I'll just say host name, that is push dev slash. If something starts from email and anything goes, like emails. So for example, email slash send email slash get email slash discard anything, it must go to the email SVC service. Okay? Similarly, I can just say, hey, the host name. And then I can set up a rule for orders as well. So if something starts with orders, it must go to where it must go to the order svc. So now what happens is your users are basically going to talk to the API gateway. Okay, so let's say you have a lot of users here. So I'll just make some users here. So all these users are talking to this API gateway. So let me just paste it here. Let me just also bring it here. Okay, yeah, all cool. Now what will happen is this API gateway will route the request to the NGINX of that service. That's the main catch. Okay, let me just make it as green. So this API gateway is routing the request to this particular load balancer, to the nginx, to the load balancer of that appropriate service. And this load balancer will internally route the request to one of the server. So this is how the communication happens in microservice architecture. People come, people talk to the API gateway. API gateway sends to the appropriate reverse proxy or the load balancer. This load balancer is basically set, as per rules. Like you have to tell the API gateway from like on what basis the request must be redirected and then this load balancer will internally give this request to one of the server. So this is basically a hybrid approach, if you see. So microservice architectures are easy to scale, easy to monitor, but. But yes, it comes with a lot of cost because now you have a cost for API gateway, you have a cost of a lot of servers and the maintenance is also high. And big tech giant companies always use microservices architecture.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "09-Nodejs-SystemDesign-APIGateway.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/09-Nodejs-SystemDesign-APIGateway.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0034065095,
      0.009167795,
      0.025175871,
      -0.06439339,
      -0.031934813,
      0.019679533,
      0.032962102,
      0.017569957,
      0.004362499,
      0.025571883,
      0.004185181,
      0.023475874,
      0.007167695,
      0.02918083,
      0.118850686,
      -0.025894655,
      0.010444196,
      0.0097965775,
      0.0006218898,
      -0.018926164,
      0.0033182388,
      0.0036870074,
      -0.008132007,
      0.026501717,
      0.0054279487,
      0.015245798,
      0.011968572,
      -0.012583916,
      0.014716781,
      -0.012012631,
      -0.024138737,
      -0.028062679,
      -0.00011533753,
      0.02472545,
      0.0074896156,
      -0.0032367595,
      0.007255405,
      -0.000603913,
      -0.017129486,
      -0.004965642,
      -0.020820232,
      0.0065473877,
      -0.00039152912,
      -0.010113992,
      0.0023522868,
      0.0045041894,
      -0.016909856,
      -0.029756775,
      0.00076120254,
      0.0044823824,
      -0.003140455,
      -0.008683744,
      0.023971347,
      -0.19030836,
      0.0021336987,
      -0.0028393194,
      0.00033869912,
      0.0056697386,
      -0.00046354413,
      0.010732819,
      -0.032022312,
      0.015797477,
      -0.016292099,
      0.009430894,
      -0.01137008,
      -0.014366349,
      0.023479562,
      0.009806932,
      0.014874374,
      0.0038304292,
      0.013911797,
      0.011075164,
      -0.025618926,
      -0.014468855,
      -0.018585108,
      -0.027034443,
      -0.003090329,
      -0.019063855,
      -0.0012102607,
      0.025851404,
      -0.009597858,
      -0.012021087,
      -0.0014573507,
      -0.0032352214,
      -0.0022169128,
      -0.013588031,
      -0.0005540242,
      -0.014883686,
      0.007861781,
      0.015787534,
      0.010062301,
      0.014698343,
      -0.00579292,
      -0.017015247,
      -0.0005278208,
      -0.0012720543,
      -0.018779749,
      -0.013827493,
      -0.002192984,
      -0.01788233,
      -0.00017314072,
      0.009212072,
      -0.024063779,
      0.036998283,
      -0.01017769,
      -0.0070806267,
      0.019796534,
      -0.0013135949,
      -0.015874619,
      -0.015891965,
      -0.0044496674,
      -0.018951507,
      0.018820317,
      0.0029315143,
      0.00282098,
      -0.17689037,
      0.018070709,
      -0.024023041,
      0.010185916,
      -0.001985469,
      -0.017598383,
      -0.008227003,
      0.010146401,
      0.0116868755,
      -0.019798828,
      0.003880953,
      0.0035823497,
      0.01292369,
      0.0012749776,
      0.005492937,
      -0.0066904067,
      -0.012890109,
      -0.020086804,
      0.02059939,
      -0.002294825,
      0.005762017,
      -0.0060485047,
      -0.016511297,
      -0.025736453,
      -0.0023764817,
      0.013337919,
      0.017576106,
      -0.014553295,
      0.0421108,
      0.007543635,
      0.0054663704,
      -0.022526743,
      0.01440412,
      -0.019973211,
      -0.053018346,
      0.00555326,
      0.009006566,
      -0.0014924874,
      0.0038454332,
      0.026676977,
      -0.026235476,
      -0.011687844,
      0.0076714763,
      0.013274906,
      -0.006080526,
      0.00062894885,
      0.012908238,
      0.004323782,
      0.009762,
      0.0031950495,
      -0.0060303602,
      -0.011136776,
      0.020871466,
      0.010379393,
      0.0053214924,
      -0.01736016,
      -0.011670535,
      -0.017064482,
      -0.0007787475,
      -0.001398552,
      -0.008636624,
      -0.020353807,
      0.015458628,
      0.0026469647,
      -0.020524686,
      -0.00545277,
      -0.0020031168,
      -0.009065843,
      -0.009032824,
      -0.00032974995,
      -0.02720628,
      -0.031690143,
      -0.0033704075,
      0.00814153,
      -0.009172874,
      0.018184217,
      0.0069805654,
      -0.002002432,
      -0.012074356,
      0.010710614,
      -0.020050354,
      0.0069907294,
      0.00023952388,
      -0.009954505,
      0.012313021,
      -0.016546244,
      -0.000048369784,
      0.021567263,
      -0.024707241,
      0.0025221708,
      -0.010207791,
      0.019065838,
      -0.030168425,
      0.025642725,
      0.022470681,
      -0.009313482,
      -0.027326258,
      -0.0025308738,
      -0.0051076864,
      0.018164106,
      0.006711528,
      0.010961601,
      0.008401667,
      -0.010646094,
      -0.012292155,
      -0.012757773,
      -0.0060714656,
      0.004498888,
      0.026845034,
      0.01520737,
      0.007178221,
      0.009974139,
      -0.009711231,
      0.012125661,
      -0.007715179,
      0.02041971,
      0.020306852,
      -0.006924144,
      -0.0046333754,
      0.008457997,
      -0.010469439,
      -0.0028664481,
      0.004223046,
      -0.0014690004,
      0.004916258,
      -0.0028091178,
      -0.0027920788,
      -0.007489281,
      0.013125749,
      0.018174447,
      -0.0052506584,
      0.003036425,
      -0.010522183,
      -0.007312624,
      -0.01336586,
      -0.0016785893,
      -0.004646206,
      -0.005680488,
      -0.012429016,
      0.020882761,
      -0.023566445,
      -0.027289713,
      -0.028169682,
      -0.019303741,
      -0.011495848,
      -0.0171679,
      -0.027307417,
      -0.00045134162,
      0.004232462,
      0.003456841,
      -0.0035644132,
      -0.0033382021,
      0.019481376,
      -0.0069145695,
      0.01861285,
      0.007629925,
      0.0049898727,
      -0.026340282,
      -0.014503272,
      0.011055049,
      -0.009080927,
      -0.08444716,
      0.0057981717,
      -0.00477612,
      -0.014905021,
      -0.006153543,
      -0.00785061,
      0.0011378953,
      0.004248923,
      0.0069188196,
      0.004621955,
      -0.0044008787,
      0.009059915,
      0.0017856512,
      -0.005463392,
      -0.0040314086,
      0.02709614,
      -0.021834932,
      -0.009908784,
      0.023769222,
      -0.03883993,
      -0.024183633,
      0.023436042,
      -0.00580363,
      0.005590048,
      0.010130182,
      -0.005125036,
      -0.016602825,
      0.013474223,
      -0.0041595884,
      0.0047850255,
      0.0053004473,
      0.028482353,
      -0.006873153,
      0.002380321,
      -0.008933148,
      0.008096287,
      -0.00021983862,
      -0.014694988,
      -0.0023975624,
      -0.0058667,
      -0.007410086,
      -0.012634828,
      0.0016112681,
      0.017610237,
      -0.006360245,
      0.018257553,
      -0.009248954,
      0.016736215,
      -0.014283098,
      -0.0068200296,
      -0.009412683,
      0.0162856,
      0.0020982213,
      -0.02961589,
      -0.011506143,
      -0.0021015282,
      -0.004837193,
      -0.015211783,
      0.0029925108,
      0.031954814,
      0.0011545825,
      -0.02328592,
      -0.00057342707,
      0.013079173,
      0.023436394,
      0.012659876,
      -0.016496323,
      -0.034657963,
      0.010003546,
      -0.007118851,
      0.020600809,
      -0.025490154,
      0.0018340049,
      -0.042923152,
      0.03767771,
      0.026861511,
      0.0115471445,
      -0.013160527,
      -0.026514862,
      0.01707497,
      0.004438528,
      0.019666003,
      0.00026995645,
      0.013790461,
      0.007439771,
      0.004180219,
      0.006192374,
      -0.013111117,
      -0.022750665,
      -0.025656069,
      0.01711519,
      0.013952286,
      -0.0020644546,
      0.002634407,
      -0.009629842,
      0.0065580555,
      -0.013516856,
      0.012595067,
      -0.0104367,
      0.023247939,
      -0.011054295,
      -0.0004398052,
      -0.02066579,
      -0.017329106,
      -0.019836098,
      0.03430048,
      -0.014266487,
      -0.019442348,
      -0.008036009,
      -0.013502598,
      -0.0044917427,
      0.01704557,
      -0.023800911,
      0.008263985,
      -0.0027958876,
      0.02072083,
      0.006023638,
      0.011171855,
      -0.005910672,
      -0.013570579,
      -0.025786515,
      0.014577035,
      0.007854903,
      0.007320157,
      -0.014859585,
      -0.0020979643,
      -0.015222086,
      0.015535956,
      0.01163496,
      -0.018595649,
      -0.011692216,
      -0.010133291,
      0.00966384,
      0.008949225,
      -0.0112257395,
      -0.01794872,
      0.0007970482,
      -0.011280813,
      0.01852712,
      0.015439924,
      0.003750947,
      0.014103993,
      -0.007922766,
      -0.0047031133,
      -0.015719945,
      -0.007801316,
      -0.019092958,
      0.019287007,
      0.008768561,
      -0.010343526,
      -0.029698627,
      -0.0047271308,
      -0.020380052,
      -0.023223398,
      0.010333038,
      0.02667584,
      -0.013173885,
      0.02793457,
      -0.0065357108,
      -0.0054973704,
      0.01004091,
      -0.00981324,
      -0.004849062,
      -0.00947261,
      0.011414206,
      0.003107851,
      -0.003828844,
      -0.0070998957,
      0.009464578,
      0.015029243,
      -0.0047216197,
      -0.01611598,
      -0.034263767,
      0.025354011,
      0.00092439546,
      0.014691749,
      0.0043040323,
      -0.00047161605,
      0.009150979,
      0.013824541,
      0.011154665,
      -0.003344171,
      -0.011781729,
      0.0007359673,
      0.0070200493,
      0.01194762,
      0.002852747,
      -0.004446624,
      -0.04088181,
      -0.00270089,
      -0.010849964,
      -0.015111867,
      -0.03085868,
      0.027939193,
      -0.008614393,
      0.0012821816,
      -0.0018842599,
      -0.010113853,
      0.0022884025,
      -0.009132886,
      0.0041570496,
      -0.022488134,
      0.015771562,
      -0.014979265,
      0.017348211,
      -0.0009914254,
      -0.0041807103,
      -0.011234378,
      -0.007959195,
      0.021126602,
      0.026497912,
      0.0112984935,
      0.005655181,
      0.0034298962,
      0.016342284,
      0.009246286,
      -0.0004982429,
      -0.004482995,
      -0.0004431287,
      -0.00787778,
      0.030587321,
      -0.027887417,
      -0.013256142,
      -0.006074361,
      -0.021703342,
      0.010168389,
      -0.018905904,
      0.008982757,
      0.01166302,
      -0.003995088,
      0.0014633124,
      0.03577776,
      0.02247236,
      0.027547207,
      -0.02676518,
      -0.0028755362,
      -0.000060079863,
      0.00080085755,
      0.014344191,
      0.0009912576,
      0.019217381,
      -0.0136705935,
      -0.02899203,
      -0.011481841,
      -0.00984597,
      -0.019114284,
      0.031671964,
      0.015256107,
      -0.005409331,
      -0.029954258,
      0.021009903,
      0.04468014,
      0.00802366,
      -0.02274057,
      -0.012703212,
      0.013994586,
      -0.004375203,
      -0.012907895,
      0.0071266415,
      0.009665724,
      -0.010111871,
      0.0024980283,
      -0.0014805112,
      0.013832295,
      0.012811219,
      -0.028499333,
      0.0264075,
      -0.002058776,
      0.024487648,
      -0.12008669,
      0.013905001,
      -0.009183239,
      0.0020515574,
      -0.012712505,
      -0.023536526,
      -0.017774247,
      -0.026034698,
      -0.0072857486,
      0.0068878946,
      -0.0060122153,
      0.016395232,
      0.012853799,
      0.0068466323,
      -0.00080126466,
      -0.007795891,
      -0.0066138823,
      0.021230787,
      0.02868768,
      0.0032287268,
      0.005543753,
      0.008833411,
      -0.019574419,
      0.017410573,
      -0.008506344,
      -0.021673476,
      -0.012147363,
      -0.0042118886,
      0.022382855,
      -0.013248799,
      -0.017566262,
      0.00047793877,
      0.0034114376,
      0.015581573,
      0.010075501,
      -0.008129959,
      0.006026646,
      0.015597909,
      0.001993191,
      0.014434523,
      -0.0026193652,
      0.015827956,
      0.0031209167,
      0.007986514,
      -0.0018709322,
      0.010978998,
      0.012835412,
      -0.013173681,
      -0.0021288074,
      0.035240274,
      -0.031618167,
      -0.0050263368,
      -0.018475028,
      -0.023806568,
      0.02464791,
      -0.010253241,
      0.023949387,
      -0.010981883,
      -0.03032685,
      0.011311543,
      -0.0052859825,
      0.026128158,
      -0.004927023,
      0.03331818,
      -0.015795602,
      0.005244581,
      -0.0075928015,
      -0.0009009593,
      0.012018881,
      0.011304273,
      -0.0035522557,
      0.0016113877,
      -0.0061906003,
      0.020909606,
      -0.0007887312,
      -0.010330926,
      -0.019233495,
      0.0018310169,
      -0.018753357,
      0.02407432,
      -0.033776075,
      0.006808856,
      -0.088170044,
      -0.002714222,
      -0.007286896,
      -0.0035088682,
      0.01817117,
      0.0031067608,
      -0.010301042,
      0.019356053,
      -0.0056347176,
      0.016107392,
      -0.021916034,
      -0.01717981,
      0.0015276094,
      -0.029583469,
      -0.005699953,
      0.0061272997,
      -0.0037902864,
      -0.010407951,
      -0.013699131,
      -0.0006093502,
      0.003091713,
      -0.0054243556,
      0.0073633883,
      -0.008039763,
      -0.01035158,
      0.027795292,
      -0.021265764,
      0.010753401,
      -0.010168265,
      0.002384559,
      -0.010983537,
      -0.120711945,
      -0.009079384,
      -0.014764343,
      0.017063797,
      0.017823173,
      0.014333923,
      -0.017251914,
      -0.017977217,
      0.011351713,
      -0.020331807,
      0.018469676,
      -0.010216587,
      -0.0023773971,
      0.006079633,
      0.00043817426,
      0.12773615,
      -0.0033251725,
      0.01867097,
      0.0011673311,
      0.00008697215,
      -0.0009653951,
      0.006967802,
      0.017657323,
      0.017456433,
      -0.013495276,
      -0.009832361,
      0.003004037,
      -0.013123914,
      0.031199787,
      0.019347843,
      0.0074752048,
      -0.0059751947,
      -0.032789182,
      0.01601235,
      0.0052163233,
      -0.036541183,
      0.03547771,
      -0.0075854426,
      -0.008424397,
      -0.020184988,
      0.004107044,
      -0.020104753,
      -0.021460844,
      0.0087113045,
      0.012049746,
      0.002270781,
      0.003119428,
      -0.0039025892,
      0.012820795,
      -0.010928436,
      0.0066059157,
      -0.07092206,
      -0.0067546605,
      0.008987555,
      -0.00023654704,
      0.009568693,
      0.013540353,
      0.021349672,
      -0.018727902,
      0.0049189813,
      -0.009821031,
      0.0053390805,
      0.026119951,
      -0.014379224,
      0.009191687,
      -0.0029577322,
      0.02129458,
      0.019286884,
      0.027839458,
      -0.00061459193,
      -0.0072615123,
      0.017934106,
      -0.014982892,
      -0.01027312,
      -0.012555372,
      -0.010221246,
      0.011157487,
      0.04068855,
      -0.00499569,
      -0.009724477,
      0.0032342395,
      -0.0013017904,
      -0.013295414,
      0.008070999,
      0.027469309,
      -0.020033024,
      -0.018982882,
      0.014896357,
      -0.0029438704,
      -0.012810562,
      0.0034251304,
      0.00477114,
      -0.0006419656,
      0.041028634,
      0.0023022853,
      0.023004316,
      -0.011853666,
      0.002227782,
      0.020156711,
      0.022238778,
      0.0065646474,
      -0.038064875,
      0.027546652,
      -0.01475593,
      0.00406948,
      -0.012986151,
      0.017616905,
      0.020008104,
      0.020285074,
      -0.0241457
    ]
  },
  {
    "id": "genai_cohort_nodejs_10_Nodejs_SystemDesign_HTTPSync_vtt",
    "content": "All right, so we are going really great with microservice architecture and we are understanding the ins and outs of the microservice architecture. But here is one more fundamental problem that how do microservices are going to communicate with each other? Let's say the order service wants to talk to the email service because you know, when you place an order you want to send an email to the user. So this is a fundamental problem that how to establish this order service, right? This, this communication in between the services. How to establish this communication, how to establish this communic. So there are two methods of establish this particular, you know, communication. One is known as a synchronous, okay, a synchronous communication. And one is known as asynchronous communication. So let me just get the terms first. Sync means something is happening in the sync, right? You have to talk to the service and you have to wait for the response back. That is a sync. When we talk about async means that, hey, you know, do it in the background. That is async. So we will talk about these things in the detail. But these, the fundamental problem is how services can communicate with each other. So in this particular video, let's talk about the HTTP sync method. One method is very simple that what you can do is you can directly, you can directly say the order service that hey, whenever you want to send an email, just make an HTTP call. See how users are basically interacting with the email service using slash email. So order service can also make a post request on/emails/ let's say send and send the payload as body, okay, whatever they want to send and they can talk to each other. So that means any server, right? Any server right here, if it wants to send an email, it has to basically talk to the load balancer of the email service. Now this request can be redirected to any one of the server that is that is all good. And then what we can do, we can basically send the email. This is known as a synchronous method. Okay? This is a synchronous method because when you open a post request, when you open this connection, you have to wait, you have to wait for the email service to complete that particular request and get back the response of Here is a fundamental problem with this approach, the synchronous approach. Number one, that it's a blocking request. Let's say for some reasons the email server was down. For some reasons the email service has been down. Now what will happen is when you will make this particular connection. When you will try to send this request, this request will also fail, right? And if this request fail, this server might also fail because it was dependent on the email service and it was not able to complete. So this is one problem that if this thing fails, this thing also starts to fail. Second problem is that now what you are doing is that it becomes a dependent service. Order service has to know the address of the email service, right? What if there was no email service? So, so order service is now, you know, linked with is dependent on the email service to be healthy. If this service is down, this server might went down. So this is a problem. But that's okay. I mean, I'm not discussing the problem here. I was basically telling you that this is known as a synchronous method. So inside the code you can actually make an API call to the email service, do your stuff, come back and do the stuff. So this was a synchronous method. This method is good, it is guaranteed that the email will be sent. But this introduces new set of problems that it is more dependent. There is a high coupling and we usually do not prefer this method. So to solve this particular method we have an asynchronous method. So in the next video, let's see what is the asynchronous method to communicate between the services.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "10-Nodejs-SystemDesign-HTTPSync.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/10-Nodejs-SystemDesign-HTTPSync.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0021488029,
      0.022747394,
      0.020130573,
      -0.056750685,
      -0.032264464,
      -0.0014282011,
      0.02442377,
      0.017987823,
      -0.008162878,
      0.008972807,
      0.004519384,
      0.021812495,
      -0.0035743183,
      0.03276773,
      0.0937481,
      -0.03351983,
      -0.0038846561,
      -0.0021119283,
      -0.019069305,
      -0.015769098,
      0.0018309121,
      -0.006128122,
      -0.010533728,
      0.024042945,
      0.014259369,
      0.025044292,
      0.00462131,
      -0.009426952,
      0.0041667265,
      -0.009788937,
      -0.0145345945,
      -0.019043166,
      -0.0041414276,
      0.041533172,
      0.017050803,
      0.009946936,
      0.0012259865,
      0.00018493563,
      -0.020167317,
      0.009898068,
      0.0036162438,
      -0.0028215535,
      0.011778408,
      -0.008509717,
      -0.0042653284,
      0.00028506815,
      -0.0046034222,
      -0.0072571053,
      0.0038605193,
      -0.0066196984,
      -0.0055022095,
      -0.006087984,
      0.013914437,
      -0.18526344,
      0.001642453,
      0.0068168854,
      0.0005597847,
      0.004117547,
      0.008638619,
      -0.00048516356,
      -0.016970187,
      0.014162582,
      -0.012237995,
      0.0055245287,
      -0.012861336,
      -0.014195526,
      0.026601436,
      0.01405667,
      0.01683041,
      -0.0015081335,
      0.011046676,
      -0.009638341,
      -0.023397965,
      -0.005427147,
      -0.011573041,
      -0.022945624,
      -0.0067671416,
      -0.0040289545,
      -0.012922881,
      0.000035449604,
      0.0053531085,
      -0.03660975,
      0.014898975,
      -0.00548976,
      0.006326823,
      -0.00090102537,
      -0.02816789,
      0.001601873,
      -0.013920213,
      0.028270343,
      -0.0035900974,
      0.012028522,
      0.0056471163,
      -0.013535596,
      0.007546644,
      0.0041105244,
      -0.010476106,
      -0.011140881,
      -0.015193845,
      -0.026161874,
      0.012268299,
      0.005817355,
      -0.027137738,
      0.04042149,
      -0.0036974347,
      -0.021534147,
      0.007381789,
      0.0035805907,
      -0.016709516,
      -0.021063251,
      0.006938139,
      -0.025755309,
      0.0032227146,
      -0.0016739101,
      -0.018949255,
      -0.18295532,
      0.013960944,
      -0.010327953,
      0.007948231,
      -0.011890239,
      -0.018137539,
      -0.011745191,
      -0.004241563,
      -0.0013712143,
      -0.026307536,
      0.013132569,
      -0.0040851175,
      0.009431964,
      0.02129987,
      0.017701397,
      0.0076021147,
      -0.019447163,
      -0.022559235,
      0.041743927,
      0.0113921845,
      0.008791315,
      -0.0043876176,
      -0.026406916,
      -0.014170266,
      -0.01729614,
      0.029314822,
      0.019497668,
      -0.009867584,
      0.035067864,
      -0.009854772,
      0.027255254,
      -0.014952746,
      0.0035601186,
      -0.014175771,
      -0.05358729,
      0.01688687,
      0.015149123,
      0.0049543185,
      0.0034986818,
      0.017966326,
      -0.027425999,
      -0.0143016735,
      -0.00020943346,
      0.014992436,
      -0.029959945,
      -0.015076595,
      0.009492294,
      0.008364591,
      -0.0037054569,
      0.007317788,
      -0.0061726975,
      -0.01832332,
      0.0112760905,
      0.006990159,
      -0.0031520529,
      -0.0080796275,
      -0.023737898,
      -0.011162868,
      0.002468684,
      -0.002211072,
      -0.010468111,
      -0.011090566,
      -0.004543296,
      0.013479161,
      -0.0035375701,
      0.008663248,
      -0.019673085,
      -0.0036223335,
      -0.034482665,
      0.0010832822,
      -0.019073006,
      -0.028868886,
      0.0023297085,
      0.008873143,
      -0.011339754,
      0.0053728768,
      0.008350823,
      0.002941985,
      -0.011281521,
      -0.0015268514,
      -0.023021014,
      -0.016906317,
      -0.008502826,
      -0.018240899,
      -0.002427707,
      -0.008468668,
      -0.022816524,
      0.008318724,
      -0.023689607,
      0.010586508,
      -0.0031631105,
      0.01267574,
      -0.01364606,
      0.008791701,
      0.015090177,
      -0.0053317714,
      -0.033677116,
      0.014434512,
      -0.018730937,
      0.007237923,
      -0.0015592988,
      0.017249754,
      0.025897278,
      -0.012547001,
      -0.017069545,
      -0.006420532,
      -0.015555344,
      -0.010753044,
      0.014183562,
      0.01817676,
      -0.0011479442,
      0.006841459,
      0.014259441,
      0.0072078733,
      0.01346064,
      0.006142419,
      0.009887648,
      -0.021241428,
      -0.01616754,
      0.025686093,
      -0.012402466,
      0.00102693,
      0.012625051,
      0.0027136633,
      0.0034616403,
      -0.018208222,
      -0.016216364,
      -0.014278606,
      0.015714953,
      0.021840416,
      0.018027805,
      -0.009542685,
      0.007476766,
      0.011895299,
      -0.025706649,
      0.029600527,
      -0.0034839213,
      0.0072414824,
      -0.017918063,
      0.0070485394,
      -0.021381963,
      -0.022518435,
      -0.009528517,
      -0.016940037,
      -0.024648312,
      -0.0074647954,
      -0.02547981,
      -0.016686002,
      0.009913149,
      0.0035768996,
      -0.0033687016,
      0.010190212,
      0.005332136,
      -0.017523836,
      0.01538815,
      -0.0110718105,
      0.002557644,
      -0.0066962033,
      -0.013511464,
      -0.00511703,
      0.004061097,
      -0.09611466,
      0.013060627,
      -0.0029980075,
      -0.03656836,
      0.0018979157,
      -0.015134172,
      -0.013413906,
      0.007878355,
      0.010860525,
      -0.0070197103,
      0.0048638904,
      -0.01053224,
      -0.0019321205,
      -0.02168543,
      -0.011079441,
      0.007610906,
      -0.00482925,
      0.0059579504,
      0.031223109,
      -0.021609535,
      -0.009166625,
      0.018611392,
      -0.002700298,
      -0.008089991,
      0.011143326,
      -0.019086618,
      -0.03183797,
      0.0077064005,
      0.00247945,
      -0.008988461,
      0.00041837498,
      0.020413714,
      -0.006284727,
      -0.005785699,
      -0.01793976,
      -0.005630741,
      0.0052241078,
      -0.006806843,
      -0.0017399642,
      0.001317723,
      -0.018710034,
      -0.018234503,
      0.0066440357,
      0.0038414504,
      -0.005060151,
      0.0013287985,
      0.019665528,
      0.030022016,
      -0.022075947,
      0.017738724,
      -0.00081795634,
      -0.017723383,
      0.011148505,
      -0.03569197,
      -0.004621631,
      0.023676345,
      0.0034213527,
      0.0034804167,
      0.008844286,
      0.023909222,
      -0.013341168,
      0.012006358,
      0.0017580098,
      0.018048441,
      0.0032301778,
      0.008169294,
      0.0033161626,
      -0.013967863,
      0.002022122,
      0.0112514775,
      0.01738763,
      -0.017471608,
      -0.010144002,
      -0.033026803,
      -0.0042745853,
      0.022375332,
      0.008675765,
      0.0026367526,
      -0.032584976,
      0.030054647,
      0.0200356,
      0.013822638,
      0.005394902,
      0.03368495,
      0.021042224,
      0.0072155693,
      -0.010940286,
      -0.011441106,
      -0.00045853574,
      -0.021071129,
      0.0114433365,
      0.018338634,
      -0.023477284,
      0.0059753475,
      -0.0008224125,
      0.017272554,
      -0.016008519,
      0.016368924,
      -0.007916644,
      0.0238878,
      -0.019555438,
      0.00347353,
      -0.005835297,
      -0.011464235,
      -0.0098221535,
      0.04531271,
      -0.020117331,
      0.0032693788,
      0.010733735,
      -0.024501741,
      -0.008329162,
      0.0013904868,
      -0.02452293,
      0.0029864393,
      0.00042587746,
      0.01843199,
      0.0035489628,
      0.002956626,
      0.009300977,
      -0.0061864476,
      -0.013442751,
      0.018187903,
      0.015009365,
      -0.0012113613,
      -0.006959805,
      0.0039082374,
      -0.0062810816,
      0.020572485,
      -0.00034027954,
      -0.024687974,
      -0.011890215,
      -0.0017598646,
      0.005778037,
      0.009389632,
      -0.0017283579,
      -0.028851362,
      0.0049278326,
      0.0028953818,
      0.0332646,
      0.005668923,
      -0.011528088,
      0.0064584077,
      -0.0011108943,
      -0.0052207964,
      -0.0047152336,
      -0.0030749922,
      -0.016560877,
      0.0102078905,
      0.018156825,
      -0.022939945,
      -0.01819801,
      -0.012648665,
      -0.046098143,
      -0.013352292,
      0.010286679,
      0.02881952,
      -0.007668599,
      0.020814741,
      -0.0053960686,
      -0.020449128,
      -0.0021480005,
      -0.014103397,
      -0.0119664045,
      -0.008636583,
      0.008321571,
      -0.002696799,
      -0.009343209,
      0.02798519,
      -0.009719041,
      0.014912816,
      -0.016482145,
      -0.010694749,
      -0.042093627,
      -0.004027203,
      0.019843822,
      0.002616866,
      -0.012649407,
      -0.017499417,
      0.030412981,
      0.0053047733,
      0.010068675,
      -0.008218095,
      -0.012928499,
      0.015525247,
      -0.014047246,
      0.023275388,
      0.02629552,
      -0.004971337,
      -0.016941264,
      0.0073246104,
      -0.030710187,
      -0.008289937,
      -0.024489416,
      -0.0025451784,
      -0.0023181934,
      0.018181574,
      0.0017615856,
      -0.01768302,
      0.009374896,
      0.008538121,
      -0.017285347,
      -0.00060849066,
      0.015489665,
      -0.0086851,
      0.0072789127,
      -0.008414819,
      -0.00038971074,
      -0.038507964,
      -0.025130672,
      0.025300529,
      0.02188712,
      -0.0029955455,
      0.005437627,
      0.011411718,
      0.0155745195,
      0.019456374,
      -0.0057306997,
      -0.0076332036,
      0.00038331735,
      -0.012793778,
      0.00799557,
      -0.04090044,
      -0.009542583,
      -0.008717871,
      0.0059904256,
      0.0052389405,
      -0.021688022,
      0.03260568,
      0.002745014,
      0.005096112,
      0.009608344,
      0.009065493,
      0.0014204525,
      0.016965369,
      -0.02108163,
      -0.008925069,
      0.0024269072,
      -0.0031677722,
      0.023209486,
      -0.0009147511,
      0.012127291,
      -0.003912147,
      -0.022226758,
      -0.0066012857,
      0.014130434,
      0.005136661,
      0.02179711,
      0.011564306,
      -0.01321693,
      -0.013151273,
      0.030435402,
      0.029073082,
      -0.0039665117,
      -0.025348637,
      -0.013572818,
      0.021108733,
      0.0044358443,
      -0.014588503,
      -0.00232761,
      0.0035316977,
      0.0025570563,
      -0.017260473,
      -0.0029107274,
      0.0017984043,
      -0.002117462,
      -0.028810147,
      0.0127171725,
      0.0030524512,
      0.04257184,
      -0.11373668,
      0.01785592,
      -0.020787882,
      -0.004699355,
      0.005518056,
      -0.0016875821,
      -0.0021209877,
      -0.011887803,
      0.001844236,
      -0.004129189,
      0.0015345314,
      0.009221064,
      0.006474838,
      -0.00859949,
      -0.005910845,
      0.007279131,
      -0.010644972,
      0.028706655,
      0.019538142,
      -0.0051363874,
      0.019637708,
      0.010420387,
      -0.0028722058,
      0.033446386,
      0.0034295658,
      -0.008385457,
      -0.009694674,
      0.011084865,
      0.0044380217,
      0.005909431,
      -0.01722226,
      -0.006405825,
      0.004447708,
      0.0046331645,
      0.023046177,
      -0.0030863031,
      0.0003718067,
      0.000053006315,
      0.02297142,
      0.03187202,
      0.0031940667,
      0.013505808,
      -0.0034608743,
      0.008801086,
      -0.0076104817,
      -0.011137257,
      0.013243984,
      -0.017964253,
      -0.012206365,
      0.020092754,
      -0.049612775,
      -0.033177245,
      -0.012995016,
      -0.042921893,
      0.022644252,
      -0.018768469,
      0.01922491,
      0.018294659,
      0.0005177162,
      0.0013336843,
      -0.011538639,
      0.016896395,
      -0.012383363,
      0.033050086,
      0.0066953967,
      -0.0037404664,
      0.007084208,
      0.01169853,
      0.009967134,
      -0.00020702097,
      -0.01579837,
      0.0014864696,
      -0.009536687,
      0.031571105,
      -0.012202509,
      -0.0057471963,
      -0.02152134,
      0.007898539,
      -0.016584013,
      0.021214468,
      -0.02212696,
      -0.012716123,
      -0.072768696,
      -0.010110021,
      -0.010143349,
      -0.007366826,
      -0.008609818,
      0.0048512197,
      -0.005083168,
      0.0032483898,
      -0.0035063077,
      -0.0045304024,
      -0.008818285,
      0.005670842,
      0.007119535,
      0.003509931,
      -0.004590873,
      0.013442621,
      0.0143391825,
      -0.025370466,
      -0.0104438,
      0.007833676,
      0.014014362,
      -0.0057885605,
      0.015957987,
      -0.011063973,
      -0.009050291,
      0.028332397,
      -0.033792816,
      0.013392089,
      -0.013726257,
      -0.0068883393,
      -0.009600485,
      -0.13528812,
      0.001954618,
      0.0029952265,
      0.02665883,
      0.026118418,
      0.026715914,
      -0.008397799,
      -0.02950823,
      0.015033714,
      -0.024093404,
      -0.0064923656,
      0.0007653581,
      -0.016475722,
      0.0080018565,
      -0.0024690202,
      0.13177426,
      -0.0037134273,
      0.024518065,
      -0.00046443776,
      0.00015683989,
      0.017207693,
      0.0047760485,
      0.0014187087,
      0.01946773,
      -0.013194455,
      -0.00057162595,
      -0.00038549284,
      -0.019676903,
      0.03930961,
      0.013436054,
      0.00526292,
      0.0037230058,
      -0.03290725,
      0.018650511,
      -0.02194513,
      -0.023750978,
      0.023237985,
      -0.016721277,
      -0.0018366735,
      -0.008682734,
      -0.0015001117,
      -0.01426594,
      -0.017817615,
      -0.0103606535,
      0.003044604,
      0.010691787,
      -0.0022571571,
      -0.019603545,
      -0.0011380465,
      -0.022844044,
      0.003658306,
      -0.052201834,
      -0.005290601,
      -0.00739962,
      -0.0072309193,
      -0.00064263033,
      0.017296659,
      0.024508433,
      -0.012945402,
      -0.0006796789,
      0.0051715435,
      0.0101415645,
      0.019789081,
      0.015205335,
      0.007824869,
      -0.006114437,
      0.018559951,
      0.0337597,
      0.01923298,
      -0.0035556015,
      -0.0047773006,
      0.010467468,
      -0.020391367,
      -0.014764936,
      0.0015342141,
      -0.00469287,
      -0.0058184145,
      -0.0001315484,
      0.0020646222,
      -0.015556738,
      0.0010583875,
      0.014717152,
      0.008614321,
      -0.0077592563,
      0.019411465,
      -0.01854987,
      -0.025296947,
      0.015472788,
      0.0014048257,
      -0.016837414,
      0.0081601,
      -0.0049414686,
      0.013828394,
      0.05139515,
      -0.0053409343,
      0.014802375,
      -0.013199416,
      0.015773866,
      0.023479974,
      0.01717282,
      0.0035700176,
      -0.03277395,
      0.009081039,
      -0.007930428,
      0.022966426,
      -0.008106078,
      0.021432431,
      0.007396473,
      0.012163806,
      -0.02113064
    ]
  },
  {
    "id": "genai_cohort_nodejs_11_Nodejs_SystemDesign_QueueAsync_vtt",
    "content": "All right, so in this particular video, let's understand the asynchronous method of talking between the services, the communication between the services. So the most common thing, so let me just delete this particular stuff. Okay, so the most common thing that we use to establish a communication between the order service is known as a queue system. Okay, so what is a queue? So if we talk about a queue, okay, so that's that this a queue. And let me just make it, solid. A queue works on a FIFO principle. FIFO is first in and first out. Okay, first in, first out. That means what you can do is you can keep on enqueuing something here that is in cube, that is pushing something into the cube. So let's say that this is a data that you want to put it in the queue. So let's say this is your data one, data two, data three, data four and data five. And then from the other end you can keep on dequeuing the stuff, okay? DQ. So DQ happens in the sequence like 1, 2, 3, 4, 1, 2, 3, So this is your queue. So what we can do in an microservice asynchronous architecture is we can introduce a queue. So let's say what I'm going to do is I'm going to introduce a queue system. So let's search for sqs. This is a queue system by aws. Okay, so these are just terms. That's okay whenever you place an order, okay, let's name this queue as, you know, order queue. Let's say this is an order queue, okay? Or maybe I'll just name it as email queue. Okay, Email queue. So what you can do is basically you can push something into the queue. Okay? Now when you push something into the queue, pushing something into the queue is instant. You need not to wait for it. Just push into the queue and forget it. Okay? Just push into the queue and forget it. So you are basically just pushing messages into the queue and you don't have to worry if someone is on the other side of the queue or not. So you are basically enqueuing the message into the queue, but need not to worry that if there is someone de queuing these messages or not now what will happen is this is known as in queue, right? So what you are doing here is basically in queuing the messages, okay? Now this email service, on their own pace can keep on dequeuing these messages, okay? So let me just change the color. Let's say this one. So they are basically DQ DQing the message one by one and sending the email and then processing it. Now the benefit of this particular architecture is that let's say the email service is only capable of sending five messages per, let's say per second. Okay, it can only send five messages per second. But the orders are actually placed in a very vast majority. You know, the people are placing like hundreds of orders per second. So what you can basically do is you can just throw these messages into the queue, just keep on throwing, throwing, throwing, throwing, throwing, and then. But on the email service you can actually pull the message in a controlled manner. Got. Now that is the reason that when you place an order, sometimes you receive an email later. Because what happens is if there are hundred orders, so there are hundred messages in the queue, that's okay, they are lying in the queue. But you can still, you, know, dequeue the messages at the rate of five messages per second. So you pull five, now you are left with 95, you pull another five, now you are left with So what happens is this, this also acts as a bottleneck in the system so that the email service is not down. And email service can work on its own pace. Similarly, you can even have more queues. For example, there is a payment queue, right? So let's have a payment queue. So whenever you want, whenever the payment queue wants to, you know, whenever the order wants to request a payment, you can just put it into the payment queue. The payment queue can poll the messages. Basically dequeue the messages at their own pace. So whenever you talk about a microservice architecture, internal communication of the microservices usually happens through a queue system because number one, it is more scalable. It helps you to decouple. Because what happens is, let's say the email service is down, let's make the email service as down. So I'll just make it as red. So what happens is still you can put the message into the queue. You don't have to worry if the email service is up and running and it is pulling for the messages. So what will happen is the messages will get, you know, the queue will be getting filled, there will be more messages into the queue. But whenever, whenever the developer comes back and he fixes the email service and email service is back up and running, then you can again start pulling the messages so you are not losing onto the messages and it is more decoupled approach. So queues are commonly used between, as a communication protocol, between microservices. In a microservice architecture.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "11-Nodejs-SystemDesign-QueueAsync.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/11-Nodejs-SystemDesign-QueueAsync.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.013902197,
      0.025808254,
      0.012636416,
      -0.0609127,
      -0.037780806,
      0.00932521,
      0.017263692,
      0.011985254,
      -0.004294862,
      0.0034275283,
      0.0046989038,
      0.014957149,
      0.013379582,
      0.040065866,
      0.114022836,
      -0.017554468,
      -0.011637126,
      -0.0013642168,
      -0.030149987,
      -0.01930485,
      -0.0074716136,
      0.004098209,
      -0.007369507,
      0.019655883,
      0.008654749,
      0.0068826205,
      0.032622322,
      -0.0069674416,
      0.002218503,
      -0.0013174932,
      -0.014826466,
      -0.0047243843,
      -0.008681053,
      0.032910176,
      0.002950332,
      0.009922993,
      0.019100145,
      -0.0019151948,
      -0.024350349,
      0.014185294,
      -0.004355397,
      0.0007719458,
      0.007342349,
      0.0016750487,
      -0.0074715544,
      0.0015336918,
      -0.0050797113,
      -0.009189062,
      0.009695295,
      -0.0093385065,
      0.008845454,
      -0.0077372757,
      0.0022561618,
      -0.18316658,
      0.0077957027,
      0.0049220286,
      -0.0023545409,
      0.0040323273,
      0.007055558,
      -0.0020035785,
      -0.012428478,
      0.0033141673,
      -0.014597939,
      -0.006883291,
      -0.0031128756,
      -0.0014875492,
      0.019045386,
      0.018096374,
      0.013934816,
      0.0032105185,
      0.01970139,
      0.0039619985,
      -0.011103567,
      -0.00133503,
      -0.012693444,
      -0.035939604,
      -0.01500907,
      -0.007944734,
      -0.018891482,
      0.010338322,
      -0.01212046,
      -0.028988192,
      0.009671849,
      -0.0025449872,
      0.0009321638,
      -0.0068114945,
      -0.017537536,
      0.008562893,
      0.011645162,
      0.005397798,
      0.010633738,
      0.009024406,
      -0.0071209734,
      -0.022505658,
      -0.0024878231,
      -0.0011477631,
      -0.006746859,
      -0.00095637736,
      -0.030372875,
      -0.014302986,
      0.011563623,
      0.011838535,
      -0.026454508,
      0.02728509,
      0.004387222,
      -0.025292614,
      0.00753066,
      0.0018184197,
      -0.0011005431,
      -0.018502178,
      0.0020558112,
      -0.02347529,
      0.031040384,
      0.005771045,
      -0.006443714,
      -0.17363718,
      0.0113283,
      -0.007701408,
      -0.0033952543,
      -0.0020731825,
      -0.015228205,
      -0.0012434303,
      0.00567623,
      0.0003059224,
      -0.018603094,
      -0.0054605342,
      0.0041385796,
      -0.0009342832,
      0.018212825,
      0.0068558925,
      -0.013169496,
      -0.016259989,
      -0.028595641,
      0.017733589,
      0.0144679025,
      0.008275744,
      -0.0011161393,
      -0.019489452,
      -0.019130897,
      -0.017595036,
      0.01929243,
      0.024463028,
      -0.01597926,
      0.03071995,
      -0.0021270982,
      0.016623365,
      -0.01668775,
      -0.0012276154,
      -0.019845266,
      -0.032240845,
      0.015902624,
      0.0058016162,
      0.0039029475,
      0.005919705,
      0.01972026,
      -0.019477306,
      -0.007900974,
      0.0027272701,
      0.026161937,
      -0.011646551,
      -0.01985219,
      0.012428256,
      0.0052846293,
      0.0118197,
      0.004734737,
      -0.004338618,
      -0.005660079,
      0.029129623,
      0.01556118,
      -0.0006974367,
      -0.016630048,
      -0.012347026,
      -0.013526709,
      -0.00089809514,
      -0.00212424,
      0.01032099,
      -0.0047642365,
      -0.011163042,
      0.021686481,
      -0.0073133926,
      0.009039659,
      -0.024661412,
      -0.011399922,
      -0.00749916,
      -0.003790312,
      -0.010915458,
      -0.03573692,
      0.00532634,
      -0.00019236044,
      -0.00048663068,
      0.0020995575,
      0.009078021,
      0.0121675925,
      -0.0046837553,
      -0.0019825485,
      -0.018850382,
      0.0013090308,
      0.013202893,
      -0.022777935,
      0.019304777,
      -0.01031221,
      -0.0148155335,
      0.016339343,
      -0.029102247,
      0.012139007,
      -0.015617802,
      0.011146209,
      -0.020820543,
      0.007895143,
      0.017785382,
      -0.0013066911,
      -0.02669885,
      0.024654135,
      -0.0061057354,
      0.011864089,
      0.001241045,
      0.019268973,
      0.018422646,
      -0.015423945,
      -0.027806455,
      -0.016532103,
      -0.0153863635,
      0.014943375,
      0.007500917,
      0.024480922,
      0.006574984,
      -0.0070046275,
      0.0071167746,
      0.011169381,
      -0.003908481,
      0.010226253,
      0.006193407,
      -0.029745806,
      -0.0013646703,
      0.016394624,
      -0.0069729025,
      -0.0004261058,
      0.019509697,
      0.02052421,
      -0.00012203124,
      -0.009765925,
      0.004295867,
      -0.007977616,
      0.009904394,
      0.015063993,
      0.00606922,
      -0.000094246876,
      0.009905195,
      0.007970667,
      -0.03094878,
      0.009351826,
      -0.0037741947,
      -0.002351524,
      -0.01803476,
      0.009930329,
      -0.025012545,
      -0.040103074,
      -0.007393299,
      -0.023548024,
      -0.0073817885,
      -0.018386804,
      -0.032588955,
      -0.023726376,
      -0.0056367125,
      0.0044579464,
      -0.008759589,
      0.013062701,
      0.017312543,
      -0.009161962,
      0.015861392,
      0.008411056,
      0.0024088677,
      -0.019207278,
      -0.0024763441,
      0.00059819175,
      0.0047965706,
      -0.09332417,
      -0.0012219314,
      -0.005794277,
      -0.03707551,
      -0.012483693,
      -0.004979265,
      0.013312439,
      0.015775254,
      0.022955967,
      0.0015836027,
      -0.006085435,
      -0.01909803,
      0.013753669,
      -0.02172491,
      -0.0060233003,
      0.015788862,
      0.004016797,
      0.012582001,
      0.035774205,
      -0.01512358,
      -0.017362855,
      0.01599797,
      0.007311646,
      -0.003168125,
      0.01766419,
      -0.024590606,
      -0.013365549,
      0.010867435,
      0.018646028,
      -0.002066254,
      0.010469087,
      0.02507054,
      -0.010509109,
      0.012188447,
      -0.011680141,
      -0.0040493174,
      0.011518919,
      -0.003794396,
      0.0078364,
      -0.01602703,
      -0.008071132,
      -0.02021346,
      0.009426657,
      0.013347506,
      -0.0025779516,
      0.011948251,
      0.0059985993,
      0.030714696,
      -0.012954763,
      0.009826881,
      -0.022164192,
      -0.012818514,
      0.024426106,
      -0.02537415,
      -0.009077977,
      0.0036510963,
      0.010188627,
      0.009363452,
      0.0034887174,
      0.02941676,
      0.011870605,
      0.001082409,
      -0.0036026386,
      0.012595285,
      0.007963418,
      -0.010855838,
      0.00066264777,
      -0.023664491,
      -0.014035243,
      0.005908354,
      0.022511013,
      -0.012316343,
      -0.0118065225,
      -0.050304726,
      -0.0017357017,
      0.03605774,
      0.0114714345,
      -0.0031549495,
      -0.040995836,
      0.017937452,
      0.028429648,
      0.010993729,
      0.015403906,
      0.011831337,
      0.018239532,
      0.005390015,
      0.014741364,
      -0.016715406,
      -0.016365232,
      -0.033731673,
      0.009678052,
      0.012062333,
      -0.024083,
      -0.0013027465,
      -0.013341273,
      0.01843783,
      -0.02072684,
      0.017575113,
      -0.0064554806,
      0.018382913,
      -0.004683738,
      0.017613811,
      -0.023168096,
      -0.00044161602,
      -0.020585569,
      0.03238523,
      -0.0111722695,
      0.0035545898,
      0.0059984955,
      -0.012832951,
      -0.007315004,
      -0.00950422,
      -0.034098458,
      -0.01061634,
      -0.0055774865,
      0.01566287,
      0.02544754,
      -0.008086984,
      0.0013742421,
      -0.0047734305,
      -0.010160735,
      0.011621205,
      0.0033987982,
      -0.0013666899,
      -0.014878404,
      -0.014314949,
      0.0071287807,
      0.03546356,
      0.006124219,
      -0.035746507,
      -0.0026521145,
      -0.002088597,
      -0.0026195124,
      -0.008105429,
      0.005532166,
      -0.0129988985,
      0.004106127,
      0.0015077138,
      0.021208595,
      0.0058711013,
      -0.009887822,
      0.0025641385,
      0.012463635,
      0.00023313974,
      -0.008144512,
      0.0019403078,
      -0.0060556466,
      0.0086916275,
      0.019756366,
      -0.012511296,
      -0.032489963,
      -0.020331407,
      -0.024445092,
      -0.03945478,
      0.013715262,
      0.022320842,
      -0.0076283393,
      0.016751938,
      -0.00497659,
      -0.014535973,
      -0.0100648515,
      -0.03917104,
      -0.012636247,
      -0.016424023,
      0.009679267,
      0.011728262,
      0.0013405666,
      -0.004393309,
      0.01534472,
      0.016692504,
      -0.0225339,
      -0.017920014,
      -0.029410193,
      0.006932281,
      0.016303556,
      -0.003962911,
      -0.015048444,
      -0.013197517,
      0.02892675,
      0.0051448666,
      0.013502597,
      -0.010275241,
      -0.023861831,
      0.0024852252,
      0.0019123006,
      0.013326964,
      0.018492926,
      0.0064053396,
      -0.014727734,
      -0.014639643,
      -0.028106801,
      -0.01779949,
      -0.032923907,
      0.009401885,
      -0.0041840672,
      0.012377395,
      0.008808347,
      -0.022448888,
      -0.009591706,
      -0.0158663,
      -0.008902397,
      -0.008572431,
      0.016896024,
      -0.022514753,
      0.00017575432,
      -0.010733216,
      -0.015058208,
      -0.023032783,
      -0.012034835,
      0.021639794,
      0.009220451,
      0.003453277,
      -0.0010628111,
      -0.010532482,
      0.0038440125,
      0.00038624267,
      -0.023059191,
      -0.026617607,
      -0.007078812,
      -0.0033437742,
      0.022073114,
      -0.03662712,
      0.010462302,
      -0.0101761855,
      -0.01148621,
      0.0053342762,
      -0.022632947,
      0.018951753,
      0.014910718,
      0.0012894528,
      -0.003937872,
      0.023844438,
      -0.0021796077,
      0.02896294,
      -0.026353884,
      0.010192965,
      0.0034601442,
      0.0015548216,
      0.018362675,
      -0.0075565204,
      0.015541414,
      0.0047068596,
      -0.013399687,
      0.005829684,
      -0.0019314444,
      0.0066499,
      0.028943663,
      0.019399572,
      -0.006349037,
      -0.021305874,
      0.012003761,
      0.031518113,
      -0.0020160638,
      -0.021386096,
      -0.0150873,
      0.020390816,
      -0.0040812725,
      0.0014661881,
      0.010207654,
      0.0033271692,
      0.0066528935,
      -0.0070641562,
      0.0003248019,
      0.0092787165,
      0.016490491,
      -0.01634136,
      0.016230768,
      0.010522505,
      0.038012717,
      -0.11245698,
      -0.0023974064,
      -0.00892406,
      0.0036535626,
      -0.007680525,
      -0.0041308384,
      -0.017842509,
      -0.012777847,
      0.008565734,
      -0.0063467836,
      0.012003485,
      0.013627491,
      0.0075766747,
      -0.014879617,
      -0.006629829,
      -0.0036260972,
      0.012444242,
      0.01967028,
      0.010419738,
      -0.015523252,
      0.006308764,
      0.017573483,
      -0.00001783693,
      0.01794936,
      0.007916849,
      -0.010151873,
      -0.017522369,
      -0.004067929,
      0.005738986,
      -0.0146006765,
      -0.028110584,
      0.000497626,
      -0.005393691,
      0.016612101,
      0.032011844,
      0.00021021959,
      -0.0007233926,
      0.014931847,
      0.0029897918,
      0.023484768,
      0.0015281443,
      0.0072666225,
      0.017959082,
      0.0031092989,
      0.0055469787,
      0.0028807549,
      0.023022262,
      -0.009356194,
      0.0046272497,
      0.019126218,
      -0.02329672,
      -0.024531834,
      -0.012118361,
      -0.03654345,
      0.006452935,
      -0.013665122,
      0.015879713,
      -0.0015459514,
      -0.02171579,
      -0.018244011,
      -0.008191286,
      0.027231714,
      -0.0022139507,
      0.027017983,
      -0.017223537,
      0.0031481013,
      -0.0038622029,
      0.015223502,
      0.017457059,
      0.0029072943,
      -0.015246775,
      -0.009347661,
      -0.010512551,
      0.037647124,
      -0.014868801,
      -0.0006031704,
      -0.018902525,
      0.015888589,
      -0.006576306,
      0.026696984,
      -0.021278366,
      -0.036368083,
      -0.06914248,
      -0.010402643,
      0.0076503474,
      -0.026952084,
      0.009499816,
      0.0046255514,
      -0.012936366,
      -0.002007565,
      -0.014176073,
      -0.00636689,
      -0.038540967,
      -0.002491429,
      0.00015169995,
      0.0012998083,
      0.004662823,
      0.00567793,
      0.016327638,
      -0.020744288,
      -0.018358741,
      0.0064899786,
      0.006316365,
      -0.002610721,
      0.013237274,
      -0.004792369,
      -0.0051024863,
      0.009996983,
      -0.034748115,
      0.0029036233,
      -0.011026327,
      0.0023937386,
      -0.012354415,
      -0.15018381,
      0.016972324,
      0.0027079303,
      0.026790166,
      0.009746625,
      0.02643872,
      -0.017281633,
      -0.034281753,
      0.0019045884,
      -0.017991576,
      0.0010932389,
      0.0013696506,
      -0.003170556,
      0.010433626,
      -0.008870323,
      0.13397661,
      -0.018733276,
      0.012147953,
      0.013122307,
      0.011547854,
      0.0018002475,
      0.008523902,
      -0.0042937226,
      0.016380481,
      -0.024207056,
      -0.0029374405,
      -0.0056373514,
      -0.019574853,
      0.019911027,
      0.011026549,
      0.0141582405,
      -0.0014872876,
      -0.034082975,
      0.012442828,
      -0.0071373195,
      -0.035740774,
      0.025799502,
      -0.002976347,
      -0.00016838337,
      0.0025204627,
      0.013975649,
      -0.02682062,
      -0.010403542,
      0.0028035038,
      0.0084968405,
      0.00682944,
      -0.00012488908,
      -0.0024431625,
      -0.016770177,
      -0.0016286625,
      -0.011717964,
      -0.06448597,
      -0.012279954,
      0.00074683625,
      -0.0020410605,
      0.005597259,
      0.00009012427,
      0.010487753,
      0.0047174627,
      -0.0061782394,
      -0.0023490828,
      -0.006252164,
      0.031232959,
      0.008351865,
      0.01512702,
      -0.0016590283,
      0.0147958845,
      0.011851937,
      0.026131436,
      0.008114099,
      -0.012133047,
      0.018570494,
      -0.0026188267,
      -0.021649199,
      -0.008912675,
      -0.022755755,
      -0.021312336,
      0.018246604,
      0.009135099,
      -0.022207541,
      0.003794363,
      0.008220792,
      0.013857616,
      -0.0046375953,
      0.011521258,
      -0.024460182,
      -0.0010441956,
      0.007006757,
      0.009830228,
      -0.008132045,
      -0.0056444,
      -0.013390549,
      0.021679271,
      0.0485924,
      0.0016190782,
      0.01579758,
      -0.01362146,
      0.018536368,
      0.0281508,
      0.016489271,
      0.009233859,
      -0.026085151,
      0.015047406,
      -0.024770692,
      0.02563226,
      -0.012706143,
      0.010437816,
      0.010275249,
      0.0031427334,
      -0.029021196
    ]
  },
  {
    "id": "genai_cohort_nodejs_12_Nodejs_SystemDesign_FanOut_vtt",
    "content": "All right, so in this particular video, let's understand one more very important concept because now we already know about queue systems. You know, even there is a small problem with the queue system. Let's say what happens is whenever, okay, I'll just give you a scenario that whenever there is a payment success, okay? Whenever there's a payment success, you want to do couple of things. Number one, you want to trigger and email, okay? And you want to update the order to be success. Let's say these are the two things that you want to do. Now in this particular architecture, how you are going to do it? Number one, the first way using the simple queues, is what you are going to do whenever a payment gets successful. First thing is that you enqueue something into the email queue, right? So that it can be sent email send. Second is that you need one more queue. Let's name this particular queue as the order queue. You are going to push one more message into the order queue which can be later processed by the order service to update something. Now see what happened here, you are basically doing two different tasks about one operations. So whenever there's a payment successful, you are doing two different tasks. What if these were three tasks? Then you have to add one more thing. Now this is a bad thing, right? You are doing multiple things when one event occurs. So in this particular scenario, we actually don't use these kind of architectures. We don't want this kind of branching out everywhere. We do something known as Pub nub. Okay? In pubnub, what happens is that you basically put a publisher, okay, let's take S and S. So SNS is basically one too many. So what you do, the payment service can publish an event, okay? An event saying payment success. That's it, payment success. So this is your event and you are publishing this event to some kind of a broker system. Now this service can do is it can internally send this message to the order queue as well. And it can internally send the message automatically to the email queue as well. Because email queue and order queue both are listening to this thing. So if you see this diagram, it is basically one too many, right? One too many. And there's a filter. So what can, what you can do is you can use this kind of an architecture where now see, the payment service is only and only sending and emitting one event that is payment success. And if someone wants to do something with that payment success, they can do it right Tomorrow maybe I have one more, one more service. Let's say this is a WhatsApp service. I also want to trigger a WhatsApp service. So what I can do is this WhatsApp service can also listen to this particular pub now. So there is no change needed on the payment side payments. So it's basically like, you know, let's say I am a payment service. I can just you know, shout, hey, the payment is successful. And all the people in this room, if they want to do something with this information, they can do it. It's basically like that. So earlier what we were basically doing with the email system was I, as a payment service was going to person A, that hey, this person has done a payment, do you want to do something? I was going to person two that, hey, he has done the payment service, do you want to do something? Rather now what I am basically doing is I'm just shouting in the air that payment is successful. Whosoever wants to do something, they can do it. So this is your Pub Nub architecture. And also, also, because if you clearly see this, what happened is you had one publisher. So let's say you had a publisher here. This is, this is a publisher. You published it to a topic. SNS has a concept of topics, so sns. So let's say this is your pubnub, okay? To a Pub Nub. Now from this Pub Nub, you are basically sending it to multiple queues. So let me just take an example of a queue here. So let's say this is your queue system, okay? So queue, then again a queue, then again a queue. So this is order queue, payment queue, some other queue. So this Pubnub sends this message to 1, send this message to 2, and sends this message to queues. This is also known as a, fan out architecture. Okay, so this is your fan out architecture because if you notice here, one message is getting fanned out to multiple services and to this multiple services. Then you have your servers listening to it. So basically you have your servers. So maybe you can have like two servers right here, you can have one server here, you can have multiple servers here. So these are basically dequeuing your messages and processing it. So this is how the reality works. So whenever you place an order on the Amazon, they just say, hey, order received. Whichever service wants to listen to it, email service wants to listen to it, WhatsApp service wants to listen to it, some marketing or ad service wants to listen to it. They just keeps on listening it and do their work and they go on. So this is a true decoupling between microservice architecture. That is a fan out architecture. So just look at this particular complex diagram. I mean, we have studied a lot of things in the system design.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "12-Nodejs-SystemDesign-FanOut.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/12-Nodejs-SystemDesign-FanOut.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0068573267,
      0.00092705584,
      0.007901959,
      -0.050189257,
      -0.034875598,
      -0.0039285063,
      0.009359519,
      0.04400368,
      -0.012623634,
      0.013688992,
      0.004412203,
      0.013234557,
      0.014014449,
      0.021696988,
      0.108958565,
      -0.022459654,
      -0.026117261,
      -0.008505576,
      -0.027765658,
      0.0045150025,
      0.005133927,
      -0.011632036,
      0.0019893935,
      0.0048578386,
      -0.013058876,
      0.013126213,
      0.02319005,
      -0.01245084,
      0.0060859886,
      -0.011477928,
      0.00024554026,
      0.013682324,
      -0.009937301,
      0.042553965,
      0.0071518887,
      0.02260786,
      0.027936859,
      0.00014125896,
      -0.01686688,
      0.021492073,
      0.016783807,
      -0.0047132005,
      0.012549115,
      0.010324655,
      0.009425096,
      -0.005030293,
      -0.005977029,
      -0.009362457,
      0.0045070057,
      0.0041962685,
      -0.007430707,
      -0.009800635,
      0.0018030204,
      -0.1784798,
      0.004551337,
      0.009358358,
      -0.011390589,
      0.004785445,
      -0.006840864,
      0.013355847,
      -0.0317645,
      0.002691922,
      -0.02696781,
      -0.02294248,
      -0.0020305405,
      0.010458561,
      0.016890757,
      -0.0052233594,
      0.004402469,
      -0.01191093,
      0.03102585,
      -0.0039016616,
      0.0033330603,
      -0.009044895,
      -0.01232815,
      -0.03079371,
      0.0014760513,
      -0.019307857,
      -0.027514635,
      0.015424895,
      -0.004562151,
      -0.020960659,
      -0.007594634,
      -0.009975584,
      0.0010825222,
      -0.0014784976,
      -0.018535413,
      0.00030488745,
      0.0041132756,
      0.014145064,
      0.0026772784,
      -0.0078068203,
      0.0076476634,
      -0.020153368,
      -0.012715833,
      0.0030278042,
      -0.02604643,
      -0.001415612,
      -0.008452808,
      0.0012424905,
      -0.0017921447,
      -0.005571096,
      -0.012141145,
      -0.0015072513,
      -0.010682267,
      -0.0027541448,
      -0.0034885134,
      -0.00076812087,
      0.010783613,
      -0.028053125,
      0.009713096,
      -0.012419678,
      0.015443822,
      -0.006474026,
      0.0047878535,
      -0.17168307,
      0.0150206145,
      -0.00010386188,
      -0.0159406,
      0.0023191222,
      -0.012780342,
      -0.0045632953,
      0.031336553,
      -0.008387212,
      -0.009057571,
      -0.0024878115,
      0.005088275,
      0.022887962,
      0.013674749,
      -0.0045765084,
      -0.020019406,
      -0.021460705,
      -0.031302072,
      0.0078775855,
      0.008296894,
      0.014329448,
      -0.016707694,
      -0.021232659,
      -0.027929937,
      -0.01701544,
      -0.0018209807,
      0.016844915,
      -0.006873046,
      0.018075913,
      -0.01428849,
      -0.0013073666,
      -0.047145385,
      0.012947911,
      -0.0058770375,
      -0.03387709,
      0.027422782,
      0.012789303,
      0.011874848,
      0.004795792,
      0.013871837,
      -0.026493229,
      0.0012947223,
      0.001476562,
      0.012202862,
      -0.0054271915,
      -0.011541555,
      0.013228466,
      0.0036617732,
      0.005751533,
      0.007199733,
      0.010018337,
      -0.01963305,
      0.015980037,
      0.01674478,
      0.0013017476,
      -0.019620206,
      -0.017126976,
      -0.017725779,
      0.018024705,
      -0.008857515,
      0.0014738315,
      -0.018465832,
      0.004365984,
      0.028811783,
      -0.016151799,
      0.004799916,
      -0.016614325,
      -0.009979251,
      -0.012814559,
      -0.009517654,
      -0.0024676472,
      -0.023937467,
      0.012437683,
      0.004924782,
      0.012935811,
      0.007384403,
      -0.0062942184,
      0.010859772,
      0.0023522573,
      0.0042832377,
      -0.030177325,
      0.014870483,
      0.015590732,
      -0.01335184,
      0.0022594337,
      -0.0009928833,
      -0.008053399,
      0.011798621,
      -0.009697818,
      0.004146361,
      -0.021100072,
      0.0147304125,
      -0.029884603,
      0.03068558,
      0.02145127,
      -0.009986188,
      -0.018797187,
      0.022043549,
      -0.0089572435,
      -0.008057339,
      -0.005612598,
      0.018557578,
      0.009683959,
      -0.012882717,
      -0.03120169,
      -0.007962362,
      -0.017166575,
      -0.005296115,
      0.01169653,
      0.030459281,
      0.009634091,
      -0.010460373,
      -0.0034760423,
      0.0045552067,
      -0.0031007086,
      0.0053666807,
      0.027484594,
      0.00032167864,
      -0.0052221743,
      0.013756514,
      -0.0076152016,
      0.0048444546,
      0.032769382,
      -0.0054121325,
      0.011583559,
      -0.0037869194,
      0.0013474768,
      0.0024703185,
      0.01770345,
      0.008541074,
      0.013969971,
      0.00761579,
      0.001461431,
      -0.0017404897,
      -0.022854537,
      -0.00035775115,
      0.009994577,
      -0.002540749,
      -0.00007094715,
      0.0072884797,
      -0.012591254,
      -0.037549548,
      -0.0022606547,
      -0.009521041,
      -0.009038342,
      -0.014686879,
      -0.016275285,
      0.00210348,
      -0.017850358,
      -0.010856444,
      -0.009627174,
      0.0034865402,
      0.031040948,
      -0.021882277,
      0.0021739407,
      0.005638263,
      -0.009720262,
      -0.01943037,
      -0.0037802763,
      -0.014403965,
      0.012233348,
      -0.08514081,
      -0.002984314,
      0.0018020464,
      -0.019983629,
      -0.0047108675,
      0.0029233953,
      0.0067092297,
      0.028270861,
      0.02941443,
      0.009359182,
      -0.008771141,
      -0.016382478,
      0.008825335,
      -0.020612758,
      0.001689095,
      0.02404659,
      0.0008925538,
      0.008070139,
      0.02006379,
      -0.019966463,
      -0.012091169,
      0.0011895188,
      0.0007355995,
      0.0021646302,
      0.03574257,
      -0.013513494,
      -0.025201416,
      0.038516562,
      0.030716635,
      -0.0012207147,
      0.009416505,
      0.005821424,
      -0.00008757246,
      0.025965733,
      -0.005033024,
      0.0047016195,
      0.018811088,
      -0.019025108,
      0.007762361,
      -0.023847593,
      0.008252189,
      -0.008356708,
      -0.0029896672,
      0.023647008,
      -0.0066644424,
      -0.004423771,
      0.005771287,
      0.03009917,
      -0.013288101,
      0.0025440971,
      0.005584215,
      -0.027301036,
      0.007964035,
      -0.022119746,
      0.005251912,
      -0.00009158573,
      0.0069432715,
      -0.00029743355,
      -0.020469196,
      0.014108621,
      0.018119823,
      -0.0039220843,
      -0.0072149504,
      0.023436077,
      0.0074941036,
      -0.028011547,
      -0.007846634,
      -0.03624176,
      0.0036943727,
      0.010208553,
      0.0070477254,
      -0.020385914,
      0.0031900674,
      -0.03123125,
      0.004667808,
      0.03162721,
      0.011728259,
      -0.018091178,
      -0.03549674,
      0.019904265,
      0.014171478,
      0.010005333,
      0.01014648,
      0.006884343,
      0.011947344,
      0.0098584965,
      0.0056125745,
      -0.0035962516,
      -0.0047766194,
      -0.026326597,
      0.027066078,
      -0.0070614973,
      0.002755133,
      0.0049995556,
      -0.010563149,
      0.007539864,
      -0.029982371,
      0.017360017,
      -0.0015015495,
      0.0049259597,
      0.0010283188,
      0.0032954265,
      -0.029965442,
      -0.0018099295,
      -0.0133870095,
      0.038221266,
      0.0061577284,
      0.007132401,
      0.016016176,
      -0.011458855,
      0.0017951092,
      0.00034675948,
      -0.020252535,
      -0.020609224,
      -0.017460542,
      0.0065444075,
      0.0077968785,
      0.009358257,
      -0.005679888,
      -0.0007120092,
      0.0026645898,
      0.01736085,
      -0.0055465642,
      0.0014949453,
      -0.015948763,
      -0.015868314,
      -0.0077549634,
      0.012976736,
      0.0069995755,
      -0.031306688,
      -0.008792765,
      0.0066156937,
      -0.01615445,
      -0.0130529115,
      -0.013954776,
      -0.0084067285,
      0.0018714427,
      -0.013017582,
      0.015366892,
      0.018077018,
      -0.017568765,
      -0.0029509608,
      0.023502773,
      -0.008942176,
      -0.015145408,
      -0.002627205,
      -0.008047668,
      0.004576799,
      0.011161728,
      -0.01165065,
      -0.02606769,
      -0.01994676,
      -0.01662187,
      -0.02114602,
      -0.017268186,
      0.014599657,
      -0.0052049425,
      0.024437966,
      -0.0048380494,
      -0.019087283,
      -0.0013741687,
      -0.03497728,
      -0.015041519,
      -0.018233575,
      -0.003675471,
      -0.008041021,
      -0.0010495496,
      0.007408655,
      0.0037517764,
      0.0019621938,
      0.006973915,
      -0.011005387,
      -0.042267036,
      -0.0009829537,
      0.018122744,
      0.01596556,
      -0.016278137,
      -0.0010715193,
      0.027221903,
      0.0136025455,
      0.00808717,
      -0.012777461,
      -0.02175243,
      0.0177181,
      0.004930506,
      0.0035986064,
      0.0061793174,
      -0.0011144,
      -0.017543187,
      -0.0020537013,
      -0.020414535,
      -0.013549616,
      -0.021853924,
      -0.0062754876,
      0.014108648,
      0.017016044,
      -0.003354357,
      -0.023345746,
      -0.00471493,
      -0.0055137533,
      -0.011159865,
      -0.0076879365,
      0.008397326,
      -0.014596862,
      0.017813493,
      -0.0052801305,
      -0.007377084,
      -0.0024577044,
      -0.0068159886,
      0.028513607,
      -0.0016779557,
      0.0010429309,
      -0.000008512047,
      -0.01556512,
      0.009422646,
      0.020443177,
      -0.019546188,
      -0.022420168,
      -0.005068412,
      0.005105991,
      0.010582488,
      -0.044675883,
      0.011239526,
      -0.0053343363,
      -0.016049853,
      0.012018437,
      -0.018789675,
      0.017122159,
      0.002065302,
      0.0056882855,
      0.0008651319,
      0.036462516,
      -0.010893851,
      0.019956816,
      -0.025591195,
      0.0022784318,
      -0.014676611,
      -0.0007919537,
      0.021805175,
      0.00012804124,
      0.014978656,
      0.00015695031,
      -0.011916296,
      0.003783975,
      0.005935039,
      -0.016254338,
      0.027102115,
      0.0064316564,
      -0.004316658,
      -0.02807759,
      0.0020005093,
      0.032360908,
      0.007639344,
      -0.019429017,
      -0.010413547,
      0.02694925,
      -0.0010971089,
      -0.005949584,
      0.039098646,
      0.009159331,
      -0.0039611524,
      0.0065030186,
      -0.008640341,
      0.007831954,
      0.017809918,
      -0.024383327,
      0.021714797,
      -0.0042920155,
      0.024638655,
      -0.116777666,
      0.020761743,
      -0.023703322,
      0.0017598679,
      -0.016389145,
      -0.005272712,
      -0.013730371,
      -0.0384101,
      0.011065637,
      -0.0038637065,
      0.009933861,
      0.01180281,
      0.0133521175,
      -0.007542194,
      0.00791983,
      -0.0060579004,
      0.00089811184,
      -0.014417284,
      0.0055027124,
      0.005047204,
      0.01163655,
      0.014954454,
      0.009355857,
      0.016330471,
      -0.0084137125,
      -0.012630414,
      -0.015445162,
      9.792319e-7,
      0.0037325162,
      -0.0366392,
      -0.014644059,
      0.0029887906,
      0.0052722325,
      0.026134498,
      0.030043235,
      -0.02079974,
      0.0023188626,
      0.02130214,
      0.0096404785,
      0.027025161,
      -0.013224253,
      0.00415801,
      0.026355814,
      -0.0023749638,
      0.025029834,
      0.001899718,
      0.040176306,
      0.0046774074,
      -0.0002601348,
      0.03966764,
      -0.03064114,
      -0.010209543,
      -0.002897091,
      -0.038884364,
      0.0030184835,
      -0.023113139,
      0.024389595,
      -0.016084405,
      -0.025491899,
      -0.007422105,
      0.0072002397,
      0.028686736,
      -0.008708957,
      0.024351222,
      -0.024076361,
      -0.010541953,
      -0.007474793,
      0.011322761,
      0.016969958,
      0.0012524892,
      -0.008084049,
      0.00072676357,
      0.00053379656,
      0.006058002,
      0.0018135023,
      0.0019914294,
      -0.02535284,
      0.008817324,
      -0.011532058,
      0.026722282,
      -0.029934885,
      -0.017564226,
      -0.0696921,
      -0.009666574,
      -0.009814212,
      -0.0022511093,
      0.010084919,
      -0.013581569,
      -0.009616482,
      -0.0059271753,
      -0.013996587,
      -0.011185967,
      -0.03708236,
      0.010347429,
      -0.00505765,
      -0.0031304467,
      0.014014593,
      0.01813001,
      0.00480336,
      -0.023856265,
      -0.03144105,
      -0.005796534,
      -0.024325218,
      -0.011304029,
      -0.007576106,
      -0.0150077045,
      -0.013417003,
      0.002449293,
      -0.01813745,
      -0.0011085336,
      -0.004131623,
      -0.004834008,
      -0.015642043,
      -0.15012819,
      -0.007460848,
      0.00471801,
      0.01717081,
      0.012461086,
      0.020575339,
      0.007358002,
      -0.036444776,
      -0.011588469,
      -0.014394235,
      0.002905732,
      -0.013586431,
      0.0027766991,
      0.01199309,
      -0.00925917,
      0.14858876,
      -0.017892307,
      -0.011712787,
      0.008215265,
      0.0010407887,
      -0.0017388049,
      -0.009336001,
      -0.0073041893,
      0.02033967,
      -0.0118435,
      -0.020793233,
      -0.012631127,
      -0.033122085,
      0.022576733,
      -0.00285985,
      0.0063086795,
      0.016361764,
      -0.035721682,
      0.01245282,
      0.004711555,
      -0.030807966,
      0.013490542,
      -0.004096627,
      -0.016363269,
      0.017056929,
      0.015628938,
      -0.0014709332,
      0.007196257,
      -0.005692504,
      0.012053796,
      -0.013955262,
      0.013746268,
      0.010436957,
      -0.010543488,
      -0.00690263,
      -0.022367006,
      -0.07926995,
      -0.013792316,
      0.009345543,
      -0.0052780043,
      0.029705768,
      0.00014486419,
      0.01677207,
      -0.0013339987,
      0.009685529,
      -0.0015588958,
      -0.011633664,
      0.033987794,
      0.0008422997,
      0.009015067,
      -0.00083536236,
      0.024644371,
      0.003879179,
      0.040632028,
      -0.005253403,
      0.003633113,
      0.028062956,
      -0.014708253,
      -0.010328757,
      -0.023656225,
      -0.021185713,
      0.008620795,
      0.02129241,
      0.010341688,
      -0.01768103,
      0.01375713,
      0.0019265048,
      0.011516721,
      -0.016652757,
      0.00089756696,
      -0.017716745,
      0.013899632,
      0.016945282,
      -0.0043201423,
      0.0038148887,
      -0.0059366603,
      0.006457719,
      0.010767845,
      0.031250294,
      0.0034408427,
      0.0134280315,
      0.0024440247,
      0.0042428887,
      0.029059744,
      0.022053484,
      -0.012612938,
      -0.031804647,
      0.028444732,
      -0.015328242,
      0.028840506,
      -0.013169551,
      0.0017094566,
      0.017613474,
      0.002387403,
      -0.024389677
    ]
  },
  {
    "id": "genai_cohort_nodejs_01_Authentication_vs_Authorization_vtt",
    "content": "Hi everyone and welcome to brand new section on authentication and authorization. So personally this particular section is very exciting and I personally love this particular section. Authentication and authorization is a core concept of any backend system, right? And sometimes authentication and authorization can be very tricky or hard to understand. But, but no worries. In this particular section we are going to go step by step. We are going to understand each and every bit of authentication and authorization and how in Node js we can build a secure authentication workflow. So in this particular video, let's first understand the meaning of these two words that how authentication and authorization are two different things. Okay, so here we are talking about authentication, which is our first word, right? That is authentication. And secondly we have authorization. Now knowing the difference between these two things is very important. Okay, so let's first understand what is authentication, right? Authentication basically means that who are you? In simple terms, authentication means who are you? Do I know you? That is an authentication. Okay, so which means like for example, if you go on to facebook. com, right? If you are not logged in, you are welcomed with a login screen. Okay? So whenever you open facebook. com if you are not logged in, you are welcomed with a login screen. For example, if I open a new tab and I go onto facebook. com so what you will notice is see, I am viewing this page. That is a, login page. Why am I seeing this page? Because I am not authenticated. The server is not able to recognize me. So that means let's say if we have a server here, okay? So let's say this is our server. This is the Facebook server, not my server. So what is basically happening here is the server and I am a user, right? So let's say here is the user. So this user that is me, I made a request to the server and server says hey, I don't know who are you, right? It is not able to recognize me. And that is the reason the response from the server was a slash login page, which is nice. Now the thing is, this particular thing means that this particular user is not authenticated, server is not able to recognize me. On the other hand, let's say if I am logged in, okay, so if I give him my email and password and somehow I am logged in, that means that if I send a request to the server in, instead of getting a login screen, what I, what do I get? I get basically all my feed, okay? I get feed posts, I get all my friend requests, I get all that data, right? I am able to get my data so that is what that means. I am authenticated. I am authenticated. That means server is able to recognize me that, oh, this is Piyush Garg. And based on who am I Based on like my id, like, let's say Piyushkar. It is sending me the post that is relevant to me. It is sending me the friend request that are being sent to me. It is sending me my messages, my messenger, my groups, everything, mine. Okay, so this is basically authentication. That means whether you are logged in or not, if you are authenticated, okay, you are an authentic person. I know who are you? But what is this? Authorization. So authorization is basically the next step of the authentication. Authorization says that it. It assumes that you are already authenticated. But are you authorized? Are you authorized? Okay. To this resource? Okay, now what does this mean? I'll just give you an example and everything will be super clear. Let's say this is your college. Okay? This is your XYZ college. Okay, that's good. Now, first thing is, can a random person. Okay, let's say here is a random person. Can a random person enter, the campus of the college? No. Right? Why? Because there is a security guard sitting here. So let's say that this is your security guard. So this security guard, whenever you try to enter, you are not. You are not allowed to enter because he doesn't recognize you, right? You are just a random person. You have no ID card. You don't have any kind of thing, so you are not allowed. That means you are not authenticated. So your authentication failed. But let's say you had. You have taken the admission in this college. And in return, college has given you something known as an ID card. So whenever you go, you submit your fees, right? You pay your fees and you get admission. You are given an ID card. Nice. Now, this ID card, which is issued by this XYZ college. Now you take this ID card. Now you as a person, go back to the security guard. Show your ID card. Now you are authenticated. Should this security, guard allow you to enter the college? Yes. Why? Because you were authenticated. Nice. Now, let's say this is print. This is your classroom. Okay? So let's say this is your classroom. So I'll just draw it in this way. And, let's say this is some internal staff room. Okay? So let's say this is the staff room or principal's room or some kind of internal room in your college. So I'll just make it green. Now, based on this ID card and you are a student, can you Enter this particular class? Yes, you can enter. Because that particular class is meant for you, right? That's a class. You can enter it. But with this ID card and this thing, can you enter in the staff room? No, right? Why? Because again, there will be one more security guard, let's say in front of the staff room. But to enter here, to enter here, you are not allowed. Why? Because your ID card says that you are a student. And as a student, you are not allowed to enter the staff room. But on the other hand, let's say one more teacher is there. Okay? Now, teachers also have their ID cards. But this ID card holds an authority of a teacher. Okay, Of a teacher. Now first of all, tell me, should this particular person be allowed inside the campus? Yes, because they have an ID card, they are authenticated. Now, when they come here, this person will check that, Hey, I know that you are already a part of this college, because if you were not a part of this college, anyway, you cannot bypass this gate. But now I have to check whether you have authority to enter the staff room or not. So it will. So this security guard will check. Oh, I see that you are a teacher. Your role is a teacher. So I think you are allowed. So this particular teacher can go into the staff room, but not this ID card. So this is basically authorization, okay? That are you authorized to this particular resource? So authorized is the word here. Okay? So that means for authorization, you have to be authenticated. This is simple, right? Because for authorization to work, you should be authenticated. Authenticated means you are logged in. The server knows who are you, right? You have some kind of ID card. But authorization means. Authorization basically means are you allowed to access that resource or not? Got it. Now if I log into Facebook, I am authenticated. But can I access your friends? Can I accept a friend request that is sent to you? Of course not, because I don't have authenticity, I don't have that authorization to accept a friend request or on your behalf. Got it? Now can I change your password? No, because I am not authorized to do it. So that is, your authorization. So I hope the difference between authentication and authorization is clear. So first step will be authentication, understanding authentication and everything. Authorization is very simple, to be honest. Once authentication is clear, authorization is nothing. It's just a check. Okay? The main challenge, the main security comes in the authentication which we are going to cover in the upcoming videos.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "01 Authentication vs Authorization.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/01 Authentication vs Authorization.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.01938126,
      0.005146169,
      0.01128618,
      -0.04249954,
      -0.024939321,
      0.0051909536,
      0.013846518,
      0.02190414,
      0.0010672293,
      0.0034446688,
      0.0037957279,
      0.012614309,
      -0.002110653,
      0.01968254,
      0.12039952,
      -0.0068871607,
      -0.0010397218,
      -0.008034146,
      0.005287535,
      -0.029078154,
      0.026143631,
      0.004157184,
      0.00058124925,
      0.0018858894,
      -0.004193502,
      0.011746002,
      -0.011182195,
      -0.004852262,
      0.023573376,
      -0.012569721,
      -0.010822364,
      -0.0056668385,
      0.00020474219,
      0.037971746,
      0.0024542045,
      0.03381654,
      0.025984373,
      0.008741245,
      -0.042199004,
      -0.0024337226,
      -0.004173639,
      0.005013874,
      -0.004678437,
      -0.021658154,
      0.010500564,
      0.0014503024,
      0.0035108319,
      -0.006674655,
      0.009445802,
      0.005953185,
      -0.020841908,
      0.0034362804,
      -0.03652204,
      -0.18743217,
      -0.0057227896,
      -0.004984905,
      -0.0026616012,
      0.0072175725,
      -0.0012582038,
      0.00092910585,
      -0.035492618,
      0.009628938,
      -0.025529737,
      0.017877266,
      -0.018799584,
      0.0128600355,
      0.047912795,
      0.011876839,
      0.003561056,
      -0.0118194865,
      0.014343665,
      0.01190129,
      -0.014446786,
      -0.016002588,
      -0.009810033,
      -0.0003076563,
      0.0044918563,
      -0.009242869,
      -0.01313266,
      -0.001914385,
      -0.015120788,
      -0.001792961,
      -0.017290413,
      -0.010342943,
      0.00069862243,
      -0.027494928,
      -0.0030047833,
      -0.015395876,
      -0.013448813,
      0.0033440094,
      0.0035953566,
      0.0026481268,
      0.0052061733,
      0.007701083,
      0.011721608,
      -0.006027558,
      -0.025397785,
      -0.0014128744,
      -0.0043705474,
      0.0175749,
      -0.010227171,
      0.028873103,
      -0.02367615,
      -0.000053224787,
      -0.006523222,
      0.02224631,
      0.009278356,
      -0.0061381473,
      0.014337939,
      -0.011271486,
      0.01390014,
      0.0012385114,
      -0.008352045,
      0.01929454,
      0.012104712,
      -0.18953444,
      0.025201345,
      -0.0054103294,
      0.016206658,
      0.007612889,
      -0.024052909,
      0.015203566,
      0.02972892,
      0.0009342393,
      -0.020097503,
      0.004647202,
      -0.017075349,
      0.009672122,
      0.021979395,
      -0.000981043,
      -0.025091069,
      0.010798267,
      0.014383583,
      0.013411609,
      0.030077072,
      0.0128317885,
      -0.0020317666,
      -0.009954302,
      0.009960593,
      -0.013503554,
      0.010654288,
      0.020496693,
      -0.020864265,
      0.030471561,
      0.009910995,
      0.0033487398,
      -0.032982774,
      -0.0019573532,
      0.0050402065,
      -0.038588826,
      0.04341649,
      -0.0034741096,
      -0.013293222,
      0.019793473,
      0.015044178,
      -0.05449371,
      0.012337747,
      0.0073225955,
      0.0021537128,
      -0.0051424946,
      0.0028201616,
      -0.0067971502,
      0.0015959726,
      0.0099879615,
      0.008805541,
      -0.023102587,
      0.004668264,
      0.015775915,
      -0.017594138,
      -0.02050797,
      -0.0030996671,
      -0.00813134,
      -0.0016670699,
      0.013518216,
      -0.010857872,
      0.0051574176,
      -0.013506194,
      -0.011378096,
      0.012574236,
      -0.0063496097,
      -0.02190105,
      -0.0103549,
      0.018570028,
      -0.01706475,
      0.014836067,
      -0.0067629274,
      -0.030503625,
      0.01045952,
      0.023827903,
      -0.0010449238,
      -0.0018102843,
      -0.016907176,
      -0.007557338,
      0.030628825,
      -0.0017369741,
      0.000087591834,
      -0.008611847,
      -0.0055073462,
      -0.01154764,
      0.023737907,
      0.008874805,
      -0.0065911957,
      0.009137865,
      -0.016672017,
      0.01517712,
      0.008240813,
      0.019271975,
      -0.017776798,
      0.0042356513,
      0.028439885,
      -0.015199444,
      -0.016106404,
      0.010859317,
      -0.016027588,
      -0.0012468707,
      -0.016201954,
      0.015147289,
      0.010948819,
      -0.006851258,
      -0.025431115,
      0.00987458,
      -0.0019878543,
      -0.007590364,
      0.0046837428,
      0.013078046,
      0.011864103,
      0.021287045,
      -0.017484637,
      0.0247018,
      -0.0012658533,
      -0.0023586967,
      0.0020308697,
      -0.004473814,
      -0.010702338,
      0.008439471,
      -0.005097923,
      -0.004044701,
      0.0163778,
      0.0031069776,
      -0.0042975503,
      -0.0041210474,
      -0.008353312,
      0.010256944,
      0.030238584,
      0.028233897,
      -0.0066065905,
      -0.022896076,
      -0.010504895,
      -0.01224825,
      -0.017451506,
      -0.0027899533,
      -0.0009813644,
      0.0020061655,
      -0.012958872,
      -0.0051011536,
      -0.022579309,
      -0.03980809,
      -0.0062999204,
      0.0005446717,
      -0.024625998,
      -0.0042152074,
      -0.007162693,
      -0.020062836,
      -0.0016158074,
      0.008619995,
      -0.019078474,
      0.013102495,
      0.03104441,
      0.0008264563,
      -0.0045644315,
      0.0021933208,
      -0.000973045,
      -0.0049628867,
      -0.0027108637,
      -0.0065981,
      0.007588655,
      -0.09014329,
      -0.010875792,
      0.008989872,
      -0.003244586,
      -0.020877553,
      -0.002324776,
      -0.0119603425,
      0.01008116,
      0.018853301,
      0.029038204,
      0.00459791,
      0.0052074827,
      0.02188937,
      -0.0018438966,
      -0.009489043,
      0.027870746,
      0.0047639115,
      -0.0027740204,
      0.000073517214,
      -0.027495721,
      0.015692433,
      0.004949781,
      -0.013226335,
      -0.014086517,
      0.0028923985,
      0.014081876,
      -0.015084984,
      0.014080419,
      0.02499252,
      0.009255784,
      -0.0031398328,
      0.026229035,
      0.003764249,
      0.0058517363,
      -0.0077034445,
      0.008946225,
      0.012315235,
      -0.015767964,
      -0.0023644024,
      -0.017369082,
      -0.0058813007,
      -0.018113913,
      0.0008357251,
      0.027063977,
      -0.010973282,
      0.014073924,
      0.016754145,
      -0.0150503,
      -0.020883337,
      0.015957419,
      -0.033122655,
      -0.009213362,
      0.0028684156,
      -0.020715607,
      -0.012528068,
      -0.0109928595,
      -0.0067723016,
      0.0051296237,
      0.02219823,
      0.0006597443,
      0.00342854,
      -0.00982073,
      4.8364393e-7,
      -0.001807929,
      0.02190669,
      0.0001747746,
      0.019729791,
      -0.019169271,
      -0.021644805,
      -0.017327765,
      0.013989756,
      -0.01694128,
      -0.013254707,
      -0.017475648,
      0.027649788,
      -0.00371325,
      0.008062001,
      -0.006011319,
      -0.034346875,
      0.030428115,
      0.0024105718,
      0.004437896,
      0.0108954245,
      0.021762388,
      0.011037277,
      0.009241084,
      0.004734195,
      0.00057081983,
      -0.008252302,
      -0.020564592,
      0.013885151,
      0.033283528,
      -0.013961724,
      0.01206347,
      -0.008146471,
      -0.0061653024,
      -0.016297013,
      -0.019171964,
      -0.010933082,
      -0.0032358423,
      -0.031479888,
      -0.0050295363,
      -0.021790855,
      0.0027328362,
      0.009522409,
      0.04107583,
      -0.028908791,
      -0.008442509,
      0.010206413,
      -0.0038008192,
      0.009463964,
      0.015689429,
      -0.022191659,
      -0.0073130657,
      -0.03266267,
      0.0035541249,
      0.008101885,
      0.0054793153,
      -0.0076371403,
      -0.0012808458,
      -0.010138465,
      -0.0064470507,
      -0.0063774846,
      0.023784855,
      -0.01614957,
      0.008889102,
      -0.018305734,
      0.0010564475,
      -0.008184374,
      -0.01794637,
      0.009145458,
      -0.022778673,
      0.0019451365,
      -0.0027898755,
      -0.029795008,
      -0.021576807,
      0.018958181,
      0.0048004542,
      -0.00234863,
      0.011655497,
      0.0012727989,
      0.005109742,
      0.020602278,
      -0.011650096,
      0.020018527,
      0.002440427,
      -0.01096119,
      -0.0027123594,
      0.0013352064,
      0.01725637,
      -0.012922234,
      -0.0032324588,
      -0.025265543,
      0.007849469,
      -0.0041057547,
      0.028617391,
      0.006056406,
      -0.008568493,
      0.013443696,
      -0.009119479,
      -0.010287558,
      0.006310124,
      -0.0070119193,
      -0.005880249,
      0.008429486,
      0.013676398,
      0.0005432923,
      0.013974391,
      0.004542092,
      0.01857784,
      -0.000059015394,
      -0.016187428,
      -0.045999575,
      0.024029499,
      0.02625615,
      0.0066584134,
      0.020234514,
      -0.014909258,
      0.015378022,
      0.00470099,
      0.020452524,
      0.0015111445,
      -0.011781092,
      -0.0065579144,
      0.0037623383,
      0.0032815593,
      0.015870485,
      -0.030994974,
      -0.02568991,
      0.0034760209,
      -0.014089367,
      -0.028138777,
      -0.009246978,
      0.021798749,
      -0.014737715,
      0.020322308,
      -0.0062972857,
      0.015283116,
      -0.0055263783,
      -0.01438261,
      -0.0045456006,
      -0.013370152,
      0.0042776964,
      0.0065684845,
      0.031612854,
      -0.0066880314,
      -0.025687465,
      -0.01853558,
      0.012183029,
      0.03172716,
      -0.014401104,
      0.033696353,
      -0.0066731563,
      -0.004322026,
      0.009021672,
      -0.0030900838,
      0.0017902291,
      0.009516303,
      -0.017448427,
      -0.007591401,
      0.017103273,
      -0.023541102,
      -0.008805309,
      -0.010111191,
      0.010028661,
      0.0070848335,
      -0.01666547,
      0.018813705,
      0.0063049654,
      -0.028071858,
      -0.0050153676,
      0.002943131,
      0.007873563,
      0.00053413206,
      -0.0023795536,
      0.0008458236,
      0.014122553,
      -0.006322873,
      0.00036623803,
      0.002174394,
      -0.013077361,
      0.012406108,
      0.005086433,
      0.00059567316,
      0.0022013278,
      -0.0012576259,
      0.03205145,
      0.027057605,
      -0.021993035,
      0.004810924,
      0.0351387,
      0.01189022,
      -0.0046221293,
      -0.016375424,
      -0.012023423,
      0.028721886,
      0.0010480236,
      -0.012116723,
      0.0007125388,
      0.010143733,
      0.017649936,
      0.0026476053,
      0.009439717,
      0.012943035,
      0.010343634,
      0.006798297,
      -0.0071434053,
      -0.0071504614,
      0.011121085,
      -0.11574114,
      -0.022415673,
      -0.022535782,
      -0.007628044,
      -0.009108257,
      0.00031872117,
      -0.0026861606,
      -0.019261666,
      -0.027568271,
      -0.013416974,
      0.003632284,
      -0.005486533,
      -0.014175115,
      0.014112699,
      0.015981738,
      -0.01674742,
      0.00008188954,
      0.029656455,
      0.019349268,
      -0.01520114,
      0.017739959,
      -0.005881894,
      -0.0127681345,
      -0.0019909628,
      0.0031371994,
      0.005589518,
      0.020838972,
      0.0034733717,
      0.008097782,
      -0.0041239033,
      -0.002923923,
      0.0030136658,
      0.0054642116,
      0.009971767,
      0.0077306023,
      0.0011759722,
      -0.015767364,
      -0.023086177,
      0.008796426,
      0.012505102,
      0.0027710327,
      -0.0074435286,
      0.01787639,
      0.003148015,
      0.0020648306,
      0.019772716,
      0.017337993,
      -0.009572033,
      0.009922058,
      0.03395199,
      -0.048212584,
      -0.001090628,
      -0.004813656,
      -0.017720837,
      -0.0011560149,
      0.013616168,
      0.009054019,
      0.0001305747,
      -0.017613465,
      -0.02539628,
      0.029464923,
      0.026301337,
      0.012516959,
      0.024918046,
      -0.0063675707,
      0.0077405446,
      0.01858758,
      -0.009690995,
      -0.00493273,
      -0.010704133,
      -0.011523794,
      0.019484608,
      -0.013385327,
      0.008565652,
      0.015121388,
      0.009157846,
      -0.007553583,
      0.011859096,
      -0.032881945,
      0.005766226,
      -0.0026711363,
      0.013105758,
      -0.08103583,
      -0.015395128,
      0.0010445619,
      0.0021726207,
      0.009528954,
      0.013038639,
      -0.00022126483,
      0.009675856,
      0.0054180385,
      0.0014376023,
      -0.014618146,
      -0.024636252,
      -0.006735207,
      -0.018717527,
      -0.021536594,
      0.011184844,
      -0.015811289,
      -0.01684238,
      -0.029338375,
      -0.009793803,
      -0.0021528015,
      0.0033250402,
      -0.0053559016,
      -0.014149319,
      0.014133448,
      0.017337373,
      -0.018480146,
      0.0096904505,
      0.012574132,
      0.012199943,
      0.012050986,
      -0.14635125,
      -0.02478496,
      -0.006345472,
      0.027053738,
      -0.014126769,
      -0.0056659803,
      -0.017913772,
      0.0029583122,
      0.01017692,
      0.0065697962,
      -0.004504612,
      -0.01696478,
      -0.016724605,
      0.012871889,
      -0.010766851,
      0.13089153,
      0.011877138,
      0.0153317815,
      -0.001802329,
      -0.003929655,
      -0.031708706,
      -0.008476554,
      -0.0033515354,
      0.007390673,
      0.019835094,
      -0.01017822,
      0.020398932,
      -0.009701022,
      0.018657465,
      0.0037885127,
      0.009152868,
      -0.038483508,
      -0.026813988,
      0.00891888,
      0.015732963,
      -0.021786222,
      0.014816946,
      0.0011628668,
      -0.015064718,
      -0.005621016,
      -0.002569232,
      0.0060254745,
      0.0013815151,
      0.016297234,
      0.0006363863,
      -0.008740075,
      0.004093454,
      0.0064097214,
      -0.00027078312,
      -0.0055680717,
      0.026395096,
      -0.058781844,
      -0.003207851,
      -0.015489892,
      -0.015350607,
      0.02907178,
      0.00092891755,
      0.007653508,
      -0.022823794,
      -0.013842398,
      0.0038451878,
      -0.025417363,
      0.007926802,
      -0.010706729,
      0.024672117,
      -0.0014274577,
      -0.0033995144,
      0.026347242,
      0.023360405,
      -0.008631609,
      -0.004777192,
      0.019858064,
      0.004590255,
      -0.005093339,
      -0.020753216,
      -0.0158417,
      0.00017870082,
      0.027623693,
      -0.00682941,
      -0.008838145,
      0.0053809234,
      0.01409227,
      -0.026017388,
      -0.0026196567,
      0.019266011,
      -0.008315652,
      -0.008957835,
      0.021114195,
      0.003790393,
      -0.0071547427,
      -0.012164261,
      0.0040300908,
      -0.011827683,
      0.047536388,
      0.011191035,
      0.014363267,
      -0.00013542552,
      -0.0181842,
      0.02644807,
      0.0037558873,
      0.0077959266,
      -0.01316417,
      0.00049113896,
      -0.021264844,
      0.042032447,
      0.0035306718,
      0.035813507,
      0.022660038,
      -0.01315025,
      -0.016292574
    ]
  },
  {
    "id": "genai_cohort_nodejs_02_What_is_Authentication__Story_Time_vtt",
    "content": "All right, so in this particular video, I have a story for you now, Piyush. But we were here to understand authentication. Why there is a story. You know what happens? I am a kind of person who don't, likes to understand things by just coding, right? We should understand what we are coding. The, what is the logic behind it? What is it, how that idea was invented. Okay? Because coding is the simplest thing and at the end thing that we have to do. So let's understand the authentication. Now there was one more story that I have just shadcn with you that was XYZ College. So this particular thing, I think this particular story or this particular visual representation helped you in understanding what authentication and authorization is. Now let's understand authentication. Little bit in deep and some challenges that might occur. Okay? Now see there, this is a story of a parking lot. So let's say that this particular area, this particular is a parking lot. So what is a parking lot? Parking lot is an empty big space where a lot of a lot of vehicles can come and park themselves. Right. Now technically this parking lot is let's say a paid service, okay. Or a private owned service by some kind of mall. And you don't want that anyone can come and park in this parking lot. So what will you do? You will basically hire a security guard. So, so let's say that this is the gate and this is your security guard. Or I can say the valet parking. So you have, basically you have a security guard here. So if anyone wants to park a car, no one has access to here, right? What you have to do is let's say this is the person with his car. So let me just try to draw a very basic car. So a green color car. I don't know why I came up with green color. But I think yeah, this is okay. Okay, so one more thing I'll just try to do. So let's say that this is your car. Okay? I didn't know that. I am such a good artist, but yeah. Now let's say this is a car, okay? And this is the owner of the car. Now this owner of the car wants to park his car in this parking lot. So what will happen is he will come to the security guard and he will say that, hey, can you please park my car? Security guard will say that, okay, there is a space available. I'll park your car. So let's say that the number of this particular car, okay, let's give it a number, was, let's say something like, you know, X, X1, Y so this was the number of the car. So what this particular guy will do is he will park his car. Okay? So his car is parked. Now, in return, he needs some kind of receipt, right? He needs some kind of token, right, that, hey, you parked my car. But when I will come back, how can I tell you which was my car? Because if we just say him tell me your number, he might say any other number. Imagine coming in Honda City and going back in Mercedes. That's not a right thing, right? So what this security guard can do is security guard can basically give him a number. So let's say security guard said, hey, here is your token. Basically a token. Let's say a number is written even. Okay, I'm just taking a random example of E So what now this, this particular person can do is. But this particular person can maintain a diary. Okay, typical. How happens he can maintain a diary. Okay, so let's say this is the diary. And in this diary he can make an entry that E1 token belongs to XX1Y car. Okay? Now this person can go roam around, you know, he can go to shopping, he can basically enjoy himself. And when he comes back, what happens? He has to give his token back. That, hey, here is my token, E1 that you gave me. Can you give me my car? And then security guard will say, okay, let me check. He will open his diary. He will see E1 was this car. So he will, he will take the token back, give him his car, and delete his entry. Is this flow clear? Typically how this basically happens in the real world. Also, whenever you go, you give your car, you get a, token which uniquely identifies your car. Some kind of number you get, right? So let's say this is one. Let's say more users are coming. Okay, so. So one more user is there. One more user is there. One more user is there. So what is happening is you are getting different, different tokens. So everyone is getting a token. So let's say E3, E And now we have a lot of cars in the parking lot. So these are the cars parked. And let me just, quickly rename their, you know, numbers. So let's say this is E2, this is, you know, this is the three three number. And this car has a number of four. Okay, now what happens? You have four entries in your, in your book, in your, diary, whatever you are maintaining. So E2 is there, right? Which is having a number, let's say E2Y. Then you have so on. So you got the point. Now tell me just one thing. I just want to understand from you, okay, how open minded you are. Do you see any problem here with this approach? Everything is working fine. Everything is secure, right? There is no problem at all. Everything is secure. We are doing every kind of check. We are maintaining a diary, and our security guard is working really nice, okay? He is a very hardworking man. But what problem could come here? Can you think of a problem here? Okay, now let me come back with the problem. Number one. What happens if there is a sale in the mall? Let's say there's a lot of rush, a lot of people came in. You know, on a typical day, there were just 30, 40, users or members or, you know, users, coming in. But some day came in. So what will happen? This security guard will be overwhelmed because now he has to do Now, because you just had one security guard, what you have to do is he has to do one by one. Number one, he's tired, okay? He is tired. That means he can basically, you know, get a heart attack or he can collapse, right? So technically, there's a lot of stress on one person. Secondly, he has to do one by one. So that means if someday people came in, they have to wait in a long queue because you only had one resource. See, there is a thing that your parking lot can support cars, okay? That is fine. You have enough space. But because you just had one security guard, now he, now there is a long queue of people, which is not a good experience, right? Because he is doing one by one, one by one. And so how can you solve this problem? You will say, push. It's very simple. What I can do is I can basically have three security guards. You will say that because too many people are coming. So what I will do is I'll make three lines. Okay, so one, two, and one more. Security guard. I said, very good. This is a good optimization. Now you have divided the traffic into three lines. And what is happening is you are basically processing three cars concurrently, correct? Parallelly, I would say. Parallelly, you are processing three cars, okay? So now your processing speed is faster. But now there is a problem because there is only one diary. Because there is only one diary. When this person is writing to this diary, can this person also write to the diary? No. Right? Because there is only one diary. So technically, what happened? Even if you have three security guards, or even if you have four security guards, the major problem still remains that at a time you can only process one car. Because if this Person is busy entering some entry here. These three are waiting for the notebook to get freedom, right? So still you are only processing one notebook at a time. The only thing is that the stress per. What do you say? That the per security guard is reduced. But still the line is very long. So you will say, okay, no problem. To solve this particular problem, let's have four diaries. No. Hey, you have your own independent diary. You have your own independent diary. You have your own independent diary. And you also have your own independent diary. Now there is no one shadcn diary. I said okay, which is very nice. Right? Now they are not dependent on each other. So what happens is he can keep on entering. So this particular guy can keep on entering stuff here. This particular can keep on entering stuff here. This here, and this here. Now you have solved all the problems very nicely. I mean, you are processing four cars parallelly, which is like four times. And no one is dependent on each other, which is nice. Now here comes a problem. Let's say this person, when came for parking, he gave to this guy, okay? So that means the entry for E2 is in this particular diary. Now what happens when he comes back to take his car? He accidentally comes here to this guy, he will say, hey, My token is E Can you give me my car? Is there any E2 entry in this particular diary? No, right? Because that. That entry is here. So technically this person will say, sorry, bro, I don't know who are you. I don't have any entry for E So I cannot process your request. I cannot validate whether your car, which is your car. So that means this guy has to remember that. Hey, when you came for parking, you have given to this security guard, security guard number. Let's say four. So when taking back the car, you have to come to four. You cannot go to E1, you cannot go to security guard one, two or three. You have to come back to the same person, which is a problem, right? He has to remember something. And tell me just one thing, what happens? Okay, if everyone parked their car with person four, now these three are sitting idle. Because everyone parked their car to number four. While taking back, also they have to come to four. So that means four is always under stress, right? For some reasons, 1, and are busy. Plus people have to remember that. Hey, if I have given my car to person number four, I have to take back from him. So this is a big problem, right? You're trying to understand the problem, right? See, we are not talking about authentication. We are not talking about authorization. I'm just telling you a story. Everything will eventually make sense. Now, how will you solve this particular problem? So, problem came that when you distributed their diaries, okay? When you distribute their diaries, now you have to remember which person is having which thing. So this is basically what happened. What I'm trying to tell you is that initially, when you just had one security guard, okay? Let's note down our observations. When you had one security guard, okay, security guard, or I could say the park person. You had only one diary, okay? Only one diary. And what you were doing is you were basically giving them tokens. You were giving them tokens and everything was good. The pros were okay. The pros were number one because there was only one security guard. No need to remember. No need to remember. Okay? Which guard parked your car? Which is nice. You can just come back, okay? Secondly, the problem was, secondly, the cons, okay? Con was, okay? The problem was that there was only. Only one guard, okay? So speed was very slow. So speed was a problem. Speed was slow, okay? Plus a lot of stress. Only on one person. Only on one person, okay? And, so, yeah, this. This was basically what was happening in the first scenario, right? Nice. Then to solve the cons of this particular thing, what it did do, you basically had the. Another architect that, hey, I will have four security guards but only one diary, okay? So the pro was, okay, what did you solve? You basically solved this problem, okay? You solved this particular problem. So I'll just say, hey, this particular approach solved this particular problem. A lot of stress, okay? But still, there was one con. What? That at a, given. At a, given time, only one person has access to diary. So which basically makes it still slow. Got it. Now, because, if one person is writing to a diary, the all others cannot write to it. Okay? This was your approach too. See, this was your approach. One, you got the problem. Okay? So you solved it, but you got another problem. So to solve this particular problem, what did you do? You basically said, okay, I'll just do one thing. Four security guards. That means four diaries must be there, okay? That means four diaries. Everyone has their, independent IDs. Now, if I talk about the pros of this thing, what did you solve? You basically solved this particular problem. You solved this particular problem, which is nice. See, at every step, you are solving one problem at a time, right? So solved this particular problem that at a given point of time, only one person has the access. But now you introduce one more con. Now you introduce one more con. What was the con? The con was that hey, the you know, the Parkers, or I can say the customers have to remember, have to remember which was the guard while parking, okay? Because you have to go to the same person in which your diary was maintained, right? In which, in which your car's diary is maintained or in which diary or cars entries maintain. You have to go to the same person. Because if you go to some other person in his diary, there is no entry for your car. So that's a problem. Now technically, if you see about authentication, what we are going to do is now we are going to first implement this kind of authentication. One server, one state, okay? Diaries basically state. And we are going to end up in this problem. Then we are going to solve this problem and I'll show you the another problem. Then I'll going to say that hey, how horizontally scaling is a problem. But in this particular video I just wanted you to visualize what is happening as per your life. Okay? So in the next video, let's go ahead and code this stuff, code this stuff and code this stuff and then finally solve all the problems in just one go. Okay? So that is the thing. So I hope that you have understood the story and the problem behind it. Now how to relate it with the authentication. That's my problem that we are going to see in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "02 What is Authentication- Story Time.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/02 What is Authentication- Story Time.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.010780851,
      0.012426645,
      0.021791426,
      -0.057701014,
      -0.020850485,
      -0.003027129,
      0.012491636,
      0.018677583,
      0.0012187874,
      0.021441901,
      -0.0028169004,
      0.021317424,
      -0.00022014341,
      0.029315468,
      0.14143749,
      -0.0034826556,
      -0.0030978082,
      0.012999702,
      -0.013787855,
      -0.024431793,
      0.008432076,
      -0.0023664995,
      0.004248687,
      0.0016325009,
      0.0072344895,
      -0.0034003386,
      0.017868321,
      -0.0051829615,
      0.027052984,
      -0.01421921,
      -0.011920804,
      -0.012760272,
      -0.0047896667,
      0.039729092,
      0.0040074983,
      0.019338522,
      0.034077447,
      0.002427792,
      -0.022898186,
      0.0012834719,
      -0.010482937,
      -0.01714053,
      0.01290458,
      -0.013592926,
      -0.004123285,
      0.0021318325,
      -0.020003766,
      -0.0182075,
      0.019569084,
      0.008137885,
      0.001547979,
      0.0033936375,
      -0.002808662,
      -0.20148349,
      0.004234368,
      0.013442617,
      -0.0023567697,
      0.0007238723,
      -0.015641676,
      -0.00071541395,
      -0.04010073,
      0.021216266,
      -0.017524047,
      0.016884713,
      -0.014161667,
      0.0108314315,
      0.038272597,
      0.0073747197,
      -0.0020544422,
      -0.00773063,
      0.021367557,
      0.0030218803,
      -0.004758204,
      0.0018361316,
      0.007863856,
      -0.02771842,
      0.0032909429,
      -0.013773944,
      -0.021369746,
      0.0015124605,
      -0.012321981,
      -0.01635745,
      -0.021137767,
      -0.020777173,
      0.00366352,
      -0.0025310474,
      -0.015963793,
      -0.021315528,
      0.0037279471,
      -0.009604951,
      -0.009326125,
      -0.0030507948,
      0.010577956,
      -0.006017976,
      0.0028919722,
      0.0033972661,
      -0.016134536,
      0.012739521,
      0.013745601,
      -0.00091218867,
      -0.0005306455,
      0.02066133,
      -0.018931504,
      -0.0010148815,
      -0.0045858263,
      0.00009121383,
      0.0106895985,
      -0.012850727,
      0.011486129,
      0.008733154,
      0.0025633082,
      0.016204527,
      0.0043372787,
      -0.0015278452,
      -0.0066064494,
      -0.19081756,
      0.028364249,
      -0.004481896,
      -0.005054555,
      0.018129442,
      -0.007516719,
      -0.0068337307,
      0.037115566,
      -0.010694918,
      -0.011446845,
      0.0011915885,
      0.0014714944,
      0.011898353,
      0.02580542,
      -0.014114485,
      -0.03224165,
      -0.0069638644,
      0.012302882,
      -0.0000053941585,
      0.014004197,
      0.022265539,
      -0.0020431282,
      -0.02285428,
      -0.014260201,
      -0.021134555,
      0.0084912805,
      0.015056056,
      -0.019123852,
      0.03547247,
      0.01751166,
      0.0065536187,
      -0.029157158,
      0.0044142203,
      0.0087230075,
      -0.025921622,
      0.030739607,
      -0.0011071534,
      -0.00044698923,
      0.013424827,
      0.0265362,
      -0.04882328,
      0.010832295,
      -0.0009176689,
      0.006226084,
      0.016661402,
      0.004452244,
      -0.019270182,
      0.010690275,
      0.027705101,
      0.003745524,
      -0.024722762,
      -0.0004787235,
      0.0015331632,
      0.013080192,
      -0.014906164,
      -0.0068856482,
      -0.017129429,
      -0.02012031,
      0.0015571867,
      -0.016939571,
      0.0013434298,
      -0.005370577,
      -0.00880147,
      0.012989209,
      -0.011906526,
      -0.007935248,
      -0.016452448,
      0.013807207,
      -0.014309163,
      0.0098164845,
      -0.010468305,
      -0.026809,
      0.009666871,
      0.03112996,
      -0.009108506,
      -0.002285671,
      -0.004926056,
      -0.0018541479,
      0.0032956458,
      -0.0019234723,
      0.00013603509,
      0.0014309646,
      0.00037267612,
      -0.0038995468,
      0.015246176,
      0.008525168,
      0.0070671844,
      0.01872269,
      -0.019555792,
      0.021647763,
      0.0013258309,
      0.023583364,
      -0.019673267,
      -0.0024008434,
      0.037504293,
      -0.00922005,
      -0.0020106188,
      0.01517227,
      -0.014482806,
      0.007049142,
      -0.018438242,
      0.0077224886,
      0.0066305487,
      -0.013252971,
      -0.008583579,
      -0.0011396464,
      -0.00919974,
      -0.0019210024,
      0.0032384524,
      0.02860534,
      0.0061249305,
      -0.004081689,
      -0.015865635,
      0.007931399,
      0.0018099254,
      0.023525767,
      0.013327319,
      -0.0038082323,
      -0.008899924,
      0.016224228,
      -0.017612515,
      -0.015568054,
      0.015770938,
      0.003370236,
      0.017166277,
      -0.0034810142,
      -0.0015986668,
      0.0013575604,
      0.026843432,
      0.023701867,
      0.004216418,
      0.0035183963,
      0.0008389189,
      -0.0047820625,
      0.004142564,
      -0.0061853323,
      -0.0005814947,
      -0.004162944,
      -0.023322288,
      0.014420776,
      -0.024138473,
      -0.045474004,
      -0.0007041412,
      -0.023743592,
      -0.013084,
      -0.0064283223,
      -0.012961919,
      -0.023563623,
      -0.024442611,
      0.0050699646,
      -0.015786007,
      0.0027315682,
      0.039244276,
      -0.003283005,
      -0.0026614685,
      -0.002307138,
      0.008140718,
      -0.012766397,
      0.007505565,
      -0.02071022,
      -0.004332759,
      -0.08544789,
      0.0008565241,
      -0.008111354,
      -0.021245765,
      -0.0034838521,
      0.0074538817,
      0.0049338415,
      0.0044751773,
      0.019080162,
      0.015694257,
      -0.0006621595,
      0.015009538,
      0.006892237,
      0.008640022,
      0.0030641346,
      0.0027290946,
      0.0005495489,
      -0.01838011,
      0.010438313,
      -0.0148848705,
      -0.0050266525,
      0.0043492448,
      0.0016796703,
      -0.010722324,
      -0.008796285,
      0.013149986,
      -0.00778279,
      0.035630193,
      0.01643488,
      0.0012588446,
      -0.0073667774,
      0.028719302,
      -0.008615073,
      0.008113485,
      -0.009305748,
      -0.0006841684,
      -0.007595437,
      -0.018343797,
      0.006605626,
      -0.010672914,
      -0.004271572,
      0.0059488327,
      0.017103978,
      0.008019299,
      -0.003426761,
      0.013729169,
      -0.00223182,
      -0.00489511,
      -0.027337695,
      0.00201681,
      -0.035058636,
      -0.004705992,
      -0.0010668909,
      -0.017443413,
      -0.00933236,
      -0.023519117,
      -0.020037819,
      0.01015884,
      -0.007321133,
      0.022779148,
      -0.00044065522,
      -0.010986879,
      0.0017245935,
      0.011122974,
      0.005854982,
      -0.009315349,
      0.0072461576,
      -0.011503728,
      -0.029927164,
      -0.008698623,
      0.014086244,
      0.009778874,
      0.006911157,
      -0.026541878,
      0.021870703,
      0.019342989,
      0.005839892,
      -0.022891767,
      -0.031577077,
      0.032274894,
      0.0059849806,
      0.018401999,
      0.005307789,
      0.01765604,
      0.0036378535,
      0.014173357,
      0.00646038,
      -0.008414992,
      -0.021764984,
      -0.0022018221,
      0.020811507,
      0.025497047,
      -0.010187876,
      0.0057402444,
      -0.013281985,
      0.0024268387,
      -0.016916296,
      0.00446786,
      -0.008373426,
      0.010656387,
      -0.013006367,
      0.009080208,
      -0.022144279,
      -0.010521593,
      0.0028937985,
      0.023359794,
      -0.009714554,
      -0.0051510925,
      0.011152005,
      -0.0065701003,
      0.0039429134,
      0.011789652,
      -0.017464582,
      -0.0014854094,
      -0.0160966,
      0.012304036,
      0.0052660336,
      0.005123705,
      -0.004967948,
      -0.010264586,
      -0.0017451415,
      0.004830687,
      0.002298692,
      0.0034821604,
      -0.019006943,
      0.001643121,
      -0.022047674,
      0.0059712995,
      0.0053972537,
      -0.01831342,
      -0.01591231,
      0.005607093,
      -0.0006887224,
      -0.006595955,
      -0.017674692,
      -0.017460862,
      0.024127183,
      0.021230621,
      0.010658174,
      0.017296085,
      -0.0065695522,
      -0.0049508587,
      0.013263671,
      0.0065446044,
      0.003964172,
      -0.0031295216,
      -0.011421164,
      -0.008273988,
      -0.0020437613,
      -0.008424574,
      -0.028151141,
      -0.030902216,
      -0.02951838,
      0.008291098,
      -0.0019666068,
      0.033127602,
      -0.002098092,
      -0.011625608,
      0.011718076,
      -0.016344972,
      -0.008970817,
      -0.013206739,
      -0.016095178,
      -0.012530316,
      0.0051785433,
      -0.0016365185,
      0.008023874,
      -0.0020880478,
      0.0055813105,
      0.009753387,
      -0.017167702,
      -0.022408497,
      -0.046019055,
      0.007683388,
      0.02640106,
      0.00012045766,
      0.0067891637,
      -0.019656746,
      0.018779669,
      -0.002055398,
      0.024999043,
      0.0074884403,
      -0.010391611,
      0.0008484932,
      -0.0040318714,
      0.000100713056,
      0.027341256,
      0.008210471,
      -0.011135958,
      -0.004991935,
      -0.030684154,
      -0.019551994,
      -0.022195697,
      0.015995922,
      -0.004457669,
      0.019000078,
      -0.010690797,
      0.008348973,
      -0.01598369,
      -0.014046767,
      -0.009821882,
      -0.018316552,
      0.0052214097,
      -0.010566882,
      0.009883032,
      -0.0066681616,
      -0.020294385,
      -0.020289084,
      -0.004914156,
      0.028324172,
      -0.0038826321,
      0.014491929,
      0.00013125056,
      -0.01930879,
      0.0199837,
      0.020560073,
      -0.0017476999,
      0.0038286755,
      -0.01677293,
      -0.011988083,
      0.017844984,
      -0.011508907,
      -0.00039762916,
      -0.01566204,
      0.010349456,
      0.0077297967,
      -0.00007709889,
      0.0185931,
      -0.0035171707,
      -0.015293617,
      0.0068222093,
      -0.00021058123,
      0.008899551,
      0.0017621568,
      -0.025733268,
      -0.0012553302,
      0.002749329,
      0.006072181,
      -0.0120237,
      0.005597649,
      -0.025603766,
      0.0062972475,
      -0.005776366,
      0.011991865,
      -0.0071977424,
      -0.010417758,
      0.024479134,
      0.029098019,
      -0.03126904,
      -0.0024531614,
      0.025045944,
      0.0028579484,
      -0.011119379,
      -0.030451288,
      0.008467023,
      0.02632947,
      -0.01840662,
      -0.012688158,
      0.016343608,
      0.024640406,
      0.0053352416,
      -0.0053604497,
      0.008232268,
      0.0059777554,
      0.010329473,
      -0.014304863,
      -0.012898257,
      0.00035359533,
      0.016758446,
      -0.14038324,
      -0.006844281,
      -0.015946694,
      -0.010369451,
      -0.01624549,
      -0.011854432,
      -0.008946673,
      -0.029441912,
      -0.011863222,
      -0.016159404,
      0.01475075,
      -0.009660088,
      -0.007959271,
      -0.014649831,
      0.011367119,
      -0.017380003,
      0.017360533,
      0.02498636,
      0.01921069,
      -0.018253094,
      0.010639293,
      0.002946884,
      -0.0032648423,
      -0.0011225848,
      0.017314645,
      0.002714428,
      0.016221225,
      0.00071252626,
      0.006195732,
      -0.01224486,
      -0.015888682,
      0.006933561,
      0.010220925,
      0.010513955,
      0.031055449,
      -0.014963431,
      0.003493816,
      -0.01317813,
      0.020234317,
      0.020867998,
      0.0006569074,
      -0.013703757,
      0.013626469,
      -0.013546807,
      -0.0007481321,
      0.015394719,
      0.002800338,
      -0.008443281,
      0.0064995564,
      0.024875969,
      -0.026684353,
      0.00061780575,
      -0.0037118047,
      -0.025253087,
      0.0072884792,
      0.014583334,
      0.0137426825,
      -0.0038778794,
      -0.029989319,
      -0.0037050548,
      0.007862512,
      0.018166546,
      0.00058027316,
      0.02506456,
      -0.013701092,
      0.0016282131,
      0.01211123,
      0.012516692,
      0.008349828,
      0.0072963773,
      -0.014180772,
      0.009013036,
      -0.012573435,
      0.028593378,
      0.0068038665,
      0.013305405,
      -0.008497747,
      0.022868425,
      -0.020009758,
      0.019140307,
      -0.018791884,
      0.015401557,
      -0.07696081,
      -0.028175496,
      -0.0071712504,
      -0.0017606483,
      0.020150652,
      0.014460568,
      -0.0005517211,
      0.008088277,
      0.0035355168,
      0.0007746384,
      -0.021468112,
      -0.00968654,
      -0.016759995,
      -0.012010762,
      -0.009659572,
      0.0073287617,
      -0.0039370237,
      -0.017368823,
      -0.034125,
      -0.014592109,
      -0.0062194755,
      -0.0109876245,
      0.008228676,
      0.005366221,
      0.0040237205,
      -0.0072017163,
      -0.010382,
      0.0037484744,
      0.009173393,
      0.0043507153,
      -0.0037062324,
      -0.14611511,
      -0.027063724,
      -0.0079112975,
      0.011904458,
      0.010268218,
      0.0046277326,
      -0.0030523918,
      -0.009144918,
      -0.00617474,
      -0.0013469211,
      -0.009749804,
      -0.007602702,
      0.0026156933,
      0.0008167558,
      0.0017999061,
      0.12830669,
      0.0023568694,
      -0.0045272713,
      -0.0063178823,
      -0.0137819,
      -0.016454345,
      -0.02431945,
      -0.0052313837,
      0.0066846046,
      -0.005066763,
      0.010692238,
      0.02335856,
      -0.00451354,
      -0.006764818,
      0.0139239095,
      0.005805952,
      -0.018908814,
      -0.019706592,
      0.010338861,
      0.0022544006,
      -0.030441692,
      0.009121555,
      -0.01162807,
      -0.0012682152,
      -0.015686586,
      -0.0025998657,
      0.010664629,
      -0.004586243,
      0.00015661224,
      -0.005083591,
      -0.007854529,
      -0.0033597231,
      -0.008043868,
      -0.0071947253,
      0.0011591779,
      0.0042641666,
      -0.061924476,
      -0.018050766,
      -0.0081493305,
      0.0016155685,
      0.009224579,
      -0.0061965575,
      0.0031085247,
      0.002324925,
      0.003479682,
      -0.01597867,
      -0.016341692,
      0.0066664354,
      -0.0016103328,
      0.02224074,
      0.004396804,
      0.0037703116,
      0.012880242,
      0.018679956,
      -0.003763072,
      -0.021511253,
      0.024309218,
      -0.016895816,
      -0.002167084,
      -0.020789478,
      -0.0025289373,
      0.008995048,
      0.019750953,
      0.0085005155,
      0.003620645,
      0.0027828703,
      0.0014790191,
      -0.011857926,
      0.01231823,
      0.016896801,
      -0.033375897,
      -0.014562585,
      0.0111467345,
      0.009615644,
      -0.003241473,
      -0.008455652,
      0.00466698,
      -0.000799812,
      0.03169436,
      0.011071784,
      0.019327579,
      0.0035458682,
      -0.0016112934,
      0.04140471,
      0.017303376,
      0.0047041406,
      -0.032303963,
      0.010705489,
      -0.027048431,
      0.018963808,
      0.019277474,
      0.013814397,
      0.04234213,
      -0.008163575,
      -0.0053481977
    ]
  },
  {
    "id": "genai_cohort_nodejs_03_Session_Based_Auth_vtt",
    "content": "All right, guys. Hi. So, in this particular video, let's start by coding a basic authentication system using the story one, then improving it with story two, and further improving it with story three. And finally the last set of the story, how we can make it fully optimized. Okay, So I have made a very simple project that is authentication So first things first, npm init in your integrated terminal. Right. So authentication I'll just do enter, enter, enter and enter. Everything is good. So let's install couple of things. Right? npm install express is first thing. And please do mention at the rate Okay. point x, because you know, we want to install express at so that you don't get into any trouble. Nice. Now because we also want typings. Okay, we also want typing. So I'll just say npm install at the rate types node at the rate types express at so that I can get the IDE recommendations. And don't forget to save it as a dev dependency. So after this particular command, this is what my package JSON looks like. So you can see in the dependencies, I only have Express at this particular version. I have dev dependencies at, this particular version and this particular version. Nice. Now let's get started by creating an index js file. So first things first, I just want to basically create an express server. Okay. So I can just say import. Okay, Import express from express. Nice. Then I can just create an app which is express. Okay, that's also good. And let's create a port also. So const port, is equals to I. I'll just say 8, that is okay. And app dot listen. On which particular port? This particular port. And. And a callback function saying console log. Let me just zoom in a little bit for you so that you can see this clearly. Right. I hope this is fine. So console log. And I can just say, you know, server started on port and just add the port here. Nice. Now what is the next step? Let's create some routes. Okay. Now, as a part of authentication, of course, you need a login route, right? So what do you mean by login? Login basically means that you are going to give me your username password. That means you are trying to authenticate. You are bringing back a token. Okay, I'll create one more route. Let's say, you know, sign up. Okay, let's say sign up. So this is, is going to be your sign up route. And sign up is basically like, you know, taking your car and parking it creating a new car sign up. And I'll just create one more route that is me. Me basically returns that. Who are you on the server? Can I recognize you or not? Is going to be the me route. So now see what we are going to do is app dot get. Okay, first let's sorry app dot post. Let's create a route that is sign up. Okay? Now what is the sign up? Sign up basically means that hey, here is my car. Here is my car, okay? Please park it and give me back a token that is your sign up, correct? That is how you sign up. So in the sign up, okay, one, what will you give me? Okay, so what are you going to give me? You are going to give me your credentials. Okay, so a callback function. So I'll just say hey, this is request, this is a response. So I'll just take some data from the request body. What, what I want, I want. Okay, when you bring your car basically your data, I want your first name, okay? And let's just call it as name. And you can give me your email and you can give me your password. So email is basically like your car's number. Okay, Just for the analogy. So I'll just make a new comment. So email is basically like a unique car number, right? So in order to have this, what I will do understand this thing. This is very important, correct? First of all, I have to do one thing that is a middleware app dot use, okay? App dot use that is express dot JSON because we are going to talk in the JSON format. Now what I can do here is if you think about it, I have to create a user, right? Basically I need my diary. Okay? Const diary. Eventually it can be a database also. But as of now let's go with this thing diary. So what I can do is first of all check that if this particular email is already in the diary. If email in diary this means you are already signed up, right? So you can just say return response status of a and you can just say JSON and return an error that a user with account Or I can just say user, email already taken. So this particular email is already in the use. Else what will you do is let's create a token for this user. Let's create a token for this user, right? So what I. How can you create a token for this particular user? Tell me that. Okay, So I can just say I'll just use date. now so this basically returns what is my current date so that is a token. Simple. Okay. Ideally it should have to be some kind of id, but this is my id let's say. Okay, now here is the one thing that I have done wrong. Let's create a diary and let's create a new set of emails which are already taken. So emails is basically going to be a new set. Okay. Okay, so let's say if emails dot has okay, this particular email. Now if it is not there, what I'm going to do is I'm going to just say hey, in my diary, in my diary at this particular token, whatever you have created, I am going to say hey, this is your name, this is your email and this is your password. Okay, I have basically made a diary entry. Okay, so create a token for user. A token for user. Okay, I have made a token and then I can just say do a diary entry. Okay, do a entry in diary. Okay, very nice. And then, then what, what's next? One more thing also you have to say emails. add okay, this particular email and finally you can just return response. JSON saying status is let's say success. And then you can also return his token that hey, hey bro. That this is your token. Every time you have to come back, you have to come back with this particular token. Nice. So this is what I have done. This is what we basically discussed. So just see, just go through the code once what we are doing, make a diary, make email set. If user has already signed up using this email you return a new error. Else create a new token. Okay, do a diary entry, add to the email set and return the token. So this is basically what I have made which I told you here. So you take a token, you basically do a diary entry and return it back. Nice. Now let's create a route app dot get. Okay, let's say a me route slash me me is basically what that I will tell you. Who are you if you want to take back your car. It's kind of like you want to take back your car. Okay, so request and response. So whenever you come back, what I am basically saying you. Okay, now listen to this thing. Whenever you come back you have to bring your token. See now in this particular story, if any user wants to take his car back, he has to bring his token. So I'll just say that hey, in the request body you have to bring your token back. If there is no token. If no token is there? I'm just going to say return response status. Hey, it's a bad Request JSON. That error is basically missing token. Okay, Missing token, which is good. Else what I will do, I will search my diary. So I'll just say const. Okay, I'll just search for this token in my diary. If Token. Okay, in diary. So let's say if you're not able to find this, if token in diary is not there, okay, then that means, hey, you have just bought a token which is not in my id, which means you are not. This is not a valid token. Okay, you have bought a different token. So I'll just say invalid token. Invalid token. I don't have an entry. Okay, but if I have an entry, I'll just say const. Entry equals diary and add this particular token. And what I can do, I can just say return response JSON and you can just return the data as the entry that. This is what I basically store about you. That's it. So this is our me route. That's it. So this is your very simple authentication. Correct. So now if I run this particular application, how to run. So I'll just create a new start script and I'll say node index. So npm start. Okay, so everything has gone good. You can see server, is running on Port So I'll just use the Thunder client. Okay, so let me just create a new request and you can just ignore these requests. Okay, so I'll just say that. Hey, on localhost Okay. On localhost8000, on which particular thing? On slash signup. Correct? Just a second. Yeah, on slash signup. I want to make a new post request. Nice. Okay, in the body, I'm going to send a JSON there I have to send my name, which is piyush Garg. Okay. And I will send my email, okay, which is piyush piyushgur. devmail. com and also you need my password which is Right? Send. I got a token. Can you see that? This is my unique token. I'll just copy this particular token and as of now store it here. This is my token. If I send this request again, email is already taken. It's a bad request. Nice. Now let's say if I create one more new request, right? So let me just create a new request. Okay, so in this particular new request, what I'm going to do is I'm just going to take the same thing, but I'm going to make a request on slash me. Okay? Slash me. So when I send it says hey, missing Token. Okay, so that means in the body I have to send a token. So I am sending token 1, 2, It says invalid token. This is not a valid token. This was the valid token, right? So if I send this token now, you can see it says this is you. You are this particular person. So now what happened? Can. Let's say if I want to, okay, if I go back to my server, let's say what I want to do is I want to say that, you know, you want to access cars. Let's say you want to access some private data. So I can just say app get. Sorry, let's make a post out only. Okay. App dot post. So I'll just say that this is some kind of private data. Okay? This data should only be visible to persons who are logged in. Who are logged in. So what? How can I check? First of all, try to read the token. Okay, if no token or this thing see same. I'm just copy pasting the code, right? Copy pasted the same code. I'm just saying if no token, if not token in diary entry. Now what I can do, I can just say if I got the entry, then I can return you the data. So I'll just say return response JSON and I can just say the data to be what? I can just say you know, status. I can just say private data. Private data access granted. Something like this. So that means if you want to take this, right? If you want to make a request on slash private data. You can see I'm able to make a. Not able to post because I have to restart my server. Now here's a problem. Because I restarted my server, I have to sign up again, right? No worries, I'll just sign up again. This is my new token. Now if I try to access, you can see it says invalid token because this was the old token. Send private data access granted. If I will not send this, it says missing token. That means I am not logged in. I am not authenticated. So this was your very basic authentication. I mean in real world, this is not how authentication works in reality. But you have actually made a successful working authentication system on, on this principle. Okay, in reality, no worries, I'll walk you through. In reality, this diary is going to be what, a database? This diary is going to be database. Okay, now you're getting my point, right? And then you are going to generate these tokens. Got it? Okay, now coming back, what was the con? Only one guard speed was slow. Now here is a problem. See, in reality, in real world, what happens now? You don't have one server because one server cannot handle a lot of traffic. In reality, you actually spin up multiple instances of your same server. Okay. So when users come, when users tries to visit your website or server. So few requests are routed here, few requests are routed here. Some requests are routed here, some requests are routed here. So technically, if while he was logging in or he was creating an account, he redirected to this server. Now this server, basically has the token, right? In his states, in this particular diary, this server, contains it. But when he tries to access the private data, the request was routed to this particular server. So what happens? Does this server know that this token means this user? No. Right. So that is a problem. That means this particular approach is not scalable. Why? Because if, you want to go with this approach, you have to make sure you always and always have only and only one server running. Because this server maintains a state, a diary, this server contains the data. So all the requests must be handled by a single server. So this approach of making a diary and emails is not at all scalable. It is not at all scalable, right. So scalability is an issue. But if you only want to spin up one instance, then this is fine. Okay, nice. What was our second approach that I want to scale it, right? I want to have four instances of my server running, but I want to have only one diary. So in this particular scenario, what we could do is this diary can be moved to a database, yes or no? So technically what we are trying to do is, you know, drizzle, right? So let's say this is your database running, so everyone can basically connect to it, keep the tokens here, retrieve from here. But the problem is that with this approach, what will happen? You are actually making a lot of load on the database because four servers are continuously reading the data and writing the data to, diary. And while, while one is writing to something to the diary, okay, he's creating a token, others have to wait, Others have to wait. That is a problem. But to solve this problem, if you give four diaries to four security guards, again, that's a problem. You know what's a problem? Because if the diary is with this person, he has to go to this person only. He has to go to this particular server only. His request cannot be routed to some other server instance. So this is basically the problems with this particular approach. Okay, just for your knowledge, this particular thing is also known as session based authentication. It's known as a session based authentication. Why? This is known as a Session based authentication. Because what you are basically doing is now you're creating a session for a user, you are maintaining a diary for the user and you are giving him a temporary token which is stored in your database, sorry, not database, in your memory, I can say right in your ram, in your variable. So while the server is running, basically you have the access to the token that, okay, if the token is in the diary, you mark him as authenticated. So in session based authentication, what happens is basically the server becomes. The server is stateful. The server is stateful, server is maintaining a diary for you where it is keeping a record of that, which token, which token is issued to which person. Yes or no? Yes or no. This is very nice because you know what is the advantage here? I have the control, anytime I want to log out this user, I have to just delete the token in my database. So let's say if I figure out that hey, this particular user seems a hacker, so what I have to do is I have to clear my diary and all the users or that particular user with that token is automatically logged out because when he will again make the request because the token is not there, he will be considered as logout. Session based authentication. The problem is it's stateful, right? The scalability is a problem. It's not at all scalable. If you have noticed, this is really nice for short lived sessions. Can you give me an example? If you understand banking, whenever you log into your banking website, you are all, you are only logged in for a couple of minutes. They only allow you to log in for five minutes. After five minutes you are logged out. Because they use sessions, they use stateful sessions, they create a token on their server, they give you the token. But what is in that token? The data about that token is stored on the database. See, technically if you see here, this number makes no sense. This number which is my token makes no sense at all. Because the data associated with this number that, hey, the username is piyush, it is, you know, email, is this password? Is this, that data is actually stored on the data, on the server. So in this scenario you give the token to the person. Okay, but actual relevance of the token is stored on the server. That is the main thing. That is why it is known as stateful because the state is maintained by the server and it's a session based authentication. It is really nice for short lived sessions, but not for the long lived sessions. So what is used in the long lived sessions? There is something known as JSON web tokens Right. Or I can also say stateless authentication. Okay, Stateless authentication. So this is something we are going to cover in the upcoming videos as well. So let me just do one thing. In the next video, let's end to end. Okay? I'm using the word end to end. Let's end to end. Okay. As I say end to end, code a session based stateful auth system. Okay? So in the next video we are going to first code this and then we are going to jump to the JSON web tokens which is basically a stateless authentication. So I meet, I'll meet you in the next particular video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "03 Session Based Auth.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/03 Session Based Auth.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0063152,
      0.015373328,
      0.015835825,
      -0.052626308,
      -0.022662843,
      0.0026030159,
      0.026978154,
      0.0034013414,
      0.010035588,
      0.0065883812,
      -0.009879196,
      -0.0027428148,
      -0.0004005329,
      0.02569738,
      0.14540754,
      0.0112050995,
      -0.0029987101,
      0.015513455,
      0.0022627052,
      -0.045913167,
      0.011197119,
      -0.005787869,
      0.012116457,
      -0.003930232,
      -0.015167946,
      0.0047846283,
      0.0038548987,
      -0.0051655113,
      0.019468404,
      -0.020476118,
      0.0053532072,
      -0.0014615735,
      0.0028763674,
      0.01936537,
      0.0009613695,
      0.02229509,
      0.034486506,
      0.007933467,
      -0.038151797,
      0.0027035943,
      -0.0032095269,
      -0.000768344,
      0.0053780363,
      -0.0047432664,
      0.0032473681,
      -0.0000746299,
      -0.010804809,
      -0.013025945,
      -0.0014019893,
      0.011636365,
      -0.00864886,
      -0.00009968686,
      -0.028578432,
      -0.18186939,
      -0.015429265,
      -0.003166894,
      0.015729377,
      -0.010710707,
      0.009216872,
      0.01091479,
      -0.02327727,
      0.0125788655,
      -0.04822268,
      0.0090286685,
      -0.0034038615,
      0.023964956,
      0.018517425,
      -0.005347598,
      0.008411091,
      -0.005377369,
      0.020248644,
      0.021359744,
      -0.0041288896,
      -0.0059992904,
      -0.011410504,
      -0.0068176016,
      0.011442683,
      -0.0119358525,
      -0.00820075,
      0.00938458,
      -0.0071721086,
      -0.012258715,
      -0.009917862,
      -0.0058027315,
      0.004629389,
      -0.010389619,
      0.0062530246,
      -0.01478454,
      -0.009931599,
      0.0066487975,
      -0.001130835,
      0.017582959,
      0.007384231,
      0.0048903706,
      0.0026290799,
      -0.00937428,
      -0.010360061,
      0.022538489,
      0.0060327714,
      0.0023526172,
      0.016245114,
      0.011512324,
      -0.01243385,
      0.010965831,
      0.0070073386,
      0.020669712,
      0.0009343843,
      -0.0006206604,
      0.029908072,
      -0.0047341194,
      -0.0045005325,
      -0.0032171884,
      0.013203186,
      0.016735334,
      0.018036483,
      -0.19038253,
      0.026691068,
      -0.00526839,
      0.019171165,
      0.015011613,
      -0.02373696,
      0.0112702735,
      0.018343348,
      0.0040869676,
      -0.02391182,
      0.007748881,
      -0.0050093154,
      0.01990286,
      0.020454166,
      0.002226659,
      -0.020658469,
      -0.007945691,
      0.01276018,
      0.0043330775,
      0.02279031,
      0.022585586,
      0.01577085,
      -0.006709272,
      0.0015550401,
      -0.014485115,
      0.012455468,
      0.029144462,
      -0.017553693,
      0.023811758,
      0.013687276,
      -0.0049180617,
      -0.022316167,
      0.022158789,
      0.004674269,
      -0.039472662,
      0.029085279,
      -0.015536603,
      0.010660073,
      0.0086594615,
      0.019244147,
      -0.06885486,
      0.010373467,
      -0.002809888,
      0.0024916655,
      0.0033721873,
      -0.009393211,
      0.012260493,
      0.00023370511,
      0.033695344,
      -0.00035863067,
      -0.007783692,
      0.00968737,
      0.0014855037,
      0.008447017,
      -0.014852904,
      -0.019760575,
      0.002171967,
      0.0007511733,
      -0.00022516999,
      -0.008140548,
      -0.00778896,
      -0.0046873833,
      -0.009502736,
      0.0007070676,
      -0.021355137,
      -0.008620395,
      -0.01550209,
      0.014322546,
      -0.0044793636,
      0.017578278,
      -0.0024305624,
      -0.0206089,
      0.010501317,
      0.028470462,
      -0.021271195,
      -0.0038840433,
      -0.012188085,
      -0.0070723216,
      0.003308781,
      0.023249416,
      0.0041997535,
      -0.0015561908,
      -0.019338375,
      0.014900411,
      0.0060121897,
      0.026673052,
      -0.0014839683,
      0.0032799763,
      -0.0020002488,
      0.0020536594,
      0.022333594,
      0.022520544,
      -0.019834114,
      0.006667672,
      0.023607822,
      -0.017974777,
      -0.013620976,
      0.0063827764,
      -0.003647602,
      0.00463819,
      -0.012564448,
      0.02544335,
      0.0048469333,
      -0.0063929087,
      -0.011189247,
      -0.0028879242,
      0.008983298,
      0.015906543,
      0.01850117,
      0.021774847,
      0.014580357,
      0.017601945,
      -0.019335587,
      0.009300374,
      -0.00053525425,
      0.019699803,
      -0.00040131743,
      -0.005895336,
      0.0009922122,
      0.01711391,
      -0.015750324,
      -0.011489869,
      0.0105641065,
      -0.007421583,
      0.002704312,
      0.012049283,
      -0.023957966,
      0.0041306363,
      0.019749306,
      0.036339696,
      0.008787191,
      -0.018113997,
      -0.0003694425,
      -0.0026146953,
      -0.012319736,
      -0.020596487,
      -0.010930356,
      -0.0043009445,
      -0.015139216,
      -0.0040791836,
      -0.016583238,
      -0.03254508,
      0.0025960153,
      0.0042567994,
      -0.00073604414,
      -0.0069517624,
      -0.012285912,
      -0.012649768,
      -0.008041061,
      -0.0026865762,
      -0.02426579,
      0.0122409295,
      0.039256785,
      -0.010211617,
      -0.0027303838,
      0.0036192737,
      0.012733891,
      -0.00799044,
      0.004079634,
      -0.012575972,
      0.0047961753,
      -0.09707898,
      -0.0060415557,
      -0.002494982,
      -0.026383184,
      -0.023122933,
      0.02596927,
      0.0059665926,
      0.007736014,
      0.018127536,
      0.022450734,
      -0.005493737,
      0.0021161418,
      0.021093557,
      0.0030363952,
      -0.0011698665,
      0.023094453,
      -0.001455314,
      -0.01743191,
      -0.0026598552,
      -0.021578003,
      0.0035750438,
      -0.012647167,
      -0.0124493595,
      -0.0093530705,
      0.020570248,
      0.016863357,
      -0.016292732,
      0.02083379,
      0.019408636,
      0.0014416762,
      -0.0013385382,
      0.034881983,
      0.008718483,
      -0.004576059,
      -0.02155863,
      0.019411692,
      0.034117717,
      -0.0076923487,
      0.016158942,
      -0.0119644785,
      -0.011081119,
      -0.0075793196,
      0.007968902,
      0.0076993187,
      -0.0071957144,
      0.007223519,
      0.02139045,
      -0.022039434,
      -0.01753641,
      0.022545427,
      -0.032716148,
      0.004835241,
      0.009757107,
      -0.03582163,
      -0.00016689609,
      -0.004350211,
      0.0065228175,
      0.0077977185,
      0.0036990761,
      -0.008186865,
      -0.0069584986,
      -0.0040834914,
      0.006166801,
      -0.0009712546,
      0.02426488,
      0.006805617,
      0.0038115473,
      -0.008250739,
      -0.009307265,
      -0.030065268,
      0.018091472,
      -0.005193248,
      -0.01171596,
      -0.032298982,
      0.004538391,
      0.017213883,
      0.022152781,
      0.0010067053,
      -0.02947489,
      0.022256324,
      0.00438253,
      -0.002239173,
      0.01821355,
      0.03283978,
      0.0075806403,
      0.013458353,
      0.0048783203,
      0.012184528,
      -0.01278945,
      -0.012739454,
      0.02650218,
      0.027385429,
      0.012510743,
      0.0043133064,
      -0.0069557442,
      0.0068538156,
      -0.006362405,
      -0.023063501,
      -0.00901169,
      0.010919667,
      -0.041347686,
      -0.008909056,
      -0.017453134,
      -0.004346714,
      0.012016128,
      0.02842565,
      -0.007835048,
      -0.004533917,
      0.0075977957,
      -0.0004950815,
      -0.009669366,
      0.019340817,
      -0.004611052,
      0.0010287394,
      -0.043324366,
      0.020367837,
      -0.00040575644,
      -0.0012558554,
      -0.025974825,
      0.0139487395,
      0.0029245252,
      -0.0034447238,
      0.0041617104,
      0.013903131,
      -0.009445798,
      0.006339918,
      -0.0079876,
      0.005106235,
      -0.005235671,
      -0.014156424,
      0.003239395,
      -0.012534608,
      -0.017622426,
      -0.007860774,
      -0.01625136,
      -0.017571388,
      0.0152673535,
      -0.0090259,
      0.023227802,
      0.020762412,
      -0.0038625184,
      -0.0034214468,
      0.006330372,
      0.010461126,
      -0.0068436195,
      0.013334103,
      -0.02672253,
      0.008818033,
      0.011721588,
      -0.009056449,
      -0.011253638,
      -0.014206911,
      -0.02576049,
      -0.0029891813,
      0.009941749,
      0.016153745,
      0.0128374705,
      -0.0042051324,
      -0.0078008366,
      -0.017917471,
      -0.026702154,
      0.0029590728,
      -0.017682316,
      -0.016002715,
      -0.008455975,
      0.024349295,
      -0.00079025613,
      0.0013721511,
      0.009590649,
      0.0016804116,
      0.004256121,
      -0.01763615,
      -0.04278769,
      0.018688615,
      0.015795983,
      -0.008142472,
      0.008640081,
      -0.0092621865,
      0.020945814,
      0.002195942,
      0.016478045,
      -0.0084258355,
      -0.0023710283,
      -0.0066591175,
      -0.008028035,
      0.00842066,
      0.02413224,
      -0.010912936,
      -0.026619518,
      0.0029238376,
      0.0046921214,
      -0.0075568277,
      -0.016392913,
      0.01185868,
      0.009597258,
      0.021615988,
      -0.0010883764,
      0.023191344,
      0.00064799574,
      -0.0019134607,
      -0.019561572,
      -0.0071058334,
      0.0076926094,
      0.006101956,
      0.02041299,
      0.0049945614,
      -0.021474166,
      -0.0069284528,
      -0.0055209305,
      0.029150598,
      -0.005412732,
      0.02471029,
      0.01276859,
      -0.008940409,
      0.034407347,
      0.022462992,
      -0.0051837373,
      0.010752754,
      -0.029078668,
      -0.0060548885,
      0.018954055,
      -0.012244418,
      -0.013484482,
      -0.006313714,
      0.013330627,
      -0.00036704703,
      -0.023938209,
      0.014879485,
      0.0038652848,
      -0.018446865,
      0.002511256,
      -0.010379753,
      0.021099685,
      0.010652937,
      -0.008318346,
      -0.011774221,
      0.0038957344,
      -0.01284944,
      0.0053642006,
      0.005000391,
      -0.015203843,
      -0.006921896,
      -0.0068224273,
      -0.009068904,
      0.0054250783,
      -0.0020177122,
      0.026649944,
      0.018523563,
      -0.011361977,
      0.0054865256,
      0.02241017,
      0.010334733,
      -0.0007106979,
      -0.021771317,
      -0.0051687416,
      0.02241861,
      -0.009581253,
      -0.0018043951,
      0.0035480454,
      -0.0042400057,
      0.00857689,
      -0.014503461,
      0.005826437,
      0.010170299,
      -0.0011858792,
      -0.018477123,
      -0.017367449,
      0.0016777373,
      0.025709739,
      -0.11636241,
      0.0013760736,
      -0.03356579,
      -0.010449025,
      -0.007963871,
      -0.003078662,
      0.014523478,
      -0.024581932,
      -0.025771946,
      -0.020607414,
      0.0049731857,
      -0.0021936616,
      -0.007929207,
      0.001074343,
      0.0066227363,
      0.0007667716,
      0.019010486,
      0.027539792,
      0.036112554,
      -0.01949567,
      0.004019166,
      0.0009970374,
      0.005031869,
      0.0032150636,
      -0.006591033,
      0.015069615,
      0.02590679,
      -0.0072667436,
      0.0054804706,
      0.0010436581,
      -0.029216552,
      -0.00058226177,
      0.0018435366,
      0.008930544,
      0.011241194,
      -0.0068090972,
      -0.012980169,
      -0.011957727,
      0.023714226,
      0.00564822,
      0.021902572,
      0.010478759,
      0.023849342,
      -0.0010296298,
      0.0077707903,
      0.009602516,
      0.007462431,
      -0.012593705,
      0.011691158,
      0.03334879,
      -0.031063246,
      -0.018119633,
      -0.0064645605,
      -0.023101235,
      0.006491472,
      0.014749847,
      -0.0038047289,
      0.018001556,
      -0.012615374,
      -0.008724075,
      0.01095682,
      0.016409084,
      -0.00089933485,
      0.032900527,
      -0.00914552,
      0.017352127,
      0.013590911,
      -0.0010086291,
      0.0027405126,
      -0.010121862,
      0.0012583184,
      0.0014971974,
      -0.0044947737,
      0.019940797,
      0.013285087,
      0.01039249,
      -0.01345896,
      0.011572433,
      -0.020865653,
      0.0020745264,
      -0.02160452,
      0.012690185,
      -0.05777397,
      -0.01368814,
      -0.0022516353,
      -0.009840862,
      0.007880256,
      0.019272884,
      -0.003358811,
      0.011860115,
      0.010049945,
      0.001604266,
      -0.024584023,
      -0.015539353,
      -0.017515203,
      -0.027667008,
      -0.022669867,
      0.025610616,
      0.0029730687,
      -0.02811016,
      -0.020863531,
      0.004298741,
      -0.008763521,
      0.004600179,
      -0.0059912787,
      -0.012273825,
      0.010432788,
      0.021313913,
      -0.023641886,
      0.013917044,
      -0.003223681,
      0.0075376974,
      0.0050167963,
      -0.15214512,
      -0.02057274,
      -0.009308418,
      0.018790707,
      0.0062161507,
      0.007014189,
      0.004538552,
      -0.0030597062,
      -0.0030033083,
      -0.004785838,
      -0.0062233172,
      -0.028754815,
      -0.008832965,
      0.011253098,
      -0.017491516,
      0.12923333,
      -0.0016239476,
      0.0050797984,
      -0.0055906503,
      -0.009936001,
      -0.017936973,
      -0.0074496204,
      -0.007492615,
      -0.005383319,
      0.0000658646,
      -0.01119723,
      0.017804815,
      -0.026400417,
      0.003912263,
      0.0053158873,
      -0.0065304027,
      -0.012686089,
      -0.019502338,
      0.015015348,
      0.01046387,
      -0.009103174,
      0.0063207718,
      -0.026433192,
      -0.0048469356,
      -0.008594559,
      -0.0067117987,
      0.022895457,
      0.0045879353,
      0.002295984,
      -0.0048132758,
      0.016839799,
      0.011880719,
      -0.015216584,
      -0.012627232,
      -0.018926004,
      0.02670952,
      -0.0574028,
      -0.006691222,
      -0.014380304,
      -0.010713414,
      0.02746412,
      0.012418795,
      0.0024932506,
      -0.014667747,
      -0.0066130036,
      -0.0022077053,
      -0.01694333,
      0.008183516,
      -0.008311596,
      0.034236364,
      0.0013418735,
      0.009217553,
      0.023793584,
      0.031318743,
      -0.016754651,
      -0.0048879264,
      0.011614067,
      -0.013841568,
      -0.0024827826,
      -0.014953595,
      -0.009868795,
      0.012049422,
      0.025843943,
      0.0112134,
      -0.0048646764,
      0.007864984,
      0.013636954,
      -0.0069826823,
      -0.004997123,
      0.014308524,
      -0.022487856,
      -0.016956918,
      0.018277377,
      -0.0087234415,
      -0.0041872766,
      -0.00039247933,
      -0.0004635214,
      -0.008253282,
      0.032012075,
      -0.007064564,
      0.014099073,
      0.015752764,
      -0.009116286,
      0.03749586,
      -0.000742697,
      -0.000104462975,
      -0.013769477,
      0.006626051,
      -0.022628367,
      0.027824197,
      0.014015285,
      0.027645253,
      0.03435112,
      -0.0055432185,
      -0.00023762882
    ]
  },
  {
    "id": "genai_cohort_nodejs_04_Session_Based_Auth_with_Drizzle_ORM_vtt_chunk_0",
    "content": "All right guys, so in this particular video let's code an authentication system end to end, using session based authentication. I hope at this particular point. You know what is a session based authentication? Why is it known as stateful authentication? And with that let's start with the video. So here I have made a simple project that is authentication session, right? So this is what we are going to use here. And let's get started. Okay, so, so first of all what I'm going to do is I'm going to use PNPM As my package manager. So it's basically same as npm. So if you search for pnpm, it's basically a better version of npm. Okay. It works similar to npm and everything is that, but it is more fast, it has more optimal and it caches. So I would prefer that if you can also use pnpm. The installation is very simple for pnpm. So here you can see all the installation steps. For example, PowerShell on Windows is there POSIX systems are there, right? And if you go down there is a Docker container installation as well. There is, if you go down there is a core pack, installation. So there are like all the installations are there. And this is the simplest one. For example, you can just say npm install hyphen g PNPM at the rate latest. That's it. Okay. No, no need to give the version name. And you can even use Homebrew if you are on Mac. So basically you can use PNPM as a replacement for npm. So, so the command goes like PNPM Init. Basically this is same like npm init. You can see I have a package JSON file right now what we have to do is we have to basically create an end to end authentication system. That means we need database, we need all the routes. So technically it's an end to end thing. Okay, so now we are going to do PNPM install at the rate types okay, slash node and add the rate types express. Okay, slash express and save it as a dev dependency. And don't forget to make 4x. Okay. So this ensures that we are on the same version. Nice. Now we have to install express. So I can just say pnpmi and I can just say express at the rate 4x. So this basically gives me the express as well. So now you can see in my package JSON I have these dev dependencies. And I have these dependencies. Nice. So let's get started by creating an index js File. Okay, so what I'm going to do is I'm just going to say, import something from express. So basically I want to import express from express, right? Let's create an application that is express. Okay, that's nice. And let's also get the port. So let's say I want to run it on process env port. So if you give me an environment variable named port, I will use that. But just in case you are not giving me a port, let's fall back to 8, port. Yeah, so this one is nice. Now we can just say app, listen on this particular port and I can just say console log, that server is running on port Whichever port you are running on, that is this particular port. So this is our basic boilerplate code, right? And let's also create a dummy route that is app git, that is slash. So I can just say request response and return a new response. JSON saying status. Okay? Okay. So it's basically like server is up and running. So this is my basic boilerplate code. Let's also configure a dev script, okay, that is using the nodemon, because I don't want to restart the server again and again. So I can just say pnpm install or I can even use node hyphen hyphen Var. Okay. And I can just say index. Right? And similarly we can even have a start script that is node index. That's it. So if I say pnpm dev and enter, you can see that my server is actually running on port Nice. Okay, so this is basically nice. And one more thing, the warning that is coming, it basically says that, hey, can you please add the type module? Okay, so that everything is up and running. You can see now everything is up and running. That's absolutely great. Now we have to start by adding a database. So we are going to use Drizzle ORM. So we have already talked about Drizzle ORM. So let's go into the JavaScript and get started. So what we want to do is we want to use a new database that is PostgreSQL. We want to use basic file structure is there. So we have to follow the same thing. Okay, so it says that what you can do is you can have your schema ts. So it's basically in typescript. That is what they are telling you. Result config TS is there. So everything is there. So what we need to do is let's follow the same structure. Okay, so what I'M going to do is let's create a database. Okay? So I'll just create a new folder that is db. And inside the DB they recommend that what you can do is you can have something known as schema TS file. So schema js in our case. Okay, and let's also create an index js file. Nice. So these two files, basically I'm clubbing together. I don't think so. We need it. So I have just made it. So we will see it later. Then we have to make a drizzle config js file. Okay. Drizzle config js file. So this is our drizzle file. Now we have to say pnpm add these things we have to add. Okay, so that's fine. We can just say pnpm add drizzle, ORM, PG and env. Now what you will notice is that the pnpm is actually very fast. And let's also add these things. Okay, so I'm just saying enter and we are good to go. Nice. Then what we have to do is we have to make a database URL in a. env file. So usually we always keep our sensitive variables in a env file. And this env file is never ever pushed to the GitHub. Okay? So database URL, your passwords, your tokens, everything is stored in this env file. So this URL we will, create in a moment. So what we can do is we have to basically say we have to create this configuration, right? So we have to say import this particular stuff. I said, okay, see, I'm just copying from the documentation. Right? Then we have to import drizzle, okay, that is this particular thing. And then we can say, oh, by the way, this we have to do in the DB file, not here. Sorry, my bad. We don't have to do it here. We have to do it in the DB file. Okay, so which one was the db? In the index ts. So that is this particular file. Yeah, So I can just copy this whole thing and, and I can just paste in here. So this is basically the thing and don't need to put up this thing. So DB instance and we can just say export, default. Okay. Default the database. Okay, so we can just export the database from here. Nice. So what we have done is inside the DB index file we have made this initializer. Now we can create a table. Okay, so this table thing we will take care later. So drizzle. config file is something I'm interested in. So drizzle. config. GS file. So let's import env. Let's import the define config function. And what we have to say is we have to export default a configuration, right? Now what this configuration basically looks like is you have to say, out folder which is going to be dot result. Where is your schema? Okay, this is very important. Where is your schema? So I'll just say, hey, my schema is in the dot slash DB slash schema dot schema dot TS Sorry, js file. So this is the file I am pointing to. So just make sure that the spellings are all right. So schema js file dialect is PostgreSQL that we are going to use the PostgreSQL. That is nice. And database credentials, right? So database credentials are here. And process. env. database URL. So this is your drizzle configuration. Well done. Now what we have to do is basically, okay, we can make a schema. So inside the schema TS, this particular file, what we could do is we can import these things from the result and I can basically create a users table as it is. So it's a good thing that we are creating a users table which has an id. Okay, so what I will do is instead of making it as an integer, I would like to make it as a uuid. That is okay, we will see that in a while. So name is there. Age. Age is something we don't need. So we want to keep the email. We will keep password and all that stuff. Okay, so one thing that I want to change is that I will basically get a uuid. So I want to say that, hey, you are a UUID primary. And I can just say default to be random. Okay, so this makes more sense. Nice. Then user is going to have a name which is of a, varchar. Okay. Variable Character length is and not null. Email, length is this not null and unique. Then we can have a password, okay, which is again a varchar. Okay, we can have a varchar. Or maybe we can have a text. So let's take a text because I don't want to enforce any limit on this. So this can be text. Okay. And dot not null. Right? So this is basically not null. Okay, now here is the thing. See as a best practice, you should never store plain passwords. Okay? You should never store plain password. Because see what happens if your database is hacked? What happens if someone hacks your Database, what will happen? Your password is leaked. So ideally what we should do is we should hash this password, right? What we should do, we should hash the password given by the user. And, the best way to hash is we do something known as salt hashing. Okay. We do something known as salt hashing, which means for every user, what we can do is we can generate some random string. Let's say a random strings. Looks like ra. Okay, six, five, three. Something random. Okay, I'm just, I'm just, making a random string. Let's say my password was piyush So what we can do is instead of hashing piyush123, I can attach this random, salt. Now hash this whole thing together, and whatever the hash is generated for these two things that I can store as a password. And don't forget to also store the hashtag in the database. So that means password and salt will be stored. So password is this. Okay. And I will also store assault, for every user. So that means we are going to hash something based on a secret key where this is the password, this is a salt. Okay. This makes, you know, password more secure. Nice. Then you can have. I think these things are well and good for a particular user. Okay, so we have defined our schema. That is really nice. Our result configuration is also there. So now what we have to do, we have to just say NPX result kit push. Okay, but before that, before that, we have to set up our database. So to set up our database, I would like to use Docker. Okay, so Docker. So it's very simple. You have to first make sure that Docker is up and running. You have installed the Docker. So you can just download the Docker desktop using this. And here is, you can see all the installations and stuff. So don't worry. We will also attach an introductory thing to what is Docker and stuff? Okay, so make sure that Docker is up and running. So let me just, you know, spin up my Docker. So if I do enter. Let's wait for some while. All right, so my now Docker is up and running on my machine. Okay, so what I could do is if I come here and I just say, docker. P. S. you can see that, yes, Docker commands are running. That means my Docker is up and running. Now let's create a docker compose. yml file. Okay, so docker compose. yml file is here. Now what we could do is we have to just say services. Okay, nice and inside the services, what we have to do is we have to spin up a postgres so we can just search for postgres on the docker and enter. So you can see that this is the official documentation, right? How to use it. You can see if I just keep scrolling down. Okay, so I can just say my database. Okay, I can just say I want to spin up a db. Okay, My image is postgres. Okay, you can say just restart always. Okay. Just in case there is a crash. And then in the environment, okay, you have to basically give the postgres password. So let's say the postgres password is postgres itself. Or I can just say the password is post. I can just say my password. Okay, this is your postgres password. Of course, in the production you want to use something more big password. So that is okay, so postgres password you have set up. And also a postgres user we can set up. That is postgres. So. And don't forget to do the port mapping. So of course you want to also, you know, you want to expose the ports. So if you go on to the port mapping. Okay, Ports. So where is the ports thing? Yeah, so, not this one. So Postgres runs on Port, by the way. Anyway, if it is not suggesting you, I'll tell you. So one thing we can add here is postgres db so let's say my database name will be again postgres. Okay, Then port supports. It basically exposes port on This means inside the container on my host. Okay, so this is how basically it works. Sorry, on my host, inside the container. And at the end we have to give it a volume mapping. Okay, so I can just say volumes and we have to give a volume mapping that is DB underscore data. It is going to be a custom volume that we are just going to create. And you have to mount it on/war/lib/postgresql/data. Okay. So now what I can do is I have to basically create this volume. So I can just say volumes. Okay, Volumes and postgres DB data. And that's it. So this is the configuration. There's no need to give this thing. So we are creating a volume DB data which we are mounting here. And this basically spins up a postgres container for me. So I can just say docker compose up hyphen D to run it in the background. So let's see now what happens. It is basically pulling the database that is Postgres image is being pulled. So Postgres image is getting pulled. That is okay. It's just 124mb. Okay, so let's wait for a while. Yeah. So now you can see that my container is up and running. If I do a docker. P. S. you can see that. Yes, it is up and running. Right? The postgres container is up and running, and is the port that is available. Now, to construct this, we can just say postgres. This, this. Okay. What is your username, by the way? Your username is postgres. Okay? So you can just say postgres as your username. What is your password? Your password is my password, right? You can just say my password at the rate localhost port5432, slash, whatever is your database. So your database name is postgres. So this is how you construct a, a database URL. Nice. Now this database URL is set up. That is absolutely great. Now what we could do is if I come back, you can just say NPX Drizzle Kit push to push the schema to your database. Okay. And there is one more thing, by the way, if we go down, okay, we don't need seeding and all, there is something known as Drizzle Kit Studio. So you know what I like to do is let me just copy this particular command that is Drizzle Kit push and inside the package or JSON, let's configure these scripts. So I can just say DB colon push, Colon push is basically this command. And then I want to have a command that is DB Studio. Okay, so how to spin up a DB Studio? Let's just search for the studio. Okay, so drm, that is the studio. So to do that, what you have to basically do is, Yeah, here is the thing. Drizzle Kit Studio. Okay, so I'll just copy the command and paste it. If I now say PNPM DB colon do and enter. Okay, so you can see now this particular thing is up and running. I can just copy it. Okay, I can just copy and I can just open this particular link in a new tab. Okay, let's wait. What happens? So you can see that, the Drizzle Kit Studio is running. There is no table at all, zero tables in the public schema. So that means what we have to do is we have to say pnpm DB colon push and enter. Now If I do a refresh here you can see we have a users table which is have ID name, email password and salt and there is no record at all. Great, great stuff. Okay, so our setup is basically complete. Now let's get started by creating the routes. Okay, so for that let's create a folder for routes. Okay. And let's create a user do routes js. Okay, so here I have to import express from express. Okay. From express. Nice. Let's create a router that is express dot router. Nice. Now what we can do. Export default the router. Now on this router, what all do we need? I want router dot get. Okay, if you make a request on slash, this returns who is the current logged in user. Okay, so that means let's say there is no handler as of now, but I can add a comment. Returns current logged in user. Good. Similarly we can have a post. This basically does a sign up. Okay, sign up. So let's create a sign up route. Okay, nice. Sign up route is there. Then we can create a login route. Okay, create a login route. So this basically is the login route. If you want to log in and current user. I think these are all good. Okay, These all things are all good. So let's get started by creating the sign up route. Okay, so let's start by sign up route. So this is going to be an async function. Okay. Async request. Sorry, request, response. Now what I expect is that when you are signing up you are going to give me something in the body. That is what you are basically going to give me. Your name, your email and a password as a part of your body. Nice. Now see what we could do here is you can of course have a validation that password must be characters long. Right? There should be numbers in the password. All that stuff we can do. But okay, first things first, you want to check if your database already has this email or not. Correct. So what you could do is there are multiple ways to do it. Number one is that first you try to query that do you have an existing user? So how, how we can do is I can just say import DB from okay dot dot slash db and also you might want to import something from dot dot DB slash schema. Okay, slash schema. And you want to import the users table. Now you can first make a check for existing user that is await DB. Select something from you know, users table dot where. Okay, now in the, where you can just say okay, you can just return an equals okay eq Basically imported from the drizzle ORM you can just say, let me just make it into the new line so that you can see this these things clearly. Okay, where equals what I can just say where table. email equals to the email. So technically I'm trying to search for an existing user and a. I just want to query the email which is basically users table dot email. Now if you got the existing user. Okay, if I got the existing user. So I can just say return response status codeJSON saying error as user with email. Okay, let me just make it as a string. Literals. Okay, Email. This particular email already exists. Done. Now if it is not there, what you want to do, you want to basically create a new user, right? If user does not exist, you want to create a new user. So to create a new, create a user, I can just say await DB. Insert okay, in which table in the user table dot values. Now see here is the thing. You want to insert the name. That's good. You want to insert the email. That's good. Now here is the thing. You don't want to store the password, right? This is the wrong thing. This particular step is a wrong step because user is giving you a plain password. You don't want to store that plain password. So what we should do is first of all we should generate a salt. What is a gen, what is assault? A random string. A random bytes is basically a salt, right? So in node, how can you generate some random string? Okay, so if you go into the node crypto module, crypto random, okay? So this is a function that you can use. So crypto is there random bytes is there? So if I click here, okay, this is the official documentation of node js and I search for random, okay, random bytes. This is the one. So you can see from node crypto we can import random bytes. So I can just say import something from node crypto. And this is a built in module, by the way. So here you have a function that is random bytes. So I can just say random bytes. Okay, how much size I can like for example, say Then this generates random bytes for me, okay? And then I can just say that, hey, I want to make it tostring, okay, as a hex. So this salt is now a string, which is just a random string. Now using this salt, we can hash the password. Hashed password equals. How to do that? So for this particular thing, what you could do is now you can basically do a hashing, okay, how to Do a hashing. So for that you have to search for something known as. So there is a documentation where they use, I love cupcakes. Exactly. So you have to save create H mark. Okay, this is a function again coming from node crypto. So I can just import create hmark. Okay, so this created creates a hash. So I can say create hmac. Okay, which algorithm do you want to use? So there are multiple hashing algorithms. Let's say I will use Sh Then what is your secret? I say, hey, I want to use this salt. Okay, that's great. Then what do you want to update? Okay, I can just say dot update. What do you want to update? The user's password. Okay. And then finally just give me the hex version that is a string. So now this is a hashed password. Using this particular algorithm, using this salt, okay, we are updating the password. And as a hexadecimal. Now this password must be stored as hashed password. Really nice. And you can also keep this particular salt. So this particular thing creates a new user in the database. Okay, so cost user equals to. Then you can just say dot return. Okay, what do you want to return? I just want to return the ID which is users, table. it okay, so this user is basically. So this is actually an array which will always have one value. So I can just destructure it. Now I can just say return response. status code Because you have created a resource. JSON, i can just say status success and I can just send the data where I can have the user ID to be user. id. so this is what we can return. Ideally we should directly log in the user. But. Okay, so let's first test our signup route. So for that let me spin up my postman. So here is my postman. Okay, you can see here is the postman. So in the postman what we can do is let's try to sign up. So as of now, you can see in my Drizzle studio there is no user. So my server should be up and running. Oh, by the way, we forgot to register this route. Right. So I should basically do import user router from dot slash routes user routes. And then I should basically say hey app dot use. If anything starts with slash user, user, please use this particular router. Nice. Now PNPM dev. Okay, so we got an error, that is on this particular thing. It says that there is no module by this name. Okay, why is it so? Let me just check. Okay, let's give it a try again. Oh, the error is actually in the DB thing. Okay, so from where this particular error is coming, let me just do a quick check, directory import the db. Okay, so the problem is actually I think here, /index. js. okay, yeah, so now you can see everything is up and running on port So let's say HTTP local host Let me just make a request. Yes, the server is up and running. So if I want to sign up user sign up, is the route correct? So basically the route is if I go here/user/sign up. Okay, so in the body I have to give a raw JSON data. And by the way, because now you are handling the raw JSON data, please make sure that you have the middleware setup that app. use express. JSON. okay, so we have to send few details, that is name. Let's say piyush garg. Okay, email I can send piyushgar. devail. com Let me just zoom in a little bit so that you can see clearly. And let me just close this particular window. So localhost8000 is okay, so body, oh, here is the one. Okay, so this one is also good. And then I can just say password. So password is going to be Piyush Okay, let's do a send. And we got an error that is So it says that this particular route does not exist. Yeah, of course, because it has to be a post route send. We got user with email piyushgar uh. dev already exists. Okay, now there is something bad we have done here, right? Why? Let me just check. Okay, because this is an array, we should basically destructure it. This was the problem. Okay, now let's do a send. You can see a user is created with this particular id. Nice. If I go back to my database and if I do a refresh now you can see we have one user. And if I just do a refresh here you can see this is the user with this particular ID name, email. If you see closely, this is my password, right? Can you see that my password is actually hashed? This is what our password looks like. And this is what my salt looks like. So my Original password was piyush123 but we have hashed it to something this. So this is basically your hashing. Now no user or even a developer can go into the database and check for the password because this is hashed password. Nice. That is what we wanted, right? And this is basically what our whole table structure looks like. So this is also nice. Now our signup is working fine. If I again try to do a sign up, you can see user with this particular email already exists. Nice. Now what we should do, we should also do the login. Now login is what technically s",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "04 Session Based Auth with Drizzle ORM.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/04 Session Based Auth with Drizzle ORM.vtt",
      "type": ".vtt",
      "isChunk": true,
      "chunkIndex": 0,
      "totalChunks": 2
    },
    "embedding": [
      -0.0019595362,
      -0.0007733131,
      0.009473482,
      -0.06488961,
      -0.024459956,
      0.003014516,
      0.012460302,
      0.021100106,
      0.004226336,
      -0.001959025,
      -0.011068915,
      -0.0049767154,
      0.0057747983,
      0.029496057,
      0.12978423,
      0.00404723,
      -0.0011252483,
      -0.004763943,
      -0.0018492149,
      -0.05029104,
      0.013154736,
      -0.0065336996,
      0.027095247,
      -0.011092587,
      0.0018875275,
      0.0045816326,
      0.017047964,
      -0.018129315,
      0.022943053,
      -0.016112823,
      0.00082578545,
      -0.010062708,
      0.0018121379,
      0.03357822,
      0.015707508,
      0.047177926,
      0.033022568,
      0.016572298,
      -0.024319502,
      0.011148824,
      -0.01744371,
      0.014583258,
      -0.008235936,
      -0.004402779,
      0.007583153,
      -0.0031248305,
      0.0040458273,
      -0.011709403,
      -0.0069595356,
      0.018036703,
      0.003101232,
      -0.011900054,
      -0.0408217,
      -0.17187338,
      0.0013020085,
      -0.0005264015,
      0.0005528522,
      -0.003415387,
      0.0138654895,
      -0.0063835317,
      -0.012633315,
      0.013835682,
      -0.034719087,
      0.009503594,
      -0.014119422,
      0.0068857796,
      0.010644936,
      -0.008017417,
      0.004452267,
      -0.022530777,
      0.0041603195,
      0.022877248,
      0.0009646021,
      -0.017055849,
      -0.0036365832,
      -0.021051047,
      0.021293165,
      -0.020691391,
      0.0013385874,
      0.01799588,
      0.011196414,
      -0.013947701,
      -0.028303448,
      -0.0010225708,
      -0.012955587,
      -0.015280335,
      0.000114311275,
      -0.015252675,
      -0.0038508633,
      0.011851681,
      -0.014091839,
      0.0056372634,
      -0.004134222,
      0.00087164924,
      -0.018478962,
      -0.008292683,
      0.0033586267,
      0.008612892,
      -0.00456418,
      -0.0115214875,
      0.022899365,
      0.019577706,
      -0.019687433,
      0.010821028,
      0.0073011434,
      0.026360892,
      -0.0051584602,
      -0.0029363292,
      0.018036624,
      -0.022479035,
      0.0031543577,
      -0.016720267,
      0.013782503,
      0.009709089,
      0.036766443,
      -0.18755254,
      0.020951232,
      -0.019835513,
      0.008332709,
      0.0033311406,
      -0.009818329,
      0.0067052124,
      0.023679504,
      -0.007917235,
      -0.013179455,
      0.0055437773,
      -0.006448749,
      0.011666519,
      0.010267839,
      -0.0041661384,
      -0.007115968,
      0.0025692598,
      0.008794601,
      0.010832538,
      0.023976022,
      0.028661469,
      0.017218525,
      0.009981666,
      -0.010577992,
      -0.030444084,
      0.005683291,
      0.032416295,
      -0.0070681954,
      0.03853813,
      0.0083803795,
      -0.00021518112,
      -0.017835911,
      0.01885657,
      0.004035551,
      -0.02728943,
      0.038324542,
      -0.0056346487,
      0.0082343025,
      0.010296742,
      0.024024954,
      -0.0499661,
      0.00048252553,
      -0.00075772824,
      0.013477089,
      0.008507279,
      -0.0069255764,
      0.0040117498,
      0.0067369146,
      0.017922897,
      0.011522842,
      0.004603557,
      -0.0027108584,
      -0.0021661427,
      0.031101214,
      0.005755113,
      -0.009297765,
      -0.010122857,
      -0.011009269,
      0.006593815,
      -0.016144281,
      -0.0019930827,
      0.004308792,
      -0.012931869,
      -0.0012287598,
      -0.02444332,
      -0.0024078013,
      -0.010157167,
      0.01836167,
      -0.0068002334,
      0.021440893,
      0.0007317306,
      -0.022066765,
      0.0152416825,
      0.024934497,
      -0.0029860253,
      -0.006157963,
      -0.019462317,
      0.0071701943,
      -0.012438857,
      0.00499245,
      -0.00271398,
      -0.008444893,
      -0.018518874,
      0.020980444,
      0.019850953,
      0.027579546,
      0.0069176005,
      -0.010583515,
      0.00031221355,
      0.0012190803,
      0.009128029,
      0.015941083,
      -0.02421554,
      -0.008130101,
      0.025788033,
      -0.015422203,
      -0.002672743,
      0.008523781,
      0.006226311,
      0.007819241,
      -0.00083213364,
      0.012855447,
      0.0054930677,
      0.00665506,
      -0.027594391,
      -0.009157612,
      -0.017055156,
      0.018962862,
      0.008262742,
      0.0065524294,
      -0.00024864683,
      -0.0051310514,
      -0.017839372,
      0.01650977,
      -0.0012102622,
      0.011052185,
      0.003561638,
      -0.0053851446,
      -0.012519082,
      0.02051195,
      -0.020007037,
      -0.019595295,
      -0.011531461,
      -0.006264701,
      0.006467067,
      0.013967177,
      -0.01673577,
      0.00989498,
      0.032165788,
      0.023740416,
      0.020333035,
      -0.008703205,
      0.0019446062,
      0.005710908,
      -0.018705053,
      -0.0037440772,
      -0.013089756,
      -0.005524897,
      -0.024878904,
      -0.000060512644,
      -0.018201055,
      -0.041486062,
      0.0014530905,
      0.014495122,
      -0.012900726,
      -0.014178327,
      -0.014582446,
      -0.019098312,
      0.0011847275,
      -0.009606272,
      -0.014218832,
      0.0036058077,
      0.03202549,
      -0.01360255,
      0.003182788,
      0.012900182,
      0.002423073,
      0.001442371,
      0.005679577,
      -0.00008889415,
      0.008131258,
      -0.075516194,
      0.0022911606,
      -0.000012130887,
      -0.02731201,
      -0.018818628,
      0.011162814,
      0.0033898,
      0.007445714,
      0.014595129,
      0.009859599,
      0.003194258,
      -0.023511851,
      0.011931721,
      -0.010872271,
      0.0014218849,
      0.028430438,
      -0.008026454,
      -0.0147813,
      0.010323125,
      -0.034407668,
      -0.014024437,
      -0.0132810185,
      0.003120162,
      0.009614994,
      0.015351129,
      0.01321494,
      -0.024897523,
      0.03750641,
      0.005426351,
      -0.010565622,
      -0.0031858694,
      0.023936205,
      -0.004712609,
      -0.019148588,
      -0.032218184,
      0.0152797215,
      0.022709653,
      -0.027986234,
      0.018268147,
      -0.026092501,
      -0.014993724,
      -0.022619618,
      0.006850511,
      0.004370544,
      -0.01738591,
      -0.00032979235,
      0.03439061,
      -0.0073634638,
      -0.009082074,
      0.00092474953,
      -0.019378068,
      0.019427149,
      0.00670288,
      -0.04055949,
      -0.0032454054,
      -0.00897214,
      -0.0032187523,
      0.01167709,
      0.025068352,
      0.012181739,
      -0.013308277,
      0.019505572,
      -0.00019982099,
      0.007570343,
      0.012222456,
      -0.010627541,
      -0.00060414645,
      -0.000294108,
      -0.0030785906,
      -0.012565787,
      0.012684787,
      -0.02433322,
      -0.028534777,
      -0.02968922,
      0.008544676,
      -0.0017550595,
      0.0072486564,
      -0.0027529933,
      -0.023408491,
      0.018417064,
      0.0026816009,
      0.0056085377,
      0.02432218,
      0.033975583,
      0.030488426,
      -0.00009069148,
      -0.0072109974,
      0.018015591,
      0.0027610478,
      -0.0052693295,
      0.027836308,
      0.024937792,
      -0.0046083415,
      0.006051513,
      -0.0033596503,
      0.014615701,
      -0.013152202,
      -0.01960117,
      -0.001970491,
      0.012066491,
      -0.026025021,
      -0.011112248,
      -0.0020150621,
      -0.009485408,
      0.0069405683,
      0.021159321,
      -0.013337625,
      -0.012392755,
      0.02039323,
      -0.003785052,
      0.0052505075,
      0.016929349,
      -0.0031322166,
      0.0015746275,
      -0.025582787,
      -0.0120245805,
      0.0101363985,
      -0.0062319585,
      -0.016212722,
      0.0034499888,
      -0.012215621,
      -0.0053393096,
      0.0034057254,
      0.005163405,
      -0.026162297,
      0.012898692,
      -0.025993152,
      0.0006434873,
      0.0032662174,
      -0.017071124,
      -0.007957253,
      -0.0024814114,
      -0.028538821,
      -0.017606813,
      -0.0049617556,
      -0.012932427,
      0.013967311,
      -0.026206275,
      0.009424262,
      0.029762173,
      -0.0019724406,
      0.0053544636,
      0.016172927,
      -0.007802737,
      0.0029272889,
      0.008896123,
      -0.020611972,
      0.00051127013,
      0.009871221,
      0.001092494,
      -0.007602915,
      -0.009079568,
      -0.018098764,
      -0.0070164627,
      0.019411024,
      -0.006918255,
      0.00076111034,
      -0.00092538877,
      -0.007824365,
      -0.0036013662,
      -0.032319836,
      0.0033741547,
      0.0005033134,
      -0.010386885,
      0.00031670125,
      0.011938675,
      -0.023217188,
      0.014724419,
      0.008063557,
      -0.0130626615,
      0.010319406,
      -0.01064669,
      -0.032919478,
      0.0172205,
      0.014728548,
      -0.006340472,
      0.009561863,
      -0.0016755572,
      0.014818999,
      0.0080496995,
      0.002302641,
      -0.019380303,
      -0.013243437,
      -0.011121942,
      -0.005405342,
      0.003726616,
      0.012306416,
      -0.015682604,
      -0.034169305,
      0.0045039547,
      0.021800509,
      -0.015040745,
      -0.025963703,
      0.011862539,
      0.010343901,
      0.03918691,
      0.003378329,
      0.014808798,
      0.0006036505,
      -0.006315874,
      -0.0122964615,
      -0.009524527,
      0.010840465,
      0.009933267,
      0.019556813,
      -0.0042117634,
      -0.019810548,
      0.0015491406,
      -0.008331939,
      0.025588555,
      0.004148986,
      0.019201308,
      0.009501539,
      -0.010371549,
      0.032587137,
      0.023932284,
      0.007300313,
      0.005883321,
      -0.03569681,
      -0.0025059087,
      0.022842847,
      -0.02811247,
      0.008286507,
      -0.012599444,
      0.006973113,
      -0.00033521772,
      -0.013536669,
      0.020209676,
      0.016126834,
      -0.030713532,
      0.005349891,
      -0.015979366,
      0.020256827,
      0.018533992,
      -0.011581551,
      -0.0069985576,
      0.019635372,
      -0.012255272,
      0.0027597793,
      0.00834233,
      -0.002524354,
      -0.0079866,
      -0.008623522,
      -0.012849711,
      0.0007497273,
      -0.008176746,
      0.017052623,
      0.024555799,
      -0.011171125,
      -0.013007437,
      0.021676855,
      0.010433837,
      0.005193873,
      -0.007839968,
      -0.004648523,
      0.015227695,
      -0.003159401,
      -0.010813826,
      -0.00095692533,
      0.007728416,
      -0.0030734863,
      -0.02398727,
      0.013143933,
      0.015252568,
      0.0050950223,
      -0.023989059,
      0.0018241113,
      0.003907395,
      0.015781045,
      -0.12156528,
      -0.000028067316,
      -0.011906983,
      0.008990828,
      0.0032452564,
      -0.014523487,
      0.0010735505,
      -0.018297665,
      -0.025572864,
      -0.016865516,
      0.015643336,
      -0.01479166,
      0.0014224197,
      0.009406324,
      -0.009636668,
      -0.009006007,
      0.0067523876,
      0.0096791005,
      0.036319803,
      -0.012052291,
      0.015162497,
      0.012343967,
      0.010513456,
      0.0031301088,
      -0.009941897,
      0.020765563,
      0.0135721,
      -0.012738823,
      0.008532545,
      0.012263621,
      -0.024682907,
      -0.0062965234,
      -0.001176568,
      -0.0009345425,
      0.01865663,
      0.00088508875,
      -0.018166179,
      0.0021534876,
      0.02173428,
      0.0009746621,
      0.01693158,
      0.00445765,
      0.01087561,
      0.000747795,
      0.008992534,
      0.015254546,
      0.028146826,
      -0.027434338,
      0.0029226905,
      0.02820079,
      -0.048107665,
      -0.023527581,
      0.0043929317,
      -0.024543988,
      -0.0010608707,
      -0.002053439,
      -0.014298053,
      0.008775819,
      -0.004392043,
      -0.010586333,
      0.0021187658,
      0.008485973,
      -0.012533118,
      0.024999691,
      -0.007571328,
      -0.0054290304,
      0.011406677,
      -0.004089661,
      0.006466782,
      0.0044354736,
      -0.0028688922,
      -0.0073425206,
      0.007736539,
      0.017872205,
      0.012112006,
      0.0094822645,
      0.004383787,
      0.029610332,
      -0.017924085,
      0.012852624,
      -0.008525968,
      0.009674829,
      -0.056492317,
      -0.023729658,
      -0.0067756167,
      -0.003002895,
      0.009116139,
      0.010801946,
      -0.017521089,
      0.024775313,
      0.010440659,
      0.0006418552,
      -0.01947334,
      -0.010522426,
      -0.016223107,
      -0.031097874,
      -0.03170935,
      0.009149798,
      0.0052536195,
      -0.02731363,
      -0.018391103,
      -0.0055227205,
      -0.01065428,
      0.0104985945,
      -0.0071089063,
      -0.022304943,
      0.007947531,
      0.024132544,
      -0.014286925,
      -0.0072169597,
      -0.013596523,
      -0.0036046917,
      0.010866705,
      -0.14857593,
      -0.021339728,
      0.013138311,
      0.0045660543,
      -0.006159847,
      -0.006185448,
      0.0046230108,
      -0.015377022,
      -0.0071115685,
      0.017782366,
      0.00068110594,
      -0.0138947405,
      -0.0069154683,
      0.0012679299,
      -0.0031119206,
      0.14037225,
      0.0010187887,
      0.009070949,
      0.0028208836,
      0.0011163417,
      -0.01477833,
      -0.008024529,
      0.015335525,
      0.009490973,
      0.016586374,
      -0.003600936,
      0.0076951357,
      -0.04130202,
      0.009551288,
      0.012805002,
      -0.0045420676,
      -0.0045898505,
      -0.022285054,
      0.009027647,
      0.0031031617,
      -0.012925472,
      0.00395961,
      -0.03383365,
      0.00094667723,
      0.005019551,
      -0.0036007678,
      0.022025237,
      0.017675191,
      0.01178948,
      0.0039810203,
      0.020206805,
      -0.005793964,
      -0.0039119385,
      -0.006905157,
      -0.017579554,
      0.0009034797,
      -0.05670598,
      -0.015155727,
      -0.023757664,
      -0.021123884,
      0.018089334,
      0.011054401,
      0.017042037,
      -0.0030545031,
      -0.0011541588,
      -0.0011070678,
      -0.013214908,
      0.015299558,
      -0.007212587,
      0.011917205,
      0.0060110497,
      0.018345146,
      0.012675615,
      0.020824594,
      -0.018484585,
      0.005879075,
      0.035437424,
      -0.012774616,
      -0.004384293,
      -0.026479905,
      -0.024892151,
      -0.0108175725,
      0.0145187555,
      0.016018856,
      -0.013390958,
      -0.011870202,
      0.015384926,
      -0.02262707,
      -0.015709735,
      -0.0023375638,
      -0.030181482,
      -0.020551832,
      0.024188606,
      -0.0028194713,
      -0.0007961829,
      0.019944875,
      0.008073629,
      -0.013553599,
      0.03091686,
      -0.006815999,
      0.010284508,
      0.008715572,
      -0.013239568,
      0.044924807,
      0.0141170295,
      -0.00032482826,
      -0.013140247,
      -0.0017696257,
      -0.03637788,
      0.02799186,
      0.011699134,
      0.030329218,
      0.022806518,
      -0.007243472,
      0.0006630023
    ]
  },
  {
    "id": "genai_cohort_nodejs_04_Session_Based_Auth_with_Drizzle_ORM_vtt_chunk_1",
    "content": "ee what will happen is when user tries to log in, he has to give me his email and password. Now he will give you a plain password, right? What user remembers in his mind. What you should do is first of all you should search for the email in the database and retrieve the salt, right? You have the salt and you have the hash stored in the database. If I take the user's plain password using the salt, I again hash it. And if this particular hash matches, can I say the password is correct? Because see, in hashing world there is no concept of D hash. Once a thing is hashed, you cannot dehash it. So what I can do is I can repeat the algorithm, I can take this password, use this salt and again hash it. If this new hash is actually equal to the hash stored in the database, that means yes, user has entered the right password. So that means in the login route what we are going to do is let's say we have request, we have response and of course it has to be async. So what we are going to do is see number one. Let's first get the request body thing sorted. So I can just say hey, from the request body I want to have email and password. Okay? Now you have to search for this existing user. So just copy the logic and paste it here. Now here is a thing. If there is no existing user, that means you have entered an email which does not exist in the database, right? This is the wrong thing. So return response. status code that is JSON. Okay, and I can just send the error. Let me just make it 400, okay? In fact makes more sense that user with email. This particular email does not exist. You are trying to log in with an email which does not exist. But if the existing user is there. Okay, let's take the salt. So I have to query the salt from users table dot salt. Okay, so basically the existing salt is basically existing user dot salt. Also take the existing hash. What is the existing hash? You can basically query the password here. So I can just say password is users table dot password. So this is a hashed password, right? We know that. So existing user dot password. Now let's create a new hash. How to create a new hash. What I am going to do is same thing, just copy the same code. See, just copy the same code. This one. That is create hmark code. What I am going to do is I am going to take your password that you are giving me in the request body and I am going to use this salt and generate a hash. Nice. Now what I can say is that, see, if the new hash is not equals to. Is not equals to the existing hash, that means your password is incorrect. Okay, so we can just say response. JSON saying Sorry, response. Status. Okay, so this should be status. JSON saying error. That ideally your password is incorrect. So incorrect password. So this is your incorrect password. But if the password matches, you are here. So technically here, generate a session for user and return the success response response status. Okay, So I can just say, status success. So this is basically my login. Okay? So right now we are not doing any kind of session management. But ideally this is the logic. So that means now if I go back, copy this, make a new request post to the login. Okay, Login. What I'm going to do is raw JSON. Let me just copy this JSON from here. Now, technically, name is not required. Let me give an invalid email sent. You're getting User with this particular email does not exist. Nice. What if I give you A wrong password? 2, 3, Okay, double It says incorrect password. But if I give you the right password and I do a send, I get a success. So this is basically how you are doing a login. But technically this is not login, right? Login basically means generating a session on the database or generating a session. So for that what I could do is I can basically generate a session for this particular user, right? So session can be stored in the database. Great. So what I could basically do is I can just say I can create a new table that is user, sessions, right? I can just say PG table and name it as like user underscore sessions. Okay? And then this basically. And there I can just say, hey, every session is going to have a unique id. This ID can be anything, right? So I can just say it is again going to be uuid. This is session id. Okay, Then I am going to keep a, user id. This particular thing belongs to which user? So I can just say uuid. Okay, And I can basically say dot. If you say unique, if you add a unique here, which means one user can only have one Session. That means if he's logged in from mobile, he cannot log in from laptop because one user can only have one session. But no, we want that. Okay, you can log in from multiple devices. UUID is okay, I can just say references. I have to make a reference here. How to make a reference? I can just say, hey, this particular thing in the users table. id so this is a foreign key. Okay. And also make it not nullable, not null. Nice. And you can also keep created at that when this particular session was created. Right? You want to store that if this session is only valid for, let's say minutes, you want to invalidate this session after minutes. So you should also keep this thing. So I can just say created at is actually a timestamp. Okay, so let's just keep a timestamp. Okay dot DEFAULT is now and not null. Nice. So this is your sessions table. Now because you have made a new table, you have to say pnpmdb Colon, push and enter. So now you can see if I go into my studio and I do a refresh. Now I have user sessions now on login. What you should do now tell me the logic. Okay, you have to search for the logic. I have to basically create a new session. Okay, how to create a new session, I can just say await. In the users table, I can just say user session, User session. So I can just say user sessions. Insert sorry, DB. Insert into user session. Values. So I have to just say user ID, which is whichever user tried to log in. Right? That is this user. So I can just give it an ID. Also that is user table. id. so I can just say existing user. id. and when this particular session is created, you want to say dot returning. Okay, I can just name it as id, that is user sessions dot id. Once a session is created, you can just send this session ID as session id. Now, best thing is to actually also create a cookie. Okay, now what is a cookie? Cookie is basically what you could do is like you can store some extra information on the user's browser. But okay, as of now, let's say that you have created a token, a session id, a token for him. And now this particular token is sent to the user. Now every time he wants to get some resource from the backend, he has to it give back the session id. So if that user is having that session id, that means he is logged in. That's it. Okay, so we can just say pnpm dev again to start the server. Now Let me just try to log in again. Oh, nice. I got a session id. So this is my session id. Okay? So that means if I do a refresh, you can see that, you know, this particular user, this particular user has a session. So this user has how many sessions? As of now, only one session. Right. That means he's logged in from one device, which is this user. Piyushkar. Nice. Very nice. So that means if a session exists, if he has a session id, he's locked in. Now, you have successfully done one thing. That is how to sign up a user, how to log in, a user. Now, the problem is how to detect that if the current. Who is the current user? Right. How this backend will know who is the current user. So for that, we are going to create a middleware. So for that, we, have. We will continue this particular project in the next particular video, because I think this video is already long enough. So let's meet you in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "04 Session Based Auth with Drizzle ORM.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/04 Session Based Auth with Drizzle ORM.vtt",
      "type": ".vtt",
      "isChunk": true,
      "chunkIndex": 1,
      "totalChunks": 2
    },
    "embedding": [
      -0.0006892217,
      0.009368811,
      0.004740049,
      -0.063572764,
      -0.021265207,
      -0.005384345,
      0.017750733,
      0.027332027,
      0.006168697,
      -0.0074629155,
      0.0015239972,
      0.0030840335,
      0.0024396202,
      0.022591831,
      0.1255606,
      0.016306493,
      0.0014902183,
      0.008308915,
      -0.007096472,
      -0.03765965,
      -0.005668415,
      -0.011374399,
      0.020310499,
      -0.023639308,
      -0.0013270186,
      -0.0059000095,
      0.0101254005,
      -0.012706593,
      0.030171009,
      -0.013059988,
      0.0038599588,
      0.0013401821,
      0.003660558,
      0.033253826,
      0.0017344679,
      0.03533454,
      0.031240089,
      0.02427947,
      -0.03190398,
      0.017213224,
      -0.009035211,
      0.019389676,
      0.0031196028,
      -0.008887471,
      0.004367663,
      -0.004160782,
      -0.0052906033,
      -0.003732777,
      -0.0021347224,
      0.019781206,
      -0.0060992707,
      -0.0044786665,
      -0.02946595,
      -0.17754471,
      0.0021702074,
      -0.0060242247,
      -0.0065204417,
      0.0008271783,
      -0.0053506577,
      0.0013022892,
      -0.032225244,
      0.010201022,
      -0.040804602,
      0.015729783,
      -0.010410502,
      0.0047116466,
      0.021854658,
      0.005601722,
      0.0026232768,
      -0.00025112682,
      0.007009899,
      0.024365952,
      -0.0016699326,
      -0.020400768,
      -0.0055562174,
      -0.037048656,
      0.0055246325,
      -0.0196311,
      -0.0035160189,
      0.0013316274,
      -0.0008194603,
      -0.0089435745,
      -0.0025101749,
      0.011872932,
      0.00523018,
      -0.024550553,
      0.000047539692,
      -0.0014746627,
      -0.0011141077,
      0.0026129936,
      -0.015867569,
      0.003385141,
      -0.009285501,
      -0.0014211958,
      0.0065297345,
      -0.005829949,
      0.0027472663,
      0.021602182,
      0.0022070962,
      -0.006166813,
      -0.0025073593,
      0.021031467,
      -0.0094487015,
      0.01580739,
      -0.004178213,
      0.00035383177,
      0.0006066667,
      -0.0006127769,
      0.01978328,
      -0.019036544,
      -0.0013950538,
      -0.009580605,
      0.018561335,
      0.01341672,
      0.016039336,
      -0.18927228,
      0.019524945,
      -0.013280297,
      0.01471284,
      0.02012686,
      -0.011026033,
      0.009448734,
      0.017234687,
      0.0022933935,
      -0.020819081,
      0.008508824,
      0.007048818,
      -0.0010084346,
      0.016742097,
      -0.008755164,
      -0.028071094,
      -0.002162378,
      0.016127702,
      0.018112915,
      0.0089770155,
      0.041258965,
      0.01222995,
      -0.0064507346,
      0.01474862,
      -0.031817477,
      0.007798275,
      0.015600517,
      -0.01817216,
      0.023468288,
      0.0096301,
      0.008566939,
      -0.011519467,
      0.019815937,
      0.0074545667,
      -0.02992797,
      0.04411476,
      -0.0028281221,
      0.0132523505,
      0.012773634,
      0.019366015,
      -0.06481409,
      0.0036072023,
      0.0035685452,
      0.010335307,
      0.015251049,
      0.004588823,
      0.012370319,
      -0.0011812919,
      0.02705239,
      0.0008974266,
      -0.0036190797,
      0.013645431,
      -0.006250775,
      0.009990818,
      -0.0021325015,
      -0.01973238,
      0.0011430711,
      -0.0063240374,
      -0.00044020536,
      -0.008593902,
      -0.0010395057,
      -0.003369194,
      -0.0048836656,
      -0.0116497725,
      -0.01923369,
      -0.011012209,
      0.0007606781,
      0.013957775,
      0.011544274,
      0.0072756726,
      0.0019654508,
      -0.019853886,
      -0.004717079,
      0.033864316,
      -0.014392486,
      0.0037322836,
      -0.0092246225,
      0.013542985,
      -0.016234199,
      0.009916862,
      0.0043609254,
      -0.012836816,
      -0.02070117,
      0.02034932,
      0.018086793,
      0.02138452,
      -0.00481216,
      -0.0013325987,
      0.0075495346,
      -0.006538897,
      0.012841719,
      0.021913104,
      -0.0075372173,
      0.011044654,
      0.021549417,
      -0.0027342727,
      -0.003925355,
      0.017394455,
      -0.004479339,
      0.0038424793,
      -0.018861666,
      -0.0008899475,
      -0.007853954,
      0.005045455,
      -0.017229572,
      -0.014676129,
      -0.014701841,
      0.0067883106,
      0.00335195,
      0.000044088705,
      -0.0031402304,
      0.0007349226,
      -0.022686027,
      0.016769646,
      -0.013555307,
      0.020315692,
      -0.0034443506,
      -0.023393886,
      -0.0073465332,
      0.00303602,
      -0.01671348,
      -0.02346508,
      0.013611176,
      -0.0002397195,
      0.0064258655,
      0.009999014,
      -0.01128198,
      -0.00086546864,
      0.031056227,
      0.032191005,
      -0.00047942885,
      -0.005440816,
      -0.009326705,
      -0.00081097684,
      -0.0076210354,
      -0.012212734,
      -0.012166107,
      -0.012022794,
      -0.01440199,
      0.0034560426,
      -0.022585332,
      -0.04448849,
      -0.014316632,
      0.0027657917,
      -0.003504614,
      -0.017972687,
      -0.012925541,
      -0.014746461,
      -0.0017479286,
      -0.0021768145,
      -0.037297353,
      0.0018469823,
      0.02376336,
      -0.010585011,
      -0.002018431,
      0.01364918,
      0.0036799156,
      0.0031347713,
      -0.0033683616,
      -0.011703168,
      -0.0012454258,
      -0.08703418,
      0.0020375652,
      0.0016787278,
      -0.016977558,
      -0.026534565,
      0.00879119,
      0.0016317415,
      0.0053921626,
      0.007362014,
      0.0144041395,
      -0.0035021808,
      -0.018328534,
      0.0013634486,
      -0.005922456,
      -0.010321301,
      0.011821659,
      0.0077664526,
      -0.016662646,
      0.008947074,
      -0.034133445,
      -0.018629834,
      -0.017067842,
      0.0036042482,
      0.00926442,
      0.00064753386,
      0.023134394,
      -0.030765412,
      0.019903515,
      0.01808723,
      -0.0013786099,
      0.00043463724,
      0.02325313,
      -0.016927358,
      -0.012243448,
      -0.004928939,
      0.009866387,
      0.01864708,
      -0.018471288,
      0.021122621,
      -0.014355125,
      -0.02019047,
      -0.015341123,
      -0.0054521696,
      0.016263759,
      -0.016974878,
      0.006544181,
      0.017699724,
      -0.009190729,
      -0.015933594,
      0.0017607961,
      -0.024627302,
      0.021084607,
      0.018391818,
      -0.023118576,
      -0.009467756,
      -0.0114894025,
      0.0021247023,
      0.019362528,
      0.012597537,
      0.004337953,
      0.0012600974,
      0.014075139,
      -0.010891169,
      0.015662944,
      0.017298177,
      0.0026611376,
      0.0029895408,
      -0.0075267283,
      -0.0077531366,
      -0.01124516,
      0.010176541,
      -0.01957521,
      -0.01204978,
      -0.033435173,
      0.01176343,
      0.010047733,
      0.0032988142,
      -0.0023069142,
      -0.03516917,
      0.03666442,
      -0.006245118,
      -0.002306889,
      0.025062969,
      0.023236506,
      0.019045092,
      -0.01083029,
      -0.0007766512,
      0.0016738512,
      -0.0049174,
      -0.0044367,
      0.023587188,
      0.033885825,
      -0.00073895697,
      0.007432421,
      -0.008444595,
      0.02059762,
      -0.0133150695,
      -0.022599548,
      -0.007770029,
      0.01886811,
      -0.027292859,
      0.006487093,
      -0.013195515,
      -0.018827142,
      0.0016938472,
      0.025223952,
      -0.022772662,
      -0.007435278,
      -0.0011213039,
      -0.0027024543,
      0.010408894,
      0.0076562576,
      -0.005293916,
      -0.0019573676,
      -0.034824308,
      -0.0069228397,
      0.0026862838,
      0.0063021793,
      -0.007938647,
      -0.0029592284,
      0.0004438204,
      -0.0029598703,
      0.004601902,
      0.011543864,
      -0.011134951,
      -0.011576363,
      -0.036993507,
      0.004448268,
      0.00008538793,
      -0.014642333,
      -0.00076380296,
      -0.0055256183,
      -0.010104902,
      -0.020287428,
      0.0014443018,
      -0.020414507,
      0.0151155,
      -0.019438311,
      0.00086068956,
      0.02827425,
      -0.008584546,
      0.020514466,
      0.016754204,
      0.009200274,
      -0.00006531896,
      0.0013650141,
      -0.008727448,
      -0.0045187483,
      0.024370026,
      -0.006704242,
      -0.004689343,
      -0.0109701995,
      -0.01054826,
      -0.0020645014,
      0.006547536,
      0.0063787806,
      -0.008497581,
      -0.010012493,
      -0.0057697278,
      -0.010396519,
      -0.01988948,
      0.0056980564,
      -0.000021239182,
      -0.023169864,
      0.007915114,
      0.017175972,
      -0.018311009,
      0.011063599,
      0.008147569,
      -0.0008525575,
      0.00008798748,
      -0.010558164,
      -0.04230235,
      0.015549563,
      0.019761333,
      -0.015392991,
      0.0059756,
      -0.0077757887,
      0.015852902,
      -0.003786854,
      0.011115645,
      -0.010713477,
      -0.014855672,
      -0.0076090586,
      -0.01568551,
      -0.0010775833,
      0.011716823,
      -0.012617533,
      -0.032513283,
      0.006686464,
      0.015511616,
      -0.00799152,
      -0.01986599,
      0.016702272,
      0.005656991,
      0.03015158,
      -0.0030736795,
      0.017164571,
      -0.0059483866,
      -0.02213128,
      -0.024173176,
      -0.00019590615,
      0.0064620525,
      0.010836404,
      0.020017406,
      -0.0065953005,
      -0.020940216,
      -0.0076835966,
      -0.0016395034,
      0.039306685,
      -0.012807551,
      0.01469037,
      0.018594766,
      0.0047620246,
      0.035980623,
      0.015126292,
      -0.0065635126,
      0.0028640314,
      -0.034007393,
      -0.008953368,
      0.026909307,
      -0.024529347,
      -0.0065134494,
      -0.002551048,
      -0.005864888,
      0.0076624397,
      -0.007948134,
      0.021201901,
      0.0059622643,
      -0.019080888,
      0.0037649297,
      -0.01189236,
      0.027728755,
      -0.004472913,
      -0.019969653,
      -0.0032732375,
      0.011196523,
      -0.011854962,
      0.010152115,
      0.0056636804,
      -0.009279629,
      -0.009446613,
      -0.008642151,
      -0.021603396,
      0.009675495,
      -0.010471798,
      0.026536632,
      0.010001246,
      -0.0018993138,
      -0.028830389,
      0.016932199,
      0.02624557,
      0.007622639,
      -0.014912201,
      -0.0057015684,
      0.016838716,
      -0.0067514246,
      -0.008966313,
      -0.006410835,
      0.012874816,
      0.0022663216,
      -0.019004354,
      0.012952981,
      0.01494847,
      0.008857156,
      -0.021999309,
      -0.0032434799,
      0.007949694,
      0.020323068,
      -0.11428008,
      -0.011867425,
      -0.012807282,
      0.009069257,
      0.008208928,
      -0.004517108,
      -0.01668326,
      -0.041699618,
      -0.0354357,
      -0.009488788,
      0.0071817827,
      -0.0066081905,
      -0.0068004616,
      0.008515928,
      0.0099185,
      -0.009843812,
      0.0051665795,
      0.019507619,
      0.020791305,
      0.0063635213,
      0.013693274,
      0.010517509,
      0.010826727,
      0.015382036,
      0.00623733,
      0.01308473,
      0.003279436,
      -0.0069841235,
      0.0052922154,
      0.0014986934,
      -0.028472342,
      0.013545569,
      0.000102372986,
      -0.0018641019,
      0.0131396605,
      -0.0055650105,
      -0.02522061,
      -0.0042652413,
      0.017325038,
      0.0012022429,
      0.014036724,
      -0.010131723,
      0.012907848,
      0.0031177807,
      0.0039387434,
      0.01032687,
      0.01621433,
      -0.01875339,
      -0.0077762348,
      0.03942647,
      -0.049887512,
      0.004140608,
      -0.0020884115,
      -0.01990406,
      -0.0042751133,
      0.012889477,
      -0.0010399101,
      0.01141723,
      0.0016926604,
      -0.0056952634,
      0.011927752,
      0.0051362626,
      -0.0132842185,
      0.015925873,
      -0.015795296,
      0.0014162955,
      0.009580446,
      0.004580724,
      0.0031048139,
      -0.0069048884,
      0.00081832276,
      0.0054615424,
      -0.0037342336,
      0.025214976,
      0.028943205,
      -0.0101381475,
      0.015787171,
      0.008170132,
      -0.030549685,
      0.0010781648,
      0.0069948286,
      0.01597253,
      -0.06964529,
      -0.027801871,
      0.008197245,
      -0.013407756,
      0.0019390346,
      0.025369838,
      -0.0056576794,
      0.015909154,
      0.017173393,
      0.0015174977,
      -0.018282412,
      -0.027701465,
      -0.007831102,
      -0.032652013,
      -0.023289885,
      0.014727023,
      0.0013330083,
      -0.029567868,
      -0.028153637,
      0.0031952334,
      -0.0018201718,
      0.016476495,
      -0.010588552,
      -0.010153575,
      0.0077146403,
      0.01707173,
      -0.020273382,
      0.0070878426,
      -0.004222178,
      0.003023403,
      0.009328169,
      -0.13876688,
      -0.016765568,
      0.0037025518,
      0.018612172,
      0.017843818,
      0.00047995633,
      0.0026450544,
      -0.008272476,
      -0.0061686873,
      0.013322527,
      -0.0029267638,
      -0.009915619,
      -0.020595338,
      0.011342419,
      -0.011408634,
      0.13899338,
      -0.0027247183,
      0.010729317,
      0.008249854,
      -0.0074190963,
      -0.013277117,
      0.0102370065,
      0.006907472,
      -0.010889819,
      0.0057981885,
      -0.015928494,
      0.0161725,
      -0.039428003,
      0.009240458,
      0.019333158,
      -0.0016595478,
      -0.012922106,
      -0.004432666,
      0.010421265,
      0.008500691,
      -0.027032113,
      0.005409493,
      -0.009627163,
      0.001233233,
      0.013555859,
      -0.015426478,
      0.020893998,
      0.0061096414,
      0.008427752,
      -0.002261328,
      0.015694253,
      -0.012196915,
      -0.006602092,
      -0.0030518794,
      -0.00828533,
      0.006748992,
      -0.06837588,
      -0.016000424,
      -0.023811538,
      -0.009037805,
      0.02017535,
      0.0069784224,
      0.027477736,
      -0.01670022,
      -0.005558569,
      -0.019980565,
      -0.016414082,
      -0.0036873778,
      -0.00505133,
      0.010350289,
      -0.0027560368,
      0.016511112,
      0.013216027,
      0.026564835,
      -0.019715924,
      -0.008286439,
      0.015648415,
      -0.0070868,
      0.0017912324,
      -0.03297461,
      -0.004530335,
      -0.00012279564,
      0.008008499,
      0.0122440625,
      -0.011208216,
      -0.003643187,
      0.01971853,
      -0.021716803,
      -0.0067030466,
      0.011882724,
      -0.02408708,
      -0.021433515,
      0.016666906,
      -0.00009557774,
      0.015887301,
      0.031895828,
      -0.0014241774,
      -0.008016217,
      0.027744994,
      -0.006849058,
      0.009660175,
      0.010792536,
      -0.013960001,
      0.03305449,
      0.0026600317,
      -0.0024884855,
      -0.013539515,
      -0.0066764574,
      -0.027923446,
      0.048930127,
      0.007188268,
      0.030781103,
      0.043972723,
      -0.0010102607,
      0.007021116
    ]
  },
  {
    "id": "genai_cohort_nodejs_05_Building_Auth_with_Express_Middlewares_vtt",
    "content": "All right, so welcome to the another video in which we have to detect who is the current logged in user and how we can do that. So what we could do is be simple. It's very simple. We have already studied the concept of middlewares, right? The middlewares. See what I can do is technically, let's say that here is your user, right? This is the user or the client making a request to your express server. So these are your different, different routes. Let's say this is a route. Now one thing is what you can do is like you can write a logic of getting the current user here, right, in every route. For example, let me just code it, okay, for you. So let's say async request and response, correct? So what you can do is how. So you are expecting that request will somehow contain the session id. Okay, so let's say that user, you have told the user that hey, in the headers always give me an header that is let's say Session ID as whatever is your session id. Okay, so this is one thing that you are saying to the user. So you can assume that you are going to get the session ID of the user in the headers, that is Request dot headers, okay, as a key, that is Session id. Let's say now what you can do is you can write a logic, correct? What is the logic? You have to search a session by the id. So first thing first, if there is no session id, that means you are not logged in, right? Return response status code of unauthorized. Okay, so what is the unauthorized status code? Unauthorized status code 401, right? So you can just say JSON and and error that you are not logged in because you don't have a session id. But if you do have a session id, I want to search in the table, right? So I'll just make a query. Await, database. Okay. Select okay from which particular table okay. From which table that is sessions table. Okay, that's nice. Okay, where you will just say table equals okay, what that is table. id is session id nice. So what you are going to basically select from here is id, which is user sessions id. Nice. Now if this is not returning something, if you are not getting something that is const. Let's just call it as data. If there is no data, which basically means that there is no session, the session ID is invalid. Again, you can just say this particular thing, okay, that if there is no data, okay, that means you are not logged in. This is an invalid session ID you are sending me. But if you get it, you want to get the user information. So if you know that you have something known as user id in the user sessions. user id, right? So what you can do is you can basically do a for lookup, right? You can just say dot join. Okay, you can just do a dot left join, you can do a right join. So let's just do a right join. Okay, okay. On what table? On the users table. On the users table. Okay. On. Okay, how do you want to join it? So you have to give the on where users table. id. okay, you can just say where equals this particular thing to what thing? That is user sessions. user ID. So this is how you do a join. Now technically you can get the name of the user how you can just say users table. name and you can also get the email of the current user that is Users table dot email. So now this data contains everything. So you can just say if you got the data you can just say return response JSON and you can just send the data here. Let's first give it a try if everything is working. So let's say this is my session id, I'll just copy it. Let's make a new request, not a websocket request. I want to make an HTTP get request on HTTP user. If I just make a request to this particular route you can see it says you are not logged in. So I can just go into the headers. Let's create a new header of which name Session id. So I can just say session ID and value and send. So you can see this is the current logged in user. If this was an invalid ID let's say invalid ID you can see you are not logged in. Okay so one, so this is the current logged in user and nice. So now you can see that how you can basically save the current logged in user. Now let's say I have one more route that is a private route. Okay, so let's say I have a update route. Let's say user wants to update his some information. So it's a patch request. Okay, let's say router. patch/async request and response. And what you want to do is you want to basically update something from the current logged in user. So let's say he wants to update his name. So request body. So let's say name is something he wants to update. Now here is a problem right as Soon as you update the name you want to see if the current logged in user is who so you have to repeat this code, is that correct? So that means if you have a lot of routes, which has some private information, you want the information about the user, you have to repeat this piece of code, which is not a correct thing. So in Express, what you can do is you can basically create a middleware, a middleware, okay, which always runs. This middleware is responsible for fetching the session and keeping it in the data of the session and then forward the request to the route. Got it. Now so what we can do is this middleware can do the database operation and on the request it can create a new object named as user, which is basically the current logged in user, and then forward the request to the appropriate handler. That means if I go here, what I could basically do is I can create a middleware app. Use an async function. Okay, so this basically has request response. And next, see what I could basically do here. Okay, I'll just copy paste the code first, try to take the session id. If there is no session id, that means there is no user. Just call the next function. Right? Because next function can decide whether it wants to process that request or not. So I can just say a return. But if there is a session id, what do you want to do? You want to query that session. So I can just do a copy of this particular code, right? And paste it here. Now here is a problem. These things need to be imported. So don't forget to import these things. Okay, that is db. So this is just one level up, the db. And you also want to import this thing and this thing. Copy, paste and this thing. Nice. Okay, so that means you got the data. Now what you can do is if there is no data, if there is no data, okay, so that means, where is this ending somewhat here. If there is no data again, you can just call the next function without doing anything much. But if you got the data, you can just say request dot. You can add a new property, user, which is basically this particular data. Okay? Request user as data and then call the next function. So technically what is happening here is if the data is there, the request will have a new property, that is user. So that means if the user is actually logged in, request user will be added to the current request. That means now I don't have to do all this stuff. Okay, What I can just do is to get the current logged in user, I can just say const user equals to request user. That's it. If there is no user, I want to return this. So that means this logic has been removed. I don't want to query anything. Right. And then if the user is there, you just return this. That's it. Because you have moved that particular logic to the middleware, let's make sure if everything is working. Yes, everything is working fine. Got it. Now. Now, if you want to update something, first, you can basically check if that particular user exists or not. That's it. But if that user exists, of course you want the user id. So here is a problem. So this is basically your session ID. This is basically your session ID, not the user ID. So you might want to say where table. session ID and ID should be. Basically, user table ID. Okay, so user table. it nice. So now what you can do is you can just say to update something. I can just say await DB dot update. Okay, which table do you want to update? I want to update the users table dot. Okay, set. What do you want to set? I want to set the name. Okay, but where do you want to set the name? Okay, you can just say aware, where. Now this is very important. Equals user table. id is actually equals to request user. That is user. id. so this is basically request users current id. That's it. So you update it and then you can just say return response. JSON saying status success. That's it. Okay, so this is taking care of the, authentication using the middleware function. So now if I go back and I'm trying to make a get request first, you can see that, yes, I am getting everything that is nice. Now if I do a patch request, okay, on the body raw JSON. Okay, So I can just update my name, right? So from piyushkar, let's make it as piyush. Send success. Now if I make a get request and send, you can see my name is now updated, as piyush. So that means even in the database, okay, if I go into the users, it is now piyush. Okay, let's make it Piyush. Garg again PiyushGarg. Sorry, it's a patch send success. If you try to now get, you are getting piyushkarg. So if I do a refresh. Yeah, you can see it's now piyushkar. So this is how it is updating. Got it. Now, so this middleware is basically taking care of the authentication. So now this is basically what this is session based authentication. The problem with the session based authentication is this, that on every request you are making a database call. Do you see that? On every request you are making a database call. So just imagine if user is repetitively making request, you are actually doing a database operation on every request to exchange the session ID with the user's information. So that means this particular middleware which is always running, where is that middleware? Yeah, this is a very expensive operation. For every request you are making a database call, which is causing multiple problems. Problem number one, you are making a lot of calls to the database, which makes the database overwhelmed. Second problem is you are adding a latency, right? Because it's a database operation. In reality your database is running on a different server. So you are basically going to a database, getting the session information and then processing the request. So that means there is always an added latency, added some processing time to every request. Your every request will be slow because request came, you have first do the session thing in the database and then you have to again do database operation for some other thing. So that means this particular thing is making database call on every request, thus making every request slow and overwhelming the database. But it is more secure, right? Because every time you are making a database call. So what I could ideally do is now if I go back and I just delete the session, see, if I go into the sessions and I delete this particular entry, as soon as I delete now, you're logged out. See. So that means banking systems where the security is important, they use this session based thing. So with this particular approach you can even detect where all he is logged in. You can invoke revoke a session. So technically you can do a lot of things here, right? So this is basically your session based authentication. Now in the next particular video we are going to see how we can make a stateless authentication using JSON web tokens. And we can reduce this overhead. This always making an API call or making a query to the database more faster by not making it. So we will see how JSON web token solves this particular problem.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "05 Building Auth with Express Middlewares.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/05 Building Auth with Express Middlewares.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.007757306,
      0.0033376268,
      0.0025800455,
      -0.07244256,
      -0.023926616,
      -0.0026569816,
      0.017696299,
      0.020395624,
      0.010815969,
      -0.007370725,
      -0.0025334088,
      -0.0050202934,
      0.0007497153,
      0.022656236,
      0.12543303,
      0.006442166,
      0.008464208,
      -0.0005957829,
      0.0054079117,
      -0.03820389,
      0.009182327,
      -0.008008777,
      0.011471302,
      -0.010830917,
      -0.0064039403,
      0.023324886,
      0.008844269,
      -0.013414966,
      0.034120314,
      -0.013817763,
      -0.012535104,
      0.0035538576,
      0.020487472,
      0.035616927,
      0.0011116588,
      0.044685777,
      0.03485175,
      0.023737138,
      -0.035138246,
      -0.006878372,
      -0.0072560916,
      0.012606328,
      -0.0105149755,
      -0.0073187463,
      0.009456341,
      0.014977547,
      -0.016359625,
      -0.006256196,
      0.005206811,
      0.030888408,
      0.0024579389,
      -0.0007961799,
      -0.032959428,
      -0.1690984,
      0.004589008,
      0.0012096452,
      -0.0019286999,
      0.0053549623,
      0.010156737,
      0.02011276,
      -0.017448746,
      0.009824135,
      -0.038097195,
      0.029586172,
      0.0015996719,
      0.011277363,
      0.009818873,
      0.0031443536,
      0.001387167,
      -0.00810547,
      0.009648573,
      0.014296937,
      -0.012998335,
      -0.014674741,
      -0.0056399014,
      -0.022558976,
      -0.010506189,
      -0.021364747,
      -0.0104997065,
      0.0065873805,
      -0.0017398361,
      -0.006329462,
      -0.017544208,
      0.0043691243,
      0.007662393,
      -0.0056957793,
      -0.0011245984,
      0.0024222254,
      -0.012912669,
      0.0073523247,
      -0.013775585,
      0.0022492937,
      -0.004030041,
      0.0021397423,
      0.010789338,
      -0.00021339998,
      -0.014373601,
      0.008374834,
      0.0035809043,
      -0.013148105,
      0.0049593216,
      0.020138416,
      -0.016033947,
      0.031498287,
      0.002389261,
      0.0036093344,
      -0.0006664295,
      -0.0050265184,
      0.019617692,
      -0.0044064377,
      -0.0011767915,
      0.000661985,
      0.013771982,
      0.009843267,
      0.009397011,
      -0.18353732,
      0.018490404,
      -0.024950894,
      0.015387011,
      0.012694812,
      -0.009211328,
      0.0110510215,
      0.01594372,
      -0.013390935,
      -0.03308826,
      0.019997945,
      -0.006727803,
      -0.013579611,
      0.016879164,
      -0.0035012218,
      -0.028102782,
      -0.005719166,
      0.020246092,
      0.01178037,
      0.006763866,
      0.021162136,
      0.025021825,
      -0.0144175645,
      -0.0105524715,
      -0.017029263,
      0.01827724,
      0.021392534,
      -0.0057825944,
      0.035255335,
      0.010104818,
      0.00011716272,
      -0.0063263825,
      0.022951081,
      0.0057048295,
      -0.018182311,
      0.050791096,
      -0.004539505,
      0.017496422,
      0.015829887,
      0.012767592,
      -0.04627526,
      0.0035981701,
      0.00042600595,
      0.002270105,
      0.007397857,
      0.003934387,
      0.0073295883,
      0.008686023,
      0.017774832,
      -0.0049903183,
      -0.0008582175,
      -0.0011347486,
      0.009380775,
      0.014498317,
      0.005627288,
      -0.015398164,
      -0.009689937,
      0.007907705,
      -0.0003065894,
      -0.02057736,
      -0.008872485,
      -0.01070163,
      -0.0060970103,
      -0.00040309815,
      -0.024309475,
      -0.015271271,
      -0.015187171,
      0.026737738,
      0.0012630168,
      0.012644089,
      -0.0093265055,
      -0.020080186,
      0.00829109,
      0.0068066525,
      -0.01187283,
      0.012612284,
      -0.027370822,
      0.0032016041,
      -0.008963463,
      -0.000619141,
      0.006654767,
      -0.0009124211,
      -0.021022376,
      0.02019141,
      0.015763389,
      0.020124098,
      0.011089742,
      0.0059871217,
      -0.007764536,
      -0.00031836648,
      0.00674487,
      0.029669082,
      -0.014463121,
      0.010180881,
      0.028931696,
      -0.0068386644,
      -0.016000247,
      0.0015645911,
      -0.017038343,
      0.005299909,
      -0.026604721,
      0.010575353,
      -0.01414967,
      0.014887666,
      -0.02280576,
      -0.005470643,
      -0.013994212,
      0.022389192,
      0.013600534,
      0.010824145,
      0.015053834,
      0.0070428075,
      -0.03325096,
      0.008341086,
      -0.0030948094,
      0.022705888,
      0.008798021,
      -0.009360184,
      -0.0038044367,
      0.018909786,
      -0.012857727,
      -0.015235986,
      0.010807497,
      0.0020262524,
      0.0064777704,
      0.015541212,
      -0.014524458,
      0.0057540005,
      0.010090359,
      0.024266547,
      0.0028764545,
      -0.030736027,
      -0.012875979,
      -0.0006934283,
      -0.009476885,
      -0.011959991,
      -0.009313548,
      0.00049371645,
      0.0009878243,
      0.009148185,
      -0.01515923,
      -0.044871975,
      -0.00068914227,
      0.0004826463,
      -0.01186366,
      -0.013739203,
      -0.019973708,
      -0.0033608088,
      -0.011060214,
      -0.0005747405,
      -0.02832855,
      0.00045451274,
      0.03535493,
      -0.01090485,
      -0.005485591,
      0.011483915,
      -0.004880368,
      -0.0040973425,
      0.0064145955,
      -0.016632743,
      -0.011886252,
      -0.066867255,
      0.006679996,
      0.01369178,
      -0.0064845984,
      -0.026049541,
      0.011318418,
      -0.010989,
      0.00031761022,
      0.01183115,
      0.01444583,
      0.00333252,
      -0.021957684,
      0.012592657,
      -0.0157679,
      -0.0019381216,
      0.028141689,
      0.012187831,
      -0.00055875495,
      0.004759829,
      -0.007884174,
      -0.00826783,
      -0.014595689,
      -0.00280281,
      0.005224482,
      0.010666916,
      0.03214761,
      -0.033969767,
      0.016996479,
      0.011807408,
      0.005142412,
      0.0025899718,
      0.036663733,
      0.0036211784,
      -0.008578552,
      -0.022049071,
      0.011960022,
      0.01679283,
      -0.027665362,
      0.018613603,
      -0.017074896,
      -0.016269177,
      -0.022035383,
      -0.01006945,
      0.0133284805,
      -0.0120561775,
      -0.0049084537,
      0.021217609,
      -0.019745944,
      -0.008766075,
      0.0066745835,
      -0.020779526,
      0.012772612,
      0.015575553,
      -0.029005839,
      -0.0005162097,
      -0.028778765,
      0.014580927,
      0.012904217,
      0.000012123729,
      -0.0050016083,
      0.01252196,
      0.004278377,
      0.013287528,
      0.0018891891,
      0.023587756,
      -0.0029316922,
      0.003764791,
      -0.0062630964,
      -0.007917657,
      -0.014602872,
      0.02311975,
      -0.011778164,
      -0.0074888114,
      -0.034380216,
      0.00027097357,
      0.02294185,
      0.019636001,
      -0.004185552,
      -0.017019985,
      0.022616213,
      -0.013611241,
      -0.0039050416,
      0.024525536,
      0.032904923,
      0.010084441,
      0.0043880856,
      -0.010338802,
      0.007907277,
      -0.00268417,
      -0.021321602,
      0.023821808,
      0.03722437,
      -0.0033754536,
      0.008021709,
      -0.0049272496,
      0.0053134044,
      -0.0013816447,
      -0.015609991,
      0.002275868,
      -0.0016389271,
      -0.030655686,
      0.011882489,
      -0.03205775,
      -0.010678107,
      -0.0054692547,
      0.027264228,
      -0.004968574,
      -0.009937208,
      0.00994902,
      -0.0034579865,
      -0.0054867934,
      -0.00025610827,
      -0.027382921,
      -0.0005133932,
      -0.032937862,
      0.013868263,
      0.007798373,
      0.007580803,
      -0.006370726,
      -0.0028584013,
      -0.010246831,
      0.00491345,
      0.01297441,
      -0.0016253714,
      -0.02460397,
      -0.005286733,
      -0.02907597,
      0.002027056,
      0.0052902885,
      -0.014883635,
      -0.009814791,
      0.012777243,
      -0.019106932,
      -0.012834864,
      0.0029992992,
      -0.011645671,
      0.0081455745,
      -0.016180048,
      0.0091759935,
      0.032001562,
      -0.0091582285,
      0.006895311,
      -0.00038671747,
      0.009608126,
      -0.004541671,
      0.014933986,
      -0.012108114,
      0.0033673425,
      0.020408278,
      0.009916735,
      0.00058688584,
      -0.010656162,
      -0.016166173,
      0.0042775758,
      0.0041856016,
      -0.00036765868,
      -0.0050256485,
      -0.0153340865,
      -0.004653193,
      -0.022046557,
      -0.014543521,
      -0.011899413,
      0.0041957167,
      -0.0135860555,
      0.017495241,
      0.013841586,
      -0.01199352,
      0.0003995912,
      -0.0074461563,
      -0.01727351,
      -0.026039248,
      -0.00606511,
      -0.035944726,
      0.0105960425,
      0.02289769,
      -0.007552883,
      0.017966507,
      -0.00076532597,
      0.020598426,
      -0.0028767355,
      0.0029163675,
      -0.006241277,
      -0.013264553,
      0.0011911162,
      -0.0034795357,
      0.0050742063,
      -0.000077607445,
      -0.00030198722,
      -0.02983073,
      0.0006698145,
      0.003016017,
      -0.020478891,
      -0.02652182,
      0.019569105,
      0.021782847,
      0.029947598,
      0.029900884,
      0.0060355645,
      -0.005293835,
      -0.016078567,
      -0.02653987,
      0.008908928,
      0.0024043003,
      0.0015505356,
      0.019690495,
      -0.0011002192,
      -0.035009284,
      -0.012623095,
      -0.00789991,
      0.023664422,
      0.008353284,
      0.029003046,
      0.008004856,
      -0.0012632482,
      0.03514597,
      0.008307773,
      0.0023212784,
      0.00054751924,
      -0.037479755,
      -0.008072453,
      0.019973636,
      -0.013590003,
      -0.014180796,
      0.0010751701,
      0.006119517,
      0.014504177,
      -0.022899354,
      0.01753297,
      0.014681755,
      -0.019503558,
      0.0059685637,
      -0.014509027,
      0.020039544,
      0.005692815,
      -0.014851161,
      -0.016500868,
      0.004504271,
      -0.018566541,
      0.00910924,
      -0.007957774,
      -0.0061817965,
      -0.0027751997,
      -0.004202134,
      -0.020028872,
      0.0007630006,
      -0.004538339,
      0.016069664,
      0.011872112,
      -0.005053967,
      -0.010615918,
      0.020483566,
      0.0182075,
      -0.001363959,
      -0.014448693,
      -0.021152515,
      0.01799217,
      -0.001158368,
      -0.0032306365,
      -0.009440739,
      0.00922277,
      -0.0023817082,
      -0.012745342,
      0.009396639,
      0.00160038,
      0.009545235,
      -0.023040108,
      -0.0026996396,
      -0.00022507913,
      0.021350719,
      -0.12695472,
      -0.0029099318,
      -0.011296822,
      -0.008514655,
      0.0057528317,
      0.0064869802,
      -0.0047343937,
      -0.03642194,
      -0.020437282,
      -0.0019736323,
      0.01087195,
      -0.0015265577,
      0.0072526834,
      0.005536177,
      0.0043195076,
      -0.01813573,
      0.007474466,
      0.021763053,
      0.014643769,
      -0.0032772366,
      0.017613124,
      0.013235581,
      0.01579438,
      0.013979825,
      0.0010219709,
      0.017933233,
      0.012714492,
      -0.01591333,
      0.001249655,
      -0.0021087497,
      -0.040752113,
      0.00018910495,
      0.013668276,
      0.0024139439,
      0.021579022,
      0.0072054514,
      -0.023592005,
      -0.0029789186,
      0.007280982,
      0.02195699,
      0.012276357,
      -0.020822488,
      0.029638173,
      -0.009464056,
      0.0050417995,
      0.005014914,
      0.016708424,
      -0.012069865,
      0.00072163966,
      0.040614653,
      -0.04100574,
      0.0034757257,
      0.0065436754,
      -0.006992223,
      0.0021685269,
      0.007970374,
      0.0039567924,
      0.019369602,
      -0.008422312,
      -0.00003640902,
      0.002384585,
      0.01772929,
      -0.010600281,
      0.018920217,
      -0.019168124,
      -0.0039215456,
      0.008313235,
      -0.009164817,
      -0.0052277637,
      0.008956947,
      -0.011306247,
      0.0056861727,
      -0.0017306547,
      0.027906006,
      0.020591537,
      0.001982802,
      -0.009929915,
      0.021903547,
      -0.006486621,
      0.00516032,
      -0.0061404877,
      0.018204555,
      -0.07586042,
      -0.017521525,
      -0.0036615122,
      -0.023882233,
      -0.0013649968,
      0.012376263,
      0.0071787173,
      0.012046543,
      0.0016580918,
      0.0001250907,
      -0.035033602,
      -0.014723667,
      -0.0031200966,
      -0.02083569,
      -0.020597534,
      0.002115177,
      0.011178364,
      -0.02426079,
      -0.01915499,
      0.002837768,
      0.00049391075,
      0.013419578,
      -0.010901386,
      -0.018771797,
      0.00820285,
      0.021347387,
      -0.02897238,
      0.013854418,
      0.0038015214,
      0.0044785524,
      0.0065534175,
      -0.14426796,
      -0.015751548,
      0.0047242846,
      0.021461792,
      0.0119383205,
      0.00006753812,
      -0.008931839,
      -0.012740582,
      -0.01021924,
      -0.006027284,
      0.0013266801,
      -0.020829637,
      -0.009137996,
      -0.01269292,
      -0.01398652,
      0.12815695,
      -0.004404392,
      0.0028493167,
      0.00033606982,
      -0.015356315,
      -0.02796886,
      0.0014168845,
      -0.0044299485,
      -0.0123222275,
      0.0012661042,
      -0.017639056,
      0.013062705,
      -0.031651646,
      0.008251008,
      0.025054399,
      -0.0018263198,
      -0.023980092,
      -0.012948566,
      0.017146926,
      0.006946529,
      -0.009783499,
      0.018630344,
      -0.015431948,
      -0.010959117,
      -0.01579592,
      -0.021236552,
      0.026412597,
      -0.0058373865,
      0.0035679806,
      0.0009963762,
      0.023970818,
      -0.010790755,
      0.01445787,
      -0.02181546,
      -0.019645957,
      0.0055682915,
      -0.07849002,
      -0.017487658,
      -0.025599988,
      -0.0032425025,
      0.017548682,
      0.0038443161,
      0.028453926,
      -0.005940536,
      -0.020821638,
      -0.004170988,
      -0.004652341,
      -0.007102107,
      -0.0032013615,
      -0.005981237,
      -0.007976293,
      0.01585246,
      0.015123275,
      0.022954041,
      -0.016352924,
      0.0007632196,
      0.030457783,
      -0.0034507234,
      0.004589838,
      -0.022888303,
      0.002963361,
      -0.003131027,
      -0.009191317,
      0.0024641834,
      -0.013838387,
      -0.006424826,
      0.0060682264,
      -0.017474161,
      -0.0012440755,
      0.013339499,
      -0.01792368,
      -0.01857192,
      0.0120638935,
      0.0011008184,
      0.0006848026,
      0.012933235,
      0.013076887,
      -0.016803807,
      0.024937337,
      0.0016894019,
      0.028044749,
      0.010910833,
      -0.0025451512,
      0.036003724,
      0.005964687,
      -0.0020271477,
      -0.033636093,
      -0.0060917023,
      -0.027239304,
      0.032314282,
      -0.0006207382,
      0.01978293,
      0.014847462,
      0.0070111994,
      -0.007728943
    ]
  },
  {
    "id": "genai_cohort_nodejs_06_Stateless_Auth_with_JSON_Web_Tokens_vtt",
    "content": "All right, so in this particular video, let's see how we can solve this session problem using something known as JSON web tokens. So that number one, I don't have to make an API call or a query call to the database and I don't overwhelm the database with every request and how I can increase my speed. So let's search for something known as JSON web token. Okay, so what is this? JSON web tokens. So this is the jwt, also known as JSON web tokens. The idea behind JSON web tokens is what if I could create a random string, let's say something like, you know, a random string and actual information about the user, such as name, such as all the details about the user can be encrypted inside the token. I mean the token itself contains the information. So that is the idea behind the jwt. So you can see that if this is a token, this token actually contains this information. Sub name id. For example, I can even add, let's say email, right? I can add email as P. So you can see that this particular token contains this particular data. So that means instead of returning a session id, I can return a, token, an encoded token which contains the all the information inside the token. So that is the basic idea behind the token. So I don't have to make an API call to the database to get the data. Okay, now these tokens are actually signed tokens. That means our server can basically create a token. Everyone can read what is the data inside the token, but no one can change it. Because to change the token you need a secret. Because if anyone can change this token, that's a very risky thing. You generate a token for me, I can update my user ID to point to your user ID and I can do something on your behalf. So these tokens are absolutely safe. Anyone can read these tokens, but no one can tamper or change these tokens until and unless you have the secret key. So as a developer you should always keep the secret key very secure. So what we are going to do is we are going to create a JWTSecret, which is something like, you know, Superman. So ideally it should be very long and something not guessable. Now what we have to do is we have to say pnpm install JSON web token. Okay, so this is the whole name JSON web token. Nice. Now see what we can do is let's try to refactor this particular code to use tokens. Okay? Number one thing, how do you login now that's the thing that when you log in, technically you don't want to create a session, right? We are not going to create a session, so a session creation is not required. Rather, what we should do is we should basically create a token for the user. How to create a token? First let's create a payload that what all information I want to store in the token. So I am going to store an ID that is existing user. id and I want to store email. Let's say existing user. email and I want to store the name of the user that is existing user email. Now to create a token token, I can just say import. Okay, import JWT from JSON web tokens. So this is what we have imported. And then you can just say jwt. sign. okay, you are signing a token for this particular payload and then you have to give the secret key that is process. en sorry process. env. what is the secret? Inside this is the secret JWT secret. This creates a token for you. Jwt. sign this thing. And this token can now be returned to the user back. So now let me show you what this token looks like. Okay, so what we are keeping in the token is id, email and name. Let's go back to the postman. So let me just spin up my postman. Okay, so here is the postman. And let's try to do a login. And send. Okay, I forgot to run the server, so PNPM dev and enter. Now let's see what is happening. And send. So all right, so we got an error. Let's see what is the error here. The. Okay, so my bad, actually the docker compose is not running. So docker compose up hyphen D. It says. Okay, so actually, you know, I just restarted my machine and the docker is not running. So that was the problem. So let me just, let's wait for a while. Yeah, now I think everything is up and running. Now let's just do a PNPM dev. Cool. And send. So can you see that? This random string, this is a token. Now if you have noticed, we are not storing this token in the database. There is absolutely no need to store these tokens in the database because if I paste my token here, See, See, this is what we are getting. By the way, name is wrong. My bad. Because this must be named. Yeah, so you can see that this is the token. Now you might be thinking that, hey, someone can come and change this token, but actually no, because if you change the token the signature of the token also changes. And to change that particular token, you actually need this particular key. So of course the user will never have this particular key. So they cannot really change the token. Now what we have to do is, okay, the login part is done. Now, in order to see if the current user is logged in or not. Now there is a thing. We don't really need this whole thing, right? What we need is we need to read the token from the headers. And as a part of standardization, there is always an authorization header, okay? So as a best practice, there must be a header that named as authorization whose value must be bearer. And the token goes here. So this is the standard practice that everyone follows. So this is basically your token header whose value should be bearer space and the actual token, okay? So that means first of all, if there is no token, if there is no token header, that means user is not logged in. Okay? Then you have to check that if okay, not token header dot starts with okay, it should start with the bearer. Okay, because that's the standard. Then you can just say return response. status as aJSON saying error and you can just say authorization header must start with bearer. Right? Nice. Bearer. Okay, if it starts with bearer, what you can basically do is you can basically extract the token. What I could do is if I somehow split this particular thing using the bearer word, right? Or if I split it using the space, okay? So I can just say token header. Split it using the space and take the first index that is this token. So you got the token. Now what you should basically do is you should validate, you should decode the token. So I can just say decoded. Okay, how to decode the token is basically import jwt from JSON web token and now you can just say jwt. Verify you have to pass the token. And also the same secret that you have used, that is process env. What was our key JWT secret. Now see, if user has changed something in the token, this particular step is going to fail. But if user has not changed something in the token, the decoder will be the actual user object, whatever you have stored in the token. Now technically I can just remove all this thing, right? Everything can be removed and this can be equals to the decoder. That's it. Absolutely no database call. You get the token header, which basically looks something like this. No token that means user is not logged in. If it doesn't start with bearer, you return a bad request error, you get the token from the header, you Decode it, you verify it, set the request header, and that is it. So that means now if I try to get myself, you can see it says you are not logged in. Why? Because this particular token has to be sent in such a way that is not this. Like this authorization must be bearer token and send. See, I am logged in. Also, can you see this authorization tab here? You can just say bearer token and you can actually paste your token here and send. So this is actually more nice way because Postman gives you the out of the box support for it. So there is absolutely no need to set this particular header, okay, because you already have it bearer token as a token. So this automatically sends a header. Okay, so if you see the hidden, you can see automatically an authorization bearer token is being sent. Nice. Okay, so this is how you basically do a token based authentication. Now see, when you are generating tokens, you can even give more parameters like expires in. So you can just say expires in. Let's say one minute. Now this particular token is only valid for one minute. That means after one minute, this token will no longer be valid. Okay, what happens if I change this token? Let's say if this was my token, right? Let me just copy the token, paste in the debugger. Because see, publicly anyone can read it. I change it. See, I'm changing something. Now if I copy this token, which I changed on the front end, of course, without the key, and I paste it. See? Server crashed. What? What is the error? If you read the error, it basically says that it is not able to verify the token. See, JSON web token error invalid signature. So that means if someone tries to tamper around with the token, tries to change the token, the validation fails. So ideally what you could basically do is in your middleware, okay? In your middleware, you can wrap this particular whole thing with a try catch. And if you are somehow in the catch, okay, you can basically just call the next function. That means you are not logged in. So now if this is a tamper token, you are not logged in. So that means you have to use the Tampa token, which is generated by the server using that secret key and then paste in here. See, you change something in the token and your signature is invalid. See, I changed it. Copy it. Okay, now if I use this particular token, you are not logged in. Nice. Right? I'm not making an API call. I'm not making a database call. Why? Because the actual data sits inside the token. That is the beauty of JSON web tokens. Okay, so this is how we are doing it. And by the way, the name is not coming here because we are not querying the name here. So ideally I should also query the name. Okay, so that's okay, you can just update this particular stuff. But so tokens. The basic idea behind tokens is that the actual information is actually stored inside the token itself so that you don't make a database call always. And because the actual data lives inside the token, the latency is very less because you just have to verify the token, you are not making an extra database call. So database is not overwhelmed with every call. But there is a problem. Once you create a token and you give it to the user. Now technically you don't have any control on the token, right? He is logged in. You get it now because see, when you were doing session based authentication, if you want to log out a user, you can just delete his session from the database. But now once you give a token to a user, there is no way going back. You get it now the token is with him. How will you invalidate this token? So ideally the best practice is that you should not create long tokens. You can just create a token which is for one minute. And if it is expired, you can just regenerate a token for him. You can just regenerate a token for him for one, one minute. And if you don't want, if you want the user to be logged out, just stop regenerating the tokens for him. See what happens is the worst case is that he will be still logged in for one minute. That's the thing. And you might be thinking, I can store this particular token in the database. You should never store the tokens in the database. But yes, you can maintain a database of, you know, blacklisted tokens, okay, where you can store the token of the, you know, which you want to invalidate. But the problem is again you will end up in the same problem. That is you are making a lot of database calls. So the decision is yours, that if you are making an application where authentication is very sensitive, like banking, there you should always implement a session based authentication. But if you are just building a SaaS where it's okay to log in a user for a couple of seconds right there, the token based authentication is used because it leads to less overhead on the database. Okay? So it's a balance between both of them. So you should always create tokens with less expiry time. So expires in one minute. And as soon as the token expires you can regenerate the token for him. So this is basically how the token based authentication works. So congratulations. Now you know both of the authentication methods, that is Session based authentication and GWT based authentication. This is stateless. This is what? Stateless. Why is this known as, stateless? Because. Because the data is stored inside the token and session based is basically stateful because the actual data lives on the server or on the db, so that is the whole thing.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "06 Stateless Auth with JSON Web Tokens.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/06 Stateless Auth with JSON Web Tokens.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.007553956,
      0.01702825,
      0.004222291,
      -0.067872666,
      -0.012033657,
      0.0034469725,
      0.020126194,
      0.020498058,
      0.009214789,
      -0.004778497,
      0.0035463863,
      -0.0031217798,
      0.008433167,
      0.019576192,
      0.13118537,
      0.011438492,
      -0.0067402404,
      -0.0022385265,
      -0.0029909515,
      -0.02665116,
      -0.0020726505,
      -0.006978425,
      0.009695212,
      -0.010210529,
      0.0046467492,
      -0.0061947596,
      0.01096925,
      -0.004612413,
      0.031129988,
      -0.0046311496,
      0.00035472817,
      -0.0012070573,
      0.0074021975,
      0.025294416,
      -0.0014757148,
      0.036062315,
      0.045215916,
      0.010631366,
      -0.04128894,
      -0.005059368,
      -0.02189596,
      0.005110167,
      0.009181264,
      -0.011083619,
      0.003935369,
      -0.008562541,
      -0.012278614,
      -0.017483637,
      -0.0021349478,
      0.024428051,
      0.007128772,
      -0.00931354,
      -0.03606326,
      -0.18001933,
      0.002724819,
      -0.014928404,
      -0.002396495,
      -0.0028326767,
      0.0063014347,
      -0.0013886187,
      -0.028973771,
      0.011453686,
      -0.042132825,
      0.01943696,
      0.0059679775,
      0.013708964,
      0.0295697,
      -0.00392283,
      -0.00407096,
      -0.009256433,
      0.01430501,
      0.017006256,
      -0.007146668,
      -0.010794574,
      0.0013684662,
      -0.035416786,
      0.0048648594,
      -0.019706963,
      -0.008832761,
      0.023121659,
      -0.01043511,
      -0.015986606,
      -0.004745271,
      0.016611787,
      0.009509581,
      -0.0031932215,
      -0.00024780567,
      -0.01240977,
      0.0043945466,
      0.011059355,
      -0.006674423,
      -0.0038072472,
      0.005515275,
      0.009712205,
      0.007819707,
      -0.00713361,
      -0.021206556,
      0.020705672,
      0.0002485642,
      0.01216865,
      0.0029964885,
      0.020188276,
      -0.028231783,
      0.023641763,
      -0.00093647843,
      0.0067949286,
      -0.008706636,
      0.00043331872,
      0.015601738,
      -0.015825406,
      0.0009564676,
      -0.0036109022,
      0.023673799,
      0.011733733,
      0.017980408,
      -0.18221694,
      0.023131121,
      -0.0096638985,
      0.02073854,
      0.016796088,
      -0.012974023,
      0.014121729,
      0.012164333,
      -0.0048658657,
      -0.036561176,
      0.015923856,
      -0.010003094,
      0.0028545754,
      0.017127886,
      0.0061795055,
      -0.025053686,
      0.0034488905,
      0.003571251,
      0.0027799935,
      0.0030397356,
      0.03512326,
      0.019215038,
      -0.013532034,
      -0.0044914717,
      -0.033554938,
      0.0096173845,
      0.028115114,
      -0.032030616,
      0.027080907,
      0.018539317,
      -0.0030226393,
      -0.018655099,
      0.024312608,
      0.018223103,
      -0.027645241,
      0.035051893,
      -0.0074642994,
      0.01975284,
      0.013014909,
      0.023434643,
      -0.055108804,
      0.01093585,
      0.011408533,
      -0.00592991,
      0.011599276,
      0.00086272665,
      0.00020831238,
      0.0054032058,
      0.027465612,
      -0.0026118231,
      -0.016457424,
      0.003867319,
      0.007577792,
      0.014389603,
      -0.00897275,
      -0.032673586,
      0.00090816186,
      0.0056624888,
      -0.0011995769,
      -0.01276201,
      0.0026516665,
      -0.009749173,
      -0.011884758,
      0.0043492583,
      -0.013607101,
      -0.014107262,
      -0.013761889,
      0.017164165,
      -0.005332404,
      0.021509748,
      -0.0049346006,
      -0.019255046,
      -0.0029169195,
      0.013368548,
      -0.009637638,
      0.0046103834,
      -0.006039769,
      0.013382505,
      -0.008343683,
      -0.0012981084,
      0.012000756,
      0.0046535865,
      -0.019559842,
      0.016797742,
      0.017509177,
      0.0033831894,
      -0.0014375465,
      0.011505708,
      0.00070347183,
      -0.011005202,
      -0.004415844,
      0.024156298,
      -0.024885828,
      0.01224783,
      0.034747727,
      0.010500667,
      -0.0021235114,
      0.010359495,
      -0.016912645,
      0.006236253,
      -0.008014407,
      0.021290217,
      0.0031155357,
      0.00047582734,
      -0.015421491,
      -0.002430579,
      -0.021218164,
      -0.0045228456,
      0.005499336,
      0.018388448,
      0.006304572,
      0.019119544,
      -0.016722282,
      0.0016838647,
      -0.021558423,
      0.024169184,
      0.003807714,
      -0.012140207,
      0.000022915096,
      -0.0025453672,
      -0.013999779,
      -0.0051186285,
      0.010315857,
      0.016476238,
      0.010244641,
      0.017526874,
      -0.0069106137,
      0.016865294,
      0.00679149,
      0.026539026,
      -0.0044280817,
      0.0024659603,
      -0.0059309294,
      0.0018522223,
      -0.012443948,
      -0.009517579,
      -0.0152651165,
      0.0017237208,
      -0.0043873447,
      0.011615099,
      -0.016043218,
      -0.053574685,
      -0.014781904,
      -0.0020663955,
      0.012569202,
      -0.015259148,
      -0.028008435,
      -0.01069529,
      -0.0026362136,
      -0.0005843711,
      -0.016424552,
      0.003637528,
      0.031262387,
      -0.016559701,
      -0.010922336,
      0.030220767,
      0.0018298975,
      0.013227682,
      0.002358787,
      -0.010458514,
      -0.009987489,
      -0.0659508,
      -0.003469656,
      0.005271136,
      -0.0148289455,
      -0.026269374,
      0.015033245,
      0.0036584083,
      0.0050447085,
      0.011069336,
      0.005564692,
      0.0019984723,
      -0.008643788,
      0.01303968,
      0.00043793616,
      -0.010819861,
      0.037059598,
      0.0012245296,
      -0.0020542173,
      0.0065653953,
      -0.019551037,
      0.0063888445,
      -0.015866315,
      -0.007417788,
      0.0009148717,
      -0.0049486966,
      0.011682334,
      -0.023127772,
      0.022043426,
      0.0224569,
      0.004432991,
      0.007757641,
      0.031098636,
      -0.0068408973,
      -0.0033415835,
      -0.021913573,
      0.0062729847,
      0.022491343,
      0.000083212995,
      0.0067998385,
      -0.009283567,
      -0.008339148,
      -0.016359724,
      -0.0032552858,
      0.011691381,
      -0.0068043876,
      0.0071355673,
      0.0113608455,
      -0.019512625,
      0.0004656534,
      0.005578984,
      -0.03055235,
      0.012035075,
      0.020708458,
      -0.026672749,
      -0.013003117,
      -0.016317585,
      0.0042926106,
      0.005617799,
      0.0086944625,
      0.007305135,
      0.02019865,
      0.0044800164,
      0.003596928,
      -0.00513069,
      0.028614912,
      -0.011047927,
      0.0038740628,
      0.002086843,
      -0.02625633,
      -0.006496334,
      0.024182249,
      -0.0035944278,
      -0.0151202455,
      -0.036100462,
      0.019470831,
      0.023679228,
      0.010790671,
      0.0022817045,
      -0.0246543,
      0.018926157,
      0.0038892413,
      -0.00011009221,
      0.014375834,
      0.023184072,
      0.010707094,
      -0.0049299984,
      -0.0064693773,
      0.01830834,
      -0.018555192,
      -0.0051597944,
      0.021280335,
      0.029427635,
      0.0065225745,
      -0.0008332642,
      -0.007824016,
      0.008521033,
      -0.0089786,
      -0.016890671,
      -0.01686034,
      -0.001050354,
      -0.03576777,
      0.013599893,
      -0.021762067,
      -0.019323256,
      0.0051569683,
      0.028680429,
      -0.013682604,
      -0.028023306,
      -0.002997608,
      0.0013633121,
      0.003088214,
      0.0202855,
      -0.020718692,
      -0.00066639227,
      -0.04695,
      0.015797932,
      0.008284231,
      -0.0022364291,
      -0.020329885,
      0.01579734,
      -0.0014273722,
      -0.011069434,
      0.002179549,
      0.0101437075,
      -0.015447679,
      -0.000113411996,
      -0.02099744,
      0.006732901,
      -0.008327863,
      -0.018646928,
      -0.0018355026,
      0.010731007,
      -0.01932176,
      0.00021432783,
      -0.009271267,
      -0.0189837,
      0.015631901,
      -0.019217301,
      0.012097926,
      0.02098601,
      -0.015880747,
      0.0090452535,
      0.010516872,
      0.0054974738,
      -0.004826791,
      0.011476396,
      -0.025123267,
      -0.0024208138,
      0.0052012075,
      0.008817258,
      0.006281596,
      -0.0045141014,
      -0.026081797,
      0.012972853,
      0.004295744,
      0.02368238,
      -0.0019178673,
      0.0028794329,
      0.004439828,
      -0.007713934,
      -0.014183333,
      0.0049628243,
      -0.010853016,
      -0.010752758,
      0.0029033134,
      0.01779439,
      -0.017165875,
      0.0027331212,
      0.010856861,
      -0.0008945511,
      0.003053813,
      -0.018305775,
      -0.041160215,
      0.001505893,
      0.028922623,
      -0.006188026,
      0.013751972,
      -0.0003276824,
      0.026549583,
      0.0012778727,
      0.0140513815,
      0.00405396,
      -0.019002063,
      -0.0039159507,
      -0.0070700916,
      0.009506985,
      0.029262507,
      0.002168121,
      -0.029967858,
      -0.0048316764,
      -0.003109775,
      -0.017527832,
      -0.028583938,
      0.021575732,
      0.0064762393,
      0.035678018,
      -0.00079521764,
      0.02212931,
      0.009428452,
      -0.0017396961,
      -0.019638723,
      0.004390348,
      0.015108056,
      0.0010228386,
      0.010990137,
      -0.009787595,
      -0.030144587,
      -0.012037826,
      0.010323511,
      0.030103954,
      0.012379681,
      0.0108202845,
      0.0071259825,
      -0.00089311117,
      0.028102402,
      0.028002996,
      0.0012314933,
      -0.01141129,
      -0.022450374,
      -0.002543506,
      0.027212655,
      -0.009647976,
      -0.0033198453,
      0.0029562972,
      -0.0009059677,
      0.013505191,
      -0.027818898,
      0.0004610579,
      0.014038343,
      -0.023551662,
      -0.006914367,
      -0.010172866,
      0.020909404,
      -0.006450819,
      -0.011768083,
      -0.0133849615,
      0.010768759,
      -0.0005148787,
      0.017749414,
      -0.00520412,
      -0.012466233,
      -0.010228242,
      -0.007195133,
      -0.025815893,
      0.005691832,
      -0.0010247176,
      0.01868039,
      0.018396784,
      -0.020025004,
      -0.014075913,
      0.020196361,
      -0.003737356,
      0.00034163013,
      -0.013339755,
      -0.007982193,
      0.019588612,
      -0.005530253,
      -0.011357928,
      -0.0045321486,
      -0.00021901369,
      -0.008721446,
      -0.005645743,
      0.01251214,
      0.00023672501,
      0.013109438,
      -0.018440329,
      -0.009480486,
      0.007739632,
      0.03127958,
      -0.11356297,
      0.0065994947,
      -0.02532478,
      0.0030001523,
      0.011676283,
      0.003732951,
      0.0025918172,
      -0.03117094,
      -0.029773645,
      0.0032065595,
      0.015044144,
      -0.009939915,
      0.016187,
      0.006736407,
      -0.0034084173,
      -0.015075303,
      0.016733006,
      0.018647034,
      0.010647371,
      -0.0022686685,
      0.021668516,
      0.008135163,
      0.009417752,
      0.01689634,
      0.0025453866,
      0.024256503,
      0.012770068,
      -0.007696385,
      0.017157799,
      0.0053517213,
      -0.037260525,
      0.0012084495,
      -0.004569902,
      -0.0030623886,
      0.009884635,
      -0.00335981,
      -0.0108087445,
      -0.012976024,
      0.006824001,
      0.025957322,
      0.018317025,
      -0.009644903,
      0.0057049915,
      0.0027235574,
      0.0071412995,
      0.00007715081,
      0.013363246,
      -0.007936215,
      0.000998827,
      0.022734948,
      -0.03788736,
      -0.007892107,
      -0.008697233,
      -0.016470728,
      -0.003978712,
      0.0078082015,
      0.006028843,
      0.0075326185,
      -0.00878233,
      0.0019649884,
      0.008954458,
      0.009997864,
      0.003264395,
      0.03229651,
      -0.0056408495,
      0.011260218,
      0.009201055,
      0.0036382729,
      0.003684295,
      0.0015378318,
      -0.0030121636,
      0.007098325,
      -0.00791049,
      0.029376423,
      0.014616353,
      -0.010561837,
      -0.0106839985,
      0.014969532,
      -0.015125196,
      0.011713255,
      -0.022636319,
      0.013336175,
      -0.07605465,
      -0.018848883,
      0.003763739,
      -0.02512135,
      0.0071403747,
      0.02029764,
      0.008842861,
      0.011770087,
      0.012471904,
      0.0008112085,
      -0.0174825,
      -0.019139495,
      -0.014555433,
      -0.021467092,
      -0.021696737,
      0.015745375,
      0.0023517695,
      -0.04026293,
      -0.03167387,
      0.004982376,
      0.020827958,
      0.017169392,
      -0.002131959,
      -0.0089936545,
      0.009381584,
      0.009637449,
      -0.020079391,
      0.006497702,
      -0.0015497095,
      0.009386672,
      0.0075448793,
      -0.13804838,
      -0.026848549,
      0.0006933039,
      0.014383966,
      -0.00055497314,
      -0.0011518702,
      0.008329575,
      -0.012991307,
      -0.0034779955,
      0.0023947945,
      -0.0009789927,
      -0.013148599,
      -0.002552193,
      0.004878682,
      -0.012450117,
      0.14441165,
      -0.0032013224,
      -0.0020521907,
      -0.0015671145,
      -0.0104105985,
      -0.014197217,
      -0.0003560222,
      0.00006718368,
      0.0022623627,
      -0.0020768412,
      -0.017449493,
      0.015692776,
      -0.036072522,
      0.014086479,
      0.005928588,
      -0.012018996,
      -0.024154127,
      0.0023003337,
      0.0012365215,
      0.018973017,
      -0.0076872827,
      0.010583395,
      -0.01986941,
      0.0061918325,
      -0.008013997,
      -0.019254701,
      0.0076177157,
      -0.0022298303,
      -0.000808055,
      0.0049785376,
      0.01112409,
      -0.010655523,
      -0.00019163117,
      -0.01596852,
      -0.014900149,
      0.015796544,
      -0.07548163,
      -0.0180799,
      -0.021847833,
      -0.0030264491,
      0.024620157,
      -0.0043333154,
      0.019761857,
      -0.016173007,
      -0.0054472564,
      -0.0077990596,
      -0.013116093,
      0.01087216,
      -0.024850037,
      0.011365297,
      -0.0060793706,
      0.0022940657,
      0.012601163,
      0.032226417,
      -0.02136951,
      -0.01036203,
      0.024264675,
      -0.011481228,
      -0.00095944013,
      -0.024509763,
      0.0038196738,
      -0.011900809,
      0.016077098,
      0.0034513932,
      0.001823882,
      -0.002930554,
      0.010396861,
      -0.023558807,
      -0.00020487032,
      0.0023591314,
      -0.035553046,
      -0.017101271,
      0.011694413,
      -0.003887114,
      -0.01127093,
      0.015918551,
      0.010401392,
      -0.0048719677,
      0.03507136,
      -0.010391577,
      0.0069187535,
      0.018499522,
      -0.015631631,
      0.034130402,
      -0.0039090477,
      0.006795961,
      -0.023802357,
      0.011298639,
      -0.028768068,
      0.02630792,
      0.003751899,
      0.02734056,
      0.037889175,
      0.008093868,
      -0.0061361855
    ]
  },
  {
    "id": "genai_cohort_nodejs_07_Introduction_to_Authorization_vtt",
    "content": "Okay, so welcome to one another exciting video in the authentication section. And in this particular video we are going to cover the concept of authorization. So now at this particular point we already know what is authentication. Authentication means that the server knows who are you. That means you are authenticated. And there are two ways of authentication. Number one, there's a session based authentication where you give a session ID or a temporary ID to a user, where the data about that ID is stored on the server, maybe in a database, maybe in your memory. And that is where you let the user authenticate it. And on the other hand you had a stateless version of the authentication that was JSON web tokens where you actually store the information about the user inside the token itself. So that was authentication that whether you are authenticated or not. Does server recognize you? Do server know who are you? That is authentication. Now let's jump onto the concept of authorization. Authorization is basically the next step of the authentication. In order to be authorized to do something, you have to be first of all authenticated. There is no authorization possible without authentication. So first step is something that we have already done. Authorization means if you have access to a particular resource or not. So let's imagine that this is a user, that is U1, okay? And this is a user, let's say U2, okay? Now in on your server, okay, on your server, let's say you have multiple routes, right? You have a lot of data on the back end. Now let's say you want makes a request to get some piece of data. Okay? So let's say that this is basically a data about all the payments. So let's say you were building some financial application and this is the data about all the payments. Okay? So all the payment data lives here. Now technically, if you imagine this thing, payments data is a critical data, right? You don't want to share this particular thing publicly or something, something like that. So now you have to build a mechanism that if you want, hey user one, are you really allowed to access this data? If so, you have to return this data to the user. But if not, see if he does not have that particular access, you can just return return an unauthorized error. So number one thing is that number one, see this U1 user has to be authenticated. That means server knows who the U1 is. Then the next step comes that do you have the permission to access this particular resource? If so, you can return this data. If not, just return an error response. So how can you achieve this particular thing? It's very simple. I mean there are a lot of techniques to implement authorization, but let's cover the simplest one, that is just attach a, role to this user. So let's say if U1 has a role, which is admin, right? Very simple. And you too has a role that is, let's say, simple user. Now if the role is admin, you return this particular data, but if the role is not admin, you are not going to return this data. And what is this role? At the end of the day, this role is nothing but just a value in the database. So in the users table, I can extend that table to have one more entry, I. e. role, where default value can be user, and we can promote special users to be admin. And then we can even store this particular thing in the user's token, right? You have JWT tokens, which are signed tokens. No one can change it. So in the JWT token I can just write role admin, and then I can check that if you are an admin, only and only then you are allowed to access this particular resource. So basically this is how the authorization happens. So this is the basic concept behind the authorization. So what I would like you to do is pause the video right here. Implement. Try to implement this particular thing on your own before jumping onto the next video. Because in the next video I will be coding this particular thing. I'll be refactoring the whole code, but I would like you to give it a try first. So let's meet you in the next particular video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "07 Introduction to Authorization.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/07 Introduction to Authorization.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.018034745,
      0.012068613,
      0.018236157,
      -0.04866474,
      -0.011923616,
      -0.0035983587,
      0.0143369995,
      0.024381692,
      0.006125858,
      -0.0020566352,
      -0.0019046259,
      0.012900166,
      0.002806426,
      0.007850299,
      0.12059887,
      0.00022630028,
      -0.0094327275,
      -0.024230577,
      0.0053905244,
      -0.012784667,
      0.0076015624,
      -0.004758266,
      0.00926636,
      -0.012121433,
      0.0032118158,
      -0.0001290203,
      0.006642052,
      -0.007733485,
      0.024905734,
      -0.014064998,
      -0.0130025605,
      -0.0020277558,
      0.016504189,
      0.03343701,
      0.0009436985,
      0.028680813,
      0.026634831,
      0.021128621,
      -0.03193121,
      0.00128118,
      -0.008994956,
      0.016292775,
      0.0070991246,
      -0.016813772,
      0.004907396,
      -0.009883874,
      0.0029039772,
      -0.021111552,
      0.0050692353,
      -0.0024926742,
      -0.0031353892,
      0.0036443414,
      -0.02924043,
      -0.18830733,
      0.009317253,
      0.0009681932,
      0.0006271326,
      -0.0028282853,
      0.0017429756,
      0.015804721,
      -0.020341335,
      0.016054431,
      -0.015002204,
      0.029990284,
      0.00077254575,
      0.011853798,
      0.029880766,
      0.0005750161,
      -0.002466326,
      -0.015326642,
      0.021284482,
      0.0077420003,
      -0.0057224794,
      -0.009796819,
      -0.018469919,
      -0.016011227,
      0.0013494726,
      -0.028580086,
      -0.017570738,
      0.0134897325,
      -0.019222101,
      -0.013014441,
      -0.017726937,
      -0.017992094,
      -0.0015666571,
      -0.0048045334,
      -0.0010617004,
      -0.014990719,
      -0.004479798,
      -0.00084268744,
      0.00011095919,
      -0.008581143,
      0.012118303,
      0.013489529,
      -0.0050919536,
      0.014082444,
      -0.029768806,
      0.011680142,
      -0.0146783115,
      0.014785465,
      -0.008527755,
      0.029905157,
      -0.033163633,
      0.009559511,
      -0.009112394,
      0.014530306,
      0.008687176,
      -0.0041068047,
      0.009806045,
      -0.011539948,
      0.015623234,
      0.0012841808,
      -0.009078467,
      0.01966813,
      0.0054319003,
      -0.18308473,
      0.030970788,
      -0.00045329428,
      0.019054916,
      0.014683329,
      -0.025888685,
      0.0136191575,
      0.02924214,
      -0.0069032162,
      -0.023137515,
      0.007491884,
      -0.0021053285,
      0.006232293,
      0.024336904,
      0.012897018,
      -0.019822296,
      0.014016541,
      0.01939585,
      0.02370533,
      0.011656681,
      0.021743312,
      0.0000022606525,
      -0.017043687,
      -0.0019610834,
      -0.023205299,
      0.004031783,
      0.03033486,
      -0.021369014,
      0.03097474,
      0.0007372144,
      0.0037484712,
      -0.015677765,
      0.011431365,
      0.0022108061,
      -0.0395748,
      0.044408664,
      -0.025252942,
      -0.0009445844,
      0.022750257,
      0.020460596,
      -0.044597875,
      0.006787,
      0.011441122,
      -0.01226964,
      0.004571376,
      0.0009375742,
      -0.0043713967,
      -0.0040814965,
      0.008963743,
      0.0076690624,
      -0.013241194,
      0.019873274,
      0.0064502046,
      -0.0004008241,
      -0.018810084,
      -0.028427398,
      0.0028760475,
      -0.0107325055,
      0.022450157,
      -0.0052767587,
      0.0118799135,
      -0.008996994,
      -0.009990317,
      0.013858553,
      -0.015933607,
      -0.013935583,
      -0.028698586,
      0.018680843,
      -0.010549933,
      0.02528633,
      -0.009578716,
      -0.019821733,
      0.0079763485,
      0.02111428,
      0.0036139132,
      0.0023268666,
      -0.0034461492,
      -0.006680593,
      0.02330041,
      -0.0005017331,
      -0.007736907,
      -0.0037967332,
      -0.024952032,
      -0.004533306,
      0.026639758,
      0.002949277,
      -0.0001873706,
      -0.0058566513,
      -0.023054196,
      0.0100754015,
      -0.0025829312,
      0.019421795,
      -0.031539056,
      0.0073947497,
      0.030962475,
      0.01397411,
      -0.016887192,
      0.005924221,
      -0.014194397,
      0.0006256395,
      -0.006421108,
      0.011696229,
      0.009749287,
      -0.0075863893,
      -0.021412915,
      -0.007668891,
      -0.0013653855,
      -0.008370666,
      0.0028470445,
      0.021255866,
      0.010792237,
      0.019838648,
      -0.011084805,
      0.017507263,
      -0.0110122925,
      0.01374357,
      -0.0010310898,
      -0.01873653,
      -0.021451766,
      0.0067578885,
      -0.012157156,
      -0.007835292,
      0.014629591,
      0.013858881,
      0.013692022,
      -0.003696246,
      -0.013197872,
      0.002527698,
      0.017648479,
      0.026106996,
      -0.0064714933,
      -0.02350148,
      -0.0025684019,
      0.0025574837,
      -0.0214705,
      0.0074480656,
      -0.0010717458,
      0.0015745069,
      -0.0032934078,
      0.009012077,
      -0.021650048,
      -0.048763383,
      -0.010257657,
      -0.0066630873,
      -0.02074406,
      -0.0074238703,
      -0.019050512,
      -0.019598378,
      0.0021206555,
      0.0017473864,
      -0.01753799,
      0.0072289673,
      0.030683693,
      -0.007707165,
      0.008531916,
      0.0075362097,
      0.0012046433,
      -0.006430827,
      0.0047901915,
      -0.010262554,
      0.019969227,
      -0.08063383,
      -0.001326533,
      0.012830653,
      -0.007326876,
      -0.014088324,
      0.010206026,
      -0.0039779604,
      0.0111942105,
      0.011034498,
      0.030895406,
      0.014344768,
      -0.0031165234,
      0.020169178,
      0.0019748448,
      -0.0073341215,
      0.030261308,
      0.014026429,
      0.0052907118,
      0.009955729,
      -0.029444799,
      0.0015900165,
      -0.0027485199,
      -0.018011983,
      -0.011608958,
      0.0051091975,
      0.019017745,
      -0.00072544446,
      0.014083545,
      0.025089405,
      0.00025625763,
      -0.013506086,
      0.020701062,
      -0.0064065754,
      -0.0041439803,
      -0.01585085,
      0.00019003262,
      0.0006290743,
      -0.012123523,
      -0.01761371,
      -0.0022430725,
      -0.018874345,
      -0.022482239,
      -0.0046210615,
      0.025840871,
      -0.011370693,
      0.018538661,
      0.008407507,
      -0.015804918,
      -0.011746163,
      0.015740877,
      -0.036213446,
      -0.004818203,
      0.010798295,
      -0.011533526,
      -0.015112138,
      -0.020770175,
      -0.004752821,
      0.0073075187,
      0.02658978,
      -0.011769198,
      0.012244426,
      -0.008484983,
      -0.00035697018,
      -0.008296657,
      0.023956751,
      0.009549843,
      0.027165858,
      -0.023024509,
      -0.019040806,
      -0.017262071,
      0.019779323,
      -0.016840126,
      -0.009247475,
      -0.026978385,
      0.019988116,
      0.005874827,
      0.014052559,
      -0.009733395,
      -0.028398076,
      0.02455886,
      0.002645049,
      0.00070210156,
      0.009096874,
      0.016446397,
      0.009896279,
      0.0020387927,
      -0.013535807,
      0.008397185,
      0.0063899513,
      -0.02612631,
      0.020895908,
      0.037744142,
      0.009411412,
      -0.004305496,
      -0.008881752,
      0.0012513975,
      -0.025629882,
      -0.025708904,
      -0.014261512,
      0.0018083495,
      -0.031985898,
      0.0010969542,
      -0.023184368,
      -0.0070598344,
      -0.00015091643,
      0.01883214,
      -0.041464902,
      -0.019854706,
      0.0053757415,
      -0.0041112253,
      0.0027237323,
      0.019770129,
      -0.017157657,
      0.0033387619,
      -0.029390829,
      0.0042623086,
      0.021435501,
      -0.003909407,
      -0.010506649,
      0.0068335007,
      -0.0070536085,
      -0.014771588,
      0.0027282708,
      0.023531776,
      -0.011251809,
      0.008966441,
      -0.03416245,
      0.008714077,
      -0.012927206,
      0.00013810108,
      -0.0053516156,
      -0.014535973,
      -0.005817654,
      -0.011507028,
      -0.025907379,
      -0.020109247,
      0.015835274,
      0.0026174504,
      0.014956207,
      0.017447365,
      0.006392844,
      0.005299319,
      0.014697266,
      -0.009607271,
      0.020276317,
      0.015566833,
      -0.02102568,
      0.00530369,
      0.0011434106,
      -0.009686329,
      -0.0031629722,
      0.0039365077,
      -0.029995615,
      0.00079454243,
      -0.014933554,
      0.018756824,
      0.004982154,
      0.004531839,
      0.00024422922,
      -0.011092663,
      -0.0073882104,
      0.000044736775,
      -0.013962701,
      -0.0032441968,
      0.0051175305,
      0.0035951943,
      -0.008058007,
      0.010504068,
      0.00072940974,
      0.010986215,
      0.009419046,
      -0.019640839,
      -0.04236435,
      0.014574025,
      0.036185816,
      -0.00003823785,
      0.025461188,
      -0.016587999,
      0.01950581,
      0.0106703825,
      0.038968176,
      0.0049563735,
      -0.02602065,
      0.0046053817,
      0.0037324443,
      0.0063004172,
      0.017604325,
      -0.003787252,
      -0.026498098,
      0.0016098405,
      -0.000012483205,
      -0.013666537,
      -0.017453503,
      0.03210898,
      0.0014948839,
      0.024080675,
      -0.005173147,
      0.011752563,
      0.0043937587,
      -0.0014126977,
      -0.015593502,
      -0.0011231852,
      -0.007790216,
      0.0033908186,
      0.023521954,
      -0.01044458,
      -0.036525555,
      -0.014646635,
      0.005217632,
      0.02088329,
      -0.0064184275,
      0.020702766,
      0.00068130693,
      -0.0004327888,
      0.0076915184,
      0.007940724,
      0.009869641,
      0.004285875,
      -0.020614468,
      0.0016755537,
      0.009435475,
      -0.021526676,
      0.0070615616,
      0.0071984287,
      0.0033073032,
      0.012067231,
      -0.015181369,
      0.0069199083,
      0.0061469646,
      -0.014113128,
      -0.0075760153,
      0.0053196386,
      0.0075387536,
      -0.002800304,
      -0.004168747,
      -0.005172365,
      0.000970419,
      -0.011081333,
      0.0120677445,
      -0.000730237,
      0.0039391895,
      0.0075734793,
      0.0012874133,
      -0.011814216,
      0.015161312,
      0.00087066035,
      0.023668356,
      0.027986119,
      -0.0066753305,
      -0.0028876192,
      0.03699843,
      0.010194615,
      -0.021656226,
      -0.021190528,
      0.0037872442,
      0.01603909,
      -0.009428394,
      -0.0021704675,
      -0.018354146,
      0.0060778474,
      0.0068136854,
      -0.0073121553,
      0.001969665,
      0.009108299,
      0.027267203,
      -0.0071146893,
      0.006454638,
      0.0040108957,
      0.018662758,
      -0.1206838,
      -0.025054514,
      -0.015285866,
      0.0010350365,
      -0.013442889,
      0.013268911,
      0.00024094069,
      -0.007868578,
      -0.019074155,
      -0.009092839,
      0.015572688,
      -0.011677878,
      -0.010785665,
      0.012235342,
      0.0055465424,
      -0.023670292,
      0.009439456,
      0.016952043,
      0.013969707,
      -0.023936057,
      0.030685017,
      -0.006366382,
      0.007620907,
      -0.0054463437,
      0.0048477366,
      0.0037807908,
      0.018344808,
      0.0008108997,
      0.012762107,
      -0.01327159,
      -0.02469539,
      0.0026768409,
      0.0024516843,
      -0.0022987458,
      0.0137960175,
      0.00025346788,
      -0.01282021,
      -0.028759506,
      0.017194593,
      0.008744425,
      0.01642931,
      -0.013553081,
      0.0049326136,
      -0.0054591876,
      0.008128131,
      0.013002121,
      0.011314565,
      -0.016677853,
      0.003158746,
      0.034616943,
      -0.053720694,
      -0.017245583,
      -0.008312948,
      -0.017729845,
      -0.0015593611,
      0.006218836,
      0.005114532,
      -0.006408342,
      -0.009932763,
      -0.026549112,
      0.006057566,
      0.012522815,
      0.012984013,
      0.032600496,
      0.004015646,
      0.005968485,
      0.025521107,
      -0.0048575737,
      -0.0055258623,
      0.0020486224,
      -0.00801755,
      0.008171499,
      -0.01770966,
      0.01666996,
      0.017469218,
      0.006030648,
      -0.0047210646,
      -0.0066364524,
      -0.023675192,
      0.009753968,
      -0.013444579,
      0.018446159,
      -0.07861757,
      -0.009322166,
      -0.008047382,
      -0.0026789345,
      0.01429488,
      0.018643346,
      -0.00027813338,
      0.020861384,
      0.00018053141,
      -0.0011187579,
      -0.01788995,
      -0.014837713,
      -0.0020911784,
      -0.026560146,
      -0.031240284,
      0.022283474,
      -0.0017044909,
      -0.03340705,
      -0.027787415,
      -0.0035277195,
      -0.0010170334,
      0.011414945,
      -0.0029237357,
      -0.013075318,
      0.018391335,
      0.021153256,
      -0.020250818,
      0.003979936,
      0.013946125,
      0.010836309,
      0.008026958,
      -0.1400847,
      -0.030964632,
      0.0039992444,
      0.023008157,
      -0.00047502227,
      -0.006308295,
      -0.0002948521,
      -0.0058925743,
      0.008122917,
      -0.000029049404,
      0.00597796,
      -0.014348943,
      -0.009001918,
      0.008495618,
      -0.011423356,
      0.12597413,
      0.00045071894,
      0.018653821,
      0.0020190652,
      0.000172498,
      -0.023426944,
      -0.007907086,
      -0.007444919,
      0.011587938,
      0.017203402,
      -0.021796143,
      0.006455929,
      -0.029951284,
      0.027290363,
      -0.002956075,
      -0.009128208,
      -0.023488479,
      -0.014438575,
      0.015601347,
      0.025996294,
      -0.012437452,
      0.004120613,
      0.005566957,
      -0.0025768916,
      -0.0033331113,
      -0.014586834,
      -0.0034720255,
      0.0036320032,
      0.0066609294,
      0.011290225,
      -0.0037054305,
      -0.0025170166,
      0.0059443386,
      -0.001281404,
      0.004724432,
      0.018076042,
      -0.059331838,
      -0.020048592,
      -0.022458063,
      -0.0092990585,
      0.031804852,
      0.002277355,
      0.018788982,
      -0.022606008,
      -0.018065544,
      0.0015003151,
      -0.02447959,
      -0.0015087029,
      -0.019431228,
      0.017437022,
      -0.0122169405,
      0.004659939,
      0.026703678,
      0.024459999,
      -0.030267622,
      -0.009834025,
      0.01869057,
      0.007693058,
      0.0046755006,
      -0.01826765,
      -0.015198373,
      -0.008765698,
      0.010048715,
      0.003980109,
      -0.0076599577,
      0.0058455095,
      0.011322236,
      -0.022464402,
      -0.0012418993,
      0.0028704044,
      -0.009653209,
      -0.019785255,
      0.019152595,
      -0.002597004,
      -0.00424358,
      -0.0056465045,
      0.0017669187,
      -0.0076237046,
      0.051301118,
      0.005213862,
      0.013995613,
      -0.00025997605,
      -0.0058548073,
      0.02136739,
      0.014128644,
      0.021351406,
      -0.0034747166,
      0.016963532,
      -0.029623408,
      0.030767556,
      0.0019216262,
      0.034077443,
      0.029866993,
      -0.0066006817,
      -0.0142745515
    ]
  },
  {
    "id": "genai_cohort_nodejs_08_Adding_Support_for_Roles_in_our_express_app_vtt",
    "content": "All right, So I hope that in the previous video you have already given some try in implementing authorization. But just in case you were not able to, don't worry, here we are to implement the authorization. So what I'm going to do is first things first, let's say we don't have any concept of authorization, right? I am going to create a special route, let's say admin routes js as the name says. This particular routes is going to contain some critical routes which are only and only be allowed to an admin. So what I can do is first of all I'll just borrow some code that is import express from Express. That is nice. So I'm just importing the express and let me just create a new router that is this particular stuff and then I can just say export default. Okay, Export default the router. So imagine all the routes that we are going to add here is only and only be restricted to the admin only. Okay, so let's create a router, A, get route Users. Let's say admin wants to see all the users that are available in our database. Technically it's an internal information. You don't want that any person can see all the information about the available users on the platform. But yes, admin can see all the users. So let's say this is one route that I want to build. So let's just quickly code this particular route. So I'll just create an asynchronous function here. Okay. And I'll just say request response. And let me just zoom in the code little bit more so that you can see it more clearly. So how to implement this particular stuff is first of all let's import DB from DB js file. Okay, nice. And let's also import something from you know, one directory up. Then we can go into the DB and then we can go into the schema js file. So what do you want to import here? I want to import the users table. Nice. So here we have the db oh by the way, I imported it wrongly. I should have done DB slash index js Yes. Now it is basically the database. You can see it's a database file. Nice. So now what I want to basically do here is my router is here. So how to query all the users? I can just say const Users equals to. I can just put an await and then I can just say DB dot select. Okay, from which table do you want to select? I want to select from users table and that's it right this basically means select all the users. Then I can just say return a, response. JSON saying users. That's it. So this users is what? Basically an array of users. And of course you don't want to send password, right? You don't want to send the password and salt on the front end. So let's add, that, hey, I want to send an ID that is user stable ID. I want to send the name that is users table. name and I want to send the email that is user stable email. That's it. That's it. I want to send. Now let me just quickly spin up my postman, okay. And test this particular route if this is working or not. Right now you can see we have not done any authentication. No authorization. Nothing is there. Right? So here is my postman. Right? So what I'm going to do is, by the way, we forgot to register this particular router. So we have to go into our index js file. Let's import this routes, right? So I can just say import, admin router from dot slash routes admin router js. So what I could basically do, I can just say if anything starts with admin, you please use the admin router. That's it. And by the way, I have just noticed we have a lot of unused imports, so it's okay to remove them. Right? Nice. So let me just start my server up and running. So PNPM dev starts my server at localhost Great. So if I say admin slash users, I will clear my token. See? No authentication. Okay, let's clear the body, no body, no header and send. You can see I'm able to get all the users. So as of now, we only have one user in our database. Correct. Technically, this is wrong. First thing we should implement is that the user must be authenticated. Correct user must be authenticated. Now, one way to do the authentication is I can just say that if there is no request dot user. Right? If you remember from the previous classes, we have a middleware function. If the user exists, we are populating this request user. So if there is no request user, that means the user is logged out. You can just say return a, response. status code of and then saying. JSON. okay. And error that. Oh, sorry, error. Please don't import this error from here and you can just send an error that you must be authenticated to access this. So this is one way of controlling the authentication. Right? So now if you send, you can see you Must be authenticated. But now if I try to send the bearer token along, okay, I have to generate, I have to log in first. So let me just do a quick login. This is my token. Let me just copy this token and I'm just going to replace this token and send. Now you can see the authentication is working. Now. Guys, tell me one thing, is this a correct way to do an authentication? Of course not, right? Technically I don't want to repeat this code. If you see we are repeating this code at couple of places, right? We are repeating this particular code at couple of places. So you should not repeat a code. Rather see what I could do. I can create a folder of middlewares, right? And I can create a middleware of auth middleware js. What I can basically do in this auth middleware js is I can create a middleware number one. I also want to first of all move this middleware to this file, right? To make it more clean. So let's create a middleware here that is const, authentication middleware. Let's name it as authentication middleware. So this middleware does what? It's just an asynchronous function. Okay, let's say it's an async function. And what it basically has, it, it has access to request response. And next. Now what I can do is I can safely. First of all, let's have a try catch. See, I'm just going to type, I'm just going to type here. So what we are basically doing here is try catch. If there is any error, just call the next function. Okay, that's it. But if it is not what you do, you try to read the headers. Okay, I'm just copying one by one. Okay, Try to read the headers. Try to. If the header does not exist, that means, okay, the user is not authenticated, he's not sending you any kind of headers. Just call the next function next, you know, next router in the middleware stack. Okay. But if it does not start with the bearer, of course it's an error. So you can just throw an error response. Nice. Cool. Okay, then you got the token. So I'll just copy here and I'll just say, hey, here is the token. Very nice. Then you try to decode the token. Right? Right. So you want to make sure that this token is generated by you. So you do a, verify. But don't forget to import jwt. So import JWT from JSON web token. Nice. And if you got the decoded you just say request user is equals to decoded and call the next function. Very nice, very nice. Okay, and just export this function from here. Now what you can basically do is instead of this logic, I can say, hey, I want to import something from dot slash middlewares slash, you know, auth middleware. And you can just import the authentication middleware. Now instead of doing all this particular stuff here, I can just make it say app. Use the authentication middleware. That is it. Right? Let's make sure if everything is working, you can see everything is working. Right? I'm still logged in. And if I say no, you can see I'm logged out. If I say bearer token, I am logged in. Very nice. Now what I can do is along with this I can create one more middleware. I can just say export const Ensure authenticated. Now basically what I'm trying to do here is this is again a function. Okay, let's say it's an again async function which has access to request response. And next, this middleware ensures that you have to be logged in. Okay, that is very simple. If no request user, this is going to say return response status, sorry, response status of JSON. And I can just say an error that is you must be authenticated. But if it is not the case, I can just call the next function. So this is a very simple logic which makes sure that the user is authenticated. So that means to use this particular middleware, what I could basically do is I can go into this user route, correct? And what I can do, I can basically import something from middleware auth middleware and I can try to import the ensure authenticated. And just by putting this thing here. Now this particular function will only run if user exists. So now I can safely remove this nice similar. I can just put it here, ensure authenticated. And I can just remove this logic. Because technically this function right here, which I am highlighting will only run if this middleware calls the next function. This middleware will call the next function only if request user exists. Nice. Right, so ensure authenticated basically can be even used here. So instead of doing this thing, I can say import something from dot dot slash middlewares auth middleware import ensure authenticated. Put ensure authenticated as a middleware on the route level and remove this. That's it. Let's test it out. Send. Is it working really nice. No, auth send. You can see it's not working. And if I say bearer token and Send, you can see. Nice. Cool. Now, similar to this, similar to this, let's start adding the authorization. Correct. So what is authorization? Technically what I could do is I can add a new field here. Okay, that is a role. Now role can be basically a string. Role can be an enum. So it is basically what I would like to do is I would like to create an enum. So pgenum. So let's say export const User role. Enum. Okay, Equals to pgenum. Let's call this enum as user, underscore role. Okay. And values can be either a user or the values can be either an admin. Let's say these are the only two available values. So I can say that, hey, you are basically a, enum. Okay, that's great. And you are not nullable. And your default value is what? Your default value is basically user. Nice. So this basically adds a role property to the user. So let me just do one thing. Let me just pin up a studio first. PNPM DB Studio. Okay, DB Studio enter. My DB Studio is up and running on this particular link. So let me just open the link. Not, user only num. I have to copy this. So I copied the wrong thing and paste it here. Now let's wait for a while so you can see in the users. Right now there is no role. Right. So what I'm going to do, create a new terminal PNPM DB push. So this has applied the changes. Now if I go back and I do a refresh now, you should be able to see a role in the users. So if I just say users, where can I see? Okay, let me just remove this. Can I see the role? Yes. So you can see that the role is user. Right. Now what I could do is. That is good. The role is user. Very nice. Technically, when you log in, okay, when you log in, what I should do is I should also put this role in your token. So when I'm trying to do a login, I should also query for the role that is user table dot role. Okay? Now in the payload I can also put a role that is existing user dot role. That's it. Great. So now the role is also in the payload. That means if I log in once again. Now this is my new token. I copy this particular token and I go on to JWT IO website. Okay, Just for the debugging purpose and I paste it here. Now you can see this is what my token payload looks like. You can see I have id, I have email I have name role. Now technically, this role is very interesting, right? Based on this role, what I can do, I can create one more middleware that is restricted, say restrict to admin. Okay? Or I can say restrict to role, which is an async function. Okay? What this function basically takes is a role. You have to give me a role which can be either admin or this can be either user. Correct? So this can be either admin or user. So it's basically a role. Okay? Now see, what I can do is I can return a new function from here which has request a response and a next correct. There is no need to be async. This is okay, now see what I can do. We can basically assume the user is already authenticated. I can just say if request user. role is not equals to this particular role. Correct. In this case, I can just say return response dot status code. Okay? That is 4, of course, dot JSON error. You are not authorized, okay? To access this resource. Very nice. Else, sorry, resource. Okay, very nice. But if, if the role exists, you can just say the return the next function. That is it. Now see what I could do. It's basically a closure function. If I call this function with role as admin, this returns me a middleware function, right? This is how I have designed it. And then this middleware function can be used. So it's a closure function. So that means going on to the admin routes. Now I can import an authentic. Sorry, the restrictor role. Now technically what I can do is I can just say construct, admin restrict. Okay? Restrict middleware. Okay. Equals to restrict to role admin. Nice. And then I can also change the admin restrict middleware. Now this particular route is only and only restricted to the admins. Let's give it a try. Okay, so if I copy this particular token, I have a new token, paste it and send. You are not authorized. You are not authorized. Why? Because my role is user. Correct. If I go in my database, I change my role to admin. I have to now log out and log in. Basically I have to generate a new token for myself. Right? Because, you might have heard that whenever there is a problem, often the admin asks you to hey, can you please do a logout and login so that your token is refreshed. Now my token contains the role as admin. Nice. Now what I can do. Now if I go here, I replace my token and I do a send. Now you can see I'm able to access this resource, right? So this is basically kind of a role based access control using the middleware. So congratulations. Yes, it was that simple to implement. Okay, so you can have multiple roles, not only user and admin, you can have moderator, you can have multiple roles. Then you can just create a middleware, a utility function which checks for that role and you can just chain it. Now technically I don't want to put it here right. If you see all the roles here are going to be restricted to admin. So what I can do is I can put it on a router level that is router use number one is ensure authenticated and router use admin this thing. Now I don't have to put on every route. So now every route that I create in this particular file will use these two middlewares because these middlewares are applied on the route level. So going back test your implementation, everything is working fine. Nice.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "08 Adding Support for Roles in our express app.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/08 Adding Support for Roles in our express app.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.013057203,
      0.011770297,
      0.015989786,
      -0.06073778,
      -0.008717462,
      -0.006243006,
      0.02397048,
      0.028791908,
      0.005893479,
      -0.011648685,
      -0.0064531667,
      -0.0026604473,
      0.018811261,
      0.014885598,
      0.13081986,
      0.0030525925,
      -0.0058781076,
      -0.0017410984,
      0.0018333051,
      -0.03240795,
      0.011872668,
      -0.011799515,
      0.024517333,
      0.006954477,
      0.0035072844,
      0.0013917959,
      0.010827947,
      -0.0003766689,
      0.030872023,
      -0.019773018,
      -0.015691258,
      0.005161625,
      0.008189841,
      0.023886474,
      -0.00024069035,
      0.030531023,
      0.03105619,
      0.017484054,
      -0.030849928,
      0.0051149013,
      -0.01337118,
      0.0091815265,
      -0.008631895,
      -0.003462353,
      0.005088725,
      -0.008819328,
      -0.0032489817,
      -0.027942995,
      -0.016046394,
      0.013924968,
      -0.00746511,
      -0.0028689927,
      -0.040212344,
      -0.17081296,
      -0.0041057523,
      0.0014824473,
      -0.00030299285,
      -0.008605135,
      0.020650972,
      0.0080483435,
      -0.020716095,
      0.013367019,
      -0.030577471,
      0.017660674,
      -0.021616062,
      0.0040277163,
      0.004052234,
      -0.0020781097,
      0.0011783914,
      -0.012751906,
      0.015077677,
      0.02800588,
      -0.019684842,
      -0.016372051,
      -0.009257234,
      -0.0066432673,
      0.0053417217,
      -0.027622439,
      -0.015054698,
      0.00019674943,
      -0.0007854941,
      -0.009513661,
      -0.009152668,
      -0.008265185,
      -0.0004737294,
      -0.0069529894,
      0.0007621234,
      -0.024325056,
      -0.0064824712,
      0.009692947,
      0.0031347468,
      0.011742753,
      -0.0045215264,
      -0.0019519067,
      -0.0033436774,
      0.0033191098,
      -0.019164603,
      0.01649909,
      -0.00984371,
      -0.00028585183,
      -0.00025874615,
      0.032714725,
      -0.019810455,
      0.023369066,
      0.010323699,
      0.02079718,
      -0.014574072,
      -0.0044481256,
      0.018061304,
      -0.013290292,
      -0.0039162515,
      -0.0015336679,
      0.012782664,
      0.01546085,
      0.013334031,
      -0.17364165,
      0.022052957,
      -0.009452336,
      0.015608717,
      0.020075036,
      -0.01715432,
      0.024761809,
      0.023079036,
      -0.011443058,
      -0.022125913,
      0.013330087,
      -0.008102642,
      0.001521228,
      0.008615663,
      0.009021129,
      -0.026475184,
      0.003026862,
      0.021168556,
      0.016930817,
      0.00591781,
      0.025976896,
      0.016052319,
      -0.00030187613,
      0.0007406998,
      -0.024661444,
      0.008263407,
      0.023577254,
      -0.011640935,
      0.0384093,
      0.013896167,
      -0.011542696,
      -0.012055454,
      0.018138388,
      0.0064879823,
      -0.034649726,
      0.035438266,
      -0.034211304,
      0.01017006,
      0.005861391,
      0.028455418,
      -0.057532497,
      0.022547502,
      0.0024554764,
      -0.0046222117,
      0.010165956,
      -0.005033985,
      0.008114988,
      -0.008657376,
      0.010325856,
      0.00069038454,
      -0.002325643,
      0.011172204,
      0.014118512,
      0.00536484,
      0.007039594,
      -0.029821968,
      -0.0022885941,
      -0.008548288,
      0.011981035,
      -0.009488915,
      -0.0037394369,
      -0.0037364115,
      -0.007122124,
      0.0064382907,
      -0.016584352,
      -0.015648289,
      -0.02248871,
      0.026524544,
      -0.007465367,
      0.021784576,
      -0.0062249196,
      -0.018681737,
      0.013936626,
      0.012213646,
      -0.009706323,
      0.00575516,
      -0.007955325,
      -0.008601115,
      -0.0018010847,
      0.013056074,
      0.0002738074,
      -0.0037445521,
      -0.021829206,
      0.002942668,
      0.02362772,
      0.007959424,
      -0.0036157803,
      -0.010709953,
      -0.012866622,
      -0.003016149,
      -0.0003091223,
      0.028247034,
      -0.025146702,
      0.0182479,
      0.022875205,
      -0.005715753,
      -0.008534311,
      0.00033554752,
      -0.015654698,
      -0.0006656636,
      -0.016698232,
      0.017750382,
      0.014842646,
      -0.0079255765,
      -0.017119544,
      -0.008121128,
      0.00845639,
      0.01119823,
      0.022357082,
      0.019840825,
      0.011024492,
      0.022320863,
      -0.008693965,
      0.010103796,
      -0.0009011929,
      0.02433657,
      0.0034515443,
      -0.012995075,
      -0.01562604,
      0.016877824,
      -0.014508014,
      -0.012833875,
      0.02329853,
      0.012549123,
      0.018159384,
      0.0018108186,
      -0.015050753,
      0.0045947214,
      0.0038613258,
      0.029936155,
      -0.0043283748,
      -0.03371624,
      -0.004930883,
      0.00676002,
      -0.02201449,
      -0.0059150173,
      -0.0016221401,
      0.0025314242,
      0.0013888386,
      -0.007754222,
      -0.019036371,
      -0.037720524,
      -0.0057528913,
      0.005866521,
      -0.013356815,
      -0.018274462,
      -0.018528637,
      -0.012665286,
      0.0060983184,
      0.00768488,
      -0.036149684,
      0.002417638,
      0.02277578,
      -0.0054734824,
      0.0023065372,
      0.0143682,
      0.0016044506,
      0.0027324026,
      0.008641639,
      -0.0059373328,
      0.011368478,
      -0.08905022,
      -0.0055214395,
      0.005591857,
      -0.029066456,
      -0.018311711,
      0.0059215007,
      -0.009657354,
      0.007883358,
      0.0033429866,
      0.013321206,
      0.0053230333,
      -0.00915184,
      0.01020368,
      -0.00069915573,
      -0.0092335725,
      0.024196692,
      0.008654392,
      0.0009473747,
      0.0036822238,
      -0.021211788,
      -0.0028588336,
      -0.0019215654,
      -0.013823058,
      0.007033387,
      0.0108221015,
      0.01913662,
      -0.016825378,
      0.021700865,
      0.01939554,
      0.013427113,
      0.0071176277,
      0.024235776,
      -0.01234504,
      -0.012619525,
      -0.0136429705,
      0.0051941206,
      0.018536022,
      -0.008398287,
      0.015684685,
      -0.0065427567,
      -0.023317434,
      -0.023623228,
      -0.004781787,
      0.014110869,
      -0.013622017,
      0.0015077721,
      0.00188848,
      -0.014119417,
      -0.0028430629,
      0.010077677,
      -0.03461195,
      0.0073111732,
      0.01678678,
      -0.026868502,
      0.008149307,
      -0.019376706,
      0.013505364,
      0.0076126945,
      0.026383733,
      -0.018595865,
      0.009916811,
      -0.013627661,
      0.0010805008,
      -0.007622654,
      0.031840123,
      0.022562405,
      0.0042042616,
      -0.026112944,
      -0.0199406,
      -0.030298587,
      0.027471283,
      -0.02485704,
      -0.022723231,
      -0.03316336,
      0.014171391,
      0.016895438,
      0.028827436,
      -0.0011119376,
      -0.041651458,
      0.013583777,
      0.008306373,
      -0.0023085454,
      0.012581745,
      0.02994856,
      0.0110216765,
      -0.0013300515,
      -0.0055774124,
      0.013004155,
      0.004473621,
      -0.030561678,
      0.031470325,
      0.033514548,
      0.0090633165,
      -0.0043379,
      -0.006795702,
      0.0035819628,
      -0.022793196,
      -0.02394706,
      -0.013326376,
      0.021462917,
      -0.02885175,
      0.010814877,
      -0.030484851,
      -0.013029002,
      0.009974225,
      0.015486772,
      -0.017728804,
      -0.016680429,
      0.0014630326,
      -0.008879863,
      0.004825556,
      0.017461007,
      -0.010403617,
      0.0012160091,
      -0.033883743,
      0.018387353,
      0.016039163,
      0.0014970129,
      -0.018401476,
      0.005488628,
      -0.016347026,
      -0.007666847,
      0.010916604,
      0.024674198,
      -0.018562013,
      0.008586065,
      -0.028886398,
      0.004643699,
      0.00000423345,
      -0.011660273,
      -0.000110794615,
      -0.003438673,
      -0.014615032,
      -0.012561918,
      -0.018973218,
      -0.024050748,
      0.014505583,
      -0.014926204,
      0.013475891,
      0.025007943,
      0.008502025,
      0.00072891987,
      0.014182079,
      0.005483846,
      0.009308381,
      0.014691233,
      -0.022677276,
      0.0057397527,
      0.0026937008,
      -0.0049438947,
      0.0030370078,
      -0.004012084,
      -0.016998004,
      -0.01080545,
      0.0017018383,
      0.020378657,
      0.0051997756,
      -0.0051960982,
      -0.005258091,
      -0.0072863097,
      -0.025309833,
      0.010416351,
      -0.017859928,
      -0.009701526,
      -0.0020118875,
      0.015370209,
      -0.0003979579,
      -0.0045059235,
      0.006240191,
      -0.009835358,
      -0.00082794705,
      -0.019014725,
      -0.03583854,
      0.023758836,
      0.019104373,
      -0.0053183152,
      0.016452232,
      -0.01232227,
      0.01479198,
      0.002768201,
      0.028952416,
      0.0026422145,
      -0.01183625,
      -0.00060075475,
      -0.005228759,
      -0.0038332553,
      0.012985977,
      -0.008863495,
      -0.034353834,
      0.00074295414,
      -0.002628765,
      -0.007408582,
      -0.012232192,
      0.03506329,
      0.017338138,
      0.024566757,
      0.008619537,
      0.018736564,
      0.0029509373,
      -0.008581671,
      -0.013230862,
      -0.006112662,
      -0.008452896,
      0.01590278,
      0.021216156,
      -0.006177501,
      -0.027402708,
      -0.004802055,
      -0.007032535,
      0.025621375,
      -0.00892253,
      0.022791034,
      -0.00008680888,
      -0.0049062464,
      0.014114862,
      0.01480688,
      0.003794422,
      0.012718974,
      -0.037470657,
      -0.002099781,
      0.021127185,
      -0.014527719,
      -0.0108589865,
      -0.005130724,
      0.008670471,
      0.012003016,
      -0.0262723,
      0.008690091,
      0.0105324555,
      -0.027626857,
      -0.002880192,
      -0.0060412292,
      0.024218349,
      0.016448086,
      -0.004873011,
      -0.010504483,
      0.012184254,
      -0.014198402,
      0.015148702,
      -0.0034382672,
      0.00359597,
      -0.0056095324,
      0.004440991,
      -0.0050186613,
      0.011795935,
      0.0006633437,
      0.024289956,
      0.014471455,
      -0.0027862703,
      -0.0045573213,
      0.03207928,
      0.013942704,
      -0.008791143,
      -0.017003749,
      -0.0034851655,
      0.02831231,
      -0.0099633485,
      0.0017708101,
      -0.01458413,
      0.006382601,
      -0.00796492,
      -0.006712247,
      0.013472837,
      0.013132496,
      0.022701567,
      -0.016636336,
      0.0025183258,
      -0.004142083,
      0.025013614,
      -0.12615353,
      -0.004007596,
      -0.024429785,
      -0.022288887,
      -0.009315678,
      0.0051230853,
      0.0072255665,
      -0.011378888,
      -0.030491225,
      -0.004486162,
      0.012151312,
      -0.014658122,
      0.00079831784,
      0.0024883482,
      0.0017680903,
      -0.01558853,
      0.0182994,
      0.009048131,
      0.024563352,
      -0.022131214,
      0.0141369,
      -0.0033530225,
      0.0115468465,
      -0.0028550732,
      0.004900197,
      0.010524888,
      0.0075720744,
      -0.0191408,
      0.012772273,
      -0.005967998,
      -0.024513526,
      -0.0025098124,
      -0.009472548,
      0.009837276,
      0.010271062,
      0.0066060782,
      -0.014658863,
      -0.016789442,
      0.015559372,
      0.01041357,
      0.017138151,
      -0.010528602,
      0.02316808,
      -0.013857695,
      0.0020337696,
      0.016143268,
      0.017320646,
      -0.0044504055,
      0.014104152,
      0.05173517,
      -0.03938771,
      -0.013416872,
      -0.010293381,
      -0.0091753015,
      -0.0026489133,
      0.0071389535,
      -0.002252477,
      -0.007992732,
      -0.009892413,
      -0.011322155,
      0.0072417622,
      0.0030382392,
      -0.0020510906,
      0.025667585,
      -0.011194675,
      0.0041460744,
      0.010112123,
      -0.0042535914,
      -0.009184839,
      0.0017531074,
      -0.000809766,
      0.0013556585,
      0.0051607634,
      0.005512599,
      0.0034424588,
      0.0015082723,
      -0.0077327644,
      0.008836167,
      -0.023183176,
      0.001760456,
      -0.019992726,
      0.009465018,
      -0.0735468,
      -0.008162731,
      -0.011865524,
      0.0041595316,
      -0.0007805452,
      0.010515782,
      -0.0010280212,
      0.023892513,
      0.004728484,
      -0.0019536503,
      -0.012591148,
      -0.018895632,
      -0.0027128162,
      -0.031694785,
      -0.018953271,
      0.015162194,
      0.009812093,
      -0.03530587,
      -0.020425415,
      0.0023488093,
      -0.0043446375,
      0.0075435033,
      -0.011783287,
      -0.010405286,
      0.018724564,
      0.018050918,
      -0.027254278,
      0.009764323,
      -0.004674569,
      -0.006072934,
      0.0047529093,
      -0.14850713,
      -0.026817966,
      0.015148439,
      0.017536901,
      -0.006093741,
      0.0008372444,
      -0.0071633696,
      -0.012108355,
      -0.008032714,
      -0.011944827,
      0.009715841,
      -0.021021254,
      -0.005821889,
      0.0030432765,
      -0.0128369,
      0.12977159,
      -0.001138249,
      0.01026519,
      0.0024394048,
      -0.006850042,
      -0.008862928,
      0.0024918017,
      -0.0013365395,
      -0.0013825753,
      0.017332515,
      -0.02209533,
      0.014572179,
      -0.03137891,
      0.017835546,
      -0.0026172476,
      -0.00897529,
      -0.025774855,
      -0.010445214,
      0.016394492,
      0.020922959,
      -0.018615397,
      0.009193432,
      -0.008130834,
      -0.008247625,
      -0.0056553786,
      -0.016519785,
      0.0028876588,
      0.005290405,
      0.010786131,
      0.010331453,
      0.012917185,
      -0.0009795905,
      0.009485138,
      -0.003713556,
      0.00089062034,
      0.0055281566,
      -0.06338999,
      -0.016706834,
      -0.015112817,
      -0.02381753,
      0.034983933,
      0.015064425,
      0.015225054,
      -0.027264778,
      -0.010290994,
      0.0027839893,
      -0.0216692,
      0.007251591,
      -0.022771921,
      0.015734555,
      -0.010465303,
      0.010184631,
      0.024821829,
      0.027023371,
      -0.022702249,
      0.004504768,
      0.023765603,
      -0.000025898244,
      0.0090765795,
      -0.023973688,
      -0.0076881303,
      -0.0060711303,
      0.013943112,
      0.0032242863,
      -0.013185522,
      0.009981455,
      0.015116866,
      -0.0035997937,
      -0.0126595255,
      0.011151362,
      -0.018512333,
      -0.023899673,
      0.003778447,
      0.0015236258,
      -0.005206322,
      0.006197005,
      0.003920243,
      -0.017467575,
      0.05040408,
      -0.0008654025,
      0.0139430715,
      0.0069045043,
      0.002940957,
      0.033083916,
      0.015470687,
      0.0046603302,
      -0.022783741,
      0.0105267,
      -0.035531867,
      0.026156858,
      0.008012864,
      0.024497705,
      0.021633722,
      0.0009432284,
      -0.020250054
    ]
  },
  {
    "id": "genai_cohort_nodejs_01_node_introduction_vtt",
    "content": "Hey everyone and welcome to an exciting new course on Node js. In this particular course we are going to learn Node js that what is Node js and how you can build web servers and a lot of cool stuff with Node js. As a quick introduction, my name is Piyush Kirk and I am going to be your instructor throughout this course. I'm a full stack developer and a YouTuber and I have built and created a lot of content on my YouTube channel as well. So this particular course on Node js is actually very close to my heart. So I have been working with Node js for over, I guess years, around years and I have built a lot of cool stuff around it and we are going to discuss that how you can use Node js. And this is going to be an absolute beginner to intermediate course. The only prerequisite for this particular course is if you know JavaScript. Okay? So you should know basics of JavaScript because ultimately we are going to code a lot of things in JavaScript, so only that is the prerequisite. Rest everything, each and everything will be taught in this particular class. So in this particular course we are going to cover like from the absolute basics like what is Node js, how Node js was built and how Node js internally works all the way to integrating Postgres in our, Node js application and building RESTful APIs along with authentication, JWT sessions, cookies and a lot of more stuff. So I welcome you again to this premium Node js course. And with that let's start our very first lecture on what is Node js? So what is Node js? Right? So whenever we talk about or whenever I ask my learners that, hey, can you tell me what is Node js? I get few answers like, hey, it's a framework, or some people say it's a library. So I'm sure that you are also confused that if it is a framework or a library. So let's understand that what exactly is Node js? Now before understanding what is Node js, let's understand this js part. js stands for JavaScript. Do you even know that what is JavaScript? Let's try to understand this JavaScript thing. So let's say that you can see that right now I have a browser here. And on this particular browser I have opened my personal portfolio website that is on puresha. dev now this browser can only understand three languages, right? This browser can only understand HTML, CSS and JavaScript. HTML that provides the basic layout, basic structure to this particular website, CSS is for the styling part and JavaScript is for the functionality part. Now tell me one thing, is there any other language that a browser can understand? Not really. At least not at the time of recording this video. So these are the only three languages which builds whole Internet, which builds whole websites. Okay, now here, one interesting part is that there is something known as JavaScript engine inside the browser. Let me show you one thing. For example, if I open my browser right here, so you can see that I have a whiteboard open and it's a browser. And let's say I just open any website that is like google. com, right? I hope you know what is google. com a huge shout out to google. com amazing search engine. So if I go into the console, right, you can see I'm opening my console. In this particular console I can write any valid JavaScript code. For example, if I say two plus two, I'm getting four. If I say console log and I say hello, what you will notice is that yes, I am able to run this code without any error, without any issue and I'm getting the hello as console log. How am I able to run this GS code inside the console? Because when you download this browser, right now I'm using a Chrome browser. When you download this browser, a js engine is automatically shipped along. So every browser, whichever you download has something known as JavaScript engine inside them. With this JavaScript engine, your browser is able to compile and execute JavaScript code. If your browser does not have this JavaScript engine, there is no way to run a JavaScript code. So repeating my question again, how am I able to run this code here? Because I'm using a Chrome and chrome has a JavaScript engine. If this JavaScript engine was not there, this, there is no chance that this code is going to execute right now with that, now we have a knowledge that, okay, there are three languages of a browser and JavaScript engine is the one that is responsible for running the JavaScript. Now JavaScript, due to this JavaScript engine which is directly embedded into a browser, there is one limitation. The limitation is that can you run JavaScript outside the browser? I'm asking you that, can you guys run JavaScript outside the browser? The answer is no. Reason for that is because JavaScript engine is embedded into the browsers, it is inside the browser. So because on my system I cannot have this GS engine thing. There is no that I can run JavaScript outside the browser. And that's even fine. That's fine because when JavaScript was written, when JavaScript was developed, it was developed for the browsers, right? The whole purpose of JavaScript was to provide the interactivity to browsers. And that is where GS Engine was born and browsers were given the js engine, right? So it's a limitation, but that's a required thing, right? Now every browser, like There are various JavaScript engines. For example, there is this V8 engine which Chrome use. There is this Spider Monkey which is by Firefox, and there is this Apple WebKit engine which is used by Safari. So all the browsers have their own JavaScript engine. And V8 by Chrome, Spider Monkey by Firefox, and this Apple WebKit. And there is no need to remember them. Now interesting part starts here. Out of these JavaScript engines out there, this V8 engine which Chrome uses is an open source one. What do I mean by open source? Open source basically means the code is publicly available. The code of this v8 engine is publicly available on the GitHub now, because this v8 engine which is inside the Chrome, this, this Chrome has V8 engine which is open source. You know this scientist, this Rian D, his name is Rihan. What he did, he did something very crazy. You know what he did? He took this open source engine, okay, open source V8 engine, and embedded this V8 engine into a C program. Now what I did took a V8 engine, take a C program, take this V8 engine and embed inside a C program. Now you tell me, can you run C outside the browser? Of course. C is a machine language, right? It has the capability to talk to the machine, to talk to your hardware, to talk to your operating system. Now, when you embed this V8 engine and into a C program, V8 engine is capable of executing JavaScript. C can run outside the browser. With this particular thing, you were able to execute JavaScript outside the browser. And this project, this V8, engine embedded into the C, this project was named as Node js. Okay? So if someone asks you, what is node js? Node js is basically a project made by this crazy scientist ran that is basically the open source V8 engine of Chrome embedded into a C program. So, if I go back to my previous question that I asked you that, what is node js? Is it a framework? No. Is it a library? No. What is Node js then? Right? So Node js is nothing but just a runtime environment. So Node js, it's a C program with V8 engine which provides you an environment in which you can run JavaScript outside the browser. If you are from Java background, let's say, do you know that there is something known as jvm, right? There is JVM and there is something known as jre. What is gre? Just in case you know Java, that is Java runtime environment. If you want to run any Java code on your, on your system, you should have that GRE installed similar to that. If you want to run JavaScript, you should have this V8, any JavaScript engine installed. In browsers you have these engines by default, Shift. But on your machine, if you Want to run JavaScript outside of the machine, you can download this node js, which is a runtime environment, basically a C program, along with the Chrome's V8 engine. So crazy stuff, right? So this is basically Node js. Now what are what were the advantages of this particular approach? With this approach, number one, you can run JavaScript outside the browser. You can build web servers with JavaScript, you can build CLI tools with JavaScript. You can build iOS and Android applications with JavaScript. And you can even build like, applications for IoT. You can build applications for, let's say Apple Var or any other smartwatch on this earth. So the possibilities are actually endless. So huge. Shout out to Rayan, who developed Node js. Thank you so much. And let me show you. So if I open up my terminal, okay, so let's say if I, open up my terminal, so you can see that this is my terminal window. So this is a terminal window which is of course outside the browser. Now see what I can do is I already have Node js installed on my machine. And don't worry, in the next video I'll show you how you can also install Node js if I type node and enter. Can you see that? Actually I am into the Node js, which is version And now if I say console log. Hey there, do you think that this code is going to execute? Let's try. If I do enter, this code was executing fine. If I say two plus five, you can see I'm getting seven. So can you see that I am able to exit execute this code which was, which is in JavaScript, which browsers can run outside of the browser? Why? Because I have Node js installed. Can this be possible if I didn't have the Node js installed? No, because I need the js engine. So for this particular js engine thing, I have installed Node js, which provides this JavaScript v8 engine in my machine, in my local machine and I can run JavaScript outside the browser. So I hope that with this particular video you got a clarity on what Node js is. Okay, because we are going to code a lot of things in Node js. So you have to keep in mind that Node js is not a framework or a library, it is actually a JavaScript runtime. Okay, so if I just go on to the Node js official website. Okay, so let's visit the official website of Node js. So what you will notice is it says run JavaScript everywhere. So Node js is a free again, it's a free and open source. Node js project is also, is also open source cross platform JavaScript runtime environment that lets developers create servers, web applications, command line tools and scripts. Okay, so this is basically your what do you call Node js? And you can see that we have a lot of examples also which we will eventually see as we move forward. But in this video, the main motive was to teach you that what is Node js? So with that, let's end the video and I'll meet you in the next one. Until then, bye bye and take care of.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "01-node-introduction.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/01-node-introduction.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.011264453,
      -0.013380478,
      0.014748644,
      -0.052526105,
      -0.027521186,
      0.013818955,
      0.026004272,
      0.008732001,
      0.018536687,
      0.010753241,
      -0.0071915644,
      0.009746896,
      -0.0064789653,
      0.026719283,
      0.13406648,
      -0.0063380143,
      -0.0054041324,
      -0.0045044804,
      0.020817978,
      -0.020157428,
      0.009226538,
      -0.0015478551,
      0.022951849,
      0.010991876,
      -0.005128731,
      -0.0030039665,
      0.017331373,
      -0.015960742,
      0.017027495,
      -0.020128587,
      0.010683461,
      -0.0022081975,
      -0.0019084953,
      0.016354203,
      0.005456337,
      0.042754956,
      0.03831963,
      0.0066137174,
      -0.029886074,
      -0.0029072105,
      -0.010477905,
      0.0055695465,
      -0.002049704,
      -0.029400053,
      0.011816174,
      0.004214878,
      -0.0003803168,
      0.002904024,
      0.0076346947,
      0.017155116,
      -0.008174703,
      0.007894533,
      -0.008132545,
      -0.18228073,
      -0.022886757,
      0.019353747,
      -0.011172599,
      0.02208354,
      0.013758703,
      -0.0049528447,
      -0.020039031,
      0.0057443012,
      -0.033150397,
      -0.00040191045,
      -0.020289734,
      0.012594088,
      0.011684377,
      0.01783523,
      0.019393757,
      0.0021013678,
      0.0075761983,
      0.015657544,
      -0.008518587,
      -0.002498806,
      -0.022935458,
      -0.006110454,
      0.0031187783,
      0.012638754,
      -0.011633679,
      0.015863119,
      -0.0057665347,
      -0.00048203667,
      0.0011770573,
      -0.006556403,
      0.006670481,
      0.0038763536,
      -0.03342727,
      -0.016953314,
      -0.02092711,
      -0.008927219,
      0.001593423,
      0.01192937,
      0.0016672575,
      0.020922415,
      -0.0020654248,
      -0.0027571816,
      -0.015687188,
      0.006800695,
      0.00029522696,
      0.011353776,
      0.017558444,
      0.015845884,
      -0.024801066,
      0.0065394714,
      0.016132921,
      0.01394002,
      -0.0031217525,
      0.019691387,
      0.015848024,
      -0.03112681,
      0.0047893138,
      -0.0031543996,
      0.0047513465,
      0.023508798,
      0.014855016,
      -0.18864717,
      0.039181393,
      0.012086668,
      -0.01590481,
      0.010645535,
      -0.009961238,
      -0.0074054264,
      -0.0049925516,
      0.0055184537,
      0.0010726167,
      0.008533381,
      -0.010381811,
      0.037651036,
      0.009241737,
      -0.013112992,
      -0.010075586,
      -0.007933735,
      -0.015789984,
      -0.0012054796,
      0.023073966,
      0.014186813,
      0.02230775,
      -0.0022222216,
      -0.003078553,
      -0.017474817,
      -0.0040486394,
      0.023958392,
      -0.0074064876,
      0.015220237,
      0.0034286135,
      0.0013304456,
      -0.03137362,
      0.010446411,
      -0.013377856,
      -0.013848445,
      0.029781075,
      -0.0017279193,
      0.017322877,
      -0.010688879,
      0.00011471077,
      -0.028931284,
      -0.010161197,
      0.0025561128,
      -0.0022332398,
      -0.007071857,
      -0.0031857502,
      0.0010295985,
      -0.0043811365,
      0.01652293,
      -0.015022058,
      -0.0059108213,
      -0.021402873,
      0.023098296,
      0.0052994112,
      0.01689714,
      -0.000036510966,
      0.017118525,
      -0.0011168579,
      0.0051157377,
      -0.0116316965,
      -0.009958624,
      0.0031340162,
      0.0060292487,
      0.007772779,
      -0.016337885,
      -0.002076082,
      0.015330862,
      0.0047122897,
      0.0070389854,
      -0.005478657,
      -0.000681441,
      -0.015794065,
      0.015723666,
      0.013788514,
      -0.02949701,
      0.0013167775,
      -0.023923071,
      0.014204038,
      0.020637093,
      0.0004112219,
      0.005671421,
      -0.020721871,
      -0.00015962674,
      -0.008336317,
      0.019308869,
      0.005497035,
      -0.008829411,
      0.011124008,
      -0.036219306,
      0.011050553,
      0.015099609,
      0.013803683,
      -0.011473397,
      0.013354344,
      0.013953346,
      -0.010859596,
      -0.0038094716,
      -0.012468028,
      0.014520469,
      0.01802683,
      -0.018616786,
      0.026874175,
      0.007360521,
      -0.0036502213,
      0.0066583143,
      -0.004389312,
      -0.024564376,
      -0.0076119616,
      0.011875938,
      0.0057529323,
      0.007996757,
      -0.000550847,
      -0.01721034,
      0.0133394115,
      -0.017467288,
      -0.005956973,
      0.0047069034,
      -0.016061,
      0.008334662,
      0.024528079,
      -0.0058359527,
      0.011307101,
      -0.00021924169,
      0.011201441,
      -0.019028958,
      -0.0017419549,
      -0.011093655,
      -0.012505395,
      0.010414076,
      0.04375512,
      -0.00034073243,
      -0.014459743,
      0.007917648,
      -0.021768184,
      -0.022914289,
      -0.005097653,
      0.0067424844,
      -0.014352032,
      -0.013711351,
      -0.00032324155,
      -0.012882247,
      -0.01960393,
      -0.014654374,
      0.0034284058,
      -0.0060045263,
      -0.008659095,
      -0.024206009,
      -0.008170224,
      0.0059943018,
      0.018828504,
      0.006386289,
      -0.010286783,
      0.030748097,
      -0.028497646,
      0.000043718745,
      0.0074154125,
      0.010048953,
      0.011160338,
      0.0065854774,
      0.007910248,
      0.0014571617,
      -0.086631514,
      -0.0024602744,
      -0.0036323024,
      -0.017932793,
      -0.0076578474,
      -0.009101351,
      0.004960155,
      0.02215743,
      0.01888125,
      0.002252801,
      0.007996288,
      -0.0015834814,
      0.015610362,
      -0.001313374,
      0.0015328005,
      0.0053289216,
      0.010582602,
      -0.00020480601,
      0.0115395915,
      -0.015749957,
      0.005432942,
      0.016189976,
      -0.0006398697,
      -0.017778099,
      0.014597151,
      -0.0075602503,
      -0.012020949,
      0.012240128,
      0.03859036,
      -0.00049438665,
      0.01814058,
      0.031147169,
      -0.020702163,
      0.0051065385,
      -0.0068431227,
      0.017010419,
      0.019650044,
      -0.02433348,
      -0.008725952,
      -0.028268816,
      -0.0018400564,
      -0.021314519,
      0.012773353,
      0.019520504,
      0.0019863092,
      -0.0034933565,
      0.0124011375,
      0.007958226,
      -0.01904563,
      -0.0003719818,
      -0.019426135,
      0.0036139507,
      0.007304516,
      -0.020176115,
      -0.0020680062,
      -0.012447113,
      0.005556321,
      0.0065293694,
      0.033424053,
      0.009509589,
      -0.004332593,
      -0.00931317,
      -0.009062878,
      -0.010815756,
      0.00898391,
      -0.008351758,
      0.003153343,
      -0.025797391,
      0.007972465,
      -0.009823676,
      -0.011617662,
      -0.0073843333,
      -0.02179608,
      -0.013133933,
      -0.007526741,
      -0.011503081,
      -0.011255161,
      0.0003920358,
      -0.02503902,
      0.021182343,
      0.011232699,
      0.008613318,
      0.011009252,
      0.024396228,
      0.035550572,
      -0.010264335,
      -0.0070985034,
      -0.005362178,
      -0.018291732,
      -0.0059289145,
      0.018816715,
      0.032591563,
      -0.020782627,
      0.0067479806,
      -0.025507309,
      0.0060828268,
      -0.022908982,
      -0.014830926,
      -0.0007432247,
      -0.0028627361,
      -0.01871881,
      0.01240594,
      -0.0069130864,
      0.005924326,
      -0.010853345,
      0.040604442,
      -0.00859728,
      -0.0035454442,
      0.005735641,
      0.0039271405,
      0.011926911,
      0.013346798,
      -0.015308057,
      0.0077296966,
      0.015112005,
      0.021574672,
      0.0051654307,
      0.014256063,
      -0.019107435,
      -0.01512907,
      -0.020077541,
      -0.019207273,
      0.017127283,
      0.0007850278,
      -0.00013780652,
      -0.018655494,
      -0.00692456,
      0.0036617024,
      -0.009713564,
      -0.021034567,
      -0.010144921,
      0.008635104,
      -0.013822102,
      0.015170772,
      -0.011857599,
      -0.013960724,
      0.009715562,
      0.0026437694,
      0.0030798172,
      0.019331146,
      -0.0222774,
      -0.0016488206,
      0.013935374,
      -0.017153692,
      -0.00024110611,
      0.001733826,
      -0.027999258,
      -0.008879069,
      -0.0014509835,
      -0.002480146,
      -0.022888813,
      -0.0081187785,
      -0.015742525,
      0.010309684,
      0.00015159209,
      0.031126728,
      0.01989293,
      -0.008436868,
      0.0011380928,
      -0.011206317,
      -0.008540391,
      0.011420403,
      -0.01175071,
      -0.0040072626,
      0.015700934,
      0.014273347,
      -0.013716221,
      0.0026439303,
      0.009687105,
      -0.009930863,
      -0.018330364,
      -0.016952112,
      -0.034364216,
      0.004397765,
      0.005322066,
      -0.0055977954,
      0.0020863898,
      -0.012251453,
      0.015350365,
      -0.008348897,
      -0.020214293,
      0.005358836,
      -0.013576879,
      -0.0055241925,
      -0.0081533585,
      -0.0050459537,
      0.008063198,
      -0.019505389,
      -0.0028436724,
      -0.011172517,
      -0.00808077,
      0.00075915025,
      -0.025537087,
      0.008809668,
      0.0014268309,
      0.026810283,
      0.026985968,
      -0.003402319,
      -0.021637987,
      0.00045861822,
      -0.01728162,
      -0.027437037,
      0.0067492556,
      -0.009491864,
      0.020982774,
      0.003944583,
      -0.012290296,
      -0.003592262,
      -0.0037211971,
      0.0069353124,
      -0.009773663,
      -0.016797032,
      0.006850696,
      -0.018816348,
      0.017938066,
      0.0009725678,
      -0.0011788884,
      -0.007898473,
      -0.025658716,
      0.0050617117,
      0.019569961,
      -0.022469703,
      -0.014232861,
      -0.008366051,
      0.008114474,
      -0.016090315,
      -0.027347367,
      0.021417657,
      0.0025700163,
      -0.026158761,
      -0.0002530303,
      -0.005387881,
      -0.00019260848,
      0.0053198286,
      0.004435361,
      -0.00048269422,
      0.015585591,
      0.005397912,
      0.011050701,
      -0.0011772751,
      -0.015396705,
      -0.0069677313,
      -0.012423944,
      0.0011761412,
      -0.016520364,
      -0.010562155,
      0.01485299,
      0.021187995,
      -0.018106995,
      0.008285401,
      0.035971243,
      0.0006310786,
      0.028635915,
      -0.013285699,
      -0.01538863,
      0.030742489,
      0.010997271,
      -0.0017026567,
      -0.022210803,
      -0.014101005,
      0.011907395,
      -0.016712936,
      -0.023671748,
      0.019561462,
      -0.015819838,
      -0.02108467,
      -0.020734698,
      -0.0040823747,
      0.03134806,
      -0.1049247,
      -0.0026896347,
      -0.0024215172,
      0.00086282793,
      -0.010095308,
      -0.022355545,
      -0.0062124324,
      -0.019258674,
      -0.02599387,
      -0.026628232,
      0.0067763664,
      -0.021517122,
      0.01028256,
      0.011869841,
      0.0026657733,
      -0.006926457,
      0.007394788,
      0.04241025,
      0.03960351,
      0.0042210235,
      0.022874743,
      -0.00043728427,
      -0.013329916,
      0.011056639,
      -0.022968058,
      0.013037747,
      0.025233123,
      -0.0033262693,
      0.008982308,
      -0.008080424,
      -0.005351083,
      0.0017548506,
      -0.0038065629,
      0.009631365,
      0.016273094,
      -0.002924555,
      -0.0126471175,
      0.01185792,
      0.014558114,
      0.005636327,
      -0.0074354606,
      -0.005069612,
      0.00471353,
      0.0107810125,
      0.008193601,
      0.0067456765,
      0.039328318,
      -0.011434423,
      -0.0021629294,
      0.056890346,
      -0.04820175,
      -0.008843219,
      0.007276012,
      -0.021548579,
      -0.004323169,
      0.016896963,
      0.023256712,
      -0.014149067,
      -0.009048027,
      0.002284726,
      0.0075518256,
      0.011040863,
      0.0058547957,
      0.017126339,
      -0.012928572,
      -0.0027805006,
      0.020752436,
      -0.011476886,
      0.010197466,
      0.0031615037,
      -0.00439037,
      0.003098234,
      -0.018592926,
      0.0139816245,
      0.012842657,
      0.012753167,
      0.0017838056,
      0.012115851,
      -0.003448418,
      0.027829338,
      0.00035801678,
      0.010290776,
      -0.07740617,
      -0.010795897,
      0.016269157,
      0.005434631,
      0.0021632826,
      0.008095693,
      -0.017516812,
      0.0148813715,
      0.0012178282,
      0.004897958,
      -0.018467974,
      -0.011777838,
      -0.01037468,
      -0.003805741,
      -0.037295166,
      -0.009235636,
      -0.0025336235,
      -0.014965612,
      -0.016832467,
      0.0043195337,
      -0.0071579525,
      -0.00075159845,
      -0.002251349,
      -0.008985638,
      0.018308347,
      0.025336182,
      -0.02431357,
      0.010909919,
      -0.010174725,
      0.0061062775,
      0.0018495693,
      -0.14933139,
      -0.015477763,
      0.0054067494,
      0.015580463,
      -0.015105125,
      0.002231863,
      -0.018798476,
      -0.004817271,
      0.02277563,
      -0.012174044,
      -0.010033572,
      -0.007925136,
      -0.028312316,
      0.006121093,
      -0.0002792674,
      0.13686614,
      0.011540472,
      0.014849935,
      0.0008180923,
      0.010682057,
      -0.01602723,
      -0.020217612,
      -0.00900251,
      0.013493086,
      -0.0038755562,
      -0.0049936264,
      0.0077605564,
      -0.020471701,
      0.020482874,
      0.010806099,
      0.012254537,
      -0.023742646,
      -0.024961963,
      0.009689956,
      0.00090689934,
      -0.022176832,
      -0.0063037453,
      -0.016190033,
      -0.004820044,
      -0.013542996,
      0.027860083,
      0.004483795,
      0.0025519494,
      0.026711104,
      0.00391935,
      -0.007785906,
      0.0024316187,
      -0.017171124,
      -0.021256855,
      -0.012509856,
      -0.013731158,
      -0.0675072,
      -0.0069089793,
      -0.010030891,
      -0.014014108,
      0.011295262,
      -0.020419281,
      0.025214108,
      -0.017522017,
      -0.0007405136,
      -0.007855808,
      -0.011230155,
      0.022048118,
      -0.007854738,
      -0.015446493,
      0.001432349,
      0.003531661,
      0.027243061,
      0.007739501,
      -0.006326807,
      0.016645476,
      0.012036964,
      -0.011815313,
      -0.012116183,
      -0.033141013,
      -0.029981676,
      0.0006690323,
      0.018583097,
      -0.0043705236,
      -0.019241825,
      0.00241463,
      -0.012009612,
      -0.011806119,
      -0.0112626655,
      0.021766676,
      0.00066435506,
      -0.018549642,
      0.016728962,
      0.0004949392,
      -0.016117355,
      -0.006216939,
      0.01755542,
      -0.01003399,
      0.029271431,
      0.0021812972,
      0.014467729,
      0.02264042,
      0.012934043,
      0.0002888224,
      0.00031130435,
      -0.00490675,
      -0.0024541265,
      0.0048279543,
      -0.011282576,
      0.038393926,
      0.018617924,
      0.019467963,
      0.0298638,
      -0.002147727,
      -0.017039003
    ]
  },
  {
    "id": "genai_cohort_nodejs_02_nodejs_install_vtt",
    "content": "So hey guys, welcome to the second video on Node J series. And in this particular video I'll walk you through how you can install Node js on your machine. So it's very simple. What you have to do is you have to go to this website that is nodejs. org so this is the official website from no of Node js. And here what you can see is, you can see this big button that is download Node js lts. Now what is this? LTS means LTS here means long term support. That means it's a stable version of Node js. So there are two versions of Node js. So let me just search if you have this download button here. So you can see that you have this LTS and you have a current versions. So what happens is that how the Node js team basically develops is. So if you can see that this is your LTS version, basically the stable version. And currently the team of Node js is working on this feature, this particular version that is So this is the current version. This current feature has a lot of more features which are upcoming, but they are not stable. They are not recommended to use on the machine, on the production machine, right? I mean if you want to play around with these things, with the new features you can go with current, but they are not stable. So there can be bugs, there can be crashes and definitely not recommended for the production use case. So LTS is a long term support. Now what will happen is once the team finishes this, once the team develops all the features, they are going to Release a version that is going to be an LTS. So all the features developed in will be moved to One interesting thing is that all the even versions are always lts and all the odd versions are something that, that teams are working on. So we have to go with this LTS version and you can select your platform, Mac OS is there, Linux is there and Windows is there. So you can select and using, you can just say NVM Docker. So NVM is fine. Okay, so what you can do is you can use this also or it's a package manager. Or what you can do is you can just download it from here. So I would recommend to go with this pre built installer. So select the version or any LTS version. Okay. Because you might be watching this video in future when There is version Just make sure that you are on an LTS version. Select your operating system and which, like which, what do you Call which architecture you are using and just click on this download. Now once you download the setup, what will happen is you will be prompted with like, you know, next, next, next, agree and all that stuff. And node js will be installed on your machine. I won't be doing this step because I already have node js installed on my machine. Now once you have done all this process, let's verify that if you have node js installed or not. So first command is if you say node version, you can see that I'm getting v. That means my node version is If you are getting or if you are getting any number that's fine. But if you are getting any error, that is where you might have messed up with the installation and you might want to re verify that what went wrong. Okay, But I'm sure 99% in the chances you will be right, you will be able to install this thing. There is only just 1% chance. And even, even if it is not working, try restarting your machine because sometimes, you know, things do work after the restart. One more thing is that when you install node you can just do an npm. So there is a tool npm, which unofficially stands for Node Package Manager. So this comes automatically when you install node js. So you can see that I have npm version So we are going to use this npm Unofficial Full Form Node Package Manager to, to create, manage, install external dependencies. So let's say I want to install some extra package, I want to install some extra dependency so I can use npm. Or maybe I want to create my own packages so I can use npm. Okay, this comes along with the node js. So when you install this node js, this automatically installs npm. So you can see here it says node js includes npm this thing. So this is by default shipped along with the node js only. So if you are getting these numbers, congratulation guys, you have successfully installed node js. One thing you can do is you can just say node and you can play around with the Node js. So you can write any JavaScript code and to exit out just say Ctrl D. So Control D, that is Ctrl D is going to exit out this particular repl. Okay, so with node it basically gives you a console where you can play around with the Node js where you can write any JavaScript code and that executes like a charm.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "02-nodejs-install.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/02-nodejs-install.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.01620184,
      0.0077994824,
      0.016353803,
      -0.038482223,
      -0.008850347,
      0.022054324,
      0.029438457,
      -0.0017154422,
      0.017031746,
      0.0038108877,
      0.00538667,
      0.0030169964,
      0.018611107,
      0.006227981,
      0.114765175,
      -0.0021163162,
      -0.012013482,
      -0.008764149,
      0.015784705,
      -0.029254613,
      -0.0010971363,
      -0.020032061,
      0.022548342,
      0.0121705,
      -0.0069882134,
      -0.007376344,
      0.013703348,
      -0.0070835305,
      0.010760155,
      -0.017563378,
      -0.0089445105,
      -0.01115423,
      0.00020275115,
      0.0175107,
      -0.0063544507,
      0.039450586,
      0.0027513225,
      0.023013309,
      -0.017153868,
      0.008736645,
      -0.011579596,
      0.017623564,
      -0.0035999175,
      -0.03734083,
      0.011102152,
      -0.0034589674,
      0.0031455215,
      0.001519628,
      -0.0025031674,
      0.014307059,
      -0.003913672,
      -0.009392752,
      -0.029675636,
      -0.19164306,
      -0.0130696865,
      -0.007869882,
      -0.004311652,
      0.0064704907,
      0.021142725,
      0.011117091,
      -0.017348345,
      0.005600089,
      -0.03801504,
      0.013938746,
      -0.0053852224,
      0.004404364,
      0.017227817,
      0.011077597,
      0.01940291,
      -0.0066062873,
      0.020714618,
      0.007990915,
      -0.0072468957,
      -0.009343206,
      -0.021648556,
      -0.014951021,
      -0.00010347989,
      -0.018167911,
      -0.028811,
      0.024845295,
      0.003777793,
      -0.013363032,
      -0.002383424,
      0.002716746,
      -0.0013996331,
      -0.01923979,
      -0.036582872,
      -0.009292521,
      -0.02355288,
      0.004603339,
      -0.003416607,
      0.019724688,
      -0.0011270827,
      0.0063555012,
      0.0020400183,
      0.013339797,
      -0.008653907,
      0.020957852,
      -0.0024547083,
      -0.0077459146,
      0.01815019,
      0.00026193509,
      -0.045236204,
      0.016203795,
      0.016317481,
      0.0001712003,
      -0.003635625,
      -0.002088848,
      0.014163133,
      -0.02634449,
      0.010818844,
      -0.008261103,
      0.014297091,
      0.010251544,
      0.009228438,
      -0.19962636,
      0.0049520424,
      0.016388213,
      0.0071690977,
      0.0033774092,
      -0.0016071419,
      0.0010139291,
      -0.0019889625,
      0.012540784,
      -0.0045884326,
      0.011490605,
      -0.002437279,
      0.024648355,
      0.0021774657,
      -0.005125344,
      -0.024048436,
      -0.0052645723,
      -0.013067942,
      0.0000720832,
      0.009044782,
      0.013688921,
      0.00697501,
      -0.00083520985,
      -0.005220376,
      -0.0130434465,
      0.014063226,
      0.015641527,
      0.0077320747,
      0.014010208,
      0.012996001,
      -0.004321368,
      0.0023087123,
      -0.0039220545,
      -0.0062006325,
      -0.020368665,
      0.015962385,
      -0.00643341,
      0.016413925,
      -0.007170703,
      0.00965361,
      -0.020303858,
      -0.020781199,
      0.018480882,
      -0.0037408178,
      -0.010728049,
      -0.008520233,
      0.0039449134,
      -0.004217564,
      0.016238358,
      0.010232811,
      -0.0045847907,
      -0.014901708,
      0.0032315026,
      0.015901484,
      0.002499237,
      -0.005113236,
      -0.016306248,
      0.00026577717,
      0.0002531326,
      -0.019907845,
      -0.007883503,
      -0.002441216,
      0.005649,
      0.016653303,
      -0.02486297,
      -0.000289934,
      -0.0040024337,
      0.0065487893,
      -0.01111021,
      -0.00022749239,
      -0.018911958,
      -0.018204289,
      0.0363853,
      0.0074248025,
      -0.020907514,
      0.02511521,
      -0.01267737,
      0.019828163,
      0.0227632,
      0.00064608303,
      0.009010618,
      -0.008435135,
      -0.00045518603,
      0.007631882,
      0.008656271,
      0.007272072,
      -0.0063764653,
      0.013010472,
      -0.02771862,
      0.012677838,
      0.023074202,
      0.023287207,
      -0.007988644,
      0.005172299,
      0.0026027455,
      -0.013289094,
      -0.015189182,
      -0.008986809,
      0.012811573,
      0.004962431,
      0.011987518,
      0.0033879667,
      -0.000999064,
      0.018983042,
      0.0054595503,
      -0.011951845,
      0.007984416,
      -0.0005882006,
      0.01913883,
      0.025447045,
      0.0008960732,
      0.009015657,
      -0.008808957,
      0.009242436,
      -0.0035516429,
      0.014095312,
      0.014059922,
      -0.015286931,
      0.023398448,
      0.013700964,
      -0.00548977,
      -0.008194832,
      0.0006949445,
      0.008376874,
      -0.014497299,
      0.009044392,
      -0.011019379,
      -0.024635797,
      -0.000309951,
      0.04246885,
      -0.0075433785,
      -0.003756317,
      0.0010857548,
      -0.019183815,
      -0.02433848,
      -0.0071862307,
      0.014180487,
      -0.014232137,
      -0.011402021,
      0.01157731,
      -0.01426946,
      -0.01662026,
      -0.0064929104,
      0.010309024,
      -0.008055884,
      -0.0011246674,
      -0.011416095,
      -0.009044639,
      -0.014348009,
      0.02386257,
      0.001324413,
      0.01378724,
      0.023630142,
      -0.023116013,
      -0.0090134805,
      0.0017368494,
      0.0015575944,
      0.005847691,
      -0.012269166,
      -0.01043367,
      0.0073236395,
      -0.08307718,
      -0.017690768,
      0.0029072405,
      -0.035069812,
      -0.018932156,
      0.007061296,
      0.014784753,
      0.0330134,
      0.011226228,
      0.005030457,
      -0.006029617,
      0.0016263898,
      0.006209626,
      -0.016445858,
      -0.0067477887,
      0.008013062,
      0.0056732204,
      -0.003896137,
      -0.0050143413,
      0.005728369,
      -0.0029795698,
      0.0017538487,
      -0.018375434,
      -0.013121138,
      0.01848914,
      0.0024995601,
      -0.0036966463,
      0.012256189,
      0.023901151,
      -0.004257743,
      0.016629616,
      0.0373081,
      -0.015007322,
      -0.014531587,
      -0.0009319796,
      0.000090485504,
      0.024466319,
      -0.020584093,
      -0.015364817,
      -0.036209967,
      -0.0064422507,
      -0.03281365,
      0.013361969,
      0.023073291,
      -0.017362228,
      -0.0018048828,
      0.012301691,
      -0.0059667067,
      -0.012456366,
      0.009277099,
      -0.029205613,
      0.013395086,
      0.0022541515,
      -0.034823135,
      0.0038805902,
      -0.0131604215,
      0.011857287,
      0.0071519413,
      0.023759611,
      0.0104833795,
      -0.014767128,
      0.0024055454,
      -0.013409678,
      0.017025413,
      0.012572665,
      0.0046502794,
      0.0030828074,
      -0.026556093,
      0.0037296063,
      -0.008703705,
      0.0052528605,
      -0.0064356895,
      -0.0091045005,
      -0.019620484,
      -0.0030809098,
      -0.00087154366,
      0.0003128182,
      0.0035603757,
      -0.020878827,
      0.009238248,
      -0.0029723684,
      0.011469343,
      -0.0026278922,
      0.020875895,
      0.010730076,
      -0.010635351,
      -0.020635888,
      -0.0037736634,
      -0.009405344,
      -0.012100778,
      0.001475753,
      0.021560064,
      -0.0061568995,
      0.00008699998,
      -0.018150963,
      0.017561732,
      -0.017807404,
      -0.016534857,
      0.007663539,
      0.013400873,
      0.0040768106,
      0.005774887,
      -0.0033117286,
      0.0065789316,
      -0.013739968,
      0.042106144,
      -0.006529094,
      -0.009246064,
      0.00837033,
      -0.01899803,
      0.021668555,
      0.008626782,
      -0.0099026635,
      0.004017413,
      -0.004670085,
      0.019825108,
      0.012060007,
      0.010728235,
      -0.019669438,
      0.004775173,
      0.012120419,
      -0.00983227,
      0.009622825,
      0.014340873,
      0.0034188274,
      0.0012764998,
      -0.0021351515,
      0.00501965,
      -0.005257098,
      -0.012618509,
      -0.012230699,
      0.012844818,
      -0.022756772,
      -0.005444705,
      -0.008311952,
      -0.016618622,
      0.019784844,
      -0.011854248,
      0.0023428036,
      0.018398257,
      -0.022019383,
      0.009220653,
      0.01183883,
      -0.025974564,
      -0.0046740384,
      0.011310444,
      -0.034906127,
      -0.019073356,
      0.0021040672,
      0.014830005,
      -0.0033298938,
      0.00005838558,
      -0.008293697,
      -0.013374038,
      0.010126931,
      0.03241752,
      0.022364607,
      -0.011913095,
      -0.0048050466,
      -0.021479784,
      -0.010046857,
      0.02317056,
      -0.0022995071,
      -0.01590764,
      0.013991563,
      0.019782096,
      -0.009335464,
      -0.008081766,
      -0.0016998185,
      -0.0110854935,
      -0.021153113,
      0.01152138,
      -0.024719885,
      0.018952647,
      -0.0037044568,
      -0.0057184566,
      0.01967978,
      0.006212788,
      0.01393916,
      0.0131728435,
      -0.018192017,
      0.013201654,
      -0.015643759,
      0.0048939567,
      0.0032508054,
      -0.0005612902,
      -0.0073094685,
      -0.011327972,
      0.00075592264,
      -0.013288057,
      0.0044794176,
      -0.0035612914,
      -0.004692944,
      -0.006885994,
      0.013644815,
      0.02377312,
      0.0030042885,
      -0.00029367805,
      -0.002043606,
      -0.000105745225,
      0.00924883,
      -0.011138401,
      0.019424237,
      0.002652019,
      0.028151048,
      0.010819121,
      -0.0046797274,
      0.0024276865,
      -0.0032513908,
      0.015332265,
      -0.017763337,
      0.0007848651,
      0.008591981,
      -0.004733248,
      0.0090113,
      0.024309892,
      -0.018956946,
      0.0105506545,
      -0.030253882,
      0.014104063,
      0.0284388,
      -0.007288239,
      -0.009232268,
      -0.017979173,
      0.01636902,
      -0.014472913,
      -0.02902828,
      0.013238483,
      0.008810134,
      -0.020213494,
      0.006387899,
      -0.010884676,
      0.02053099,
      0.012970941,
      0.005628256,
      0.007937234,
      0.002559872,
      -0.007061001,
      0.0005824335,
      -0.0009898397,
      -0.0026192267,
      -0.015282558,
      0.0020721755,
      0.00026724415,
      -0.014106897,
      -0.0028442633,
      0.011363338,
      0.0068819523,
      0.0051155095,
      -0.007277907,
      0.027775198,
      0.0066282037,
      0.0044914144,
      -0.008682971,
      -0.008838839,
      0.036705334,
      -0.011085431,
      0.0092180995,
      -0.00614671,
      -0.01816971,
      0.018259868,
      -0.003644685,
      0.003561239,
      0.007112799,
      -0.0065623787,
      -0.0072215735,
      -0.0069753956,
      0.0038515546,
      0.020552497,
      -0.097916916,
      -0.018438727,
      0.0005232211,
      0.021994032,
      -0.0062598567,
      -0.013633593,
      0.0046977852,
      -0.017083874,
      -0.0018113343,
      -0.020263093,
      0.0011445329,
      -0.018098641,
      -0.0034396502,
      0.02454647,
      -0.020204214,
      -0.013182098,
      0.007146825,
      0.027827445,
      0.04066219,
      0.005700992,
      -0.0014268358,
      0.006981494,
      0.0076067643,
      0.0014079643,
      -0.036233086,
      0.018782545,
      0.015986212,
      0.003944895,
      -0.0056298864,
      -0.011943517,
      -0.0015909906,
      -0.0031835795,
      0.0014900228,
      0.0035383697,
      0.047414232,
      0.008327594,
      -0.009817292,
      -0.0030490085,
      0.015694162,
      0.0029378317,
      0.00042888187,
      0.014646099,
      0.020269243,
      0.026013453,
      -0.00490097,
      0.017545447,
      0.044750243,
      -0.008058501,
      -0.01641502,
      0.055713087,
      -0.033600483,
      -0.0213548,
      -0.021084331,
      -0.01763604,
      0.0030308892,
      -0.0009675597,
      0.005616492,
      0.01968476,
      -0.0064546126,
      -0.0040467144,
      0.01737843,
      -0.0003785578,
      0.011773243,
      0.035065558,
      0.00012550318,
      -0.010114163,
      0.02973528,
      -0.0044172304,
      0.010836118,
      -0.007891719,
      -0.0020894422,
      0.0091674505,
      0.009431533,
      0.006084083,
      -0.0055171093,
      0.009800311,
      0.0052843294,
      0.028929243,
      -0.0014925725,
      0.025095833,
      0.009719602,
      -0.0034960676,
      -0.06479173,
      -0.0052684015,
      0.0028036186,
      0.0070285834,
      0.0074924193,
      0.012193573,
      -0.020725334,
      0.0196087,
      0.014198032,
      0.011989385,
      -0.003097518,
      -0.005926762,
      -0.016369289,
      -0.010853005,
      -0.018741481,
      -0.02335215,
      0.010092351,
      -0.009534937,
      -0.0153648155,
      0.012905526,
      0.00025694785,
      -0.007826005,
      0.016334407,
      -0.016380213,
      0.025828343,
      0.025642902,
      -0.013023809,
      -0.00838842,
      0.0019109932,
      0.00032874625,
      0.016426789,
      -0.15903156,
      0.0000030990338,
      0.009656557,
      0.0049395417,
      -0.0069017084,
      -0.008139671,
      -0.013744203,
      -0.004246556,
      0.026505759,
      -0.013567412,
      0.013564862,
      -0.011493411,
      -0.02562517,
      -0.0007411768,
      0.00051949813,
      0.14668027,
      -0.009874805,
      0.026631553,
      0.011373629,
      0.013896127,
      -0.0023425636,
      -0.01095253,
      0.0018848296,
      0.014547408,
      0.0015949055,
      0.00049025234,
      -0.008106937,
      -0.004903598,
      0.032077942,
      0.018275203,
      0.03223521,
      -0.023274774,
      -0.0029499733,
      0.0012654532,
      0.016489372,
      -0.026259843,
      0.004979281,
      -0.013428707,
      -0.0073248195,
      -0.007920943,
      0.004335239,
      0.002647142,
      0.019375274,
      0.01718108,
      -0.008508793,
      -0.0102869645,
      0.0015285759,
      -0.032376494,
      -0.0138518475,
      -0.022746952,
      -0.010021597,
      -0.07089687,
      -0.01040511,
      -0.008304258,
      -0.01793243,
      0.041680783,
      -0.01691169,
      0.003439752,
      -0.0070862705,
      -0.012102654,
      0.010076129,
      -0.0037562542,
      0.02110271,
      -0.005804718,
      0.004439593,
      -0.02045028,
      0.011055772,
      0.016653953,
      0.023741692,
      -0.011352202,
      0.03269716,
      0.023107994,
      -0.009612355,
      -0.014700701,
      -0.023828303,
      -0.017516935,
      -0.0048455265,
      0.017498901,
      -0.0037587201,
      -0.008118387,
      -0.018880142,
      0.005357635,
      0.008646304,
      -0.0041725985,
      0.02228986,
      -0.026661083,
      -0.0061051273,
      0.032051,
      -0.0075584655,
      -0.03335386,
      -0.019336583,
      -0.002223532,
      -0.0033712885,
      0.009356987,
      -0.012803953,
      0.010757856,
      0.01612832,
      0.016326396,
      0.0144022945,
      -0.009929308,
      0.007211334,
      -0.017481413,
      0.012446914,
      -0.017728351,
      0.03385904,
      0.022730643,
      0.02422158,
      0.0220789,
      -0.0005202443,
      -0.021206342
    ]
  },
  {
    "id": "genai_cohort_nodejs_03_hello_world_vtt",
    "content": "So I hope that your installation was good and you had a fun time installing and playing around with Node js. In this particular video, let's go with some actual coding. And don't worry, all the code files that are going to be used throughout this course, you will get a GitHub link to that. You can check the description also of this particular video. So don't worry, you will get everything. Okay, so in this particular video, let's jump onto some coding and see how we can use Node to, you know, basically run any code, any JavaScript outside the browser. Now what I will recommend you is to get a IDE so you can choose any ID that you like. In my case, I'm going to go with Visual Studio code because that's my favorite ID and most probably yours as well. Okay, so I already have this Visual Studio code installed on my machine, so you can also download it. It is free, it is open source and it is made by Microsoft. So what we have to do is first of all I'm going to create an empty folder for today's project. So what I have done here is you can see that I have an empty project empty folder of Node js, right? So here let's create a new folder and let's call it as hello World. Okay? So you have to create an empty directory. So now what I can do is I can basically open this particular folder in my terminal, right? So I can just say CD and I can go into the coding folder there I have a Node js folder that I just made and there I have a hello World. Now I can just do a code dot to open this particular folder in my VS code. So you can see that here is my VS code and I have this folder open now, right now my VS code is empty. You can see there is no file. There is nothing. So let's start by creating a file so you can name your file. Anything and extension should be JavaScript. So what we are doing is we are creating a new js file. Feel free to choose any name, but the extension should be js. Now here let's write a simple JavaScript code. So hello from. And I can just script js file. So you can see that this is a very simple console log statement. Now in order to run this particular file, in order to run this particular code, what we can do is from my terminal I can say node and give the file name. So file name was script script js. As soon as I click enter, you can see that I was able to execute my script js file. You can even say node and just the script. js is not necessary because of course you are working with node. So it assumes that you always want to run a JavaScript file. So it's optional to give js at the end while you are running it from the cli. But you can see that using this node script, I was able to run this circle script file right now here you can have all things like any valid JavaScript code is going to execute. For example, you can have const a equals to 1, you can have a const b equals to and then you can have a const sum which is like a plus b. And then you can just say console dot log that the sum I can say sum is. And then just console log the sum. Now you have to save it. And if I rerun it, you can see that I am getting sum S So as you have seen that we can run any valid JavaScript code using this node CLI. Okay? And one very interesting thing is that when you just say node, you can just say hyphen hyphen help. So this is going to give you a help that what all things are possible. So you can see that here is a full documentation. So let me just do it again and let's go back to the top. So you can see that you can just say node. Okay? Then you can supply some options. These options are these all the options which are available. And then you can just give a file name. For example, script js can be given, any file name can be given here. And then you can give the arguments. These arguments basically are like CLI arguments. So for example, you can say node script js and you can pass a equals because So these are basically your command line arguments. So don't worry. As we proceed further, I'll show you that what are these command line arguments and how you can build your own CLI tool And you can even do like node inspect, you can give some options, then you can give the file name, then you can give the port and all that. So you can see that we have a lot of options in which we have already seen. One that was the hyphen hyphen version. So if you scroll down to V, these are alphabetically sorted. So if I just keep on scrolling. Yeah. So you can see that we have already seen this, right? We can say hyphen V or hyphen hyphen version, It's a capital V that prints the node js version. So that means I can say node. Okay, and at the end, yeah, so I can just say node hyphen capital V. Okay, sorry, node hyphen V. Or I can say node hyphen, hyphen version. Okay, hyphen, hyphen version to get the same output. Similarly. Similarly, let's again do a hyphen, node hyphen, hyphen help. And you can see we have node V8 coverage. We have this UV thread pull size. This is very important. We will cover this. So this is how basically you can see all the available commands in NodeJS. So you have this Var. So basically this runs in a Var mode. Now let me tell you what is this. Okay, so let's say if I'm changing something, let's say if I updated this to V Every time I have to run this, I have to say node and I have to say dot script js. Now if I change something to let's say V2, I again have to do this. But what you can do, you can just say node, hyphen, hyphen Var. So this will basically keep on watching the file. So sorry, I forgot to give the name. So node, hyphen, hyphen, Var and script and enter. So now what it is doing is it is watching. It is not exiting out. Anytime I change something and save, you can see it automatically reruns, okay? If I change something to let's say V9, you can see it automatically reruns, right? So I am currently in a Var mode. To exit out of it, I can just say Control C. So to exit this particular loop I can just say control plus C. Whether you are on Mac or Windows doesn't matter. It's always the control C to exit out. Okay, so you can see all the available commands are available to us in the help mode. So there is no need to remember them. As you go further, as you proceed, you will see these things. Okay, so you have a lot of commands, you have the description. Feel free to read it. There is no need to read all of them. So as we will need them, we will keep on reading them, we will jump into the documentation and we will implement it. So this was your Node cli, similar to this, similar to your Node cli, you have this npm, right? So if you say npm hyphen hyphen version, you remember that npm Unofficial Full Form Node Package Manager also comes along when you install Node js. Now let's do npm help, right? To see what all things are available. So you can see we can use npm install to install something. npm install some package thing. npm test npm run npm hyphen L is there, right? npm help is there. Then you have all the commands like access, add, user, audit, bugs. So you have a lot of commands available in npm as well. Right. So we are going to use this npm to majorly use install this command and this command. So we will install a lot of dependencies when we are going to build our project. Yeah, this was basically for this particular video in which I wanted to demonstrate that how you can use this CLI to run JavaScript files and to get the help and how you can explore things on your own.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "03-hello-world.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/03-hello-world.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0034166586,
      0.006926149,
      0.029000252,
      -0.05544078,
      -0.012511693,
      0.006466308,
      0.012644393,
      -0.0072394614,
      0.01470683,
      0.0039236685,
      -0.010237457,
      -0.0021992929,
      0.0052392744,
      0.02344779,
      0.12271643,
      -0.0013694293,
      -0.018584436,
      -0.009797796,
      0.010458489,
      -0.02383939,
      0.011863168,
      -0.006950535,
      0.03447727,
      -0.006500875,
      -0.009232686,
      -0.006691012,
      0.018320737,
      0.0015225322,
      0.008326237,
      -0.0073418347,
      -0.0035438125,
      -0.010254501,
      -0.015366767,
      0.0014772722,
      0.0013980789,
      0.024233593,
      0.018437479,
      0.008683352,
      -0.01731673,
      0.0064331456,
      -0.029365487,
      0.005770639,
      0.00080395147,
      -0.035186287,
      0.019516401,
      -0.000944306,
      0.00036068543,
      -0.0076680994,
      0.008667601,
      0.031946577,
      -0.0063239667,
      -0.012378932,
      -0.02630825,
      -0.1695147,
      -0.0127957305,
      0.0056970296,
      0.0003222629,
      0.009440226,
      0.026087703,
      -0.0032445195,
      -0.016375106,
      -0.0025423332,
      -0.045447186,
      0.012292452,
      -0.023253515,
      0.0013773814,
      -0.011337974,
      0.0052177347,
      0.014833696,
      -0.013774853,
      0.01373875,
      0.021860834,
      -0.010719525,
      -0.00803204,
      -0.027469799,
      -0.005737289,
      0.003248107,
      0.010783723,
      -0.020728698,
      0.024752302,
      0.0029029523,
      -0.010029442,
      -0.0008161099,
      -0.017562902,
      0.0108434,
      -0.005052517,
      -0.03349517,
      -0.02153439,
      -0.0376983,
      -0.0049300822,
      0.002984555,
      0.019576877,
      -0.0072783898,
      0.00849446,
      -0.008379812,
      -0.007320255,
      -0.011515179,
      0.0018103811,
      -0.0016776536,
      -0.001321174,
      0.019336784,
      -0.0071993386,
      -0.03350224,
      0.016364668,
      0.00883872,
      0.025280656,
      -0.000012180934,
      0.0043165977,
      0.01585906,
      -0.020505136,
      0.009567305,
      -0.0058003464,
      0.00077213685,
      0.026793726,
      0.0075464966,
      -0.18760529,
      0.0114415055,
      0.015994448,
      0.0012555706,
      0.014249605,
      -0.0165714,
      0.0072466945,
      -0.01715048,
      -0.009761148,
      -0.011821251,
      0.010508473,
      -0.007386814,
      0.030845778,
      0.011270635,
      0.003001786,
      -0.014193289,
      -0.011578328,
      -0.030950725,
      -0.00232172,
      0.01920382,
      0.011666061,
      -0.0022850498,
      -0.005692062,
      -0.00090476533,
      -0.029519122,
      0.010992545,
      0.015870143,
      0.002527343,
      0.028675778,
      0.0068436447,
      -0.002946744,
      -0.0017752892,
      0.005417352,
      -0.004527149,
      -0.023509419,
      0.00035418288,
      -0.021029107,
      0.02433965,
      -0.0040415092,
      0.027052954,
      -0.021773348,
      -0.012539917,
      0.008199258,
      -0.0005555783,
      -0.008494145,
      0.018548382,
      -0.003335322,
      -0.0007689592,
      0.012541854,
      0.017612293,
      0.005272653,
      -0.022166165,
      0.014707259,
      0.0023700902,
      0.013399545,
      -0.007898684,
      -0.002128356,
      0.016556213,
      -0.0012315504,
      -0.02205094,
      -0.010607748,
      0.016322661,
      -0.007620734,
      0.01685584,
      -0.011445338,
      0.004481911,
      -0.003842619,
      0.00749229,
      0.009220488,
      -0.00016929128,
      -0.021326158,
      -0.010358694,
      0.02576511,
      0.01063595,
      -0.021865886,
      0.019705389,
      -0.024138609,
      0.007723753,
      0.036636926,
      -0.0047335355,
      -0.011125649,
      -0.024618406,
      -0.00022843736,
      0.014738743,
      0.0058468254,
      0.014810903,
      -0.012336766,
      -0.004613569,
      -0.037940536,
      0.015479116,
      0.025481919,
      0.0019213427,
      -0.00818754,
      0.0041903774,
      0.0025380428,
      -0.0074061602,
      -0.013640497,
      -0.0025002728,
      0.017518826,
      0.014815193,
      -0.009427601,
      0.021736799,
      0.0014479549,
      0.008277405,
      -0.006460906,
      0.00428051,
      -0.003539597,
      0.0010760783,
      0.01524544,
      0.014225913,
      -0.003444956,
      0.015168905,
      -0.015797058,
      0.007017755,
      -0.010701522,
      0.02274021,
      0.0022767957,
      -0.028409317,
      0.0044569825,
      0.009292201,
      -0.0016689871,
      -0.011236969,
      0.00094845047,
      0.00057426374,
      -0.0056338287,
      0.009189211,
      0.0012931809,
      -0.014626067,
      0.0002967988,
      0.05303967,
      -0.0062751807,
      -0.026704712,
      -0.00347471,
      -0.036493715,
      -0.02240046,
      -0.017607102,
      0.012627118,
      0.0031038765,
      -0.0098094465,
      0.00013407979,
      -0.015235703,
      -0.0074634845,
      -0.003867991,
      0.0045579034,
      -0.0075883223,
      0.00204308,
      -0.007506198,
      -0.028421314,
      0.004084853,
      0.021991521,
      0.016930014,
      0.0082085,
      0.029573238,
      -0.034589488,
      0.0016133934,
      0.008105911,
      0.0031699797,
      0.012447493,
      -0.0101048965,
      -0.008858947,
      0.010725054,
      -0.09388492,
      -0.009886904,
      0.0053210156,
      -0.02990046,
      -0.009426172,
      0.008321435,
      0.0044335783,
      0.019179387,
      0.016033608,
      0.020203358,
      -0.0042113666,
      0.0059069204,
      0.010518918,
      -0.01157806,
      -0.00060653343,
      0.004920225,
      -0.00031886622,
      -0.009819566,
      0.0057004415,
      0.00694915,
      0.00847495,
      -0.0030631777,
      -0.00021670434,
      -0.011977113,
      0.019703953,
      -0.0048046215,
      -0.006955513,
      0.023245305,
      0.033366986,
      -0.00504176,
      0.015626496,
      0.03264831,
      -0.026237503,
      -0.021685055,
      -0.021180257,
      -0.0025319606,
      0.02189547,
      -0.0127047235,
      0.010836514,
      -0.011459525,
      -0.00680489,
      -0.019820156,
      0.022349425,
      0.0139475595,
      -0.017803874,
      -0.0022371984,
      0.008772595,
      -0.01910887,
      -0.020805731,
      0.012530254,
      -0.02235795,
      0.012500515,
      0.0029437104,
      -0.022814672,
      0.011073456,
      -0.0075669936,
      0.013480654,
      -0.0033782101,
      0.031202331,
      0.0009216923,
      -0.0025421947,
      0.0120480275,
      0.0047843335,
      0.012267045,
      0.0139345825,
      -0.0014250714,
      0.007030745,
      -0.01542349,
      0.003539904,
      -0.015037433,
      0.0080987895,
      0.0027256762,
      -0.011662411,
      -0.023958202,
      -0.0061252923,
      0.003097811,
      0.020425096,
      0.008651963,
      -0.020895356,
      0.02090229,
      0.0152449645,
      0.0054264525,
      -0.0054307724,
      0.02105921,
      0.0105676865,
      0.0033645886,
      -0.0064741424,
      0.0044040596,
      0.0036776022,
      -0.027231507,
      0.028988816,
      0.012769909,
      -0.009922917,
      0.009028127,
      -0.01596258,
      0.01705824,
      -0.03900088,
      -0.00011582036,
      -0.013430035,
      0.017299201,
      -0.0014063979,
      -0.008543197,
      -0.00735305,
      0.002531206,
      -0.0008381833,
      0.018574588,
      -0.00058031135,
      -0.007425924,
      -0.004058515,
      -0.02059114,
      0.0028552965,
      0.0060536577,
      -0.009087435,
      0.0105593745,
      -0.00035218522,
      0.016544616,
      0.020327345,
      0.014248301,
      -0.005498291,
      -0.0034194824,
      0.013325296,
      -0.01519653,
      -0.0012850474,
      0.0065119388,
      -0.008098211,
      0.0057709944,
      0.0072304117,
      0.0050440156,
      -0.011166321,
      -0.022207087,
      -0.011319965,
      0.019857561,
      -0.034170117,
      0.006200986,
      -0.0053927093,
      -0.007969652,
      0.009368664,
      0.0011436258,
      -0.002471183,
      0.022186646,
      -0.028714538,
      -0.0025425137,
      0.0085026175,
      -0.028524585,
      -0.012487121,
      0.014147434,
      -0.023244705,
      -0.017208554,
      0.00046795188,
      0.0039165304,
      -0.00350004,
      -0.008823241,
      -0.008626969,
      0.006504797,
      -0.00057639147,
      0.018792689,
      0.033195052,
      -0.019616155,
      -0.015862307,
      -0.019300496,
      0.0035542904,
      0.013491024,
      -0.007312876,
      -0.012943921,
      -0.0005096296,
      0.025957748,
      0.00756579,
      0.00060535345,
      0.0128042,
      0.001995813,
      -0.013196327,
      -0.0075856773,
      -0.042599734,
      0.00596683,
      -0.005672156,
      -0.01904384,
      0.0038331035,
      -0.004943916,
      0.015539016,
      0.014005061,
      -0.009424102,
      -0.00039868275,
      -0.0055314396,
      -0.011693304,
      -0.003309016,
      -0.002877735,
      -0.00050023315,
      -0.02014702,
      -0.010834663,
      -0.008211814,
      0.011733297,
      -0.015766276,
      -0.009310186,
      0.004985005,
      0.011145362,
      0.01567114,
      0.014390401,
      -0.013410994,
      -0.00087832427,
      0.005042681,
      -0.013436301,
      -0.015391657,
      0.0066093565,
      -0.012033958,
      0.019803941,
      0.009030049,
      0.00072300696,
      0.0031462451,
      -0.0029040365,
      0.012205738,
      -0.0116975,
      -0.0019357493,
      -0.00687292,
      0.010979544,
      0.023977432,
      0.021795394,
      -0.018888755,
      0.013170681,
      -0.030902289,
      0.009932525,
      0.0147229135,
      0.0031263775,
      -0.01000818,
      -0.019411974,
      0.019604575,
      -0.015409868,
      -0.04664867,
      0.03429459,
      -0.0037813417,
      -0.021397524,
      -0.0051819454,
      0.00013059392,
      0.003539019,
      -0.0059656184,
      -0.0037025088,
      0.019695474,
      0.007389944,
      0.004109589,
      0.01585667,
      0.0038722665,
      -0.0007910044,
      -0.00731916,
      -0.008423135,
      0.00088079576,
      -0.009140805,
      -0.0066536237,
      0.02553011,
      0.010281949,
      -0.010340759,
      0.0013841146,
      0.021090308,
      0.014236383,
      0.009722697,
      -0.013442849,
      -0.014344034,
      0.034995597,
      -0.010327552,
      0.01424087,
      -0.0051434883,
      -0.01282892,
      0.02246811,
      -0.008921181,
      -0.016326608,
      0.0026415202,
      -0.0034505262,
      -0.021772685,
      -0.0032806466,
      0.010126289,
      0.022170098,
      -0.124279864,
      0.010888664,
      -0.014787249,
      -0.00079527596,
      -0.014099541,
      -0.018709103,
      -0.0014094429,
      -0.009006856,
      -0.020938365,
      -0.0076461816,
      0.008916051,
      -0.0215323,
      -0.0012922158,
      0.02308024,
      -0.009614163,
      -0.025323536,
      0.020359792,
      0.033222206,
      0.040127106,
      0.005271938,
      -0.00030470247,
      -0.0020355715,
      0.006127324,
      -0.0060287775,
      -0.041627306,
      0.002141778,
      0.025979193,
      -0.001381167,
      -0.0040071816,
      -0.010714167,
      -0.0025407518,
      0.0039501064,
      0.00018773282,
      0.0028411564,
      0.034578286,
      0.0041631935,
      -0.019948244,
      0.010023796,
      0.018929737,
      0.006184023,
      0.0010804081,
      0.0019822854,
      0.023679137,
      0.024692554,
      -0.0147397425,
      0.010608686,
      0.02353424,
      -0.0027675682,
      0.004354106,
      0.06065077,
      -0.03677027,
      -0.037824158,
      0.0019888028,
      -0.017101847,
      -0.013320242,
      0.008864478,
      0.024869094,
      -0.0019530875,
      -0.023847355,
      0.0029313008,
      0.023382138,
      0.0067528174,
      0.01822838,
      0.029363215,
      -0.02403294,
      -0.011311226,
      0.026059248,
      0.0021344079,
      0.009144215,
      -0.014549046,
      -0.011257806,
      -0.0036927436,
      -0.0074129924,
      0.014589854,
      0.0005868213,
      0.015942866,
      0.0036468334,
      0.02130037,
      -0.0006726633,
      0.023142343,
      -0.0054125898,
      -0.009596826,
      -0.07150126,
      -0.018184254,
      0.009957392,
      0.003889292,
      -0.0062975343,
      0.0069914493,
      -0.025335817,
      0.010703632,
      -0.0022890633,
      0.015411596,
      -0.0016137853,
      -0.007817506,
      0.0049629794,
      0.005790857,
      -0.014127651,
      -0.022296807,
      0.004590604,
      -0.029967036,
      -0.016481113,
      0.015376108,
      -0.010340008,
      0.007093846,
      0.0041942257,
      -0.010449998,
      0.01152082,
      0.029658062,
      -0.034170054,
      0.004623178,
      -0.008282583,
      -0.0028091706,
      0.018964786,
      -0.15619005,
      -0.014532029,
      0.010554921,
      0.015426608,
      0.0028708908,
      0.006498627,
      -0.008537288,
      0.007256173,
      0.013090446,
      -0.033889674,
      -0.0055932347,
      -0.033286568,
      -0.03178433,
      0.0032752363,
      -0.0071688085,
      0.12150204,
      -0.012102173,
      0.025601752,
      0.009048526,
      0.03606644,
      -0.01164202,
      -0.004459314,
      0.004473811,
      0.019822093,
      -0.0076022623,
      0.0033537513,
      0.008949687,
      -0.006859242,
      0.039137278,
      0.0066874796,
      0.016594723,
      -0.02215919,
      -0.013494166,
      0.015202804,
      0.00865183,
      -0.028727446,
      -0.006225411,
      -0.012820425,
      0.006339988,
      -0.010624216,
      0.0027173397,
      0.0146190645,
      0.016511953,
      0.0114756925,
      -0.007417879,
      0.0063900724,
      -0.001476605,
      -0.027985232,
      -0.006533851,
      -0.023494948,
      -0.01232718,
      -0.050029937,
      -0.002431544,
      -0.0036742594,
      -0.0010475606,
      0.036847815,
      -0.0034998995,
      0.0015146079,
      -0.0004707875,
      0.00018051373,
      0.007109004,
      -0.0046025617,
      0.015318269,
      -0.0038110814,
      0.012731361,
      -0.016778754,
      0.0053715087,
      0.0340379,
      0.019324489,
      -0.010497956,
      0.02633356,
      0.012728612,
      -0.017623315,
      0.007370716,
      -0.023169609,
      -0.022754544,
      -0.0043317205,
      0.015576915,
      0.00019090423,
      -0.012895057,
      0.0010509137,
      0.012228555,
      0.0020213588,
      -0.02170968,
      0.012023483,
      -0.017527038,
      -0.021905234,
      0.0065641543,
      -0.008177632,
      -0.017766455,
      0.0006693786,
      0.0019227461,
      -0.009638227,
      0.00023042504,
      -0.030079802,
      0.0015438227,
      0.0019417078,
      0.022669243,
      -0.00071020494,
      -0.0065678107,
      0.00737881,
      -0.006624879,
      0.0127142295,
      -0.01613952,
      0.02583588,
      0.020469924,
      0.021675989,
      0.0071426877,
      0.013595248,
      -0.027717365
    ]
  },
  {
    "id": "genai_cohort_nodejs_04_node_vs_browser_vtt",
    "content": "Do you remember in the last video I said that we have created a script js file and you can write any valid JavaScript code here that is going to run. Actually that was half lie. Let me tell you, if you are from a JavaScript background, that means you have been working with JavaScript with browsers. Tell me one thing, if I say alert, right? And I say, for example, you know this is an alert message, what is going to happen if you run this, this particular piece of code on browser, you will get an alert window, right? So if you don't believe me, let me show you. So if I just open up an inspect element and I go into the console and I do this, you can see that you are getting an alert. Now let's try to run this code, okay, let's try to run this code in the browse in the node js. And what happened as soon as I tried to run this code in my node js environment, I got an error. The error says alert is not defined Piyush. How come this particular code, this alert is working in the browser but the same JavaScript code is not working in the Node js? So here is a subtle difference that you have to understand. See guys, first of all, a lot of things that you use in your JavaScript code is a part of your web API. For example, this alert, this alert is not a part of JavaScript, okay? This is a browser given functionality to you because whenever you call this line, browser gives you this ui, right? This is the responsibility of the browser to render this thing on the ui. But in Node js, which is basically a command line, you don't have these functionalities, you don't have any window, you don't have any ui, you don't have any these alerts. So These browser related APIs, like you have fetch, you have alert, you have document, you have window object that is not available in node js. So that means anything, anything that is related to this window object. So if I just say window, okay, wind, window. So you can see that on the window, window basically means this browser, I have a lot of features on the window. I can have document, add, event listener, I have the document object, I have the set interval, set timeout. So, so there are a lot of features that a browser gives me. Like it gives me the fetch for making API calls. So these all features are actually the features given to you by the browser which are not, which are not available here. Got it. So you can write any valid JavaScript code which is given to you in the native JavaScript, it should not be a feature that is coming from a browser because we don't have a browser window here. This is a, Node js environment. So that means now you have two different environments to run js. One is you have a browser where you can have your js code, you can have your browser APIs. So browser APIs include like things like, you know, fetches there and this alert thing is there, right? But when you move into the Node js environment, these things goes away. You have the core js, you have extra things. Okay, I'll tell you, you have some extra things. For example, you have file system, you have crypto module, you can do crypto typography here. You can do a lot of more things here, right? That is given to you by the Node js. You can do file handling here, but you cannot natively do fetch. You cannot do alert. You cannot do something, sorry, not alter. I mean alert. You cannot do something like document getelementbyid. Because that doesn't make sense here. Okay, so Node js has rewritten all these bindings which are required. For example, okay, understand this. In browser you have this something known as set timeout. Yes or no, you have the set timeout. Do you know that this set timeout is a part of web API? So JavaScript natively doesn't support this. Any clocks, timers or something like that. That's a browser feature that browser gives you. But in Node js also you can use set timeout. It is valid in here also you can use this thing. Okay, so how are you able to use this set timeout? Because when the creator of Node js return this Node js engine, he has reimplemented these APIs. So he has only implemented those parts again which are required in the CLI environment. In the Node js environment also, for example, you might need set timeout, right? You might need set interval, but in any case I don't need alert on my backend. Okay, so these particular things are not present. So these things are, are not present here. Okay, so even though it is JavaScript, but yeah, the JavaScript that you use on browser is not guaranteed to run here, and the JavaScript code that can be run in the Node js is not guaranteed to run here. Depends code. JavaScript will always run, but features injected by the browser API or the Node js API will not work in a cross platform. Okay, so there are subtle differences that you have to keep in mind.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "04-node-vs-browser.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/04-node-vs-browser.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0036197903,
      -0.011573632,
      0.017357327,
      -0.054079328,
      -0.03835987,
      -0.0049032047,
      0.017783314,
      0.0016356064,
      0.014838312,
      -0.008843192,
      -0.007767617,
      0.0002428652,
      0.002056647,
      0.034617014,
      0.12262264,
      -0.007938575,
      -0.013395822,
      -0.0070397765,
      0.012560826,
      -0.016711311,
      0.011645001,
      0.00453185,
      0.019660207,
      0.008628331,
      -0.011536144,
      -0.014160536,
      0.006695641,
      -0.024114622,
      0.017492538,
      -0.040105216,
      0.011362657,
      -0.00756904,
      0.0002232954,
      0.01810548,
      -0.004882641,
      0.042572603,
      0.041134033,
      0.007671673,
      -0.008937905,
      -0.0011245969,
      -0.023778683,
      0.012949092,
      0.027442241,
      -0.017831627,
      -0.009185926,
      0.008905647,
      0.0049539814,
      -0.0015609069,
      0.011427636,
      0.012149352,
      -0.0113297785,
      0.012135185,
      -0.011614079,
      -0.16478905,
      -0.019105097,
      0.018909445,
      -0.014721458,
      0.00912037,
      0.018095963,
      -0.0070015173,
      -0.03196491,
      0.0016538652,
      -0.023109233,
      0.0008627676,
      -0.014976455,
      0.0030358378,
      0.0031688127,
      0.021792874,
      0.007024422,
      0.0020578227,
      0.009728952,
      0.008681246,
      -0.010166499,
      -0.019453263,
      -0.009242804,
      -0.0044660666,
      -0.0055352664,
      0.00810391,
      -0.005307869,
      0.008782853,
      0.0077939164,
      -0.0110217575,
      0.0054095946,
      -0.01877684,
      0.01160785,
      -0.00358371,
      -0.031792577,
      -0.023660319,
      -0.01721241,
      -0.0148806255,
      0.00964255,
      0.0070129996,
      0.0011190695,
      -0.0037127684,
      -0.0048361537,
      0.0026247308,
      -0.009690736,
      0.021140434,
      0.014731925,
      0.01205992,
      0.031611554,
      0.011080218,
      -0.037240554,
      -0.0059203454,
      0.004657273,
      -0.0040994473,
      -0.008064069,
      0.008558035,
      0.014194103,
      -0.034139853,
      -0.005470247,
      -0.0062571736,
      -0.0027354895,
      0.013448938,
      0.004791567,
      -0.192674,
      0.018725142,
      0.009101893,
      -0.0051857135,
      0.022706605,
      -0.018898794,
      -0.00093270256,
      0.0061653666,
      0.008046707,
      -0.011155,
      0.009508216,
      0.010137162,
      0.017063808,
      0.01938727,
      -0.0027109121,
      -0.019652199,
      -0.013782403,
      -0.013294687,
      -0.007183286,
      0.008700005,
      0.02094418,
      0.0071942275,
      0.008015598,
      -0.013497322,
      -0.036788374,
      0.010880264,
      0.03979747,
      -0.004418843,
      0.015395454,
      0.0004801206,
      -0.0020466293,
      -0.015305653,
      0.00903951,
      -0.016544593,
      -0.030997697,
      0.003353781,
      -0.01749,
      0.02560544,
      -0.008981893,
      0.025858704,
      -0.035671167,
      -0.004973055,
      0.019844674,
      0.021833884,
      -0.01637904,
      0.013283536,
      -0.0021389069,
      -0.007019413,
      0.02127403,
      0.012586832,
      0.013672794,
      -0.016920784,
      0.019065276,
      0.002612519,
      0.0110291075,
      0.00593256,
      0.0011864083,
      0.0106682135,
      0.0060482025,
      -0.01381778,
      0.00022565368,
      0.0019229379,
      0.008983072,
      0.02548028,
      -0.0076919794,
      -0.00753936,
      0.004801924,
      0.0074763056,
      -0.0009178311,
      -0.0028473355,
      -0.0042731077,
      -0.014444883,
      0.03230187,
      0.0053642653,
      -0.026362877,
      0.016357,
      -0.032134976,
      0.009314205,
      0.014000794,
      -0.0032092421,
      0.0038364555,
      -0.009419167,
      0.005549735,
      0.018752564,
      -0.0031360528,
      0.0031459245,
      -0.00006739058,
      0.0010855447,
      -0.043060564,
      -0.0039145015,
      -0.009775837,
      0.026829993,
      -0.0067645805,
      0.004658587,
      -0.0069097416,
      -0.001551207,
      -0.023128156,
      -0.008082213,
      0.014596352,
      0.011367834,
      -0.023310613,
      0.024292443,
      0.009669444,
      0.005999072,
      0.001015861,
      0.0136726815,
      -0.01063719,
      0.002397313,
      0.009708225,
      0.0036146583,
      -0.0019827695,
      0.026071567,
      -0.021554789,
      -0.00081705506,
      0.0019399906,
      0.011013191,
      0.008673463,
      -0.028674562,
      0.012026419,
      0.0029377982,
      0.0020237803,
      0.000025620864,
      -0.0014798382,
      0.0059240647,
      0.0062938603,
      0.011679525,
      -0.022766251,
      -0.029069716,
      0.00798453,
      0.049685743,
      -0.005846444,
      -0.0014222619,
      -0.012933246,
      -0.051712424,
      -0.020757038,
      -0.014437263,
      -0.009604973,
      -0.0009592968,
      -0.009720419,
      0.0005398665,
      -0.027360309,
      -0.004945794,
      -0.00417648,
      0.008261006,
      -0.024767665,
      0.0026930044,
      -0.014488602,
      -0.008849752,
      -0.0090346765,
      0.030146718,
      0.0069116573,
      0.0148945255,
      0.018963505,
      -0.024846908,
      -0.006576566,
      0.0060134227,
      0.014122431,
      0.024732439,
      -0.0048340624,
      -0.004128442,
      0.02087258,
      -0.08105265,
      0.0025790345,
      0.017809514,
      -0.019242106,
      -0.0047139977,
      0.010695216,
      -0.015171623,
      0.0051452857,
      0.004627076,
      0.0077695535,
      -0.007787645,
      0.015349493,
      -0.0037104369,
      -0.009018157,
      -0.0011052204,
      -0.000025115003,
      -0.00049141375,
      0.007202783,
      -0.0063116136,
      -0.013567305,
      -0.0123713175,
      0.019522697,
      -0.001290657,
      -0.017181661,
      0.018202499,
      -0.0015286601,
      -0.016637607,
      0.034743294,
      0.023305513,
      0.010531555,
      0.019359564,
      0.015124552,
      -0.02711433,
      -0.0074082585,
      -0.0064212587,
      0.0038017498,
      0.009410198,
      -0.02269852,
      -0.0059089474,
      -0.020773353,
      -0.0033784823,
      -0.0007050623,
      0.01701623,
      0.024931356,
      -0.016507166,
      -0.016902449,
      0.0005743571,
      -0.0073622656,
      -0.021963961,
      0.007860014,
      -0.016965402,
      -0.004217241,
      0.0111500155,
      -0.020261962,
      0.00986388,
      -0.0058585443,
      0.017046703,
      -0.0043398687,
      0.01716711,
      0.005863773,
      -0.0012032673,
      0.0023492333,
      -0.0031967345,
      0.009533392,
      0.016542172,
      -0.015775664,
      0.020673295,
      -0.017758083,
      0.02788022,
      0.008869875,
      0.0050331512,
      -0.0064357477,
      -0.01748013,
      -0.020006448,
      0.00022726008,
      -0.0037194397,
      0.0019556428,
      -0.0054272492,
      -0.022077596,
      0.02167271,
      0.018471597,
      -0.010978011,
      0.016394641,
      0.010813045,
      0.005451364,
      -0.008961246,
      -0.0005378948,
      0.016427187,
      0.0001576572,
      -0.014604823,
      -0.009097293,
      0.023036389,
      -0.0046010176,
      0.0055384054,
      -0.017531032,
      0.012349193,
      -0.033020988,
      -0.017884318,
      0.0045904056,
      0.014761731,
      -0.021564253,
      0.0045586303,
      -0.007240016,
      0.015092477,
      -0.0051173973,
      0.028818786,
      0.008843158,
      -0.0041843425,
      -0.01348903,
      -0.012521271,
      0.0036431516,
      0.00059893855,
      -0.0036704089,
      0.013436207,
      -0.0002610996,
      0.025608955,
      0.018124256,
      0.020044418,
      -0.011219418,
      -0.015122476,
      -0.013974187,
      -0.020965977,
      0.009392746,
      -0.017343389,
      -0.017967224,
      0.0008302957,
      -0.014604145,
      -0.008847936,
      -0.019327665,
      -0.017158413,
      0.0049817283,
      0.018160583,
      -0.023816345,
      0.00678696,
      0.01613452,
      -0.022650473,
      0.003457724,
      0.011172582,
      0.0007911232,
      0.050997097,
      -0.019119967,
      -0.006163495,
      -0.0109788515,
      -0.020474488,
      0.0027404546,
      0.0020549628,
      -0.008846903,
      0.0037601837,
      -0.002125987,
      -0.003739131,
      -0.002596637,
      -0.013231369,
      -0.015537257,
      0.0062253457,
      0.0034818784,
      0.018354617,
      0.018622797,
      -0.015371157,
      -0.0013118897,
      -0.022897642,
      -0.015958112,
      0.017179536,
      -0.03366101,
      -0.0046775956,
      0.017092263,
      0.02274978,
      -0.0099402275,
      -0.0015070017,
      0.002486951,
      0.012023654,
      -0.016908119,
      -0.035855625,
      -0.024168167,
      0.022756403,
      0.006003141,
      0.00080906635,
      0.011084752,
      -0.008834418,
      0.02709656,
      -0.012024335,
      -0.012051075,
      -0.005255607,
      -0.009549745,
      -0.0034945118,
      -0.003152938,
      -0.018027345,
      0.010017779,
      -0.02192424,
      -0.020014161,
      -0.004820358,
      0.004251319,
      -0.015775051,
      -0.009030046,
      0.021727541,
      -0.00070443697,
      0.030295638,
      0.014706858,
      -0.0017827575,
      -0.018407129,
      0.026033793,
      -0.018350678,
      -0.009007303,
      0.0006581305,
      0.001820469,
      0.02047769,
      0.014173928,
      -0.0021124103,
      0.005924488,
      -0.005183258,
      0.014316921,
      -0.022141043,
      -0.007295122,
      0.0003899811,
      -0.00019472599,
      0.025544958,
      0.0009655929,
      -0.01545415,
      0.01140048,
      -0.009516146,
      -0.012395936,
      0.018360637,
      -0.016078377,
      -0.019668793,
      -0.013153547,
      0.0051885177,
      -0.0058816867,
      -0.029727736,
      0.018182516,
      -0.002899824,
      -0.01853263,
      0.00605188,
      0.0036689295,
      0.003446627,
      0.0016307987,
      0.0062971045,
      0.013203913,
      0.015879378,
      0.0042249453,
      0.012321019,
      -0.0047741677,
      -0.0044956068,
      0.00072361657,
      -0.013185272,
      0.00706755,
      -0.0040669977,
      -0.012333059,
      0.030321011,
      0.0033403938,
      -0.0067860684,
      -0.0015925644,
      0.031971484,
      0.002032652,
      0.025358045,
      0.0019359593,
      -0.04535986,
      0.02492215,
      0.013412595,
      0.0026661565,
      -0.0021712175,
      -0.017032739,
      -0.0004453852,
      -0.00040051917,
      -0.022786383,
      0.005512482,
      -0.009712858,
      -0.034269147,
      -0.011298628,
      0.012249454,
      0.019560818,
      -0.11675574,
      -0.0076938663,
      -0.005621643,
      -0.019300183,
      -0.009084843,
      0.00017369978,
      -0.0025336028,
      -0.009220298,
      -0.031402063,
      -0.013998984,
      0.0075149774,
      -0.01825998,
      0.019415066,
      0.0011030127,
      0.011080088,
      -0.005429884,
      0.0059980256,
      0.028856406,
      0.024679858,
      0.008906116,
      0.0017600493,
      -0.00044925325,
      -0.0057708207,
      0.0015936585,
      -0.023044165,
      0.008711066,
      0.025571184,
      -0.0045686467,
      -0.0007452312,
      -0.016635638,
      -0.018872652,
      0.01875184,
      0.005239337,
      -0.008678596,
      0.029420549,
      -0.009440306,
      -0.02416787,
      0.005129305,
      0.015895924,
      0.014750753,
      -0.013585711,
      -0.022553876,
      0.030091472,
      0.010539306,
      -0.021856064,
      0.0015977671,
      0.02345562,
      -0.021341825,
      0.008780739,
      0.057040635,
      -0.036713492,
      -0.02103291,
      0.000456288,
      -0.016462047,
      -0.010571382,
      0.0010505469,
      0.028335152,
      -0.0005703383,
      -0.023889424,
      0.007966842,
      0.010453611,
      0.0029593494,
      0.006488703,
      0.008777817,
      -0.0155999735,
      -0.025651252,
      0.008779858,
      -0.008685214,
      0.013451178,
      0.0050478997,
      -0.008190019,
      -0.003787325,
      -0.008438027,
      0.02654521,
      0.004264366,
      -0.002274038,
      -0.0015213141,
      0.00003022013,
      -0.01938641,
      0.0040239235,
      -0.015547886,
      -0.0017811697,
      -0.07236038,
      -0.015225466,
      -0.00547105,
      0.012113793,
      0.005427349,
      -0.002235126,
      0.0034870137,
      0.014666053,
      0.014825726,
      0.013391533,
      -0.020646727,
      -0.02153394,
      -0.0036625632,
      -0.008349296,
      -0.01668243,
      -0.010196139,
      0.016295724,
      -0.01620754,
      -0.01585599,
      0.014225678,
      -0.0030545213,
      0.008778356,
      -0.0013598,
      -0.009031869,
      0.008407455,
      0.019071527,
      -0.021094281,
      0.016799439,
      0.004350242,
      -0.007930577,
      0.0037236186,
      -0.1553266,
      -0.0071598166,
      0.018853068,
      0.019380838,
      -0.016075695,
      -0.0011288495,
      -0.00028280314,
      -0.012683642,
      0.020287778,
      -0.010873117,
      -0.013974278,
      -0.020552775,
      -0.0071231974,
      0.00941512,
      -0.008071297,
      0.12796566,
      -0.008522922,
      0.01643151,
      -0.0017354307,
      0.009125175,
      -0.011235917,
      -0.0118388785,
      0.016927177,
      0.008244158,
      -0.0049430435,
      -0.016079195,
      0.0017600264,
      -0.012373474,
      0.029722376,
      -0.009666564,
      0.008964944,
      -0.04666576,
      -0.028761113,
      0.031438913,
      -0.0057789353,
      -0.027732607,
      0.009246351,
      -0.022986425,
      -0.006271378,
      -0.0148231285,
      0.0124532385,
      0.009721678,
      0.0083201295,
      0.008200764,
      0.0026911173,
      -0.010614294,
      0.004630194,
      -0.032385673,
      -0.025974052,
      -0.020590818,
      -0.021406362,
      -0.042944938,
      0.005645589,
      0.00055759953,
      0.0005114513,
      0.010408625,
      0.0027350276,
      0.022572068,
      -0.0279842,
      0.011766217,
      -0.011207103,
      -0.01998977,
      -0.0021085797,
      -0.007818818,
      -0.0025976032,
      -0.014955636,
      -0.00014945534,
      0.029491222,
      0.027245188,
      -0.0027968788,
      -0.011624543,
      0.008519355,
      -0.0147546735,
      -0.0033015537,
      -0.016042676,
      -0.026028294,
      -0.0077222893,
      0.020740291,
      -0.022046201,
      -0.010789067,
      0.0049084537,
      0.0017947522,
      -0.0046268255,
      -0.01706665,
      0.0056625605,
      -0.014450023,
      -0.018775335,
      0.016265653,
      -0.012581279,
      -0.012714404,
      0.00599861,
      0.025455581,
      -0.008210488,
      0.008122543,
      -0.006121471,
      -0.0030910298,
      0.025728602,
      0.003794057,
      -0.011266014,
      -0.00090498134,
      -0.0030044713,
      -0.0063495594,
      0.022580957,
      -0.016471384,
      0.03372443,
      0.021872725,
      0.032460637,
      -0.0029443908,
      0.0029568702,
      -0.014891661
    ]
  },
  {
    "id": "genai_cohort_nodejs_05_node_modules_vtt",
    "content": "So hey guys, welcome to another exciting section on Node js series in which we are going to cover about modules. So till now all the videos that we have seen was an introduction to Node js. Yes, three to four videos just for an introduction. Because I want to cover each and everything in depth. So in this particular video, let's see what are, modules. So this is going to be a chapter one and trust me, this is really, really, really easy. So with that, let's start with the video. So what are modules? Okay, so what are modules? So in programming world, when you talk about modules, modules is basically a code, a collection of code that provides your functionality, right? This can be anything. Now in Node js we have three types of modules. Number one, we have like built in modules. Okay, we have built in modules. So what do I mean by built in modules? That basically means that Node js gives you out of the box. So there are a lot of modules which Node js gives you out of the box. Then we have, third party, right? We have third party which we can basically download from the Internet. So these are also known as external modules, okay? These are also known as external modules and we can install them using npm install command. So you remember, right? npm install. So we can install third party modules like you know, from other developers who have published their modules. And then third we have our custom modules. So custom modules or I can just say my own modules. Okay, so these are modules which I can create for my own project and I can use it also known as internal modules. Custom modules. My own modules. So these are three kinds of modules that are available in the Node js. Okay? So first let's try to cover a few built in modules and then we will move to the third party and custom. And these are super duper simple. Okay, so first module that I want to cover is a file system module. Now tell me one thing. If you are from a JavaScript background, can you access the file system in just pure JavaScript? The JavaScript that you run inside the browser, can you access the file system? No, but because Node js is a JavaScript which is built into the C program, they have given you a whole FS module. So this, this is known as an FS module file system module, which helps you to work with the file system on your machine. So let me show you how you have to use it. Okay, so what I'll do is I'll just do a notes or Txt file first of all. And what I'm going to do is I'm going to move all this stuff for your reference to this file, okay? So that we can have a clean code. So what you can do is, first of all we have to import, we have to require the FS module. So how you do that is you have a require function, okay? You have a require function. And in this require function you can basically pass the module name. For example, I want to load the FS module. So what this require function will do is this will basically load the FS module for me and then I can assign it to a variable, let's say fs. So this require function is only and only available to you in the node js environment. So, so require the name of the module and then you have this fs, right? So now what we can do, we can basically try to console log this fs. Let's see, what do we get in the fs? So for the terminal, let me open the integrated terminal. So this is my integrated terminal. How can I open it? So either you can go into the terminal and you can click on the new terminal, or the shortcut for this is Ctrl control plus this till day. Okay? Okay, so this is the shortcut. So I can just say control this and then node and index and enter. So you can see that I am getting a lot of things, right? You can see I'm getting a lot of things. So let's try to understand that. What is this fs? So this FS is a, is an object in which you have functions like you have a function for appending file append file sync, you have access, you have access. Sync, you have count. You have count Sync, you have chmod. So you can see that these are all the functions that are exposed which helps you to manage files. Let's say I want to read a file. Okay, let's say I want to read this file. So what I can do is I can just say fs. read file sync. Now I'll tell you what is this thing. So as of now you can just ignore it. And here let's pass the name of the file that is notes or txt. Okay, so I'm just saying notes or txt and then you have to specify the binary encoding. So I want to read it as a UTF8 encoding. What this is going to do is it is going to give you the content of the file. Okay? If everything goes right, we should have the contents. So let's just do a console. log on the content and let's see what we are getting. So you can see that we are getting this thing. So these are all the contents of this file, right? Let me modify something. Let me just remove all these comments. Okay, so if I just remove all these comments and. Yeah, so. So let's see if I now rerun the program. You can see that whatever I am writing in this file, I am writing. So that is getting console logged, right? So what we are doing here is first of all I am requiring, I am requiring this FS module. All the code of this FS module is being transferred to this FS variable. Feel free to call this variable anything and then I'm calling a function that is read file sync, give the path of the file that is notes Txt in which encoding you want to read. And this returns the content of the file. And then finally I'm just doing a console. log of the content and this is what I'm getting. I'm doing a command K or you can even do a clear to clear how the terminal. So yeah, that's your wish. So this is how you can use. This is a built in module, right? This is a built in module in the node js that is like given to you out of the box and we can use it now Interestingly, the documentation of node js is very interesting. Let me show you. So if you go to node js. org and you go into the documentation, the documentation is well managed. So let's search for FS here. Okay, so file system. You can see we have this file system. So if you click on this file system. So these are all the functions that are available. And if I just keep on scrolling just one second. Yeah, so you can see that what is this file system? This is basically a module that enables interacting with the file system in a way model standard POSIX functions. So you can see that you can do a require and you can require the fs. Now I'll tell you that why they are putting this node thing as of now. Please feel free to ignore this. So you can do a require and name of the module that is FS and then you can basically use it. So all the things are given here, right? So let me try to search for this function. Okay, so you can see that this is how we can use it. So you can just say, you know, you can directly import this read file thing and you can do this. So this is actually they are using the ESM modules. So I'll tell you about that, don't worry. Okay, so all the documentation is given here. Okay? So this is what we have to follow. Now here is the interesting part. Okay? So as of now, let's not go with the documentation because there are few things that is going on crazy here, okay? So my motive in this particular video is to explain you this require function. So let me just copy this function and come into my whiteboard and let me just move it to dark mode so that it doesn't strain your eyes. So let's say that this is the code that you have, right? This is your source code, okay? And let me change the font. Now when you run this code using this command, right? You, you do node and then you do like script js or index js, okay? Not node. I, mean node, right? So what happens? What node does? Node takes your source code, okay? So this is your source file. So this particular thing is basically your index file. Or I can say this is your source file. Now, when you pass your source file, node js will read the contents of your source file, right? So node js will come and it will see, oh, these are the contents of your file. Then what this node js does internally, it has a wrapper function, okay? It has a wrapper function. In this wrapper function, it has a few parameters that it exposes to you. So let me just search here. That, node is wrapper function, okay? Node js, wrapper function and module wrapper. Basically, it is known as the module wrapper. So let me see if I can get the example. Yeah, here it is. So it gives you few variables, like for example, exports. It gives, you require. Okay, it gives, you require. Just one second, let me just type in. And it gives you a, module, right? It gives you the module. So let's have module and it gives you underscore, underscore file name. So, so, underscore, underscore file name and comma, underscore, underscore d name. So this is what. This is basically a wrapper function that is internally made by the node js. Then all of your source code whatsoever, source code you have written is basically injected in this wrapper function. So your source code is basically injected in this wrapper function, okay? Like this. So what if I just change the color so that you have more clarity. So here is your wrapper function, right? And then, okay, and then this is your source code that node J has copied from your command. Then node js will execute the code by just calling the wrapper function. So this is basically the entry point. Now what happens is your Source code is basically running inside a wrapper function. And this wrapper function gives you access to some Features like exports, require module, underscore, underscore file name and turning. That is the reason that I'm able to use this require function. Do you see this require function here? So let me grab a pen. So if you see this require function, this is basically I'm able to use because this require function is in the scope. What if I go into my browser because again this is also JavaScript and I try to say const FS equals to require and I say fs, you will see I get an error. It says that hey, the require function is not defined, right? I'm not able to call this required function. But this code is working here. Why? Because internally you know that this whole code goes inside a wrapper function. Okay, goes inside a wrapper function and basically it looks something like this. So this wrapper function has this require thing and this require function is internally made and maintained by the node js team. So now you understand that from where this require function is coming into the scope that is from this variable. Proceeding further, we will also take a look that what is this module, what is this export, what is this underscore, underscore file name and all that? Don't worry about that. Okay, now let's understand that what this require function works like how this require function works. Okay, so it's basically somewhat like this. So node js gives you a require function, right? So this is your require function. This require function takes a string kind of the module name that you want to load. So this is a module name that you want to load. Okay, how it basically tries to load this module. Now first it is going to check that if you have any third party, if you have any third party installation. Okay? So if you have installed any third party module, it is going to load that and return you the module. Okay? So first it will try to load the third party installation. If you have any third party with this module. If no, it is going to then check what it is going to check that if it there is any built in module of this name. Okay, it is going to check that if you have a built in module. If not, if this is also not the case in this case it will throw an error. Okay, throw an error because that particular module is not found. Piyush, that is fine. But now where is the custom module? Right? You told that, okay, built in module is there third party module, is there custom module? So yeah, I'm Coming to that. So first of all you have to make sure that this part is clear that you do a require you give a module name that you want to require. So it will first try to search in the third party installation if you have installed that module. If not it will go into the built in module. If that is also not the case, it will throw an error. Now this module name is a very interesting thing. Okay, now let me show you that how this module name is very special thing. Let's say you are trying to require. Let me just have a green pen. Let's say you are trying to say require fs. Now you can see that I'm just giving a name. So it will try to search. Hey fs, is there any third party installation? No. Is there a built in module? Yes. So it will give you that. Let's say you do a require maybe something like, you know, JSON web token. So it's a third party. So what it will do is it will first see that hey, do you have a third party installation? Actually JSON web token is a third party, but right now I have not installed it. So it will say oh, I am not able to find the third party installation. So it will try to search in the built in module. There is no built in module such as JSON web token and it will throw an error. That's fine. If you have installed JSON web tokens, it will give you that. Now if I give something like this, okay, so if I say require dot slash let's say math. math. j, something like this. Now here do you notice that this particular thing starts with a dot? Did you notice this dot here? This dot. So okay, so this dot basically is a special thing. This dot basically indicates that hey, I want to search this math js file in the current directory. So this dot, a single dot basically means search in the current directory. Dot dot slash means search go one directory up. Dot dot slash dot dot slash means go to directories up. So whenever your require thing starts with this pattern, you know, dot slash, dot dot slash or something like that, that is where node js knows that it's a custom module, it's a module that you have made. Got it. So right now I'm just doing fs. So it is trying to load the FS from the built in module, right? Because there is no third party module. It's working. But if I say dot slash so now it will throw an error because there is no module, no module not found. And where it is trying to Find this module inside users Piyushkar coding folder node js01 modules index so now you can see that I don't have any FS module, right? You can see that I don't have any FS module. So if I remove this. now it knows. Okay, first I have to search for third party, then I have to search for built in. And it got the built in model, so everything is working fine. Okay, so this is how the require function works. Interesting, right? This require function is very interesting and also it does something known as internal caching, you know. So once you require a module, it also caches it so that it doesn't have to load these things again and again, which I'll show you when we will move to the custom modules. As of now, feel free to ignore it. So in this particular video I wanted to tell that how you can use the require and how you can do the fs. Okay, so let's explore some FS things. Okay, so what all you can do, you can read a, file in a synchronous way. Then what else you can do, you can actually read a directory as well. Okay, so now you have understood that how the FS works. Now here is the thing, guys, did you notice one thing? That whenever I do like FS and I do a dot, I'm not able to get anything. I'm not getting suggestions, right? Because that's a part of typescript typings and that's an external module now. So what we will do is in the next class I'll show you something with npm init. Then we will install the typings and then we will explore some built in modules in node js, which are very, very, very important. And then we will move to the custom modules. Okay, so with that, let's end the video here. I hope you have learned something new. That is how this require function works. So in the next class let's work on the npm thing. So let's meet you right there.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "05-node-modules.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/05-node-modules.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.005951991,
      0.00019360182,
      0.043985482,
      -0.051350348,
      -0.02177916,
      0.015442799,
      0.03500401,
      0.009534302,
      0.008399626,
      -0.0064508272,
      -0.0018887977,
      0.0021502657,
      0.0067958464,
      0.028601395,
      0.12400968,
      0.008680321,
      -0.0074606095,
      -0.0023155315,
      0.021784736,
      -0.032106526,
      -0.0070896917,
      -0.0015955924,
      0.0068774237,
      -0.0066749263,
      -0.005828456,
      0.0061006304,
      0.01212806,
      -0.0029917425,
      0.024778733,
      -0.023390254,
      0.010529933,
      -0.0058507384,
      -0.015240275,
      -0.004065146,
      0.0071341367,
      0.018208193,
      0.019816376,
      0.0108644,
      -0.008820947,
      -0.0035822003,
      -0.010900614,
      -0.000057405367,
      0.019219222,
      -0.03693759,
      0.0064991023,
      -0.01662562,
      -0.00594605,
      -0.010374864,
      0.00606707,
      0.010190527,
      -0.008325824,
      -0.017561214,
      -0.017132262,
      -0.17882301,
      -0.0016746173,
      0.005168728,
      0.0075123855,
      -0.00022138502,
      0.014825767,
      0.002043464,
      -0.01944134,
      0.0070423656,
      -0.036011808,
      0.0019867623,
      -0.016790256,
      -0.028314305,
      -0.0043194415,
      -0.009141063,
      0.013876213,
      -0.02105692,
      0.021126905,
      0.009500082,
      -0.022789484,
      -0.016467217,
      -0.023188721,
      -0.00067495945,
      0.004494445,
      -0.013978666,
      -0.021127159,
      0.0147115085,
      -0.0023588033,
      -0.01307573,
      0.0074700243,
      -0.017747577,
      0.014222701,
      -0.0054964926,
      -0.026195947,
      -0.03780553,
      -0.025642924,
      0.00968337,
      0.0063599013,
      -0.003132725,
      -0.008749142,
      0.009752448,
      -0.01675123,
      -0.0017067251,
      -0.0065940926,
      -0.0039550853,
      -0.010307927,
      -0.0031612634,
      0.03074159,
      -0.0041851504,
      -0.047187675,
      0.012771669,
      0.010355349,
      0.0101368325,
      -0.0040000677,
      0.011439992,
      0.01340738,
      -0.016685555,
      0.0079137655,
      -0.0012624343,
      -0.011781064,
      0.0509432,
      0.018092519,
      -0.1779344,
      0.012419466,
      0.0014853776,
      -0.0076249694,
      0.0061932122,
      -0.02616146,
      0.018281048,
      0.00021882904,
      -0.00937676,
      -0.008032244,
      0.031788934,
      -0.013900431,
      0.01957033,
      0.0037212053,
      -0.004089683,
      -0.022455068,
      -0.012428867,
      -0.014696386,
      0.02493511,
      0.020496577,
      0.020388408,
      0.0065170093,
      -0.006982872,
      -0.015456344,
      -0.011149436,
      0.027694868,
      0.018165838,
      0.0049286527,
      0.014333908,
      0.011645505,
      0.0143640945,
      -0.006078617,
      -0.0009045904,
      -0.019183379,
      -0.031142568,
      0.008277726,
      -0.016951738,
      0.015803736,
      -0.0043593408,
      0.0128442645,
      -0.027334692,
      -0.004575285,
      0.015402661,
      -0.0139285475,
      -0.013441561,
      0.0076550255,
      -0.00761434,
      -0.00866831,
      0.027195573,
      0.015537931,
      0.0069827377,
      -0.013526166,
      0.027212108,
      0.0015210651,
      0.023383902,
      -0.0060350103,
      0.0013371428,
      0.0061898534,
      -0.014247599,
      -0.016433211,
      -0.024653576,
      0.000936388,
      0.00093741366,
      0.009023735,
      -0.014323951,
      -0.0056604478,
      0.0040376,
      0.019787751,
      -0.0062739337,
      0.009698827,
      0.0009189199,
      -0.0065090633,
      0.02116013,
      0.034405943,
      -0.030329283,
      0.012379833,
      -0.034881476,
      0.010928531,
      0.014483607,
      -0.013714734,
      -0.0075323107,
      -0.01894451,
      0.0050031934,
      0.017822558,
      0.01602071,
      0.02972622,
      -0.018872783,
      0.00024079252,
      -0.03688723,
      0.014265308,
      0.003162624,
      -0.017577648,
      -0.0031397443,
      0.014176861,
      0.033400282,
      -0.016409757,
      -0.013329779,
      -0.0056007956,
      -0.0045139096,
      0.021443207,
      -0.01808062,
      0.016285839,
      0.0027549102,
      0.00931837,
      -0.008650455,
      -0.0018271302,
      -0.0073876996,
      0.00011055805,
      0.017842427,
      -0.00068098726,
      0.008149499,
      0.0027266487,
      -0.016081225,
      -0.0020010355,
      -0.009508377,
      0.0121178115,
      -0.016335674,
      -0.010833442,
      -0.004003448,
      0.014927579,
      0.0040280665,
      0.0006609465,
      0.0062153307,
      -0.00006751546,
      -0.019611817,
      -0.006112696,
      -0.007213565,
      -0.0026757033,
      0.0058860104,
      0.039803825,
      0.0038826354,
      -0.014831508,
      0.007857927,
      -0.031642497,
      -0.021276217,
      -0.0051312735,
      0.004622041,
      -0.0082531255,
      -0.00782748,
      -0.0059712334,
      -0.010641112,
      -0.011233729,
      -0.012913569,
      -0.0028582693,
      -0.03249935,
      -0.00086003606,
      -0.011782492,
      -0.032067455,
      0.0047800676,
      0.0115220975,
      0.0031862943,
      0.009723342,
      0.03417662,
      -0.010074326,
      -0.007624021,
      0.017886799,
      0.0065619755,
      0.0038421853,
      -0.0012062486,
      0.009578295,
      0.010270314,
      -0.09816153,
      -0.0036148285,
      0.00852953,
      -0.0102911815,
      -0.0066198893,
      0.016416417,
      -0.0133994045,
      0.030306425,
      0.015970366,
      0.009639224,
      -0.007179196,
      -0.0021286246,
      0.024228131,
      0.007002163,
      -0.00626148,
      0.0042274673,
      0.020343551,
      -0.012207993,
      0.008040397,
      -0.0008733919,
      0.0054735756,
      0.008722376,
      0.0020988618,
      -0.0017849234,
      0.019735273,
      -0.014817603,
      -0.0080300635,
      0.0053048255,
      0.038189348,
      -0.0054862266,
      0.005061326,
      0.014925494,
      -0.017179172,
      0.0036548753,
      -0.00011470049,
      0.0017559956,
      0.02718173,
      -0.015083525,
      0.00008518781,
      -0.015159329,
      -0.030465161,
      -0.018804003,
      0.010195896,
      0.011423395,
      -0.01309662,
      0.0055810567,
      0.006040826,
      -0.00584603,
      -0.018503338,
      0.015637213,
      -0.022179484,
      -0.0039010502,
      0.01952807,
      -0.017150294,
      0.013853929,
      -0.0024974386,
      0.001440584,
      0.008347587,
      0.016571328,
      0.008124064,
      -0.0030207117,
      0.00013479393,
      0.007025186,
      0.005309633,
      0.011365414,
      -0.005306198,
      -0.0006087409,
      -0.0010190952,
      0.0033010195,
      -0.011320542,
      0.008023326,
      -0.0015501042,
      -0.018488547,
      -0.012521004,
      0.001178812,
      0.005541018,
      0.011001682,
      0.0005936412,
      -0.028399244,
      0.015081183,
      0.0218147,
      -0.0013974876,
      0.004433898,
      0.025075931,
      0.0073407744,
      -0.0035182922,
      -0.023363398,
      0.013484628,
      -0.0063288766,
      -0.019053366,
      -0.007997501,
      0.019661557,
      -0.021181412,
      0.005924931,
      -0.0024721196,
      0.02882019,
      -0.018068051,
      -0.007734896,
      -0.007997829,
      0.0154628055,
      -0.018390708,
      -0.0040188343,
      -0.023865057,
      0.012388504,
      0.004036109,
      0.026469443,
      0.004624353,
      0.00053419167,
      -0.0061701746,
      -0.0012508249,
      0.007943812,
      -0.0057455217,
      -0.018040279,
      -0.008869922,
      -0.0077008754,
      0.022707725,
      0.02394844,
      0.029605336,
      -0.0009094299,
      -0.020521987,
      0.014249648,
      -0.006045767,
      0.001867069,
      0.0003362981,
      -0.009310429,
      0.0024760626,
      0.011214971,
      0.004965128,
      -0.01173699,
      -0.006224839,
      0.0049584755,
      0.013693918,
      -0.022759216,
      0.0060101156,
      -0.00960908,
      -0.039917305,
      0.022047905,
      -0.0013133897,
      -0.0063856943,
      0.022609053,
      -0.02512519,
      0.0015253994,
      0.015534494,
      -0.01652041,
      0.007361205,
      0.0150162885,
      -0.016312024,
      0.010791323,
      -0.0039463807,
      0.0068647545,
      -0.006108249,
      -0.00996884,
      -0.012266544,
      -0.013153747,
      -0.0013686763,
      0.011890342,
      0.042400166,
      -0.011085,
      -0.004390905,
      -0.019527754,
      -0.014659831,
      0.0040901247,
      -0.01786369,
      -0.007917351,
      0.015493816,
      0.023513852,
      -0.020276606,
      0.004156494,
      0.0029030684,
      -0.011272367,
      -0.030974003,
      -0.020600704,
      -0.030262215,
      0.017501274,
      0.0031982567,
      -0.01612405,
      -0.0018040953,
      -0.004581884,
      0.026925376,
      0.0049842205,
      -0.013348356,
      0.0040256,
      -0.013865239,
      -0.004289357,
      -0.014754256,
      0.010875559,
      0.015152941,
      -0.021353925,
      -0.016619636,
      -0.020225095,
      0.017771505,
      -0.037345186,
      -0.005006158,
      0.00049471133,
      0.02327031,
      0.026187731,
      0.007261712,
      -0.008759714,
      -0.004768475,
      0.008996412,
      -0.012318905,
      -0.01931591,
      0.015173924,
      -0.015221881,
      0.006858111,
      -0.0010855624,
      0.014988798,
      -0.003814513,
      -0.010451184,
      0.002988022,
      -0.00905384,
      -0.024153752,
      -0.005023157,
      -0.008566993,
      0.008533506,
      -0.0033955774,
      0.0071878997,
      0.0041309516,
      -0.03994527,
      -0.004486804,
      0.030001655,
      0.00025231286,
      -0.013303634,
      -0.010150979,
      0.014437077,
      -0.017950077,
      -0.03304806,
      0.024043277,
      -0.01928222,
      -0.0051718126,
      0.002020886,
      -0.0053697247,
      0.0114599895,
      0.01356662,
      -0.019935556,
      -0.00291609,
      0.010265188,
      0.018498372,
      0.004105726,
      0.01015259,
      0.0018262545,
      0.003992812,
      -0.012483046,
      0.01602884,
      -0.008043809,
      -0.008343473,
      0.024928765,
      0.0115134865,
      -0.0024417145,
      -0.0050755655,
      0.010049574,
      0.0032184653,
      0.006082734,
      -0.002061855,
      -0.022778008,
      0.027405065,
      -0.020424265,
      0.0037414099,
      -0.017284796,
      0.0022484022,
      0.0058009666,
      0.0057200654,
      -0.015320586,
      0.009516557,
      -0.013856548,
      -0.019405171,
      0.010443854,
      0.01997893,
      0.027603962,
      -0.11666966,
      0.0010851048,
      -0.0019311459,
      -0.009763601,
      0.010280949,
      -0.008496143,
      -0.006864579,
      -0.027676355,
      -0.009825487,
      -0.009148537,
      0.010808533,
      0.015062657,
      0.010757337,
      0.009487235,
      -0.0007736125,
      -0.01805361,
      0.004257848,
      0.023960274,
      0.038740832,
      -0.0014075295,
      0.004590241,
      -0.0015004714,
      0.0042232233,
      0.0030116232,
      -0.023788475,
      0.012228027,
      0.014133759,
      -0.0043629454,
      -0.0129233925,
      -0.012040545,
      -0.0038500733,
      -0.012060213,
      0.002455987,
      -0.007285661,
      0.03621901,
      -0.00092423556,
      -0.0056751454,
      0.012751578,
      0.011203708,
      0.009238735,
      0.011434996,
      0.0060324,
      0.018838564,
      0.011726277,
      -0.00017529666,
      0.019110402,
      0.027763471,
      -0.020668136,
      -0.000945385,
      0.05339483,
      -0.04929281,
      -0.034590885,
      -0.0013328614,
      -0.015478462,
      0.010403023,
      0.0028884604,
      0.024261735,
      -0.008037598,
      -0.017951315,
      0.01222567,
      0.012363781,
      0.0024490529,
      -0.007598156,
      0.0122324405,
      -0.013793219,
      -0.011547835,
      0.029813293,
      -0.0017399505,
      0.014983965,
      -0.007161591,
      -0.000099793666,
      -0.009502998,
      0.0061660325,
      0.015728613,
      0.002178679,
      0.0062226956,
      -0.0039986903,
      0.023691399,
      0.004435154,
      0.011766766,
      -0.0044326573,
      0.007934617,
      -0.07364319,
      0.00011912727,
      0.008979242,
      -0.0037576412,
      0.015606048,
      0.013628885,
      -0.006381263,
      0.017945291,
      0.009409831,
      0.0076524005,
      -0.017023308,
      -0.00933937,
      -0.012061257,
      0.004361436,
      -0.010323657,
      -0.008215391,
      0.0033617022,
      -0.025792982,
      -0.025327528,
      0.016977504,
      0.0000059333006,
      0.0012566736,
      -0.0057778144,
      -0.011546875,
      0.020058073,
      0.014661153,
      -0.018133994,
      0.011849255,
      0.008669116,
      -0.016192082,
      0.0034349358,
      -0.15263993,
      -0.016336529,
      0.0073241605,
      0.010229124,
      -0.0034013046,
      -0.012788069,
      -0.0055926396,
      0.009457644,
      0.013872962,
      -0.03209882,
      0.0067705982,
      -0.028429015,
      -0.006129523,
      -0.0043877447,
      0.006992377,
      0.12412864,
      -0.0003001652,
      0.005400894,
      0.018889561,
      0.024787614,
      -0.01519122,
      -0.023264457,
      0.0030976832,
      0.028887007,
      -0.0029904093,
      -0.006244975,
      0.014732467,
      -0.005074209,
      0.037319046,
      0.003479272,
      0.006380926,
      -0.026609307,
      -0.013834738,
      0.019643916,
      -0.012708037,
      -0.007731178,
      0.0135426605,
      -0.016792893,
      -0.011088027,
      -0.0056511224,
      0.013140314,
      -0.00047459244,
      -0.0016703547,
      0.0073470366,
      0.007884541,
      0.010582325,
      0.016472535,
      -0.016629267,
      -0.022375794,
      -0.008426282,
      -0.011867572,
      -0.05594917,
      0.0074708415,
      -0.005576225,
      0.0027176745,
      0.031586338,
      -0.022618515,
      -0.008988275,
      -0.021420835,
      -0.012807627,
      0.00498454,
      -0.007002912,
      0.01697431,
      0.00513801,
      -0.0033409887,
      -0.014484959,
      -0.000022974227,
      0.029361188,
      0.026542963,
      -0.0046826946,
      0.0075755864,
      0.021635307,
      -0.01142638,
      0.005442948,
      -0.022188345,
      -0.021003671,
      -0.013402837,
      0.016841702,
      -0.008888451,
      -0.018150011,
      -0.0026555646,
      -0.006810487,
      -0.0121548725,
      -0.033514466,
      0.004768623,
      -0.0017662027,
      -0.014913864,
      0.023694241,
      -0.00040104083,
      -0.011692401,
      0.0027860194,
      0.012198007,
      -0.0059604426,
      0.01697151,
      -0.012972061,
      0.0113629345,
      0.0046526105,
      0.011474273,
      0.010903787,
      -0.0026551795,
      0.016255,
      0.005036743,
      0.002346355,
      -0.022853412,
      0.020926557,
      0.011186677,
      0.022129262,
      0.021777771,
      0.0033084666,
      -0.011250429
    ]
  },
  {
    "id": "genai_cohort_nodejs_06_node_third_party_modules_vtt",
    "content": "Okay, so in this particular video, let's quickly jump on to the npm first and then we will revisit this topic. So, yeah, so in between we have to jump onto the npm topic. Okay, that is very important. And then we will come back to this thing. Okay, so what was npm? npm was basically the Node Package Manager, right? Node Package Manager. Now if, now, interestingly, if you will Google the full form for npm, then this is not the official one. Actually, there is no official full form for npm. So this is what everyone suggests that that is Node Package Manager, because that makes sense. It is responsible for managing the packages. Okay, so let me show you that. Let's say I want to install the typings, okay? So what are, these typings? Basically, right now you can see that when I do FS dot, I am not getting any typings, right? The VS code is not aware that what this fss to make VS code aware, we have to install a package, okay? We have to install a package that is at the rate types/ node. So this is a package name, right? This is a, external package. This is maintained by Microsoft. And this is an external package that we have to install. So how can I install this package into my, this particular project? Now, for that, for that, first of all, I have to make this project as a package. This is not a package, right? Right now I'm just having a single file. I'm just running it. It's fine. But this is not a package. So for that, what you have to do is on the root of your folder, on the root of your project folder root basically means this is the root. On the top level, you have to create a file that is package JSON. Okay? So this is basically the rule that what you have to do is you have to create a file whose name is package. JSON. exactly. This, this package. JSON is kind of like a configuration file for your project, okay? It's like a configuration file. Now what this configuration can contain, this configuration can contain the name of your project. This can contain the version of your project. This can contain all the scripts that your project supports, and it can support it. It also holds something known as dependencies. Dependencies basically means that what external packages to load in order for this particular project to run. So that means that your project is dependent on which, which, you know, libraries or modules, that is your dependencies. Now, usually we don't create this package or JSON on our own. So for that we have a command that is npm init So when you run this command, this will automatically create a package JSON file for you. So let me do an enter so you can see that it is asking me few questions. For example, what is the name of your package? So it is by default taking the modules. So you can just say modules enter. What is the version of your project of your package? Let's go with one. Do you want to add some description? It's optional. I mean if you want to do you can. I'll skip what is your entry point, that is index js. What's your test command? Let's just go ahead, go ahead, go ahead. Author everything okay, fine. Now did you notice that I got a package JSON file? This CLI. This command of npm init created a package. JSON file for me. Right now this contains the name. Feel free to change it. So this is the name of my project. This is the version, I can update the version. Let's say I want to release version 2, version so I can do that from here. Then you have main that this is your entry point. Then you have all the scripts that your project can support. And right now there is no dependency. Can you see any dependencies? No, there is no dependency. So let's add a dependency. So keep in mind this dependencies always keeps track of third party deps. Okay, Third party dependencies. So right now my project is not having any third party dependency. So let's install npm. Install a third party dependency, that is this. Okay, so you have to basically type npm install at the rate types slash node. So let me just do an enter. So what this is going to do is this is going to download this. Now see what happened? Do you see that? Automatically I got a, dependencies. And right now my project is dependent on this particular dependency. And this is the version, this is basically the latest version. And now I have this dependency. And interestingly, a new folder is created of node modules. As soon as you did npm install, a new folder appeared that is nodemodules. Now what is this folder? Now this is a folder which you never touch. Whenever you install a third party dependency or a package or whatever you want to call the source code of this third party dependency is actually kept in the node modules. Okay, so when you say, let's say npm install package name, whatever package you want to install this command. Okay, so let's say this is npm. You can even do npm I so let's say npm install this command, fetches this package from the Internet. Okay? So I'll show you from where it fetches, okay, from the Internet. And from the Internet it gets the source code and keeps it inside the node modules. So right now you can see we have at the rate type slash node. So in the node modules you have at the rate types in which, in which you have, you will have node. Okay, so it can be a file. So if I just go on, where is that? Yeah, so it's basically at the type slash node only. You can see we only have one folder node. And this is all the code that is being fetched. Okay? So this is the source code of this particular dependency. Now what will happen is, now what you will notice is that when I do fs. you are actually getting all the suggestions because now what is happening is your VS code is aware of all the dependencies and everything that is available. How? Because this particular thing is here. Got it. So this is the thing that is giving all the information to the VS code that what all options, what all functions, what all interfaces are available on this FS module. Got it? Now what if I delete this folder by mistake? Actually, yeah, you can delete this folder right? Right. Now what happened? That folder got deleted It. Interestingly what I can do is I can just say npm install, what this npm install will do. This will read your package or JSON file and it will see, oh, this is a package that you are using and you don't have this node modules. So just do an enter and it will bring back it. So you don't really have to worry about node modules. One more thing. If you are built, if you are working on a project and your project has, let's say dependencies, okay? Now you know that all these dependencies will be a part of your package JSON, right? This package or JSON will keep a track. If you share this project with your friend, there is no need to share the node modules. So you can just remove the node module. So even if you are working with git or GitHub, you can ignore the node modules to be shadcn. Okay? So node modules you never ever push on the GitHub because you know these are very bulky. Your friend will just take the source code and he will run the command that is npm install. His npm install will automatically read the package JSON, fetch all the packages from the Internet and create a node modules folder for him. So whenever you want to share your project, no need to share this node modules folder because this is automatically generated so anyone who has an Internet access can fetch back this node modules and sharing this will not cause any issue. But it's very heavy in size. Okay, so now you understand that what is happening. So package JSON is a manifest or a configuration file for you. It keeps tracks of the dependencies and. And when you do npm install, it basically reads your dependencies list and tries to install everything back. Okay? And there are even some shortcuts. So you can just say like for example, npm I. So that also works. No need to write npm install. You can even do npm I at the rate types slash, node and enter. So this also works. It is now becoming very fast because I already already have the code. So it is not basically installing it. Okay, now there is one more file that is this package hyphen lock JSON. This is also a file which is automatically generated. Okay, now what this file maintains you never touch this file, this package log file. Okay, so you have this package hyphen lock JSON file. This lock file maintains dependencies of dependencies. Let's say you are working on a project A. Your project A is dependent on project B. This project B is internally using project C and it uses project D to work. So when you install project B, this automatically also installs project B, project C and D, right? Because in order to use B, C and D should also be there. So all this track, right? That which project is dependent on which project and internally dependent on which project that all information npm internally stores in this particular file that is Package hyphen lock JSON. Okay, so you can see that, you know, this particular thing depends upon this thing. Do you see that? Like if you see there is something known as unit decade types. Did you installed this thing? No, how this came? Because this package that I wanted to install further depends on this particular thing. So. So that is the reason that this is also installed. So where it is kept track in package hyphen lock JSON. So I have just said, Hey, I just want this package lock has fetched the dependencies of this thing and there is a chance that this package that is this package further depends on something which is not here in the case. But yeah, that is also possible. So that is what package hyphen log maintains. And even if you delete this package hyphen log, that's fine, you can just do an npm install and that will also be regenerated. Okay, so you have to just maintain this package JSON file. If you lose this package JSON file? Yeah. Then that's a problem because then you have to again create this file and you have to list down all the dependencies. So this package JSON file and your source code is something that is very important. Rest all things are regeneratable.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "06-node-third-party-modules.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/06-node-third-party-modules.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0023498058,
      0.010908254,
      0.026368896,
      -0.06054113,
      -0.0039549842,
      0.023162963,
      0.024999103,
      0.007929496,
      0.0068479055,
      -0.008440595,
      -0.003006925,
      -0.0037420099,
      0.013926925,
      0.005775954,
      0.111261964,
      0.004321852,
      -0.008147587,
      0.008637008,
      0.007660929,
      -0.03282708,
      0.003677975,
      0.0012191962,
      0.018648472,
      -0.010718013,
      0.004813096,
      -0.008812117,
      0.0097462125,
      -0.018760093,
      0.027316717,
      -0.013328805,
      -0.013226883,
      -0.00073197694,
      0.000034551253,
      0.011884122,
      0.024719127,
      0.013050114,
      0.006014329,
      0.0038978946,
      -0.0074154735,
      -0.0014566403,
      -0.024579458,
      0.016196202,
      0.0015272218,
      -0.021388216,
      0.0009491233,
      -0.0207193,
      -0.0010797386,
      -0.0038232505,
      0.0005570089,
      0.0033583432,
      0.010157093,
      -0.017643875,
      -0.02570916,
      -0.17733294,
      -0.011359882,
      0.0011023234,
      0.021993482,
      0.0045035975,
      0.010476426,
      0.011637536,
      -0.03303578,
      -0.009596619,
      -0.03905585,
      0.017443016,
      -0.0054295626,
      -0.008447294,
      0.011846392,
      -0.0037477836,
      0.016117394,
      -0.014489925,
      0.020726867,
      -0.005824576,
      -0.012640168,
      0.00063291425,
      -0.01946829,
      -0.006921051,
      0.0125227105,
      -0.026702812,
      -0.0144372,
      0.017740235,
      -0.008994213,
      0.0025599266,
      -0.0027267018,
      -0.01893321,
      0.010215257,
      -0.0021571561,
      -0.020770809,
      -0.020291751,
      -0.029624885,
      0.0105025405,
      0.0009844593,
      0.0014514378,
      -0.012256084,
      0.011933141,
      -0.022874536,
      0.011068974,
      -0.011569674,
      0.010399674,
      -0.009627922,
      0.0029966875,
      0.031262152,
      -0.00021538736,
      -0.03129631,
      0.0018880371,
      0.008416412,
      0.035151612,
      0.007888792,
      0.0058023343,
      0.011334354,
      -0.025631402,
      -0.006229834,
      -0.012514995,
      -0.0064784684,
      0.030073693,
      0.00028318958,
      -0.18537228,
      0.02599363,
      -0.018978402,
      -0.009472188,
      0.010081692,
      -0.023229424,
      0.0055998308,
      0.006315815,
      -0.009555858,
      0.0014030328,
      0.008030985,
      -0.002059532,
      0.023812935,
      0.008954623,
      -0.008811336,
      -0.011147492,
      -0.005771108,
      -0.01788849,
      0.016348457,
      0.026550973,
      0.019700177,
      0.012811793,
      0.008102735,
      -0.0000769724,
      -0.024943596,
      0.009539273,
      0.013882229,
      -0.00037190496,
      0.02897809,
      0.011824705,
      -0.0046525854,
      -0.0031559581,
      -0.0030383095,
      -0.01335801,
      -0.024648255,
      0.013486348,
      -0.020440983,
      0.01583381,
      -0.00021186763,
      0.02633035,
      -0.018038422,
      -0.013876169,
      0.024412995,
      0.0029503899,
      -0.00577638,
      0.016265612,
      0.006849152,
      0.008139855,
      0.031907767,
      0.031469215,
      0.009735901,
      -0.017327016,
      0.021151992,
      0.01222227,
      -0.002232404,
      0.0030738737,
      -0.0142937265,
      0.02585521,
      0.0074397773,
      -0.015329981,
      -0.009745854,
      0.0077512804,
      -0.005109647,
      0.018465402,
      -0.031835094,
      0.009094585,
      0.0036578767,
      0.011796063,
      0.011935836,
      0.01632028,
      -0.00641068,
      0.0030310852,
      0.012735038,
      0.026783086,
      0.00069702667,
      0.0038472533,
      -0.02287184,
      0.009152012,
      0.0076210382,
      0.003309271,
      -0.014749039,
      -0.00743686,
      0.021520179,
      0.014603061,
      0.013729371,
      0.01317089,
      -0.004936231,
      -0.007278412,
      -0.0134311505,
      0.027746553,
      0.020407567,
      0.0075474484,
      -0.014645233,
      0.01259306,
      0.0104228705,
      -0.025674729,
      -0.020641573,
      -0.005037298,
      0.014301502,
      0.00991982,
      -0.0063079875,
      -0.004251243,
      0.012913742,
      0.011725097,
      -0.017755806,
      0.0014119511,
      -0.010688454,
      0.015900878,
      0.02271937,
      0.017266508,
      0.008052306,
      0.011852275,
      -0.0001629622,
      0.0052178875,
      -0.023226745,
      0.0010502863,
      -0.0008948301,
      -0.01637094,
      -0.01094528,
      0.011366406,
      -0.012532589,
      -0.017141098,
      0.0033171393,
      0.0025117872,
      -0.0058201686,
      -0.006768994,
      0.0012600969,
      -0.023904765,
      0.0055746064,
      0.029295377,
      0.00043189133,
      -0.01754596,
      0.0020918814,
      -0.014770955,
      -0.0013637174,
      -0.024234237,
      0.009228346,
      -0.016984103,
      -0.008778897,
      -0.007711712,
      -0.010763996,
      -0.004109889,
      -0.0006734957,
      -0.020301586,
      -0.034499913,
      -0.0039080535,
      -0.012641156,
      -0.027096242,
      -0.007266438,
      0.0063145356,
      -0.0009678818,
      -0.004411983,
      0.025910962,
      -0.027285624,
      -0.0061002932,
      0.012506743,
      0.018382454,
      0.008769141,
      -0.015664876,
      -0.016999299,
      0.0075668497,
      -0.096932195,
      -0.003025925,
      -0.010079816,
      -0.033152588,
      0.00052017544,
      0.009564619,
      0.0029502197,
      0.022886097,
      0.02865872,
      0.0022666268,
      -0.01731339,
      0.0002598227,
      0.010272978,
      -0.0010845355,
      -0.0032892087,
      0.0033444818,
      -0.0044766054,
      -0.0049589635,
      0.005179122,
      -0.004196903,
      0.0028834895,
      -0.000047492074,
      0.0011412197,
      0.005818731,
      0.032676894,
      0.009317716,
      -0.017924026,
      0.023700194,
      0.023800978,
      -0.019004205,
      -0.012024559,
      0.01691175,
      -0.015398285,
      0.000677829,
      -0.00588532,
      -0.0076592914,
      0.03167726,
      -0.017811669,
      0.0030775645,
      -0.02634479,
      -0.006914424,
      -0.005821855,
      0.017802788,
      0.004899817,
      -0.021674108,
      0.013504406,
      0.0014632589,
      -0.021519627,
      -0.025346406,
      -0.005036736,
      -0.005701955,
      0.0012385078,
      0.006335209,
      -0.016550181,
      0.01113322,
      -0.00009281419,
      -0.0033403293,
      0.013602353,
      0.02852208,
      0.021642998,
      -0.012112652,
      -0.0028233028,
      0.004220559,
      0.005066792,
      0.014802213,
      -0.001989726,
      -0.0020937715,
      0.0041478775,
      -0.0021038118,
      -0.0026805066,
      0.0015175546,
      -0.023081008,
      -0.023627803,
      -0.023919648,
      0.016287299,
      0.0021998994,
      0.010903172,
      0.0078244135,
      -0.0199592,
      0.0068604345,
      0.011080189,
      0.015557037,
      0.024370015,
      0.01447272,
      0.0031292997,
      -0.009426695,
      -0.008466003,
      0.00926496,
      -0.006995696,
      -0.020592898,
      0.014089992,
      0.031215077,
      -0.003951327,
      0.0042635775,
      -0.013295552,
      0.019192178,
      -0.024837282,
      -0.023669908,
      -0.000698673,
      0.014286636,
      0.015316398,
      -0.020091146,
      -0.027609363,
      0.013703493,
      0.0028682945,
      0.026574176,
      -0.012088443,
      0.0064365226,
      -0.0013936893,
      0.0019777277,
      0.006143661,
      0.001610592,
      -0.0016318485,
      -0.020677036,
      -0.00927267,
      0.008767012,
      0.011063856,
      0.0182281,
      -0.014373259,
      -0.01321145,
      0.0010036544,
      -0.011860352,
      -0.006375791,
      0.022506287,
      0.00013306623,
      -0.006795615,
      0.010662791,
      -0.010845285,
      -0.007359868,
      -0.012883405,
      -0.0016958611,
      0.012752865,
      -0.037407253,
      -0.0116000315,
      0.010032769,
      -0.03355448,
      0.024166659,
      -0.0114086615,
      -0.0016361227,
      0.045428652,
      -0.028119152,
      0.009907839,
      0.02648737,
      -0.021948967,
      -0.010126356,
      0.00877426,
      -0.025872108,
      -0.0116256345,
      -0.0023854903,
      0.009688645,
      0.0071335654,
      -0.008918876,
      -0.00743898,
      0.004929574,
      0.0056540743,
      0.0019377288,
      0.037628498,
      -0.005625371,
      -0.014910428,
      -0.032019753,
      -0.004217797,
      0.028294194,
      -0.0132779665,
      -0.00253671,
      0.005313882,
      0.03469544,
      0.0017264119,
      0.006230204,
      -0.015546809,
      0.0031374753,
      -0.030127691,
      -0.009970524,
      -0.041238323,
      0.007836014,
      0.029255066,
      -0.01101751,
      0.012201172,
      0.016104918,
      0.012015536,
      0.010172527,
      -0.010546977,
      -0.00017447559,
      -0.00952445,
      -0.007749635,
      -0.008513766,
      0.002571579,
      0.008477089,
      -0.009150252,
      -0.012902119,
      -0.022185635,
      0.016202701,
      -0.027569182,
      0.0034690022,
      -0.013943913,
      0.012533043,
      0.025160762,
      -0.0056047793,
      0.007805703,
      0.01657035,
      -0.0065110386,
      -0.008674481,
      -0.0049816174,
      0.015929814,
      -0.020809278,
      0.021837888,
      0.0001893939,
      0.017282672,
      -0.015782688,
      -0.0004734468,
      0.02954783,
      -0.012502535,
      -0.020543952,
      -0.0074105235,
      0.002304637,
      0.007720919,
      0.019651238,
      -0.021865793,
      -0.00015230016,
      -0.034839742,
      0.0085757105,
      0.02710028,
      0.0014751011,
      0.004341655,
      -0.0073388238,
      0.022148626,
      -0.012204894,
      -0.031401493,
      0.021808174,
      -0.00014292644,
      -0.026516674,
      -0.017433088,
      -0.000103423314,
      0.017507575,
      0.013148633,
      -0.014037493,
      0.0075194193,
      0.003025781,
      0.015816042,
      0.01934288,
      -0.0063459883,
      -0.0032938004,
      -0.023514096,
      -0.0017719661,
      0.020942051,
      -0.012153888,
      -0.011102517,
      0.025847945,
      0.008244025,
      0.00086325087,
      -0.015272186,
      0.00022755963,
      0.0016368163,
      0.0076322225,
      -0.010625385,
      -0.0038942213,
      0.028587071,
      -0.024229614,
      0.008309626,
      -0.0033508057,
      -0.003661312,
      0.014246418,
      -0.011261733,
      -0.004932667,
      0.0028853687,
      -0.012806312,
      -0.019374026,
      0.026982374,
      0.00958275,
      0.034420133,
      -0.117144026,
      -0.013719864,
      -0.005259217,
      0.007837226,
      0.013127508,
      -0.018043699,
      0.01691563,
      0.0015007653,
      -0.0134881465,
      -0.010602742,
      0.0071526566,
      -0.016758688,
      0.0086975675,
      0.017340144,
      -0.004253444,
      -0.0034079652,
      0.008683103,
      0.018660845,
      0.023302978,
      -0.0020602357,
      -0.014942733,
      0.020133711,
      0.012310624,
      -0.0047810874,
      -0.031325065,
      -0.000011929668,
      0.020441504,
      -0.00520829,
      0.0023643964,
      -0.016460322,
      0.001713493,
      -0.0052896608,
      0.008523132,
      -0.005869926,
      0.037279516,
      0.0080531165,
      -0.012703718,
      0.02345112,
      0.008988576,
      0.013480281,
      0.017051354,
      0.015671032,
      0.021890676,
      0.027912587,
      0.004697005,
      0.0114899445,
      0.036383975,
      -0.001106565,
      0.0036396764,
      0.060170136,
      -0.035923515,
      -0.02532726,
      -0.005620964,
      -0.015319852,
      0.0072537027,
      0.008096592,
      0.02703402,
      0.0040661953,
      -0.015018556,
      0.005282961,
      0.010233478,
      0.0083511155,
      0.011034807,
      0.021610172,
      0.0048951157,
      -0.0041995007,
      0.010293845,
      0.009299565,
      0.01267669,
      0.0003194051,
      0.005210373,
      0.002282134,
      0.0061145755,
      0.005395838,
      0.00055656594,
      0.006150597,
      0.004077307,
      0.025192061,
      0.0025979932,
      0.01819688,
      -0.007027904,
      -0.009497668,
      -0.07430123,
      -0.0060374755,
      0.0061797546,
      -0.0013201407,
      0.027159963,
      0.0066781756,
      -0.021134399,
      0.016824711,
      0.0017893472,
      0.007666649,
      -0.004300572,
      0.0017002675,
      -0.0039818482,
      -0.0043309517,
      -0.014025547,
      -0.0062952945,
      -0.00007345512,
      -0.02768067,
      -0.010980065,
      0.017066719,
      -0.006995057,
      0.00998155,
      -0.0012164101,
      -0.02442168,
      0.003613065,
      0.027312437,
      -0.022132538,
      0.006082111,
      0.0136418715,
      -0.016240276,
      0.014538974,
      -0.15468764,
      -0.001396023,
      -0.004542225,
      -0.0029174038,
      -0.007260369,
      -0.004410441,
      -0.004049674,
      -0.009483495,
      0.010775692,
      -0.014611205,
      -0.0036339657,
      -0.033967346,
      -0.031362195,
      -0.0026021262,
      0.0015500217,
      0.13122612,
      -0.007871297,
      0.015170631,
      0.010404375,
      0.022289684,
      -0.01774203,
      -0.015073526,
      0.0058110827,
      0.022043597,
      -0.001731681,
      -0.00004797941,
      0.017680254,
      -0.027614206,
      0.029009921,
      0.0017647835,
      -0.011629895,
      -0.015991494,
      -0.009892104,
      0.008658765,
      0.0015346325,
      -0.036040265,
      -0.0073925424,
      -0.014877101,
      0.0023554699,
      -0.0036145735,
      -0.015779788,
      0.002529725,
      -0.0033079637,
      0.008728468,
      0.0006541566,
      -0.0030417677,
      0.016352192,
      -0.04312005,
      -0.011572137,
      -0.020841492,
      -0.014159902,
      -0.06704423,
      -0.002856666,
      -0.00640718,
      -0.00908401,
      0.048201673,
      -0.0019456219,
      0.0033804835,
      -0.005260113,
      0.0044084303,
      0.009256281,
      0.015551018,
      0.027597524,
      0.0009066727,
      0.009147897,
      -0.01719347,
      0.017831255,
      0.028357388,
      0.028389081,
      -0.011432703,
      0.008815556,
      0.008450365,
      -0.008846663,
      0.011669722,
      -0.026847733,
      -0.026033038,
      -0.0183365,
      0.018627029,
      0.008779303,
      0.002683896,
      -0.0051301657,
      0.019127645,
      -0.00143752,
      -0.018206168,
      0.000109214576,
      -0.022994675,
      -0.014945332,
      0.01735857,
      -0.01938207,
      -0.01496298,
      0.0019197504,
      0.021410787,
      -0.0017546577,
      0.004335913,
      -0.01046811,
      -0.004257227,
      0.0014030674,
      0.008987149,
      0.027595634,
      -0.0046955734,
      0.007160383,
      -0.008480888,
      0.013784213,
      -0.02571327,
      0.020283664,
      0.029117152,
      0.0014474924,
      0.012390965,
      -0.002130686,
      -0.008604398
    ]
  },
  {
    "id": "genai_cohort_nodejs_07_node_fs_module_vtt",
    "content": "Okay, so now we have a very good knowledge on this require function on this package JSON, something on npm in it. So now let's explore the FS module and there is something really new that I want to tell you. Okay, so what I'm going to do is I'm just going to remove all the code from here. So right now you can see in my package JSON I have this thing that we have already seen in the last video. So now what I'm going to do is let's explore the FS module. So what I can do is I can just say const FS equals to require. Okay, now I can use require and I can just pass in the fs. So now you can see that the recommendation system is working very good. You can see we have a lot of packages and I can say fs. Now here is one thing. Okay, this is something very new. Now you can say either FS in documentation, you will see something like this, right? So if I open the documentation, so you can see that they are importing in this particular manner, I. e. node colon fs. Now this is a relatively newer thing. If even you say require fs, this is going to work fine. But in the newer versions of Node js they are actually moving, they're adding a support for a namespaced this thing. So this avoids the conflict. So tomorrow if you have an FS module, which is a third party module as well, this will avoid the conflict, right? So this is telling the node js that hey, this is a built in module. So this is a relatively newer thing. Older versions of Node js don't have it. It's only newer version. So I also prefer this only. So this makes this explicit that if there is, if there is a package name starting with node colon, that's a built in package. If it is just written like this, it can be a, external package. And if it starts with dot, then that's a, then that's a custom module, right? So now I want to do it with node fs. Now let's see what all we have. So first you can read the files. You can just say fs. read file sync. Now here is one very interesting thing that every function that you see has a normal version and a sync version. So sync basically means this is going to be a blocking operation. Now what is a blocking operation that we will cover in the upcoming videos. But as of now you can just, you know, use a synchronized version or I can say the blocking version. So what I can do is I can just give the notes txt file. Okay so notes. txt file. That is what I want to read. And I want to read it as a u sorry, I want to read it as a UTF and this is going to give you the contents of the file. So just store it in the contents. What do you call variable right? And now just you can do a console dot log on the contents. So good control tilde and then you can just say node and you can just say index index and enter. So you can see I'm able to read the contents using this fs. What you can do is you can even create a file. You can say fs. create file okay, so create a. I should say write file actually. So right File. Right. While saying so let's go with the blocking operation and what is the name of the file? So I'll just say copy. txt what do you want to write in this file? So let's say I want to write this or maybe you can pass this content and as a UTF8 so I want to pass UTF UTF8 so now what this particular thing is going to do, Let me just move it up and I'm just going to comment it out because this is what we have seen. This is going to create a new file that is copy. Txt and will write these contents. So now you can see we don't have any file that is copy. Txt. So if I run this particular code, you can see it creates a new copy. Txt file and you can see we have the contents here. What you can even do is that you can actually read contents from one file and then you can write those contents in the another file. So now if I run this code, what you are going to say is that copy. Txt is actually a copy of notes. Txt One interesting thing here to note is that this always overrides the content, right? So if I remove this and I just say hey, what you're going to notice is it always and always overrides the content. Similar to this, if you don't want to override the content, you can just say append file sync. This will always add the content to the file. Okay? It will not override. You can see the content is getting added. So let's say if I give now contents it is going to be added. So pre previous data stays and new content is getting added. So you can even say hey slash n for a new line. So two new line characters and then say hey. And if I run it so you can see after two lines you are getting an hey. So you have append file, you have write file, right? So let me just write it here again so that you have the document ready, right? You can refer to this code. So earlier we have seen write file sync. So you can just say write something which overrides the content. This always creates a new con. Basically append C file content. You can even create directories. Okay? So you can just say fs sorry fs. create. mkdir that is for make directory. What directory you want to make. I want to make a directory for let's say games, right? So games. And you can even pass options like recursive. Let's say you have more and in which mode you want to create. So I'll just say hey, FS mkdir node and invalid archetype. Oh, just a second. I have to use the synchronous version. Yeah, so now you can see it created a folder for me that is games, right? Similarly I can say hey, inside the games, create a folder XYZ and then create a. And here you will actually get an error. So you can see that the error is coming that because in Games there is no folder xyz, right? So to overcome this particular problem, just say recursive and set it to true. Now it will automatically create all the folders you can see in Games. You have xyz, you have have a. So you can create folders, you can create directories, right? And you can do something like fs. remove directory. Okay, let's say we have frm dir saying what directory want to remove? I want to remove the games directory. And again again, right? Okay, so I want to just remove this directory. So if I do a node it gets an error. Why? Because Games is not an empty directory. So first you have to actually remove all the directories. So, so first let's remove the A directory. So you can see A is gone. Then let's remove the xyz Then you can see the XYZ also on. And then finally we can remove the game. So that's a Linux feature, right? You cannot remove a directory if in Linux if it has some content. So yeah, so same thing it is doing that. So now you have seen that using this FS, you can do actually a lot of stuff FS. Let's see FS. Append file append file sync. You have chmod. So now you understand what all these functions are doing, right? These are all the functions that are there to work with files. Similarly, you have a function to delete a file. Let's say you have unlink. So you can just say unlink sync. Let's say I want to delete this copy. Txt file. Just pass copy. Txt and this is going to delete this file. So you can see that file got deleted, right? This is a deleted file. Nice. So yeah, this FS module is very powerful. It gives you all the functionalities to work on the file system. Create directories, create files, write to the files, open the files in the read mode, open file in a write mode, create folders, delete folders, basically everything related to the file system. So this was your node fs. And now you also know that why this node is there, right? In order to avoid the conflict and looks more cleaner. So moving forward, we are going to import the built in modules using the node namespace, right? And for third party we are going to just do it like this. So I hope that you like the video. In the next video, let's create a project. Okay. Let's see how we can create an HTTP server in the node js.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "07-node-fs-module.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/07-node-fs-module.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.010133734,
      0.00236598,
      0.038805403,
      -0.051853858,
      -0.015376799,
      0.017390031,
      0.017572317,
      0.022958873,
      0.0017799328,
      0.0010962217,
      -0.013021199,
      -0.0062251496,
      0.008795975,
      0.029987833,
      0.10863326,
      0.019516883,
      -0.02481522,
      0.0040836507,
      0.0041015777,
      -0.017939795,
      -0.0051798774,
      -0.015355922,
      0.009045355,
      -0.006800047,
      0.007455315,
      0.012828278,
      0.012482438,
      -0.018746203,
      0.020314403,
      -0.023920605,
      0.016913421,
      -0.0023171087,
      0.0013474594,
      0.0034899716,
      -0.0005694421,
      0.022351831,
      0.012304207,
      0.012077688,
      -0.015906239,
      0.0034267472,
      -0.003954798,
      0.00660803,
      0.019039022,
      -0.02650514,
      0.008589484,
      -0.013758247,
      -0.00045131423,
      -0.01119956,
      0.0066499077,
      0.014534434,
      0.0050821914,
      -0.022765854,
      -0.019926231,
      -0.18176244,
      0.010666533,
      0.005057191,
      0.0070603546,
      -0.000053704265,
      0.009528438,
      0.0036592153,
      -0.0182641,
      0.019045427,
      -0.03819167,
      -0.0034263919,
      -0.021831864,
      -0.015042431,
      -0.0029090105,
      -0.005450681,
      -0.00043114275,
      -0.014093899,
      0.014861403,
      0.010137436,
      -0.026686836,
      -0.014589214,
      -0.005707607,
      -0.003076767,
      0.013232006,
      -0.0102071855,
      -0.02181561,
      0.01930417,
      0.0017266064,
      -0.001986681,
      0.0058395495,
      -0.015151502,
      0.0035279521,
      -0.011876437,
      -0.03761673,
      -0.030780444,
      -0.020237064,
      0.01727199,
      0.01511325,
      0.0038162326,
      -0.010407365,
      0.006665873,
      -0.021802548,
      0.0044067143,
      0.015499445,
      0.01057596,
      -0.013590159,
      0.005239702,
      0.018999664,
      -0.019846855,
      -0.0378414,
      0.017637888,
      0.00053339696,
      0.00338724,
      -0.0039661005,
      0.010795521,
      0.014118805,
      -0.027491765,
      0.00033242363,
      -0.011733682,
      -0.021392658,
      0.0410712,
      0.008540655,
      -0.18194945,
      0.016072497,
      0.0017907955,
      -0.013604254,
      0.0027822761,
      -0.025967693,
      0.012390865,
      0.0049743974,
      -0.0051597883,
      -0.003589578,
      0.022097485,
      -0.0054441267,
      0.016035296,
      0.0042195814,
      0.0024380689,
      -0.02455943,
      -0.0045336965,
      -0.01152775,
      0.02052825,
      0.020636754,
      0.02192318,
      0.014026397,
      -0.00451869,
      -0.014158065,
      -0.020361995,
      0.026008485,
      0.029261021,
      -0.0021976172,
      0.01577763,
      0.020147016,
      0.012645016,
      -0.009890854,
      -0.001281561,
      -0.021678627,
      -0.034045193,
      -0.0055834884,
      -0.033725407,
      0.026793364,
      -0.0054932963,
      0.005777119,
      -0.031749107,
      0.0062212353,
      0.015581201,
      -0.006288829,
      -0.021414883,
      0.008628916,
      -0.0044204965,
      -0.001967003,
      0.024910463,
      0.030304264,
      0.010200391,
      -0.015061325,
      0.021840772,
      0.00091185403,
      0.01613288,
      -0.015949784,
      -0.008230624,
      0.021694507,
      -0.012837606,
      -0.008200237,
      -0.026497338,
      -0.008206764,
      -0.001141984,
      0.011426393,
      -0.005473134,
      -0.010607096,
      -0.0057712025,
      0.013033863,
      -0.01588538,
      0.013325013,
      -0.0032890327,
      -0.012386675,
      0.0118449675,
      0.027413156,
      -0.03029776,
      0.015572005,
      -0.028657382,
      0.006651859,
      0.00964924,
      -0.010164394,
      -0.017587725,
      -0.0218949,
      0.0049583674,
      0.01742833,
      0.007242039,
      0.043377604,
      -0.019899948,
      0.00031410248,
      -0.02564006,
      0.02499916,
      0.009664324,
      -0.0064187013,
      -0.003504468,
      0.018869413,
      0.018356875,
      -0.0087915985,
      -0.010863324,
      -0.016773984,
      -0.0077212537,
      0.015308596,
      -0.014701626,
      0.015284483,
      0.013666189,
      0.0037845615,
      -0.009674678,
      0.0018422641,
      0.0006983547,
      0.006209593,
      0.02390672,
      -0.00049096387,
      0.015395906,
      0.005680296,
      -0.011673312,
      -0.0009766344,
      -0.015916169,
      0.017618474,
      -0.005704744,
      -0.022424014,
      -0.018758187,
      0.011700381,
      0.010088239,
      -0.011611878,
      0.007605469,
      -0.0050580394,
      -0.010894928,
      -0.017010583,
      -0.00615502,
      -0.0026478153,
      0.011819418,
      0.03461275,
      0.00032981267,
      -0.010695638,
      -0.0021526003,
      -0.033383362,
      -0.03135351,
      -0.007842334,
      0.004219863,
      -0.012002357,
      -0.02484924,
      0.0024606406,
      -0.016657146,
      0.001273317,
      -0.008909848,
      -0.0018679928,
      -0.035901718,
      -0.008934078,
      -0.011665329,
      -0.020944454,
      0.0038277397,
      0.00748099,
      -0.0054720384,
      0.002256426,
      0.035440177,
      -0.022062458,
      -0.0056989044,
      0.026687086,
      -0.00011808741,
      -0.0025724163,
      -0.002893911,
      -0.004820275,
      0.006523124,
      -0.10458862,
      -0.0037873683,
      0.0003998184,
      -0.016345281,
      -0.007930195,
      0.021354211,
      -0.012600442,
      0.03561824,
      0.006081113,
      -0.00036605084,
      -0.006482736,
      -0.0081948275,
      0.014241178,
      0.008379946,
      0.004850278,
      -0.008291276,
      0.01239687,
      0.0052120276,
      -0.0011969677,
      -0.005215433,
      -0.000101273086,
      -0.00029431022,
      0.0035662777,
      -0.013037089,
      0.032332283,
      -0.00983289,
      -0.002336368,
      0.007847803,
      0.042206865,
      -0.0047682365,
      -0.010995971,
      0.016429748,
      -0.02703432,
      -0.011220881,
      0.0020655922,
      0.0020562867,
      0.030253876,
      -0.010928148,
      0.005930286,
      -0.014374535,
      -0.018563403,
      -0.014525026,
      -0.0048306263,
      0.0015655932,
      -0.01131449,
      0.009097399,
      0.0062696766,
      -0.026620172,
      -0.021736505,
      0.013864284,
      -0.015850117,
      0.010651941,
      0.016878791,
      -0.00021710536,
      0.012898619,
      0.0033301718,
      -0.009402264,
      0.003750127,
      0.0063757263,
      0.006103448,
      -0.0058488613,
      0.0040609585,
      0.008527932,
      0.0019958345,
      0.007882438,
      -0.004304935,
      0.002324576,
      -0.003884764,
      -0.0026827026,
      -0.0024703636,
      0.009628007,
      -0.00070489995,
      -0.01135738,
      -0.011108643,
      0.0014148108,
      0.014272308,
      0.018419594,
      -0.001547169,
      -0.026627358,
      0.026781455,
      0.01411428,
      -0.00013406205,
      0.0027015605,
      0.016567621,
      0.01251413,
      -0.010667834,
      -0.013363653,
      0.028184662,
      0.014278422,
      -0.023611633,
      -0.003773411,
      0.014114144,
      -0.02658938,
      -0.0056500942,
      -0.01021132,
      0.01987466,
      -0.032350954,
      -0.0100395745,
      -0.01481804,
      0.014309222,
      -0.00840722,
      -0.005252048,
      -0.019326402,
      0.011503325,
      0.004860687,
      0.021764746,
      0.0076542874,
      0.0015421291,
      -0.00067241536,
      0.00075812463,
      0.0012885076,
      -0.007877253,
      -0.021349948,
      -0.010767936,
      -0.00892951,
      0.022446051,
      0.031486694,
      0.018731708,
      -0.012791467,
      -0.015749102,
      0.0046017235,
      0.012847745,
      -0.0026336773,
      -0.00031359648,
      -0.01672592,
      -0.0035397739,
      0.0016692712,
      -0.0011965896,
      -0.008596544,
      -0.0035083948,
      0.003093422,
      0.014266234,
      -0.021873226,
      -0.007796121,
      0.00043494423,
      -0.019263692,
      0.017213399,
      -0.014481545,
      -0.009849035,
      0.020214273,
      -0.01599512,
      0.016328922,
      0.009468,
      -0.020947272,
      0.016750019,
      0.014532438,
      -0.012490607,
      0.004572301,
      -0.0033234323,
      -0.011175138,
      -0.0054093986,
      -0.015922723,
      -0.010844523,
      -0.007972639,
      0.0057207313,
      0.017334932,
      0.037813958,
      -0.016645016,
      0.0009633767,
      -0.012530533,
      -0.016029831,
      0.0068325372,
      -0.015593499,
      -0.00048121752,
      0.0035559132,
      0.016043533,
      0.0011979892,
      0.008960094,
      -0.0076699755,
      -0.0095482925,
      -0.020685157,
      0.0032794166,
      -0.032144874,
      0.019100375,
      0.0028479043,
      -0.02346991,
      -0.0025951928,
      -0.00438631,
      0.03037865,
      -0.0057725585,
      -0.002247215,
      0.003510385,
      -0.01356737,
      -0.010326128,
      -0.026268883,
      -0.00021535071,
      0.032486364,
      -0.015870132,
      0.00040324847,
      -0.013610094,
      0.006710967,
      -0.02946782,
      0.011410186,
      -0.0146207055,
      0.009195045,
      0.025186963,
      0.014190223,
      0.004770462,
      0.001646082,
      -0.0016825667,
      -0.019290797,
      -0.022056408,
      0.021089092,
      -0.007827761,
      0.00010170993,
      0.007768653,
      0.024788557,
      -0.008065441,
      -0.017672231,
      0.025201391,
      -0.013679795,
      -0.015155866,
      0.010853062,
      -0.008072274,
      0.0028306264,
      -0.0049435445,
      -0.0050600963,
      0.008019037,
      -0.03263287,
      -0.0111864535,
      0.023936901,
      -0.021192525,
      -0.011086294,
      -0.002604323,
      0.012017798,
      -0.020772852,
      -0.025235485,
      0.029133763,
      -0.014374084,
      -0.008858776,
      0.00546707,
      -0.001707836,
      0.013541338,
      0.024479967,
      -0.027006716,
      -0.012935858,
      0.0030963635,
      0.020952541,
      -0.001021502,
      0.005533213,
      0.00012666287,
      0.0036940724,
      -0.013275214,
      0.011719939,
      -0.003156356,
      -0.015010963,
      0.017522225,
      -0.0038858317,
      -0.007895601,
      0.0028662002,
      0.011824926,
      -0.0017840689,
      0.0090577835,
      0.00052585464,
      -0.013814647,
      0.021972066,
      -0.019376962,
      0.0020050106,
      0.0053754,
      0.009223117,
      -0.0032894108,
      0.009572943,
      -0.01364007,
      0.008860985,
      0.0017792161,
      -0.023493394,
      0.014698927,
      0.028590692,
      0.024515443,
      -0.12165179,
      -0.0018366289,
      0.0014228493,
      -0.011939379,
      -0.0013386494,
      -0.0045520337,
      0.0026182213,
      -0.018173097,
      -0.016793458,
      -0.007425889,
      0.010654733,
      0.0026703975,
      0.0103698885,
      0.0011351135,
      0.01197854,
      -0.014890939,
      -0.001322713,
      0.027710112,
      0.03866531,
      -0.004041464,
      0.00935654,
      -0.011378794,
      0.0047660433,
      0.0055695428,
      -0.024042767,
      0.004447342,
      0.018594991,
      -0.007043111,
      -0.013986753,
      -0.017021397,
      -0.009665926,
      -0.012730212,
      0.012386921,
      0.0014652276,
      0.035830207,
      0.009015437,
      -0.006317041,
      0.016936628,
      0.0025020547,
      0.009824971,
      0.01979125,
      0.002915522,
      0.018701352,
      0.005585093,
      0.0042158873,
      0.011769828,
      0.024655541,
      -0.02725391,
      0.0054859477,
      0.039811313,
      -0.053046223,
      -0.030332891,
      -0.0040102373,
      -0.019251222,
      0.009895602,
      -0.003454718,
      0.011311702,
      0.004066901,
      -0.01607122,
      0.009557212,
      0.012404494,
      0.0067918585,
      -0.003587235,
      0.009529172,
      -0.0064167567,
      -0.012086914,
      0.020173451,
      0.024420787,
      0.016672023,
      -0.005810351,
      -0.008100108,
      0.00084833463,
      -0.0034616913,
      0.009430394,
      -0.0071719666,
      0.0062627476,
      0.0025085297,
      0.025404839,
      0.004756512,
      -0.0047220453,
      -0.025046233,
      -0.0014314865,
      -0.074087776,
      -0.00491568,
      0.006755908,
      -0.0022213282,
      0.015919913,
      0.0017097266,
      0.0008983518,
      0.011177246,
      0.008258162,
      0.00091940275,
      -0.027097138,
      -0.006105702,
      -0.0014679618,
      -0.0070615676,
      -0.02942431,
      -0.0068363487,
      0.010555071,
      -0.0329777,
      -0.023719652,
      0.014705326,
      -0.0080309305,
      0.0035480598,
      -0.010460334,
      -0.011750119,
      0.005920303,
      0.005671846,
      -0.02543262,
      0.020521982,
      0.004508627,
      -0.023171347,
      0.0062559526,
      -0.14792712,
      -0.0163886,
      0.010933684,
      0.014654596,
      0.014320191,
      -0.00573083,
      0.0062611657,
      -0.0021558355,
      0.0067077777,
      -0.025559368,
      0.003995569,
      -0.03124682,
      -0.013586211,
      0.006653766,
      -0.0013891592,
      0.1348767,
      -0.007792052,
      -0.0006228206,
      0.0120794205,
      0.0221902,
      -0.0071406253,
      -0.037243694,
      0.018868644,
      0.025221994,
      0.0030904538,
      -0.010532916,
      0.020644326,
      -0.009077289,
      0.037394643,
      -0.0048017376,
      0.0018926314,
      -0.026254686,
      -0.01502054,
      0.035008017,
      -0.0061864867,
      -0.010547326,
      0.009767488,
      -0.0020785402,
      -0.011869715,
      0.011360772,
      0.001386438,
      0.015403835,
      -0.0048853895,
      0.0039294553,
      0.006268566,
      0.005773818,
      0.01498842,
      -0.022698978,
      -0.02433492,
      -0.024762858,
      -0.02348508,
      -0.04516057,
      0.01191209,
      -0.0020936457,
      -0.0056971735,
      0.030503847,
      -0.010666716,
      -0.0014001933,
      -0.020386996,
      -0.00990702,
      0.0092727505,
      -0.004567866,
      0.021623114,
      0.0019313396,
      -0.0014442436,
      -0.009184231,
      -0.0073590237,
      0.013964987,
      0.026095834,
      -0.004440466,
      0.013198351,
      0.024575366,
      -0.007270916,
      0.007470569,
      -0.03484183,
      -0.009015254,
      -0.012628099,
      0.013467667,
      0.010668233,
      -0.0068050483,
      0.007413071,
      -0.005416403,
      -0.009331558,
      -0.04057653,
      0.012790333,
      -0.017910162,
      -0.02213421,
      0.021474952,
      -0.004690506,
      -0.0019425612,
      0.011363068,
      0.017486224,
      -0.0068863807,
      0.004432723,
      -0.019194378,
      0.008344853,
      -0.006132956,
      0.011531125,
      0.021677226,
      0.003463409,
      0.011187533,
      0.011357695,
      -0.00039120167,
      -0.036711562,
      0.013113375,
      0.015953211,
      0.013208197,
      0.0059571094,
      0.0036607913,
      -0.011460472
    ]
  },
  {
    "id": "genai_cohort_nodejs_08_node_blocking_vtt",
    "content": "Okay, so in the previous lecture we have seen that how we can work with the file system. And I know that there was one unsolved puzzle that was piuz. What is this synchronous version? Right, so this particular video is going to be super duper important in order to understand the node js internal working. Okay, so what I'm going to do is I'm going to create a file that is, let's say script js file. So this is where I am going to code. Now let's import the FS module first. So, so that is pretty simple. You know the stuff that is node and then colon fs. Right? So we have the FS module. Now what we can do is. Now see, let's say I have a very simple task. So my task is that, sorry, task. My task is just read the contents of notes Txt file, right? So what you will do first, you will do it in a synchronous manner. So let's say I'll just say console log that this is the start of script. Okay, Start of script. Okay, Then what you will say, you will say, hey, const. I get the contents. So how can you get the contents? You will just say fs. read file sync and just pass in the path that is notes, dot TXT and let's read it as a UTF8 encoding. And then you will say, hey console, log, the contents. Okay, let's try to console log the contents of this particular thing. And, and, and finally let's just do a console log, saying that this is the end of script. So this is the code. Like this is a very cool code that you have written. So now if I run this particular code, can you guys guess the output for this code? Pretty simple, right? First you will get this console log, then you will get the contents and then you will get the end of script. Now if I say node script and enter. So yeah, indeed, you got this art of script. You got the contents of the file and end of the script. So this code actually worked in a manner that we liked. Now understand one thing. Whenever you call the synchronous operation, these synchronous operations are actually known as blocking operations. Okay, these are known as blocking operations. What do I mean by that blocking operation? Guys, tell me one thing. What do you think? How much easy is it to read this file? How much time it can take to this particular line of code to execute? You will say that piu. This depends upon the file, for example, you are trying to read this file, right? You are trying to read a file that is this one. Now if this file is one mb, it will take, it will be very quick, right? Because one MB is very less. It can be, but, but it can be a 1gb file. It can be a 1terabyte of file. It can be a 1petabytes of file, right? So if this file is, let's say one GB and it has a lot of content, can I say that this whole operation, this whole line is going to take, let's say, maybe, maybe one minute, depending upon, of course, your machine configuration and all that. So let's say to read one GB of file, this code takes one minute. That means when your code is executing line by line, you execute this line. Then you block the operation for one minute, right? This, this particular line blocks everything for one minute. So till one minute, if something is going on in the background which is trying to read the file, once you have read this one GB of file, then all the code will execute here. So let's say here you have 100, line of code. More. So this, all line of code will execute once this has been completed. So that means if you see the execution of the code, this blocked everything right here was a blocking thing, which is not good. Okay? You should not use blocking operations. I mean, it depends when to use and when not to use. But in most of the cases you will not use the blocking operations because let's say you are building a web server, okay? So let's say, let's. Let me give you a real world example. So if you are building a web server and you have users, right? If you, if this is your server and this server is written in node, I mean not written in node. I mean it is, running node js. So let's say the users are coming, okay? So this is your first user, this is your second user, third user, fourth user, and five user. So users are coming. Now let's say he requested that, Hey, I want the contents of some file. Now that file lives on the server, and that particular file is one GB in size. Now you have to wait for one minute. Your server is now blocked and reading that file, which is going to take one minute. So for next one minute, all these users cannot use your server. You get it, right? Because you have made your server busy to read that file. And all these extra users are, are now going to face a downtime, okay? They will say, hey, the server is not working. You remember that when you were in college or when you were in school, you used to check your result and when there is a lot of rush, server didn't respond, it is going to take a lot of time. So because of this one user, because you have written your code in a synchronous way or in a blocking way, due to this blocking nature, you have made your server work a lot, right? Your server is continuously working to read that file. But in the, on the other hand, no other request is served. So this is your blocking operation. So this is what you're doing here. Now alternative to the blocking operation is an asynchronous operation, also known as non blocking. Okay, so let me show you how that works. So on the other hand you have asynchronous, so you can do it asynchronously or also known as non blocking. So in non blocking fashion, what you can do is you can just say fs. read file. Okay, now this is an asynchronous. Now what you will notice is that first parameters, remain same, second parameter remain same. Only difference is that now you have to pass a callback function, right? Because this particular operation runs in background, right? Runs somewhere else. How will it tell you that? Hey, I am. I have completed reading the file and how will it give you the data? So for that it requires a callback function. In this callback function, the first parameter is the error if there is any, and second is the data. So you can actually keep a check that, hey, if it has got error, you can just do a console dot log of the error. So whatsoever is the error. Else you can just console log the contents of the file. So you can just say console. log contents got. And you can just say, hey, these are the contents. So now what you have done is you have converted this piece of code. Okay, you can just pause the screen right here. This particular piece of code and this piece of code are actually doing the same thing. The only difference is this is non blocking and this is blocking. So now if I remove this code. So now what you have is you have this console log start, you are doing some asynchronous operation and end. Now interestingly, if I run this code, and we got the error because this is not content, actually this is data. Okay, so yeah, my bad. So if I run this particular code again, start of script, end of script and then you got the content, do you see what happened? That this particular line, this particular statement was not able to block the execution. See, we got start first, that is on the top. Then we got end of the script. See end of the script. Meanwhile this thing was reading the file in the background. And once it has completed reading the file, once it got the content contents, it executed a function that I have passed as a callback function which is at the end. So if Even you have line of code that will continue to work while it is reading the file. So this is how the asynchronous or non blocking operation works. So whenever you do a heavy task, for example CFS. Everything has a synchronous and a non synchronous way. For example append file, this is what this is asynchronously appending the data. But, but on the synchronous this is a blocking call. Similarly CHMOD is an asynchronous CHMOD sync is a blocking operation. So every operation has an equivalent blocking and non blocking code. So the code is absolutely same. The only difference is that the read file is asynchronous, whereas the synchronous version is a blocking operation. And it doesn't take any callback, it gives you the content as a return statement. But here you have to pass a callback function, which makes sense right now at this particular point of time I can even go a, too much deep into the architecture of node js, how node js works. But let's keep that for the next video. I will try to explain that how internally JavaScript or I can, I should say the Node js handles all these requests. So let's talk about that thing in the next video. So yeah, super excited for the next video. Let's meet in the next one. Until then, bye bye and take care.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "08-node-blocking.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/08-node-blocking.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.013350197,
      0.009028528,
      0.036913235,
      -0.056146935,
      -0.042209607,
      0.0130070755,
      0.01950173,
      0.021757742,
      -0.002993049,
      0.018845612,
      0.0061720437,
      0.015269779,
      -0.0013389895,
      0.026795877,
      0.105388455,
      0.0057443758,
      -0.022051625,
      0.0040814644,
      -0.008488204,
      -0.020645425,
      0.0007342302,
      -0.009367064,
      0.008590429,
      -0.0093389135,
      0.000017858029,
      0.01358334,
      0.009184856,
      -0.0006387641,
      0.021675324,
      -0.014949612,
      -0.004217635,
      -0.009051911,
      0.0030571134,
      0.015909238,
      0.0057329466,
      0.033243228,
      0.012607219,
      0.007979844,
      -0.009342912,
      0.01366313,
      0.0016064541,
      -0.0070319204,
      0.018844416,
      -0.03389289,
      -0.013929098,
      -0.004430503,
      0.0001240918,
      -0.011285591,
      0.0012739201,
      0.02328217,
      0.004101785,
      -0.013280676,
      -0.0066603706,
      -0.18184178,
      -0.0061483174,
      0.003704254,
      0.0011106505,
      0.006374854,
      0.0054008462,
      0.002261571,
      -0.022305464,
      0.023439256,
      -0.02652232,
      -0.0036051306,
      -0.0248671,
      -0.014704404,
      0.013878578,
      -0.0007879605,
      0.008151326,
      -0.0010308999,
      0.017055575,
      0.017751219,
      -0.01963235,
      -0.0008891484,
      -0.0061718533,
      -0.011653449,
      0.012812961,
      0.0015016664,
      -0.020534512,
      0.0075596785,
      -0.0060961326,
      -0.025568452,
      -0.009961456,
      -0.023257472,
      0.0068120956,
      -0.0005729867,
      -0.027885126,
      -0.027433047,
      -0.0011351743,
      -0.0024332504,
      0.007697521,
      0.008554605,
      -0.01788618,
      -0.012588884,
      -0.013321512,
      -0.009017331,
      0.0036909862,
      0.021387802,
      -0.016127976,
      0.003702945,
      0.021435099,
      -0.0037327502,
      -0.016283274,
      0.017898973,
      -0.007825366,
      0.006289435,
      -0.005438921,
      0.009626167,
      0.025909524,
      -0.012431941,
      -0.0070596063,
      -0.008077209,
      -0.01816927,
      0.02299123,
      0.0018578114,
      -0.17684689,
      0.015455306,
      0.0021474042,
      -0.012377645,
      0.0020675277,
      -0.014141661,
      0.002681472,
      0.011660485,
      -0.0031183413,
      -0.0020819048,
      0.013134963,
      -0.0015858231,
      0.016225645,
      0.010397685,
      0.0066863913,
      -0.0103045385,
      -0.009334601,
      -0.018154254,
      0.028642217,
      0.042239975,
      0.017105326,
      0.02485052,
      -0.02675861,
      -0.007827196,
      -0.012361352,
      0.024127979,
      0.017236976,
      -0.010700522,
      0.027253242,
      0.0064692264,
      0.01228977,
      -0.013193866,
      -0.0018173233,
      -0.013871121,
      -0.035334084,
      -0.0024507677,
      -0.012451954,
      0.020690035,
      0.0068401927,
      0.020916168,
      -0.039946232,
      0.012051853,
      0.019846726,
      0.01888786,
      -0.026384002,
      0.0016696657,
      -0.010417181,
      0.00010879204,
      0.027948434,
      0.03055884,
      0.007554641,
      -0.010313903,
      0.039919186,
      0.00034089992,
      0.0021199468,
      -0.0012873653,
      -0.0038319204,
      0.005294664,
      -0.014290134,
      0.004302618,
      -0.024113156,
      -0.011707172,
      -0.0054912916,
      0.02907365,
      -0.012451085,
      -0.0019597437,
      -0.0008316395,
      -0.011109306,
      -0.019740388,
      -0.012436014,
      -0.009655313,
      -0.030103859,
      0.011129101,
      0.014890495,
      -0.031918034,
      0.026978225,
      -0.028628621,
      -0.010348994,
      0.0056212484,
      -0.0097039435,
      -0.026554542,
      -0.026322687,
      -0.0004559718,
      0.012692947,
      0.0012536034,
      0.017443314,
      -0.014135231,
      0.021155998,
      -0.028579792,
      0.020193491,
      -0.0056909393,
      -0.0010756474,
      0.011504788,
      0.012198577,
      0.015753683,
      -0.006300842,
      -0.0057520177,
      -0.010193346,
      0.0046662646,
      0.012226074,
      -0.02051924,
      0.011256188,
      0.014972458,
      0.0005555524,
      -0.008155318,
      -0.013782006,
      -0.0021407371,
      -0.0032985,
      0.02446929,
      0.017672708,
      0.014113124,
      0.016896753,
      -0.008014742,
      0.00969164,
      -0.0068008653,
      0.0055203754,
      0.017269608,
      -0.030557735,
      -0.006744107,
      0.0018217528,
      0.007183902,
      -0.00016396455,
      0.012066568,
      0.0051676966,
      0.00077390793,
      -0.0146279875,
      0.0062275454,
      -0.0032530653,
      0.011367422,
      0.02660748,
      -0.0014409124,
      -0.006762899,
      0.00890096,
      -0.04277173,
      -0.041340355,
      -0.00047946326,
      0.007287356,
      -0.0039007105,
      -0.024626806,
      0.0008003991,
      -0.03703874,
      -0.012887473,
      -0.008834762,
      -0.007474084,
      -0.036641035,
      -0.0061759246,
      -0.020958932,
      -0.014125517,
      0.0119374,
      0.019465547,
      -0.0048639225,
      -0.008216084,
      0.022958165,
      -0.026307706,
      -0.0038185199,
      0.013521725,
      -0.0054323007,
      0.006975373,
      0.010070305,
      -0.016153937,
      0.009398181,
      -0.09830962,
      0.009772979,
      0.0014465647,
      -0.022204302,
      -0.0054223165,
      0.005709473,
      -0.0031931633,
      0.035440594,
      0.010050385,
      0.0052734716,
      0.011752685,
      -0.0055169933,
      0.017018827,
      -0.0022566987,
      0.0079534,
      -0.009646618,
      0.023521824,
      0.008123659,
      -0.0006912478,
      -0.005520067,
      -0.014516998,
      -0.0065881875,
      0.015573536,
      -0.01651316,
      0.013251848,
      0.009782558,
      -0.012570191,
      0.005257308,
      0.032391418,
      -0.010345468,
      -0.00018769936,
      0.020885792,
      -0.037469216,
      -0.003402976,
      -0.0054972167,
      -0.0064827558,
      0.03529165,
      -0.011038913,
      0.002858321,
      -0.003841756,
      -0.021215579,
      -0.01496189,
      0.012288786,
      -0.00023668457,
      -0.0069931904,
      -0.0040438534,
      0.010371012,
      0.009270608,
      -0.027120093,
      0.013389465,
      -0.022948774,
      -0.005781541,
      0.0077199205,
      -0.011628928,
      0.011125028,
      0.0060113296,
      0.004506646,
      0.006499299,
      0.0036212085,
      0.010305914,
      -0.0058897887,
      0.0051127947,
      0.020887567,
      0.016714057,
      0.006980037,
      -0.0025267499,
      0.016705826,
      -0.014728267,
      -0.013008269,
      -0.013636577,
      -0.0010543426,
      0.012534196,
      -0.030679764,
      -0.03328267,
      -0.004446596,
      0.008995196,
      0.011264118,
      -0.009363062,
      -0.030500468,
      0.044543277,
      0.022152638,
      0.006533347,
      0.009770743,
      0.02815925,
      0.030779561,
      0.003171714,
      -0.012246077,
      0.005312458,
      0.012144733,
      -0.016144844,
      -0.0039232015,
      0.020396627,
      -0.030817764,
      -0.001504263,
      -0.012289568,
      0.01830736,
      -0.028583363,
      -0.005605022,
      -0.010211519,
      0.0026133682,
      -0.0070331246,
      -0.0033654948,
      -0.005542927,
      -0.0037529913,
      0.004679783,
      0.031431403,
      -0.0035104053,
      0.0102523,
      -0.0026154672,
      -0.016792515,
      0.0038137871,
      -0.018320449,
      -0.014677091,
      -0.016984705,
      -0.020379946,
      0.023636427,
      0.022403378,
      0.011100813,
      0.0024915617,
      -0.009011384,
      0.012376471,
      0.01724231,
      -0.0037855285,
      -0.009319438,
      -0.024475742,
      -0.0008420655,
      -0.010800857,
      0.0065365015,
      -0.008884928,
      -0.018408248,
      0.003035707,
      0.022546563,
      -0.008597822,
      -0.0069514634,
      0.0036903275,
      -0.022203708,
      0.010157784,
      0.008587474,
      -0.005902201,
      0.016045192,
      -0.010411009,
      0.016178679,
      0.011481065,
      -0.013644148,
      0.018740635,
      0.015253512,
      -0.012443356,
      -0.013295496,
      0.0029492327,
      -0.010468486,
      -0.02039617,
      -0.027002273,
      -0.027566064,
      -0.00048503303,
      0.011126303,
      0.025111102,
      0.029606888,
      -0.008734836,
      0.015897796,
      -0.01876545,
      -0.005917388,
      0.0012729404,
      -0.013411579,
      -0.009085584,
      0.018174227,
      0.011097336,
      0.002600261,
      0.017894255,
      -0.0070411684,
      0.0023147839,
      -0.009486015,
      -0.0074871983,
      -0.039146274,
      0.008788473,
      0.01825064,
      -0.008969001,
      -0.0023866615,
      -0.011423386,
      0.036193218,
      -0.0017137154,
      0.00070199795,
      0.0046984935,
      -0.014298044,
      -0.0045502903,
      -0.022973903,
      0.00019967523,
      0.023638073,
      -0.023450155,
      -0.003325602,
      -0.017846895,
      -0.025715372,
      -0.024198063,
      0.0073931287,
      -0.005205286,
      0.02001801,
      0.021753851,
      0.010621094,
      0.004749912,
      -0.0072300592,
      0.007757923,
      -0.011606523,
      -0.02842133,
      0.009752698,
      -0.011810144,
      -0.0012095872,
      0.0037740578,
      0.012408353,
      -0.008418517,
      -0.011655699,
      0.02666217,
      -0.0070783836,
      0.0002769709,
      0.00519513,
      -0.023239665,
      0.007158944,
      -0.00007138583,
      -0.011254346,
      0.0058555696,
      -0.023559088,
      -0.0144413635,
      0.015933242,
      -0.026915397,
      -0.0051833717,
      -0.003609496,
      -0.0011125939,
      -0.025311377,
      -0.025604304,
      0.037196815,
      -0.014373648,
      -0.018184409,
      0.0027134798,
      -0.00089653727,
      0.00025156743,
      0.013855826,
      -0.021666374,
      0.01277854,
      0.0035400884,
      0.006179224,
      -0.0068028965,
      -0.0077995164,
      -0.002293855,
      0.010124273,
      -0.017636752,
      0.0023031433,
      0.0021400806,
      -0.010059794,
      0.034029856,
      -0.00034226757,
      -0.022942914,
      0.004039151,
      0.0071908007,
      0.008463929,
      0.0038090562,
      -0.005730098,
      -0.027715465,
      0.027839739,
      -0.029651638,
      -0.0123636285,
      0.0033562311,
      -0.0061881444,
      0.0024921657,
      0.009404729,
      -0.008358143,
      0.0044747684,
      -0.01563341,
      -0.026809385,
      -0.0025783863,
      0.02409999,
      0.017038262,
      -0.1224095,
      0.0054616644,
      -0.020392394,
      -0.018782564,
      -0.0021924453,
      0.0097790975,
      -0.0069511565,
      -0.017521916,
      -0.01335346,
      -0.010834811,
      0.0043269116,
      0.002973986,
      0.009697123,
      0.003473141,
      0.0020867307,
      -0.017436212,
      -0.007512139,
      0.03086656,
      0.03372835,
      -0.010089586,
      0.010614739,
      -0.004753096,
      0.001999926,
      0.007880761,
      -0.014688047,
      0.0065013906,
      0.019784348,
      -0.007836445,
      -0.005692159,
      -0.018465534,
      -0.0019729708,
      -0.014579956,
      0.008730942,
      -0.006297854,
      0.035711955,
      -0.008836026,
      0.0049515087,
      0.002456308,
      0.010607891,
      0.012260137,
      0.012707013,
      -0.008103871,
      -0.0018121754,
      0.00767357,
      -0.017202994,
      0.011652269,
      0.032782104,
      -0.024996765,
      -0.0039488766,
      0.04191238,
      -0.037621327,
      -0.04092935,
      0.0012872489,
      -0.029157795,
      0.0026539704,
      -0.0013452971,
      0.019332422,
      -0.0007205369,
      -0.008665987,
      0.006104114,
      0.009290572,
      0.0068758894,
      -0.0053784926,
      0.007544414,
      -0.009586254,
      -0.0107400445,
      0.023108572,
      0.010598828,
      0.021126695,
      0.0015036125,
      -0.01736207,
      -0.00063488056,
      -0.01254432,
      0.019889444,
      -0.0013083881,
      -0.010575445,
      0.0025094214,
      0.02621668,
      -0.010640927,
      0.0156024955,
      -0.019201595,
      -0.0064702397,
      -0.06976341,
      -0.0066368654,
      0.0016422668,
      -0.012436102,
      0.010159256,
      -0.00612758,
      0.009779127,
      -0.00009289542,
      0.0054680775,
      -0.008311748,
      -0.024690403,
      -0.0074808346,
      0.002883655,
      0.00022582596,
      -0.013952791,
      -0.00094139326,
      0.01392716,
      -0.028952548,
      -0.018132532,
      0.014700712,
      -0.009889944,
      0.0043267002,
      -0.005688941,
      0.0029748552,
      0.017764919,
      -0.0018755528,
      -0.034271356,
      0.019113239,
      0.004129613,
      -0.017615246,
      -0.003052277,
      -0.14204578,
      -0.011973913,
      0.024950618,
      0.026656397,
      0.005607897,
      -0.011541685,
      -0.011804325,
      -0.0074306023,
      0.0064114565,
      -0.023031613,
      -0.005821283,
      -0.01529503,
      -0.0053363936,
      0.012432148,
      0.0029674175,
      0.13745496,
      0.013353791,
      -0.00039124204,
      0.00221652,
      0.010187289,
      -0.0057902155,
      -0.02004544,
      0.013247561,
      0.0218227,
      0.0067844517,
      -0.00043831335,
      0.0054720123,
      -0.0045834086,
      0.032373015,
      0.0018792562,
      0.007581071,
      -0.035833567,
      -0.029592436,
      0.016428746,
      -0.0077689113,
      -0.005276467,
      0.017900204,
      -0.010682425,
      -0.008933151,
      0.00063887076,
      -0.00065648765,
      0.0057428633,
      -0.014685725,
      0.009059049,
      0.0021017245,
      0.0019849676,
      0.010002161,
      -0.026558422,
      -0.026518397,
      -0.018594034,
      -0.005284548,
      -0.048661504,
      -0.0038480207,
      -0.008579143,
      -0.021978892,
      0.01932544,
      -0.02590284,
      0.008590549,
      -0.0066719316,
      -0.022146044,
      -0.007941227,
      -0.019605812,
      0.015351625,
      -0.010922267,
      0.0019316201,
      -0.030907666,
      -0.012082269,
      0.015772833,
      0.020432275,
      -0.0059073167,
      0.0022883352,
      0.021667248,
      -0.011210142,
      -0.015287267,
      -0.012818596,
      -0.0049973605,
      -0.009775226,
      0.001990047,
      0.006969976,
      -0.023326926,
      -0.0032884735,
      -0.0023747145,
      0.002810398,
      -0.023096059,
      0.010896847,
      -0.0014213304,
      -0.025897637,
      0.016219039,
      0.0017546264,
      -0.023142092,
      0.0010506898,
      0.004708066,
      0.001652891,
      0.028287236,
      -0.028397564,
      0.008149214,
      -0.009394022,
      0.008166146,
      0.0040204455,
      0.0020361508,
      0.016114086,
      -0.02145316,
      -0.0023144826,
      -0.019148242,
      0.030635593,
      0.010971,
      0.008591254,
      -0.006483529,
      0.0032628262,
      -0.029679758
    ]
  },
  {
    "id": "genai_cohort_nodejs_09_node_architecture_vtt",
    "content": "Okay, so in the previous lecture we have seen that how we can work with the file system. And I know that there was one unsolved puzzle that was piuz. What is this synchronous version? Right, so this particular video is going to be super duper important in order to understand the node js internal working. Okay, so what I'm going to do is I'm going to create a file that is, let's say script js file. So this is where I am going to code. Now let's import the FS module first. So, so that is pretty simple. You know the stuff that is node and then colon fs. Right? So we have the FS module. Now what we can do is. Now see, let's say I have a very simple task. So my task is that, sorry, task. My task is just read the contents of notes Txt file, right? So what you will do first, you will do it in a synchronous manner. So let's say I'll just say console log that this is the start of script. Okay, Start of script. Okay, Then what you will say, you will say, hey, const. I get the contents. So how can you get the contents? You will just say fs. read file sync and just pass in the path that is notes, dot TXT and let's read it as a UTF8 encoding. And then you will say, hey, console, log, the contents. Okay, let's try to console log the contents of this particular thing. And, and, and finally let's just do a console log, saying that this is the end of script. So this is the code. Like this is a very cool code that you have written. So now if I run this particular code, can you guys guess the output for this code? Pretty simple, right? First you will get this console log, then you will get the contents, and then you will get the end of script. Now if I say node script and enter. So yeah, indeed, you got this art of script. You got the contents of the file and end of the script. So this code actually worked in a manner that we liked. Now understand one thing. Whenever you call the synchronous operation, these synchronous operations are actually known as blocking operations. Okay, These are known as, blocking operations. What do I mean by that blocking operation? Guys, tell me one thing. What do you think? How much easy is it to read this file? How much time it can take to this particular line of code to execute? You will say that piu. This depends upon the file. For example, you are trying to Read this file, right? You are trying to read a file that is this one. Now if this file is one mb, it will take, it will be very quick, right? Because one MB is very less. It can be, but, but it can be a 1gb file. It can be a 1terabyte of file. It can be a 1petabytes of file, right? So if this file is, let's say, one GB and it has a lot of content, can I say that this whole operation, this whole line is going to take, let's say, maybe, maybe one minute, depending upon, of course, your machine configuration and all that. So let's say to read one GB of file, this code takes one minute. That means when your code is executing line by line, you execute this line. Then you block the operation for one minute, right? This, this particular line docks everything for one minute. So till one minute, if something is going on in the background which is trying to read the file, once you have read this one GB of file, then all the code will execute here. So let's say here you have 100, line of code. More so this, all line of code will execute once this has been completed. So that means if you see the execution of the code, this blocked everything right here was a blocking thing, which is not good. Okay? You should not use blocking operations. I mean, it depends when to use and when not to use. But in most of the cases you will not use the blocking operations because let's say you are building a web server, okay? So let's say, let's. Let me give you a real world example. So if you are building a web server and you have users, right? If you, if this is your server and this server is written in node, I mean not written in node. I mean it is, running node js. So let's say the users are coming, okay? So this is your first user, this is your second user, third user, fourth user, and five user. So users are coming. Now let's say he requested that, Hey, I want the contents of some file. Now that file lives on the server, and that particular file is one GB in size. Now you have to wait for one minute. Your server is now blocked and reading that file, which is going to take one minute. So for next one minute, all these users cannot use your server. You get it, right? Because you have made your server busy to read that file. And all these extra users are, are now going to face a downtime, okay? They will say, hey, the server is not working. You remember that when you were in college or when you were in school you used to check your result and when there is a lot of rush, server didn't respond, it is going to take a lot of time. So because of this one user, because you have written your code in a synchronous way or in a blocking way, due to this blocking nature, you have made your server work a lot, right? Your server is continuously working to read that file. But in the, on the other hand, no other request is served. So this is your blocking operation. So this is what you're doing here. Now alternative to the blocking operation is an asynchronous operation, also known as non blocking. Okay, so let me show you how that works. So on the other hand you have asynchronous, so you can do it asynchronously or also known as non blocking. So in non blocking fashion, what you can do is you can just say fs. read file. Okay, now this is an asynchronous. Now what you will notice is that first parameters remain same, second parameter remain same. Only difference is that now you have to pass a callback function, right? Because this particular operation runs in background, right? Runs somewhere else. How will it tell you that? Hey, I am. I have completed reading the file and how will it give you the data? So for that it requires a callback function. In this callback function, the first parameter is the error if there is any, and second is the data. So you can actually keep a check that, hey, if it has got error, you can just do a console dot log of the error. So whatsoever is the error. Else you can just console log the contents of the file. So you can just say console. log contents got. And you can just say, hey, these are the contents. So now what you have done is you have converted this piece of code. Okay, you can just pause the screen right here. This particular piece of code and this piece of code are actually doing the same thing. The only difference is this is non blocking and this is blocking. So now if I remove this code. So now what you have is you have this console log start, you are doing some asynchronous operation and end. Now interestingly, if I run this code, and we got the error because this is not content, actually this is data. Okay, so yeah, my bad. So if I run this particular code again, start of script, end of script and then you got the content, do you see what happened? That this particular line, this particular statement was not able to block the execution. See, we got start first, that is on the top. Then we got end of the script. See end of the script. Meanwhile this thing was reading the file in the background. And once it has completed reading the file, once it got the content contents, it executed a function that I have passed as a callback function which is at the end. So if Even you have line of code that will continue to work while it is reading the file. So this is how the asynchronous or non blocking operation works. So whenever you do a heavy task, for example cfs. everything has a synchronous and a non synchronous way. For example append file, this is what this is asynchronously appending the data. But on the synchronous this is a blocking call. Similarly CHMOD is an asynchronous CH mod sync is a blocking operation. So every operation has an equivalent blocking and non blocking code. So the code is absolutely same. The only difference is that the read file is asynchronous, whereas the synchronous version is a blocking operation. And it doesn't take any callback, it gives you the content as a return statement. But here you have to pass a callback function, which makes sense right now at this particular point of time I can even go a too much deep into the architecture of node js, how node js works. But let's keep that for the next video. I will try to explain that how internally JavaScript or I can, I should say the Node js handles all these requests. So let's talk about that thing in the next video. So yeah, super excited for the next video. Let's meet you in the next one. Until then, bye bye and take care.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "09-node-architecture.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/09-node-architecture.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.013638224,
      0.009677713,
      0.03680935,
      -0.055767972,
      -0.042015515,
      0.012433227,
      0.020421624,
      0.021154718,
      -0.0027590985,
      0.018351661,
      0.0055848313,
      0.015547708,
      -0.0016359705,
      0.025995323,
      0.106102355,
      0.0060903947,
      -0.021813784,
      0.0050549153,
      -0.009513844,
      -0.020386584,
      0.00077829487,
      -0.009678619,
      0.008559931,
      -0.008994971,
      -0.000010982253,
      0.0142179085,
      0.009003594,
      -0.0006699446,
      0.021416456,
      -0.015381201,
      -0.004727036,
      -0.00951379,
      0.0032404973,
      0.015564842,
      0.0059888526,
      0.03363083,
      0.0122406725,
      0.008204647,
      -0.008606441,
      0.013063159,
      0.0016016928,
      -0.0073507405,
      0.018246232,
      -0.033680383,
      -0.014792848,
      -0.0042567817,
      -0.0002800675,
      -0.011371223,
      0.0007028376,
      0.022230264,
      0.00345639,
      -0.013261845,
      -0.0055432227,
      -0.18217908,
      -0.0059365486,
      0.0025654486,
      0.0004587725,
      0.006003156,
      0.0054737423,
      0.0016592338,
      -0.023040308,
      0.02340708,
      -0.02643358,
      -0.0034783387,
      -0.026149165,
      -0.014329809,
      0.014562156,
      -0.0005557306,
      0.008395205,
      -0.0012887756,
      0.01768637,
      0.016837062,
      -0.01952439,
      -0.00059897645,
      -0.006393977,
      -0.0116311265,
      0.012953893,
      0.0012434646,
      -0.020660037,
      0.008197967,
      -0.0059507736,
      -0.025623895,
      -0.009532169,
      -0.022971064,
      0.006538461,
      -0.0011816691,
      -0.028058574,
      -0.026444461,
      -0.0015234803,
      -0.0023565993,
      0.007816844,
      0.008615783,
      -0.017600512,
      -0.01270347,
      -0.013966103,
      -0.008936467,
      0.0033072613,
      0.021453464,
      -0.015497464,
      0.0036240297,
      0.021079402,
      -0.0036292702,
      -0.016424637,
      0.0174028,
      -0.008179225,
      0.006281784,
      -0.005380882,
      0.009476917,
      0.025736645,
      -0.012698161,
      -0.0065502347,
      -0.007479127,
      -0.017441303,
      0.022779522,
      0.0011752248,
      -0.17734514,
      0.014589511,
      0.0016146464,
      -0.0119253015,
      0.0024393725,
      -0.013910524,
      0.0030303397,
      0.011542871,
      -0.003128995,
      -0.0014391674,
      0.0141503895,
      -0.0019734986,
      0.016467974,
      0.010048748,
      0.0068539735,
      -0.01094784,
      -0.009330849,
      -0.018452968,
      0.02949401,
      0.04219353,
      0.017634876,
      0.024516402,
      -0.026428595,
      -0.007817201,
      -0.012150586,
      0.0244407,
      0.017223435,
      -0.010848798,
      0.027237017,
      0.0061811847,
      0.012337121,
      -0.012626069,
      -0.002160617,
      -0.013721217,
      -0.035389926,
      -0.003140988,
      -0.012604978,
      0.020817006,
      0.007165196,
      0.020292265,
      -0.040242683,
      0.011343298,
      0.01922378,
      0.018998167,
      -0.026806893,
      0.0013757211,
      -0.0109118195,
      -0.00024213603,
      0.028576499,
      0.03019997,
      0.007161346,
      -0.010981143,
      0.03961619,
      0.00004218906,
      0.0022466336,
      -0.0010702225,
      -0.0041580326,
      0.0053046755,
      -0.0145264845,
      0.0045233467,
      -0.024562722,
      -0.011900061,
      -0.0059457766,
      0.028801303,
      -0.012404876,
      -0.0015994307,
      -0.0014937962,
      -0.011332985,
      -0.019497447,
      -0.012742261,
      -0.0095476275,
      -0.02987578,
      0.011587968,
      0.015067541,
      -0.032265745,
      0.02654492,
      -0.029111383,
      -0.010954904,
      0.0050233407,
      -0.009812093,
      -0.026298137,
      -0.026045334,
      -0.00034346856,
      0.013763517,
      0.00080113555,
      0.016719814,
      -0.014262294,
      0.020419873,
      -0.02787377,
      0.01927581,
      -0.005349471,
      -0.0013291999,
      0.011559405,
      0.012025991,
      0.015689267,
      -0.006475609,
      -0.0057177083,
      -0.009992428,
      0.0038430963,
      0.012153555,
      -0.02009245,
      0.010918284,
      0.014722849,
      0.00002633441,
      -0.0078078983,
      -0.014372372,
      -0.0020225432,
      -0.0039414414,
      0.024634823,
      0.01745394,
      0.013680696,
      0.017206598,
      -0.00763215,
      0.0094957445,
      -0.006699231,
      0.005120547,
      0.016809298,
      -0.030926993,
      -0.0069730324,
      0.0020395736,
      0.0075060925,
      -0.00058715726,
      0.0117184,
      0.005145594,
      0.0012233773,
      -0.014203062,
      0.0058775404,
      -0.0036426745,
      0.010863033,
      0.026315186,
      -0.0015523211,
      -0.0069129476,
      0.009775698,
      -0.041758314,
      -0.041019533,
      -0.0011105128,
      0.007383616,
      -0.0049878517,
      -0.024386007,
      0.00043900358,
      -0.036870908,
      -0.012798822,
      -0.008831792,
      -0.008309205,
      -0.036716208,
      -0.0062813032,
      -0.021081148,
      -0.013843992,
      0.011839513,
      0.01928095,
      -0.0042886827,
      -0.008189892,
      0.023031252,
      -0.026645895,
      -0.0041353186,
      0.013373979,
      -0.005491774,
      0.007197952,
      0.009900523,
      -0.01533676,
      0.00977216,
      -0.098949604,
      0.009582931,
      0.0016399579,
      -0.021927223,
      -0.0045281136,
      0.0052540954,
      -0.0037953823,
      0.034841996,
      0.0099645015,
      0.005247661,
      0.0111794695,
      -0.005671435,
      0.01688558,
      -0.001572815,
      0.008955357,
      -0.0104234265,
      0.02383094,
      0.008190294,
      -0.00070029765,
      -0.0057596397,
      -0.014361189,
      -0.006424564,
      0.015545422,
      -0.016579038,
      0.012903444,
      0.009817304,
      -0.012769043,
      0.005468089,
      0.03201272,
      -0.010638678,
      0.000034116292,
      0.021125572,
      -0.037244037,
      -0.0036237766,
      -0.006078385,
      -0.007348419,
      0.035544313,
      -0.010756905,
      0.002390228,
      -0.003103885,
      -0.020979911,
      -0.014444913,
      0.01326712,
      -0.0007938099,
      -0.00693264,
      -0.0044930223,
      0.010866814,
      0.009348676,
      -0.027138991,
      0.014432483,
      -0.023415165,
      -0.005912002,
      0.007970938,
      -0.011760268,
      0.010716864,
      0.005522683,
      0.004567982,
      0.0059591457,
      0.0045094937,
      0.010919655,
      -0.0059394278,
      0.004392123,
      0.02116069,
      0.016488533,
      0.006912086,
      -0.0021264348,
      0.016513603,
      -0.014730014,
      -0.01291904,
      -0.014055435,
      -0.0009187119,
      0.012442998,
      -0.030543102,
      -0.032861058,
      -0.0047864877,
      0.008776464,
      0.0111699095,
      -0.009133065,
      -0.030430688,
      0.045271724,
      0.022252755,
      0.006601179,
      0.010597071,
      0.02806862,
      0.03037418,
      0.0038429715,
      -0.012503685,
      0.0046476596,
      0.012089154,
      -0.015484041,
      -0.0035839013,
      0.02060418,
      -0.031835083,
      -0.00092427,
      -0.01202804,
      0.01786736,
      -0.028317083,
      -0.0060031246,
      -0.010152808,
      0.002676755,
      -0.0072092926,
      -0.003454025,
      -0.0046766913,
      -0.0042505986,
      0.004142565,
      0.031213531,
      -0.003415348,
      0.010491169,
      -0.003093728,
      -0.017115688,
      0.0031073878,
      -0.018291105,
      -0.014477991,
      -0.017449033,
      -0.019899882,
      0.023758363,
      0.021078689,
      0.010930559,
      0.0025508597,
      -0.009560198,
      0.012307858,
      0.01662783,
      -0.0033901036,
      -0.009474012,
      -0.025177132,
      -0.0003164828,
      -0.0110238325,
      0.006408321,
      -0.009092899,
      -0.018358031,
      0.0022878465,
      0.02248185,
      -0.008272797,
      -0.00689119,
      0.0028462089,
      -0.020722313,
      0.009661804,
      0.008998773,
      -0.0062734005,
      0.016253954,
      -0.011314903,
      0.0155492835,
      0.011170824,
      -0.013030457,
      0.018424526,
      0.014913929,
      -0.012703322,
      -0.013015041,
      0.0025417013,
      -0.011787452,
      -0.020049525,
      -0.026951319,
      -0.027048055,
      -0.0006309061,
      0.011641354,
      0.024969537,
      0.029336208,
      -0.008478157,
      0.016523564,
      -0.018510817,
      -0.0063469796,
      0.001568044,
      -0.014176942,
      -0.008911187,
      0.018948933,
      0.011246433,
      0.0028229742,
      0.018095914,
      -0.0067200023,
      0.0026214512,
      -0.010277816,
      -0.008007747,
      -0.03956214,
      0.008263657,
      0.018535899,
      -0.008918535,
      -0.0018384779,
      -0.01154862,
      0.037287556,
      -0.001666248,
      0.00042047974,
      0.0043071727,
      -0.014562618,
      -0.0042272983,
      -0.022405947,
      0.00011952068,
      0.023734301,
      -0.022988133,
      -0.0029498176,
      -0.017325237,
      -0.026082162,
      -0.023939416,
      0.007648369,
      -0.0044366065,
      0.0193396,
      0.021959528,
      0.010079957,
      0.0048767785,
      -0.007206035,
      0.008042311,
      -0.0119706085,
      -0.028109198,
      0.010398944,
      -0.012230558,
      -0.0008459601,
      0.0032057173,
      0.01189809,
      -0.007962364,
      -0.0119195,
      0.026739303,
      -0.00667104,
      0.000633165,
      0.0051495126,
      -0.022886029,
      0.006356385,
      0.00014836818,
      -0.010777099,
      0.005862679,
      -0.023649016,
      -0.014315608,
      0.015657054,
      -0.02768572,
      -0.0055133537,
      -0.0033784884,
      -0.0015531919,
      -0.024923157,
      -0.026424002,
      0.037003517,
      -0.014423292,
      -0.01768431,
      0.0030090555,
      -0.0012198181,
      -0.00007880669,
      0.013323284,
      -0.021596927,
      0.012187142,
      0.003650579,
      0.005119398,
      -0.007220166,
      -0.0074516,
      -0.0019503306,
      0.010872593,
      -0.018087916,
      0.0026311134,
      0.0023620396,
      -0.010470628,
      0.0338506,
      -0.00042431042,
      -0.022625783,
      0.0032836194,
      0.0069303806,
      0.008036684,
      0.004399956,
      -0.00567781,
      -0.028277237,
      0.028104672,
      -0.0292651,
      -0.012768391,
      0.0030463198,
      -0.0062646023,
      0.0027274871,
      0.009927162,
      -0.008524621,
      0.0043894933,
      -0.015372859,
      -0.027278963,
      -0.0038626124,
      0.023233164,
      0.017269392,
      -0.122058325,
      0.005647295,
      -0.021149643,
      -0.01880782,
      -0.0023252117,
      0.009413499,
      -0.0061497334,
      -0.017448395,
      -0.013001016,
      -0.0103817545,
      0.0042503634,
      0.0029311848,
      0.009417936,
      0.0034680748,
      0.0018197201,
      -0.017590081,
      -0.008282104,
      0.030271044,
      0.034300964,
      -0.009853325,
      0.011150349,
      -0.0051889163,
      0.002162768,
      0.0069985236,
      -0.014497805,
      0.006877689,
      0.019876804,
      -0.008068033,
      -0.0062633664,
      -0.019256685,
      -0.0018202893,
      -0.01416077,
      0.008221623,
      -0.0064857034,
      0.035253767,
      -0.008404039,
      0.0056596342,
      0.0024672681,
      0.011117303,
      0.01267928,
      0.013115053,
      -0.008789967,
      -0.0022761016,
      0.0077338135,
      -0.017462282,
      0.011517327,
      0.03352692,
      -0.023988033,
      -0.0040206355,
      0.04166288,
      -0.037044227,
      -0.040903598,
      0.001133977,
      -0.02842019,
      0.002487137,
      -0.0014406559,
      0.019647492,
      -0.00025102735,
      -0.007896303,
      0.0061520496,
      0.009293898,
      0.006206194,
      -0.0055376096,
      0.00631212,
      -0.010027481,
      -0.011123265,
      0.023342252,
      0.010878083,
      0.02053267,
      0.00079160335,
      -0.017533584,
      0.0002706136,
      -0.013125306,
      0.019648619,
      -0.0009432887,
      -0.01002113,
      0.0016966533,
      0.026513426,
      -0.010215203,
      0.015345441,
      -0.019616434,
      -0.006589304,
      -0.07031801,
      -0.006772214,
      0.001603741,
      -0.012540731,
      0.009954936,
      -0.0060666,
      0.009466057,
      -0.00006537409,
      0.006569683,
      -0.008105991,
      -0.024453862,
      -0.0078035817,
      0.0017679933,
      -0.00011811806,
      -0.013875007,
      -0.0017179885,
      0.013491091,
      -0.028321275,
      -0.018648423,
      0.014362974,
      -0.009718915,
      0.0046435515,
      -0.005495425,
      0.0027212272,
      0.018503353,
      -0.0022840896,
      -0.034249023,
      0.019198509,
      0.004228299,
      -0.018390946,
      -0.0031498186,
      -0.14227661,
      -0.012296829,
      0.02500254,
      0.026423894,
      0.0059138443,
      -0.011468257,
      -0.012241727,
      -0.007979652,
      0.0069131884,
      -0.023313547,
      -0.0055546807,
      -0.015497022,
      -0.005418257,
      0.012231529,
      0.0027876375,
      0.13751094,
      0.013331842,
      -0.0006523375,
      0.0023407876,
      0.009797776,
      -0.006115073,
      -0.019245612,
      0.013641646,
      0.021679968,
      0.0065910746,
      -0.0007211292,
      0.005604638,
      -0.0044361264,
      0.032194998,
      0.0017275285,
      0.0074720317,
      -0.035866443,
      -0.028937943,
      0.016190505,
      -0.008209848,
      -0.0046623363,
      0.01732495,
      -0.010526435,
      -0.008710902,
      0.0005550914,
      -0.00004215149,
      0.005850234,
      -0.0146334125,
      0.008545174,
      0.0011765686,
      0.0021633033,
      0.010003507,
      -0.02597747,
      -0.025927566,
      -0.017552247,
      -0.0046252795,
      -0.04902478,
      -0.0037448923,
      -0.008817912,
      -0.021438112,
      0.018621195,
      -0.025739796,
      0.008507682,
      -0.0064421175,
      -0.022115316,
      -0.008305334,
      -0.01909926,
      0.014832168,
      -0.010139758,
      0.0028503241,
      -0.030323701,
      -0.01149753,
      0.016082093,
      0.02035863,
      -0.0056400145,
      0.0025426184,
      0.021529056,
      -0.011966818,
      -0.014873709,
      -0.0121327685,
      -0.004950394,
      -0.009006471,
      0.0026686706,
      0.0066215466,
      -0.02422129,
      -0.0037058948,
      -0.0017412739,
      0.002903424,
      -0.02209272,
      0.010518237,
      -0.00175841,
      -0.026390674,
      0.016594715,
      0.0015843716,
      -0.022893965,
      0.0011267962,
      0.00527213,
      0.0017492856,
      0.028784256,
      -0.028075948,
      0.008426585,
      -0.009368435,
      0.008933198,
      0.0032008644,
      0.0025267398,
      0.01555651,
      -0.022451198,
      -0.0018372984,
      -0.019191995,
      0.030875329,
      0.011211631,
      0.008560476,
      -0.0068008853,
      0.0035701506,
      -0.029748954
    ]
  },
  {
    "id": "genai_cohort_nodejs_10_node_http_vtt",
    "content": "Well, well, well, you guys are doing absolutely great in no time. You have learned a lot of things in Node js, right? So in this particular video, let's hop and create a server for us. But guys, before creating a server, let's understand what the server thing is, right? That is more important. So what we are going to do is we are going to create an HTTP server, okay? And but before that, let's understand that what is this HTTP? What is the server? What is a request, what is response, all that. So HTTP stands for hyper Text transfer protocol. So that means it's basically a protocol for transferring the information on the Internet. Okay, how it works? So you, so whenever you talk about APIs, whenever you talk about Internet or servers, there are two components. One is you. You are who, you are a client, right? You are a client. So let's say that this is a client. Client can be a machine, it can be a mobile phone, a laptop, a MacBook, anything. On the other hand, you have what, you have a server. Okay? Now what is a server? Now don't think you know that this server is something very fancy thing or something like that. No, it's just a machine that is connected to the Internet number one, it has a public IP address and it has a public facing IP address, right? So it can be on Amazon Web Services, it can be Azure, it can be Google Server, or even it can be a bare metal. Bare metal basically means that it's a server which is on at your home, at your office. Okay? So the only thing is that because this is a server number one, it's a 24, on machine. So it's, it's by 7, you know, uptime. But plus it has a public facing IP. Public facing static IP, public facing static IP. So let's say that this particular server has an IP address of maybe something like 10, you know, So just random address I have written. So this is a server. Now what this client can do, client basically sends a request to a server, right? So client always sends a request request that hey, I want to do this, I want to do that, I want to do this stuff, I want that, I want to create this resource, I want to create a tweet, I want to upload a video. It's a request. Your server is responsible for processing this request. Now this request can be anything for example. So it can be a request to get some data, it can be request to post some data, it can be a request to delete some data. Any kind of request. Now, at this point, as a part of processing this request, it says, like, first of all, you have to authenticate that if this particular user is allowed to, like, you know, access that particular resource, you do authorization. That if, right, if there is an authority, then you do validation check and all that. And then you finally process. So whatever is needed. Now this processing part that I have written at the end, okay, this processing part can be a database operation. So your server actually can be connected to a database, right? So database can be. Your Postgres database can be there, your MongoDB is there. So you have a lot of databases. It can be a simple MySQL database, right? It can be a MySQL database. So any kind of database is actually here. So these are few databases that we can cover. Okay, so very simple, no, hard and fast thing there. So this particular server is like connected to this database. So it is doing some read and write operations in the database. And once the server has done its work, it is going to return something known as response. So that means at the end it's just a, request and a response. Client sends a request, server accepts the request, do a lot of magical things in it, and sends back a response. And this is what is known as a, request response cycle. Okay, so this is a cycle, and this cycle makes the client server communication possible, right?",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "10-node-http.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/10-node-http.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0014030153,
      0.024485182,
      0.020208992,
      -0.049550638,
      -0.010028784,
      0.006874134,
      0.035546467,
      0.019719388,
      0.010775969,
      0.028844807,
      -0.0068606483,
      0.009530303,
      0.0037732748,
      0.016695004,
      0.11889726,
      0.0078058476,
      -0.0064852326,
      -0.009773414,
      0.0037910168,
      -0.020160072,
      0.01926606,
      -0.005976361,
      0.004387976,
      0.018669723,
      0.0080464445,
      -0.00046694983,
      -0.002436058,
      -0.0028036304,
      0.016320525,
      -0.01630374,
      0.0030416772,
      -0.02009138,
      0.0051152785,
      0.031300392,
      -0.0026497128,
      0.029149566,
      0.02088369,
      0.0056444253,
      -0.034610815,
      -0.008517913,
      -0.017654562,
      0.0053654336,
      0.014621894,
      -0.02260656,
      0.021682275,
      0.005803757,
      0.00038227387,
      -0.018777091,
      0.00929991,
      0.009993988,
      -0.016036918,
      -0.010140489,
      -0.014242925,
      -0.18954736,
      -0.012572701,
      0.0024931503,
      0.0028079462,
      -0.0001305058,
      -0.0060039177,
      -0.0007234834,
      -0.015096762,
      0.0010595913,
      -0.016824171,
      0.023148749,
      -0.022234201,
      -0.0069055716,
      0.006702888,
      -0.00204476,
      0.014181302,
      -0.0037897322,
      0.0025142073,
      0.0060939267,
      -0.023939736,
      -0.015207407,
      -0.028172495,
      -0.0081670685,
      0.0059064645,
      0.011249432,
      -0.010022505,
      -0.0014108063,
      0.0046370267,
      -0.012496939,
      -0.0085964445,
      0.0038427145,
      0.009398727,
      -0.012782242,
      -0.02089223,
      -0.006930075,
      -0.011455337,
      0.00903998,
      0.00065479486,
      0.01599883,
      0.003442751,
      -0.0022394417,
      -0.0021931967,
      -0.0051134774,
      -0.008832798,
      -0.00071873196,
      -0.023479447,
      -0.008361974,
      0.0025781344,
      0.010439835,
      -0.03161086,
      0.012620165,
      -0.0031354236,
      0.011885095,
      0.006934566,
      0.0025554334,
      -0.004677324,
      -0.027237894,
      0.012384558,
      -0.016575089,
      0.01071695,
      0.004723602,
      -0.0001661942,
      -0.19394603,
      0.011247449,
      0.0008277603,
      -0.0024593587,
      0.0063087326,
      -0.018955462,
      -0.007756348,
      0.008991914,
      0.017000632,
      -0.005328091,
      0.007898828,
      0.0029641239,
      0.022592856,
      0.015940193,
      0.00852385,
      0.003150745,
      0.0004715761,
      -0.0087796515,
      0.017438052,
      0.023790611,
      0.023386117,
      -0.00929361,
      -0.01503767,
      -0.009065267,
      -0.032183085,
      0.0147570595,
      0.035768934,
      -0.0039741793,
      0.034753658,
      -0.0009734809,
      0.011280661,
      -0.0444651,
      0.015003476,
      -0.038949735,
      -0.0351181,
      0.009021175,
      -0.009313812,
      0.036404103,
      0.015452524,
      -0.007585574,
      -0.036182724,
      -0.017889932,
      0.007674888,
      0.004753639,
      -0.010650831,
      -0.0003759854,
      -0.0017920445,
      -0.00016353055,
      0.02192527,
      0.0124288555,
      0.0002216618,
      -0.028244475,
      0.015174977,
      -0.001611795,
      -0.0007602163,
      -0.012222658,
      -0.01081534,
      -0.016376387,
      0.017577339,
      -0.011205462,
      -0.014841079,
      -0.014777073,
      -0.00056248135,
      0.003432644,
      -0.020628033,
      0.00088964554,
      -0.0023170565,
      -0.0017015993,
      -0.018094243,
      0.009572813,
      -0.007831357,
      -0.026682155,
      -0.009035468,
      0.009008495,
      -0.013179173,
      0.010273111,
      -0.012397061,
      -0.007144522,
      -0.0045779683,
      0.0007521367,
      -0.014650662,
      -0.008970715,
      -0.025116969,
      -0.004448818,
      0.01548943,
      0.016692722,
      -0.004009469,
      0.0029783603,
      -0.021702087,
      0.0068113133,
      0.0062079397,
      0.019382555,
      -0.0120332865,
      0.009201619,
      0.020346543,
      -0.011061121,
      -0.022932649,
      0.00993177,
      -0.0051240777,
      -0.0017272203,
      -0.008562419,
      0.020593666,
      0.022912057,
      -0.009152027,
      -0.014748665,
      -0.0031827146,
      -0.0075200037,
      -0.014242677,
      0.011666543,
      0.014852029,
      0.0076096803,
      -0.0056828056,
      -0.00082394,
      0.02096982,
      -0.012453051,
      0.0032736456,
      -0.012065207,
      -0.02706858,
      0.0022091598,
      0.03178644,
      -0.020804936,
      0.009071365,
      -0.008058528,
      0.0008918718,
      0.0010180827,
      0.0075137005,
      0.007514007,
      0.0029292074,
      0.027160536,
      0.03396366,
      -0.00008520058,
      -0.013100965,
      0.003745885,
      -0.013470207,
      -0.030299943,
      -0.019187225,
      -0.0007282636,
      -0.022922445,
      0.0072462237,
      -0.0021863359,
      -0.029143382,
      -0.033254556,
      -0.012169603,
      -0.00049542857,
      -0.015946504,
      -0.0019660047,
      -0.015727073,
      -0.0003353859,
      0.010984161,
      0.0094565535,
      -0.0025592113,
      0.009710683,
      0.02951125,
      -0.02857096,
      -0.0019108263,
      0.012209417,
      -0.0054545193,
      -0.008222853,
      -0.0035042309,
      0.005996297,
      0.023065139,
      -0.08619853,
      -0.00026688425,
      -0.0039487397,
      -0.010982939,
      -0.011674165,
      0.00071007747,
      -0.01899181,
      -0.00035237026,
      0.024698578,
      0.020359423,
      0.013984861,
      -0.0055745053,
      0.022067683,
      -0.00066930574,
      -0.003548473,
      0.012829819,
      -0.011844648,
      0.0051824874,
      0.0081645,
      -0.023014314,
      -0.010464405,
      0.008391551,
      -0.0024003892,
      -0.010228393,
      0.009945175,
      -0.008884841,
      -0.030755857,
      0.01244785,
      0.018657116,
      -0.008146173,
      0.008836085,
      0.02611567,
      -0.024889123,
      -0.006439772,
      -0.0047583813,
      -0.0028460133,
      0.02090521,
      -0.023536308,
      0.0016596963,
      -0.0067437487,
      -0.007003194,
      -0.012817092,
      0.02017236,
      0.015297207,
      -0.0094449,
      0.017511595,
      0.03191955,
      0.0016993382,
      -0.027416235,
      0.0016137938,
      -0.013845589,
      -0.00087243615,
      0.021691227,
      -0.04445647,
      0.016955478,
      0.0038334257,
      0.0008091817,
      0.008504968,
      0.012064481,
      0.007630275,
      -0.00510103,
      -0.0018046426,
      -0.002316313,
      0.00771045,
      0.014786441,
      0.006421004,
      0.0077884225,
      -0.024239631,
      0.008994501,
      -0.0074442355,
      -0.0012593737,
      -0.019696612,
      -0.02279058,
      -0.04475062,
      0.0120067345,
      0.01679253,
      0.008992729,
      -0.005479214,
      -0.019714324,
      0.029643416,
      0.004020185,
      -0.0040712873,
      0.006968084,
      0.025382863,
      0.0074977884,
      0.010501253,
      -0.0061007314,
      -0.0008175472,
      -0.009496657,
      -0.0072440305,
      -0.0016108609,
      0.020690586,
      -0.0089142285,
      0.00048185326,
      -0.017315181,
      -0.009754238,
      -0.025277726,
      0.0033665274,
      0.006059933,
      -0.00005645477,
      -0.015879847,
      -0.0054923478,
      -0.0035585312,
      -0.000045511166,
      0.0008947482,
      0.04321689,
      -0.010197443,
      0.0036883897,
      -0.0007948994,
      0.007007113,
      -0.012354112,
      -0.007049979,
      -0.02122213,
      0.011252331,
      -0.012932982,
      0.024645649,
      0.018417118,
      0.0033953227,
      -0.021274792,
      -0.030356577,
      -0.012373475,
      0.006460286,
      0.020813245,
      0.010697212,
      -0.026055884,
      0.013818636,
      -0.026337903,
      0.0043245824,
      -0.004749389,
      -0.0096825175,
      -0.0054855323,
      -0.014503726,
      -0.01339005,
      -0.00982671,
      -0.010323858,
      -0.0112662045,
      0.0031387953,
      0.012146705,
      0.020516673,
      0.007889152,
      -0.02296251,
      0.02274873,
      -0.0068571,
      -0.017007524,
      -0.004939262,
      -0.0033327444,
      -0.02419249,
      -0.0045315507,
      0.000064150125,
      -0.010225415,
      -0.008934491,
      0.006411191,
      -0.028630491,
      -0.0003780359,
      0.0067966636,
      0.023689432,
      0.012667301,
      0.014125506,
      -0.004344955,
      -0.008424273,
      0.013738151,
      -0.0077580367,
      -0.01783545,
      -0.027387187,
      0.028777106,
      -0.0007574282,
      -0.006286474,
      0.004438589,
      0.009312899,
      0.010636207,
      -0.018146545,
      -0.010154572,
      -0.039054144,
      0.008664433,
      0.0072041196,
      -0.008813945,
      0.009450719,
      -0.015618995,
      0.016217768,
      -0.004474956,
      -0.0076466817,
      -0.010206369,
      -0.018325856,
      0.008549579,
      0.0036275233,
      0.007734043,
      0.0017090342,
      -0.022745606,
      -0.00849224,
      -0.008306221,
      -0.00027152203,
      -0.009124361,
      0.005326866,
      0.0008473442,
      0.009814137,
      0.020261753,
      0.030658608,
      -0.012645787,
      0.003940791,
      0.003689712,
      -0.017912643,
      -0.01434393,
      0.00246876,
      -0.014562439,
      0.031554505,
      -0.0012199407,
      -0.010075105,
      -0.029097935,
      0.0041873427,
      0.011136226,
      -0.013868393,
      0.0066242698,
      0.0075203683,
      0.002757094,
      0.032000158,
      -0.0030660618,
      -0.017727802,
      0.02719502,
      -0.019555151,
      -0.008026555,
      0.005719631,
      -0.009808784,
      -0.017857539,
      -0.023266645,
      0.0031215975,
      -0.0029719062,
      -0.025088156,
      0.017472897,
      0.005558359,
      -0.01122561,
      0.00838397,
      -0.011142975,
      -0.008877803,
      0.014285377,
      -0.014838089,
      -0.0074560638,
      0.021945333,
      0.0015901278,
      -0.005452309,
      0.01424278,
      -0.0072806105,
      -0.0057964423,
      -0.015828174,
      -0.020785056,
      -0.0036028232,
      -0.01308746,
      0.02988812,
      0.013415471,
      -0.013918962,
      -0.0009565632,
      0.031035202,
      0.0065641426,
      0.014168116,
      -0.012922383,
      -0.006908232,
      0.027390616,
      0.0015526483,
      -0.004854188,
      -0.0034376176,
      -0.011418234,
      0.0020667894,
      -0.014093311,
      -0.004417022,
      0.03456524,
      -0.001569943,
      -0.026211575,
      0.0007846257,
      0.0012706936,
      0.023404954,
      -0.10392451,
      -0.0072907596,
      -0.0043424168,
      0.00027076845,
      -0.00663907,
      -0.020606937,
      0.022205904,
      -0.024879983,
      -0.016642101,
      -0.01683812,
      -0.0019811196,
      0.00630606,
      -0.0028729863,
      0.017967256,
      -0.0070537576,
      -0.008447578,
      -0.0114944745,
      0.031923387,
      0.02720239,
      -0.008361387,
      0.013649348,
      -0.0034023935,
      -0.0063428176,
      0.012833067,
      -0.01028394,
      0.00253156,
      0.028074361,
      0.0072366344,
      0.0025297387,
      0.0020933682,
      -0.013444249,
      -0.0055649714,
      0.0036194604,
      0.0051518064,
      0.02327014,
      0.011240633,
      0.017936131,
      0.0013176111,
      0.028620014,
      0.019819599,
      0.0045220237,
      0.0070645534,
      0.008332957,
      0.015859274,
      0.0011372984,
      0.010045841,
      0.016851926,
      -0.023754405,
      -0.0020698532,
      0.02486531,
      -0.056921072,
      -0.036023382,
      -0.012795898,
      -0.01395035,
      0.026591042,
      -0.0026070683,
      0.032415397,
      0.009254911,
      -0.0052256933,
      -0.011565054,
      -0.001809953,
      0.013502697,
      -0.009847508,
      0.03630744,
      -0.010351744,
      -0.00574615,
      0.02538584,
      -0.01743373,
      0.0018206988,
      0.0014575251,
      -0.0103361895,
      0.015906515,
      0.0019728635,
      0.04249319,
      0.0053258506,
      -0.001452536,
      0.0075303116,
      0.013896175,
      -0.013544238,
      0.017873403,
      -0.0038162644,
      0.020292062,
      -0.0805191,
      -0.007663819,
      -0.0013597539,
      0.0071602347,
      0.01408683,
      -0.0019013339,
      -0.020834291,
      0.015351001,
      -0.014501911,
      0.0070390776,
      -0.0091531575,
      -0.010904818,
      -0.006760045,
      -0.009603879,
      -0.037716072,
      0.012873048,
      0.019089265,
      -0.034124743,
      -0.016734201,
      0.00263626,
      -0.004302685,
      -0.012395803,
      -0.014579875,
      -0.001887306,
      0.012944112,
      0.017993994,
      -0.030637315,
      -0.0012241986,
      -0.0020168794,
      0.0018377173,
      0.008629962,
      -0.13809983,
      -0.013532595,
      0.011554224,
      0.016812753,
      0.010407801,
      0.0037057293,
      -0.01660319,
      0.0076802345,
      0.012047505,
      -0.021194417,
      -0.008187145,
      -0.028732589,
      -0.023038426,
      0.012474424,
      -0.0070203547,
      0.14182097,
      0.009144139,
      0.016072929,
      -0.0021692258,
      0.020642662,
      -0.020441871,
      -0.004313811,
      0.007294455,
      0.011032276,
      0.007963126,
      -0.02448325,
      0.013235672,
      -0.008172435,
      0.015351582,
      0.028049113,
      0.011472377,
      -0.019407934,
      -0.019219566,
      0.03649125,
      -0.004199512,
      -0.024718203,
      0.007935633,
      -0.012651493,
      -0.014585953,
      -0.0071973614,
      -0.0004226567,
      -0.0014048384,
      -0.013867312,
      0.022166831,
      0.0060480996,
      0.010608871,
      0.003610357,
      -0.009496066,
      -0.0116549665,
      -0.018970584,
      0.03276314,
      -0.056217067,
      0.001970094,
      -0.0075096437,
      -0.011595819,
      0.035264965,
      0.010205894,
      0.021757377,
      -0.012351116,
      -0.011416657,
      -0.006879925,
      0.0005924708,
      0.011707649,
      -0.008413537,
      0.003541981,
      0.0018761184,
      0.019792303,
      0.033709973,
      0.0074006775,
      -0.013320031,
      -0.009269315,
      0.012313285,
      -0.017852895,
      -0.0058897715,
      -0.031571526,
      -0.020992437,
      -0.0014662957,
      0.024143023,
      0.0024366227,
      -0.03471605,
      -0.0034459073,
      0.008837209,
      0.0065989713,
      -0.010874473,
      0.007569132,
      -0.0018865404,
      -0.018963184,
      0.024852827,
      -0.0024214766,
      -0.010676799,
      0.008210459,
      0.009282802,
      -0.013890915,
      0.029594397,
      -0.0058698347,
      0.015921107,
      -0.0032792129,
      0.016195536,
      0.020404644,
      -0.008614232,
      0.00686157,
      -0.02244308,
      0.0066120527,
      -0.015202226,
      0.02324491,
      -0.00029354414,
      0.028807065,
      0.022039915,
      0.0022095996,
      -0.02776044
    ]
  },
  {
    "id": "genai_cohort_nodejs_11_node_http_statuc_codes_methods_vtt",
    "content": "Right, so now you have understood that what a server does. Now as a backend developer, what's our duty that we have to create this server? We have to create a machine which is able to handle the incoming request, right? You should be able to accept the incoming request, do some magical stuff on it and send back a response. So this is what we have to do. Now there is one thing that I'll be using a lot while we are in this course, that is these kind of diagrams. Okay, so, so what we are going to do is, so in order to represent that, how, how the request response cycle was done, so we construct two lines. So this first line is for the client, let's say like we can name it as client. The second line is let's say for the what do you call server? Okay, they can be third line for database and all. So what we can do is we can represent it in this way. So let's say client sends a request right now, now server processes the request. So let's say that it took five seconds, okay, it took five seconds. So let's say five seconds request, it took. And after five seconds what you can do is you can return, you can return back the response. So you can just read, you can just name it as, hey, there was a request, right? So there was a request made by the client. Okay, you took five seconds to process it. Then, then you sent back the response. Okay, so you here sent back the response. That is whatever client needed. And then this response, this request response cycle was terminated here. So basically client closes the connection. So client closed the connection because you know, this one cycle is completed. So if client needs something it can again send a request and response and the cycle continues. So this is where the client actually close the connection. Okay. And yeah, there is a possibility that client can even keep the connection open that is known as server sent events. So yeah, don't worry about that. Okay, so this diagram helps us to visualize that what exactly happened. Okay, so these kind of diagrams you will see a lot if you are into system design or something like that. But yeah, again, again it's a high level because it's a beginner friendly course. So I don't just want to, you know, confuse you. So I hope you are getting it now with this knowledge, with this knowledge there is little bit more that you need to understand. Okay. Number one, when we talk about this HTTP thing, okay, so in HTTP you have to understand that there is something known as HTTP methods, okay. Which includes like you have a Get method, you have a post method, you have a put method, you have a path patch method, you have a delete method. So there are some methods and there are something known as HTTP status codes, which includes one of the famous RS404 which says not found. So there are a lot of status codes that you have to understand. So a good API or a good backend should follow these rules. Okay? So let's cover them one by one. First is the HTTP methods, right? What are, what are HTTP methods? See, when a client sends a request, right? This request has something known as HTTP method, okay? It has some method attached to it. For example, there can be a request of get type, there can be a request of post type, there can be a request of delete type and all that. If client wants to get some data from the server, the client should send a get request. So get request is made when, when client, when client want to read some data or to get some data to get some data from the server. So this is where you make a get request post when client want to send some data to server. So let me give you an example. Okay, so for the first example that is the get, let's say you want to see all the tweets, See all the tweets, or you want to Var a video, or you want to see comments on a video. These all are what, these all are get requests. Because you can see that these requests is something like that you want to get something from the server. Post examples for post, it can be like you want to create a tweet, you want to upload a video, upload a video. Or it can be like, you know, you create a comment, you comment below this video that is going to be a post request, you create a new comment. So these all are what, these are post requests. Now similar to this, similar to this, you have something known as patch request. Patch is basically when, okay, when client wants to update, some existing data. So when you have some existing data and you want to update it, you can send a patch request and delete. When client wants to delete some data, okay, to delete some data. So whenever client makes a request to the server, this request can be a get request, a post request, delete request, patch request. So there is a request. Okay, so these are the HTTP methods. These all are what, these are HTTP methods. Get, post, delete, patch, put. Okay, then, then there is something known as HTTP status codes. Now these were request, okay, these, these things that we just discussed this was related to the request that when client sends the request, this particular thing is, is taken into the consideration right now. This part is fine. This part is relatively very easy. I know, Just one second. My OCD is kicking in. Yeah. Now when you send a response, okay, now when you send a response back, the server sends some status code. Status code is nothing but just a number. Okay, these are nothing, but these are some bunch of numbers. So I'll tell you what these numbers means. So while sending back the response, the server can say for example, Hey, 404, which basically tells the client that hey, the thing that you are trying to access does not exist, not found. It can be a internal server error, it can be a That means everything is okay. It can be a that is unauthorized. It can be a four or three. It can be it can be of, let's say It can be a So server is basically sending some kind of numeric data to indicate what kind of response it is. So this status code is used to tell what kind of response it is. Okay, so it can be like a successful response, it can be an error response. What kind of error is that? It can be a redirect thing. So that thing. Okay, so let me give you a few examples. For example, if backend sends 200, this means everything was okay. If backend sends 211, it means it was okay and something is created. You created some resource on the server. If server sends 400, that means it's a bad request. It's a bad request. So that means your request was bad. If it sends a it means not found that something. If it sends it means that there is some server error. Server error, that server there, there is something wrong with the server. So these are some status codes which we use commonly. And there is even more. Like for example, there is a that is for a redirect. Okay, that is for a redirect. So let me show you all the status codes that are there. So just search for HTTP status codes. Okay, so HTTP status codes. So you can see that it ranges from to all the way to Now if a status code starts with 1, okay, now this is very important. If a status code starts with one like 111-this basically means it's an informational response. Okay, so this is first thing. Second, if it starts with So like that is from to If it starts with 2, so 2xx, this basically means it's a success response. Okay, then if it starts with three, if it starts with three, it's a redirect. Just one second. Yeah, so if it starts with 3xx, it's a redirect. Let's say server wants to redirect you to somewhere. If it starts with four, it basically means it's a client error. That means you are doing some error four or four not found. You are trying to access something that is not existing. And if it starts with 5, it's a server error. So these are the response codes that we are going to see. So you can see that hey, these two are starting with four, right? So this, this basically indicates that it's a client error. This starts with This is a server error. This These both starts with This means these are successful responses. So this is how the server sends an appropriate status code, which of course as a developer you have to set to tell the client that what kind of response this is. Okay, so these are your response mechanisms. So client sends a request along with a HTTP method and you process it. And while sending the response you have to set a number, a code which tells the client that what kind of request is that? Okay.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "11-node-http-statuc-codes-methods.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/11-node-http-statuc-codes-methods.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.014636474,
      0.022742108,
      0.019692726,
      -0.054286882,
      -0.006495873,
      0.007313753,
      0.022203261,
      0.012589065,
      -0.0028419602,
      0.016801702,
      -0.0037087826,
      0.008068593,
      0.00922031,
      0.022638848,
      0.12667683,
      -0.008094352,
      0.0069810706,
      -0.0036129765,
      -0.010436117,
      -0.019864047,
      0.013586078,
      0.001670306,
      0.0017275542,
      0.011815541,
      0.0044795233,
      -0.0017075941,
      -0.009159369,
      0.012213359,
      0.023763055,
      -0.0028986274,
      -0.0024494955,
      -0.017102554,
      0.023017695,
      0.021659674,
      -0.009550013,
      0.023408461,
      0.014047509,
      0.0030774702,
      -0.0165665,
      0.004383159,
      -0.0059341136,
      -0.001283837,
      0.027873151,
      -0.02283738,
      0.020329308,
      0.009085527,
      -0.009913568,
      -0.006939681,
      -0.0017932216,
      0.0049486873,
      -0.01801588,
      -0.016133683,
      0.0018369588,
      -0.19639911,
      0.006316653,
      -0.0109071415,
      -0.0043187584,
      0.0018372223,
      -0.0072912774,
      0.016200095,
      -0.019974539,
      0.008153459,
      -0.009984102,
      0.011081898,
      -0.02857639,
      -0.01792288,
      0.023992268,
      -0.010028931,
      0.0012594651,
      -0.003475682,
      0.008893282,
      0.0102150105,
      -0.023474215,
      -0.022841532,
      -0.019864604,
      -0.009252052,
      -0.0026367544,
      0.011096532,
      -0.010985309,
      0.0064548557,
      0.005684648,
      -0.015661808,
      -0.013600869,
      0.018467002,
      0.017003164,
      -0.013110925,
      -0.009800184,
      0.014885143,
      -0.0010330473,
      0.0024476666,
      -0.000633684,
      0.0056964327,
      0.012661967,
      0.008512254,
      0.012151154,
      0.004667206,
      -0.013045126,
      -0.002919471,
      -0.012471447,
      -0.012515039,
      0.007385265,
      0.006113332,
      -0.03154637,
      0.007815193,
      -0.009524412,
      0.015392784,
      0.0082142865,
      0.009444391,
      -0.019332714,
      -0.019586643,
      0.014664704,
      -0.027782103,
      -0.0028103958,
      0.012082912,
      -0.005073249,
      -0.19290122,
      0.012366215,
      -0.011654925,
      0.0125154955,
      -0.0024500932,
      -0.028287934,
      -0.0043492704,
      0.013546578,
      0.019834105,
      -0.01978003,
      -0.0058440734,
      0.01157206,
      0.02059981,
      0.015726158,
      0.009360114,
      -0.010440087,
      -0.012587006,
      -0.0045264615,
      0.018939417,
      0.0110884495,
      0.02190693,
      -0.014062481,
      -0.015327501,
      -0.010650916,
      -0.028909918,
      0.012598024,
      0.03892356,
      -0.006355705,
      0.027464483,
      0.00620665,
      0.0022111004,
      -0.03260668,
      0.019836444,
      -0.027889822,
      -0.024484197,
      0.011465293,
      -0.014167713,
      0.024506366,
      0.025301877,
      0.0044884407,
      -0.016451858,
      -0.0051898956,
      0.0030302547,
      0.00500076,
      -0.004319647,
      -0.013862748,
      0.0014668007,
      0.007783629,
      0.022583516,
      0.00932587,
      -0.0023682413,
      -0.026861789,
      0.017054819,
      -0.008401705,
      0.0065124924,
      -0.013438893,
      -0.009210227,
      -0.009760581,
      0.0095164655,
      -0.016484203,
      -0.0065921447,
      -0.017788688,
      0.008556098,
      0.003020404,
      -0.009717677,
      0.012681478,
      -0.0099957455,
      -0.004582203,
      -0.0067939097,
      0.011622024,
      -0.0051549,
      -0.01870732,
      -0.0014749798,
      0.0039056768,
      -0.0029275485,
      0.012692994,
      0.0019111045,
      -0.002301815,
      -0.0031802303,
      0.0019300977,
      -0.0345006,
      -0.002130725,
      -0.03345886,
      -0.0074766222,
      0.03120121,
      0.02037394,
      0.0042072856,
      -0.004767218,
      -0.012590306,
      -0.0026392296,
      0.0010972732,
      0.013955875,
      -0.0070111277,
      -0.005106486,
      0.006862996,
      -0.031377327,
      -0.028206365,
      0.011591801,
      -0.015505975,
      -0.0062736073,
      -0.0072848815,
      0.008064089,
      0.022240156,
      -0.010506819,
      -0.02884718,
      -0.005408149,
      0.0026834875,
      0.0021152697,
      0.022857388,
      0.0073895673,
      -0.001964324,
      0.010640167,
      0.0020548787,
      0.021603242,
      0.0009416436,
      0.004784788,
      -0.0023698197,
      -0.025715422,
      -0.0071049607,
      0.035207607,
      0.00275535,
      0.007767775,
      -0.006184231,
      0.018742109,
      0.015951522,
      0.0013494616,
      0.0019227411,
      -0.015071713,
      0.014954694,
      0.023925636,
      0.011212245,
      -0.02082901,
      0.005671989,
      -0.013736846,
      -0.032562125,
      -0.0141485315,
      -0.0023038725,
      -0.011172303,
      -0.014305292,
      0.0009406603,
      -0.0323409,
      -0.045128852,
      -0.014573059,
      -0.0008489976,
      0.014027615,
      0.0056752427,
      -0.017138297,
      -0.0147467395,
      -0.00053221546,
      0.010038493,
      -0.0109240115,
      0.021551432,
      0.024600625,
      -0.030779433,
      0.005966779,
      0.008234661,
      0.003945243,
      -0.018062958,
      -0.0032120156,
      -0.004626286,
      0.016939072,
      -0.082886085,
      0.012359676,
      0.0070294417,
      -0.018555412,
      -0.007594684,
      -0.0031118223,
      -0.037194602,
      -0.004955094,
      0.018351102,
      0.017537218,
      0.00704529,
      -0.02278202,
      0.021363841,
      -0.009955026,
      -0.0073223594,
      0.009526304,
      -0.012150974,
      0.006538126,
      0.0041275052,
      -0.040100258,
      -0.009567369,
      -0.0077894675,
      -0.011566636,
      0.0026070504,
      0.018477978,
      -0.008229313,
      -0.017816419,
      0.0094006825,
      0.016481783,
      -0.0044100843,
      -0.010123265,
      0.019230967,
      -0.0027954828,
      0.008029489,
      -0.017406894,
      -0.018885475,
      0.009356085,
      -0.01731602,
      -0.00069119525,
      0.0062809885,
      -0.0012070026,
      -0.016090948,
      0.012075454,
      0.013107473,
      -0.0013758268,
      0.018180862,
      0.028768662,
      -0.0024904045,
      -0.028315343,
      -0.0031838245,
      -0.020761423,
      0.0044074394,
      0.020865574,
      -0.029061181,
      -0.0062411893,
      0.0030928154,
      -0.0056294124,
      -0.008011266,
      0.013034823,
      -0.0014706529,
      0.0073471046,
      -0.010349221,
      0.00920286,
      -0.001851137,
      0.013781073,
      -0.00085818063,
      0.01699378,
      -0.015942536,
      0.0005996962,
      -0.008876028,
      -0.0041882885,
      -0.030901223,
      -0.012763812,
      -0.04349633,
      -0.002460601,
      0.011638501,
      -0.005201633,
      -0.0092276,
      -0.020177513,
      0.027104286,
      -0.0057904054,
      0.005551231,
      0.004378931,
      0.02584465,
      -0.0061862255,
      0.011598024,
      0.0024626055,
      -0.007985035,
      -0.0013595725,
      -0.0019278913,
      0.0131453555,
      0.031912215,
      -0.0060988297,
      -0.0116128,
      -0.023863975,
      0.009251833,
      -0.02177321,
      -0.010848016,
      0.0059016305,
      0.008434523,
      -0.009259562,
      0.0034862552,
      -0.014312419,
      -0.0091973785,
      -0.008679947,
      0.026311586,
      -0.01799045,
      -0.0030995423,
      0.0020442135,
      0.0008458724,
      -0.021199252,
      -0.0009544033,
      -0.019231722,
      0.0076568634,
      -0.017571803,
      0.027168222,
      -0.0028699804,
      0.0042158384,
      -0.016122226,
      -0.026627272,
      -0.009982256,
      0.0020924201,
      0.026257683,
      0.006820297,
      -0.029318668,
      0.018031867,
      -0.025097735,
      0.015586473,
      -0.014286697,
      -0.0131017715,
      -0.008060754,
      -0.016163,
      -0.022227272,
      -0.0060693477,
      -0.011894064,
      -0.021780515,
      0.0154826185,
      0.018592874,
      0.012387358,
      0.01409896,
      -0.014954036,
      0.02701517,
      0.009325749,
      -0.010594073,
      0.0019846784,
      0.011769743,
      -0.019278528,
      -0.0013389885,
      0.003120534,
      -0.006337957,
      -0.024674175,
      -0.0021587147,
      -0.040114988,
      -0.0055241226,
      0.004565965,
      0.026491323,
      0.004356768,
      0.023161262,
      -0.012970715,
      -0.016105007,
      0.0158854,
      0.008949171,
      -0.018799968,
      -0.019396532,
      0.028579963,
      -0.005253848,
      -0.00874124,
      -0.0021438438,
      0.011392037,
      0.012871419,
      -0.007989247,
      -0.015772954,
      -0.036792424,
      0.0030273164,
      0.0071435454,
      0.005911336,
      0.012187254,
      -0.013723576,
      0.024644876,
      -0.004301786,
      -0.0016670178,
      0.0054386584,
      -0.025436357,
      0.025655294,
      -0.0027468256,
      -0.0012429247,
      0.009469422,
      -0.014119872,
      -0.007555815,
      0.0012724759,
      -0.0226085,
      0.0034012636,
      -0.0008209179,
      0.0038477627,
      0.011452357,
      0.020502402,
      0.005720298,
      -0.006046865,
      0.009244858,
      0.0077563403,
      -0.023860691,
      -0.014631687,
      -0.005476215,
      -0.0145102,
      0.024215447,
      -0.012092004,
      -0.017226867,
      -0.028879046,
      0.013945002,
      0.004211114,
      -0.004799168,
      0.0016450105,
      0.025391035,
      0.0061017657,
      0.029859144,
      0.006918717,
      -0.00826214,
      0.023376986,
      -0.019270169,
      -0.0020834813,
      0.012755248,
      -0.0032042256,
      -0.011944278,
      -0.01139917,
      -0.004143531,
      -0.008569385,
      -0.01451383,
      0.003150594,
      -0.0007781748,
      0.001972013,
      0.007395698,
      0.0020777872,
      0.010595946,
      0.01815029,
      -0.026936036,
      -0.010804826,
      0.015621596,
      0.008582697,
      0.0038915218,
      0.012594198,
      0.0024877847,
      -0.008107228,
      -0.024372479,
      -0.01753293,
      0.007250401,
      -0.0067008156,
      0.023199355,
      0.014209447,
      -0.019515442,
      -0.0018623774,
      0.023773612,
      0.030271359,
      0.006236698,
      -0.01754872,
      -0.0155260395,
      0.030522907,
      0.0021450173,
      0.00025643327,
      -0.0035616108,
      0.0007951841,
      0.007723529,
      -0.011726897,
      -0.00068798545,
      0.022581378,
      -0.0031644488,
      -0.024771659,
      0.0014033832,
      0.0050685066,
      0.020890744,
      -0.114158876,
      -0.008646622,
      -0.01846445,
      -0.005914197,
      0.006367732,
      -0.021448998,
      0.022436209,
      -0.025059754,
      -0.00047821781,
      -0.030834347,
      0.0031514156,
      0.012923596,
      0.006357167,
      0.021301512,
      -0.003315561,
      -0.0071645565,
      -0.012132934,
      0.025447495,
      0.03443888,
      0.0022675649,
      0.010545571,
      0.0028135946,
      0.006284404,
      0.014584559,
      -0.0020594527,
      0.00506831,
      0.019543156,
      0.004927136,
      -0.01439487,
      0.0048453994,
      -0.02069316,
      -0.0014226638,
      -0.014247575,
      0.01327183,
      0.01718285,
      0.0071068103,
      0.0064147674,
      -0.00012947511,
      0.009745424,
      0.012468778,
      -0.0038406446,
      0.018986633,
      0.0018016298,
      -0.0012700853,
      -0.0021240986,
      0.014079335,
      0.004902199,
      -0.023522513,
      -0.0068849754,
      0.02894468,
      -0.05135375,
      -0.028614616,
      -0.0022630098,
      -0.019597461,
      0.029441196,
      0.0033978568,
      0.033042945,
      0.014299905,
      0.0029512697,
      -0.018492922,
      -0.0077672703,
      0.014564694,
      0.0015163155,
      0.036877107,
      -0.00072017516,
      -0.001714239,
      0.021995442,
      -0.0064974683,
      0.0023248435,
      -0.0046169795,
      -0.0062282574,
      0.01697958,
      -0.008423391,
      0.042761907,
      0.009912971,
      -0.0018278261,
      0.0027452153,
      -0.0021947986,
      -0.006765158,
      0.010998455,
      -0.019100185,
      0.01326644,
      -0.08290462,
      -0.0038544582,
      -0.0031190403,
      0.009727262,
      0.007757159,
      -0.008229604,
      0.0022856202,
      0.02463817,
      -0.0053537968,
      0.00503527,
      -0.014911684,
      -0.01055193,
      0.011009053,
      -0.016667804,
      -0.028605392,
      0.0056521525,
      0.021737305,
      -0.040417034,
      -0.013076323,
      0.011242084,
      -0.003319355,
      -0.012658771,
      -0.002275498,
      0.012004309,
      0.0153314695,
      0.020050786,
      -0.019968847,
      0.008825487,
      -0.010716713,
      0.008022423,
      0.016235111,
      -0.13718668,
      -0.009822824,
      0.0070392354,
      0.023509044,
      0.012339856,
      0.008104258,
      -0.0058425358,
      -0.0028339473,
      0.019929918,
      -0.023766406,
      0.009506195,
      -0.014709077,
      -0.029175606,
      0.013891219,
      -0.0006054193,
      0.12515467,
      0.0046966407,
      0.017125979,
      -0.016028412,
      0.017877612,
      -0.01934811,
      -0.0007456633,
      0.0024050402,
      0.008325373,
      0.0006986503,
      -0.020551868,
      0.007970786,
      -0.02249981,
      0.027050665,
      0.019819537,
      0.015301769,
      -0.011687324,
      -0.02132354,
      0.03637276,
      0.002561415,
      -0.017849507,
      0.014245016,
      -0.0008017995,
      -0.016354647,
      0.0016986621,
      0.0009961098,
      -0.0016842271,
      -0.020727394,
      0.0069673653,
      0.004918446,
      0.00017011478,
      0.0076431395,
      0.0015852835,
      0.0019581565,
      -0.007738424,
      0.026827538,
      -0.051825367,
      0.003275375,
      -0.003694381,
      -0.013310956,
      0.029801888,
      0.012560731,
      0.026157612,
      -0.015782734,
      0.006527063,
      -0.00674678,
      -0.003805982,
      0.016605437,
      0.0036377066,
      0.00943246,
      0.0030385375,
      0.02834015,
      0.02800524,
      0.0011045825,
      -0.012366347,
      -0.020047454,
      0.017367044,
      -0.015697826,
      -0.006684846,
      -0.024950605,
      -0.012935501,
      -0.006669563,
      0.022050327,
      -0.014641486,
      -0.021627238,
      -0.0016202716,
      0.007457521,
      0.0022523613,
      -0.015282237,
      0.017745169,
      -0.00212069,
      -0.017792778,
      0.02635135,
      0.0064524096,
      0.0025293378,
      0.012928781,
      0.0019489728,
      -0.004339449,
      0.036615524,
      0.00019159762,
      0.020692032,
      0.0013658288,
      0.0042850417,
      0.026059607,
      -0.012309677,
      -0.007670938,
      -0.015984982,
      0.0036085441,
      -0.003628557,
      0.03369157,
      0.003968647,
      0.026162757,
      0.029391082,
      0.0122717405,
      -0.010684503
    ]
  },
  {
    "id": "genai_cohort_nodejs_12_node_http_server_vtt",
    "content": "Okay, so enough of the theory. Let's start with the practical and build our very first server. So what I'm going to do is I'm just going to close this particular window. This was the FS And let me just open the terminal. So what I'm going to do is let me just zoom in a little bit. I should have done this setup before, but yeah, that's fine. So I'll just go into my coding folder and there I have this node, js thing, right? And here I'm going to do mkdir and let's say HTTP server. Okay, so code the HTTP server. And here we have RVs code, right? Let's create a new file that is index js. So this is going to be our entry point file. Okay? Now in order to create a server, you have to use one built in module that is HTTP. So this HTTP module which is again built in. How do I know built in? You can see that it's on the official documentation. Plus node is there, right? This helps me to create a server. So let's try to import it first. So cause HTTP equals require and I can just say HTTP. Fine, then let's create a server. So how do you create a server? You can just say HTTP. um. oh, okay. Do you see that we are not getting typings? So for that, first of all, I'll just do npm in it. And interestingly I can just do an hyphen Y which will skip all the questions and go with the default. Now npm install@ the rate types/ node. So this will give me the bindings. Right now you can see I have create server. Okay, so this line creates a server for me and returns a server instance. Now what I can do is I can take the server and make it listen on a port. I can bind this server to a port. Now what is a port number? Don't worry, I'll tell you. So right now just type in Okay? So you can just type in and then a callback function. So let's have a callback function. So if my server successfully sets up, if my server successfully tries to listen to this port, I can just say console. log okay, that HTTP server is up and running on port which So this is just a successful callback that if this successfully. Listens, just give me this console log. That's it. So now you have created a server which might crash. Let me just check. So you can see that, okay, it's not crashing. HTTP server is up and running on port number But right now we have not coded anything right. So now just do a control C to halt this server. So this is basically means as halt halt Basically means you have just halted it, you have just terminated it. Okay? So this HTTP createserver takes in a callback function, okay? This create server thing gives you access. This create server thing takes in a function and it gives you access to two things, that is a request and a response. The incoming request, and this is where you can send a response. So whatsoever user has requested that will be available in this variable that what user is trying to access. For example, this request will contain the method. If it is a get method or post method or patch method. This will also contain that what that user is trying to access. So all the data that is coming in the request will be available in this object. And using this object we can construct a, response. So now what I, what else is in this function? I'll just say console dot log that I got an eight incoming request, very simple, right? And then I have to return a response, right? But let's say I mention I decide that I will never send a response. So see, what I'm trying to do is in this, my request response cycle, I am basically never sending a response, which is, which is a bad thing, right? Now see what will happen if I do node index js. You can see that it is running on port number 8, Now see, if I go on my browser and I Type in local host 8000, you can see that it is stuck forever. So I am trying to access in my web browser localhost And you can see what happened when I am trying to access this, my browser is stuck, right? Why is it stuck? Because my server has taken the request. I got an incoming request, but there is no response. Similarly, if I copy this localhost8000 thing, enter, the. Then I do enter, then I do enter, you can see that we are like getting a request, but no one is there to resolve these. So let's send a, response because we need to complete the cycle, right? So you can see you got four requests, but no one is there to complete this request, right? So how can you send a response? So first of all, we will copy this line. I'm just copying it from here. This is the documentation. So this line sets a header. Okay? So we are sending a response. What is a response? This is a status code. So status code means that it's a success response. Okay? As of now you can just ignore this part. So I'm just saying, hey, response dot write at and I will also end a, response. Finally I'll just end a response saying thanks for visiting my server. That, that's it. So what I'm doing is I am getting a request for every request. I'm just doing a console log. You can do DB operations, all that. So all the DB operations, everything will go here. And finally you send a, response back to the server. Every time you make a change in your code, you have to Rerun this command that is node index. Now if I try to visit this localhost8000port. Oh, see what I'm getting? Okay, let me just do it couple of times. Every time my server, is returning. Thanks for visiting my server. What if I change something here? Okay, what if I add an emoji? So what you will notice is that I'm not getting that emoji even after refresh. Why? Because I have to do a control C. I have to restart my server and now I will see the change. So yeah, in node js you have to restart the server anytime you make a change on your code. And we have tools for that. Don't worry, that I'll show you while moving. Okay, so now your server is up and running. You were able to create your own server. Let me halt the server. Now you will see that it will go away. So you were able to create a very simple server using HTTP module. And yeah, one thing, let's have the node that makes it more cleaner. So you created a server. Okay, so create a server using this HTTP createserver pass in a callback function. This callback function will run for every request. This function has access to request and the response request is used to see what the user is trying to request. Response is used to construct a, response. And finally you can just make the server listen on a particular port and a success callback. So if this line is successful, if your server is up and running successful, it will just give you this indication again, it's an optional thing. Okay, now what is this port? Right? Now what is this port, guys? In simpler terms. Okay, I'll just tell you what is a port. Let's say that you have a physical machine. So when you talk about a server, first you have a physical machine, right? Like your MacBook or anything, right? Anything. Your physical machine. So it's a server. So your physical machine is like your house. Okay? Your physical machine, it's, it has like RAM and Something, something. It is like your house. Now, on your physical machine you can have multiple services running. Multiple services. For example, there is a service running, let's say this is a database service running. Then there is a, one more service running, which is, let's say a Node js application running. Then you can have one more thing, okay? This can be like something else. So you have different, different services running. And these services can listen on a specific port. For example, let's say, okay, let's say that this particular service is listening on port number eight. Let's say 3001, okay? I'm just taking a random port. Then no other service can listen on this port. This service can listen on This service can listen on port number Now it's basically like a room number, okay? Like you have room numbers. So these are like room numbers. Now this physical machine has an address. So let's say the IP of this physical machine is something like this. So let's say if I am a user, right? I am a user and I want to access this service. So I can say, hey, on this machine go. Do you see this? This is a different one, right? Go on port number So what this will do is, what this is going to do is this is your machine address, right where your physical machine is. So it will basically route the request to this machine. Then you are specifying the port, right? You are specifying the port. This basically means inside this machine you have to route the request to the specified port. So if you say 3003, this is going to communicate to If you say 3001, this is going to this way. That means it is going to go in this service, so on. So when I said localhost, localhost, basically Means my machine, my local machine on right? Now on my machine I can have a lot of services running, right? But I am interested in a service which is running on port That is this one you can even run on 8001, 8002, The only thing is that no other service should be running on the same port. So this is what you're known as a port, okay? So that means the syntax goes like, you have the hostname, then this, and then the port, okay? So this is how you access a service on a particular server.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "12-node-http-server.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/12-node-http-server.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0022120574,
      0.016538253,
      0.025550384,
      -0.057950687,
      -0.006543918,
      0.006467658,
      0.032981806,
      0.02023121,
      0.0029389244,
      0.021860829,
      -0.019662168,
      0.009055059,
      0.00231079,
      0.017947754,
      0.12581116,
      0.011705921,
      -0.00326911,
      0.0028579305,
      0.0096875,
      -0.020868268,
      0.0150784515,
      -0.005481814,
      -0.006463595,
      0.017697718,
      0.0073568625,
      0.0016996312,
      0.0035101678,
      0.0027275374,
      0.021374406,
      -0.0147232665,
      -0.0051194807,
      -0.008756977,
      -0.0016942038,
      0.020816846,
      -0.0030976296,
      0.01983129,
      0.024479693,
      0.008250087,
      -0.02809549,
      -0.00015372128,
      -0.009390587,
      -0.00048387406,
      0.017262287,
      -0.025377275,
      0.018718459,
      0.0007454917,
      -0.0062911804,
      -0.025542643,
      0.0054039084,
      0.012628127,
      -0.017745603,
      -0.017468248,
      -0.0058470415,
      -0.18526325,
      -0.0147526115,
      0.0068394016,
      0.011538456,
      0.00501559,
      0.0041942187,
      0.007218083,
      -0.013262018,
      0.0018779836,
      -0.03351897,
      0.008680045,
      -0.025657114,
      0.0013744821,
      0.013196489,
      0.0050726747,
      0.020610454,
      -0.0069802236,
      0.013763074,
      0.007357974,
      -0.0155642675,
      -0.017916534,
      -0.027257042,
      -0.0039296313,
      0.0045642895,
      0.0075912215,
      -0.0112804,
      0.012198626,
      0.0028003007,
      -0.026690433,
      -0.0037460164,
      0.000016341322,
      0.012398389,
      -0.006939345,
      -0.039767608,
      -0.0138197355,
      -0.014848362,
      0.016497202,
      -0.001726306,
      0.024818532,
      0.0075723357,
      -0.0013535435,
      0.007379302,
      -0.0031088372,
      -0.0049979105,
      -0.00014459799,
      -0.013100393,
      -0.015180246,
      0.013996679,
      -0.0030803462,
      -0.02829076,
      0.028396586,
      0.0073431437,
      0.01265314,
      0.014246144,
      0.010173889,
      0.009412777,
      -0.023721512,
      0.011572165,
      -0.012365129,
      0.003861495,
      0.023237411,
      -0.00031338062,
      -0.18451683,
      0.015289232,
      0.0068151816,
      -0.0027461064,
      0.0054625166,
      -0.01715618,
      0.00004141221,
      0.0065214136,
      0.022927316,
      -0.012589385,
      0.021289177,
      -0.011769382,
      0.030306684,
      0.021889787,
      0.018945223,
      -0.0013353565,
      -0.0074336184,
      0.0035986693,
      0.010807745,
      0.022976307,
      0.019575069,
      0.004596703,
      -0.016769003,
      -0.007215982,
      -0.040009785,
      0.012245198,
      0.031609364,
      0.0034009381,
      0.022880148,
      0.0062629366,
      0.016093165,
      -0.023917947,
      0.023797955,
      -0.03298106,
      -0.02347876,
      0.001645978,
      -0.014656863,
      0.021535702,
      -0.0038504445,
      -0.002694935,
      -0.032499418,
      -0.00859133,
      0.011762699,
      0.004889597,
      -0.008621052,
      -0.00008221931,
      0.0008152583,
      -0.0012107134,
      0.02002962,
      0.016282482,
      0.001717315,
      -0.031330124,
      0.013273753,
      0.0072203265,
      0.012638461,
      -0.014238909,
      -0.0006693614,
      -0.00622079,
      0.00923166,
      -0.0123993475,
      -0.0107222665,
      -0.010302701,
      0.0007587345,
      0.007902377,
      -0.011966111,
      0.008077922,
      -0.003219484,
      0.0035906958,
      -0.0060729566,
      0.016052963,
      -0.0030498467,
      -0.015469398,
      -0.0047718603,
      0.024910454,
      -0.024306197,
      0.0015516342,
      -0.006278553,
      -0.0017217171,
      0.0013756735,
      0.012297495,
      -0.020447679,
      -0.018589176,
      -0.020487905,
      0.018327376,
      0.015203249,
      0.02955792,
      -0.013517575,
      0.0046265796,
      -0.02928443,
      0.012209292,
      0.028158301,
      0.017903987,
      -0.007215013,
      0.012160606,
      0.021652494,
      -0.016340993,
      -0.015965115,
      0.00235086,
      -0.0045686318,
      0.0046919193,
      -0.0055390536,
      0.017582973,
      0.029374816,
      0.005963177,
      -0.010472979,
      -0.007751499,
      -0.003834032,
      -0.006687458,
      0.023268132,
      0.020972913,
      0.0076575303,
      -0.0063385786,
      -0.0015249272,
      0.0069972044,
      -0.010644747,
      -0.0010583675,
      -0.01325852,
      -0.016426431,
      0.0020644132,
      0.032662883,
      -0.019829143,
      0.008315736,
      -0.0025954945,
      -0.00092714664,
      -0.0053665037,
      0.006284635,
      -0.0011903754,
      -0.009140023,
      0.009962322,
      0.031430744,
      0.0069286735,
      -0.0113439895,
      -0.007231205,
      -0.027263137,
      -0.02969957,
      -0.013573374,
      0.005655436,
      -0.019071477,
      0.00028119705,
      -0.008456043,
      -0.02376635,
      -0.026915083,
      -0.009706908,
      -0.0015604758,
      -0.009458294,
      -0.0043865745,
      -0.01179308,
      -0.0066017266,
      0.005921696,
      0.016767377,
      0.0023292643,
      0.013132289,
      0.024017453,
      -0.024618244,
      0.003252604,
      0.011415593,
      -0.0031079699,
      -0.008895214,
      -0.0065940353,
      -0.003109269,
      0.013688785,
      -0.0839458,
      -0.009627311,
      0.008764105,
      -0.023840796,
      -0.01963633,
      0.016602678,
      -0.008868186,
      0.008787764,
      0.021863453,
      0.014837997,
      0.005091685,
      -0.011797458,
      0.020317422,
      0.002984233,
      -0.003918021,
      0.014521378,
      -0.01347999,
      0.0008212257,
      0.0015778427,
      -0.014672878,
      -0.013814294,
      -0.0006186818,
      0.003328825,
      -0.017537005,
      0.013339472,
      -0.016753137,
      -0.03401625,
      0.0076373667,
      0.02824375,
      -0.005976614,
      0.009006106,
      0.02325093,
      -0.021875937,
      -0.016961738,
      -0.01254661,
      -0.004147825,
      0.024861673,
      -0.020900836,
      0.0093169175,
      -0.016897647,
      -0.005106628,
      -0.021213382,
      0.009069286,
      0.010904068,
      -0.007005939,
      0.014319861,
      0.026733497,
      0.001155488,
      -0.021171587,
      0.008049544,
      -0.014094041,
      0.00737852,
      0.015833132,
      -0.040496357,
      0.015619614,
      0.0080493875,
      0.0021080563,
      0.017993443,
      0.018413348,
      0.0011395802,
      -0.014529945,
      -0.008423893,
      0.014569993,
      0.0054310574,
      0.007784115,
      0.0021005783,
      0.0028919922,
      -0.017722767,
      0.012064983,
      -0.01741385,
      -0.0005494523,
      -0.011216472,
      -0.012933611,
      -0.03324782,
      -0.0042307046,
      0.0023429135,
      0.0152323805,
      -0.0033236619,
      -0.030202005,
      0.015676234,
      0.007811985,
      -0.0014842674,
      -0.0063444236,
      0.024127303,
      0.009411493,
      0.0028838124,
      -0.00688841,
      0.0049374336,
      -0.005312605,
      -0.0021982756,
      0.0072852657,
      0.028621344,
      -0.013471545,
      0.00022049606,
      -0.011138939,
      0.0018615407,
      -0.027209384,
      -0.0026803322,
      0.0102326935,
      0.0064305905,
      -0.027067252,
      -0.0016436002,
      0.00024335447,
      -0.0011275514,
      0.0054985452,
      0.035092235,
      -0.0027017563,
      0.0081945835,
      -0.0006237216,
      -0.0075222705,
      -0.0164424,
      -0.002376485,
      -0.022938345,
      0.006846625,
      -0.015654152,
      0.02871456,
      0.011931574,
      0.015097156,
      -0.021315336,
      -0.012926318,
      -0.0063499184,
      0.004573044,
      0.015633762,
      0.001420061,
      -0.012959068,
      0.01553361,
      -0.015950367,
      0.018743357,
      -0.012155953,
      -0.018550292,
      -0.014013026,
      0.0024144908,
      -0.010526917,
      -0.0046008974,
      -0.010815853,
      -0.015826216,
      0.008698285,
      0.0057543754,
      0.012822518,
      0.0098490985,
      -0.033808585,
      0.021630632,
      0.0061048265,
      -0.013747643,
      -0.0083151795,
      0.0024643636,
      -0.027578235,
      -0.0060288683,
      0.0025983113,
      -0.0071872617,
      -0.004960832,
      0.003262959,
      -0.023735695,
      -0.010644761,
      0.0037839033,
      0.03254695,
      0.029895142,
      0.018210026,
      -0.010029808,
      -0.015357433,
      0.0058225114,
      0.012572758,
      -0.0077894027,
      -0.013338736,
      0.016836427,
      0.010378162,
      -0.010272599,
      0.0029683418,
      0.0016449667,
      0.002569766,
      -0.011593937,
      -0.012815533,
      -0.03514128,
      0.014913587,
      0.002859166,
      -0.0069774184,
      0.0069307187,
      -0.025997136,
      0.017788386,
      -0.013467251,
      -0.016321376,
      -0.0038017202,
      -0.020156085,
      0.003339961,
      -0.0064626196,
      -0.008800289,
      0.001817357,
      -0.014487921,
      -0.008921219,
      -0.004253866,
      0.014661713,
      -0.01997706,
      0.00746849,
      -0.00605983,
      0.022464134,
      0.017753696,
      0.017748969,
      -0.010121958,
      0.0023723568,
      0.0039026998,
      -0.017183192,
      -0.010361938,
      0.0080477,
      -0.01359692,
      0.027016379,
      0.006480273,
      -0.0070050377,
      -0.017968507,
      0.005410385,
      0.0068300418,
      -0.011125781,
      -0.0015678046,
      0.008277654,
      -0.0020433895,
      0.023593133,
      0.003454292,
      -0.01253481,
      0.035779078,
      -0.02329736,
      -0.001481859,
      0.0146158645,
      -0.008973083,
      -0.02916852,
      -0.025298342,
      0.0072084195,
      -0.01465776,
      -0.03725773,
      0.016018122,
      0.0064311503,
      -0.011956868,
      0.00663301,
      -0.014804351,
      0.007432801,
      0.012201779,
      -0.01606356,
      -0.0072641135,
      0.016221419,
      -0.009185992,
      0.004990351,
      0.0058154804,
      -0.011429977,
      0.001219112,
      -0.013009853,
      -0.015034246,
      -0.00062702486,
      -0.021184932,
      0.027597366,
      0.00779241,
      -0.004155266,
      0.005211274,
      0.02360807,
      0.01344142,
      0.010659308,
      -0.003438588,
      -0.018083775,
      0.017295731,
      -0.0062918765,
      -0.0004278086,
      -0.00490308,
      -0.0067437664,
      -0.0013243619,
      -0.020829752,
      -0.008390894,
      0.026268013,
      -0.0059861103,
      -0.032958433,
      -0.0012650798,
      0.0047114403,
      0.011673177,
      -0.11112406,
      0.0014827615,
      -0.01083369,
      -0.017409358,
      -0.0014021347,
      -0.01602166,
      0.015362081,
      -0.027254594,
      -0.016317206,
      -0.011953244,
      -0.0039390577,
      -0.0030546905,
      0.00037336914,
      0.010751252,
      -0.013566686,
      -0.0031365624,
      -0.007683364,
      0.034131683,
      0.043107837,
      0.0053723683,
      0.007162993,
      -0.008765455,
      0.0065238206,
      0.00079898606,
      -0.018350596,
      -0.0024569996,
      0.028957147,
      -0.0013531134,
      -0.009101046,
      0.0023443636,
      -0.0033390159,
      -0.0062777805,
      -0.005856178,
      -0.0026848917,
      0.03164826,
      0.003333946,
      0.012467822,
      0.0037852733,
      0.02992252,
      0.017224956,
      0.014889919,
      0.015883515,
      0.016683389,
      0.014505598,
      0.0042111925,
      0.018597951,
      0.025708651,
      -0.028338632,
      -0.010846453,
      0.040907387,
      -0.050613385,
      -0.04604727,
      -0.013942159,
      -0.015563877,
      0.010794378,
      0.010560735,
      0.02223273,
      0.009923437,
      0.0030653356,
      -0.004738069,
      -0.0036423737,
      0.009472275,
      -0.0053386213,
      0.032516714,
      -0.008068547,
      -0.004743551,
      0.028902477,
      -0.011193481,
      0.004897913,
      0.0058573824,
      -0.003254523,
      0.0023826738,
      0.0011352837,
      0.02235215,
      0.0068442114,
      0.004298292,
      0.008974171,
      0.018044593,
      -0.0074177217,
      0.012048263,
      -0.013248874,
      0.013801241,
      -0.07318526,
      -0.0032974803,
      -0.009851079,
      0.01189363,
      0.004860159,
      0.0008561124,
      -0.025076633,
      0.025658967,
      -0.006160218,
      0.004024482,
      -0.017297264,
      -0.02057399,
      -0.005703451,
      -0.007204841,
      -0.03570548,
      0.014512765,
      0.0066087632,
      -0.0364518,
      -0.02297829,
      0.0038298075,
      -0.0043766145,
      -0.008241979,
      -0.007770835,
      -0.00563129,
      0.008584074,
      0.026081309,
      -0.03723733,
      -0.0028551896,
      -0.011407813,
      -0.0047540553,
      0.0031016604,
      -0.13829033,
      -0.009458565,
      0.015389237,
      0.0037710923,
      0.0022864852,
      0.004762201,
      -0.004734006,
      0.017683316,
      0.015828572,
      -0.0230752,
      -0.01833168,
      -0.033145722,
      -0.018977888,
      0.016869374,
      -0.004207414,
      0.14168501,
      0.009565739,
      0.017949378,
      -0.004299424,
      0.01785613,
      -0.016674515,
      -0.009315118,
      0.013015732,
      0.015672307,
      0.0070021255,
      -0.009863052,
      0.018858405,
      -0.00631544,
      0.026798094,
      0.018838672,
      0.013947957,
      -0.029677529,
      -0.005573257,
      0.039466627,
      -0.008649275,
      -0.02538708,
      -0.0020794086,
      -0.016601961,
      -0.016047213,
      -0.002964701,
      -0.0063210633,
      0.0033324792,
      -0.0076647606,
      0.023005579,
      0.007669008,
      0.012912837,
      0.007475543,
      -0.015392022,
      0.0016638472,
      -0.019434696,
      0.01853675,
      -0.052039202,
      -0.002630315,
      -0.0120837875,
      -0.011598581,
      0.031808816,
      0.0149101885,
      0.012580174,
      -0.020688994,
      -0.006980426,
      -0.006542554,
      -0.005530878,
      0.030883718,
      -0.005690426,
      0.00088526047,
      0.0054631312,
      0.016008738,
      0.038833037,
      0.0059918254,
      -0.015049278,
      -0.00012456907,
      0.013051993,
      -0.016678786,
      -0.0028677962,
      -0.022226358,
      -0.010439279,
      0.0009236352,
      0.022704585,
      -0.008859852,
      -0.028555056,
      -0.0046616434,
      0.0058572246,
      0.002253944,
      -0.018192438,
      0.020476388,
      -0.009022359,
      -0.022625163,
      0.03011292,
      -0.0010206584,
      -0.008500624,
      0.0067370483,
      -0.0047100848,
      -0.0064213183,
      0.023749365,
      -0.0008655834,
      0.019019255,
      0.0050393282,
      0.018475471,
      0.015203319,
      -0.009528924,
      0.008384999,
      -0.020784002,
      0.0047807554,
      -0.007006167,
      0.032334168,
      0.015988683,
      0.020956721,
      0.023772448,
      -0.006454732,
      -0.018808726
    ]
  },
  {
    "id": "genai_cohort_nodejs_13_node_http_in_dept_vtt",
    "content": "So, hey guys, welcome back. And in this particular video, let's understand more about HTTP in depth. Okay? So here I have a very great article that is from the Cloudflare that what is HTTP? What is an HTTP request? And a lot of things. So right now, right now what do you know is that, you know what, let's understand, what is a URL? What is this HTTP version? What is a method? You already know method, right? Get, put, post. You know, we have to understand that what are these request headers and what is this HTTP body? So these are basically the components of an HTTP request, like what a request can contain. Okay. Similarly, you have a response and there is a status code that we have already discussed. Okay, first of all, you know what is an HTTP method? That means when a client tries to send or basically sends a request to a server, right? So this is what, this is a request. Now this particular request can be a get request or, or a, post request or delete request, Put request, right? So let's say that this is a get request, okay? So we know that this particular thing is known as method, right? This is known as method. So let me just have an annotation here so that you have the notes and don't worry, you will get all these whiteboard files. Okay? So yeah, so this is your what, this is your method. Okay, cool stuff. Nice. Then what happens when you have a method? There is something known as X HTTP request headers. Now what are these headers? Okay, let's understand that. What are these headers which are sent along. Guys, have you ever got a parcel, A mail at your home? A mail that looks something like this. Like you have a line here and let me grab one more line. A mail that looks something like this. Like it's a. It's a physical mail. I'm not talking about email. It's a physical envelope, right? So you get a physical mail at your home, right? Now if you see this physical mail that postman comes and gives you, on this physical mail you have some like printed thing here, right? This printed thing contains that from where this parcel is coming or from where this mail is coming to where it has to be delivered. It can have some phone number and it can have the address, right? Some landmark kind of a thing. So this particular thing can, contains some information about this packet, right? What is the weight of this packet from where it originated? And a lot of things can be there on this particular seal. So this is like an extra information, right? Then if you open this parcel, okay? So let me just open this parcel. When you open this parcel, there is some data here, right? This is the actual data which is inside the parcel, Correct? This is the actual thing inside the parcel. So this is the actual data. Correct. This is the actual data or actual thing that you wanted to receive. Similarly, in terms of HTTP, this particular part that is on the above, right, this, this meridata kind of a thing, these are known as headers. Okay? These are known as headers. So whenever, okay, sorry for that. So whenever you are sending a request, first of all you have to specify what method it is. Plus for every request you can send some extra piece of data which is known as headers. Okay, so you can send something known as headers. Along with headers are nothing. These are just key value pairs. For example, there can be a header of, let's say type that what kind of type it is. There can be a header of let's say authorization. There can be a header of xyz, There can be a header of abc. So these headers can have a value. For example for type, I can have a value of A. For auth, I can have a value of B. For xyz I can have a value C. So these are nothing but just a, key value pairs which are sent along the request. Okay, so basically extra information. So if I have to tell you that what these headers in reality looks like, these looks like something like this. So usually you have a header. One common header is content type. Okay? This tells that what kind of content I am dealing with. So this can be adjacent data and HTML data, something like this. So here the key is content type and the value is application/JSON. Right? And then there can be a, header of authorization. So if you are authenticated, right, Authorization. So you have to give your token, right? If you have any token or something like that, you can take along with that. So you can have headers. So these headers are basically extra information about your request. Got it. So these headers are also sent along with the request. Okay? Okay, so server can take these headers, read the headers and based on that process your content. Okay, so you have HTTP headers. So HTTP headers contains text information stored in key value pairs and they are included in every HTTP request. So you can see that this is what a, request header can look like. Authority, method, path, scheme, accept what kind of data I want to accept, which encodings I can accept in what language I want the data. What is my user agent? For example, you can send that hey, you are sending a request header. So you can even add some information about the client. For example, hey, right now my user agent, that means my machine is a Mac machine, let's say. So you can send this kind of data as well in the header, right? To tell the server, that I am requesting from a Mac device. Okay, so these all things can be sent as a header. Okay, now it can also have a body. Now, now that's an optional thing. Okay, so the body, the body part is an optional thing. Why? Guys, tell me one thing. If you are trying to make a get request, that means you want to get something from the server. Do I need to send any data to the server? No, right? There is no need to send any data to the server. In that case, body can be left, Body can be ignored. But let's say for some, like you are making a post request, that means you want to send some data to the server. In this case you have to include a body, right? And this body can contain the actual data. For example, if you are trying to build a Twitter, right in Twitter you can actually send your tweet something like this. That what an awesome day, let's say. Okay, so what you can do is if you're sending a post request, you have, you can send this body along. Okay, so what the backend will do is backend will see. Oh, it's a post request. That means you want to create some content, you're trying to post some content and then backend will actually read your body which can be any data. Okay, so I am sending a JSON data which is like tweet and what an awesome day. So backend can read this par, store it into database and along that. So this is your body. Okay, in case of get, there is no need of the body. But if you are making a post request, so of course it makes sense to send the body along. Okay, so the body of a request is the part that contains the body information. Okay, the body of the HTTP request contain any information being submitted to the web server such as username, password or any other data entered in the form. Okay. Okay. So this was your request thing. So your request contains a method. Okay, that what is the HTTP method. It can have headers and it can have body. Now let's go to google. com okay, so right now what happened when I opened this google. com let's go on to the inspect element and I'll go into this network tab just in case you are not able to Find this you can find in here list. This network tab, basically shows all the incoming requests and response to the server. So I am right now the client, right? So if I do a refresh, can you see that we made a request to HTTPs to www. google. com right? This is the request that my client sent. And this was a get request. Can you see that? This was a get request to which server replied with a That means everything is working you can see, right? Everything is working. So that's why I'm getting a response. Then let's see what all things are also here. Can you see that there are some headers that are sent as a request Headers, right? So request headers, are authority, method, path, scheme, what kind of encodings I can accept. You can see key value pairs. The cache control is there, the cookie is there. Then if I just scroll down then you can see that you have something like priority, you have scheme, you have If you see I have a platform of Mac OS and which chromium version I'm using, I am in a desktop version. So a lot of information is being sent from my client, right? And similarly, similarly I have a response headers as well. So these are all the headers that the server sent me back as a response. Okay? So right now we are just talking about the request. So this is what a request can contain and this is. And what a server can accept. Okay, now one more thing that is very important for you is to understand the URL. Okay, let's understand that what a URL looks like. So let's say you have something like HTTPs/google. com contact us. So this is what a typical let's say www. google. com so this is what a typical URL looks like, right? So let's understand that what exactly is happening? Okay, so this URL contains a lot of things, right? Now first this is your scheme. Okay? So this part is basically your scheme that what protocol you are using. So for example you can use HTTP, which is like hypertext transfer protocol or you are using HTTPs, which is a hypertext transfer protocol secure. This contains an SSL certificate, right? So this is your scheme part. Nice, cool. Let's move further then. Then you have this particular part, okay, I'm just talking about this particular part here. This particular part is known as your naked domain. Okay? This is your actual domain or it is also known as, or it is known as apex domain. So this is your actual domain. Or naked domain, that is google. com okay, so google. com is your naked domain. In this naked domain, for this particular naked domain you have something known as a subdomain. So this particular part right here is basically your subdomain. So sub domain. So these sub domains can be like www. maps. google. com it can be like YouTube. google. com it can be something. google. com admin. google. com so this is your subdomain, right? So this is a subdomain of this apex domain. Okay, then then you have this separator right here. After the separator, this particular whole thing. This particular whole thing. Let me just have a nice color. This particular thing is known as the path, okay, that which path you are trying to access. So this can be like slash contact us. This can be slash contact us, slash A, slash B. So slash. Then you can have something else also that this whole is a path that on which path you are trying to make this request. Okay, so this is your path and then along with the path, then if you have a question mark then you can have query parameters. So Q equals to XYZ and okay, you can have something like maybe sort equals descending. So these are known as. So if you have a question mark in between, so let's say that you have in question mark in between. This is basically your separator for the query parameters. So, so anything after this question mark will be considered as what will be considered as query parameters. Okay, query parameters. So query parameters are what? Basically this, these are some extra key value pairs that you can send along the URL. So right now here I have two query parameters separated by this. And so this is my first query parameter. Okay, so my first query parameter is Q is the key and value is XYZ and my second, okay, my second query parameter is sort, which is descending. So yeah, this over can decide to, you know, take this one and you know, read these one, separated by an and operator and they can see, oh, you are trying to access a data which is sorted on the descending. So again server related thing. So this is how your URL is constructed. Okay, so now here is one thing, this particular part, okay, now now hear me out. Very important, this particular part right here, okay, that means this part, this part is taken care to reach to the server, right? This part is for the DNS purpose. So this part right here helps you to reach to the correct server on the Internet. Okay then this whole thing, right, this whole thing here is processed by the server to decide what kind of response to send to you. Right. And this is for the like scheme for the authentication purpose. Oh, sorry. For the like, you know, secure and transfer purpose. This is for the protocol. So www. google. com is just for reaching to the server and anything after that is for your server application logic to process it. Okay, so this you have to take care. So right now like if I open up the headers again and I do an enter right now I am on google. com, correct? You can see that I am on www. google. com. so if I open up the network request and you can see that I am on which part? Okay, on which path? Sorry. So I am right now on slash path. This means the root path. Let's try to Open/, XYZ, which doesn't exist right now. See what happened. First of all, I try to make a request on this particular path. So the path is XYZ, scheme is HTTPs, method is GET. And server sent me a That means not found, let's say/XYZ/A/ B. Okay, now you can see it is again a, not found. And this is the path. Okay, let's have some query parameters. So how query parameters work is if I go to google. com and so now if I on google. com and I search for, let's say cat. Okay, cat, as a, coding. Okay, so if I go on, let's say this one. So right now if you will see my URL. Let me just take my URL. My URL looks something like this. Okay, this is what my URL is looking. So let's try to decode, let's try to decode that what is actually happening here. Okay, so I'll just expand this a little bit so that everything is in one line and let's make it white in color. So see, you got the scheme, you got subdomain, you got the naked domain, you got slash search. So your path is slash search, right? And then you have a query parameter, Q. I mean Q is for query. That what you are trying to search, what you are trying to search. You are trying to search this particular thing. Okay, so server can basically take this as a query parameter and it can parse it. Now if I copy this and I just paste it here also you can see the query parameters were already there, right? So these are handy to store some information right into the URL. So this is how your URLs work. Okay, now I think you have a very good information about, you know, what a, request looks like. Okay. What a request. Just a request. I'm not talking about response. We were just talking about that what a, request could look like, right?",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "13-node-http-in-dept.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/13-node-http-in-dept.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0132246455,
      0.022755828,
      0.009187647,
      -0.04921973,
      -0.007400709,
      -0.004217144,
      0.017478934,
      0.02459315,
      0.0037494416,
      0.01654205,
      -0.010509673,
      0.0053155995,
      -0.007832499,
      0.0028943014,
      0.117580555,
      -0.010463159,
      0.010468389,
      0.005746246,
      -0.010802796,
      -0.0021412647,
      0.015485178,
      -0.0056436015,
      0.010364313,
      0.010613755,
      -0.009418106,
      0.008714101,
      -0.0034253285,
      0.011695441,
      0.032441825,
      0.0018142668,
      -0.014334063,
      -0.009870317,
      0.02245549,
      0.026352447,
      0.0040397965,
      0.024520133,
      0.007931685,
      0.003519903,
      -0.02606097,
      -0.008393553,
      -0.0026709165,
      -0.010732634,
      0.023895076,
      -0.024834761,
      0.013473225,
      0.000025441495,
      -0.0071313824,
      -0.012310004,
      0.0033588808,
      0.004620555,
      -0.020875428,
      0.002779891,
      0.003130854,
      -0.18816406,
      0.015689759,
      -0.009538952,
      -0.0018451089,
      -0.0054195914,
      -0.0013146369,
      0.011553583,
      -0.0032476264,
      0.01640489,
      -0.0053554294,
      0.016691007,
      -0.020845745,
      -0.012906126,
      0.030946009,
      0.0042124097,
      0.0045274952,
      -0.0017446828,
      0.0072745816,
      0.005006378,
      -0.0273361,
      -0.028831227,
      -0.021398505,
      -0.0064778742,
      0.013424381,
      0.0027042658,
      -0.024491692,
      0.008832272,
      -0.012188355,
      -0.023004279,
      -0.006457481,
      0.0042522405,
      0.013565442,
      -0.009846382,
      -0.022844732,
      -0.00046243146,
      -0.011012526,
      0.0035424007,
      0.0009840748,
      -0.00925259,
      0.017003749,
      0.010209177,
      0.016355488,
      -0.0016039357,
      0.0016214757,
      -0.0033949947,
      -0.013808936,
      -0.012578451,
      0.00017983183,
      -0.0077504707,
      -0.033238426,
      0.011174265,
      0.0011362284,
      0.010043037,
      -0.0019296587,
      0.0013707319,
      -0.006230021,
      -0.021256546,
      0.023081345,
      -0.01390296,
      -0.00498522,
      0.023926998,
      -0.002473291,
      -0.20202182,
      0.029813046,
      -0.00881637,
      0.0060174954,
      0.004099033,
      -0.032890633,
      0.000054130927,
      0.014871931,
      0.00077624305,
      -0.027538996,
      0.0069564674,
      -0.0047467244,
      0.02953629,
      0.011997097,
      -0.0052246535,
      0.0011498949,
      -0.016717708,
      0.001188092,
      0.014502067,
      0.007566179,
      0.016068125,
      -0.014483661,
      -0.0145677915,
      0.0015948676,
      -0.014841526,
      0.0056865527,
      0.038792305,
      -0.0087573845,
      0.022453837,
      0.0028123662,
      0.0071978,
      -0.030203171,
      0.011670881,
      -0.02403539,
      -0.022290098,
      -0.009630881,
      -0.01078019,
      0.018995168,
      0.010842994,
      0.0065529384,
      -0.020946708,
      0.0054820925,
      0.0068842815,
      -0.0078921635,
      0.0045099095,
      -0.005166139,
      0.0022922074,
      0.013728757,
      0.021996967,
      0.021319069,
      -0.0057713953,
      -0.026383504,
      0.01238316,
      0.016799128,
      0.006403215,
      -0.0066709197,
      -0.017298903,
      0.0007959494,
      0.009503126,
      -0.011442954,
      -0.0043828436,
      -0.013233308,
      0.00961212,
      0.0037874898,
      -0.011301052,
      -0.016653754,
      -0.015606206,
      0.0005528082,
      -0.018484335,
      0.011616718,
      -0.0025659157,
      -0.021831462,
      0.00003843658,
      0.0062231687,
      0.00013525864,
      -0.0017706867,
      0.0065111886,
      0.010391891,
      -0.008580074,
      -0.0076044044,
      -0.022219852,
      -0.00028615145,
      -0.01131765,
      -0.0046451474,
      0.01365605,
      0.016881902,
      0.008781318,
      0.0065012504,
      -0.015264079,
      0.0011897266,
      0.015000576,
      0.0215533,
      -0.02132161,
      0.0017098384,
      0.014418833,
      -0.025675066,
      -0.022081057,
      0.011876506,
      -0.027918277,
      0.004321578,
      -0.003929258,
      0.007392441,
      0.02618558,
      -0.016958179,
      -0.019299729,
      -0.006950829,
      -0.012727965,
      -0.003253673,
      0.01961895,
      0.019906774,
      0.017335866,
      0.010786814,
      0.000961305,
      0.027823241,
      -0.015545344,
      -0.0063045127,
      0.00033029422,
      -0.011931653,
      -0.0072312085,
      0.02864799,
      -0.0059735565,
      0.008433378,
      -0.0053489776,
      0.019167645,
      0.007387674,
      -0.015272787,
      -0.0016176663,
      0.0037032107,
      0.006250987,
      0.018504497,
      0.0024298655,
      -0.006524669,
      -0.005797756,
      -0.008413691,
      -0.017436143,
      -0.012225273,
      -0.010949423,
      -0.005434689,
      0.008349866,
      0.0038744502,
      -0.012446846,
      -0.04458752,
      -0.022546511,
      -0.006380826,
      -0.00081659126,
      0.0041304617,
      -0.021758467,
      -0.010639677,
      0.0030000552,
      0.014081064,
      -0.001748149,
      0.015310918,
      0.029767916,
      -0.02630346,
      -0.0058438354,
      0.007012391,
      -0.0069191516,
      -0.023921357,
      -0.007900681,
      -0.0021397485,
      0.0015467566,
      -0.07617316,
      0.02054115,
      0.016103186,
      -0.020713145,
      -0.0022286726,
      -0.016893141,
      -0.025375666,
      0.0066239424,
      0.021396596,
      0.016698454,
      0.01065063,
      0.00007127357,
      0.024435487,
      0.0008780359,
      -0.025328591,
      0.00748045,
      -0.017295664,
      0.013562744,
      0.008445145,
      -0.029967442,
      0.0024339245,
      -0.00816872,
      0.0027086688,
      0.0028579556,
      0.01710651,
      0.009543288,
      -0.022113862,
      0.0064991843,
      0.028525347,
      -0.020594008,
      0.008895796,
      0.025668353,
      0.0060779992,
      0.0048726914,
      -0.002893813,
      -0.018862745,
      -0.013261766,
      -0.028867472,
      0.0019631588,
      -0.005699973,
      0.0011804856,
      -0.00066539785,
      0.012368906,
      0.013421757,
      0.0049791564,
      0.02458966,
      0.030205792,
      -0.00408946,
      -0.012126683,
      0.004876308,
      -0.009153353,
      0.003912098,
      0.013511487,
      -0.035232674,
      0.010096897,
      -0.011851955,
      -0.014104914,
      0.0025287285,
      0.03212282,
      0.014780848,
      -0.002082073,
      0.008355203,
      0.014750875,
      -0.026071943,
      0.017405765,
      0.0025769295,
      0.007874554,
      -0.00337584,
      -0.0053774905,
      -0.00086592586,
      0.019058757,
      -0.03697956,
      -0.020710511,
      -0.03992881,
      0.009671604,
      0.005667426,
      -0.009693558,
      -0.0073298407,
      -0.01759063,
      0.013568177,
      -0.02036949,
      0.008617413,
      -0.004570873,
      0.027411783,
      -0.013731747,
      0.012157712,
      0.005713666,
      -0.012551947,
      -0.00240764,
      -0.0033226907,
      -0.00001119929,
      0.014912748,
      0.0011647545,
      -0.008152711,
      -0.022034641,
      0.0042121382,
      -0.0028729774,
      -0.011314119,
      0.005344044,
      0.008726676,
      -0.013969176,
      0.007727004,
      -0.02595067,
      -0.006755999,
      -0.0025311895,
      0.034806654,
      -0.012226574,
      -0.007491284,
      0.005893573,
      0.014174653,
      -0.011244097,
      -0.0050993436,
      -0.020218305,
      -0.0008585643,
      -0.029317524,
      0.047637273,
      0.008239798,
      0.016101588,
      -0.012724068,
      -0.022380846,
      -0.008631074,
      -0.0017425886,
      0.030838443,
      0.0029700408,
      -0.021367539,
      0.020249406,
      -0.013775914,
      0.01200324,
      0.00068722176,
      -0.0119432965,
      0.004905741,
      -0.01020705,
      -0.034524456,
      0.011779853,
      -0.021163872,
      -0.01722262,
      0.009807403,
      -0.0034958776,
      0.023376193,
      -0.006336218,
      -0.012511812,
      0.011556231,
      0.01092299,
      0.00013944283,
      0.0019061593,
      0.011623906,
      -0.013927252,
      -0.013477983,
      0.008030623,
      -0.0034001567,
      -0.019467851,
      -0.015703587,
      -0.034384087,
      0.017945042,
      -0.0066615324,
      0.022225875,
      0.0038072588,
      0.008620598,
      -0.0025810748,
      -0.02414785,
      0.023826078,
      0.0063434984,
      -0.014282366,
      -0.0007366635,
      0.009847313,
      0.005163706,
      -0.002895488,
      0.009795389,
      0.009972004,
      0.0037590656,
      -0.0018669533,
      0.0028330472,
      -0.032719463,
      0.0073681073,
      0.012695111,
      0.0073916023,
      0.0013163812,
      -0.015019902,
      0.014458053,
      0.002412861,
      0.0064616534,
      0.0018866679,
      -0.04583626,
      0.01450436,
      0.0046615303,
      0.016439544,
      0.00709757,
      -0.011379044,
      -0.0020682288,
      -0.017355356,
      -0.0103801545,
      -0.00773651,
      0.007492573,
      0.00930831,
      0.017279124,
      0.027336812,
      0.019504886,
      0.0055254884,
      0.023721864,
      0.010147562,
      -0.021819796,
      0.002018849,
      0.005099679,
      -0.017525746,
      0.01891397,
      -0.012850217,
      -0.017971558,
      -0.046191067,
      0.008170941,
      -0.0015514104,
      0.014509347,
      0.0026385214,
      0.0018241769,
      -0.017469583,
      0.02940421,
      0.0011570052,
      -0.024529723,
      0.0043022064,
      -0.014809275,
      -0.0095954165,
      0.014045175,
      0.01431125,
      -0.022389356,
      -0.011006245,
      0.0044482984,
      0.0012610666,
      -0.02304698,
      0.028464751,
      0.0022083235,
      -0.02307469,
      0.00327955,
      -0.008224624,
      0.0019663488,
      0.018588273,
      -0.012401267,
      -0.018308796,
      0.027164157,
      -0.0024737664,
      0.0009970414,
      0.011153091,
      -0.0075511266,
      -0.0013179696,
      -0.016786573,
      -0.027088968,
      0.003683152,
      0.0042744735,
      0.022299977,
      0.013299944,
      -0.018273558,
      -0.0028968332,
      0.023359204,
      0.012732741,
      0.00695049,
      -0.018320486,
      -0.019133843,
      0.023862349,
      -0.00050503976,
      -0.009402949,
      -0.016944867,
      -0.0104964925,
      0.0056741727,
      -0.013283046,
      -0.0010632471,
      0.01764561,
      -0.019475423,
      -0.013222233,
      -0.01052409,
      0.005179056,
      0.01776822,
      -0.11032714,
      -0.0169254,
      -0.0042898604,
      -0.008437447,
      0.0036760166,
      -0.021843731,
      0.026759941,
      -0.042857874,
      -0.0022228057,
      -0.016502663,
      0.008309027,
      0.011032434,
      0.010171202,
      0.014452691,
      -0.0025026402,
      0.005225107,
      -0.01088323,
      0.04188251,
      0.026389457,
      -0.008362063,
      0.021415642,
      -0.0027448824,
      -0.010248218,
      0.009336608,
      -0.002923235,
      -0.009024482,
      0.024059862,
      -0.0021655993,
      0.010376172,
      0.018125294,
      -0.022682074,
      -0.014399107,
      0.028307788,
      0.018332312,
      0.032887515,
      0.007219961,
      0.014873256,
      -0.0080336435,
      0.003995632,
      0.022864077,
      0.01613242,
      0.011453057,
      0.014718127,
      0.0007439362,
      -0.0068557514,
      0.0050871563,
      0.024655052,
      -0.013526772,
      0.008909874,
      0.017625373,
      -0.045990437,
      -0.02649198,
      -0.008172889,
      -0.008984275,
      0.022777872,
      0.0038171317,
      0.032600544,
      0.00769668,
      -0.007126656,
      -0.012538238,
      -0.0019907793,
      0.0072765513,
      -0.0005664319,
      0.04161197,
      0.016167114,
      0.009030118,
      0.030444011,
      0.00517407,
      0.002241353,
      -0.00089830864,
      0.0014637427,
      0.010578706,
      -0.012660235,
      0.038644668,
      0.005661092,
      -0.0073781232,
      0.0042297584,
      0.004748111,
      -0.004360547,
      0.021666232,
      -0.018316532,
      0.021834243,
      -0.07816681,
      -0.0029567555,
      -0.018752968,
      0.0039907563,
      0.021607399,
      0.0025759065,
      -0.004823114,
      0.013601228,
      -0.0006862085,
      -0.0031870662,
      -0.011544813,
      -0.03741995,
      0.003019617,
      -0.014118209,
      -0.021562858,
      0.01458053,
      0.013686918,
      -0.035622142,
      -0.010640274,
      0.011321945,
      0.0005255941,
      -0.011455112,
      0.0038080565,
      0.0024760643,
      -0.008964734,
      0.00517524,
      -0.015579838,
      0.014655155,
      0.001768799,
      0.008284521,
      0.0045538177,
      -0.14023644,
      -0.0024443462,
      0.0042129904,
      0.017545743,
      0.0037380422,
      0.003095539,
      -0.0057575,
      0.005376378,
      0.026571285,
      -0.030333102,
      0.005415694,
      -0.013589697,
      -0.021575848,
      0.0016878451,
      0.0036377579,
      0.13306569,
      0.002844032,
      0.021837477,
      -0.014950174,
      0.017340435,
      -0.008571308,
      -0.009061075,
      -0.010308193,
      0.013180516,
      -0.008839949,
      0.00012695437,
      0.026289595,
      -0.013687684,
      0.020789953,
      0.015674656,
      0.011389281,
      -0.013019738,
      -0.019723494,
      0.035377167,
      0.00097451574,
      -0.019585347,
      0.021258356,
      0.008598501,
      -0.007013621,
      -0.0014557671,
      0.0042122956,
      -0.00096050656,
      -0.02051901,
      -0.003689203,
      0.0031624665,
      0.0055913823,
      0.007041748,
      -0.0046432824,
      -0.0013638263,
      -0.019315246,
      0.02995705,
      -0.043824427,
      0.0018817446,
      0.0020686383,
      -0.003236975,
      0.035094846,
      0.013292208,
      0.03749924,
      -0.012440173,
      -0.0039676717,
      -0.0025049783,
      0.001773387,
      0.017607529,
      0.0023621863,
      0.0015937722,
      0.012584828,
      0.0059866435,
      0.029527854,
      0.0052533546,
      -0.0007963628,
      -0.007820922,
      0.023720214,
      -0.029023973,
      -0.010867485,
      -0.027003609,
      0.004295062,
      -0.014387344,
      0.008739473,
      -0.0035507923,
      -0.021936128,
      -0.0032892928,
      0.006752188,
      0.009516215,
      0.0071091596,
      0.02754317,
      -0.010978569,
      -0.025194034,
      0.019138897,
      0.0028615338,
      0.0005098777,
      0.010888522,
      0.008708451,
      -0.0070055714,
      0.031693537,
      0.0006194022,
      0.024439653,
      -0.00019767249,
      -0.0027858026,
      0.018937537,
      -0.008919788,
      -0.010026426,
      -0.012222663,
      0.0034880284,
      -0.014647824,
      0.026940418,
      -0.010516438,
      0.013879482,
      0.027744973,
      0.02365116,
      -0.013423186
    ]
  },
  {
    "id": "genai_cohort_nodejs_14_node_http_part_2_vtt",
    "content": "Okay, so now with this good amount of knowledge, let's jump onto some coding part. Right? So I have a new project, so I like to set up things from scratch so that you know. So first things first, I'll just do an npm Init hyphen y so that I have a package JSON file. So you can see a very simple package or JSON file. And at this point you know what is a package JSON file. Then I'm, I like to do npm install at the array types/ node so that my VS code is working absolutely like a charm. And then let's create an index js file. So usually you will have a lot of files. Okay? So you will have index js file. You will have a lot of files. But index js file is the one that we need to execute. And this is where we are going to import all our code. So first things first, let's have the HTTP setup right here. That is required. And let's import the. No, not like this node HTTP, Right. That looks more, good. Then you can create a server. Okay, you can create a server that is HTTP. create server and you have to pass a callback function which has request and response. Right? Then finally you can just say server. Listen on some port. I, mean usually we use for the development. And then you can pass a callback function which says console log, that server is running on port. Which port are we running? We are running on port number 8, 000, right? So port 8, seems good. Now see guys, if I have to run this particular code, I have to say node and I have to say index js, right? But you know what you can do is instead of saying it like this, you can configure your custom script. How just remove this particular script. You can just say, hey, I want a script. Let's say start. This can be anything. And whenever someone says start, I have to run this as the command. Now what you can do is using npm, I repeat, using npm, you can just say start. Okay, npm start. And what this will do is this will basically run whatsoever you have specified here. For example, let's say for I just say echo, hey man. Okay, just, just anything. Now if I do npm start, you can see it is just saying hey man. So npm start basically reads the start script from here and runs whatever is as the value. Okay? So usually you will have a lot of things here. For example, you can have start, you can have build, and then you can have the build command, you can have xyz which does something, something. So you can even create your own and scripts. So usually you will have a start script. So npm start, which will start the server. Okay. Now in the server, what I want to really do is I don't want to do nothing much. First of all, I'll just do a console dot log that I got an incoming request. Okay? So there is an incoming request at. So let's have the time. Okay, so I want to console log the timestamp. So just have you know, date dot now that will give you the current timestamp. So there is a new request coming at this time. Then what we will do is let me just do a console. log of full request. C headers. Okay, so this is how you can access the headers. Okay, so you remember headers, right? Headers. So if I want to access this authorization header only I can just say request headers. sorry. authorization. So this will give me the value for just the authorization headers. But let's just console log the whole object, okay, that these are the headers. And don't forget to send the response. So to send the response. Okay, so this, this is nothing. This is just a comment. You can just say request dot write head. Sorry, not request response write head. So right head. Where is the right head thing? Yeah, here is the right head status code. So I'll just send you a status code. Okay. And then finally you can just do a response. end saying. I mean you can just say okay. Okay. I'll just say okay. Okay. Yeah, that's it. So this is my beautiful server that is up and running. Now let's do an npm Start. So you can see that server is running on Port and everything is seems cool. So let me just open a window and go on to localhost So this is what we are getting right now when we go back we have a lot of console log things, right? So let's see that. Then I hit this server when I said localhost8000 on my browser. Browser made a request to my server. Yes or no? So let me just do it again. So I'll just do a command K to clear everything from here and network and refresh. Can you see that? We made a request to localhost8000 that is a get request. So by default browser will always make a get request. You got a Okay. And these were the headers that your browser Sent, right? So it sent an accept encoding, accept language cache, control connection, host, right and everything. So browser is sending a lot of information now. Can you see that all this information is available here? This is basically same thing, see Accept encoding, gzip, deflate branch. So you can see you will have an accept encoding here also. So where is accept encoding? Yeah, accept encoding. See the same value here. So all these values are basically same that the browser has sent you. Right? So you can access the headers like this. Okay, let's just do one thing. Let's just do it at now. Now I want to send a response of now. Guys, don't you think that this is irritating to do a control C and restart the server every time? So what I'll do is I'll just add a Var command. Okay, Just add a Var command so that if I do npm Start it is automatically watching. So if I change anything, my server is automatically restarting. So now if I do this thing you can see automatically restarts. Now if I do a refresh here. Now I'm getting a So now the server sent a 201, which doesn't make any sense. But yeah, you can see that this is how you can get the request. Now from here, from here what I can do is let's just try to see that what encoding or what language we are accepting. Okay, so I'll just copy this. Okay, I'll just copy and I'll say that response dot end I want to send a message that is hey, you can accept okay, and then I'll just say request. headers. accept language. Like this because it's a hyphen. So now let's see if I do a refresh. See the server is trying to read our headers and sending me back this. So server can read these headers as key value pair so we can process it that what the client really wants. And based on that what we can do, we can basically send an appropriate response. Okay, so this is how you can read the headers. Now you can even read the body. Okay so body can be anything. So you will have access to request, data. Okay so request body is there and there is something known as request method. Okay, request method is also here. So let's try to console log this request method. So if I do a refresh you are getting a git. Okay, so to make a post Request you need JavaScript on the front end. So let me show you how you can even do that. Okay, so in the JavaScript what we can do is here I'll just write a code that is fetch. Hey, can you please make a fetch call to. To my own server? With using this. Using the post method. Okay. And I'll not be sending any data. Enter. We caught an error. What's the error? Oh, sorry. This should be actually like this, right? Enter. So now you can see that we got a post request, right? The front end was able to send a post request. Similarly, front end can even send a patch request. So let's say patch, okay? And enter. So you can see that now we are getting a patch request. So this is a request method that you can access. Like this. Similar to this, you have a request dot URL. Okay, so let's see that. What is this request URL. So if I am on localhost URL is coming to be slash. Okay, you can ignore this five icon. This is a this is something that browser internally makes a request request for this logo. Do you see this logo here? For this, let's go to slash contact us. Okay, so even if I go to contact us, right? You can see the request is coming to slash contact us. So that means when you are building a server, you can do something like this. You can have a switch case on request URL. Right? Request URL. And you also want to have a switch case on like the methods, right? If it's a get method or that. But yeah, on that later case, if it is a root. Okay, in this case what we will do is let's always write ahead of only. Okay, let's always write ahead of only. So what I'll do is I'll just do a response dot end so I'll just say return response N saying that you are on the homepage. So this is your home page. And let's do a break then if the case. Okay, if the case is slash contact us. Okay, in this particular scenario, what I can do is the break is not required because you know, I'm just doing a return. So I can just do a return that hey, contact me at pius girl. dev@gmail. com. nice. Similar to this, Similar to this, you can have a case of let's say about. Okay, we will create one more page that is about. So in case of about, let's just return response dot end saying I am a software engineer. Okay, I'm a software engineer. Then let's have a default case Default case should be a four or four, right? If you're on the default case in this particular scenario, it should be a or So let's say, hey And finally response dot end end saying that you. Sorry, you are lost. You are lost. Okay, so let's just say that you are lost. Nice and cool. So now let's test a server. So if I do a refresh, contact me@us. devgmail. com. okay, that's fine. You can ignore this. If I go on to the slash, the server crashed. The server crashed. Okay, so why did the server crashed? The reason for that is, you know, we are trying to mutate the headers twice. So what you can do is you can also shift this logic into your FLS only. Okay, so yeah, this will basically solve the issue. So now let's do a refresh. Okay, homepage. Nice. Let's go on to the slash contact us. Working good. Let's go on to the slash about. What was the page about? Yeah, just the about. So you can see that not, not like this slash about. I mean slash, about. You can see I'm a software engineer. But. But if I go on to some other page, xyz, which does not exist, you are lost. And even if I go to the network tab, so what you will notice is let me just zoom out a little bit. So we are getting a from where this is coming. It is coming from. It is coming from here. What if I do a here? Let's see. So even if you are lost, you are getting a So this is not a good practice, right? You, you, you are not designing your server in a as per the rules. So you should not do it. I mean you can do it. It's your server. You are. You can do it anything. But these are not the standards, these are not the norms. So you should follow the guidelines and norms. Okay, so this is how you actually create a server. So basically you can have the URL based on the URL what the user is trying to access. You can do that. Okay, so yeah, congratulations on your very first server. So now you have a fully functional server which is more smart now do you? Did you notice one thing guys? That we are making a server application logic more and more smarter. Earlier our server was just able to return a single thing. Now we have a smart logic of a switch case which is reading that what you are trying to access. And based on that only we are returning it. So our goal is to make our servers application logic more and more smarter as we proceed in this course. Got it. So, yeah, I mean guys, you are really doing a great work. So that's all for this particular video and let's meet you in the next one. Until then, bye bye and take care.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "14-node-http-part-2.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/14-node-http-part-2.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0045529283,
      0.025472319,
      0.026126571,
      -0.058634955,
      -0.016274625,
      0.005015737,
      0.01967619,
      0.021641497,
      0.002351315,
      0.011238292,
      -0.015446987,
      -0.006091866,
      0.0054458044,
      0.01075438,
      0.12767804,
      0.0067165056,
      -0.0050604567,
      0.0076174117,
      0.0076528145,
      -0.015530742,
      0.015835011,
      -0.0025789023,
      0.017849665,
      0.012609716,
      0.0014474452,
      0.002050761,
      0.007800614,
      0.0030732695,
      0.024521746,
      -0.00399699,
      -0.0031616457,
      -0.013775686,
      0.0032314328,
      0.018546961,
      -0.00309787,
      0.027453218,
      0.02565475,
      0.007240495,
      -0.028674351,
      -0.0025250071,
      -0.009065896,
      -0.013047083,
      0.01573739,
      -0.018384002,
      0.019731529,
      -0.0013153162,
      -0.008226846,
      -0.01701921,
      0.0051524285,
      0.018365717,
      -0.012353017,
      -0.01627483,
      -0.0067367633,
      -0.1735087,
      -0.010265887,
      0.00021098477,
      0.02188232,
      -0.00342746,
      0.013877156,
      0.009225233,
      -0.00447533,
      0.012372481,
      -0.03040578,
      0.009762313,
      -0.017105952,
      -0.009441938,
      0.005763838,
      0.001795221,
      0.02853701,
      -0.0069209603,
      0.003472005,
      0.011733712,
      -0.018782888,
      -0.0265778,
      -0.016563166,
      -0.0054624537,
      0.010941719,
      0.011384061,
      -0.024383556,
      0.015642725,
      -0.0038460332,
      -0.015028002,
      -0.00569092,
      0.0036286467,
      0.007976532,
      -0.008691758,
      -0.025591629,
      -0.013694805,
      -0.018523712,
      0.019483095,
      -0.0002657709,
      0.024049161,
      0.0065304255,
      0.00014863395,
      -0.006244784,
      -0.00056671066,
      0.0026092252,
      -0.0011154338,
      -0.0066167577,
      -0.014570775,
      0.019519366,
      -0.007175537,
      -0.03710798,
      0.025118217,
      0.0028184126,
      0.009959933,
      0.012751955,
      0.0019449864,
      0.014713823,
      -0.029910436,
      0.013272138,
      -0.011147522,
      0.0011002723,
      0.00900308,
      0.011011075,
      -0.18997784,
      0.019965077,
      -0.0009200641,
      0.012827029,
      0.00937649,
      -0.01918213,
      0.0072254012,
      -0.0015345433,
      0.018854601,
      -0.020974245,
      0.009342973,
      -0.00040899255,
      0.027438968,
      0.0140688745,
      0.00890732,
      -0.0069973907,
      -0.008369163,
      0.0034398192,
      0.009962059,
      0.022808801,
      0.01767668,
      0.007719448,
      -0.006500678,
      0.0022098965,
      -0.04324879,
      0.0029658047,
      0.037624657,
      -0.011470734,
      0.015607727,
      0.009182141,
      -0.006799109,
      -0.022599902,
      0.023881065,
      -0.02449033,
      -0.029630197,
      0.00029934014,
      -0.020239769,
      0.03469038,
      0.00012959306,
      0.0155477375,
      -0.03429753,
      -0.0025298977,
      0.008324727,
      0.0020903307,
      -0.0014977476,
      -0.002848526,
      0.005245237,
      -0.0015201031,
      0.024795713,
      0.017301703,
      0.011223509,
      -0.03206455,
      0.020684155,
      0.0059427223,
      0.0044979965,
      -0.0027002797,
      0.00078171334,
      0.008996697,
      0.011911975,
      -0.011361475,
      -0.009600651,
      0.000045436667,
      -0.0020966122,
      0.001162456,
      -0.009781494,
      -0.0028570488,
      0.0012537647,
      0.009479057,
      0.0035285198,
      0.018997893,
      -0.008229143,
      -0.018208824,
      0.00252081,
      0.012114278,
      -0.016487276,
      0.00042842844,
      -0.014663287,
      -0.0027070926,
      -0.0032220283,
      0.002730035,
      -0.01787361,
      -0.016197694,
      -0.016279234,
      0.0125763,
      0.0034381722,
      0.025129072,
      -0.008168692,
      0.00841116,
      -0.02181615,
      0.00989276,
      0.019496623,
      0.022266354,
      -0.011660023,
      0.01391922,
      0.02161313,
      -0.011599491,
      -0.015292937,
      0.001501554,
      0.000067370216,
      0.00563295,
      -0.018364118,
      0.012987739,
      0.025924927,
      0.0013567422,
      -0.012584981,
      -0.010130942,
      -0.0057392586,
      -0.000026440723,
      0.0150131155,
      0.0076435413,
      0.0014316458,
      0.0052313227,
      -0.0068753837,
      0.012157827,
      -0.014631112,
      0.007927696,
      -0.009091004,
      -0.009991054,
      -0.0012905074,
      0.018304761,
      -0.019118365,
      -0.0029932007,
      0.0004155899,
      0.0060180975,
      0.0044114455,
      0.0032614693,
      0.0040208073,
      -0.0051498413,
      -0.004295917,
      0.027666952,
      0.0016621309,
      -0.020437337,
      -0.013658009,
      -0.024895543,
      -0.022505872,
      -0.027584298,
      -0.00028868084,
      -0.015355362,
      -0.0036582912,
      -0.012197097,
      -0.029958017,
      -0.022851827,
      -0.008023362,
      -0.00724681,
      -0.02218216,
      0.0030488258,
      -0.004996026,
      -0.018998703,
      0.0049834503,
      0.012341554,
      -0.0026482157,
      0.015061275,
      0.024490416,
      -0.021548893,
      -0.00819687,
      0.016873807,
      0.0065760063,
      -0.003446302,
      -0.012793929,
      -0.00807783,
      0.0099002775,
      -0.082965896,
      0.007718111,
      -0.005572252,
      -0.022580672,
      -0.02134533,
      0.0058342502,
      -0.017078051,
      0.0071240864,
      0.023076547,
      0.013970882,
      -0.0018246967,
      -0.009949605,
      0.017711543,
      0.0056288475,
      -0.017645488,
      0.025674736,
      -0.017778236,
      0.00804297,
      0.0014959046,
      -0.016072195,
      -0.008705338,
      -0.01361851,
      0.011273399,
      -0.012032756,
      0.018379334,
      -0.0037520705,
      -0.028552888,
      0.013726528,
      0.029030772,
      -0.016263243,
      0.015514452,
      0.02281782,
      -0.021200892,
      -0.013988773,
      -0.0064734984,
      -0.011599801,
      0.02172351,
      -0.021013351,
      0.013340706,
      -0.014140554,
      -0.006239421,
      -0.014606955,
      0.010575839,
      0.0065839337,
      -0.010419345,
      0.009946074,
      0.03389436,
      -0.008186,
      -0.021464353,
      0.0108735375,
      -0.019775892,
      0.012159997,
      0.01780354,
      -0.04380413,
      0.010846032,
      0.009595457,
      -0.007633859,
      0.019393913,
      0.023864072,
      0.0021356728,
      -0.005773022,
      0.0031641286,
      0.01748031,
      -0.0066122403,
      0.009955543,
      0.0071844324,
      -0.0023047125,
      -0.014208074,
      0.005281795,
      -0.019533817,
      0.0067340923,
      -0.020036895,
      -0.013909525,
      -0.045773998,
      0.002167444,
      0.004173644,
      0.018187141,
      0.006373694,
      -0.027227804,
      0.014827538,
      -0.003172081,
      0.0027133187,
      0.0026636415,
      0.018749153,
      -0.003695117,
      0.010329238,
      -0.007833446,
      0.006513296,
      0.0016026783,
      -0.0026746641,
      0.009414755,
      0.023978699,
      -0.004175498,
      -0.0013425639,
      -0.016960237,
      0.004840984,
      -0.027021445,
      -0.004733702,
      0.008058273,
      0.016330749,
      -0.027349018,
      0.0010795158,
      -0.0044790516,
      -0.0033831857,
      0.0015756132,
      0.025658574,
      -0.0016047657,
      -0.00232846,
      -0.0044666077,
      -0.0055780825,
      -0.033028223,
      0.0008748014,
      -0.017633297,
      -0.0026356387,
      -0.031930637,
      0.032481752,
      0.011092041,
      0.017201325,
      -0.027053596,
      -0.017489599,
      -0.011219782,
      0.0014890264,
      0.016491948,
      0.0060776044,
      -0.012468508,
      0.012562352,
      -0.024327822,
      0.013148054,
      0.0013944422,
      -0.016192244,
      0.00404106,
      0.0063147065,
      -0.027279273,
      0.0012640244,
      -0.01119998,
      -0.013837539,
      0.008763693,
      -0.00060035626,
      0.012614513,
      0.009846515,
      -0.0348259,
      0.013144506,
      0.0056989356,
      -0.013797107,
      -0.017478824,
      0.013117586,
      -0.020241376,
      0.000054124586,
      0.0012856456,
      0.0016882838,
      -0.0011860277,
      -0.006780147,
      -0.020685978,
      -0.006438954,
      0.0026883502,
      0.022470945,
      0.028553357,
      0.008448158,
      -0.014858005,
      -0.021187486,
      0.009633594,
      0.01062088,
      -0.01473687,
      -0.005217399,
      0.010722911,
      0.014425637,
      -0.009485406,
      -0.00084229413,
      0.010392682,
      0.0070259827,
      -0.0003208317,
      -0.0071615903,
      -0.03545978,
      0.025812149,
      -0.0008139098,
      -0.0072956765,
      -0.0021203873,
      -0.0115607735,
      0.014046198,
      0.0030179587,
      -0.0036053327,
      -0.0024222564,
      -0.019015962,
      -0.0053903437,
      -0.012362097,
      -0.005407794,
      -0.00017980428,
      -0.014171942,
      -0.00822051,
      -0.0066223424,
      -0.0010688669,
      -0.019114714,
      -0.0036290146,
      0.0008385817,
      0.015479045,
      0.026070166,
      0.015844196,
      0.00066642265,
      0.008842316,
      0.006168843,
      -0.02311156,
      -0.002093085,
      0.0023231814,
      -0.013845043,
      0.030234357,
      0.012012248,
      -0.009492475,
      -0.025862822,
      0.00584852,
      0.0059819776,
      -0.011262226,
      -0.0038398728,
      -0.0019407761,
      -0.002163362,
      0.03305682,
      0.007935652,
      -0.018360974,
      0.014720643,
      -0.025218071,
      0.0014664779,
      0.0148810735,
      0.004093054,
      -0.022070855,
      -0.0075361254,
      0.012909834,
      -0.015086917,
      -0.029560724,
      0.022964602,
      0.010019909,
      -0.02112771,
      0.007959278,
      -0.014032343,
      0.016402751,
      0.018583523,
      -0.010416399,
      0.0014906699,
      0.01296076,
      -0.0014099778,
      -0.0010309583,
      0.010937779,
      -0.01817556,
      -0.0059238686,
      -0.013536196,
      -0.015084427,
      0.0017445193,
      -0.012191324,
      0.02688974,
      0.019453842,
      -0.00285747,
      -0.00060979894,
      0.021814572,
      0.008572966,
      0.002239715,
      -0.0103087,
      -0.02003668,
      0.021239927,
      -0.00466847,
      -0.0027345594,
      -0.0065356586,
      -0.011836322,
      0.0032111641,
      -0.011096131,
      -0.0067186765,
      0.023154007,
      -0.014248226,
      -0.026073232,
      0.004383286,
      0.0008890538,
      0.020603351,
      -0.11667524,
      -0.0055922535,
      -0.018666055,
      -0.023574896,
      0.0029410303,
      -0.016505526,
      0.021843566,
      -0.030192193,
      -0.029073363,
      -0.015137077,
      -0.0017709422,
      -0.009105141,
      0.0046620383,
      0.015955433,
      -0.01444827,
      -0.000044063036,
      -0.011207629,
      0.039076567,
      0.036485605,
      -0.0005720594,
      0.017536009,
      -0.0011952058,
      0.010612787,
      0.003147715,
      -0.016363028,
      -0.004880293,
      0.033361755,
      -0.0097688325,
      -0.0021780797,
      0.005066865,
      -0.012207033,
      -0.01241459,
      0.0018682552,
      0.0001302258,
      0.021807475,
      0.0021336132,
      -0.000443994,
      0.0042948066,
      0.02741291,
      0.01614902,
      0.011561196,
      0.010718224,
      0.017851975,
      0.0011790954,
      0.0014063234,
      0.008494631,
      0.020697359,
      -0.018885039,
      0.006316079,
      0.045103926,
      -0.042592082,
      -0.049456205,
      -0.0061329855,
      -0.011094553,
      0.014399562,
      0.0045915935,
      0.027663881,
      0.014949313,
      -0.0032672503,
      0.004987328,
      0.004966434,
      0.0070810737,
      -0.008271031,
      0.027337005,
      0.003598184,
      0.00799989,
      0.020947354,
      -0.011070159,
      0.0034245146,
      -0.004717584,
      0.000022835564,
      0.005139858,
      -0.0063268794,
      0.026260264,
      0.004125053,
      0.002575118,
      0.00750518,
      0.017462913,
      0.0042832703,
      0.026402067,
      -0.013998855,
      0.014889729,
      -0.07600217,
      -0.0065765553,
      -0.01168366,
      0.008556504,
      0.013955105,
      -0.002832947,
      -0.021354398,
      0.022880869,
      -0.0076627927,
      0.0027865267,
      -0.014420052,
      -0.025878591,
      0.0075959805,
      -0.010964693,
      -0.032961115,
      0.013075964,
      0.009609589,
      -0.033692088,
      -0.019772297,
      0.0064309197,
      -0.010075042,
      -0.0060294736,
      -0.0049680066,
      -0.0091539,
      0.005782835,
      0.025629915,
      -0.025396442,
      0.0031548352,
      -0.005935716,
      -0.000012899115,
      0.0019747936,
      -0.15030971,
      -0.014411112,
      0.014984965,
      0.008927773,
      0.0037718308,
      -0.0071181734,
      -0.0027470747,
      0.012410993,
      0.020126864,
      -0.03613738,
      -0.0058784145,
      -0.03018406,
      -0.015201316,
      0.011099815,
      -0.011879822,
      0.13888596,
      0.0062873615,
      0.01187917,
      -0.0027863448,
      0.009610588,
      -0.019123962,
      -0.008981184,
      0.003616241,
      0.012733704,
      0.004554351,
      -0.0065742284,
      0.017345915,
      -0.013134149,
      0.026681848,
      0.011072972,
      0.014661279,
      -0.026291814,
      -0.016325505,
      0.034586813,
      -0.005878038,
      -0.02638587,
      0.011125189,
      -0.008573248,
      -0.019427579,
      2.3031916e-7,
      -0.009281157,
      0.012300065,
      -0.0067636594,
      0.007793879,
      0.0069230804,
      0.019745346,
      0.012880662,
      -0.027838139,
      -0.0031939973,
      -0.038327694,
      0.018690675,
      -0.052788448,
      0.005157513,
      -0.002828321,
      -0.013053678,
      0.03292853,
      0.024085226,
      0.02158905,
      -0.021894785,
      -0.003036356,
      0.0003029954,
      -0.0044811717,
      0.023744887,
      -0.009730744,
      0.0026390175,
      0.0074040997,
      0.011542804,
      0.029741524,
      0.016004186,
      -0.010761488,
      -0.008644241,
      0.016027806,
      -0.016498825,
      0.004609469,
      -0.028398076,
      -0.015167981,
      0.010070628,
      0.024296261,
      -0.007734736,
      -0.027703002,
      -0.007874496,
      0.016221147,
      0.005458164,
      -0.024506325,
      0.018525217,
      -0.01458567,
      -0.021386784,
      0.023017129,
      -0.009166816,
      -0.01072878,
      0.01467306,
      0.011404666,
      -0.0035804412,
      0.030214397,
      -0.0052822772,
      0.012677032,
      -0.00066176493,
      0.010532314,
      0.006957776,
      -0.008171679,
      0.00066235644,
      -0.013218073,
      0.01937127,
      -0.010163977,
      0.021596977,
      -0.0017057424,
      0.016599327,
      0.012182567,
      0.0034828242,
      -0.014533737
    ]
  },
  {
    "id": "genai_cohort_nodejs_15_node_http_testing_tools_vtt",
    "content": "Hey guys, welcome back to another exciting video. And in this video I'm going to show you that how we can use these API testing clients and tools in order to build a very reliable and great APIs. Okay, so these testing tools are very, very important to build an API and they are very helpful while you're developing. So there are a lot of API testing tools. And don't worry, I'll tell you that what these does. So like you have the Postman. This is the like most famous one. And I have used the Postman a lot. But the only problem with them is that now there is a lot of features in Postman which you don't need. So they have made this particular product a lot bloated. Okay, so this is a very bloated product and it requires you a sign in and all that. So it was a great product, I would say. And it is still a great product, no doubt in that. But the only problem is it's very heavy. Now then there is a, alternative that is Isomnia. Again it was also a great product, but now it is very, very, very heavy. So I don't prefer to use it or something like that. And these are not open source. I mean Isomnia is open source. But my personal favorite that I want to show you is one Bruno. Okay, so Bruno is open source. Great. And next is thunderclient. My personal favorite one is thunderclient because this is not a standalone application. This is a VS code extension which directly gives you this UI in the VS code. So this particular thing is a game changer. So what we are going to do is in my Extensions tab, let's search for Thunder client. Okay, so you can see that we have this Thunder client and I can just do an installation. Okay, so let's install thunderclient. And done. You can see that there is a new logo. Now these Thunder clients can help you, these API clients can help you to test your APIs. How what you have to do is you have to click on this new request. Cool. From where do you want to make the request? So HTTP. Hey. HTTP. Colon, colon, localhost. Right on Right on I want to make a request. What kind of request you want to make? I want to make a get request. So you have get, post, put delete, patch, head options and all. Okay, so I want to make a get request and I do. Do you want to send any headers to the backend? Yeah, I just want to send two headers. That's it. And sent. So what happens when you send, See your server got a request and this is what you get as a response. So you got as a response, byte size, milliseconds it took and your server sent three headers. Nice. Let's make a post request. Okay, so you can make a post request. So you can see that it's an incoming request. Let's make a request at slash contact us and do a send contact me at this you're getting a So you can see that I can do all the testing the that how my APIs are working using this tool. Okay, you can add headers, you can add authorization, you can add body here if you want to send something. So everything is available here and it also creates a history of everything. So I mean too good. Okay, so this is what we are going to use. That is Thunder Client. No installation, no overhead. But please feel free to use Postman if you want to. It is same only if you will see that if you will install Postman. So here is where you can give the URL. You can select the method, you can just click on this. You know there is a send button on the top which they have not rendered. You can do send. So this is the data that you are sending and you will get the response. So yeah, you can use Postman. But yeah, for me it is little bit bloated now and I prefer Thunder Client over it. Okay.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "15-node-http-testing-tools.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/15-node-http-testing-tools.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.005585585,
      0.02646412,
      0.012478561,
      -0.071766935,
      -0.003717678,
      0.009750398,
      0.017114189,
      0.024029283,
      -0.018051378,
      -0.010187797,
      0.0015128856,
      -0.004242701,
      0.009058555,
      0.020191351,
      0.13437308,
      -0.023061069,
      -0.0025995052,
      -0.0039444426,
      -0.0017462632,
      -0.039272506,
      -0.0017801276,
      -0.005635173,
      0.014478207,
      -0.0052666953,
      0.008473853,
      0.009977952,
      0.011529942,
      0.006549367,
      0.009817991,
      0.008906395,
      -0.010411291,
      -0.030319566,
      0.0049736523,
      0.023984486,
      0.0028700281,
      0.014818011,
      0.01720415,
      0.0129896235,
      -0.025850965,
      0.010927905,
      -0.032059457,
      0.011290231,
      0.00873291,
      -0.017133845,
      0.0096131675,
      0.0012247523,
      -0.0022522514,
      -0.029910006,
      -0.0012642381,
      -0.004085892,
      0.01010605,
      -0.004253372,
      -0.008044962,
      -0.1855484,
      -0.015702335,
      -0.011253565,
      -0.006579293,
      -0.0033945823,
      0.02769048,
      0.013854909,
      -0.028379254,
      0.0069215763,
      -0.01634245,
      -0.0050381375,
      -0.031481896,
      -0.022132473,
      0.014292086,
      -0.014560252,
      0.020069683,
      0.001052596,
      0.013459502,
      0.010524539,
      -0.008454719,
      -0.031483065,
      -0.007205193,
      -0.01748637,
      -0.00028216254,
      -0.020648282,
      -0.011923259,
      0.020025538,
      0.000894472,
      -0.005367925,
      -0.021960748,
      0.020694787,
      0.003147135,
      0.0070738466,
      -0.016875466,
      -0.008053397,
      -0.020296805,
      -0.011000485,
      -0.0017585122,
      0.026740193,
      -0.007860488,
      0.008083952,
      -0.003694721,
      -0.0063048126,
      -0.0015577677,
      -0.007866543,
      -0.000045447265,
      -0.0019337266,
      0.020681404,
      -0.00708171,
      -0.03227228,
      0.01822503,
      -0.0029127852,
      -0.001533578,
      -0.003981705,
      0.012680843,
      -0.011922582,
      -0.019400692,
      0.028476406,
      0.010437068,
      -0.0071726143,
      0.022341726,
      0.019360363,
      -0.18597169,
      0.016584048,
      -0.00446508,
      0.01664566,
      0.014399507,
      -0.011809281,
      0.000958731,
      -0.0054254513,
      -0.0203176,
      -0.034600988,
      0.01856106,
      0.004433844,
      0.016927904,
      -0.0051050293,
      0.01061227,
      -0.0057339775,
      -0.02469489,
      -0.015842048,
      -0.0006043568,
      -0.000550197,
      0.024243582,
      -0.008583843,
      0.0018042399,
      -0.010730643,
      -0.018442193,
      0.018756857,
      0.04310064,
      -0.013159771,
      0.014453192,
      0.008714632,
      -0.021125019,
      -0.009408911,
      0.004970699,
      -0.0047942144,
      -0.010016611,
      0.011724752,
      -0.012561181,
      0.0028879289,
      0.0076275193,
      0.027073704,
      -0.04914133,
      0.01121046,
      -0.0004351453,
      -0.0013475775,
      0.003225196,
      -0.0077063926,
      0.01289115,
      -0.0119134765,
      0.0054957904,
      -0.00072511384,
      -0.008352804,
      -0.008453888,
      -0.009354666,
      0.022816867,
      -0.012761672,
      0.0063210703,
      -0.011419072,
      0.010850868,
      0.0053699138,
      -0.011678668,
      0.00010531026,
      0.0053038686,
      0.007694807,
      0.011422331,
      -0.0020796356,
      0.0058149016,
      -0.01369041,
      0.018569686,
      0.0031182384,
      -0.0045166253,
      -0.018575331,
      -0.024765862,
      0.01238862,
      0.0031752405,
      0.008910209,
      0.000053299726,
      -0.0070307893,
      0.034308314,
      0.009327616,
      -0.0044769747,
      -0.027426802,
      0.0023349859,
      -0.03004504,
      -0.004570645,
      0.008754772,
      0.005637789,
      -0.015723044,
      -0.01287225,
      -0.012053258,
      -0.00045626334,
      -0.0040697493,
      0.018702185,
      -0.022148088,
      0.0069842576,
      -0.0015775851,
      -0.024015771,
      -0.014037005,
      -0.0016355084,
      -0.018580325,
      -0.0010189239,
      0.008596573,
      0.009351128,
      0.010717007,
      -0.011720763,
      -0.003510061,
      0.0047198487,
      -0.02082463,
      0.006415261,
      0.031797454,
      0.009530238,
      -0.014239214,
      0.012325288,
      0.00401903,
      -0.00499208,
      -0.0039722202,
      0.017125309,
      -0.008453262,
      -0.031631846,
      -0.006937518,
      0.016250627,
      -0.009304091,
      -0.010446942,
      0.0063500344,
      0.011199166,
      0.006634932,
      -0.00047509727,
      -0.0030987428,
      -0.01931159,
      0.010889628,
      0.023534408,
      -0.004189285,
      0.008548027,
      -0.018785423,
      -0.014083022,
      -0.013747972,
      -0.016331866,
      -0.012180194,
      -0.0020479867,
      -0.035972863,
      0.011605225,
      -0.006792293,
      -0.039965563,
      0.0007006387,
      -0.0073599042,
      -0.0091906255,
      -0.0016513639,
      -0.01831252,
      -0.008663844,
      -0.01348786,
      -0.0024193209,
      -0.009541993,
      0.020018043,
      0.018367505,
      -0.028254243,
      0.020490777,
      0.010493435,
      0.0061476952,
      -0.017005298,
      -0.018848564,
      -0.006670935,
      -0.0056697973,
      -0.062288117,
      0.018600525,
      -0.0057935677,
      -0.039349772,
      0.0025444715,
      0.015977023,
      -0.026836969,
      0.0053864154,
      0.014872165,
      0.0066320333,
      -0.00077715056,
      0.008670032,
      0.008737143,
      -0.013069911,
      -0.027680302,
      0.026135562,
      0.00465767,
      -0.009318897,
      -0.0048748762,
      -0.021490475,
      -0.004837505,
      -0.019402578,
      -0.0068359515,
      -0.005174323,
      0.02744538,
      -0.009259417,
      -0.015170459,
      0.013939117,
      0.019749232,
      -0.0058183186,
      -0.006681346,
      0.008893669,
      -0.015854515,
      -0.003914931,
      -0.020675762,
      -0.018644206,
      0.032701615,
      -0.017726628,
      -0.008164022,
      -0.0035596546,
      -0.0016653567,
      0.011639928,
      0.014584013,
      0.024794262,
      -0.0040187403,
      -0.007724046,
      0.0071197166,
      0.0024381257,
      -0.004100072,
      0.008036677,
      -0.015357926,
      0.016885431,
      0.011978564,
      -0.01668861,
      -0.009025193,
      -0.020081291,
      0.002767231,
      -0.0068084765,
      0.014519558,
      -0.007340282,
      0.007384165,
      -0.0034385403,
      0.0020583433,
      -0.010037229,
      0.026775412,
      0.013542002,
      0.008848408,
      -0.022018952,
      -0.00015643935,
      -0.011261762,
      0.015889866,
      -0.016076695,
      -0.026259027,
      -0.042193588,
      -0.0028264413,
      0.01340763,
      0.0067124115,
      0.010596632,
      -0.020615935,
      0.0035488722,
      -0.0034451617,
      0.018987752,
      0.010845032,
      0.013053215,
      -0.0023098271,
      -0.004033047,
      -0.0061308644,
      0.006863536,
      -0.003114092,
      -0.023961352,
      0.015990045,
      0.02102669,
      0.0048617143,
      -0.0050582998,
      0.00030406378,
      0.0013730645,
      -0.028511588,
      -0.026551584,
      -0.013930107,
      0.01144903,
      -0.0048647323,
      -0.005483202,
      -0.015729422,
      -0.015323111,
      0.005245449,
      0.013769891,
      -0.017308848,
      -0.016404388,
      -0.006093226,
      -0.014694362,
      -0.0002961813,
      0.0017088207,
      -0.0074697924,
      0.0060484367,
      -0.00094506214,
      0.025835225,
      -0.0035820487,
      0.007524135,
      -0.020163735,
      0.007519234,
      -0.027567018,
      -0.008061704,
      0.00048790718,
      -0.0024755038,
      -0.010265662,
      0.015315714,
      -0.0083537735,
      0.012030312,
      -0.0028312318,
      -0.016007187,
      -0.023932742,
      0.011391995,
      -0.021441493,
      0.002523672,
      -0.009688037,
      -0.009593807,
      0.017501017,
      0.010345552,
      0.026643088,
      0.016997915,
      -0.0012356458,
      0.018479882,
      0.011441945,
      -0.0046579293,
      0.001455913,
      0.014906897,
      -0.015214069,
      0.0057306928,
      -0.009474512,
      0.007383208,
      -0.012160919,
      -0.0015693858,
      -0.033925664,
      0.018857429,
      0.010710203,
      0.016872695,
      0.023970518,
      0.009286848,
      -0.022094684,
      -0.022144048,
      -0.005894204,
      0.00090158865,
      -0.026420588,
      -0.03709356,
      -0.0115646785,
      -0.0013076836,
      -0.013201452,
      -0.014360998,
      0.0018365225,
      -0.010948571,
      -0.0026349472,
      -0.004276777,
      -0.0334959,
      -0.0044052755,
      0.0076811807,
      -0.0065663694,
      0.022224147,
      -0.0035025156,
      0.019539632,
      0.0041312682,
      -0.00030462537,
      -0.016092557,
      -0.030640805,
      0.01469631,
      0.012836579,
      0.015178249,
      -0.002861245,
      -0.0068342946,
      -0.009024933,
      -0.0020912641,
      -0.00380411,
      0.00072282023,
      -0.012597289,
      0.023755513,
      0.0014037132,
      0.015617396,
      0.0056754868,
      0.012391345,
      -0.0011936681,
      0.008180269,
      -0.014764513,
      -0.00095393404,
      0.025292479,
      0.008064507,
      0.030908981,
      -0.00018800891,
      -0.020461798,
      -0.038872782,
      0.009574601,
      0.009258943,
      0.018380767,
      -0.0039708596,
      0.019617349,
      0.010868772,
      0.029737007,
      0.019716665,
      -0.015652813,
      0.004769992,
      -0.025046252,
      -0.013043698,
      -0.0032196846,
      -0.002570762,
      -0.025615973,
      -0.0217805,
      0.0068996367,
      0.005117938,
      -0.032495894,
      0.018108338,
      -0.0064718905,
      -0.019342856,
      0.011688199,
      -0.01635579,
      0.008233712,
      0.022024646,
      -0.0032875238,
      -0.0058560255,
      0.024707787,
      0.00082672865,
      0.026055798,
      0.0140842805,
      -0.003833264,
      -0.0068841786,
      -0.029438311,
      -0.01246527,
      0.010642138,
      0.0103020435,
      0.004338161,
      0.030460319,
      -0.0100894235,
      0.0046582557,
      0.026133025,
      0.013666674,
      -0.0009610002,
      0.0023469743,
      -0.009545966,
      0.0029292584,
      -0.00023426274,
      0.0015516789,
      -0.01740634,
      0.0035506336,
      0.014346881,
      -0.016517613,
      -0.012282394,
      0.019451067,
      0.01158625,
      -0.015077166,
      0.000165142,
      -0.0020420423,
      0.0385999,
      -0.11775733,
      -0.0012237815,
      -0.030132383,
      -0.002438194,
      0.0016195758,
      -0.021227796,
      0.03013077,
      -0.027402056,
      0.007805869,
      -0.0000983565,
      0.003399804,
      -0.004292255,
      0.02123319,
      0.0072599975,
      -0.010063607,
      -0.026547642,
      -0.012310079,
      0.0038759094,
      0.028127875,
      -0.006395414,
      0.0061096745,
      -0.014311875,
      0.002901263,
      0.0066672144,
      -0.01175447,
      0.0015026066,
      0.024719018,
      -0.018594522,
      -0.0005475796,
      -0.00871668,
      -0.031593967,
      -0.008567223,
      -0.0028857128,
      -0.0072062393,
      0.01620411,
      0.016251218,
      0.010716908,
      0.004600224,
      0.00954104,
      0.004390628,
      0.0039365743,
      -0.0075582564,
      0.020663377,
      0.019231264,
      -0.02092164,
      0.002175461,
      0.017980943,
      -0.026550401,
      -0.006786216,
      0.047636084,
      -0.059684727,
      -0.03635039,
      0.002026055,
      -0.03918109,
      0.006614512,
      0.014405085,
      0.011589489,
      0.004306558,
      0.0064261393,
      0.0036259587,
      -0.008010219,
      -0.003910897,
      -0.0044036247,
      0.046570953,
      -0.016454574,
      0.008946429,
      0.018468047,
      0.010839349,
      0.01818268,
      -0.01317849,
      -0.0150954295,
      0.008210396,
      0.009106556,
      0.012109263,
      0.01048633,
      -0.010135407,
      0.008189525,
      0.019251782,
      -0.0074258186,
      0.02459206,
      -0.017342221,
      0.0018968653,
      -0.060038663,
      -0.011865097,
      -0.008334847,
      0.0044748858,
      0.020198613,
      -0.00793641,
      -0.0048340964,
      0.01787205,
      -0.006225871,
      0.015980273,
      -0.012293765,
      -0.007171489,
      0.0017110633,
      -0.030527135,
      -0.02298742,
      -0.015370959,
      0.01670223,
      -0.030209944,
      -0.01532251,
      -0.0030070508,
      -0.00736932,
      -0.0064554214,
      0.005077137,
      -0.008247994,
      -0.010737734,
      0.021281041,
      -0.0058307983,
      0.000738874,
      -0.018418811,
      -0.005967267,
      0.02249653,
      -0.14238274,
      -0.01460592,
      -0.0033882903,
      0.020750294,
      0.00080979115,
      0.033132583,
      -0.010197329,
      0.00053873734,
      0.0025506618,
      -0.0032767816,
      0.0063977945,
      -0.026866486,
      -0.01501094,
      0.007289874,
      0.0016489085,
      0.1320151,
      -0.017926067,
      0.0073436904,
      -0.023879148,
      0.022397839,
      -0.018772732,
      -0.013270258,
      0.009469174,
      0.006614038,
      -0.0012178451,
      -0.006264958,
      0.0022108208,
      -0.0106878,
      0.015379357,
      0.019267632,
      -0.0037576666,
      -0.02033052,
      -0.012581971,
      0.021790078,
      0.0114433,
      -0.003306022,
      0.01090922,
      -0.017867526,
      0.009913869,
      -0.011808356,
      0.012205433,
      0.0066626505,
      0.002847856,
      0.0052598016,
      -0.0015755747,
      0.00756182,
      0.0039673187,
      -0.02659362,
      -0.007034963,
      -0.024113717,
      0.019157188,
      -0.058129195,
      0.003906924,
      -0.010867425,
      -0.004603814,
      0.0321196,
      0.0029238956,
      0.02709823,
      -0.0033195906,
      0.005189327,
      0.002705434,
      0.0011955282,
      0.0034125098,
      -0.013424112,
      0.006758118,
      -0.0070337006,
      0.020351196,
      0.027150793,
      0.018529024,
      -0.0015989376,
      -0.0019537774,
      0.01069278,
      -0.009644771,
      0.010350866,
      -0.01627253,
      0.00924633,
      -0.0059220525,
      0.011860263,
      0.0057092253,
      -0.009457827,
      -0.010076692,
      0.0037872586,
      -0.0039178664,
      -0.021540679,
      0.013731831,
      -0.02827916,
      -0.042144272,
      0.008565652,
      -0.008735056,
      -0.015399508,
      0.01102996,
      0.0020693925,
      -0.012073004,
      0.03297182,
      -0.00465569,
      0.010184438,
      0.00007582364,
      0.003889492,
      0.022441389,
      0.022242352,
      -0.0006381577,
      -0.021027993,
      0.009019209,
      -0.016041048,
      0.026687883,
      -0.018676305,
      0.027606081,
      0.022778686,
      0.010532401,
      -0.012319311
    ]
  },
  {
    "id": "genai_cohort_nodejs_16_node_http_task_1_vtt",
    "content": "So hello guys, in this particular video, let's create a very simple project. So here I have created a task MD file. You will get these files. So we have couple of tasks here. You can read the task that what we have to do. And let's try to implement all of these tasks and try to code a server. Okay, so again, boilerplate code. So let's have an index js file and let's have npm any typhoon y so that we have, we have the package or JSON file, right? So inside the package JSON. So what I'll do is I'll just say npm install at the rate types/ node. So let's wait for it. And also let's configure the start script to say node hyphen hyphen Var. And that is index js. Cool stuff. Right now inside my index js. So what, what is my task? Right, let's go on to task. So my task is very simple. So we have these four routes that we have to make. Routes or path is same thing. So if there is a get request on slash, we have to send a simple hello message. If there is a get request on slash, contact us. We have to do this. If there's a post request on slash tweet we have to do this. If there's a get request on this thing, we have to do this. And also we need to store all the incoming requests with the timestamps to a log TXT file. Wow, amazing. So const HTTP equals request require and let's have the node HTTP module, you know, imported. Then you can create a server using this HTTP create server function which takes a callback function. So you have access to request, you have response, and that's it. Finally, server. Hey server, can you please listen on port number 8, 000? And once you do that, once you are successfully able to bind yourself to that port, give me a console log message saying that that HTTP server, is running on port Cool stuff, right? So let's just do an npm start. So you can see that my server is running. So first things first, right? So if you go on to the tasks, okay, so first is that you have to make a get route. Send a simple hello message from the server. Okay, so what I can do is I can say, hey, const the method, okay? So I can just say request method, okay? And you can have the path, okay, that is request path. So I'm just getting request, URL. Sorry. So these are the two variables. So let's have A switch case on the path. Okay. And on the path, let's have the first one that is case. Okay. Case slash. In this particular scenario, what do we have to do? So we have to send a simple hello message from the server. Pretty simple, right? So you can just say response dot, write head. Okay? Write head head that is dot and you can just end it saying hello. Okay. You can just send it saying hello from the server. Okay. And even you can add an emoji of saying, you know, hello or something like that. So yeah, emojis are cool, right? So let's have an emoji. So my first task is done. Okay. And it's always good to verify along with. So what I can do is I can just have my Thunder client here and let's try to make a get request on slash. Is my server working as expected? Yes. So if even if I do multiple times. Yeah, my, my server is working as expected, right? Hello from the server. So guys, we have successfully done our task one, right? So this was your task one which is now done. So what I will do is I'll just, I'll just strike it off. So you can just strike it off like this, okay. Or even. That's fine. Let, let it be here. Now what is my second task? Second task is that you have to make a get thing on slash contact us that sends your email and contact number to the user. Now guys, tell me one thing. Actually if you see if I even make a post request on this, I am still getting hello from server. Do you think that is a good thing? Because the document has mentioned that if it is a get request only then you have to send the request. But even on post it is working. So that means our server has a bug. So this is a bug, right? So that means what I have to do is I have to first make a switch case on the method, okay? That if it is the get request then I have to handle it differently. And if it is a let's say post request and I have to handle them differently and so on. Right? So right now I just have to get, get I can just you know handle the gate and this switch should be here. So that means now what you're doing is if it's a get request and the path is this only then this should work. Now see on the post you are not getting anything. You are not getting anything because the server is not able to do anything. So that means if. Okay, so let me just do a return here. So that means if you somehow reach to this line in this particular scenario, you are lost. So response dot write head saying Okay? And you can just say dot n saying, you are lost man. Okay, you are lost. Now see. So now if I send the request, you are lost because post request is not there. But if I make a get request, I should get now it is good, right? So you have a switch case first of all on the method, then you are making this path. Second is contact us. Right? So pretty simple, right? You inside the get only we need a case for slash contact us. And in this particular scenario we will just send our email and phone number. So let's say that, sure, you can contact me. So my email is you know, Piyush garg. dev@gmail. com and phone. Okay, phone. You can just send like + 919-999-something like this. So that means if I make a now get request onto slash contact us and send. So yeah, I'm getting the data fine. But if I do a post request on this, yeah, it should say, you are lost, man. Nice. Nice. Right, Makes sense. Then if you make a post request to slash tweet, it's kind of, you know, that I want to do something. It's basically like, you know, user is trying to create a tweet. We don't have a DB right now, but okay, let's try to mimic this thing. Okay, so that means now I need a new case. So let's have a break to this one. So I have a new case of post. So all the post request should be handled here. So now again you have to switch on the path and the path that we are talking about is slash tweet. So if there's a post request on tweet in this particular scenario, you can do a fake DB operation. So let you can just assume that we have a lot of code to do that DB operation and stuff. But right now what I want to do is, I want. I'll just say 2, because when you do a post on something and that thing is created something like the user post a request on slash tweet, which internally created some resource. So is the correct status quo. And you can say like your tweet, your tweet was created something like this. Okay, so we are just mimicking it. So that means if I now make a request, okay, so if I now make a request to slash tweet, get Request will give me a But this time post request is going to work. That is to go one created. Nice. See, get request is not working. Now even it is saying that, hey, you have to make a get request also for slash tweet, which basically sends all the tweet from the db. Okay, so back to the script. Okay, so back to the script file. So inside this get we have the switch. So here what I can do is I can just copy this particular thing, paste it again here, and this time we can name it to slash tweet. So that means now what I am doing is. Okay, so now what we are doing is we are creating a slash tweet also. See, now we have two parts. Slash tweet. Slash tweet. The only difference is this is for the post and this is for the get. So here we can just say 200, and I can just send hey, tweet one tweet to something like this. So tweet one and new line. So in future we will actually get it from the database. But right now we don't have a db, so I can just send all the tweets like this. So making a get request on slash tweet, you are getting the tweet one, tweet two. But if you are make a post request on this right, then you are creating a new one. Nice. Right, so you can see our server is going very good. Right now there is a final challenge remaining that you need to log all the incoming requests with the timestamp and log it into the log. txt file. So that means you have to create a lock. So let's say that my log looks something like this, that there was an incoming request. So let's have the date first. Okay, so I can just say, I'll just have the date dot. You can have. Now you can just say dot to string. Let's just say date. Now then what you have to do is like you will just say, hey, on which kind of method the request was coming? Let's say. So it was coming on this particular method. And what was the path. Great. What was the path that user was trying to access? So let's say this is how you constructed a log. So every time there is a request, you have to create this log Txt file, you have to append it. So to work with files, do you remember that FS module that we covered? So you can just import that node fs module and I can just say fs. append to a file in a Synchronous way. That's fine because every request that will come user has to first make an entry, right? So we are just appending to a file that is log Txt, what is the data that is this log. And I want to write it as a UTF Okay? That is UTF8 format. Now what will happen is anytime you get a request, let's make a post request to slash tweet. Okay, A log is created. A log is created. Now. Why this dollar is coming here? Just one second. This dollar should not be here. And also please guys, don't forget to add a new line. Okay, so first Got it. Then let's make a get request to slash tweet. Okay, working. Let's make a get request to this thing and let's try to make a request to contact us. Which is also good. And let's try to make a post request on this thing. Oh, you are lost. Now if I check my log txt, you are having all the logs that at what time what kind of requests one were coming, right? So this is like your server logs. So if you're monitoring your server you can actually see that when the requests were coming. And if someone is trying to hack into something, someone is trying something different. So yeah, you have all the information, right. So this is pretty cool. So this is how you can actually create a logger and logs all the incoming requests. So when you go into the production you have this distributed logging system. So all the incoming requests are, are logged so that they are kept for the future reference if something goes bad. Let's say your server is down so you have some data that why the server crashed. Oh, there was a this kind of request which could be there. Right. So this helps in debugging the stuff. Okay, so this is how we have created a very simple server which now supports. Okay, let me just show you the full code which supports two methods, get and post. And you have couple of routes and get and you have a couple of routes in post.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "16-node-http-task-1.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/16-node-http-task-1.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.012538816,
      0.027166096,
      0.027246658,
      -0.061888136,
      -0.011440319,
      -0.014416456,
      0.03148221,
      0.02565938,
      -0.0052897423,
      0.011801243,
      -0.016099615,
      -0.015614889,
      0.009316438,
      0.028834306,
      0.13343579,
      0.033099625,
      -0.001971461,
      0.004251438,
      -0.0028239663,
      -0.012622225,
      0.0023778067,
      -0.012105512,
      0.01428822,
      -0.0026194355,
      0.0012617899,
      -0.005237728,
      0.012580272,
      -0.00946382,
      0.029705983,
      -0.012126282,
      0.010135846,
      0.0012080531,
      0.008454836,
      0.019372985,
      -0.0088935355,
      0.0075794803,
      0.026261218,
      0.008923085,
      -0.026583128,
      0.01825779,
      -0.010446697,
      0.0087921005,
      0.017982244,
      -0.018876627,
      0.012631299,
      0.011400851,
      -0.008546687,
      -0.023264665,
      0.014970724,
      0.025356317,
      -0.008453922,
      -0.014915742,
      -0.011609179,
      -0.19056594,
      -0.008944025,
      0.008790386,
      0.008758144,
      0.0047526057,
      0.015152558,
      0.006002621,
      -0.017984457,
      0.006976812,
      -0.038503077,
      0.0056577884,
      -0.020525808,
      -0.0010907159,
      0.01177403,
      -0.0047568367,
      0.011966316,
      -0.0037874896,
      -0.0013816141,
      0.02207206,
      -0.021941885,
      -0.029621873,
      -0.02037438,
      -0.025721148,
      0.011875875,
      0.0152414935,
      -0.011791817,
      0.0013862473,
      -0.00014365042,
      -0.012136125,
      -0.008263135,
      -0.0016260408,
      -0.008924954,
      -0.012730074,
      -0.017908284,
      -0.008736155,
      -0.021066144,
      0.020032823,
      -0.0050921966,
      0.024520746,
      -0.007444665,
      0.0022116348,
      -0.0076293615,
      0.00035372726,
      0.0065588583,
      0.0044205,
      0.0038744577,
      -0.012509661,
      0.011056485,
      -0.004635198,
      -0.02437611,
      0.015038439,
      -0.011784667,
      0.015893817,
      0.012893068,
      -0.0037024075,
      0.027658707,
      -0.018837076,
      0.005069312,
      -0.015448597,
      0.0028806657,
      0.018425709,
      0.01337935,
      -0.18224329,
      0.025535233,
      -0.0061547565,
      0.010289829,
      0.007875279,
      -0.014568306,
      0.005692845,
      0.00874568,
      0.019265803,
      -0.02080979,
      0.0007884264,
      0.0013716199,
      0.024370661,
      0.027857376,
      0.002103921,
      -0.014897717,
      -0.00849227,
      0.0079194475,
      0.002980385,
      -0.0024260702,
      0.010495371,
      0.0011892843,
      -0.014308101,
      -0.0053322525,
      -0.029467957,
      0.0013706553,
      0.03234263,
      0.005300611,
      0.018426497,
      0.006648118,
      -0.010023735,
      -0.012727346,
      0.035524704,
      -0.013732089,
      -0.038743455,
      -0.0055340566,
      -0.023526428,
      0.026026782,
      0.0058436594,
      0.015363261,
      -0.056007385,
      -0.0030774586,
      0.010911977,
      0.0010018286,
      0.0013168809,
      -0.0032413737,
      0.026210014,
      -0.005465181,
      0.029647108,
      0.028236158,
      0.01103398,
      -0.017930202,
      -0.0031564122,
      -0.0005011035,
      0.01505076,
      -0.007306474,
      -0.0068253665,
      0.009262794,
      -0.0014821294,
      -0.0070042824,
      -0.0058960672,
      -0.009149521,
      0.006463332,
      -0.0062413434,
      -0.013884415,
      -0.010163397,
      0.0036350088,
      -0.00040384926,
      0.0036409074,
      -0.0010776116,
      -0.0059820963,
      -0.025286792,
      -0.013183459,
      0.023171876,
      -0.017540926,
      0.011246916,
      -0.018764278,
      -0.0074811424,
      -0.0045439317,
      0.0075894557,
      -0.009870707,
      -0.017295042,
      -0.027010769,
      0.012779513,
      -0.004727493,
      0.037961613,
      -0.014617507,
      -0.007371751,
      -0.0059545552,
      0.0114425365,
      0.019274937,
      0.030045373,
      -0.009863371,
      0.012213052,
      0.022738038,
      -0.020623513,
      0.0035168205,
      -0.006418201,
      0.011836805,
      0.0030116742,
      -0.016893847,
      0.017927323,
      0.0071921726,
      0.0044871643,
      -0.005749133,
      -0.007998885,
      -0.019382223,
      0.005004875,
      0.025624331,
      0.0051130103,
      -0.0017156347,
      0.015822524,
      -0.0028488936,
      0.00020565429,
      -0.0011393998,
      0.020516226,
      -0.0031353824,
      -0.010944594,
      -0.0017555191,
      0.024565423,
      -0.018111404,
      -0.012932556,
      0.01291844,
      0.009258148,
      0.006072234,
      -0.0043854606,
      -0.0015534292,
      -0.0044402727,
      0.014383602,
      0.03489629,
      -0.003049436,
      -0.021969436,
      -0.004667036,
      -0.011908564,
      -0.022617208,
      -0.0057634152,
      -0.0023915952,
      -0.007948029,
      -0.013483285,
      -0.0116978055,
      -0.03114298,
      -0.011209606,
      -0.018732524,
      0.0037704157,
      -0.018537302,
      -0.008802921,
      -0.010908991,
      -0.018441288,
      0.008412754,
      0.015158875,
      -0.016219517,
      -0.0013984587,
      0.036181454,
      -0.016985228,
      0.006380497,
      0.0047511305,
      -0.014983193,
      -0.004557888,
      -0.0015736446,
      0.0025604018,
      0.0015928941,
      -0.08915705,
      0.0022743065,
      -0.00821385,
      -0.018370628,
      -0.02276444,
      0.01668723,
      -0.002665737,
      0.0025775936,
      0.011236126,
      0.020154754,
      0.0013054606,
      -0.01616276,
      0.03083422,
      -0.009371701,
      -0.020107318,
      0.01988308,
      -0.0057201777,
      -0.009952056,
      0.025590265,
      -0.019900039,
      0.006642371,
      -0.013845306,
      0.007675916,
      -0.01795706,
      0.022266079,
      -0.0044835657,
      -0.012592084,
      0.018035099,
      0.025471942,
      -0.007830548,
      0.008163661,
      0.019842403,
      -0.0047257366,
      -0.026477117,
      0.0062039965,
      0.012769461,
      0.031923216,
      -0.012008168,
      0.031912226,
      -0.016104836,
      0.006500662,
      -0.01357883,
      0.0143598225,
      0.011888473,
      -0.009045341,
      0.005500893,
      0.030241352,
      -0.008975482,
      -0.016376503,
      0.00855311,
      -0.027356206,
      0.023388298,
      0.018582068,
      -0.02368705,
      0.012380469,
      0.018624673,
      0.009179329,
      0.0067060073,
      0.02058569,
      -0.00023745903,
      -0.0066793263,
      -0.006017564,
      0.031299148,
      -0.0028497225,
      -0.0025143595,
      0.010857396,
      -0.0041561653,
      -0.0075904196,
      0.0016448135,
      -0.018029157,
      -0.0066696852,
      -0.0015816271,
      -0.014185468,
      -0.041620247,
      0.0006800855,
      0.015298818,
      0.009701344,
      -0.0009269604,
      -0.019493328,
      0.021002874,
      0.015475155,
      0.0013715419,
      0.005052308,
      0.023576332,
      -0.0017804618,
      0.0066826143,
      -0.0043796184,
      0.010617452,
      0.008774126,
      0.0007123252,
      0.009537887,
      0.027271619,
      0.007981917,
      0.00015316541,
      -0.014369457,
      0.016653564,
      -0.029637797,
      0.000100297606,
      0.003294918,
      0.028043278,
      -0.022770237,
      -0.0073169284,
      -0.0040936447,
      -0.008672439,
      0.0014381434,
      0.015425626,
      0.0016324912,
      -0.00052779005,
      0.0029790928,
      -0.014446409,
      -0.0055635683,
      -0.010133081,
      -0.024539001,
      0.005562985,
      -0.021276636,
      0.031230256,
      0.007927263,
      0.010875287,
      -0.011764911,
      -0.009323786,
      -0.014775522,
      0.02023938,
      0.017508123,
      0.009028458,
      -0.01084145,
      0.011302449,
      -0.02744167,
      0.015062191,
      0.005213679,
      -0.017169023,
      -0.008488782,
      0.0067625656,
      -0.015238928,
      -0.012016387,
      -0.0053748554,
      -0.009398853,
      0.016863568,
      0.0017244796,
      0.024668524,
      0.0036671616,
      -0.0036276702,
      0.015522221,
      0.004876775,
      -0.007974224,
      -0.016930554,
      0.015474735,
      -0.015961247,
      0.00465412,
      0.010697383,
      -0.0074186176,
      -0.025858091,
      -0.013106498,
      -0.022071008,
      -0.01949217,
      -0.000252127,
      0.025680222,
      0.02176897,
      0.010347715,
      -0.008271156,
      -0.00730476,
      0.005453933,
      0.0020921822,
      -0.0034033582,
      -0.023919297,
      -0.0015858269,
      0.006813529,
      -0.015908243,
      -0.000060462196,
      0.015093722,
      0.0042701033,
      0.00239889,
      -0.020287314,
      -0.046990845,
      0.010700474,
      0.0018654878,
      -0.015940117,
      -0.0026281236,
      -0.022100216,
      0.021101054,
      -0.017992703,
      0.008959211,
      -0.0011369357,
      -0.020426258,
      -0.0098509425,
      -0.010944883,
      0.0009374053,
      -0.013793559,
      -0.0047145695,
      -0.015591888,
      0.0059600673,
      -0.0022837643,
      -0.006108491,
      0.0077698086,
      0.005860602,
      0.010430347,
      0.024411056,
      0.01541098,
      0.0045678704,
      -0.005283509,
      -0.0032909743,
      0.00007475345,
      -0.0053191665,
      0.009138727,
      0.0034812314,
      0.012994093,
      0.023313861,
      -0.007690395,
      -0.023828054,
      0.0053867535,
      0.014406422,
      -0.009412075,
      0.0046373135,
      0.01502914,
      0.00916368,
      0.0278788,
      0.008329394,
      -0.027866248,
      0.020605164,
      -0.033711918,
      0.003972136,
      0.007845902,
      -0.009526187,
      -0.009201408,
      0.0050506685,
      0.0128724575,
      -0.008598717,
      -0.025448734,
      0.03195727,
      -0.013570578,
      -0.0057659266,
      0.0048319763,
      -0.008926536,
      0.007126832,
      0.018134965,
      -0.023318272,
      -0.017118543,
      0.014006576,
      -0.007046882,
      -0.008375761,
      0.009773703,
      -0.009730741,
      -0.007703464,
      -0.019138271,
      -0.032922357,
      -0.0029946556,
      0.014160568,
      0.015556485,
      0.0131315235,
      0.0014947111,
      -0.0015704336,
      0.0162208,
      0.0065205055,
      0.005939082,
      -0.010301649,
      -0.020417867,
      0.027637282,
      -0.019767672,
      -0.0024827556,
      -0.0021375504,
      -0.012011276,
      -0.00121893,
      -0.0067652874,
      -0.011287656,
      0.027099669,
      -0.0064868787,
      -0.041520536,
      -0.0005852149,
      0.012745057,
      0.012966558,
      -0.12072691,
      0.0028213921,
      -0.006468638,
      -0.008145622,
      -0.0017187,
      -0.02509948,
      0.017464438,
      -0.021286536,
      -0.025840348,
      -0.012136481,
      0.009176102,
      -0.0028192198,
      -0.010048429,
      0.0055104895,
      -0.015427777,
      -0.009465238,
      -0.019854795,
      0.032701667,
      0.043240026,
      0.0040106364,
      0.004601015,
      -0.011319344,
      0.006871959,
      0.0019703337,
      -0.02047633,
      -0.0059954836,
      0.020908395,
      -0.0042630467,
      -0.009338565,
      -0.00015935044,
      -0.005226808,
      -0.0073289727,
      -0.008264927,
      0.013181455,
      0.017380444,
      0.013975695,
      0.005211491,
      -0.0018780114,
      0.02331207,
      0.0014546172,
      0.01864944,
      0.020159421,
      0.006991372,
      -0.0036668165,
      0.002573012,
      0.023531832,
      0.008023497,
      -0.031333685,
      -0.00935318,
      0.02136099,
      -0.047516376,
      -0.035662558,
      0.0002688185,
      -0.015728049,
      0.028959852,
      -0.0074527613,
      0.025687587,
      0.01266159,
      -0.0066616996,
      -0.010829606,
      -0.0009723131,
      0.01136939,
      0.0005612635,
      0.028960364,
      -0.00923916,
      0.011508103,
      0.012264079,
      -0.0021760522,
      0.00791626,
      0.0064330627,
      -0.006795689,
      -0.0077660005,
      0.011485512,
      0.015837919,
      0.0015218407,
      0.0073041916,
      -0.00051663804,
      0.009515376,
      -0.0038042376,
      0.024068993,
      -0.015905261,
      0.025912875,
      -0.06231149,
      -0.0055346666,
      -0.008462872,
      0.007147872,
      0.015551861,
      -0.0035059815,
      -0.0019879942,
      0.025139512,
      -0.004698391,
      0.00673494,
      -0.024076642,
      -0.017165406,
      -0.000087116634,
      -0.017014632,
      -0.02178819,
      0.009675334,
      0.0047485884,
      -0.037202824,
      -0.018235108,
      -0.006806796,
      -0.015083855,
      -0.0032751556,
      -0.00900332,
      -0.017298084,
      -0.0030397663,
      0.02387095,
      -0.04082108,
      0.0018836054,
      -0.009978646,
      -0.019040203,
      -0.00029655683,
      -0.15069452,
      -0.00704921,
      0.01951157,
      0.006698914,
      -0.007188504,
      0.0015575513,
      0.0038804142,
      -0.003227846,
      0.0058765057,
      -0.019267714,
      0.01172774,
      -0.025678614,
      -0.019747829,
      0.03140859,
      -0.0038054527,
      0.13209902,
      0.0056659556,
      0.002426234,
      -0.0042876597,
      0.007298937,
      -0.007553766,
      0.003465693,
      -0.0029720694,
      0.010298738,
      0.014908666,
      -0.005123265,
      0.005581566,
      -0.020906411,
      0.016359307,
      0.009544612,
      0.00032175545,
      -0.018600076,
      0.00013165847,
      0.03341838,
      -0.010292213,
      -0.013726656,
      0.0018668904,
      -0.007881752,
      -0.017890468,
      0.007240943,
      -0.005462289,
      0.015159818,
      -0.012135518,
      0.008182847,
      0.0050854054,
      0.014340692,
      0.0073840604,
      -0.02230674,
      0.0044597383,
      -0.023258423,
      0.00056083046,
      -0.059109554,
      0.00938488,
      -0.01334325,
      -0.009226699,
      0.02789033,
      0.022349376,
      0.016927255,
      -0.007018278,
      -0.008913878,
      0.012419653,
      -0.00071474473,
      0.027715636,
      -0.014311185,
      0.002484958,
      0.008936456,
      0.003126128,
      0.020968182,
      0.016207572,
      -0.023574254,
      -0.0007437907,
      0.011287721,
      -0.01218938,
      -0.0037573942,
      -0.019460956,
      -0.0018985778,
      0.0023345263,
      0.031777192,
      -0.005384601,
      -0.023252033,
      -0.00046445156,
      0.015089281,
      -0.0056664315,
      -0.022452027,
      0.012737709,
      -0.008689454,
      -0.016430069,
      0.017132496,
      0.0057244864,
      -0.005024146,
      0.012631394,
      0.004570066,
      0.00049039704,
      0.017548673,
      0.0016104891,
      0.019892065,
      0.0012464209,
      0.02666425,
      0.021177625,
      -0.005236647,
      0.0030717992,
      -0.0033534525,
      -0.009232463,
      -0.01891727,
      0.014491786,
      0.008215992,
      0.017020058,
      0.019035539,
      -0.004506848,
      -0.009080259
    ]
  },
  {
    "id": "genai_cohort_nodejs_17_node_express_1_vtt",
    "content": "Okay, so right now you can see that we have a very simple application that we built in the last video and which is working absolutely fine. But guys, tell me one thing, just tell me one thing. Do you think that this code right here, which is a very small code, is easy to write? Do you think? Do you like this code? Absolutely not, right? This particular code is absolute mess. Now imagine that you are working in a company where you have a very, very, very big code and you have database integration, you have redis integration, you have rate limiting, you have a lot of features set up and, coding like this and that to having five to six developers in your team. Just imagine the amount of mess that you guys are going to create, right? Because you cannot have switch cases, switch cases, switch cases and do all the things manually. This is not at all a good developer experience, right? You need some framework. You need something that, you know, makes a, consistency among developer. You need something that takes away this whole messy part and creates your code in a more structured and a more maintainable way. So for that there is one very popular framework that is known as Express js. You might have heard about it. And right now Express is also out there. So this Express, which is like a battle tested and it is therefore in the market for years and years and it will stay in the market for years. So this basically takes this headache, okay? So from the next video onwards, we are not going to use this HTTP module because, you know, using this HTTP raw module gives you a good capability to create a server. But the code is absolute mess. So we are going to use Express which internally, which internally uses this HTTP package only to create servers. So we are going to use this. So let me just show you a hello world example at what it looks. So see how clean it is. You just do Express. You create an application of Express. You say, hey, if there is a get request and slash, send this response listen on this port. So this is how, this is how declarative this Express jss, okay? And not only that, when you are coding a server, a lot of things comes in, right? You need header parsing, you know, you need body parsing, you know how to say, you should know how to send responses, how can you declutter your code, how can you move your codes into separate files? So there are a lot of things that are going to come. So for that we are going to use Express js. And trust me, all the companies, big companies, small companies, everyone uses Express js a lot. And even in future, any other library comes they are inspired from the Express. So if you know Express, you can easily adapt to other frameworks and libraries as well. So I'll meet you in the next class where we are going to set up an Express application. Till then, bye bye and take care.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "17-node-express-1.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/17-node-express-1.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.008127305,
      -0.0004757486,
      0.0073735663,
      -0.048676424,
      -0.022685932,
      -0.004178264,
      0.015819011,
      0.02839711,
      0.011952678,
      0.009224764,
      -0.015102781,
      -0.0047090477,
      0.02827408,
      0.03255744,
      0.13742854,
      -0.003590882,
      0.0050661443,
      0.013345687,
      0.0004704575,
      -0.0120307775,
      0.017539619,
      0.0058540963,
      0.009375513,
      0.016409477,
      0.012888745,
      0.0016866621,
      0.008496163,
      -0.010924698,
      0.009096048,
      -0.031676117,
      0.011258899,
      -0.01689515,
      0.010675445,
      0.012388654,
      0.0031105091,
      0.027713608,
      0.03274405,
      0.0016786082,
      -0.03284549,
      -0.0028634318,
      -0.023653297,
      -0.0020057394,
      0.01253773,
      -0.008868353,
      0.022398483,
      0.011659917,
      0.008709745,
      -0.010407477,
      0.028132834,
      0.022317301,
      -0.018051274,
      -0.0113929715,
      -0.013564786,
      -0.16879535,
      -0.017559197,
      0.032274418,
      0.0020315133,
      0.0072094537,
      0.005847335,
      0.009086024,
      -0.03330295,
      0.008744619,
      -0.037293296,
      0.011316343,
      -0.009555567,
      -0.013636004,
      0.005612812,
      -0.00835223,
      0.019436074,
      -0.002529451,
      0.00722151,
      0.013687709,
      -0.0146611305,
      -0.0062025785,
      -0.0056445743,
      -0.0005671892,
      -0.0007186937,
      -0.00048556435,
      -0.025055872,
      0.016325679,
      0.01170688,
      -0.003499552,
      0.0013228197,
      -0.0074908854,
      -0.021542596,
      -0.015608476,
      -0.03685283,
      -0.014829273,
      -0.01731471,
      0.02581614,
      0.006105092,
      0.018363047,
      -0.0011921972,
      -0.001637516,
      -0.009147426,
      -0.0028898641,
      -0.0034889847,
      0.010224184,
      -0.0062726424,
      -0.020471977,
      0.014964594,
      0.0043543745,
      -0.03107536,
      0.02718231,
      -0.0075447448,
      0.02353419,
      -0.0062938808,
      -0.0071961964,
      0.01595972,
      -0.01041028,
      -0.009824519,
      -0.014989719,
      -0.012989266,
      0.023472844,
      -0.00893127,
      -0.19395888,
      0.021642523,
      -0.00094134064,
      -0.014832357,
      -0.00012748531,
      -0.007205763,
      0.0038562436,
      0.013118826,
      0.008526898,
      -0.032495264,
      0.022702426,
      0.00050196133,
      0.029111816,
      0.019977896,
      0.012665179,
      -0.020218289,
      -0.010263518,
      -0.0016665135,
      0.0077906875,
      0.008197951,
      0.013334984,
      0.013913582,
      -0.026877508,
      -0.012424429,
      -0.034244265,
      0.010828634,
      0.023644127,
      -0.011557212,
      0.030716913,
      0.00025631592,
      -0.005493129,
      -0.024925452,
      0.034737427,
      -0.026761377,
      -0.022449,
      0.01185142,
      -0.013623894,
      0.03169864,
      -0.0014165738,
      0.023026763,
      -0.02331046,
      -0.020099228,
      -0.0017140642,
      0.011254656,
      -0.0012253033,
      0.0042962967,
      -0.0038626262,
      0.0012987859,
      0.008623174,
      0.010409994,
      -0.0065669958,
      -0.027383171,
      0.00900939,
      0.009673125,
      -0.0053323936,
      -0.010230251,
      -0.0045893933,
      -0.002754324,
      0.01704103,
      -0.0066008815,
      -0.007057027,
      -0.011324557,
      -0.00144607,
      -0.0025527354,
      -0.02693125,
      0.010514461,
      -0.014715829,
      0.009594237,
      -0.0023329458,
      0.012063255,
      -0.009132932,
      -0.023832371,
      -0.004068604,
      0.0028269235,
      -0.0023678604,
      -0.0011956239,
      -0.01685342,
      0.009581948,
      -0.0045867385,
      0.015297649,
      -0.010268008,
      0.001505074,
      0.013355855,
      0.012315776,
      0.0011048516,
      0.02150551,
      -0.008265509,
      -0.0035162475,
      -0.019037584,
      -0.00622508,
      0.025945872,
      0.023396118,
      -0.020107573,
      0.0066262456,
      0.017605094,
      -0.021355473,
      -0.026854018,
      0.00015225679,
      -0.008161115,
      -0.005635632,
      -0.01805913,
      0.030297454,
      -0.0040247138,
      -0.0028246588,
      -0.00969537,
      0.004336543,
      -0.010624547,
      -0.003027299,
      0.03005734,
      -0.0020923782,
      0.015788754,
      0.006524284,
      -0.010042419,
      -0.013101986,
      -0.0011438498,
      0.022364562,
      0.009577263,
      -0.009925928,
      0.023382688,
      0.020913841,
      -0.008864117,
      0.01064314,
      0.0030612058,
      0.02041113,
      0.007871602,
      0.0011775552,
      -0.004692738,
      -0.006888077,
      -0.007901209,
      0.017837351,
      -0.0025185803,
      -0.024971636,
      0.004069127,
      -0.00023686758,
      -0.024566041,
      -0.020784311,
      0.009999811,
      -0.014247174,
      -0.0042668893,
      0.012858183,
      -0.018630546,
      -0.030649852,
      -0.00045489485,
      0.014384351,
      -0.01908493,
      -0.012370604,
      0.0030905488,
      -0.004729325,
      0.0031237202,
      0.011847599,
      -0.008035432,
      0.0028483544,
      0.026631378,
      -0.029969152,
      0.008811752,
      0.0030590042,
      -0.0070268763,
      -0.013077669,
      -0.004305057,
      -0.008291421,
      0.014297099,
      -0.081112124,
      0.0032848376,
      -0.00646983,
      -0.03200247,
      -0.0077810083,
      -0.0004180536,
      -0.014259529,
      0.012643562,
      0.020064143,
      0.009163325,
      0.002897303,
      -0.020412559,
      0.0044112788,
      0.00025478174,
      -0.008752275,
      0.032380134,
      -0.015107778,
      -0.00053618755,
      0.02573974,
      -0.0065305005,
      -0.0018022852,
      -0.0059756716,
      -0.01057768,
      -0.021056019,
      0.006239977,
      -0.017954579,
      -0.028690003,
      0.014377177,
      0.030692754,
      0.008367615,
      0.019835616,
      0.036221463,
      -0.024965815,
      -0.009458741,
      -0.01468938,
      0.011657111,
      0.020226698,
      -0.0293597,
      0.017518744,
      -0.014128863,
      0.0015500536,
      -0.022325316,
      0.013185456,
      0.030913524,
      -0.0069491486,
      -0.014454337,
      0.017830443,
      -0.012013161,
      -0.028151104,
      0.0020286406,
      -0.01745932,
      0.002800089,
      0.027571563,
      -0.027798919,
      0.020721877,
      0.0110061625,
      0.009720692,
      -0.00060182414,
      0.021865781,
      0.017633893,
      0.0016644587,
      0.0064512044,
      0.0044422694,
      -0.017849995,
      0.015125563,
      -0.002793901,
      -0.0012829605,
      -0.017562438,
      0.022550248,
      -0.02720549,
      0.0061444333,
      -0.021927107,
      -0.012775995,
      -0.028049916,
      0.0039417883,
      0.0068831444,
      0.0035951452,
      -0.0029422764,
      -0.026789108,
      0.0070973863,
      0.00033455208,
      0.0007557,
      0.00058837986,
      0.033137314,
      0.028877713,
      -0.006173902,
      -0.0061957673,
      0.008739546,
      0.0062481156,
      -0.009638497,
      0.0141746625,
      0.02281595,
      -0.010925101,
      -0.0030618696,
      -0.01799617,
      0.01356509,
      -0.020045104,
      0.0056286007,
      0.003427283,
      0.0107622715,
      -0.027876865,
      0.00409026,
      0.0035372751,
      -0.0030235592,
      -0.0007876312,
      0.031567667,
      -0.0058755376,
      -0.0082391305,
      -0.0013419398,
      -0.014908601,
      0.008717458,
      0.013304445,
      -0.014155711,
      0.0058801193,
      -0.011390091,
      0.037855554,
      0.023244992,
      0.008425175,
      -0.017041799,
      -0.011034888,
      -0.0052844607,
      -0.006641617,
      -0.0010114529,
      -0.0036431132,
      -0.005428323,
      -0.0018748802,
      -0.026933555,
      0.008368794,
      -0.010404053,
      -0.007688719,
      -0.012720429,
      0.027054949,
      -0.013833341,
      -0.005684135,
      -0.0038635763,
      -0.009160813,
      0.0056922305,
      0.0005456427,
      0.019899076,
      0.01778324,
      -0.015672518,
      -0.0024709671,
      -0.008485959,
      -0.022288086,
      -0.005054553,
      0.0036206744,
      -0.025846448,
      0.005872475,
      0.0004481568,
      -0.016679099,
      -0.0029527596,
      0.0077107837,
      -0.007624521,
      0.0017442992,
      -0.0057206606,
      0.018331965,
      0.015205163,
      -0.005448788,
      -0.021625396,
      -0.016998682,
      -0.011273415,
      0.007337529,
      -0.010260204,
      -0.021562321,
      0.018331027,
      0.020623406,
      -0.007323435,
      -0.0007215258,
      -0.0045124153,
      0.004060831,
      -0.016188316,
      -0.01795089,
      -0.026858857,
      0.000104297804,
      0.0025921455,
      -0.005693963,
      0.017364489,
      -0.009799524,
      0.04487302,
      -0.006577503,
      -0.011828324,
      0.020965412,
      -0.014064785,
      0.016478792,
      0.00071510184,
      -0.009185845,
      0.016044004,
      -0.0029799007,
      -0.018917494,
      0.0031587533,
      -0.01065666,
      -0.016137563,
      -0.02153508,
      -0.004190159,
      0.02788066,
      0.020410929,
      0.031686753,
      0.0007499714,
      0.012215956,
      0.0022821287,
      -0.0034580494,
      -0.017344195,
      -0.0003370391,
      -0.018705208,
      0.026014538,
      0.008534692,
      0.015202961,
      -0.008114012,
      -0.0027336983,
      -0.00040281072,
      0.002953622,
      0.01222434,
      -0.008173196,
      0.0096244365,
      0.039914742,
      0.016891988,
      0.006376545,
      0.01130015,
      -0.02859094,
      0.005049941,
      0.013802488,
      -0.011556924,
      -0.01672012,
      -0.016883729,
      0.014032043,
      -0.011174912,
      -0.012654771,
      0.019734485,
      0.0039339103,
      -0.015043601,
      -0.0023103196,
      0.003385251,
      0.011779787,
      0.00043967774,
      -0.0075651538,
      -0.024051286,
      0.00010770366,
      -0.0025428506,
      -0.0022438057,
      0.013017888,
      -0.009979249,
      -0.005789227,
      -0.016949136,
      -0.01261211,
      0.0027788202,
      -0.012805051,
      0.032598417,
      0.0065451018,
      -0.014981873,
      0.0036397427,
      0.02407069,
      0.020451313,
      0.019807408,
      -0.005707428,
      -0.021239432,
      0.007905647,
      0.0051440443,
      0.014176394,
      -0.007031363,
      -0.018359305,
      -0.0056956257,
      -0.008678198,
      -0.018878186,
      0.0076857335,
      -0.0013682446,
      -0.02366593,
      0.0018234785,
      -0.0035585472,
      0.023994472,
      -0.13167599,
      -0.0119950585,
      -0.00810062,
      -0.02127666,
      0.0008878985,
      0.0028214199,
      0.011417291,
      -0.027289592,
      -0.021102495,
      -0.004929944,
      0.010044024,
      -0.0049497155,
      0.0035921535,
      0.0079582725,
      -0.0024984418,
      -0.0057670544,
      -0.0010341266,
      0.026736638,
      0.027049368,
      -0.020382574,
      0.025552042,
      0.003553582,
      -0.005639554,
      0.000651762,
      -0.008141721,
      0.018932814,
      0.028767755,
      -0.010499245,
      0.0020453823,
      -0.018319393,
      -0.031694613,
      -0.015688483,
      0.010008511,
      0.003647004,
      0.012759062,
      0.0013769348,
      -0.0039497167,
      0.023794105,
      0.01689535,
      0.008818816,
      0.008557923,
      0.010696851,
      0.01942937,
      0.0032134468,
      0.0033828486,
      0.0010441549,
      0.02267814,
      -0.01197348,
      0.0009720857,
      0.045985285,
      -0.053770963,
      -0.021515101,
      0.0029864253,
      -0.013884548,
      0.023210071,
      0.0024640805,
      0.004137306,
      0.0071409177,
      0.0070124418,
      -0.0021801977,
      -0.0166934,
      0.008615556,
      -0.010206511,
      0.0442481,
      -0.021437457,
      -0.015887072,
      0.017855778,
      -0.005110837,
      -0.009300881,
      0.010004563,
      -0.004532643,
      0.0030586421,
      -0.008718803,
      0.017397128,
      -0.00045585702,
      0.002355314,
      -0.0010072194,
      -0.0024144636,
      -0.0130612515,
      0.0064321053,
      -0.023076382,
      0.008321128,
      -0.06667467,
      0.0014970137,
      -0.009652608,
      0.010941896,
      0.0032531086,
      0.006263598,
      -0.007918914,
      0.026983464,
      0.00019340463,
      0.0015028189,
      -0.007881224,
      -0.015796611,
      -0.014460534,
      0.004539889,
      -0.034681402,
      0.016673902,
      0.010783911,
      -0.021776896,
      -0.02497766,
      0.0045725796,
      0.010622846,
      -0.0022914533,
      -0.00518552,
      -0.0037070154,
      0.004402812,
      0.004630808,
      -0.02374339,
      0.015240671,
      -0.016040793,
      0.012846076,
      -0.006991343,
      -0.1272899,
      -0.026702272,
      0.011520019,
      0.005852134,
      0.01169379,
      0.010294246,
      0.00006116265,
      -0.015409672,
      0.0066311085,
      -0.0221805,
      0.0064411177,
      -0.03300339,
      -0.0054376866,
      0.009238225,
      -0.0039053184,
      0.15144564,
      0.0038408616,
      -0.0058085434,
      -0.011062982,
      0.0004787309,
      -0.015624618,
      -0.0028996351,
      0.0050852234,
      0.0076956553,
      0.0075057666,
      -0.017702142,
      0.029634958,
      -0.026873313,
      0.020602642,
      0.00903761,
      0.006531175,
      -0.012724584,
      -0.0046924963,
      0.024740644,
      0.00646506,
      -0.015179333,
      0.005121745,
      -0.024646752,
      -0.016742684,
      -0.0064891046,
      0.0017487771,
      0.015230742,
      -0.0075862575,
      0.006513717,
      -0.007420723,
      0.0046105525,
      0.0008063068,
      0.0032965175,
      -0.019525131,
      -0.025072508,
      -0.00014406737,
      -0.06041027,
      0.010619645,
      -0.0030167927,
      -0.026664045,
      0.032110877,
      0.0032621343,
      0.026725115,
      -0.015769888,
      0.010893412,
      -0.0013469536,
      0.0076185362,
      0.01758725,
      0.002409621,
      0.010048642,
      0.0041747596,
      0.014207673,
      0.028811757,
      0.0052041933,
      -0.009886926,
      -0.008925383,
      0.0172738,
      0.0035303517,
      -0.025216732,
      -0.026390001,
      -0.028323013,
      -0.006866196,
      0.015984429,
      0.008066027,
      -0.011369855,
      0.0073926724,
      0.0147948805,
      -0.010414088,
      -0.019962331,
      0.014958645,
      -0.0035682158,
      -0.013392552,
      0.02039723,
      -0.010208534,
      -0.01571608,
      0.0031032856,
      0.008764097,
      -0.005611213,
      0.036879815,
      -0.008248161,
      0.019435523,
      0.01593828,
      0.018569669,
      0.0151686,
      -0.0018732189,
      0.0009850881,
      -0.00570392,
      0.004344507,
      -0.018311376,
      0.022488536,
      0.029567607,
      0.0149290385,
      0.008795035,
      -0.0077960566,
      -0.01428945
    ]
  },
  {
    "id": "genai_cohort_nodejs_18_node_express_2_vtt",
    "content": "Okay, so in this particular video, let's get our hands dirty with Express js. Okay? So what I'm going to do is I'm going to CD into my coding folder and into the node js folder. And here I'm going to create a new directory that is express, right? So we are going to start with Express. Let's go into this Express folder and I'll just do a code dot and now, because you're becoming a backend developer, these terminal commands you should know, okay? Because usually we do remote configurations on a server. So. So it's very important to understand these commands as well. So don't worry, these are not very difficult as you work on them, you will understand them. So guys, this is my empty folder. You can see that. So first things first, you have to do npm init, you can do hyphen y. So let's just do npm in it. Okay? So you have a package name. Let's call it as Express Application. So Express app, version one, description, entry point, test, command, git, repository, all that stuff. Cool. Now we have to install Express, okay, And the types. So first npm install at the rate types/ node so that I get the typings number one. Second is you have to install express. So npm I express. So what this does, okay, this will basically download the Express module, the Express package for you. Now if you go into Your package or JSON, boom, you are using Express and you are using at the rate type node that is in this version. So now you are using two dependencies and you can see all the code is here. Now piyush, we just installed two libraries. How come these many libraries are coming? Like accepts is coming, array, flatten, body, parser, and a lot of things are coming. That's because if you go into our package JSON and you search for express here, the Express, the, the module express actually depends on a lot of things, right? Can you see that? The Express module itself depends on all these things internally. So all these code is also pulled. So you can see accepts is there, arrow flatten is there. So this all is coming from the Express library. So now you have your Express ready. Now you have your types are there node ready. So let me just create an index js file where we are going to code, right? So what I have to do is first of all let's import, let's require the express, okay, let's require the Express. So you can see Express is here. Now what I have to do is I have to create an application. Okay, so this is coming all from the documentation. So const app is equals to express. So let's create an app. So app is equals to express. So this basically creates an application for me. So this app and using this app I can structure my server. Okay, so for example, let's say I want to create a get route. So I can just say app. uh get. Now see guys, do you see that I'm not getting the typings for this express package. I am not getting any kind of suggestion. So that means you have to install at the rate types for the express now. Okay, so you have to install the types for this. So this will help the VS code to see that what are the typings available? So yeah, you it's installed now you can see app get is there. So you can see all the modules are now here. Okay, so let's say that I want that. Hey, if there is a get request on what path? On slash. That means the homepage. Then you can have a function here, right? That is a request, a response. And then you can just say response dot end. Okay, response dot end saying that you know you are at a homepage. So you can just say home page. Then if there is a get request on slash contact us. Then what you can do is you can just write a function that is request and response and you can just say response dot end. Okay, response dot end Saying you can contact contact me at my email address. Okay, so this part is also good. Then you can just say app dot let's say post. Okay, app dot post. You want to make a post out, go ahead. Slash tweets. Okay, so what you can do, you can just say hey, here is a function. You can even give an arrow function. That is what we are going to use majorly. So request response and you can just say response. uh end and you can say tweet created. Okay, tweet created. Success. Now you want to set a status code, right? By default Express is always going to send a but you can change that functionality by doing dot status and you can pass a status code of So now this particular line is going to send a By default it is status quo. But now it is going to send two zero one. And finally let's just do an app dot listen on some port. Let's say I want to listen on port and A. Callback function saying console. log that your server is running on port 8000, right? So yeah, that, that's amazing, right? So with this Express, can you see that how clean the application is, how I, I can define the routes. So I can say, hey, post route for this. Similarly you can just say I, have dot get so slash tweets so I can just make a slash tweets. And then there is this particular stuff and you have request, you have response. So you can just copy. I'll just copy this line and I can say that here are your tweets, here are your tweets. So how well I am able to structure my code, right? Everything is modular. So if even I hire more developers, they can go on adding their routes. So this, this is one block, this is one block, this is one block, this is one block. So this framework is providing you a structure on how you can structure your code, right? So let me just configure a start script. So here we can configure a start script and this start script is going to be node hyphen, hyphen Var and I can just say index js so npm Start enter. Your server is running. Let's give it a try. So you have the Thunder client here. So if I make a post request, I'm getting a because there is no post request, right? There is no post request for contact us. It's actually a get request. So yeah, it's working good. Similarly, if I go here and I do a send homepage is also working. If I do let's say slash tweets, slash tweets and send. You can see here I have tweets, so everything is working fine. But the only difference is that this particular piece of code is now well structured and managed by Express. Okay? So you can do all this stuff like request headers, request single header, request raw headers. So it internally does a lot of things and gives you all these things, right? Request cookies. Is there request accepts, is there accepted is here. So you can see that you have a lot of things on the request also. Similarly, you can just say response. end to send a simple response response JSON to send a JSON response response. x response What else you have response. render is there. Then if you want to do a server side rendering, so don't worry, we will talk about these all things. But Express not only gives you a structure, but also gives you a lot of capabilities, plugins and you know, a lot of batteries. So cool stuff. Right? So now I think you are able to understand this code. So just try to understand this code. Are you able to understand what we are doing? So we are requiring the express, creating an express. So they have extracted this port as a 3, as a variable. So they're trying to listen on this port and console log example app is listening on this port. And you have a get route that is the slash root and response send just in hello world. So amazing. Now if you see, if you see in the guideline, you have a lot of features, right? You have routing middleware, you have overriding express APIs, templating, engine error handling, debugging express behind proxies. So all these things we are going to cover in the upcoming videos.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "18-node-express-2.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/18-node-express-2.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.004750098,
      0.014031638,
      0.02577703,
      -0.052365202,
      -0.01818402,
      0.0046182293,
      0.017049868,
      0.016953105,
      0.006091437,
      0.00521558,
      -0.022047969,
      -0.0075288783,
      0.020089058,
      0.031885695,
      0.14399664,
      0.0074858298,
      0.01743946,
      0.016928717,
      0.0017549214,
      -0.039481256,
      0.006658216,
      0.0054043434,
      0.004933657,
      0.014246746,
      -0.009130877,
      0.0010999377,
      0.005024363,
      -0.013999556,
      0.013339072,
      -0.021228803,
      0.00058783655,
      -0.013810035,
      0.0062825973,
      0.010999936,
      0.007926523,
      0.020973906,
      0.024576504,
      0.003262025,
      -0.026100216,
      -0.0067106984,
      -0.013258824,
      0.000018516259,
      -0.009306401,
      -0.009107516,
      0.020698031,
      0.0002119107,
      0.006318338,
      -0.01223714,
      0.0010801574,
      0.018332906,
      -0.024208145,
      -0.012616707,
      -0.019016631,
      -0.1725872,
      -0.034739792,
      0.0086741205,
      0.0050563444,
      0.00811614,
      0.016856216,
      0.012026625,
      -0.016915565,
      0.003272262,
      -0.043312464,
      0.011827967,
      -0.023972929,
      -0.0064913114,
      0.0054775965,
      -0.012725862,
      0.031073222,
      0.0019107611,
      0.0128231235,
      0.024525039,
      -0.010078721,
      -0.015786426,
      -0.026871027,
      0.006829681,
      0.019791564,
      0.0019647891,
      -0.013195773,
      0.014334335,
      0.017080644,
      -0.009875139,
      -0.01577329,
      -0.0058803004,
      -0.010814697,
      -0.013238687,
      -0.028885806,
      -0.01397951,
      -0.0147560965,
      0.0152039975,
      0.0004039478,
      0.025017176,
      -0.0066276956,
      0.0075090304,
      -0.0064463364,
      -0.0023300052,
      0.0070417197,
      0.009831121,
      -0.008140875,
      -0.01324717,
      0.022150338,
      0.007235662,
      -0.024288595,
      0.012243743,
      0.0013078335,
      0.032320436,
      0.0047494494,
      -0.004156945,
      0.0051603825,
      -0.015931586,
      -0.0024458568,
      -0.015119283,
      0.0056300364,
      0.012502574,
      -0.0005386968,
      -0.18669398,
      0.025850529,
      -0.017554643,
      0.003291966,
      -0.0038769182,
      -0.015730243,
      0.0007908637,
      0.007806134,
      0.0000805301,
      -0.00773251,
      0.011662899,
      -0.008450738,
      0.03972116,
      0.016522517,
      0.017409666,
      -0.0094321435,
      -0.013821489,
      0.0050073853,
      0.021967174,
      0.013681476,
      0.0107955085,
      0.009763879,
      0.00021209924,
      -0.009260978,
      -0.026907904,
      0.01056965,
      0.029957851,
      0.0066163465,
      0.033155683,
      0.011848184,
      -0.002243308,
      -0.012678829,
      0.030363481,
      -0.01743172,
      -0.019530132,
      0.015350273,
      -0.027696857,
      0.009759934,
      -0.005306616,
      0.023401238,
      -0.02523244,
      -0.0028929703,
      0.00071030634,
      0.012130093,
      -0.006390721,
      -0.006417577,
      0.007528064,
      -0.0021029303,
      0.018336594,
      0.012325043,
      -0.012903152,
      -0.02867923,
      0.0028533903,
      0.0130536,
      -0.003983206,
      -0.009176772,
      0.005582507,
      0.013477191,
      0.00569411,
      -0.020053633,
      -0.013552628,
      -0.0028160159,
      0.012382286,
      -0.0060892464,
      -0.021127172,
      -0.0037521694,
      -0.011374283,
      0.00809997,
      0.0062814215,
      0.01944089,
      -0.0018785046,
      -0.029506713,
      0.008397952,
      0.00413731,
      -0.011294604,
      0.0066088988,
      -0.0075295498,
      0.00247464,
      -0.006515687,
      0.024236726,
      -0.011849729,
      -0.005664876,
      0.002203828,
      0.019168617,
      0.010429209,
      0.025129182,
      -0.0057148826,
      -0.00572133,
      -0.020860128,
      0.0103468625,
      0.018363768,
      0.009194281,
      -0.0282148,
      0.0072665806,
      0.010679812,
      -0.031208672,
      -0.012720922,
      -0.0047492217,
      -0.008845345,
      0.003196677,
      -0.013412498,
      0.02648079,
      0.0077418704,
      -0.0019763338,
      -0.011329593,
      0.0016261287,
      -0.007616589,
      0.014834609,
      0.04290165,
      0.004822172,
      0.012450148,
      0.012742771,
      -0.00428067,
      -0.008979577,
      0.0027714719,
      0.017497206,
      0.0025983728,
      0.0004866368,
      0.01329513,
      0.033460405,
      -0.0048133084,
      0.0075945198,
      -0.0028496634,
      0.010355532,
      -0.0044934438,
      0.0030338964,
      -0.0133299325,
      -0.008091512,
      0.0035705497,
      0.036979154,
      0.01638538,
      -0.039929736,
      0.0014022262,
      -0.0081525175,
      -0.019539174,
      -0.025244936,
      -0.004472153,
      -0.022018064,
      -0.0011347691,
      -0.006494384,
      -0.013487683,
      -0.01705714,
      -0.0031364083,
      0.01836498,
      -0.018729623,
      -0.013252323,
      -0.010243419,
      -0.0026847485,
      -0.00626581,
      0.0041262493,
      -0.0076775644,
      0.0040773787,
      0.023358736,
      -0.027850434,
      0.010410365,
      0.005031688,
      0.0021971657,
      -0.0044038882,
      -0.013279565,
      -0.010982399,
      0.0070850467,
      -0.0859795,
      -0.004412313,
      0.0075628753,
      -0.030765314,
      -0.017866664,
      0.017439973,
      -0.009178898,
      0.0172514,
      0.02309182,
      0.008474848,
      -0.002402954,
      -0.007677651,
      0.021324528,
      -0.0053577055,
      -0.009346597,
      0.028354658,
      -0.016292423,
      -0.0024423718,
      0.015065945,
      -0.023133336,
      -0.008555168,
      -0.00056068745,
      -0.0046265377,
      -0.017838778,
      0.02294799,
      -0.008599143,
      -0.03370838,
      0.0151174925,
      0.022522107,
      -0.0015398152,
      0.011673028,
      0.026000233,
      -0.006867043,
      -0.009531585,
      -0.013148687,
      0.009061216,
      0.03641576,
      -0.020471344,
      0.017569656,
      -0.02199733,
      0.007603,
      -0.0060827243,
      0.010769135,
      0.010946262,
      -0.006339114,
      -0.008380491,
      0.010413571,
      -0.018870752,
      -0.020405535,
      0.012661512,
      -0.010865798,
      0.0043007424,
      0.021227757,
      -0.04426577,
      0.014458568,
      -0.0067918072,
      0.017475707,
      0.0054570795,
      0.030305086,
      0.008971546,
      -0.009738365,
      -0.008169696,
      0.011577652,
      -0.009028361,
      0.012974194,
      0.008762296,
      -0.0131428,
      -0.013130042,
      0.0031571651,
      -0.027015232,
      0.0106636295,
      -0.024407458,
      -0.017758047,
      -0.03170223,
      -0.0031623025,
      -0.002446528,
      0.014133298,
      0.00072209415,
      -0.032752633,
      0.004277623,
      0.0027526969,
      0.0064162384,
      0.014699369,
      0.023851471,
      0.009849864,
      -0.0016149129,
      -0.0044936375,
      0.0010082056,
      0.00845202,
      -0.0030943896,
      0.010114706,
      0.028829077,
      -0.017484523,
      -0.011612698,
      -0.013126858,
      0.014221669,
      -0.011660798,
      -0.0005049252,
      -0.015310363,
      0.01889582,
      -0.03545781,
      0.0037677863,
      0.0019696925,
      -0.00081237743,
      0.005109949,
      0.032112844,
      0.0101630315,
      -0.0006030987,
      0.00049976015,
      -0.018394742,
      0.0027782582,
      0.008021406,
      -0.004267798,
      0.0053525884,
      -0.017692031,
      0.022337789,
      0.019356394,
      0.017096274,
      -0.009563546,
      -0.020321246,
      -0.01663489,
      -0.0026086902,
      0.0007577241,
      0.0015205399,
      -0.007038569,
      0.00049521023,
      -0.015881483,
      0.01010601,
      -0.0032787898,
      -0.008767373,
      -0.010737541,
      0.013233648,
      -0.017285967,
      -0.0122707365,
      -0.018083904,
      -0.013791011,
      0.01112746,
      0.012994765,
      0.0048946426,
      0.015940992,
      -0.020782975,
      0.00037258278,
      -0.0055733672,
      -0.011835053,
      -0.015220298,
      0.010032907,
      -0.0266704,
      0.009252329,
      0.014489498,
      -0.006950995,
      -0.0022290892,
      -0.0041548545,
      -0.01263618,
      -0.00577188,
      0.008326941,
      0.006594072,
      0.01741051,
      0.0075471606,
      -0.027530655,
      -0.018445129,
      -0.015437548,
      0.026367854,
      -0.006258472,
      -0.012748311,
      0.0035441131,
      0.029307716,
      -0.007372268,
      0.0021857023,
      -0.003778886,
      0.005339587,
      -0.007488805,
      -0.015810395,
      -0.022535812,
      0.009216145,
      0.0037954124,
      -0.0043485123,
      0.018516079,
      -0.0074867257,
      0.033099126,
      -0.00001580585,
      -0.0074055633,
      0.0068512755,
      -0.015415189,
      0.009964708,
      -0.0051461104,
      -0.011717989,
      0.0045606974,
      -0.0074695614,
      -0.010018139,
      0.012934557,
      0.008589785,
      -0.010314254,
      -0.020134488,
      0.004741773,
      0.018242966,
      0.020087289,
      0.031739883,
      0.0025539303,
      0.0034173487,
      -0.002506609,
      0.0027476712,
      -0.018598942,
      0.0059992466,
      -0.013730481,
      0.033138927,
      0.009741204,
      -0.0042631575,
      0.0029700312,
      -0.0026396727,
      0.0032166657,
      0.0010070937,
      0.009564837,
      0.0038172412,
      0.006957629,
      0.029146736,
      0.0040732785,
      -0.013322375,
      0.032620024,
      -0.037091997,
      0.0035111709,
      0.013613536,
      -0.009232391,
      -0.01892017,
      -0.016635712,
      0.006197963,
      -0.012027028,
      -0.016715419,
      0.011149054,
      -0.000027143291,
      -0.017087003,
      0.007719034,
      -0.017820615,
      0.022336325,
      0.009656542,
      -0.0069631035,
      -0.013011459,
      0.01123007,
      -0.026122078,
      0.006328969,
      0.005417195,
      -0.0102664465,
      -0.022301115,
      -0.009335943,
      -0.0039235493,
      0.011065941,
      -0.011869352,
      0.024373904,
      0.011409068,
      -0.010153658,
      0.012198685,
      0.024509953,
      0.016286436,
      0.019986205,
      -0.013636931,
      -0.022751307,
      0.01738724,
      -0.0016486301,
      0.018139476,
      -0.0055537676,
      -0.012148361,
      0.0014105242,
      -0.0047153337,
      -0.012036599,
      0.011998549,
      0.0029491554,
      -0.027341671,
      -0.0095293345,
      0.0049028643,
      0.015690979,
      -0.117096156,
      -0.008697376,
      -0.006819278,
      -0.013394991,
      0.0056424206,
      -0.014241002,
      0.012265778,
      -0.020100344,
      -0.017564515,
      -0.015219349,
      0.0064887074,
      -0.0004289564,
      -0.0025501214,
      0.023952002,
      0.004500672,
      -0.0039600627,
      -0.002677739,
      0.038082078,
      0.041057926,
      -0.0061081722,
      0.0009275543,
      0.007241828,
      0.0059542344,
      -0.0000406502,
      -0.023158412,
      0.011608592,
      0.024595281,
      -0.011489155,
      -0.0020430596,
      0.0033991197,
      -0.02207728,
      -0.015576007,
      -0.004355736,
      0.0010644005,
      0.021151777,
      0.010921919,
      -0.010266701,
      0.00776525,
      0.008945244,
      -0.0045832987,
      0.013190687,
      0.023056012,
      0.02235159,
      0.016491659,
      0.0060203425,
      0.018579597,
      0.020119542,
      -0.013977631,
      0.0027594154,
      0.048550986,
      -0.04545814,
      -0.03172546,
      -0.0012918552,
      -0.014226223,
      0.02152607,
      0.014163546,
      0.014166866,
      0.01554311,
      0.002717438,
      -0.011800861,
      -0.011282036,
      0.015387914,
      -0.012205844,
      0.042549822,
      -0.0072644996,
      0.0030031092,
      0.01699788,
      -0.015654745,
      -0.002375363,
      -0.00057728816,
      0.010212714,
      -0.012165764,
      0.001681867,
      0.0126559725,
      0.012677028,
      0.012932748,
      -0.00024527597,
      0.007113695,
      0.0055625797,
      0.005770989,
      -0.028358959,
      0.010015436,
      -0.052266985,
      -0.004664588,
      -0.011500869,
      0.011174169,
      0.007910555,
      0.011351141,
      -0.017655402,
      0.025450401,
      -0.011867746,
      0.009273831,
      -0.01995905,
      -0.020261709,
      0.0010634193,
      -0.0061909435,
      -0.036349837,
      0.011016677,
      0.0032432287,
      -0.03220807,
      -0.017202884,
      -0.0003625381,
      -0.0027474759,
      -0.006955432,
      -0.0033677006,
      -0.011857962,
      0.0070413863,
      0.031313103,
      -0.020899191,
      0.016059091,
      -0.025408316,
      -0.0034049572,
      0.0040574255,
      -0.13832395,
      -0.023934608,
      0.011107299,
      0.007885444,
      0.0019610492,
      0.0039649173,
      -0.0095277205,
      -0.0049907584,
      -0.002522066,
      -0.026215045,
      0.0013252918,
      -0.044117726,
      -0.025112525,
      0.008873653,
      -0.005740463,
      0.1385849,
      0.0031224857,
      -0.0005473663,
      0.005009473,
      0.008219225,
      -0.029393978,
      0.007100495,
      0.008400203,
      -0.007458201,
      0.00024016388,
      -0.015452023,
      0.012428948,
      -0.027429761,
      0.016349142,
      0.0054921396,
      0.01089058,
      -0.017590873,
      -0.010701566,
      0.038256843,
      0.004893472,
      -0.015199464,
      -0.0043953485,
      -0.03312381,
      -0.0101641985,
      -0.004527531,
      0.011834851,
      0.010051886,
      -0.016539002,
      0.014391031,
      0.0008258132,
      0.0055165556,
      0.0056620897,
      0.0003755251,
      -0.0037704413,
      -0.02874902,
      0.009985336,
      -0.052420795,
      0.009089052,
      -0.010321582,
      -0.024225406,
      0.032354113,
      0.008176697,
      0.014396916,
      -0.0014939349,
      0.0022551422,
      0.004802,
      -0.002612695,
      0.028578859,
      -0.0066990405,
      0.00812113,
      -0.0029882132,
      0.020191066,
      0.027635802,
      0.020922652,
      -0.017257972,
      -0.00071391027,
      0.008566642,
      -0.013414304,
      -0.0050971666,
      -0.025173778,
      -0.024704853,
      0.011503955,
      0.022424774,
      0.0013482795,
      -0.013358636,
      -0.00011844242,
      0.01463187,
      -0.0093755005,
      -0.022937214,
      0.017955052,
      -0.01177657,
      -0.021540457,
      0.018063199,
      -0.0030005889,
      -0.0118277045,
      -0.004163939,
      -0.013356366,
      -0.012872453,
      0.027907224,
      -0.017217597,
      0.013156906,
      0.011071212,
      0.01672973,
      0.02902627,
      -0.009113093,
      -0.0021495707,
      -0.012553156,
      0.0018192179,
      -0.018169384,
      0.007707004,
      0.032484498,
      0.011814357,
      0.022871705,
      -0.013515664,
      -0.014292475
    ]
  },
  {
    "id": "genai_cohort_nodejs_19_node_express_sem_ver_1_vtt",
    "content": "Okay, so great work guys. That we know now know Express. We have covered a lot of things in Node js. We know how to install external dependencies. We know how to use external dependencies. We know that how we can use a so called npm, so called node js. We know how to use HTTP module and how to build servers. Now I would like to take a moment and explain you something very interesting going on in this file, okay? In this particular file that is our package or JSON file. Do you see that we have this version thing here that is like And do you see this dependencies here that we have three dependencies right now, 1, and And there is this weird looking numbers. These, these numbers are here right in this particular video. Let's understand what these numbers mean. Like what is this symbol here, why it is five, why it is three digits only. So let's understand that how versioning happens in case of node js. Okay, so node js, or I should say npm follows something known as semantic versioning or also known as Sembur. Okay, Semantic versioning. So there are some rules of semantic versioning that how you give these versions, like why my version is 0, why this express is versioned as 2, 1, what does this mean, what does this Tmean and what this one means? That is what we have to understand. Okay? Now semantic versioning has three parts, okay? So let's say you have some number here, then you have a point. Okay? So just once again, I don't want you to add a point. Then there is some point. Then let's say you again have some X, then you have some point and then you again have a number. So semantic versioning is built using three numbers. First number, second, second number, third number, also known as bits. Okay, so these are also known as bits. The first bit always and always tells you that this is the, this is the major version. Okay? So this refers to as the major version. So this is your major version, okay? And second one is known as the minor version. So this second bit is represented minor. And this is known as the patch version. So these are the three things that these bits are representing. So if I copy this line that is your express js this particular thing as of now, just forget this, this carrot symbol. So this says that, hey, for in case of express at the recording of this video, the major version is four, right? The minor version that we have is And the patch version right now that we have is function. So this is what this particular thing interprets you. Okay, so this part is understood that how this versioning is done and not only node, even languages, like Rust, okay, so they have cargo. They also use some word. So this is a very common thing to follow in case of versioning. Now let me explain you that how these bits are actually. What, what is the meaning of these bits? Like what is this patch? What is this miner? What is this major. Okay guys, let's say you are building an application. You are building some tool, okay? Some tool for developers. Now what you have done is this tool you have built and you have published it to the developers. And today around 100k devs are using your product. Are using your product. Right? Right. Do you think that if you make some change in your code, these hundred devs which are like working with your code, they can have some crashes? It might be right. Let's say I have, I have written this express application, right? And today express application says, hey, what you have to do is you have to say app, dot get and like this and like this. So this will work. What if tomorrow some update comes and this get function is removed? The get function is removed from the application. So what will happen? My application will crash if I try to update my application, There is no get application, right? There is no get function in the express in the future version. So, so my, this particular blog, this particular block, everything will start to crash. My server will start to crash, which is not a good thing, right? Because this is a breaking thing. So how this versioning helps this particular conflicting. Okay, so there are three scenarios. Okay, there are three scenarios. First, let's say the update was very simple. Let's say some minor bug fix. Okay, There was some minor, minor, bug fix. Okay, Very, very simple bug fix was there. So some bug fix is there, but which is not important. Okay, which is kind of not important. So it's kind of an optional thing. So that, hey, there was a small bug, which we have fixed, but it's optional. I mean it's good if you update. It's fine if you don't even update. But yeah, there was a simple fix that I have done. When you do this kind of a change, which is a very simple, minor, optional change, in that case you should always increment your patch version. So if right now you are on 1, let's say if Express js application is adding some optional, okay, some optional update, in that case, what should do? It should update this one to two okay, so that means guys, you are safe to add. You are safe to update this. Okay. There is no new feature when this bit is updating, right? When this particular bit is getting updated, it tells the developer that it's a minor fix, there might be some kind of small update, but there is no new feature, there is nothing going to break. So the things that are working on 2, will continue to work on this. Will continue to work on this, will also continue to work on this. There is nothing breaking there. Your code will never get break. But yeah, there is something. So this is where you basically update your patch version. So you get it. What is a patch version? So let me just give you definition as well. So patch. Okay, so the official definition for the patch version. Oh, it's too big. Let me just expand. Not expand it like this. I won't expand it like this. Yeah. So what does the patch says incremented for the backward compatible bug fixes? So backward compatible is the important word here, that everything is backward compatible. Nothing is going to break these updates address issue without adding new functionality or breaking anything. So that means if the patch version is increasing, there is no new functionality, there is no breaking change. Some bug fixes are there. For instance 1, to signals a bug fix that doesn't affect the compatibility. So this is what is meant by your patch version. Patch is the right most bit. That means this bit. Okay, this one. So you are now done with the patch one. Now let's see what is the minor one. Okay, minor. So in case of minor, what happens? It basically means that there is a new, new functionality. Okay, so so you have added, so I should say added a new feature. Okay, but, but back. But the old features will continue to work. Okay, but old will also work. So old will also work. So that means It's a not breaking key. So it will not break anything. So first thing is that there is a new feature, okay? There is a new feature and nothing will break. Nothing will break. That means nothing is removed, right? So this is where if you have an update of this kind, this is where you update your, you update your minor version. Okay? So if the minor version is getting updated. So as a developer I know there is some new functionality which I can see in the documentation, but my code will continue to work. So that means in this particular scenario the last bit, let's say one, so it can be like 21, 22, 23, 24, 25, 26, So let's say if right now this is the version, so what? And let's say this was incrementing like this. Now what team will do, they added a new functionality. They will set it to and they will move it back to That means now you are on Then if there is a bug fix in version 22, they will continue to update this. Then what they will do is, oh, there is a new functionality that we have to add. So they will there and move it back to zero. Now any bug fixes in this, will be done like this. Oh, there is a new feature. Let's make it And then we will continue to do a bug fix in this particular version. So this is the minor version and this updates when there is a new functionality. Okay, so let me give you the definition for this as well so that you can read and understand it better. So minor version incremented when functionality is added, right? The functionality is added. So here this is the important line and is backward compatible. And even the functionality is added, the previous functionality will never break. This means the existing code should continue to work, but new features are available. For example, to suggests that there is a new feature are introduced without breaking the compatibility. So that means, yeah, you are, you are okay to update this one also, right? But just in case you need that feature, it will also increase the packet size. So yeah, you have to, you have to keep that in mind because of course new features are coming in now. Let's see the major one. Okay, major. Major is the breaking change. That means, you know, we have revamped everything. We have rewritten everything, we have removed a lot of things, we have added a lot of things. We have changed the WHO architecture. So this is a breaking change. Okay, that is where you update your major version. So major version you cannot update in your code just like that. If you have to update your major version, you have to do a lot of code changes. Your code will start to break. So you have to do a lot of coding changes. And it is not easier to update a, existing code base to a major change. Okay, so major change is basically like, hey, There is a 0, there is a point, there is a 0, there is A So this is a major change. The, the leftmost bit. Okay, so let me give you the definition for the major as well. So what does this major bit look like? Okay, so major says incremented when there are incompatible API changes, okay? That means you are removing some functionality, you are adding some functionality. That is where you say breaking change. So these changes may break existing functionality or require modifications in the dependent code. For example, to indicates that there is a significant change that may require users to update the code. So yeah, this, this is the breaking change. So this is how the versioning is happening. Now you understand the semantic versioning. December. Now piyush, this is fine. What is this carrot symbol going on here, right? What is this carrot symbol? What is the symbol going on here? Now these are very simple actually. So there are multiple ways to write this thing. Okay, Number one, if I just write it like this, this tells the express that whenever I do npm install, whenever I do npm install, always and always install express at this version. Correct? This is what this is telling. But guys, let's say, you know, I just want that every time there is a bug fix, you, you know what is a bug fix, right? Every time there is a minor change, there is a patch change, there's a bug fix. I don't want to keep a track because in reality you will have like thousands, not thousands, actually, I should say dependencies. Let's say you have total dependencies. Of course you don't want to keep a track going on their website that they have fixed something on. Like you want that at least? I want that this last bit, which is the patch one should automatically update, right? You want that, right? So for this, what you can do is you can just add a tilde symbol. So when you add this symbol, tilde, this basically says that, hey, even if you're specifying 1, if in future the version is available, I will install If in future the version is available, I will install that. So that means if you copy this line and I just paste it here. So this tilde basically says that till in case of, Till it says from, okay, version all the way. All the way to like 21x. That means x can be anything. It will basically update it. Okay, so till they will freeze these two bits. So these two bits are frozen in case of tilde, the last bit will keep on updating. If there is any update from the author, then you do a carrot symbol. That is this. Sorry, where is the caret symbol? It's on the six. When you do this carrot symbol, the caret symbol means that do not update the major version. Never ever update the Major version. Feel free to tweak these two bits. Okay, so when you say this one, let me just copy this version. This is the carrot symbol. Carrot symbol basically says that from all the way to less than Okay, so this is not included. So you have to include this. So that means all the versions. So this bit is also there. This bit is also there. Only the four will be static. That means only the first bit is frozen. So this anything that is less than. Okay, less than five point. This is not included. I'll make it red. So you can. Sorry, not the whole thing. So this particular part is red in color. So will not be updated. All the features like 1, to 30, point something, something. All the Minor and patch versions of will be updated, but major version will never be changed. Okay, Major version will always remain Because updating the major version automatically is a very risky thing. Because it will. It will break that. Is that what it means? Right? So this is how your carrot symbol says. So this carrot symbol says, hey, keep on updating these two bits. Do not touch the four. This says, hey, keep on updating these two fields. Do not touch This carrot means, hey, keep on updating these 2, but do not touch it. And do you know from where it fetches it? Whenever you do, like npm install, the package name, it basically goes to a website that is npmjs. com official website. Okay, so this is where all the packages are hosted. So if I go on to Express, right? So this is the documentation for Express, like on the npm. So you can install it using npm install Express. So when you do npm install Express, this is where the code lives. Can you see? This is where the Express code lives. This is from where the actual code is pulled from the Internet. And you can see that there are dependencies that this express requires these packages to be installed. And these are dev dependencies. And how many people are dependent upon express that are, 8, 6, 7, 4, So express internally requires these dependencies. And these all packages are dependent upon Express. I mean, that's a huge number. And these are all the versions. So you can see that is the latest version. So that is why we have And then there is a next version that is Now why this is 5? Why this is 5? Because there might be some breaking changes. So you can see that this is how the version history is going, right? There is a lot of things going on years ago. And do you know when does this started? The 5, the Alpha and even if I go down Alpha and, and, and here is also it started developing eight years ago. I mean is also there. Yeah, it started developing nine years ago. So which is finally, I think it will be out there. So how to update to 5? If you go to Express and you click here, you can see they are saying hey, express documentation is available and if I click on the API documentation, so there is something known as guide moving to Express So this means this will guide you that what all things we have removed. So app. delete app. param app. Request param request JSON JSON p these all things are removed and these all things are changed. For example app Router has changed, request body has changed. So these are few things that have changed. So you have to follow this guide and you know you have to update your existing code just in case. Just in case you are doing it. Okay, so yeah, so you have to read all this. That what all things are going to break in Express TS So but we are not going to use any feature that is going to break in Express or So yeah, that's fine. Okay, so you can read this guide and that's how this versioning basically works. So feel free to revisit this video. Feel free to have a screenshot. Okay so guys, what you can do is you can have a screenshot of this thing and keep on reading it so that you know what how SEMWER or semantic versioning works.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "19-node-express-sem-ver_1.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/19-node-express-sem-ver_1.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0034108658,
      0.010412665,
      0.011955892,
      -0.044616956,
      0.0006330169,
      0.02240362,
      0.029311614,
      0.021490948,
      -0.0013690945,
      -0.010882229,
      0.009227429,
      0.006802732,
      0.008876092,
      0.019872056,
      0.12358791,
      0.01936131,
      -0.015537847,
      -0.0037943227,
      0.0006201443,
      -0.0037588319,
      0.006783282,
      -0.005675565,
      0.0037771785,
      -0.0045920825,
      -0.0020684532,
      0.010600936,
      0.017604196,
      -0.010910063,
      0.016189244,
      -0.032207295,
      -0.0067184702,
      0.0013860345,
      0.022281539,
      0.012217784,
      0.005105886,
      0.02519699,
      0.016147837,
      0.025426589,
      -0.013134565,
      -0.0019198982,
      -0.021686109,
      0.027204122,
      0.016419997,
      -0.023350671,
      0.013953634,
      -0.0054769726,
      -0.01672392,
      -0.007153431,
      -0.0008902023,
      0.008081799,
      -0.0098901,
      -0.016629683,
      -0.0066286568,
      -0.16800855,
      0.0037595322,
      -0.013393616,
      0.0013573788,
      -0.0080477,
      0.015062463,
      0.00921071,
      -0.030999364,
      -0.014004717,
      -0.03421251,
      0.0032278914,
      -0.013345534,
      0.011671692,
      0.022850655,
      0.009015071,
      0.009412752,
      -0.0128692575,
      0.016264802,
      0.0019332743,
      -0.027057672,
      -0.014475188,
      -0.029179728,
      -0.0025738038,
      0.006497233,
      -0.019912073,
      -0.01767357,
      0.01891411,
      0.009437362,
      -0.00017828339,
      0.0037787454,
      -0.0039832136,
      0.00047744883,
      -0.0020442405,
      -0.03722835,
      -0.007579506,
      -0.024781924,
      0.015496003,
      0.00012857563,
      0.0151926195,
      -0.0080511635,
      -0.019835016,
      -0.0036172413,
      0.009989712,
      -0.011967218,
      0.023215242,
      -0.011740538,
      -0.010032359,
      0.010362561,
      -0.00046344154,
      -0.027854964,
      0.006736869,
      0.017649971,
      0.0355439,
      -0.014772132,
      -0.0038401033,
      0.0034168034,
      -0.0030619793,
      -0.014716336,
      -0.00081587647,
      -0.004264076,
      0.011365925,
      -0.0049294475,
      -0.19228631,
      0.018375305,
      -0.0036764876,
      0.0010336655,
      0.008946127,
      -0.024740148,
      0.003945485,
      0.014323539,
      0.008479653,
      -0.02441091,
      0.012745836,
      -0.0050711483,
      0.03973735,
      0.021626383,
      0.0016089609,
      -0.016201194,
      0.00031504972,
      0.013252324,
      0.013229769,
      0.009517664,
      0.019205242,
      0.017265663,
      -0.0048801256,
      -0.032308795,
      -0.014376562,
      0.0047861743,
      0.018459333,
      -0.011434075,
      0.009633277,
      -0.0010131021,
      -0.0013127191,
      -0.003852884,
      -0.008270369,
      -0.021090975,
      -0.0289132,
      0.0045488877,
      -0.016763229,
      0.0002885553,
      0.0028049103,
      0.010940419,
      -0.028077168,
      -0.007019678,
      0.01482871,
      -0.0081477985,
      -0.0021446683,
      0.00063847116,
      0.013744888,
      0.023709284,
      0.0246364,
      0.01554372,
      0.0046883174,
      -0.027648462,
      0.013099006,
      0.0018310074,
      0.004557626,
      -0.013528956,
      -0.012278243,
      0.00419624,
      0.0055401223,
      -0.017480265,
      0.011625281,
      -0.0014018839,
      0.0007891075,
      0.00606645,
      -0.03322604,
      0.009468699,
      0.0034124067,
      0.0059721093,
      0.006223623,
      0.0101239495,
      -0.018163223,
      -0.023792312,
      0.022741223,
      0.01731311,
      -0.003026326,
      0.015495218,
      -0.021133224,
      0.011347159,
      -0.0040342226,
      0.009693807,
      -0.018295968,
      -0.0027578548,
      0.010668281,
      0.026652662,
      0.0087950425,
      -0.00016260037,
      0.00060542807,
      0.002344865,
      -0.01736367,
      0.02668202,
      0.034264896,
      0.0105032,
      -0.023811802,
      0.024779603,
      -0.008094515,
      -0.018238937,
      -0.014064004,
      -0.004216093,
      -0.00031039186,
      0.010977141,
      -0.0061997348,
      0.015262476,
      -0.0011006624,
      -0.0012608523,
      -0.015248993,
      0.004647693,
      0.0021318328,
      0.0049540196,
      0.032248374,
      0.018441297,
      0.012084367,
      0.006349305,
      -0.0060813823,
      0.008618209,
      -0.0009747429,
      0.014438361,
      0.013496653,
      -0.012007074,
      0.01411316,
      0.025201878,
      -0.011010057,
      0.0034245458,
      0.0042092996,
      0.020108508,
      0.011998356,
      -0.005818031,
      0.0049356907,
      -0.03186316,
      -0.0039316555,
      0.017642146,
      -0.0058584446,
      -0.026834756,
      -0.007742778,
      -0.011390095,
      -0.010773066,
      -0.016529365,
      0.011657728,
      -0.0057871165,
      -0.007861166,
      0.0036856874,
      -0.0046726614,
      -0.024539147,
      -0.0100071905,
      0.0066478928,
      -0.018816503,
      -0.011456097,
      -0.003868821,
      0.00033767213,
      -0.011614798,
      0.00584338,
      -0.014658532,
      -0.009375653,
      0.03467149,
      -0.042055693,
      0.020856172,
      -0.0012692506,
      0.012987184,
      0.0034743152,
      -0.014764218,
      0.0011212963,
      0.0055880058,
      -0.0911259,
      0.008505521,
      -0.007793785,
      -0.034924485,
      -0.010890535,
      -0.0049691293,
      -0.013063745,
      0.016402107,
      0.013944216,
      0.002353727,
      -0.014620914,
      -0.005974962,
      0.00950315,
      -0.01569647,
      0.009389624,
      0.015273368,
      0.0010031944,
      0.013563886,
      -0.011180064,
      -0.008565022,
      -0.0058098156,
      -0.0040186583,
      -0.012309804,
      -0.0003638873,
      0.008657719,
      -0.0070706047,
      -0.009934115,
      0.020673556,
      0.04054075,
      -0.014718781,
      -0.0001235388,
      0.04609178,
      -0.008341865,
      -0.004075012,
      -0.012208833,
      0.0052792765,
      0.02608806,
      -0.032919247,
      0.003991934,
      -0.0056016883,
      -0.0055373386,
      -0.017633406,
      0.009278882,
      0.020100402,
      0.0023577074,
      0.014194721,
      0.012866863,
      -0.031257436,
      -0.04426197,
      -0.004047979,
      -0.0013118075,
      -0.0035040374,
      0.02067374,
      -0.025093522,
      0.010119916,
      -0.006686072,
      4.764084e-7,
      0.0027114644,
      0.020558117,
      0.022822442,
      -0.0018490723,
      0.01185539,
      0.0047162743,
      0.008537729,
      0.024026947,
      -0.015292742,
      -0.012189544,
      -0.020097941,
      -0.004602378,
      -0.018689457,
      -0.0023009672,
      -0.014832277,
      -0.01776914,
      -0.026395855,
      0.00078073365,
      -0.003120897,
      0.0073410124,
      -0.002353358,
      -0.025928508,
      0.018287975,
      0.010017771,
      0.010839869,
      0.007516039,
      0.028721191,
      0.007597843,
      -0.008432492,
      -0.0039816257,
      0.010040144,
      0.00035776827,
      -0.019633507,
      0.01776249,
      0.03190545,
      -0.014610445,
      -0.0055741076,
      -0.015656505,
      0.023534367,
      -0.023508677,
      -0.016859638,
      0.0059144464,
      0.0054111728,
      -0.004046087,
      -0.008606205,
      -0.015848583,
      -0.0016016754,
      -0.010902573,
      0.034280572,
      -0.00545962,
      0.0073754555,
      0.010341266,
      0.009012883,
      -0.0017734512,
      0.028918674,
      -0.00444385,
      -0.018056417,
      -0.03298784,
      0.023075266,
      0.017278185,
      0.015632248,
      -0.010185101,
      0.00374138,
      0.0068371026,
      -0.004760827,
      0.0065556564,
      0.0063692583,
      -0.0030793261,
      0.008025805,
      -0.0029975593,
      0.0020430253,
      -0.021303797,
      -0.016763836,
      -0.026007349,
      0.0022034524,
      -0.034317292,
      -0.013892559,
      -0.009383933,
      -0.010879516,
      0.013994996,
      -0.009833625,
      0.009088597,
      0.006971244,
      -0.01760351,
      -0.0027989957,
      0.016533077,
      -0.0063852123,
      -0.0105627,
      0.0143009145,
      0.011285253,
      -0.0007581646,
      0.01943508,
      0.0073686624,
      0.001784648,
      -0.003925468,
      0.0008052499,
      -0.0029844346,
      -0.0043808687,
      0.013338311,
      0.023877194,
      0.003808638,
      -0.0023714928,
      -0.016808324,
      0.0007834116,
      0.014585883,
      -0.0030834973,
      -0.010115703,
      0.016625859,
      0.043174412,
      -0.026754098,
      0.0068124537,
      0.0016662943,
      0.00029640205,
      -0.025035378,
      -0.01922288,
      -0.03876628,
      0.020944571,
      0.018849202,
      -0.005589274,
      0.023247303,
      -0.004919634,
      0.0068631484,
      -0.006805621,
      -0.00313275,
      0.0069035157,
      -0.021125738,
      0.0009811543,
      -0.005311446,
      -0.012855654,
      0.010816937,
      -0.008570595,
      -0.013506839,
      -0.008630922,
      0.025008451,
      -0.02297416,
      -0.014149617,
      0.009718982,
      0.013023238,
      0.038116768,
      -0.007386175,
      0.007983124,
      0.010339427,
      0.0057764715,
      -0.005856969,
      -0.0076232054,
      0.013845685,
      -0.014100335,
      0.021854298,
      -0.0014616917,
      0.0065238187,
      -0.017806461,
      -0.00047129224,
      0.018631898,
      0.005323576,
      -0.0065235286,
      -0.0014800669,
      0.008591305,
      0.03821035,
      0.030587146,
      -0.0077468357,
      0.0018651882,
      -0.025599215,
      0.022397675,
      0.025602987,
      0.0036562234,
      0.013336689,
      -0.00048267338,
      0.00026453997,
      -0.013221937,
      0.00064992986,
      0.001939906,
      -0.007830334,
      -0.015626216,
      0.000021769896,
      -0.020404467,
      0.0038416418,
      0.0019518416,
      -0.025767306,
      -0.006612885,
      0.020841697,
      0.012574522,
      0.006729424,
      -0.015495226,
      0.0065421145,
      -0.011161973,
      -0.0005822659,
      0.021104129,
      -0.015467994,
      -0.020287592,
      0.015995888,
      0.00530841,
      -0.0022573378,
      -0.000053643147,
      0.020862907,
      0.0074082273,
      0.015223687,
      -0.012185105,
      -0.024501158,
      0.022496946,
      -0.015446747,
      -0.0126157515,
      0.002851474,
      -0.010764909,
      0.022898458,
      -0.0084480485,
      0.002032803,
      0.0064702737,
      -0.00078813505,
      -0.0137227485,
      0.012034283,
      -0.006811476,
      0.0168345,
      -0.11357393,
      -0.01735694,
      -0.0059128227,
      0.00894925,
      -0.005857552,
      -0.0030164206,
      0.012584031,
      -0.012415989,
      0.0005792105,
      -0.0047803475,
      0.02954171,
      -0.0015743875,
      0.00674858,
      0.027403332,
      0.0157671,
      -0.011317573,
      0.01481101,
      0.03264535,
      0.032359574,
      0.0025704456,
      -0.00059874984,
      0.009276418,
      -0.011193714,
      0.004728504,
      -0.02302416,
      0.019121394,
      0.018307915,
      0.010926688,
      0.0014778548,
      -0.0027693002,
      -0.0054408214,
      -0.00190579,
      0.013741291,
      0.017110221,
      0.04203968,
      0.02120918,
      -0.0043382035,
      0.013379662,
      0.009803956,
      -0.003529948,
      0.013884782,
      0.022301234,
      0.027618539,
      0.025320617,
      0.014570778,
      0.010169318,
      0.026212685,
      0.0035260473,
      -0.010231381,
      0.054203723,
      -0.045582183,
      -0.004594207,
      -0.009639589,
      -0.023501266,
      -0.0018092936,
      -0.00039563858,
      0.034759227,
      0.023024654,
      -0.0087978775,
      -0.0036285461,
      0.004611264,
      0.00042328032,
      -0.016664715,
      0.033415925,
      -0.009828897,
      -0.012275841,
      0.007504771,
      0.012081195,
      0.016153727,
      -0.002587594,
      0.012101102,
      0.0008907895,
      -0.0008950289,
      0.025331862,
      -0.013079393,
      0.00402609,
      -0.0028096396,
      0.016606923,
      -0.0141827585,
      0.019582108,
      -0.018770495,
      -0.013221038,
      -0.062464084,
      -0.0030216712,
      -0.0047396915,
      0.0015645607,
      0.029275458,
      0.013079672,
      -0.0037913627,
      0.02590848,
      0.008552839,
      -0.008794578,
      0.0047880416,
      -0.010590681,
      -0.012141484,
      -0.007276756,
      -0.024144474,
      0.0020762559,
      -0.0031950271,
      -0.02248372,
      -0.013898604,
      0.018531185,
      0.0019787622,
      0.0124885775,
      -0.0144753605,
      -0.028043777,
      0.0036663497,
      0.0049757436,
      -0.016786946,
      0.0076153222,
      0.005531723,
      0.0034131806,
      0.0016704857,
      -0.14925186,
      0.013155244,
      0.013405131,
      0.0013051754,
      -0.008884972,
      0.0027543993,
      -0.009292018,
      -0.0068755867,
      -0.001656048,
      -0.020705324,
      0.0024966397,
      -0.020865805,
      -0.018676324,
      0.0016914547,
      -0.01111019,
      0.13996878,
      0.012409755,
      0.02661719,
      0.009537772,
      0.017014746,
      -0.016525421,
      -0.018993987,
      -0.0030621113,
      0.018683163,
      0.003705897,
      -0.012288507,
      0.010531522,
      -0.026259912,
      0.0401317,
      0.013346045,
      0.0056443275,
      -0.009893235,
      -0.010206422,
      0.0125684915,
      0.0017326671,
      -0.024137443,
      -0.00614549,
      -0.006740952,
      -0.004125258,
      -0.00086199323,
      -0.009101056,
      0.0020447832,
      -0.0070221806,
      0.0044973316,
      0.0059016575,
      -0.008304257,
      0.008177935,
      -0.017810557,
      0.010033812,
      -0.021714367,
      0.015514236,
      -0.07538057,
      0.013769325,
      -0.0068066576,
      -0.0044942973,
      0.04452451,
      -0.0041164025,
      0.011600573,
      -0.015160933,
      0.0011232732,
      -0.00082302914,
      0.00996843,
      0.031214284,
      0.007167239,
      0.006258984,
      0.004097508,
      0.025761448,
      -0.0028036844,
      0.018327452,
      -0.009209232,
      0.012548041,
      0.01999557,
      -0.0034671335,
      -0.0018085659,
      -0.024688624,
      -0.031447496,
      -0.011327525,
      0.01202699,
      -0.0026124036,
      -0.014592705,
      -0.0026287911,
      0.021261781,
      -0.006296571,
      -0.008604388,
      0.015814958,
      -0.006865099,
      0.0030976913,
      0.01926705,
      -0.025848066,
      -0.0113356365,
      -0.0075290296,
      0.032251835,
      -0.008271798,
      0.0112032015,
      -0.019372698,
      0.029777786,
      0.011349442,
      0.0077122455,
      0.015216349,
      -0.00035401294,
      0.0042715063,
      -0.012596138,
      0.014994239,
      -0.017226974,
      0.015815588,
      0.021619795,
      0.0017502793,
      0.008795834,
      0.00042634265,
      -0.0102086505
    ]
  },
  {
    "id": "genai_cohort_nodejs_20_node_express_rest_api_vtt",
    "content": "So hey guys, in this particular video let's understand what is a REST API. What do you mean by this REST API, also known as RESTful API. So let's understand that what is this? Okay? And from now onwards we are going to be focusing more on the restful APIs. So restful APIs means representational state transfer. Like this is the full form and there is no need to remember this. Even I googled it before this video. Okay, so what is this? Is, this is basically an architectural style. Now first thing is that this is an architectural style and this is nothing related to the Node js, okay? I not talking about Express or Node js, it is in, in general like whenever you are building a REST API, whether you are using Java, whether you're using Rust or you're using JavaScript, Node, this, anything. So this is just a style, okay? Architecture style for designing the applications, the backend APIs. Okay? Now this, this design, the style has some, some principles, okay? So there are some key principles that we have to follow in order to call yourself your APIs as a RESTful API. Okay, so what are those? Number one, all, all the communication happens on the HTTP, right? All the communication happens on the HTTP protocol. That's fine, very simple. First thing that majorly comes is the statelessness. Now what do I mean by statelessness? There should be absolutely no state maintained on the server. That means let's say you have a server which is running, let's say Java, maybe Rust, maybe anything or maybe Node js, right? If user is sending a request, you are not allowed to create some, state some data in the memory. I mean you want to create some data, hey, go in the database, right? You have a database but you cannot store any user related information inside the server. You cannot use your memory to store, store some, store some user, related information. User related info. If you want to do, do not do it on the server. You can use Redis, you can use postgres, you can use other databases, key value pairs, but not in the server. Why? Because what happens is in reality these servers automatically scale up and down, right? So they scale up, they scale down. So if you are storing some kind of memory, you are storing some kind of state in the memory, it can be lost, right? And if you are storing something in the memory, you don't want your servers to be scalable in this way. That basically violates the principle of your statelessness, okay? The principle of your restful API. So everything should be stateless. Secondly, this should follow a client Server architecture, right? What is a client server architecture, by the way? You know, the client server architecture is basically that there will be a client which can be a separate application. Okay, A client. It can be a mobile application, it can be iOS, it can be Android, it can be a website, it can be anything. But the client should be a separate application. Okay, so let's say that there is a client which is a separate application and your server is a separate application. Okay? It should not be like that your backend is responsible for ui. No, that should not be the case. You should not send like, you know, HTML data, some CSS data from the server. No, you, you should only send data in some format like JSON, the front end. The client application should be responsible for rendering it on the ui, how to show it to the user, all that stuff. So client server architecture, keep the client different, Keep the server different. Okay, There should be no, like, there should be no code, coupling. Okay, it should be, they should always Talk with the APIs. So what client can do, it can make API calls to your backend and, and get the data. Okay, then there should be a uniform interface. Now what do I mean by uniform interface? Basically you should use all the things like for example, get post, put delete thing in a predictable way. Okay, what do I mean by predictable way? This is a very simple thing. Let's say if you are making a get request to slash tweets, what do you think they should do? They should obviously return you all the tweets. Right? Because this is a predictable, this is a common sense. But let's say you are designing it in a way that when you make a call on get tweets, you are actually creating a new tweet. Okay, this is not a predictable thing, right? Creating a new tweet. This doesn't make any sense. The common sense is not there. So there should be a uniform interface that if you tell someone, hey, there is a route that is a get route of slash tweet, it should be predictable that, yes, this route is going to return all the tweets. So uniform interface, okay? And it should be cachable. Okay? So the responses that you send from the backend, it should be cacheable, right? So servers can mark it as cacheable, which allows the client to cache the things. So this is what basically means makes your APIs as a restful APIs. So moving further, we are going to use these, principles, right? And in order to make highly performant, highly available RESTful APIs which are highly scalable. Okay, so you can Google, a lot of more things about these restful APIs. In fact, I would suggest you to Google yourself also restful APIs, and keep all the principles in mind. So we are just going to learn restful APIs, because that, what, like 99% of the companies use, right? So we are just going to create APIs, and for the testing purposes, because we don't have any UI or client or any REACT application, we are going to use this Thunder client, right? Because if you have to really test your application, then you have to build a UI using React or something like that. Anything. But we have this Thunder client, which acts as a, ui, which acts as a client for us so that we can test our APIs. Got it, guys?",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "20-node-express-rest-api.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/20-node-express-rest-api.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.022268832,
      0.015487471,
      0.021445572,
      -0.07445698,
      -0.015230064,
      -0.0011996715,
      0.018516457,
      0.009219783,
      0.0047857594,
      0.015064304,
      -0.0044337297,
      0.01324398,
      0.00070828834,
      0.02815472,
      0.12657116,
      -0.0051881885,
      0.002908222,
      0.0054257708,
      -0.00081228843,
      -0.0309297,
      0.015082805,
      -0.016824815,
      -0.011814964,
      0.013178368,
      0.005246301,
      0.021684295,
      -0.006520091,
      -0.0017582597,
      0.0088779945,
      0.00060907146,
      -0.011333443,
      -0.011587068,
      0.022482125,
      0.027203504,
      -0.0133866565,
      0.009230673,
      0.011445712,
      0.01021637,
      -0.03718826,
      0.009753143,
      -0.027689086,
      0.011635138,
      0.015219002,
      -0.031592503,
      0.010399508,
      -0.0019519846,
      0.018162886,
      -0.005807197,
      0.004718935,
      0.013081282,
      -0.006875911,
      -0.01211842,
      -0.009032641,
      -0.18521455,
      0.0039300676,
      -0.00019563097,
      -0.0042264317,
      0.015149231,
      -0.003397814,
      0.004872883,
      -0.013537702,
      0.0061514894,
      0.0016503679,
      0.02124044,
      -0.017346157,
      -0.013060901,
      0.021793542,
      -0.0031747238,
      0.0035838527,
      -0.009527535,
      0.003228449,
      0.02235767,
      -0.0067132413,
      -0.019520355,
      -0.020942044,
      -0.011597522,
      -0.00076022086,
      -0.014748744,
      -0.0037531054,
      0.014510208,
      -0.005368861,
      -0.008340419,
      -0.030704929,
      0.0119146295,
      -0.008345182,
      -0.015747264,
      -0.025552051,
      -0.009780626,
      -0.008263258,
      0.0011317522,
      0.0070784176,
      0.0057435916,
      0.0016580197,
      0.0065950477,
      0.012469064,
      -0.006560686,
      -0.00842668,
      0.013276962,
      -0.01876439,
      -0.0066176234,
      0.0127222,
      0.011684635,
      -0.031412266,
      0.013475274,
      -0.009870308,
      0.008922044,
      -0.004589432,
      -0.006985136,
      -0.010037056,
      -0.014893317,
      0.0055316775,
      -0.014844695,
      -0.000846028,
      0.029621515,
      0.0023483848,
      -0.18466029,
      0.015743798,
      -0.02805841,
      0.0123782735,
      0.0032709532,
      -0.020205408,
      -0.0028109227,
      0.004650804,
      -0.003542063,
      -0.018903969,
      0.0056258924,
      0.009052379,
      0.032601893,
      0.031641774,
      0.0046107075,
      -0.007886143,
      -0.012870313,
      -0.0071588866,
      -0.004783394,
      0.020259166,
      0.023299647,
      -0.0056891884,
      -0.022329172,
      -0.020754907,
      -0.01963997,
      0.012880392,
      0.043480687,
      -0.01766352,
      0.029263575,
      0.0071722846,
      -0.002332332,
      -0.038865447,
      0.005067115,
      -0.0156194875,
      -0.023190375,
      0.022367194,
      -0.011311245,
      0.0034321314,
      0.013237839,
      0.01707121,
      -0.04528447,
      0.0035810724,
      -0.0004416889,
      -0.008372655,
      -0.0134297935,
      -0.0012271045,
      0.015790418,
      0.007447646,
      0.028930267,
      0.006531978,
      -0.012282613,
      -0.0030458828,
      0.0121324975,
      0.0049987463,
      -0.0068868604,
      -0.004050352,
      -0.0029699774,
      -0.004795327,
      0.019904954,
      0.0055092257,
      -0.008963073,
      0.004194914,
      -0.001269976,
      0.004910493,
      -0.007983134,
      -0.0005289528,
      -0.030899664,
      0.00003948705,
      -0.027354762,
      -0.0038928073,
      -0.0054993914,
      -0.025285544,
      0.019148432,
      0.00773419,
      0.004348265,
      -0.0012113244,
      -0.0067628226,
      -0.005781419,
      0.00682129,
      0.008619668,
      -0.024441142,
      0.007875639,
      -0.027779397,
      -0.01168529,
      0.026745498,
      0.00035220882,
      -0.0061787846,
      -0.014457558,
      -0.02454926,
      -0.016705066,
      -0.005415886,
      0.014309034,
      -0.02855109,
      0.00037850378,
      0.0021798683,
      -0.021262081,
      -0.03231905,
      0.013167943,
      -0.011262533,
      -0.0065239742,
      -0.005208004,
      0.016435996,
      0.017586702,
      -0.015065712,
      -0.020225855,
      -0.005280929,
      -0.010210002,
      -0.0036507635,
      0.016172115,
      0.017662005,
      -0.0039536483,
      0.014900194,
      -0.009253758,
      0.009826318,
      0.0012720786,
      0.0050619654,
      0.007874853,
      0.00022260887,
      -0.011265486,
      0.036756624,
      -0.0002834576,
      -0.005946007,
      -0.0012263844,
      0.016848803,
      0.004695105,
      0.013768468,
      -0.0009600393,
      -0.019838527,
      0.02712348,
      0.020374952,
      0.013417329,
      -0.013226846,
      0.006245941,
      -0.009692638,
      -0.01681958,
      -0.018758621,
      0.010273094,
      -0.015704911,
      0.0042791893,
      0.0061775986,
      -0.030366024,
      -0.044991907,
      -0.0007999826,
      -0.010695181,
      0.0013381016,
      -0.008598054,
      -0.029176319,
      -0.0058403187,
      -0.0028709194,
      0.0090747,
      -0.0094751455,
      0.0008555103,
      0.023600752,
      -0.04530881,
      0.009351644,
      0.02584865,
      0.0012656074,
      -0.011248965,
      -0.0046715494,
      0.008937445,
      -0.0009919271,
      -0.086465426,
      0.0059296726,
      0.01031623,
      -0.033145275,
      0.008002404,
      -0.008891604,
      -0.023732753,
      0.011646404,
      0.022549585,
      0.012639086,
      0.005216394,
      -0.0063319136,
      0.013857729,
      0.0002750131,
      -0.0033483985,
      0.026828635,
      0.013398108,
      0.006499407,
      0.002976285,
      -0.044533554,
      -0.018523509,
      -0.0008120757,
      -0.009771488,
      0.0049213846,
      0.012993068,
      -0.017042186,
      -0.01314151,
      0.013004201,
      0.0038868915,
      -0.0013183592,
      0.0008785127,
      0.018233437,
      -0.0068013845,
      -0.0017913332,
      -0.0063051586,
      -0.012748653,
      0.0195036,
      -0.008092405,
      -0.017475845,
      0.004890383,
      -0.015724227,
      -0.012377104,
      0.016688718,
      0.014118283,
      -0.00071781327,
      0.013338778,
      0.013909315,
      0.005758836,
      -0.015569884,
      0.00058424956,
      -0.021837147,
      0.016020978,
      0.031238044,
      -0.020396993,
      -0.0038439003,
      -0.00863031,
      0.003841553,
      0.0069379495,
      0.021247974,
      -0.00518895,
      0.0017548624,
      -0.0073988554,
      -0.0011339333,
      0.006137948,
      0.033577472,
      0.0045280256,
      0.0065816306,
      -0.025360473,
      -0.008051599,
      -0.0047610654,
      0.00030362097,
      -0.017691337,
      -0.01130329,
      -0.030704224,
      0.0039322083,
      0.007974507,
      -0.003640856,
      -0.019083787,
      -0.033046428,
      0.011709965,
      -0.0027691356,
      -0.0005498039,
      -0.0007672705,
      0.018064613,
      0.0018841168,
      0.012467416,
      0.0010969464,
      -0.000845385,
      -0.005870888,
      -0.002857403,
      0.015490634,
      0.023885718,
      -0.00270926,
      -0.00525286,
      -0.022134159,
      0.0024151613,
      -0.024610737,
      -0.01570723,
      -0.0015200152,
      0.014329404,
      -0.01139486,
      -0.016235875,
      -0.018375805,
      -0.013559662,
      -0.013599719,
      0.034420643,
      -0.030458355,
      -0.017468248,
      0.006861452,
      0.0037856847,
      0.0056245797,
      -0.0015908376,
      -0.01822851,
      -0.0026269404,
      -0.025397832,
      0.019216144,
      0.016422976,
      0.010520402,
      -0.013184327,
      -0.016388427,
      -0.00473982,
      -0.020785427,
      0.015184858,
      -0.01762354,
      -0.016325004,
      -0.01355056,
      -0.027268082,
      -0.0026868172,
      -0.027703455,
      -0.008033924,
      -0.022351375,
      -0.0148608815,
      -0.022123234,
      0.00069801655,
      -0.012693231,
      -0.015745739,
      0.023226028,
      -0.00058371254,
      0.0252945,
      0.027049866,
      -0.012352353,
      0.017379973,
      0.005845395,
      -0.007335891,
      -0.0012475542,
      0.014770006,
      -0.027484316,
      -0.013001344,
      -0.017280485,
      -0.015096593,
      -0.022869196,
      -0.005542899,
      -0.03025979,
      0.002575251,
      -0.010707206,
      0.017570438,
      0.0006581638,
      0.016387181,
      -0.017997956,
      -0.019277228,
      -0.0026838197,
      -0.009088395,
      -0.006070098,
      -0.013589579,
      0.013786682,
      -0.0023686306,
      -0.00043282798,
      0.008774669,
      0.011935495,
      -0.00040537835,
      -0.011713335,
      -0.01614893,
      -0.036046714,
      0.0051274663,
      0.013981126,
      0.0002976083,
      0.0051174304,
      -0.024810396,
      0.0051069683,
      -0.00038802033,
      -0.010264533,
      0.012757563,
      -0.013985536,
      0.012152704,
      0.0026505862,
      -0.0022660797,
      0.0011899343,
      -0.013011215,
      -0.006952289,
      0.0052617653,
      -0.01586373,
      0.017997505,
      -0.036147367,
      0.004609992,
      0.005700836,
      0.015872955,
      0.023827141,
      -0.0055133468,
      0.0035860746,
      0.00758956,
      -0.02305402,
      -0.018996567,
      0.0008895401,
      -0.010347792,
      0.014688285,
      0.00035297693,
      -0.016633801,
      -0.040173918,
      0.0010285095,
      0.0063484474,
      0.010680556,
      0.0011214326,
      0.01688518,
      0.0020117213,
      0.0348477,
      0.0044647423,
      -0.006398101,
      0.009595218,
      -0.0024265992,
      0.0007521219,
      0.018813916,
      -0.0116400225,
      -0.006648155,
      -0.0044980166,
      -0.0049348273,
      -0.010726562,
      -0.026381074,
      0.011736768,
      -0.0044400436,
      -0.016959269,
      0.0032162054,
      -0.00790016,
      0.01784558,
      0.0068626343,
      -0.01348011,
      0.009501835,
      0.012619381,
      0.008999545,
      -0.0014536546,
      0.0021475682,
      0.010479732,
      -0.012752087,
      -0.010444107,
      -0.013427382,
      0.007821857,
      -0.0061221533,
      0.021876717,
      0.020050203,
      -0.033778984,
      -0.002632625,
      0.047128122,
      0.0009961502,
      0.0024996614,
      -0.009945667,
      -0.00966254,
      0.026716469,
      -0.0054890863,
      0.002026782,
      -0.006665338,
      0.0067662145,
      -0.0041362443,
      -0.02111414,
      -0.014850849,
      0.017777998,
      -0.0010222617,
      -0.029213324,
      0.0022419323,
      -0.0059943544,
      0.031330984,
      -0.10213494,
      -0.0025645026,
      -0.019708827,
      0.0027940723,
      0.0010972468,
      0.0016227781,
      0.018161085,
      -0.020157775,
      -0.0010657698,
      -0.021398399,
      -0.0101968255,
      0.0046965005,
      0.008338626,
      0.014012432,
      -0.009089604,
      -0.0064632073,
      -0.015022121,
      0.027363015,
      0.032127194,
      -0.00046034312,
      0.022127813,
      -0.012572848,
      -0.003445586,
      0.016450683,
      -0.0017712666,
      0.009868259,
      0.029935518,
      -0.015492178,
      0.010220188,
      -0.011768533,
      -0.021968592,
      -0.010147993,
      -0.011077159,
      0.012538958,
      0.019858526,
      0.034026273,
      -0.0015813352,
      0.011879355,
      0.000023612598,
      0.0039687576,
      0.0077264197,
      0.006662088,
      0.004879538,
      0.017013354,
      0.016288934,
      0.015817499,
      0.02770713,
      -0.027066756,
      0.0058498215,
      0.04644679,
      -0.046784956,
      -0.023612041,
      -0.007361931,
      -0.032493662,
      0.016730485,
      -0.002980784,
      0.026198754,
      -0.0003042851,
      0.0016091797,
      -0.010765728,
      0.00032006626,
      0.016060617,
      0.0016359246,
      0.041194096,
      -0.008867565,
      0.010684069,
      0.017306952,
      0.00054181635,
      0.0023141163,
      0.00503945,
      -0.014140751,
      0.006355794,
      -0.015847431,
      0.031274784,
      -0.007732771,
      0.006601535,
      0.005118953,
      0.014898241,
      -0.0325417,
      0.016555015,
      -0.020737858,
      0.0137741435,
      -0.06257824,
      -0.012425534,
      0.0071459003,
      -0.0018225093,
      0.014721897,
      0.0077897836,
      -0.009865933,
      0.021473937,
      -0.009571604,
      -0.009841851,
      -0.023594322,
      -0.021741303,
      0.0074431607,
      -0.025487786,
      -0.038686335,
      0.008704024,
      0.00838377,
      -0.02807225,
      -0.024945097,
      -0.0051130485,
      0.0020142652,
      0.0020007445,
      -0.008415471,
      -0.0037611595,
      0.009207584,
      0.029334238,
      -0.009321021,
      0.005120799,
      -0.011928888,
      -0.0015870157,
      0.026528805,
      -0.14442787,
      -0.0010435055,
      0.015727267,
      0.005564574,
      -0.016738338,
      0.024053013,
      -0.030723257,
      -0.016390782,
      0.011107997,
      -0.011061167,
      0.009304091,
      -0.008293522,
      -0.014443281,
      0.011042154,
      0.001505282,
      0.12326338,
      -0.001960967,
      0.015581553,
      0.0008306983,
      0.01587658,
      -0.016015146,
      -0.023850666,
      0.015267354,
      0.010486249,
      0.007108957,
      -0.0148062445,
      0.0063495296,
      -0.02028389,
      0.021821052,
      0.017024767,
      -0.0010067846,
      -0.027301997,
      -0.021753766,
      0.010682825,
      0.0057245824,
      -0.019267952,
      0.009122811,
      -0.014029836,
      -0.0098422775,
      -0.015097521,
      0.029284192,
      -0.00033358336,
      -0.0098251635,
      0.030043432,
      0.0023294233,
      -0.005085996,
      0.0030766865,
      0.00015129977,
      -0.0082497,
      -0.000528402,
      0.025300907,
      -0.056620043,
      0.0077292486,
      -0.0025991395,
      -0.0072423443,
      0.022914914,
      0.011141344,
      0.02986074,
      -0.013763333,
      0.0006130959,
      -0.0014773477,
      -0.002685513,
      0.017567309,
      -0.0033117726,
      0.0105752405,
      -0.006373246,
      0.012293086,
      0.024951568,
      0.004776143,
      -0.010118179,
      -0.01525549,
      0.023850782,
      -0.012404415,
      -0.0127450675,
      -0.011616839,
      -0.015581203,
      -0.0052332664,
      0.018480105,
      -0.00689702,
      -0.007364699,
      -0.006478286,
      0.021963965,
      0.010440166,
      -0.012295013,
      -0.0053340183,
      -0.015598734,
      -0.017047845,
      0.028402291,
      -0.0022874991,
      -0.011706451,
      -0.0027055137,
      -0.006094817,
      -0.017633885,
      0.045912575,
      -0.0004915098,
      0.02159212,
      0.015529965,
      0.001788536,
      0.019601166,
      0.00020622942,
      -0.0067709615,
      -0.0028954765,
      0.0022055632,
      -0.00583189,
      0.033350103,
      -0.008551656,
      0.03250107,
      0.016955504,
      0.0043859268,
      -0.016113797
    ]
  },
  {
    "id": "genai_cohort_nodejs_21_node_book_store_1_vtt",
    "content": "Hey guys, in this particular video I have an interesting challenge for you. So here is a readme MD file and I have created one challenge for you. So actually I have not created, I have asked Chat GPT to create a challenge for us. And I'll be using this challenge along with you only to see that how we can implement all these challenges. Okay, so this particular video is going to give you a very good understanding on how you can work with Express in real world. So let's just open the preview. So here we have the preview and let's see it step by step and implement the code. Okay, so what we have to do is we have to setting up the server with Express listening on the port and creating a bookstore. So we have to create a bookstore kind of an application. Okay, so project initialization says that you have to create a project folder. That's fine. Then what you have to do is you have to do npm in it. So all these steps are mentioned here, right? So you have to just follow this document. So I'll just tell you the outline that we have to create a bookstore. And, and if you scroll down you will have some application routes like slash books that should return all the books. Slash books, slash id. Okay, now this is something special that if you make a route on like let's say/book/1, /book/ So this will return your specific book by the ID. You can create new books, you can delete existing books. So this is what we have to create. Okay, so let's, let's jump into the coding part, right? Because that is where I am most excited usually. So what I can do is I can just do an npm init. So expressbook store is fine, everything is good. And yes, so npm install. Now here is something I want to tell you. Very interesting, right? Something new. What I'm going to do is I'm going to say at the rate types slash node and one thing I will do hyphen, hyphen save dev. Okay. Or, or, or I can just say hyphen D. Now what is this thing? When I do enter, you will see something very interesting in the package JSON instead of going into the dependencies, now it is inside a dev dependency. Now see guys, this particular thing I only need when I am developing, right? When I am inside my development mode, once my project is ready, I don't want to take this package on my production server because even if I take, that's fine. I mean it's not a problem. But my Packet size is going to increase because this can be a 2, MB file or something like that. So, so if there is any dependency that you only need on your local machine, that means while you are developing, then you can just do an hyphen D. Okay, so like for example Express. Express. Of course I need on production. If Express is not there on the production, my. My application will crash. So this is going to be a dependency only. Similarly, npm install@ the rate types for Express is going to be a dev dependency because either I just need that in the development server. Got it. Now let's configure a start script which will do node, hyphen, hyphen, Var, index js. Nice. Now and let's create an index js file. So first things first, let's have the Express application. So express equals require and you can just say express. Okay, Then let's create an application. So app is equals to express. Sorry, sorry, sorry, my bad. Express. Fine. Then let's create a port variable. So port Okay, so what this documentation says that you have to create a project folder. Done. Initialize the node. Done. You have to install Express. We have done an index js file. Now we have to we have to listen on the port So these rules are saying that you have to listen on port number 8, 000, right? So app do listen on this particular port and I can just say console do log that HTTP server is running on port. And I can just say port. So whichever port the application is running, I'll get that thing right? So this part is also done. So you have done the listening part. Now we have to create a bookstore data. Now, as of now, we don't have a database, right? Initially these things should be in the database. But because we don't have a database, we can actually store it as an array. So you can consider, okay, you can just consider that this is my in memory database, okay? In memory database. Now I know that I'm violating a rule, right? The rule was that you it should be stateless. But right now I don't have a database, right? Imagine guys, I don't have a database. So that is the reason I have to create these things in memory. Okay? So right now we are violating a rule because we don't have database. But you can imagine in future these things will be moved into the database. So every book has an id, a title and an author, right? So we have created a mock data. Now we have to set up a get route that if you want to get all the books. So very simple, right? Very simple. So what I can do is I can just have a comment that these are all my routes. So if someone makes a get route, a get request on slash books, this is where I should return all the books. So what you can do is you can just say response dot. Now see guys, when you return a response, the response can be of different, different types. For example you can send just a text response, for example for that when you do end, right? When you do end you are just sending a text response. But usually we prefer to send a JSON response. What is a JSON? JSON is basically a key value pair. So what you can do is you can just say hey I want to send a JSON and directly give this books what internally the express will do. It will convert this array, this array into a JSON and set all the appropriate headers and, and send these books as a JSON to the front end. Let me show you. Okay, so this is done. So this basically route gets all the books and returns to the front end. So what I'm doing is here is I, I'll just say npm start, right? So this will start the server in the Var mode. So you can see that the server is running. Let's open the Thunder client side by side. Okay, so what I'm going to do is I'll just say HTTP localhost/books and send document. You see that I'm able to get all the books right as a JSON. Now interestingly see one thing, if I go into the headers, I'm talking about response headers. Okay, Response can also send headers. So our server has set some Headers for us. Number one is X powered by Express. So yeah, Express is doing a branding content type application/JSON from where this is coming. When you send a JSON response from the back end using X Express, it automatically adds this header. Then it is adding content length and it is adding a date. It is adding a E tag and a connection close and you can see that this is the response that is being sent. You can even add your custom headers. For example I can say response do headers. Okay, response dot set header. Okay, so you can have a header like anything xpiy and you can set the value to as piushkar. Let's, let's say. So now see what will happen is if I do a send, you get seven headers and you can see that I have a custom header. So usually it's a good Practice that if it is your custom header. Usually we started with X. Okay, this tells that this is a custom header. Similarly, it's okay, it's okay. I mean if even I don't sit, that will work fine. But it's a convention that if it's a custom header then you should append it with like, you should pin it with the X hyphen like X powered by access thing. Okay, so this is how you can even send headers when you are sending back the response. So with this I have done my first task that was to get all the routes. So this is done. Now we have to get a route with the book. Now see guys, can you see on the client you have two books ID one, ID two. So let us say that I just, I want to get the book that is with ID1, right? Right. I just want to fetch all the data for this particular book. So what I can do is I want a route in which I can say something like books one. So this right now is sending a This should send me all the book data that has an ID Similarly books Now here, this is a dynamic parameter. This can be anything, right? This class can be anything. So what you can do in express is you can just say app dot get hey, if someone makes a request to books slash one. Now this is a, this should be a dynamic thing. So to make it dynamic you can just say colon and name this variable anything. For example I'll name it as id. So this particular thing, let me just, you know, complete this code. What this says that hey, slash books slash anything. This can be a parameter that is anything. It can be one, it can be two, it can be anything. It's a, dynamic. So now I want to get the value what user has added here. So so first of all you can get the id as request params. id if I have named this variable as XYZ so I have to say XYZ here as well. So this basically says hey, from the parameters get me the xyz. So whatsoever user will put here that will be available to me in the xyz. Okay, you can even have multiple parameters slash something which is, which is hard coded, right? Slash Then some dynamic parameter A. Then you can again have a dynamic parameter, let's say R. Then you can see you can access uh. id. r. something like that. But we are just interested in this thing. So I want to access the id. Now this id, this book ID I have to find in my Database. So books is basically my database. So I'll just say const book equals books, all the books dot find. Okay, I want to find one book where e dot ID is actually equals to the id. So it's kind of a database operation. Do you remember like we do like select star from books. Okay. Where ID equals. So you can just pass in whatever ID you have. So it's basically this kind of a thing that is I'm trying to mimic. Now see, there are two things. One, if there is no book, that means user has given you an ID. Let's say and there is no book with ID In this scenario, what should be the status code because it's a not found thing. So return response. status Let's send a JSON message which will say an error that I'll just say book with ID that whatever user has given does not exist. Okay, so this kind of an error. But if you find the book, you can just say return response. JSON and just send the book that you have found. Nice. Right? So you have coded it. So now if I say book slash error book with ID does not exist. Let me get all the books. So yeah, we have just two books. I want to just get the data for book two slash books slash to enter, and we got an error. Okay, I understand what the error is. The error is actually this ID is a string, okay? Because you are passing this two as a string. So there are two fixes and either you remove one equals, right, because it's a string. Now it will start working. See, in case of five you are getting error. In case of two you get the only book two. In case of one you only get book one. But if you don't specify anything, you will get all the books. Or what you can do is you can basically do a parse end, okay? You can typecast it to a number. Now here you have to put an extra check that if, if the ID is none, that means it's not a number. Maybe user is doing something like slash books, slash A. So A is not a number in this particular scenario. This is a bad request. Now see, now understand this thing. If I say slash book slash A, this is a bad request. A is not an ID, correct. So if you say HTTP status code bad request. So bad request, it's Okay? So means bad request. So that means what we can do is I can just say, hey, if it's a not a number. Return response. status400 okay. JSON and let's give a good error message that the ID must be of type number. Okay, that's it. So your ID must be of type number. Now see, if user specifies a, you get an error that hey, it must be a number. If you say six, it doesn't exist. It's a four or four. Right. In case of W, it's a bad request. But in case of two you get it. In case of one you get it. Right. So that's how. And if you don't specify anything, you get all the books. Nice. So this part is also done and we have done this part also. So yeah, you can read it. Okay. Then we have to set up a post route to add a new book. Okay. Now user can even add a new book. So let's continue from here. In the next video, I don't want to increase the length of the video. So right now what I will suggest you is that just try to understand this code, okay? Just try to read this code that what is happening in this code. So I'll just pause the video here. You can just pause the video right here and try to understand line by line for everything what we are doing.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "21-node-book-store-1.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/21-node-book-store-1.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0055437554,
      0.0018426572,
      0.04418202,
      -0.067401476,
      -0.0024706388,
      0.009942945,
      0.014945,
      0.014167209,
      0.005049999,
      -0.0032714168,
      -0.017192535,
      -0.011711957,
      0.014375022,
      0.020944683,
      0.14328867,
      0.0127415415,
      0.005005923,
      0.009594374,
      0.006246644,
      -0.046665594,
      0.0048911925,
      -0.0056245173,
      0.010222335,
      0.0016227623,
      0.0025713518,
      -0.005094054,
      0.0106624365,
      0.0017715243,
      0.010873249,
      -0.025208496,
      -0.010263274,
      -0.008168884,
      0.0056165704,
      -0.0037016391,
      -0.0032769183,
      0.0066558924,
      0.009237382,
      0.004081665,
      -0.021615904,
      -0.004417581,
      -0.012269503,
      -0.008383104,
      -0.0022584917,
      -0.010755779,
      0.0009991041,
      -0.008788582,
      0.0094896965,
      -0.00017923326,
      0.0016645791,
      0.0013175751,
      -0.016191488,
      -0.014369815,
      -0.020175457,
      -0.17432782,
      -0.018905912,
      0.009786366,
      0.013229405,
      0.014980362,
      0.008997616,
      -0.0035592697,
      -0.011715307,
      0.008415078,
      -0.042703696,
      0.012926359,
      -0.027121535,
      0.00058299024,
      0.01601533,
      -0.027041782,
      0.013227167,
      -0.008372637,
      0.012183623,
      0.023947412,
      -0.010078461,
      -0.037392378,
      -0.020486463,
      -0.015587726,
      0.008640087,
      -0.0020810512,
      0.0006049158,
      0.018490378,
      0.015048628,
      -0.012442217,
      -0.008620747,
      -0.0048808944,
      -0.023035694,
      -0.0155407,
      -0.015263351,
      -0.010070693,
      -0.011196021,
      0.008559603,
      -0.006781033,
      0.016988186,
      -0.007774434,
      -0.003933466,
      -0.0067413594,
      -0.00028036465,
      -0.0038713512,
      0.02779202,
      -0.011984419,
      -0.0023623945,
      0.015248111,
      0.004050592,
      -0.024627263,
      0.011652916,
      0.005949076,
      0.026753677,
      -0.006999664,
      -0.003046943,
      0.02628502,
      -0.008479393,
      -0.0010592544,
      -0.033390038,
      0.009236222,
      0.013163955,
      0.017470768,
      -0.17903301,
      0.024941782,
      -0.017262071,
      0.009831208,
      0.004830787,
      -0.017908154,
      0.0113242455,
      0.011571162,
      0.007575981,
      0.007545397,
      0.01751413,
      -0.0034869763,
      0.028199164,
      0.010425761,
      0.012632809,
      -0.0060679056,
      -0.021237954,
      0.018387407,
      0.009298268,
      0.030698566,
      0.021261755,
      -0.0055460907,
      -0.005549601,
      -0.009306861,
      -0.02316161,
      0.0006205868,
      0.041634724,
      -0.0028594444,
      0.0205265,
      0.013566682,
      -0.020244768,
      -0.024369357,
      0.031931296,
      -0.015092969,
      -0.024388889,
      0.008097021,
      -0.022959992,
      0.025739226,
      0.011651393,
      0.034033738,
      -0.041625563,
      0.0031088423,
      0.022953901,
      -0.0045516626,
      -0.0012598465,
      0.0014272002,
      0.015343324,
      0.008604351,
      0.036663525,
      -0.0011313615,
      -0.015846588,
      -0.019988876,
      0.00652257,
      0.020710697,
      -0.008017157,
      -0.014611255,
      0.0057672793,
      0.011262309,
      0.012517145,
      -0.006694464,
      -0.010436628,
      -0.003882712,
      0.0118544055,
      -0.005774787,
      -0.019305317,
      -0.011917451,
      -0.010183947,
      0.008128228,
      0.0012857866,
      0.02159962,
      -0.0085639935,
      -0.010196963,
      0.011055292,
      -0.0020136386,
      -0.0018690897,
      0.006287672,
      -0.014463556,
      0.005035074,
      -0.00625099,
      0.01268264,
      -0.022203084,
      -0.0043286984,
      -0.012175925,
      0.016599141,
      0.01571456,
      0.025447274,
      -0.009159387,
      -0.02497114,
      -0.007140943,
      0.010684751,
      0.020671386,
      0.02081388,
      -0.02540377,
      0.022828188,
      -0.00048411655,
      -0.020531991,
      -0.004368622,
      0.004499088,
      -0.0031661259,
      0.012227454,
      -0.020041285,
      0.028447283,
      -0.0043574027,
      -0.009873093,
      -0.02100054,
      -0.010975547,
      0.0010663094,
      0.018535795,
      0.03396114,
      0.0128340265,
      0.012080562,
      0.012061581,
      0.002703693,
      -0.0007392931,
      -0.0036393155,
      0.027997855,
      0.0063514407,
      -0.0051888227,
      0.000101057856,
      0.027279736,
      -0.008123796,
      -0.0060188915,
      0.012537195,
      0.017019887,
      -0.0059780683,
      0.0042413776,
      0.00030208012,
      -0.005287436,
      0.0033719447,
      0.021621041,
      0.0040992247,
      -0.025700517,
      -0.001751277,
      0.0031901647,
      -0.014510348,
      -0.023383116,
      -0.0064877127,
      -0.011353467,
      -0.0051121637,
      -0.01429664,
      -0.022653539,
      -0.010520703,
      -0.011158825,
      0.003890748,
      -0.01703782,
      -0.025711149,
      -0.021379847,
      -0.012785063,
      0.005662743,
      -0.0003841631,
      -0.028703576,
      0.0046907733,
      0.028260235,
      -0.029420327,
      0.0049038543,
      0.0013824414,
      -0.0041269097,
      -0.005022413,
      -0.0019966655,
      -0.0013942645,
      0.011087715,
      -0.09194227,
      -0.008208674,
      -0.0056245294,
      -0.042420972,
      -0.015029085,
      0.020856697,
      0.0006444022,
      0.006458983,
      0.013608268,
      0.014439695,
      -0.007712015,
      -0.010924207,
      0.023691347,
      -0.0052088657,
      0.0057292017,
      0.022741437,
      -0.01022168,
      -0.010793565,
      0.01080842,
      -0.03255303,
      -0.0038864557,
      -0.014023234,
      -0.005626609,
      0.0056388807,
      0.022574821,
      -0.0020344893,
      -0.022059407,
      0.010461323,
      0.019428208,
      -0.015060875,
      0.0022695647,
      0.017578794,
      -0.007339421,
      0.0010690057,
      -0.012125126,
      0.014614699,
      0.02782651,
      -0.017788323,
      0.019831125,
      -0.015307114,
      0.0109352935,
      -0.006118289,
      0.00987447,
      0.0033831487,
      -0.008073139,
      0.0027691072,
      0.006315746,
      -0.012509995,
      -0.017945224,
      0.0174865,
      -0.015250275,
      0.019480841,
      0.025179798,
      -0.029132688,
      0.014551165,
      -0.015447198,
      0.0109966025,
      0.005304518,
      0.013612802,
      -0.0014744386,
      0.0026263546,
      -0.0051490646,
      0.013988911,
      -0.0054622544,
      0.018699832,
      0.007741196,
      -0.0111090345,
      0.0106610395,
      0.0009458451,
      -0.023761014,
      0.0041764607,
      -0.011982991,
      -0.021903398,
      -0.028038932,
      -0.008302212,
      0.020817934,
      0.019292474,
      0.010866958,
      -0.030797357,
      0.009440818,
      0.020224785,
      0.0038066898,
      0.026079275,
      0.030386528,
      -0.005562644,
      0.0060774805,
      -0.00069155666,
      0.0037120706,
      -0.0038776472,
      -0.0010713505,
      0.01392631,
      0.031792443,
      0.0033375479,
      0.0029488248,
      -0.026174532,
      0.017854685,
      -0.009774165,
      -0.0037271685,
      -0.0044516483,
      0.024505438,
      -0.035152227,
      0.0016490426,
      -0.010687535,
      -0.010611263,
      -0.0024115785,
      0.026568782,
      -0.0010917984,
      0.0010939271,
      0.0067773284,
      -0.0030032299,
      -0.014578701,
      0.010933643,
      0.0017734788,
      0.0066651106,
      -0.01887547,
      0.013451339,
      0.0248745,
      0.012250313,
      -0.011116039,
      -0.014968126,
      -0.0006630753,
      -0.017044315,
      0.010512246,
      -0.0026894321,
      -0.0147144385,
      0.01192336,
      -0.032368984,
      -0.0005786277,
      -0.008141266,
      0.00066075765,
      -0.01288249,
      0.00031859407,
      -0.018308626,
      -0.012457018,
      -0.009823692,
      -0.012034595,
      0.009431454,
      -0.010443488,
      0.011465163,
      0.017674584,
      -0.021228638,
      0.00853274,
      -0.006897775,
      0.006787224,
      -0.011192437,
      0.0073903827,
      -0.0153352795,
      -0.0024521966,
      0.008723646,
      -0.012577312,
      -0.0035109392,
      -0.0061329375,
      -0.017244821,
      -0.0013440512,
      0.0022224588,
      0.003751527,
      0.0008214345,
      -0.0006871411,
      -0.033754285,
      -0.01664846,
      -0.018150413,
      0.013627983,
      -0.007432813,
      -0.014900699,
      -0.003539357,
      0.020250231,
      -0.007086647,
      -0.0010572883,
      0.0024876466,
      -0.011146541,
      -0.013731905,
      -0.009304387,
      -0.03183227,
      0.007852579,
      0.013130969,
      -0.0002718438,
      0.011533137,
      -0.02282776,
      0.007132606,
      -0.0016304808,
      -0.0039656195,
      0.0077326573,
      -0.0023903905,
      0.0030118579,
      0.010238619,
      -0.0074084303,
      0.012995412,
      0.003600252,
      -0.024067461,
      0.0063729966,
      0.0008340151,
      -0.0010938968,
      -0.0033080943,
      0.025165247,
      0.021365603,
      0.032831687,
      0.023266114,
      0.0020344558,
      0.005873536,
      -0.005073606,
      -0.008341616,
      -0.005774749,
      0.014438412,
      -0.017107766,
      0.011495228,
      0.01619749,
      -0.02112764,
      -0.026286263,
      -0.0026274377,
      0.0047101523,
      0.003210999,
      0.0065505337,
      0.024040658,
      0.0018182636,
      0.03529107,
      0.005331215,
      -0.012599896,
      0.022358019,
      -0.03131587,
      0.005908513,
      0.0119784735,
      -0.0074224714,
      -0.018974138,
      -0.0070889387,
      0.0025029862,
      -0.017140519,
      -0.02430806,
      0.015958898,
      0.002673328,
      -0.014884223,
      -0.0019187301,
      -0.027876928,
      0.032591227,
      0.020854842,
      -0.024497204,
      -0.019882305,
      0.018463893,
      -0.0144415945,
      0.0040906,
      -0.002812203,
      -0.0072542946,
      -0.017718226,
      -0.0076792375,
      -0.0033429007,
      0.005536436,
      0.00015174178,
      0.010649228,
      0.00075179344,
      -0.021428933,
      0.006633443,
      0.022197777,
      -0.00037023533,
      0.00006240734,
      -0.011186727,
      -0.01715808,
      0.012827857,
      -0.0009497673,
      0.0046012346,
      -0.009043108,
      -0.012326898,
      0.016105128,
      0.000751518,
      -0.004411213,
      0.012871463,
      0.009335453,
      -0.02921258,
      -0.011542614,
      0.0052528684,
      0.016467657,
      -0.12335511,
      0.0019925414,
      -0.0022412653,
      -0.015226575,
      -0.017307049,
      -0.008643918,
      0.019097328,
      -0.031371925,
      -0.011468206,
      -0.017468479,
      0.005823445,
      -0.0010197404,
      0.0073237126,
      0.02608811,
      0.0051571717,
      -0.012383771,
      -0.009112788,
      0.013646053,
      0.032018535,
      -0.0056477617,
      0.006202107,
      0.004030644,
      0.006544283,
      -0.01033094,
      -0.024779795,
      0.0045068613,
      0.023486089,
      0.0049375175,
      0.00044445245,
      0.008591108,
      -0.023029558,
      -0.020671522,
      -0.0012197746,
      0.009318888,
      0.010986954,
      0.011891942,
      -0.007882546,
      0.0028084754,
      0.028407698,
      0.003505258,
      0.019345453,
      0.026471103,
      0.025130639,
      0.003828209,
      0.018976955,
      0.030424124,
      0.011655812,
      -0.026774367,
      -0.006080737,
      0.028152535,
      -0.040636316,
      -0.026517795,
      -0.0052573276,
      -0.017463341,
      0.015752379,
      0.013585061,
      0.010383989,
      0.019079007,
      -0.008976707,
      -0.005560611,
      -0.011026878,
      0.027276138,
      -0.0054335524,
      0.029546238,
      -0.015642326,
      0.00579803,
      0.019830603,
      -0.022840727,
      0.009607039,
      0.00784709,
      0.000021712982,
      -0.020916408,
      0.00602257,
      0.017796902,
      0.0024925505,
      0.0027635635,
      0.0025678342,
      0.023586625,
      0.0062216995,
      0.013925089,
      -0.03259947,
      0.018163245,
      -0.05875185,
      -0.01625754,
      -0.032320008,
      0.0026511962,
      -0.0030444688,
      0.009858483,
      -0.0013761333,
      0.028331973,
      -0.0043114834,
      0.0039253454,
      -0.018091766,
      -0.007277332,
      0.020997947,
      -0.014906744,
      -0.021335559,
      0.012568038,
      0.006422208,
      -0.02194496,
      -0.015404704,
      0.011802418,
      -0.010379463,
      0.0025671069,
      -0.007604656,
      -0.008540498,
      0.0026941814,
      0.016105823,
      -0.00063062645,
      0.0055062007,
      0.005290792,
      -0.008232192,
      0.0003052826,
      -0.15470691,
      -0.0054767113,
      0.015717475,
      0.009846827,
      -0.003293427,
      0.00077527505,
      -0.009947882,
      -0.0022340668,
      -0.00030580247,
      -0.033431068,
      -0.011779592,
      -0.026663741,
      -0.01151854,
      0.0123377675,
      0.007102226,
      0.1295429,
      0.013992713,
      0.018211951,
      0.0002604631,
      0.0041653,
      -0.025348203,
      -0.003889136,
      0.006171882,
      -0.009650848,
      0.014173318,
      -0.009526773,
      0.01109144,
      -0.036794942,
      0.014445742,
      0.0066184266,
      0.010023801,
      -0.010656489,
      -0.015418623,
      0.038605615,
      0.009989553,
      -0.010240099,
      -0.0047555403,
      -0.02037169,
      -0.012540442,
      0.00048177678,
      -0.0011623005,
      0.001742267,
      -0.012295689,
      0.022541137,
      0.014969836,
      0.0062114527,
      0.009603441,
      -0.001081821,
      -0.010616248,
      -0.013352853,
      0.023693098,
      -0.059370928,
      0.0012991716,
      -0.018460017,
      -0.021790035,
      0.03008225,
      0.019225884,
      0.01667185,
      0.0041168835,
      0.006584165,
      0.0021638807,
      0.0009359689,
      -0.00038136946,
      -0.00928663,
      -0.00096972263,
      -0.010000037,
      0.011654451,
      0.021187894,
      0.028955897,
      -0.015811712,
      -0.009117087,
      0.0149104055,
      -0.000983302,
      0.01021416,
      -0.012537974,
      -0.015237155,
      0.010991957,
      0.028288282,
      0.0012330477,
      -0.009108544,
      -0.0009894115,
      -0.00253603,
      0.0020194836,
      -0.02196113,
      0.010214266,
      -0.018736208,
      -0.020140424,
      0.017581884,
      0.0012465599,
      0.00068543764,
      0.0070595844,
      -0.0068808817,
      0.0026805652,
      0.02275122,
      -0.01246768,
      0.006044148,
      0.0062499517,
      0.022775838,
      0.03480866,
      0.00004233779,
      -0.013582912,
      -0.023218088,
      0.0090030525,
      -0.015145898,
      0.007953473,
      0.015151039,
      0.018315693,
      0.02567403,
      -0.002544164,
      -0.0007321203
    ]
  },
  {
    "id": "genai_cohort_nodejs_22_node_book_store_2_vtt",
    "content": "Okay, so let's proceed further with our project. So now we have to set up this post route thing. So post route, you have to. Okay, so now this is something that I have to teach you that is really, really, really cool. Now see guys, what happens is when you make a post request, right? So let's go back. When you do a post request, do you remember that you have to even send a body? That you can send a body. Now for this body purpose, that is the actual data, we are again going to use JSON only. That means our backend, sorry, our front end, our client is going to send me the data as a JSON format. Now how will I know that this is JSON? So the client has to set some headers that hey, I'm sending a JSON data on the backend. We will read this JSON data and we will do the operation that means to create something and we will send an acknowledgement, okay, that your post has been created. So now what I will do is I'll just create a post route and app post that if you post something to books, this is where basically you are trying to create some data, right? And let's have request you have response. So what I want to do is as of now, let's just return a response. JSON saying that this is under construction, right? So I'll just send a message, message that this root is under development. Okay, so we have not finished setting up this. What I want to show you is what if I do a console log of request dot data. Sorry, request body. I mean, so let's understand that what this request body will give me if I send some data from the front end. Okay, so npm start working. Good. So now if I make a post request and in the body let's send some data. So let's send test and the value as abc. Okay. Or ancient. You see that what we are getting, you see we are getting an undefined what happened here? Even though I am sending some data and what you will notice is automatically the headers are being set to like JSON. I'll show you that. But can you see that we are getting undefined why the request or body is coming to be undefined even though we are sending this test. Okay, so now let me show you something also. So request console. log request. Headers. Okay, request headers. So let's understand, let's see what is coming from the front end. So if I do an enter, let's understand what happened. I got these headers in Which I have content type application/JSON. So who set this this Thunder client. So it is telling me that hey bro, I am sending you a data which is of type JSON but it is undefined. Oh okay, something is bad going on. Let's send some XML data. Okay, so XML data. Let's or maybe some text data. So this is a test. If I do a send now. So now content type changes to text plane. But still the, still the body is undefined. So what happens is see your backend, your Express has no idea how to like you know, parse how to read this different kinds of data. It can be adjacent data, it can be a plain data. Because it depends on the content type. Correct, it depends on the content type that what kind of content type is coming. And based on that this body has to be processed. So, so for that Express has a concept known as middlewares. Okay so there is a concept known as middlewares. So right now there is no need to understand what are these middlewares, but you can understand that these are something like plugins. So okay, so you can even use Sorry, let me just write plugins. So you can even use some built in plugins of Express. You can install plugins from the npm also and even you can build your own plugins. So there is one plugin, one middleware that is known as a JSON for a JSON parser. So how to use, you have to say app dot use okay app dot use and the plugin name. So application is this app. Okay dot use what I want to use, I want to use Express JSON. So what is this? This is basically a plugin. What this plugin is now doing is that if some data comes from the front end and it has a header that is application/ JSON, it will do all the transformations for me and give me the actual data in the request or body. So this plugin has been installed. Okay, so this is coming from the Express only built in one. So I have basically initialized this middleware I have put up, I have set up one middleware. Now let me just do an npm start. Now if I send a text data you can see I'm getting nothing. Correct, I'm getting nothing because it's a text. Let's try to send a JSON data. Whoa, do you see that I started getting the data. If I do send test anc. Okay, so if I do something like else as A and the value as bbb. So what you can see that I'm getting ANC bbb. So how I am able to get the data now because this plugin installed similarly have plugins for Express, Txt, Express, JSON. But we don't. We just want to have a support for JSON incoming calls, JSON incoming data. So this plugin has to be installed. Okay, so it's kind of a middleware. So I'll show you what is a middleware. We will have a dedicated videos on middleware. Very important topic. Now what I can do is I have the body. So from the body I have to extract some data. Okay, so I'll just say request body. So when you want to create, you have to give me a title and an author. So you have to give me title and you have to give me the author of the book. Now, now what I will do is first of all let's do a validation. If no title is coming or title dot trim or title is actually coming to be, let's say just an empty string. So this is a bad request, right? So return response status JSON and I'll send an error message saying that the title is required. So you know, this is the validation. Okay, good. I'll just copy this piece of code and I'll just repaste it. I hope you can see the code guys, right? I hope it is clear. Then I can just say if no author or author is an empty string in this case I'll just say author is required. Now if you are getting the title, you are getting the author. Now let's create a book. So I can just create a book. So book needs an id. So ID we will generate. How can we generate an id? I can just say take the existing books and calculate the length. So, so first is like id1, then id2, then id3, then id4, then you can put up title and then you can put up author. And finally what I will do is in my database. So books is my database right now. So books dot push the book. Okay, so what this will do, this will keep in the database and I will just say, okay, so first of all I have to return a JSON message. That book created success. Okay, so book created success. And I can send the ID that what is the ID of the book that you just made? So I'll just take the. Let me just compute the ID here. Okay, so ID equals books. Length. Just pass it like this. And just pass the id. And one more thing because now you have created a resource on the backend, it's, a. It's kind of like DB operation. So the status quo for this is not but So this indicates that something has been created. Okay. We have to use the correct status codes because that what makes us a good developer. Now if I go on the back front end, let's try to create a book. Send. Oh, we got a bad request. Title is required, guys. So title. So book is that master node js. Oh, author is also required. Who is the author of this book? None other than Piyush Kirk. Send. Okay, book created success. created ID Let's try to get all the books sent. Sorry, not this. Slash books. Right, so slash books. Oh, sorry. I made this book twice. So I have to do a get request. My bad. So now you can see that I'm getting, So this is my mistake. Okay, so we are getting ID as one. We are getting this book. We are getting this book, and we are getting this book. So right now we have four books. Right? And this should not be the case, right, guys? Oh, I. I see. I see. Actually, it should be plus one because, length is fine. Like first will, get first only. So it should be actually length plus one. Okay, so let me just do it again right now. How many books do you have? You have one. You have two. Now what I'll do is I'll just say, let me make a post request send. Book created. Now get request sent. Now you have three books. Let's create one more book. So master react. Okay, cool. Let's create one more book for maybe next year's. And, let's create one more book for Docker. Now if I try to get all the books you have, 1, 2, 3, 4, You have books. Let's. I want to get the details of book four. Okay, so this is the book four. Nice. I want to get the details of book five. Okay. I want to get the details of book six. Nice. Book seven does not exist. Right. So you can see that how we were able to create a post request which does validation creation and then return. Nice. So this is what your post route basically looks like. So, now in this particular video, you have learned one thing new, that you have a lot of plugins and known as middlewares in Express. Okay, how can you use. How can you initialize a plugin using this app. Use think. Okay. And in future, we are also going to create our own middlewares. Okay, now let's quickly Set up this delete route as well. Okay, so delete route. Basically you will pass me an ID and I'll delete that book. So it's somewhat similar to this, only. Okay, so if you want to delete a book, app, dot delete, app, dot delete. So this is the path. So you have to give me the book ID that you want to delete from the database. So request response. So first let's gather the id. So I'll just reuse the logic, right? So this logic can be reused that first of all, get the id from the parameters, I. e. request params. id, parse it as a integer. If it is not a number, then you can throw an error. Once you get it, let's try to, you know, get the index of that book. Okay, so how can I delete? I can just say const index to delete. Okay, so I'll just say books. find index back where e ID is actually equals to the ID. Now if the index to delete is coming less than zero, that is a negative number. This basically means that you were not able to find the book. If you are not able to find the book, it's a It's a that you are trying to delete a book which does not exist. 404, right. But if you find, you have to now delete this particular index. How can you delete that? So you can just say books dot and you can just say slice. Okay, so you can just place, start from this index. That is the index to delete and delete how many entries I want to delete one entry. Okay, delete one entry. So this is going to delete one entry. Okay. Inserted new elements in their place, returning the deleted elements. Nice. So this, this basically returns a deleted element. And finally I can just say return, response JSON of and I can just say. JSON and the message is, book deleted. Okay, book deleted. So let's try this thing. So now, right now, how many books do I have? See the thing is that it was in, in the memory. So because I refresh the server, I am back to the initial, state. Let's delete this docker book. Okay, so let's first create a book, right? So let's create a docker book. Let's create a, react book. And let's also create a node js. Book node js is already there. Let's create a, maybe docker is there. What else we can get? We can create js. Now let's try to get all the books. Okay, working good. Let's try to get a book by id. Okay, working good. Let's try to delete this book. I want to delete the fourth book. Okay, we got an error scanner set headers after they are sent to the client. Oh, we are missing some return statement. Oh, guys, my bad. See, this should be status, not JSON. My bad. Okay, this should be status, not JSON. Let's do it again. So first we need to create some books. Okay. So create a book. Create a Docker book. Okay. Create a, node js book. Nice. Let's get all the books. You can see that we have couple of books. Let's try to get the book number four. And now I want to delete it. Book deleted. Now if I try to get this book, I should get a because book with four doesn't exist. You can see 1, 2, 3, and then you have five. The book with four deleted. Okay, so this is how basically you can use it. And I, hope you like that. How we have implemented this and is there anything. So these are the routes that we have already done. So yeah, this was a pretty good challenge, right? We have learned a lot of new things in express with this. And that's basically how you will create your APIs. The only difference will be instead of this in memory DB you will have an actual database. It can be MongoDB, it can be. It can be postgres, it can be MySQL, any database that you like.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "22-node-book-store-2.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/22-node-book-store-2.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.006959146,
      0.01238111,
      0.0412137,
      -0.057715267,
      0.00008176576,
      0.0035310406,
      0.020697718,
      0.019345714,
      -0.0038351666,
      -0.005129626,
      -0.0025731346,
      -0.011521173,
      0.004506048,
      0.0015858918,
      0.13636091,
      -0.008678603,
      0.0071345377,
      0.013092597,
      -0.009640708,
      -0.03734506,
      -0.00037258957,
      -0.0152307665,
      0.012676696,
      0.00075230596,
      0.0051771556,
      -0.0061595375,
      0.014051621,
      0.0058052083,
      0.011631544,
      -0.017440261,
      0.009393921,
      -0.0074779857,
      0.024643408,
      0.0082197385,
      0.000026645315,
      0.020661391,
      0.023493119,
      0.002362869,
      -0.027350198,
      -0.0058635,
      -0.0026004307,
      -0.0055085574,
      -0.011703784,
      -0.003364489,
      -0.0045485506,
      -0.0036009045,
      -0.0026049803,
      -0.018801486,
      -0.016446574,
      -0.003187998,
      -0.0045832447,
      -0.009109715,
      -0.013288075,
      -0.16706109,
      -0.017878378,
      0.0036447945,
      0.014292343,
      -0.006223212,
      0.025770769,
      -0.00554088,
      -0.024704706,
      0.0070254016,
      -0.025974559,
      0.0071110376,
      -0.025039114,
      0.0058018505,
      0.009157494,
      -0.012795927,
      0.007533427,
      0.0044438955,
      0.019305406,
      0.035528854,
      -0.009185938,
      -0.020461455,
      -0.010006492,
      -0.0010323019,
      0.0085843615,
      0.005621301,
      -0.019103786,
      0.024577573,
      -0.003057894,
      -0.016789393,
      -0.009080702,
      -0.0052988594,
      -0.016889228,
      -0.0069883973,
      -0.0061979196,
      -0.010714121,
      -0.0050575417,
      0.010324892,
      -0.0070142103,
      -0.0040893247,
      -0.0039218147,
      0.0031164337,
      0.004250934,
      0.0032181211,
      0.014742935,
      0.022009559,
      -0.016294857,
      -0.0013328899,
      0.01866232,
      0.00599918,
      -0.029113794,
      0.018080996,
      -0.00018073508,
      0.017277451,
      -0.011346129,
      0.012043902,
      0.026091881,
      -0.015721878,
      0.014222524,
      -0.011481275,
      0.00647594,
      0.010288878,
      -0.0099961,
      -0.19540711,
      0.029192245,
      -0.007632363,
      0.008742576,
      0.020501345,
      -0.011880238,
      0.011691579,
      0.0064478456,
      -0.003789623,
      -0.003042776,
      0.008692709,
      -0.005273797,
      0.027134405,
      0.012026505,
      0.0038147974,
      -0.024890358,
      -0.026920754,
      -0.002723116,
      0.019282563,
      0.01584899,
      0.014838352,
      0.008148329,
      -0.01636049,
      0.00033325813,
      -0.010664059,
      0.014909401,
      0.03222995,
      -0.018188108,
      0.02391531,
      0.010069498,
      -0.009327993,
      -0.023469448,
      0.012262723,
      -0.0071638655,
      -0.016050685,
      0.015458587,
      -0.0072293147,
      0.014444363,
      0.014880501,
      0.030703124,
      -0.040937454,
      0.00015100317,
      0.00801009,
      0.0052971533,
      0.0068901014,
      -0.017101444,
      0.005123669,
      0.007581807,
      0.024592642,
      -0.0016077821,
      0.001033981,
      -0.022466851,
      0.014822796,
      0.013207514,
      0.0066565657,
      -0.0051055984,
      -0.0020823702,
      0.0051446888,
      0.013934168,
      -0.01544277,
      -0.010831311,
      0.0068625845,
      0.00083627773,
      -0.0016332004,
      -0.023939153,
      -0.0114682,
      -0.015645303,
      0.009520326,
      0.0057363384,
      0.008750015,
      -0.0065321317,
      -0.017129859,
      0.011784616,
      0.011035841,
      -0.020579534,
      0.0016330001,
      -0.008500541,
      0.010552644,
      -0.013716551,
      0.02213377,
      -0.010790666,
      -0.0043228623,
      -0.01907772,
      0.017664922,
      0.015213831,
      0.026747592,
      -0.005092989,
      -0.014080609,
      -0.012950844,
      0.016141074,
      0.013738159,
      0.0065715495,
      -0.012238879,
      0.01560588,
      -0.0011682776,
      -0.021390673,
      -0.017318618,
      -0.0015744311,
      -0.015089645,
      0.006121231,
      -0.020677885,
      0.01298349,
      0.00903978,
      -0.0124390535,
      -0.027593007,
      -0.015898574,
      -0.012539749,
      0.010204615,
      0.037802454,
      0.006806121,
      0.008530452,
      0.011906655,
      -0.00020325021,
      0.015202527,
      -0.018481467,
      0.008934459,
      0.01194301,
      -0.003759372,
      -0.0012303791,
      0.030199913,
      -0.008804253,
      -0.012377985,
      0.0119101945,
      0.018526852,
      0.0136012845,
      -0.0073450543,
      -0.0058111553,
      -0.002650724,
      0.0028270627,
      0.030795172,
      0.004053819,
      -0.028221687,
      -0.0118933795,
      0.00067267165,
      -0.011909467,
      -0.01691752,
      -0.013881666,
      -0.013057184,
      0.003305833,
      -0.005538337,
      -0.025103858,
      -0.013155144,
      -0.00019361493,
      -0.0052597737,
      -0.00835566,
      -0.010408384,
      -0.029869234,
      -0.009282547,
      0.0014903555,
      0.006352357,
      -0.03177025,
      0.004182189,
      0.021110259,
      -0.019513575,
      -0.0051138806,
      0.019328108,
      -0.006061287,
      -0.011482131,
      -0.0046204673,
      -0.015983103,
      0.004515494,
      -0.08454786,
      -0.00585861,
      -0.009250577,
      -0.030861558,
      -0.015937902,
      0.009689432,
      -0.010651393,
      0.016689712,
      0.006103234,
      0.015679961,
      -0.016342485,
      0.0006454964,
      0.02359684,
      -0.012138183,
      -0.016460592,
      0.026038148,
      -0.00227095,
      0.004028614,
      -0.0008350905,
      -0.025053998,
      -0.00086873194,
      -0.011155051,
      -0.004127077,
      0.004715768,
      0.028700199,
      0.01979305,
      -0.021318497,
      0.014270731,
      0.03436228,
      -0.010770056,
      0.0044450457,
      0.027782053,
      -0.0076601026,
      -0.017962977,
      -0.0049068583,
      -0.005163213,
      0.010448166,
      -0.02359718,
      0.009446581,
      0.003030857,
      0.0052166707,
      -0.0001026397,
      -0.0005304653,
      0.00961638,
      -0.01993307,
      0.009268442,
      0.0013778966,
      -0.014213972,
      -0.009882016,
      0.01387358,
      -0.012503161,
      0.007950842,
      0.015635652,
      -0.035368454,
      0.008515746,
      -0.006511558,
      -0.0029383285,
      0.0036203468,
      0.019546242,
      -0.008442209,
      -0.0024028851,
      0.007608933,
      0.0019383972,
      -0.015970938,
      0.02609286,
      0.01044457,
      0.011402011,
      -0.0052109063,
      -0.010320998,
      -0.013624293,
      0.012003684,
      -0.020743733,
      -0.030570395,
      -0.022743398,
      0.000387875,
      0.037577026,
      0.016727418,
      0.02010772,
      -0.023107309,
      0.016091112,
      0.0037164004,
      0.0049119266,
      0.028008599,
      0.04516187,
      -0.006389864,
      0.006273307,
      0.0046703373,
      0.0019106845,
      -0.0033442383,
      -0.010840214,
      -0.0028344223,
      0.02437108,
      0.0012958307,
      -0.000019982399,
      -0.012181435,
      0.024442706,
      -0.01312932,
      -0.0064880745,
      -0.005225112,
      0.009485913,
      -0.01634169,
      -0.0037750287,
      -0.02028635,
      -0.009004587,
      -0.009774106,
      0.03136036,
      -0.00364509,
      0.0036056628,
      0.0013893654,
      -0.0045359046,
      -0.002357528,
      -0.004986683,
      -0.012440813,
      0.004469243,
      -0.030351562,
      0.028655894,
      0.021745322,
      0.014571177,
      -0.024267098,
      -0.026104392,
      -0.012781551,
      -0.014299105,
      0.011658776,
      0.014225934,
      -0.024066316,
      -0.0024298327,
      -0.022459636,
      0.003442758,
      -0.0086579835,
      -0.021434331,
      0.0021530313,
      0.008683251,
      -0.026306113,
      -0.011688936,
      -0.0032604923,
      -0.026590602,
      0.021469692,
      -0.0020138472,
      0.013745666,
      0.019682726,
      -0.017836403,
      0.0038342052,
      0.01037193,
      0.004387344,
      0.0019808947,
      0.011727104,
      -0.012613201,
      -0.008369207,
      0.010312707,
      -0.0022027623,
      -0.011333313,
      0.007988712,
      -0.016781835,
      0.0038913444,
      0.0142608415,
      0.013531853,
      0.01224091,
      -0.0029564258,
      -0.0075059463,
      -0.013743374,
      -0.012576643,
      0.014830361,
      -0.025061382,
      -0.019438187,
      -0.0024495472,
      0.025944136,
      -0.0047620423,
      -0.0005265071,
      0.008860546,
      -0.004802872,
      -0.016087169,
      -0.008479398,
      -0.037811562,
      0.0032352814,
      0.00463227,
      -0.0049905865,
      -0.0005756094,
      -0.012955789,
      0.016922863,
      0.008768494,
      0.010105659,
      0.013355822,
      -0.029691674,
      0.0029041748,
      -0.0075763026,
      0.011886977,
      0.021011911,
      -0.013891098,
      -0.013659089,
      0.010830751,
      -0.0126406,
      0.008842555,
      -0.005978544,
      0.018951254,
      0.012061901,
      0.026317902,
      0.021389956,
      0.0050087706,
      -0.0040279618,
      -0.0057571847,
      -0.01626645,
      -0.0056988164,
      0.012444071,
      -0.0068294513,
      0.0244291,
      0.012619913,
      -0.034629434,
      -0.006624612,
      -0.0057509984,
      0.012796416,
      -0.004598011,
      0.01676427,
      0.020225156,
      -0.0072601167,
      0.03450407,
      0.01083036,
      -0.012160257,
      0.017069941,
      -0.021122904,
      -0.008167943,
      0.021751933,
      -0.016767066,
      -0.027360737,
      0.003183471,
      0.006055587,
      0.004281682,
      -0.024410203,
      0.0089273555,
      0.013446551,
      -0.019595036,
      -0.01156174,
      -0.0070359632,
      0.031052353,
      0.028215822,
      -0.005298675,
      -0.012740743,
      0.024477525,
      -0.008671809,
      0.021755902,
      0.006935508,
      -0.0011820326,
      -0.0027655296,
      -0.012060214,
      -0.008737187,
      0.011902771,
      0.0016682356,
      0.021584233,
      0.006345401,
      -0.010222981,
      0.018804146,
      0.020253556,
      0.017218832,
      0.0072544576,
      -0.021508742,
      -0.011758842,
      0.025680654,
      0.00399004,
      0.0038356679,
      -0.009792948,
      -0.0059162094,
      0.0016162269,
      -0.012558355,
      0.007489739,
      0.002114785,
      0.0056477063,
      -0.015289155,
      -0.0040439176,
      -0.0038219886,
      0.02753616,
      -0.12037423,
      0.008462723,
      -0.009923558,
      -0.013409593,
      -0.005483238,
      -0.009521518,
      0.031358942,
      -0.03459762,
      -0.015766071,
      -0.027926503,
      0.0011077286,
      -0.0016047923,
      0.00435248,
      0.028134027,
      0.008119906,
      -0.0012286269,
      -0.009685156,
      0.030862201,
      0.030117527,
      -0.006812041,
      0.0066778334,
      0.0062938505,
      0.003483669,
      -0.0050880816,
      -0.008430196,
      0.015090883,
      0.009198884,
      -0.012730441,
      -0.0067260214,
      0.013822531,
      -0.023680218,
      -0.017900819,
      -0.01755934,
      -0.0002167787,
      0.015767569,
      0.004670788,
      -0.010739867,
      0.0037872773,
      0.012525245,
      0.008133195,
      0.034058806,
      0.012080899,
      0.024748135,
      -0.0085608745,
      0.0053023417,
      0.0051815687,
      0.02969955,
      -0.030258387,
      -0.011514763,
      0.042728968,
      -0.0358968,
      -0.017965738,
      -0.012056192,
      -0.005184015,
      0.0147441905,
      0.0148472125,
      0.0062415437,
      0.019685201,
      0.008592017,
      0.0010356694,
      -0.015710512,
      -0.000032462176,
      0.0010078542,
      0.029902574,
      0.0005286152,
      -0.0015747739,
      0.029431257,
      -0.009945657,
      0.0076251416,
      0.0044426755,
      0.012983829,
      -0.00971156,
      -0.0035777723,
      0.02599528,
      0.0056899847,
      -0.0031914923,
      0.0055167847,
      0.005833876,
      0.005538197,
      0.014025834,
      -0.0092294505,
      0.0033298896,
      -0.066012956,
      -0.025086455,
      -0.008618141,
      -0.0018133527,
      0.02215334,
      0.0140271345,
      -0.0066056275,
      0.019426616,
      0.0020975613,
      0.0071356096,
      -0.011848666,
      -0.01818781,
      0.014452388,
      -0.019798705,
      -0.023567058,
      -0.00034642496,
      0.016761018,
      -0.029471425,
      -0.022708356,
      0.0053089596,
      -0.0068774763,
      0.0016907109,
      -0.005535339,
      -0.008716742,
      -0.007006215,
      0.028046947,
      -0.014925521,
      0.02391336,
      -0.008796258,
      0.003975309,
      0.015640019,
      -0.15014045,
      0.0008906771,
      0.0045767413,
      0.014039489,
      0.0004017579,
      0.021223444,
      0.0009328887,
      -0.006348836,
      0.00837676,
      -0.03722151,
      -0.0057134368,
      -0.016118797,
      -0.01887505,
      0.017059593,
      -0.0069707935,
      0.13951434,
      0.019031852,
      0.008810506,
      0.014868377,
      0.0061182487,
      -0.015412731,
      0.004939795,
      -0.005964455,
      -0.023748584,
      -0.003522388,
      -0.01143544,
      -0.0013709505,
      -0.025028175,
      0.024777174,
      0.0035232436,
      -0.001758997,
      -0.027465587,
      -0.021504968,
      0.028012842,
      -0.00015337669,
      -0.016533276,
      0.0074155917,
      -0.018952323,
      0.0013044777,
      0.00357664,
      -0.013134459,
      -0.0018763706,
      -0.0072985934,
      0.017018454,
      0.0049869446,
      0.012699236,
      0.016062928,
      -0.0045335153,
      -0.01853148,
      -0.011609007,
      0.029947609,
      -0.05886624,
      -0.012153292,
      -0.014629317,
      -0.016296374,
      0.025538662,
      -0.00018398109,
      0.025685487,
      -0.008640468,
      0.008685952,
      0.004888748,
      -0.0024620683,
      -0.003960849,
      -0.0014769855,
      0.00027106024,
      -0.0061828196,
      0.0060004015,
      0.010448038,
      0.030070173,
      -0.008742992,
      -0.015179124,
      0.0051516434,
      -0.015977958,
      -0.0061921165,
      -0.025158295,
      -0.0045670453,
      -0.004476495,
      0.025476059,
      0.014170606,
      -0.009505332,
      -0.005122751,
      -0.0037823108,
      0.012667213,
      -0.012869604,
      0.019334892,
      -0.0014371607,
      -0.014093484,
      0.013235,
      -0.0050280844,
      -0.00044458787,
      0.023263434,
      0.0046381927,
      -0.00023413831,
      0.029880254,
      -0.010691938,
      0.009560577,
      0.019467557,
      0.005404952,
      0.033495866,
      -0.002541679,
      -0.019188153,
      -0.02067432,
      0.008398786,
      -0.022718644,
      0.011816807,
      0.009836629,
      0.0119837085,
      0.013175354,
      0.0011600822,
      0.0062379506
    ]
  },
  {
    "id": "genai_cohort_nodejs_23_node_express_middlewares_vtt",
    "content": "Hey, guys, and welcome back to another exciting video. And in this particular video, let's cover the topic of middlewares. So this middleware thing in Express is really, really, really powerful and very important to understand. And trust me, I am going to make the understanding of middlewares so easy. Okay, so in the previous, class, or I can say in the previous video, we have built this project that was a bookstore. We have used one middleware that was this express JSON. And kind of, you have at least I think or 2% idea that what this line is doing, right? It is doing some magical things inside it that uses the headers, I. e. content type JSON and converts the body into a JSON and gives us the access as a body so that if there is a, post route, we can use request body to get what is inside the body. Now let's understand that what exactly is a middleware? And now you are going to understand this particular middleware in a more cool way. Okay? Okay. In a more good way, I should say. So let's start with the middleware. So let's say that you have a user and that particular user makes a request, right? Makes a request where? To your Express server. So here is an incoming request to the Express server. Okay? Now what this express server is basically, right? So if I go back, can you see that you are creating an app here? With this Express, you have created an app, and now everything that you do, like you register your routes, you register your middlewares, you listen to this app that is using this app object, correct? That is using this app thing. Now what Express does, Express basically forwards this request or gives the capability to this app thing to handle this request, right? So that means all the requests that comes to your server, that goes to this app variable. So this is kind of your request handler, okay? So this is your request handler thing. Okay, that's good. That's good. Now what this app does, app, basically reads that what kind of incoming request you have, like if it is a post request, if it is a get request, on which path you are sending the request, and smartly and internally it figures out that on which route that the code should be executed, right? So let's say if this was a get route, so let's say that the request was coming to a, get to books. So what this particular route is going to do, what this app is going to do. If the request is coming here, this particular request will be forwarded to the appropriate route. This request will be forwarded to appropriate route in our case, this is the route. So this particular request is basically forwarded. Just one second. So this particular request is forwarded to this route. Similarly, if the request was coming to, let's say, get books one, so what this app will do, this will smartly forward the request to, to this particular function, right? So that means this particular request will be forwarded to this particular route. So these are routes, correct? You have route handlers. So this is the whole purpose of the app. So this is how you have structured your, app right now. And, and this whole part, this whole part is handled by Express, correct? So that means if I rewrite it again, it's like, hey, you have a user, okay, user is making a request. That request goes to the app, okay, that request goes to the app, and app smartly routes the request to the, to the appropriate route. Now what are middlewares? Okay, now in this particular whole chain, where are the middlewares? So what Express allows you to do is. Express says that, hey, bro, in this particular layer in from app to route, you can define your own custom middlewares. Okay, what do I mean by these middlewares is that you can write a piece of code here in between. So let's say that this is my. Some piece of code. So what will happen? Every time this app sends a request, it will not be sent to the route directly. This app, can actually give the request access to you. And then you can internally, like, you know, you can internally do something with this request. For example, maybe you want to log the request, right? You want to log the request to a log. txt file. Maybe you want to do some database operation. So basically what it is doing is it, this lets you write an interceptor, okay? So kind of an interceptor that is sitting in between, it's kind of a man in middle. So there is a man in middle who is between every request. And whenever there's a request, you can execute a custom piece of code. This custom piece of code can do literally anything. A, database operation, some file writing, anything that you want to do, and then you can forward the request to the root, right? So this gives you a capability to do anything between the request. So this particular thing is known as a middleware. So this is what, this is a middleware. Okay, so now you have got that what a middleware means. A middleware is a piece of code that runs in every request and which sits between app and the router. So if there is any request coming to your route, you can have a middleware in between to run that code. Okay? So this was the very simple thing of a middleware. So middleware functions are functions that have access to the request and response and next function in the application request response cycle. Okay? So what middlewares can do, it can execute any code, it can make changes to your request and response. So let's understand what they are saying. Now this particular thing is a very high level understanding of middleware. Now let me show you that what middleware can do. Let's say you have an incoming request, okay? So this is your incoming request from the user. So this request has to finally go to a route, correct? So I have omitted the app and all that thing. So what you can do is, number one, there can be n number of middlewares, okay? It's not necessary that there can be only one middleware. There can be n number of middlewares. So you can have five, you can have 10, you can have middlewares, okay? So let's say that I write one middleware here, then I write one middleware here, Then I write one middleware here, THEN I write one middleware here. So right now, how many middlewares do I have? I have four middlewares and these four middlewares are responsible for doing something. Something. For example, maybe this is your JSON parser. Maybe this is for, querying, maybe this is for the validation that if the request is valid or not, maybe you can do something like, hey, if you are a hacker or not, and this can do something like, you know, logging all the requests so you can have multiple middlewares. Okay? Now middlewares, middlewares can do following things, okay? Can do following things. Number one, it can, it can read the request, okay? Number one is that it can read the request. For example, when a request is coming, it will not go to the route, it will go here. And this middleware has full access to the request object that what kind of method it is, what kind of, data it is coming from, where this request is coming. This middleware can read the request, okay? Secondly, this middleware, this middleware, middleware can terminate, or I should say can terminate the request response cycle. Okay, what does this mean? This is, this is very, very important. Okay? This means let's say this middleware was a hacker, checking middleware, okay? So this basically checks that if you're trying to hack something or not. So what this middleware can do when a request comes, let's say request is coming to books, okay? A get request is coming to books. So this Particular middleware has some algorithm written which checks the request and it has detected that, hey, you are a, hacker. Do you want to allow a, hacker to access to this route? Because this is your final code, right? This is the final code that interacts with the database that does all the CRUD operation. So this is your final code. Now, do you want the hacker to reach here? Of course not. Right? You don't want. So this, this middleware right here can even send back the response. This can terminate the request response cycle. This can end the response, and boom, your request response cycle is completed. So user was never able to. Okay, so this basically, you know, rejected the call, or I can say this returned the response. So this middleware will never let this request to go to other middlewares or even to the route. So middlewares can even terminate. Okay, what else middlewares can do? Middlewares, okay? Middlewares can forward the request to other middleware. Okay, so what does this mean if this user is not a hacker? Let's say that this user was fine, this is not a hacker. So after the validation, this middleware can route the request. It can say, hey, I have done my work. Here is the request. Now, now it's time for this particular middleware to execute. Let me just make it like this. So now this middleware will execute. Now let's say that, his duty is to do something, right? So let's say his duty was to log it. So once the logging is done, it can forward the request to him. Now this can do something like, hey, are you logged in or not? If you're not logged in, it can return back, right? Let's say user is not logged in, it can return back that, hey, please log in. But if the user is login, then it can forward the request to another middleware. Then this can do something, and then finally it can call the route. So this is how the middlewares are working, right? One after another. So that means, middlewares always run in sequence, okay, in sequence as they are in the stack. So that means what if this middleware is A, this middleware is B, this middleware is C, this middleware is D. The a middleware can either terminate the request, right, by sending the response back to the user, or it can just forward the request to the B. It cannot directly jump to the C. Okay? So it can forward the request to the next middleware in the stack. So A will say, hey, I have done my work and I allow you to go to the next one. Express will internally forward this request to B. Okay? Now, B can either terminate the response or it can say, okay, I have done my work. I have to forward this request to the next one. So he will be the next one. So now he will do the work. Now he can say, hey, if everything is good, I want to forward it to the next one. If he will say the next one, that is the route. So that means you can just say, that whether you want to pass the request to the next one or do you want to terminate it? Okay, you cannot decide on which middleware it should go. So that is how basically it works, right? Right now you just have one middleware that is app. use, that you are using express JSON. So that means what this thing is doing. Okay, what this particular thing is doing. Let me show you. So right now in our bookstore application. Sorry for that. Right now in our bookstore application, when a request comes, okay, what this middleware does, okay, this middleware. So this is a middleware. If headers have, if headers have content, type application/JSON application, JSON. What it does, it does some parsing, right? This is the logic of this thing. So it will do some parsing and all. And then call the next middleware. It will call the next middleware. Who is the next middleware? Right now, next middleware can again, be a middleware which you have defined. That is possible because this thing has no idea, right? What is the next? It will just say, hey, I have done my work. Call the next one. Now, next one can again be a middleware which you have defined, or it can be a route. So in our case, right now we have a route only. So this calls the route. So right now, can you see any other middleware? No. So what will happen when the request will come, it will first go into this middleware. This middleware will internally call the next function, which is in our case, routes. But what if I create one more middleware here? Let's say middleware A. So what will happen? This can only forward the request to middleware A. And middleware A can decide whether should I forward the request to the routes or should I terminate it. Okay, so can we see the code to this JSON? I, mean, you can see, but yeah, that's fine. Okay, so let me show you that how we can write, our own middleware. So shall we write our own middleware? Let's see. So what I can do is I have to write a middleware here, app dot use, and here you have to Pass A function. Okay, now this function has access to the request. You can read the incoming request. If you want to end the response, you can do this and, the next. Okay, now let's say console log. I am, middleware A. Okay, I'm just saying it that this is middleware A and I just want to do nothing. Can you see that? Neither I am terminating the response nor I'm doing anything. Fine. So what this will do is this is actually holding on to the request and I am not completing the request response cycle. So if I run the server. Okay, let me just run the server now, see what will happen. Now this is very bad thing. Let me just go to my thunder client. If I make a get request on books, what do you see that my request is always stuck. Do you see what happened? That I am in middleware A and this request is stuck. Let's make a request on book one. Okay? So I have to first cancel this request and do it again. I am middleware A and nothing is happening. Nothing is happening. Why? Because this middleware is holding on to the request, right? So nothing is happening. Let's do one thing. Let's just say return response JSON and I'll just say message. Boom. I am, a, middleware. So what this middleware is now doing is it is basically returning the response back. Something like this, right? It is basically returning the response back. It is not letting other middlewares run. So now you will see that no matter what I do, if I go on here, I am a middleware. If I make a get request on this middleware, if I make a post request, I, am a middleware. Can you see that? Always the middleware A is running and it is returning the request. So this middleware in the stack is not allowing the other middlewares or other things to run because you have a early return. What if I want that? Hey, I have done my work. Now I can just say, hey, next. Okay, I can just call the next function like this. So this next function will automatically call whatever is the next thing. If next is the route, it will go to the route. If next is something else, like it's a middleware, it will go there. So now if I run this code, let's say if I make a get request, you can see that we are getting books. Right? We are getting books. Let's say if I make a request to book one, you can see everything is working fine. Okay, let's create one more middleware. So app use again a function request response and next. Okay, now in this scenario, what happens when you have one more middleware? Let's say that this is your middleware B. Okay? Now this is your middleware B. Now this next will call this middleware. If this was not there, then the next is basically your routes. But if you have one more middleware, this next is going to call this middleware. So now let's say this returns a response JSON saying msg, message boom. I am B. So now what will happen is A will console log itself, but it will call the next function, right? Next is this middleware. This middleware will run, but it will always return the response. So that means A will run. B will always return back the response. So now what you will notice is that no matter what you call, you will always get it from the B, right? No matter what you're saying, you can see A and B are running and you are always getting it back. Now let's say I want to pass it, right? I can just say next, right? I want to just pass it. So this will also pass. This will also pass and everything will work. So middlewares will work always in sequence. See A and B. So right now, how many middlewares do you have? You have three middlewares. 1, 2, and This middleware does it jobs and calls the next function for this particular middleware. Who is the next? This is the next. Now it does its job that is just a console log and passes to the next one. So this one passes it to the next one. And that is where your roots come. Now let me show you one practical use case. Okay? Do you remember that thing that whenever there was an incoming request, we used to log it. Do you remember that particular code? So what I can do here is I can say app, dot use I will write a function, request response. And next I want to create a log. Okay, so let's create a log. So log basically looks something like this, right? So you will have date do now. And then you can just say, hey, there was a request, method, request method on which path the request was coming. So request path, okay? And you can even do body and all. And then what you can do is you can use the FS module to write. So const fs. Okay? Equals require the FS module and I should actually say node fs. So now what I can do, I can just say fs. append file synchronous, that is logs txt I want to put up this log as UTF8 and then call the Next function. So that means anytime the request comes first, the JSON parsing will happen. Then you are going to create a log and then let the appropriate route handler handle that particular request. So now let's. You can see that I don't have any logs. Txt file. Let's get all the books. Okay. Oh, there is a logs. Txt file. Nice. What is there? This thing. Oh, by the way, I again forgot to do a slash N. Okay, so don't forget this. Now let's try to get a book by one. Let's try to get a book by four, which is of course Let's try to make a new book. Right, So a new book has been created. So now if you see your logs, can you see that? Yes, everything is getting loud. So that is the functionality of a middleware. So middlewares. Okay, now if you read back. Okay, now if you go back. Middleware functions are functions that have access to request, object, response, object, and the next function. Right? This is what we have. Understood. Nice. In the applications request response cycle, the next function in the function in the is a function in express which when invoked executes the middleware, succeeding the current middleware. So that means it's saying, hey, every middleware has access to this next function which when executed will call the. Will execute the next middleware in succeeding the current middleware. What middlewares can do, it can execute any code, it can make changes to the request response objects, it can end the request response cycle and it can call the next middleware in the stack. So this is how you can create a middleware app. Like it can. It's a get app. Use. So this is also actually a middleware function. So yeah, you can just ignore it. So let me just show you. So see what they're doing. They are creating a logger. Do you see that? They have created a logger. This does something and calls the next function. Then you can just say app, use my logger. So what is happening is on every request, on every request, this middleware is going to run. That is this one. You are going to do a console log and call the next one. So this is your middleware. Okay, now let me show you some practical examples where we use the middleware. Okay? So moving further, let's say so you will have a request. Okay? So users are going to make a request on some server. So what we can do is when the request will come, we will have a middleware. What this middleware will do. Okay, what this middleware is going to do is this is going to check for the authentication check. Authentication authentication basically means that if user is logged in or not, we can write a logic that if the user is not logged in, right? If the user is not logged in. So I'll just say not logged in. So we are just going to say forbidden. So we are going to say, hey, you have to be logged in, right? So forbidden, please come back logged in. But if the user is logged in, we can forward the request to the appropriate route handler. So this is one example where you want to use a middleware, okay. To protect your APIs. Similarly, you can have one more middleware in this tag that is for authorization. So that means let's say the user is logged in, but now you want to check if it is, if he's authorized to do that. For example, let's say user is logged in, but he's trying to access something which is only restricted to the admins. So what we can do is you are logged in, that's fine, go to the authority. Middleware authority will say, hey, you are not authorized to do this. If you are not authorized, hey, just return back the response. Okay, you can just say you are not authorized to do this, you are logged in, that's fine, but you are not authorized. Okay, but if you are authorized, if you are authorized, then only I, will pass it to the appropriate route handler. So this is how in reality we can use middlewares. Got it. So middlewares ensure safety. The code is good, the code quality remains good. And you can see that how the middlewares are helpful. Okay, so that was all about the middlewares. So now moving further, we are going to be using middlewares. And one thing I really, really, really recommend you is to go through this documentation. So this is nothing. It's basically if you go into the guide and you go in writing a middleware, using a middleware. So you can just click on here and you can just understand that what middlewares are and why they are so useful. Okay. Like you can validate cookies in the middleware, you can do authentication stuff a lot. So don't worry, we will do that. Okay. So I hope you have understood the concept of middlewares in express that how middlewares work.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "23-node-express-middlewares.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/23-node-express-middlewares.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.007945014,
      0.012142364,
      0.034077484,
      -0.056027103,
      -0.001944398,
      0.011427462,
      0.027667532,
      0.015642712,
      0.013762497,
      0.00020151073,
      0.0044032913,
      0.0044584963,
      0.0026033558,
      0.018015837,
      0.11628309,
      0.0017908154,
      0.012849968,
      0.0009398334,
      0.00552424,
      -0.038960923,
      0.00085825124,
      0.0040747295,
      0.0056520654,
      0.009105162,
      -0.004199741,
      0.022276286,
      0.0032568253,
      0.0045577018,
      0.015022752,
      -0.01928777,
      -0.010951617,
      -0.004831353,
      0.0242625,
      0.023106964,
      -0.011610135,
      0.027852507,
      0.016112959,
      0.0076359934,
      -0.031632435,
      -0.016056366,
      -0.02451098,
      -0.012724997,
      -0.00094385346,
      -0.002403334,
      0.008913206,
      -0.0012067552,
      -0.011021235,
      -0.02302688,
      -0.0012964807,
      0.01047429,
      -0.006662761,
      -0.0015200722,
      -0.021987863,
      -0.17821074,
      -0.0065685557,
      0.013119978,
      0.00508772,
      -0.0049500647,
      0.020977335,
      0.0074452073,
      -0.033843495,
      -0.0016493221,
      -0.03075905,
      0.027720291,
      -0.02198251,
      -0.0045260573,
      0.010971966,
      -0.007018515,
      -0.004821283,
      0.00512474,
      0.018449618,
      0.030755877,
      -0.01859904,
      -0.015042262,
      -0.018727409,
      -0.0076123257,
      0.0012704865,
      -0.009223985,
      -0.017809235,
      0.025116064,
      0.014000426,
      -0.0032939082,
      -0.005515544,
      0.0011486753,
      0.00078304496,
      -0.0059487056,
      -0.013985083,
      -0.0053204163,
      -0.006585962,
      0.018345423,
      0.0033413249,
      0.0029759796,
      -0.010537491,
      0.0040113255,
      0.00043196062,
      -0.0046903347,
      -0.014896573,
      0.0091109555,
      -0.012698697,
      0.0030427708,
      0.005023055,
      0.01708883,
      -0.019661726,
      0.017411513,
      0.0067034494,
      0.0209859,
      -0.015368398,
      -0.009092065,
      0.012476759,
      -0.00662918,
      0.005794268,
      -0.008589873,
      0.012839866,
      0.016484862,
      -0.007724896,
      -0.20256507,
      0.03063139,
      -0.009118832,
      -0.004040837,
      0.022933045,
      -0.01578907,
      0.0055662976,
      0.017956872,
      0.000592437,
      -0.01722986,
      0.02423246,
      -0.0027120626,
      0.035734486,
      0.014230725,
      0.012440668,
      -0.02170592,
      -0.017495774,
      0.00806685,
      0.03501066,
      0.0054278164,
      0.017691448,
      0.0050625973,
      -0.008374037,
      -0.016447918,
      -0.009696012,
      0.01660646,
      0.022501625,
      -0.006438605,
      0.02513081,
      0.015645297,
      0.011650486,
      -0.017786236,
      -0.0024294222,
      -0.0077364068,
      -0.014872125,
      0.038577553,
      -0.022693666,
      0.008359495,
      0.012083018,
      0.019449921,
      -0.03346607,
      -0.0034172742,
      -0.009740735,
      0.012673608,
      -0.0036110864,
      -0.007437976,
      0.0057534226,
      -0.0016606773,
      0.021076128,
      -0.006738571,
      -0.004626074,
      -0.019582503,
      0.027348783,
      0.0040024943,
      0.0005705766,
      -0.023100214,
      -0.0044772294,
      -0.0025988582,
      0.011734516,
      -0.020365642,
      -0.01022296,
      -0.0071143806,
      0.01049592,
      0.013981854,
      -0.035902597,
      -0.017926859,
      -0.008796061,
      0.0065466436,
      -0.0038717994,
      0.017880578,
      0.0021725397,
      -0.020462018,
      0.00825316,
      -0.005859856,
      -0.019730771,
      0.009051358,
      -0.014477738,
      -0.010247319,
      -0.007593929,
      -0.00046546428,
      -0.01470539,
      0.00040220944,
      -0.0036838094,
      0.012069372,
      0.028258389,
      0.009309957,
      0.0041450663,
      0.0046858806,
      -0.014183893,
      0.015178241,
      0.012193553,
      0.023942098,
      -0.012127183,
      0.008505163,
      0.025154995,
      -0.019284597,
      -0.011230448,
      -0.019927854,
      -0.026877934,
      0.014806753,
      -0.019360568,
      0.011742462,
      0.0007354289,
      -0.005265987,
      -0.02342413,
      -0.010597702,
      -0.0054228664,
      0.010394773,
      0.020549348,
      0.0070073493,
      0.0143979415,
      0.0125895385,
      -0.0108964555,
      0.008137442,
      -0.024582086,
      0.014667112,
      -0.0010445137,
      0.0053947573,
      0.006762519,
      0.02862384,
      -0.00062654726,
      0.0028680435,
      0.021717258,
      0.015066911,
      0.006990901,
      -0.0018957395,
      -0.011283819,
      0.0031877058,
      0.0067849034,
      0.019313067,
      0.009455802,
      -0.026909426,
      -0.012692023,
      0.0040221666,
      -0.038364872,
      -0.016739678,
      0.010294536,
      -0.0109141525,
      0.00692854,
      0.008757192,
      -0.021926705,
      -0.02646104,
      -0.0029699844,
      -0.005149339,
      -0.025293041,
      -0.0093527045,
      -0.017997945,
      -0.0062498255,
      0.0028863072,
      0.010309226,
      -0.0107185,
      -0.0013740297,
      0.036710415,
      -0.026619703,
      0.00053710357,
      0.018483859,
      -0.0031130526,
      -0.011670637,
      0.0027619593,
      -0.008434734,
      0.0046663308,
      -0.06870772,
      -0.00040507672,
      0.008370764,
      -0.013264575,
      -0.02190344,
      -0.0127489725,
      -0.0076498888,
      0.014139609,
      0.014662297,
      -0.002157068,
      0.0020975072,
      0.0067081247,
      0.019833436,
      -0.0089999335,
      -0.01413795,
      0.02798425,
      0.004070482,
      0.0021818702,
      0.0042607104,
      -0.014955071,
      0.00030726707,
      0.0007750537,
      -0.009293895,
      -0.0018415551,
      0.01707191,
      0.021784673,
      -0.02519128,
      0.0012185681,
      0.0370967,
      0.0093973195,
      0.0050846557,
      0.029848168,
      -0.013785943,
      -0.0030076492,
      -0.015561379,
      0.020414699,
      0.022629615,
      -0.023512738,
      0.012886591,
      -0.008864799,
      -0.019539524,
      -0.013981164,
      0.005943505,
      0.009386684,
      -0.00578623,
      0.009649723,
      0.0029106848,
      -0.011582104,
      -0.0116125615,
      0.015211763,
      -0.017893443,
      -0.014318523,
      0.013560985,
      -0.0329201,
      0.011263374,
      -0.008831804,
      0.0035504922,
      -0.0011814628,
      0.01686975,
      0.0070965444,
      0.0009645609,
      -0.01178269,
      0.0069480166,
      -0.011067408,
      0.02391355,
      -0.0037508225,
      -0.004579194,
      -0.009996185,
      -0.0014170061,
      -0.015399076,
      0.019374568,
      -0.0141303595,
      -0.019488718,
      -0.03909057,
      0.012592505,
      0.014515002,
      0.013384015,
      0.007171467,
      -0.031435676,
      0.01358131,
      -0.004514737,
      0.0039422307,
      0.003958744,
      0.026963087,
      -0.0065303273,
      -0.006871662,
      -0.010025624,
      -0.00687646,
      0.0059447424,
      -0.021932788,
      0.0063869692,
      0.027967824,
      -0.015989976,
      -0.00079141295,
      -0.014376666,
      0.0142947445,
      -0.0024253463,
      -0.0011179768,
      -0.008268079,
      0.010336964,
      -0.028175768,
      0.009794987,
      -0.03183292,
      -0.002733019,
      -0.016906256,
      0.033884868,
      0.0007884007,
      0.0020375042,
      0.005741685,
      0.0020161676,
      0.0075935824,
      0.001702716,
      -0.032569755,
      -0.0064336155,
      -0.041779015,
      0.015052751,
      0.014635548,
      -0.002985785,
      -0.0065075415,
      -0.020297071,
      -0.019299075,
      -0.0018899413,
      0.0129186865,
      0.013147348,
      -0.027681034,
      -0.013177233,
      -0.013445412,
      0.008786194,
      -0.00021971882,
      -0.016156513,
      -0.0045274203,
      0.017418783,
      -0.020634301,
      -0.0026488716,
      -0.009722328,
      -0.0165918,
      0.0032087225,
      0.012760028,
      0.013517021,
      0.008660338,
      -0.012660019,
      0.0051681576,
      -0.013107576,
      0.008880541,
      -0.0055619692,
      0.011308033,
      -0.020233916,
      0.015072743,
      0.00898948,
      -0.0077751223,
      -0.009320399,
      -0.00058264995,
      -0.01168946,
      0.0011766374,
      0.0062564714,
      0.015666788,
      0.0022039264,
      0.0010182125,
      0.0035222452,
      -0.031182319,
      -0.001135166,
      0.00723481,
      -0.017000703,
      -0.014650346,
      0.013401118,
      0.033772714,
      0.0031075452,
      -0.00028540147,
      -0.0031752323,
      0.008433891,
      -0.022525238,
      -0.004549114,
      -0.04386882,
      0.012440548,
      0.012719306,
      0.004525985,
      0.019581236,
      -0.014843297,
      0.018941773,
      0.0054060034,
      0.006309329,
      -0.01215152,
      -0.015088255,
      0.012960624,
      0.006313097,
      0.013433208,
      0.01187874,
      -0.0040198206,
      -0.023958635,
      0.00077599543,
      -0.0036738196,
      -0.0008844843,
      -0.01864199,
      0.020704258,
      0.026160896,
      0.024714667,
      0.02694628,
      0.006855133,
      -0.015549695,
      -0.0006256347,
      -0.01741576,
      -0.009674501,
      0.016895209,
      -0.013467039,
      0.011343647,
      -0.011889508,
      -0.019765045,
      -0.016087962,
      -0.000347227,
      0.012230809,
      -0.007943734,
      0.018584408,
      0.008652151,
      -0.011100166,
      0.022241231,
      -0.006094,
      -0.0052390657,
      0.017727287,
      -0.038067836,
      -0.012357093,
      0.008418452,
      -0.0037662687,
      -0.010354007,
      -0.008746498,
      -0.0074566174,
      0.0023547602,
      -0.01363727,
      0.014062195,
      0.024321789,
      -0.010705519,
      -0.013593186,
      -0.014378114,
      0.01729875,
      0.012826761,
      -0.004633899,
      -0.009327749,
      0.015482845,
      -0.0060689026,
      0.006388699,
      0.0034598534,
      0.00028785173,
      -0.014467907,
      -0.008396825,
      -0.005780893,
      0.0031184284,
      -0.015162165,
      0.03812066,
      0.008164961,
      -0.014860162,
      -0.005784936,
      0.019157754,
      0.021194763,
      0.005898065,
      -0.003829143,
      -0.0037105812,
      0.033164047,
      0.00070888025,
      0.013683173,
      0.00005615514,
      -0.001868556,
      0.003498899,
      -0.0003512647,
      0.007561103,
      0.018803172,
      0.008325901,
      -0.010032307,
      -0.0071039223,
      0.00009889105,
      0.023088913,
      -0.11551869,
      -0.0011132093,
      -0.01166553,
      -0.015442524,
      -0.0065482426,
      0.00093335164,
      0.019094108,
      -0.02344854,
      -0.0059740297,
      -0.0058636167,
      0.016812364,
      0.01408751,
      0.0031498822,
      0.007471457,
      0.009361758,
      -0.025260195,
      -0.012132222,
      0.021226909,
      0.022946661,
      -0.010862023,
      0.019362427,
      -0.00009365413,
      -0.005131907,
      -0.008804543,
      0.00091738015,
      0.022321519,
      0.0022410343,
      -0.025588522,
      0.008354376,
      -0.0039962064,
      -0.0062427833,
      -0.0053155,
      -0.012855912,
      0.0071833436,
      0.023249509,
      0.0045441044,
      -0.021667702,
      -0.00570912,
      0.0017338073,
      0.019597517,
      0.01942625,
      0.00014559228,
      0.03328977,
      0.004981121,
      -0.010635619,
      0.0077560474,
      0.028850343,
      -0.0007116766,
      -0.00203026,
      0.056147974,
      -0.046643212,
      -0.02555988,
      -0.00841277,
      0.0023652406,
      0.01746153,
      -0.00096242654,
      0.021301858,
      -0.0030894554,
      -0.008125496,
      -0.01168904,
      -0.0029020768,
      0.011385355,
      0.0079412395,
      0.037707888,
      -0.0038927097,
      -0.0036647932,
      0.023776231,
      -0.012400183,
      0.007547798,
      0.008302079,
      -0.0065181865,
      0.0024075871,
      -0.0024718493,
      0.01721848,
      0.014685179,
      0.013306255,
      0.00412355,
      0.0046561537,
      0.0028357967,
      0.019812828,
      -0.025833154,
      0.0013899197,
      -0.07075002,
      -0.027594894,
      -0.005184134,
      -0.007163138,
      0.009120778,
      -0.0026711563,
      0.0064951316,
      0.01066628,
      0.005299851,
      0.0051577752,
      -0.030615505,
      -0.020937653,
      0.0068067806,
      -0.017108895,
      -0.01653525,
      -0.0040330305,
      0.011853405,
      -0.039306626,
      -0.021088708,
      0.004657898,
      0.0015076662,
      0.0019856733,
      -0.0019468135,
      -0.01641992,
      0.025341168,
      0.02057627,
      -0.026296338,
      0.02393353,
      -0.0024852308,
      0.009252108,
      0.0027091175,
      -0.1469481,
      -0.006360354,
      0.00058562786,
      0.029194217,
      0.0051123565,
      -0.0013330223,
      0.0011285478,
      -0.011631587,
      0.001203681,
      -0.029948952,
      0.01023783,
      -0.021173581,
      -0.009667177,
      -0.00048019376,
      0.00019184974,
      0.13039684,
      0.008874403,
      0.010611824,
      0.0032265028,
      0.0016359715,
      -0.030254954,
      0.0006902678,
      -0.004226464,
      0.0021305159,
      -0.0001618249,
      -0.021141041,
      0.016854202,
      -0.015564277,
      0.024900382,
      0.022352237,
      0.0008873773,
      -0.03551871,
      -0.031867072,
      0.02483862,
      0.0032991322,
      -0.025589272,
      0.027057184,
      -0.021521194,
      -0.004847795,
      -0.009869976,
      -0.0005511347,
      0.0041751256,
      -0.013554407,
      0.0032681285,
      0.0046643754,
      0.015876463,
      0.000021247046,
      0.009355069,
      -0.013496435,
      -0.010457755,
      0.024666745,
      -0.06347055,
      -0.007152432,
      -0.016043555,
      -0.009971378,
      0.022758238,
      0.00002102538,
      0.03581837,
      -0.0065008737,
      -0.014251852,
      0.0021505505,
      -0.012235049,
      -0.0022805466,
      -0.0015993176,
      0.00089674094,
      -0.012962056,
      0.01017836,
      0.030624839,
      0.0068624183,
      -0.004417604,
      0.0011529878,
      0.021512793,
      -0.0028275978,
      0.00088284345,
      -0.015592741,
      -0.0055121467,
      0.004955417,
      0.020214021,
      0.00071536255,
      -0.02804199,
      0.009221145,
      0.0054126247,
      -0.010711056,
      -0.0025487326,
      0.01218839,
      0.008421812,
      -0.022874646,
      0.01684154,
      -0.00061247865,
      0.011045388,
      -0.005825237,
      -0.0045028534,
      -0.025354434,
      0.044029944,
      -0.0027838591,
      0.026654553,
      0.011951866,
      0.016807063,
      0.015780311,
      0.00852838,
      -0.001972248,
      -0.01466011,
      -0.011095383,
      -0.019408513,
      0.026622493,
      -0.008419144,
      0.012429933,
      0.017542567,
      -0.01363201,
      -0.009948196
    ]
  },
  {
    "id": "genai_cohort_nodejs_24_node_express_middleware_2_vtt",
    "content": "Okay, so now that you have a great understanding on middlewares, now there is something that I want to really tell you. Number one, that you can define middlewares. You know about middlewares. You can have two kinds of middlewares, okay? So how middlewares can work. So you can have global middlewares, okay? So global middlewares are middlewares which will run every time. For example, these middlewares will run every time, no matter where, on which route the requester is going. Because you have defined it on your very top. These middlewares will always and always run, right? Secondly, you can have, okay, you can have route level middlewares as a root level middlewares. So root level middlewares. So root level middleware means that, let's say, let me define a function here, okay? Now look at me very closely. What I'm going to do is I'm just going to extract out this function and I'm going to put it here. Okay? So this function is basically a logger middleware. Yes or no? Yeah, this is a logger middleware. And I can pass a reference now here, okay, Because I have extracted it out. So that's fine. Now what I can do is this is a middleware. That's fine. Let's create one more middleware that is function. And I can say custom middleware. Okay. I, mean, I was not able to think of a good name, but yeah. So what I can do is let's say that this is console log, that I am, a, custom middle middleware. And then you can just call the next function, right? So what you can do is, if you try to do this thing that is register. Now, this is a global middleware, right? But what you can do is you can just take out this middleware and put it right here. What this means that, hey, if there is a request on this specific route, first you have to run this middleware. Okay? First you have to run this middleware. Now this middleware again can either get the request right. It can like read the request, modify something. So for this particular middleware, it can either end the request response cycle or, in this particular scenario, the next function will point to this particular function. So that means this middleware. So what will happen when the request will come to this particular route? First this middleware will run, then this middleware will run. Then the request will be matched to this particular route which will run this middleware. And this middleware internally calls the next function, which will eventually invoke this function. You can even have series of middleware. For example, you can even do again logger. Okay, so now first this, then he's his next function will actually point to this logger middleware. This logger middleware's next function, which is this will then point to this one. Got it. So this is also possible. So technically you know what happens if I just remove this. Now this is also middleware only. This thing is also a middleware only, which is only and only running for this particular route. So you can even have a next function and call it. But because it's a final middleware, we just terminate the request response cycle. You get it? This is also kind of a middleware only. The only thing is that we are terminating the request response cycle. Okay, so this is how you can even have route specific middlewares, route level middlewares. And thirdly, you can have, okay, you can have router middlewares, router middle wares. Now this router middlewares. For this you have to first cover the concept of routers in Express, okay? And so that we will cover in the next video. So once we cover the routers, then we can cover the router middlewares as well. But I hope the concept of middleware is not clear to you. So now when you will read this code now you will understand this better that why they have written like app dot get. You know what else you can do? You can even do something like this. Now this is very interesting app. Use you can actually give a path, for example, if it is like slash books. Okay, now you can have a middleware function that is request response and next. Now this particular middleware, this middleware will always run if the path matches this. So even if it is, if it is okay, if it is a get or post or any request, any kind of request on okay, on books, this middleware is going to run because you have given a matching path. So for this particular path, this middleware is going to run. So yeah, this is also possible. Okay, so basically you can even have route level middlewares, router level Middlewares, global middlewares, or you can have a logic to match a middleware only when a specific route is matched. So with this you have completed your middlewares, but you will understand them better once we go into our major project where we will have authentication and authorization. So, so there you will understand the actual use of middlewares. Okay? And yeah, one more thing. Starting with Express, five middleware functions that return a promise call, when they reject, they throw an error.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "24-node-express-middleware-2.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/24-node-express-middleware-2.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.009365834,
      0.01050276,
      0.030520525,
      -0.04697996,
      -0.0043841396,
      -0.0024362607,
      0.012705447,
      0.015114346,
      0.0021108028,
      -0.005988016,
      0.003286591,
      0.0076482357,
      0.008250597,
      0.030966708,
      0.12349234,
      0.010303235,
      0.018820101,
      -0.008731622,
      -0.0010455231,
      -0.026032714,
      0.00561019,
      -0.007795753,
      -0.0023291907,
      0.002429886,
      -0.009363201,
      0.016297342,
      0.007652593,
      0.003172942,
      0.015122515,
      -0.025428005,
      -0.008930386,
      -0.0033020522,
      0.023765367,
      0.025087837,
      -0.013168518,
      0.032161888,
      0.01635204,
      -0.0036057867,
      -0.019235358,
      -0.0029091106,
      -0.016686162,
      -0.0024398568,
      0.009523878,
      -0.0021656791,
      -0.0015472616,
      0.009168781,
      -0.008197768,
      -0.017538914,
      -0.0019076717,
      0.014713965,
      -0.007297783,
      -0.0075443024,
      -0.018849334,
      -0.18336163,
      -0.005884074,
      0.02300761,
      0.0016293953,
      -0.0036177887,
      0.024997126,
      0.014444913,
      -0.020457834,
      0.0035811362,
      -0.040910825,
      0.032268066,
      -0.01593856,
      -0.0035270865,
      0.022066394,
      0.008473638,
      0.011208127,
      -0.0009781427,
      0.021693923,
      0.035302836,
      -0.015703244,
      -0.026374957,
      -0.022550145,
      -0.006162555,
      0.014593498,
      -0.008664625,
      -0.008694259,
      0.026748486,
      0.010159506,
      -0.006617981,
      -0.010595426,
      0.008158695,
      -0.0019016544,
      0.0005774344,
      -0.024693055,
      -0.006467067,
      -0.012554153,
      0.018307483,
      0.0044401707,
      0.010285219,
      -0.004443897,
      0.003748416,
      -0.009664353,
      -0.00012339155,
      -0.013361904,
      0.024366092,
      -0.01289343,
      -0.0074727614,
      0.00070350675,
      0.018961972,
      -0.009303744,
      -0.001970349,
      0.0032274302,
      0.024304649,
      -0.019361379,
      -0.006890847,
      -0.0034357,
      -0.011420442,
      -0.007484643,
      0.0043224995,
      0.012341135,
      0.018281307,
      0.0024504454,
      -0.20523085,
      0.026287623,
      -0.0052564107,
      0.0018622999,
      0.02758071,
      -0.018016152,
      0.021551702,
      0.018232523,
      -0.0026513815,
      -0.015450932,
      0.018855894,
      0.0073982994,
      0.026596947,
      0.029945044,
      0.010620988,
      -0.024882926,
      -0.017724896,
      0.007918096,
      0.029098585,
      0.0010564266,
      0.012703236,
      0.006244753,
      -0.01639042,
      -0.030092007,
      -0.007501272,
      0.023870159,
      0.021664375,
      -0.0026044995,
      0.028808814,
      0.015929995,
      0.0065609994,
      -0.017783023,
      -0.0071928045,
      -0.014119864,
      -0.023241416,
      0.027762996,
      -0.02455569,
      0.016942585,
      0.010351151,
      0.027787684,
      -0.022148423,
      0.0038679244,
      -0.0014120641,
      0.021645505,
      0.0013647283,
      -0.008786179,
      0.007190214,
      0.004206771,
      0.010118775,
      0.008150438,
      0.01018512,
      -0.0050286604,
      0.013140841,
      0.003710529,
      -0.00012045024,
      -0.017768769,
      -0.006571102,
      0.006447456,
      0.011074556,
      -0.021289643,
      -0.0025420908,
      0.0042080055,
      0.011062171,
      0.0072646854,
      -0.026459666,
      -0.015230828,
      -0.0021284954,
      0.013363646,
      -0.010046577,
      0.016840769,
      -0.0030160162,
      -0.0213264,
      0.011608198,
      -0.00010041641,
      -0.0065497085,
      0.0115866335,
      -0.010084431,
      -0.009884925,
      0.0010047173,
      0.016560063,
      -0.009419916,
      -0.009980895,
      0.0023121277,
      0.009258226,
      0.009615704,
      0.01670905,
      0.014881988,
      -0.0016519277,
      -0.014511911,
      0.008291064,
      0.013968053,
      0.021315629,
      -0.013388755,
      0.0058971406,
      0.010037133,
      -0.013658599,
      -0.010220618,
      -0.011155574,
      -0.033241205,
      -0.0015936646,
      -0.013078249,
      0.017863043,
      0.00079941814,
      0.0017295096,
      -0.010510605,
      -0.016908908,
      0.01101667,
      0.016941523,
      0.0166287,
      0.0039420454,
      0.016106138,
      0.011414384,
      -0.0070034796,
      -0.00071157096,
      -0.005018687,
      0.03148448,
      0.007778847,
      0.0033507806,
      0.00700203,
      0.036080137,
      0.005854872,
      -0.015684044,
      0.018933738,
      0.010689397,
      0.0073458804,
      -0.012963207,
      -0.021997647,
      -0.006072692,
      -0.009630016,
      0.014406655,
      0.016935252,
      -0.030131143,
      -0.017054822,
      0.0074685807,
      -0.03194133,
      -0.018594548,
      0.014125371,
      -0.011007167,
      0.0037745102,
      -0.0068657645,
      -0.028771656,
      -0.010797397,
      -0.0032172312,
      0.0014027695,
      -0.031764217,
      -0.021157471,
      -0.008316934,
      -0.008882896,
      0.0076952907,
      0.0067497883,
      -0.015390065,
      0.0059400597,
      0.029962627,
      -0.028292574,
      -0.0025335313,
      0.017544596,
      0.0031488307,
      -0.00597126,
      0.005292585,
      -0.002831077,
      0.010529146,
      -0.07211184,
      0.0014389225,
      0.008014249,
      -0.00876249,
      -0.005600356,
      -0.0021987748,
      -0.017875975,
      0.011865628,
      0.014422419,
      -0.0014497347,
      0.0032513072,
      -0.010435938,
      0.008739698,
      -0.015600196,
      -0.0113914665,
      0.02001144,
      -0.0038248848,
      -0.00029410466,
      0.0075215152,
      -0.009320594,
      -0.003927858,
      -0.005731824,
      -0.022096412,
      0.0033643998,
      0.020827984,
      0.027670374,
      -0.01907591,
      0.009236596,
      0.035330802,
      0.0025318991,
      0.007788697,
      0.020006804,
      -0.02028214,
      -0.006117353,
      -0.021952266,
      0.0077808667,
      0.013869541,
      -0.028813677,
      0.011666751,
      -0.015247676,
      -0.019189188,
      -0.008630524,
      0.0067798113,
      0.0076441146,
      -0.0013036513,
      0.002865599,
      0.011760649,
      -0.007051077,
      -0.0199525,
      0.0073718713,
      -0.01637786,
      -0.011727792,
      0.016867684,
      -0.02450845,
      -0.003225088,
      -0.017092993,
      0.0055697933,
      0.0060764537,
      0.009883134,
      0.0097024515,
      0.010118534,
      -0.0031860021,
      0.015094612,
      -0.0054704924,
      0.0297584,
      0.006761708,
      -0.010986717,
      -0.011378954,
      0.0063234116,
      -0.012480661,
      0.019871697,
      -0.0059808246,
      -0.013940376,
      -0.05558338,
      0.015916036,
      0.013458406,
      0.019264435,
      0.0008352598,
      -0.03525461,
      0.021933965,
      0.005420738,
      -0.0048194653,
      -0.00059951516,
      0.030155865,
      0.00057768245,
      0.0013623572,
      -0.018577028,
      0.0074024643,
      0.020477356,
      -0.029475264,
      -0.0018367762,
      0.021631017,
      -0.004661416,
      -0.0047169225,
      -0.021318806,
      0.002966542,
      -0.005109471,
      -0.008009516,
      -0.011919187,
      -0.00018245833,
      -0.04048832,
      0.012071324,
      -0.031547464,
      -0.005090918,
      -0.018928617,
      0.032720447,
      -0.0021652456,
      0.0086285155,
      0.0031929617,
      -0.010409878,
      0.0038595032,
      0.0063051805,
      -0.019422498,
      -0.007483063,
      -0.032792814,
      0.03209287,
      0.012981498,
      0.0034409163,
      -0.012168132,
      -0.0072624553,
      -0.009893747,
      0.0036186776,
      0.022273585,
      0.0026199366,
      -0.020524716,
      -0.0066616707,
      -0.0180143,
      0.0038140751,
      -0.010160146,
      -0.00999744,
      0.0058002723,
      0.013709471,
      -0.020520318,
      -0.014021332,
      -0.0011407754,
      -0.017792445,
      0.0031072146,
      0.01451428,
      0.012468066,
      0.0069969455,
      0.00074798573,
      0.0022692664,
      -0.018667521,
      0.016866317,
      0.0016684763,
      0.0086427815,
      -0.00865079,
      0.0131951,
      0.010030081,
      -0.010811252,
      -0.013039529,
      0.0015712439,
      -0.011842203,
      -0.0021782496,
      0.015809858,
      0.0025492972,
      -0.012929845,
      -0.0014212474,
      -0.01357282,
      -0.030090779,
      -0.00803434,
      0.014163754,
      -0.019942308,
      -0.017164469,
      0.01856276,
      0.035642307,
      -0.00425602,
      0.0017414642,
      0.0057306937,
      -0.0001998313,
      -0.016408822,
      -0.0160184,
      -0.036287423,
      0.013913053,
      0.0069291797,
      0.0012590847,
      0.017110633,
      -0.025510982,
      0.033497814,
      -0.0031622152,
      0.008395623,
      -0.017856793,
      0.0018048785,
      0.00711906,
      -0.0031845022,
      -0.0063270726,
      -0.0015279502,
      0.001004158,
      -0.017801542,
      0.002305412,
      -0.006145962,
      -0.005932547,
      -0.02144912,
      0.029800348,
      0.026639776,
      0.02368604,
      0.021465242,
      0.011135172,
      -0.018376324,
      -0.005183648,
      -0.012116334,
      -0.021362927,
      0.0049692895,
      -0.010880698,
      -0.0019251042,
      0.001828866,
      -0.0075164465,
      -0.0069909724,
      -0.007233442,
      0.016430274,
      0.00038467327,
      0.017990595,
      0.0067537166,
      0.006586788,
      0.022932807,
      0.006595807,
      -0.005140946,
      0.019310711,
      -0.036840104,
      -0.00952479,
      0.019681487,
      -0.011141278,
      -0.012212548,
      -0.0019081685,
      0.0070249033,
      0.009768804,
      -0.011858413,
      0.01121397,
      0.012052766,
      -0.011446358,
      -0.019127017,
      -0.0032406952,
      -0.0018500297,
      0.02063673,
      -0.004126201,
      0.0069314167,
      0.014226909,
      0.0007304872,
      0.000570343,
      0.005202626,
      0.0023517115,
      -0.007489718,
      0.0013506236,
      0.0010429899,
      0.010140707,
      -0.017426195,
      0.033142287,
      0.007210126,
      -0.008222531,
      0.0033165694,
      0.01989243,
      0.021812227,
      0.0076093427,
      0.0010587624,
      -0.0047625466,
      0.042048328,
      -0.0026707759,
      0.0048351954,
      -0.014453017,
      -0.0056455005,
      0.0056577194,
      0.0073604784,
      0.0021988046,
      0.010631932,
      0.014175944,
      -0.023092115,
      -0.005221925,
      0.010064119,
      0.017327895,
      -0.11230169,
      -0.0043946696,
      -0.028365854,
      -0.0074096294,
      -0.011745577,
      -0.0019521541,
      0.012663938,
      -0.01958039,
      -0.014024554,
      -0.0055082524,
      0.021288224,
      0.009257245,
      0.0024920166,
      0.0069342884,
      0.016513774,
      -0.022437533,
      0.0014876167,
      0.024151979,
      0.020272491,
      0.000101046964,
      0.01256976,
      -0.0054030726,
      -0.0011845016,
      -0.014058776,
      0.0028078128,
      0.009923312,
      0.0028347804,
      -0.018392459,
      -0.0037282791,
      -0.010138626,
      -0.00898875,
      -0.008145606,
      0.0016109064,
      0.015112294,
      0.021546459,
      -0.0040086685,
      -0.018109284,
      -0.005885601,
      0.007378285,
      0.004664733,
      0.014431684,
      -0.0020129161,
      0.04762523,
      0.007697822,
      -0.01646179,
      0.012819556,
      0.01682398,
      -0.006715704,
      0.004528675,
      0.057800576,
      -0.04329743,
      -0.03130024,
      -0.0021233181,
      -0.007180411,
      0.02110417,
      -0.00087380724,
      0.009107814,
      0.005423817,
      -0.0112567395,
      -0.012960195,
      -0.012537927,
      0.016029732,
      0.0012453931,
      0.026389785,
      -0.004843395,
      -0.008254605,
      0.0096587455,
      -0.016251383,
      0.008172405,
      -0.0018197822,
      -0.012415156,
      0.00013528253,
      -0.006241673,
      0.023339393,
      0.008903756,
      -0.00021128781,
      0.011309237,
      -0.0020267887,
      -0.0037464213,
      0.0050581843,
      -0.023909455,
      0.00473393,
      -0.070325576,
      -0.015711783,
      -0.0031968495,
      0.005414987,
      0.006953601,
      -0.0029890132,
      -0.005784232,
      0.0036908532,
      0.014919929,
      -0.0021559987,
      -0.03175597,
      -0.026109315,
      0.0010896263,
      -0.008274988,
      -0.018474989,
      -0.0034799678,
      0.0070824926,
      -0.030178651,
      -0.009990425,
      0.00070764625,
      -0.00056438363,
      -0.0036991476,
      -0.013067636,
      -0.020524384,
      0.027643625,
      0.028415678,
      -0.022904707,
      0.02857973,
      -0.012582348,
      0.01564949,
      -0.0016080496,
      -0.14010534,
      -0.0002518558,
      0.0054454044,
      0.033781946,
      0.0019013897,
      0.005941622,
      -0.0022497964,
      -0.014751546,
      -0.006079288,
      -0.026209448,
      0.0010043038,
      -0.01775744,
      -0.015207024,
      0.0062256125,
      0.0002261318,
      0.124206975,
      -0.0023430274,
      0.0037406608,
      -0.008857769,
      -0.010499264,
      -0.022311537,
      0.0065441197,
      0.0035279952,
      0.0072098556,
      0.0053326064,
      -0.027476689,
      0.003372848,
      -0.022139225,
      0.028849509,
      0.002296619,
      -0.0102475695,
      -0.034524087,
      -0.02107557,
      0.02099066,
      0.0067400797,
      -0.022278273,
      0.025543135,
      -0.015331208,
      -0.018266072,
      -0.010916986,
      0.007544502,
      0.004245712,
      -0.01659919,
      -0.001709106,
      0.0064370497,
      0.0012533426,
      0.002371124,
      -0.006452072,
      0.0016892072,
      -0.013748107,
      0.011752064,
      -0.05809882,
      -0.0083423415,
      -0.010119326,
      -0.0139446035,
      0.028034419,
      0.0018072062,
      0.027208932,
      -0.012248521,
      -0.004042854,
      0.0056808055,
      -0.013758372,
      0.009457848,
      -0.007937466,
      0.003383811,
      -0.019783717,
      0.015068017,
      0.025208566,
      0.019522084,
      -0.012562481,
      0.017963607,
      0.024864916,
      0.006369163,
      -0.0061671026,
      -0.015192804,
      -0.00095583586,
      -0.00024749752,
      0.019040838,
      0.007478408,
      -0.016353315,
      0.0143200755,
      0.015051566,
      -0.008973856,
      -0.01674423,
      0.028037112,
      0.012739305,
      -0.020783897,
      0.018144188,
      0.007995388,
      0.014287191,
      -0.00070365897,
      -0.013933988,
      -0.029173292,
      0.030748319,
      -0.002489336,
      0.028060691,
      0.018416135,
      0.017997833,
      0.016394507,
      0.01457714,
      -0.0028621312,
      -0.008423449,
      -0.008100822,
      -0.020220105,
      0.03123088,
      0.005998107,
      -0.0035550469,
      0.0095264595,
      -0.0075587127,
      -0.017646415
    ]
  },
  {
    "id": "genai_cohort_nodejs_25_node_custom_exports_vtt",
    "content": "Okay, so guys, we are doing really, really, really great. And in this particular video, before moving on to this router, middlewares and all, let's go back to the modules, right? Do you remember that we had a chapter on modules in which we covered that you have like built in modules, right? Built in modules that you can use like node and something like this, like using the require function. Okay, you remember that, right? Then we have talked about third party modules, right? Third party, third party modules. So third party, modules like we are using Express, we are using More of things. Okay, right now let's cover that. How can we create our custom or I can say user defined. Okay, user defined modules. So in this particular video, let's talk about this user defined modules that how can I have a custom module? And just for a refresher, if you remember it was something like I told you, like require and then you can do a dot slash or dot slash. So this is what we are going to cover today. Okay, so this is really important to understand user defined modules in order to understand the router, middleware or routers in express. Okay, so let's create a simple index js file and okay, so what I can do is let's say I have a function, I have a function add. This add function can take two numbers A and B and it returns a plus B. Very simple function, right? Similar to this. Let me just zoom in a little bit similar to this. Let's say you have one more function that is subtract, it takes A and B and returns you A minus B. Okay? Let's say you have one more function that is multiply. And so we'll just create four functions. So let's say you have a multiplication function that is A and B. And this also returns a b to multiply. And then you have a function for division which takes A and B and returns a divided by B. So this is what basically we have credit. Now how can you use this functions, right? You can use it something like hey, console log and you can just say add two and five, right? So now if you run this particular code, you can see that you are getting seven, right? Similarly you can call these functions. Now the problem is or if you see that if you create all the functionality in just one file, your file is getting little bit messy, right? You have a lot of code in just one file and this is not a maintainable code. So in reality you will have a lot of functionalities, lot of features. So usually what we should do is we should, should Move the related features to a module to a separate file. So what I can do is actually I can see that these all functions are related. Like it's a kind of math operation. So I can create a separate file that is math js. And what I can do is I can move these all the functions to this math js file. Now the question arises that if I try to now run this particular code, you will get an error because the add function is not defined, right? You are trying to call the add, and that is not. That is not defined here. So how can I bring this add function to this index js? So for that you have to use module, you have to export. You have to like tell the JavaScript that hey, there is a function add. Please export this function add from here so that the index file can import it. Okay, so it's basically like, see if you want to get something from usa, let's say, or some from from some foreign country, that country should export that material, then only you can import it. If that country is not exporting that material, you cannot import it, right? And if you are not importing, you cannot use it. So now how can we export these functions? So to export these functions you have two methods, okay? You have two ways. Number one is known as named exports. Number two is known as default exports. Okay, default exports, so named exports. Let's first check out the named exports. In named exports you can give your exports a name. For example, this can be a different export, this can be a different export, this can be a different export, and this can be different export. So to do a named exports. Do you remember that when we call node index js or any file, do you remember that wrapper function? Do you remember that wrapper function that internally node js creates a wrapper function, a function. Let's say wrapper and it has exports, it has let's say module, it has your require function. It has underscore, underscore file name. Okay, file name, it has underscore, underscore dername. Do you remember that? Now here, do you see that? Here is your source code, right? Here is your user defined code. User defined code. Do you remember that the first parameter is exports. So using this exports, you can actually do a named export. So what I can do is I have the exports available here, okay, Exports is already available here because of that wrapper function. So I can just say, hey, I want to do exports. Let's give it a name, let's give it my add function. I'm just giving It a name and set it equal to this. So now what is happening? This math js file is exporting a name that is my add function which is equals to this function. So we are just exporting one thing. Now how can we import it here? So to import you have to just say const. Okay, const. Let's say I'll just call it as value equals require. Okay, so let's use the require function. Now you can see that we are not getting the typings. So for that you know what we have to do? So first of all do an npm init and you have to do npm install @ the rate types node. Okay? So that we have the node and yeah, this should be dev dependency, but I have installed it as a normal dependency. So let's move it to a dev dependency. Okay, so yeah, that's fine. Now in this require if I say dot dot basically means the current directory, correct the current directory slash math. So what will happen? There is no need to put js, okay, because of course we are working in JavaScript, so that's fine. So now this value. Now what is this value? Let's try to console log. Okay, Console log the value and let me just remove it. So now if I console log the value. Sorry, node index, node index js. So what you see that this value is basically an object in which you have myadd function, which is actually a function. So that means I can say. myadd function and I can pass and 5, right? So what is happening here is this value is basically whatever you have named it to this require. Now this require will go inside the math. This math has just one named export that is my add function which is equals to this thing. So this my add function you are available here, right? If I name it as add, then here also you have to say it add. So what that is exporting. So now you can see it will continue to work. Similarly what you can do is you can just say exports. Okay, exports uh. subtract equals to this. So so you are now exporting a subtract also. So now you can see that you have add, you have subtract. Now you are exporting two functions. So you can just do a subtract. So this is going to subtract it. That is negative Then let's also do it for others Exports multiply and you can do exports div. So now what you have done is you have done four named exports in this particular file, right? And you can see that this value, whatever you want to call it, dot, has all those four functions, correct? Now, interestingly, okay, interestingly, what you can do is like you can call these functions. That's fine. We have already seen that. And even if you don't want to use this value, you can destructure it directly here. So destructure. So you can see you have add function, you have multiply subtraction function, you have multiplication, you have division. So now there is no need to add this value. You can just directly say add. Okay, so from where this ad is coming, this ad is coming from, from this required, that is do math. That is this particular ad. Okay, what if you were having a, let's say a folder lib. And in this lib you had this math js file. Okay, so what you in this case you have to say dot slash lib. Hey, go into the lib folder and from there get the math. So you have to give the path, you have to give the full path. Got it. Now let's say just for this is just for a demonstration purpose, you have a folder, let's say, you know, test. Inside the test folder you have a folder A. Inside the A folder you have a folder B. And inside the B folder you have some test js file. Now this test js file is doing exports. Dot xyz equals to I am, xyz string. So let's say that math js, okay, math js wants to import this. So what it has to do. Okay, see, first of all you have to. Let's say this is the value require. See, if you do dot slash you can see you are getting nothing because you are currently inside the lib folder. And do you see any other file in the lib folder? No. Let's create a file, let's say S js. Okay, now inside the current you can see that you are getting S. So dot slash means in the current directory. Okay, let me do a dot dot slash. This goes one directory up. So that means go one directory up. That is your root directory. In the root directory you want to go into the test. Inside the test there is a folder A, inside B and inside test. And now if you will check the value for V, you have that XYZ thing here. So this is how your custom exports, your user defined modules work. Got it. So this was your named exports. So let me just delete this test folder, we don't need it. And let me just bring back the math. And now I can just say yes, now VS code is smart. Enough to automatically update my index js file. Okay, so yeah, that's a VS code feature. Okay, so this was your named exports. So for your named export, okay, so what, what is the meaning of this thing? Number one, you have to say exports. Here you can add the name and then here you can have the value. This value can be a function, string or anything. And to use it, to use it, what you have to do is either you can do a destructuring like require d dot slash your module name, okay, whatever is your module name. So either you can destructure the name here, or what you can do is you can just say like const value or any variable. I mean, I'm just calling it value. Let me just copy this and then you can just call value. whatsoever name you have given. So this was your named export, right? This was your named export. Now let's see what is the default export? Okay, let's see what is a default export. Now when you talk about default export, there can be, There can be only one default export in one module. So one js file can only contain one default export. And, default exports don't have any name, okay? So default exports do not. Don't have any name there because they are default, right? That's why. So let me show you what this particular thing means. Okay? So right now, in this particular module, like I have only one module that is math js, you have four named exports. Let's create a default export. So for default export you have to use this module thing. Do you see this module in the wrapper function? This module is used to do a default export, okay? So you can just say module. exports and some value. Okay, so let's say my default export is a function, okay? It's a function that says console dot log. Hey, I am, default. So now what will happen is if I go back now, this is a default export. This one is a default export. Default fault. Now what will happen if I go back? If you're destructuring something, these are coming from the named. But if I just say anything like xyz, okay, am I giving anything? So by default this will actually point to the default export. By default, this will actually point to that default export. You can name it as anything. Seriously, like you can just name it anything. And by default it will always point to that default export. For the rest, you can just destructure them. Add, multiply. So see what is happening right now here is that the default export. If you just give any value here Right? You are not specifying that what you want to export, right? You are not specifying. So what happens is JavaScript gives you the default exported member that. Hey, you are just saying, hey Math, can you please give me the default export? Right, Math will say, hey, by default I just have this default export. So this will give you the access to the value. So now you can see that you are getting the value only. But rest are named exports, right? They have a name. So if you specify the name, let's say div. So this will only give you the div. But because that's a named export, okay? Div is not a function. Oh, just was just one second. So this is what, this is a named export. Okay? So like you can say but for the named export, because this is a named export, right? These are named exports. So now what you can do, you can export them with the name. For example, there's a ad name. Okay, just remove this. So there is a add name, there's a div name. So that, that is the difference between default export and named export. So for named exports you have to, you, you get all the names, so you get an object back. But if there is a default export, the default exports don't have any name. You can just name it anything when you are importing them. So that's a default export. So this is how your custom modules work. So moving further in our project, in that bookstore project, we are going to refactor that particular thing to be a module where we can split the code across the files so that our code is more clean and more maintainable. So I'll meet you in the next video. Until then, bye bye and take care.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "25-node-custom-exports.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/25-node-custom-exports.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0050792038,
      -0.018574577,
      0.040568035,
      -0.047528658,
      -0.020738194,
      0.0199744,
      0.03896517,
      0.015878059,
      0.012000475,
      -0.005385849,
      -0.011180856,
      0.0021307766,
      0.015503497,
      0.008568145,
      0.12177052,
      0.00010372193,
      -0.0098986095,
      0.006117045,
      0.008320718,
      -0.026547136,
      0.00944027,
      -0.005073473,
      0.004136191,
      0.0042617507,
      0.0059442716,
      0.0011085436,
      -0.0016201905,
      0.008467429,
      0.028337637,
      -0.040647626,
      0.0031837735,
      -0.011957047,
      -0.007155874,
      -0.002646184,
      0.009889209,
      0.018949352,
      0.018647393,
      0.019970834,
      -0.008641391,
      -0.003239754,
      -0.0117403595,
      -0.0007288771,
      0.0006622742,
      -0.02608022,
      0.00948372,
      -0.017910894,
      0.00033818145,
      -0.0072213556,
      -0.0023524424,
      0.023340994,
      -0.005557066,
      -0.00025047406,
      -0.0141156595,
      -0.17153887,
      -0.0036450822,
      0.016316492,
      0.003546025,
      -0.0026846488,
      0.026664378,
      -0.0006072977,
      -0.020014396,
      0.025658702,
      -0.038551033,
      0.01274594,
      -0.0035024334,
      -0.007326779,
      0.00354789,
      -0.0013640769,
      0.004435726,
      -0.021145724,
      0.036798257,
      0.01904512,
      -0.031126691,
      -0.012488128,
      -0.035327602,
      -0.015195678,
      0.008558299,
      -0.022380425,
      -0.011112037,
      0.009445165,
      -0.0012690675,
      -0.00814285,
      -0.0057917815,
      -0.00088368513,
      -0.00550851,
      0.0004642633,
      -0.041190833,
      -0.029407116,
      -0.026399922,
      0.012595297,
      -0.00094998773,
      0.0006418939,
      0.005505951,
      0.005500679,
      -0.007863147,
      0.009859672,
      -0.017405298,
      0.014289255,
      -0.013093004,
      -0.020187993,
      0.017258087,
      0.011435063,
      -0.0320154,
      0.01483278,
      0.013804718,
      0.016966809,
      -0.0062456476,
      -0.010160985,
      0.0063891704,
      -0.015520736,
      -0.013179765,
      -0.0093851425,
      0.0029353993,
      0.028993819,
      0.004826329,
      -0.1787491,
      0.0053275186,
      -0.001420936,
      -0.014342563,
      0.021723375,
      -0.021573843,
      0.014522177,
      0.0027072087,
      -0.0050586653,
      -0.005956179,
      0.03492226,
      -0.024614438,
      0.01697352,
      0.024437515,
      0.00059966213,
      -0.025656858,
      -0.026269376,
      -0.002662672,
      0.018580742,
      0.015471776,
      0.023697885,
      -0.005701746,
      0.0101267425,
      -0.01770414,
      0.010965112,
      0.020942548,
      0.0085800225,
      0.0089457715,
      0.03049264,
      0.009285194,
      0.0137638785,
      0.005145968,
      0.01732507,
      -0.024187997,
      -0.0363764,
      0.003930187,
      -0.020046383,
      -0.0064655603,
      -0.016289858,
      0.029471198,
      -0.03305932,
      0.00076677516,
      0.0034322203,
      -0.000095234376,
      -0.0014031304,
      -0.0042035445,
      0.0055708676,
      -0.010823585,
      0.017734986,
      0.008482482,
      0.007635663,
      -0.015823219,
      0.027874406,
      0.011779742,
      0.030932274,
      -0.014177812,
      -0.010517762,
      0.0018457412,
      -0.0063509615,
      -0.030525444,
      -0.027960902,
      -0.006661056,
      0.007391123,
      -0.010896668,
      -0.03054573,
      -0.006271771,
      -0.014463095,
      0.048392765,
      0.0032722964,
      0.02060794,
      0.0036461705,
      -0.0032024465,
      0.02809532,
      0.020055447,
      -0.013935037,
      0.014096233,
      -0.025635727,
      0.006674222,
      -0.00055889814,
      -0.0035308213,
      -0.0206213,
      -0.011455459,
      0.0044059525,
      0.013570472,
      0.013281536,
      0.017128976,
      -0.0073216106,
      -0.0020488508,
      -0.031467322,
      0.010742666,
      0.029110197,
      -0.012649007,
      -0.0022303625,
      0.021583628,
      0.013096768,
      -0.021459881,
      -0.024850968,
      0.015916042,
      -0.018835984,
      0.009057401,
      -0.017673759,
      0.033464357,
      -0.011412537,
      0.0007518522,
      -0.017051173,
      -0.0032401676,
      0.0037893946,
      0.0096649015,
      0.019346189,
      0.00690808,
      0.0018255572,
      -0.008683599,
      -0.0047788545,
      0.0038305041,
      0.0068237195,
      0.031795416,
      -0.007470834,
      -0.013337375,
      -0.009836545,
      0.012882358,
      -0.00998307,
      -0.014750133,
      0.014724903,
      0.0077570393,
      -0.0021675844,
      0.019730425,
      -0.009229858,
      -0.011635773,
      -0.016796675,
      0.038308892,
      0.0051827896,
      -0.022688037,
      0.0007180639,
      -0.015488654,
      -0.018386593,
      -0.020581333,
      -0.008206633,
      -0.015136969,
      0.002343793,
      -0.015218035,
      0.002402241,
      -0.012416351,
      -0.005661417,
      -0.0079615675,
      -0.03341677,
      0.00159433,
      0.0020433895,
      -0.017179362,
      -0.002974792,
      0.0046433127,
      0.000012071583,
      0.010001,
      0.030533735,
      -0.024212731,
      0.012055875,
      0.001389529,
      0.011592078,
      0.011301189,
      -0.0013969397,
      -0.009346041,
      0.011324309,
      -0.09953042,
      -0.014953072,
      0.008826566,
      -0.02199475,
      0.003270125,
      0.005449845,
      -0.019722745,
      0.023890115,
      0.019743983,
      0.011139557,
      -0.014351571,
      0.0005856926,
      0.014644567,
      0.0003155358,
      -0.010682196,
      0.011383259,
      0.020268708,
      0.0052019362,
      0.013434172,
      -0.003383118,
      -0.010175268,
      0.012980613,
      -0.014711872,
      -0.012235872,
      0.011784331,
      0.0123086255,
      -0.017481368,
      0.01541342,
      0.023254387,
      0.009332244,
      0.014784305,
      0.02643058,
      -0.010311877,
      -0.008383306,
      -0.00067218044,
      -0.0005143736,
      0.03221693,
      -0.009508235,
      0.010890347,
      -0.006786795,
      -0.015483438,
      -0.017660735,
      0.0045768567,
      0.0116331605,
      -0.004500954,
      0.00029054255,
      0.00015499833,
      -0.010752845,
      -0.008301673,
      0.0095178345,
      -0.027139327,
      -0.005609882,
      0.032469947,
      -0.023186699,
      0.030129196,
      -0.017213712,
      -0.004260461,
      -0.0010311939,
      0.014374387,
      0.0214063,
      -0.003129229,
      0.00014493828,
      0.019040184,
      -0.015397523,
      0.032706775,
      0.0033451696,
      -0.004957598,
      0.0062810644,
      0.0027475604,
      -0.017430414,
      0.00025739812,
      -0.0154527575,
      -0.005595701,
      -0.016188812,
      0.000702833,
      0.004759779,
      0.037345197,
      -0.010578281,
      -0.020435954,
      0.028030332,
      0.015793929,
      -0.017097665,
      0.009553707,
      0.030126678,
      0.0044063292,
      -0.012300159,
      -0.020500934,
      0.01768024,
      -0.0067136586,
      -0.029552972,
      0.012107046,
      0.010206601,
      -0.011603302,
      -0.0012516736,
      -0.014341428,
      0.01652737,
      -0.02460675,
      -0.013320811,
      -0.009811867,
      0.020957563,
      -0.021389479,
      -0.013535891,
      -0.024458598,
      0.0060030203,
      -0.010373853,
      0.028637858,
      0.011665372,
      0.0011717278,
      -0.00897184,
      -0.015941856,
      -0.0045053344,
      -0.016049124,
      -0.030141957,
      -0.0040019522,
      -0.017021906,
      0.036638875,
      0.027146675,
      0.041440904,
      0.0007996617,
      -0.015551573,
      -0.008477392,
      -0.0025773768,
      -0.0065985853,
      -0.00064727064,
      -0.000977818,
      0.008431234,
      -0.0000701747,
      -0.00852624,
      0.0014232403,
      -0.016629698,
      -0.0053129224,
      0.011698411,
      -0.033632837,
      0.005419437,
      -0.0013884417,
      -0.040085174,
      0.0183696,
      -0.0053841267,
      0.0052953805,
      0.015315528,
      -0.023317909,
      -0.008803885,
      0.018590992,
      -0.015201326,
      -0.0032155502,
      0.0057580895,
      -0.0134974485,
      0.008258974,
      0.0022679046,
      0.00086550834,
      0.005605525,
      -0.0072828713,
      0.0027218477,
      0.0025988428,
      0.014946648,
      0.002737698,
      0.02301557,
      -0.0017884504,
      -0.014306703,
      -0.011257995,
      -0.019419467,
      -0.009971417,
      -0.015375767,
      -0.016660659,
      0.02190518,
      0.002900494,
      0.0020834336,
      0.005511276,
      -0.006945709,
      0.00579444,
      -0.034163237,
      -0.030245855,
      -0.013341722,
      0.02190081,
      0.005718669,
      0.0015177133,
      0.0047011464,
      0.0018477548,
      0.0040799924,
      0.0066599664,
      -0.0084361425,
      -0.00029576916,
      -0.018921787,
      0.012346916,
      -0.008872012,
      0.0004921339,
      0.01048597,
      -0.018440181,
      -0.017441023,
      -0.008102915,
      0.021221822,
      -0.03838207,
      -0.0086403955,
      0.007678512,
      0.019188995,
      0.019317014,
      0.012417019,
      0.010747586,
      0.007907797,
      -0.0051358347,
      -0.02028322,
      -0.014141862,
      -0.006162671,
      -0.011732998,
      0.0068261377,
      0.0087682,
      0.0030284221,
      0.019432068,
      -0.008292118,
      -0.00513739,
      -0.0027076958,
      -0.008805073,
      -0.0045419238,
      -0.0016062629,
      0.011817739,
      0.0024951352,
      0.002170212,
      0.0140435435,
      -0.04109327,
      0.0066688214,
      0.020990057,
      -0.013911517,
      -0.012273657,
      -0.017289931,
      0.009871147,
      -0.012631433,
      -0.01834543,
      0.014029979,
      -0.0032808436,
      -0.014265815,
      -0.0013222869,
      -0.006098604,
      0.008926366,
      0.00096640986,
      -0.016170979,
      -0.0033920659,
      0.009401163,
      0.012052579,
      0.015415281,
      0.007508716,
      0.012501977,
      -0.0019314355,
      -0.013411696,
      0.015398388,
      -0.012857931,
      -0.01876253,
      0.018965576,
      0.007848967,
      -0.002125948,
      -0.00905551,
      0.021132803,
      0.019864565,
      -0.00049438025,
      -0.00023716605,
      -0.032978047,
      0.039198555,
      -0.00010773843,
      0.010359659,
      -0.02170719,
      0.013693406,
      0.009343445,
      0.022319594,
      -0.008090526,
      0.008604486,
      0.003988519,
      -0.025054354,
      0.0027274939,
      0.006406363,
      0.02447036,
      -0.11328286,
      0.007262972,
      -0.007181968,
      -0.013221744,
      0.0006494892,
      -0.005004775,
      -0.0006296578,
      -0.01974,
      -0.005213697,
      -0.0052191513,
      0.01755269,
      0.0032989697,
      0.015573994,
      0.00889944,
      0.0007400326,
      -0.01651089,
      0.016545655,
      0.023771117,
      0.030028537,
      0.017755914,
      -0.0012469686,
      -0.002916882,
      -0.010546485,
      -0.010866289,
      -0.018377492,
      0.0064851767,
      0.011599435,
      -0.009166507,
      -0.020590173,
      -0.026588345,
      -0.011899452,
      -0.011631676,
      -0.0040406473,
      0.0061400365,
      0.014981986,
      0.01186658,
      -0.010537675,
      0.019604687,
      0.013832593,
      0.0016359821,
      0.01808075,
      0.006893829,
      0.024635516,
      0.02100268,
      -0.013415729,
      0.0152389165,
      0.02888444,
      0.0014924488,
      -0.0060666753,
      0.04931573,
      -0.043153618,
      -0.02322849,
      -0.0065836776,
      -0.0098423315,
      0.011436432,
      -0.007952147,
      0.015384361,
      -0.00048560865,
      0.0020112337,
      0.010458683,
      0.009782812,
      0.0013282398,
      -0.010333851,
      0.006126299,
      -0.010771855,
      -0.0026616205,
      0.008929834,
      0.0021173146,
      -0.0021713604,
      -0.0020309177,
      0.005687506,
      0.000552275,
      0.0030876182,
      0.009579346,
      -0.0011670594,
      0.0047599818,
      0.0049396297,
      -0.00085684157,
      -0.010503097,
      -0.004062008,
      -0.0028013675,
      0.0047598183,
      -0.06629292,
      -0.010078084,
      0.014415662,
      0.0075398106,
      0.0064664907,
      0.016939187,
      -0.0025660458,
      0.025402447,
      0.01759405,
      0.0072334157,
      -0.031204982,
      0.0014485507,
      -0.025770912,
      -0.0064567626,
      -0.012505099,
      0.010263224,
      0.013578089,
      -0.015667882,
      -0.008618307,
      0.006457325,
      0.00047813143,
      0.0067523452,
      -0.01673737,
      -0.02245091,
      0.014170725,
      0.019751182,
      -0.015735494,
      0.02508046,
      0.013539044,
      -0.010483108,
      0.004044686,
      -0.14796884,
      -0.012807874,
      0.008935167,
      0.01466723,
      -0.004917673,
      -0.0042691734,
      0.0057908376,
      0.0074666054,
      -0.0037808588,
      -0.029457347,
      -0.0027956301,
      -0.025341691,
      -0.0111349635,
      -0.012982696,
      0.007064315,
      0.12830965,
      -0.012661693,
      0.027579237,
      0.01288688,
      -0.0005240373,
      -0.012683671,
      -0.009282273,
      -0.0059626126,
      0.03442948,
      0.006597208,
      -0.0090456,
      0.005196538,
      -0.014656207,
      0.030279806,
      -0.0006950458,
      -0.00703354,
      -0.03285285,
      -0.017182233,
      0.017759018,
      -0.008295344,
      -0.01248925,
      -0.001680503,
      -0.038139705,
      -0.015627926,
      -0.0101372525,
      -0.0012324714,
      -0.0019519387,
      -0.009357942,
      0.010729396,
      0.0050647673,
      0.0025015282,
      -0.008832379,
      -0.022119544,
      0.0015787838,
      -0.021008993,
      -0.017256543,
      -0.07067798,
      0.004496736,
      -0.0057926187,
      0.0034217997,
      0.02105286,
      -0.0028241565,
      -0.006853725,
      -0.014621371,
      -0.016205361,
      0.019422205,
      0.00305939,
      0.017085338,
      0.01055713,
      -0.0045034136,
      -0.010362712,
      0.023157481,
      0.034171384,
      0.023581777,
      0.0016904678,
      -0.014876617,
      0.015198291,
      -0.008228684,
      0.00786773,
      -0.022548271,
      -0.0153863,
      0.00823348,
      0.018199975,
      -0.011564442,
      -0.0067198216,
      0.004966708,
      -0.00009845546,
      -0.016189555,
      -0.030196164,
      0.009790623,
      -0.0017110974,
      -0.008764564,
      0.02757021,
      -0.013525288,
      -0.015485256,
      -0.015062534,
      0.008409115,
      -0.013074876,
      0.013053389,
      -0.008402628,
      -0.004021068,
      0.004361165,
      0.004008436,
      0.022469241,
      -0.00023940166,
      -0.0054895254,
      0.0058511775,
      0.008103404,
      0.0028200995,
      0.00894976,
      0.011705662,
      0.024175664,
      0.015058104,
      0.0061590075,
      -0.00871041
    ]
  },
  {
    "id": "genai_cohort_nodejs_26_node_refactor_book_store_vtt",
    "content": "Okay, so now that you have knowledge about modules and how you can create your own custom modules in Node js, let's start with refactoring our code and move the things, the related content to appropriate, you know, what do you call modules? Okay, so what I have to do is this is the code right now and you can see that what is the state of this code. So what I'm going to do is first of all let's create a module or a folder that is routes. So it's a good practice to get all your, all your routes into this folder. So you can see that these all routes actually contains or actually you know, they match to the books route. Right. So what happens when you are in a real world? There are a lot of routes. Like for example, routes for books, routes for authors, routes for pricing, routes for checking out. So you can see that right now all the routes are actually related to a book. So what I can do is I can actually create a file that is book. routs ts or sorry js. So I'm actually used to the typescript world. So yeah, so book routes js. So here what we can do is we can actually move all our book created routes in this particular file. So for that what we have to do is first of all let's import the express. Okay? And then express gives you a functionality for a router. So you can create a router using Express router. So what this will do is this router, you have created a router here and now what you can do is you can create routes here. Okay, for example, example, let me show you. Let's do it one by one. So what I can do is first of all I want to move this route. Okay, so cut it from here and paste it here. And now you have to use router get. Okay, that is Flashbox. Great, you have moved one. Then let's also move this one. That is router. Now we don't have app, we have to use this router. Okay, so this is a separate router. Then let's also move this one. Okay, so I'll just move this one also. So you can see that this is also moved. And then we can also name it as router. Okay, so router. post route is also moved. And let's also finally move the delete one. Okay, so now all the routers, all the routes are moved. Now what you have to do is this router, is basically handling all the books route. Let's do a default export. So default export of this router, okay, so this router is now default exported from here. So see what we, what you did, you created a new router, you added all the routes to it and you exported this router from here in the index js, which is almost empty. Now what I can do is I can just say first of all let's import that, right? I want to import my custom module or custom router. So that is my book router. So let's call it as book router equals require. And what I can say, I can just say dot slash routes book. So this book router basically is a reference to that router, right? So if I click on here, so you will actually be coming to here because this is what you are exporting from here. Now this book router can be used how I can just say app dot use. Okay. And I can say for all the routes use this book router. So yeah, that's it. So what you have done is you have moved all the book related stuff to this book router. Now there are a couple of more changes that we have to do. Do you see that this slash books is common, do you see the slash books is common in everyone. So what you can do is just remove it. Just remove the slash books at the beginning from everywhere. Okay, so you can see that I have removed everything from here. Nice. Now what you can do is you can actually put just once, that is slash books. So this will tell the express that hey, if there is any route that starts with slash books move delegate that request to this book router. So books get route will match here. Books ID will match here. Slash books post request will match here. And/books id delete will match here. Nice. So this you have moved. Very good. Now one thing. Do you remember that we had this memory, this, this db. Now this DB is here and we are not no longer able to access it. So for that what we can do is I can actually create a folder for db. I mean in reality it will be like a real db but right now we don't have that. So let's call it as book js. And what I can do is I can just cut it from here and paste it here. And I can just say exports. Let's call it as like books equals just an array. So I'm doing a named export here of a books variable which is my actual db. Now inside your router what you can do is let's import that. Right, let's import that. So this is a named export so dot, dot, slash, go one folder up and book. And here you got the books. Now what you can do all the operations you have to do on this books, right? So this is one place where we have to change. Then this is where we have to change. Then books, push then. Then you have to change it here, then you have to change it here. And yeah, that's it. So all the changes are done. And yeah, one more thing. Books. Cool. Okay, let's come back to the index. Now the middlewares, right? Let's remove this middleware. This was just a custom middleware, so no need to worry about that. So you can see that we have a logger middleware which we are using here. Now this middlewares can also be moved to a separate file, right? Middlewares. Okay. So I can create a middleware for let's say logging purpose. So logger, js. So what I can do, I can just take up this middleware, cut it from here, extract the logic here and do a exports dot and just say that exports logger middleware is actually equals to a function, right? And that's it. So now what we can do is because this is exported from here, we have to import this logger middleware. So how can I do that? I can just say all the middlewares I can import here. So const something equals require to dot, slash, middleware logger. So let's call it as log. There is there is one named export that is logger middleware. So yeah, this is also done nice routes middlewares. This FS module is no longer not, required here. It is actually required in the middleware. Right, because this is where we are using the fs. So yeah, don't forget to import the FS here. So const. Const FS equals require the node fs. Right. So this FS is actually getting used here. So this is also done. Okay, I hope there is nothing that we have left. And let's go back to the index js. So you have this thing, you have this thing, you have this thing and. Very cool. Right. So now you can see that our code is actually splitted into the multiple files. Let me give you a walkthrough. Let me just delete this file also. First, your index js. This is your main file, your entry point where everything will start. So this will actually do an initialization. So you have an app. You are registering your middlewares, you are registering your routes. Any route that matches books will go into this book router. Right. So this book router is basically coming from this routes file. That is book routes, this routes, these all things actually contains routes. That is for the books. Correct. So now you can see that you have a get route, you have a post route. So all the routes, are given here. Now one thing that you can do is you can even extract out this logic. Do you see? This logic can be also extracted to a different thing that is known as a controller. Okay. So you can define a controller. So we'll talk about the MVC architecture model view controller there. You will understand this thing. But right now this part is fine. Let's test our implementation. So npm start. So if I go into the Thunder client, let's see if everything is working fine. Right? So if I try to get the all the books. Yeah, you can see we are getting all the books, right? Cool. Let's try to create a book. Yeah, book creation is a success. Let's try to get the book. So you can see that now I have three books. Let's try to get the book three. So I'm getting the book three only. Let's try to delete the book number two. Okay, so book two, books slash two. Okay, we have to make a delete request. My bad. So delete request. Book is deleted. Let's now try to get it. We should get a And if I try to get all the books right, you can see that book two is not there. Nice guys. You have actually successfully refactored your code in a very great way and congratulations. Now you know how to work with model modules and how to structure your code. Moving further, what we are going to do is we are actually going to write code in our different, different files so that it is easier to read, easier to maintain, and we follow the best practices.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "26-node-refactor-book-store.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/26-node-refactor-book-store.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0017346034,
      -0.00706159,
      0.0412628,
      -0.05416842,
      -0.0033569764,
      0.0012287567,
      0.030019095,
      0.020440197,
      -0.012007413,
      -0.011144802,
      -0.0031542308,
      -0.007463582,
      0.028378313,
      0.022973776,
      0.1325563,
      0.013692848,
      0.00025770004,
      0.017684314,
      0.007327099,
      -0.04318326,
      0.0033412762,
      -0.005396641,
      -0.0006763549,
      0.0008470584,
      0.016149793,
      0.002366568,
      0.02378911,
      -0.0021594625,
      0.019172676,
      -0.027113186,
      0.011319922,
      -0.0014234441,
      0.0027758314,
      -0.0037113316,
      0.0008191317,
      0.012227939,
      0.009603668,
      0.0038823448,
      -0.027415816,
      -0.005374704,
      -0.0026793783,
      -0.0004300786,
      -0.0054817237,
      -0.013572216,
      0.00395524,
      -0.0066244625,
      0.007720967,
      -0.01876948,
      0.008474079,
      0.030056251,
      -0.011142392,
      -0.027271321,
      -0.019254128,
      -0.17837405,
      -0.008518711,
      0.020527503,
      0.009366544,
      0.003824758,
      0.01293208,
      0.005569901,
      -0.030569496,
      0.0042829826,
      -0.024847066,
      0.021816922,
      -0.02732706,
      -0.016534561,
      0.009553876,
      -0.02781987,
      0.0059177214,
      -0.010071619,
      0.0077730743,
      0.027841683,
      -0.027576247,
      -0.013381163,
      -0.014682173,
      -0.004431194,
      0.00044847096,
      -0.0064180386,
      -0.012608687,
      0.024855204,
      0.00015731703,
      0.0005000219,
      -0.014586701,
      -0.0066272975,
      -0.020104188,
      -0.002604787,
      -0.026004473,
      -0.013859157,
      -0.01982942,
      0.018802613,
      0.004370993,
      0.017090594,
      -0.009856921,
      0.0008829084,
      -0.012402672,
      0.007358893,
      0.0033072731,
      0.008135854,
      0.00020129528,
      -0.02292247,
      0.017717768,
      0.010415431,
      -0.03197402,
      0.011477105,
      0.007655616,
      0.029663704,
      -0.014841432,
      0.0074056424,
      0.033326615,
      -0.011166208,
      -0.006736456,
      -0.011240733,
      -0.0037651535,
      0.02040461,
      0.0041704485,
      -0.1791103,
      0.01601492,
      -0.012887008,
      -0.015392626,
      0.008134038,
      -0.0004521876,
      0.027877491,
      0.0073928367,
      -0.004226246,
      -0.0044767656,
      0.021259382,
      -0.0053460766,
      0.02637473,
      0.024056219,
      0.009609493,
      -0.016780647,
      -0.011347502,
      -0.0054188436,
      0.021743106,
      0.0152023155,
      0.021303898,
      0.01005994,
      -0.012350256,
      -0.0048333514,
      -0.006644567,
      0.018436993,
      0.030586522,
      -0.006628502,
      0.022261875,
      0.0023064653,
      -0.006036165,
      -0.015746366,
      0.01959115,
      -0.028928073,
      -0.037080627,
      0.01195921,
      -0.025175776,
      0.022447253,
      0.010771393,
      0.02628318,
      -0.03670678,
      0.002921073,
      0.00086526986,
      0.007008624,
      0.006425114,
      0.0013298031,
      0.019324882,
      -0.003621741,
      0.029191965,
      0.019326905,
      0.018290522,
      -0.0028914583,
      0.014871527,
      0.009029407,
      0.016124655,
      -0.017428845,
      -0.0074308007,
      0.016120985,
      0.016709313,
      -0.014064703,
      -0.019029442,
      -0.011288309,
      -0.007118189,
      0.0074879015,
      -0.026834888,
      0.0030061875,
      -0.021235282,
      0.02326265,
      -0.0046566315,
      0.009088864,
      -0.011983638,
      -0.02506532,
      0.018108325,
      0.007621795,
      -0.010263912,
      0.022801341,
      -0.024393385,
      0.0081636105,
      -0.014417977,
      0.017563898,
      -0.016884452,
      0.018554917,
      -0.00045041458,
      0.018803153,
      0.024679761,
      0.033275824,
      -0.004570666,
      -0.018561115,
      -0.014872928,
      0.014218578,
      0.027459968,
      0.008207265,
      -0.02315075,
      0.014109381,
      0.021038203,
      -0.02280234,
      0.000760929,
      -0.0048140823,
      -0.019190595,
      0.0038162551,
      -0.02275501,
      0.029722268,
      0.00379,
      -0.017360788,
      -0.018525109,
      -0.010911288,
      -0.0047332076,
      0.014408191,
      0.030465964,
      0.004731857,
      0.0066034286,
      0.0148891425,
      -0.008640369,
      0.0026247515,
      -0.002210687,
      0.026020646,
      0.016801475,
      -0.020276528,
      0.0005380784,
      0.017447371,
      -0.0027914739,
      -0.012827886,
      0.021489829,
      0.01622402,
      0.009357208,
      -0.0047033066,
      -0.0015403345,
      -0.0074292673,
      -0.012894898,
      0.048897024,
      0.0074519557,
      -0.029699929,
      -0.004731638,
      -0.004797346,
      -0.021580042,
      -0.0077268155,
      0.0017422993,
      -0.020441037,
      -0.0074847583,
      -0.0024328982,
      -0.017689614,
      -0.009166214,
      0.0017646559,
      -0.0011063939,
      -0.021701582,
      -0.018995183,
      -0.0120819425,
      -0.010693502,
      0.002718483,
      -0.0057369363,
      -0.02282467,
      0.016528942,
      0.026040938,
      -0.016896348,
      0.009798585,
      0.014606514,
      0.002824981,
      -0.0008828037,
      0.0020708626,
      0.008720201,
      0.016916309,
      -0.09090667,
      -0.009152575,
      0.010394959,
      -0.025597285,
      -0.006894333,
      0.013653587,
      -0.010416937,
      0.015050161,
      0.014717342,
      0.008662886,
      -0.000081101774,
      -0.0073587988,
      0.012682593,
      0.009344819,
      -0.0052081994,
      0.026377045,
      0.01530754,
      -0.011823014,
      0.011992039,
      -0.026626736,
      -0.016088575,
      -0.007922146,
      -0.001297846,
      0.00013024399,
      0.02957884,
      0.001217811,
      -0.01251043,
      0.013143098,
      0.028392995,
      0.002900293,
      0.007456931,
      0.012617888,
      -0.01717835,
      -0.012275082,
      -0.011548756,
      0.011583921,
      0.030005433,
      -0.025285302,
      0.036618862,
      -0.004181317,
      -0.011223686,
      -0.016496474,
      -0.0060219164,
      0.006052747,
      -0.0009888386,
      0.00094184716,
      0.0086089615,
      -0.0039208215,
      -0.00665949,
      0.011397675,
      -0.021647694,
      -0.004929093,
      0.015155911,
      -0.0068237227,
      0.015081633,
      -0.017754758,
      0.007266962,
      -0.004714997,
      0.029239113,
      0.012441125,
      -0.00027890483,
      -0.010193279,
      0.0027229711,
      -0.019298417,
      0.016819857,
      0.011353615,
      -0.01291948,
      -0.003601002,
      0.0030982604,
      -0.02684363,
      0.01103018,
      -0.025078988,
      -0.013942409,
      -0.021460427,
      0.012442023,
      0.028909324,
      0.029863343,
      0.0061955783,
      -0.04270029,
      0.0065238536,
      0.004247082,
      -0.0011163733,
      0.018555243,
      0.021141864,
      0.009300946,
      0.0052512516,
      -0.0214184,
      0.022305146,
      0.0044384664,
      -0.03701737,
      0.0077981483,
      0.0312068,
      -0.0026203585,
      -0.013604449,
      -0.01319689,
      0.012390126,
      -0.02351346,
      0.007771509,
      -0.011876591,
      0.02094797,
      -0.03084869,
      -0.0014823823,
      -0.023903424,
      -0.0048754197,
      0.012193306,
      0.022863945,
      0.00753567,
      -0.0027700455,
      -0.0054840506,
      -0.008274054,
      0.011016485,
      0.0077300323,
      -0.017484544,
      0.0053622937,
      -0.024721943,
      0.023493465,
      0.026163638,
      0.016224578,
      -0.012791165,
      -0.001793198,
      0.00040270266,
      -0.008883579,
      0.0040107393,
      -0.00082761346,
      -0.0041221892,
      -0.006734028,
      -0.012954509,
      0.0039685788,
      -0.003156967,
      -0.014694728,
      -0.024483297,
      0.016209254,
      -0.028336076,
      0.0016938155,
      0.0042806547,
      -0.030115563,
      0.010736438,
      -0.0039574113,
      0.011027051,
      0.02008497,
      -0.0063619404,
      0.015238424,
      -0.00060905365,
      0.00076644804,
      -0.012322222,
      0.019219082,
      -0.013203031,
      0.0048233615,
      -0.0033906475,
      -0.014539057,
      -0.0025547312,
      0.0054341927,
      0.0072496533,
      -0.010635994,
      0.002305946,
      0.011860047,
      0.023183707,
      -0.01064202,
      -0.020199712,
      -0.010782082,
      -0.036142517,
      0.015907373,
      -0.020270595,
      -0.030872704,
      0.0016876685,
      0.016268821,
      -0.013032314,
      -0.009106003,
      -0.0011099452,
      0.0077094063,
      -0.026881596,
      -0.03149179,
      -0.033684622,
      0.013090833,
      -0.0024260487,
      0.007009893,
      0.0013177097,
      -0.024169648,
      0.012758754,
      0.0023014098,
      -0.0007749963,
      0.0074974853,
      -0.00947854,
      0.012445251,
      -0.0007638089,
      0.0015884662,
      0.012057162,
      -0.007937037,
      -0.021783136,
      0.007113929,
      0.01896218,
      -0.014314158,
      -0.020906951,
      0.012832258,
      0.028101582,
      0.020943098,
      0.038052015,
      0.014164284,
      0.01571615,
      0.009170204,
      -0.00371581,
      -0.009165209,
      0.0112203695,
      -0.026267415,
      0.0022582316,
      0.019698508,
      0.009664892,
      -0.008003012,
      -0.020444203,
      0.00837016,
      0.0025553796,
      0.0036060286,
      0.003747463,
      -0.002664084,
      0.020587744,
      0.0030406972,
      -0.003520191,
      0.017724035,
      -0.040790226,
      0.002829803,
      0.017346188,
      -0.0027518321,
      0.0039323242,
      -0.006710691,
      0.0024706367,
      -0.006830035,
      -0.018627845,
      0.012606465,
      -0.006355234,
      -0.014431279,
      -0.0042290473,
      -0.007866093,
      0.022864688,
      0.023649072,
      -0.019057026,
      -0.004439571,
      0.020117642,
      -0.006558595,
      0.004079836,
      -0.010188722,
      0.0046710176,
      -0.0041810796,
      -0.00694785,
      0.013483711,
      -0.00051336735,
      -0.011786237,
      0.01557916,
      -0.0025639236,
      -0.009959128,
      -0.0021917522,
      0.019784262,
      0.024517113,
      0.0031936523,
      0.005527009,
      -0.019217078,
      0.02487877,
      0.002478254,
      0.016099803,
      -0.00006097323,
      -0.0001678043,
      -0.028913394,
      0.0015490298,
      -0.014992696,
      0.012935186,
      0.015880534,
      -0.02725001,
      -0.0021934554,
      0.020541726,
      0.021140568,
      -0.12429246,
      0.010162037,
      -0.0065648514,
      -0.008032452,
      -0.00033150485,
      0.0053220503,
      -0.0023814922,
      -0.014977405,
      -0.027965723,
      -0.008627303,
      -0.0053583384,
      0.005808622,
      0.007129797,
      0.026022987,
      -0.007027346,
      -0.008101192,
      -0.007837017,
      0.023177836,
      0.041454196,
      0.0039289463,
      -0.008461172,
      0.006864451,
      0.0031475364,
      -0.011153983,
      -0.00675831,
      0.009038645,
      -0.0024363196,
      -0.023510523,
      0.0077898726,
      -0.007394523,
      -0.030496947,
      -0.013806995,
      -0.007632943,
      0.0007479147,
      0.019183295,
      0.014510535,
      -0.0064127585,
      0.0112203965,
      0.015481538,
      -0.0011183681,
      0.019107517,
      0.015592832,
      0.008644181,
      0.0027806647,
      0.0075128255,
      0.018025614,
      0.019998794,
      -0.015673894,
      0.00032193444,
      0.054519333,
      -0.041859213,
      -0.016352803,
      0.010556863,
      -0.0014033928,
      0.032644667,
      0.00077859074,
      0.007522009,
      0.0018741791,
      0.005757445,
      0.0062153935,
      -0.00077895966,
      0.017129775,
      -0.007378331,
      0.019685177,
      -0.028872358,
      0.011522076,
      0.012010417,
      -0.0018767039,
      0.0019179838,
      0.010050368,
      0.0029841529,
      -0.009236712,
      0.001049764,
      0.011679578,
      0.0042651,
      -0.0038146512,
      -0.0025177316,
      0.016262637,
      -0.013138464,
      0.0039157122,
      -0.022721956,
      0.0074983938,
      -0.06606071,
      -0.009587655,
      -0.00044877877,
      0.017511107,
      0.013925068,
      0.008586952,
      -0.0032260916,
      0.027929302,
      0.004346906,
      -0.00405171,
      -0.023414282,
      -0.015642796,
      -0.0019540563,
      0.00064252655,
      -0.0058237277,
      0.0016451478,
      0.019623613,
      -0.026653172,
      -0.015188404,
      0.0013845131,
      0.0013318779,
      0.0104462085,
      -0.004663968,
      -0.0071075666,
      0.01190633,
      0.022818735,
      -0.024175303,
      0.020233331,
      -0.008528943,
      -0.0047268705,
      0.008802796,
      -0.13828103,
      -0.024786858,
      0.025217107,
      0.000039849256,
      0.012581808,
      -0.00044151043,
      0.0036808485,
      -0.0072862864,
      -0.014976239,
      -0.0356376,
      0.007250353,
      -0.02393984,
      0.0047540246,
      0.0066427425,
      -0.013961951,
      0.1199748,
      -0.0016793706,
      -0.005569773,
      0.013387776,
      0.01004233,
      -0.0132168615,
      -0.0018398211,
      0.009623072,
      0.010189189,
      -0.00069595873,
      -0.023717942,
      0.0035096363,
      -0.018271128,
      0.030064609,
      0.006540564,
      0.0026418238,
      -0.0186794,
      -0.013738585,
      0.023521084,
      0.0026852665,
      -0.007619123,
      0.0049763415,
      -0.03113532,
      -0.015952293,
      0.0035402337,
      0.0024796356,
      -0.007184456,
      -0.014099499,
      0.009404683,
      0.020523733,
      0.019853525,
      0.011979154,
      -0.012416403,
      -0.0020963876,
      -0.010348012,
      0.011679269,
      -0.06679369,
      0.00016290176,
      -0.009602223,
      -0.014594191,
      0.029093001,
      0.008461454,
      0.0066769784,
      -0.016466964,
      -0.0023474188,
      -0.0042026914,
      0.0040919273,
      0.010219867,
      0.0001751965,
      0.002678479,
      -0.009478355,
      0.011921736,
      0.022822838,
      0.028142221,
      -0.0073949285,
      -0.0049045794,
      0.010110823,
      0.006750976,
      -0.010777539,
      -0.023326382,
      -0.0021412545,
      -0.0030479454,
      0.036792126,
      0.0027447115,
      -0.011964729,
      0.008234677,
      0.008176869,
      -0.012766356,
      -0.026705386,
      0.014362435,
      -0.0014008547,
      -0.004606353,
      0.028560875,
      0.008653588,
      0.0018140861,
      0.008812615,
      -0.005682647,
      -0.015297921,
      0.031737547,
      -0.0008998861,
      0.010096417,
      -0.00458211,
      0.013523379,
      0.022920223,
      0.005607014,
      0.002780561,
      -0.0011128089,
      0.009368429,
      -0.019621938,
      0.010107679,
      0.013864688,
      0.010135782,
      0.020334445,
      0.002204659,
      -0.005773645
    ]
  }
]