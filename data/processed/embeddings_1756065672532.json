[
  {
    "id": "genai_cohort_python_01_Virtual_Environment_with_venv_vtt",
    "content": "Hey there everyone, 2 and welcome to the video. 3 In this video we are going 4 to learn how we can create 5 a virtual environment in Python. 6 And just want to heads up on that 7 that there are many ways of 8 creating virtual environment and 9 there are variety of tools 10 available to create virtual 11 environments and we're going to 12 see all of them, but we have to 13 start somewhere. 14 So we're going to start 15 with the most commonly used. 16 As of now I am moving 17 on to the new tool. 18 Actually, I'll be honest with 19 you, I now prefer to use UV 20 and as a virtual environment tool 21 I will definitely cover that 22 up eventually in the series. 23 But I would want you to 24 have an experience where 25 everybody is going right now. 26 So majority of people haven't 27 moved on to the uv that's 28 latest and cutting edge. 29 Majority of the people use 30 pip, VENV as a tool. 31 I will walk you through how we can 32 work with that and you will also 33 learn how you can install other 34 dependencies as well with this. 35 So, so first of all let's go on 36 to the screen and try to understand 37 that why anybody would want 38 to have a virtual environment. 39 So there is a simple 40 explanation for this. 41 Let's just say this is your 42 machine, a pretty big one. 43 This is your machine and I happen 44 to call everything as a machine. 45 You can feel free 46 to call it as computer. 47 This is my old habit 48 of calling computers as machine. 49 I love to call them 50 and I have a habit of this. 51 So in this machine, let's 52 just say you go ahead 53 and install a Python version. 54 So we go ahead and say, hey, 55 now I have installed Python 56 in my machine, this is my Python. 57 And along with the Python, 58 let's just say you are working 59 on something interesting which 60 includes database as well. 61 So we'll just go ahead and say we are 62 working on postgres as a database. 63 All right, no problem at all. 64 We can go ahead and install all of 65 them and keep on working with them. 66 But there is a problem. 67 There is a new project and which 68 uses a different version of Python. 69 So let's just say we are going 70 to tilt this a little so that we 71 can just reference this as 72 a different version of Python. 73 How you're going to work 74 on a different version of Python. 75 All right, for this version 76 to work on, you have to uninstall 77 this version and go ahead 78 and install this version. 79 That's little bit difficult. 80 Now apart from this, that's just one 81 tip of the iceberg of the problem. 82 Let's just say you want to again 83 go back onto the latest version. 84 So you will uninstall this and you 85 will install the latest version. 86 This is the problem, this. 87 But there could be other tools 88 as well that you want to use. 89 For example, let's just say this 90 is another utility that you have 91 installed to work on the Python. 92 This could be a utility 93 to talk to CSV files or PDF 94 files or anything else. 95 If you go ahead and want to use 96 it, you can install that using 97 Pip, which is a utility that comes 98 up by default with the Python. 99 So you can go ahead and say, 100 hey, I want to install this 101 utility on my machine. 102 That's great, you can go 103 ahead and install this. 104 Similarly, there are utilities 105 like Flask, there are utilities 106 like Numpy for Data Science. 107 Now, all of them you're installing, 108 and if any one of them gets a change 109 in the version, you have 110 to actually uninstall this and have 111 to grab another version of it. 112 So this needs to go out and this new 113 version needs to come into this. 114 But maybe your other files were 115 dependent on this previous version. 116 I hope you are getting the sense 117 of why this is getting a nightmare 118 as we go further into this. 119 So what we do or what we try to 120 do is instead of doing installation 121 on the whole of my machine, 122 I really don't like to install 123 these days, even any database. 124 I use the docker for this 125 docker for another day. 126 But I don't prefer to install any 127 Python utilities on my whole system. 128 What I prefer to do is that, 129 hey, give me inside my computer a, 130 virtual environment. 131 This is a temporary environment 132 which you can activate 133 and deactivate based on when you are 134 using it or not using it. 135 And inside this environment, I prefer 136 to install all of my utilities, 137 so I can just go ahead and keep on 138 adding my utilities as I need them. 139 Now, this utility and whatever 140 I'm installing on my main machine 141 have no connection at all. 142 This is a sandboxed environment. 143 This environment is not going 144 to talk to your real environment 145 or real Python installed. 146 You, you have to get a copy 147 of Python into this. 148 Luckily for us, the tools that we are 149 going to use like pip, they actually 150 go ahead and install a version 151 of Python automatically for you. 152 And on top of that, you can go 153 ahead and install any 154 further utilities, like Numpies, 155 Flask, Pandas, whatever you 156 wish, any Python utility, 157 you can go ahead and install that. 158 If you want something to be 159 on your main machine, you can 160 still use Python and PIP and install 161 that on main machine, 162 but that will not be available 163 inside your virtual environment. 164 You have to go ahead and say, hey, 165 this is my Virtual Environment. 166 This is activated and I want 167 to just work within this. 168 Once I'm done working 169 I can go outside. 170 Now apart from this, there 171 are also a couple of ways that 172 you create a special file. 173 And the name of this file, 174 at least for the initial one, is 175 called as requirement Txt. 176 This file has nothing, it 177 just has all the things 178 that you're installing. 179 So as soon as you install something 180 you go ahead and mark this, that 181 hey, I want to move this 182 information that I have installed 183 this file in my requirement txt so 184 that if anybody else wants to work 185 on it they can actually consult 186 the requirement Txt and can 187 install my file. 188 I hope you are getting it. 189 It's not that hard. 190 It's just a text file 191 in which the information for all 192 of this file is available. 193 All. 194 Right, good enough. 195 So one of the most common way 196 of installing these virtual 197 environment or creating this 198 sandbox is known as Venv. 199 Virtual Environment. 200 Yeah, that's the name. 201 But this is not the only one. 202 There are a couple of others 203 available as well and out 204 of that one of my favorite one is uv 205 and we're going to cover 206 the installation of UV as well. 207 And we'll cover both 208 Virtual Environment and uv. 209 There are others as well, like 210 there is one known as Poetry. 211 We will not cover that 212 but again there could be like 213 five others as well. 214 I don't know much about them. 215 The most common one which are 216 used in the industry are 217 Virtual Environment and uv. 218 These are the ones that 219 we are going to cover. 220 Now let's go ahead and see 221 a practical example of how 222 this actually can be done. 223 This is not really 224 that hard of a program to work 225 on with super easy. 226 Just go ahead and create a new folder 227 and we're going to create a virtual 228 environment within this folder. 229 So I'll go ahead and create 230 a new folder and I'm going 231 to call this one as Test Venv. 232 I'll actually remove this 233 folder after creating this video 234 because there's no point 235 of providing this folder. 236 It's just a configuration file. 237 You can always regenerate that. 238 Now inside this folder I would 239 like to right click and we'll click 240 on Open Integrated Terminal. 241 Now this is our Python 242 environment and terminal. 243 Let's go ahead and see that I do 244 have a Python and if I go ahead 245 and say V, I don't remember it's a 246 dash V or dash dash version I have 247 to always look for what's the 248 version? 249 Come on. 250 Oh My bad, it's actually 251 Python 3 in my case. 252 So Python 3 and I guess 253 then I can say V. 254 Again it's little difficult 255 to find it out. 256 I usually don't check 257 the versions like this. 258 But anyways, so we'll just kill 259 this and I will walk you through 260 that how we can actually 261 generate a virtual environment. 262 So now notice here I am inside this. 263 So if I check the pwd present working 264 directory, I'm in the test vnv. 265 That's the most important part. 266 Once I'm here I have to use 267 Python 3 in my case and in your 268 case it's just Python because 269 you are on Windows and then I 270 have to provide an option of 271 dash that I want to use a module 272 with Python. 273 The module name is venv and I want 274 to create a virtual environment. 275 Now virtual environment 276 will like to keep some of the files 277 and Python installations somewhere 278 in your directory. 279 So that can be kept in any directory. 280 Some people like to call it as dot 281 venv Some people like 282 to call it as directly venv. 283 Whatever you do, there is no 284 right or wrong in this one. 285 As soon as I hit enter you will 286 notice that this will take a 287 second, but if I open this up 288 folder now I do have this venv 289 and I have bin include lib all 290 of this. 291 This whole thing actually is 292 saying that hey, you have 293 a Python 3.1.3.2 version, we can 294 change the versions as well. 295 Apart from this we have this bin 296 and inside the bin you 297 can see that we have this 298 activate script as well. 299 We have the pip and a whole 300 bunch of other things. 301 Now the next thing that 302 you have to do is go inside 303 this venv and activate 304 your virtual environment. 305 Right now it's not activated. 306 So first I'll walk you through how 307 you can do that in Windows and then 308 I will walk you through that how 309 we can do that on Mac and Linux. 310 So Windows user, your file 311 environment is venv v Env. 312 Go inside that, then you can just 313 press the forward slash, that's 314 a Windows thing and you will have 315 something known as script and this 316 always remains exactly same. 317 So inside the scripts you 318 will further can have 319 a forward slash and activate. 320 As long as you just 321 press this, that is it. 322 You will activate your 323 virtual environment. 324 If any point you want to deactivate 325 it, just write deactivate, hit Enter 326 and that's it for if you're on Linux 327 or a Mac, then you have to write 328 source in front of it and then we 329 will go again, exactly in the same 330 directory. 331 For in our case it's venv. 332 Venv. 333 And then we know that 334 it's inside the bin. 335 So let's go inside Bin and then 336 again the same file activate as 337 soon as I hit enter for this. 338 Oops, my bad. 339 The file name is actually venv. 340 I missed a V. 341 And there we go. 342 Notice here it says Venv 343 at the very start of it. 344 This means the virtual 345 environment is active. 346 Now I can go ahead and run 347 all these commands which we 348 are going to see in a second. 349 And now let's go ahead and see that. 350 Can I go ahead and deactivate it? 351 Yes, the command is same, 352 deactivate and hit enter. 353 That's it. 354 Your virtual environment is gone. 355 So what just happened? 356 You just asked your terminal that, 357 hey, I want to be inside this box or 358 I want to be in the whole machine. 359 So this whole machine is your 360 basic Python where you have 361 installed, but we have a one copy 362 of Python installed in our 363 virtual environment as well. 364 So we are into this Venv. 365 Let's go ahead and try this again. 366 Source Venv Bin Activate. 367 So if you're calling it as 368 vnv, go inside that folder. 369 If you're calling it as 370 vnv, go inside that folder. 371 Windows, exactly same, 372 just the path is forward slashed. 373 All right, now sometimes what will 374 happen that your VS code might not 375 be able to detect the whole thing 376 that hey, we haven't seen that. 377 Where is your virtual environment? 378 In that case you can just go ahead 379 and say pwd as a present working 380 directory, copy this whole thing 381 along with this whole thing. 382 Because this is where 383 your Activate file is. 384 And at least you have 385 to walk till the bin. 386 And then what you can do is 387 let me just go ahead 388 and run the command again. 389 Let's just say I have 390 copied this whole thing. 391 Copy that. 392 And then press on your VS 393 code command shift P. 394 If you're on the Mac or Control 395 Shift, push on Windows and this will 396 open up this whole terminal thing. 397 And then write Select Interpreter. 398 This is the first thing that will 399 come to you, the select interpreter. 400 Click on this and then you 401 can actually go ahead and create 402 a virtual environment 403 from here as well, which I 404 usually don't recommend. 405 And then you have to enter the path 406 you can select from the recommended 407 one which will select a few for you. 408 Like there's one in the user 409 Bin, there's one Anaconda 410 installation as well. 411 But if you click on Enter the path 412 now you can just enter the path. 413 So Whatever we have copied using pwd, 414 just place that and then we 415 know that inside this we have 416 venv and we have a slash bin. 417 This is where my activate script is. 418 So you can just give that path. 419 In my case it has already 420 activated, so I'm fine with that. 421 But this is also another way of 422 activating your virtual environment. 423 Sometimes when we do that, you will 424 notice that with the uv, it 425 sometimes is not able to recognize 426 this virtual environment because 427 the flow of UV is kind of fresh. 428 It's not that much known 429 by the interpreters and VS code. 430 So it happens. 431 All right, let's go back. 432 And this is the basic 433 of virtual environment. 434 Now the interesting part is what can 435 I do with this virtual environment? 436 You can do a lot of stuff. 437 First and most common stuff is 438 now first of all, I don't have 439 to say Python 3 now because we 440 are in this virtual environment 441 and it's exactly same for you 442 and me whether you are on 443 Windows, I'm, on Mac, doesn't 444 really matter for all of us it's 445 just Python now. 446 And another utility 447 that we have is pip. 448 So if you just write, hit PIP 449 and enter, you are going 450 to notice that we have the PIP 451 installed and this is how 452 we can run this command. 453 Let's go ahead and run 454 the PIP command. 455 So I will say that hey pip, I want 456 to install the PIP, which is already 457 installed, but I want to upgrade it. 458 So I can just go ahead and provide 459 a flag of dash dash so it will get 460 me a latest version of the pip. 461 And you will notice it says 462 you have installed Python 463 package global environment. 464 You may have that and conflicts. 465 Would you like to create 466 Virtual environment? 467 No, I am already on Virtual 468 environment, so please 469 ignore this message. 470 Now we have the latest version 471 of pip, being installed. 472 I can install dependencies with it. 473 I can go ahead and say pip, install 474 and whatever I want to install. 475 That is nice. 476 Let's just say there is a package 477 known as Request which 478 helps you to make web request. 479 I can go ahead and install this. 480 That is it. 481 It will go ahead, 482 take the dependencies, sub 483 dependencies, everything. 484 There is another 485 package known as Flask. 486 So I can go ahead and say I want to 487 install Flask or Django or Fast API. 488 There are so many of them, I can go 489 ahead and enter this and this will 490 install this package as well. 491 Now most important part is I'm 492 installing these packages 493 in the virtual environment, 494 not in the main environment. 495 So if I go outside of this and I say 496 that hey, I want to use request or 497 Flask, they are not available to me. 498 They're available within 499 this virtual environment. 500 And sometimes people don't ship 501 this venv they simply ship a file 502 which we just studied that 503 requirement txt that if you want 504 to know what all things are 505 installed in my virtual 506 environment, I will give you a 507 file and take consultancy with 508 this file and install all the 509 things which are mentioned there. 510 How do we generate this file? 511 PIP can actually generate 512 that file very easily. 513 The command that we want 514 to use is PIP Freeze. 515 If you enter the PIP freeze 516 command you will notice that 517 these are all the dependencies 518 which we have installed. 519 And you might be wondering, 520 hey, we didn't install this 521 much, we only installed Flask. 522 All right, that is there. 523 We also install request. 524 But what are the other things? 525 Now when you install Flask 526 or request, they are not 527 the alone that comes up. 528 Sometimes they are sub dependent 529 on other modules of Python. 530 They also need to be installed. 531 In this case that's exactly 532 what PIP has done for you. 533 It has gone ahead and installed 534 all these dependencies or 535 sub dependencies for you. 536 And in order to work all of this we 537 need to actually grab all of this. 538 Now here's a command. 539 Once we know that PIP freeze 540 command exists, we can redirect it 541 into any file. 542 And this is a Linux based utility. 543 What we are going here is 544 a Linux based utility which 545 comes in Python as well. 546 So again, if you are 547 in Windows it will work. 548 If you are in a Mac or 549 Linux it will work. 550 But remember this whole thing, 551 a lot of people think that this 552 is a Python specific thing. 553 It is not. 554 It is a Linux. 555 We are just redirecting the output 556 of this command in a file. 557 That is all we are doing. 558 I still wonder that so many 559 people who are so much experienced 560 in Python don't know this 561 requirements txt and this doesn't 562 need to be requirement txt. 563 You can call it as dependencies 564 txt or install txt. 565 Whatever you wish to call, you 566 can just go ahead and call this. 567 This is just a kind of a philosophy 568 that people use that hey, let's 569 call this as requirement txt. 570 If I hit it enter what 571 you will notice. 572 Now inside this file we have this 573 requirement txt and all 574 of the files are available to me. 575 If I install anything I have to go 576 ahead and repeat this process again. 577 Super simple, super easy. 578 Now I can go ahead and install 579 from this and you can 580 just go ahead and say hey, I 581 want to install all this. 582 Or you can install them one by one 583 along with the version 584 and everything we will see this, 585 some of the stuff as well. 586 But this is all. 587 Now I can go back and say that, 588 hey, I want to deactivate it. 589 So go ahead and say deactivate 590 and that is all. 591 Now you are outside of this. 592 Notice the venv also is gone. 593 But again, that's not 594 a true check of this. 595 Always check that. 596 Hey, whether the Python version 597 that we are installing is different 598 or not, or just kill this. 599 And by the way, one more interesting 600 thing I want to walk you through. 601 If I go ahead and activate this 602 command again, source activate. 603 And if you're thinking that, 604 hey, I'll just go ahead 605 and kill this terminal and I will 606 start another terminal. 607 Notice here, this terminal which 608 you're going for, this doesn't have 609 this virtual environment because 610 you're opening the folder terminal 611 in the root of this. 612 But we have the virtual 613 environment in the test vnv. 614 Now let's go ahead and open 615 an integrated terminal here and you 616 will notice your terminal is gone. 617 Sometimes it goes away, 618 sometimes it doesn't go away. 619 So make sure you're aware 620 of whether the virtual 621 environment is activate or not. 622 Always pay attention to this. 623 And I can run this. 624 And there we go. 625 Our virtual environment is activated. 626 Now I can go ahead and install 627 whatever I wish to do. 628 Let's go ahead and say deactivate. 629 And it's gone now. 630 Now sometimes, again, remember, 631 sometimes it goes away by 632 killing the terminal, 633 sometimes it doesn't go away. 634 And that's it. 635 Told you. 636 That is the reason why I said I won't 637 be giving you this file because 638 there is nothing inside this file. 639 It is absolutely the basic. 640 I'll, go ahead and delete 641 this because we don't 642 need it technically. 643 I hope you got the idea 644 of why the virtual environments 645 are important and what 646 they do and how it works. 647 Now UV also does exactly same. 648 We have this sandbox environment. 649 We can install the utilities, but uv, 650 instead of using the requirement 651 txt, it uses a different file name. 652 Rest of the process is exactly same. 653 All right, hope you have enjoyed 654 this video and this was very 655 beneficial for you to understand 656 the virtual environments. 657 That is it for this video. 658 Let's go ahead and catch 659 up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 Virtual Environment with venv.vtt",
      "originalPath": "genai-cohort/python/10 Chapter Subtitles/01 Virtual Environment with venv.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.009173624,
      -0.0034020192,
      0.015506894,
      -0.05099033,
      0.022405399,
      0.003103042,
      0.024628337,
      0.0077664247,
      0.017173717,
      -0.0019932054,
      -0.023229526,
      -0.02279181,
      0.030282238,
      0.03861131,
      0.12255134,
      0.0100661935,
      0.000280672,
      -0.024081714,
      0.009953485,
      -0.01780944,
      -0.000092601804,
      0.00077251217,
      0.009894187,
      -0.015440112,
      0.01638788,
      -0.0032292625,
      0.0019440869,
      -0.0029228984,
      0.008199475,
      -0.026277833,
      -0.023314347,
      0.004396175,
      -0.0045358357,
      0.028852649,
      0.011455546,
      0.0063719223,
      0.018555714,
      0.0023417117,
      -0.0051625483,
      -0.0027583519,
      -0.02136728,
      0.013169878,
      -0.013579952,
      -0.02168085,
      0.015388231,
      -0.016027793,
      0.0024107639,
      -0.033652052,
      0.019971864,
      0.013257685,
      -0.009745427,
      0.0011511712,
      -0.021001074,
      -0.18874961,
      0.0013138278,
      -0.005698909,
      0.007894105,
      -0.0050814445,
      0.0022735267,
      0.0099991895,
      -0.03243589,
      0.024276756,
      -0.05395921,
      -0.0056743966,
      -0.005957259,
      -0.008426913,
      0.014903873,
      -0.008084998,
      0.0011101865,
      -0.01754318,
      0.018736118,
      -0.0020932583,
      -0.001946849,
      -0.012765778,
      -0.04405232,
      -0.021793973,
      0.0022882281,
      -0.01982429,
      0.00414062,
      0.023230437,
      -0.015415496,
      -0.004929121,
      -0.002360782,
      -0.006778561,
      0.011169425,
      0.022758698,
      -0.039700013,
      -0.00054298824,
      -0.008158178,
      -0.0068435417,
      -0.015069538,
      0.020245742,
      -0.019911803,
      0.013388761,
      -0.016826456,
      0.007447985,
      -0.021927455,
      0.0075002634,
      -0.01980896,
      0.025188651,
      0.014467534,
      -0.0034768207,
      -0.046056245,
      -0.00042786825,
      0.0157058,
      0.0014625919,
      0.01340062,
      -0.012774139,
      -0.005994187,
      -0.021473927,
      0.0024827006,
      0.0036138552,
      -0.0068925503,
      0.030483454,
      0.0052149044,
      -0.16944869,
      0.007979105,
      -0.0145117445,
      -0.012809654,
      -0.0039028015,
      -0.0102654,
      -0.0051178937,
      0.013157116,
      -0.004152096,
      0.005185757,
      0.007990872,
      -0.0027256343,
      0.019391771,
      -0.0027838664,
      -0.028116195,
      -0.038216542,
      -0.01764767,
      0.0048742876,
      0.01753981,
      0.019497747,
      0.02146311,
      -0.030594984,
      -0.0071109477,
      -0.03024104,
      -0.012609774,
      -0.014666267,
      0.039301947,
      0.013398725,
      0.028632615,
      -0.0012604469,
      0.010454045,
      -0.005352693,
      0.02112349,
      -0.00049823616,
      -0.02812064,
      0.010429539,
      -0.023897959,
      0.006155098,
      -0.009686982,
      0.013320097,
      -0.002106563,
      -0.0064081326,
      0.0057453574,
      -0.020215346,
      -0.006118045,
      -0.0031422868,
      -0.004573388,
      0.009503463,
      0.012790654,
      0.004107843,
      0.0017381064,
      -0.017531006,
      0.008657569,
      0.031659372,
      0.012952232,
      -0.010830931,
      -0.0212528,
      -0.01109573,
      0.01641454,
      -0.015662808,
      0.01203767,
      -0.019091532,
      -0.0022517417,
      0.0062069604,
      -0.0145980595,
      0.021825103,
      -0.000295967,
      0.014977897,
      -0.0069820657,
      0.011558106,
      0.010662617,
      -0.0125447875,
      0.00989865,
      0.0112101445,
      -0.008972516,
      -0.005108953,
      0.013527771,
      0.010192674,
      0.0111466,
      -0.007830921,
      -0.012166373,
      0.0062595424,
      0.009217776,
      -0.01454766,
      0.034192756,
      0.0064102546,
      -0.006336578,
      -0.010848793,
      -0.013527482,
      0.022890294,
      -0.020823594,
      -0.02519257,
      -0.018150182,
      -0.00903363,
      -0.009099148,
      0.007510261,
      -0.020661065,
      0.008473024,
      -0.00600466,
      0.0051991316,
      -0.006437608,
      0.022969179,
      0.014406622,
      0.006252487,
      -0.0073173065,
      0.010041378,
      -0.006326988,
      -0.006006545,
      0.021763703,
      0.013134006,
      -0.031537276,
      -0.018995203,
      0.0018728492,
      -0.00011297102,
      0.0061602495,
      0.01705705,
      -0.005462953,
      -0.008315371,
      0.009245539,
      0.0023349181,
      0.0019276988,
      -0.022948714,
      0.014092801,
      0.015488377,
      0.00095478416,
      -0.00008352936,
      -0.01672194,
      -0.011035562,
      0.02418296,
      0.021658935,
      -0.008585576,
      0.006437428,
      0.002320517,
      0.00039863816,
      -0.023082195,
      -0.014122799,
      0.009340777,
      0.01545719,
      -0.011497486,
      0.014884084,
      -0.009784219,
      -0.027658021,
      -0.0061893677,
      -0.011180624,
      -0.00463208,
      0.0066427696,
      -0.014417093,
      -0.009022788,
      -0.01440191,
      0.020503832,
      0.006736632,
      0.0054286974,
      0.012045752,
      -0.009553931,
      0.029788056,
      0.016103959,
      0.014815915,
      -0.0011673602,
      -0.004991498,
      -0.018887794,
      -0.0023916783,
      -0.085591815,
      0.00998648,
      -0.010830803,
      -0.02346586,
      -0.008561924,
      0.00023829867,
      -0.015899595,
      0.025478648,
      0.015186815,
      0.004218542,
      -0.008760259,
      -0.00478568,
      0.042378515,
      -0.010381053,
      -0.015711684,
      0.010688852,
      -0.0035825334,
      -0.0042612073,
      0.015519474,
      -0.008149352,
      -0.014340265,
      0.021419222,
      -0.007540299,
      -0.007770423,
      0.014592272,
      -0.018912166,
      -0.009056696,
      0.042968474,
      0.025024759,
      0.007378024,
      -0.02705949,
      0.050887037,
      -0.0020194123,
      -0.012153367,
      -0.0030488642,
      0.010193758,
      0.013800448,
      -0.035543066,
      -0.012775591,
      -0.011962038,
      0.010348971,
      -0.015793497,
      0.018559834,
      0.0008220928,
      -0.00919445,
      -0.0047822953,
      -0.021084877,
      0.004397104,
      -0.02566479,
      0.0018270523,
      -0.012921246,
      0.002977368,
      0.007001331,
      -0.015032099,
      -0.0036456638,
      0.008188698,
      -0.007791782,
      -0.012795076,
      0.024883248,
      0.02360414,
      0.0057263435,
      -0.02143943,
      -0.0028047636,
      -0.0067582345,
      0.01711038,
      -0.011067039,
      0.01423617,
      -0.01093577,
      0.010557603,
      0.025840372,
      0.012612792,
      -0.0136882,
      -0.0096476795,
      -0.01800232,
      0.013781447,
      -0.008658215,
      -0.024295269,
      0.0039380156,
      -0.017432977,
      0.012178109,
      0.018403927,
      0.0011676019,
      0.014748639,
      0.0015586803,
      0.007811419,
      0.006077847,
      -0.0021999658,
      0.015926585,
      -0.0018483973,
      -0.020808937,
      0.013321166,
      0.023724142,
      -0.0073281596,
      0.013449016,
      -0.0134145785,
      0.011160642,
      0.006698393,
      -0.011344367,
      -0.023556964,
      0.0065885386,
      -0.0023154796,
      0.004819094,
      -0.027062416,
      0.015467682,
      -0.009087968,
      0.006680548,
      -0.014225141,
      -0.013099016,
      -0.034248613,
      -0.00070801284,
      0.014047356,
      0.019489774,
      -0.0027844908,
      -0.0053604515,
      -0.0033114743,
      0.017537585,
      0.0031677529,
      0.0102741,
      0.008091805,
      0.004310104,
      0.00012092435,
      -0.011549608,
      -0.01612615,
      0.015881531,
      -0.008615049,
      -0.010431169,
      -0.013491644,
      -0.009835764,
      -0.003250261,
      -0.040292975,
      -0.040888328,
      0.018523235,
      -0.024585221,
      -0.035240408,
      -0.019398544,
      -0.009766459,
      0.024196181,
      0.009016021,
      0.006472304,
      0.022792464,
      -0.0036545198,
      0.006511363,
      0.011049437,
      -0.0153161585,
      -0.016135719,
      0.0176498,
      -0.018187612,
      -0.019857652,
      0.011744889,
      -0.019550912,
      -0.010648548,
      0.0038571898,
      -0.0034518319,
      -0.0049554817,
      -0.006100186,
      0.019449096,
      0.011156363,
      0.00044465865,
      -0.027476648,
      -0.010870911,
      0.0036493503,
      0.006152733,
      -0.009289015,
      -0.002060306,
      0.012378574,
      0.008409456,
      0.014984137,
      -0.0057260706,
      -0.0024388188,
      0.0012365762,
      0.0032432321,
      -0.025820265,
      -0.035237793,
      0.0006242706,
      0.009189907,
      -0.0023449922,
      0.039559726,
      0.008608845,
      0.012887526,
      0.0067275097,
      -0.0041991803,
      -0.01097594,
      -0.027210254,
      0.01626725,
      0.0080757085,
      0.03338147,
      -0.0023687847,
      -0.0048680785,
      -0.010180227,
      0.017835677,
      -0.008271739,
      -0.008159154,
      0.0011078651,
      -0.004471913,
      -0.008694762,
      0.028054506,
      -0.018417172,
      -0.00062337826,
      0.016345449,
      0.0050229053,
      -0.0040800176,
      -0.027065698,
      0.012131651,
      -0.00116393,
      0.0157213,
      -0.01308221,
      -0.0017183768,
      -0.0069792424,
      0.010821174,
      0.024785765,
      -0.0024880574,
      -0.010133921,
      -0.0021126026,
      0.008367154,
      0.0009227859,
      0.028407438,
      -0.007486462,
      -0.0022942491,
      -0.009293371,
      -0.0046123317,
      0.018103136,
      -0.009330084,
      0.0037032638,
      -0.0062041213,
      -0.008668583,
      0.013465445,
      -0.0056923917,
      0.008765567,
      0.009482374,
      -0.010501796,
      0.0006134414,
      0.0016503722,
      -0.013744773,
      0.007396363,
      -0.0118862465,
      -0.0070429062,
      0.0040408,
      -0.0011158279,
      0.0058022044,
      0.021524584,
      -0.006590107,
      -0.024989115,
      -0.0035230976,
      0.0013893762,
      -0.0009203781,
      -0.0007727032,
      0.014253552,
      0.00038126696,
      -0.017494224,
      -0.005854147,
      0.010227888,
      0.03344155,
      -0.004837649,
      -0.02394224,
      -0.0018608612,
      0.017237749,
      -0.01728233,
      0.014062785,
      -0.02002348,
      -0.030103361,
      0.0136124445,
      -0.0012496179,
      0.00057725084,
      0.008640913,
      0.0047465432,
      -0.01940852,
      -0.00169912,
      -0.0131445965,
      0.01641076,
      -0.11149752,
      -0.017447803,
      -0.011750275,
      0.04174764,
      -0.016030079,
      -0.026121082,
      0.00019755741,
      0.0052877106,
      0.02746856,
      0.014160562,
      0.022199169,
      0.0036942777,
      -0.0042047743,
      0.005855844,
      0.003314546,
      -0.008111129,
      -0.00009075113,
      -0.00491365,
      0.023910535,
      -0.019655231,
      0.0013694128,
      0.0066687623,
      -0.0042871465,
      0.008011043,
      -0.004164495,
      0.002040329,
      0.005334653,
      0.005686402,
      0.0047329897,
      -0.0061310795,
      -0.003906066,
      -0.004527739,
      0.017043335,
      0.0012413892,
      0.011014435,
      -0.007234169,
      -0.025707062,
      0.020159462,
      0.00031048674,
      0.012557101,
      -0.007480039,
      -0.00514282,
      0.018972313,
      0.0073342226,
      -0.003674437,
      0.01774076,
      0.016592873,
      -0.009224387,
      -0.001076338,
      0.03538823,
      -0.034850474,
      -0.015304536,
      0.0016507157,
      -0.021632673,
      -0.0062453253,
      0.018853012,
      0.024753666,
      -0.00972471,
      -0.0033099975,
      -0.0060179285,
      0.0062434375,
      0.000633412,
      0.015889945,
      0.0127432095,
      -0.017905116,
      -0.015814997,
      0.009527214,
      0.00765097,
      0.0008963142,
      -0.013054316,
      0.0077777035,
      0.00277809,
      0.00012090568,
      0.0121422345,
      0.01678037,
      0.014969087,
      -0.008920904,
      0.006872648,
      -0.005562867,
      0.017807264,
      -0.024294883,
      -0.01348896,
      -0.034477573,
      -0.02632178,
      -0.004967174,
      -0.0033797368,
      0.031980317,
      0.02701656,
      -0.010820476,
      0.0037025572,
      -0.00086180546,
      0.007194222,
      -0.02103475,
      -0.009863871,
      0.0015412191,
      -0.015256593,
      -0.009746562,
      0.00222762,
      -0.003404908,
      -0.013553902,
      -0.006303822,
      0.007101047,
      0.0026574787,
      -0.004191619,
      0.025191013,
      -0.010472179,
      0.01812766,
      0.020415816,
      -0.00031122493,
      -0.000026826629,
      -0.008600961,
      -0.0090498,
      0.014467722,
      -0.16086617,
      -0.0035162868,
      0.008996518,
      -0.0090620415,
      -0.0052340818,
      -0.009449535,
      -0.04262582,
      -0.004097264,
      -0.005052129,
      0.0060508125,
      0.0046104426,
      -0.008779965,
      -0.03202289,
      -0.014651498,
      0.007999417,
      0.15811926,
      0.0023969584,
      -0.0011088321,
      0.0042060376,
      0.026652455,
      -0.023769453,
      -0.012865866,
      -0.015925718,
      0.022120176,
      -0.015628884,
      0.010515765,
      0.01629786,
      -0.024025738,
      -0.012687802,
      0.006299435,
      0.011961156,
      -0.022230672,
      -0.00031485682,
      0.013185111,
      -0.0037588605,
      -0.022533042,
      0.0050317035,
      -0.015236374,
      -0.0018615435,
      0.005994823,
      0.010576228,
      -0.0028435914,
      0.008319342,
      0.021961808,
      -0.004704155,
      0.0023843928,
      -0.0029558716,
      -0.016799878,
      -0.01170424,
      -0.016301706,
      0.015016774,
      -0.07716664,
      0.011338109,
      -0.01344963,
      -0.032947205,
      0.027668154,
      -0.012997579,
      0.02805779,
      0.0120112905,
      0.031568002,
      -0.016714472,
      -0.0009902017,
      -0.0059417426,
      0.016112465,
      0.0046374206,
      0.006154364,
      0.0324635,
      0.011908398,
      0.0224064,
      -0.008132784,
      0.026482629,
      0.023380253,
      0.0009615102,
      0.009092603,
      -0.022710092,
      -0.015492033,
      -0.026998237,
      0.024588777,
      0.018393833,
      -0.0024606027,
      -0.0074992925,
      0.0060649756,
      -0.011448376,
      -0.0018449243,
      0.024312645,
      -0.010849029,
      -0.012286047,
      0.007326991,
      -0.019148234,
      -0.0020269486,
      -0.003165348,
      0.013522729,
      -0.0013113508,
      0.011032043,
      0.0058163595,
      0.0044676717,
      0.0026688504,
      -0.009595406,
      0.034972224,
      -0.008876378,
      0.010046633,
      -0.007226618,
      0.0014171964,
      -0.034024578,
      0.020359304,
      0.02217977,
      0.00854038,
      0.03332275,
      -0.016407343,
      -0.018430527
    ]
  },
  {
    "id": "genai_cohort_python_01_What_is_Error_handling_vtt",
    "content": "Hey there everyone, and welcome 2 to the fresh new section 3 of handling exceptions in Python. 4 Now if we compare this 5 to the real world, when you are 6 operating your chai shop, 7 a lot of things can go wrong. 8 Maybe you have spilled something, 9 maybe some ingredient is missing, 10 or maybe there's something wrong 11 in the brewing process at all. 12 There are a lot of things 13 that can go wrong in a real 14 world brewing shop of a T. 15 Similarly, a lot of things can 16 go wrong in the T, shop as well as 17 in the code part as well. 18 That's exactly what we want to fix. 19 In this entire section. 20 We want to discuss and talk about 21 how things can go wrong when we are 22 writing some code and how 23 we can gracefully handle that. 24 That handling part is the most 25 important things will go wrong, 26 there is no question about that. 27 But the way how you handle 28 it as best as possible, 29 that's always a good idea. 30 So let me take you on the screen 31 and we're going to write some 32 code and let's discuss about this 33 exception handling in Python. 34 All right, so let me take you 35 onto the screen and where we 36 are going to discuss all 37 of the things that are happening up. 38 So welcome to the first section 39 of exceptional handling. 40 And just to remember this, I'll 41 give you a few analogies so 42 that you can always remember. 43 All right, so what is this kind 44 of exception handling? 45 When you're a part of a big chai 46 journey, you want to sell a lot of 47 chais, a lot of things can go wrong. 48 Some example could be, let's 49 just say we have a milk spill. 50 Spill, Yeah, a Milk got spill. 51 Or maybe a simple missing 52 ingredient, or maybe something 53 is wrong in the brew steps. 54 So these are the common one 55 that we can figure out. 56 But there could be a lot more 57 which can absolutely go wrong. 58 So all of these things, 59 nobody likes them, but they actually 60 happen and we need 61 to learn how we can handle them. 62 So handling all of these incidents, 63 being aware that these 64 are the common mistakes 65 that happens in my chai shop. 66 I just want to handle them 67 so that they don't actually 68 crash my entire shop. 69 I just gracefully handle them. 70 Same thing happens when there 71 is a problem in your code. 72 You don't just crash the entire 73 program, you just handle 74 them gracefully so that the rest 75 of the program 76 can actually work pretty easily. 77 I'll show you some example of that. 78 Like what could go wrong? 79 Usually we write our code very 80 carefully, but no things do happen. 81 And let me show you, 82 by creating a new section, we are 83 on to the 11th section. 84 And let's call this one as 85 exceptions and let's call 86 this one as 01 Basic Py. 87 We will open up our file right 88 here, open an integrated terminal so 89 that we can directly run this. 90 All right? 91 And we'll close our 92 AI feature as well. 93 All right, so what can go wrong? 94 And you might be thinking, hey, 95 I just need an example for it. 96 All right, here is your example. 97 Somebody is placing orders. 98 So here is an array of the orders. 99 The first chai that we have is going 100 to be masala and the second 101 chai that we have is ginger. 102 How conveniently we have said it as 103 second chai, second ginger. 104 But when you go ahead and try 105 to simply have the print statement 106 on orders and you try 107 to access the second value, 108 There we go, the very first error. 109 We have already made it, 110 let's go ahead and run this. 111 So I'll just go ahead and say Python 112 3 and this is going to run this. 113 And we can see that this is 114 list index out of range. 115 And this is a well known 116 error which is index error. 117 So we found that. 118 Can we handle that? 119 Gratefully, yes we can. 120 But there are some errors 121 which are just like this. 122 We can see index error. 123 We have other kinds of errors 124 as well available to us. 125 So index error is just one 126 of them, which usually happens 127 when the index doesn't exist. 128 But again there are 129 different ways how it works. 130 So there is another one 131 which is known as key error. 132 What is this key error? 133 When a key is missing 134 in the dictionary. 135 So this is another kind of error. 136 Now nobody remembers all of them. 137 I just happen 138 to remember a few of them. 139 Very famous, everybody knows this. 140 This is zero division 141 error in the programming. 142 We don't have a concept of infinity 143 in the mathematical world. 144 When we divided by zero, 145 it tends to infinity. 146 Doesn't really mean infinity 147 tends to infinity. 148 The same goes here. 149 In the programming world we 150 cannot actually do that. 151 We just simply throw 152 an error which is division. 153 Then there is also error, which 154 you'll see these days quite 155 a lot, which is type error. 156 This happens when there 157 are incompatible type 158 String mixed with integer. 159 Integer mixed with string. 160 So type error also happens. 161 And then we have this 162 something known as name error. 163 Yes, this is something comes 164 up when the variable is not even 165 defined and you are trying to use, 166 Does anybody remember all of them? 167 No, nobody remembers all of them. 168 Just happen to remember. 169 You will also get to remember 170 a few of them, but not all of them. 171 Even if you don't remember any one 172 of them, that's totally fine. 173 Eventually just by looking 174 at the error, you'll figure out all 175 right, this is what the error says. 176 And in the special line last two 177 versions of Python, whatever the 178 three after dot, that means that 179 version, they have actually worked 180 quite a lot in the errors, as well 181 as how this error can be helpful for 182 a developer. 183 So they have done pretty interesting 184 and tremendous job onto this one. 185 So I hope you got a brief idea 186 of how it works and how it 187 looks like in the next video. 188 We will further nail it down 189 and try to go in depth about 190 how we can actually handle these 191 exceptions or errors. 192 Let's go ahead and catch 193 up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 What is Error handling.vtt",
      "originalPath": "genai-cohort/python/09 Chapter Subtitles/01 What is Error handling.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.013267486,
      -0.0052308077,
      0.029625518,
      -0.04430415,
      -0.009955386,
      -0.0008032715,
      -0.0028845144,
      0.020065451,
      -0.014292723,
      0.011890913,
      -0.013353805,
      -0.011208557,
      0.011221128,
      0.020453567,
      0.14455274,
      0.0017445385,
      0.0065018726,
      -0.00035635257,
      -0.0037886675,
      -0.008140826,
      0.0035984747,
      0.0056150975,
      0.0120300865,
      -0.018399747,
      -0.003020241,
      -0.012751888,
      0.0024171087,
      0.009309928,
      0.035027206,
      -0.025900424,
      -0.021652779,
      -0.0075743557,
      0.004967143,
      0.01720871,
      0.00039320975,
      0.010886268,
      0.00335188,
      0.016534088,
      -0.01683404,
      0.012963214,
      -0.02514944,
      0.0072603105,
      -0.005668696,
      -0.023583995,
      0.0068021896,
      -0.020794004,
      0.00015112682,
      -0.011703815,
      -0.0023832533,
      0.01321801,
      0.008240672,
      0.00193318,
      0.004102333,
      -0.18776308,
      -0.002215273,
      0.003591138,
      -0.0070237992,
      -0.00954781,
      -0.0034793979,
      -0.008068026,
      -0.031125512,
      0.028002225,
      -0.030910369,
      -0.007309786,
      -0.015596196,
      -0.024815468,
      0.03346531,
      0.00038768054,
      0.007598657,
      -0.016721945,
      0.01922364,
      0.017771471,
      -0.010210939,
      -0.011024097,
      -0.029567285,
      -0.029531918,
      0.00741535,
      -0.021412833,
      -0.0009107923,
      0.018184952,
      -0.0075553134,
      -0.011505761,
      -0.009438504,
      -0.012148159,
      0.024400959,
      0.014265627,
      -0.025498062,
      -0.008704593,
      -0.0043819067,
      -0.003973918,
      -0.033478923,
      0.023445617,
      0.0027309016,
      0.0001969375,
      -0.016497355,
      0.00052881514,
      -0.017221723,
      0.023095626,
      -0.013448151,
      -0.011711436,
      0.015297326,
      -0.02115839,
      -0.015567422,
      -0.009509705,
      0.005899822,
      0.007763876,
      0.010959615,
      -0.00999747,
      -0.028527448,
      -0.0029023306,
      0.0007806309,
      0.0050688516,
      0.00048171473,
      0.02507241,
      0.015477533,
      -0.18091767,
      0.013955056,
      -0.013096317,
      -0.014610374,
      0.012135438,
      -0.011121936,
      0.003637601,
      0.005708569,
      0.017859317,
      -0.0078684455,
      0.00447263,
      0.0037763084,
      0.04223604,
      -0.01680926,
      -0.003048492,
      -0.022913292,
      -0.013913242,
      -0.0043951552,
      0.008979325,
      -0.005766095,
      0.012001203,
      -0.020892195,
      -0.00024206408,
      -0.0067642555,
      -0.023008635,
      -0.022807918,
      0.028218612,
      -0.010512518,
      0.02379094,
      -0.0001308925,
      -0.014510346,
      -0.020746373,
      0.009569851,
      -0.018444201,
      -0.024533475,
      0.0075581972,
      -0.016811427,
      0.0066717593,
      0.019569648,
      0.03070522,
      -0.030611953,
      -0.009598177,
      -0.011729534,
      -0.005651689,
      -0.00561217,
      0.003993507,
      -0.0009457594,
      0.0047778636,
      0.0123426905,
      -0.008094254,
      -0.0036790778,
      -0.010437282,
      -0.00032715668,
      0.005413469,
      0.0030449338,
      -0.008251421,
      -0.01861393,
      -0.0015001245,
      0.005956449,
      -0.021118362,
      0.011626915,
      0.01915181,
      0.0020212794,
      0.022340257,
      -0.006664799,
      0.0029652119,
      0.02534232,
      -0.00051309314,
      0.01036242,
      0.0013946375,
      0.018430157,
      -0.014973127,
      0.004459623,
      0.008725043,
      0.010284489,
      -0.005474972,
      -0.013513747,
      0.02216545,
      0.016527442,
      0.008705889,
      -0.014339919,
      0.0143179465,
      0.0034213813,
      0.001507336,
      0.026099306,
      0.014802642,
      -0.010075172,
      -0.00881863,
      -0.026021915,
      0.030689655,
      -0.009469918,
      0.00004123418,
      -0.011174235,
      -0.0030457475,
      0.015319912,
      -0.015396535,
      0.0055007436,
      0.029691989,
      0.0055725295,
      0.017885553,
      -0.010182041,
      0.009354013,
      0.0026391726,
      0.011996034,
      -0.010311633,
      0.01803725,
      -0.0012254617,
      0.00071555044,
      0.0077436124,
      -0.010816644,
      -0.011058335,
      0.0049004382,
      0.00089636113,
      0.016988618,
      0.010183925,
      0.025681756,
      0.007943486,
      -0.01411969,
      0.003596282,
      -0.0036918458,
      0.01088829,
      -0.0035638534,
      0.027418483,
      -0.0070467526,
      0.02071391,
      0.0033008647,
      -0.016783927,
      -0.019143933,
      0.010781559,
      0.014044215,
      -0.01933537,
      0.0024673028,
      -0.001761012,
      -0.018381359,
      -0.030303411,
      -0.016211068,
      -0.0011194815,
      0.0074761244,
      -0.024376659,
      0.0067192656,
      -0.025851969,
      -0.012014492,
      -0.012934868,
      -0.019658942,
      -0.010798816,
      -0.011382922,
      -0.019260237,
      -0.017192159,
      -0.01713899,
      0.029831963,
      -0.0024927014,
      0.02136964,
      0.021494916,
      -0.0021899466,
      0.039537903,
      0.005573757,
      0.0024750426,
      -0.005471114,
      -0.008878108,
      -0.019488905,
      0.0028693322,
      -0.100238904,
      0.0011622891,
      0.0037430443,
      -0.000760475,
      0.014810332,
      0.02058446,
      -0.043147873,
      0.002155121,
      0.025109401,
      0.016620684,
      0.010928731,
      -0.005771282,
      0.030805446,
      -0.014025371,
      -0.0135138035,
      -0.016211523,
      -0.0083114775,
      -0.018535888,
      0.012965584,
      -0.025346396,
      -0.004253115,
      -0.018488523,
      -0.015859356,
      -0.032931875,
      -0.0034444644,
      -0.008413665,
      -0.022537809,
      0.02697292,
      0.024105523,
      0.010963457,
      -0.0034582375,
      0.042354856,
      0.009371499,
      -0.0018810922,
      -0.003120764,
      0.014621066,
      0.007975243,
      -0.0017403533,
      -0.00414922,
      -0.00604082,
      0.024032163,
      -0.046034306,
      0.027242303,
      0.033297073,
      0.0013425141,
      0.00641916,
      -0.019247724,
      0.0036149495,
      -0.007729579,
      -0.007013563,
      0.000046220564,
      0.015330562,
      0.015802922,
      -0.01636114,
      0.005382145,
      0.029338391,
      0.0005972188,
      -0.017610379,
      0.018028652,
      0.00604927,
      -0.003986642,
      -0.009813826,
      0.0022240898,
      -0.012413145,
      0.009904138,
      0.0000058580604,
      0.012987937,
      -0.01515401,
      -0.02054876,
      -0.0022680524,
      0.0036136194,
      -0.0017514068,
      0.0070941523,
      -0.026379576,
      -0.004234706,
      -0.01308078,
      -0.00022102507,
      -0.01660824,
      -0.018645506,
      0.025334444,
      0.0059680673,
      -0.013684476,
      -0.0058335173,
      0.01022112,
      0.025911568,
      -0.0045132753,
      -0.000038164893,
      -0.015944324,
      0.012930707,
      -0.037761465,
      0.006985509,
      0.02156125,
      -0.037856687,
      0.0038908883,
      -0.027688805,
      -0.007613338,
      0.003950267,
      -0.018606087,
      -0.0063348557,
      0.02139813,
      -0.0017791999,
      0.007308292,
      -0.010709593,
      -0.0013237881,
      0.012824473,
      0.0011674617,
      -0.018605754,
      -0.02870955,
      -0.0067150793,
      -0.029957807,
      0.0025033888,
      -0.003700249,
      -0.020781267,
      -0.024030093,
      -0.0064443015,
      0.0037341455,
      0.011344904,
      0.009006419,
      0.0025477086,
      -0.026655216,
      0.00079856894,
      -0.01720646,
      -0.003959499,
      0.010794652,
      -0.009605002,
      0.0031467883,
      -0.023210812,
      0.0030365526,
      -0.022652894,
      -0.024432544,
      -0.02793237,
      0.020261558,
      -0.023338653,
      -0.02782768,
      -0.017600762,
      -0.014165171,
      0.025860867,
      0.03733444,
      -0.003476882,
      0.021880914,
      -0.0031020439,
      -0.011148991,
      0.01137142,
      0.0031146493,
      0.0048067067,
      0.026586235,
      -0.012444386,
      0.011465497,
      0.004740994,
      -0.009112209,
      -0.021127494,
      -0.019233687,
      -0.009891782,
      -0.0013049857,
      -0.019624665,
      0.012332684,
      0.006916617,
      -0.012677498,
      -0.015431613,
      -0.018631592,
      0.0021736193,
      -0.00013431483,
      -0.026247013,
      -0.012432979,
      0.025220154,
      0.024151884,
      -0.016345993,
      0.004441218,
      -0.015764544,
      -0.00955314,
      0.007893035,
      -0.026381461,
      -0.045897443,
      -0.005801457,
      0.020615298,
      0.006341809,
      0.02889951,
      -0.0047423234,
      0.024951546,
      0.019852877,
      0.010805334,
      -0.0025099018,
      -0.0018852626,
      0.00985401,
      0.011979785,
      0.0014694654,
      0.021699328,
      -0.018863386,
      -0.035864376,
      0.016048044,
      0.004396268,
      -0.0011455397,
      0.0057380577,
      0.021140885,
      0.009804957,
      0.01715367,
      -0.0058957897,
      0.011654107,
      -0.00410723,
      0.019681439,
      -0.0071290853,
      -0.0007998465,
      -0.0066015376,
      -0.005546854,
      0.007475003,
      -0.02002953,
      -0.01080016,
      -0.016148278,
      0.014845065,
      0.009392611,
      -0.0010301704,
      0.012604096,
      -0.002581458,
      -0.00006974617,
      0.012233707,
      0.03100792,
      -0.0025027022,
      -0.0022838747,
      -0.031376574,
      -0.0045674467,
      0.011727889,
      -0.0072591314,
      0.0121157,
      -0.0140200285,
      0.01519186,
      -0.00011373563,
      -0.012385758,
      0.017452369,
      -0.015574566,
      -0.005282527,
      -0.0058211274,
      -0.004543584,
      -0.021993367,
      0.0032983257,
      -0.033739276,
      -0.0151119735,
      0.012513516,
      0.0013965642,
      -0.0010823219,
      0.013376404,
      -0.014825917,
      -0.0005519103,
      0.008750226,
      0.0052461494,
      0.023513826,
      -0.0007227403,
      0.018107267,
      0.011212547,
      -0.0058291163,
      0.0050312723,
      0.004329576,
      0.028908564,
      0.017047863,
      -0.021052368,
      -0.024871707,
      0.020094944,
      -0.0030694297,
      0.0041322773,
      -0.008828658,
      -0.013169115,
      0.0140357055,
      0.021279844,
      0.0066219377,
      0.005970931,
      -0.008809203,
      -0.013811392,
      -0.016465416,
      0.00059048994,
      0.012920475,
      -0.11613448,
      -0.007175006,
      -0.0019718923,
      -0.0074374857,
      -0.021654464,
      -0.006219203,
      0.007209951,
      -0.0074478323,
      0.0045127473,
      -0.006359226,
      0.02725596,
      0.0023804454,
      -0.0058822706,
      -0.014066924,
      0.0039929193,
      -0.026409911,
      0.0043447483,
      0.012242746,
      0.02576037,
      0.0012993839,
      0.0010304593,
      -0.003963814,
      0.0106210355,
      -0.02195916,
      -0.02462901,
      -0.00093962083,
      0.00046884955,
      0.009613348,
      0.00452759,
      -0.00001747684,
      -0.019988505,
      -0.00036931026,
      -0.01314876,
      0.009003002,
      0.01094778,
      -0.021068078,
      -0.013181229,
      0.02074806,
      0.019944856,
      -0.0031275102,
      -0.014294279,
      0.000507964,
      0.012894917,
      0.0046467613,
      0.004234222,
      0.029285828,
      0.031584185,
      -0.024824033,
      -0.023079148,
      0.039164405,
      -0.04926268,
      -0.031220447,
      -0.0067723957,
      -0.018524151,
      -0.009816572,
      -0.0007037868,
      0.018455831,
      -0.0036590768,
      0.0141373705,
      -0.032695595,
      -0.010562876,
      0.017994646,
      0.008920658,
      0.046439897,
      -0.009038787,
      0.008664796,
      0.037982583,
      -0.0008739061,
      0.002723905,
      -0.0076769018,
      -0.008380866,
      0.021570314,
      -0.018656356,
      0.02151951,
      -0.003868733,
      0.0035717639,
      -0.002400459,
      -0.02174882,
      -0.004757693,
      -0.00013283378,
      -0.03364454,
      -0.018798485,
      -0.037538137,
      -0.039289083,
      0.015713358,
      -0.0018641475,
      -0.004097197,
      0.00705835,
      -0.0013836733,
      0.008989299,
      -0.0012561808,
      0.004280623,
      -0.0068590525,
      -0.0034027598,
      0.0049064565,
      0.0075532873,
      -0.029552571,
      -0.004757623,
      -0.0041472414,
      -0.020787317,
      -0.016798284,
      0.015025248,
      0.004912071,
      0.0011400615,
      0.0028745604,
      -0.014058928,
      0.009812126,
      0.017696382,
      -0.008316356,
      -0.008315823,
      -0.0031281724,
      0.0053161867,
      -0.008606917,
      -0.15240496,
      -0.015918827,
      0.0077808145,
      0.014454841,
      0.0139805,
      -0.0012892698,
      -0.015048744,
      0.0008040318,
      0.015704682,
      -0.022740355,
      0.001634707,
      -0.00586388,
      -0.00935852,
      -0.0060121003,
      0.013081193,
      0.13921897,
      -0.0044482574,
      -0.01679889,
      -0.030349532,
      0.009946132,
      0.0003171634,
      -0.022496155,
      -0.020412702,
      -0.018519565,
      -0.012569309,
      0.001787642,
      -0.010148048,
      -0.023015775,
      0.0010667163,
      0.0044923173,
      -0.009273951,
      -0.021062555,
      -0.0018819417,
      0.007509428,
      0.005736967,
      -0.0026322082,
      -0.01940436,
      0.0032681802,
      -0.003774387,
      -0.009947035,
      0.024892189,
      -0.012111945,
      0.0003305942,
      0.014859149,
      0.0060861846,
      0.00838398,
      -0.013206464,
      -0.0004356606,
      -0.006919781,
      0.0083581405,
      -0.0015071041,
      -0.03714337,
      0.015512281,
      -0.0016325621,
      -0.016459407,
      0.027721483,
      0.0035591,
      0.017432544,
      -0.0008554945,
      0.017121475,
      -0.0025902765,
      0.008443065,
      -0.01651896,
      0.0029840341,
      0.012443357,
      -0.018574996,
      0.0050500417,
      0.017427176,
      0.018769206,
      -0.0065959333,
      0.011658734,
      0.020948306,
      -0.0015514984,
      0.019791124,
      -0.0056427987,
      -0.006896881,
      -0.02381672,
      0.02253375,
      0.0039523537,
      -0.00022273273,
      -0.0049672406,
      -0.011541901,
      -0.010591545,
      -0.011149786,
      0.01026189,
      0.017190965,
      -0.03959368,
      0.01822691,
      -0.0029192239,
      0.0009040852,
      0.0046936865,
      0.013236625,
      -0.01396789,
      0.018694475,
      -0.0044863597,
      0.008125476,
      -0.0036730473,
      0.0004042154,
      0.019006861,
      -0.007883861,
      0.003123149,
      0.00074814906,
      -0.017818894,
      -0.015829498,
      0.015333886,
      0.019182894,
      -0.0023327786,
      0.016209153,
      0.0022259369,
      -0.02041019
    ]
  },
  {
    "id": "genai_cohort_python_02_try_except_else_and_finally_vtt",
    "content": "Next up, we want to go further 2 in depth and learn how 3 we can handle these errors. 4 That would be pretty awesome, 5 pretty fantastic, if you ask me. 6 Let's go ahead, move on and learn 7 the whole syntax of how we can 8 actually work with these errors 9 and gracefully handle them so 10 that the program doesn't crash. 11 Let me take you onto the screen. 12 And here we are on the screen 13 and let's start with this. 14 So the first thing that 15 we're going to do here is, 16 just create a new file. 17 That's always a good idea. 18 Let's go ahead and call this one as 19 02. 20 That will be try accept py. 21 All right, so what do we want 22 to do here this time? 23 Let's take a different example. 24 Again, this can be done 25 for the previous example as well, 26 but let's just say we have a chimenu 27 and this is an object or 28 a dictionary in this case. 29 And we have a simple masala, which is 30 probably costing us as 30 rupees. 31 And we have one more, which is 32 ginger, if I can write that, ginger, 33 and that's a little bit expensive, 34 so I'll just call it as 40 rupees. 35 And as you know, if I try to accept 36 something known as chimenu 37 with a key of, let's just say 38 eli chi, which is again a spice, 39 it will obviously give me an error. 40 Let's see the error first. 41 So if I just go and open this up, 42 I will say Python 43 Python 302 and we get that. 44 So again, this is a key error. 45 We just saw that the key 46 error also exists here. 47 So this is the key error. 48 The same way we can handle 49 others error as well. 50 Now here's the interesting 51 syntax if you don't want 52 your program to crash. 53 Because if I go ahead and print 54 up here something 55 and then I say hello, check code. 56 What? 57 You will notice that 58 if the key doesn't, we are not able 59 to find the key, then this 60 whole program just crashes. 61 Nothing. 62 Execute. 63 This part of code never executed. 64 But what if we know that 65 this is a sensitive operation, 66 maybe a database 67 call, maybe a web request? 68 Maybe we're trying to open 69 a file which might not exist. 70 So in that case you can just 71 cut this out and open 72 up a simple try block and just 73 paste it inside a try block. 74 The this simply says I'm trying 75 to do something which is sensitive, 76 which can cause a potential error. 77 So I'm just wrapping this 78 up into a safe bubble 79 and you can just try that. 80 And after that you can just look 81 for accept keyword in which 82 you can define the errors. 83 And by the way, you can 84 just name down your error 85 just like as E as well. 86 But since we know that what kind 87 of error can happen in this 88 case, we can just go ahead and say 89 I'm looking for a key error. 90 And if the key error happens, 91 we are going to just go ahead 92 and print a simple message that says 93 the key that you are trying 94 to access does not exist. 95 All right, so pretty nice one. 96 And let's go ahead and try 97 to work with this. 98 We know we have actually 99 invoked this error very carefully, 100 but you will get to see. 101 So notice here, this time we are 102 able to just get a, 103 custom error message and we are able 104 to see hello Chai code as well. 105 This is, is really one 106 of the nicest way of having this. 107 And we can actually go ahead 108 and work with more of this. 109 Let's create another 110 program and have it up there. 111 So let's go ahead 112 and create a new one. 113 We'll call this one as 03 114 and we're going to call this 115 one as complex Try py. 116 This time, instead of just 117 creating a simple accessing of 118 the value, we're going to go ahead 119 and create a method altogether, 120 which will be serve chai. 121 And obviously this 122 will take a, flavor. 123 And now let's see what happens. 124 The whole block. 125 We are going to wrap it up in the try 126 catch and I want to show you 127 more interesting stuff with that. 128 So first of all, in this we are going 129 to go ahead and take a simple print 130 statement that will be formatted and 131 we'll say preparing whatever the 132 flavor you have given me of chai 133 with a trip triple dot because it's 134 a, brewing process, it's taking its 135 time. 136 And if we go ahead and check if the 137 flavor value that you have given me 138 actually matches to unknown that you 139 haven't defined me, in that case, we 140 can actually raise our custom error. 141 It's not always about 142 printing the statement. 143 Sometimes you want to throw 144 the error, but you want to, 145 willingly throw that error. 146 So I'll throw an error 147 known as value error. 148 By the way, you can 149 throw up any error. 150 It's totally up to you. 151 And I will simply say value 152 error that says we don't 153 know that flavor because I'm 154 not aware of that flavor. 155 Simply just like that. 156 All right? 157 And what we can do is we can still 158 handle the exception just like this. 159 And we're going to say value error. 160 And let's cast this. 161 We don't want to call it 162 value error all the time. 163 We'll just call this One as E. 164 So that's a shorthand for it. 165 Now we can call our value error as E. 166 And in here we are going 167 to go ahead and see simple print. 168 We're going to take an example. 169 Don't worry, I know this is a lot 170 of code and here we are going to go 171 ahead and just print the E value. 172 All right, so far we have 173 seen this, try catch. 174 But there is also one more thing, 175 that hey, if this whole thing is if 176 the flavor is unknown, but what if 177 the case everything all goes good. 178 In that case we can simply run 179 the else statement also 180 and I can just print the value here 181 formatted printing that says 182 whatever the flavor chai is served. 183 In this case, and here's 184 the interesting part which 185 you will see quite a lot. 186 There is also a block 187 known as finally. 188 No matter try catch, try 189 1 runs or the accept runs 190 finally will always run. 191 This is usually useful when you 192 are trying to close the file. 193 Once everything has happened, 194 crashed or whatever, you want 195 to just clean the memory or, or 196 maybe you have a database 197 connection, you want to just 198 finally close it out, whatever 199 has happened. 200 So in that case you can just 201 go ahead and use finally. 202 It always works, it always prints. 203 In our case what makes sense is 204 come on, next customer please. 205 So whatever the order we are getting, 206 we actually want to have it. 207 Let's go ahead and try 208 to actually use this method now. 209 So we know that we have 210 a serve chai method and we 211 can ask for a masala chai. 212 And similarly we can also 213 go ahead and pass 214 on literal value of unknown. 215 There we go. 216 Let's see what happens in this case. 217 Let's run this and we'll say Python 218 03 and notice here, so we are 219 seeing preparing masala chai. 220 All right, that we have asked for it. 221 So this is line number three 222 that is getting executed. 223 After that it says 224 masala chai is served. 225 All right, so we are not going 226 in this block of code. 227 And also definitely we are 228 not getting any value errors 229 or anything like that. 230 We simply went up into 231 the else part which is saying 232 masala chai is served. 233 And notice here finally always 234 execute which says 235 next customer please. 236 So here we see the next customer 237 please is being printed. 238 Now next time when the function 239 runs with the value of unknown 240 this time we go up here again. 241 So it says preparing 242 the unknown chai. 243 So we are executing 244 the line number three. 245 Then we simply see that 246 hey, this flavor unknown. 247 I don't know what that is. 248 So the error that we are giving now 249 is Raise the value error, which 250 says, we don't know that flavor. 251 And this is what we get. 252 Notice here, program didn't crash. 253 We gracefully handled it. 254 So the error is 255 we don't know that flavor. 256 All right, but notice here, 257 what happens is this whole thing 258 and everything, nothing gets 259 printed, nothing gets executed. 260 So we are handling the errors nicely. 261 But this part also doesn't execute 262 because, hey, it doesn't execute. 263 In that case, we have gone into 264 the either you go into the if block 265 or you go into the else block. 266 But always remember this if block 267 and this else block are not related. 268 They are not on the same indentation. 269 This else block is a part of this. 270 Try catch. 271 Yes, common syntax. 272 And notice here, no matter 273 what happens, the finally 274 always gets printed out. 275 So this is what we 276 really want to have. 277 We have the error, but we have 278 gracefully handled that error. 279 Now, you can actually handle 280 multiple errors, and that's 281 exactly what we're going 282 to see in the next video. 283 But I hope this code 284 will take a little time to observe 285 and to understand it. 286 But take a time, take your 287 moment and try to understand. 288 This is hardly 11 lines of code, 289 but this is a very common piece of 290 code that you're going to see quite 291 a lot in your development journey. 292 That is it for this video. 293 Let's go ahead and catch 294 up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 try except else and finally.vtt",
      "originalPath": "genai-cohort/python/09 Chapter Subtitles/02 try except else and finally.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.011228768,
      -0.006679171,
      0.027354136,
      -0.043149553,
      -0.00846612,
      -0.014412299,
      -0.0032108289,
      0.021461613,
      -0.0012672141,
      -0.00361325,
      -0.016825557,
      -0.021534719,
      0.0145394495,
      0.02007093,
      0.14268075,
      -0.0047362885,
      -0.0035471143,
      0.012753833,
      -0.0018152614,
      -0.0170857,
      -0.009162242,
      -0.0017867307,
      0.011371051,
      -0.01840058,
      0.00078862684,
      -0.0059928065,
      0.010946173,
      0.018998766,
      0.025149236,
      -0.019521134,
      -0.00997207,
      -0.004368336,
      0.021054795,
      0.020139987,
      -0.0040682596,
      0.0114684,
      0.0016779051,
      0.0045042518,
      -0.024674535,
      0.005421208,
      -0.028235236,
      0.012714375,
      0.0029022982,
      -0.011165742,
      0.021778505,
      -0.02679636,
      -0.029979281,
      -0.011015757,
      -0.009500965,
      0.02037305,
      0.013176161,
      -0.013046857,
      0.0035234985,
      -0.18255639,
      0.010810433,
      -0.0016065573,
      -0.0083764,
      -0.016195662,
      0.012430099,
      0.0075496323,
      -0.02776198,
      0.030758586,
      -0.036016908,
      -0.013167126,
      -0.006950809,
      -0.019083092,
      0.025362913,
      -0.005477436,
      -0.004707596,
      -0.0119519355,
      0.025678433,
      0.022616185,
      -0.026624195,
      -0.013934277,
      -0.022309013,
      -0.033559404,
      0.013943813,
      -0.031917337,
      -0.0059098653,
      0.011177201,
      0.014103148,
      -0.021214018,
      0.0065894206,
      0.0024325151,
      0.019381577,
      0.01035347,
      -0.0166387,
      -0.009239233,
      0.004154766,
      -0.008609605,
      -0.014086322,
      0.006785189,
      -0.0043725166,
      -0.00884828,
      -0.0024256723,
      -0.0015252245,
      -0.0024646544,
      0.0064256564,
      -0.019203443,
      0.000658589,
      0.009267645,
      -0.020220764,
      -0.008488626,
      -0.01284832,
      0.007711297,
      -0.005643725,
      0.00047832093,
      -0.0067154556,
      -0.010209606,
      0.010066035,
      0.0004880718,
      -0.004041318,
      -0.009408825,
      0.011729934,
      0.022614967,
      -0.17308815,
      0.012986361,
      -0.0046510524,
      -0.0057001463,
      0.017659994,
      -0.0057619005,
      0.0051577417,
      0.019597456,
      0.008358471,
      -0.027520759,
      0.010649644,
      0.007176102,
      0.016893229,
      -0.008956956,
      -0.004280406,
      -0.02826701,
      -0.024917997,
      0.0028704146,
      0.0053868606,
      -0.009643884,
      0.0019651777,
      -0.018021557,
      0.007951746,
      -0.009450528,
      -0.02950987,
      -0.0032176136,
      0.028111814,
      -0.0040780045,
      0.031253297,
      -0.0040758373,
      -0.016432524,
      -0.019838987,
      -0.0042128544,
      -0.015455224,
      -0.02677813,
      0.020896263,
      -0.012078432,
      0.014915356,
      0.014240129,
      0.03100074,
      -0.025306262,
      -0.0050720978,
      -0.0071025016,
      0.005448749,
      -0.0038718842,
      0.0013531892,
      0.0055233906,
      0.0045461073,
      0.01369262,
      0.005856944,
      0.0027123755,
      -0.0056196507,
      -0.002646332,
      0.008954973,
      0.0021980572,
      -0.011482234,
      -0.008760576,
      0.012493856,
      0.006614066,
      -0.02786601,
      -0.0060077994,
      0.014950027,
      -0.01073267,
      0.011869977,
      -0.008529168,
      0.0011571356,
      0.018786505,
      0.004464348,
      0.0071895877,
      -0.0049890643,
      0.020112908,
      -0.01101803,
      -0.0020038232,
      0.010544483,
      0.0058820755,
      -0.0077148736,
      -0.0027667196,
      0.006883927,
      0.012666039,
      0.00810001,
      -0.027832141,
      -0.0009808468,
      0.022002215,
      0.0071462854,
      0.0071889623,
      0.03338152,
      -0.010603433,
      -0.025414456,
      -0.008088532,
      0.033553284,
      -0.020342842,
      0.004050108,
      -0.021026293,
      0.006158879,
      0.008464105,
      -0.015826765,
      -0.002753878,
      0.026495235,
      0.012116575,
      0.005208854,
      -0.018626902,
      0.012247981,
      -0.00054461596,
      -0.00042962385,
      -0.0140917245,
      0.008234364,
      0.006736038,
      -0.0038554335,
      0.015611926,
      -0.012948637,
      -0.012997244,
      0.0044293255,
      0.0057663145,
      0.01073638,
      0.005307635,
      0.033975933,
      0.014809761,
      -0.020548059,
      0.015642552,
      0.007970782,
      -0.002988222,
      -0.0030904629,
      0.029204303,
      0.012077584,
      0.01746366,
      0.0063710134,
      -0.0052706874,
      -0.026448406,
      0.0031770777,
      0.009931054,
      -0.017208591,
      0.0018156914,
      -0.001536015,
      -0.020253254,
      -0.033309154,
      -0.017960096,
      -0.006527676,
      0.015078559,
      -0.0289316,
      0.0200369,
      -0.042322356,
      -0.014591133,
      -0.015657272,
      -0.021068227,
      0.0029383916,
      -0.012206391,
      -0.021377051,
      -0.007377853,
      -0.010682394,
      0.015099202,
      -0.010377882,
      0.020275231,
      0.010747379,
      0.0017452005,
      0.012192494,
      0.012657704,
      0.015406732,
      -0.019597013,
      -0.0093161445,
      -0.035085965,
      0.0030889735,
      -0.10125618,
      0.020530932,
      -0.0057932353,
      -0.0103853205,
      0.024101775,
      0.009167576,
      -0.030578235,
      0.005375623,
      0.002969836,
      0.0029635506,
      0.012304818,
      -0.016469501,
      0.015741156,
      -0.033983573,
      -0.015578429,
      -0.022343405,
      0.0030021865,
      -0.013678186,
      0.023248028,
      -0.021435656,
      -0.018344572,
      -0.033567503,
      -0.029697368,
      -0.017568443,
      0.0053928522,
      0.010929572,
      -0.011268871,
      0.021569397,
      0.020382678,
      0.0045766253,
      -0.026780494,
      0.020828335,
      -0.0085901385,
      -0.013922122,
      0.013225482,
      0.00013366823,
      0.0143794995,
      -0.018563548,
      0.012874739,
      -0.024122171,
      0.0151987765,
      -0.011991281,
      0.008112683,
      0.038727466,
      -0.010240257,
      0.02087483,
      -0.015667092,
      0.0024611084,
      0.00023591465,
      -0.025613008,
      -0.01163853,
      0.013624803,
      0.018612292,
      0.0013127894,
      -0.0006935958,
      0.029102111,
      0.0141829,
      -0.021744786,
      -0.0077593527,
      -0.0019036405,
      -0.005294696,
      0.00678722,
      0.016200025,
      -0.0069350465,
      0.00073074823,
      0.008739475,
      0.014669015,
      -0.022222737,
      -0.03148858,
      0.00015821909,
      0.006015118,
      0.0046701715,
      -0.005248355,
      -0.03478794,
      -0.0013570047,
      0.014262217,
      0.01677834,
      -0.02275239,
      -0.01978569,
      0.03248686,
      0.005797001,
      -0.008659537,
      -0.016456699,
      0.012352532,
      -0.0019914603,
      0.013781036,
      -0.00027125122,
      -0.012000264,
      0.020296233,
      -0.034323733,
      0.01042181,
      0.022522788,
      -0.010156059,
      -0.002448789,
      -0.018271105,
      0.004432242,
      0.0037611187,
      -0.026020218,
      0.003253518,
      0.022945594,
      -0.0035994288,
      0.015579974,
      -0.020992495,
      -0.0017141753,
      0.0060100826,
      -0.0076793157,
      -0.03971378,
      -0.028463399,
      -0.005490434,
      -0.028182035,
      -0.0044367393,
      -0.012045561,
      -0.017063752,
      -0.009920686,
      -0.017189715,
      -0.0011231991,
      0.009396492,
      0.013005244,
      0.0031528769,
      -0.011650345,
      -0.003638099,
      -0.0047857626,
      -0.0019353565,
      0.020357192,
      -0.01752463,
      0.008029822,
      -0.021275207,
      0.015886905,
      -0.010504156,
      -0.01637427,
      -0.018233217,
      0.019819327,
      -0.019142838,
      -0.03261591,
      -0.0070851785,
      -0.007013143,
      0.029026892,
      0.019020395,
      0.0058131516,
      0.0077455165,
      0.00529699,
      -0.0017026705,
      -0.0074111796,
      0.009034945,
      0.0024436954,
      0.014713004,
      -0.0045465743,
      0.015172508,
      -0.007883118,
      -0.012063013,
      -0.01416851,
      -0.023092214,
      -0.027267419,
      0.0048711705,
      0.0003918251,
      0.0075941114,
      -0.00020970876,
      -0.022809563,
      -0.007809063,
      -0.03729887,
      0.007518995,
      0.018287266,
      -0.02841152,
      -0.007552651,
      0.017857827,
      0.010971066,
      -0.009185824,
      0.007214628,
      -0.0026391149,
      0.0012876727,
      0.000620747,
      -0.012111739,
      -0.021679573,
      -0.007824783,
      0.017175302,
      -0.001725191,
      0.035077922,
      -0.004301192,
      0.037256174,
      0.019063264,
      0.00916228,
      -0.00704941,
      0.004321832,
      -0.005820742,
      0.005933869,
      0.0057919617,
      0.028445773,
      -0.0048604594,
      -0.03404672,
      0.0037511264,
      0.0022451126,
      -0.008776255,
      0.018332249,
      0.012773951,
      0.009475138,
      0.025922319,
      0.010851578,
      0.008008231,
      0.01037729,
      0.020432873,
      -0.002373557,
      -0.008812314,
      -0.02409536,
      0.002878861,
      0.02133008,
      -0.006013747,
      0.0025136317,
      -0.008755374,
      -0.0009427661,
      0.015695678,
      -0.007489926,
      0.012535547,
      0.0026828856,
      -0.00011841664,
      0.020057509,
      0.0135436375,
      -0.022751095,
      0.008424704,
      -0.03280651,
      0.0012391787,
      0.0062412573,
      -0.002898495,
      0.016580613,
      0.00085351925,
      0.01961294,
      -0.0014166312,
      -0.0021337091,
      0.014498368,
      -0.014062069,
      0.007052442,
      0.0035592415,
      -0.01189244,
      -0.020903481,
      0.00084776676,
      -0.03183894,
      0.0034214698,
      0.00873582,
      0.008914079,
      -0.010300263,
      0.0056964313,
      0.0012459139,
      -0.0030018517,
      -0.0032492892,
      -0.0053225984,
      0.017833363,
      -0.017502503,
      0.011360337,
      0.0050280113,
      -0.016543644,
      0.006673644,
      -0.0048006116,
      0.039900433,
      0.015335741,
      0.0036037308,
      -0.027624415,
      0.0379743,
      0.00020354628,
      0.010854211,
      -0.014653078,
      -0.008665377,
      0.009149732,
      0.0054517253,
      0.0043632323,
      0.0013491793,
      -0.003069445,
      -0.01923271,
      -0.0027067675,
      0.0020929931,
      0.000072678806,
      -0.11794036,
      0.0008145064,
      -0.008271453,
      0.0043138745,
      -0.00534074,
      -0.0093638515,
      0.0008710188,
      -0.020643767,
      0.00915067,
      -0.0060067736,
      0.021716766,
      0.02050892,
      -0.0048307655,
      -0.009750406,
      -0.0049224305,
      -0.024611495,
      0.01686532,
      0.024079429,
      0.039547104,
      -0.005251193,
      0.0010900905,
      -0.010909553,
      0.009464614,
      -0.013342481,
      -0.016124317,
      -0.031069666,
      -0.007842103,
      -0.0048598503,
      0.0069694403,
      -0.0101491,
      -0.019781657,
      -0.00025398136,
      -0.006596274,
      0.004764712,
      0.023779597,
      -0.01652326,
      -0.018032813,
      0.023718424,
      0.011965626,
      -0.0060457196,
      -0.015614718,
      0.0045406604,
      0.04164594,
      0.018938798,
      -0.018314619,
      0.012517363,
      0.019157818,
      -0.02802663,
      -0.025312722,
      0.030738806,
      -0.035266533,
      -0.040214874,
      -0.019723376,
      0.006375166,
      -0.002931181,
      0.009768369,
      0.0028816115,
      0.0059099216,
      0.006125937,
      -0.026175097,
      -0.0018041015,
      0.009100752,
      -0.00605993,
      0.05186287,
      0.0013327012,
      0.015139392,
      0.03068764,
      0.012153582,
      0.013268434,
      0.00043828794,
      -0.010877124,
      0.015867297,
      -0.017686378,
      0.020929974,
      0.016638188,
      0.0052424637,
      0.0062216045,
      -0.017007662,
      0.002495651,
      -0.0020985373,
      -0.038395066,
      -0.03072399,
      -0.04266394,
      -0.030157207,
      0.01275432,
      -0.0013366395,
      -0.005491676,
      0.016804107,
      -0.0033189398,
      -0.0002282467,
      0.013477821,
      -0.0030974403,
      0.0064780014,
      -0.0034949582,
      0.0026442108,
      -0.01246616,
      -0.02683703,
      -0.008971711,
      -0.0061284197,
      -0.030176803,
      -0.010749837,
      0.01366377,
      0.004139968,
      -0.008401406,
      -0.007530518,
      -0.014500504,
      0.015252861,
      0.009821335,
      -0.014585333,
      -0.0006394793,
      0.0010155531,
      0.00041409736,
      -0.0004646808,
      -0.15550368,
      -0.008307999,
      0.00086162816,
      -0.01096048,
      0.010027272,
      -0.01539646,
      -0.012672748,
      -0.008219124,
      0.0037287667,
      -0.034472845,
      0.004946991,
      -0.0074491343,
      -0.014874571,
      0.00970985,
      0.00531446,
      0.12571844,
      -0.013872961,
      -0.010502524,
      -0.013593637,
      -0.008206903,
      0.0029357353,
      -0.02496001,
      -0.012906035,
      0.004473066,
      -0.009007227,
      -0.003496966,
      -0.009877109,
      -0.011004958,
      -0.0049920133,
      0.00023272124,
      -0.029445242,
      -0.013244665,
      0.012499937,
      0.02396578,
      0.0055189985,
      -0.0053411894,
      0.000030439498,
      0.0077068727,
      0.0042058076,
      -0.006764718,
      0.0127693685,
      -0.0025386352,
      -0.0013021877,
      -0.00748075,
      0.006212957,
      0.0055385926,
      -0.009146919,
      -0.022347007,
      -0.01194307,
      -0.01572752,
      -0.015287261,
      -0.048940953,
      0.009314322,
      -0.00893632,
      -0.013074337,
      0.03491754,
      0.008910614,
      0.029773617,
      0.006796142,
      0.011111866,
      -0.0035887004,
      0.008275799,
      0.0010287499,
      -0.003787082,
      0.0016763402,
      -0.025736695,
      -0.006232682,
      0.005622767,
      0.022575676,
      -0.007743472,
      0.016385332,
      0.023131942,
      -0.016102364,
      0.047635365,
      -0.0009053606,
      0.0035631468,
      -0.021256305,
      0.024172975,
      0.013480056,
      -0.0057717743,
      0.0049345023,
      -0.005398479,
      -0.012074783,
      -0.015492526,
      0.0231176,
      0.016919011,
      -0.025515877,
      0.007381595,
      0.007729674,
      0.00030264776,
      0.015175194,
      -0.0037440546,
      -0.0172755,
      0.015109787,
      -0.0017562028,
      0.011545848,
      0.0010542178,
      -0.0028962204,
      0.040324815,
      -0.0026791159,
      -0.0064550107,
      0.0011165804,
      0.0015918225,
      -0.008255254,
      0.01724093,
      0.008313514,
      -0.016109612,
      0.0155658685,
      0.00280158,
      -0.014250019
    ]
  },
  {
    "id": "genai_cohort_python_03_catching_multiple_exceptions_vtt",
    "content": "We can have multiple exception 2 at the exactly same time. 3 And in this video we are going to 4 learn exactly how to handle multiple 5 exceptions at the same time. 6 And for this we are going to write 7 a very interesting piece of code. 8 And this will help you to prepare 9 for the Python world as well, 10 because such code exists a lot 11 in Python and I also, to be 12 honest, enjoy this quite a lot. 13 So let's close all of this 14 and create a new one. 15 We'll call this one as 04 16 and this will be multiplexion. 17 Py, of course. 18 And let's go ahead and define a, 19 process order. 20 Process order. 21 So what do we do in this one? 22 We only serve masala chai. 23 And somebody needs to give me 24 an order like what T you want 25 and how much you want to be. 26 Like you want three cups, four cups. 27 So masala chai only. 28 You need to give me pass on a key 29 of masala only and then a number. 30 It can be 2, 3, but it 31 should be number. 32 It should not be tea W, O. 33 It should be a number. 34 Exactly. 35 So for this we expect 36 that you will provide me the item 37 and the quantity. 38 Now, here's a very interesting piece 39 of code that I'll write. 40 First of all, I'll wrap it up with 41 a Try catch, or try, except in 42 this case, again, as I said, try 43 catch is such a common word that 44 I've studied so much of it in 45 Java, in Swift, in TypeScript and 46 JavaScript that I call it as Try 47 catch. 48 But when I write it in Python it is 49 try, except always. 50 So please grant me that 51 much liberty in here. 52 Now, how we can do that? 53 We want to calculate first of all 54 price, because price and the cost 55 for it will calculate that. 56 So how we can grab the price of it. 57 Now, here's an interesting 58 piece of code. 59 Notice here, I'm putting up a key. 60 The key is going to be masala 61 and the value 62 of it is going to be 20. 63 Interesting. 64 And then we are going to go ahead 65 and simply, get the item of it. 66 Now, what is this code? 67 How is it even going on? 68 Just bear with me, I'll explain 69 this, although it's very easy. 70 And then I can go ahead 71 and simply take this price 72 and multiply it by quantity. 73 And then we can simply go ahead 74 and print, print the total. 75 Let's print the formatted string 76 which says total cost is, 77 and then go ahead and have the cost. 78 All right, Those who are wondering, 79 hey, how does this actually work? 80 Don't worry, I'll walk you through 81 with that part as well. 82 So let's Just say we 83 get a simple key error. 84 In this case, somebody has 85 mentioned a key error. 86 Then I can just print this like this. 87 Let's use a formatted string. 88 We don't need formatted string. 89 We can just go with that. 90 We can say, sorry, that 91 chai is not on menu. 92 All right, one exception. 93 Can we raise another exception? 94 You can actually except. 95 And this time we want 96 to have a simple type error 97 and we can again say print. 98 And then we can say quantity 99 must be in number, number. 100 There we go. 101 So what's going on? 102 How is it even working? 103 So the way how this code is going 104 to be used will actually make 105 it much more clear for you that 106 what we are actually doing. 107 Let's just say I go ahead 108 and process an order. 109 First time I go ahead and ask for, 110 let's just say I want a T of 111 ginger because I love ginger T 112 and I provide you a value of 2. 113 And the second time I go ahead 114 and ask you a value in this format 115 with of course the string. 116 But instead of the ginger 117 I go ahead and say masala. 118 Okay, what's going on? 119 Let me help you to understand this. 120 Now the moment for the first time 121 you simply say, process the order. 122 We simply pass on item 123 value as ginger. 124 This goes up here and we 125 have the key and value. 126 So for this dictionary we are 127 looking forward for an item. 128 So notice here, this is the item 129 we are looking up for. 130 So if you try to extract an item 131 from, from a dictionary based on 132 the key value that you are providing 133 here, so item will be eventually 134 replaced with this ginger. 135 So this will just be gone like this. 136 And obviously this is not masala. 137 So this will never actually execute. 138 And immediately the price 139 is not going to be found. 140 Nothing will go inside the price. 141 So you raise an exception 142 which is key error. 143 Hey, this key doesn't exist. 144 So that's why we have 145 raised this error. 146 Key error. 147 And then in the second part, and 148 by the way, this is pretty easy, 149 once you got the value of 20 150 here, then quantity, you get the 151 quantity of 2, you multiply 152 that, that's okay, that's no 153 problem. 154 That's a super easy code 155 to learn and figure out. 156 It's just a multiplication. 157 Now in the next case what 158 happens is this masala. 159 So you copy this masala 160 inside this item. 161 This item is gone 162 and the masala goes up there. 163 So this time you want 164 to extract a key of masala. 165 And yes, the only key in our 166 dictionary exists is masala. 167 So final value that you 168 get is going to be 20. 169 So price gets a value of 20 and cost. 170 The cost will try to get 171 the value quantity next. 172 And the quantity is 2. 173 So Python doesn't know how 174 to multiply 20 with 2, 175 which is literally 2 and it 176 will raise the type error. 177 That quantity must be in the number. 178 So this is a very, very interesting 179 piece of code that we have 180 written and I hope now you see 181 how generic we have written. 182 But it's a very smart 183 code that we have written. 184 Let's go ahead and print it out 185 to see what we have actually 186 done that will help you 187 to understand it better. 188 So Python 3 04. 189 There we go. 190 So notice here. 191 Oh my. 192 Bad. 193 So this one needs to be fixed. 194 Quantity must be in the number. 195 We'll fix that. 196 So this one is saying 197 total cost is 2 to 2. 198 Why that is because of a concept 199 known as operator overloading. 200 So this time you say masala, 201 this gets you 20 and when you 202 multiply string with a 20 you 203 actually go ahead and get this whole 204 thing up here just like that. 205 So we should probably 206 provide more of the caution here. 207 Because this time it was able to 208 multiply 20 with whatever the value 209 you are providing, which is 2. 210 Shouldn't be working this way. 211 But you get the idea that even 212 the smartest of the code that we are 213 writing can have this kind of error. 214 So in that case we have 215 to actually convert this into 216 integer first or a number. 217 This also should be converted 218 into number and then only 219 the cost should be calculated. 220 A further if else wouldn't 221 harm that if the cost is 222 actually in the number. 223 And that's how the real world 224 software is different from 225 tutorials that, yeah, we do a lot 226 of checking in that, but you got 227 this idea and you also learned a 228 concept about operator 229 overloading with these. 230 So many tools. 231 This was unintentional, 232 but it happened. 233 And that's the beauty of programming. 234 No matter how much you prepare, 235 no matter how much you actually 236 enjoy, the real fun is actually 237 the raw coding where things 238 happen and you explain them. 239 Why did it happen? 240 And what can be done to solve this. 241 That's the fun part. 242 Let's go ahead and catch 243 up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 catching multiple exceptions.vtt",
      "originalPath": "genai-cohort/python/09 Chapter Subtitles/03 catching multiple exceptions.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0020181073,
      -0.0071523045,
      0.041714977,
      -0.05514278,
      0.0020587395,
      -0.00912504,
      0.0014364325,
      0.014144501,
      -0.01441759,
      -0.0008464444,
      -0.01146734,
      0.00023560693,
      0.011900307,
      0.010710401,
      0.13649178,
      0.009177763,
      0.010018962,
      -0.0022461687,
      -0.013778369,
      -0.006842699,
      -0.0098064635,
      0.0089455955,
      0.018130455,
      -0.007676987,
      0.0037304405,
      -0.0041765384,
      0.015235595,
      0.020712784,
      0.030581256,
      -0.008884905,
      -0.0006162652,
      -0.005132929,
      0.002063905,
      0.023852445,
      0.004531646,
      -0.007150559,
      0.000998137,
      0.0055590076,
      -0.013981435,
      0.015983615,
      -0.014530859,
      0.010820511,
      -0.009567924,
      -0.0036318405,
      -0.004294042,
      -0.022550862,
      -0.029349716,
      -0.021969676,
      -0.0038040697,
      0.015689833,
      0.00707262,
      -0.0078890305,
      -0.0009633044,
      -0.17799932,
      0.014198646,
      0.004215133,
      0.00769371,
      -0.02444876,
      0.028245298,
      0.005386009,
      -0.02438998,
      0.04161677,
      -0.034918807,
      -0.0004426246,
      -0.00634978,
      -0.014531196,
      0.02644894,
      0.0018304536,
      0.016043706,
      -0.017466456,
      0.035960395,
      0.022573713,
      -0.021680837,
      -0.014543624,
      -0.021367956,
      -0.024418777,
      0.018209497,
      -0.015120927,
      -0.010096092,
      0.018021425,
      0.020365473,
      -0.01728661,
      -0.0037314857,
      0.0021285152,
      0.0073608365,
      0.014560682,
      -0.0097168,
      -0.012666791,
      0.0033401498,
      0.0041002915,
      -0.028646704,
      -0.004806712,
      0.007944561,
      -0.007737767,
      -0.017732896,
      -0.0019880768,
      -0.002463277,
      0.015484121,
      -0.023743609,
      -0.014376504,
      0.00950846,
      -0.033664327,
      -0.019410292,
      -0.011506659,
      0.0007057608,
      -0.010809146,
      -0.011625349,
      0.0021392552,
      -0.0077931597,
      -0.0056839427,
      0.0022994373,
      -0.010227243,
      0.017039664,
      0.020449836,
      0.008389954,
      -0.16851115,
      0.013058029,
      -0.005260287,
      -0.024274398,
      -0.0035895023,
      -0.011504816,
      0.00072566036,
      0.0066136373,
      0.019905217,
      -0.017984226,
      0.0024100402,
      -0.0028426284,
      0.04233772,
      -0.0026349404,
      0.005974607,
      -0.01169009,
      -0.024613583,
      -0.0036253151,
      0.016374955,
      -0.0009859102,
      0.02338555,
      -0.015734313,
      0.0012073859,
      -0.012679105,
      -0.016092174,
      -0.024825916,
      0.016617795,
      -0.013880723,
      0.029892053,
      -0.00024454057,
      -0.017053964,
      -0.023623224,
      0.018813469,
      -0.018315563,
      -0.029942289,
      0.018849738,
      -0.024876148,
      0.008846035,
      0.018107112,
      0.039196525,
      -0.04315067,
      -0.009815357,
      0.0028570204,
      0.0013737461,
      0.0041259597,
      0.0061952183,
      0.0024616832,
      0.0049479622,
      0.009334077,
      0.0048374212,
      0.000091180154,
      -0.016383316,
      -0.008814748,
      0.0076454817,
      0.00018043313,
      -0.0054343017,
      -0.011002707,
      0.0017992575,
      0.0066375085,
      -0.023438748,
      -0.0019223808,
      0.0131245805,
      -0.0075140432,
      0.024746472,
      -0.012649318,
      0.021842815,
      0.010654846,
      0.010317252,
      -0.0035985734,
      -0.008102807,
      0.014956205,
      -0.009304752,
      -0.005301118,
      0.009901644,
      0.0032189332,
      -0.0027482712,
      -0.010545473,
      0.005020235,
      -0.0025546022,
      0.023626111,
      -0.023552056,
      0.0033143295,
      0.01389196,
      0.00055375375,
      0.0001385754,
      0.031501554,
      -0.028753752,
      -0.023265421,
      -0.012068241,
      0.01745952,
      -0.00557706,
      0.016656239,
      -0.015163831,
      0.018306026,
      0.020419281,
      -0.020231247,
      -0.0025629373,
      0.016541274,
      0.012628238,
      -0.0037332883,
      -0.0013296552,
      0.0048131305,
      -0.009907548,
      0.009901561,
      -0.011800604,
      0.002812818,
      -0.0031674602,
      0.011311457,
      0.029763356,
      -0.004618014,
      -0.017252764,
      -0.0021589051,
      0.015816018,
      0.0041698017,
      -0.0016076762,
      0.049693976,
      0.021265436,
      -0.00641854,
      -0.007818289,
      0.01148083,
      -0.0003622234,
      -0.0005425648,
      0.038363677,
      -0.0034366364,
      0.024571458,
      0.005388693,
      0.013999124,
      -0.014995563,
      -0.006911009,
      -0.0012315161,
      -0.01609215,
      -0.003961749,
      -0.013295441,
      -0.010032808,
      -0.021052852,
      -0.016905013,
      -0.002972246,
      0.0120618325,
      -0.025359053,
      0.0097640455,
      -0.036160458,
      0.0034640695,
      -0.014770149,
      -0.011553533,
      -0.0062769987,
      -0.016599404,
      -0.0208524,
      -0.002484164,
      -0.028422171,
      0.023734612,
      -0.014228361,
      0.0057395366,
      0.027816657,
      -0.00048423788,
      0.017770957,
      0.0006846498,
      0.008357138,
      -0.012004745,
      -0.00426234,
      -0.007934749,
      -0.0063718515,
      -0.106372595,
      0.013275057,
      -0.009083399,
      -0.00961314,
      0.016405322,
      0.0057216166,
      -0.02540913,
      0.015755774,
      0.005968988,
      0.018593717,
      0.0034441047,
      -0.008499622,
      0.027105516,
      -0.035172388,
      -0.017160302,
      -0.0055764653,
      -0.016321415,
      -0.01941476,
      0.032074217,
      -0.005483279,
      -0.004281456,
      -0.015048429,
      -0.020949053,
      -0.0022351143,
      0.0037731775,
      0.007984713,
      -0.009471851,
      0.021848714,
      0.004680308,
      0.00063895545,
      -0.002003553,
      0.025128637,
      -0.0008401279,
      -0.010014399,
      0.0029737249,
      0.0037930128,
      0.0230014,
      -0.012074472,
      0.011993967,
      -0.002136194,
      0.024154844,
      -0.017324552,
      0.02293566,
      0.04815758,
      -0.007497276,
      0.010424802,
      -0.0074693547,
      0.012700007,
      0.0010263671,
      -0.001161358,
      -0.013096652,
      0.010812111,
      0.00764527,
      -0.008133137,
      -0.012437531,
      0.020047884,
      0.021226563,
      -0.009164502,
      0.0035553973,
      0.0108449785,
      -0.0031026888,
      -0.0052578324,
      0.010093073,
      -0.006441637,
      0.007904298,
      0.003595607,
      0.019525276,
      -0.02592266,
      -0.04339701,
      -0.0040284274,
      0.011608839,
      0.008101296,
      -0.0021861151,
      -0.026910584,
      -0.003491583,
      0.009068263,
      0.017316641,
      -0.02256614,
      -0.0065988265,
      0.046685614,
      0.0159555,
      -0.004748212,
      0.00016237065,
      0.015676534,
      0.0031158847,
      -0.0036929017,
      0.009451268,
      -0.0034755082,
      -0.0015103956,
      -0.020788478,
      0.014981766,
      0.0050409823,
      0.0006747825,
      0.011831997,
      -0.030317312,
      0.002738853,
      0.001237673,
      -0.0060335062,
      -0.015598614,
      0.023560794,
      -0.015225484,
      -0.011482066,
      -0.014629387,
      0.005827284,
      0.009355015,
      -0.011134779,
      -0.026027178,
      -0.018674484,
      -0.014682729,
      -0.03278977,
      -0.0015385175,
      0.0073858676,
      -0.027194733,
      0.0059030442,
      -0.018888472,
      0.022624435,
      0.0055581545,
      0.015409163,
      0.016466012,
      -0.021302704,
      -0.019228475,
      -0.010363551,
      0.015213129,
      0.01737871,
      -0.009221827,
      0.01938931,
      -0.017510425,
      -0.0029794083,
      -0.014419347,
      -0.021643024,
      -0.036226235,
      0.01806096,
      -0.027192554,
      -0.012988422,
      -0.015728904,
      -0.009261318,
      0.022291204,
      0.03460843,
      0.013967083,
      0.0062527927,
      0.005431948,
      0.00082516327,
      -0.0077521135,
      0.012404308,
      0.0033970894,
      0.014162423,
      -0.0022430706,
      0.014984408,
      -0.008486116,
      -0.01853169,
      -0.030101059,
      -0.030420462,
      -0.015782248,
      -0.005693593,
      -0.010078692,
      0.003911783,
      0.005405011,
      -0.0067329356,
      -0.029507305,
      -0.03628496,
      0.00020372689,
      -0.006973235,
      -0.026464831,
      -0.006853051,
      0.010054876,
      0.020903392,
      -0.00009984469,
      -0.000980902,
      -0.015574303,
      -0.020720275,
      0.003959575,
      -0.017675962,
      -0.020941358,
      -0.016825337,
      0.013139089,
      0.01113952,
      0.017636323,
      -0.00901437,
      0.023926837,
      0.013869633,
      0.019056315,
      -0.013630675,
      -0.0060328897,
      0.013984455,
      0.01586464,
      0.010200058,
      0.0022074278,
      0.018957049,
      -0.04084804,
      0.00144683,
      0.0022701246,
      -0.00058161764,
      0.013161945,
      0.022306863,
      -0.0044031343,
      0.021180809,
      0.00705977,
      0.00996132,
      0.0042460114,
      0.014162377,
      -0.0011535136,
      -0.0069835954,
      -0.017592065,
      0.009323593,
      0.002177788,
      -0.016722646,
      -0.00905706,
      -0.016881464,
      0.0039292006,
      0.019270733,
      -0.015220114,
      0.011208691,
      0.0017084889,
      -0.014535037,
      0.022065548,
      0.030542918,
      -0.02497962,
      0.004411205,
      -0.03827599,
      -0.0056168437,
      0.012455588,
      -0.0077401297,
      0.019548032,
      -0.0060118055,
      0.020681646,
      0.000053930562,
      -0.005694592,
      0.0066783926,
      0.005084101,
      0.0009870074,
      -0.008466612,
      0.0019935626,
      -0.010729727,
      0.014753382,
      -0.026457597,
      -0.00999448,
      0.01424157,
      0.008113175,
      -0.001382275,
      0.021358507,
      -0.012965071,
      -0.013898171,
      -0.02362677,
      0.004427179,
      0.013732092,
      -0.019528026,
      0.019789945,
      0.00788421,
      0.0020213707,
      0.0075386665,
      -0.004129756,
      0.014670422,
      0.006249992,
      -0.014535655,
      -0.032053024,
      0.04096431,
      -0.005489511,
      -0.008273207,
      0.01127323,
      -0.0002468208,
      0.033598322,
      0.03151925,
      0.009568193,
      -0.0022426883,
      0.012191323,
      -0.016558608,
      -0.006941185,
      -0.007728412,
      -0.009425551,
      -0.11530701,
      -0.0036482734,
      -0.013982816,
      -0.006940741,
      -0.0076340935,
      -0.018543147,
      -0.013960266,
      -0.022350017,
      0.005610722,
      -0.010981565,
      0.014580002,
      0.020918414,
      -0.00693734,
      -0.014728759,
      0.0035918076,
      -0.020020168,
      0.021642976,
      0.0051314346,
      0.027326621,
      0.017866677,
      -0.01495504,
      -0.001082447,
      0.0023613728,
      -0.0135584725,
      -0.020956874,
      -0.009398589,
      0.0028078808,
      0.0007229966,
      0.0021093392,
      -0.0036935417,
      -0.027814195,
      0.007280079,
      -0.0061865915,
      0.01684288,
      0.011905003,
      -0.026530927,
      -0.01698895,
      0.026918361,
      0.018801328,
      0.010534685,
      -0.0052179517,
      -0.0002979137,
      0.030527554,
      0.017378772,
      -0.011239282,
      0.019082341,
      0.029058827,
      -0.014305052,
      -0.016508337,
      0.016987145,
      -0.023442604,
      -0.03220543,
      -0.0140259275,
      -0.0013236019,
      -0.011083985,
      -0.0035589258,
      0.011378653,
      0.00016966533,
      0.0016244852,
      -0.022266058,
      -0.003564291,
      0.006033528,
      0.0011861845,
      0.034303196,
      0.003400599,
      0.008227404,
      0.024696158,
      0.002719835,
      0.008374259,
      -0.00085884874,
      -0.007489193,
      -0.0015317893,
      -0.009292956,
      0.016737571,
      0.0092176525,
      0.004418992,
      0.000460595,
      -0.0056875334,
      0.00035206796,
      0.0030995016,
      -0.043609507,
      -0.011992321,
      -0.04715258,
      -0.033590548,
      0.0081309285,
      -0.010204818,
      0.0036308854,
      0.022245722,
      0.0061000353,
      0.00812866,
      0.007824249,
      0.00067129027,
      -0.0069388105,
      0.0062068035,
      0.019891135,
      -0.018251387,
      -0.021993525,
      0.0013951481,
      -0.012094971,
      -0.019701548,
      -0.0070845066,
      -0.0015498252,
      -0.009604751,
      -0.01040983,
      -0.004177793,
      -0.0155829415,
      -0.0048654624,
      0.0064744432,
      -0.022787621,
      -0.017315356,
      0.0041992823,
      0.014803709,
      0.015307339,
      -0.15687804,
      -0.02478575,
      -0.018858911,
      -0.004535324,
      0.003493471,
      0.0023430644,
      -0.00983511,
      -0.007049095,
      0.0072566206,
      -0.017111033,
      0.007995642,
      -0.016985347,
      -0.013347951,
      -0.012085264,
      0.03115072,
      0.13487795,
      -0.011941269,
      -0.008201284,
      -0.024569819,
      0.017875032,
      -0.0013100179,
      -0.009096163,
      -0.024702441,
      0.0023262186,
      -0.012472991,
      -0.0027003118,
      -0.007438592,
      -0.008767842,
      -0.012775915,
      -0.0033901713,
      -0.008555053,
      -0.0117226485,
      -0.002605363,
      0.024911558,
      -0.0071264696,
      -0.0073423744,
      -0.00350426,
      0.009839471,
      0.00018954492,
      -0.011272062,
      0.020090867,
      -0.0031261393,
      -0.009582563,
      0.0072935945,
      0.0064777867,
      0.013291769,
      -0.018081421,
      -0.020291978,
      -0.011835432,
      -0.007850952,
      -0.007496421,
      -0.064352535,
      0.0040561687,
      -0.004976008,
      0.0009008024,
      0.013324526,
      0.021475598,
      0.025219373,
      -0.0019540559,
      -0.000018416498,
      -0.0068311696,
      0.013294266,
      -0.004659791,
      -0.00096403266,
      -0.0036358342,
      -0.027127767,
      0.0033858404,
      0.019618502,
      0.023476673,
      -0.008061957,
      0.00204716,
      0.015239636,
      -0.006135023,
      0.03500794,
      -0.007752386,
      -0.00081234035,
      -0.014619467,
      0.012876313,
      0.018165497,
      -0.016081858,
      -0.006250514,
      -0.0067765084,
      -0.009918852,
      -0.016847288,
      0.011482717,
      0.012534662,
      -0.02222897,
      0.0004619496,
      -0.008046179,
      0.0054497896,
      0.0070927446,
      -0.003992069,
      -0.026753798,
      0.013112695,
      -0.010779885,
      0.017614158,
      0.0057522827,
      -0.002818441,
      0.042248044,
      -0.008768541,
      -0.015223273,
      0.0049990322,
      0.0065485504,
      -0.012657304,
      0.018726345,
      0.0026092606,
      -0.016005754,
      0.029876908,
      -0.015656611,
      -0.00732042
    ]
  },
  {
    "id": "genai_cohort_python_04_Raise_your_own_errors_vtt",
    "content": "All right, next one. 2 Can we raise our own exceptions? 3 Yes, this is exactly what we're 4 going to learn in this video. 5 So without a further ado, let me 6 take you on to the code part. 7 And again, some things actually work 8 better just with the code example. 9 So I don't want you to bore 10 in the theory part. 11 Let's write some code. 12 Let's create a new file. 13 This one will be 05. 14 And, we'll call this one 15 as custom exceptions. 16 Py. 17 The first thing that we're going 18 to do is let's just say 19 we have a brew chai method. 20 All right? 21 We'll code it on the go. 22 This is a brew chai, and we 23 have flavor in this. 24 All right, no problem so far. 25 Now we have a particular set 26 of flavor only that we serve. 27 Let's have an array of this. 28 The first one is going to be masala. 29 Then this time we'll serve 30 my favorite one, ginger. 31 And let's just say we have lig as 32 well, whatever the spelling is. 33 All right, now we are only 34 serving this, so we need 35 to check whether the flavor is 36 within this array or not. 37 So we can just go 38 ahead and check this. 39 If flavor in. 40 And we have checked this 41 and flavor, not in. 42 So now we are checking if the flavor 43 is not in any one of them. 44 Then we want to raise an exception. 45 So we can use a keyword, 46 literally raise. 47 And you can raise an exception. 48 And whatever you want to call 49 your exception, it's up to you. 50 You can call this as a key error, 51 value error, whatever makes sense. 52 In this case, it makes sense to call 53 it as value error because the value 54 that you have provided doesn't 55 exist or I don't want to serve it. 56 I'll just go ahead and work like this 57 and we'll say unsupported, chai. 58 That's funny. 59 But it is literally 60 unsupported chai flavor. 61 There we go. 62 And of course, looks good. 63 Now, in all the other case, we 64 simply go ahead and print this. 65 So we'll just go ahead and print 66 a formatted string that we are 67 brewing whatever the flavor 68 you have given me of the chai. 69 In all other cases, we are 70 actually brewing this. 71 So how we can actually use this? 72 Let's go ahead and use it. 73 Brew chai. 74 And if I go ahead and ask it 75 for a chai which doesn't 76 exist, I want to see. 77 I'm only interested what 78 happens because I know it. 79 If I'll provide it masala 80 chai, this will execute. 81 It's just a one line of code. 82 There is no point 83 of running this one. 84 So in this case we'll just go 85 ahead and say Python 3 run 05. 86 And notice here, this time you are 87 raising an error, which is good. 88 Sometimes crashing 89 the program is also good. 90 Don't worry too much on that. 91 But notice here, this time the error 92 that comes up is in our old syntax. 93 The colors and everything are nice. 94 And it says unsoported. 95 Really badly spelled there. 96 Unsupported. 97 Chai. 98 There we go. 99 Some of you might be yelling 100 from the screen, hey, you are 101 writing this really wrong. 102 There we go. 103 So this is better. 104 Unsupported Chai flavor 105 with three dots came in. 106 So this is nice that we were able 107 to actually raise our own errors. 108 Can we create our own 109 custom exceptions also? 110 That's interesting. 111 Can we do that? 112 Yes, actually we can do that. 113 And let's quickly move on 114 to the next video to actually create 115 our own custom exceptions.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 Raise your own errors.vtt",
      "originalPath": "genai-cohort/python/09 Chapter Subtitles/04 Raise your own errors.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.008455084,
      0.013180487,
      0.039793804,
      -0.05360051,
      0.0102434615,
      -0.021830732,
      -0.00081171904,
      0.010452238,
      0.0045954245,
      -0.009314093,
      -0.01994044,
      -0.025362357,
      0.003440183,
      0.012981675,
      0.12072377,
      -0.009876509,
      -0.008892413,
      -0.014498688,
      -0.005967657,
      -0.005238667,
      -0.0029084017,
      -0.004072808,
      0.014746594,
      -0.017850403,
      0.009316501,
      -0.008967479,
      -0.005672476,
      0.023321206,
      0.03212822,
      -0.021774504,
      -0.025315551,
      -0.012037363,
      0.0093374215,
      0.031167218,
      0.0034723305,
      0.019322407,
      0.016956165,
      0.017533634,
      -0.009479298,
      0.008844149,
      -0.019841436,
      0.00705549,
      0.005408437,
      -0.024619695,
      0.02033733,
      -0.020732561,
      -0.016494084,
      -0.02241006,
      -0.015598191,
      0.010694457,
      0.023961,
      -0.0094422875,
      -0.011151166,
      -0.17900893,
      0.0020280604,
      0.010614971,
      0.027151922,
      -0.0039972677,
      0.032810107,
      -0.0066816946,
      -0.031540886,
      0.008886444,
      -0.027770897,
      -0.025006862,
      -0.00004227213,
      -0.04723926,
      0.02711162,
      0.0048074205,
      0.0018573799,
      -0.016525099,
      0.026919736,
      0.026181541,
      0.004121917,
      -0.013769579,
      -0.033512957,
      -0.039643917,
      0.0034176859,
      -0.0168296,
      0.003870891,
      0.022346288,
      0.0013820205,
      -0.02429278,
      -0.00995608,
      -0.0014820014,
      -0.0025262479,
      0.019876905,
      -0.028069364,
      -0.030302387,
      -0.008120075,
      -0.0064792316,
      -0.028816309,
      0.008492829,
      -0.008291745,
      0.0046402025,
      -0.006450628,
      0.011608394,
      -0.009362507,
      0.012354502,
      -0.038112856,
      -0.01182425,
      0.006289146,
      -0.010414041,
      -0.013479354,
      0.0035905456,
      -0.0008103591,
      -0.012037336,
      -0.009225975,
      -0.014631193,
      -0.01935146,
      -0.010136453,
      0.0007814203,
      0.000080625236,
      -0.014114012,
      0.014653468,
      0.021803344,
      -0.17688788,
      0.011845307,
      -0.0002764959,
      0.0105139315,
      0.017673457,
      -0.0026835147,
      0.017315736,
      0.011159248,
      0.015430859,
      -0.006937013,
      0.0110190315,
      -0.0033952235,
      0.01852645,
      -0.0042503006,
      -0.0014724549,
      -0.045450296,
      -0.021316981,
      0.015154009,
      0.0037578444,
      -0.014755538,
      0.023218462,
      -0.018577328,
      -0.0023634383,
      -0.0011469532,
      -0.017089851,
      -0.010118797,
      0.020793643,
      -0.01891897,
      0.017655313,
      0.0061735217,
      -0.014486941,
      -0.007502474,
      0.013132682,
      -0.025321756,
      -0.025398262,
      0.03167558,
      -0.031312868,
      0.019329429,
      -0.0046851733,
      0.019986661,
      -0.030406896,
      0.0029486835,
      0.0024688866,
      -0.009863879,
      0.008448355,
      -0.001419036,
      0.0024408784,
      -0.0040700687,
      0.00312496,
      0.0023713952,
      -0.003635222,
      -0.0047913166,
      -0.008730509,
      0.0034061868,
      0.015335697,
      0.003157279,
      -0.017759332,
      0.007330892,
      0.010359793,
      -0.0081661455,
      0.0121263405,
      0.0131630935,
      0.001958064,
      0.018354785,
      -0.019540751,
      0.011376252,
      0.003113441,
      0.02260247,
      -0.00023173419,
      0.011356504,
      0.0045606,
      -0.01928419,
      0.0033494513,
      0.0168316,
      -0.0008402722,
      -0.0054082167,
      -0.0049018217,
      0.026319781,
      0.020894747,
      0.013318432,
      -0.013450346,
      0.008641908,
      0.0075905737,
      0.002040402,
      0.01191434,
      0.017554231,
      -0.022533001,
      -0.014133465,
      -0.0075828796,
      0.025250338,
      -0.004574939,
      0.005578657,
      -0.015098309,
      0.019098759,
      0.013178525,
      -0.006252083,
      0.00347186,
      0.04688724,
      0.010953113,
      0.007931795,
      -0.014898844,
      0.009722393,
      0.0201206,
      0.0076416316,
      -0.022235142,
      0.0012485969,
      0.010088852,
      -0.0047884933,
      0.005968293,
      -0.009147953,
      -0.02121382,
      0.006646382,
      0.014383043,
      0.021813016,
      0.0153031135,
      0.03887049,
      -0.0033274498,
      -0.024749324,
      0.010137151,
      0.003930468,
      -0.0008123994,
      -0.015993351,
      0.03188775,
      0.00015865851,
      -0.0019867003,
      0.0035692703,
      -0.014851199,
      -0.011892207,
      -0.010922126,
      0.019697491,
      -0.012841387,
      0.012888738,
      -0.0107580675,
      -0.016051482,
      -0.043755498,
      -0.008685125,
      -0.0076652877,
      -0.007154591,
      -0.013485212,
      -0.004889938,
      -0.025243182,
      -0.017020732,
      -0.012410311,
      -0.0036984147,
      -0.0035222727,
      0.006992204,
      -0.021649072,
      -0.01051412,
      -0.009031403,
      0.012100654,
      -0.00441847,
      0.007314249,
      0.020953318,
      0.011200456,
      0.029463915,
      0.012583153,
      0.009150453,
      0.004721802,
      0.008445146,
      -0.026173422,
      0.0098556345,
      -0.09634154,
      0.029160257,
      0.002495529,
      -0.015859224,
      0.008579915,
      0.010644987,
      -0.036396317,
      -0.0043606632,
      -0.00753833,
      0.017962908,
      0.0053864643,
      0.0033132462,
      0.030171663,
      -0.017701527,
      -0.025415665,
      -0.014473575,
      -0.018917276,
      0.007457705,
      0.031292036,
      -0.009390565,
      -0.0010803927,
      -0.021626126,
      -0.027408328,
      -0.018326854,
      0.0051573515,
      -0.007925321,
      -0.02023818,
      0.015664417,
      0.0116827395,
      -0.01092536,
      -0.0033443805,
      0.017422294,
      -0.016696736,
      -0.008802173,
      -0.0013453874,
      -0.0027850918,
      0.0076303026,
      -0.025483761,
      0.015286535,
      -0.004379091,
      0.01632082,
      -0.024231264,
      0.012983476,
      0.03656537,
      0.0054487614,
      0.022537751,
      -0.032025605,
      0.0065529216,
      -0.0021544346,
      -0.005496711,
      -0.009903463,
      0.014899805,
      0.019288257,
      0.0037852207,
      0.015073681,
      0.032981325,
      0.010864147,
      -0.010343555,
      0.00004277904,
      0.00195306,
      -0.0024049806,
      -0.002517487,
      -0.0008666615,
      -0.010707346,
      0.005368012,
      -0.0065749357,
      0.021962414,
      -0.025019396,
      -0.014106719,
      0.007993741,
      0.009885721,
      -0.01573951,
      0.013373673,
      -0.030391568,
      -0.008832524,
      -0.015332491,
      -0.0015810069,
      -0.011613878,
      -0.021407077,
      0.0323091,
      -0.00275287,
      -0.015464286,
      -0.0097870575,
      0.012418152,
      0.0029554819,
      0.0070683793,
      0.013444805,
      0.0020234594,
      0.02366323,
      -0.033122677,
      0.024208058,
      0.013230497,
      -0.018905293,
      0.0013295596,
      -0.010943808,
      -0.0055445,
      -0.0013762735,
      -0.006855717,
      -0.010277774,
      0.024942016,
      -0.018624682,
      0.004641087,
      -0.029584473,
      -0.015787037,
      0.0009576808,
      -0.01311852,
      -0.033772495,
      -0.024938274,
      -0.014347017,
      -0.023686983,
      0.009662501,
      -0.018714974,
      -0.013755058,
      -0.0130376285,
      -0.0076685376,
      0.008311873,
      0.016404813,
      0.018302292,
      0.0045383405,
      -0.012142952,
      -0.0266501,
      -0.021082062,
      -0.0070655756,
      0.0024873735,
      -0.014071121,
      0.018312449,
      -0.004344362,
      0.010293557,
      -0.017618155,
      -0.00923808,
      -0.01842009,
      0.035205517,
      -0.022809684,
      -0.017473133,
      -0.012384508,
      -0.0056571043,
      0.027406072,
      0.022267763,
      0.012141246,
      0.016419757,
      -0.004539097,
      -0.0005745289,
      0.0050702062,
      -0.0010101695,
      0.0032969888,
      0.0020396733,
      -0.0017880496,
      0.016295882,
      0.009877476,
      -0.02923818,
      -0.009613089,
      -0.011394254,
      -0.00018265861,
      -0.00027508766,
      -0.008636695,
      0.0076609007,
      -0.0030810826,
      -0.0091056805,
      -0.011347996,
      -0.0109000085,
      -0.0005558598,
      0.002492675,
      -0.017897656,
      -0.013574697,
      0.024734294,
      0.0015100801,
      -0.014070354,
      0.0049701068,
      0.0052827112,
      -0.0035259803,
      -0.003937253,
      -0.02032563,
      -0.025137719,
      0.013589931,
      0.005840603,
      -0.0019898436,
      0.022173768,
      0.008413552,
      0.025578097,
      0.0182257,
      -0.010725135,
      0.0064121243,
      -0.0026395149,
      0.008006099,
      0.0057562985,
      0.011415218,
      0.020323427,
      -0.007402451,
      -0.03269907,
      0.004190996,
      0.006302212,
      -0.009003292,
      -0.006275309,
      0.027716788,
      0.023693683,
      0.031221826,
      0.016189579,
      0.016828347,
      -0.000937581,
      0.007377815,
      -0.0114896195,
      0.0077125607,
      -0.03140821,
      0.015832832,
      0.015032049,
      0.006985017,
      -0.00033071384,
      0.003532572,
      -0.000099342404,
      0.00088995724,
      -0.0050065657,
      0.008206423,
      0.012382073,
      0.0012137921,
      0.022723533,
      0.020376336,
      -0.00039369214,
      -0.0024123818,
      -0.019650934,
      -0.0025624563,
      0.00291739,
      -0.014115355,
      -0.0067146355,
      -0.012794415,
      0.026978223,
      -0.014538724,
      -0.0026725288,
      0.007229242,
      0.0021063425,
      -0.0056273076,
      -0.0027173287,
      -0.019669522,
      -0.019391991,
      0.007550519,
      -0.038394816,
      -0.016456004,
      0.0066599143,
      0.022478357,
      0.011313237,
      0.024807544,
      -0.02062451,
      0.001865671,
      0.0068887756,
      -0.008740027,
      0.01758772,
      -0.010812044,
      0.003321174,
      0.007786768,
      -0.024448704,
      -0.00090714515,
      0.0018716014,
      0.016077891,
      0.0015024475,
      -0.026212692,
      -0.041458853,
      0.028233016,
      0.01030002,
      0.009381126,
      -0.011788416,
      -0.013454586,
      0.02073879,
      0.01681584,
      -0.00035059015,
      -0.017720291,
      0.011480579,
      -0.018983252,
      -0.013458003,
      -0.014203763,
      0.009591915,
      -0.10960902,
      -0.013183143,
      -0.0054292125,
      0.0057529053,
      -0.02097868,
      0.008926186,
      -0.010588435,
      -0.020087982,
      0.010790101,
      0.004447639,
      0.013599081,
      0.015520119,
      -0.011456067,
      -0.00936259,
      -0.00070986664,
      -0.021622613,
      0.023264475,
      0.0032075488,
      0.039025508,
      0.017731393,
      0.0066646608,
      -0.00561854,
      0.002329911,
      -0.014815071,
      -0.014040404,
      -0.0060755596,
      -0.0072841267,
      -0.0046051317,
      -0.0038594054,
      0.018031543,
      -0.03458931,
      -0.003959276,
      0.012323919,
      0.022747723,
      0.005090758,
      -0.023708986,
      -0.030011818,
      0.0046260133,
      0.026891362,
      -0.012500904,
      -0.017680325,
      -0.0026707542,
      0.023943294,
      0.009700388,
      -0.0073526753,
      0.034806132,
      0.015006411,
      -0.02659405,
      -0.015496358,
      0.042525426,
      -0.038618367,
      -0.032409847,
      -0.017212491,
      -0.028650502,
      -0.024966145,
      0.00087680994,
      0.018129384,
      -0.006622664,
      0.0007950394,
      -0.012854088,
      -0.012471559,
      -0.0015440001,
      0.010383105,
      0.048897546,
      -0.012854297,
      0.008710583,
      0.03194364,
      -0.0016426403,
      -0.004921119,
      0.016436335,
      -0.007060887,
      0.0069153504,
      -0.009849468,
      0.027227473,
      0.001235628,
      0.015582856,
      -0.0002950495,
      -0.03461427,
      0.0056250235,
      -0.0054893293,
      -0.030924087,
      -0.02692451,
      -0.042235076,
      -0.03125458,
      0.010578381,
      0.016584618,
      -0.0017421269,
      0.02291793,
      -0.0013887858,
      -0.004625322,
      -0.00092685816,
      0.00040723747,
      -0.00661333,
      0.0065843384,
      -0.010057337,
      0.001502481,
      -0.027347641,
      -0.00021671249,
      -0.0017017038,
      -0.010453506,
      -0.002534753,
      0.012824542,
      0.008116032,
      0.005693743,
      -0.0112503525,
      -0.019737357,
      -0.0037521683,
      0.014214487,
      -0.00054812094,
      -0.0062670647,
      -0.0038488007,
      -0.00064575335,
      -0.006077983,
      -0.14717007,
      -0.017537618,
      0.012131043,
      0.00419958,
      0.025424244,
      0.014849708,
      -0.0018059169,
      0.0044046077,
      -0.0069488334,
      -0.02566041,
      0.014245676,
      -0.0070713656,
      -0.010760608,
      0.008949152,
      0.0087822955,
      0.13856256,
      -0.010633672,
      -0.007995544,
      -0.024760345,
      0.0073895706,
      -0.005786002,
      -0.004711065,
      -0.027115082,
      -0.008525876,
      -0.018246397,
      0.00348589,
      -0.007903942,
      -0.02100307,
      0.0053803525,
      0.0033073984,
      -0.012038766,
      0.003933846,
      0.011345776,
      0.026074165,
      0.0072014458,
      -0.013413207,
      -0.016985446,
      0.014424629,
      0.00067418907,
      -0.002171652,
      0.0104998695,
      -0.013955778,
      0.0012554121,
      0.012689894,
      0.002191291,
      -0.0016420606,
      -0.023619957,
      -0.016093971,
      -0.0018405984,
      0.00042514002,
      -0.023763178,
      -0.041478883,
      0.020819774,
      -0.010270801,
      -0.012380809,
      0.01156381,
      0.011543342,
      0.029219186,
      0.006194731,
      0.011367535,
      0.018158661,
      -0.0032649704,
      -0.033303715,
      -0.0021606642,
      0.009777981,
      -0.009430114,
      0.018675935,
      0.007620326,
      0.033869974,
      0.0062598432,
      0.0069066887,
      0.034303512,
      -0.0023023314,
      0.032180272,
      -0.0078594005,
      -0.0024337745,
      -0.019471861,
      0.02319911,
      0.00687048,
      -0.0037643472,
      -0.007218224,
      -0.010781246,
      -0.000040636663,
      -0.016141435,
      0.023584697,
      0.013507652,
      -0.018585399,
      0.0058198804,
      0.00068110204,
      0.0052289465,
      0.012404058,
      0.0069048232,
      0.0020028502,
      0.016350364,
      -0.009790274,
      0.017323729,
      0.017954754,
      -0.00912321,
      0.016462483,
      -0.011241059,
      -0.0036426038,
      0.00765136,
      -0.014870335,
      -0.007969802,
      0.010729965,
      0.0078545865,
      0.010007626,
      0.020925956,
      -0.010402891,
      -0.021307433
    ]
  },
  {
    "id": "genai_cohort_python_05_creating_custom_exceptions_vtt",
    "content": "Continuing from the last class, 2 we saw that we can definitely 3 raise our own errors, 4 but there's still value error. 5 And what we see is raise value error. 6 Now sometimes these kinds of 7 errors which are predefined, 8 like key errors out of bound 9 errors or division by zero 10 error, they're not enough. 11 They are not serving us 12 the way we want it to serve. 13 So what can we do? 14 Yes, you can actually do a lot of. 15 Let me go ahead and close this. 16 Let's create a new file. 17 I want to keep everything 18 in a separate file so that if you're 19 revising them, you just come to that 20 lecture and quickly just download 21 that file and have a revision. 22 So let's call this one as custom. 23 This is actually custom exception. 24 Previously was custom errors 25 raising custom variable. 26 That was a different one. 27 I'll call this one as custom 28 except two, of course. 29 Underscore two. 30 Except underscore two py. 31 So how we can do that? 32 It's actually super simple. 33 You can just go ahead and create 34 a class and let's just call this one 35 as out of out of ingredients error. 36 That's it. 37 You can just literally 38 create a class. 39 And the concept that we 40 studied about inheritance. 41 Yes, that's exactly come 42 into the picture. 43 Now you can, you can actually inherit 44 the exception and we're not going 45 to do anything inside it. 46 You can actually overwrite 47 a lot of things. 48 But as of now, we just want 49 to say pass just like that. 50 And that is it. 51 You have created your own 52 most simplest custom exception. 53 Told you it's really simple. 54 Now let's go ahead and write a simple 55 method that actually uses it. 56 So we are going to call 57 a method which says make Chai. 58 And you pass me on milk as well as 59 the sugar, whatever the quantity it 60 is, and then I check if my milk 61 quantity is zero or if the sugar is 62 zero, then obviously I cannot make 63 chai. 64 So in that case I will raise 65 this time a different error which 66 is out of ingredient error. 67 And I can say missing milk or sugar. 68 Although that's nice, I don't prefer 69 milk, but I prefer sugar in my T. 70 Anyways, I will just go ahead 71 and print Chai is ready 72 with of course three dots. 73 Now how we can use this? 74 Let's just say we call this 75 make chai and we simply go 76 ahead and pass on 0 comma 1. 77 So 0 milk and we have 1 sugar. 78 So will I be able to make the chai? 79 And how does even this out 80 of ingredient error look like? 81 This doesn't exist 82 anywhere in Python. 83 Let's see that it's actually 84 comparatively easy. 85 So Python3.06 and there we go. 86 Voila. 87 This time we have our own color 88 highlightings and everything, 89 but we have our own exception which 90 is out of ingredient error. 91 This says missing milk or sugar. 92 So it's not that hard 93 to have custom errors. 94 And that's how the custom error 95 happens in all the libraries 96 and frameworks like fast 97 APIs and djangos and whatnot. 98 There is so many things that 99 you can do along with this. 100 So the exceptions are really 101 a really in depth topic. 102 As long as you know the basics 103 of it, that these are used to handle 104 the program gracefully or if 105 you want to crash the program. 106 Crashing the program 107 by the way is not a bad idea. 108 Giving you one such example, let's 109 just say you are running an E 110 Commerce page and on the E Commerce 111 page, on the very home page 112 you show all the product list. 113 But if your application is 114 not able to connect the database, 115 then no point 116 of showing them the whole thing. 117 Instead it's better to crash 118 the application right now, right 119 there so that people can, 120 whoever are the coders can debug 121 your application and can actually 122 have the database connection. 123 So sometimes having the crashing 124 is okay and it's all right. 125 Let's go ahead and catch 126 up in the next video. 127 Hope you are enjoying all of this. 128 If you're enjoying them, 129 please do rate us. 130 We really need that. 131 That is it for this video. 132 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 creating custom exceptions.vtt",
      "originalPath": "genai-cohort/python/09 Chapter Subtitles/05 creating custom exceptions.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.009227714,
      0.0031285223,
      0.030065244,
      -0.049071606,
      0.015929285,
      -0.015754677,
      0.0005961099,
      0.017342186,
      0.009182219,
      -0.0015653385,
      -0.0046908623,
      -0.025804412,
      0.018985312,
      0.0038532875,
      0.12828857,
      -0.0038005153,
      0.003896929,
      -0.018807653,
      -0.012492647,
      -0.0023798787,
      -0.0021084943,
      0.0041595884,
      0.01550152,
      -0.021948429,
      0.016001152,
      0.0010338902,
      -0.00073051004,
      0.01835698,
      0.041048836,
      -0.017683554,
      -0.017443163,
      -0.0058799353,
      0.009302822,
      0.017665537,
      0.011848017,
      0.0052969777,
      0.015168604,
      0.02314964,
      -0.016545355,
      0.009342863,
      -0.0272061,
      0.021643711,
      -0.00029120932,
      -0.0135153765,
      0.015711728,
      -0.026090074,
      -0.0043661473,
      -0.012824296,
      0.002195209,
      0.014618712,
      0.02280412,
      -0.004799989,
      -0.014468493,
      -0.17995042,
      0.012498101,
      0.0079385135,
      0.029711667,
      -0.011552569,
      0.021143312,
      -0.00067967316,
      -0.0360286,
      0.01202555,
      -0.022299876,
      -0.01103116,
      -0.002674016,
      -0.048706304,
      0.025291357,
      0.013886851,
      -0.0001483945,
      -0.019101335,
      0.026103234,
      0.019068874,
      -0.01180501,
      -0.0045429775,
      -0.026360456,
      -0.0375173,
      -0.003914765,
      -0.0073399805,
      0.01578002,
      0.031685963,
      0.007652888,
      -0.02934082,
      -0.0032229237,
      0.008393088,
      -0.002385442,
      0.009979967,
      -0.02804334,
      -0.017629778,
      0.007682152,
      -0.005038257,
      -0.03490071,
      0.009313821,
      -0.009819226,
      0.013314486,
      -0.008684372,
      0.014028437,
      -0.011628912,
      0.019454129,
      -0.036468327,
      -0.010228524,
      0.005114851,
      -0.0071611707,
      -0.008302229,
      -0.019235026,
      0.0021244264,
      -0.0053232666,
      -0.013634955,
      -0.007228591,
      -0.020693835,
      0.007448929,
      0.00062988047,
      -0.000141339,
      -0.007526745,
      0.021982426,
      0.025944684,
      -0.16633967,
      0.005418967,
      -0.0021341478,
      0.0008679727,
      0.02113679,
      0.0042225295,
      0.017152052,
      0.007465759,
      0.011541891,
      -0.015092427,
      -0.001119293,
      0.0021594618,
      0.03317322,
      -0.0038824435,
      -0.0028290718,
      -0.028059889,
      -0.014697774,
      0.008311114,
      0.0051952195,
      -0.0073790597,
      0.023651479,
      -0.0073832683,
      -0.003433466,
      -0.010297489,
      -0.016967164,
      -0.015293252,
      0.029201865,
      -0.02416324,
      0.03547584,
      -0.0152229825,
      -0.015955094,
      -0.011356852,
      0.010662911,
      -0.029780637,
      -0.034034904,
      0.023396414,
      -0.028820174,
      0.02368243,
      -0.0076888013,
      0.019072657,
      -0.03544166,
      -0.0020252636,
      0.0053697377,
      -0.0063490346,
      0.00413514,
      -0.0032578884,
      0.021312032,
      -0.011393004,
      0.01385816,
      -0.00714716,
      -0.0076672835,
      0.0010519921,
      -0.010414207,
      0.010876969,
      0.014034029,
      -0.004724072,
      -0.016645,
      0.018111702,
      0.006045623,
      -0.018708311,
      0.014820075,
      0.015516645,
      0.0025287063,
      0.021553056,
      -0.0108986255,
      0.006146865,
      0.0017532908,
      0.017603233,
      -0.002156338,
      0.0042018723,
      0.0076296483,
      -0.030037893,
      0.0043574017,
      0.011798366,
      -0.005933265,
      -0.008060442,
      0.005658333,
      0.018976502,
      0.020781342,
      0.020419793,
      -0.023213003,
      0.005421899,
      0.017296461,
      0.0025654049,
      0.01639331,
      0.026492044,
      -0.0063151987,
      -0.017869351,
      -0.0070431638,
      0.018628817,
      -0.0009144599,
      0.00482174,
      -0.00987374,
      0.004776965,
      0.014296711,
      -0.008879363,
      -0.0041778907,
      0.044755276,
      -0.004003387,
      0.0071570063,
      -0.013040921,
      -0.00007630748,
      0.015586675,
      0.010113012,
      -0.023326786,
      -0.000047834423,
      0.0103998,
      -0.0024780133,
      0.008340786,
      -0.007786788,
      -0.017374512,
      0.0030924296,
      0.015501262,
      0.01761213,
      0.02655865,
      0.024981307,
      0.0036076207,
      -0.019106843,
      0.009247094,
      0.019256184,
      0.010737474,
      -0.013235465,
      0.034323826,
      -0.012506855,
      0.010391202,
      0.0013679914,
      -0.0155293895,
      -0.008484788,
      -0.004113755,
      0.017789807,
      -0.008582202,
      0.0121342,
      -0.013511531,
      -0.017527342,
      -0.040644847,
      -0.011647269,
      -0.009853441,
      0.0060349638,
      -0.017946634,
      0.009008574,
      -0.03113134,
      -0.024169765,
      -0.0039958484,
      -0.010193204,
      -0.0012051215,
      0.0056570433,
      -0.027950946,
      -0.0012415267,
      -0.013497464,
      0.008499315,
      -0.0050026244,
      -0.00018225647,
      0.017325383,
      0.0052315206,
      0.030982586,
      0.012266615,
      0.009612272,
      0.0022741265,
      0.013207645,
      -0.035782788,
      0.0027063913,
      -0.10037351,
      0.022220125,
      -0.0039073974,
      -0.011495081,
      0.011964526,
      0.010539547,
      -0.030613592,
      0.010776542,
      -0.003906264,
      0.015373751,
      0.0070657684,
      -0.01255585,
      0.033160068,
      -0.021584105,
      -0.012919059,
      -0.023010112,
      -0.0062925545,
      0.0057977512,
      0.02410282,
      -0.0036614132,
      -0.009329367,
      -0.034145303,
      -0.014025179,
      -0.006170693,
      0.0058098994,
      -0.0063819783,
      -0.013647725,
      0.021508558,
      0.009962979,
      -0.0002870764,
      -0.0018931082,
      0.01895074,
      -0.008209943,
      -0.007188762,
      -0.0055831443,
      -0.0017352843,
      0.002457909,
      -0.03557134,
      0.008798107,
      -0.0051585236,
      0.014413147,
      -0.034302324,
      0.011610917,
      0.033122,
      -0.004878556,
      0.014736509,
      -0.021549486,
      0.0031486743,
      0.0038779338,
      -0.013868946,
      -0.011342434,
      0.013272834,
      0.027989022,
      -0.0048135086,
      0.01412596,
      0.012403226,
      0.010709425,
      -0.020152027,
      -0.0008796846,
      0.005110801,
      0.008429379,
      0.0016981425,
      -0.0021281636,
      -0.015052382,
      0.0047403425,
      0.0008680089,
      0.0093048755,
      -0.02155665,
      -0.016130019,
      0.010215511,
      0.015849436,
      -0.010736384,
      0.017369641,
      -0.040479667,
      -0.010631866,
      0.0035044437,
      -0.008574826,
      -0.012574803,
      -0.020051053,
      0.030114328,
      0.002280623,
      -0.0017685087,
      -0.009291919,
      0.020520352,
      0.010185046,
      0.014315993,
      0.0014944501,
      0.00061149336,
      0.016269231,
      -0.03236873,
      0.0150305545,
      0.023577256,
      -0.010022655,
      0.0028787842,
      -0.023399869,
      -0.0041822395,
      -0.007968025,
      -0.0016097607,
      -0.014690722,
      0.019782932,
      -0.019178227,
      0.010991948,
      -0.027700352,
      -0.0049905153,
      0.015126952,
      -0.002736339,
      -0.04330106,
      -0.027681466,
      -0.01854274,
      -0.02381133,
      0.008026741,
      -0.019428004,
      -0.023280647,
      -0.012983125,
      -0.007214873,
      0.010579712,
      0.012247924,
      0.014059901,
      0.01492205,
      -0.011734246,
      -0.015053339,
      -0.0237969,
      -0.009847421,
      0.010306502,
      -0.010625564,
      0.022464111,
      -0.0196023,
      0.020170275,
      -0.018411605,
      -0.013573737,
      -0.0262417,
      0.03435685,
      -0.034549728,
      -0.022367507,
      -0.019273845,
      -0.010266398,
      0.031572834,
      0.026298774,
      0.010540913,
      0.00963271,
      -0.014537718,
      0.0046510557,
      0.000103215534,
      -0.0026348508,
      -0.002353932,
      0.008119653,
      -0.00019318626,
      0.021145074,
      0.006472553,
      -0.026469357,
      -0.01668432,
      -0.024348056,
      0.0010401859,
      -0.00086810597,
      0.0024901428,
      0.014942466,
      -0.00496052,
      -0.018663,
      -0.018720891,
      -0.01236413,
      0.000033252556,
      -0.000057525263,
      -0.017907893,
      -0.0130259115,
      0.029796172,
      0.010531032,
      -0.0194421,
      0.011278376,
      0.0048391335,
      -0.006753455,
      -0.00847072,
      -0.026438521,
      -0.03168876,
      0.009297977,
      0.009433955,
      0.0060469694,
      0.035992578,
      0.0065472885,
      0.017394977,
      0.021708027,
      0.000050602623,
      -0.0024557954,
      -0.0028174173,
      0.0069808685,
      0.012571839,
      0.00008640724,
      0.013332948,
      -0.011959753,
      -0.036532193,
      0.01516213,
      0.008943698,
      -0.017796034,
      -0.005959212,
      0.02716515,
      0.0320947,
      0.025984937,
      0.013250179,
      0.013403209,
      0.007076726,
      0.0033604957,
      -0.011402807,
      -0.0011340516,
      -0.032554485,
      0.008256259,
      0.015678385,
      0.0067755296,
      0.0032400077,
      -0.0036573678,
      0.005937444,
      0.01967366,
      -0.009715659,
      0.010910023,
      0.0076616397,
      0.009557055,
      0.015104007,
      0.031825148,
      0.00015781171,
      -0.00448945,
      -0.02049141,
      -0.006353774,
      0.01958208,
      -0.014293991,
      -0.0010227198,
      -0.012744411,
      0.027767058,
      -0.015588041,
      -0.011089934,
      0.012285695,
      -0.00304632,
      0.0022809776,
      -0.007935774,
      -0.0069862087,
      -0.012319078,
      -0.007847965,
      -0.03073882,
      -0.032340758,
      0.011691902,
      0.011393618,
      0.00074019446,
      0.022232773,
      0.0013883972,
      -0.005466567,
      -0.011810671,
      -0.00908334,
      0.03087578,
      -0.002530463,
      0.00434327,
      0.013165612,
      -0.023620851,
      0.00034583473,
      0.012208739,
      0.031821586,
      0.016631149,
      -0.018014288,
      -0.032768745,
      0.044205893,
      0.004035418,
      0.0045625563,
      -0.006961531,
      -0.015190936,
      0.025086034,
      0.008310671,
      0.0007823045,
      -0.0011549585,
      0.017595831,
      -0.012854586,
      -0.0019977766,
      -0.00776426,
      0.0004332128,
      -0.10720943,
      -0.016667858,
      -0.012049519,
      -0.0058085113,
      -0.011069973,
      -0.0013434507,
      -0.011037671,
      -0.0059019253,
      0.017254625,
      -0.0050790748,
      0.011489489,
      0.01804846,
      -0.023733627,
      -0.011989305,
      0.0065795835,
      -0.017885037,
      0.014290007,
      0.004811215,
      0.038445514,
      0.014473107,
      0.0019537858,
      -0.011171781,
      0.001891513,
      -0.017737512,
      -0.01696604,
      -0.009259595,
      -0.0043501453,
      -0.0040385714,
      -0.0034959093,
      0.008837202,
      -0.024368724,
      -0.0031011628,
      0.00076712744,
      0.015953923,
      -0.00046693918,
      -0.01631836,
      -0.018114284,
      0.00862795,
      0.022103865,
      0.004438792,
      -0.01981527,
      -0.0038943607,
      0.03895866,
      0.015452264,
      -0.0028062465,
      0.011990018,
      0.014988288,
      -0.021630907,
      -0.01102183,
      0.039972197,
      -0.041914452,
      -0.028417826,
      -0.017918888,
      -0.026345234,
      -0.021225948,
      0.008807875,
      0.010405894,
      0.009129661,
      0.012536281,
      -0.019749092,
      -0.011584923,
      0.00054541405,
      0.002894335,
      0.04832764,
      -0.00539833,
      0.011286825,
      0.024818433,
      0.008152532,
      0.0047298493,
      0.012113018,
      -0.012149758,
      0.012930129,
      -0.007000987,
      0.022153497,
      0.008346306,
      0.016331082,
      0.0013839025,
      -0.021384802,
      0.0014367386,
      -0.006240209,
      -0.03225269,
      -0.025103481,
      -0.03549259,
      -0.029130073,
      0.027759766,
      0.008349598,
      -0.0020246068,
      0.03019205,
      -0.0034297195,
      0.012363279,
      0.010787461,
      -0.000057586407,
      -0.007274546,
      0.012824559,
      -0.0022104385,
      -0.0050184745,
      -0.019970715,
      0.010134404,
      0.008566103,
      -0.014718287,
      -0.0076920027,
      0.008704193,
      0.0022741477,
      -0.0022009958,
      -0.02164246,
      -0.02414237,
      0.0018911138,
      0.022107096,
      0.006487073,
      -0.015045818,
      -0.0007257236,
      0.0075730947,
      -0.019751377,
      -0.14170781,
      -0.010483821,
      0.0005068794,
      0.0084495,
      0.012581516,
      0.01922794,
      -0.004154953,
      -0.007227342,
      -0.0019812637,
      -0.028204482,
      0.011111421,
      -0.0038431888,
      -0.013645475,
      0.009550657,
      0.013455377,
      0.12953791,
      0.00013893178,
      -0.016320411,
      -0.014083105,
      0.010962446,
      -0.009975248,
      0.0024005044,
      -0.028924704,
      -0.012593372,
      -0.0009091406,
      0.00054758444,
      -0.0158459,
      -0.016283032,
      -0.0036253224,
      -0.0008274357,
      -0.015871195,
      -0.014771821,
      0.014414212,
      0.025743222,
      0.017597344,
      -0.0068992986,
      -0.0127933435,
      0.018215826,
      0.0059826225,
      -0.008176886,
      0.004494535,
      -0.022348173,
      -0.009830548,
      0.011357757,
      0.010317885,
      0.0059148767,
      -0.022500928,
      -0.017303342,
      -0.001623823,
      0.0026689123,
      -0.017652161,
      -0.0513947,
      0.018596767,
      0.0031934779,
      -0.0006486941,
      0.015942723,
      0.01521122,
      0.026443446,
      -0.00027943426,
      0.010376423,
      0.0124631645,
      -0.0012578483,
      -0.024807993,
      -0.00057509926,
      0.013634597,
      -0.009821771,
      0.015705759,
      0.0073891967,
      0.023620162,
      0.0003884604,
      -0.0015434357,
      0.023757242,
      -0.0147328265,
      0.02176115,
      -0.018174374,
      0.009752247,
      -0.024614241,
      0.023999372,
      0.004364516,
      -0.008746306,
      0.0021682668,
      -0.012538994,
      -0.018321848,
      -0.0135165835,
      0.02809824,
      0.011590719,
      -0.019388517,
      -0.0021345336,
      -0.005072149,
      0.008634784,
      0.018661598,
      0.008309383,
      -0.013509707,
      0.02138136,
      -0.0062745814,
      0.019777574,
      0.015471321,
      -0.010998117,
      0.02100662,
      0.002055608,
      0.0025859636,
      0.006643823,
      -0.012733789,
      -0.010263062,
      0.019988958,
      0.011356996,
      0.0036712494,
      0.017019907,
      -0.01702514,
      -0.023535257
    ]
  },
  {
    "id": "genai_cohort_python_06_mini_project_with_exception_learning_vtt",
    "content": "All right, so before we wrap 2 up this section, I really want 3 to build a, full kind of app 4 where we see all the things 5 that we have learned so far. 6 Have some code. 7 The more you're going 8 to write the code, the more 9 it's better for you. 10 You are going to enjoy this. 11 And eventually things actually 12 click when you write more code, 13 not just when you Var the videos. 14 So let me take you onto the screen. 15 I have created a new file which is 16 07 complete order. 17 Now, it's actually hidden behind 18 me, so I can just move it up here. 19 This is the new file name, 20 by the way. 21 In this panel, there is nothing 22 much, it's just the file name. 23 So I'll walk you through, and once 24 you see that after that you don't 25 need to Var it again, feel free 26 to name your file whatever you like. 27 It's 07 complete order. 28 And that is all what we have. 29 I'll, take it back. 30 And that's why I keep myself here 31 in the bottom corner, because there 32 is no important information here. 33 All right, so what we're going to 34 do, we are going to build a simple 35 bill app where I just generate 36 your bill with all the precautionary 37 measure that I have. 38 First of all, I'll go ahead 39 and create a class which says 40 invalid chierror. 41 There we go. 42 I know that how this works. 43 We know that we can just go 44 ahead and pass on exception 45 as a base class to this one. 46 And then in the same line 47 also, I can write this pass. 48 This is one liner, but this 49 is a common sentinel. 50 You can write this 51 in the next line as well. 52 But if you have one liner, it's 53 allowed to write like that. 54 Once I have this, I want to simply 55 define a method which says bill. 56 And this time you give me 57 again the same stuff, 58 which is flavor, flavor. 59 And you pass me up cups, 60 how many cups you want. 61 And this time we'll go ahead 62 and precautionary do the things. 63 First of all, let's declare 64 a variable menu, and inside that 65 we'll have the key value pairs. 66 The first one being masala chai, 67 which will be of price 20 rupees. 68 It has dropped its price. 69 And then we have another key, 70 which is ginger. 71 Ginger. 72 There we go. 73 And the value of the ginger chai. 74 I'll keep it 40. 75 Now, next up is I want 76 to try and check all of the things 77 that are coming up. 78 First of all, I want to check whether 79 the flavor is in the menu or not. 80 I can do the same trick if I have 81 just one value Or I can actually 82 do this in the one line as well. 83 But this time I'll not do 84 that since you understand 85 the concept and the syntax. 86 I'll just check whether if 87 the flavor is not in menu. 88 In that case I would love 89 to raise an error and this time I 90 can raise my own custom error 91 which is invalid chai error. 92 Love that. 93 And I can say that 94 chai is not available. 95 All. 96 Right, Good enough. 97 Now I also want to check whether the 98 cups that you are providing me 99 because previously I know it was 100 222I I really want to check whether 101 you are actually providing me a 102 number of not. 103 I can go ahead and check. 104 If not, there is a nice 105 thing is instance. 106 So I can check for anything. 107 Whether you are an instance 108 of a class or something like that. 109 I can just go ahead and provide. 110 What do I want to check? 111 I want to check for cups. 112 What type of instance 113 you want to check? 114 And you can see we have integer here. 115 I can just go ahead and check 116 whether you are an integer. 117 I can check for float 118 double all these values. 119 Remember the data types we 120 were studying earlier? 121 Yes. 122 I can go ahead and check that 123 if it is not an instance of integer, 124 I want to raise the error again. 125 This time I will not probably raise 126 my own custom error because it's 127 a well known error of type error. 128 And I can just provide 129 the number of cups. 130 Must be an integer. 131 There we go. 132 All right, that part is done. 133 Now we have checked both 134 the flavor as well as cups. 135 This time we have done 136 a better job than the previous 137 one we did accidentally. 138 And now I can go ahead 139 and calculate the total, which is 140 pretty easy to calculate. 141 You can just go ahead and say 142 from the menu I want to get a 143 key, whatever the key here you 144 have passed me, which is in 145 this case I can just have a 146 flavor just like that again, 147 same style. 148 And I can multiply it by cups 149 confidently because I know this time 150 that you will be an integer. 151 And I can then print out 152 a formatted string just like this. 153 And I can say your bill for 154 whatever the cups you have ordered. 155 Your bill for X number of cups. 156 I can write that cups 157 again, cups and off. 158 Let's use flavor as well. 159 And we can again use chai. 160 Notice we, are just formatting 161 the values nicely. 162 And I can say rupees 163 and then I can say total. 164 There we go. 165 Nicely. 166 Formatted message 167 all right, so this is all good. 168 Now if anything else goes wrong, 169 we can still handle that. 170 We can go ahead and say 171 accept Just like this. 172 And I can say let's print this 173 error, but where is the error? 174 So in the except you can actually 175 catch all these exception with this 176 exception class that we have and, 177 and let's cast this as E so 178 that it's easier to work on with. 179 And I will say, hey, let's go 180 ahead and print all the error 181 and we can actually handle them just 182 by E, otherwise I have to write 183 the whole exceptions and stuff. 184 But this is a common practice 185 and common pattern. 186 Now once I have done this, of course 187 most common thing, which is finally, 188 you don't have to always write it, 189 but in some cases it makes sense. 190 I will just go ahead and print 191 a simple message that will say 192 thank you for visiting Chai code 193 with an exclamation. 194 We are happy. 195 I'm excited. 196 There we go. 197 Now what could be the use case of it? 198 Couple of use case, 199 we'll try all of this. 200 Let's go ahead and try the bill. 201 This time we'll ask for mint. 202 So I know that mint doesn't exist. 203 We'll go ahead and say 204 two cups of it. 205 I know that masala exists, so I'll 206 just go ahead and say masala. 207 But we'll do the same mistake of 208 instead of two we'll go for three. 209 We can go for two as well. 210 And let's order one thing 211 which actually makes 212 sense, which is ginger. 213 And this time we'll just 214 go ahead and go like this 215 and we'll say three. 216 There we go. 217 So we all mixed and match. 218 This one doesn't exist in the key, 219 this one is having a wrong syntax 220 and this one is actually good. 221 So this time we are actually 222 writing code much 223 better, much more carefully. 224 Just like I would have written 225 in the production. 226 Let's go ahead and run this. 227 So Python 3 this time we'll go 228 ahead and say 07 and run this. 229 There we go. 230 Everything handled nicely. 231 First of all it says error that 232 Chai is not available and thank you 233 for visiting because finally always 234 executes good enough. 235 The second time it says number 236 of cup must be an integer. 237 Thank you for visiting Chai and code. 238 That's good enough. 239 And third time it says your bill 240 for three cups of ginger chai is 241 rupees 120, which is good enough. 242 And we are saying thank you for 243 visiting, so this is good enough. 244 Whatever we have learned so far, we 245 were able to execute all of this. 246 The code files is also 247 available within the lecture. 248 And the most important 249 part is do rate us. 250 We really need that. 251 Now let's go ahead and catch 252 up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "06 mini project with exception learning.vtt",
      "originalPath": "genai-cohort/python/09 Chapter Subtitles/06 mini project with exception learning.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.013734345,
      -0.006734702,
      0.033027288,
      -0.07245936,
      -0.00006931569,
      -0.016729936,
      -0.0006622524,
      0.019971749,
      -0.006099364,
      -0.0033808206,
      -0.008471788,
      -0.012578426,
      0.0070897783,
      0.017736765,
      0.13070452,
      0.010924989,
      -0.0021113649,
      -0.0048377225,
      -0.0019559858,
      -0.005867097,
      -0.00005631676,
      0.02098872,
      0.024929795,
      -0.020788336,
      0.01322248,
      -0.0036161034,
      0.0027598324,
      0.029129121,
      0.036075793,
      -0.007281857,
      -0.004634329,
      -0.005175091,
      -0.004377989,
      0.013269486,
      0.012296718,
      -0.00091051264,
      0.014653989,
      -0.0012427797,
      -0.021981526,
      0.016387664,
      -0.017740922,
      0.018413426,
      -0.008696514,
      -0.015593293,
      0.02067651,
      -0.02238524,
      -0.009012152,
      -0.017737467,
      0.012638956,
      0.026762618,
      0.015089461,
      -0.009310272,
      -0.010942197,
      -0.18187389,
      0.022588858,
      0.0012639388,
      -0.010800379,
      -0.009096187,
      0.013859511,
      -0.0023597726,
      -0.011998869,
      0.022960834,
      -0.023184074,
      -0.017444838,
      -0.01044758,
      -0.019505441,
      0.018749367,
      -0.0010234843,
      0.005960881,
      -0.025201963,
      0.027542157,
      0.022358606,
      -0.02865946,
      -0.013320262,
      -0.0022298405,
      -0.024926338,
      0.018272825,
      -0.025011642,
      0.004914172,
      0.008019358,
      0.007160861,
      -0.020143263,
      0.0081275515,
      0.0017182933,
      -0.0033246751,
      0.0011512691,
      -0.013166573,
      -0.0015994074,
      0.003847541,
      0.0042596054,
      -0.009837973,
      0.002377523,
      0.0015415228,
      0.008399345,
      -0.03333391,
      -0.0051925387,
      -0.0005664,
      0.007642715,
      -0.029777108,
      -0.027357131,
      -0.00054909213,
      -0.010921635,
      -0.009243742,
      -0.0060940026,
      0.00079885486,
      -0.005095461,
      -0.0069918693,
      -0.007547165,
      -0.014711985,
      0.008287614,
      0.010913849,
      -0.012171819,
      -0.001727224,
      0.00035215516,
      -0.002690729,
      -0.17443617,
      0.0196896,
      0.008796002,
      -0.016747424,
      0.0043316805,
      0.0010404764,
      0.017035026,
      0.005646441,
      0.013157921,
      -0.013137772,
      0.009344635,
      0.013347511,
      0.021730639,
      -0.0025986098,
      0.017810011,
      -0.01741222,
      -0.02266134,
      0.008359611,
      0.0045412355,
      -0.0003930247,
      0.00675768,
      -0.002242685,
      0.0009764236,
      -0.005102598,
      -0.024771845,
      -0.023498476,
      0.025899362,
      -0.02121006,
      0.032187104,
      0.0094598085,
      -0.016730618,
      -0.01524777,
      0.0081215855,
      -0.030634444,
      -0.016501738,
      0.009211216,
      -0.026802128,
      0.024233675,
      0.0131118335,
      0.03677171,
      -0.035569645,
      -0.005989222,
      0.019054098,
      0.0030045996,
      0.013072313,
      0.005198645,
      -0.00081073033,
      -0.01454871,
      0.015200333,
      -0.005480746,
      -0.00034881133,
      -0.017276067,
      -0.015053275,
      0.010051919,
      -0.0023936548,
      0.0013023262,
      -0.00660665,
      0.00966128,
      0.01676106,
      -0.015826799,
      -0.0015222182,
      0.014662029,
      -0.018054029,
      0.013274076,
      -0.01428021,
      -0.008160284,
      0.0029861545,
      0.008652117,
      0.0024084866,
      0.008699835,
      0.01958361,
      -0.01342648,
      0.0019442562,
      0.015680062,
      0.0010745223,
      -0.017776456,
      -0.013146234,
      0.013617944,
      0.0066899685,
      0.020891486,
      -0.040599573,
      0.0012240001,
      0.0054555503,
      0.012162124,
      0.017414132,
      0.04156841,
      -0.018909186,
      -0.018505162,
      0.0025473088,
      0.0049499776,
      -0.012957332,
      0.015571944,
      -0.011296659,
      0.013601109,
      0.016806645,
      -0.030032465,
      -0.0015924348,
      0.031901263,
      0.023517057,
      0.014617342,
      -0.019179827,
      0.0031425415,
      -0.005277073,
      -0.00228824,
      0.0016030968,
      0.016887816,
      0.00049891573,
      0.005411476,
      0.034483206,
      -0.009514735,
      -0.006321715,
      0.011660715,
      -0.0078799995,
      0.013015137,
      0.00089787884,
      0.04041245,
      0.0033148236,
      -0.011951078,
      0.0042346735,
      0.010436263,
      0.003479894,
      -0.0077941655,
      0.03467466,
      0.0043659145,
      0.022704465,
      0.0019584713,
      0.0067001106,
      -0.003433912,
      0.0013350182,
      0.012144913,
      0.0017215428,
      -0.0071384334,
      -0.0076487744,
      -0.007136315,
      -0.019651515,
      -0.02512628,
      -0.0015950716,
      0.007335689,
      -0.020483727,
      -0.0016427288,
      -0.041048124,
      -0.0046602334,
      -0.015905226,
      -0.019394906,
      -0.004271616,
      -0.0057188654,
      -0.015997743,
      -0.012385119,
      -0.013920975,
      0.016521126,
      -0.021153852,
      -0.0023379396,
      0.023899017,
      -0.013540178,
      0.003718999,
      0.0033468863,
      -0.0041828975,
      -0.00603661,
      0.003954397,
      -0.005804947,
      0.017662054,
      -0.10613045,
      0.011754016,
      -0.013000782,
      -0.026438702,
      0.019414602,
      0.020451501,
      -0.026014242,
      0.009331953,
      0.005362392,
      0.011102347,
      0.0012781989,
      -0.022638578,
      0.023524068,
      -0.03393313,
      -0.0134091675,
      -0.007452515,
      -0.009605199,
      -0.017502531,
      0.024323262,
      -0.020107387,
      -0.004781888,
      -0.017512493,
      -0.012235214,
      -0.0014307703,
      0.002160281,
      0.009162454,
      -0.009331423,
      0.022913346,
      -0.0027408288,
      -0.018231897,
      0.0034070485,
      0.020590274,
      -0.0010685625,
      -0.012490583,
      -0.0048764,
      0.012009812,
      0.015427929,
      -0.02239568,
      0.020086445,
      0.0031817635,
      0.022815453,
      -0.017089386,
      0.01935425,
      0.04061594,
      -0.005774808,
      0.014181773,
      0.005071555,
      -0.0016129831,
      -0.0038360516,
      -0.018163342,
      -0.019057153,
      0.008609614,
      0.0073015457,
      -0.0011288356,
      -0.011112006,
      0.021732375,
      0.01140443,
      -0.0029332188,
      -0.0075979293,
      0.0031949198,
      -0.000103367565,
      -0.0013409735,
      0.005826588,
      -0.010355841,
      -0.006204661,
      0.005475253,
      0.011496807,
      -0.0127619235,
      -0.030483324,
      -0.004748313,
      0.012855654,
      0.001225721,
      -0.010532027,
      -0.027972637,
      -0.006063882,
      0.00859475,
      0.012179891,
      -0.025221737,
      -0.012195789,
      0.021755304,
      0.021696387,
      -0.005602191,
      0.0010333923,
      0.017210502,
      0.002204817,
      -0.005124907,
      0.011590337,
      0.001688961,
      0.023298379,
      -0.021552349,
      0.023236256,
      0.0012750782,
      0.00069356087,
      0.01259595,
      -0.020905897,
      0.0052033872,
      -0.016754251,
      -0.0018676989,
      -0.017314387,
      0.03369816,
      -0.015535176,
      -0.0012064291,
      -0.0014824098,
      -0.0019798107,
      -0.00682501,
      -0.013567763,
      -0.032331485,
      -0.03486751,
      -0.009560806,
      -0.01977081,
      -0.004168561,
      -0.008899143,
      -0.015777817,
      0.0026355602,
      -0.010838787,
      0.009961511,
      0.0100959735,
      0.013910859,
      0.0148493685,
      -0.012115738,
      -0.004792841,
      -0.014494882,
      0.0009591583,
      0.0105865,
      -0.009593157,
      0.019342167,
      -0.013059379,
      0.008921031,
      -0.020283002,
      -0.030386657,
      -0.033171702,
      0.013291912,
      -0.02223186,
      -0.020312538,
      -0.016176242,
      -0.0023259323,
      0.015630212,
      0.02898055,
      0.026794918,
      0.010268208,
      -0.010031375,
      0.009333164,
      -0.009737052,
      0.009475321,
      -0.00083340635,
      0.02211383,
      -0.0023927006,
      0.011992887,
      -0.00025475607,
      -0.022389876,
      -0.01550015,
      -0.0152053535,
      -0.009938861,
      -0.005934704,
      -0.0069020567,
      0.0016998759,
      0.019303238,
      -0.017687982,
      -0.01658724,
      -0.030261023,
      -0.011132039,
      -0.0014764663,
      -0.018279985,
      -0.012518027,
      0.005133094,
      0.012667368,
      -0.014789307,
      -0.0026051546,
      -0.003857134,
      -0.0159229,
      -0.0002819415,
      -0.021911606,
      -0.015352831,
      -0.015368391,
      0.009009116,
      0.005520289,
      0.016291412,
      -0.020093376,
      0.03720738,
      0.01419709,
      0.010306151,
      -0.010419835,
      -0.0014499128,
      0.003323711,
      0.024381667,
      0.0056914734,
      0.0017481669,
      0.011915512,
      -0.044271454,
      0.006598477,
      -0.0106153805,
      -0.0065192115,
      0.013623111,
      0.024521703,
      -0.016452515,
      0.019957315,
      0.013395427,
      -0.000741938,
      0.0035961622,
      0.017933507,
      0.00026071252,
      -0.01253017,
      -0.022880103,
      -0.0034987777,
      0.024649333,
      -0.010117433,
      0.0057421513,
      -0.00871064,
      0.0055917534,
      0.009155122,
      -0.0065533356,
      0.0042191604,
      -0.0035817984,
      -0.005073821,
      0.025377309,
      0.033035196,
      -0.023820363,
      0.005135443,
      -0.036420293,
      -0.00020415807,
      0.011897361,
      -0.0060189925,
      0.009288448,
      -0.005273093,
      0.023762945,
      -0.00014849666,
      -0.0059666443,
      0.016547048,
      0.00042730753,
      0.005696028,
      -0.016495185,
      -0.0012400834,
      -0.012594432,
      0.01992161,
      -0.046133444,
      -0.016151464,
      0.017136246,
      0.007426677,
      -0.0011877589,
      0.017651264,
      0.0016830211,
      -0.0054805335,
      -0.007076912,
      -0.010425216,
      0.020684984,
      -0.014368253,
      0.008786244,
      0.008431244,
      -0.0063724252,
      0.007048709,
      0.010722084,
      0.022120375,
      0.009645814,
      -0.008398381,
      -0.020463083,
      0.0333776,
      0.011847289,
      -0.0095761325,
      0.008817744,
      -0.00063372345,
      0.010635887,
      0.016845666,
      0.008936517,
      -0.008175469,
      0.0063152728,
      -0.01183638,
      -0.007842831,
      -0.0013564201,
      -0.0063448,
      -0.13528179,
      0.0044884863,
      -0.008161051,
      -0.0061417595,
      -0.008378667,
      -0.013982625,
      -0.011168904,
      -0.009909445,
      0.00139478,
      -0.011754091,
      0.023816176,
      0.0057787052,
      -0.0022092538,
      -0.016989972,
      0.0075338217,
      -0.0073337867,
      0.020149544,
      0.0103325965,
      0.035070185,
      0.002716011,
      -0.015085762,
      -0.0010226029,
      0.0033238553,
      -0.013268721,
      -0.02279696,
      -0.018500822,
      0.0056670457,
      0.0043367655,
      -0.002560973,
      -0.0008147199,
      -0.01836826,
      -0.0060251784,
      -0.00974708,
      0.007970305,
      0.0065284967,
      -0.027629003,
      -0.008811026,
      0.027216898,
      0.026042573,
      0.01312385,
      -0.007087194,
      -0.005932657,
      0.03969987,
      0.015453916,
      0.0039253654,
      0.026030164,
      0.022738252,
      -0.01722271,
      -0.008930032,
      0.028792832,
      -0.03221368,
      -0.028811507,
      -0.004995992,
      -0.0062898896,
      -0.019312613,
      0.0052004433,
      -0.006509009,
      -0.001360341,
      0.0024871388,
      -0.025906201,
      -0.02182886,
      0.008864182,
      0.014241341,
      0.044762325,
      -0.013236961,
      0.012988044,
      0.02622145,
      0.02394605,
      0.0036654086,
      0.009946077,
      -0.0015437854,
      -0.014192839,
      -0.006260806,
      0.019103838,
      0.01739508,
      -0.0049367454,
      -0.0006350196,
      -0.01374632,
      -0.0029739023,
      0.004817393,
      -0.049087554,
      -0.007812324,
      -0.052937698,
      -0.030934723,
      0.0043907934,
      0.0065333596,
      0.006138489,
      0.026889283,
      0.00039892606,
      -0.0016884827,
      0.011328042,
      0.0071278005,
      -0.00073002727,
      -0.015427938,
      0.016348146,
      -0.0091887005,
      -0.018380078,
      0.01135677,
      -0.0038588701,
      -0.012371008,
      -0.027904116,
      -0.005703712,
      0.0035804282,
      -0.0028754119,
      -0.0058707916,
      -0.01526288,
      -0.001375111,
      0.011484904,
      -0.016048463,
      -0.010805325,
      0.008292114,
      -0.0017911787,
      0.004081825,
      -0.16008307,
      -0.010947302,
      -0.00699545,
      -0.0018097308,
      0.002748548,
      0.008807251,
      -0.003368318,
      0.0052817715,
      0.006009053,
      -0.002724636,
      0.007860414,
      -0.013597209,
      -0.019404303,
      0.0024091057,
      0.026178516,
      0.13463295,
      -0.0146905305,
      -0.008812323,
      -0.021706602,
      0.002776071,
      -0.009215201,
      -0.012230718,
      -0.017744046,
      -0.00924015,
      -0.005948969,
      -0.013222786,
      -0.0015147241,
      -0.0078198,
      -0.011317935,
      -0.0013366292,
      -0.013105472,
      0.0067395335,
      0.012140351,
      0.02619239,
      0.0037273404,
      0.0061223917,
      -0.013078127,
      0.021049269,
      0.0019430214,
      -0.01093445,
      0.0204107,
      0.0022835636,
      -0.0076141013,
      0.0047275815,
      0.013709202,
      0.0115340045,
      -0.011009054,
      -0.023656506,
      -0.01302594,
      -0.012661289,
      -0.0075581847,
      -0.05357235,
      0.00019132197,
      -0.008290974,
      -0.011074595,
      0.0066548972,
      0.0070143496,
      0.0089283055,
      0.0021233598,
      0.018453069,
      -0.002070909,
      -0.006102079,
      -0.0039697615,
      -0.006418346,
      0.004755448,
      -0.0044410676,
      0.011060488,
      0.020278623,
      0.02509726,
      -0.010510753,
      0.0036762233,
      0.01281675,
      -0.0018369106,
      0.035712406,
      0.003017026,
      0.0022954885,
      -0.025640005,
      0.023205535,
      0.0028006244,
      -0.003216098,
      -0.007821429,
      0.014012231,
      0.0019797795,
      -0.017613726,
      0.011171484,
      0.018372415,
      -0.0055225315,
      -0.004212718,
      -0.01907067,
      0.011613146,
      0.008192705,
      0.0016062928,
      -0.027060164,
      0.016429326,
      -0.0029144294,
      0.018009624,
      0.0026146863,
      -0.009885787,
      0.04240438,
      -0.006120499,
      -0.0038832806,
      0.018916752,
      0.008332911,
      -0.02998608,
      0.008269746,
      0.0028186585,
      -0.02149442,
      0.02010595,
      -0.018130347,
      -0.0050505213
    ]
  },
  {
    "id": "genai_cohort_python_07_file_handling_with_try_except_and_with_vtt",
    "content": "You are going to handle a lot 2 of files with Python. 3 This is a common thing that we do. 4 PDFs, CSVs, JSons, Excel file 5 and so many other formats that 6 I even don't know about them. 7 There are so many things 8 and Python handles everything, 9 but not natively. 10 There are different libraries that 11 actually helps you to understand 12 the whole process of them 13 and don't even worry about them. 14 For example, Pandas is one such 15 library which handles CSVs 16 and Excels and PDFs and so many 17 other formats super easily. 18 You don't even sweat at a little bit. 19 You just say, pandas, 20 opencsvs and open Python and just 21 provide the path and it 22 does everything for you. 23 And that's majorly is the job. 24 But you also should know how 25 to natively open all the files. 26 And that's exactly what 27 we're going to do. 28 In this video. 29 We'll see what are the 30 precautionary things you have 31 to take here while opening up 32 the file, what can go wrong and 33 how you can actually fix them, 34 and different ways of opening 35 up the file. 36 That's exactly what we'll be doing. 37 So let me take you onto the screen. 38 This is also a pretty fun lecture 39 to be honest, and you're going 40 to enjoy this one as well. 41 Let's close all of this and we'll 42 just open up a new file. 43 So since there we go, hopefully 44 good enough, I'll create a new file 45 and call this one as what? 46 0808. 47 This one is file handling, of course. 48 All right, now let me walk you 49 through what happens in this one. 50 And notice here we don't have 51 any other file or text file 52 into this one, but we want 53 to actually open up something. 54 Let's see what happens in that case. 55 Let's just say I want 56 to open up a file. 57 To open up any file, you 58 simply have an open method. 59 Yes, it's available directly 60 in the Python. 61 It's a file descriptor, which 62 means you can just open up a file. 63 You have to provide the file name 64 as well as in the mode 65 in which you want to open the file. 66 You. 67 And if you read more 68 of the documentation, they tell you 69 more about the modes of it. 70 Like you can open this up. 71 Notice, here they are having this W 72 for writing the mode, X. 73 So many modes are there, 74 hardly anybody uses them. 75 They are just basics. 76 Now that with the topic we have. 77 All right, so which 78 file you want to open? 79 I want to open a file order 80 Txt, but that file doesn't 81 exist in this folder. 82 You're absolutely correct. 83 Let's see if I want to open 84 this up into the right. 85 And as you can see, so many modes. 86 Write, write plus write plus tea. 87 Nobody remembers all of them. 88 I just know W means write. 89 And then I want to store 90 the reference of it into a variable. 91 Let's call this one as a file. 92 And I want to write 93 something into this. 94 So for this I can just say 95 file dot and notice here, 96 buffer close, close, detach. 97 So many things. 98 I just want to write 99 something into it. 100 There we go. 101 And I go ahead and say masala 102 chai and that will be two cups. 103 Two cups. 104 There we go. 105 Now what happened at this point, 106 let's just say when you come to 107 line number three, there is a code 108 which somehow happened and this 109 has crashed your program. 110 This is really bad. 111 Why you might be asking 112 the reason why this is bad is 113 this is your file. 114 So if I go ahead and. 115 Let's just say we have 116 a simple file, this is your file, 117 very teeny tiny one. 118 But this is your file 119 and this is your computer memory. 120 So if I go ahead and write 121 this, this is memory. 122 And any single time you try 123 to open up a file, it actually 124 takes this file from disk and loads 125 this file in the memory. 126 This is what we have done so far. 127 We have loaded this file 128 in the memory. 129 We are trying to write 130 that in the memory. 131 But just before we were trying 132 to just remove it from the memory 133 and put it into the disk again, 134 our program crashed. 135 Lot of things can happen. 136 This file entirely might corrupt. 137 This might corrupt some portion 138 of our memory so that other 139 program might get affected. 140 Hey, we are in a sensitive zone. 141 We are in the memory. 142 So anything happens at this position 143 is really, really bad. 144 You shouldn't do it like this. 145 So what could be the other thing? 146 The taking of reference is 147 of no problem. 148 Once you are writing the file or 149 doing something sensitive 150 operation that can be problem or 151 even you can open the file hole 152 in a closed sensitive manner. 153 I can just go ahead and take 154 this and I can say, hey, I want 155 to just go ahead and use try. 156 So. 157 So let's try to write into the file 158 and once we are all done, we can 159 go ahead and use finally in this. 160 And with the finally I can go ahead 161 and take this file and close this. 162 No matter what happens, 163 finally we just close the file. 164 Can we move this reference 165 also inside the try block? 166 Probably yes, we can actually 167 go ahead and do this. 168 Let's go ahead and try this. 169 What happens in this case 170 if I go ahead and say Python 3 this 171 will be a 08 and notice it. 172 So if you will notice closely, 173 which is little difficult. 174 So this actually creates an order. 175 Txt file? 176 Yeah, it didn't exist before. 177 So I'll just go ahead 178 and remove this again. 179 We can run the program 180 again, no problem. 181 I'll just go ahead and delete 182 this again just to show you 183 this file doesn't exist. 184 But when I run this now, there we go. 185 Order. 186 Txt magically appear. 187 We have created a file and we 188 have handled it gracefully. 189 But there is another way, 190 the modern way of handling this. 191 I'll keep all of this file with 192 you, all of the code with you, so 193 that you can use it later on. 194 And there's another way if you 195 don't want to use Try catch, 196 especially just with the file. 197 Python has a new operator known as 198 with this automatically 199 wraps everything in the Try 200 Catch does everything. 201 I'll show you behind 202 the scene as well. 203 Now you can just go 204 ahead and say open. 205 What do you want to open? 206 I want to open. 207 Open. 208 I want to open a file name as order. 209 Txt or orders. 210 Txt, whatever you want to open. 211 I want to open that up 212 into the right mode. 213 There we go. 214 And I will just say as file. 215 So instead of taking the variable 216 just like this, the syntax 217 is much simpler, easier. 218 Then I can just go ahead 219 and say I want to write 220 some order into this file. 221 I'll open this up and this 222 time I will say ginger T. 223 Ginger T. 224 And the ginger T will be four cups. 225 Four cups is good enough. 226 And that's it. 227 That is the whole code. 228 You don't close it, you 229 does nothing at all. 230 It happens everything safely 231 and it works magically. 232 It does everything behind 233 the scene for you. 234 So let's go ahead and delete 235 the order Txt again 236 and try it again one more time. 237 This is the modern 238 way, my favorite way. 239 And everybody uses this way. 240 So notice here everything 241 happens nicely easily. 242 Ginger teacup. 243 Now, what happens behind the scene is 244 something that you should also know 245 as soon as you take this file. 246 This file is an interesting one. 247 So if I go ahead and take this file, 248 this file variable is interesting. 249 As soon as you take a reference 250 of the context of the file, 251 it actually invokes a dunder. 252 There is another one dunder, 253 it says underscore, underscore, 254 enter underscore, 255 underscore and it executes. 256 This is one dunder which as soon as 257 you open up the file, this starts. 258 And as soon as you close 259 this file, this goes ahead 260 and runs another dunder. 261 If I can just unselect that. 262 And that says exit. 263 Yeah. 264 So like everything that you are 265 doing, appending the file, writing 266 into this, loading the memory. 267 This is one which is responsible 268 for loading this up in the memory. 269 This is the one which is responsible 270 for moving it out. 271 When you actually go ahead 272 and do this safely, like file 273 close, this is the dunder 274 which gets called FileExit. 275 Nobody uses that, but it 276 automatically closes the file. 277 While in the other hand, if you 278 read the documentation about the. 279 With this actually calls all these 280 dunders automatically for you. 281 So you don't have to worry about 282 closing the file, doing anything. 283 It just happens out 284 of the box and that is it. 285 You can open up literally any 286 file, but the format of supporting 287 the text is the easiest one. 288 But when you want to open the binary 289 files, you shouldn't be opening 290 up with the raw Python. 291 There are libraries like Pillow 292 and others which are designed for 293 specifically this purpose. 294 If you want to open CSV, we 295 have Pandas and other thousands 296 of libraries which can 297 actually do the job better. 298 So my recommendation is 299 beyond this, having this is 300 just a wastage of time. 301 You should be exploring 302 the libraries. 303 You know the syntax, you know 304 the behind the scene of what dunders 305 are actually responsible, what 306 can be the gotchas of doing this. 307 But apart from this, that is it. 308 That's majorly it. 309 Now surely some people discuss more 310 about the context and local context. 311 I don't think that's 312 necessary as of now. 313 Surely once you will need them, 314 you'll get to know more about them. 315 But I usually don't go much 316 beyond this, otherwise students 317 get too confused in that 318 this is it very simple lecture. 319 You, you understand the whole concept 320 behind the scene and that is it. 321 That is all you need. 322 Don't worry too much about that. 323 All right, that is it for this video. 324 Let's go ahead and catch 325 up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "07 file handling with try except and with.vtt",
      "originalPath": "genai-cohort/python/09 Chapter Subtitles/07 file handling with try except and with.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.013403304,
      -0.0036182508,
      0.04403877,
      -0.05130574,
      -0.0006556719,
      -0.00567663,
      -0.0022179883,
      0.0182903,
      0.007293362,
      0.00016404703,
      -0.011854998,
      -0.023343002,
      -0.002323657,
      0.016574716,
      0.13615943,
      0.011741894,
      -0.0076133735,
      0.004138823,
      -0.00025882985,
      -0.016979268,
      -0.008463741,
      0.008781976,
      -0.012824434,
      -0.02353897,
      0.0170059,
      -0.0014230773,
      0.010781469,
      0.0025921902,
      0.026571997,
      -0.023938404,
      -0.016745767,
      -0.004885649,
      0.01769468,
      0.013501546,
      -0.0058429283,
      0.020820517,
      0.012138716,
      0.00086750777,
      -0.014183936,
      0.010024193,
      -0.026538292,
      0.0012502075,
      0.01369876,
      -0.019004405,
      0.015832648,
      -0.013511551,
      -0.0046021594,
      -0.016018234,
      -0.0018543017,
      0.023741007,
      0.013359167,
      -0.0072268643,
      -0.016792225,
      -0.192034,
      0.009185466,
      -0.0017414289,
      0.007891493,
      -0.006117913,
      0.023716656,
      0.009605484,
      -0.025912615,
      0.030806325,
      -0.0176183,
      -0.017647965,
      -0.021505924,
      -0.029965963,
      0.011820293,
      -0.018978594,
      -0.012086868,
      -0.012578079,
      0.029715193,
      0.019699179,
      -0.026985062,
      -0.012388262,
      -0.022129778,
      -0.03483709,
      0.028392052,
      -0.0064656534,
      0.0033602393,
      0.012112835,
      -0.0056391107,
      -0.002630137,
      -0.0022481284,
      -0.0005134147,
      0.018930634,
      0.007966019,
      -0.015767315,
      -0.017085986,
      -0.0017966022,
      -0.009466667,
      -0.002313207,
      0.017484015,
      -0.0048978208,
      0.015601122,
      -0.011908054,
      -0.016286029,
      -0.00043681485,
      -0.004828234,
      -0.011117547,
      -0.002335793,
      0.009616916,
      -0.02258748,
      -0.030941742,
      -0.0036147307,
      -0.024466729,
      0.0052935737,
      -0.011976394,
      0.011451523,
      0.0022295704,
      0.0005789371,
      -0.018030861,
      -0.0038882364,
      -0.011433148,
      0.023864985,
      0.023734044,
      -0.16246903,
      0.014616146,
      -0.009229217,
      -0.01199038,
      0.00423981,
      -0.024614213,
      -0.0056569497,
      0.023887316,
      0.0062283576,
      0.0028051208,
      0.016657045,
      0.0025961841,
      0.026489075,
      -0.002857165,
      -0.019391276,
      -0.038666412,
      -0.013090419,
      0.011894183,
      0.009920656,
      0.01083563,
      0.0011035319,
      -0.00065949996,
      -0.011091102,
      -0.013665158,
      -0.026709879,
      0.002735784,
      0.026733704,
      -0.011422395,
      0.02803952,
      0.008038055,
      -0.00072373333,
      -0.00033427132,
      0.0064228247,
      -0.012191543,
      -0.04091866,
      0.005470824,
      -0.017347189,
      0.0077803987,
      0.012201148,
      0.015262947,
      -0.027801855,
      0.0059543047,
      0.0156057505,
      0.00793927,
      -0.015529441,
      0.007079957,
      0.0066717076,
      -0.000047190704,
      0.034612346,
      0.0028174894,
      -0.0030171587,
      -0.015844738,
      0.023740847,
      0.0043910933,
      0.023138348,
      -0.019680588,
      -0.021266622,
      0.019002937,
      -0.0010530495,
      -0.030602176,
      0.0010270654,
      0.0020506887,
      -0.01299024,
      0.013824282,
      -0.01319426,
      0.005610996,
      0.014218553,
      0.0056156246,
      0.0032758487,
      -0.016028158,
      0.01149242,
      -0.0122833885,
      0.007714723,
      0.009457913,
      -0.0013393651,
      0.008957146,
      -0.0013959651,
      0.022035368,
      0.0071885204,
      0.004122654,
      -0.027838664,
      -0.0070318,
      -0.0075861183,
      0.01089639,
      0.015431142,
      0.04631727,
      -0.002416913,
      0.0005077371,
      -0.026088988,
      0.039059736,
      -0.022586927,
      0.010529089,
      -0.021139046,
      -0.0009474625,
      -0.00821469,
      -0.013662742,
      0.0030182826,
      0.0022395598,
      0.00249717,
      0.024908604,
      -0.012168689,
      0.016717264,
      -0.011286291,
      0.0006496571,
      -0.009064639,
      0.0039678616,
      0.00578602,
      -0.0057922853,
      0.005511407,
      -0.011907247,
      -0.014576155,
      -0.0018271778,
      0.015381329,
      -0.001551118,
      0.0081915,
      0.012981821,
      0.0009843978,
      -0.024787318,
      0.00022188899,
      -0.017882533,
      0.0043704235,
      -0.012922314,
      0.019932048,
      0.006415085,
      0.022470742,
      -0.003227106,
      -0.012261471,
      -0.032792855,
      0.02499289,
      0.01716655,
      -0.021035979,
      -0.0019298292,
      -0.008244892,
      -0.018618144,
      -0.03717221,
      -0.0067082644,
      -0.009276585,
      0.0049618413,
      -0.026839634,
      0.020690653,
      -0.023603005,
      -0.018492343,
      -0.015326471,
      -0.021241495,
      -0.0041692522,
      0.0030541813,
      -0.013770055,
      -0.016918337,
      -0.0025276963,
      0.026101604,
      0.011694611,
      0.00010362898,
      0.021512942,
      0.001220777,
      0.036725722,
      0.022646656,
      0.0068952763,
      0.0010265771,
      -0.0028783123,
      -0.030581571,
      -0.0003675364,
      -0.10317724,
      0.002506299,
      0.002365967,
      -0.015191136,
      0.009082248,
      0.0324508,
      -0.05935353,
      0.01677937,
      0.015091683,
      0.01065907,
      0.007328621,
      -0.0032923343,
      0.041953992,
      -0.0031696856,
      0.0033885133,
      -0.005976457,
      0.004412759,
      -0.012019581,
      0.018694006,
      -0.014612849,
      -0.017483905,
      -0.037278127,
      -0.014591118,
      -0.020471508,
      0.019928895,
      -0.009591707,
      -0.0002850352,
      0.021665111,
      0.037319385,
      0.0036523428,
      -0.015625158,
      0.033508435,
      -0.0074754725,
      0.0015945546,
      0.009400296,
      0.01826431,
      0.01411202,
      -0.0054736533,
      0.0077686454,
      -0.0157104,
      0.0055505834,
      -0.0074600144,
      0.0056669633,
      0.030648056,
      -0.0146157965,
      0.0176947,
      -0.009101288,
      -0.010781586,
      -0.007721654,
      -0.011212393,
      -0.016725712,
      -0.0006065399,
      0.03911632,
      0.011608839,
      0.0020541458,
      0.025654294,
      0.0014381927,
      -0.017873611,
      -0.004537859,
      -0.0048339185,
      -0.019619858,
      -0.001646207,
      0.02330924,
      -0.010138296,
      -0.0034718877,
      0.004519467,
      0.009578907,
      0.00005739509,
      -0.021948535,
      0.023760106,
      0.0017153597,
      0.012546288,
      -0.0058602486,
      -0.025964744,
      0.0071356236,
      0.0044553312,
      0.0132278865,
      -0.015557243,
      -0.015829181,
      0.044090685,
      -0.0015293489,
      -0.009312254,
      -0.0014186951,
      0.009182282,
      0.006492858,
      -0.0056636026,
      -0.009582998,
      -0.0014159043,
      0.017822137,
      -0.021592004,
      -0.0087726135,
      0.010379911,
      -0.030504787,
      0.010272481,
      -0.012103832,
      0.00061676296,
      -0.0076499516,
      -0.015842352,
      -0.00967186,
      0.023224179,
      -0.0036543163,
      0.022788193,
      -0.014622881,
      0.001501596,
      0.0019629132,
      -0.007363346,
      -0.008226581,
      -0.026416361,
      0.006785621,
      -0.016776603,
      0.018496096,
      -0.01223438,
      -0.022671333,
      -0.009294777,
      -0.0020891875,
      0.0075915297,
      0.012908332,
      0.014910859,
      -0.0024855696,
      -0.0061452966,
      -0.00493961,
      0.008269793,
      0.013726817,
      0.009345477,
      -0.015412203,
      0.011790558,
      -0.03556581,
      0.008372405,
      -0.009713002,
      -0.030485412,
      -0.019929057,
      0.024576351,
      -0.012868188,
      -0.030108282,
      0.0117126405,
      0.0044235196,
      0.041485224,
      0.018033711,
      0.010518123,
      0.00065230596,
      0.010209596,
      0.009747449,
      0.023998257,
      -0.008624151,
      0.00058998604,
      0.012102086,
      -0.026682833,
      -0.0051526716,
      -0.006023698,
      0.0021413434,
      -0.026315685,
      -0.02567223,
      -0.027637387,
      -0.0079429755,
      -0.008568641,
      0.000108982684,
      0.029377155,
      -0.01944228,
      -0.0070384066,
      -0.03939897,
      0.012808169,
      0.002094826,
      -0.017223997,
      -0.01841638,
      -0.0034853609,
      0.029053038,
      -0.0102111185,
      -0.011267129,
      0.005942723,
      -0.0051370775,
      0.0006072103,
      -0.0047864127,
      -0.03947845,
      0.0040075714,
      0.024100428,
      -0.0077817882,
      0.03631322,
      0.0063001257,
      0.016958047,
      -0.009737716,
      -0.0044514905,
      -0.0021698442,
      -0.012986227,
      0.0062325955,
      -0.025606398,
      0.013652931,
      0.027175551,
      0.0014528197,
      -0.015775762,
      -0.003961169,
      -0.012567231,
      -0.02623332,
      0.020611523,
      0.014200186,
      0.001012084,
      0.01809566,
      0.00021523594,
      0.0033762103,
      0.012123874,
      0.008789318,
      -0.000058549675,
      -0.02715644,
      -0.008193034,
      -0.0061897244,
      0.01200235,
      -0.007728552,
      0.014237975,
      -0.020842915,
      0.006716151,
      0.015281314,
      -0.009612637,
      0.004807301,
      -0.007603721,
      -0.007881821,
      0.0087598665,
      0.003724571,
      -0.0062442725,
      -0.007823907,
      -0.021433963,
      -0.013415443,
      -0.0030602086,
      -0.0128308255,
      0.008554967,
      0.0072017154,
      0.0058330125,
      -0.0065546944,
      -0.0072032623,
      0.019107083,
      -0.024656544,
      0.003419639,
      -0.0011219241,
      -0.005513688,
      -0.025773773,
      0.024300454,
      -0.037334435,
      -0.0027473192,
      0.02074706,
      0.018798014,
      -0.017973155,
      0.0033003064,
      -0.008757259,
      -0.002586764,
      -0.00810054,
      0.020120712,
      0.012947544,
      -0.016016776,
      0.023271212,
      -0.00165398,
      -0.02976894,
      0.019237993,
      -0.0030747799,
      0.013940016,
      0.0030751827,
      -0.013632043,
      -0.02116929,
      0.0061742826,
      -0.0009731997,
      0.0009163064,
      -0.022735994,
      0.0062786853,
      0.014605898,
      0.008107455,
      -0.0019815362,
      0.020647444,
      0.011456437,
      -0.014054466,
      -0.0022021797,
      0.015406056,
      -0.009379249,
      -0.11997283,
      -0.006788643,
      0.0012652861,
      -0.0005049339,
      0.009612629,
      -0.018434929,
      -0.005780666,
      -0.004305166,
      0.0044003855,
      -0.0062668156,
      0.02892732,
      0.011033684,
      0.0068536005,
      -0.0047357413,
      0.009152718,
      -0.02210243,
      0.0024342835,
      0.00072945177,
      0.04455019,
      -0.009134268,
      0.0067830984,
      -0.015311285,
      0.0047231154,
      -0.0221446,
      -0.019099373,
      -0.010076194,
      -0.0035464477,
      -0.0005806266,
      0.012809849,
      -0.00019264023,
      -0.012242858,
      0.002046843,
      0.0054602204,
      0.00789054,
      0.024219811,
      -0.018195247,
      -0.02165072,
      0.031317342,
      0.010898419,
      0.014224216,
      -0.0010766909,
      0.00019283895,
      0.022644032,
      0.0022306948,
      -0.015256049,
      0.014076547,
      0.018402327,
      -0.032417357,
      -0.012609325,
      0.029552788,
      -0.031349063,
      -0.018936517,
      -0.006355564,
      -0.008295896,
      0.006522827,
      -0.018187806,
      0.011534682,
      -0.013995046,
      -0.0015840395,
      -0.0074290833,
      0.010041954,
      0.008957101,
      0.0040998976,
      0.020033361,
      -0.008867806,
      0.0068717366,
      0.024336848,
      0.02067233,
      0.02527862,
      -0.0059038945,
      -0.014567203,
      -0.0031289752,
      -0.016891647,
      0.018119764,
      -0.00082503073,
      0.0044467584,
      0.011328903,
      0.010290172,
      0.008271273,
      -0.004924216,
      -0.01954692,
      -0.015162989,
      -0.046089947,
      -0.012464011,
      0.010377937,
      -0.005330264,
      0.016587917,
      0.0011977868,
      -0.003479011,
      -0.0066112825,
      0.018112274,
      -0.0014304041,
      -0.0069782767,
      -0.0003036523,
      0.0021857403,
      0.0038085568,
      -0.024675429,
      -0.011960783,
      0.0091058845,
      -0.041410875,
      -0.01573799,
      0.0010637281,
      -0.0012534163,
      0.0028046975,
      0.0033564647,
      -0.015135124,
      0.016849672,
      0.009350089,
      0.003317312,
      0.0021330076,
      -0.0021672274,
      -0.015551818,
      0.004405947,
      -0.1503787,
      0.002935028,
      0.017261282,
      0.008372288,
      0.011320409,
      -0.006339805,
      -0.0062305774,
      -0.008271514,
      -0.00050524523,
      -0.019784126,
      0.0022533666,
      -0.0016860578,
      -0.008270047,
      -0.0031664702,
      0.0021821666,
      0.14282098,
      -0.005805977,
      -0.024123225,
      -0.017996231,
      0.007989698,
      -0.0017089174,
      -0.0371856,
      -0.0077719665,
      0.0011451518,
      -0.0024124307,
      0.01832636,
      -0.013030083,
      -0.0025916614,
      0.008473499,
      -0.0074432204,
      -0.018963896,
      -0.018157177,
      0.0037581518,
      0.023296192,
      -0.008801044,
      0.008515281,
      -0.006796845,
      -0.010402795,
      -0.0040847566,
      0.0042145033,
      -0.0014878226,
      -0.004844282,
      -0.0017717569,
      0.008767019,
      0.014036948,
      -0.0063916887,
      -0.0031926725,
      -0.025284244,
      -0.028187506,
      -0.009302912,
      -0.022434494,
      -0.037462797,
      0.006268866,
      -0.023583254,
      0.004250295,
      0.022664623,
      -0.020563707,
      0.015667805,
      0.0056623765,
      0.009050292,
      0.014225569,
      0.021905186,
      -0.011732663,
      -0.00097550306,
      0.005062026,
      -0.026704276,
      -0.0008353103,
      0.004085978,
      0.009338136,
      0.0012028922,
      0.00000775181,
      -0.011003654,
      0.009223959,
      0.020156337,
      0.0053537665,
      0.0065499987,
      -0.013382262,
      0.021216072,
      0.014763828,
      -0.006794686,
      -0.003651172,
      -0.01656164,
      -0.014868884,
      -0.02237119,
      0.01838407,
      0.0034848773,
      -0.026519805,
      -0.014538667,
      0.007876055,
      0.0059282235,
      0.010384064,
      0.011419013,
      0.0039026155,
      0.0013536405,
      0.0019800954,
      0.010737573,
      -0.019385355,
      -0.00004592215,
      0.018288305,
      -0.012102622,
      0.00789791,
      0.005996395,
      -0.0013515303,
      -0.025394196,
      0.02584885,
      0.0064816256,
      0.006625309,
      -0.00770908,
      0.013675252,
      -0.021010512
    ]
  },
  {
    "id": "genai_cohort_python_01_Building_your_1st_class_and_Object_in_python_vtt",
    "content": "All right, welcome 2 to the Python course on Udemy. 3 Hope you are enjoying this 4 and welcome to a fresh new section. 5 Every new section is like a spark 6 of new energy and we are always 7 excited to dive into something new. 8 The next new topic that we 9 are going through will be. 10 Where we will go through is going 11 to be Object Oriented programming. 12 Now this object oriented programming, 13 or in short known as OOP is, 14 is also termed as oops. 15 There's no exact shortcut 16 or a long cut of this one. 17 It's sometimes called as 18 object Oriented Programming systems. 19 That's why the name OOPS here. 20 But again the concepts are 21 pretty simple and easy. 22 Now one thing you always have 23 to remember that this object 24 oriented programming is 25 a paradigm of programming. 26 What do I mean by paradigm? 27 Paradigm simply stands for it's 28 a way of writing the code. 29 Now this way of writing the code 30 got evolved during the C era 31 and after that a lot 32 of programming languages adopted it. 33 Java, JavaScript, Kotlin, Swift 34 and a whole bunch of others as well. 35 Now this is nothing new. 36 A whole lot of applications are 37 being written with this kind 38 of a style of writing programming. 39 But there are lots of other 40 ways of writing programming 41 syntaxes, and programming 42 softwares as in general. 43 One of them is 44 functional programming. 45 And these days functional programming 46 is much more preferred compared to 47 the classic object oriented. 48 And in majority of the software 49 that you'll see in the production 50 there is always a mix of little 51 bit functional, little bit 52 of object oriented programming. 53 There is no right, there is no wrong. 54 But yes, through the object oriented 55 programming we learn a little bit 56 about new data structures and we 57 learn how to engage with them. 58 And as well as we also learn about 59 the, some of the new terminologies 60 which are pretty common, things 61 like polymorphism abstraction, 62 although they are very in general 63 English terms and they mean exactly 64 same as what they mean in general 65 as they mean in the programming 66 paradigm as well. 67 So throughout this section we 68 will engage with one activity. 69 We'll keep the videos short 70 so that we can just focus 71 on each one topic at a time. 72 And that's it, that's 73 all the plan is. 74 Let me first walk you through 75 what this whole concept is. 76 Then we are going to write 77 our very first object oriented 78 programming code, file. 79 I think that's going to be fun. 80 Let's go ahead and get started. 81 So with this, let me share 82 the screen with you. 83 We have the screen that we saw 84 in the last demo up here. 85 So what do I mean by 86 this object oriented programming? 87 I'll write them in short as oop 88 you know the idea, object 89 oriented programming. 90 What does this object 91 oriented programming means? 92 You will hear this exact same 93 example, whether somebody 94 is teaching Java, JavaScript, 95 whatever they're teaching. 96 The whole idea is, let's just say 97 if I have designed this blue box, 98 this blue box is going 99 to be my first blueprint, first 100 sample that I'm creating. 101 And based on this now a lot of 102 duplicates can be created out of it. 103 Literally. 104 This software allows me 105 to actually demonstrate this nicely. 106 So notice here, this 107 is a copy of this. 108 Now this copy could be a shorter 109 one, not exactly that big. 110 That's okay, it's 111 an individual copy of this. 112 There could be another 113 copy created from it. 114 And this one will be a little bit 115 like this, different shape, but it's 116 actually a copy of this one. 117 It derived from here, then we changed 118 its shape, change its property. 119 And that's okay, that's totally fine. 120 This one is also a copy of this. 121 But this time let's go 122 ahead and change the this 123 from blue to purple. 124 These all are actually 125 connected to this one. 126 So what do we call each one of them? 127 So this one is actually 128 known as class. 129 So yes, this is known as class. 130 And all of that you see 131 here are actually objects. 132 So there we go. 133 I'll just expand this a little, 134 we'll shrink it a little again 135 and I'll just select this 136 and we'll reduce the font to small. 137 There we go. 138 Now it makes sense, but you got 139 the point, you got the idea. 140 I'll just go ahead and write this. 141 This one is also an object. 142 Now each of the object is 143 individual in itself. 144 Whatever the changes 145 you make, you can make. 146 But these changes doesn't 147 really translate or 148 pass through the main class itself. 149 So what we're going to do 150 in this very first video, we'll 151 see that how we can make this 152 blueprint, this whole class, 153 and that's it, that is all. 154 And we're going to see that how 155 Python behaves and how Python works, 156 some behind the scene details, we 157 are going to see them as well. 158 Let's start our new folder. 159 I really, it's tough to believe 160 that we are on the 10th number. 161 We just started the course and we 162 are so far into this one. 163 So let's call this one as OOP 164 and let's create a new file 165 and call this one as 01 and this 166 will be a simple class py. 167 Now the way how class works is first 168 of all you put up a syntax class 169 that's a reserved keyword, just 170 like for if just like that. 171 And after that we 172 simply name our class. 173 The name of the class usually 174 and should always be starting 175 with the capital letter, and then 176 name it whatever you like. 177 In my case, of course, 178 I'll go with the Chai. 179 There are no parentheses, 180 nothing like that. 181 You simply put 182 up a colon and that's it. 183 I'll not do anything inside this. 184 I'll just say pass. 185 So although this class does 186 nothing, but this is the 187 simplest, most basic class that 188 we have designed, I want to know 189 more detail about this, so I'll 190 just go ahead and print some of 191 the information. 192 First of all, I want to, 193 check the type. 194 What's the type of this one here? 195 And, later on we're going 196 to see how we can actually 197 create objects out of it. 198 So for this, let's open up 199 an integrator terminal and there we 200 go, let's run Python and this one. 201 So notice here it says class type. 202 Now, although it says class 203 type, so what we see here 204 is this one class type. 205 But always remember, everything 206 in Python is an object. 207 This is truly an object language. 208 So although it says that, hey, 209 I am a class, but in reality 210 this class is also an object. 211 Yes, this is asked in interview 212 quite a lot of time, but always 213 remember that this is the case. 214 You were not able to see that. 215 So this is object, and everything 216 here is, an object, although 217 it says class, but internally 218 it is an object itself. 219 Now, how can we go ahead 220 and derive this object, this 221 object, or a pink object? 222 So from the class I can go 223 ahead and say, let's just say 224 I have a ginger T, and this 225 T will be getting the variable value 226 from the chai. 227 There we go, that's it. 228 Now, this is an object of chai class, 229 just exactly what we have seen. 230 This is a class, 231 and this is an object. 232 So we have created this object. 233 Now, okay, I want to see 234 more detail of this one. 235 So I'll just go ahead and say 236 print, and I want to run type, 237 and I want to see what 238 happens with this, ginger T. 239 All right, and we'll also 240 see one more thing which is 241 also very interesting. 242 So let's just say if I go ahead 243 and do a check is chai, I 244 can check whether this 245 whole thing is an object of class. 246 Chai. 247 I can just go ahead and check this. 248 I can check for other as well, like 249 Chai time, which doesn't exist, 250 but I can still make another class, 251 let's just say class, and we'll 252 call this one as Chai time. 253 Again, feel free to Create as 254 many classes as you wish. 255 We'll just get with that. 256 So we'll see whether this ginger 257 T is a type of chai or chai time. 258 This will help us to understand 259 more about the classes. 260 If I go ahead and run this 261 again, notice here, first 262 of all it says yes, the class 263 in itself is of type class. 264 So notice here the type is of class. 265 And then you can see this class. 266 This one here, the type of ginger T. 267 This is the line number seven. 268 So first, this one is going up here. 269 Now the second in the line number 10, 270 we are asking what is this ginger T? 271 So it's saying, hey, ginger T 272 actually is a class, but not just 273 any class, it actually is an object 274 of the type class chai. 275 There we go. 276 So this one is little 277 hard to understand. 278 But all it's saying is hey, 279 I am not a standalone thing. 280 I am an object which was 281 built using the class chai. 282 That's all it's saying. 283 After that we checked whether 284 this ginger type belongs 285 ginger chai, Ginger T belongs 286 to chai or chai time. 287 So it says true. 288 This one is true because 289 hey, it actually belongs to chai. 290 But it says false. 291 So that's what it's saying 292 that hey, I don't belong 293 to the class chai time. 294 I actually belong to a class chai. 295 That is it. 296 That's the most basic. 297 Just to give you an idea, 298 this is how you define the classes. 299 So line number one, 300 this is literally one line. 301 This is how you create classes. 302 And. 303 And line number nine, this 304 is how you create objects. 305 That is it told you 306 it's really simple. 307 And especially when you are with me, 308 it is always going to remain simple. 309 Let's go ahead and catch 310 up in next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 Building your 1st class and Object in python.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/01 Building your 1st class and Object in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.00033182368,
      -0.0023988485,
      0.029511642,
      -0.04423034,
      -0.016304964,
      -0.0073104845,
      0.01457015,
      0.020295057,
      0.004029797,
      -0.0034920305,
      -0.022270052,
      -0.01791458,
      -0.0022067102,
      0.026723959,
      0.13541457,
      0.0029481696,
      -0.011852655,
      -0.022891032,
      0.01544797,
      -0.0018786535,
      0.0038208263,
      -0.012095954,
      0.008478709,
      -0.0135746915,
      0.015031459,
      0.0035010437,
      0.0014632699,
      0.022430252,
      0.04419024,
      -0.013423767,
      -0.034281444,
      0.03239463,
      0.011524304,
      0.019191777,
      0.013834836,
      0.025088048,
      0.000023522745,
      0.0005144793,
      -0.028575635,
      0.004322192,
      -0.027998708,
      0.0017227984,
      -0.009810206,
      -0.0031523206,
      0.024243778,
      -0.012466816,
      0.00044879178,
      -0.01578171,
      0.0043074414,
      0.017172623,
      0.002281661,
      -0.0048195557,
      -0.017075969,
      -0.18176016,
      0.0042476803,
      0.018900579,
      -0.014263552,
      0.00059680286,
      -0.007054212,
      0.010104308,
      -0.008749218,
      0.022947641,
      -0.018792158,
      -0.0040413057,
      -0.0056676036,
      -0.0258739,
      0.017992273,
      -0.000038532246,
      0.019821169,
      -0.002599731,
      0.017588513,
      0.016078636,
      -0.025580488,
      -0.014907244,
      -0.024628235,
      -0.029079042,
      0.020199003,
      0.012915759,
      0.018787788,
      0.023727596,
      -0.021515662,
      -0.008414701,
      -0.010807299,
      -0.0019508096,
      0.02449255,
      -0.017101431,
      -0.03747294,
      -0.021409908,
      -0.003833607,
      -0.017779967,
      -0.0021034786,
      0.022143763,
      0.007884919,
      0.019299278,
      -0.006246441,
      -0.01794893,
      -0.03194773,
      -0.002698811,
      -0.011220693,
      0.01006214,
      0.012590294,
      -0.009173294,
      -0.03037797,
      -0.014310232,
      0.010142246,
      0.014403932,
      -0.0076532755,
      -0.011547212,
      -0.033654332,
      0.0043202923,
      -0.015781239,
      -0.01679887,
      -0.0128037715,
      0.019317977,
      0.004941174,
      -0.17404974,
      0.011544464,
      -0.006824157,
      -0.010094293,
      -0.014917669,
      -0.0059518446,
      -0.0052253157,
      0.0010980918,
      -0.00045134846,
      -0.008547355,
      0.0058679213,
      -0.017789273,
      0.025876345,
      0.0023943998,
      0.0109332735,
      -0.009771058,
      -0.02873132,
      0.0075623253,
      0.015052904,
      0.00601878,
      0.011170688,
      -0.017048158,
      -0.011923465,
      -0.006961702,
      -0.0020062088,
      -0.0029992494,
      0.007500312,
      -0.022686923,
      0.049851306,
      -0.0061826645,
      -0.0064472104,
      -0.014425429,
      0.00956822,
      -0.02594277,
      -0.032444227,
      0.015249532,
      -0.014547053,
      0.000559318,
      -0.00071644585,
      -0.002531035,
      -0.024592813,
      0.0062535666,
      -0.011528634,
      -0.028904594,
      0.0048298202,
      0.0033870917,
      0.012793644,
      0.0023267975,
      0.009050545,
      -0.018169826,
      -0.005296012,
      -0.012823844,
      0.01468906,
      0.02241757,
      0.0138070835,
      -0.0074587297,
      -0.011806659,
      -0.0027963936,
      0.02339248,
      -0.009767099,
      -0.017540028,
      0.0076220464,
      -0.0119884005,
      0.007127224,
      -0.004102062,
      0.0106388545,
      0.0011693038,
      0.006978133,
      -0.016456055,
      -0.0027711,
      0.0036578465,
      -0.009538383,
      -0.005545227,
      0.020324914,
      0.013969275,
      0.023386398,
      0.0000094033085,
      0.021465113,
      0.0069291946,
      0.019524561,
      0.0021702668,
      0.0010521858,
      -0.010358519,
      -0.004290415,
      0.03212965,
      0.03064643,
      -0.0047729597,
      -0.010545859,
      -0.03994853,
      0.029267527,
      0.0010586875,
      0.010760689,
      -0.022195067,
      -0.006768757,
      0.031013282,
      -0.027964806,
      -0.008144169,
      0.024148457,
      0.00297013,
      0.025439603,
      -0.014104003,
      0.022466095,
      -0.0003073758,
      -0.010463675,
      -0.0043473975,
      0.017967712,
      -0.0008768553,
      -0.0026961064,
      0.025106238,
      0.009879377,
      -0.0074489396,
      -0.012659816,
      -0.012124209,
      0.002706098,
      0.016148178,
      0.006317259,
      -0.0027998365,
      -0.022830613,
      0.005720043,
      -0.0006289535,
      0.007885133,
      -0.017409736,
      0.01017368,
      -0.0059060077,
      -0.00047281198,
      -0.0063994695,
      -0.02449127,
      -0.001777643,
      0.035494257,
      0.030357271,
      0.00238076,
      0.006436308,
      0.013694025,
      -0.0042627784,
      -0.025204428,
      -0.025714716,
      0.005043973,
      0.017243402,
      -0.00578513,
      0.008843318,
      -0.032371286,
      -0.035511028,
      0.0023752854,
      -0.008442974,
      -0.014525009,
      -0.008806378,
      0.0097277975,
      -0.015684342,
      -0.0032806213,
      0.033769146,
      0.007546363,
      0.00038794804,
      0.021364959,
      -0.010751088,
      0.020649534,
      0.011549423,
      0.0001485378,
      0.016192133,
      0.03313486,
      -0.014803986,
      0.008231921,
      -0.08730483,
      0.024174945,
      -0.0026055698,
      -0.034404356,
      0.035108138,
      0.0040274095,
      -0.051751778,
      0.008486993,
      0.01171656,
      0.025342336,
      0.00851589,
      -0.0048851343,
      0.032472704,
      -0.012377687,
      0.0054645175,
      -0.0097694,
      0.0053291223,
      -0.011361096,
      0.021669524,
      -0.024157122,
      -0.00076622923,
      0.006223745,
      -0.010259532,
      0.005588105,
      0.0077131107,
      -0.02468868,
      -0.00018494355,
      0.021824023,
      0.0075420807,
      -0.013091106,
      -0.015080309,
      0.023551142,
      -0.0004262119,
      -0.004154654,
      0.0016280698,
      -0.0005095538,
      0.000023418412,
      -0.010019156,
      -0.00431451,
      -0.00847513,
      0.022873878,
      -0.013617325,
      0.03802244,
      0.026157979,
      -0.0029249908,
      0.009944315,
      -0.0024816673,
      0.0049735354,
      -0.0026691018,
      0.004628291,
      -0.011471976,
      -0.00005593772,
      0.032579012,
      -0.034223955,
      0.01443078,
      0.01635231,
      0.001849177,
      -0.027194371,
      0.014521581,
      0.0030028461,
      -0.013647738,
      0.005801207,
      -0.008656749,
      -0.0120768035,
      0.00039834413,
      -0.0037686497,
      0.011171033,
      -0.012761307,
      -0.01738503,
      0.0007572778,
      0.012528494,
      -0.0073070135,
      -0.0032832015,
      0.0028483812,
      0.00074044557,
      -0.00084887,
      0.0016026208,
      -0.0100783035,
      -0.018685617,
      0.01635286,
      0.032240134,
      0.009390709,
      0.009246789,
      0.016947066,
      0.020548841,
      0.0015804125,
      -0.013325453,
      -0.013457771,
      -0.015426338,
      0.0011860041,
      0.019763453,
      0.026053268,
      -0.017179903,
      -0.006609271,
      -0.013043552,
      -0.021618929,
      -0.02861351,
      -0.010449615,
      -0.013827643,
      0.021742174,
      -0.031204224,
      -0.0053710174,
      -0.016628712,
      -0.010484427,
      0.002943925,
      0.007809373,
      -0.022885036,
      -0.026164472,
      0.0150647415,
      -0.0082620615,
      -0.0005055108,
      0.0025898772,
      -0.006620863,
      -0.011372885,
      -0.012704165,
      0.0106692,
      0.002581442,
      0.0029133004,
      0.0055254926,
      -0.019605778,
      -0.012872085,
      -0.01840999,
      -0.008601523,
      0.008708045,
      -0.002657377,
      0.0067481254,
      -0.0074653416,
      -0.010670969,
      -0.020045606,
      -0.023866102,
      -0.027839983,
      0.0037380145,
      -0.016374815,
      -0.030621517,
      -0.011159976,
      -0.006867809,
      0.02412378,
      0.022805845,
      -0.00233414,
      -0.0007010359,
      -0.010406726,
      0.01970862,
      0.030326743,
      -0.019721877,
      -0.0040593212,
      0.025195418,
      -0.033086162,
      -0.017559564,
      -0.0027186074,
      -0.015618582,
      -0.018407574,
      -0.01659955,
      -0.012516404,
      -0.006571558,
      -0.012089192,
      0.0069813794,
      0.0075690052,
      -0.011169139,
      -0.012052275,
      -0.012299327,
      0.0147475675,
      0.0069250707,
      -0.0151763195,
      -0.0077789496,
      0.02632256,
      0.016930165,
      0.0029272893,
      0.026208837,
      -0.0013240158,
      0.004672562,
      0.014425725,
      -0.018419445,
      -0.028986836,
      0.002159956,
      0.014872246,
      0.003595864,
      -0.0062720953,
      -0.00035598388,
      0.00840271,
      0.0073218313,
      0.0146812,
      0.009910627,
      -0.018357595,
      -0.0015158375,
      0.016710006,
      0.015647123,
      0.009517709,
      -0.0112892585,
      -0.03619419,
      0.010203635,
      -0.00058272347,
      -0.017197132,
      0.004546211,
      0.002028332,
      0.0070682457,
      0.027636819,
      -0.009595921,
      0.005544057,
      0.0026115894,
      0.01333131,
      -0.005551338,
      -0.022178661,
      0.0004952834,
      -0.012038554,
      0.01398641,
      -0.025033874,
      -0.004529017,
      0.003998149,
      0.01548063,
      0.008688937,
      0.0040222546,
      -0.0045647365,
      -0.009430793,
      -0.0036341718,
      0.006963065,
      0.015174453,
      0.021968529,
      -0.003867371,
      -0.022790246,
      -0.004709595,
      -0.00040411676,
      -0.0216471,
      -0.017632496,
      -0.0074426234,
      0.016463706,
      -0.002154734,
      -0.019560507,
      0.00024561273,
      -0.011523906,
      0.0052198316,
      -0.005840007,
      -0.004353567,
      -0.025908517,
      0.003149386,
      0.000017901972,
      -0.021802189,
      0.008579135,
      0.01112102,
      -0.00010921529,
      0.025153138,
      -0.0063066357,
      -0.009050766,
      -0.0024291272,
      0.02228203,
      0.015832897,
      -0.01657017,
      0.02907484,
      0.009048063,
      -0.0115993805,
      0.014749816,
      0.0155715505,
      0.023366474,
      0.021940395,
      -0.02967735,
      -0.029760301,
      0.026454126,
      -0.0059078727,
      0.017944569,
      0.0046925438,
      -0.0074056303,
      0.022597143,
      0.00036487353,
      0.0049885646,
      -0.018835071,
      -0.019171571,
      0.003305124,
      -0.022446578,
      -0.010398373,
      0.011683082,
      -0.12608227,
      -0.0016642973,
      -0.01570556,
      0.008966463,
      -0.0054384912,
      -0.009566307,
      0.0028807072,
      -0.0017971788,
      -0.005632854,
      -0.023860928,
      0.018448737,
      0.01640461,
      -0.01939641,
      -0.0067821485,
      0.007630768,
      -0.008684705,
      -0.0044504497,
      -0.0031515362,
      0.027953269,
      -0.0019673225,
      -0.011189336,
      0.0071918834,
      0.00051262137,
      -0.0000985034,
      -0.016426032,
      -0.0007064153,
      0.006268132,
      0.0024777993,
      -0.0015425405,
      -0.006857343,
      -0.008330059,
      -0.011184898,
      -0.008156708,
      0.009157763,
      -0.0032202275,
      -0.018810464,
      -0.015917039,
      0.012388841,
      0.008168814,
      0.013724366,
      -0.0022753386,
      -0.007602152,
      0.011434633,
      0.009632088,
      -0.0036426343,
      0.01544112,
      0.024152422,
      -0.011521584,
      0.007929697,
      0.038787898,
      -0.028069504,
      -0.01168142,
      -0.005426973,
      -0.037173647,
      0.0015692129,
      -0.006038472,
      0.01864984,
      -0.006595033,
      0.027533697,
      -0.022876887,
      -0.010132631,
      0.00679293,
      0.036139857,
      0.03470598,
      -0.010325082,
      0.0070935003,
      0.0423823,
      -0.0014791293,
      0.0018779841,
      -0.017912023,
      -0.005986501,
      0.002888378,
      -0.008036306,
      0.0026333996,
      0.00055086106,
      0.01769509,
      -0.00045590018,
      0.016337171,
      -0.00681543,
      0.0081077805,
      -0.029839657,
      0.004709479,
      -0.06406756,
      -0.016266067,
      0.018078,
      0.012187074,
      0.032780007,
      0.03551563,
      -0.010301107,
      0.0045928597,
      -0.016771168,
      -0.0047595636,
      -0.017090717,
      -0.0014329139,
      0.020178072,
      -0.006043736,
      -0.030247351,
      0.0067407275,
      -0.017169762,
      -0.012325297,
      -0.027597629,
      0.0039572506,
      -0.010053249,
      -0.0047687544,
      0.0068967813,
      -0.017300572,
      0.010278053,
      0.042493757,
      0.004502133,
      0.007599849,
      -0.018860025,
      0.009953695,
      -0.0038627444,
      -0.15236437,
      -0.021377409,
      0.033208117,
      0.0038275302,
      0.018955577,
      -0.010085807,
      -0.002277778,
      -0.03248847,
      0.012750921,
      -0.0068433224,
      0.007819212,
      -0.00930396,
      -0.017878288,
      -0.007213592,
      0.028078765,
      0.12769185,
      -0.008087684,
      -0.0069389106,
      -0.0028631852,
      0.007127532,
      -0.012953707,
      -0.0041553085,
      -0.015342004,
      -0.0021068284,
      -0.0023649817,
      -0.02014027,
      -0.0043698843,
      -0.0021419884,
      -0.00121016,
      -0.023348052,
      0.0033727451,
      -0.023153849,
      -0.0028604984,
      0.015315352,
      0.012498457,
      0.0013532374,
      -0.002124998,
      -0.006572849,
      0.003572554,
      0.0017847813,
      0.02097172,
      -0.0111343255,
      -0.0033580756,
      0.022974236,
      0.019811062,
      0.00047104157,
      -0.008228209,
      -0.0074039777,
      -0.0048253145,
      -0.008936767,
      -0.0032624884,
      -0.055759262,
      0.016906017,
      0.004868488,
      0.004462707,
      0.00453629,
      -0.01785193,
      0.014528638,
      0.010470328,
      0.01569719,
      -0.014589559,
      0.0073286137,
      -0.01947718,
      0.009917482,
      0.010361504,
      -0.0054097995,
      0.015878264,
      0.008841524,
      -0.00066723285,
      -0.01874109,
      0.023498062,
      0.022816606,
      -0.0028075636,
      0.0026296976,
      -0.021331077,
      -0.010925533,
      -0.024178905,
      0.027127584,
      0.0018264784,
      -0.006290957,
      0.0036515296,
      -0.010160042,
      0.0047593853,
      -0.014529009,
      0.017570056,
      0.01493919,
      -0.0007034151,
      0.035511535,
      0.011701497,
      0.003167861,
      0.015019024,
      0.006135871,
      -0.014032661,
      0.016306952,
      -0.00074200256,
      0.012510082,
      0.01721256,
      -0.015346041,
      0.014865302,
      0.0034880517,
      0.013061092,
      0.0013811813,
      -0.022414075,
      -0.024586182,
      0.030015873,
      0.010561912,
      -0.0063149882,
      0.013396831,
      0.007477936,
      0.00039449052
    ]
  },
  {
    "id": "genai_cohort_python_02_Class_and_object_namespace_vtt",
    "content": "All right, let's get started more 2 and talk a little bit more about 3 the classes and the namespaces. 4 You usually see me beg one 5 a big image of me. 6 But now I'm just keeping myself 7 in the short so that we can 8 focus on the screen itself. 9 So let me take you on to this one. 10 So what we're going to study, 11 we are still going to study the same 12 diagram which we drawn. 13 So notice here, this is a class 14 and I wrapped it 15 up inside a box for a reason. 16 This is also an object. 17 This is also an object. 18 And this is also an object. 19 Now each object possess some 20 of their properties. 21 Properties like their variable names. 22 Like I have a property like 23 what's the color of my tea shirt 24 in this case you can see it, 25 it's yellow, bright yellow. 26 What's other property? 27 It fits me. 28 So there might be some size, like 29 large, extra large, 30 some size does fit me. 31 These are all properties 32 of this tea shirt. 33 So exactly like this, there are 34 some properties of this object. 35 Like this is a smaller object, 36 this one is having more 37 width than the length. 38 This one is having a different color. 39 And what you have also noticed 40 that each of this object although 41 came from this class itself, 42 possess some different properties, 43 but are not actually 44 overlapping anybody else's property. 45 Each object has its own entity 46 that's called as namespace. 47 I repeat this again. 48 Each object is its own entity. 49 It can possess its own features, 50 its own properties, 51 but doesn't bother other ones. 52 This is exactly the namespaces 53 and the concept of namespaces 54 in in the world of object 55 oriented programming demo time. 56 Of course it is. 57 Let's write some code. 58 I love this code part. 59 Let's create a new file and we 60 will create so many files 61 in this section because we have 62 so many topics to cover. 63 Let's call this one as namespace. 64 This namespace topic 65 in itself is a pretty in depth. 66 It actually exists 67 in Linux ecosystem as well. 68 But anyways I'll not go 69 too much depth of that. 70 So let's go with the namespace, 71 let's create another class and we'll 72 call this one as simplechai. 73 There we go. 74 And this time we'll not just write 75 pass, we'll declare some variable. 76 By the way, in the class you 77 can have your variables, you 78 can have your functions, 79 generators, whatever you want. 80 It's just a wrapper and inside 81 the wrapper you can have as 82 much or anything that you want. 83 I want to have an origin. 84 So most of the chai the origin is 85 in my country India. 86 Now let's see how we can create 87 different objects from it. 88 First of all, I would love 89 to print one statement. 90 So I can just go ahead 91 and say, this chai. 92 And just by putting a dot, you can 93 access whatever you have named 94 inside it, whatever the values are. 95 So right now I just want to print 96 what's the value inside the origin. 97 And again, there's 98 no guesswork there. 99 It's super easy to guess what's 100 going to be printed out. 101 So I'll just go ahead and say, there 102 we go, no exception, no surprises. 103 We get this one. 104 Now let's go ahead and create 105 a two different object. 106 And by the way, it's not like 107 you have to declare all 108 the objects or all the variables. 109 And by the way, when the variables 110 goes inside the class, 111 we call them as objects. 112 So from here onwards we'll 113 refer to them as objects, 114 not objects, properties. 115 My bad, sorry for that. 116 So inside the class, whenever 117 the variable goes, we 118 call them as properties. 119 So from here onwards we'll 120 call them as properties. 121 You can go ahead and add more 122 property to this just by putting up 123 a dot and says let's just say is hot 124 is the new property I want to add. 125 And I can just put up a value. 126 This can be a boolean, this 127 can be anything else. 128 And now I can access it directly by 129 pointing towards the class. 130 And as soon as I put 131 up a dot, I have more access 132 to this one, which is ishot. 133 Now you might be wondering, can 134 I go ahead and print this value? 135 Let's go ahead and ask this. 136 Although there was no suggestion, 137 but if I go ahead and run this, you 138 can see we got the true value here. 139 So now this class 140 technically has two values. 141 One is origin, one is 142 is hot, which is true. 143 Now let's see that if I can go ahead 144 and create more objects out of it. 145 Creating objects from class chai 146 the way how we create that. 147 Let's just say we want 148 to have a simple masala. 149 This one can come from the chai, 150 so all the values goes inside it. 151 It can have by default 152 as an axis of origin. 153 Can have an axis of is hot. 154 Would you like me to go with that? 155 Of course. 156 You want me to go with this. 157 So I can just say masala and as 158 soon as I put up a dot, this one 159 is going to say origin origin. 160 And I can have a duplicate 161 of this and say is hot. 162 Although we don't get 163 the suggestions, but this 164 is all what we have. 165 Let's go ahead and run this. 166 Do we have this? 167 Yes. 168 So the first two are Actually 169 being printed by the class itself. 170 The rest of the two are actually 171 coming up from the masala itself. 172 And just to make sure that we 173 get this idea, so I'll just go 174 ahead and simply go like this 175 and have a value just like this. 176 And we will say masala space. 177 And we can actually copy this copy 178 and we'll paste this one masala. 179 And there we go. 180 Just a second. 181 I'll just arrange the things 182 so that we get the idea. 183 This one is easier 184 to understand that okay, this is 185 masala India and masala true. 186 All right, can I go ahead and create 187 more chai just like this? 188 And what happens if I go 189 ahead and change some value? 190 So for example, that's 191 interesting case. 192 If I go ahead and take this masala 193 and I say ishot and I turn it as 194 this was previously 195 true, but I turn it as false. 196 So what do you think will happen? 197 I want to print the two things. 198 The first one is directly 199 accessed with the chai. 200 So I'm accessing the value 201 in the chai. 202 So this is class value. 203 So I'll just go ahead and say class. 204 This is printing of the class. 205 And what do I want? 206 Why are you having. 207 I forgot to put up a comma. 208 There we go. 209 And I also want to print 210 this masala as well. 211 So let's go ahead and copy 212 this and print this. 213 So in line number 14, I have 214 changed a value which is is hot 215 inside the masala. 216 We'll actually draw 217 the diagrams as well. 218 And this one is here. 219 So my question is, if I change 220 anything inside an object, 221 should this change be propagated 222 inside the class as well? 223 This is like saying I do have a value 224 here which is is underscore hot. 225 And if I go ahead and change this 226 value here somehow, should this 227 change be propagated here as well? 228 That's the question. 229 And we will answer that by 230 just running the file. 231 If I run this notice here, it 232 says this masala India and true. 233 That's okay. 234 After that we see the class 235 is still true, but in 236 the masala it becomes false. 237 So this proves the point that 238 each object is actually having 239 its own namespace which 240 doesn't affect other objects. 241 Also doesn't affect 242 the classes as well. 243 By default, if you wish, you can, 244 but by default it 245 doesn't change any value. 246 You can also go ahead 247 and add more values to it. 248 Just like this could be a color 249 changed and this could be a size. 250 So you can add more values 251 to this masala as well. 252 How do we do that? 253 Super easy, super simple. 254 Now that you have an object Masala, 255 you can simply go ahead and say 256 that I want to add a flavor to it. 257 Flavor. 258 And feel free to add whatever 259 the flavor you want to add. 260 I will call this flavor as Masala. 261 There we go. 262 Now I can just go ahead and print 263 this simply masala flavor. 264 My bad flavor. 265 And super easy, super simple concept. 266 I hope you are focusing now 267 on the concept so we 268 get the new property. 269 But this property doesn't 270 exist in the class. 271 So all I'm saying is coming back 272 onto the point that you can go ahead 273 and have your own unique properties. 274 You can go ahead and change 275 the properties that 276 you got from the class. 277 Just like we did it here. 278 We got the property of blue, but we 279 changed this property to purple. 280 And that's okay. 281 It doesn't affect other object. 282 It doesn't affect 283 the original class as well. 284 If any new object will be 285 created from this class, 286 they will be exactly same. 287 So we can just still 288 go ahead and do this. 289 And That is all. 290 That is all the concept 291 of the namespaces. 292 I hope you got it. 293 It was a fun lecture. 294 Please do rate us and let's 295 catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 Class and object namespace.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/02 Class and object namespace.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0049193837,
      -0.017338714,
      0.041236293,
      -0.051130563,
      -0.0032827768,
      0.007096854,
      0.0082319565,
      0.023741338,
      0.027923672,
      -0.008499798,
      -0.015435599,
      -0.011023853,
      0.017395176,
      0.008537458,
      0.1308106,
      0.003328489,
      -0.026290579,
      -0.033420462,
      0.017166628,
      -0.0070636193,
      0.0033369518,
      0.0050931727,
      0.019876532,
      0.005816873,
      0.014220396,
      -0.010534623,
      0.013879367,
      0.03260316,
      0.0280306,
      -0.019460192,
      -0.020791933,
      0.010252794,
      0.015450077,
      0.010827852,
      0.02009534,
      0.024256391,
      0.00068523234,
      -0.0047512013,
      -0.042779334,
      -0.00936169,
      -0.035939477,
      0.029891707,
      0.0066607934,
      0.0022973197,
      0.020113632,
      -0.02154861,
      0.014493438,
      -0.007763071,
      0.025663944,
      0.011226737,
      0.0111585995,
      -0.0031478014,
      -0.0054761306,
      -0.17802984,
      0.030712254,
      0.0044035967,
      -0.0021923736,
      0.0010054035,
      0.0077385795,
      -0.0024326239,
      -0.020579692,
      0.014028417,
      -0.04286794,
      -0.0068445154,
      0.00077965314,
      -0.017625641,
      0.021853287,
      -0.0028256562,
      -0.0020420272,
      0.016734825,
      0.015526823,
      0.009821918,
      -0.021616345,
      -0.008945139,
      -0.015840303,
      -0.024191676,
      0.02306986,
      0.006515902,
      0.0106559675,
      0.018685956,
      -0.01429092,
      0.0023418397,
      -0.008493989,
      0.00046789084,
      0.019771155,
      -0.0007766292,
      -0.020442357,
      -0.026091246,
      -0.0034443086,
      -0.015005872,
      -0.010216487,
      0.009339701,
      0.0148386555,
      0.01673589,
      -0.010120991,
      -0.00044131736,
      -0.016537854,
      0.010816381,
      -0.016708307,
      0.02436865,
      0.030679531,
      -0.012667004,
      -0.04103143,
      -0.019074108,
      0.0075837052,
      -0.00022592228,
      -0.014932975,
      -0.008491355,
      -0.028500289,
      0.003970136,
      0.0032599398,
      -0.024531528,
      0.0059975227,
      0.01752791,
      0.016673159,
      -0.16803049,
      0.030320734,
      -0.018482756,
      -0.022471298,
      0.00052665145,
      -0.008181515,
      -0.00943407,
      0.0049372716,
      -0.002702377,
      -0.0056678546,
      -0.000038751023,
      -0.0015716038,
      0.01927777,
      0.01327269,
      0.0050004036,
      -0.0065034716,
      -0.02850589,
      -0.0077049816,
      0.0060718916,
      0.016699836,
      0.014218585,
      -0.010687683,
      -0.00086856965,
      -0.030179782,
      -0.0032961448,
      0.0027605123,
      0.0031878538,
      -0.019290043,
      0.038767185,
      -0.014855124,
      -0.014018546,
      -0.020843688,
      0.01426664,
      -0.035634883,
      -0.017845485,
      0.0126876775,
      -0.0046719383,
      0.021067223,
      -0.0063764444,
      -0.0077296975,
      -0.013374268,
      0.018506352,
      -0.00637355,
      -0.012860838,
      0.020300345,
      0.0039777104,
      0.014650949,
      -0.0048624775,
      0.023803014,
      -0.016345935,
      0.0066368855,
      -0.010793014,
      0.016813423,
      0.023526754,
      0.012961256,
      -0.0011557871,
      -0.02617077,
      0.010029454,
      0.010227241,
      -0.018949822,
      -0.017425362,
      0.00043703223,
      -0.008236339,
      0.011197306,
      -0.0028494345,
      -0.0037177012,
      -0.024191475,
      0.018193332,
      -0.012297928,
      0.011670272,
      0.015563608,
      0.0032464429,
      0.008056216,
      0.030389624,
      0.012251946,
      0.024769593,
      0.018572288,
      0.0044879313,
      0.023328688,
      0.0050375788,
      -0.010896862,
      -0.010010244,
      0.0059514395,
      -0.005984657,
      0.021350645,
      0.027389156,
      -0.0066996603,
      -0.00892199,
      -0.039392,
      0.027213762,
      0.015497779,
      0.021527989,
      -0.020672891,
      0.0077467114,
      0.03659709,
      -0.027203746,
      -0.01096115,
      0.028458077,
      -0.0015558824,
      0.0077763423,
      -0.025081577,
      0.022432514,
      0.00059781555,
      -0.002820844,
      -0.021078654,
      0.025811447,
      0.006358534,
      0.0030894428,
      0.043249432,
      0.01901343,
      -0.014015941,
      -0.0153787285,
      0.0039237556,
      -0.0065991585,
      0.010787811,
      0.015089308,
      0.0012821077,
      -0.018938843,
      0.012318902,
      0.010818111,
      0.0022132448,
      -0.023200339,
      0.013607401,
      -0.004179187,
      0.0075869486,
      -0.01173568,
      -0.026038976,
      -0.0015109557,
      0.0036598512,
      0.025470719,
      -0.010216712,
      0.0036591867,
      0.0065386863,
      -0.009931017,
      -0.008645124,
      -0.011831001,
      -0.007191589,
      -0.003141462,
      -0.002148098,
      0.004650061,
      -0.035631396,
      -0.015834179,
      0.010145394,
      -0.017775744,
      -0.002751398,
      0.0049331523,
      0.007874942,
      -0.0039609578,
      -0.0072579226,
      0.0114670135,
      -0.0038320052,
      0.007517699,
      0.039554767,
      -0.019340001,
      0.02006473,
      0.008426234,
      0.016321305,
      0.00050282467,
      0.027158681,
      -0.026300846,
      0.013064937,
      -0.10268416,
      0.02225232,
      -0.011460025,
      -0.017809067,
      0.021161217,
      0.010237537,
      -0.026627332,
      0.005142675,
      0.004445716,
      0.023185875,
      0.0052126865,
      0.008334989,
      0.023913516,
      -0.0075028962,
      0.007651013,
      -0.022929795,
      -0.009893079,
      -0.005938397,
      0.029841686,
      -0.01618187,
      0.0023829574,
      -0.0069779195,
      -0.005566318,
      -0.007931707,
      0.010543339,
      -0.010047475,
      0.013567019,
      0.026707102,
      -0.003753933,
      0.009515562,
      -0.009037157,
      0.015587196,
      -0.009366972,
      -0.021885062,
      0.0027469872,
      0.008814813,
      0.015026284,
      -0.019779755,
      0.005396704,
      -0.023455879,
      0.0051695057,
      -0.007264857,
      0.01666602,
      0.03556813,
      -0.02280829,
      0.01719961,
      -0.0056160553,
      -0.008108308,
      -0.010708143,
      0.000022909167,
      -0.016032737,
      0.010142429,
      0.0077894405,
      -0.03402425,
      0.006192258,
      0.017174272,
      -0.0022894002,
      -0.010875283,
      0.013463923,
      0.010816851,
      0.0035232052,
      0.013133629,
      0.0018197544,
      0.0011522706,
      0.012118409,
      -0.014065165,
      0.014316549,
      -0.020798495,
      -0.00063516264,
      0.0038356849,
      0.017030315,
      -0.010184099,
      -0.0006849537,
      0.0036155896,
      0.0037767303,
      0.01104489,
      0.011294971,
      -0.0061955964,
      -0.01463389,
      0.03321014,
      0.0070828456,
      -0.000004713403,
      0.00952965,
      0.014040676,
      0.0114445,
      0.021850454,
      -0.0079294015,
      -0.0023895707,
      -0.0033739342,
      -0.031085258,
      0.0072652223,
      0.018989274,
      0.00028723947,
      -0.008835285,
      -0.010679616,
      -0.006139064,
      -0.033721194,
      -0.010597406,
      -0.020576155,
      0.032184463,
      -0.008073938,
      -0.018693443,
      -0.026344042,
      0.0022080974,
      0.0002516336,
      0.000580535,
      -0.028008344,
      -0.008986285,
      0.0018177038,
      0.007988697,
      0.008561968,
      -0.004777945,
      -0.018324785,
      -0.017080959,
      -0.012994501,
      0.0054700067,
      0.0042586904,
      0.023536623,
      0.016567998,
      -0.027179178,
      -0.020506706,
      -0.0056750653,
      -0.006028217,
      -0.011894581,
      -0.0002996035,
      0.0003578455,
      -0.013478708,
      -0.0059038014,
      -0.014037687,
      -0.026273206,
      -0.044351354,
      0.006324436,
      -0.012244797,
      -0.021949194,
      0.0017774845,
      -0.0041378574,
      0.029003724,
      0.008637374,
      0.012140621,
      -0.00014739188,
      -0.0316468,
      0.0036537787,
      0.0046557924,
      -0.013323241,
      -0.014411436,
      0.022773191,
      -0.014876487,
      -0.023693977,
      -0.0064353696,
      0.0042841723,
      -0.012598537,
      -0.00989312,
      -0.008740806,
      0.003667232,
      0.013343247,
      0.018745052,
      -0.01001886,
      0.008228026,
      -0.021149334,
      -0.019429922,
      -0.0064774603,
      -0.007647375,
      -0.0008924498,
      -0.012551005,
      0.023041952,
      0.003258673,
      0.006193239,
      0.00815142,
      -0.004436129,
      0.012854139,
      0.013228784,
      -0.016044019,
      -0.01400465,
      0.0061911596,
      -0.0048200698,
      0.002393319,
      -0.0042732554,
      0.0016101694,
      0.009980843,
      0.0052783554,
      0.014338807,
      -0.00131431,
      -0.009888303,
      -0.010414811,
      -0.0012429118,
      0.00052726397,
      0.004311688,
      0.001306795,
      -0.03604359,
      -0.0032185481,
      0.00178926,
      -0.026023574,
      0.009135743,
      0.01472816,
      -0.0033290067,
      0.026346643,
      -0.004889087,
      0.0058786613,
      0.0053534894,
      0.010947944,
      -0.018829165,
      -0.02068512,
      -0.010327041,
      -0.0058958423,
      0.0017341659,
      -0.02532059,
      0.014281495,
      -0.0074263285,
      0.006019888,
      0.021007504,
      -0.009862108,
      -0.011658408,
      -0.0064068693,
      0.0071504787,
      -0.00039005323,
      0.023108786,
      -0.0005551217,
      -0.013881332,
      -0.032928627,
      -0.01065381,
      0.009975845,
      -0.00924732,
      -0.009364451,
      -0.0019230546,
      0.004692943,
      -0.008345055,
      -0.003395925,
      0.0035232764,
      -0.0067587183,
      0.010720772,
      -0.007048728,
      0.007547462,
      -0.014624799,
      0.004255686,
      -0.009388656,
      -0.026302813,
      0.010745054,
      0.013737208,
      -0.012762239,
      0.0275808,
      -0.0017027188,
      -0.011043271,
      -0.012495898,
      0.0009100838,
      0.006932127,
      -0.013228389,
      0.014564766,
      0.006631498,
      -0.0060413247,
      0.0036753332,
      0.011045796,
      0.020562168,
      0.008910367,
      -0.016353456,
      -0.015412598,
      0.030944515,
      -0.0058559454,
      0.017242616,
      0.0168721,
      0.011519721,
      0.02311795,
      0.0028953154,
      0.0019590468,
      -0.021355905,
      -0.019950744,
      0.0027440644,
      -0.0031794293,
      -0.00039003638,
      0.019888518,
      -0.13130586,
      -0.01054005,
      -0.0045677605,
      0.0063148937,
      -0.009584964,
      -0.013261507,
      0.00876366,
      -0.010094536,
      0.0002666722,
      -0.014178968,
      0.015184245,
      0.008561237,
      0.0020181371,
      -0.004437671,
      0.012143267,
      -0.01309305,
      0.007615158,
      0.017037356,
      0.037001953,
      0.013286435,
      -0.0025904682,
      0.011227635,
      0.005278369,
      0.0057224953,
      -0.0041210777,
      -0.0014090866,
      0.010146691,
      0.009375511,
      -0.0046893083,
      -0.014434483,
      -0.0061548934,
      -0.008711369,
      0.001981369,
      0.023902979,
      -0.0056121536,
      -0.017390346,
      -0.014677536,
      0.001364331,
      0.0012515048,
      0.024298424,
      0.0048119873,
      -0.020006768,
      0.03648914,
      0.010427439,
      -0.012627636,
      0.019993609,
      0.019401046,
      0.0046506613,
      0.00028989973,
      0.029290583,
      -0.014884176,
      0.0028150748,
      -0.008553079,
      -0.03753923,
      0.0035643792,
      -0.017492427,
      0.008428528,
      -0.018854111,
      0.0055690985,
      -0.028123463,
      0.0054868218,
      0.0061503206,
      0.018340178,
      0.02837743,
      -0.004908362,
      0.010592652,
      0.029321514,
      0.01335359,
      -0.011121234,
      0.0028254732,
      -0.0014865812,
      0.012774373,
      -0.016391438,
      0.0074849585,
      0.0015795584,
      -0.0028364009,
      -0.00930404,
      0.014198586,
      -0.012748077,
      0.0009814742,
      -0.033685055,
      -0.0027751834,
      -0.07148935,
      -0.019093389,
      0.022052454,
      0.016832469,
      0.020675909,
      0.012111405,
      -0.029283265,
      -0.0155659905,
      -0.011966869,
      -0.0003571858,
      -0.007451896,
      -0.0048529557,
      -0.0046987226,
      0.00004632114,
      -0.013003667,
      -0.004837356,
      -0.0062947646,
      -0.021443307,
      -0.02992544,
      0.00044880042,
      -0.011547607,
      -0.017066985,
      0.0040224055,
      -0.029060297,
      0.014174242,
      0.031556636,
      0.006933308,
      0.0031465075,
      0.0027520224,
      0.0015756709,
      -0.0015881862,
      -0.14681762,
      -0.016515778,
      0.024283476,
      -0.0060774814,
      0.019929446,
      -0.0054815565,
      -0.0013460398,
      -0.030555815,
      0.009038054,
      -0.01055375,
      0.016004622,
      -0.007896096,
      -0.025984084,
      -0.012719869,
      0.0145635335,
      0.12380347,
      -0.027476091,
      0.018218866,
      -0.013743448,
      -0.0015607143,
      -0.0077743526,
      -0.008037899,
      -0.00832738,
      0.006543619,
      -0.021845499,
      -0.008591569,
      0.00194896,
      -0.018905167,
      -0.004592957,
      -0.034884993,
      0.01278121,
      -0.033292897,
      -0.003203125,
      0.042604666,
      0.011925015,
      -0.025400685,
      0.0019378797,
      0.0032246138,
      -0.005623045,
      -0.0014979045,
      0.010821826,
      0.0033222833,
      0.009994499,
      0.0056144255,
      0.020266572,
      0.002696849,
      -0.012705655,
      -0.020607673,
      0.006487573,
      0.006154219,
      -0.016493332,
      -0.06626135,
      0.0070448983,
      0.021522155,
      0.00959563,
      0.0050940085,
      -0.0053046504,
      0.021647764,
      0.007783844,
      0.01625445,
      -0.01751152,
      0.0075954967,
      -0.010594931,
      0.005862242,
      -0.010953928,
      -0.0011073578,
      0.031878073,
      0.018877635,
      0.007788989,
      -0.015271644,
      0.006922782,
      0.027010364,
      -0.009769206,
      0.022078138,
      -0.028539112,
      -0.0127964625,
      -0.021860633,
      0.022007508,
      0.011463849,
      -0.0005409546,
      -0.010052466,
      0.0066878935,
      0.009440276,
      -0.008374324,
      0.011796039,
      0.0059191114,
      -0.008049013,
      0.027495444,
      -0.0011849499,
      0.0051429193,
      0.016515458,
      0.012250982,
      -0.021974744,
      0.023697773,
      -0.0046726866,
      0.016389422,
      0.01208389,
      -0.02372113,
      0.030883517,
      0.0013161796,
      -0.0069429157,
      -0.014533023,
      0.00040550294,
      -0.021238407,
      0.028673047,
      0.025891317,
      -0.0031307288,
      0.012862051,
      0.005333902,
      0.0054864325
    ]
  },
  {
    "id": "genai_cohort_python_03_Attribute_shadowing_in_python_vtt",
    "content": "Alright, so the next topic 2 we are going to study 3 in this object oriented programming 4 is attribute shadowing. 5 What is attribute shadowing? 6 The term sounds really fancy, 7 but the implementation 8 is super easy. 9 The concept is easy, but it 10 has its own meaning. 11 So without wasting any more time, I 12 would like to take you directly to 13 the code part because this is 14 actually super easy to understand 15 in the code, rather code rather 16 than the diagrams and all these 17 stuff. 18 So let's create a new file. 19 Call this one as 03 and this 20 one is attribute shadowing. 21 Shadow shadowing. 22 There we go. 23 Py. 24 All right, so we have 25 seen a couple of things. 26 First thing that you know that this 27 is hot is known as attribute. 28 Yes, these are technically variables. 29 We have seen variables. 30 So yeah, internally they are 31 just variable just like this. 32 So I can just go ahead 33 and work on this. 34 This is also a variable. 35 So these are exchangeable. 36 We can call attribute as 37 variable, variable as attribute. 38 But the only difference that comes 39 up here is when you 40 actually go ahead and have 41 this inside a class or an object. 42 So when it goes inside 43 an object or technically a class, 44 this whole thing variable 45 is called as attribute. 46 Yeah, the functionality remains same. 47 There's no change at all. 48 We just like to call it different. 49 So that is all. 50 So you got the first 51 part, the attribute. 52 But what is the shadowing 53 for this, shadowing. 54 Let's go ahead and have 55 a simple class. 56 Let's call this one again as chai. 57 There we go. 58 And this chai class has temperature. 59 So each chai has its own temperature. 60 And maybe the temperature 61 we are going for is hot. 62 Good enough. 63 And what's the strength of the chai? 64 The chai has different strength, like 65 strong, mild, light, all of that. 66 This one is by default strong. 67 Strong chai. 68 All right, let's go into this. 69 So let's just say we have 70 a cutting chai which comes 71 from the chai itself. 72 So this cutting has all 73 the properties, temperature 74 and the strength as well. 75 I go ahead and say that, hey, 76 I want to print 77 this cutting chai as temperature. 78 So can I go ahead and print this? 79 You might be thinking, all right, 80 I can go ahead and do that. 81 No much of an issue. 82 There we go. 83 It gets a hot. 84 All right, everything expected. 85 Now what happens if I go ahead 86 and take this cutting chai and take 87 its temperature and instead of 88 the hot, I convert this into mild. 89 Surely I know that 90 this will be changed. 91 And if I go ahead and print this 92 again, the cutting dot 93 temperature and we'll put up 94 a message as well, just like this. 95 After changing looks good. 96 And I also want 97 to check one more thing. 98 Direct look into the class. 99 So you might have guessed already 100 what I'm trying to do in this case 101 I'm trying to directly access 102 the chai and the temperature here. 103 Fair enough. 104 What do you think will be 105 the values at line number 106 10 and line number 11? 107 Guess it. 108 It's actually good activity. 109 So what you're going to notice 110 in this one that if I go ahead 111 and check it after changing it 112 smiled, that's obviously and direct 113 look into the class, it's still hot. 114 We have seen that already. 115 We have had a quite 116 discussion on this one. 117 Now the only thing which changes 118 now let's just say I use a del, 119 which is a deletion operator and 120 I go ahead and say that 121 cuttingchai temperature now needs 122 to be deleted and now after 123 deleting it I want to check that 124 what's the value of this cutting 125 dot temperature? 126 That's interesting. 127 You have deleted that in line 128 number 13 and just after deleting 129 it you want to check it. 130 What could be the value? 131 Is it unknown? 132 Like is it none undefined? 133 Don't get the value, get the error 134 or we get still 135 the mild or we get the strong. 136 Lots of question and that's 137 what investigative study is. 138 And this is exactly the attribute 139 shadowing is if I go ahead and run 140 this, it still gets the heart. 141 So if somehow the reference 142 of this variable or the object 143 attribute is no longer available, 144 then it fall backs to the value 145 of the attribute which was 146 defined in the CHAI itself. 147 That's the interesting part. 148 Now let's go ahead and say that 149 if we don't have the temperature 150 or if we try to add some value 151 and we don't have this, here. 152 So for example, let's just say 153 in this cutting I go ahead and 154 say I have a cup and the cup 155 value is going to be small, 156 can I go ahead and print the 157 value? 158 Of course you can go ahead 159 and print the value. 160 Let's go ahead and duplicate this. 161 And we'll say not after 162 changing, we'll say cup size is. 163 And we will say this will be 164 directly cup surely doable. 165 Very, very doable. 166 If I go ahead and look 167 at this, cup size is small. 168 No problem there. 169 We got this value. 170 But what if I go ahead 171 and try to delete this one 172 very interesting case. 173 So if I go ahead and delete 174 the cup reference and now if I try 175 to just print the value, what 176 will happen in that case? 177 This time the value doesn't exist. 178 In the class. 179 Now this also gives 180 an interesting result. 181 You need to see this. 182 So notice here this time. 183 This is an attribute error. 184 The chai object has no attribute 185 because you injected that 186 attribute, but you actually 187 deleted that attribute. 188 So there's no fallback. 189 But if it happens that 190 the fallback is there in the chai, 191 it will get the value 192 the default fallback there. 193 And that's exactly the shadowing. 194 So if there is nothing 195 to fallback, the shadow will fall 196 onto the class itself. 197 If it doesn't exist in the class, 198 there is no fallback for it. 199 And that is it. 200 That is your attribute shadowing. 201 Hope you understood this. 202 Hope you got the concept clearly, 203 nicely, and please rate us. 204 Let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 Attribute shadowing in python.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/03 Attribute shadowing in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0010850305,
      -0.002731208,
      0.029981,
      -0.06102217,
      -0.028460737,
      0.007598498,
      -0.004929357,
      0.018999355,
      0.009735076,
      -0.0011378716,
      -0.004256654,
      -0.010228029,
      -0.00083574175,
      0.009759552,
      0.12184338,
      -0.0061643296,
      -0.032566495,
      -0.01868852,
      0.0057120556,
      -0.007807022,
      -0.0030743463,
      -0.004968997,
      0.006303772,
      -0.0056335763,
      0.0076709944,
      0.006704056,
      0.020326557,
      0.019889358,
      0.04679491,
      -0.0069125285,
      -0.025116792,
      0.023767263,
      0.023459971,
      0.019971961,
      0.0051805647,
      0.0055150827,
      0.0109914,
      0.0050694654,
      -0.030186767,
      -0.00558664,
      -0.030183788,
      0.015057311,
      0.0027882094,
      0.0019534894,
      0.016969565,
      -0.01993756,
      0.02171256,
      -0.013228689,
      0.0063114013,
      0.005972836,
      0.0220209,
      0.019675888,
      -0.010213769,
      -0.17779073,
      0.017915994,
      0.0055177337,
      -0.012583034,
      0.006914094,
      0.00025030863,
      0.0073360023,
      -0.025376234,
      0.015825573,
      -0.012092236,
      -0.006350638,
      0.012926269,
      -0.030427562,
      0.018954162,
      0.0012560957,
      -0.007292211,
      0.008648788,
      0.022843942,
      0.008139324,
      -0.033824638,
      -0.005539774,
      -0.013769545,
      -0.030880246,
      0.011029772,
      0.014576045,
      -0.0037325015,
      0.020709384,
      -0.006260742,
      -0.0023685386,
      0.01579944,
      -0.017643172,
      0.024141522,
      0.003852024,
      -0.026284836,
      -0.019963617,
      0.0026107533,
      -0.015377907,
      -0.015217636,
      0.0042453115,
      0.0108092725,
      0.030363182,
      -0.008081844,
      0.019103767,
      -0.016355287,
      0.018097645,
      -0.010281472,
      0.00742088,
      0.013948769,
      -0.009867899,
      -0.014505775,
      -0.030663894,
      -0.013163964,
      -0.014153448,
      -0.004734299,
      -0.01192563,
      -0.01511408,
      0.01370597,
      0.0112550305,
      -0.012473285,
      -0.011326454,
      0.009352458,
      0.01840997,
      -0.15615554,
      0.024726514,
      -0.018776143,
      -0.019915706,
      0.008165416,
      0.0039611766,
      0.00032930204,
      0.005051676,
      0.005042992,
      -0.016730448,
      0.0052957307,
      0.017847834,
      0.024738166,
      0.00017199374,
      -0.0121976035,
      -0.029659033,
      -0.010764853,
      0.007997737,
      0.005839132,
      0.0067902557,
      0.0011958643,
      -0.0011473614,
      -0.011393903,
      -0.028779726,
      0.008040187,
      0.000749999,
      0.007208203,
      -0.000102646394,
      0.019828077,
      -0.015693108,
      -0.03595346,
      -0.0060739587,
      0.003947945,
      -0.0265264,
      -0.03740896,
      0.014092951,
      -0.022185462,
      0.017676653,
      -0.0079930695,
      0.0125366645,
      -0.024324438,
      -0.0013439442,
      0.020298375,
      -0.0043644626,
      0.021287037,
      0.02366602,
      0.012380024,
      0.000808761,
      0.0034923807,
      -0.023021378,
      -0.0033485142,
      -0.005924201,
      -0.0012176287,
      0.029825605,
      -0.0031036425,
      -0.015815409,
      -0.01694623,
      -0.006597451,
      0.017150134,
      0.009139999,
      -0.013099605,
      -0.0026630284,
      0.012564482,
      0.017536806,
      0.0021422321,
      -0.0004292211,
      -0.0092303725,
      0.01837162,
      -0.0040277494,
      0.0023054418,
      -0.0008155384,
      -0.0065007852,
      0.015228767,
      0.00243199,
      0.021305686,
      0.013699601,
      -0.005705503,
      0.010895693,
      0.0132552,
      0.030175246,
      -0.010744027,
      0.0009159695,
      0.015633184,
      0.015581197,
      0.023495672,
      0.024835724,
      -0.00008143272,
      -0.01064042,
      -0.013902737,
      0.021251606,
      0.001953324,
      0.013698734,
      -0.020135574,
      -0.009820805,
      0.03094073,
      -0.023975406,
      0.0013187722,
      0.026651286,
      -0.017525565,
      0.021976937,
      -0.01660368,
      0.011899659,
      -0.019979535,
      0.011091125,
      -0.028904488,
      0.007082625,
      -0.0055179596,
      0.0057755644,
      0.02392105,
      0.016725982,
      -0.020133957,
      -0.016150676,
      -0.0028798415,
      -0.0055929637,
      -0.008943132,
      0.037140545,
      -0.0011001264,
      -0.036514945,
      0.016005147,
      -0.02149551,
      0.00876287,
      -0.0297119,
      0.018330907,
      0.00848532,
      -0.004140593,
      0.0065985243,
      0.007061809,
      0.012469265,
      -0.005798974,
      0.031801775,
      -0.00023719404,
      0.0056604287,
      0.006943716,
      -0.021465937,
      -0.025132151,
      -0.0037614708,
      -0.004761319,
      0.010636602,
      -0.026992077,
      0.014900683,
      -0.02974555,
      -0.0270162,
      0.006956035,
      -0.012816177,
      -0.0054269372,
      0.0015262164,
      0.0043202373,
      -0.019618334,
      -0.0030367034,
      0.016257195,
      -0.009017395,
      -0.0017873507,
      0.035665568,
      -0.009754715,
      0.027159555,
      0.012224351,
      0.019832667,
      0.0028692493,
      0.013339768,
      -0.027415913,
      0.0052192095,
      -0.09415064,
      0.034431353,
      -0.00453908,
      -0.02695941,
      0.020117931,
      0.014578065,
      -0.040244896,
      -0.021934178,
      -0.0087409755,
      0.014609825,
      0.0026767813,
      -0.0104005,
      0.011309398,
      -0.018303335,
      -0.006528689,
      -0.03890522,
      -0.02266676,
      0.0015492805,
      0.008586833,
      -0.023058007,
      -0.006105316,
      -0.015412783,
      0.007628514,
      0.0019300637,
      0.028638758,
      -0.009459826,
      0.003912576,
      0.022414403,
      -0.00032085713,
      0.013587786,
      -0.0058037704,
      0.027055416,
      0.0038988614,
      -0.0036834273,
      0.0066688564,
      -0.0033929348,
      0.008052867,
      -0.033402074,
      -0.0028198662,
      -0.019711895,
      0.03597671,
      -0.010674722,
      0.014080604,
      0.03138744,
      -0.0014149243,
      0.014761821,
      -0.0027490656,
      -0.0031031452,
      -0.019994011,
      -0.0024508429,
      -0.0079218075,
      0.0073279343,
      0.02854175,
      -0.012248611,
      0.008369489,
      0.03230475,
      0.009012307,
      -0.009156251,
      0.004105819,
      0.0140161505,
      -0.010256923,
      0.002241122,
      -0.0049823783,
      -0.011537406,
      0.02340195,
      0.002908154,
      0.008634329,
      -0.012683104,
      0.0002971427,
      0.02658103,
      0.011660733,
      -0.0013762232,
      0.0004453574,
      -0.00965772,
      0.008448914,
      0.0006728579,
      0.0020522033,
      -0.018627562,
      -0.028760754,
      0.024095984,
      0.012045645,
      0.00004216598,
      -0.0016957674,
      0.008188138,
      0.008614198,
      0.017306456,
      0.0067809885,
      -0.009919886,
      0.013566928,
      -0.03429825,
      0.0133342715,
      0.015845118,
      -0.014521335,
      -0.00017590405,
      -0.019652385,
      -0.0014467594,
      -0.016910378,
      -0.009017775,
      -0.010265384,
      0.03137938,
      -0.009328675,
      0.0013210623,
      -0.042273354,
      0.007873515,
      0.006875131,
      0.009646446,
      -0.034428634,
      0.003026537,
      0.006634588,
      -0.0074146874,
      0.015315258,
      0.00342296,
      -0.013300854,
      -0.01499316,
      -0.015155395,
      0.011859146,
      0.010987802,
      0.025267532,
      0.013032107,
      -0.027303733,
      -0.0045646466,
      0.008049712,
      -0.011430428,
      -0.020402381,
      0.018696286,
      0.014049376,
      -0.019425808,
      0.0128365755,
      -0.018030751,
      -0.02472104,
      -0.03649859,
      0.009062996,
      -0.013291418,
      -0.021476224,
      -0.010029376,
      -0.006464476,
      0.0048353435,
      0.00048906246,
      -0.018697327,
      0.007620099,
      -0.04072462,
      0.0075741876,
      0.002561826,
      -0.015148962,
      0.002089021,
      0.008893603,
      -0.021613318,
      -0.00069073285,
      -0.020228889,
      -0.007790764,
      -0.021197718,
      -0.031212464,
      0.005448612,
      0.014646894,
      -0.009670555,
      0.011387017,
      -0.012807525,
      -0.018035855,
      -0.019944202,
      -0.023599247,
      0.011385172,
      0.010596041,
      -0.006730281,
      0.0048940596,
      0.04014083,
      0.0010323097,
      -0.0039548734,
      0.014238279,
      -0.016166598,
      -0.010364274,
      0.0015369633,
      -0.00645482,
      -0.034630526,
      -0.0098444335,
      0.012437021,
      -0.006967814,
      0.015603968,
      -0.0054176124,
      0.008240052,
      0.021672675,
      0.0292826,
      0.01595798,
      -0.008439196,
      -0.0058766324,
      0.0028699755,
      -0.0029731942,
      0.019872291,
      0.009910734,
      -0.032389916,
      -0.0029589017,
      0.009612457,
      -0.015065176,
      -0.0013167125,
      0.013875237,
      0.015383198,
      0.005475798,
      -0.0044734688,
      0.0075709634,
      -0.004971814,
      0.012970501,
      -0.0023866144,
      -0.028317016,
      -0.021095572,
      -0.0039075445,
      -0.0037773175,
      -0.03283207,
      -0.0072324695,
      -0.006915255,
      0.013253356,
      0.02736695,
      0.015257138,
      -0.0024444177,
      -0.006048407,
      -0.005866297,
      0.008583941,
      0.008219524,
      -0.0010820801,
      -0.006658726,
      -0.014957971,
      -0.0031442677,
      0.01878344,
      -0.02557115,
      0.02243446,
      -0.020770507,
      0.009381395,
      -0.010679837,
      -0.009647158,
      0.010504724,
      0.002896249,
      0.01328053,
      -0.007274113,
      -0.0124090025,
      0.001991957,
      -0.003016245,
      -0.031327713,
      -0.015857732,
      0.02602236,
      0.006634727,
      0.0044358782,
      0.022861797,
      -0.015061157,
      -0.0077615366,
      -0.010605892,
      0.0035135713,
      0.021334663,
      -0.013561595,
      0.01154524,
      0.005767256,
      0.0007696711,
      0.008309378,
      0.009703335,
      0.014603901,
      -0.0032955937,
      -0.0023708479,
      -0.034225978,
      0.023019213,
      -0.014350502,
      0.017482463,
      -0.022432549,
      -0.00490136,
      0.022258379,
      0.021983704,
      -0.01016892,
      0.0027464377,
      -0.009055351,
      0.01770771,
      -0.0024029631,
      -0.0028037566,
      0.012512175,
      -0.12906288,
      -0.008786617,
      -0.00772827,
      0.0015065327,
      -0.0004155233,
      0.009886546,
      0.0032529708,
      -0.03478263,
      0.017816156,
      0.003036015,
      0.029360598,
      0.008045303,
      0.0011863397,
      -0.016226845,
      0.028289199,
      -0.0041137864,
      0.006644909,
      0.0050733997,
      0.012791469,
      -0.004561773,
      -0.006929781,
      -0.014321899,
      0.010553375,
      0.008167765,
      -0.018257502,
      -0.027140174,
      -0.00237192,
      -0.014090101,
      -0.006279709,
      -0.0003781723,
      -0.014602111,
      -0.009106928,
      0.006034929,
      0.027583493,
      0.0042445324,
      -0.01822956,
      -0.021696163,
      -0.010011666,
      0.018500356,
      0.021804838,
      -0.008999807,
      -0.02350822,
      0.029988104,
      -0.0050423625,
      -0.0006001103,
      0.018576592,
      0.02769942,
      -0.0026470753,
      -0.012861314,
      0.023698162,
      -0.02319685,
      -0.012465898,
      0.008416895,
      -0.045694638,
      -0.0287252,
      -0.01030743,
      0.014165957,
      -0.008069213,
      -0.009615661,
      -0.021358885,
      0.0016672825,
      0.0042793634,
      0.027024629,
      0.015946066,
      0.015366753,
      0.012401071,
      0.023969399,
      0.009827108,
      -0.009586567,
      0.004874758,
      -0.016220605,
      0.0117137,
      -0.008494251,
      0.0030025495,
      0.01711916,
      0.0045091966,
      -0.010198337,
      -0.0037598088,
      -0.023771448,
      -0.00880662,
      -0.016608851,
      -0.011121413,
      -0.08260773,
      -0.04033131,
      0.005670075,
      0.022781422,
      0.019508053,
      0.01633,
      -0.01348157,
      0.0074282843,
      0.004152365,
      -0.006511087,
      0.0054608188,
      0.014273583,
      -0.0010904446,
      -0.0120422095,
      -0.0007480332,
      -0.010864519,
      -0.016197795,
      -0.017922137,
      -0.024142323,
      0.0001417121,
      -0.0013634162,
      -0.029833278,
      -0.013921745,
      -0.023109175,
      0.01856476,
      0.016616106,
      -0.0020897177,
      0.02630726,
      0.0025723162,
      0.00006551875,
      -0.0021695057,
      -0.13898303,
      0.0025185593,
      0.004246591,
      -0.015056891,
      -0.005032442,
      0.0048886817,
      -0.012687494,
      -0.017799143,
      0.008733344,
      0.0024009312,
      0.020499215,
      0.009057495,
      -0.002249523,
      0.0015481387,
      0.010019404,
      0.12355681,
      -0.016625935,
      0.014472248,
      -0.018390873,
      0.0010350364,
      0.006634306,
      -0.012420974,
      0.008927516,
      0.010470752,
      0.0077377134,
      -0.0075415075,
      -0.0027761718,
      0.0016592224,
      -0.00066837785,
      -0.030309431,
      -0.005127395,
      -0.036537487,
      -0.00058561325,
      0.041056477,
      -0.0073730634,
      -0.014873656,
      0.012441264,
      0.014375948,
      -0.005457438,
      -0.009348561,
      0.016266674,
      -0.0069724256,
      -0.0028792568,
      -0.016541641,
      0.011142472,
      -0.006112528,
      0.009273158,
      -0.012226575,
      -0.015488235,
      -0.0015793358,
      -0.024031486,
      -0.05595362,
      0.012888351,
      0.0017999209,
      -0.012710505,
      0.0037541892,
      0.010797424,
      0.037580658,
      0.015957259,
      0.010210627,
      0.0041415705,
      0.0046038865,
      -0.017299274,
      0.013967887,
      0.009227497,
      -0.0009561786,
      0.022909421,
      0.031615917,
      -0.003330107,
      -0.0016697363,
      0.01314277,
      0.02556929,
      -0.011665423,
      0.018465102,
      -0.010348684,
      -0.01288731,
      -0.012536285,
      0.015265725,
      0.0074592223,
      -0.007328267,
      0.006152618,
      -0.009851045,
      0.0029886875,
      0.004261241,
      0.02004693,
      -0.008166133,
      -0.007467868,
      0.02076756,
      -0.002837398,
      -0.00091977,
      0.018896418,
      -0.011947046,
      -0.018339686,
      0.021226266,
      -0.012765812,
      0.012474167,
      0.0012673346,
      -0.022509743,
      0.034870453,
      0.023944449,
      0.00571164,
      -0.01657519,
      -0.024055988,
      -0.030928604,
      0.014047984,
      0.03519199,
      -0.012170511,
      0.009483365,
      -0.012673912,
      -0.009338451
    ]
  },
  {
    "id": "genai_cohort_python_04_Self_argument_in_python_vtt",
    "content": "Alright, so next up we want 2 to see about the self argument. 3 And so far we have seen that we 4 are just creating properties. 5 Now we want to see how 6 we can create methods. 7 And don't you worry, methods are 8 just a fancy name to functions. 9 If they are created inside the class, 10 they are called as methods. 11 Again, there is no right and wrong. 12 You can call them functions as well. 13 There is no big deal. 14 But most of the time we want 15 to be technically accurate. 16 There are a lot of names in the world 17 of programming jargon, so I just 18 wanted to make sure that it's there. 19 Let me share the screen 20 and actually we can just directly go 21 onto the code file without 22 much of the explanation. 23 That would be super simple for you. 24 Let's create a new file 25 and call this one as 04. 26 This is self args. 27 I'll show you what the self 28 args means or in short 29 for self arguments. 30 Let's open this up and the first 31 thing we'll do is make sure 32 that the AI is not bothering us. 33 So, so let's go ahead 34 and create a class. 35 So this is our class 36 and we're going to create a class 37 that call as chai cup. 38 Yeah, we are taking 39 a different route this time. 40 Not just chai chai cup. 41 I know that the size of a chai cup 42 is going to be, let's just say 150. 43 Wondering what this 150 is? 44 We are internally 45 referencing as milliliters. 46 Feel free to use any other size, like 47 medium small, whatever you wish. 48 Now I do have a method inside this. 49 Now notice the indentation. 50 This is the most important part. 51 But we are defining a method, but we 52 can call it as function as well. 53 Nobody's going to judge you 54 except interviewer. 55 I will call this one as describe. 56 So what this describe function does, 57 it actually goes ahead and reference 58 the size and print it nicely 59 that this is 150 milliliters 60 of cupchay, something like that. 61 So for this, the first thing 62 that you always do in all 63 the methods is you write self. 64 This is the step one. 65 What is this self that 66 we are passing in here? 67 Self is a reference to all 68 the parameter, all the properties 69 that you are defining here. 70 It could be one, it 71 could be many as well. 72 Just after passing this self, you can 73 actually refer to any variable that 74 you have declared within the class. 75 After you come up here you 76 can simply go ahead and say I 77 want to return a simple 78 formatted string that says a. 79 And now I can refer to this. 80 But how do I refer? 81 Just say size. 82 Nope. 83 You actually don't do this, you have 84 to refer it like this, self 85 dot and then you see the size. 86 Whenever you are doing anything 87 inside the class and you 88 want to refer to any function 89 or any property variable, 90 you use self, then a dot 91 and then only you refer that. 92 And this says ML cup Chai. 93 All right, ML Chai 94 cup would be better. 95 Chai Cup. 96 There we go. 97 That is it, that is all it takes. 98 How do we use it? 99 Surely we can create a simple 100 cup that comes from chai cup. 101 Just like that, we have created 102 an object from the class. 103 Now all I have to do is just 104 print the value just like this 105 and I can say cup dot describe. 106 It's a method, so you 107 execute it just like that. 108 Super simple. 109 I can just go ahead and do 110 more fun stuff on this. 111 I'll show you that actually I can 112 refer to this directly as well. 113 So that's also possible. 114 Instead of creating an object, 115 I can directly refer to my class. 116 And you will do this quite a lot 117 in your Python code. 118 And then further I can just 119 go ahead and say describe. 120 But this is going 121 to give you an error. 122 We need to see the error as well. 123 So first we'll just comment this 124 down and we'll see what the error 125 actually comes up and how it works. 126 So let's first run this as it is. 127 So there we go, we'll just 128 go ahead and say Python 129 and please run the 04. 130 This is as it is, as expected, 131 a 150ml cup of chai. 132 But what happens when I go 133 ahead and try to describe? 134 I know that this is a cup Chai Cup. 135 It is my class name. 136 I'm well aware of it. 137 I do have a describe method as well. 138 It should work technically. 139 All good. 140 But you forgot one thing. 141 We are passing a parameter self here 142 that is really important. 143 So what good goes wrong when I 144 don't go ahead and pass on this? 145 It says, hey, the Chai cup describe 146 is missing one positional argument, 147 as we said, this self here. 148 So how can we pass on. 149 Now this is a positional argument, 150 but also it's a type of self. 151 That means it is referencing 152 to the class as of now right now, 153 but can also refer to the object. 154 Notice here we created one 155 object cup here, so I will give 156 you the context right now. 157 It doesn't understand that, hey, 158 who is calling the describe? 159 And if an object calls the describe? 160 Okay, I got the context that this guy 161 is calling it, but there could be 162 hundreds of other objects as well. 163 For example, if I go Ahead and say 164 this is going to be cupto 165 and this is also a chicup. 166 And if same thing happens, 167 somebody is trying to print, that 168 cup two is also calling the describe 169 just like this. 170 There should be some difference 171 between the line number 172 nine and line number 13. 173 So this is also calling 174 the describe method. 175 This is also calling 176 the describe method. 177 Which should I listen, maybe this has 178 modified my size to 120 milliliters. 179 That could be the case. 180 So we need to pass on the context, 181 we need to pass on the reference. 182 And when this object calls this 183 method describe, it automatically 184 passes its references. 185 When this Cup 2 passes 186 to the describe, it 187 passes its reference. 188 But when we call it directly 189 from this, it has no idea what 190 reference should I take up and how 191 to fill up these variables. 192 So one quick solution that could 193 be that, hey, I'll just go ahead 194 and pass on cup to you and I will 195 comment this for a moment now 196 that you understand the context 197 of it. 198 There we go. 199 Now if I go ahead and run this, this 200 says okay, I am 150ml of cup chai. 201 That's great, but maybe you have 202 modified this in the Cup 2. 203 So for example, in the Cup 22 you 204 came forward and says the size value 205 is going to be just 100 milliliters. 206 Maybe we are showing 207 some frugality here. 208 So I'll just go ahead and say 100. 209 Now if I go ahead and run this 210 describe, it again needs some 211 context to be passed on. 212 I'll say that, hey, I'll 213 pass you the cup too. 214 So there are two different 215 references of this one. 216 I'll go ahead and run this. 217 And there we go. 218 And my bad, we actually shouldn't 219 be passing up like this. 220 So cup2 dot describe and where is 221 it founding the mistake Describe. 222 Let me just quickly. 223 Oh, my bad. 224 It shouldn't be calling as an object, 225 it should be calling up as a class. 226 My bad. 227 I'll take that responsibility fully. 228 And now if you run that, 229 we can see that one is 150ml 230 and another one is 100ml. 231 This is bottom one is 100ml. 232 This one is 150ml. 233 So both are totally accurate 234 way of calling the methods 235 inside the class. 236 In one you are calling via 237 the object so it has the context. 238 But on the other hand you are calling 239 it directly from the class itself. 240 The class doesn't have the context 241 so you have to pass on the context. 242 And almost every method that you 243 are going to pass like this. 244 Almost all the class they are almost 245 like 99% of the time they do held 246 the self have the self reference. 247 So the easiest way is always 248 to create an object 249 and then call the methods. 250 But there are exceptions. 251 They're always there. 252 That is it for this video. 253 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 Self argument in python.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/04 Self argument in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0142540075,
      -0.015726475,
      0.02759528,
      -0.06523844,
      0.002162665,
      -0.009307296,
      -0.002119346,
      0.02415788,
      -0.0017601878,
      -0.0026005192,
      -0.018611412,
      -0.021515615,
      -0.01672713,
      0.020576322,
      0.12197169,
      -0.010812442,
      -0.009928713,
      -0.017108085,
      -0.008049456,
      -0.018013231,
      -0.012351888,
      0.020780802,
      0.012404683,
      0.022460679,
      0.02398123,
      0.0036141786,
      -0.0011333766,
      0.020252556,
      0.04545171,
      -0.016848108,
      -0.02635337,
      0.018334022,
      0.012733181,
      0.014581379,
      0.015584198,
      0.01268857,
      0.020835005,
      -0.004397361,
      -0.01259954,
      0.0045129983,
      -0.02465155,
      0.0008361529,
      0.007518211,
      0.0019636245,
      0.020165948,
      -0.028301101,
      0.007706232,
      -0.01934898,
      0.005606985,
      0.013807801,
      0.0073376233,
      0.004971951,
      -0.016152097,
      -0.1770676,
      0.025652822,
      0.011883472,
      -0.010351767,
      0.0023252717,
      -0.0015632185,
      0.017993758,
      -0.012578424,
      0.01556476,
      -0.026103163,
      -0.010740361,
      -0.003804224,
      -0.02403628,
      0.024768235,
      0.014875505,
      -0.0070776823,
      0.0019578987,
      0.02095497,
      0.015407296,
      -0.01543679,
      -0.011853667,
      -0.009990272,
      -0.03053771,
      0.010343481,
      0.006134514,
      0.011955269,
      0.020220872,
      0.004009599,
      -0.014674755,
      -0.005409713,
      -0.0025362335,
      0.0140234055,
      -0.017948769,
      -0.030508647,
      -0.02561717,
      -0.0013423484,
      -0.017315626,
      -0.0066199917,
      0.016308349,
      -0.0053597875,
      0.015799742,
      0.0042318446,
      0.0022801182,
      -0.029902145,
      -0.00802883,
      -0.021885464,
      -0.012280728,
      -0.008336092,
      -0.014435736,
      -0.030562785,
      -0.0038164007,
      0.0064161136,
      -0.006488044,
      -0.0038722397,
      -0.00083432795,
      -0.028462488,
      0.00010684934,
      0.0011779878,
      -0.028760321,
      0.0049929717,
      0.012748037,
      -0.00003083972,
      -0.17567582,
      0.009158683,
      -0.0014992121,
      -0.0036648691,
      -0.010787892,
      0.0057571693,
      -0.0015364905,
      0.011762911,
      0.009295731,
      -0.014013044,
      0.013506095,
      -0.013381199,
      0.009045728,
      0.018788746,
      0.012741233,
      -0.029717416,
      -0.029719068,
      0.006634641,
      -0.0013252713,
      -0.0005966294,
      0.024886342,
      -0.009349209,
      -0.016932886,
      -0.018116226,
      -0.007005144,
      0.003188276,
      -0.0022607078,
      0.0018552244,
      0.027668772,
      -0.007846217,
      -0.0144605525,
      0.0005193623,
      -0.0026201967,
      -0.041732255,
      -0.03008938,
      0.025587657,
      -0.009925549,
      0.020008292,
      0.0044062044,
      0.006387349,
      -0.01335479,
      0.009048611,
      -0.01109197,
      0.005299537,
      0.020336974,
      0.00929199,
      0.018706584,
      -0.00015018047,
      0.016161434,
      -0.013322817,
      0.0058165747,
      -0.008831074,
      0.014115916,
      0.026505416,
      0.033480365,
      -0.0032117623,
      -0.022007996,
      -0.0030752856,
      -0.009918716,
      -0.010567741,
      -0.013491303,
      0.0054142303,
      0.00564814,
      0.014136394,
      -0.015982902,
      -0.0005109427,
      -0.014352416,
      0.018375287,
      -0.02208047,
      0.024980735,
      -0.0073763765,
      -0.015567833,
      0.0124910055,
      0.013284531,
      -0.007419227,
      0.015674172,
      -0.0011839323,
      0.02729449,
      0.009973061,
      0.018596012,
      -0.008388808,
      -0.019600112,
      -0.0072604287,
      -0.007609821,
      0.018131172,
      0.01689989,
      -0.0056904163,
      0.002763836,
      -0.02731134,
      0.014469064,
      -0.00038437397,
      0.009801469,
      -0.007984958,
      0.0027049761,
      0.001902128,
      -0.027430702,
      0.0023496593,
      0.015008143,
      0.02734363,
      0.022687038,
      -0.0047319382,
      0.022405125,
      -0.01668335,
      -0.0039563323,
      -0.0147961965,
      0.02150728,
      0.008330687,
      -0.0046823155,
      0.0064674644,
      0.006646474,
      -0.0032020183,
      -0.003849552,
      -0.007925162,
      0.011106677,
      0.028818179,
      0.022585955,
      -0.0045021875,
      -0.021079535,
      0.005509517,
      0.004448443,
      -0.005095714,
      -0.025279792,
      0.027812269,
      0.0019191334,
      0.007365302,
      0.00028616562,
      -0.004587201,
      0.0027964863,
      -0.00021452771,
      0.019038798,
      0.015045651,
      -0.00027230487,
      0.008921905,
      0.00007290011,
      -0.032940604,
      -0.02911706,
      -0.017230118,
      0.021228842,
      -0.010383692,
      0.011875855,
      -0.03075955,
      -0.0103646545,
      -0.009714841,
      -0.037897673,
      -0.005180475,
      0.0045942543,
      0.010734199,
      -0.009227063,
      -0.0036264607,
      0.015836254,
      0.0033939555,
      0.0073575946,
      0.022692362,
      -0.0019180544,
      0.027238913,
      0.019357774,
      0.004115854,
      0.00044855222,
      0.024897967,
      -0.025583213,
      0.0070842193,
      -0.09567796,
      0.041315924,
      0.007572059,
      -0.038240824,
      0.00014729395,
      0.011079215,
      -0.050474145,
      -0.006945129,
      0.01103093,
      0.018429928,
      0.008185895,
      0.0029894612,
      0.019829633,
      -0.0147896875,
      -0.00062998885,
      -0.0030963325,
      0.0068079005,
      -0.021216301,
      0.032077327,
      -0.012660435,
      0.02018088,
      -0.014407245,
      0.006489076,
      0.007169085,
      0.013856996,
      0.006194539,
      0.0033463112,
      0.02327943,
      -0.011231819,
      -0.023208722,
      0.0041992897,
      0.015517139,
      0.0029363746,
      -0.022174563,
      0.0013493346,
      0.008238726,
      0.01692788,
      -0.0195366,
      -0.012340104,
      -0.006729793,
      0.011877124,
      -0.012832948,
      0.011095864,
      0.034395587,
      -0.0057622,
      0.028930584,
      -0.007118412,
      0.0008604389,
      0.0037427158,
      0.011657481,
      -0.0021274358,
      0.0022896477,
      0.013169939,
      -0.012752023,
      0.0098962085,
      0.017844955,
      0.0029968799,
      -0.03409269,
      0.002195321,
      0.01041554,
      -0.0025299164,
      0.017565107,
      -0.0009294747,
      0.0015287343,
      0.030103952,
      -0.020249251,
      0.031715635,
      -0.0014343241,
      -0.02461206,
      0.011965791,
      0.02654681,
      -0.0007606758,
      0.0092323115,
      -0.01868957,
      0.0045239097,
      0.008696294,
      -0.018330364,
      -0.006334231,
      -0.022180272,
      0.024551872,
      0.016768627,
      -0.0033348375,
      0.00940242,
      0.014483058,
      -0.001325944,
      0.01566194,
      -0.01277382,
      0.0016767873,
      0.0090273395,
      -0.0137728285,
      0.0023469569,
      0.020285742,
      -0.008312623,
      -0.0012564277,
      -0.0045384746,
      0.010178361,
      -0.036601584,
      -0.002815454,
      -0.013199326,
      0.014067489,
      -0.021156657,
      -0.008001531,
      -0.0062833973,
      -0.011671878,
      -0.0003169982,
      0.0012514811,
      -0.04146655,
      -0.010381977,
      -0.008830506,
      0.010459838,
      0.01148487,
      -0.010166041,
      -0.034515634,
      -0.00021454284,
      -0.014619847,
      0.0039041007,
      -0.0042324155,
      0.019337725,
      0.024244003,
      -0.003070441,
      -0.009322183,
      -0.0044264705,
      -0.022335483,
      0.006322123,
      0.0025921022,
      0.008941703,
      -0.014516804,
      -0.0013865411,
      -0.00435754,
      -0.039024036,
      -0.037565026,
      0.00402252,
      -0.01342039,
      -0.015021055,
      -0.010714339,
      -0.00937217,
      0.023624936,
      -0.0011508825,
      0.016378922,
      -0.0007298514,
      -0.04167926,
      -0.004896712,
      0.011853037,
      0.0015058207,
      -0.0072264033,
      0.024619373,
      0.00089008524,
      -0.0030556081,
      0.00539052,
      -0.026284423,
      -0.02191971,
      -0.01026204,
      -0.0004256956,
      -0.005669441,
      0.0002590419,
      -0.0023773976,
      -0.0074369647,
      -0.0077602556,
      -0.0011728582,
      -0.03137555,
      0.007660716,
      0.00470522,
      -0.002829461,
      0.006439774,
      0.019157045,
      0.018346768,
      0.007384606,
      0.0036007422,
      0.0034922422,
      0.0046195253,
      -0.017962221,
      -0.011662989,
      -0.027932812,
      0.000448343,
      -0.005042436,
      -0.005661146,
      -0.0027268035,
      -0.01799152,
      0.01157699,
      0.0005689749,
      -0.0028165672,
      0.0060837264,
      -0.00086955796,
      -0.0056350683,
      0.0029094361,
      0.015839607,
      0.0084760925,
      -0.0032230837,
      -0.03477132,
      0.0061007654,
      0.01807675,
      -0.026216794,
      -0.0046970784,
      0.0147432815,
      0.017024742,
      -0.0048679677,
      -0.00026205505,
      0.0032561666,
      -0.015322007,
      -0.006425303,
      -0.004796477,
      0.0023075268,
      -0.027019907,
      -0.0087611275,
      0.010970114,
      -0.015055309,
      -0.014008381,
      -0.005698639,
      0.00093411526,
      0.007830384,
      0.017947953,
      0.005498359,
      -0.01334203,
      0.011430486,
      0.034938596,
      0.012379874,
      0.02390907,
      0.003179162,
      -0.03279192,
      -0.016722856,
      0.021943642,
      0.0031692407,
      -0.0033791328,
      -0.02720385,
      0.007579383,
      -0.011319368,
      -0.00938528,
      0.008968137,
      0.0072717993,
      0.016454305,
      -0.02166852,
      0.004660695,
      -0.005581033,
      0.00088231044,
      -0.009687961,
      -0.015722418,
      0.017753618,
      0.020573337,
      -0.014527324,
      0.037453707,
      -0.0076905587,
      0.005933668,
      -0.006356936,
      -0.0067361374,
      0.015487538,
      0.004870498,
      0.009552351,
      0.008027134,
      0.0019970112,
      0.0019114307,
      0.019270027,
      0.0139403595,
      0.0081432825,
      -0.009395454,
      -0.022223342,
      0.021112198,
      0.010767639,
      0.022700367,
      0.0028071813,
      0.00085511367,
      0.027722426,
      0.009815361,
      -0.0112384865,
      -0.0062796064,
      -0.018914858,
      0.0030119473,
      0.001653396,
      -0.008044892,
      0.00821275,
      -0.13703765,
      -0.0057631973,
      -0.0341936,
      0.014752497,
      -0.011035744,
      -0.001641495,
      -0.0063134064,
      0.0035972416,
      -0.008501931,
      -0.023063222,
      0.02314345,
      -0.0077971052,
      -0.004801513,
      -0.010558049,
      0.01602299,
      0.00927857,
      0.0124634085,
      0.027045568,
      0.021121839,
      0.013384516,
      -0.0026937795,
      0.010654562,
      -0.007832072,
      -0.00034240226,
      -0.014853714,
      -0.0075452435,
      -0.0044117025,
      -0.0034176148,
      0.0030091002,
      -0.0060150786,
      -0.013959008,
      -0.02088298,
      0.001060337,
      0.013936451,
      0.014555424,
      -0.015460111,
      -0.013336881,
      -0.0060294145,
      0.02528238,
      0.029691778,
      0.008438079,
      -0.020432342,
      0.024690067,
      0.0037662461,
      -0.018981466,
      0.021830522,
      0.005219551,
      0.0020480596,
      -0.007240083,
      0.043606903,
      -0.017896498,
      -0.0025069795,
      -0.001653064,
      -0.026702406,
      -0.009211542,
      -0.0045879916,
      0.019779054,
      -0.00037888446,
      -0.0027208359,
      -0.005059788,
      0.012439533,
      -0.0069929934,
      0.0117333075,
      0.032776594,
      -0.0023816496,
      0.010297649,
      0.028488742,
      0.0058812983,
      -0.022415703,
      0.012582989,
      0.0017493324,
      -0.0013977238,
      -0.0041978555,
      0.018776596,
      0.0071102274,
      -0.004118801,
      -0.015065154,
      0.021815578,
      0.00791676,
      -0.0009081798,
      -0.02737343,
      -0.00824337,
      -0.06436768,
      -0.017470386,
      0.009003497,
      0.016946768,
      0.00025670129,
      0.016399954,
      -0.021015316,
      0.007692522,
      -0.0065965164,
      -0.0101907905,
      0.012594368,
      -0.011348895,
      0.017735396,
      0.007181532,
      -0.008912499,
      -0.010835804,
      -0.0036350093,
      -0.009113299,
      -0.020316046,
      -0.0064722174,
      0.018665947,
      -0.009700651,
      -0.017815497,
      -0.015543983,
      0.014922303,
      0.041777913,
      -0.00040357833,
      0.008263165,
      -0.01201318,
      0.0024401953,
      0.008858313,
      -0.1498271,
      -0.0043947063,
      0.004835766,
      0.01146417,
      0.020169787,
      0.015069202,
      -0.012450951,
      -0.0070520425,
      0.009803585,
      0.005643089,
      0.024133692,
      0.016684217,
      -0.015822487,
      0.0038237094,
      0.02168469,
      0.1198881,
      -0.015611021,
      0.022549342,
      -0.013775554,
      -0.0051102843,
      0.00061512354,
      -0.024620807,
      -0.0361222,
      -0.0110138925,
      -0.0043463428,
      -0.010695083,
      0.008576074,
      -0.004200729,
      0.014211773,
      -0.02010545,
      0.007445838,
      -0.00016679856,
      -0.022354076,
      0.048812535,
      -0.010472811,
      -0.013741628,
      -0.015247174,
      0.0023855125,
      -0.014352714,
      -0.0028608548,
      0.016707016,
      -0.010361214,
      0.0033018219,
      0.0005068731,
      0.019290604,
      0.00033338263,
      -0.03111091,
      0.00050207303,
      0.013698815,
      -0.008500634,
      -0.009836376,
      -0.046069454,
      0.005631423,
      -0.0057399916,
      -0.014653885,
      0.0046597044,
      0.011492805,
      -0.001265969,
      0.015253882,
      0.014763584,
      -0.0024693236,
      0.0037221613,
      -0.018700402,
      0.011651892,
      -0.00094661553,
      -0.014290596,
      0.011548282,
      0.018093288,
      0.00070171343,
      0.008708313,
      -0.0050245947,
      0.032991357,
      -0.0025198094,
      -0.0015863143,
      -0.00040312344,
      -0.0060962057,
      0.0036391916,
      0.028803261,
      0.0029836348,
      0.003419886,
      0.0035604239,
      0.0025025322,
      0.019877475,
      -0.0014691015,
      0.020607736,
      0.025719099,
      -0.016977463,
      0.02488998,
      -0.012025062,
      0.015007261,
      0.007729749,
      -0.00052578206,
      -0.017863734,
      0.019137874,
      -0.00748296,
      -0.0059325285,
      0.010521333,
      -0.016101575,
      0.020334516,
      -0.004272435,
      -0.006328151,
      -0.017578157,
      0.00086093665,
      -0.01403945,
      0.0052326526,
      0.008870664,
      0.0034790202,
      0.014791212,
      0.0068497905,
      -0.014096851
    ]
  },
  {
    "id": "genai_cohort_python_05_Constructors_and_init_in_python_classes_vtt",
    "content": "Hope you are having fun because 2 I am having so much fun 3 in teaching all of these context 4 and great examples as well. 5 Hope you are enjoying them 6 and you have rated us as well. 7 This is. 8 I know I've been saying this a lot, 9 but if you look at the number 10 of ratings and number of people who 11 are enjoying the courses, there is 12 a strike difference between them. 13 And we pour in all of our 14 heart and soul into this. 15 Just small kind words will 16 make this course as world's 17 best course and people will be 18 able to benefit from it. 19 That's all I want. 20 All right, so let me take you 21 onto the screen again and 22 first of all, what we're about 23 to see, we're about to see the 24 INIT function, which is a 25 pretty interesting and 26 important function. 27 And I'll show you why is 28 it so much important. 29 We again, don't need to have 30 any diagrams for this. 31 Notice this here. 32 So this is the function or 33 the class that we have created. 34 As soon as I create this object, 35 it automatically gets to property 36 the size and the describe. 37 It has access to all of this. 38 But maybe I want 39 to change it something. 40 I want that. 41 Hey, whenever you create 42 an object, just pass me some data 43 so that I can make the first 44 reference really nice. 45 Maybe every single object that 46 creates have this property always. 47 How do I do this? 48 This is known as process 49 of initialization. 50 Initialization in short, 51 is known as init. 52 We'll create a different 53 file for this one. 54 Don't you worry, you'll 55 get the reference of this. 56 So we'll call this one as 57 05 and we'll call this 58 one as init objects py. 59 So how do we do this? 60 First of all, let's say we want to 61 have a simple chai order this time. 62 So for the order it makes sense. 63 And the very first thing that you 64 do before you declare any variable 65 or anything, you can actually do 66 it afterwards as well, no problem. 67 But the name of the method always 68 remains same and there are 69 couple of terminologies as well. 70 So. 71 So the moment you actually create 72 a copy of this class just like 73 this, there is a process to it. 74 This is known as I want to init it. 75 Init, which is also 76 known as initialize. 77 But in the world of Python, this 78 is a reserved keyword, so you 79 actually suffix it and prefix it 80 by 2/ and the whole process is 81 known as I am creating an object. 82 So initiate, initiate, 83 initiate an object for it. 84 And the way you define it is through 85 a reserved keyword or a reserved 86 method known as constructor. 87 Yeah, there is a name for it. 88 We don't call it 89 constructor as per se. 90 In the world of Python itself, 91 this is known as. 92 Yeah, it is actually 93 known as constructor. 94 But the way how we do 95 it is via this init. 96 So this, what you're doing 97 is you, you are creating 98 a constructor Y init. 99 Or you can say, I'm, creating 100 a constructor Y init or init 101 creates a constructor, 102 it just turns, no big deal there. 103 So this method needs to, and needs 104 to always have a name 105 of underscore, underscore init. 106 As you can see, if I just 107 take the auto suggestion, 108 it automatically fills it 109 with the self as well. 110 Self always needs to be there 111 in everyone, 112 but we'll write it so it in it. 113 Then underscore, underscore. 114 Then create a method, 115 call it as self. 116 Any method that you're creating 117 needs to have a self and we'll 118 pass it just as a moment. 119 So this is a valid instructor, 120 but it doesn't do anything. 121 It needs to do something at least. 122 So what we can do is we can just 123 say that, hey, whenever you're 124 creating an object, you just 125 pass me, the type and we can 126 actually use type underscore. 127 I'll show you what it means and how 128 does it work, and I'll just go ahead 129 and create a regular variable size. 130 So so far you have seen 131 the variable names or the properties 132 name as just size or self. 133 What is this type underscore? 134 I'll show you. 135 So what we can do is a, common syntax 136 that, hey, this self dot type, I 137 haven't created the type variable, 138 but the value that I'm going to go 139 ahead and provide you is type 140 underscore. 141 So this is almost like saying 142 that I do have a variable 143 known as type, which was having a, 144 empty value, empty string, none. 145 There could be a variety 146 of values, is there? 147 But this is so much redundant 148 that you don't actually create 149 a variable just like this. 150 If you create your variables 151 for the first time here, that 152 is also totally allowed. 153 So each of the object will 154 have a property known as 155 type, whose value you are going 156 to pass it like this. 157 And then I will go ahead 158 and say I have a one more 159 variable, self dot size. 160 And I know this variable also doesn't 161 exist, but since we are in a very 162 special method known as constructor, 163 we are allowed to do so. 164 In other methods you are 165 not allowed to do so. 166 So I'll go ahead and fill it 167 up with the value size. 168 It is a very common thing that you 169 Name these variable exactly same 170 as you are declaring up here. 171 Surely I can change the name 172 here as well, but that's 173 not a good practice. 174 Let's go ahead 175 and define another one. 176 So I'll just go ahead 177 and say summary. 178 And again, this will also 179 have a self just like this. 180 And I want to return 181 a formatted string that says, 182 what should it say? 183 Self dot size. 184 And it will say ML of and then we'll 185 go ahead and say self dot type chai. 186 All right, so you got this. 187 We are simply saying that what 188 is the size of the type 189 of chai that you are getting to us? 190 A really very vague example, 191 but it's okay, it works. 192 Now let's go ahead 193 and create an order. 194 This time it's not just 195 about saying that, hey, chai 196 order, and that's it. 197 This time we have to pass 198 on some arguments. 199 You don't have to pass on self. 200 That is okay, I'll just go 201 ahead and say I will have 202 a masala, masala chai. 203 And that will be of size 200. 204 That's all I have to do. 205 Let's use a print statement 206 for the order. 207 I can use a method 208 of summary, execute that. 209 So that gives me the value. 210 Now similarly, I can go ahead 211 and provide the more values up here. 212 So let me go ahead and have 213 this order and let's call 214 this one as order two. 215 And this will be like chai order. 216 And this one, my favorite one. 217 Ginger. 218 I'll take a little bit more. 219 I think 300 milliliters. 220 200 milliliters is already too big. 221 220 milliliters. 222 All right, and I'll just print this 223 and in the printing I'll say order 224 two dot summary and execute that. 225 All right, so this is 226 the code that we have. 227 And don't you worry, I haven't 228 forgot this underscore. 229 I'll come back onto this in a minute. 230 So I'll just save this and I 231 will go ahead and run this. 232 This time we'll just say Python 3, 233 run the 05 and all of this. 234 So this works fine. 235 Now let's come back. 236 This is a pretty good example 237 and demonstration of how 238 the constructor works, 239 the init files and whatnot. 240 Now you might be wondering, 241 what's this type about? 242 Why have you given an extra 243 underscore to this type? 244 Does this work? 245 Yeah, but you see 246 an extra formatting. 247 Why this extra formatting? 248 Because you forgot one very 249 interesting thing which I, showed 250 you in the very first class, that 251 actually type is an operator in 252 The Python world, it's a function 253 which gives me the type of 254 whatever you ask it. 255 It is supposed to be used with 256 the function, but since in our case 257 it made sense to use the type, 258 that's why I used the type. 259 But I actually added 260 a trailing underscore. 261 This is a common practice 262 in production as well. 263 Sometimes you want to use 264 the variables which make sense 265 for our software that I want 266 to use type, or I want to use init 267 or I want to use def. 268 Don't use def. 269 Try to avoid it. 270 But I just showed you 271 this very special case. 272 I've seen this 273 in production so many times. 274 So I thought, if I'm not going 275 to discuss these production 276 things with you, who will? 277 And these are small gotchas which. 278 Oh, I knew about the type, but I 279 forgot momentarily about it. 280 All right, you got it. 281 This is simple order which creates 282 a new instance of the class. 283 We are getting technical now. 284 We don't call it as object, we 285 call it as instance of a class, 286 which takes masala as argument. 287 And 200 as argument, which 288 are passed as a parameter. 289 How technical we are. 290 And we just assign these values. 291 If you have more variables, you 292 can just go ahead and define them. 293 If you have more functions, you 294 can just also go ahead and. 295 And define them. 296 So this is all about how we get 297 the constructors and INIT objects or 298 INIT values in the world of Python. 299 That is it for this one. 300 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 Constructors and init in python classes.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/05 Constructors and init in python classes.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.005728825,
      -0.0072851162,
      0.052361187,
      -0.06856563,
      0.012461107,
      0.004218281,
      -0.0067541543,
      0.016096964,
      0.0028792676,
      -0.01942349,
      -0.024415296,
      -0.0056978436,
      0.006988158,
      0.007183407,
      0.13695255,
      -0.008318254,
      -0.008908264,
      -0.030342558,
      0.016453357,
      -0.014232509,
      -0.016061269,
      0.018204823,
      0.018936662,
      0.008469176,
      0.015145958,
      -0.0154510895,
      0.00666471,
      0.01820824,
      0.044974174,
      -0.009352652,
      -0.026448432,
      0.01478475,
      0.014882309,
      0.023368474,
      0.015867172,
      0.016710915,
      0.014486433,
      -0.004094165,
      -0.019717708,
      -0.004046529,
      -0.018343702,
      0.013019127,
      -0.0006178145,
      -0.0027470633,
      0.02104656,
      -0.025527326,
      0.007884561,
      -0.012185607,
      -0.0005923531,
      0.018161213,
      -0.000205913,
      -0.0005850269,
      -0.009226634,
      -0.16497573,
      0.02451042,
      0.010529285,
      0.013877239,
      -0.014545345,
      0.004668138,
      0.0068351864,
      -0.01592298,
      0.013002619,
      -0.024857588,
      -0.00029904704,
      -0.012111654,
      -0.013021556,
      0.025362244,
      0.004824213,
      0.003921798,
      0.0003936379,
      0.014762079,
      0.00795005,
      -0.0032673117,
      -0.00019808515,
      -0.0047907433,
      -0.037063174,
      0.022207972,
      0.010300255,
      0.0130018275,
      0.017937338,
      -0.0041259504,
      -0.004769002,
      -0.011053196,
      0.0077182003,
      0.012880375,
      -0.006631141,
      -0.025089338,
      -0.014392761,
      0.004720786,
      -0.0109898085,
      -0.013499185,
      0.00803653,
      0.008858032,
      0.019610798,
      -0.02573483,
      0.00057943776,
      -0.006953721,
      0.00069967954,
      -0.02270135,
      -0.002950092,
      0.0026863865,
      -0.021429325,
      -0.036159087,
      -0.02082885,
      0.0043478976,
      -0.004213241,
      -0.010738448,
      -0.006270504,
      -0.019235369,
      0.0058945534,
      0.0051689805,
      -0.00618874,
      0.014319516,
      0.00266966,
      0.0042760675,
      -0.16482395,
      0.010894957,
      -0.0013974906,
      -0.019504635,
      0.0030444267,
      -0.0055974643,
      0.009746637,
      0.012992012,
      0.006242465,
      0.009108501,
      0.011167956,
      -0.0007620541,
      0.018863527,
      0.0005060731,
      0.011102088,
      -0.021256804,
      -0.027209556,
      0.010966587,
      0.013918784,
      0.010730868,
      0.017074618,
      -0.000026109523,
      -0.023505958,
      -0.024260027,
      -0.002405364,
      0.0036752624,
      -0.0069940705,
      -0.009418749,
      0.05234707,
      -0.011375833,
      -0.0019729144,
      0.005548938,
      0.0019528597,
      -0.031863943,
      -0.034760553,
      0.014811207,
      -0.014279729,
      0.014017673,
      0.0071873483,
      0.023236705,
      -0.018509256,
      -0.003370865,
      -0.0015735107,
      -0.016364247,
      0.0025903166,
      0.008227604,
      0.02032303,
      -0.0043182997,
      0.019273043,
      -0.011920632,
      -0.0059936848,
      -0.0077955043,
      0.014384045,
      0.019218827,
      0.02541311,
      -0.015421492,
      -0.0039600595,
      0.0035335408,
      0.022635033,
      -0.017167384,
      -0.013795076,
      0.010912074,
      -0.01848247,
      0.024302745,
      -0.017002676,
      -0.0065807262,
      -0.024496755,
      0.005886146,
      -0.008595834,
      0.005924939,
      0.0054112743,
      -0.011619704,
      0.0019015678,
      0.009130257,
      -0.0034055046,
      0.00961481,
      0.011011079,
      0.028750487,
      0.0063779424,
      0.019835016,
      -0.01741863,
      -0.0047279205,
      -0.003012816,
      -0.005696068,
      0.017147066,
      0.030527322,
      0.0018769647,
      0.0010048818,
      -0.018108929,
      0.032731924,
      -0.00047609926,
      0.018038385,
      -0.025862344,
      0.0037728203,
      0.008449802,
      -0.029350612,
      0.0051475293,
      0.014072619,
      0.01595888,
      0.026304953,
      -0.011618776,
      0.010586965,
      -0.006870465,
      0.0071752295,
      -0.0098500075,
      0.011691114,
      0.008182652,
      0.000036349913,
      0.027665501,
      0.0116722975,
      -0.0136202,
      -0.011277743,
      -0.007123798,
      0.002510019,
      0.018709026,
      0.0052851913,
      -0.0070987344,
      -0.013609487,
      0.022929147,
      0.014966171,
      -0.0064703184,
      -0.0056817397,
      0.019627774,
      -0.0058522047,
      0.0064048357,
      -0.013151119,
      -0.0041522654,
      0.007349979,
      0.010322115,
      0.029745633,
      0.010171175,
      0.012975761,
      0.0085104145,
      0.018889157,
      -0.00722785,
      -0.035920642,
      -0.00983241,
      -0.0008721647,
      -0.015749386,
      0.015687728,
      -0.027096273,
      -0.012117063,
      -0.0038920369,
      -0.02767457,
      0.004078333,
      0.0016506793,
      0.015552017,
      -0.012123524,
      -0.00494886,
      0.0029520504,
      -0.008025193,
      0.017598348,
      0.0293788,
      -0.009737859,
      0.018528115,
      0.028059365,
      0.0076601002,
      -0.0051848353,
      0.019505639,
      -0.022703141,
      0.0019584426,
      -0.10289867,
      0.025111023,
      0.009053962,
      -0.035083447,
      -0.00072863174,
      0.0041267574,
      -0.03657726,
      0.00031698105,
      0.008186065,
      0.022684405,
      -0.011094597,
      -0.015170113,
      0.030546917,
      -0.01844371,
      0.0024719457,
      -0.0077519245,
      -0.013726659,
      -0.017431818,
      0.010772375,
      -0.000982642,
      0.01633439,
      -0.0027512067,
      0.006019817,
      0.006278729,
      0.015378455,
      -0.0060458267,
      -0.018247608,
      0.029627109,
      -0.0042518973,
      -0.016788319,
      0.008223695,
      0.0097456435,
      -0.0053382665,
      -0.013921496,
      -0.002200772,
      0.012826142,
      0.013314022,
      -0.0071931146,
      -0.0009958779,
      -0.015113782,
      0.020657359,
      -0.00431728,
      0.030824887,
      0.03226417,
      -0.009566651,
      0.017071724,
      -0.00857162,
      -0.008943326,
      -0.004043956,
      0.013391656,
      -0.006747353,
      0.009755559,
      0.00078388705,
      -0.033497974,
      0.010459872,
      0.021198818,
      -0.0032252094,
      -0.025520526,
      0.008906702,
      -0.004784209,
      0.0109484475,
      0.006709475,
      -0.0016015859,
      -0.0006084487,
      0.0036723248,
      -0.014712331,
      0.014673868,
      -0.0063180486,
      -0.0044015357,
      0.004346118,
      0.012401022,
      0.008320809,
      -0.00363556,
      -0.007746526,
      -0.0008453564,
      0.013081738,
      0.00018731848,
      0.0024714323,
      -0.0076739485,
      0.044533134,
      0.016901657,
      -0.00026879474,
      0.0014037688,
      0.022732075,
      0.0061287093,
      0.027522746,
      -0.001617317,
      -0.0002373741,
      0.002447478,
      -0.018429345,
      0.01128533,
      0.012350114,
      -0.0062187905,
      -0.004428589,
      -0.015143574,
      -0.0016858845,
      -0.014489056,
      -0.013561845,
      -0.025742944,
      0.02668948,
      -0.015462178,
      0.002320714,
      -0.020387243,
      -0.009282985,
      -0.0015961963,
      -0.005764006,
      -0.047281265,
      -0.0033983972,
      -0.0015381905,
      0.011467969,
      -0.0013301624,
      -0.009410752,
      -0.014799736,
      -0.008556756,
      -0.011066097,
      0.02981581,
      0.00207526,
      0.010981453,
      0.028491857,
      -0.019155318,
      -0.01799021,
      -0.021319505,
      -0.014719258,
      0.012059513,
      -0.007859876,
      0.012614084,
      -0.01794728,
      0.010573944,
      0.0039740163,
      -0.04166756,
      -0.01642298,
      0.004175919,
      -0.02371941,
      -0.029327821,
      -0.013546179,
      -0.00722539,
      0.024088975,
      0.00783438,
      0.030464584,
      -0.009842331,
      -0.0155767035,
      0.0012181345,
      0.007980681,
      0.014843954,
      -0.0066837016,
      0.018495977,
      -0.0023131452,
      -0.024226198,
      -0.00038917005,
      -0.017143399,
      -0.017103419,
      -0.025353698,
      0.002497994,
      -0.009740289,
      0.004463616,
      -0.018602474,
      0.009890576,
      0.008968805,
      -0.0060587516,
      -0.030388677,
      0.01417653,
      0.005428528,
      -0.01055314,
      -0.007092356,
      0.025029253,
      0.012203176,
      -0.0000763592,
      -0.0077085425,
      0.026069269,
      0.011388766,
      -0.001432642,
      -0.024692584,
      -0.026626395,
      0.011810242,
      0.007664916,
      0.0008771664,
      -0.0029234164,
      -0.003888707,
      0.0013980855,
      0.016187396,
      -0.0013835893,
      0.007168866,
      -0.011150583,
      0.0050647953,
      -0.0016752125,
      0.013009932,
      0.0023341293,
      -0.0077152243,
      -0.032702465,
      0.0034691324,
      0.0047940114,
      -0.018022615,
      -0.003996291,
      0.016534524,
      0.008698119,
      0.0088182315,
      -0.012823576,
      0.008893482,
      0.013745141,
      -0.0038227893,
      0.0055376505,
      -0.015413092,
      -0.020192202,
      0.001570316,
      0.017224494,
      -0.026601072,
      -0.020627288,
      -0.008352612,
      0.007250574,
      0.013219615,
      0.0049543777,
      -0.0044152043,
      -0.008549956,
      0.007905495,
      0.008492237,
      0.017233483,
      0.0070134313,
      -0.0065804957,
      -0.026640328,
      -0.012731248,
      -0.0039692014,
      -0.008686453,
      -0.005323686,
      -0.018819513,
      0.011576699,
      0.0018192218,
      -0.012111497,
      0.0009746961,
      -0.014590048,
      0.010184993,
      -0.01245899,
      -0.013642729,
      -0.017786806,
      0.009235496,
      -0.023499655,
      -0.029275348,
      0.016779212,
      0.01669217,
      -0.022618968,
      0.033829875,
      -0.0051192557,
      -0.011379919,
      -0.008298205,
      0.0014238608,
      0.008053597,
      -0.0042706,
      0.0023558803,
      0.012915801,
      -0.0014731264,
      0.022265231,
      0.012247652,
      0.013101646,
      0.011294683,
      -0.016289104,
      -0.021859575,
      0.02751925,
      0.008013201,
      0.0046757287,
      0.0034714513,
      0.006700804,
      0.021021284,
      0.0057022683,
      0.007331758,
      0.0017572965,
      -0.010651488,
      0.0067614093,
      -0.014105815,
      -0.00986547,
      0.00654693,
      -0.13192557,
      0.004762249,
      -0.017692007,
      0.02084715,
      -0.0073769777,
      0.010225129,
      0.0013152229,
      0.0066026924,
      0.002314721,
      -0.016552277,
      0.02864875,
      0.0038745028,
      0.0033639022,
      -0.016548682,
      0.012988861,
      -0.0010068412,
      0.0072087455,
      0.0053614904,
      0.021778598,
      0.0071158917,
      -0.00029940397,
      0.021304121,
      0.011269468,
      0.0063455007,
      -0.0123931,
      -0.008155288,
      -0.0032545617,
      0.005789064,
      -0.0014135212,
      0.0042107073,
      -0.009958545,
      -0.0142701,
      0.004145175,
      0.007499582,
      0.009791785,
      -0.024742069,
      -0.013321617,
      0.011881608,
      0.028567275,
      0.011247673,
      -0.005587993,
      -0.0038192074,
      0.034747217,
      0.0024221826,
      0.0013009291,
      0.027483875,
      0.01006352,
      -0.0015894249,
      -0.011672217,
      0.040541496,
      -0.024984015,
      -0.013242968,
      -0.00711923,
      -0.025078876,
      -0.016337205,
      0.0037927176,
      0.0044690226,
      -0.020950109,
      0.009994119,
      -0.008009063,
      0.0015409366,
      0.014090858,
      0.016429398,
      0.038172193,
      0.0005150925,
      0.0037555369,
      0.036938787,
      0.0022892458,
      -0.0070782336,
      -0.0045402357,
      -0.005353144,
      0.004239582,
      0.0030478092,
      0.015925327,
      0.0053499015,
      0.016822038,
      0.00081239885,
      -0.0068872813,
      -0.0021003515,
      0.020087086,
      -0.02095796,
      -0.010299226,
      -0.079022095,
      -0.023914304,
      0.012465775,
      -0.009018612,
      0.013804191,
      0.025083747,
      -0.02244171,
      -0.0107582975,
      -0.0014335307,
      -0.016669326,
      -0.003989165,
      -0.0014951644,
      0.02624046,
      -0.012412526,
      -0.006469498,
      0.018891891,
      -0.00783937,
      -0.02620406,
      -0.028890865,
      -0.019820813,
      0.0033566656,
      -0.015513385,
      -0.01774571,
      -0.029609812,
      0.0071019265,
      0.04349389,
      0.0065916763,
      0.0012738928,
      0.0042518596,
      0.00738525,
      0.012713147,
      -0.1616855,
      -0.017640285,
      -0.014659084,
      0.016789105,
      0.012447815,
      0.0023238128,
      -0.0019606762,
      -0.011430514,
      0.011735759,
      -0.00971417,
      0.020172773,
      -0.0013198875,
      -0.01967839,
      0.0015293454,
      0.036629494,
      0.12781838,
      -0.0073437863,
      0.0034348029,
      -0.014842227,
      0.002840895,
      -0.0053354967,
      -0.007238739,
      -0.023264177,
      -0.012417253,
      -0.009317843,
      -0.012070874,
      -0.0057632285,
      -0.014016152,
      -0.013053018,
      -0.025086183,
      0.0013346124,
      -0.008707128,
      0.013414838,
      0.046369616,
      -0.002928308,
      -0.013584265,
      0.0017425386,
      0.009973248,
      -0.01365503,
      0.004647123,
      0.0024717299,
      0.0005375096,
      0.0011609977,
      0.0145205185,
      0.013496975,
      0.017344955,
      -0.008267235,
      -0.0071264394,
      -0.000733488,
      -0.0004359492,
      -0.0063631134,
      -0.044112198,
      -0.009939233,
      -0.013474098,
      -0.0065683583,
      0.00505817,
      -0.0066940957,
      0.006350439,
      0.00843963,
      0.018919898,
      -0.0024966842,
      -0.013459048,
      -0.014788918,
      0.0051442143,
      0.0007811575,
      -0.021370478,
      0.01642493,
      -0.0006554267,
      -0.0069050933,
      -0.006345459,
      0.0059805894,
      0.017984089,
      -0.0026393423,
      0.0077704624,
      -0.012860338,
      -0.003083496,
      -0.020509942,
      0.013689553,
      0.01095107,
      0.002239032,
      -0.021998383,
      -0.011719853,
      0.0063756127,
      -0.010689702,
      0.022903133,
      0.029654682,
      0.0023606725,
      0.033656336,
      -0.004182196,
      0.005471872,
      0.006442742,
      0.009489951,
      -0.029523365,
      0.016638488,
      0.0037422404,
      0.023865063,
      0.019173091,
      -0.026173998,
      0.028167514,
      -0.004759472,
      0.008662256,
      -0.0044078287,
      0.00043255088,
      -0.03865856,
      0.02255086,
      0.0024800631,
      -0.006063287,
      0.018648954,
      -0.0059781284,
      -0.015479526
    ]
  },
  {
    "id": "genai_cohort_python_06_Inheritance_and_composition_in_python_classes_vtt",
    "content": "Hey there and welcome to 2 a really interesting video. 3 For this particular video, I 4 want your undivided attention. 5 So if you're watching this video, 6 laying down on the sofa or 7 while commuting, please pay 8 a little bit more attention. 9 This video actually requires that. 10 In this video we're going 11 to study about inheritance 12 as well as composition. 13 Inheritance you might have studied 14 in Python quite a lot. 15 Composition is talked really 16 less, but it's used quite 17 a lot in the production. 18 So I want to walk you through. 19 First, let's talk about inheritance. 20 Knowing the inheritance will 21 solve like 90% of our problem. 22 For this video, just like you might 23 have seen inheritance in the real 24 life, that some people inherit a 25 car, some people inherit some 26 great amount of money, some people 27 inherit some house or a great 28 property. 29 That's exactly like how it works. 30 If your dad has earned a great amount 31 of property, you inherit that 32 you don't start from scratch. 33 That's reality of life as well. 34 So same we can do with 35 the programming as well. 36 If some class has done some work, you 37 can just go ahead and inherit that. 38 Yeah, that's allowed in programming. 39 You can inherit from any class. 40 Like there are rules as well. 41 But as of now, let's see that 42 we can inherit from any class. 43 Let's see the demo of this one. 44 I have already created a file 45 for you and we're going to first see 46 the inheritance, then we are going 47 to see the composition as well. 48 It's easy. 49 It's easy. 50 So how do we create a class? 51 Let's go ahead and say that we 52 create a class, call this 53 one as base chai because 54 hey, this is how we create a chai. 55 The base chai always remains same. 56 We create a simple constructor. 57 Remember init 58 in it, that's our constructor. 59 It takes the self as parameter 60 in this and there we go. 61 What it will do is apart from 62 self, let's also take the type. 63 What kind of a chai you 64 would love to have? 65 I would love to have a self 66 type which will be type underscore. 67 There we go. 68 Chai is prepared. 69 Now let's also create a method 70 for preparing a chai. 71 Prepare. 72 This one will be self. 73 Just like that. 74 Every single method gets this. 75 There we go. 76 And this time it prints. 77 It doesn't return anything. 78 Again, my choice. 79 I want to print it. 80 I'll print it. 81 This one is going to say preparing 82 what type of chai you are preparing. 83 I can use self 84 to address any variable. 85 This variable is not being 86 created, but still it exists. 87 Because constructor variables 88 don't need to Be created. 89 Again, if you are creating 90 in constructor, that means 91 it's known that it will be there. 92 And I will say chai with four dots, 93 because four dots makes life fun. 94 All right, so this is how 95 you create the class. 96 We shouldn't have any problem in this 97 the way how inheritance works. 98 Now that you have the, basic idea 99 of how the chai is being made, you 100 can go ahead and say masala chai. 101 There we go. 102 No big deal. 103 Now we use parenthesis. 104 But hitesh, you said no 105 parenthesis in the classes. 106 Yes, I'm still correct. 107 You only use parenthesis 108 in the name of the class. 109 If you want to inherit something. 110 This is where it is compulsory that 111 you present some of the class here. 112 Otherwise it will 113 always give you error. 114 That's a special syntax. 115 Now in this, all I do is, in this 116 inheritance, I just add the spices. 117 So somebody told me in my 118 ancestor that, hey, this 119 is how we make the chai. 120 The next generation came in and just 121 learned how to add the spices on it. 122 That's all we do. 123 So in this one we simply go ahead 124 and say print and there we go. 125 We are going to say adding cardamom. 126 Cardamom, My favorite one. 127 Ginger and I don't like it 128 much, but let's just say it is 129 also adding the clothes. 130 There we go. 131 So this is it. 132 And you might be wondering, okay, how 133 do we create objects and everything? 134 Don't worry, I will walk you through. 135 The creation of object is 136 exactly same 137 and the process also works same. 138 But since we are already here, let's 139 also see how the composition works. 140 That's an interesting 141 concept and idea. 142 This is it, by the way, this is it. 143 This is how all you 144 define the inheritance. 145 This is your base class. 146 Any class needs it. 147 You can just go ahead and pass 148 on that class and that's it. 149 It works. 150 We will see more such example. 151 Now let's see that if I define, 152 another interesting class 153 that says, a chai shop here. 154 All right, no big deal. 155 We can create that. 156 Now notice here, this is 157 not inheriting any class. 158 So what can we do here? 159 Let me show an interesting 160 concept which says chicls, 161 just short for class. 162 By the way, this is 163 just a variable name. 164 Feel free to call it 165 whatever you like. 166 Now in this I can actually 167 hold any of my class as well. 168 Excuse me on that, 169 we'll keep our classes informal. 170 It's just fun. 171 I love to teach. 172 So there we go. 173 I can just go ahead 174 and say base chai. 175 Now notice here something 176 really, really odd. 177 This Is base chai. 178 This is the syntax of inheriting. 179 But hey, where are those things? 180 If we are creating an object, 181 where is the syntax? 182 No, it doesn't exist. 183 If you are actually inheriting 184 all the values of this base chai, 185 then you don't actually put 186 the parenthesis inside the class. 187 That's the syntax of composition. 188 When you actually create object, 189 that's a whole different story. 190 Remember creating object VS 191 creating classes, these are two 192 different syntax entirely. 193 So now that I have access to this 194 whole, thing that exists 195 in the base child, I can 196 actually do some fun stuff. 197 Let me show you. 198 First of all, I can just go ahead 199 and create my init and I can pass on 200 this self and, just work like that. 201 So this is my basic chai shop. 202 It has its own constructor. 203 In this I go ahead and say self chai 204 will be available like self, but I'm 205 not going to do it like this. 206 I will go ahead and say I want 207 to refer to the base class. 208 And in the base class I will go ahead 209 and always prepare a regular chai. 210 Can you see the linking here 211 that I'm not actually directly 212 creating a constructor. 213 Through this constructor, I'm 214 actually passing the value into this 215 chai Cls, which further down will 216 pass on this value to the base 217 chai when it will be executed. 218 These are just 219 instructions right now. 220 They are not executed, they're 221 executed with the parenthesis. 222 So it will pass on this regular value 223 to this base chai constructor. 224 This will be passed on here, 225 just here at line number two 226 and they will assign the value 227 in line number three. 228 Oh God, that is too much 229 of passing a variable. 230 But now that you know the journey 231 of variable, this will make you 232 a professional Python developer. 233 All right, pretty good, pretty good. 234 What else we can do? 235 You can also define your regular 236 methods, just like in this. 237 Let's just say we also serve. 238 Because we are a chai shop, 239 we should be serving that. 240 So in this I can just again use self. 241 No big deal. 242 I can print. 243 What do I want to print? 244 A, formatted string 245 that says serving. 246 What type of chai are you serving? 247 All right, I'll put some variables 248 into this chai intheshop 249 and what it also does, it actually 250 calls some methods as well. 251 First of all, one problem at a time. 252 What type of chai are you preparing? 253 How can you refer that? 254 Because. 255 Can I just say self chai, 256 probably, but actually the type 257 is not available here. 258 The type is available 259 in here because that's the variable 260 inside the base class. 261 So you will see this syntax quite a 262 lot that in this we'll go ahead and 263 say first of all we have to address 264 it as self dot then chicls and I can 265 go ahead and say chai Cls type as 266 well. 267 But remember now that you have 268 transferred all of this control 269 inside this variable, 270 I don't need to say this chicls. 271 Let's keep that reserved only 272 for accessing the methods 273 of the base class. 274 Now that the control is being 275 transferred here, you'll be 276 surprised to know I can just go 277 ahead and put up a dot and notice 278 here prepare and type. 279 I have access to both the methods. 280 Isn't it fun? 281 It is. 282 So let's just say we say 283 simply Chai type and the Chai 284 type will be printed. 285 Not only that, I can here 286 just go ahead and say self 287 dot and chai and I can run 288 this method prepare as well. 289 And I have to run this. 290 How interesting that is. 291 And even interesting to this, 292 let's just say there is another. 293 This is our regular Chai Shop. 294 We will have another. 295 Yes, I know too much. 296 That's why I say is 297 undivided attention. 298 We also have one more Chai 299 Shop which is fancy. 300 Chai Shop. 301 It's too fancy. 302 This one just inherits 303 let's just say Chai shop. 304 So you have opened up a new branch. 305 We are going too much in depth 306 and that's what the production 307 code looks like here. 308 All I have to do is simply say 309 that hey chicls, I'm taking 310 a reference of this and I will 311 simply go ahead and take a reference 312 of this Masala Chai. 313 So everything is available 314 from the Masala Chai and you 315 can use the same syntax. 316 You can define the constructor, 317 take all the values 318 up here and conserve this. 319 This would be reputation. 320 I don't want to do that. 321 But let's go ahead and take 322 a summary of this. 323 I know that's a lot. 324 What we did here is just 325 simply creating a class. 326 There is no big deal here. 327 I can just even minimize this. 328 We know this part in the Masala Chai. 329 For the first time we saw 330 the syntax of inheritance 331 which is just this much. 332 It. 333 That is it. 334 We didn't did anything extra. 335 We assume that if you create 336 an object from the Masala Chai 337 you will get all the values. 338 You can just put up a dot 339 and use add spices. 340 But also you can use a dot and have 341 the prepare method access as well. 342 That is it. 343 Now if I go up here, this is 344 where the composition starts. 345 So notice here this chai shop 346 doesn't inherit anything, but 347 inside the class I said I want to 348 keep a reference of this base chai 349 and this variable gets a reference 350 to everything that's there in the 351 base chai. 352 Pretty interesting syntax. 353 Now when we create and initialize 354 and constructor, I simply says, hey, 355 I will say self chai cls, but as 356 soon as I create an object from it, 357 now the regular thing starts. 358 It's creating, literally 359 creating an object and passing 360 a reference in this. 361 So I create a regular type of chai 362 and pass on a reference to this one. 363 Since this self chai is ultimately 364 creating a base chai for me, 365 what I can do is I can access all 366 the methods of the base chai. 367 So if I can access type, I 368 can access prepare as well. 369 And that's what exactly we did here. 370 So here we access the self chai 371 type because it's an object 372 that's a composition and we can 373 also access self chai prepare. 374 Pretty interesting. 375 Now let's create also some objects, 376 although not really necessary, 377 but I'll show you anyways. 378 So let's just say you go ahead 379 and say this will be a Chai shop. 380 There you go. 381 Access everything. 382 So now if you go ahead and say shop, 383 put up a dot, you get access to Chai 384 Chai CLS serve, whichever you want 385 to use, you can go ahead and use it. 386 I will also have a fancy variable 387 and I will say this one actually 388 comes from Fancy Chai shop 389 and and feel free to access any 390 fancy method which are available. 391 Chai Chai CLS, serve. 392 Because hey, it also 393 comes from there. 394 So we can just go ahead 395 and work on that. 396 For example, the shop can actually 397 go ahead and serve just like this. 398 Not only that, fancy can also go 399 ahead and serve because it actually 400 inherits Masala chai, which further 401 inherits the base chai as well. 402 Pretty fun, isn't it? 403 Yeah, that's linking this diagram is 404 something that you have to make up 405 in the brain only that only works. 406 So this one can actually 407 also go ahead and serve. 408 There we go. 409 Fancy also serves. 410 The Chai shop also serves the chai. 411 Now fancy the advantage is fancy 412 has a method of not, like this. 413 Do we have any method of adding, 414 since fancy is add spices. 415 My bad, its add. 416 And we cannot actually go ahead 417 and use it like this because I don't 418 have an access to this masala chai 419 directly in the fancy Chai shop. 420 Because we are actually 421 inheriting Chai shop but we never 422 inherited the Masala Chai. 423 So in order to access this 424 I have to use this 425 reference, this composition. 426 So I have to say chaicls 427 and through which I can actually 428 access the add spices. 429 Isn't it very interesting? 430 It is little bit of a production 431 level code, so it will take 432 a little time to digest. 433 But you'll get the idea. 434 I can print it, no problem. 435 But printing is not going 436 to make any life easier. 437 So you still have to figure out that. 438 Okay, this is. 439 Oh, we have a problem. 440 Masalachaya is missing one 441 positional requirement argument. 442 Did we accepted any argument 443 into this one? 444 Oh yes, we shouldn't 445 be actually doing it. 446 But let me just go 447 ahead and fix this. 448 Now let's go ahead and read 449 this error because 450 this is the real programming. 451 Nothing works out of the box. 452 Let's see what is 453 the problem that's going on. 454 It is saying that the Masalachay 455 addspices is missing one argument. 456 And if you remember, we have 457 discussed this exact same 458 problem, the argument self. 459 So what is happening here is 460 you are using this reference 461 of the object and, and this 462 requires some of the context. 463 It doesn't have any context. 464 So in the fancy you're 465 creating the object. 466 But Masala Chaya requires that hey, 467 you give me something as self. 468 It has no idea who is calling it. 469 It is a missing context problem. 470 So how can we go ahead and fix this? 471 It can be fixed, 472 with the existing solution as well. 473 If you remember. 474 Now this fancy, instead 475 of referencing this because what 476 it's doing, it's actually going 477 into the Masala Chai. 478 All right. 479 But you forgot one thing. 480 We are inheriting 481 the Chai shop as well. 482 So that means as soon as the fancy 483 Chai shop is being created, 484 always and always, whenever 485 an object is created, it always is 486 created by the constructor. 487 If there is no constructor, 488 the class will automatically 489 create a constructor 490 behind the scene for you. 491 So constructor is always there. 492 And it also gave us a chance 493 to discuss about the constructor, 494 how good the errors are. 495 So if I go ahead and create 496 a constructor via this 497 fancy Chai shop, 498 this might have done it somehow. 499 So this one no constructor here. 500 So whose constructor might be used? 501 The base class. 502 Does the Chai shop 503 has any constructor? 504 Yes, it has the constructor. 505 This is the one. 506 Are we storing the all references 507 of Chai Cls here in the Chai? 508 Yes, we are. 509 And this is an object 510 of the base chai. 511 So the problem is solved here. 512 This one didn't had an idea 513 of how to provide a reference. 514 But if I go ahead and use 515 the constructor, that means now 516 my object is calling the method, 517 so I have the reference. 518 Got it. 519 I know it will take one more 520 Var time to Var this, but let's 521 go ahead and run this. 522 Probably another error will help us 523 to learn something more. 524 Oh, this time it works. 525 So this whole sequence 526 of how things are going on. 527 Let me summarize this one 528 more time so that it will help you 529 to understand this. 530 Here's the summary part. 531 We simply created a base class. 532 Every class has a constructor. 533 If you don't create a constructor, 534 the class will automatically 535 create one behind the scene 536 at the time of execution. 537 We have two methods, 538 Init and prepare. 539 That's it done in the Masala 540 Chai we have just one method. 541 But hey, I cannot use this 542 method directly because 543 it has no constructor. 544 So either call it via the class, 545 but if you'll create directly 546 call it via the class the self, 547 how you will pass on the context. 548 Very difficult. 549 So either just create it 550 an object and then call it. 551 Got it. 552 Then this starts the composition. 553 So sometimes we don't want 554 to inherit the classes, but we want 555 to take a reference of it. 556 So we have got the reference of it. 557 And now within this class I am 558 actually calling an object. 559 So this is literally creating 560 an object from this class 561 just by passing it here. 562 I'm not using the parenthesis so 563 that I can hold the reference that 564 okay, I'll create an object, but in 565 some time, not just immediately. 566 So this is exactly where we 567 created and we hold the reference 568 all of this up here. 569 So this is literally an object 570 and this object can be 571 used anywhere in the class. 572 Pretty easy. 573 Fun stuff. 574 We also created another one 575 which is Fancy Chai Shop 576 which inherits as well. 577 So it's an example of inheritance. 578 It's also an example 579 of composition as well. 580 So we are inheriting and as well 581 as you are compositing as well. 582 Pretty complex, but this is 583 how the production grade. 584 Now we'll increase the level 585 of complexity in the code. 586 So Shop Chai Shop. 587 Pretty easy. 588 Fancy Fancy Shop. 589 Pretty easy. 590 We use the serve method 591 in both of them. 592 No problem, because serve 593 actually doesn't do much. 594 Not here. 595 The serve is here. 596 If any object creates it. 597 Where is the serve? 598 Here it is. 599 The serve method is 600 in the Chai shop, obviously. 601 And any object created from the Chai 602 shop or any of the class which 603 inherits it like Fancy shop can 604 actually call it no problem at all. 605 It has the context. 606 All right, so object is calling it. 607 Object is calling it. 608 We saw an error when we 609 tried to Fancy, when we try 610 to add the spices. 611 Why? 612 Because in order to add 613 the spices, you are not calling 614 from the base class, you're 615 calling from a composition. 616 Now, in the composition, this is 617 the reference that I'm having. 618 So there might be some 619 constructor that might have 620 called while creating this. 621 If I haven't provided a constructor, 622 Chai Shop might have provided. 623 So Chai Shop actually gives me 624 a reference of this and I create 625 a constructor, from here. 626 So this is the constructor 627 and I take the reference or I create 628 a new variable which is chai. 629 So this has the context. 630 So my context problem is solved. 631 And simply I go up here that. 632 Hey, fancy. 633 Now you have access to this chai, 634 and through the chai, the object 635 of this class or the base class 636 can call any of the method. 637 So there we go. 638 All right. 639 Similarly, you can have 640 a, composition for 641 the base chai as well. 642 You can have this and run those 643 methods as well by creating this. 644 Pretty simple. 645 Not that simple, to be honest. 646 So again, as I mentioned, this class 647 requires undivided attention, 648 but the topics like inheritance is 649 being taught all over the places. 650 But topics like composition are very 651 rare to see in the video courses. 652 I brought it up for you. 653 Make sure to rate us as well. 654 Let's go ahead and catch 655 up in next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "06 Inheritance and composition in python classes.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/06 Inheritance and composition in python classes.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0067633176,
      0.029258689,
      0.03667864,
      -0.067864,
      -0.010990252,
      0.012904446,
      0.0139237465,
      0.028820869,
      0.0026023176,
      0.0029476515,
      -0.02336085,
      -0.018323097,
      0.010524191,
      0.014518691,
      0.1281942,
      0.0053791897,
      -0.0065299934,
      -0.014541407,
      0.0060207616,
      -0.018594006,
      -0.00947768,
      0.005322523,
      0.027277429,
      -0.002260678,
      -0.0015015253,
      0.0062377043,
      0.0046564033,
      0.015049562,
      0.05199975,
      -0.018301805,
      -0.0071036867,
      0.018311776,
      -0.0023495427,
      0.019159192,
      -0.0029416669,
      0.025301177,
      0.02216091,
      0.010927615,
      -0.03185151,
      -0.003979661,
      -0.025963664,
      0.026382742,
      -0.0039005922,
      -0.0075511634,
      0.014865583,
      -0.037276372,
      0.009842188,
      -0.01823621,
      0.008112817,
      0.017589295,
      0.007918648,
      0.012847267,
      -0.0077364226,
      -0.18510737,
      0.0069885617,
      0.012259978,
      0.004273252,
      -0.015744692,
      -0.003669263,
      -0.0033928899,
      -0.009792593,
      0.0054536513,
      -0.027955234,
      -0.0018056649,
      -0.007568973,
      -0.026444787,
      0.028817382,
      0.011649761,
      0.009893545,
      0.0036392205,
      0.017417261,
      0.015617224,
      -0.020725286,
      -0.02259385,
      -0.009554716,
      -0.030444844,
      0.015353425,
      0.0056168013,
      -0.00031469684,
      0.03052692,
      -0.014587183,
      0.0007883227,
      0.011202784,
      -0.005292962,
      0.0013998585,
      -0.006205795,
      -0.012174462,
      -0.0076556187,
      0.0070215473,
      -0.0050392807,
      -0.0040896107,
      0.015601698,
      -0.0029844618,
      0.032456946,
      -0.019466419,
      -0.010684059,
      -0.008953079,
      0.0023266394,
      -0.013174677,
      0.0049886894,
      0.008278739,
      -0.01996217,
      -0.022895975,
      -0.028555114,
      0.012189969,
      -0.0045472644,
      -0.014288142,
      -0.00825603,
      -0.020238796,
      0.011615943,
      0.0038327666,
      -0.006166729,
      0.01924075,
      0.0048815203,
      0.0008152643,
      -0.1807536,
      0.004565154,
      -0.014317614,
      -0.016855238,
      -0.0094081,
      0.000369263,
      -0.0032201551,
      0.021905188,
      0.006939491,
      -0.003488125,
      -0.009064218,
      -0.006854518,
      0.017479232,
      -0.012309453,
      0.00040591386,
      -0.01357462,
      -0.011874487,
      0.0015972543,
      0.010196792,
      -0.0012543842,
      0.0074518914,
      0.007726449,
      -0.004901032,
      -0.030551959,
      -0.0052913106,
      -0.001196986,
      0.008603416,
      -0.009591625,
      0.05271616,
      -0.0073423255,
      -0.017900944,
      -0.015008601,
      0.012594905,
      -0.0309856,
      -0.033979665,
      0.020579753,
      0.0069982647,
      0.0024057785,
      -0.008693305,
      0.013945487,
      -0.02565719,
      -0.008202291,
      -0.0066350694,
      -0.013741466,
      0.0115762055,
      0.014528463,
      0.026600799,
      0.00006943116,
      0.016916,
      -0.004477343,
      -0.0094262455,
      -0.0095508285,
      0.015624037,
      0.0245721,
      0.0072178864,
      0.015492749,
      -0.0045700287,
      -0.00007337845,
      0.019242115,
      -0.015294702,
      -0.011548705,
      0.0135380095,
      -0.012412129,
      0.009787023,
      0.006615456,
      -0.010566382,
      -0.0145345405,
      0.011846601,
      -0.017257525,
      0.012148681,
      0.01818301,
      -0.034823615,
      0.0077169146,
      0.015323497,
      0.005516523,
      0.0049780183,
      0.010920461,
      0.015961695,
      0.0069760364,
      0.021346329,
      -0.018865667,
      0.004465676,
      0.015407556,
      -0.008981313,
      0.021939527,
      0.036482178,
      -0.0077087884,
      -0.0071816933,
      -0.014374723,
      0.02117243,
      0.00995161,
      0.017624123,
      -0.01780446,
      -0.0012950021,
      0.02043521,
      -0.024207862,
      -0.00022795255,
      0.027708793,
      0.013630547,
      0.022576425,
      -0.0029335523,
      -0.00203544,
      -0.016462112,
      -0.00589153,
      -0.024498103,
      0.0022053486,
      -0.011435947,
      -0.009927703,
      0.021071449,
      0.0071588526,
      0.0020448198,
      -0.0141584715,
      0.0053736856,
      0.020229993,
      0.008060632,
      0.019135244,
      0.000005247257,
      -0.01721535,
      0.013132462,
      -0.00043876987,
      0.0018342555,
      -0.022091081,
      0.008006176,
      0.010142058,
      -0.008585296,
      -0.009203046,
      -0.004659368,
      -0.004949557,
      0.010130837,
      0.0292907,
      -0.0016808297,
      -0.001354695,
      -0.0023570526,
      -0.012934678,
      -0.029781144,
      -0.014654064,
      -0.007875049,
      0.016813044,
      -0.011161622,
      0.0032163362,
      -0.0386131,
      -0.026048731,
      -0.0025350011,
      0.0059956736,
      -0.01899071,
      0.007301634,
      -0.011059729,
      -0.011350428,
      -0.009112526,
      0.0060108695,
      0.000038852846,
      -0.0043958784,
      0.03190304,
      -0.0023578582,
      0.019480633,
      0.01117825,
      0.011033825,
      0.008759279,
      0.010750059,
      -0.0352398,
      0.00640679,
      -0.103404775,
      0.024017042,
      -0.005352022,
      -0.03562369,
      0.01648626,
      0.020524593,
      -0.0291082,
      -0.002742136,
      0.0025469682,
      0.011585322,
      -0.0013542067,
      -0.022912925,
      0.03897683,
      -0.017176075,
      0.009314705,
      -0.009692139,
      -0.0050100507,
      0.0047759903,
      0.029885108,
      -0.02332387,
      0.00067671307,
      -0.01624236,
      0.005854377,
      0.012103046,
      0.0057316367,
      -0.02152057,
      -0.0067005754,
      0.0103409365,
      0.017462859,
      0.0028519514,
      0.008824621,
      0.0068287747,
      0.012600778,
      -0.010083301,
      0.0009861928,
      -0.0017500711,
      -0.0043218127,
      -0.024663217,
      -0.0008202106,
      -0.01244717,
      0.02203422,
      -0.022576747,
      0.030339863,
      0.03326689,
      0.0047143307,
      0.01256946,
      -0.007648176,
      0.011307089,
      -0.013355057,
      0.0061033056,
      0.00025564933,
      0.004264869,
      0.0141498195,
      -0.008186118,
      0.0038606427,
      0.011564169,
      0.0082232095,
      -0.0022386138,
      -0.0016784943,
      0.012839845,
      0.0055814306,
      0.012595545,
      -0.014520327,
      -0.011625533,
      0.025586661,
      -0.0012373918,
      0.01615216,
      -0.014428396,
      -0.004770744,
      0.010578104,
      0.010651503,
      -0.014685211,
      -0.0143429935,
      -0.009687864,
      0.008034491,
      0.002624693,
      -0.0043988116,
      -0.014588537,
      -0.028209021,
      0.029343257,
      0.008926221,
      -0.01043203,
      -0.00032872122,
      0.011490862,
      0.003119154,
      0.01475643,
      0.001472235,
      -0.009768063,
      0.0020806717,
      -0.026655786,
      0.008181357,
      0.019824808,
      -0.010821455,
      0.0077475514,
      -0.011561952,
      0.003970904,
      -0.023245985,
      -0.014117856,
      -0.02025016,
      0.024657782,
      -0.01165774,
      -0.012200773,
      -0.013321576,
      -0.017068705,
      0.009623401,
      -0.00801964,
      -0.022686,
      -0.013281034,
      -0.0006380414,
      -0.008064156,
      0.006701498,
      -0.0037870426,
      -0.017351558,
      -0.00743901,
      -0.015770312,
      0.0016825565,
      -0.0022990643,
      0.011087799,
      0.016286641,
      -0.024650307,
      -0.0013433929,
      -0.01710434,
      -0.0077243675,
      0.0016995966,
      -0.004828022,
      0.014799539,
      -0.02062432,
      0.01659148,
      0.008144068,
      -0.025842328,
      -0.0101353945,
      0.008868949,
      -0.016340924,
      -0.02887056,
      -0.002321147,
      0.0007126552,
      0.03250369,
      0.009920783,
      -0.00086450006,
      0.0016138226,
      -0.02057236,
      0.010188125,
      0.017161774,
      -0.0016629657,
      -0.0069329045,
      0.022583732,
      -0.008938534,
      -0.017735776,
      -0.017230608,
      -0.015422864,
      -0.014965804,
      -0.018793581,
      -0.007670712,
      -0.012957099,
      0.008591421,
      0.008286871,
      -0.016309747,
      0.002536704,
      -0.02896965,
      -0.0047587077,
      0.013515817,
      -0.009563909,
      -0.0046192496,
      -0.009771975,
      0.024421455,
      0.018163871,
      -0.004096912,
      0.020397572,
      0.023009062,
      -0.020080991,
      -0.001660028,
      -0.017505763,
      -0.031337727,
      0.010700867,
      0.007636579,
      0.01374043,
      0.005580905,
      -0.0072898855,
      0.0049308226,
      0.023190957,
      0.009411861,
      -0.008469476,
      -0.008663651,
      -0.006634491,
      0.014516201,
      0.0056534554,
      -0.007885714,
      -0.00800613,
      -0.0418712,
      -0.0006039953,
      0.013304438,
      -0.0074737268,
      -0.012024378,
      0.02065343,
      -0.00014832844,
      0.0029786406,
      -0.0050946474,
      -0.0028742317,
      0.008334227,
      0.0074244286,
      -0.0067402744,
      -0.0025355255,
      -0.010055195,
      -0.011491087,
      0.01979678,
      -0.01955378,
      0.011930344,
      -0.008056701,
      0.014390274,
      0.03454864,
      0.011216535,
      -0.013446718,
      0.0016282613,
      0.0036255221,
      -0.0066870446,
      0.02364229,
      0.01864096,
      -0.008888114,
      -0.0071497005,
      0.0076918676,
      0.010432682,
      -0.0099740615,
      -0.012088453,
      -0.020717377,
      0.02265799,
      -0.0018466588,
      -0.011419585,
      0.0059568663,
      -0.008575475,
      0.019706622,
      -0.008826923,
      -0.00017573564,
      -0.017422443,
      0.010153758,
      -0.021361753,
      -0.021535704,
      0.013044658,
      -0.0031502822,
      -0.018053604,
      0.025520133,
      -0.009729898,
      -0.0053417897,
      -0.010408167,
      -0.0011878936,
      -0.005673102,
      0.007550843,
      0.022232395,
      0.0075126993,
      -0.005493576,
      0.016231092,
      0.0063621798,
      0.022961019,
      0.009438623,
      -0.017553529,
      -0.021769816,
      0.026993094,
      -0.00080681295,
      -0.0073473575,
      -0.0021912754,
      0.00787219,
      0.017268341,
      0.012937938,
      -0.000101495294,
      -0.00019116777,
      -0.011943234,
      0.006167324,
      -0.0048097256,
      0.009385892,
      0.0129133025,
      -0.11642283,
      -0.01917317,
      -0.012610754,
      0.005802672,
      -0.003019532,
      0.006222907,
      0.0076231933,
      -0.022038871,
      0.0073127844,
      -0.01365942,
      0.03381559,
      0.026778707,
      -0.010342642,
      -0.008768884,
      0.018932715,
      0.0030078941,
      0.010006537,
      0.019946339,
      0.028441122,
      -0.00752465,
      -0.01195875,
      0.0028345552,
      -0.0023698213,
      -0.0020154717,
      -0.014675118,
      -0.019174848,
      -0.00093486655,
      0.004046047,
      0.0022131153,
      -0.018409725,
      -0.010596784,
      0.0014412749,
      0.0048809918,
      0.004483268,
      -0.010890693,
      -0.015260809,
      -0.0048991307,
      0.0050934907,
      0.010526149,
      0.0064039575,
      -0.009808459,
      -0.011340659,
      0.036066227,
      0.0035724463,
      -0.0065142843,
      0.022953503,
      0.028245738,
      0.002046596,
      0.014205475,
      0.03224062,
      -0.045769908,
      0.00023006332,
      -0.012873511,
      -0.032208085,
      0.006018022,
      -0.008883825,
      0.021316642,
      -0.010352774,
      -0.0041139373,
      -0.01110062,
      0.016822357,
      -0.003118211,
      0.025439529,
      0.048419718,
      0.0013863596,
      0.0021188282,
      0.033061564,
      0.0020450351,
      0.006409688,
      0.0072404672,
      0.0072634164,
      0.008890703,
      -0.012497911,
      0.015989017,
      0.018162793,
      0.0077641564,
      0.0048071775,
      0.0071367915,
      -0.02018905,
      0.018677384,
      -0.03719261,
      -0.0073189125,
      -0.06501118,
      -0.03254456,
      0.031972595,
      0.003418586,
      0.031647615,
      0.021271808,
      -0.01553095,
      0.0086956,
      0.012889581,
      -0.014144515,
      -0.005765349,
      -0.008455595,
      0.0075095943,
      0.0064902087,
      -0.012357482,
      0.017819587,
      -0.01375766,
      -0.006698546,
      -0.012152705,
      -0.008668233,
      0.0020902709,
      -0.011631527,
      -0.0042774314,
      -0.030944979,
      0.02416876,
      0.0153729,
      0.013160195,
      0.006305838,
      -0.024211396,
      0.019533828,
      -0.009758998,
      -0.13886498,
      -0.019566324,
      0.004982422,
      0.010485729,
      0.017386066,
      0.019826693,
      -0.028956283,
      -0.0320477,
      0.0019895132,
      0.001513333,
      0.02348131,
      -0.009703165,
      -0.02793596,
      0.0033562586,
      0.038780745,
      0.12933834,
      -0.0045491043,
      0.0028186215,
      -0.017089546,
      -0.0021635033,
      0.008487122,
      -0.023213107,
      -0.023520345,
      0.006258438,
      0.0012102546,
      -0.0029150113,
      -0.009676517,
      0.003893791,
      0.0013369716,
      -0.03945913,
      0.004206073,
      -0.017470118,
      0.003344366,
      0.03231547,
      -0.004380309,
      -0.000008619326,
      -0.014244723,
      0.015881319,
      0.008032365,
      -0.002803512,
      0.0070949513,
      0.009305513,
      0.004385952,
      0.010176504,
      0.01306256,
      -0.0009923613,
      -0.016098518,
      -0.012530282,
      -0.005807974,
      -0.0015466866,
      -0.0073075006,
      -0.04600593,
      0.011502421,
      0.027473666,
      0.013421299,
      0.006119492,
      -0.004095073,
      0.01573122,
      -0.00096668745,
      0.022089874,
      -0.0020390789,
      0.018962445,
      -0.02296258,
      0.011805118,
      0.0025245273,
      0.000029693983,
      0.021582277,
      0.016749622,
      0.011540371,
      -0.021506973,
      0.01639145,
      0.011760798,
      -0.007130017,
      0.013079334,
      -0.0043566762,
      -0.014577996,
      -0.031236468,
      0.03048792,
      0.012010731,
      0.002185503,
      -0.0071169985,
      0.0075468835,
      -0.00012865718,
      -0.007896594,
      0.017954292,
      0.017646628,
      -0.009770432,
      0.017417451,
      0.0022003963,
      0.010776687,
      0.015364575,
      0.0041036992,
      -0.01794002,
      0.023397235,
      0.007095048,
      0.021525526,
      0.018625433,
      -0.016714474,
      0.03017626,
      -0.005192359,
      -0.007104702,
      -0.007424465,
      -0.016725708,
      -0.033660043,
      0.008963822,
      0.040873587,
      -0.010271838,
      0.027320897,
      -0.009201706,
      -0.008043453
    ]
  },
  {
    "id": "genai_cohort_python_07_Accessing_base_class_by_3_ways_vtt",
    "content": "All right, so let's move ahead 2 further and the next topic that 3 we want to cover in our Python 4 series is going to be another 5 famous topic, which is known as 6 how we can actually access the 7 base class. 8 So accessing base class, this is 9 a really fun topic because you 10 learn so many things with this one. 11 So I'll walk you through 12 with this one. 13 All right, in order to understand 14 this, there are a couple of ways 15 where you do actually do, 16 something known as code duplication. 17 So code duplication, and we 18 really want to avoid that. 19 There are a couple of ways. 20 There is an explicit call and there 21 is something known as the super. 22 So first of all there 23 is a code duplication. 24 The second one is known as 25 explicit call, little bit 26 difficult to pronounce that. 27 And the last one which is using 28 a method, known as super, 29 and it's actually a method. 30 So all of these methods are a way how 31 you can access your base class if 32 you're trying to do the inheritance. 33 And again, there is no right or 34 wrong, it all depends on situations 35 and there are usual trade offs. 36 But most of the time you're going to 37 see this method being taught quite 38 a lot and is being used quite a lot. 39 And there are reasons because it's 40 simpler, it's easier, and that's 41 the way how it actually works. 42 So let's go ahead and write 43 some code for this one. 44 We are going to go ahead and create 45 a new file and call this one as 07 46 and this one is base class. 47 So let's call this one 48 as base class Python. 49 It's going to be fairly simple. 50 I'll just turn off my AI here 51 so it doesn't bother us. 52 So for example, let's just say 53 you have a simple class, we call 54 this one as chai, as we have 55 been calling for so long, this. 56 And we simply go ahead and define a, 57 constructor here, which is init, 58 Just like that we pass on the self, 59 but apart from the self, you also 60 pass on what type of this chai is, 61 and of course type with an 62 underscore. 63 Without that it doesn't work. 64 And you also go ahead 65 and pass on that. 66 What's the strength of this chai? 67 Is it really too hard? 68 Is it easy, normal, whatever 69 you want to go with that. 70 And also what I'll do is I'll 71 say self type a new variable 72 which will get the value 73 from the type, just like that. 74 And we'll also get 75 the self.self.strength, 76 if I can write that. 77 There we go. 78 Strength is going to get 79 the value from strength. 80 All right, so this 81 is our basic class. 82 You have seen this many times. 83 Now let's just say you define another 84 class and you say this one is 85 gingerchie, which also takes kind 86 of inherit from the chai itself. 87 Just like this, the syntax. 88 And we again go ahead and define 89 a constructor for us init. 90 There we go. 91 And as you can see this 92 automatically takes the type, 93 the strength and it calls the super. 94 We don't want to do that. 95 We want to go with the classic way. 96 So I'll just go ahead 97 and remove this. 98 We'll definitely talk 99 about the super, the auto 100 completion of that. 101 We take couple of parameter, 102 the self, the type one, 103 the strength and we also take one 104 more which is going to be 105 in this case the spice level. 106 All right, so how do we go ahead 107 and define this kind of thing? 108 So first of all the two common 109 things are going to be copy pasted. 110 So yes, you have 111 to write that code again. 112 I'm just going to go ahead and copy 113 paste this and then we are 114 going to go ahead and say self, 115 spice level and that will get 116 the value from spice level. 117 All right. 118 Is this correct code? 119 Yes, absolutely correct. 120 Is there anything wrong in this one? 121 No, absolutely nothing wrong in this. 122 It's just little bit 123 of the duplication of the code. 124 This thing was not available 125 in my top class, so 126 again no problem there. 127 But this one is actually a little bit 128 of a code duplication. 129 And that's what I said, 130 code duplication. 131 This is exactly what I mean to say. 132 You can inherit that, 133 you can write your own constructor, 134 but you are actually repeating 135 the code quite a lot. 136 So I can just comment this 137 and try out another way 138 of doing this exact same thing. 139 Let's just say we go ahead 140 and define the class again 141 and we say we want to make another 142 ginger chai which will inherit 143 from the chai just like that. 144 And this time what we're going 145 to do is we are going 146 to create another constructor. 147 Let's just say initial and I'll 148 auto select this again we will 149 come back onto the super. 150 Just ignore this for a moment. 151 I'll say strength again, spice level. 152 But this time instead of just doing 153 everything manually, we are going 154 to call the constructor from this 155 chai and we can just go ahead and 156 borrow his constructor and we can 157 say you obviously get the self 158 value. 159 You obviously we go ahead and pass on 160 this type of as well as we go ahead 161 and pass on this strength as well. 162 All right. 163 So at least the couple of values 164 that were initially passed 165 to my constructor, I'm just 166 going ahead and passing them up. 167 But one more thing that I have to 168 do is known as self dot, spicelevel 169 spicelevel and that's going 170 to get a value from the spice level. 171 So this is also another 172 way, another syntax. 173 You're going to see them a lot. 174 It's not like it's a bad syntax, 175 it's being used quite a lot. 176 So this is also a syntax. 177 But what you're going 178 to see this is explicit call. 179 So you are explicitly going 180 ahead and calling the constructor 181 of the class from 182 where you are inheriting. 183 Is it good? 184 Yes, of course it is good. 185 But there is a better way 186 of doing the things. 187 So we're going to write that again 188 for the third time and probably the 189 last time we again go ahead and say 190 class and this time we can actually 191 take an advantage of the auto 192 completion. 193 So gingerchie, which goes ahead 194 and take the constructor or 195 an inheritance from the chai itself. 196 And, and this time if I go ahead 197 and define a constructor which is 198 init and I can actually go ahead 199 and use this exact same thing. 200 Now notice what you will notice here. 201 Compare this to line number 15 202 to 17 and line number 21 and 22. 203 Here we are simply saying init. 204 So this init is the start 205 of the constructor. 206 But what we are saying is super. 207 The super is a method which 208 instead of saying chai. 209 You can actually just super says 210 just like this. 211 And this automatically means 212 that I want to call the constructor 213 of the base class. 214 This is known as base class as well 215 or parent class as well. 216 And I'm going to go ahead and pass 217 on these values up here. 218 Now surely, for sure you have 219 to write this piece of code 220 on your own because now you're 221 accepting more values that 222 the constructor actually takes. 223 So if you go ahead and take that 224 value, copy that and place it up 225 here and what you'll notice that 226 yeah, this one and this one are 227 pretty similar, but this one is an 228 explicit call because you're making 229 this chai as a call. 230 While on the other hand 231 the super is a common method, 232 which is expected that, hey, 233 you kind of know this method. 234 So that's what it is. 235 And as you can see, this is exactly 236 what we studied about the accessing 237 of the base class 238 can be done by the code duplication. 239 Surely not the good way you can do 240 that explicit call or the super you 241 usual method which people 242 prefer to use is the super one. 243 But again, there is no harm 244 in the explicit method as well. 245 So I hope this video gave some 246 added advantage to your knowledge. 247 It's something that we've discussed, 248 quite in depth, and let's go 249 ahead and catch up in next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "07 Accessing base class by 3 ways.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/07 Accessing base class by 3 ways.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0020116193,
      0.002952419,
      0.03558641,
      -0.053496752,
      -0.017967816,
      -0.0018136508,
      -0.0037824544,
      0.0045104073,
      0.0051084007,
      0.0007936612,
      -0.012974673,
      -0.005836196,
      -0.0002608224,
      -0.002106585,
      0.1264959,
      -0.0016128034,
      -0.0058874874,
      -0.015950209,
      -0.004973383,
      -0.0259311,
      -0.022049552,
      0.010969009,
      0.019091142,
      -0.01333866,
      0.012871267,
      0.001215366,
      -0.010918899,
      0.0031655424,
      0.060067132,
      -0.004066783,
      -0.023652526,
      0.011014985,
      0.009256751,
      0.02323372,
      0.00021955282,
      0.0067324652,
      0.021479,
      0.02122588,
      -0.017202912,
      -0.0149832405,
      -0.020059785,
      0.015224203,
      -0.012990517,
      -0.0015830963,
      0.0053270785,
      -0.040977318,
      0.0012970677,
      -0.036127266,
      -0.0026978166,
      0.012741755,
      0.015392343,
      0.0038282317,
      0.0015247606,
      -0.17328937,
      0.0037084296,
      0.005744981,
      0.01516914,
      -0.013860807,
      0.0067519764,
      0.007451324,
      -0.015229088,
      0.022962023,
      -0.029345445,
      0.009097959,
      0.00073091354,
      -0.012242316,
      0.036923274,
      0.0028508399,
      0.00954557,
      0.015047706,
      0.013423993,
      0.008270838,
      -0.013663807,
      -0.0077126496,
      -0.0061202496,
      -0.015926229,
      0.018399062,
      -0.009832335,
      -0.0054223663,
      0.027158579,
      -0.015734497,
      -0.016800879,
      0.00447876,
      0.008196875,
      0.008613221,
      0.0017834902,
      -0.009390731,
      -0.020302404,
      -0.0023508745,
      -0.016593978,
      -0.008191051,
      0.024380062,
      0.007983221,
      0.024792979,
      -0.017926088,
      0.0075578685,
      -0.0053094877,
      0.0033152138,
      -0.0070245974,
      -0.0043367594,
      0.015843287,
      -0.02776632,
      -0.02488237,
      -0.019289844,
      0.002317376,
      -0.009412524,
      -0.0055837967,
      -0.020747343,
      -0.010965003,
      0.017548617,
      0.015664829,
      -0.011371033,
      -0.002070425,
      -0.0044084024,
      0.003667855,
      -0.1693123,
      0.017311318,
      -0.0046178005,
      0.005078645,
      0.010942143,
      0.00389412,
      -0.00027575777,
      0.009791033,
      -0.00530511,
      -0.025403783,
      0.01638213,
      -0.0016522479,
      0.021959085,
      -0.0031555933,
      0.017491492,
      -0.024397414,
      -0.014802762,
      0.015847763,
      0.0017567185,
      -0.013793021,
      0.006404748,
      0.0049193488,
      -0.010411508,
      -0.039937545,
      -0.012353658,
      0.0034719906,
      0.0017644784,
      -0.025311632,
      0.04018651,
      -0.010468048,
      -0.009964776,
      -0.0031192636,
      0.006647052,
      -0.021359613,
      -0.036067434,
      0.016298227,
      -0.011955538,
      0.01691795,
      -0.02715856,
      0.026895586,
      -0.021620644,
      -0.013874922,
      0.0049842177,
      -0.0012221369,
      0.0046529253,
      0.0023160195,
      0.030159615,
      0.00041607255,
      0.007038132,
      0.004291037,
      -0.006788421,
      -0.000037356946,
      0.021304106,
      0.03140438,
      0.008909695,
      0.008043095,
      0.0071128653,
      -0.004019019,
      0.012187109,
      -0.006377716,
      -0.004388837,
      0.015148382,
      -0.018728588,
      0.024477798,
      -0.014833478,
      -0.0054288055,
      0.00028404692,
      0.013594221,
      -0.020507777,
      0.020570952,
      0.008892263,
      -0.028643537,
      0.008548964,
      0.017945295,
      -0.004838401,
      -0.0030379603,
      0.0018405335,
      0.020642312,
      0.008936357,
      0.023595333,
      -0.012450781,
      0.0060560354,
      0.008808238,
      -0.015217112,
      0.012653056,
      0.0389364,
      0.013823484,
      0.0046893847,
      -0.014925148,
      -0.0021565962,
      0.005091447,
      0.025183646,
      -0.021324277,
      -0.0119617535,
      0.017853776,
      -0.02101201,
      -0.004729657,
      0.030972324,
      0.0011340749,
      0.018522024,
      -0.016113129,
      0.008108187,
      -0.013012046,
      0.012599281,
      -0.029631075,
      -0.0068327407,
      0.0013782377,
      -0.006519673,
      0.02361129,
      -0.0050731064,
      -0.0009137614,
      0.009843658,
      0.005146384,
      0.008446365,
      0.019216634,
      0.02480568,
      0.018893965,
      -0.01911238,
      -0.0146593945,
      0.0019707403,
      -0.0035226527,
      -0.018419567,
      0.026348457,
      0.005575119,
      -0.0013485127,
      -0.012275871,
      0.0084763225,
      -0.0090453,
      0.008220569,
      0.031615753,
      0.0139469085,
      -0.0018351513,
      0.016294325,
      -0.006592357,
      -0.033961877,
      0.0021380961,
      0.0054458138,
      0.021577379,
      -0.025694245,
      0.027543789,
      -0.032285146,
      -0.01754754,
      -0.012642856,
      0.011843329,
      -0.008908108,
      0.017323567,
      -0.009122118,
      -0.019752838,
      -0.00039802055,
      0.021459272,
      0.013343493,
      -0.00019052027,
      0.023846447,
      -0.0038285307,
      0.02601204,
      0.0028169826,
      0.019239366,
      0.010914831,
      0.029672263,
      -0.05383961,
      -0.011232706,
      -0.09613503,
      0.017108781,
      0.0004195808,
      -0.03812678,
      0.025340738,
      0.014554454,
      -0.021627476,
      -0.0028397504,
      0.0078674955,
      -0.00037292537,
      -0.009969311,
      -0.034891777,
      0.03286764,
      -0.041817028,
      0.004776854,
      -0.007354342,
      -0.006331335,
      0.0026234232,
      0.03475648,
      -0.0014050547,
      -0.00866339,
      -0.033948917,
      0.009700582,
      0.006325314,
      0.012087189,
      -0.005001245,
      -0.011548153,
      0.020717956,
      0.010945461,
      0.01823618,
      0.015200462,
      0.009973906,
      0.0074616745,
      0.0038669317,
      -0.004774207,
      0.0063734157,
      0.008160155,
      -0.0143329995,
      -0.002894303,
      -0.015417807,
      0.014341916,
      -0.015103802,
      0.02203975,
      0.027438944,
      0.008354818,
      0.020161184,
      -0.0017938836,
      0.00027862165,
      -0.006501084,
      0.0031171434,
      0.0005355104,
      -0.0032519435,
      0.009015425,
      -0.012044408,
      0.0077996934,
      0.024898816,
      0.016411139,
      -0.016419575,
      -0.0030253807,
      -0.017457189,
      0.011996163,
      0.022063518,
      -0.00565609,
      0.00086819247,
      0.017677115,
      -0.011704069,
      -0.009738853,
      -0.0077315858,
      -0.006637829,
      0.01461871,
      0.0031230773,
      0.0035544368,
      -0.007755329,
      -0.008844787,
      0.007068107,
      0.006855641,
      -0.0052772425,
      -0.0038207832,
      -0.014458232,
      0.037818164,
      0.0015441341,
      0.0022470003,
      -0.014127729,
      0.016764447,
      0.011755158,
      0.0032407292,
      -0.016793942,
      -0.015423762,
      0.016574223,
      -0.012786578,
      0.00768081,
      0.016389236,
      -0.013647405,
      -0.0025080557,
      -0.010710215,
      0.006158019,
      -0.022761865,
      -0.012626882,
      -0.0018962427,
      0.036451276,
      -0.015496487,
      -0.002354399,
      -0.01459861,
      -0.020176046,
      -0.004134982,
      -0.00020977772,
      -0.019288281,
      -0.01380058,
      0.010531043,
      -0.0055119707,
      0.014218982,
      -0.010442156,
      -0.0150331175,
      -0.008506814,
      -0.010353444,
      0.012849149,
      -0.0028213507,
      0.015205908,
      0.0062942863,
      -0.017113663,
      -0.0026573048,
      -0.01124875,
      -0.017552998,
      0.00933819,
      -0.004839872,
      0.0041674045,
      -0.026882464,
      0.018350447,
      0.0034338636,
      -0.033569347,
      -0.029677661,
      0.0080996705,
      -0.023843445,
      -0.02895017,
      -0.008844665,
      0.0077225636,
      0.008958523,
      0.010072791,
      0.008552314,
      0.008337033,
      -0.021941759,
      -0.0094255945,
      0.017730944,
      -0.010965939,
      -0.008796678,
      0.024804538,
      -0.007246297,
      -0.008519191,
      0.0061190627,
      -0.007220952,
      -0.0060189255,
      -0.000044150245,
      -0.0011441362,
      0.009374532,
      -0.0009887018,
      0.007723946,
      0.00854684,
      0.01704485,
      -0.012913285,
      -0.0156999,
      0.016491715,
      0.004843051,
      -0.019006489,
      -0.014430236,
      0.02220166,
      0.012208724,
      -0.0054834913,
      0.01111977,
      0.007403482,
      -0.01590884,
      -0.0026223422,
      -0.0122528635,
      -0.02616723,
      0.009175733,
      0.003351384,
      -0.0036137311,
      0.0015941979,
      0.004316259,
      -0.009827251,
      0.024928473,
      0.017071879,
      -0.010228763,
      -0.003007876,
      0.016089406,
      0.02462301,
      -0.002344743,
      0.0013948713,
      -0.008157071,
      -0.029778274,
      0.009579187,
      0.0065099685,
      -0.003103175,
      -0.03101895,
      0.011279326,
      0.019414872,
      -0.0037462604,
      -0.008300289,
      0.0044987164,
      0.011812218,
      0.0072177886,
      -0.015506165,
      -0.008741884,
      -0.010365168,
      0.00053721666,
      0.025676358,
      -0.028148323,
      0.015548397,
      -0.008737087,
      0.01961037,
      0.029637486,
      0.0022246728,
      -0.00084859465,
      -0.0004993114,
      0.007908429,
      -0.0065824143,
      0.027633835,
      0.029541884,
      -0.005710709,
      -0.017799122,
      0.0014715357,
      -0.000011525564,
      -0.022199987,
      -0.0065907007,
      -0.026998622,
      0.019068275,
      -0.007455127,
      -0.027921628,
      0.009606631,
      -0.011486556,
      0.018188328,
      -0.0058302986,
      -0.007712874,
      -0.021482257,
      0.016205676,
      -0.037673134,
      -0.028131876,
      0.017927336,
      0.0044197734,
      -0.021934435,
      0.015972003,
      -0.00436234,
      -0.023667742,
      -0.032896023,
      0.009949155,
      0.009148198,
      -0.008630759,
      0.019407472,
      -0.0011276656,
      0.003932525,
      0.016822632,
      -0.008123286,
      0.021865392,
      0.00869475,
      -0.012376899,
      -0.031526692,
      0.020629555,
      0.0019730625,
      -0.0031260597,
      -0.007615495,
      -0.002282382,
      0.018466758,
      0.0081720045,
      0.010638757,
      0.00015151441,
      -0.013272564,
      0.008290331,
      -0.0055011413,
      -0.01060545,
      -0.00058844744,
      -0.13171223,
      -0.011438907,
      -0.010071546,
      -0.006856184,
      -0.006574178,
      0.021421755,
      -0.0074684266,
      -0.03043086,
      -0.008696324,
      -0.014486581,
      0.03163098,
      0.022282917,
      -0.0027495653,
      -0.017152729,
      0.02984404,
      -0.006413495,
      0.0052812155,
      0.0051563107,
      0.02130038,
      -0.008882232,
      0.00575803,
      0.0012431284,
      -0.0031153504,
      -0.008303417,
      -0.011768361,
      -0.014248815,
      0.0041597346,
      0.005526783,
      0.017760227,
      -0.006055716,
      -0.0038678227,
      -0.014609443,
      0.008523965,
      0.011321187,
      0.007963929,
      -0.024204329,
      -0.008339058,
      0.0149652995,
      0.021731582,
      -0.009768985,
      -0.008602657,
      -0.00081954343,
      0.045281,
      0.004899596,
      -0.00787438,
      0.015288887,
      0.019205026,
      -0.008295599,
      -0.0028824029,
      0.031458,
      -0.030124484,
      0.012736198,
      -0.005614645,
      -0.031201212,
      -0.0132677425,
      -0.013293684,
      -0.00003144696,
      -0.0055546355,
      -0.0016103756,
      -0.008885378,
      0.0048609977,
      -0.011370257,
      0.010269011,
      0.0220391,
      0.008882515,
      0.011607996,
      0.035619907,
      0.0075373594,
      0.00872559,
      0.010249302,
      0.00914938,
      0.0012070088,
      -0.01672063,
      0.010493623,
      0.0094478205,
      0.011717772,
      -0.014748469,
      -0.015611255,
      -0.011957711,
      0.009903928,
      -0.044970352,
      -0.019687008,
      -0.059187356,
      -0.01879236,
      0.022799902,
      -0.0148069495,
      0.010785303,
      0.020107213,
      -0.019064672,
      0.008593177,
      0.025078036,
      -0.013581688,
      0.00073707226,
      0.0021465728,
      0.0034293004,
      -0.012841541,
      -0.003979051,
      0.025734201,
      0.0033896342,
      -0.019062834,
      -0.011914321,
      -0.027069306,
      0.010271202,
      -0.0055919294,
      -0.0112145655,
      -0.023236128,
      0.024765842,
      0.0120332455,
      -0.00029282275,
      0.0130037805,
      -0.004618539,
      -0.0005806267,
      0.008774878,
      -0.14314067,
      -0.027090788,
      0.0075394716,
      0.009104307,
      0.029529158,
      0.021994384,
      -0.017434152,
      -0.022963969,
      0.021905743,
      -0.011344617,
      0.019841207,
      0.0067169294,
      -0.0025084428,
      0.012268116,
      0.031641748,
      0.12657142,
      -0.0073351823,
      0.0041417666,
      -0.0089531,
      -0.0004565318,
      0.0016701107,
      -0.014426177,
      -0.011897805,
      0.004952884,
      -0.014706356,
      -0.015412544,
      -0.006132338,
      -0.006984318,
      -0.0021830879,
      -0.019875493,
      0.016848497,
      -0.01868863,
      0.0153441625,
      0.043544654,
      -0.009204412,
      -0.00076429214,
      -0.0045447215,
      0.01836482,
      0.0007894729,
      0.00015889417,
      0.015102938,
      0.0040611676,
      0.012025508,
      -0.0051819137,
      0.007329037,
      -0.009963244,
      -0.012302877,
      -0.009600875,
      0.005680042,
      -0.002657526,
      -0.025718834,
      -0.0394396,
      0.013452519,
      0.007784695,
      -0.0022826337,
      -0.012267028,
      -0.005534836,
      0.030528853,
      0.0067204065,
      0.013523514,
      0.009480049,
      0.005519145,
      -0.03355343,
      0.009121653,
      -0.0059494716,
      -0.009089596,
      0.023542654,
      0.007136597,
      0.02263327,
      -0.0023171862,
      0.00915558,
      0.008928084,
      -0.00073327613,
      0.022503585,
      -0.015294037,
      -0.007614192,
      -0.00829557,
      0.037750117,
      0.013326381,
      0.005260327,
      -0.0006787398,
      -0.0041462877,
      -0.0025412375,
      -0.0076923897,
      0.006107107,
      0.010664077,
      -0.0057970197,
      0.028164666,
      0.0009702627,
      0.006067105,
      0.018375533,
      0.020137165,
      -0.0046153096,
      0.026028989,
      -0.0021062924,
      0.009519862,
      0.016032372,
      -0.01568384,
      0.01798569,
      0.0028932407,
      0.010252532,
      -0.013529659,
      -0.024223883,
      -0.049502686,
      0.0139833,
      -0.0005866626,
      -0.014828096,
      0.030461187,
      -0.005797229,
      -0.017997086
    ]
  },
  {
    "id": "genai_cohort_python_08_Method_Resolution_Order___MRO_vtt",
    "content": "So we have talked decently about 2 inheritance and now we want 3 to talk about multiple inheritance. 4 Now to be honest, there is 5 nothing too much to talk about 6 for multiple inheritance. 7 You can have comma separated as many 8 classes as you want to have in that. 9 Usually we don't prefer 10 to have too many classes. 11 2 are more than enough for us. 12 But even having two of these 13 classes as inherited classes it 14 sometimes can create problems. 15 I will walk you through 16 with an example. 17 But, but the topic that we 18 want to discuss in this 19 is pretty interesting. 20 If you look at this, this is 21 known as Method Resolution order. 22 What does this mean? 23 This is a very fancy one 24 and yes it looks fancy. 25 It is fancy. 26 If you look at the documentation, 27 this is what it says at the very top 28 of the documentation. 29 And don't worry, this is not actually 30 I'm not showing you Python 2 31 X version documentation. 32 It was introduced in Python 33 2.3 but it is still used 34 including in the Python 3. 35 So don't you worry, I'm not 36 showing you anything outdated. 37 The most important part is 38 in the abstract. 39 The document is intended 40 for Python programmers who want to 41 understand the C3 method resolution 42 order used in Python 2.3. 43 Although it is not 44 intended for newbies. 45 Yes, that's the case, it's 46 not intended for newbies. 47 It's quite pedagogical 48 with many worked out examples. 49 So don't you worry. 50 Although this topic doesn't seem like 51 beginner friendly and especially 52 when you look at the diagram like 53 what is all going on with this one? 54 You will get it absolutely when 55 we start writing the code. 56 But let me walk you through 57 with the examples that what it means 58 by and what's the whole thing 59 about what's the whole fuzz? 60 Let's just say this is our class. 61 And if I go ahead and say this 62 is our class A and we define 63 another class just like this, 64 this is a different class. 65 We are calling them A and B to make 66 sure that we easily understand this. 67 Now let's just say we have 68 another class which is. 69 And also this class, this B is 70 actually inheriting this one. 71 All right, let's make it a little bit 72 more of a complex. 73 This is the class C that we have 74 and let's just say C also 75 inherit from the class A. 76 And now finally you define 77 a simple class which is D. 78 And what this D does, it actually 79 inherits from the class B and as 80 well as inherits from the class C. 81 And all of them have just one 82 single method to work on with. 83 Now if you call that method in the D. 84 Is it going to be called 85 from C or from B or from A? 86 I know this is a little bit 87 confusing and that's the reason 88 I want to actually go through 89 with the code first. 90 Code will actually make 91 life much, much easier. 92 In this case we'll go with 08_mro py. 93 Yes, this topic is known 94 with the name of MRO. 95 Although the full name is 96 really really complex. 97 But nobody calls it with the full 98 name of Method Resolution Order. 99 You will always hear 100 the MRO Word here. 101 Let's just define what 102 we have written there. 103 So let's just say we have a class A 104 and class A doesn't do much. 105 It has oops, shouldn't 106 write that class A. 107 And what the class A does, it 108 has simple a label that is it 109 to make the life easier. 110 And I will mark it as A so 111 that we figure out that. 112 Okay, this is coming 113 up from the class A. 114 I'll call this one as 115 simply base class. 116 And what extra we have, we 117 have class B which also 118 has the same thing label. 119 Nothing else, no init nothing. 120 This time we'll mark it as 121 B and we're going to call 122 this one as Masala Blend. 123 Not only that, we actually go 124 ahead and say this one is going 125 to inherit from the class A. 126 This is exactly what we did. 127 And the question I'm going 128 to ask you is going to be 129 little bit interesting. 130 So pay a small attention. 131 This one also gets inherited 132 from the class A. 133 All right, we are getting 134 interesting there. 135 Label. 136 And this one is actually class C. 137 And we are going to call 138 this one as Herbal Blend. 139 And here comes the question 140 after one more class, actually 141 we have class D which actually goes 142 ahead and inherits B and C. 143 Yes, this one is inheriting 144 from two classes and this 145 one has same thing label. 146 And the label goes like this which 147 says or it doesn't have anything. 148 Let's just say, let's 149 make it even more fun. 150 It doesn't have anything. 151 Now if I go ahead and say that I am 152 creating a cup and that cups come 153 from the class D which doesn't 154 have anything and if I try with 155 the printing of the value that 156 says cup dot and definitely cup 157 has the label. 158 We know this very for sure. 159 But can you discuss what 160 will be the output of this? 161 I'll zoom out a little bit so 162 that you can see all at once. 163 I'll zoom back again, 164 don't you worry. 165 This is very interesting and we 166 need to understand what is 167 happening how Is it happening? 168 A has a label which has a, 169 base class B which inherits from A. 170 And notice this, this is also N 171 by the way, if you're thinking this 172 is too aggressive to going on. 173 No, in the large frameworks 174 and large libraries of Python this 175 is a very common thing which 176 happens all the way along. 177 And the class C also inherits from A. 178 And this says a, label is 179 being overwritten and the class 180 D doesn't have any label. 181 So this one thing is sure that 182 the D doesn't have any labels. 183 So it has to look either in the C 184 or in the B or since B and C both 185 are actually taking this and have 186 this label up in the superclass as 187 well or the parent class as label. 188 Which one is going to print? 189 This is very difficult to determine. 190 I'll tell you a trick as 191 well to actually go ahead 192 and work with this. 193 First let's run the code. 194 So not like that, definitely. 195 I want to open the terminal right 196 up here and we're going to go 197 ahead and say Python 3 and MRO. 198 No, it's 08 MRO. 199 We get the B which is Masala Blend. 200 And in case this is still 201 confusing to you, whichever the 202 class first, if there is any 203 common such method which are 204 being called up, it is being 205 called from the very first class 206 that you are inheriting. 207 If you swipe this up from C 208 to B, now obviously the method 209 will be called from the C. 210 This is a neat trick which everybody 211 knows in the Python ecosystem, 212 those who have been working around. 213 But there is also one more 214 interesting method that you 215 can go ahead and print out. 216 You can actually go ahead 217 and say something like this. 218 So if this cup is there, I can 219 actually go ahead and say cup or 220 I can use the entire class, 221 let's just say I can go for the D. 222 And if you go ahead and look at 223 closely dot, underscore, underscore 224 MRO exists here as well. 225 Yes, this is a dunder that 226 we can go ahead and use. 227 And what's interesting about this 228 dunder is if I run this, notice 229 it, it says okay, I am a class D 230 which further goes ahead and inherit 231 from the class C first. 232 Then I go ahead and inherit 233 from the class B. 234 And then further this class 235 C that I'm inheriting, this since 236 is inheriting from the class A. 237 So this is what is mentioned, 238 that I inherit from the class A. 239 And then further this B actually 240 inherits, B inherits A as well. 241 So you'll notice that, hey, 242 further I have objects so 243 this is not being used much. 244 The only trick that you need 245 to remember always is 246 that how the order 247 of inheritance matters a lot. 248 And that is it. 249 That's your mro. 250 Usually this is a bit 251 of an advanced topic. 252 Usually nobody covers it up and 253 nobody understand the importance 254 of it until unless you mess up 255 with the framework manipulation 256 like you are changing some 257 internals of FAST API or maybe 258 some SQL alchemy. 259 Then you realize, all right, 260 this is important part of it. 261 But again, we are here to get 262 our foundations really strong 263 in the Python and that's 264 why we covered this topic. 265 That is it for this video. 266 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "08 Method Resolution Order - MRO.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/08 Method Resolution Order - MRO.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0056955763,
      -0.0011571107,
      0.015455678,
      -0.056329336,
      -0.016227013,
      -0.0030609155,
      0.0016534815,
      0.017288689,
      0.006123053,
      0.0024914176,
      -0.008546871,
      -0.0068851677,
      0.013874993,
      0.037892293,
      0.13708673,
      0.019793924,
      -0.008757431,
      -0.01030697,
      -0.0017531642,
      -0.019775448,
      -0.0070490097,
      -0.00036547583,
      0.010985404,
      -0.0038894375,
      0.012958622,
      0.019179003,
      0.016419284,
      0.02575086,
      0.05524117,
      -0.020165991,
      -0.008376681,
      0.030637398,
      0.01286076,
      0.030489339,
      -0.007959187,
      0.004617137,
      0.028259633,
      -0.0014556353,
      -0.028397208,
      -0.005743287,
      -0.015174228,
      0.018950213,
      -0.0111931795,
      -0.0032992698,
      0.023473162,
      -0.021651208,
      0.0071241367,
      -0.023935627,
      -0.0019706727,
      0.0037832488,
      0.0008217655,
      0.018947875,
      0.005287444,
      -0.18642855,
      0.031521656,
      0.008452831,
      0.008451526,
      -0.0076227817,
      0.0027130486,
      -0.00083933515,
      -0.015013663,
      0.002194061,
      -0.008140698,
      -0.0036031713,
      0.015729263,
      -0.027348895,
      0.020480314,
      0.016747056,
      -0.0069911918,
      0.0017506664,
      0.012252377,
      0.0087813055,
      -0.046219315,
      -0.027211403,
      -0.02830172,
      -0.026568165,
      0.011133446,
      -0.002284113,
      0.017625248,
      0.031263635,
      0.0060955402,
      -0.0026909814,
      0.016654978,
      0.006749503,
      0.012833658,
      0.008732932,
      -0.018273989,
      -0.012051728,
      -0.010550023,
      -0.006658847,
      -0.014139724,
      0.025025023,
      0.010864967,
      -0.005878904,
      -0.01932427,
      0.0015375533,
      -0.012318519,
      0.00094716344,
      -0.0060158325,
      -0.0023474833,
      0.01637776,
      -0.014446082,
      -0.020510342,
      -0.0078204805,
      0.00925831,
      -0.0031099217,
      -0.024580404,
      0.0059174383,
      -0.005500118,
      0.004338832,
      0.019467762,
      0.0006112255,
      0.0034227872,
      0.019738642,
      0.013990503,
      -0.16705114,
      0.008451198,
      -0.0014720734,
      -0.009554489,
      -0.012877874,
      0.010567878,
      -0.009756924,
      0.004630089,
      0.01232646,
      -0.015982656,
      0.020225858,
      -0.017086264,
      0.026529875,
      -0.015740745,
      -0.010956886,
      -0.026248587,
      -0.0089749005,
      0.007963356,
      0.0051981877,
      0.0018941916,
      0.00397502,
      0.004014008,
      -0.00932154,
      -0.02745354,
      -0.0068686306,
      -0.010722371,
      0.017849293,
      -0.00083450583,
      0.03773202,
      -0.016070943,
      -0.025848828,
      -0.015007016,
      0.0033844598,
      -0.006986711,
      -0.029740447,
      0.009024683,
      -0.013495926,
      0.012286379,
      -0.028849756,
      0.005746798,
      -0.024950879,
      -0.014213441,
      0.0073087565,
      -0.008922338,
      0.0073197503,
      -0.001256172,
      0.007437115,
      0.004862879,
      -0.0033019509,
      -0.004682869,
      0.0008135551,
      -0.016300166,
      0.013308156,
      0.03270705,
      0.0123152295,
      -0.004446927,
      -0.0172016,
      -0.013383666,
      0.021708911,
      -0.028369062,
      -0.010952959,
      -0.009721256,
      -0.0020151706,
      0.02779138,
      -0.027184283,
      0.0033629572,
      0.006393775,
      0.029924484,
      -0.0074807275,
      -0.0058102603,
      0.0037273588,
      -0.011508246,
      0.01168626,
      0.015000438,
      0.022299789,
      -0.0048626354,
      -0.00538228,
      -0.015181552,
      -0.006740199,
      0.02370218,
      -0.023244398,
      0.0029684629,
      0.015548382,
      -0.016575659,
      0.01727874,
      0.014544444,
      0.0036824737,
      -0.0036230783,
      -0.02153262,
      0.0017844721,
      0.00086287997,
      0.025736388,
      -0.015330526,
      0.000975385,
      0.014578306,
      -0.017099747,
      0.005442494,
      0.0062849093,
      -0.005061765,
      0.019277435,
      -0.0047060284,
      0.0054666116,
      -0.016751809,
      -0.0054863016,
      -0.020701928,
      -0.0030143687,
      0.0037791268,
      -0.0047421004,
      0.01682226,
      -0.0010010788,
      0.004448252,
      -0.001503893,
      0.018688569,
      -0.0029969416,
      0.0024239414,
      0.026910784,
      0.019484075,
      -0.017259613,
      0.0060237735,
      0.0056714546,
      0.0030538181,
      -0.018299561,
      0.023033503,
      0.017626772,
      0.009746587,
      -0.011171868,
      0.0121760825,
      -0.00036809524,
      0.011864259,
      0.01472112,
      0.0020958884,
      -0.008024113,
      0.0007665499,
      -0.0020541158,
      -0.024314381,
      0.0009066381,
      -0.0013904134,
      0.0024286252,
      -0.018427681,
      0.03639975,
      -0.03322667,
      -0.02904447,
      0.011375569,
      0.008818825,
      -0.021800172,
      0.0011446241,
      -0.0017805565,
      -0.019989017,
      -0.016550839,
      0.028643457,
      0.012451018,
      -0.006294112,
      0.012682744,
      -0.017821683,
      0.030739047,
      0.005338235,
      0.01335059,
      0.011741791,
      0.0062103695,
      -0.020325713,
      0.020965865,
      -0.113251485,
      0.014223022,
      -0.023688842,
      -0.029966889,
      0.013988566,
      0.018420849,
      -0.03414978,
      -0.0037017942,
      0.0012028507,
      -0.0042707007,
      -0.009004588,
      -0.013627264,
      0.041850343,
      -0.03891965,
      -0.010025276,
      -0.028849203,
      -0.01057727,
      -0.0033809252,
      0.04026252,
      -0.007801908,
      0.013173327,
      -0.0066521317,
      0.003235152,
      0.027081119,
      0.009739666,
      0.0027302185,
      0.0002301967,
      0.014936514,
      0.0321639,
      0.0043452512,
      0.010065742,
      0.026215969,
      -0.004221461,
      -0.020353498,
      -0.0013376813,
      -0.014014298,
      0.0030409938,
      -0.03382308,
      0.0035645957,
      -0.015922096,
      0.020361753,
      -0.031002622,
      0.014127504,
      0.029557122,
      0.0079943575,
      0.028125247,
      -0.017370034,
      0.0010356898,
      0.0021250849,
      -0.0009107253,
      -0.00032673893,
      0.01092238,
      0.0148756765,
      -0.0085011,
      -0.0037047577,
      0.026278207,
      0.023003804,
      -0.004709331,
      0.013923518,
      0.031283062,
      -0.021776965,
      -0.0098359175,
      0.0033713332,
      -0.014421257,
      0.007969885,
      0.0011476845,
      0.0076121646,
      -0.021312872,
      0.0068270876,
      0.013823874,
      0.025685634,
      0.006946641,
      -0.010801616,
      -0.019681565,
      0.032868616,
      -0.002616892,
      0.0009687392,
      -0.03511541,
      -0.027936535,
      0.014906061,
      0.011583797,
      0.005150533,
      0.0017492078,
      0.010384685,
      -0.0031893302,
      0.011190935,
      -0.012878513,
      -0.0058948044,
      0.014972039,
      -0.032663625,
      0.017571775,
      0.019358546,
      0.0045587546,
      0.0007733565,
      -0.03601303,
      0.010329209,
      -0.011361464,
      -0.011755099,
      0.0025305403,
      0.037706524,
      -0.025017401,
      -0.0006797826,
      -0.0091182,
      0.0034275544,
      -0.003245292,
      -0.017008359,
      -0.023688562,
      -0.0024317978,
      -0.0045652147,
      -0.01022792,
      0.0012980895,
      0.005751815,
      -0.014382518,
      -0.0064620925,
      0.00022586116,
      0.027872328,
      -0.008729364,
      0.013060027,
      0.0028981126,
      -0.022582969,
      0.0015145477,
      -0.00013525585,
      0.0062750275,
      0.010095276,
      0.006615861,
      0.0017108187,
      -0.014867513,
      -0.005997427,
      0.009142163,
      -0.020656507,
      -0.032663584,
      0.006733089,
      -0.019124592,
      -0.010851617,
      -0.012669315,
      -0.005199029,
      0.017786171,
      0.012827231,
      -0.021168424,
      0.0013490174,
      -0.0001373335,
      -0.004059945,
      0.022443336,
      -0.01199784,
      -0.011987232,
      0.0105463145,
      -0.020561583,
      -0.0058348454,
      -0.0067992373,
      -0.010929446,
      -0.017629458,
      -0.0058649676,
      -0.009340204,
      0.0047216,
      -0.010359477,
      0.016109321,
      -0.023434984,
      -0.020665023,
      -0.021971015,
      -0.028482316,
      -0.0020933887,
      0.00164446,
      -0.015462538,
      0.004370094,
      0.021248499,
      0.009799481,
      -0.008495864,
      0.025773142,
      -0.011067176,
      -0.009914647,
      -0.01961551,
      -0.003377411,
      -0.012861851,
      0.009960131,
      0.009681055,
      0.017498858,
      0.013638082,
      -0.006863689,
      -0.008416029,
      0.024387505,
      0.016031783,
      -0.005230441,
      -0.02194209,
      0.009677777,
      0.013049379,
      -0.00040436862,
      0.004317441,
      0.005550857,
      -0.016578462,
      0.0033983423,
      0.028829841,
      -0.019035311,
      -0.005488356,
      0.010655989,
      -0.009736655,
      -0.0039308155,
      -0.0024953454,
      0.0038032332,
      0.00806417,
      0.009655776,
      -0.008010035,
      -0.020646298,
      -0.009883766,
      -0.0035133432,
      0.0056487834,
      -0.01772544,
      -0.005033084,
      -0.027220981,
      0.016881842,
      0.025583705,
      0.0136713805,
      -0.0036222257,
      0.012498403,
      0.001317053,
      -0.0068589416,
      0.010060784,
      0.03192078,
      -0.007641268,
      -0.025866393,
      0.0026911714,
      0.015985122,
      -0.0148911225,
      0.00894446,
      -0.01152897,
      0.037107747,
      0.0022020503,
      0.018176183,
      0.0007934695,
      0.0018210826,
      0.0049832882,
      -0.0037454765,
      0.002095495,
      -0.009212658,
      0.015981646,
      -0.038831662,
      -0.0032138764,
      0.026155395,
      0.010564484,
      -0.016224904,
      0.0009763633,
      0.0027679189,
      0.002163442,
      -0.014460831,
      0.013259244,
      0.0024643952,
      -0.018610872,
      0.01744639,
      0.0126021225,
      -0.00094544364,
      0.000843021,
      -0.0025627173,
      0.026523622,
      -0.013608992,
      -0.0027512126,
      -0.036580525,
      0.036519855,
      -0.009471569,
      -0.00070569146,
      -0.0020144023,
      0.015031212,
      0.03911124,
      0.025236003,
      0.018227179,
      0.0148363905,
      -0.001719243,
      0.008793693,
      -0.005272768,
      -0.000055605407,
      0.0018959692,
      -0.12876165,
      -0.013181931,
      0.0023415564,
      0.0018129192,
      -0.025580753,
      0.017708959,
      -0.005992452,
      -0.016794419,
      -0.01727959,
      -0.007317083,
      0.022651743,
      0.017705332,
      0.009055292,
      -0.014257307,
      0.024112087,
      -0.012002502,
      0.010097905,
      0.0051839356,
      0.0106649995,
      0.011245921,
      -0.014175883,
      -0.00039980854,
      0.0006830261,
      0.021057121,
      -0.016874615,
      -0.019151581,
      -0.0056451457,
      0.0057223844,
      0.006710109,
      -0.01093267,
      -0.017615486,
      -0.015186687,
      0.0015200968,
      0.014907977,
      0.0111390725,
      -0.0043578204,
      -0.020467605,
      0.00996718,
      -0.007943865,
      0.008355388,
      -0.010001585,
      -0.017128216,
      0.022825377,
      0.0073708887,
      -0.02922349,
      0.0075361123,
      0.02516416,
      -0.002969936,
      0.005569759,
      0.024361935,
      -0.023804227,
      -0.011025306,
      0.008732307,
      -0.028608574,
      -0.002828971,
      -0.02698088,
      0.01113235,
      -0.0035601347,
      -0.011921266,
      -0.017902872,
      -0.010865508,
      0.0054788934,
      -0.002254415,
      0.016288603,
      0.0044901185,
      0.015485157,
      0.02956837,
      -0.0018745897,
      0.01156357,
      0.0117018605,
      -0.00607321,
      0.00412334,
      -0.01525512,
      0.02038326,
      0.003765287,
      0.007634662,
      -0.0023610485,
      0.00046196065,
      -0.010284432,
      0.011686208,
      -0.04208531,
      -0.009243664,
      -0.06310715,
      -0.010083122,
      0.0031291055,
      0.007832648,
      0.017507333,
      -0.0024476892,
      -0.004208597,
      -0.0023164807,
      0.016967721,
      -0.014319844,
      -0.02843026,
      0.0034639353,
      0.004837325,
      -0.0026912352,
      -0.01820197,
      0.009665861,
      -0.0092467675,
      -0.025529532,
      -0.0072894497,
      -0.013941596,
      -0.00017819583,
      -0.015572258,
      0.0012447919,
      -0.010761995,
      0.017313998,
      -0.002271121,
      -0.025115129,
      0.0057322895,
      -0.0099992715,
      0.015705483,
      -0.0040202476,
      -0.13524157,
      -0.01227233,
      0.013231017,
      0.0105845835,
      0.00063892565,
      0.022311365,
      -0.0148529215,
      -0.029644305,
      0.005381321,
      -0.012589838,
      0.014989167,
      0.0034763156,
      -0.0052519157,
      0.0014579038,
      0.021112842,
      0.13090622,
      -0.007302376,
      0.006183248,
      -0.008629809,
      0.016401133,
      -0.0010491556,
      -0.010345728,
      -0.034145623,
      0.008397986,
      -0.002278912,
      0.0045118914,
      -0.0076345415,
      -0.0026896056,
      0.013452107,
      -0.010963381,
      0.0012798007,
      -0.012319984,
      -0.0032130282,
      0.029392816,
      -0.005388234,
      -0.010105642,
      -0.022749742,
      -0.0069666463,
      -0.0070787193,
      -0.0032194825,
      0.023161886,
      -0.0070989686,
      0.002618446,
      0.0217054,
      0.0016903911,
      -0.0045905965,
      -0.005139886,
      -0.01571078,
      0.012684835,
      -0.011585916,
      -0.015468765,
      -0.052123003,
      0.0015786797,
      0.010925889,
      -0.014201478,
      0.007459657,
      -0.004857115,
      0.016635388,
      0.006694279,
      0.00318319,
      0.00009810722,
      0.018520104,
      -0.010714939,
      0.012865821,
      -0.004678538,
      -0.010323612,
      0.022499196,
      0.028463764,
      0.007726394,
      0.0014767654,
      0.017862618,
      0.0054709692,
      -0.02865798,
      -0.0031502158,
      -0.014778206,
      0.0034984872,
      -0.014969586,
      0.032940526,
      -0.013126982,
      0.0063095377,
      0.0205791,
      0.0076327696,
      0.002875937,
      -0.011435727,
      0.013889041,
      0.0019174954,
      -0.0086401375,
      0.02124801,
      0.0011458066,
      -0.0046713008,
      0.016043564,
      -0.0056927474,
      -0.011724885,
      0.03391443,
      0.000963667,
      0.01256519,
      0.011949471,
      -0.016110454,
      0.04000454,
      0.010436379,
      -0.014295361,
      -0.008532383,
      0.001143349,
      -0.02151556,
      0.02516592,
      0.01846797,
      -0.01363784,
      0.0038729387,
      -0.00036948823,
      -0.0129293585
    ]
  },
  {
    "id": "genai_cohort_python_09_Static_Methods_in_python_vtt",
    "content": "Next up in this video we are going 2 to talk about static methods. 3 They are actually very fun 4 and pretty easy to work on with. 5 I'll just walk you through. 6 So let's go ahead and get 7 into the new file. 8 And by the way, static methods are 9 helpful when you want utility 10 functions grouped with your classes 11 without depending on any instance. 12 And I know this is a lot and you 13 might be thinking I didn't got it. 14 What do you really mean 15 to say with this jargon? 16 Don't worry, I will explain you 17 with the code and it 18 will be super, super easy. 19 Let me go ahead and create 20 a new file for you. 21 And let's create this one. 22 And we're going to call 09 23 and this one will be static method. 24 It can be method or methods. 25 Don't judge me on that. 26 But we're going to just go like that. 27 So let's go ahead and create a new 28 file and start writing some code. 29 Now in order to start with 30 static method, first of all, 31 let me get this up here. 32 Go ahead and create a simple class. 33 This will be a simple class 34 which says chai utils a simple 35 utility for the chai. 36 And again we can go 37 really crazy in that. 38 But we'll just go 39 with the simple one. 40 So I can just go ahead and define 41 a method just like this. 42 Let's call this one as 43 clean ingredients. 44 Clean ingredients. 45 And it will receive a text with this. 46 This method just receives a text. 47 Pretty simple. 48 And what it does, it 49 loops through the value. 50 So it just says for item in text. 51 And it takes the whole text 52 and split it and use a method known 53 as split with all the text 54 and splits it based on the comma. 55 All right, so we receive a long text 56 which might have a comma and we 57 just split them based on the comma. 58 Once we are done with this, we 59 want to actually go ahead 60 and get the response and remove 61 all the spacing from it. 62 Got it. 63 Pretty simple. 64 So I'll just go ahead and put up. 65 This is the part we have studied. 66 So if you remember this, we can 67 create an array just like this. 68 And now I can actually comprehend it. 69 So I'll receive an item here. 70 That is we have studied and I also 71 further want to strip it down. 72 So there we go. 73 And we're going to return this. 74 This is a really classic way 75 of writing, the things. 76 So let me give you an example 77 of how this will actually work. 78 So let's just say you have 79 a simple string just like this. 80 You have a space at the start. 81 Then you simply say water and then 82 probably you have one more space, 83 then you simply go like this and 84 then say you have milk, two spaces, 85 a comma and then we are going to 86 have ginger just like this and goes 87 like that. 88 So if any string like this is being 89 passed onto this, we are actually 90 going ahead and extracting all 91 the values separated by comma, then 92 stripping all the extra spaces. 93 That's why this item strip and. 94 And we get all the value 95 as a nice sorted array. 96 This is what it does. 97 Now there are a couple 98 of ways how you can use it. 99 Let's go ahead and define this. 100 So let's just say this is 101 a raw and this is a simple 102 string with a space. 103 We have a water, then a space, then 104 a comma and then we have milk, then 105 we have a space comma just like 106 this we have ginger, ginger which 107 also have a space and then finally 108 honey. 109 And that is how it looks like. 110 So we want that this string should be 111 passed on to this utility function 112 and we should extract the value. 113 Now most of the time what you're 114 going to do is we're going 115 to go ahead and create an object. 116 So let's call this one as object. 117 This object will be from 118 the chai utils just like this. 119 And now through this object I can 120 just go ahead and call the method 121 cleaningredients and then I have 122 to pass this raw method. 123 Absolutely nothing wrong with this. 124 This is the usual aspect or usual way 125 of how we build the things. 126 But, but there is another way 127 that these are the things which 128 doesn't need any object. 129 We just want that something 130 needs to be passed on through 131 this kind of a method. 132 So there is another interesting 133 way and this is where 134 the decorator comes up. 135 So you can just go 136 just about this one. 137 And by the way ignore this part 138 up here and I can just annotate this 139 with a static method use at the rate 140 and then say static method. 141 Now your way of writing the code 142 is now going to be different. 143 You can directly use this 144 chai utils and have 145 the method.cleaningredients. 146 yes, we can now do this and pass 147 on a raw value just here and we 148 can store this raw value here. 149 So let's just call 150 this one as cleaned. 151 And now we can just go ahead 152 and print this cleaned. 153 There we go. 154 So I hope you got the value 155 that how the static method 156 and they are used quite a lot. 157 They are used quite a lot. 158 Let me show you by opening this 159 up and we will say Python 3 and this 160 will be 09 and there we go. 161 We got all the values. 162 Can we do this with 163 the previous method as well? 164 Of course. 165 But static method are those 166 methods which doesn't 167 require any object creation. 168 They are not dependent on the object. 169 You can directly go ahead 170 and use the classes and as 171 a utility methods and these are 172 very common in utilities. 173 You create a lot of utilities 174 like database interactions 175 and especially in the fastapi, 176 a lot of them are there. 177 So directly use the class name. 178 And this is also another 179 one way of using it. 180 So this is it. 181 For the static methods, 182 there is nothing more 183 to it, nothing less to it. 184 It's just a way and how you do it. 185 And make sure you don't 186 forget the decorator. 187 If you intend it that this method 188 should be allowed to be used 189 without creating an object. 190 Don't forget this decorator. 191 And that is it. 192 Hope you're enjoying these things. 193 And if you're enjoying, 194 please do rate us. 195 We would love to see your rating. 196 This is something that helps us 197 to motivate and build 198 more awesome videos. 199 That is it for this one. 200 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "09 Static Methods in python.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/09 Static Methods in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.014271735,
      0.009909415,
      0.030058779,
      -0.06844448,
      -0.014086054,
      -0.020820245,
      0.010939488,
      0.0339544,
      -0.00008428067,
      -0.0033191903,
      -0.016904322,
      -0.015668051,
      0.002790333,
      0.0035974917,
      0.11105619,
      -0.008495255,
      -0.008617126,
      -0.0014895977,
      -0.0028151767,
      -0.018593958,
      0.034891147,
      -0.0063664117,
      0.010780004,
      0.013258263,
      -0.006544617,
      0.0015852328,
      0.019483214,
      0.0061249225,
      0.031690605,
      -0.01186739,
      -0.00092846673,
      0.031632904,
      0.022372684,
      0.020795746,
      0.020939054,
      0.014071607,
      0.014511273,
      -0.009929656,
      -0.023606975,
      0.010480682,
      -0.027882982,
      0.001833827,
      0.00991161,
      -0.009548536,
      0.03286294,
      -0.00857416,
      0.02188465,
      -0.026160669,
      0.028335702,
      0.017515454,
      -0.0023113375,
      -0.006160526,
      -0.02142211,
      -0.1823005,
      0.023930317,
      0.016952803,
      0.005809843,
      0.003685365,
      0.01838853,
      0.019765122,
      -0.023009632,
      0.01335576,
      -0.026092986,
      -0.008356906,
      -0.012072932,
      -0.026975658,
      0.02411159,
      -0.0020984367,
      0.0029719335,
      0.008090588,
      0.01456765,
      -0.0029792867,
      -0.026003338,
      -0.014885564,
      -0.005399861,
      -0.043379333,
      0.00074264896,
      0.0018984627,
      -0.0018465185,
      0.010586985,
      0.0036541275,
      -0.023683593,
      -0.006463381,
      -0.018066887,
      0.022427801,
      0.017351313,
      -0.031553306,
      -0.014473167,
      -0.0021673937,
      -0.010378967,
      -0.0062707565,
      0.009845712,
      -0.004923402,
      0.010104472,
      0.0003928669,
      -0.0044906605,
      -0.013054458,
      0.010880265,
      -0.032038722,
      -0.0028272695,
      0.01366621,
      -0.012767903,
      -0.042658284,
      0.00088696304,
      0.021409314,
      0.0007198372,
      -0.020213608,
      0.01093554,
      -0.0051805326,
      0.014915801,
      0.01680178,
      -0.0056117782,
      0.0029613122,
      0.0054734927,
      0.00608934,
      -0.17207201,
      0.012086568,
      0.0026258607,
      -0.0022915308,
      0.0031029214,
      -0.0019005464,
      0.0129065225,
      0.019875128,
      -0.00146913,
      -0.01963899,
      0.004251775,
      -0.008291136,
      0.017858218,
      -0.0009851274,
      0.0036978195,
      -0.02274863,
      -0.035592876,
      0.0009550187,
      0.01313992,
      -0.014676972,
      0.016834134,
      -0.010441886,
      0.0041430164,
      -0.0108257625,
      0.005454711,
      -0.009353427,
      0.012215069,
      0.006736199,
      0.022839624,
      0.001029471,
      -0.022305613,
      -0.0095787365,
      0.008342177,
      -0.023618247,
      -0.017298238,
      0.011987073,
      -0.0032986503,
      -0.0074316487,
      -0.008541654,
      0.0067610554,
      -0.017455494,
      0.016386852,
      0.002001986,
      0.0019363433,
      0.025947064,
      0.011865623,
      0.021730388,
      -0.017844988,
      0.01777803,
      -0.0064791655,
      -0.01798756,
      -0.020739648,
      0.026627995,
      0.0245499,
      0.036049195,
      -0.006082776,
      -0.017619913,
      0.013443095,
      0.0028448927,
      -0.010379,
      0.0025401178,
      0.0009970715,
      0.005324317,
      0.012903375,
      -0.0092355935,
      0.0021855687,
      -0.0114068035,
      0.03847512,
      -0.018299242,
      0.011312722,
      -0.0033347623,
      -0.017013606,
      0.0028876837,
      0.00722673,
      0.007680475,
      0.030601144,
      0.0064044353,
      0.027117243,
      0.029863061,
      -0.0017524806,
      -0.018478528,
      0.003942504,
      -0.008685113,
      -0.022237,
      0.021562159,
      0.024768762,
      -0.0009767629,
      -0.00023605453,
      -0.028447755,
      0.022425668,
      0.0067108977,
      0.023172913,
      -0.018694479,
      0.013672623,
      0.0022478956,
      -0.023184935,
      -0.016769659,
      0.010549829,
      -0.010345489,
      0.016044106,
      -0.0018202029,
      0.0100905085,
      -0.010474032,
      -0.009471713,
      -0.008652118,
      -0.007946169,
      -0.012803157,
      -0.0038647084,
      0.015264347,
      -0.0016139616,
      -0.011202118,
      0.008217856,
      -0.0114229135,
      0.0068853605,
      0.01806414,
      0.04130101,
      -0.010323674,
      -0.008575489,
      -0.0047273845,
      0.002324793,
      0.005359924,
      -0.027266564,
      0.0064242897,
      0.0112434095,
      0.0031246743,
      -0.016231684,
      0.00932937,
      -0.013658581,
      -0.0019281573,
      0.014564296,
      0.016821982,
      0.0008341024,
      -0.0033131046,
      -0.0001686668,
      -0.010793795,
      -0.018222876,
      -0.014464575,
      0.021406237,
      -0.004329999,
      0.018072564,
      -0.012935808,
      -0.03494389,
      -0.010034045,
      -0.019445594,
      0.008748298,
      0.002487182,
      0.008014184,
      -0.019062521,
      -0.010499076,
      0.0038896967,
      0.007438759,
      -0.010274356,
      0.010688663,
      -0.0044143647,
      0.026049424,
      0.025701163,
      0.0142538985,
      0.012036219,
      0.0010732237,
      -0.0289259,
      -0.0062005366,
      -0.08798881,
      0.035851885,
      0.010705711,
      -0.043994464,
      -0.0029577098,
      -0.007949161,
      -0.044501834,
      0.02390071,
      -0.00519044,
      0.024051324,
      0.0040875273,
      -0.005546751,
      0.0326474,
      -0.013820724,
      -0.028777733,
      -0.0045780046,
      0.0076415213,
      -0.004039751,
      0.034171175,
      -0.0146692945,
      0.0062015345,
      0.009555995,
      -0.012293428,
      -0.0040780944,
      0.02704607,
      -0.00850581,
      -0.013926278,
      0.024031904,
      0.017712224,
      -0.01685066,
      0.00606405,
      0.036415797,
      0.00043642492,
      -0.0137931,
      0.010252273,
      0.027116185,
      -0.0027871702,
      -0.015652014,
      -0.027043164,
      -0.018898312,
      -0.014314658,
      -0.00059901207,
      0.031431004,
      0.038180493,
      0.002916357,
      0.009914255,
      -0.01723381,
      0.0070994664,
      -0.023681397,
      0.020070055,
      -0.012431618,
      0.0007133935,
      0.02588276,
      -0.00008330456,
      0.020110615,
      0.0011237179,
      -0.0010248221,
      -0.024377914,
      0.02112626,
      0.0039133606,
      0.0036587608,
      -0.006886163,
      -0.000025177747,
      -0.018984936,
      0.012761921,
      -0.011194905,
      0.00756544,
      -0.004444502,
      0.005389024,
      0.010021775,
      0.02406609,
      -0.012810986,
      -0.0031388677,
      -0.0037681174,
      -0.008384285,
      0.009888617,
      -0.014078995,
      -0.0057066893,
      -0.022941846,
      0.0050867363,
      0.01890219,
      0.015929066,
      0.006603727,
      0.010631658,
      -0.01676861,
      0.015548223,
      0.021849558,
      0.012697147,
      0.013158258,
      -0.028534543,
      0.013307476,
      0.008401034,
      -0.0051073874,
      -0.006651123,
      -0.006558353,
      0.020933371,
      -0.008707453,
      -0.0021918258,
      -0.014348847,
      0.03175891,
      -0.0063062403,
      0.0108744055,
      -0.004634316,
      0.0045756623,
      -0.014595393,
      -0.0038736123,
      -0.01934617,
      -0.025947288,
      -0.023576157,
      -0.0010232361,
      0.010474564,
      0.0128957275,
      -0.011275771,
      -0.017944675,
      -0.003443097,
      0.0067228423,
      0.0026271618,
      0.0070200916,
      0.019595452,
      0.008198641,
      -0.0098115895,
      -0.025020132,
      -0.024068248,
      0.0070697265,
      0.00011742771,
      0.009598774,
      -0.022003949,
      -0.009834725,
      -0.007896897,
      -0.036878802,
      -0.019724479,
      0.016395321,
      -0.030812649,
      -0.011096395,
      -0.0033353623,
      -0.017153481,
      0.0076755593,
      0.009403756,
      0.035490505,
      0.0223036,
      -0.021967486,
      0.0037397128,
      0.013682003,
      -0.0054759844,
      -0.0046944055,
      0.024561629,
      -0.000108271815,
      -0.0071889716,
      0.004035575,
      -0.0366207,
      -0.023914639,
      -0.007150887,
      -0.02095868,
      -0.006658554,
      -0.0154868215,
      0.011924924,
      -0.008008389,
      -0.0042108553,
      -0.010992688,
      -0.0045051426,
      0.009729489,
      0.008264588,
      -0.008020052,
      -0.019888395,
      0.01733692,
      0.008355612,
      0.02039291,
      0.0021308754,
      0.007717303,
      0.010625741,
      -0.011182788,
      -0.014802991,
      -0.020197542,
      -0.010125757,
      0.010915434,
      0.0034158695,
      0.02057512,
      -0.018381784,
      0.0024153856,
      0.0014631391,
      -0.013829617,
      -0.011140035,
      -0.037434556,
      -0.0022349986,
      0.002881222,
      0.013355036,
      -0.0048941867,
      0.0028975657,
      -0.02765439,
      -0.0042036395,
      -0.019935748,
      -0.026948636,
      -0.01327657,
      0.015064176,
      0.016972449,
      0.0013919213,
      0.00596475,
      0.0024085168,
      -0.002106312,
      0.019510116,
      -0.020515615,
      -0.026176212,
      -0.016983718,
      0.014626058,
      0.015538861,
      -0.008236464,
      0.0011278882,
      -0.015013687,
      -0.006436736,
      0.011800289,
      0.012814752,
      0.00054766325,
      -0.005713901,
      0.0071858033,
      0.012062319,
      0.0319665,
      0.0056780023,
      0.0008827226,
      -0.02162282,
      -0.009649202,
      0.031365372,
      -0.016610412,
      0.0082068555,
      -0.017794807,
      0.011229775,
      -0.03272133,
      -0.018744932,
      -0.0021264344,
      0.0053437757,
      -0.0015817148,
      -0.010124217,
      -0.0061529847,
      -0.005689182,
      -0.004398044,
      -0.009812755,
      -0.02130168,
      -0.003230538,
      0.026863625,
      -0.019232456,
      0.025977636,
      -0.003558809,
      -0.030665344,
      -0.020006435,
      -0.020433713,
      -0.0030876743,
      0.019693175,
      0.023938611,
      0.023112651,
      -0.023752766,
      0.004230166,
      0.0065997695,
      0.02370238,
      0.0012532653,
      -0.01542655,
      -0.0019115359,
      0.020785782,
      -0.0040449826,
      0.0035226564,
      -0.00724762,
      -0.005943787,
      0.007005574,
      0.022209696,
      0.004454438,
      0.0077802422,
      0.00022078623,
      -0.0067361915,
      -0.007088031,
      0.009960102,
      0.0026273322,
      -0.117632076,
      0.011572591,
      -0.015058796,
      0.009211094,
      0.003333011,
      0.0035740987,
      -0.0065222047,
      -0.018640356,
      -0.0023330913,
      -0.0023132837,
      0.006813542,
      0.012976262,
      -0.010947364,
      -0.0005767495,
      0.018077025,
      -0.015977805,
      -0.0054142433,
      0.024019115,
      0.004748598,
      -0.0010176159,
      0.009719304,
      -0.0063345344,
      0.0022993158,
      0.008547038,
      -0.029090852,
      -0.008752971,
      0.014275805,
      0.0036887755,
      0.002006832,
      -0.00031937938,
      -0.029012015,
      -0.012707054,
      -0.0029049402,
      0.016081333,
      0.0117111225,
      0.01238164,
      -0.005158274,
      0.0030505292,
      0.01844988,
      0.014455747,
      -0.018560722,
      -0.01226063,
      0.0038902897,
      -0.009511396,
      -0.0069791484,
      0.024941042,
      0.02411599,
      -0.0126193445,
      0.009943311,
      0.05007653,
      -0.024077563,
      -0.00541871,
      -0.0021064451,
      -0.021959133,
      0.011646932,
      -0.0026773354,
      0.008204292,
      -0.0012189358,
      -0.0021181891,
      0.0003395321,
      0.003962913,
      0.0049946057,
      0.023957511,
      0.032979656,
      -0.02316248,
      0.004741273,
      0.029002756,
      0.018536236,
      -0.011783314,
      0.01727253,
      0.0023481003,
      0.010349213,
      0.004157583,
      0.021019232,
      0.0061679822,
      0.01514004,
      -0.01770913,
      0.02191553,
      -0.014770785,
      0.020007467,
      -0.030371016,
      -0.0034387747,
      -0.043388363,
      -0.015414772,
      -0.00007363602,
      -0.02364564,
      -0.00026382977,
      0.021885268,
      0.006380336,
      0.010775631,
      0.0012701037,
      0.0024078768,
      -0.025211867,
      0.009571111,
      0.01380111,
      -0.008619862,
      -0.02343774,
      -0.0077185305,
      -0.0013038744,
      -0.015551095,
      -0.014964426,
      0.0028321282,
      -0.00069661037,
      -0.0067312783,
      0.013950385,
      0.00539047,
      -0.005368001,
      0.014479315,
      0.009347975,
      0.0022487235,
      0.0031431587,
      -0.0018685022,
      0.0077167847,
      -0.15285142,
      -0.01598006,
      0.0009666103,
      0.02553128,
      0.005369726,
      0.0070037628,
      0.0014760939,
      -0.012413527,
      -0.006820786,
      -0.011179916,
      0.03178572,
      -0.005329746,
      -0.0060305735,
      -0.011885752,
      0.027796222,
      0.13514492,
      -0.01614032,
      0.0034457557,
      0.0032767854,
      -0.0016368685,
      0.0070550703,
      -0.015043284,
      -0.018691683,
      -0.0046514734,
      -0.00728697,
      -0.016208936,
      0.01227379,
      0.006027491,
      0.013612056,
      -0.00075024203,
      0.013244063,
      -0.016803676,
      0.008588938,
      0.038708985,
      0.00427405,
      -0.012331146,
      -0.007863512,
      0.0015824278,
      0.016317757,
      -0.0014252556,
      0.008271403,
      0.021924872,
      -0.007992542,
      -0.00015732377,
      0.0050901007,
      0.010401717,
      -0.009805344,
      0.0011324252,
      0.004412946,
      0.0034979137,
      -0.012496336,
      -0.045923077,
      0.026626969,
      0.01403495,
      -0.0026593965,
      0.0031512189,
      -0.007298906,
      0.016858496,
      0.014860895,
      0.021778936,
      0.0061216555,
      0.005774129,
      -0.017123587,
      -0.011877346,
      0.00048585673,
      -0.009549424,
      0.009070637,
      0.02116298,
      0.010085639,
      -0.00066406577,
      0.008137691,
      -0.003731922,
      -0.010840629,
      0.022617353,
      -0.009264007,
      -0.00926359,
      -0.03334642,
      0.05400325,
      0.010176033,
      -0.00022213414,
      0.00440584,
      0.005094365,
      -0.017099967,
      -0.0114577,
      0.012500256,
      -0.00024370379,
      -0.01677213,
      0.024524279,
      -0.01172621,
      0.016358241,
      0.011993761,
      -0.00930207,
      -0.014910473,
      0.03506736,
      -0.01408865,
      0.011663492,
      0.007825681,
      -0.013824348,
      0.045203388,
      -0.0021134578,
      -0.00883109,
      -0.013829616,
      -0.020350577,
      -0.0026114697,
      0.03093045,
      0.010971856,
      0.024945267,
      0.017198773,
      -0.023195202,
      -0.009350808
    ]
  },
  {
    "id": "genai_cohort_python_10_Classmethod_vs_staticmethod_vtt",
    "content": "All right, so in the last 2 video we saw that how 3 the static method works. 4 And it's a pretty interesting 5 way to declare utilities 6 and all those things. 7 But there is one, drawback or kind 8 of a thing where the static 9 method doesn't work really well, 10 which is when you initialize an 11 object, the static methods are 12 never designed to initialize any 13 objects. 14 It just work is designed to. 15 So that class can actually 16 direct, invoke that and can 17 just use it like a utility. 18 But there is also one more 19 interesting thing, which is how do 20 you control the constructor? 21 We have seen we can use init method 22 for declaring a constructor, but can 23 we have more than one constructor? 24 Sadly, no. 25 You can have just one constructor, 26 but there are ways to control the 27 constructor and get a feeling like 28 we have more than one constructor 29 and more than one ways of kind of 30 initiating an object from the class 31 itself. 32 It's a very interesting topic 33 and sometimes it feels like it's 34 very similar to static method. 35 But I'll walk you through with that. 36 So, first of all, I've 37 created this nice diagram. 38 So. 39 And I will walk you through 40 how it's being done. 41 So the step one is going 42 to be like this. 43 We will simply go ahead and say 44 that we have this class methods, 45 we have the static method. 46 We'll go through with the difference 47 between each one of them. 48 But first of all, we are going 49 to go ahead and write, some code. 50 So that is the easiest way 51 and the most beautiful way 52 to learn about the class method. 53 So let's take some chi orders. 54 I'll go ahead and say class 55 chorder, and you take 56 the order just like that. 57 And, we simply go ahead and say 58 that we want to create 59 an constructor just like this. 60 And you take, while taking the order, 61 you ask them, hey, what's 62 the T type you want to have, what's 63 the sweetness you want to have? 64 And what's the size you want to have? 65 Pretty basic stuff. 66 And as you know, when we declare 67 the constructor, we simply go 68 ahead and declare the properties 69 within the constructor itself. 70 This will be tea type, and we'll 71 get the value from tea type. 72 We'll have self dot and we'll call 73 this one as sweetness, which will 74 get its value from sweetness. 75 And we'll have one more property 76 which will be self size, which 77 will get the value from size. 78 All right, this is 79 very standard stuff. 80 We have seen this many times now. 81 If you want to have multiple 82 constructor, this is somebody is 83 creating an object and providing 84 you each individual values but 85 there could be a chance that 86 somebody might provide you a 87 value in dictionary format or 88 maybe a string format. 89 And you want to have 90 a constructor just like that. 91 That whenever an object is 92 being created, somebody can 93 provide me direct values. 94 We accept that. 95 Somebody can provide me the value in 96 dictionary format, we accept that. 97 And somebody can provide me value 98 in the string format. 99 We also accept that that 100 is the whole goal. 101 So the step one of doing that 102 is first of all you say class 103 method, it's a decorator. 104 Now that we understand 105 the decorator and importance of it, 106 then this is how it works. 107 First of all, let's define a method. 108 Let's call this one that we 109 are accepting the value 110 in the dictionary format. 111 And the most differential factor from 112 any other method that you design 113 in any class is it doesn't get self. 114 Yeah, that's the most 115 interesting part. 116 It gets cls, which is also a keyword. 117 It means that we are getting a whole 118 class reference in this one. 119 And then you just get the order 120 data just like that. 121 This time you're not getting 122 individual data, you're getting 123 passed on as a dictionary. 124 So how do we work with that? 125 We simply go ahead and return. 126 And how do we return that? 127 That's interesting syntax. 128 Follow this, up. 129 This is a syntax, nothing 130 to do with the logic. 131 We simply go ahead 132 and say this is a class. 133 So I can just go ahead and create 134 a class just like this. 135 This is almost internally 136 like calling the constructor 137 from the same class. 138 The CLS is a reference to the class. 139 So, so this whole class. 140 So when you say CLS just like 141 this, that means I'm passing 142 the whole values within this 143 constructor behind the scene. 144 So I can just come up here and can 145 say that, okay, here from the order 146 data, I want to extract a key. 147 So first of all, the key that goes 148 up here will be in the quotes, 149 of course, will be ttype. 150 And remember, this is how 151 the values are being expected 152 in this constructor. 153 So you go ahead and do exactly same 154 and I'll put 155 up a comma, we need two of them. 156 So the second key, you guessed 157 it right, will be sweetness. 158 This third key will be 159 size, and that is it. 160 So how interesting a way that now you 161 have not only just one constructor, 162 but you can actually accept 163 the value as a dictionary as well. 164 But behind the scene it's the same 165 constructor that is getting called. 166 And, can we design one more method 167 just like this for practice? 168 Of course we can. 169 We will again use class 170 method just like this. 171 And let's Just say this 172 time you want to take the value 173 from string string. 174 Just make sure you are designing 175 it such a way that you are preparing 176 for a string to come up here. 177 This is class. 178 And this time somebody gives us 179 order string or order data. 180 Could be same variable, 181 no big deal there. 182 And this time what I'm going 183 to see is I have three variables. 184 The first one is ttype. 185 I have another one 186 which is sweetness. 187 And I have another one size. 188 And I am getting all of them value 189 from the order string. 190 But I want to split it 191 and I want to split it based on. 192 Depends on how you're 193 taking the value. 194 Let's just say we are splitting 195 them based on dashes. 196 Could be comma as well, but we'll 197 just grab the value just like this. 198 All right, but this is not done yet. 199 End of the day, always, always 200 this kind of a method has 201 to call the class just like this 202 and has to call constructor. 203 The rest of the, 204 whole process is exactly same. 205 We have to get 206 the sweetness and the size. 207 And this is it. 208 This is. 209 You are overwriting the constructor. 210 Now the most important part 211 is, all right, we get 212 this, this part is all easy. 213 How do we create object from this? 214 Now creating the basic 215 object is fine. 216 I know you can do this. 217 I'll show you how to actually 218 utilize, these two methods. 219 Because if still at this point 220 in the course you don't know how 221 to create an object and from this 222 class and get these values. 223 Oh man, you need 224 to rewatch the videos again. 225 Let me go through with this one. 226 So let's just say we have 227 a order one and this order 228 one this time actually takes 229 order from the chai order. 230 But instead of passing it like this, 231 you use a method as 232 soon as you put up a dot. 233 Now you can take order 234 in the dictionary format or string 235 and you will see this pattern 236 quite a lot in Python. 237 And here I have to say 238 the key value pair. 239 So this is my key. 240 So first of all the key will 241 go like this, so ttype. 242 And then I can just provide the value 243 which will be masala. 244 Then another key value pair, 245 sweetness, and its value is going 246 to be, I don't know, medium, 247 I don't know what even stands 248 for medium, but you get the idea. 249 And we'll have the last 250 one which is size. 251 And once I give it a size, the size 252 will be, I'll take a large one this 253 time and this is completely valid. 254 Completely. 255 Fine. 256 And once I have, let me also 257 show you the Order 2 as well. 258 Order 2 this is exactly same chi 259 order but this time you are grabbing 260 the value from the string and as 261 we have designed it this way. 262 So we'll have a ginger ginger. 263 Then we have a dash. 264 We'll take the low 265 sugar and then dash and we'll 266 call this one as small. 267 So automatically it 268 will split this up. 269 Now let's go ahead and print 270 what do we get the value 271 in the order 1 and order 2. 272 That's most important part, 273 we can just grab any one. 274 Doesn't really mean order 1 is fine. 275 This next one you'll 276 automatically get it. 277 I'll open this up and let's see, 278 we have a Python 3 this time 10. 279 There we go. 280 And notice here it says hey, I'm 281 still an object of chi order object 282 at best wherever the location is. 283 This is interesting. 284 Now another interesting thing 285 that you can do is you can 286 use so many dunders here. 287 So one of the dunder that you 288 will see is this dictionary. 289 And let's see what happens 290 when I go ahead and run this. 291 So notice here all 292 the values are here. 293 So all the dictionaries are 294 with me still if I go ahead 295 and pass on the dictionary. 296 Now this dict dunder is 297 actually very interesting. 298 Although you have this as a string. 299 Now notice here, very 300 interesting part, I still have 301 all this value up here. 302 Very, very interesting way. 303 Can we have an order three as well? 304 I guess we can have order three, 305 order three and this time 306 we use simplychai order 307 and we pass on all the values. 308 So we simply go ahead and tea type 309 let's just say we want 310 to pass the value of large. 311 Then the second one, sweetness, 312 we'll call this one as low 313 and we will go like this and size 314 will go with the large as well. 315 Now can we go ahead and print 316 out this exact same thing 317 for the Order 3 as well? 318 That would be super interesting 319 to know about it. 320 And there we go, you still 321 have all the values, so 322 all the key value pairs. 323 If you want to get all the values 324 as dictionary you can actually go 325 ahead and it's a good idea to 326 study more about this dict dunder. 327 Pretty interesting one 328 and I'm pretty sure you learned 329 something new about it. 330 But I don't want to just call 331 this video just right up here. 332 There is little bit more that 333 I want to show you here. 334 Let's just say we have defined 335 these classes and everything. 336 Now I come back here to just 337 show you that how static 338 methods are different. 339 We create another class which 340 is chi utils and the whole job 341 of chi utils is we don't have 342 any construct or anything. 343 We have a static method 344 just like this. 345 And I can define a simple is 346 valid, is valid size and 347 somebody passed me on this size 348 and I can say return return size 349 in and we can just check for it 350 like this. 351 If it is in small or 352 medium we have to be very careful 353 for the uppercase, 354 lowercase how it's going on. 355 So be careful with that 356 large and this is example 357 of how this can be done. 358 So before taking the order or 359 just at the time of taking 360 the order, you can just ask for it. 361 So I can just go ahead and print 362 and I can say hi utils, 363 I want to use a method there 364 is only one is valid size. 365 So customer is ordering me a medium. 366 You can just go ahead and tell me 367 that whether it is a size or not. 368 And then only after getting this 369 if clause, if I get the true, 370 I take the rest of the order. 371 So this is how it's being done. 372 Now coming back onto the part, I 373 hope this actually made it 374 clear that all right, static 375 method has their own place in 376 the world and the class method 377 has its own way of working with 378 that. 379 Coming back onto 380 the diagram which I draw. 381 So the class method it always 382 receive the CLS the class itself 383 while the static method receives 384 no argument automatic first argument 385 like we have seen that. 386 No self, nothing like that. 387 So it doesn't take anything it if 388 you have a sense like there's a 389 use case of passing the argument 390 you can but there is no self 391 there the use case this operates 392 on the class, not on the 393 instance. 394 Remember that we never 395 created an instance, it 396 operates on the class. 397 Whenever we are returning we are 398 actually calling the class itself. 399 No object was created there. 400 Utility functions related 401 to the class. 402 We have seen that. 403 Again, the class method, does 404 it have access to the class? 405 Yes, it has Static never has it. 406 Do they have access to the self 407 and as you have seen, no, none 408 of them have the access to the self. 409 So these are some of the differences 410 between the static 411 method as well as class method. 412 So hope this video has given you 413 enough of idea that all right, 414 I know pretty much really in 415 depth detail of the Python 416 which I have never seen that oh 417 Python can go this depth in 418 such depth. 419 Let's go ahead and catch 420 up in the next video. 421 Don't forget to rate us.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "10 Classmethod vs staticmethod.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/10 Classmethod vs staticmethod.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0046112393,
      -0.013414475,
      0.036813222,
      -0.05321787,
      -0.01095899,
      -0.011819379,
      0.0035197004,
      0.028347027,
      0.00040063556,
      -0.019119713,
      -0.010435579,
      -0.017696159,
      0.002388956,
      0.015188588,
      0.12846458,
      -0.013902797,
      -0.010309203,
      -0.008020729,
      -0.0050170952,
      -0.007838142,
      -0.018357744,
      0.0049522105,
      0.03292223,
      0.0025456324,
      0.0013607327,
      -0.010138263,
      -0.0038150465,
      -0.00024764903,
      0.030659199,
      -0.0074847927,
      -0.019570902,
      0.038355287,
      0.025586823,
      0.021956395,
      0.014371733,
      0.009127064,
      0.02938265,
      -0.011021121,
      -0.022468738,
      0.0033883275,
      -0.012947157,
      -0.0015632125,
      0.005440321,
      -0.011029114,
      0.020449707,
      -0.023223275,
      0.020007849,
      -0.024086595,
      0.01823286,
      0.026745146,
      -0.002107014,
      0.0013480582,
      0.005286436,
      -0.17539169,
      0.015761336,
      0.018742692,
      0.017313976,
      -0.0207874,
      0.011547309,
      0.0190046,
      -0.022141088,
      0.031817544,
      -0.033612385,
      0.0026232393,
      0.007025963,
      -0.02323402,
      0.03617101,
      0.0021242625,
      -0.0016097847,
      0.0094323205,
      0.037651416,
      0.00008283579,
      -0.009482908,
      -0.013987488,
      -0.0037354038,
      -0.040125046,
      0.015146704,
      0.0004574962,
      0.0035923247,
      0.01733115,
      -0.0032458522,
      -0.019839074,
      -0.016148336,
      -0.002615989,
      0.014788475,
      -0.000031172334,
      -0.016059164,
      -0.024585592,
      0.008672393,
      -0.0057593305,
      -0.0064237006,
      -0.01167547,
      0.0029463964,
      0.0017544202,
      -0.007023988,
      -0.013596636,
      -0.008603685,
      0.004993761,
      -0.018629711,
      0.011539114,
      -0.0013701158,
      -0.009057373,
      -0.022807727,
      -0.00013750565,
      0.011477823,
      -0.005449146,
      -0.02723158,
      0.010006529,
      -0.016948853,
      0.016270593,
      0.014991122,
      -0.021093095,
      0.0038932213,
      -0.0067290696,
      0.0033339926,
      -0.16567537,
      0.0025626905,
      -0.009337683,
      -0.004513459,
      -0.00032010488,
      -0.00013710698,
      -0.011659762,
      0.02219783,
      0.0024167676,
      -0.013770896,
      0.007667475,
      -0.004045038,
      0.010105193,
      0.008040986,
      -0.0050745215,
      -0.012123557,
      -0.02093156,
      -0.0068176677,
      0.008160145,
      0.01296043,
      0.00803083,
      -0.00508167,
      -0.006084088,
      -0.019097826,
      0.0064114477,
      -0.014904442,
      -0.012121232,
      -0.0041262535,
      0.034774523,
      -0.016089832,
      -0.018829307,
      0.006343654,
      0.019700041,
      -0.027308369,
      -0.02629452,
      0.01950542,
      -0.0016096772,
      0.0026319476,
      -0.005904019,
      0.021421133,
      -0.00763461,
      0.013902127,
      0.014575703,
      0.0060711666,
      0.008014777,
      0.013620855,
      0.020951856,
      -0.0040009283,
      0.0011941749,
      -0.0053032357,
      -0.012760797,
      -0.020100715,
      0.024352245,
      0.037798822,
      0.028545989,
      0.004108588,
      -0.014020916,
      -0.007896684,
      0.027482118,
      -0.0054025836,
      -0.00037265004,
      0.00403532,
      -0.003971134,
      0.0125075495,
      -0.02643712,
      0.004291865,
      -0.013172107,
      0.011690133,
      -0.021271165,
      0.012286621,
      -0.0073341248,
      -0.0026286861,
      -0.014690452,
      0.019037137,
      -0.0023387,
      0.023986908,
      0.008760386,
      0.038789216,
      0.02616202,
      0.012903366,
      -0.018942812,
      0.0077419984,
      -0.0042669834,
      -0.021604879,
      0.011320721,
      0.026455391,
      0.005060627,
      -0.015903069,
      -0.022786023,
      0.018640995,
      0.0030062327,
      0.019625334,
      -0.019820902,
      0.008221664,
      0.01776357,
      -0.038248453,
      -0.009151944,
      0.011713547,
      -0.0040416885,
      0.012689796,
      -0.0136155775,
      0.0048608175,
      -0.015435168,
      0.0031182119,
      -0.01112875,
      -0.010925774,
      -0.0027564587,
      -0.004616987,
      0.030966278,
      0.017566254,
      -0.018913044,
      -0.008246554,
      0.0037723049,
      0.00319653,
      0.004811963,
      0.02076335,
      0.0023206105,
      0.0009183765,
      0.008397086,
      0.0001872851,
      -0.0023390825,
      -0.006706998,
      0.013831123,
      0.012222158,
      0.0036223663,
      -0.0005873919,
      0.012344391,
      0.0012933927,
      0.014728381,
      0.011085024,
      0.0042759986,
      0.0021036945,
      0.0077971905,
      0.031705935,
      -0.001976819,
      -0.023045827,
      -0.0064902348,
      0.011946495,
      -0.028075453,
      0.020338515,
      -0.031932097,
      -0.02575237,
      0.00068347674,
      -0.021384714,
      -0.004633053,
      -0.0019542258,
      -0.010020306,
      -0.0056205606,
      -0.018470427,
      0.01145229,
      -0.017070344,
      -0.006178695,
      0.025403589,
      -0.011050661,
      0.021548482,
      0.027214896,
      0.00005081977,
      -0.00088747166,
      0.014183483,
      -0.05019644,
      -0.013584527,
      -0.09491204,
      0.030135166,
      -0.0006532094,
      -0.03967688,
      -0.0060699387,
      0.004322096,
      -0.022973306,
      0.015169691,
      -0.004004918,
      0.030521851,
      -0.014683718,
      -0.016088653,
      0.020431217,
      -0.03334349,
      -0.024358157,
      -0.0048934044,
      -0.015608989,
      -0.013817153,
      0.03373738,
      -0.005836629,
      -0.0063382117,
      -0.0042336015,
      -0.005654804,
      -0.006636885,
      0.029202303,
      0.003104052,
      -0.0019726872,
      0.013161784,
      -0.0016184172,
      -0.011270335,
      0.011467037,
      0.009477449,
      -0.003902608,
      -0.020080455,
      -0.015648361,
      0.015794363,
      -0.009140584,
      -0.020074874,
      -0.023721647,
      -0.018437054,
      0.0072309994,
      0.009202212,
      0.020881863,
      0.045130298,
      -0.0010983048,
      0.03333687,
      -0.016048359,
      0.0010513482,
      -0.013124629,
      0.010685321,
      -0.013874115,
      -0.01180158,
      0.008787248,
      -0.02952958,
      -0.004294488,
      0.0050267326,
      -0.008313358,
      -0.017806817,
      0.0047471304,
      -0.0023828824,
      0.0129964035,
      0.02089721,
      0.0008438343,
      -0.007548259,
      0.011551796,
      -0.012396979,
      0.014693277,
      -0.005423874,
      -0.014393375,
      0.0073580607,
      0.020958066,
      0.011426685,
      -0.0056953114,
      -0.018432103,
      0.0048444965,
      -0.00023989596,
      -0.011174643,
      0.00338506,
      -0.022060154,
      0.031387255,
      0.02555483,
      0.0021945175,
      0.0006919366,
      0.021496529,
      -0.0012222163,
      0.006122766,
      0.015280201,
      0.0017407625,
      0.0035249267,
      -0.010531815,
      0.018879207,
      -0.0020614385,
      0.014122832,
      -0.010226502,
      -0.006618345,
      0.010728357,
      -0.016215319,
      -0.0069897966,
      -0.021209083,
      0.047343664,
      -0.024042502,
      -0.0064162863,
      -0.016669704,
      -0.00037581567,
      -0.018236507,
      -0.0036993518,
      -0.03892426,
      -0.012420148,
      -0.017706582,
      0.0002858243,
      0.0055054724,
      0.005384281,
      -0.017143685,
      -0.01996566,
      -0.0012535875,
      0.015562452,
      0.015566449,
      0.011022464,
      0.026953109,
      0.005067178,
      -0.026419507,
      -0.014000903,
      -0.010743518,
      0.0056181974,
      0.0065531153,
      0.0008345948,
      -0.023433575,
      0.005701035,
      0.00076816906,
      -0.023769444,
      -0.018939188,
      -0.0045763617,
      -0.04219003,
      -0.015545944,
      -0.0011625636,
      -0.021740288,
      0.021651387,
      0.0027390996,
      0.034021083,
      -0.002319316,
      -0.010115249,
      0.010559287,
      -0.0023778593,
      -0.009537927,
      -0.0077024703,
      0.004416847,
      -0.01521354,
      0.0011731151,
      -0.009739214,
      -0.030490693,
      -0.028831175,
      -0.024870437,
      -0.010067673,
      -0.0024347052,
      -0.003724346,
      -0.012459423,
      0.0071018036,
      0.004305042,
      -0.023046976,
      -0.021193914,
      0.020581236,
      0.005013539,
      -0.01192114,
      -0.01250024,
      0.014710512,
      0.016078955,
      0.0006641735,
      0.00017768971,
      0.004580917,
      0.0033368873,
      0.021480706,
      -0.011933805,
      -0.021383213,
      0.012376273,
      0.006978249,
      0.0057127844,
      0.018176433,
      -0.022003151,
      0.00063176337,
      0.020698776,
      0.023518214,
      -0.0020043883,
      -0.022773562,
      0.006416463,
      0.01074718,
      0.016795294,
      -0.0028031508,
      0.011952047,
      -0.031343095,
      -0.0045697503,
      -0.014427814,
      -0.016730245,
      -0.018088836,
      0.0067586545,
      0.02523087,
      0.006888073,
      -0.013955354,
      0.0040946133,
      -0.0033806595,
      0.007159753,
      -0.016905561,
      -0.009266791,
      -0.01797513,
      0.014358838,
      0.010310534,
      -0.0097821755,
      -0.016365938,
      -0.013411212,
      0.005544891,
      0.013272559,
      0.00999584,
      0.0123854615,
      -0.0043491423,
      -0.005575396,
      0.014314611,
      0.03595089,
      0.011916449,
      -0.0071791704,
      -0.03849648,
      -0.019737389,
      0.013285793,
      0.002237689,
      0.0035808976,
      -0.029242942,
      0.018690215,
      0.0047179516,
      0.0029424261,
      0.00030603356,
      -0.005301171,
      0.006154658,
      -0.008434718,
      -0.0016711999,
      -0.001816806,
      0.018380886,
      -0.020036876,
      -0.03584748,
      -0.011598362,
      0.01732685,
      -0.019493332,
      0.040221542,
      -0.0036565973,
      -0.021598099,
      -0.029484246,
      -0.0007108819,
      -0.00409671,
      -0.012779208,
      0.0138080055,
      0.023603315,
      -0.004466793,
      0.016395492,
      0.0117185,
      0.017708784,
      -0.00857418,
      -0.029973395,
      -0.02232499,
      0.009812395,
      0.018787822,
      0.014131384,
      -0.0018744827,
      0.005636392,
      0.036720123,
      0.024847686,
      0.012498777,
      -0.0053493404,
      0.00059339014,
      0.010021294,
      -0.0004939052,
      0.008829892,
      -0.004171014,
      -0.12005874,
      -0.00063216663,
      -0.019268043,
      -0.0027521153,
      -0.00050028076,
      -0.004151762,
      -0.010131005,
      -0.0112760635,
      0.004467015,
      -0.004405904,
      0.01817724,
      0.012002674,
      -0.003968125,
      -0.0036300856,
      0.010371661,
      -0.021201383,
      0.0064052627,
      0.009012158,
      0.013909129,
      0.001528877,
      0.0075899935,
      -0.0050267796,
      0.0065477635,
      -0.0021751702,
      -0.023596458,
      -0.00507946,
      0.007889443,
      0.001309207,
      0.0008962518,
      0.006329602,
      -0.017382864,
      -0.024138074,
      0.00048620504,
      0.010721914,
      0.004690174,
      -0.023979058,
      -0.0085093705,
      -0.0039268727,
      0.032903116,
      0.015094767,
      -0.019496093,
      -0.0071311127,
      0.03520608,
      -0.0060448316,
      -0.014417406,
      0.021348204,
      0.010641102,
      -0.013418867,
      -0.00227301,
      0.027436761,
      -0.019923232,
      -0.0020634918,
      -0.0042699347,
      -0.030056827,
      0.008485527,
      -0.0052435547,
      0.0052959416,
      0.0053720376,
      0.011352266,
      -0.0038026741,
      0.005184516,
      0.022368379,
      0.0036621895,
      0.032970034,
      0.005122817,
      0.001102132,
      0.020125408,
      0.0242238,
      -0.005194759,
      -0.0011153237,
      0.0102330875,
      0.002650671,
      0.000058866437,
      0.009663227,
      0.004673219,
      0.018872807,
      -0.009859351,
      -0.009616128,
      -0.0060775904,
      0.016905643,
      -0.028199516,
      -0.01916465,
      -0.07127377,
      -0.01892551,
      0.017966973,
      -0.022472437,
      0.012043864,
      0.012087948,
      -0.02023264,
      -0.014398048,
      0.0050772526,
      -0.020848034,
      -0.011193544,
      0.009247623,
      0.016371464,
      -0.011873673,
      -0.007251553,
      0.025302432,
      0.006216522,
      -0.029861527,
      -0.013870297,
      -0.011849458,
      0.019176947,
      -0.026751772,
      0.006669209,
      -0.00576768,
      -0.002301323,
      0.024331247,
      -0.009628121,
      0.0059881187,
      -0.00033879638,
      0.025259793,
      0.022329887,
      -0.1523302,
      -0.026707888,
      -0.012618066,
      0.005303421,
      0.0077751153,
      0.01344482,
      0.0139651215,
      -0.0189966,
      0.022352247,
      -0.02084444,
      0.028425498,
      -0.0041299183,
      -0.00795665,
      0.0022086997,
      0.023196114,
      0.13004862,
      -0.006967068,
      0.002830041,
      -0.009430604,
      -0.003773496,
      -0.004980096,
      -0.006176822,
      -0.025168056,
      -0.004370104,
      -0.004587711,
      -0.02731456,
      -0.012911182,
      -0.004897321,
      0.01331082,
      -0.007506679,
      -0.0043047634,
      0.0002746338,
      0.005679675,
      0.035394497,
      -0.00079760706,
      -0.00910129,
      0.0061078733,
      0.004232424,
      -0.005937904,
      0.008560108,
      0.008785704,
      0.01412939,
      0.014397623,
      0.0051583718,
      0.015282456,
      0.00525138,
      0.007023006,
      -0.008009767,
      0.00082631403,
      0.0060725245,
      -0.0108287325,
      -0.053776134,
      0.0057942434,
      0.0011586592,
      -0.014292103,
      -0.0010943749,
      -0.014254756,
      0.026030656,
      0.01066812,
      0.020017292,
      -0.0018894935,
      -0.017843742,
      -0.018701343,
      -0.0007676307,
      -0.008077861,
      -0.02429208,
      0.0034150279,
      0.004421327,
      0.01116543,
      -0.008548508,
      0.0052298075,
      0.021338373,
      -0.0006162882,
      0.021743292,
      -0.010271173,
      0.00581138,
      -0.027164703,
      0.038596623,
      0.019717682,
      -0.0035157136,
      -0.0026024734,
      -0.010863876,
      -0.011961644,
      -0.01651098,
      0.012307901,
      0.002251501,
      0.0074554454,
      0.029068297,
      -0.0011679836,
      0.022822922,
      0.014691693,
      -0.011689929,
      -0.000027019405,
      0.017646205,
      -0.00058642705,
      0.013374909,
      0.016261484,
      -0.028563315,
      0.03100325,
      -0.010714863,
      -0.006039977,
      -0.022300595,
      -0.0018950645,
      -0.021686945,
      0.015197482,
      -0.013508953,
      0.00219008,
      0.014549603,
      -0.010194045,
      -0.0072927247
    ]
  },
  {
    "id": "genai_cohort_python_11_Property_decorator___Getter_and_Setter_vtt",
    "content": "Next up, we're going to take a look 2 at property decorators. 3 Now property decorators 4 are really fun and they are actually 5 solving a purpose 6 of controlling the elements. 7 And what does that even mean? 8 Let me take you on to the screen 9 and walk you through with the whole 10 idea behind, these decorators, or 11 also known as property decorator. 12 So let's just say you have designed 13 a class and in this class you 14 have added some value to it. 15 Maybe there is age factor. 16 So you are having this age 17 of T leaves you're within, 18 and this whole thing just try 19 to assume this is a class. 20 Now as of now, this age is just 21 a property and anybody can actually, 22 let just say this is 23 an object or this is any other user. 24 They have the full capacity to 25 reach out to this age, they can read 26 it and they can also get all 27 the values, whatever is stored 28 in this age, four years, five years. 29 Now not only that, they can 30 also go ahead and reach out 31 and update the value of this age 32 to anything, anything that 33 they want, probably minus 10. 34 That doesn't mean an age, 35 but they have full 36 control over this property. 37 And sometimes in the classes 38 you want that this control 39 should not be given to, or at least 40 for all of the properties. 41 So for that particular case we have 42 a special mechanism, a special way 43 of writing the code so that 44 we can control, these properties. 45 And this can be done for all 46 the properties, or this can be done 47 for just one, two, however you wish 48 to do and accomplish that. 49 So I'll take you up, up here 50 and I will walk you 51 through how this can be done. 52 So we need to have a new file 53 and let's call this one as 11/ 54 underscore and we're going to call 55 this one as property decorators. 56 Py. 57 Of course. 58 All right, the step one is 59 to turn off the AI. 60 I use AI a lot these days. 61 So let's just say we have 62 the same example and we 63 call this one as T leaf. 64 And the step one is 65 to declare a constructor. 66 So we'll just go ahead 67 and say constructor. 68 As you are creating this T 69 leaf, you take this age as your 70 argument and then you simply 71 go ahead and say self dot. 72 And here's the interesting thing, 73 we don't call it as age, we 74 call it as underscore age. 75 And this underscore doesn't 76 mean on its own anything. 77 It's just a Python way 78 of saying that, hey, this is 79 an interesting property. 80 This shouldn't be allowed 81 to touch directly. 82 There needs to be a way of 83 reading, this property as well 84 as writing to this property. 85 And this is a symbol which is 86 used throughout the industry. 87 So whenever you see an underscore 88 that means, this is having 89 something special as a meaning. 90 Now surely this can be done 91 without underscore as well. 92 But this is such a common thing 93 and Python also knows this. 94 So Python doesn't treat this in a lot 95 of places as underscore age. 96 You'll see this as 97 age treated like this. 98 But I want to show you that how this 99 is being done in the industry. 100 So the step one of doing this is 101 first of all go ahead and use 102 decorator again and write that, 103 hey, I want to use property. 104 Yep. 105 After that you simply define 106 the method just after this 107 and you name the property 108 which you want to control. 109 And this is going to be age. 110 But hey, we called our 111 property as underscore age. 112 That's exactly my point. 113 Python knows this, that this variable 114 has to have a special meaning. 115 So anything underscore will 116 be treated as just age. 117 How interesting that is. 118 And we can just go ahead and after 119 this call this one as self. 120 And this method names 121 to be exactly same. 122 You cannot change this. 123 This is called to be as age. 124 All right, so here what we are going 125 to say that while we return 126 this variable which is self 127 dot underscore age, obviously we 128 actually don't return it directly. 129 We can, but just for the fun we'll 130 just go ahead and say we'll always 131 return you an additional two value. 132 So, so if the age you're passing me, 133 as zero, we'll call 134 this as two years probably. 135 I don't know why you will 136 do that, but let's just 137 say that's your use case. 138 And apart from this, now what you 139 can do once you have defined this, 140 now I can actually use an age. 141 That's interesting. 142 It has automatically made it 143 as a decorator and you can 144 use that same variable name. 145 And then you can go ahead and say 146 that I want to use a setter method. 147 So this method that you have 148 made, this is how we get 149 the value outside of this class. 150 This is going to be responsible how 151 you set the value inside this class. 152 So very interesting aspect. 153 And we call this same age. 154 Yep. 155 And we take this one. 156 Since we need to set some value 157 inside it, we are going to take that 158 value, whatever you are adding this. 159 And now we will perform 160 a simple check. 161 If the value is less than 162 or probably equal to the age, it's 163 in the range of one and it should be 164 maximum of five, 165 we can have a space, no problem. 166 All right, then only we are going 167 to go ahead and say self 168 dot underscore age, and we're 169 going to put this as age. 170 And in all the other cases, 171 we are going to go ahead. 172 Let's actually go ahead 173 and have an else case. 174 In all the else cases, we 175 are going to go ahead and say, 176 let's raise an error. 177 We'll call this one as value error. 178 And we are going to mark this as tea 179 leaf age must be between. 180 Between one and five years. 181 Five years, There we go. 182 So notice here how we are 183 actually controlling each aspect 184 in this really beautiful 185 class that we have written. 186 So we have this age, we have single 187 property here, and it could be 188 more, but then you have to perform 189 all this operation for each one of 190 the value that you want to 191 control. 192 Now, here's the interesting aspect. 193 Let's just say we call this as 194 a simple leaf, and we create this 195 object from this class tea leaf, 196 and we provide a value of two. 197 All right, that's surely doable. 198 Now, I want to simply go ahead 199 and print this leaf age. 200 I'll just go ahead and say I want 201 to just print the age, 202 just like I regularly do that. 203 Notice here, I'm not calling it 204 as underscore age or anything. 205 I'm saying, hey, I'm just 206 calling the age 207 technically behind the scene. 208 You're calling this method. 209 But hey, we never called it like this 210 because that's the magic 211 of this, property here. 212 That's what it does 213 behind the scenes. 214 Let's go ahead and actually 215 print the value. 216 That will give us a lot of ideas 217 of how things are going on. 218 We'll go ahead and say Python 3. 219 This one is 11. 220 And there we go. 221 Notice here it says feh. 222 It says four, although we 223 provided the value as two. 224 That's because we have 225 overwritten that. 226 What you are going to read 227 the value, how you are going 228 to read, we are controlling that. 229 Now, on top of this, if I go ahead 230 and try to set some value onto this, 231 let's just say I go ahead and say 232 leaf age, and that age can be four. 233 That's totally allowed. 234 Let's go ahead and print this again. 235 Surely that will be 236 totally allowed that. 237 All right, the value is, 238 although we did set it up four. 239 But we get it six. 240 But if we try to have the value 241 of something, let's just say six, 242 that will give us a problem. 243 Notice here. 244 We get the error and this is 245 something that we have designed. 246 We have designed our own errors, in 247 this case, arrays, as a value error. 248 tea error must be like this 249 T leaf age must be 250 between 1 and 5 value error. 251 So all of this thing, we are 252 controlling the error part as well. 253 Now again, in this case it 254 doesn't make sense that you are 255 calling me that value can only 256 be between 1 and 5, but you 257 are adding the value to. 258 And that's the beauty of learning. 259 We can actually go ahead 260 and control the things that we want 261 to do to make sure that 262 we understand the things. 263 So this is really interesting. 264 You can use a, property 265 to actually have this. 266 Don't forget this underscore. 267 This is kind of a secret handshake 268 between the Python programmers 269 in the world of Python that 270 hey, this is how we define it. 271 Anything with underscore that 272 means it needs to have 273 a setter, getters and setters. 274 This is by the way called as getter. 275 This is called as setter. 276 We have a lot of names, we call 277 them as sometimes properties, 278 sometimes getters and setters, 279 whatever we call them, the goal 280 is same to control the value that 281 how we read the value and control 282 that how we actually edit those 283 values. 284 That is it for this video. 285 Don't forget to rate us and let's 286 catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "11 Property decorator - Getter and Setter.vtt",
      "originalPath": "genai-cohort/python/08 Chapter Subtitles/11 Property decorator - Getter and Setter.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.014708462,
      -0.015281125,
      0.03369694,
      -0.05920782,
      0.009560776,
      0.005976204,
      0.0064219264,
      0.049402017,
      0.014037834,
      -0.007970595,
      -0.012646814,
      -0.011409522,
      0.011059285,
      0.0223443,
      0.12389712,
      0.009577542,
      -0.0127387885,
      -0.017655151,
      0.010521433,
      -0.0017889544,
      -0.015412955,
      0.018098583,
      0.007813094,
      -0.0060354066,
      0.025911069,
      -0.011557515,
      0.014522833,
      0.010749049,
      0.027870676,
      -0.014651484,
      -0.031466972,
      0.02953313,
      0.015043924,
      0.036640488,
      0.0059040566,
      0.009715357,
      0.011431034,
      0.008469179,
      -0.021837182,
      0.019752048,
      -0.026268171,
      -0.0061756168,
      0.02489034,
      0.007077464,
      0.025343042,
      -0.01889571,
      0.0061600697,
      -0.020153059,
      0.016912373,
      0.0038546904,
      0.015068872,
      0.007287397,
      0.0018638483,
      -0.18250483,
      0.048112746,
      -0.000056646313,
      -0.0049468,
      0.0028937638,
      0.006823955,
      -0.008445235,
      -0.009196895,
      0.011882056,
      -0.010680269,
      -0.0034798798,
      -0.013951449,
      -0.0043364502,
      0.02090618,
      -0.0013349659,
      0.0019368423,
      0.01182627,
      0.036225386,
      0.011688961,
      -0.023976408,
      -0.017077647,
      -0.023730576,
      -0.029754253,
      0.0007211196,
      -0.0085503375,
      0.009859796,
      0.012715061,
      -0.0096234055,
      0.015945971,
      -0.0038983226,
      -0.005530754,
      0.014266671,
      0.010879085,
      -0.01454654,
      -0.014866115,
      0.015863337,
      -0.017269585,
      -0.015028326,
      0.0026686916,
      0.004308622,
      0.0060875607,
      -0.009055739,
      -0.0016268613,
      -0.02651394,
      0.004481665,
      -0.03889451,
      0.005421561,
      0.010432318,
      -0.017791469,
      -0.009084913,
      -0.017040554,
      0.010034912,
      0.002784219,
      -0.0061194217,
      -0.00971333,
      -0.014250363,
      0.0116322255,
      -0.00486738,
      -0.013215767,
      0.0103081055,
      0.011946848,
      0.029659117,
      -0.16581605,
      0.026078772,
      -0.0028091636,
      -0.010187982,
      0.014698858,
      -0.022162683,
      -0.002414676,
      0.014297816,
      -0.010371945,
      -0.037599206,
      0.003181688,
      -0.002378999,
      0.02251169,
      0.018740376,
      -0.0066060824,
      -0.01575437,
      -0.029387178,
      0.015344879,
      0.033080697,
      0.012473788,
      0.013789188,
      0.0063743675,
      -0.0074048676,
      -0.0068907375,
      0.0033794092,
      -0.004297071,
      0.010278925,
      -0.0055364626,
      0.04844161,
      0.005272851,
      -0.011872169,
      -0.0009889452,
      0.015931584,
      -0.018845955,
      -0.02674402,
      0.009291257,
      -0.011430754,
      -0.00039968034,
      -0.010577258,
      0.02532049,
      0.00026372125,
      0.008500016,
      0.015972579,
      0.0075841057,
      -0.017079635,
      0.005862503,
      -0.0028468466,
      0.0022308405,
      0.006600863,
      -0.013671479,
      -0.0116516,
      -0.007884196,
      -0.0006068616,
      0.012185804,
      0.020657713,
      -0.023053413,
      -0.011170395,
      0.015916182,
      0.028942503,
      -0.016630588,
      -0.031116266,
      0.003701836,
      0.014089813,
      0.0018132761,
      -0.0014557501,
      -0.0008188074,
      0.0057765255,
      0.0009848555,
      -0.024562959,
      0.0030775513,
      -0.0019286844,
      -0.0013513509,
      -0.0054922784,
      0.0199462,
      -0.009793866,
      0.008586841,
      0.01914084,
      0.035741795,
      0.021831773,
      0.002100359,
      -0.01691842,
      0.0037402103,
      0.0028419397,
      -0.0024983473,
      0.011863042,
      0.026682617,
      -0.009018219,
      0.0003387938,
      -0.02880081,
      0.022534475,
      0.011733057,
      0.017724954,
      -0.016505633,
      0.0137826735,
      0.0271201,
      -0.028133912,
      -0.0066914996,
      0.02898254,
      0.009831254,
      0.024810866,
      -0.001386685,
      0.015004379,
      0.0027268934,
      -0.013646134,
      -0.008872669,
      0.0061564413,
      0.017557662,
      -0.0053631924,
      0.017549815,
      0.021808283,
      -0.014102931,
      0.002620987,
      -0.010236414,
      -0.0013876314,
      0.0070432434,
      0.018747697,
      -0.0038854852,
      -0.014613188,
      0.009986456,
      -0.0018769908,
      0.02038053,
      -0.006689641,
      0.02565544,
      -0.0004622765,
      -0.00062083564,
      -0.016681438,
      -0.0001578715,
      -0.015445037,
      0.024953842,
      -0.003154734,
      -0.001873715,
      -0.006065417,
      0.0068893256,
      0.007004014,
      -0.013871933,
      -0.025217485,
      -0.010493893,
      0.010471418,
      -0.038667757,
      0.01800612,
      -0.025253652,
      -0.016805766,
      -0.002484169,
      -0.0374247,
      -0.0065026237,
      -0.0011830273,
      -0.0102808215,
      -0.025241975,
      -0.0026911788,
      -0.009860963,
      -0.01366204,
      0.0023065074,
      0.024064876,
      -0.0277268,
      0.021402868,
      0.021084951,
      0.030450976,
      0.014874729,
      0.002061993,
      -0.042299777,
      -0.003962019,
      -0.09005827,
      0.04240879,
      0.020971693,
      -0.03151698,
      -0.007044366,
      0.0034664094,
      -0.02613591,
      -0.0036683392,
      -0.014883025,
      0.018470861,
      -0.008881821,
      -0.021572547,
      0.0249591,
      -0.022368466,
      0.00019508935,
      -0.014869168,
      0.011744124,
      -0.008262721,
      0.016754046,
      -0.02668335,
      -0.011678944,
      0.0021222688,
      0.01338688,
      -0.0058392896,
      0.022120869,
      0.003543547,
      -0.0061397,
      0.04040127,
      0.019955253,
      -0.009976317,
      0.010982596,
      0.014237845,
      -0.013731525,
      -0.021509364,
      0.012749555,
      -0.003085216,
      0.0040622624,
      -0.01572482,
      -0.009225986,
      -0.007669991,
      0.023115585,
      -0.0032049625,
      0.022540912,
      0.028396854,
      -0.009703319,
      0.027198011,
      -0.014429697,
      -0.02208279,
      -0.0022117535,
      -0.018126328,
      0.005077772,
      0.003685868,
      0.013495384,
      -0.007113229,
      0.0046109664,
      0.027610281,
      -0.0015304688,
      -0.021504791,
      -0.011380506,
      -0.0016434734,
      0.00050702994,
      0.007501346,
      0.014446931,
      -0.000116113835,
      0.01704222,
      -0.008705209,
      0.005214702,
      -0.017091239,
      -0.0025602481,
      0.018515006,
      0.025836686,
      0.0051875776,
      -0.006023988,
      -0.009165615,
      0.026415905,
      0.003050599,
      0.0116359135,
      0.0029374007,
      -0.018342745,
      0.026512342,
      0.006721889,
      0.0009356974,
      0.0079037575,
      0.01844142,
      0.003820909,
      0.014061368,
      0.009325316,
      0.0056158938,
      0.0043070265,
      -0.010186676,
      0.0079927705,
      0.020436794,
      -0.0039090337,
      0.010716586,
      -0.0034060632,
      -0.010595215,
      -0.02309017,
      -0.017660396,
      -0.020087695,
      0.017357508,
      -0.02448145,
      0.0005727342,
      -0.030936914,
      0.0069111492,
      0.0056771496,
      0.014188725,
      -0.05640739,
      -0.020571148,
      -0.011471258,
      0.010907328,
      -0.0012829712,
      -0.005251336,
      -0.009996245,
      -0.015702762,
      -0.019841675,
      0.0106303515,
      0.008129114,
      0.01932291,
      0.034414895,
      -0.018717399,
      -0.0028917417,
      0.0024423292,
      -0.0046280073,
      0.011976712,
      0.006015766,
      0.011897463,
      -0.0066005355,
      0.003919414,
      0.006718236,
      -0.024943303,
      -0.028476505,
      0.0069728694,
      -0.01752077,
      -0.018214483,
      -0.025136583,
      -0.009668153,
      0.036057085,
      -0.0097288415,
      0.012365589,
      -0.0051747975,
      -0.013685747,
      -0.011692723,
      0.017326115,
      -0.010085705,
      -0.0031240983,
      0.016676545,
      -0.009652228,
      -0.012622235,
      0.018809706,
      -0.008728104,
      -0.021005629,
      -0.013719443,
      -0.01975915,
      0.0102918735,
      0.00017038795,
      -0.002425273,
      -0.0019728164,
      -0.00085131597,
      -0.012218852,
      -0.03346871,
      0.015509903,
      0.0021271403,
      -0.022947596,
      0.005205086,
      0.03519335,
      0.0017094573,
      -0.00033282753,
      0.005717465,
      0.014179322,
      -0.0068769185,
      -0.0037172704,
      0.0023172812,
      -0.035786845,
      -0.0052979775,
      -0.0029663856,
      -0.010323592,
      0.005341005,
      -0.030789275,
      0.0026004731,
      0.027731994,
      0.013099138,
      -0.0042766323,
      -0.012351678,
      0.013200574,
      -0.003954104,
      0.00664128,
      0.015143742,
      -0.0017583291,
      -0.0095932,
      0.0064355624,
      0.00399279,
      -0.024016475,
      -0.003734447,
      0.03602613,
      0.013662259,
      0.009868062,
      -0.023115896,
      -0.0007863443,
      0.021582102,
      -0.003513725,
      -0.008914336,
      -0.022513164,
      -0.034794237,
      0.0033952543,
      0.017590147,
      -0.012928845,
      -0.007534908,
      -0.014104354,
      0.0043807095,
      0.019707114,
      -0.01037807,
      0.019715922,
      -0.009843384,
      -0.000067784276,
      0.022810087,
      0.022511214,
      0.014592858,
      0.0073241866,
      -0.036176752,
      -0.0010098234,
      -0.012584865,
      -0.0044942754,
      -0.0059663,
      0.0049232575,
      0.0075770686,
      -0.0145343505,
      -0.020399975,
      0.019123659,
      -0.000051471074,
      -0.011568999,
      -0.017250704,
      -0.021732515,
      0.0015600543,
      -0.008568569,
      -0.026396295,
      -0.016987676,
      0.016051268,
      0.017824618,
      -0.011534855,
      0.020790003,
      0.016833676,
      -0.017241446,
      -0.011349644,
      -0.008312814,
      0.0063118106,
      0.0056547923,
      0.003444375,
      0.021509621,
      -0.017085005,
      0.0014576104,
      0.015487933,
      0.023639802,
      -0.008594314,
      -0.0059496374,
      -0.0123861,
      0.017899765,
      -0.0063047316,
      0.004035335,
      0.006658892,
      -0.0009598589,
      0.016968055,
      0.0077994326,
      -0.012497647,
      0.0025407546,
      -0.0090597775,
      -0.021561828,
      -0.0071739294,
      -0.019711962,
      -0.0003079448,
      -0.12384573,
      -0.008063412,
      -0.005365878,
      -0.01957024,
      0.0029259378,
      -0.010078044,
      0.021060467,
      -0.017141515,
      0.022252217,
      -0.008597859,
      0.014277337,
      0.009430587,
      0.024519123,
      0.0044092066,
      -0.006469234,
      -0.012571154,
      0.021685049,
      0.005080944,
      0.02423681,
      -0.011125698,
      -0.011226453,
      -0.009634685,
      -0.006778479,
      -0.015123288,
      -0.023291443,
      -0.0008384185,
      -0.0056639863,
      0.005126776,
      0.0012567599,
      -0.011917321,
      -0.011831969,
      0.0074397004,
      -0.008005416,
      0.020084286,
      0.009908255,
      -0.013502298,
      -0.023978407,
      0.0008513895,
      0.033193007,
      0.01524275,
      -0.0068123178,
      -0.014848663,
      0.03705608,
      -0.0034484416,
      -0.0115564335,
      0.014179383,
      0.023572268,
      -0.017614985,
      -0.002025832,
      0.045358043,
      -0.025393233,
      -0.0067685493,
      -0.011041076,
      -0.045890287,
      -0.009221773,
      -0.0052114422,
      0.005315029,
      0.0060858265,
      -0.017460354,
      -0.01840282,
      -0.0047145495,
      0.0052776416,
      -0.008818688,
      0.028918097,
      -0.0058773197,
      0.017705334,
      0.014445729,
      -0.0069355858,
      -0.02212285,
      0.0059820153,
      0.0038940744,
      -0.00089765014,
      -0.010183734,
      -0.0036158334,
      0.01269316,
      -0.007611688,
      -0.012686689,
      -0.006560477,
      -0.01696022,
      -0.008023594,
      -0.0036691234,
      0.011180457,
      -0.0604121,
      -0.013512473,
      -0.0038432446,
      0.0008823581,
      0.030406335,
      0.0011752282,
      -0.016703803,
      0.0117627485,
      -0.0013175714,
      -0.0038141736,
      0.011904721,
      0.013697246,
      -0.004434871,
      -0.022331174,
      -0.0132114515,
      0.014184916,
      0.008853317,
      -0.010247556,
      -0.016101861,
      0.004768101,
      0.014770538,
      -0.010952593,
      -0.02188226,
      -0.017919222,
      0.0141675845,
      0.016824663,
      0.0076198555,
      -0.008304692,
      0.0037117936,
      0.0032313792,
      -0.011162501,
      -0.1513584,
      0.0049713817,
      0.004095802,
      -0.0083719995,
      0.006180326,
      -0.0053019365,
      -0.012541799,
      -0.03191953,
      0.012389331,
      -0.024745531,
      0.012377139,
      0.009633958,
      0.0009411139,
      0.0011650574,
      0.0072838836,
      0.1278404,
      -0.005268008,
      0.0011099643,
      -0.021430628,
      -0.012908076,
      0.0038097503,
      0.0073036086,
      -0.033034764,
      0.011407217,
      -0.004475083,
      -0.006405571,
      -0.005802767,
      -0.01980905,
      -0.0026145673,
      -0.009453558,
      0.0067895832,
      -0.010406604,
      -0.0074614696,
      0.03241013,
      -0.005460009,
      -0.011382989,
      -0.001282482,
      0.0042934897,
      -0.0048979186,
      -0.00027954965,
      -0.0066847946,
      -0.006804424,
      -0.0017407311,
      0.003032696,
      0.016418613,
      -0.00080102956,
      0.004074328,
      -0.019642603,
      0.0009394057,
      0.0035704246,
      -0.009653646,
      -0.047956906,
      0.0050385576,
      -0.008793779,
      -0.009902488,
      0.026647767,
      0.009942254,
      0.019814357,
      0.0010354297,
      0.008102982,
      0.015298213,
      -0.0137463575,
      -0.027615296,
      -0.0015135759,
      0.0022832348,
      -0.010181396,
      0.021069283,
      0.018593488,
      0.01774035,
      -0.007108771,
      0.010114278,
      0.019660685,
      -0.011519495,
      0.025961082,
      -0.031082809,
      -0.0037595534,
      -0.015713299,
      0.02045818,
      0.019143485,
      0.0005899492,
      -0.008768616,
      -0.013501272,
      -0.0053931996,
      -0.009644579,
      0.013138163,
      0.0049526165,
      -0.0033487552,
      0.022306345,
      -0.00172876,
      0.0035176126,
      -0.0059856195,
      -0.010030048,
      -0.020754756,
      0.025575463,
      -0.003844865,
      0.033337485,
      -0.00009241999,
      -0.021464797,
      0.037503142,
      0.0073899375,
      0.027823748,
      -0.02429174,
      -0.022775847,
      -0.0067123445,
      0.017377047,
      0.009776802,
      0.0030255944,
      0.0035414977,
      -0.013026215,
      -0.0016540163
    ]
  },
  {
    "id": "genai_cohort_python_01_Generators_with_yield_and_next_methods_vtt",
    "content": "Welcome to the Python 2 course and welcome to this 3 fresh new section. 4 So in the last section we talk 5 about comprehensions and I'm 6 pretty sure you are now impressed 7 that all right, I get it. 8 A lot of things I understand 9 and eventually as you will write 10 more production level code, you will 11 understand them much better. 12 No need of too much practicing it. 13 The theory, knowledge that you 14 have, the code we have written 15 together, that's enough. 16 Now let's move into generators. 17 Now generators is also 18 a very interesting concept. 19 It's not as difficult 20 as comprehension. 21 It's relatively easy. 22 You just have to train your 23 brain that what's the difference 24 between a regular function 25 as well as a generator. 26 Now whenever there's a generator, 27 always remember one thing which 28 is we are generating things 29 in the function or in the loop. 30 We just get the result immediately. 31 So everything is loaded up 32 in the memory, in the loops 33 or other functions. 34 But when you design generators 35 you get one value at a time. 36 So it's very memory optimized, 37 it doesn't do all the thing at once. 38 It's actually very optimized 39 in certain cases. 40 But this doesn't mean we are going 41 to replace the whole functions 42 with the generators. 43 They do have their need and 44 sometimes they are super 45 helpful, super useful and 46 especially if you're working 47 with fast API or anything like 48 that, it's helpful, it's 49 useful, but not always. 50 So always keep in mind there is a way 51 of how things are being done 52 or there is a use case factor 53 always associated with that. 54 So with this, let me take you 55 up on the screen and we're going 56 to go ahead and talk about 57 the generators one by one. 58 So let's go ahead and expand this. 59 There we go, nice and easy. 60 And we are here with the new 61 topic, let's name this up. 62 So generator or generators? 63 These are pretty fun and 64 interesting topic and couple of 65 things you always have to 66 remember whenever we are talking 67 about the generators, a couple of 68 things you are going to see as 69 special terms but one of the most 70 common term that we see all 71 around the places is yield. 72 This is a keyword just like we have 73 for keyword but generators 74 are always, always going to come 75 up with the yield as a keyword. 76 Now the most important part 77 that you should always remember 78 about generators is first 79 of all you save memory. 80 So that's the part one, another part 81 is some times you don't want 82 the results results as immediately. 83 Hope I wrote that correct. 84 So you don't want 85 the result immediately. 86 And the most important part is lazy. 87 Evaluation. 88 Evaluation. 89 There we go. 90 Hope I wrote that correct. 91 But if I did a typo, 92 please excuse me on that. 93 These are the three most 94 important keyword points of, 95 generators, but not the only one. 96 There are other use cases as 97 well, but these are more than enough 98 for us to understand 99 and remember that how it works. 100 So I think the better way of doing 101 this is to simply go ahead and write 102 some code that is always I love. 103 So let me take you on this and we'll 104 just close all these things. 105 We don't need this. 106 We are now into 08. 107 That's pretty fun. 108 Nope, not here. 109 And there we go. 110 So this one is 08 111 underscore generators. 112 And we'll start with the basics. 113 So we'll call this1 as 01basics. 114 I don't know what else 115 to call this one. 116 Shouldn't be basics. 117 Where is our extension? 118 Forgot that py. 119 All right, so the way how you 120 define the generators, they look 121 exactly same as functions. 122 So if I go ahead and use, if I go 123 ahead, oh, I, I can expand this. 124 If I go ahead and say, hey, 125 this is my definition. 126 I call this one as serve chai. 127 And there we go. 128 Just like that. 129 Yeah, this is your generator. 130 So what do you mean by having 131 a generator just like that? 132 The only difference that comes 133 up is how you provide 134 a value in the function. 135 We simply go ahead and say 136 return the value that it does. 137 But in the world of generators, 138 you actually use 139 the keyword which is yield. 140 So it yields one value at a time. 141 So for example, I go ahead 142 and say this is my cup one. 143 And the cup one says masala chai. 144 Similarly, we have this one again. 145 So let's just say this is cup two. 146 This time we are saying ginger chai. 147 Another one. 148 What else? 149 Eli Chichai forgotten I. 150 And this is my cup three. 151 And there could be more. 152 So what do you think how this 153 function will, go ahead and work? 154 So if I go ahead and say, let's 155 just say I'm having a stall. 156 And in this stall I 157 call this servechai. 158 And this method executes, if it would 159 be a regular function, we would be 160 looking for a keyword return that 161 this return will give me the value. 162 But here I'm confused whether 163 it will be Cup 1, Cup 164 2, Cup 3, or all of them. 165 It could be all of them as well. 166 So for this, let's go ahead 167 and print this and you will see some 168 strange result for cup in. 169 And let's just go 170 ahead and say stall. 171 And here's the interesting part 172 and where people also get confused. 173 If I go ahead and work like this, 174 you might be expecting, okay, I'm 175 getting all the values, probably 176 this stall gets all the values 177 and then I'm looping through it. 178 Don't worry, we'll get that. 179 Investigative study is one 180 of the best study where you actually 181 take a moment to think about what 182 will happen, what is about to 183 happen, and then you work with that. 184 So let's just say Python 3. 185 We have one file and we can see, 186 all right, there is no difference. 187 I'm getting all the value 188 in the result, but what's happening 189 is in the memory itself, 190 behind the scene, how it happens. 191 So if I go ahead and take a copy of 192 this, let's go ahead and paste this. 193 So this is my function that I have, 194 and this function is actually, 195 getting called by technically 196 this whole piece of code. 197 So let's go ahead and get this 198 whole piece of code as well. 199 There we go. 200 So what happens in this 201 as soon as you come up here? 202 This stall is actually just keeping 203 a reference of this whole thing. 204 It's not actually 205 using it immediately. 206 The moment you actually run this 207 loop, then it 208 actually goes ahead and use. 209 So for the first iteration 210 of the loop, it's going 211 to refer to this value. 212 For the second iteration it's going 213 to refer to this value. 214 And for the third iteration, this 215 is going to refer to this value. 216 The only difference is in the memory. 217 So yield actually pauses the function 218 and resume the function on the next 219 call, but exactly from that point 220 where it has stopped in the past. 221 And what's the difference between, 222 having a normal 223 function and regular function? 224 Pretty good. 225 And can I show you 226 the difference between them? 227 Because right now 228 it's not very clear. 229 It looks all the same. 230 All right, I get this. 231 Let's create a normal 232 function for this. 233 First, let's just say 234 we have get chai list. 235 And this is my chai list. 236 There we go. 237 And I simply go ahead and say 238 this is return and it returns 239 you an array which has. 240 Let's just call this one as cup one 241 and this will be cup two. 242 Oops. 243 And there we go, we have cup three. 244 All right, no problem. 245 This is our regular function. 246 A similar function could be 247 generator function as well. 248 I'll write a comment. 249 This one is generator function 250 and I simply say def get chai. 251 But this is actually gen 252 generator function. 253 And instead of just returning 254 it like this, what we 255 do is we yield the values. 256 Yield. 257 And this time we are 258 yielding cup one. 259 Then we go ahead and duplicate this. 260 Yield two and yield three. 261 There we go. 262 Nice and easy. 263 So the difference is one just uses 264 the word return, one uses this. 265 So how we're going to use this, 266 Let me show you that how 267 it's actually being done. 268 So if I go ahead and simply 269 say that hey, I want to get 270 chai and this chai will be 271 coming up, from get chai gen. 272 Did we call it as get? 273 We should be calling it as gen, 274 not get get chai gen. 275 And there we go. 276 First of all, let's print 277 the value as it is so that we can 278 actually verify what's actually 279 getting printed here. 280 Can we comment this? 281 Yes, we can comment this. 282 We don't need it now. 283 All right, let's see the value 284 and let's see the result. 285 It says what you're getting is 286 a generator object and you 287 are just holding a reference. 288 As I told you, this is just actually 289 pointing to this whole method. 290 So this is just a reference 291 that we are holding. 292 Nothing more, nothing less. 293 Now what if I want 294 to print the values? 295 If you want to go ahead and print 296 the values, then you have to 297 actually use a method known as Next. 298 You simply go ahead and say, hey, I 299 have the reference, but next I want 300 to run this function once and want 301 to see what's the value of it. 302 So for this we have to explicitly 303 pass it inside this next method. 304 And you will be surprised to know 305 that this function will now run 306 and whatever the first value you are 307 yielding, you will get that value. 308 So if I run this again, 309 notice it says cup one. 310 Now as soon as the cup one 311 comes, this is where you are 312 right now at this cup one and. 313 And your method is now 314 on the pause state. 315 It has not exited. 316 It's still in the memory. 317 It's not executing or calculating 318 all the things at once. 319 It just has executed once. 320 First yield value is with you. 321 But now the function is paused 322 whenever you actually call the next 323 next time it actually keeps track 324 everything in the memory. 325 And the next time it will just go 326 ahead and give you the second result 327 which you are yielding. 328 So for this, if I go ahead and print 329 this again, notice this time 330 the cup won for the first result. 331 But if I print this, notice 332 the function resumes 333 exactly where you left it. 334 If you go ahead and print it again, 335 this is how we get the cup three. 336 But what if I go ahead 337 and print it again? 338 That's interesting. 339 Notice here it says stop iteration. 340 You cannot keep on passing 341 me the next because 342 I'm done yielding the values. 343 I can only yield three values. 344 So you can run this 345 function only three times. 346 And maybe that's an explicit maybe 347 this is exactly what you want, 348 but you have to keep in mind that 349 what's important and what's not. 350 I'll just comment this one because 351 this is going to produce this error. 352 So we'll just say gives error 353 so that you get the notes 354 and everything for you. 355 So I hope this portion of where 356 we studied about the generator, 357 we found them interesting. 358 They're very interesting and as 359 you will write more 360 of the use cases, especially 361 connecting with the database closing 362 the database connections. 363 This generator is actually 364 super useful and you'll see them 365 quite a lot in the fastapi 366 that is it for this video. 367 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 Generators with yield and next methods.vtt",
      "originalPath": "genai-cohort/python/07 Chapter Subtitles/01 Generators with yield and next methods.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.011353603,
      0.007998544,
      0.03211243,
      -0.055098653,
      0.005544516,
      -0.0046973643,
      0.011527472,
      0.01659857,
      0.017756756,
      0.036598116,
      -0.017454563,
      0.011443964,
      0.010005747,
      0.028105233,
      0.12540962,
      0.008430649,
      -0.0030197087,
      -0.013608141,
      0.028526764,
      -0.029425083,
      0.0054109953,
      -0.007242236,
      -0.014825282,
      -0.011982239,
      0.005537347,
      0.016144035,
      -0.0013817133,
      0.014740033,
      0.04077133,
      -0.017940938,
      -0.0037470222,
      0.0040308335,
      0.010139387,
      0.02710354,
      0.006978265,
      0.019262036,
      0.0030015972,
      0.0024288534,
      -0.031007702,
      0.0022349209,
      -0.013913534,
      -0.011665024,
      -0.009068239,
      -0.016458675,
      0.004236581,
      -0.028947944,
      0.0025076894,
      -0.013460942,
      0.01210207,
      0.026236933,
      0.010531496,
      0.010316098,
      0.008921558,
      -0.1882488,
      -0.0031920045,
      0.006688579,
      -0.013879514,
      0.0046724356,
      0.012058597,
      0.008942018,
      -0.025362713,
      0.021017045,
      -0.026808312,
      -0.027052525,
      -0.023422137,
      -0.017961472,
      0.036108855,
      -0.01615565,
      -0.012273206,
      0.007969383,
      0.0010943855,
      0.0012638526,
      -0.010464688,
      -0.0036914756,
      -0.03921918,
      -0.021105178,
      0.011331043,
      -0.020515986,
      0.010457892,
      0.0047566933,
      0.007288595,
      -0.01604536,
      -0.011914495,
      0.012606437,
      0.005023225,
      0.005404173,
      -0.03741618,
      -0.02237488,
      0.019502368,
      -0.011553622,
      -0.022351786,
      0.017503401,
      -0.008460101,
      0.008201242,
      -0.0069934954,
      -0.017481117,
      -0.019470034,
      0.022816157,
      -0.022514505,
      0.0061832466,
      0.0005994388,
      -0.0023690667,
      -0.014216331,
      0.0063724127,
      0.0074999323,
      0.016641546,
      -0.01195337,
      -0.0058141826,
      -0.02226506,
      -0.018961022,
      -0.005739739,
      -0.0020795527,
      0.008012102,
      0.012865495,
      0.0017459415,
      -0.16896343,
      0.025338905,
      -0.009352828,
      -0.015186082,
      0.02135831,
      -0.017045295,
      0.0038447997,
      0.01338488,
      -0.0034090993,
      -0.011656962,
      0.013744805,
      -0.001433641,
      0.017234912,
      0.0056691053,
      0.0014880047,
      -0.024959207,
      -0.00038793203,
      -0.006846391,
      0.015592554,
      0.0033633506,
      0.019751465,
      -0.011638174,
      -0.0026397884,
      -0.009686645,
      0.0026706022,
      -0.016538294,
      0.023168767,
      -0.0028560157,
      0.03465105,
      0.018248925,
      0.00562928,
      -0.009508373,
      0.0089589525,
      -0.012613464,
      -0.015971156,
      -0.006555106,
      -0.016695863,
      0.002006395,
      -0.013803848,
      0.021754663,
      -0.008386088,
      -0.0012420153,
      0.004722784,
      -0.017295955,
      -0.014082425,
      -0.018196618,
      -0.005231087,
      0.0043184184,
      0.01085067,
      -0.009676715,
      0.007032519,
      -0.0139222555,
      -0.0028044982,
      0.0074547213,
      0.0051780813,
      0.0008460705,
      -0.0079231905,
      0.00920746,
      -0.012798034,
      -0.008626931,
      0.0064663654,
      -0.008345197,
      -0.009620775,
      0.02082737,
      0.0010855146,
      0.017640226,
      0.00045150123,
      -0.013818194,
      -0.0022858689,
      0.0141704455,
      0.0076508927,
      -0.030317845,
      0.015198198,
      0.014373925,
      -0.02030099,
      0.0035686293,
      0.018246768,
      0.031337336,
      0.01756698,
      0.0013113238,
      -0.015897103,
      0.00074795797,
      -0.0039071995,
      -0.0073311734,
      0.025416814,
      0.02811763,
      -0.0063505205,
      0.0027860964,
      -0.048963316,
      0.01964393,
      -0.009951823,
      0.007520947,
      -0.014751012,
      0.020127468,
      0.020306118,
      -0.00815837,
      -0.011107038,
      0.02349236,
      -0.00044116,
      0.016296772,
      0.015817767,
      0.009090237,
      -0.01112255,
      -0.0052894065,
      -0.0018702236,
      -0.0008119531,
      0.013150663,
      -0.008687313,
      0.013369574,
      0.002129405,
      -0.00085337105,
      0.008323363,
      0.010445004,
      -0.0022079856,
      0.006922067,
      0.01771119,
      0.014576877,
      -0.028167356,
      0.00698136,
      -0.00020113886,
      -0.0047561177,
      -0.005780171,
      0.022129282,
      0.01738196,
      -0.013142216,
      -0.018368976,
      -0.017453322,
      -0.02526876,
      0.009405133,
      0.020775484,
      -0.017545315,
      0.012486595,
      0.0018337517,
      -0.0058442852,
      -0.022037255,
      -0.011164794,
      -0.014492473,
      -0.001726082,
      -0.013307473,
      -0.014069363,
      -0.02533366,
      -0.03128689,
      -0.037911613,
      -0.004490822,
      -0.01845983,
      0.0078019844,
      -0.009570054,
      -0.027582003,
      0.0041846097,
      0.017569454,
      0.013022126,
      0.013308077,
      0.033182673,
      -0.025197145,
      0.01643675,
      0.018240765,
      0.020567985,
      0.031698044,
      0.009202478,
      -0.022264117,
      0.014931016,
      -0.084431924,
      0.01285256,
      0.028927743,
      -0.027990779,
      -0.009836725,
      0.018803727,
      -0.010395182,
      0.026680104,
      0.0144237485,
      0.0077949846,
      0.011796981,
      0.000746873,
      0.041100115,
      -0.023533078,
      0.0012495627,
      -0.008120905,
      0.012709041,
      -0.008573435,
      0.023037268,
      -0.010020978,
      0.004038234,
      0.022225663,
      0.007096914,
      -0.012971561,
      0.017338611,
      -0.0016393499,
      -0.011828957,
      0.028103158,
      0.006090513,
      0.008163603,
      0.0058005666,
      0.024634855,
      -0.0031015633,
      0.012157388,
      0.0028879226,
      0.024465468,
      -0.004402502,
      -0.016039701,
      -0.007939695,
      -0.02146391,
      0.015022835,
      -0.0048634796,
      0.02435063,
      0.030886877,
      -0.0050014346,
      0.013788466,
      0.005574746,
      0.006936632,
      -0.02270046,
      0.006190583,
      -0.011642237,
      0.0012130223,
      0.017864704,
      -0.008273154,
      0.03122871,
      -0.0070454953,
      0.009657727,
      -0.0028583317,
      0.0045939595,
      0.013787987,
      -0.005495808,
      0.005998877,
      0.006346474,
      0.00041092173,
      0.012664854,
      0.002748616,
      0.013613953,
      -0.011957248,
      0.017807888,
      0.009709424,
      0.0051636267,
      -0.0049737846,
      0.0009942251,
      -0.010646594,
      0.0014659679,
      -0.00043627145,
      0.027194938,
      -0.0037339581,
      -0.025882332,
      0.04137927,
      0.015416744,
      -0.0206154,
      -0.0011786653,
      0.006410875,
      0.011407159,
      0.005548805,
      -0.0000101782825,
      -0.006666394,
      0.01448378,
      0.008556846,
      0.010778624,
      0.0054131346,
      -0.039739225,
      0.0068530045,
      -0.022364274,
      -0.023373572,
      -0.000078583565,
      -0.032397028,
      -0.015040627,
      0.005702812,
      -0.0056133433,
      -0.007351038,
      -0.018812852,
      -0.0039504147,
      -0.0097251,
      -0.00023459703,
      -0.020839782,
      0.0025843128,
      0.001679386,
      -0.024408014,
      -0.010544542,
      -0.018587198,
      -0.009054716,
      -0.033506643,
      -0.008045976,
      0.0026530542,
      -0.0048260335,
      0.008773115,
      0.01010624,
      -0.024525475,
      -0.004410939,
      -0.012772288,
      -0.01199233,
      0.009013983,
      0.0012288236,
      0.013786,
      -0.005002318,
      -0.011864025,
      -0.012328203,
      -0.03533086,
      -0.036685452,
      0.010370349,
      -0.012384636,
      -0.014608871,
      -0.012268825,
      -0.016388873,
      0.025653113,
      0.021816231,
      0.014057498,
      -0.008102782,
      -0.017221238,
      -0.010401486,
      0.024286218,
      -0.0015627537,
      -0.025698924,
      0.032535795,
      -0.013813726,
      -0.02293758,
      -0.00076867436,
      -0.025182677,
      -0.014398101,
      -0.029999074,
      -0.0062600817,
      0.016565602,
      -0.0086961305,
      0.006022217,
      0.005099284,
      -0.013809885,
      -0.022206588,
      -0.025967201,
      0.0033227487,
      0.00017676438,
      -0.024060506,
      0.014195646,
      0.032095533,
      0.014364661,
      -0.0011083507,
      0.0016521472,
      -0.0074369223,
      -0.003938935,
      -0.0072214003,
      -0.011976063,
      -0.04705018,
      0.0060651805,
      0.026748488,
      0.003467237,
      0.00532629,
      0.0026096576,
      0.023710007,
      -0.00013310555,
      0.00862709,
      -0.001393966,
      -0.010580133,
      0.01160061,
      -0.008362923,
      0.012892735,
      0.019905629,
      -0.0143344095,
      -0.025901288,
      -0.0069451816,
      -0.0026051549,
      -0.009857386,
      -0.01641213,
      0.022612229,
      0.0010239052,
      0.038179748,
      0.005593144,
      0.0029798113,
      -0.012892974,
      0.0022118778,
      -0.012936176,
      -0.0123644555,
      0.008557778,
      -0.0023474633,
      0.005410903,
      -0.02536432,
      -0.019843385,
      0.0016594304,
      0.0061899046,
      0.033383373,
      0.008719981,
      -0.0018112641,
      -0.0048768334,
      -0.0006750314,
      0.0100655155,
      0.024440326,
      -0.009953205,
      -0.023272304,
      -0.0330976,
      -0.013793747,
      0.0076101166,
      -0.019027473,
      -0.00010761474,
      0.004034681,
      -0.0039026095,
      -0.018688865,
      -0.0040158746,
      0.019343758,
      0.0070254905,
      0.004938636,
      -0.011907945,
      0.0037161852,
      -0.010777038,
      0.008723598,
      -0.017345747,
      0.0047628037,
      0.023283716,
      0.017083991,
      -0.023084568,
      0.019192496,
      0.0045450395,
      -0.031331602,
      -0.020309126,
      0.009829275,
      0.011941011,
      -0.01892723,
      0.021319132,
      0.0057641407,
      -0.02301429,
      -0.00802381,
      -0.00015997911,
      0.010749355,
      -0.0048951237,
      -0.008517559,
      -0.010886292,
      0.02529539,
      0.0019625002,
      -0.019653065,
      -0.005634409,
      -0.010112519,
      0.022814993,
      0.02478806,
      0.0013196521,
      0.028597578,
      -0.014279919,
      -0.009367558,
      -0.0075128037,
      -0.0022742916,
      -0.016752569,
      -0.11357154,
      -0.004905308,
      -0.011817197,
      0.011636678,
      -0.02442605,
      -0.01921148,
      -0.015627528,
      -0.008235005,
      -0.00569885,
      -0.0030731352,
      0.016044512,
      -0.020293806,
      0.0042562312,
      -0.0154602695,
      0.012727092,
      -0.024146654,
      0.023677042,
      0.0043594767,
      0.00049004797,
      0.0033231429,
      -0.0022082797,
      0.006483801,
      -0.011137497,
      -0.0103635155,
      -0.017758636,
      -0.0033798425,
      0.007528684,
      0.016054295,
      0.0052429372,
      -0.013704166,
      -0.028891806,
      -0.006121256,
      -0.015589713,
      0.011105888,
      0.0130668385,
      -0.004528548,
      -0.013047989,
      0.017255047,
      0.015556662,
      0.016671129,
      0.0028746922,
      -0.0030487762,
      0.02282514,
      0.010142228,
      -0.006097897,
      0.035334338,
      0.03471697,
      -0.028708156,
      -0.00093927875,
      0.031093566,
      -0.029006394,
      -0.016476529,
      0.00800139,
      -0.03479888,
      -0.01053755,
      -0.005139497,
      0.019117467,
      -0.026857639,
      0.0025175659,
      -0.011407066,
      0.010126926,
      -0.01613039,
      -0.009268209,
      0.019462572,
      0.012661483,
      0.012172135,
      0.025303863,
      -0.00070161914,
      0.019038837,
      -0.019729063,
      -0.010542243,
      0.010815957,
      -0.012689591,
      0.033292066,
      0.0030386886,
      0.0092743365,
      0.002068785,
      0.009295841,
      -0.0036109656,
      0.0064437776,
      -0.0331719,
      -0.012355246,
      -0.051981565,
      -0.017579626,
      0.017783633,
      -0.02556027,
      -0.0009745567,
      0.00972891,
      -0.020320078,
      -0.003499768,
      0.022506032,
      -0.0080628665,
      -0.026222946,
      -0.0022011935,
      -0.0065530324,
      0.0041587446,
      -0.014082107,
      0.0094597805,
      0.0073462706,
      -0.01159155,
      -0.018654004,
      0.005515894,
      -0.007385127,
      0.008270673,
      -0.006127398,
      -0.036360323,
      0.019431466,
      0.024508178,
      0.00017059846,
      -0.0045550335,
      -0.0037066527,
      0.01178961,
      -0.01055322,
      -0.15112656,
      -0.030671496,
      0.023854705,
      0.0034668345,
      -0.0013515478,
      -0.008642733,
      -0.011378214,
      -0.0089313155,
      -0.009994515,
      0.0219371,
      -0.0044539757,
      -0.015589646,
      -0.0153281735,
      -0.019621931,
      0.024043491,
      0.13881247,
      -0.0062501244,
      0.018670812,
      -0.014691044,
      0.0053274343,
      -0.004724634,
      -0.0062587988,
      -0.017333746,
      0.0068861777,
      -0.014559775,
      -0.012072231,
      0.014338137,
      -0.015452909,
      0.0004775937,
      0.013861946,
      0.0034391026,
      -0.009826556,
      -0.0026430187,
      0.01261769,
      0.018912274,
      -0.0021755341,
      0.0062360396,
      -0.0057074786,
      -0.0010421412,
      0.0027030588,
      0.024421416,
      -0.00089265546,
      0.010311755,
      -0.008979642,
      -0.00039460044,
      -0.0023279719,
      -0.040498137,
      -0.0040874304,
      0.003951391,
      0.0052937986,
      0.008071317,
      -0.06579102,
      0.018373923,
      -0.018473169,
      -0.01906377,
      0.00023310892,
      0.0036581776,
      0.005522873,
      0.0058959154,
      0.011119928,
      -0.025608316,
      -0.008449154,
      0.0077988408,
      -0.010738174,
      -0.017934404,
      -0.014914909,
      -0.0038982404,
      0.024895603,
      0.00096986676,
      -0.0065749423,
      -0.0061365594,
      0.02494485,
      -0.008256934,
      0.006205229,
      0.00023449826,
      -0.014142999,
      -0.008710834,
      0.014654411,
      0.0022580712,
      -0.0000018596518,
      0.00012736705,
      -0.017488178,
      0.009895726,
      -0.007314078,
      0.014394994,
      0.009174334,
      0.0093020275,
      0.0039299964,
      0.0044289203,
      -0.024069216,
      0.00036831023,
      -0.012639641,
      -0.006584234,
      0.027697824,
      0.0108400695,
      0.025911504,
      0.0029400976,
      -0.016269013,
      0.032127805,
      -0.013776036,
      -0.006488933,
      -0.015014446,
      0.0009895565,
      -0.032863114,
      0.024866259,
      -0.00889434,
      -0.0019653165,
      0.009049832,
      -0.0093069,
      -0.0013485246
    ]
  },
  {
    "id": "genai_cohort_python_02_Infinite_Generators_vtt",
    "content": "In the world of Python, we 2 also have a concept known 3 as infinite generators. 4 I tend to use them very 5 less, but there are always 6 a use case for them. 7 And especially with the world 8 of AI coming in, they're actually 9 getting used quite a lot. 10 Let me walk you through with 11 the code, because code is much 12 easier way to understand this. 13 So we'll just directly go 14 ahead and write the code for it 15 should be easier for you. 16 Let's go ahead and create a new file. 17 Call this one as 02/ 18 infinite generators py. 19 All right, so how does an infinite 20 generator works and where 21 is it actually useful? 22 It's really useful for the streams 23 as well as the real time 24 systems that where the constant 25 updates needs to go on. 26 Or maybe you want to constantly keep 27 on getting this as a log value. 28 They have their use cases as well, 29 but use them very cautiously. 30 They can actually drain 31 the memory as well. 32 You need a really good memory. 33 But be careful with that. 34 They have their use case. 35 Let's call this one as infinitechai. 36 So how can we actually 37 generate infinite chai? 38 No, we are not going to generate the 39 infinite chai, but let's just say we 40 want to simulate a model where once 41 you buy a T, one cup of it, you can 42 get a refill as many times as you 43 wish. 44 But we are going to keep 45 noticing that, okay, we 46 are having, the refills. 47 So I'll create a variable 48 and we'll call this one as count. 49 And count, the initial value is one 50 because we are pouring this one. 51 And then we simply go ahead 52 and say that we have a true loop. 53 While true is a very dangerous loop, 54 it keeps on running. 55 But we're going 56 to control this a little. 57 We'll just say we are going 58 to yield a simple value which 59 will say just like return, 60 we are going to say refill. 61 And with the refill we can 62 actually use the number of how 63 many times we are refilling. 64 So we'll just say count. 65 And once we actually refill this, 66 then we simply come up here 67 and say count plus equals one. 68 So we are adding a value to it. 69 I like this one. 70 Now this is a very dangerous thing 71 to write if it would be general 72 return statement or anything there. 73 But since we are yielding, we are 74 not troubling the memory that much. 75 So I can just go ahead and say, hey, 76 I want a refill and I will have 77 an infinite child just like this. 78 Now let's just say I don't want to 79 use this variable, so I'll just 80 use an underscore in this one, 81 remember I told and discuss about 82 this a little bit that when you 83 don't want to use this value 84 itself, you can just write an 85 underscore. 86 It fills the syntax but we 87 tend to avoid creating 88 an unnecessary variable. 89 It helps in linting as well. 90 So let's just say we go for a range 91 of 3 till the value is 3. 92 We keep on going with that 93 and simply go ahead and print. 94 I cannot just go ahead 95 and print the refill because 96 that's not how it works. 97 I have to use the next 98 keyword and here I will 99 have to call the refill. 100 There we go. 101 This is how you write 102 the infinite child. 103 Let's go ahead and run this 104 and clean this. 105 We'll say Python 302 106 infinite generator. 107 Notice it this time we are 108 controlling it, but it's 109 refill as much as you want. 110 So we are having a refill 1, 2 and 3. 111 And again this is a little bit 112 awkward of a new style of writing 113 Python, but this is generators 114 and this is infinite one. 115 So you can run them as many time 116 and you are controlling them. 117 Notice here this loop doesn't 118 tell you that you have 119 to stop for 1 or 5 or 10. 120 This is how we are 121 controlling the range. 122 This is going to just 123 keep on printing. 124 You have an infinite coupons 125 printing machine or infinite 126 refill station that you have 127 it always keep on getting. 128 And since we have a while true 129 and yield, as long as the same 130 guy is going to call it, it will 131 keep on working with that. 132 The advantage of this is now 133 I can just work with this. 134 Let's just say this is another client 135 that comes up or user2 and that 136 user2 also uses the infinite chai. 137 There we go. 138 Now we are keeping a track 139 of both the objects set separately 140 with the same function. 141 So that's really interesting. 142 So for underscore in range, 143 let's just say this guy gets 144 a six cup of refills and I can 145 just go ahead and say print. 146 I have to use next 147 and this time this is user 2. 148 So both of our user gets this 149 value and they are separately 150 just working with that. 151 So notice here, first we are 152 running 1, 2 and 345 so this is 153 for the top one and then 154 this guy gets a six refill. 155 So we get all the six 156 value being refilled. 157 Pretty interesting, isn't it? 158 It's not intermixing the values 159 but it works nicely. 160 So that is it. 161 These are your infinite generators. 162 Hope they were fun. 163 Let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 Infinite Generators.vtt",
      "originalPath": "genai-cohort/python/07 Chapter Subtitles/02 Infinite Generators.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.007045097,
      0.010933365,
      0.031153142,
      -0.0670154,
      0.0021182096,
      0.0010675819,
      0.0008443381,
      0.02535725,
      0.015845103,
      0.0146525875,
      0.01234323,
      -0.009040624,
      0.0024047345,
      0.038109425,
      0.1176036,
      0.02524633,
      -0.01049692,
      -0.017566824,
      0.02674323,
      -0.026069164,
      -0.008229065,
      -0.019583479,
      0.0012433461,
      0.01419764,
      0.0056770234,
      0.01584704,
      0.011854629,
      0.013682931,
      0.042445313,
      -0.013805488,
      -0.022870624,
      -0.006799589,
      -0.00040767025,
      0.032394648,
      0.0028950192,
      0.018746922,
      0.012535631,
      -0.0075890063,
      -0.016840091,
      0.0020883232,
      -0.017143833,
      -0.0031426707,
      0.0019198598,
      -0.010847493,
      0.004268785,
      -0.042683564,
      0.0052324613,
      -0.0113965385,
      -0.0026589092,
      0.011475124,
      0.011672368,
      -0.00013042297,
      -0.010354378,
      -0.17473277,
      0.00447556,
      0.022810396,
      -0.0116942795,
      0.0076059652,
      -0.000986218,
      -0.016187076,
      -0.009454897,
      0.0063285446,
      -0.018311739,
      -0.016348962,
      -0.020931875,
      -0.010442755,
      0.015469756,
      -0.0040809577,
      -0.0025286109,
      0.0052043432,
      0.014080093,
      0.008110192,
      -0.014688001,
      -0.00064404565,
      -0.013460082,
      -0.033616092,
      0.010995697,
      0.0047527673,
      0.020189628,
      0.024947412,
      0.00009096472,
      -0.027298685,
      -0.0052455724,
      0.008866954,
      0.020983854,
      0.0040888824,
      -0.022696553,
      -0.024502045,
      0.01000015,
      -0.0020555665,
      -0.030245664,
      0.02711545,
      -0.0106853545,
      0.006987935,
      -0.012549395,
      0.006067126,
      -0.013975385,
      0.032535505,
      -0.034714676,
      0.005278881,
      0.0045605726,
      -0.014216504,
      -0.021019824,
      -0.00062454556,
      -0.008518363,
      0.018318692,
      -0.023496887,
      -0.019640688,
      -0.012943109,
      0.00895478,
      -0.0059279366,
      0.00025671822,
      0.004507031,
      0.0031013153,
      0.009335841,
      -0.15638453,
      0.021563621,
      -0.0068188603,
      -0.0074463557,
      0.017640235,
      -0.009271659,
      -0.010151633,
      0.019276774,
      0.0038851423,
      -0.010752133,
      0.014207781,
      -0.009827062,
      0.012187012,
      0.002697468,
      0.009282704,
      -0.027302435,
      0.01572912,
      -0.015267327,
      0.0029974622,
      0.012564294,
      0.008768668,
      -0.0029387965,
      0.006002588,
      -0.01174321,
      0.0054157213,
      -0.010195272,
      0.043361023,
      -0.009456776,
      0.020203756,
      0.010258991,
      0.003668296,
      -0.0068929084,
      0.0224068,
      -0.006947837,
      -0.02285201,
      0.004621576,
      -0.014418167,
      0.007454662,
      0.005320448,
      0.025388632,
      -0.017003473,
      0.015127789,
      -0.003018005,
      -0.0040333434,
      -0.0056661577,
      -0.0067099268,
      -0.0028780415,
      -0.008261887,
      0.004963699,
      -0.015120187,
      0.008595146,
      -0.000984238,
      -0.008871562,
      0.017641343,
      0.012080268,
      -0.017822115,
      -0.0076685944,
      0.016486365,
      -0.01270566,
      -0.000390698,
      0.020474553,
      -0.003199359,
      -0.0031240026,
      0.018726759,
      -0.0016441782,
      0.0028612658,
      -0.0068716523,
      0.005226396,
      -0.0022540535,
      0.02026652,
      -0.0058159665,
      -0.035059206,
      0.0061890422,
      0.024387624,
      -0.013522775,
      -0.0017686307,
      0.027452791,
      0.045048807,
      0.0044277366,
      0.005240391,
      -0.02236729,
      0.0007021809,
      -0.0154968165,
      0.0021199507,
      0.0259261,
      0.028851628,
      0.0050485437,
      -0.0030304496,
      -0.04407018,
      0.025479177,
      -0.02496731,
      0.003124416,
      0.0006795016,
      0.0100274375,
      0.011418061,
      -0.011823182,
      -0.001430001,
      0.034631167,
      0.013837274,
      0.021318816,
      0.013042665,
      0.022908693,
      -0.003286155,
      0.013114887,
      0.0044951052,
      0.00060183904,
      0.0062117474,
      -0.0054226206,
      0.015164091,
      0.009965531,
      -0.0044459607,
      -0.00078066095,
      0.00997915,
      -0.0028220254,
      0.024221005,
      0.02460122,
      0.034972098,
      -0.015165237,
      -0.008010331,
      0.0124705285,
      0.0008594687,
      -0.0011410875,
      0.018304275,
      0.0015518777,
      -0.014399553,
      -0.020182842,
      -0.00516315,
      -0.02081781,
      0.006906913,
      0.027795507,
      -0.012756228,
      0.018871281,
      -0.0019395965,
      -0.011578354,
      -0.036383193,
      -0.019892842,
      -0.02295237,
      0.0031697915,
      -0.0069071986,
      -0.003463179,
      -0.020065704,
      -0.022906218,
      -0.01814383,
      -0.0073903375,
      -0.0065605314,
      -0.0024823747,
      0.0039264113,
      -0.02161482,
      -0.002504388,
      0.003537875,
      0.008893378,
      0.017606795,
      0.04611485,
      -0.034984894,
      0.012696782,
      0.0024244331,
      0.024155512,
      0.015559828,
      0.016806383,
      -0.019996112,
      0.0048079137,
      -0.0895943,
      0.021520473,
      0.0064001232,
      -0.022342337,
      -0.010483167,
      0.009554494,
      -0.004913415,
      0.022986304,
      -0.00032797738,
      0.000032236916,
      0.00905405,
      -0.009676923,
      0.01013354,
      -0.025489535,
      0.01318371,
      -0.02284835,
      0.0072698165,
      -0.018497232,
      0.018166,
      -0.0043204385,
      -0.0053557814,
      0.006981464,
      -0.0017068103,
      -0.0046142894,
      0.013981991,
      0.011511597,
      -0.012333495,
      0.036090203,
      0.009961504,
      0.00817166,
      -0.010397821,
      0.018981582,
      0.0076980824,
      0.016572325,
      0.0060619833,
      0.015654065,
      -0.00083603157,
      -0.017526537,
      0.0076173865,
      -0.017916895,
      0.0025254993,
      -0.019482749,
      0.013791732,
      0.052257624,
      -0.011350789,
      0.015261234,
      0.0060897376,
      0.0016446407,
      -0.016016658,
      0.0010777769,
      0.0022182018,
      0.013229816,
      0.028800195,
      -0.0031480154,
      0.00006484738,
      0.00015309182,
      0.0012374725,
      0.012083969,
      -0.012355963,
      0.017402848,
      0.0052659754,
      0.0095140245,
      0.015647072,
      0.0032870402,
      0.014829265,
      0.018538507,
      0.006547722,
      -0.019739337,
      -0.0036576062,
      0.014528542,
      0.017659493,
      -0.006520099,
      0.012945217,
      -0.023284625,
      -0.0039143795,
      0.012270173,
      0.040640924,
      -0.014616017,
      -0.024342261,
      0.037030164,
      0.022672644,
      -0.008341633,
      -0.0021191626,
      -0.0037040024,
      0.017652038,
      0.011462598,
      -0.016365733,
      -0.0071828556,
      0.00076336024,
      -0.004878591,
      0.009332892,
      0.0021329697,
      -0.02811547,
      0.004394894,
      -0.016153343,
      -0.02450963,
      -0.023176543,
      -0.02223243,
      -0.0044274493,
      -0.0071620555,
      -0.011497054,
      -0.028923726,
      -0.024905892,
      0.0025211892,
      -0.0017380184,
      0.004697578,
      -0.024097785,
      0.011329246,
      -0.009211158,
      -0.01770083,
      -0.015345273,
      -0.015862273,
      -0.007304855,
      -0.026691258,
      0.0016754179,
      0.005230971,
      0.0047713793,
      0.014810099,
      0.010098098,
      -0.013056645,
      -0.012381254,
      -0.0131093385,
      -0.0009596327,
      0.0033137284,
      0.0070521673,
      0.015734034,
      -0.019614873,
      -0.0036777344,
      -0.0070062764,
      -0.04108303,
      -0.03864827,
      0.020971304,
      -0.020924488,
      -0.021976458,
      0.0008633769,
      -0.016176298,
      0.03482336,
      0.02444367,
      0.02461847,
      -0.0066335667,
      -0.022975734,
      -0.014622228,
      0.016637068,
      -0.009011213,
      -0.021100698,
      0.0289836,
      -0.0108818915,
      -0.011048832,
      -0.005981537,
      -0.032025155,
      -0.013101083,
      -0.037013616,
      -0.021817122,
      0.0101738535,
      -0.013778051,
      -0.0020960167,
      0.000762846,
      -0.020267043,
      -0.026433483,
      -0.017018422,
      0.014685609,
      -0.0062113227,
      -0.022491856,
      0.0042161415,
      0.020489527,
      0.0046471315,
      0.006554447,
      0.0051763947,
      0.010862321,
      -0.0060784053,
      -0.0014127849,
      -0.006681904,
      -0.046941716,
      -0.0013687763,
      0.00013035511,
      0.0039147623,
      0.020002123,
      0.006104493,
      0.021362139,
      -0.0008739514,
      0.009869283,
      -0.011412551,
      -0.0015186202,
      0.014243867,
      -0.006332746,
      0.011896131,
      0.016575105,
      -0.007511762,
      -0.034277786,
      -0.018025901,
      0.0026584135,
      -0.018115854,
      0.004760633,
      0.034481827,
      0.0053470572,
      0.03544703,
      0.01874585,
      -0.013128806,
      -0.0073438096,
      0.00034411513,
      -0.008864006,
      -0.0145833595,
      0.004352233,
      -0.0012320502,
      0.017445281,
      -0.010395804,
      -0.009465096,
      0.009126583,
      0.0058667413,
      0.04392564,
      -0.0009431015,
      0.014868381,
      -0.0033440525,
      0.01748314,
      -0.0042995554,
      0.025132407,
      -0.025502509,
      -0.0038120728,
      -0.01538385,
      0.006131727,
      0.032224584,
      -0.011852086,
      -0.017620662,
      -0.0068020327,
      -0.0016941248,
      -0.01959089,
      -0.009612872,
      0.018506952,
      -0.012439464,
      0.014812465,
      -0.009379862,
      -0.010101153,
      -0.009835944,
      0.013691492,
      -0.032287315,
      -0.0066982997,
      0.009948704,
      0.0112531185,
      -0.024154527,
      0.00844879,
      0.0065893773,
      -0.03753148,
      -0.008582531,
      0.0068638586,
      0.025203945,
      -0.013757534,
      0.006791588,
      0.0112599945,
      -0.019695869,
      -0.004252762,
      0.007368478,
      0.018288765,
      -0.0012297925,
      -0.006089659,
      -0.0022090664,
      0.048180204,
      -0.0019416149,
      0.0016891854,
      0.0071039237,
      -0.009348875,
      0.027983868,
      0.02355459,
      -0.006839298,
      0.029701615,
      -0.012619498,
      -0.014715586,
      0.0010688081,
      -0.0057345633,
      -0.016119104,
      -0.113868564,
      -0.0019340677,
      -0.012389997,
      0.018349808,
      -0.028938837,
      -0.021033207,
      -0.015501076,
      -0.030735,
      0.017549204,
      0.006795108,
      0.027774202,
      -0.02740036,
      0.010721546,
      -0.009767347,
      0.0043799453,
      -0.016922627,
      0.024063604,
      0.014703683,
      0.013288595,
      0.0061218,
      -0.0049491967,
      0.008981555,
      -0.016017301,
      0.007956769,
      -0.02429564,
      -0.011743622,
      0.009513445,
      0.019784637,
      -0.017445788,
      -0.0055649476,
      -0.0200513,
      -0.002829899,
      0.00020000924,
      0.00027072467,
      0.003201249,
      -0.011355929,
      -0.016609449,
      0.014785635,
      0.02649188,
      0.017758487,
      -0.0049499595,
      0.008928768,
      0.0329005,
      0.021671966,
      -0.01490126,
      0.03473767,
      0.028632168,
      -0.022715626,
      -0.010709416,
      0.021423,
      -0.04166145,
      -0.016328065,
      -0.014217756,
      -0.052731894,
      -0.011789371,
      -0.0003890349,
      0.0141411135,
      -0.015211984,
      0.0040386766,
      0.0070439666,
      0.0050363075,
      -0.011648257,
      0.003547382,
      0.014878585,
      -0.0026162923,
      0.005433607,
      0.034896407,
      -0.003970607,
      0.017000923,
      -0.012145919,
      0.0040149423,
      0.009554477,
      -0.012958561,
      0.024861146,
      -0.0017613303,
      0.0016014747,
      0.0018586859,
      0.019189604,
      -0.0005064212,
      -0.007801549,
      -0.023003034,
      -0.026930429,
      -0.05647314,
      -0.011951819,
      0.018204102,
      -0.016557133,
      -0.006418161,
      0.009288439,
      -0.038652293,
      0.0071406895,
      0.009814711,
      -0.014173014,
      -0.027099043,
      -0.0029754739,
      -0.0009241816,
      0.00194073,
      -0.012880105,
      0.0060204803,
      0.0031357578,
      -0.013800489,
      -0.0006667383,
      -0.0050979825,
      -0.0051636384,
      0.00858678,
      -0.014928692,
      -0.020977955,
      0.01456091,
      0.014676391,
      -0.009110246,
      -0.009762179,
      0.0041270354,
      0.022142405,
      -0.011714878,
      -0.14152245,
      -0.013415706,
      0.022030005,
      -0.00030608737,
      0.00423748,
      0.0026042948,
      -0.01515327,
      -0.01639346,
      -0.0059145507,
      0.022539886,
      -0.0052286284,
      -0.022797864,
      -0.0054121525,
      -0.015148088,
      0.015603339,
      0.12789734,
      -0.012311487,
      0.011226173,
      -0.021026215,
      -0.009509346,
      -0.006066939,
      -0.020818165,
      -0.013432221,
      0.023604572,
      -0.028133059,
      -0.00033869367,
      0.0021286898,
      -0.004172525,
      -0.0033482653,
      -0.0016036747,
      0.00015296358,
      -0.0063729826,
      0.013382733,
      0.03435522,
      0.024283169,
      0.0016837188,
      0.0018481404,
      0.017418569,
      0.0050848504,
      0.016256286,
      0.0052056275,
      -0.009306676,
      -0.003687957,
      -0.002346487,
      0.0044403514,
      -0.010570816,
      -0.034470804,
      -0.01175487,
      0.0036740818,
      0.0065851705,
      -0.013033117,
      -0.07185458,
      0.0021583901,
      -0.024501422,
      -0.0037427302,
      -0.006734663,
      0.0006140456,
      0.0073176157,
      0.008165914,
      0.0049773008,
      -0.019152878,
      0.007633966,
      0.016902987,
      -0.0104261115,
      -0.0066206385,
      -0.0062283874,
      0.0030896186,
      -0.0006443971,
      0.023650425,
      -0.014252195,
      0.0068055466,
      0.0107632205,
      -0.0022987507,
      0.0023890473,
      -0.009539057,
      -0.0053437483,
      0.00089508126,
      0.014824533,
      0.015618812,
      0.001490463,
      0.0035062046,
      -0.016056128,
      0.023240246,
      -0.019610617,
      0.019687584,
      0.0029414855,
      -0.022626039,
      -0.0038815944,
      -0.00008271633,
      -0.017878572,
      0.0110101765,
      -0.012113996,
      -0.012730098,
      0.016479332,
      0.012353477,
      0.01930372,
      0.014020538,
      -0.01397139,
      0.029976139,
      0.00034049668,
      -0.0047767586,
      -0.026960196,
      0.008521205,
      -0.035382047,
      0.008974178,
      0.002592222,
      -0.02225798,
      0.016410448,
      -0.012250888,
      -0.009729764
    ]
  },
  {
    "id": "genai_cohort_python_03_send_value_to_generators_vtt",
    "content": "All right, hope you are having fun 2 with these generators. 3 I'm going pretty much 4 in depth of the generator, 5 leaving no stone unturned. 6 That's why little more number 7 of videos but hey, you're getting 8 more knowledge for that. 9 Hope you'll rate this as well. 10 Let me take you onto 11 the screen and show you 12 something more interesting. 13 Now so far what we have seen is 14 the classic use of the yield 15 statement and there is 16 nothing wrong, this is how 17 majorly it is being used. 18 But there is also a different 19 use case of this yield. 20 You will not see them mostly 21 in the tutorials or the courses 22 which are made just on the surface 23 level or probably like that. 24 But I'll show you how this can be 25 used in the production and you will 26 see, you will unlock a really new 27 way of looking at the yield and also 28 interacting with the yield. 29 So so far we have seen that 30 actually whenever you call this. 31 So let's just say this is the person 32 who is calling the yield. 33 Yield actually generates the data 34 or gives the data when 35 what if this person wants 36 to send some data to the yield? 37 Yeah, that's also possible. 38 That can be possible and that 39 is used quite a lot but rarely 40 anybody discuss about this. 41 So this time we'll just go 42 ahead and say send data. 43 So we'll just go ahead and send 44 the data to this one. 45 Again this is too zoomed 46 in but you get the idea. 47 We want to send the data. 48 All right, let's go to the code 49 part and that's fairly easy, 50 not that easy but comparatively 51 to the comprehensions fairly easy. 52 So let's just call this1 as 03 53 and send generators py of course, 54 let's create a fresh new method 55 and call this one as Chai customer. 56 So somebody is asking us 57 for a chai and this time 58 here's the interesting part. 59 First of all we're going to print 60 up a message which says welcome. 61 First of all, welcome with 62 an exclamation and we will ask what 63 chai would you, would you like? 64 Just like that. 65 Now what we're expecting is somebody 66 will give me a chai order and from 67 where this is going to come. 68 Yes. 69 Yeah, this is very strange. 70 So far we have used it 71 like a return statement. 72 We but can I actually store the value 73 of the yield in a variable? 74 Yes, you can. 75 This is Python world. 76 You can store anything 77 in the variable. 78 Now apart from this, we are going 79 to go ahead and run a loop 80 as well while true and we will say 81 print formatted string 82 which says preparing 83 and you are preparing an order. 84 So we are printing this. 85 Not only that, we again are going to 86 go ahead and say order equals yield. 87 Why we are doing it again? 88 Why you want to have a yield again? 89 We just took the order above. 90 That is great. 91 But this is the order 92 that you took this time. 93 And right now this is 94 preparing that order. 95 But what if the new order comes up? 96 That's also interesting case. 97 Let me walk you through what happens. 98 Because assuming things is not 99 a good idea in programming. 100 Let's just go ahead and execute them. 101 Let's just say again, 102 we have a tea stall. 103 And in this we call 104 this Chai customer. 105 There we go. 106 This right now is storing 107 the reference of the Chai customer. 108 Not doing anything at all. 109 In order to run this, I have to call 110 the next method and say this stall. 111 So this is interesting. 112 This is actually a point where you 113 are having a start the generator. 114 This is a starting point 115 of the generator. 116 Now after this I can just go 117 ahead and say stall dot send. 118 Once I go ahead and send this, 119 then for the first time 120 I'm sending masala Shai. 121 Let's run this program as it is. 122 What's happening in this case? 123 We'll add more code to this. 124 But right now I just want 125 to execute it as it is. 126 So once I do this notice 127 here, it says, welcome. 128 What chai would you like to have? 129 And it's preparing a masala chai. 130 Okay, it's preparing a masala chai. 131 The order that you are yielding 132 right now is this one. 133 So you have started this. 134 This one. 135 But what if somebody 136 gives me another one? 137 All right, let's go ahead and see. 138 This one is lemon chai. 139 All right, let's run this 140 and I'll show you exactly. 141 Notice here, it says masala 142 chai and lemon chai. 143 So it's preparing nicely. 144 But what if I don't 145 write this order yield. 146 Interesting question. 147 Let's go ahead and remove this. 148 Let's run this. 149 What happens in this case. 150 And we can see. 151 Oh, goodness. 152 This is continuously just running. 153 I'll kill this before it actually, 154 kills my memory. 155 But you can see now we are just 156 constantly going with 157 the memory, memory, all of that. 158 Because the point is this is 159 a while true loop and this is 160 constantly just keep on going with, 161 the infinite amount of loops. 162 Now we need to analyze this to truly 163 understand what just happened here. 164 Because this is a very interesting 165 case study altogether. 166 Let's close this and let's 167 bring it back so that we can 168 actually understand this. 169 And oops. 170 Oh, my bad. 171 All Right. 172 So notice here what is 173 happening in this program. 174 We define a simple program. 175 We simply print the message 176 and this is line number three 177 where we wait for the order. 178 So this order value is not going 179 to get filled if you just 180 run the function like this 181 next, all because you haven't 182 passed on any value. 183 This function is expecting 184 that something will be given 185 to me via the yield. 186 And since nothing is being given 187 to you, you simply go ahead and say, 188 okay, nothing is being given. 189 I will pause here. 190 So technically you never 191 reach line number three. 192 You are always at line number two. 193 So when I simply said stall chai 194 customer, this is just a reference. 195 And when I said next stall, 196 this starts my function and runs 197 this print line here, but actually 198 does nothing outside of this. 199 And to show you the proof 200 of this, I'll just comment this 201 and we'll run this program again. 202 And there we go. 203 So notice here it prints 204 what chai would you like? 205 But now it's waiting that, hey, give 206 me some value so that I can 207 actually store that into the order. 208 The moment you go ahead and first 209 time you send the value using send, 210 this send method directly 211 interacts to your generator. 212 And this is where the yield 213 value comes into the picture. 214 So yield, value comes up here. 215 So we have paused 216 the program in between. 217 And after that, this, while 218 true, this will always execute. 219 Then we are printing that. 220 Okay, you are preparing a, 221 order and then here also we are 222 pausing this program again. 223 If this doesn't exist, there is 224 no way of stopping this program. 225 This is always keep on running. 226 So this is the point 227 at line number six where you 228 stop the program again. 229 So when I run this program again, 230 then the program again comes 231 to the life and says, all right, 232 the order value is yield. 233 So your order gets a value 234 and then it again goes back. 235 Okay, so this is true. 236 So I'll just print that value again 237 and I will wait that 238 you pass me another value. 239 So the program then after that 240 keeps on going with the values 241 that you have, passed on. 242 It's a very interesting case study 243 of how the values are gone. 244 And I know this is a aha moment. 245 All right, so we are always stuck 246 in the while loop in the memory. 247 And this is the reason why 248 this program is getting 249 stopped in running into 250 the infinite generators. 251 And that is the reason I just 252 talked about the infinite generator 253 in the last video, 254 because the infinite generators 255 are used less this one here. 256 But this is the implementation 257 which is used quite a lot, 258 especially in the frameworks. 259 So I hope this gives you more idea 260 of why this is happening, 261 how this is happening, and each 262 line is broken down to you. 263 This was fun. 264 All right, for this video, 265 let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 send value to generators.vtt",
      "originalPath": "genai-cohort/python/07 Chapter Subtitles/03 send value to generators.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0017444522,
      0.016253723,
      0.032445643,
      -0.065265365,
      0.007120619,
      -0.00883632,
      -0.010106757,
      0.027590696,
      0.020032672,
      0.013008676,
      0.008012417,
      0.003487152,
      0.0038097058,
      0.029380204,
      0.12156771,
      0.0033678804,
      0.008599059,
      -0.022872347,
      0.01945417,
      -0.018292319,
      -0.016804751,
      -0.016981382,
      0.010524863,
      -0.007951441,
      0.009408087,
      0.0069184643,
      0.009079498,
      0.01886209,
      0.0369081,
      -0.012468011,
      -0.01507951,
      -0.0031574639,
      -0.0064559714,
      0.029542563,
      0.009864502,
      0.025721712,
      0.015909744,
      0.00336365,
      -0.032160845,
      -0.0031594397,
      -0.002596328,
      -0.0023667815,
      0.010078102,
      -0.019248944,
      0.009669784,
      -0.026496787,
      0.016448136,
      -0.01105004,
      0.011421318,
      0.016184531,
      0.010153224,
      0.008443415,
      0.0012884845,
      -0.1681479,
      -0.0013562634,
      0.014541586,
      -0.005335803,
      0.00094261795,
      0.0007614249,
      -0.0071277143,
      -0.010172733,
      0.00919788,
      -0.016366692,
      -0.03743038,
      -0.014148472,
      -0.014176006,
      0.023502816,
      -0.011168844,
      0.0021589375,
      -0.013453413,
      0.0002456703,
      0.0017861299,
      -0.014729666,
      0.007521583,
      -0.022850933,
      -0.027375365,
      0.007826929,
      0.008217682,
      0.013743689,
      0.006611513,
      0.016724436,
      -0.028560966,
      -0.002243147,
      0.007064012,
      0.00712383,
      -0.005196589,
      -0.017281156,
      0.0016245091,
      0.01177251,
      0.0063779135,
      -0.0251037,
      0.013705674,
      -0.0017356916,
      0.00074024074,
      -0.011240737,
      -0.003105739,
      -0.015215368,
      0.0154160615,
      -0.03647099,
      -0.007515922,
      0.010036294,
      -0.011254865,
      -0.011871916,
      -0.0022896423,
      0.008317488,
      0.005007002,
      -0.0035276513,
      -0.00047959175,
      -0.02354324,
      0.0047214003,
      -0.0034706036,
      -0.008592607,
      0.009365803,
      -0.005688347,
      -0.008591678,
      -0.15776023,
      0.010798748,
      0.0063754553,
      -0.011636883,
      0.016744642,
      -0.010316101,
      -0.0034412306,
      0.018409327,
      -0.0026923472,
      -0.01380127,
      0.017022839,
      0.015401123,
      0.011191917,
      0.003944072,
      0.010997937,
      -0.017405124,
      -0.017455593,
      -0.0051538507,
      -0.0012943198,
      0.0019178758,
      0.02531091,
      -0.0111727305,
      -0.019383937,
      -0.014423465,
      -0.0006238941,
      -0.007832621,
      0.023002706,
      -0.0032332395,
      0.032795377,
      0.009529839,
      0.002228107,
      -0.0033689337,
      0.016882032,
      -0.029832525,
      -0.021801675,
      0.006794151,
      -0.0035879537,
      0.011381815,
      -0.00830252,
      0.033739466,
      -0.025356216,
      0.0015294704,
      0.004741538,
      0.009332996,
      0.0008880808,
      -0.015495116,
      -0.013813604,
      0.003088817,
      0.0025901094,
      -0.010926177,
      0.01631619,
      -0.010961579,
      0.0032789314,
      0.014483432,
      0.022834428,
      -0.01083499,
      -0.018035967,
      0.0157956,
      -0.0055220877,
      -0.00945045,
      0.01591778,
      -0.009726935,
      -0.004797453,
      0.024196057,
      -0.014131288,
      0.011287623,
      -0.0066767405,
      -0.0040451596,
      0.006044234,
      0.013361356,
      -0.0014588627,
      -0.015256045,
      0.0070477314,
      -0.0064578997,
      -0.011967216,
      -0.011314038,
      0.03151587,
      0.027914686,
      0.009112867,
      0.012369293,
      -0.026337968,
      -0.0057766275,
      0.00021773108,
      -0.005064244,
      0.012949485,
      0.026827015,
      -0.0090292,
      -0.00769765,
      -0.03207954,
      0.022764262,
      -0.024538849,
      0.009553617,
      0.0015977105,
      0.020304838,
      0.023993323,
      -0.014738071,
      -0.011508337,
      0.0201669,
      0.0029166532,
      0.021797964,
      0.007807369,
      0.017416183,
      -0.009210188,
      0.00484671,
      -0.006994146,
      0.00876416,
      -0.009618458,
      -0.0029948598,
      0.024596866,
      0.00071086374,
      -0.009651479,
      -0.0014386624,
      0.021128654,
      -0.014580409,
      0.015564104,
      0.023377772,
      0.019613732,
      -0.02302552,
      0.00088943046,
      0.01127034,
      -0.000045089022,
      -0.008312829,
      0.0257602,
      0.008434488,
      -0.010272397,
      -0.013611786,
      -0.002286699,
      -0.005123246,
      0.0020472736,
      0.015440485,
      -0.003917457,
      0.010636775,
      0.0037981744,
      -0.004764434,
      -0.024379099,
      -0.0008169618,
      -0.015311459,
      0.00021393038,
      -0.007836004,
      -0.012520154,
      -0.045241974,
      -0.0059740767,
      -0.029153094,
      -0.014831879,
      -0.019598855,
      -0.0019641463,
      -0.004716428,
      -0.02606216,
      -0.005978439,
      0.00017760554,
      -0.00045550757,
      0.018016145,
      0.034373436,
      -0.024943216,
      0.0019471407,
      0.02157686,
      0.010930443,
      0.014769085,
      0.0060125897,
      -0.017205887,
      0.017539408,
      -0.0929473,
      0.023372188,
      0.0020299125,
      -0.036123265,
      -0.012712855,
      0.011879006,
      -0.014551535,
      0.008485923,
      0.0011573184,
      0.010040336,
      0.011053033,
      -0.017894039,
      0.015570281,
      -0.036393754,
      -0.010132302,
      -0.011475515,
      0.00748311,
      0.0002671308,
      0.029620966,
      -0.003599063,
      0.0118470015,
      0.004481743,
      0.005977867,
      0.012794828,
      0.014960906,
      0.009658648,
      -0.005185515,
      0.031379428,
      0.01424677,
      -0.008911746,
      -0.002716102,
      0.027050996,
      -0.0148609495,
      0.008608204,
      0.008413596,
      0.0051766727,
      -0.0059840158,
      -0.018276114,
      0.004647942,
      -0.019594746,
      0.00839779,
      -0.014357991,
      0.017656809,
      0.043029454,
      0.0056585907,
      0.014479676,
      0.01329402,
      0.015861386,
      -0.021652006,
      0.004830823,
      -0.013162901,
      0.004073305,
      0.0066784713,
      -0.02829412,
      0.007652788,
      -0.0026232565,
      0.029048722,
      0.005349548,
      0.0010210795,
      0.016937025,
      0.010044453,
      0.011930581,
      0.019956533,
      0.008982708,
      0.0034887868,
      0.017911512,
      0.026097117,
      -0.027128017,
      -0.008563694,
      0.016059617,
      0.0075504095,
      0.0022928275,
      0.0056772004,
      -0.029632123,
      0.00028755705,
      0.010179878,
      0.034071557,
      -0.014472812,
      -0.027743813,
      0.047218006,
      0.02645931,
      -0.029289804,
      0.003053389,
      0.0054295305,
      0.012456341,
      0.011415155,
      0.016376127,
      -0.004464233,
      0.018347425,
      0.0032198203,
      0.0095191365,
      -0.003992646,
      -0.025237612,
      0.0010875996,
      -0.015907325,
      -0.0019146673,
      -0.020248074,
      -0.01681061,
      -0.02447686,
      0.001339249,
      -0.0018531875,
      0.0007746451,
      -0.0112019265,
      -0.008174271,
      -0.0010701532,
      -0.0009130443,
      -0.037373822,
      0.0033052324,
      -0.009426471,
      -0.023020895,
      -0.012626632,
      -0.02733901,
      -0.0055502662,
      -0.02577164,
      -0.01589111,
      0.0008862997,
      0.0068875053,
      0.010472606,
      0.014448864,
      -0.013443846,
      -0.020270761,
      -0.008686765,
      -0.008232265,
      0.0007867841,
      -0.0027634834,
      0.016013384,
      -0.007920602,
      0.00737227,
      0.010927113,
      -0.037077677,
      -0.033102952,
      0.011386762,
      -0.0076049357,
      -0.016467614,
      0.000064980595,
      -0.0054050274,
      0.024279365,
      0.020949038,
      0.025332047,
      -0.002271849,
      -0.019296423,
      -0.014612532,
      -0.00009217841,
      0.0065911473,
      -0.027257541,
      0.022514813,
      -0.0034440358,
      -0.008901961,
      0.00076976663,
      -0.034512192,
      -0.008286517,
      -0.03262892,
      -0.008846792,
      0.0044624847,
      -0.012394267,
      -0.0009545068,
      -0.0033973386,
      -0.0076164245,
      -0.015908604,
      -0.02617848,
      0.005059877,
      -0.013331878,
      -0.027994802,
      0.0022850498,
      0.022882622,
      -0.0041226232,
      -0.013931663,
      0.009611985,
      0.0060213176,
      -0.004403616,
      0.0020619198,
      -0.018135114,
      -0.04477352,
      0.008707272,
      0.029357977,
      -0.004408504,
      0.014144806,
      -0.0040411353,
      0.042364653,
      0.001386656,
      0.0028697038,
      -0.00908217,
      -0.0051453267,
      0.016393572,
      0.00059708965,
      0.021196472,
      0.022857675,
      0.0009861196,
      -0.024654115,
      -0.009477756,
      -0.004339513,
      -0.009446369,
      0.004083732,
      0.034445506,
      0.0030806407,
      0.04047463,
      0.023673588,
      -0.013657095,
      -0.0021875917,
      0.014925764,
      -0.012617255,
      -0.008044355,
      -0.0118799675,
      0.013131929,
      0.0037284775,
      -0.032402888,
      -0.019884387,
      -0.012376698,
      -0.008645968,
      0.02929463,
      -0.013338104,
      -0.006750868,
      -0.0015176405,
      -0.008909316,
      0.033195708,
      0.02281746,
      -0.027396455,
      -0.022100162,
      -0.03549968,
      -0.0021943178,
      0.00762618,
      -0.027365271,
      -0.014483382,
      0.0020101126,
      0.016095113,
      -0.018856188,
      -0.0062486897,
      0.01852997,
      0.005258629,
      0.023409763,
      -0.017164944,
      -0.0031775304,
      0.010252769,
      0.012052558,
      -0.027047152,
      -0.009054668,
      0.013656603,
      0.007703333,
      -0.016163614,
      0.016789388,
      0.008229354,
      -0.019318232,
      -0.026827239,
      0.0021350149,
      0.015254487,
      -0.0037252163,
      0.018046636,
      -0.004505848,
      -0.030356985,
      0.0023151713,
      0.005296871,
      0.02331058,
      -0.0009554329,
      -0.005918,
      -0.017177848,
      0.027442008,
      -0.0058298036,
      -0.005317027,
      0.012654463,
      -0.0015043323,
      0.03769599,
      0.02244662,
      0.0013092794,
      0.011853153,
      -0.008121683,
      -0.0006505978,
      0.012293971,
      -0.0018073212,
      -0.023675095,
      -0.12666261,
      0.012702459,
      -0.006851965,
      -0.0017868477,
      -0.024057813,
      -0.017559048,
      -0.023210308,
      -0.01557509,
      0.0019324222,
      0.0103307115,
      0.030572828,
      -0.014157883,
      0.006036999,
      0.00435244,
      0.012165018,
      0.0007190666,
      0.014722974,
      0.012982702,
      0.007064185,
      0.0055660815,
      -0.006784557,
      0.0044798544,
      -0.0038067403,
      0.0042554806,
      -0.010697491,
      -0.018603593,
      0.010187914,
      0.012077575,
      -0.01554333,
      -0.005599665,
      -0.030767275,
      -0.005759107,
      -0.001375538,
      0.012498162,
      0.01838277,
      -0.026446536,
      -0.015813082,
      0.027243555,
      0.025104575,
      0.015637306,
      -0.00976987,
      0.0064731827,
      0.026747396,
      -0.0005813606,
      -0.009081125,
      0.024362661,
      0.03691269,
      -0.027735796,
      -0.0014629216,
      0.015173891,
      -0.03187562,
      -0.012422052,
      -0.007935275,
      -0.03858642,
      -0.017206596,
      -0.00093229086,
      0.016056096,
      -0.01582743,
      0.014048173,
      0.008322971,
      0.0008584685,
      -0.008737758,
      -0.01306918,
      0.02356985,
      -0.0010486374,
      0.0079637,
      0.016491704,
      0.0111230975,
      0.016741905,
      -0.014834562,
      -0.006922883,
      -0.0026640566,
      -0.0021073131,
      0.0355106,
      0.002826842,
      -0.007752111,
      0.0036308593,
      -0.0011656893,
      0.00463351,
      0.013936872,
      -0.02507105,
      -0.035774954,
      -0.075952254,
      -0.016756581,
      0.00942773,
      -0.033116702,
      -0.007292126,
      -0.0038849558,
      -0.037536155,
      -0.0036504925,
      0.00747555,
      -0.013780955,
      -0.017951766,
      -0.0060900296,
      0.009532096,
      0.0050507323,
      -0.0088968715,
      0.002224804,
      0.0056311376,
      -0.015529461,
      -0.012074067,
      -0.006066336,
      -0.006453316,
      0.002466111,
      -0.01671099,
      -0.007180181,
      0.0053734304,
      0.022340301,
      -0.022903537,
      0.00044240133,
      0.0024749362,
      0.022834823,
      -0.018318793,
      -0.15578619,
      -0.013196443,
      0.0015221249,
      0.007171663,
      0.009204917,
      0.006661746,
      -0.010907533,
      -0.009324964,
      0.003695912,
      0.009497109,
      -0.0070698964,
      -0.008903667,
      -0.0069876355,
      -0.00077524496,
      0.028637232,
      0.13407563,
      -0.0062798513,
      0.032409597,
      -0.012087214,
      -0.0024938935,
      0.0036847831,
      -0.002273429,
      -0.02168426,
      0.015848637,
      -0.018292386,
      -0.0028869223,
      0.0023523439,
      -0.032295316,
      -0.0006648419,
      0.024019599,
      0.0034595423,
      -0.0045040706,
      0.003849949,
      0.028832389,
      0.010357046,
      -0.014186801,
      0.012222721,
      0.012112446,
      -0.0022987393,
      -0.002634713,
      0.0009961793,
      0.005445879,
      0.004300393,
      -0.0004445129,
      0.008227643,
      0.018635288,
      -0.020814162,
      -0.009629259,
      0.007403509,
      -0.00505806,
      -0.01789492,
      -0.060396414,
      0.0061441804,
      -0.022702908,
      -0.0148091605,
      -0.0035873961,
      0.0027248333,
      0.010920739,
      0.0022357614,
      0.008417944,
      -0.0202473,
      -0.023693232,
      -0.00012514277,
      -0.0020489905,
      -0.01394831,
      -0.014563115,
      0.0038172838,
      0.018386025,
      0.0143399,
      0.002288344,
      -0.001307696,
      0.017381076,
      -0.017247511,
      0.00781973,
      0.008110809,
      0.0005096787,
      -0.012702253,
      0.014592973,
      0.025470607,
      -0.010030402,
      -0.00020666597,
      -0.019001452,
      0.01015428,
      0.0012772083,
      0.005076587,
      0.0144679295,
      -0.009889282,
      -0.014540531,
      0.0032723953,
      -0.0040210327,
      -0.0033263266,
      -0.010835691,
      -0.013907818,
      0.027067432,
      -0.0061435862,
      0.02681771,
      -0.0046995883,
      0.0049977577,
      0.042990305,
      -0.016284397,
      -0.01854078,
      -0.015417322,
      0.014390726,
      -0.03139085,
      0.02695835,
      0.0046992246,
      -0.025073778,
      0.013580311,
      -0.023488231,
      -0.003335964
    ]
  },
  {
    "id": "genai_cohort_python_04_yield_from_and_close_the_generators_vtt",
    "content": "Moving on. 2 Hope you are having fun in this 3 Python course and hope you have 4 rated us with your kind words. 5 We really need that. 6 So in this portion of the Python 7 course we're going to work on that 8 we can actually yield some value. 9 In case you remember from 10 the last video we are 11 talking about the generators. 12 We have seen quite a lot, quite 13 a hidden details about them. 14 But now we want to see two more 15 things and that is it, that 16 is all about the generators. 17 The one thing which is common 18 that sometimes generator 19 doesn't generate the value or 20 yield the value on its own. 21 It sometimes borrows the value 22 from somewhere else. 23 That is totally possible. 24 We're going to see a right example 25 for that as well as sometimes maybe 26 you don't want to generate rest 27 of the values from a generator, 28 or maybe it's an infinite generator. 29 We don't want to keep it 30 in the memory forever. 31 We want to close it down so 32 that it's removed from the memory 33 and we get the job done. 34 This is a common scenario 35 in the database. 36 Whenever a function calls 37 you yield a connection string 38 from the database. 39 And once it's all done you 40 finally try to close this up. 41 Although the logic is bit 42 different there in the database 43 but you will see somehow similar 44 kind of example appear. 45 Let me take you up on the screen 46 and the next thing that we want 47 to do in this yield is just like 48 we have worked on the send data, 49 now we want to work on yield from 50 and we are also going to work on 51 close. 52 So how do we do these things? 53 How do we yield from 54 and how do we close this? 55 It's actually super easy if you 56 just go ahead and look at this. 57 So let's create a sample 58 example for this. 59 I'll close everything we worked 60 quite a lot and let's create 61 a new file and we'll write both 62 the example in the same file. 63 Let's call this1 as 04 close. 64 Jenny Raytor There we go. 65 Py. 66 Okay, so what we're going to do, 67 first of all I'll shut up my AI. 68 Otherwise I, I hardly use it. 69 I always keep it shut up. 70 But I don't know why. 71 I do have this extension 72 enabled in this. 73 I'll probably get rid of this. 74 So let's just say we simply go 75 ahead and define a local chai. 76 Yes, the chai is the theme 77 of this entire course. 78 We're not going 79 to leave it anytime back. 80 It's fun actually. 81 A lot of people love chai. 82 Or you can replace it with coffee as 83 well in case you Are that big fan. 84 And once we are done with this, we 85 are going to go ahead and say yield. 86 The first time you call this one, it 87 says I'll give you a masala chai. 88 The next time you go ahead 89 and call this one, this is going 90 to give you ginger chai. 91 All right, good enough, Fair enough. 92 We have another one which is 93 imported chai. 94 There we go. 95 And this one also does yield. 96 So we're going to yield 97 and first time we're going to 98 have an imported chai. 99 So I think Macha is one 100 of the imported one, very famous 101 as well the Japanese one. 102 And Oolong is actually 103 not from India. 104 So oolong chai is popular 105 in again Southeast Asia, 106 but not exactly in India. 107 You got some chai knowledge as well. 108 So we are going to define a simple 109 full menu in this full menu. 110 And the way how full menu works 111 is we are going to get the data 112 little from the local chai, little 113 from the imported one. 114 So how we do that, 115 pretty easy actually. 116 We can use yield, but not only 117 just yield, we can actually use 118 another syntax which is from. 119 It's almost similar to when 120 you actually write 121 at the top from this file. 122 I want to import this function. 123 It's almost exactly same. 124 All you got to do is have this local 125 chai and make sure this is 126 a classic mistake execute that you 127 want to call the function here. 128 Similarly in this line we want 129 to go ahead this time we want 130 to have the imported chai. 131 So make sure you execute that 132 and that is it. 133 That is all you have. 134 In order to see that how this 135 function actually works, we can just 136 go ahead and say for chai in full 137 menu, just like this and we're going 138 to yield one at a time. 139 We're not going to use next 140 next, next you know the syntax 141 of it if it is required. 142 But in this case I'll just 143 go ahead and say let's 144 print the chai value here. 145 Pretty easy. 146 Not that bad, not that bad. 147 I'll just go ahead and say, 148 hey python, let's run the 04 149 and there we go, we see 150 masala chai, ginger chai. 151 So after that we got 152 matcha and Oolong. 153 So pretty good, pretty fun 154 that we have imported that. 155 And once you see yield, it actually 156 goes ahead and does all the job. 157 Now let's go ahead and see if we 158 can run through how we can actually 159 close halfway through the things. 160 Yes, that's totally possible. 161 I'll show you an example. 162 Let's just say we have a chai stall 163 and this one is pretty interesting 164 one because we are going 165 to use another syntax which is Try 166 Catch, also known as Try Accept. 167 In the world of Python we call it 168 as Try and accept, but in most 169 of the world other programming 170 language it's called as Try Catch. 171 So don't get confused with that. 172 Whenever I say Try Catch or anybody 173 else says Try catch that means 174 implement the try except syntax. 175 It's a valid syntax, available 176 In Java, JavaScript, 177 Swift, almost every language. 178 So we'll just go ahead and say 179 we want to try something. 180 I'll write a pass for a second 181 and then we actually go ahead 182 and fill it up with accept. 183 I will go ahead and accept, 184 just like this and we'll say pass. 185 So this is a basic syntax. 186 As of now we'll study more about 187 this, although we don't need to. 188 This is it all about the syntax. 189 If there is an error 190 in the try block, you try 191 to execute some piece of code. 192 If there is a problem, 193 it is handled in the accept pass 194 or the exception stage. 195 But anyways I'll go ahead and say 196 while true, so we are generating 197 a constant one, we'll keep 198 an order and this order is actually 199 coming up from the yield. 200 And we will also pass on a message 201 which says waiting for chai order. 202 Another interesting syntax. 203 Yes, I know. 204 And then once we are done here, 205 we are getting the order, 206 we will just go ahead and print 207 this, a simple message which says 208 stall closed, no more chai. 209 So in case something goes 210 wrong, we go like that. 211 Now where is the closing 212 syntax in all of this? 213 Don't worry, have 214 patience, I'll show you. 215 First of all, let's just say we bring 216 up a stall and that stall comes 217 from the chai stall, just like that. 218 In order to just go ahead 219 and start this, we are going 220 to go ahead and print this. 221 I'll say it like this. 222 I will use the next syntax and in 223 the next syntax I'll just go 224 ahead and pass on this stall. 225 All right. 226 Pretty easy. 227 Pretty. 228 Okay, now let's see what 229 happens if I go ahead and run 230 this much of the code. 231 This is fun. 232 Actually if I run this notice here, 233 it says waiting for chai order. 234 There is no more order. 235 We simply say stall 236 close, no more chai. 237 Okay, but that's okay, that's 238 exactly what we wanted to go with 239 that because we didn't pass on 240 any value, we didn't send anything, 241 remember the send syntax. 242 But interestingly you can actually 243 go ahead and gracefully close it 244 just by using a close Run this. 245 That is it. 246 Now what happens when I run this one? 247 That's interesting. 248 Notice here. 249 Exactly Same. 250 And this is probably the reason 251 why a lot of people 252 don't actually close it. 253 They just wait that hey, it 254 will probably automatic close, 255 which is not a good idea. 256 You should always be responsible 257 for closing your generators. 258 And this is how it goes. 259 This is known as it triggers 260 a generator exit method which 261 actually is responsible for this. 262 So this not only just close this, 263 this is actually a cleanup. 264 You're cleaning up your memory 265 and this should be done. 266 This is important. 267 So. 268 All right. 269 Hope you got this thing. 270 Let me just give you a quick summary 271 because hey, we have studied a lot. 272 So the first thing that we 273 have studied is yield syntax. 274 This is a very, very 275 interesting syntax. 276 What it does it pause and resume 277 an execution of a function. 278 This is the main guy who 279 is responsible for 280 converting into generators. 281 We then studied about the next syntax 282 which is manually getting the next 283 value, whichever the generator 284 is going to yield at me. 285 Then we also went up and studied 286 the send syntax which actually 287 sends data, into the generator. 288 We also went up and studied 289 the syntax of yield from. 290 And that's simply just getting 291 from another generator 292 or delegate the sub generator 293 or iteratable any task. 294 It's not just always 295 getting the value. 296 Sometimes you want to delegate some 297 tasks that hey, you'll do that task. 298 So we can actually go 299 ahead and do that. 300 And last but not the least 301 one that is close. 302 This is usually the cleanup. 303 This gracefully stops 304 the generator again, it stops 305 automatically as well. 306 But we really want 307 to gracefully stop the generator so 308 there are no memory leaks. 309 Your program performs well. 310 No memory crashes, tons of advantage. 311 Let's go ahead and catch 312 up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 yield from and close the generators.vtt",
      "originalPath": "genai-cohort/python/07 Chapter Subtitles/04 yield from and close the generators.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0071731275,
      0.006881733,
      0.025362756,
      -0.064379185,
      -0.00125893,
      -0.012540054,
      -0.0148049025,
      0.03441116,
      0.016926331,
      0.0123353945,
      -0.0019678108,
      -0.0021884302,
      0.009251603,
      0.016856246,
      0.12746224,
      0.01766919,
      -0.0016536375,
      -0.017871885,
      0.010621279,
      -0.025345162,
      -0.011865767,
      -0.020281708,
      -0.0073900907,
      -0.01703987,
      0.006612771,
      0.011536273,
      0.009792782,
      0.025791267,
      0.038049363,
      -0.016471311,
      0.007083439,
      -0.0015453709,
      0.019292722,
      0.02412577,
      -0.011576372,
      0.02444986,
      0.014641675,
      0.014696307,
      -0.031896703,
      0.0048625865,
      -0.008795534,
      0.008012737,
      -0.012957697,
      -0.010460776,
      -0.009331079,
      -0.04120332,
      0.005160329,
      -0.019475503,
      0.007429834,
      0.017379953,
      0.013599911,
      0.006171169,
      0.00043944034,
      -0.16963992,
      0.0010435747,
      0.010946033,
      -0.0050022462,
      -0.0039614686,
      0.008789764,
      0.0014984638,
      -0.03106586,
      0.015425874,
      -0.015873257,
      -0.019906517,
      -0.024624351,
      -0.024799619,
      0.02345428,
      -0.008192955,
      -0.006817041,
      -0.007581058,
      0.018474482,
      0.014829099,
      -0.018178098,
      -0.021389313,
      -0.014515021,
      -0.041287158,
      0.0041450774,
      0.001252773,
      0.005979055,
      0.021589825,
      0.0128322765,
      -0.018689023,
      0.0019227645,
      0.007299524,
      0.01295565,
      -0.0008747752,
      -0.014919909,
      -0.008862386,
      0.00017604743,
      0.015298416,
      -0.023412354,
      0.017943252,
      -0.011261241,
      0.011854197,
      -0.014849552,
      -0.0017022049,
      -0.013939848,
      0.0036731784,
      -0.036126014,
      -0.01108553,
      -0.0003306401,
      -0.02559581,
      -0.015346695,
      -0.013616071,
      0.00093462726,
      0.008443696,
      -0.00022103202,
      0.00014963618,
      -0.0120644225,
      0.006955658,
      -0.0053316904,
      -0.021260398,
      0.007684151,
      0.003925943,
      -0.008096831,
      -0.15528926,
      0.024548387,
      -0.0025364615,
      -0.012574005,
      0.0033118387,
      -0.008685421,
      -0.0036905762,
      0.02359714,
      -0.009170838,
      -0.02322647,
      0.011570071,
      0.0042214803,
      0.027481271,
      -0.006104872,
      0.012050953,
      -0.0112079065,
      -0.018678417,
      -0.00590713,
      0.013098564,
      -0.0069798212,
      0.025168188,
      -0.0047912993,
      -0.0130121745,
      -0.018029751,
      -0.0059723277,
      -0.026468588,
      0.02880527,
      0.0024367096,
      0.03952486,
      0.006469548,
      0.0009710318,
      -0.0056748567,
      0.0062700994,
      -0.019442143,
      -0.020421326,
      0.0027775127,
      -0.00047642464,
      0.009857891,
      -0.0075318296,
      0.020773811,
      -0.030545216,
      0.00023043482,
      0.004100999,
      0.0010023586,
      -0.01616932,
      -0.010462673,
      0.009650197,
      -0.003225344,
      0.008113488,
      -0.012396763,
      0.0037851913,
      -0.014000368,
      -0.0050601442,
      0.014100571,
      0.021864457,
      -0.010700095,
      -0.02440731,
      0.010512844,
      -0.008373036,
      -0.016555604,
      0.009857369,
      -0.0073358985,
      -0.0020076246,
      0.020646824,
      -0.0041977656,
      0.00979103,
      0.0029688475,
      -0.0036535512,
      0.004776165,
      0.0039540357,
      0.016580459,
      -0.027194895,
      0.01797265,
      0.012797074,
      -0.024109209,
      -0.013342546,
      0.018702203,
      0.029030828,
      -0.00094256946,
      0.009270262,
      -0.018678825,
      0.001883813,
      0.0063590365,
      -0.010455056,
      0.005769588,
      0.03971586,
      -0.00015685137,
      -0.01823517,
      -0.024634888,
      0.0109227,
      -0.016005673,
      0.010677061,
      -0.010586414,
      0.005544596,
      0.022045681,
      -0.023050789,
      -0.0059491144,
      0.016910255,
      0.0064357067,
      0.02218687,
      0.007642586,
      0.0061779357,
      -0.0019156692,
      0.008013984,
      -0.0056024236,
      0.006568877,
      0.01053974,
      0.0071628685,
      0.023277177,
      -0.016628224,
      -0.008001926,
      0.013317864,
      0.025726011,
      0.0066947513,
      0.011489365,
      0.034058843,
      0.024388267,
      -0.033147782,
      0.002627659,
      -0.0094806235,
      0.00024460373,
      -0.011745178,
      0.025796702,
      0.016083624,
      -0.0006260985,
      -0.014643028,
      0.01307189,
      -0.006138722,
      -0.00026580645,
      0.01635341,
      -0.014601316,
      0.002577837,
      -0.0024813195,
      -0.019958846,
      -0.025813878,
      -0.016273648,
      -0.01920287,
      0.00219764,
      -0.03724681,
      -0.012230808,
      -0.046629753,
      -0.00839703,
      -0.017756026,
      -0.0073432242,
      -0.009079539,
      0.0067147585,
      -0.0023474074,
      -0.028139725,
      0.0022756872,
      0.0056342897,
      0.027829567,
      0.024012074,
      0.035102554,
      -0.02491258,
      0.005137796,
      0.009059207,
      0.020570565,
      0.018492164,
      0.014342504,
      -0.023721358,
      0.016824432,
      -0.10282283,
      0.025272507,
      0.002922381,
      -0.021216085,
      -0.0026238917,
      0.010818438,
      -0.03677528,
      0.011655756,
      -0.0005328448,
      -0.0010490809,
      0.011843223,
      -0.010464195,
      0.02016641,
      -0.028418783,
      0.00696249,
      -0.00045448414,
      0.015363419,
      -0.02984857,
      0.015129262,
      -0.027379321,
      0.0015783531,
      0.0024160373,
      -0.015830401,
      0.008007246,
      0.0055468315,
      0.006971708,
      0.003840271,
      0.029669438,
      0.014814975,
      0.0053988816,
      -0.010171565,
      0.02690734,
      -0.010134346,
      0.012995526,
      0.019500764,
      0.014324697,
      -0.0062505207,
      -0.0046190503,
      0.007610173,
      -0.01623196,
      0.010732757,
      -0.0129189575,
      0.016253676,
      0.036537185,
      -0.0050435923,
      0.019797672,
      0.0058683474,
      0.0039337487,
      -0.014495367,
      -0.009001118,
      -0.011433486,
      0.009339543,
      0.033884156,
      0.0054006465,
      -0.0020164605,
      -0.00704648,
      0.021413498,
      0.0013969287,
      -0.0057550278,
      0.015497722,
      -0.009270322,
      -0.00007116064,
      0.016427908,
      0.0028975243,
      0.009736514,
      0.010292555,
      0.010196632,
      -0.0044251676,
      -0.0002377615,
      0.014020319,
      -0.009892966,
      -0.008014158,
      -0.0050343364,
      -0.028203148,
      -0.0076348106,
      0.015456335,
      0.024297304,
      -0.013815052,
      -0.01310113,
      0.042833876,
      0.025418542,
      -0.029638203,
      0.00036117126,
      -0.0007742512,
      0.0065065497,
      0.0075081834,
      0.008132308,
      -0.0042192335,
      0.001906133,
      -0.005097369,
      0.007457807,
      0.006032385,
      -0.026796192,
      0.011044524,
      -0.012288262,
      -0.010097002,
      -0.013607128,
      -0.019095331,
      -0.022305645,
      -0.011363457,
      -0.015121394,
      0.003888794,
      -0.0199505,
      -0.0054343194,
      -0.000020385465,
      -0.024820529,
      -0.025362467,
      -0.0041385624,
      -0.009740746,
      -0.014936646,
      -0.00283575,
      -0.022590173,
      -0.008381989,
      -0.019243833,
      -0.009909033,
      0.002931581,
      0.009521874,
      0.012755945,
      0.013863408,
      -0.019969756,
      -0.012625064,
      -0.0013595669,
      -0.019084647,
      0.0016337837,
      -0.0037738136,
      0.012846221,
      -0.010132197,
      -0.0011159418,
      -0.008001379,
      -0.027709855,
      -0.039502755,
      0.015197103,
      -0.009480198,
      -0.015560598,
      0.006101723,
      -0.001870145,
      0.024004217,
      0.024082042,
      0.022002477,
      -0.002637343,
      0.0037130485,
      -0.016624672,
      -0.0017161662,
      0.0018516897,
      -0.017971298,
      0.027540026,
      -0.0050625494,
      -0.008432576,
      -0.018264532,
      -0.029093316,
      -0.009007085,
      -0.025097191,
      -0.0087817665,
      0.011930293,
      -0.0043254425,
      0.00589576,
      0.010137285,
      -0.01616753,
      -0.019212708,
      -0.022722688,
      0.011660722,
      0.009794819,
      -0.024499267,
      -0.0075224643,
      0.026371118,
      0.014328455,
      -0.0050495025,
      -0.003376095,
      -0.0032180683,
      -0.027945857,
      0.00007358071,
      -0.011133926,
      -0.04363714,
      -0.0036050912,
      0.016992666,
      0.0016020004,
      0.028338712,
      -0.00065227813,
      0.044017192,
      0.005887956,
      0.003841072,
      -0.004537704,
      0.0038476796,
      0.006148773,
      -0.0103902295,
      0.009011493,
      0.018087713,
      -0.0058641797,
      -0.020279478,
      -0.005740466,
      -0.0049092993,
      -0.011917869,
      -0.0038083065,
      0.020676909,
      0.0036911927,
      0.036870833,
      0.016724262,
      0.0022819731,
      0.01930424,
      0.014352095,
      -0.017560303,
      -0.019403212,
      -0.0027443564,
      0.0063312403,
      0.008259993,
      -0.0237352,
      0.004387646,
      -0.0050990875,
      0.0021834986,
      0.017778274,
      -0.010854735,
      -0.004166595,
      0.0026925288,
      -0.0028667836,
      0.014770163,
      0.02907981,
      -0.01109484,
      -0.012892566,
      -0.032193877,
      -0.013188694,
      0.012555192,
      -0.018785436,
      -0.009699151,
      -0.0020823388,
      0.019068053,
      -0.014040664,
      -0.004025631,
      0.008408499,
      -0.0016620962,
      0.014875493,
      -0.013552132,
      -0.010212667,
      -0.0022893243,
      0.017544493,
      -0.040575124,
      -0.009877762,
      0.025783068,
      0.022356391,
      -0.028944002,
      0.0002458045,
      0.0015697515,
      -0.022720076,
      -0.014279464,
      -0.0029043213,
      0.010014258,
      -0.020779017,
      0.020022022,
      0.007249125,
      -0.019447317,
      0.01841629,
      -0.0039801756,
      0.036292657,
      0.010657479,
      -0.0041945092,
      -0.0056059966,
      0.023736231,
      0.007979407,
      -0.0050319964,
      0.0013634813,
      -0.00013889019,
      0.024183536,
      0.021466982,
      0.0031417257,
      0.01145278,
      0.0034343612,
      -0.0067667547,
      0.008335051,
      0.0032001482,
      -0.018903906,
      -0.12058186,
      -0.004984647,
      -0.0009790426,
      -0.0064362097,
      -0.014535351,
      -0.008528945,
      -0.029049492,
      -0.023749204,
      -0.008698416,
      0.012544745,
      0.015358342,
      -0.020007374,
      0.019971991,
      -0.0008958287,
      0.01972819,
      -0.0154694235,
      0.014166261,
      0.0010132042,
      0.017229129,
      0.006022521,
      -0.006743997,
      -0.00872498,
      -0.004541175,
      0.011005673,
      -0.0033186749,
      -0.012481498,
      0.0056329938,
      -0.0065794284,
      0.0053483024,
      -0.004694102,
      -0.018738449,
      -0.0032945382,
      -0.004933133,
      0.010047163,
      0.0129881315,
      -0.016542261,
      -0.013936928,
      0.032838967,
      0.013336701,
      0.02396197,
      -0.013851158,
      -0.005036626,
      0.0301157,
      0.009137673,
      -0.011207389,
      0.019937662,
      0.040015835,
      -0.030483382,
      0.0162709,
      0.016425353,
      -0.038181633,
      -0.015114376,
      -0.0018913234,
      -0.029686099,
      -0.009107497,
      -0.0037345518,
      0.0036261713,
      -0.009033578,
      0.017241832,
      -0.0002089485,
      0.0016831856,
      -0.014066495,
      -0.0010601736,
      0.016280597,
      0.0072062914,
      0.0026422811,
      0.017861852,
      0.010062635,
      0.020237613,
      -0.0060178926,
      -0.0077198218,
      -0.004173167,
      -0.02208445,
      0.034106933,
      0.003818622,
      -0.0034515266,
      0.008687643,
      -0.0025576893,
      0.0009708067,
      0.0042036492,
      -0.03393312,
      -0.036518905,
      -0.07301181,
      -0.015246174,
      0.011914142,
      0.001421989,
      -0.010654432,
      -0.001750762,
      -0.030829256,
      -0.0008083103,
      0.037067283,
      -0.006882516,
      -0.0050760265,
      -0.002178848,
      0.000003821118,
      0.010241757,
      -0.014880148,
      -0.0041340934,
      0.013380733,
      -0.011144539,
      -0.0086079305,
      0.0044284165,
      -0.013461798,
      0.01066228,
      -0.020897971,
      -0.014841561,
      0.019954473,
      0.0047981325,
      -0.024616584,
      -0.006373441,
      -0.00224177,
      0.009132068,
      -0.022832287,
      -0.15103468,
      -0.028629012,
      0.017142285,
      -0.013993207,
      0.0047706747,
      -0.0048608263,
      -0.014205575,
      -0.0149349645,
      0.003894488,
      0.009378883,
      -0.017875444,
      -0.021999568,
      -0.02422522,
      0.0011609407,
      0.009327487,
      0.13753694,
      -0.019709626,
      0.01576143,
      -0.032584906,
      0.01355869,
      0.011309724,
      -0.02306634,
      -0.0074493317,
      0.004833274,
      -0.0068952814,
      -0.0046551507,
      0.008615552,
      -0.02828849,
      -0.0063540014,
      0.01423872,
      -0.015779901,
      0.0008662426,
      0.00958019,
      0.030739784,
      0.0050039697,
      0.0074739717,
      0.00045791312,
      0.008855262,
      0.003035647,
      0.006606663,
      0.0015487253,
      0.0037694743,
      0.006011849,
      -0.023334285,
      0.015214834,
      0.013128155,
      -0.019996878,
      -0.007816796,
      0.0037504705,
      -0.01633622,
      -0.022863392,
      -0.062989645,
      0.0180767,
      -0.013029911,
      -0.019874418,
      0.009614307,
      0.00068874826,
      0.009224988,
      0.010001754,
      0.0011371801,
      -0.011789661,
      -0.008048061,
      0.008003122,
      -0.015803289,
      -0.025506873,
      -0.018535465,
      0.007700631,
      0.01876645,
      0.028295558,
      -0.0016415458,
      0.0015327354,
      0.032266293,
      -0.013186895,
      0.027558044,
      0.01325565,
      0.0044141957,
      -0.014026239,
      0.017183417,
      0.01383666,
      -0.01197804,
      0.0012221781,
      -0.012320464,
      -0.0059416243,
      -0.012962844,
      0.018384678,
      0.005391575,
      -0.02043902,
      -0.009694948,
      0.0037786958,
      -0.007821212,
      0.020006303,
      -0.00995403,
      -0.0143969115,
      0.0127571365,
      0.012245966,
      0.015601497,
      -0.0020716975,
      -0.00472646,
      0.031018527,
      0.0023279253,
      -0.009790588,
      -0.005094856,
      0.0050831228,
      -0.024310121,
      0.025581788,
      -0.0010635422,
      -0.004128112,
      0.009119939,
      -0.005362304,
      -0.0027378085
    ]
  },
  {
    "id": "genai_cohort_python_05_Decorators_in_python_vtt",
    "content": "Hey there everyone. 2 And welcome to the section 3 of decorators. 4 Now initially I thought I'll 5 keep them as a separate section 6 or a separate module, but then 7 I realized, let's combine them, 8 generators and decorators. 9 Generators we have already studied. 10 Now it's time to go 11 with the decorators. 12 Now, although they sound a little bit 13 similar, but they are not like that. 14 The decorators are simply 15 a way of decorations. 16 Now they could be functional 17 as well, but the primary 18 agenda is decoration. 19 Decoration is something that 20 you do on top of something. 21 For example, when you buy coffee, 22 some people actually sprinkles 23 a little bit of a chocolate 24 powder or coffee on top of it. 25 That's decoration of coffee. 26 Now sometimes it changes the taste 27 a little bit, sometimes it doesn't. 28 Sometimes it adds more value to it. 29 Sometimes it's just 30 a wrapper around it. 31 This is the whole point 32 of having the decorator. 33 It is just a wrapper 34 around your function. 35 And Python gives you 36 actually some superpower. 37 So first let's understand this 38 in the theory part and then 39 it will be super clear. 40 Let's just say you have 41 defined this is my function. 42 How can a square block be a function? 43 Give me on that. 44 This could be super easy. 45 So let's just say this, orange 46 block is our function and we have 47 many such functions and each 48 function does a different job. 49 I really don't want 50 to emphasis on what job. 51 But they are really 52 different functions. 53 So let's just say we have a blue one 54 and we have a pink one as well. 55 Now all of them have 56 their different job. 57 You don't want to change the behavior 58 of a function, but for some reason, 59 I'll just choose one example. 60 But it could be other ways as well. 61 You want to simply log that 62 whenever this function runs. 63 I just want to log that 64 whatever the function has run 65 or some function has run. 66 So what you can do is you can create 67 a simple block just like this. 68 This will be your decorator. 69 And in this decorator you 70 can just move this existing 71 function inside it. 72 That is it. 73 Now whatever you are trying to do, 74 before this function, it 75 can actually execute whatever 76 you want to try to execute. 77 After this, it can also execute. 78 And if sometimes it happens that you 79 are actually going ahead and passing 80 some value inside this function, 81 you can actually go ahead 82 and just pass on these values. 83 So let's just say there are some 84 params, also known as parameters. 85 So you go ahead and pass 86 on these parameters. 87 I'll just go ahead and click this. 88 So if you go ahead and pass 89 on these Parameters. 90 You can just go ahead and do that. 91 You pass on these parameters 92 to this outer function and we are 93 going to, as it is, pass on this 94 exact same parameters, whether 95 the keyword argument or whatever. 96 We are going to just go ahead 97 and pass on to this function so 98 that it executes and behave 99 exactly like what we want to do. 100 So as you have noticed, 101 it's pretty good actually. 102 And this wrapper function, I can 103 just go ahead and take this. 104 That. 105 Hey, I this wrapper function, 106 maybe I want to replace it 107 with something else. 108 So I don't like this. 109 I want to use the blue function. 110 You can just go ahead and use it. 111 That is it. 112 That is your decorators. 113 Exactly like that. 114 Nothing less, nothing more. 115 Let me go ahead and walk you 116 through with some examples so 117 that you actually truly 118 understand what decorators is. 119 We'll do some practice 120 on that as well. 121 We'll definitely create a new folder. 122 Not here for sure. 123 And let's call this one as 09 and. 124 And we will call this 125 one as decorators. 126 And let's call this one as basics. 127 Pretty good basics. 128 Py. 129 Okay, so how does a decorator works? 130 Pretty simple. 131 It's just a function. 132 So I call this one as my 133 decorator to exaggerate. 134 And just make sure that 135 you understand this. 136 What it takes as a parameter, 137 definitely a function. 138 This func doesn't 139 really mean function. 140 It could be Superman, 141 it could be Hitesh. 142 But it's just a name as of now. 143 But. 144 But we expect that what you'll be 145 passing in here will be a function. 146 Remember the diagram. 147 This whole block is a function. 148 And this is further a function 149 that we are passing inside this. 150 What do we do here? 151 We simply go ahead and say 152 that inside this function. 153 Further, I go ahead and define 154 a wrapper just like this. 155 All the decorators are 156 designed like this. 157 And the job of this function is 158 first of all to print something that 159 I will say before function runs. 160 We'll have one more which will say 161 after function runs. 162 And just in between, whatever 163 the function I'm accepting as 164 a params, I'll just execute that. 165 That is it. 166 That is your whole thing. 167 One thing that we also prefer 168 to do in these kinds of things, we 169 go ahead and simply say I want 170 to return, the wrapper as well. 171 So whatever the wrapper is going 172 on, that's getting returned. 173 Now in order to use this 174 function, this is a very special 175 function that you're writing 176 that you are taking a function 177 inside you and you are just 178 executing it and returning the 179 Outer wrapper one. 180 There is a special way 181 of how you use it. 182 You put up an at the rate sign 183 and then you simply say mydecorator. 184 That is it. 185 No parenthesis, nothing is just 186 a name with the at the rate this 187 actually says that hey, whatever 188 is coming up just in the next line 189 will be wrapped up. 190 So I'll just go ahead and say def. 191 Let's just call this one 192 as greet basic function. 193 And I go ahead and simply 194 print this print. 195 I will say hello from decorators 196 class from chai code. 197 There we go. 198 So let's go ahead and run this. 199 I'll open up an integrated terminal 200 just right up here will close 201 the rest of the ones, even this one. 202 I'll again start an integrated 203 terminal and let's 204 go ahead and run this. 205 Let's use Python 3. 206 Python 3 and then the basics 1. 207 And We forgot to call the method. 208 We forgot that. 209 Totally forgot that. 210 Greet. 211 Run this. 212 And We are going to run this. 213 Now notice here, since we have this 214 decorator, this says before 215 the function runs, whatever I want 216 to do and after the function runs 217 and believe it or not, that is it. 218 That is your decorator. 219 The moment you remove this line 220 that means hey, I'm not decorating 221 this function with anything. 222 Nothing sprinkled on top of it. 223 There we go. 224 Basics. 225 If I go ahead and decorate 226 it back with my decorator, 227 it works just like before. 228 So this is the whole 229 point of having it. 230 But there is a problem, 231 there is a small problem with this. 232 So if I go ahead and want to print 233 out something more, let's just 234 say if I want to print this like 235 this and I say I want to print 236 this greet not as a function 237 execution, but I want to know 238 this name. 239 So I have a dunder name for this. 240 What happens when I try 241 to go ahead and print this? 242 Now notice here it says wrapper. 243 Why wrapper? 244 Our function name was greet 245 because technically what we are 246 returning back is actually a repr. 247 So this is a common syntax 248 and common mistake. 249 Not mistake, but this is a common 250 thing which is done that hey, 251 the name of the function changes. 252 Not only the name, couple 253 of other metadata about 254 the function also changes. 255 By the way, if you know metadata is 256 about is like data about the data. 257 For example you have a file, 258 the file actual content, whichever 259 the Movie or the MP3, you are 260 listening, that's actual content. 261 But is it an MP3? 262 Is it a wave, is it 5 minute 263 long, is it 2 minutes 264 long that all is metadata? 265 So this is what we have 266 now Is there a solution for it? 267 Yes, this is where I first time 268 introduce you to the third party 269 or actually built in Python 270 libraries, to be honest. 271 So from we have something 272 known as func tools and from 273 this we are going to import 274 something known as wraps. 275 What does this wrap does? 276 The whole job of this wraps is 277 to make sure to place 278 preserve the metadata. 279 So if I go and just come up here 280 and just use at the rate and simply 281 say wraps just like that. 282 And by the way, ignore this 283 Windsurf all this line. 284 I know this might be bothering 285 you, but this actually comes 286 up from my AI plugin. 287 You totally, totally can ignore it. 288 I should have said it earlier. 289 I'll probably make a video, saying 290 that, hey, please ignore this line. 291 This is just generated. 292 It will not appear 293 in your code editor. 294 I should say this earlier. 295 All right, all right. 296 So once I go ahead and do this, 297 all I have to do is this is it. 298 Once you have this wraps again, 299 the way how you use it, 300 it's not truly a decorator. 301 So you use it like this and then 302 you pass on whatever 303 the function you're passing. 304 You just have to pass it here. 305 This is the syntax. 306 Always keep this in mind. 307 And what this small syntax is 308 going to do is if I run this 309 program again, notice here 310 it's preserving the name. 311 It's not wrap anymore, 312 it's actually greeting. 313 That is it. 314 And trust me, this, is all 315 about the decorators. 316 I know people have spent like 30 317 minutes, 20 minutes, one hour 318 on the decorators, but there is 319 nothing more to decorators. 320 It's just a wrapper function which 321 takes your function, executes that 322 and probably adds some more to it. 323 Probably just the printing statement. 324 Probably checks more things 325 in your function. 326 Inject more values, 327 extract more values. 328 There could be hundreds 329 of things, but the core 330 foundation is this is it. 331 Let's go ahead and catch 332 up in next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 Decorators in python.vtt",
      "originalPath": "genai-cohort/python/07 Chapter Subtitles/05 Decorators in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.015424059,
      0.005005886,
      0.03308132,
      -0.057867665,
      -0.0010216354,
      0.00023239045,
      0.020197991,
      0.028525118,
      0.0014271621,
      0.009352999,
      -0.006638472,
      -0.011469793,
      -0.0002674004,
      0.031220376,
      0.12587255,
      0.022527203,
      -0.009275577,
      0.0070306724,
      0.0039891293,
      -0.017463017,
      -0.0050564115,
      0.0055792886,
      0.0068656523,
      -0.00848168,
      0.00938207,
      0.0015946442,
      0.0030758115,
      0.0039392794,
      0.02152053,
      -0.01498625,
      -0.017774804,
      0.0185604,
      0.0039696745,
      0.023552159,
      -0.0016424478,
      0.015992634,
      0.007914404,
      0.0060227085,
      -0.018524885,
      0.014170916,
      -0.021130301,
      -0.012671542,
      0.0131423855,
      -0.007886915,
      0.031957004,
      -0.020814287,
      0.0039959964,
      -0.008641909,
      0.01085994,
      0.025474975,
      0.009004191,
      0.009312275,
      -0.0010238207,
      -0.18824403,
      0.0018085163,
      -0.0015767311,
      -0.018565392,
      0.013617721,
      0.015647208,
      -0.007457779,
      -0.025869902,
      0.014131152,
      -0.027744457,
      -0.015248476,
      -0.020018583,
      -0.028435268,
      0.022563105,
      -0.020821473,
      0.00008457023,
      0.006450115,
      0.027826725,
      0.017796766,
      -0.018579056,
      -0.0061396305,
      -0.021880541,
      -0.00096405833,
      0.011551303,
      -0.012858866,
      0.0119268065,
      0.005637947,
      0.0071023735,
      -0.0016978884,
      -0.00066595495,
      -0.009544531,
      0.028239831,
      0.008596448,
      -0.035244856,
      -0.0014117652,
      0.011464113,
      -0.0037443382,
      -0.012813669,
      0.019415379,
      -0.0047742226,
      0.017740402,
      -0.017345564,
      -0.011298475,
      -0.022023775,
      0.004423344,
      -0.024871148,
      -0.00531816,
      0.0036599778,
      -0.0030812991,
      0.0037529515,
      -0.014244908,
      0.0044251094,
      0.021371221,
      -0.0029823266,
      0.0029772115,
      -0.012324895,
      -0.011759341,
      -0.0016439579,
      -0.006554077,
      0.0068744547,
      0.011504885,
      0.012892889,
      -0.18061948,
      0.02684161,
      -0.0056305267,
      -0.009461864,
      0.010507344,
      -0.006155126,
      0.012919165,
      0.031109577,
      0.000068018504,
      -0.032381248,
      0.016535,
      -0.013231108,
      0.034001466,
      0.0039198287,
      -0.0008345446,
      -0.027574634,
      -0.016615769,
      0.015150474,
      0.028962674,
      -0.0066739344,
      0.035302524,
      -0.01025465,
      0.0028209114,
      -0.01669911,
      -0.0057289633,
      -0.020487467,
      0.012305888,
      -0.008852538,
      0.040485002,
      0.031498015,
      -0.00030668778,
      -0.008270919,
      -0.0047042593,
      -0.029496156,
      -0.03115385,
      0.006092985,
      -0.02399565,
      0.0024588848,
      -0.0017246447,
      0.022493914,
      -0.008787772,
      0.0006113439,
      -0.011022558,
      0.012837859,
      -0.021080654,
      -0.0027635007,
      0.01744982,
      0.0007758949,
      0.003528293,
      -0.011400874,
      -0.0019368406,
      -0.0130029665,
      0.0054307384,
      0.01694445,
      0.016043078,
      0.0019697032,
      -0.01553015,
      -0.005102656,
      0.009507745,
      -0.0055150725,
      -0.015450656,
      -0.0038488598,
      0.0072303666,
      0.018569473,
      -0.011967941,
      -0.0015587899,
      -0.0031998772,
      -0.010443918,
      -0.0028582327,
      0.008629255,
      0.018299598,
      -0.017273296,
      0.0034814135,
      0.03006775,
      -0.005719339,
      0.00547616,
      0.003894846,
      0.020416044,
      0.031136412,
      0.011550086,
      -0.015264174,
      -0.0076821623,
      -0.004167963,
      -0.013168448,
      0.0041415123,
      0.022008868,
      -0.008174215,
      0.016544722,
      -0.026279904,
      0.025164131,
      -0.002340578,
      0.014748313,
      -0.020955058,
      0.0151729835,
      0.018733608,
      -0.01249272,
      -0.015632413,
      -0.00284783,
      0.0024696665,
      0.010364421,
      0.0058753653,
      0.010318353,
      -0.028432636,
      -0.007788792,
      0.0078119948,
      0.024549138,
      0.0050678044,
      -0.0017053874,
      0.013238629,
      0.003299824,
      0.00670232,
      -0.011592681,
      -0.002960636,
      0.008951944,
      0.00019179082,
      0.023063552,
      -0.0030672892,
      -0.017079627,
      0.0033388713,
      -0.011266272,
      0.00895205,
      -0.00046028857,
      0.012940267,
      0.0090471385,
      -0.0013413375,
      -0.01595003,
      -0.023378043,
      -0.00895518,
      0.017588431,
      0.011838315,
      0.006585479,
      -0.013572295,
      0.0029124077,
      0.000265555,
      -0.020722516,
      -0.018581705,
      -0.0017453972,
      0.014849778,
      -0.030791465,
      -0.0017068918,
      -0.019866148,
      -0.031815276,
      -0.0052309767,
      -0.004722977,
      0.0039531165,
      -0.0058760922,
      -0.0055584717,
      -0.05004624,
      0.0057914355,
      0.019520165,
      0.0088243475,
      -0.0035287696,
      0.030499185,
      -0.011614483,
      0.010092764,
      0.019961009,
      0.016367381,
      0.012658643,
      -0.008400009,
      -0.012400761,
      0.0019813415,
      -0.08578865,
      0.03923237,
      0.028090978,
      -0.018535934,
      -0.0035611587,
      0.0073821237,
      -0.03498845,
      0.008371742,
      0.00928428,
      0.014643488,
      0.012747466,
      -0.01238825,
      0.031473197,
      -0.019992381,
      -0.0092587685,
      0.01492431,
      0.019866394,
      -0.009472416,
      0.011636738,
      -0.027930185,
      0.012243046,
      0.020442065,
      -0.0040117535,
      -0.01698738,
      0.016897092,
      -0.00070236356,
      -0.0154149495,
      0.030159121,
      0.03834945,
      0.021574084,
      0.0071739205,
      0.024366472,
      -0.0008931022,
      -0.0016656542,
      0.0056948448,
      0.01812982,
      -0.0014308282,
      -0.011706724,
      -0.003964812,
      -0.01276483,
      0.009211435,
      -0.003766644,
      0.036621463,
      0.027684743,
      0.028245455,
      0.018273128,
      -0.0036937841,
      0.0061889533,
      -0.023254596,
      -0.0061254706,
      -0.009860713,
      -0.0075300583,
      0.016976248,
      -0.020145517,
      0.02401504,
      0.006141388,
      0.0007480041,
      -0.0051825237,
      0.021204093,
      0.029382199,
      -0.01812993,
      -0.015875239,
      0.017147925,
      -0.0044276617,
      0.012833343,
      -0.017031822,
      0.010829516,
      -0.001698521,
      -0.020406634,
      0.011672814,
      0.021654353,
      -0.005184654,
      0.009244358,
      -0.01647963,
      0.0058084717,
      -0.01545224,
      0.020903954,
      0.0067648604,
      -0.021386966,
      0.014074816,
      0.007572377,
      -0.02703737,
      0.025737477,
      0.009032387,
      -0.007381875,
      0.005827176,
      -0.004973166,
      0.004532664,
      0.0052896636,
      -0.005232799,
      0.019920522,
      0.011779604,
      -0.0048294417,
      0.0148990685,
      -0.016247537,
      0.0067536593,
      -0.011881358,
      -0.03439849,
      -0.014403018,
      0.019611673,
      -0.019393476,
      -0.00731178,
      -0.02323304,
      0.008557347,
      -0.016232587,
      0.013999748,
      -0.035998207,
      -0.007134069,
      -0.0054959203,
      -0.029514128,
      0.0039058484,
      0.008399404,
      -0.01958275,
      -0.016840162,
      -0.007126555,
      0.012347041,
      -0.012487252,
      0.018861432,
      0.00490744,
      -0.029137328,
      0.0105627775,
      -0.016626827,
      -0.03258474,
      0.012642751,
      -0.014277345,
      0.015125472,
      -0.0049004187,
      -0.011421682,
      -0.008008313,
      -0.02579947,
      -0.022409396,
      0.02004546,
      -0.023454154,
      0.0020285656,
      -0.013268095,
      -0.019225296,
      0.012941154,
      0.019782225,
      0.011046309,
      -0.01506319,
      -0.014681578,
      -0.0077016363,
      0.024534987,
      0.0044569443,
      -0.00009643154,
      0.027687173,
      -0.00818794,
      -0.01294133,
      0.004265215,
      -0.024531208,
      -0.035784345,
      -0.0016515555,
      0.0075854165,
      0.0037155862,
      -0.012119325,
      0.012116922,
      -0.0022635383,
      0.0034136996,
      -0.012006241,
      -0.041549616,
      0.004567791,
      0.006373843,
      -0.028216807,
      0.011643536,
      0.03468002,
      0.020059904,
      0.016258173,
      -0.000035760633,
      -0.009228607,
      0.008860744,
      0.0005783519,
      -0.015947776,
      -0.045877796,
      -0.021968788,
      0.024473356,
      0.0027878028,
      0.009030792,
      -0.012666944,
      0.021927789,
      0.023435693,
      0.01438743,
      -0.0074988757,
      -0.020093486,
      0.019618597,
      -0.009134128,
      0.012840792,
      0.01653921,
      -0.0104877865,
      -0.033230685,
      0.0151030505,
      -0.008114465,
      -0.0034255148,
      -0.011716921,
      0.021326968,
      -0.0049792887,
      0.0117421895,
      -0.00641587,
      0.006027067,
      -0.0043946826,
      0.02133659,
      -0.00898495,
      -0.018670786,
      0.00041073942,
      -0.014595764,
      0.020718182,
      -0.018710228,
      -0.001644236,
      0.0064470796,
      0.0015737899,
      0.009435481,
      0.016720006,
      0.004343562,
      -0.007924984,
      0.0048447265,
      0.015487995,
      0.031024804,
      0.0069269026,
      -0.016075907,
      -0.03368024,
      -0.0039992617,
      0.01291487,
      -0.011844595,
      -0.007620977,
      -0.024094418,
      0.016676562,
      -0.015898265,
      -0.020976208,
      0.008618762,
      0.010256844,
      -0.0010145714,
      -0.008513293,
      -0.0027996092,
      -0.009146524,
      -0.0028828953,
      -0.015789244,
      -0.015308815,
      0.011968566,
      0.017518288,
      -0.02397402,
      0.016016232,
      0.023366952,
      -0.010987723,
      -0.005844002,
      -0.0066120275,
      0.006961677,
      0.007235461,
      0.02676064,
      0.009989057,
      -0.020438677,
      0.003207643,
      0.002028391,
      0.01788789,
      -0.013584267,
      -0.0034287593,
      0.00021759949,
      0.023423849,
      -0.003283246,
      0.003124486,
      -0.010419981,
      -0.0028101334,
      0.016996928,
      0.014094368,
      0.004039147,
      -0.009085564,
      -0.009169002,
      -0.015675966,
      -0.014219925,
      -0.015190649,
      0.015987394,
      -0.12793283,
      -0.0021773148,
      -0.024550082,
      0.008859422,
      0.000022982838,
      -0.00327997,
      0.00003062997,
      -0.017787168,
      0.01191946,
      -0.005755823,
      0.03799055,
      0.0082793,
      0.002199771,
      -0.008766423,
      0.002385251,
      -0.02639872,
      0.006082231,
      0.017350085,
      0.019531963,
      0.01562429,
      -0.018056527,
      -0.0011721075,
      -0.005845879,
      -0.005531259,
      -0.02074328,
      -0.009273484,
      0.014064203,
      -0.013682141,
      0.0021552152,
      -0.02102342,
      -0.01669106,
      0.006072205,
      -0.016848445,
      -0.0021286763,
      0.020998077,
      0.0023006438,
      -0.017491655,
      -0.00031684723,
      0.011666811,
      0.012515428,
      -0.009824106,
      -0.015562778,
      0.032965623,
      0.014410237,
      -0.023845892,
      0.032032534,
      0.017753694,
      -0.0108219115,
      0.00045339376,
      0.05046551,
      -0.022529323,
      -0.0066742552,
      0.008773951,
      -0.032079726,
      -0.01064065,
      0.0006673684,
      0.01701123,
      -0.018662388,
      -0.017992677,
      -0.008759477,
      0.0038916976,
      0.0075808875,
      -0.0012749286,
      0.023986014,
      -0.008440984,
      0.005568436,
      0.022750037,
      0.0013795245,
      -0.0068026143,
      -0.022835586,
      -0.013441112,
      -0.0008528732,
      -0.0051259534,
      0.02713926,
      0.027726937,
      0.025688969,
      -0.013008358,
      0.008985466,
      -0.011525866,
      0.0012785506,
      -0.03591008,
      -0.0106515065,
      -0.051797923,
      -0.01489849,
      0.0010975752,
      -0.024937557,
      0.011004668,
      0.013971343,
      -0.0031611486,
      0.0022451398,
      -0.003579286,
      -0.0051831272,
      -0.022894165,
      -0.000286048,
      0.0183411,
      0.0011521879,
      -0.01758215,
      -0.0075050993,
      -0.008911013,
      -0.011686758,
      -0.018270988,
      0.015157196,
      -0.0045817755,
      -0.006844782,
      -0.008980772,
      -0.024058938,
      0.032882527,
      0.026628526,
      -0.001277421,
      -0.002211049,
      -0.021866256,
      -0.00070939044,
      0.0017044104,
      -0.1458865,
      -0.030754577,
      0.009513896,
      -0.000692482,
      0.0070391204,
      0.010450165,
      -0.024387872,
      -0.014969024,
      -0.009631024,
      0.0027648846,
      0.009535321,
      -0.012284374,
      -0.015230351,
      -0.008774554,
      0.013119239,
      0.12654401,
      0.0039616986,
      0.0023602336,
      0.0014649028,
      0.005535112,
      -0.010619795,
      0.005379471,
      -0.011977058,
      0.015803957,
      -0.0069078514,
      -0.023363505,
      -0.0026459442,
      -0.009020343,
      0.008071546,
      0.005729657,
      -0.00017422433,
      -0.021570705,
      -0.0034110877,
      0.009712389,
      0.022017168,
      -0.015496452,
      0.004095879,
      0.0034051747,
      0.0070367074,
      -0.010619684,
      0.01275191,
      0.006635155,
      0.002187016,
      -0.00013899307,
      0.014473059,
      0.008164035,
      -0.027720561,
      -0.013678531,
      0.014093281,
      0.012584643,
      -0.0009674399,
      -0.063348286,
      0.015488067,
      -0.017005647,
      -0.0028780827,
      0.01225319,
      -0.00051892403,
      0.0021032197,
      0.007344084,
      0.0066617704,
      0.017896453,
      0.0008985932,
      -0.01020812,
      -0.0005623624,
      -0.0054197847,
      0.0020817532,
      -0.0011078104,
      0.027549235,
      0.006961074,
      -0.018444074,
      0.016838849,
      0.011008365,
      -0.00095699006,
      0.0076268627,
      -0.011534389,
      -0.013601211,
      0.0013450081,
      0.019124573,
      0.0037501599,
      -0.012627085,
      -0.0046842713,
      0.0034032962,
      -0.015538161,
      -0.015165013,
      0.00850059,
      0.0059400047,
      0.00890319,
      0.028931735,
      -0.011058113,
      0.0062748645,
      -0.0054831603,
      -0.0019808188,
      -0.016336696,
      0.027778972,
      -0.0065036877,
      0.004277616,
      0.0140748555,
      -0.011899308,
      0.03486814,
      -0.007570658,
      0.0003707598,
      -0.012829942,
      -0.01740763,
      -0.019855145,
      0.01540878,
      0.0030319048,
      -0.0052548656,
      0.00876673,
      -0.0064401682,
      -0.0013320012
    ]
  },
  {
    "id": "genai_cohort_python_06_Build_a_logger_with_decorator_vtt",
    "content": "There are variety of use cases 2 of decorators, and to be honest, you 3 actually learn about the decorators 4 as you use them more in Django. 5 You will be using a ton of them 6 in libraries like fastapi. 7 You actually will be 8 using a lot of them. 9 But there are certain decorators 10 that you want to make them on your 11 own and that's how you learn them. 12 So in this video we are going 13 to build a simple logging decorator. 14 It's a fun exercise. 15 You, will absolutely love this. 16 Let me share the screen with you. 17 So let me take you directly 18 on the code part. 19 We don't need any theory for this. 20 Let's call this one as 02. 21 This one will be 22 logging decorator py. 23 Of course. 24 So how does a logging decorator work? 25 It's actually super simple. 26 The first basic steps 27 will always remain same. 28 So we'll always go ahead and say 29 from, function tools, let's go 30 ahead and import the wraps. 31 It should be, oh, my bad. 32 It should not be 33 imported, should be from. 34 All right, good enough. 35 Now let's just say we want 36 to call this one as logactvt. 37 That's the first part of it. 38 And we'll take import as 39 a function, call it as func. 40 Feel free to call it anything else. 41 And the job one is to take this 42 wraps and take this function so that 43 we have all the values preserved. 44 Then we define our wrapper function. 45 It doesn't really need to be called 46 as wrapper, but wrapper makes sense. 47 So we have the wrapper. 48 Now here's the interesting part. 49 This function might also 50 accept some arguments 51 or parameters in that case. 52 So there could be arguments, or 53 there could be key value 54 arguments or keyword arguments. 55 I don't know which one are coming up. 56 So in that case, what you do is 57 you take the wrapper and you 58 simply go ahead and say, hey, 59 whatever, I don't know the 60 numbers of it, whatever the 61 args are coming in, I'll 62 happily accept that. 63 I will also go ahead and accept 64 all the keyword orgs 65 that are also coming in. 66 I'll take them as well. 67 And then I'll just go 68 ahead and execute you. 69 I'll return 70 some interesting stuff as well. 71 But this function will execute 72 and will return you the results. 73 So I'll just go ahead and say, 74 hey, function, just execute that. 75 And also make sure you don't forget 76 to take your parameters. 77 So I'll just go ahead 78 and say args just like that. 79 And I will also go ahead 80 and say take your keyword args. 81 There we go. 82 This is all good. 83 And finally we go ahead 84 and say return the result. 85 And this is what we result here. 86 And here also we go ahead 87 and don't worry, I'll show you 88 the working part as well. 89 But this is not all it 90 we have done this. 91 The job is actually done. 92 You have seen how the keyword 93 arguments can be taken because here 94 you are taking the whole function 95 along with every detail that 96 comes up here in the wrapper. 97 Whatever the values are being passed 98 on can be actually imported up here. 99 Because this function actually 100 has a linking direct. 101 And when you're calling the function 102 you're further down the line 103 passing on these value here. 104 So super simple, super easy. 105 But the only thing that we haven't 106 done is we haven't said which 107 function is calling and which 108 function has finished calling. 109 So just before it calls let's add 110 a print statement and the print 111 statements will be a formatter 112 string which will say calling. 113 And then we'll use a function name. 114 So what's our function name? 115 Super easy. 116 We can just call this func 117 dot underscore, underscore name, 118 underscore, underscore or 119 in short dunder. 120 So this function, whatever is 121 there, it actually comes up. 122 We simply call that. 123 Let's go ahead and say this time 124 this one will be finished. 125 And our library is 126 actually interesting one. 127 So it actually includes some of the. 128 The tick as well, not rake. 129 There we go. 130 So it actually uses a tick 131 that hey, finished calling 132 the function and once it 133 calls let's use another one. 134 So this one looks good. 135 So the rocket is actually calling 136 at least makes it interesting. 137 So how we're going to use 138 this, that's interesting. 139 You simply go ahead 140 and say logactivity. 141 That is it. 142 Now you can define the function. 143 Let's just say our function is 144 brewing chai. 145 You thought we were going 146 to leave the chai? 147 No, absolutely not. 148 And we simply go ahead and pass 149 on whatever the type we are getting. 150 Maybe we can pass on more argument. 151 No problem there. 152 I will just go ahead and print 153 with a formatted 154 statement that says brewing. 155 Should have written that correctly. 156 Brewing. 157 And then whatever the type, 158 you give me chai. 159 All right, good enough. 160 And let's not forget 161 to call this so brew chai. 162 And we're going to call masala chai. 163 All right, pretty interesting. 164 And hope you have learned something 165 about this keyword. 166 This is little bit awkward at first, 167 but eventually you get the habit 168 of it that this is how I write it. 169 Let's go ahead and run this. 170 This will be Python 3 we'll 171 be using 02 and there we go. 172 So notice here any function you 173 pass on into this one with 174 whatever the data type it actually 175 goes ahead and work with that. 176 So notice here it calls the brewchai 177 and we have designed a really 178 pretty custom logging for us. 179 Now the advantage of this if 180 I change this one let's just 181 say instead of the type I 182 also go ahead and say milk. 183 The default value is going to be 184 a simple string that says no 185 and I can just pass on more 186 values to it brewing chai and 187 milk status and then we go 188 ahead and simply print out the 189 milk here. 190 So notice here we have changed the 191 function without worrying about I 192 don't really care what my wrapper 193 does, I just focus on building my 194 function itself and we simply 195 accept more parameters now even the 196 keyword arguments Pretty 197 interesting isn't it? 198 This is actually really fun 199 and this is how in general you 200 build the loggers in decorator. 201 Hope you have enjoyed this. 202 Do rate us and let's catch 203 up in next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "06 Build a logger with decorator.vtt",
      "originalPath": "genai-cohort/python/07 Chapter Subtitles/06 Build a logger with decorator.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.007292874,
      0.011358424,
      0.02670432,
      -0.059423286,
      0.009851706,
      -0.02079863,
      0.008589757,
      0.04187245,
      0.01588546,
      -0.012019079,
      -0.009913329,
      -0.023176996,
      -0.0006382193,
      0.033050254,
      0.114355624,
      0.006557386,
      -0.0011455769,
      0.010775505,
      -0.0016563449,
      -0.018787406,
      -0.01127041,
      0.0024721066,
      0.011972325,
      -0.017645933,
      0.006785186,
      0.0111422315,
      0.018036243,
      -0.004503735,
      0.0139904525,
      -0.014098394,
      -0.027859572,
      0.009744878,
      0.017895967,
      0.023800049,
      -0.004670649,
      0.0064537,
      0.0008738451,
      0.0007830847,
      -0.0180653,
      0.011244546,
      -0.014138886,
      -0.0072519328,
      0.011558226,
      -0.0090894,
      0.0092088,
      -0.0024453513,
      -0.0036501433,
      -0.0052842884,
      -0.00017942277,
      0.035024047,
      0.01902434,
      0.0031481993,
      -0.0065442747,
      -0.17691946,
      0.019108675,
      0.0124066295,
      -0.023338739,
      0.01502212,
      0.0402671,
      0.002748647,
      -0.025989482,
      0.0057371464,
      -0.03741385,
      -0.009896289,
      0.0159327,
      -0.037564006,
      0.009325482,
      -0.023142409,
      -0.00604223,
      -0.010689747,
      0.03393409,
      0.019517407,
      -0.019862317,
      -0.012603309,
      -0.025656117,
      -0.030056035,
      -0.006390662,
      -0.013846211,
      0.006538668,
      0.019935045,
      0.024324846,
      -0.015389026,
      -0.0067710956,
      -0.005560657,
      0.020230696,
      0.022014895,
      -0.015364127,
      -0.0025573364,
      0.010970117,
      -0.008482231,
      -0.015229281,
      0.024331363,
      0.00048220935,
      0.020033494,
      0.007185233,
      0.0053439653,
      -0.0105074635,
      -0.0030730416,
      -0.012411575,
      -0.0035260199,
      -0.006829795,
      0.0008198996,
      0.009482947,
      -0.011581038,
      -0.0074405326,
      0.00374711,
      -0.0064183623,
      0.0007549248,
      -0.011804834,
      -0.012850876,
      -0.006855508,
      -0.014847997,
      -0.0056531057,
      0.008795313,
      0.012080818,
      -0.16796865,
      0.027027173,
      -0.02161029,
      -0.0025920877,
      0.008598908,
      0.0028004781,
      0.019011287,
      0.021525748,
      -0.0027754577,
      -0.039799135,
      0.02567982,
      -0.011937774,
      0.02108263,
      0.020756848,
      -0.0026429922,
      -0.023609363,
      -0.014094572,
      0.014775307,
      0.021215975,
      -0.023106445,
      0.023077661,
      -0.010108177,
      0.0011002143,
      -0.0037671705,
      0.023410121,
      0.0017563581,
      0.0072175064,
      -0.010216683,
      0.008239445,
      0.013506695,
      -0.018128786,
      0.0051780776,
      -0.014394836,
      -0.033947073,
      -0.021682277,
      0.02629939,
      -0.024759699,
      0.008959975,
      -0.0051500266,
      0.023555588,
      -0.010672679,
      0.0013137091,
      -0.0139024835,
      0.008750543,
      -0.004033935,
      -0.00500108,
      0.03495972,
      -0.00083748106,
      0.018629102,
      -0.013938827,
      -0.02099926,
      -0.027716558,
      -0.004935717,
      0.0117093045,
      0.017265176,
      -0.011628305,
      -0.0327588,
      -0.004889049,
      0.00938762,
      -0.001533993,
      -0.01811926,
      -0.0038951754,
      -0.012803674,
      0.010704417,
      -0.026097799,
      0.013704516,
      -0.011154924,
      0.0068829944,
      -0.013464203,
      -0.022579057,
      0.018783476,
      -0.029438524,
      -0.010486952,
      0.020730747,
      -0.017649867,
      0.0038582312,
      0.0058296276,
      0.008640793,
      0.01998078,
      0.003859565,
      -0.008911672,
      -0.0116932085,
      -0.005145366,
      -0.0044454844,
      0.005247002,
      0.028627641,
      -0.0035143108,
      0.014785905,
      -0.0080221165,
      0.03899008,
      0.002556113,
      0.019001892,
      -0.026916811,
      0.017754374,
      0.01602404,
      -0.009336326,
      -0.007824204,
      -0.00893771,
      -0.015513756,
      0.006439906,
      0.014364817,
      0.0109220315,
      -0.023324091,
      0.001247134,
      0.0083283605,
      0.018579008,
      -0.008125803,
      -0.0038602704,
      0.013349741,
      -0.0074951495,
      -0.0015202598,
      -0.0023309535,
      0.0010264856,
      0.00983813,
      0.0021500066,
      0.029949103,
      -0.00744085,
      -0.013548954,
      -0.009548859,
      -0.0065197917,
      0.007285348,
      -0.0037522477,
      0.0264467,
      0.012651209,
      0.0055145156,
      -0.010889717,
      -0.0133147305,
      -0.015312301,
      0.015012323,
      0.00038599467,
      0.012080177,
      -0.00410838,
      -0.005255554,
      -0.006833682,
      -0.01770662,
      -0.019685222,
      -0.011653295,
      0.0061148168,
      -0.021009043,
      0.010749003,
      -0.017403359,
      -0.02859517,
      -0.011463916,
      -0.0005914337,
      0.023538018,
      -0.0059303176,
      -0.0112173185,
      -0.04128038,
      0.00031059212,
      0.029089348,
      0.007896951,
      -0.011284741,
      0.025020363,
      -0.02039255,
      -0.008592904,
      0.0018546624,
      0.005419545,
      0.0034845877,
      -0.019484792,
      -0.015176428,
      -0.0152472295,
      -0.082648695,
      0.046374355,
      0.009881461,
      -0.02048316,
      -0.0035961878,
      -0.0061701587,
      -0.021078406,
      0.0122843785,
      -0.003334151,
      0.011779014,
      -0.0057296962,
      -0.013807363,
      0.01505419,
      -0.023641152,
      -0.025854714,
      0.002772262,
      0.0024138647,
      -0.024217512,
      0.012148685,
      -0.017065084,
      0.0036985597,
      0.0070757875,
      -0.013570843,
      -0.00438783,
      0.021159638,
      0.022116803,
      -0.00365218,
      0.030756209,
      0.010186213,
      0.014273329,
      -0.0018428828,
      0.016734943,
      -0.005656579,
      -0.019468375,
      0.016536418,
      0.01666436,
      -0.0061982675,
      -0.0031910501,
      0.017512681,
      -0.000099485536,
      0.024300322,
      -0.002023767,
      0.041936275,
      0.021218514,
      0.002668119,
      0.007725129,
      0.008466602,
      0.010117817,
      -0.010045502,
      -0.0071731624,
      -0.025961509,
      -0.009275211,
      0.015614916,
      -0.012521628,
      0.026445908,
      0.018035272,
      0.011527174,
      -0.016193917,
      0.013986085,
      0.029988555,
      -0.009563923,
      -0.0017328301,
      0.027664281,
      0.00007566598,
      -0.0015917831,
      -0.012018312,
      0.011690945,
      0.0053689913,
      -0.028845116,
      0.0081833545,
      0.030340394,
      0.0016651534,
      0.011162963,
      -0.03557199,
      0.010652743,
      0.009493025,
      0.017569182,
      -0.010030621,
      -0.016371323,
      0.006286825,
      0.0066933646,
      -0.008485106,
      0.010827125,
      0.022094443,
      -0.010577405,
      0.008888286,
      0.0012251438,
      0.0014296276,
      -0.007252736,
      -0.012863469,
      0.013517001,
      0.016925588,
      -0.00029364787,
      0.011879244,
      -0.017440643,
      0.018635567,
      -0.016318617,
      -0.013658216,
      -0.014664797,
      0.007951139,
      -0.036403842,
      -0.014929559,
      -0.03519844,
      0.006981441,
      -0.011521699,
      -0.0007303193,
      -0.039910108,
      -0.012215633,
      0.0019845718,
      -0.035542123,
      0.03198746,
      -0.012044847,
      -0.027199581,
      -0.0078120697,
      -0.00337669,
      0.022843769,
      -0.019200856,
      0.010610346,
      0.0058813817,
      -0.010267218,
      -0.014869734,
      -0.012940273,
      -0.021633765,
      0.012564736,
      -0.013670805,
      0.012984946,
      -0.01689567,
      0.0081595,
      -0.023487967,
      -0.031570736,
      -0.020277606,
      0.011785003,
      -0.02652631,
      0.007134501,
      -0.015247233,
      -0.018834637,
      0.022270195,
      0.016646251,
      0.0018799297,
      -0.009151348,
      -0.014967081,
      0.013259078,
      0.008569173,
      -0.010367695,
      0.001723727,
      0.020980623,
      -0.014507115,
      -0.008363442,
      0.004524645,
      -0.022935292,
      -0.022395493,
      -0.010017456,
      0.0030889532,
      -0.007329769,
      -0.01796234,
      0.01763534,
      -0.013114839,
      0.013220491,
      -0.016083613,
      -0.039385084,
      -0.01046056,
      -0.0036926065,
      -0.01322124,
      0.0028006167,
      0.011758741,
      0.02307193,
      0.005937139,
      0.0006763909,
      -0.005439439,
      0.007565423,
      -0.009873728,
      -0.003103845,
      -0.02487509,
      -0.023065768,
      0.005790936,
      -0.006455823,
      0.008621911,
      -0.005024469,
      0.012831285,
      0.019460095,
      0.0055537983,
      -0.006773672,
      -0.023697924,
      0.0153495185,
      -0.009349473,
      -0.0035375361,
      -0.00044982147,
      0.0110394545,
      -0.030169923,
      0.009484163,
      0.004886318,
      0.0004250892,
      -0.010567976,
      0.012894438,
      0.0015731576,
      0.003674087,
      -0.01661742,
      0.018218616,
      -0.008704352,
      0.0088517675,
      0.0079889335,
      -0.008248001,
      -0.0006459767,
      0.010765497,
      0.030876929,
      -0.011343749,
      0.015634872,
      0.009719186,
      0.0040885345,
      0.02901353,
      0.009956383,
      0.0133634275,
      0.017944604,
      -0.0054577063,
      0.01613736,
      0.03025277,
      -0.0045697587,
      -0.017461102,
      -0.042069744,
      -0.008139931,
      0.0011928567,
      0.00081324857,
      -0.003668637,
      -0.009844705,
      0.012077514,
      -0.010542861,
      -0.008560749,
      0.0022872172,
      0.011338176,
      -0.00007616493,
      -0.009552363,
      0.010091079,
      -0.014767714,
      -0.0009254916,
      -0.009096397,
      -0.013415415,
      0.021749496,
      0.013746646,
      -0.007929524,
      0.03565966,
      0.011919223,
      -0.0009711195,
      -0.025593527,
      -0.024802262,
      0.025749754,
      0.008213835,
      -0.0005903357,
      0.017488856,
      -0.0067987815,
      -0.004682875,
      -0.0057064225,
      0.011724876,
      -0.013491399,
      0.007080681,
      -0.00932353,
      0.037952356,
      -0.020702388,
      0.0018754608,
      -0.013956991,
      -0.0028760487,
      0.0248109,
      0.016429331,
      0.018096626,
      0.0115091195,
      -0.013470852,
      -0.015096521,
      -0.014802087,
      -0.012714738,
      0.011637525,
      -0.13192451,
      0.013735789,
      -0.03738575,
      0.01681532,
      -0.0057059503,
      -0.004308413,
      0.009499573,
      -0.021769779,
      0.024655227,
      0.006253181,
      0.03729961,
      0.01890606,
      -0.0036583815,
      -0.014385025,
      0.0018685646,
      -0.018040627,
      -0.0069700996,
      0.0049103233,
      0.015511154,
      0.015732987,
      -0.001950794,
      -0.027427154,
      -0.00069062377,
      -0.008141792,
      -0.020567501,
      -0.007654583,
      -0.0051572197,
      -0.0035776026,
      -0.024772592,
      -0.013999363,
      -0.010552785,
      -0.0071781776,
      -0.015890472,
      0.013374361,
      0.02540427,
      -0.0062935,
      -0.019680744,
      -0.017425962,
      0.007632165,
      0.02513971,
      0.0034979556,
      -0.014876921,
      0.030239604,
      0.005966874,
      -0.02441822,
      0.020960078,
      -0.0052489713,
      -0.0060320636,
      -0.020483613,
      0.039820813,
      -0.024948802,
      -0.027142033,
      -0.003771633,
      -0.03135892,
      -0.02829272,
      0.005669926,
      0.022998529,
      -0.002536209,
      0.003134187,
      -0.009296074,
      0.015263571,
      0.014860346,
      -0.013416677,
      0.01346393,
      -0.022107072,
      0.01002472,
      0.0042992053,
      0.0070240977,
      -0.016417373,
      -0.0047401884,
      -0.0026079458,
      0.02484873,
      0.011515691,
      -0.0020672204,
      0.028086506,
      0.027794123,
      -0.0062728273,
      0.005306491,
      0.010699787,
      0.009718302,
      -0.042476777,
      -0.022280257,
      -0.05374391,
      -0.013416437,
      -0.0068359864,
      -0.016152572,
      0.005177238,
      0.013518351,
      -0.00886114,
      0.0072875475,
      0.0016135336,
      -0.0027322576,
      -0.02824292,
      -0.0035410696,
      0.009153643,
      -0.024373135,
      -0.007852366,
      -0.006967062,
      -0.005495054,
      -0.01749396,
      -0.02744704,
      -0.0032409348,
      -0.0008571465,
      -0.0023762751,
      -0.010980591,
      -0.021266183,
      0.007047286,
      0.01817201,
      -0.019069493,
      0.009992868,
      -0.023043452,
      -0.0032272933,
      0.017738188,
      -0.1488919,
      -0.024754308,
      0.0038474489,
      -0.0029571685,
      0.0040505584,
      0.020292114,
      -0.0000775185,
      -0.014870568,
      -0.010426896,
      -0.0050866827,
      0.028359465,
      -0.0030759035,
      0.0007110644,
      -0.030069785,
      0.0036967397,
      0.120753296,
      -0.004127534,
      -0.014293087,
      0.0019618091,
      -0.009461024,
      -0.005892768,
      -0.010149811,
      -0.021774137,
      0.027771927,
      -0.005233474,
      -0.021076653,
      -0.016775182,
      -0.003036245,
      0.0028550976,
      0.022102175,
      0.008573503,
      -0.02678001,
      -0.0000416888,
      0.02876803,
      0.011434519,
      0.0039720004,
      0.0067672,
      0.0070685116,
      0.005722356,
      0.014504815,
      0.017760687,
      0.008048806,
      0.0017048125,
      0.0047884933,
      0.013659199,
      0.0049087554,
      -0.021993663,
      -0.026061818,
      0.012308201,
      0.0036374151,
      -0.011535715,
      -0.068731785,
      -0.0043594833,
      -0.027164632,
      -0.008503531,
      0.0038841257,
      0.011107544,
      0.012548571,
      0.00021255678,
      0.020323357,
      0.0042561083,
      -0.006287891,
      -0.006923712,
      -0.017279036,
      0.006450977,
      0.010835528,
      0.004709575,
      0.01835909,
      0.014648023,
      -0.0181657,
      0.017573364,
      0.022044534,
      0.0034726905,
      0.010518148,
      -0.005172121,
      -0.0027000513,
      0.007333927,
      0.024702074,
      0.0148573695,
      -0.0029675136,
      -0.007385632,
      0.005882422,
      -0.005900106,
      -0.017166406,
      0.013601223,
      -0.0044076857,
      0.00011447146,
      0.025973368,
      0.010315861,
      0.016792865,
      0.0050506885,
      0.00509551,
      -0.02256026,
      0.023884121,
      -0.008483839,
      0.00061578985,
      0.0057028653,
      -0.0046363603,
      0.042554244,
      -0.0112430025,
      -0.00041791672,
      -0.009950763,
      -0.019623347,
      -0.03915501,
      0.02432849,
      0.00076928764,
      0.007529075,
      0.017142616,
      -0.0037725868,
      -0.008796052
    ]
  },
  {
    "id": "genai_cohort_python_07_Build_an_Authorization_decorator_vtt",
    "content": "All right, so one more type of 2 decorator that we're going to build. 3 And in fact we are actually 4 manually building it. 5 But you're going to see them in 6 big frameworks and libraries, 7 especially in Django, it 8 is used all over the places. 9 So we're going to build 10 a simple decorator. 11 We're going to face, an error, 12 and unexpectedly it will come 13 and then we're going 14 to learn how to fix them. 15 And these are the things you learn 16 in the production only. 17 So let me go ahead and share 18 the screen with you. 19 So I have created a simple 20 new file which is auth decorator. 21 Again, it's a really 22 simple kind of decorator. 23 You're going to see this a lot. 24 The first step is always same, so 25 we're going to borrow some code. 26 So we'll copy this and paste it. 27 Whenever we are defining any 28 decorator, this is the most 29 common thing that you have to. 30 Let's just say we want 31 to define a simple decorator 32 which says require admin. 33 So we are creating a wrapper function 34 that if any function executes, 35 and I wrap this up without 36 a function, that means only admin 37 can actually execute that function. 38 Pretty useful functionality 39 to be honest. 40 And I go ahead and simply accept 41 function just like this. 42 And we know this at the rate 43 wraps to preserve all 44 of the metadata just like this. 45 And after that I can say, 46 let's just say we define a wrapper, 47 which this time takes user role. 48 Now wrapper doesn't always 49 need to take all 50 the arguments just like this. 51 If you know that we expect 52 only one argument to be 53 passed on, just take that. 54 If you think that more 55 will be coming up. 56 There is no harm in saying args 57 and keyword args, all of them. 58 So all of them automatically pass on. 59 But it's not really precise 60 and I like precise code. 61 All right, then we simply go 62 ahead and check if the user 63 role is not equals to admin. 64 We simply go ahead and say 65 just like this, a simple print 66 message that says, 67 something like this, access denied. 68 And we will say admins only. 69 So this is an admin only area. 70 And after that we 71 put up an else part. 72 And in the else case we simply go 73 ahead and say return whatever the 74 function you are trying to run with 75 the user role, we'll just return 76 that as it is so that it can keep on 77 executing. 78 And we will also go ahead 79 and say return the wrapper. 80 Pretty simple. 81 We have seen this many 82 times, no problem at all. 83 Now we'll see, that this 84 is how we use Decorator. 85 And once this decorator is here, 86 we simply go ahead and say I want 87 to create another method 88 which says access tea inventory. 89 And this is a common thing that 90 you want to access the inventory. 91 Somebody will pass me a role that 92 what role you have so that you 93 can access the inventory and print 94 a simple statement that says access 95 granted to tea inventory. 96 There we go. 97 Now let's go ahead and run this one. 98 I want to run it two times. 99 Access to inventory. 100 Oops. 101 Oh, why I did that. 102 Access to inventory. 103 And we will first of all pass 104 on a user and then we'll go 105 ahead and pass on admin. 106 So what do you think will happen 107 with this piece of code? 108 It's pretty guessable, 109 but the execution 110 will actually shock you a little. 111 So if the user role is user, then 112 we simply go ahead and return 113 the It is not admin, so we'll 114 just go ahead and print this. 115 Hey, this is admin, not allowed. 116 If it is admin, then we'll simply 117 go ahead and execute this. 118 So this will execute as it is. 119 We are not stopping anything. 120 But to your surprise, if I run 121 this whole piece of code 122 and why is it behaving like that? 123 And I have to say exit. 124 There we go. 125 Don't know what happened. 126 I'll just say Python03. 127 I am actually in the wrong folder 128 somehow open an integrated terminal. 129 This time I'm at right place. 130 Let's run this. 131 And this one is 03 and there we go. 132 Admins only and tea 133 inventory granted. 134 So first of all it 135 actually stopped me. 136 All right, that's good. 137 And access granted. 138 I was expecting that there will 139 be an error, but it didn't came. 140 It might come at some places. 141 So that is okay that it didn't 142 came, but I was expecting, to be 143 honest, I was expecting an error 144 in this one, but that's okay. 145 I'll tell you the reason why. 146 It happens sometimes. 147 Now sometimes when you actually 148 run these things, you actually have 149 to explicitly return something. 150 In all the cases. 151 In this case we are not 152 returning anything. 153 That's okay. 154 I don't know if in the recent version 155 of Python they have changed it. 156 In most of the case. 157 In all of the all cases, if you 158 have switch statement, you have 159 to have to return something. 160 An explicit return is 161 required in Python. 162 So just for the safety you can 163 just go ahead and say return 164 and you can simply return none, 165 which is also a default return. 166 This will make your program foolproof 167 and in most of the cases you're 168 going to see this, we didn't got it 169 probably my python is Most updated 1 170 I was expecting an error to be 171 honest but python sometimes updates 172 so this will still run this and you 173 got to learn something new this is 174 again I would say this is very 175 optional line you will see them in 176 some of the older code bases now I 177 can say that but always keep in mind 178 writing this explicitly is never 179 going to hurt you especially if you 180 are building decorators this is 181 something that we always use to take 182 care I'll probably not take care of 183 them in the future if it works just 184 like that but I'll still study more 185 on this and that's how we work we 186 always study all of us we 187 continuously learn about the things 188 that happens in the language if I 189 happen to find out something new and 190 interesting I just share that on the 191 YouTube as well as well as on the 192 udemy courses that is it for this 193 video. 194 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "07 Build an Authorization decorator.vtt",
      "originalPath": "genai-cohort/python/07 Chapter Subtitles/07 Build an Authorization decorator.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0106748585,
      -0.013057366,
      0.015544003,
      -0.0683777,
      0.0025349164,
      -0.015078487,
      0.0006935863,
      0.034339726,
      0.009732747,
      -0.012623989,
      -0.01996926,
      -0.013073784,
      -0.0012826982,
      0.033836063,
      0.13240905,
      0.0056408774,
      -0.010048773,
      -0.008310153,
      -0.0141640585,
      -0.013263257,
      -0.0043102438,
      0.009466533,
      0.006356048,
      -0.013761958,
      0.0074625784,
      -0.012620936,
      0.014363533,
      0.016439728,
      0.026143422,
      -0.03286476,
      -0.02504624,
      0.026896974,
      0.010966116,
      0.039403148,
      0.001558601,
      0.0061213034,
      0.0057945433,
      0.00923983,
      -0.0006501632,
      0.005700469,
      -0.019128557,
      0.0037171321,
      0.018419495,
      0.00417407,
      0.015442255,
      -0.012014266,
      -0.010366398,
      -0.01571148,
      -0.0035046814,
      0.032513652,
      -0.0007390637,
      -0.0028066996,
      -0.013286702,
      -0.18736929,
      0.015714891,
      0.013408585,
      -0.01231681,
      0.0041973414,
      0.01361072,
      0.008266165,
      -0.017330771,
      0.01947452,
      -0.020049103,
      -0.024520105,
      0.008568275,
      -0.022100179,
      0.020015452,
      -0.021695955,
      -0.009368715,
      -0.023129752,
      0.04696029,
      0.017879102,
      -0.019596118,
      -0.021625306,
      -0.008179092,
      -0.01786743,
      0.011008708,
      -0.017393686,
      0.0002705001,
      0.014224362,
      0.018730082,
      -0.017191356,
      -0.00094463106,
      -0.01410655,
      0.00936186,
      0.004164458,
      -0.011813234,
      -0.02303255,
      0.0066252057,
      -0.006989719,
      -0.018188575,
      0.018047871,
      -0.007989639,
      -0.00398544,
      -0.0123462435,
      0.010817775,
      -0.018564597,
      0.011066479,
      -0.019603476,
      0.0042190477,
      -0.015936792,
      -0.0009641331,
      -0.0005000062,
      -0.0066412585,
      0.0023317167,
      0.0107606305,
      0.0020320492,
      -0.0009772939,
      0.0035877342,
      0.010700241,
      -0.007947183,
      -0.0050316923,
      -0.012460141,
      0.01676373,
      0.014297097,
      -0.1581874,
      0.022164514,
      -0.0152512165,
      0.0018332957,
      0.016790565,
      0.0005707566,
      0.029267648,
      0.036303572,
      0.011756866,
      -0.033854824,
      0.01597671,
      -0.007407095,
      0.020713724,
      0.0050769323,
      -0.0011409053,
      -0.03605399,
      -0.0216462,
      0.028680418,
      0.012403527,
      -0.019890862,
      0.022455469,
      -0.014692255,
      0.0066953255,
      -0.0037557634,
      -0.0016872865,
      -0.008127654,
      0.01621736,
      -0.00711084,
      0.02652125,
      0.028976703,
      -0.003707918,
      -0.00740889,
      0.004414343,
      -0.01710342,
      -0.022549205,
      0.009330418,
      -0.04083122,
      0.012691968,
      -0.00465074,
      0.02525988,
      -0.023865644,
      0.005387878,
      0.014320179,
      0.0049030725,
      -0.020724507,
      0.006817763,
      0.0015470249,
      -0.000102696846,
      -0.0072725215,
      -0.007973461,
      -0.014045356,
      -0.0032177535,
      0.0040523917,
      0.011303127,
      0.030397063,
      -0.021097306,
      -0.030229678,
      -0.008878412,
      0.008633406,
      -0.0037611646,
      0.002720759,
      -0.0052044964,
      0.0021207745,
      0.011735895,
      -0.004378215,
      -0.015732218,
      0.0018209373,
      0.007362494,
      0.0015985899,
      0.011734547,
      -0.0000015406199,
      -0.017318625,
      -0.0021584264,
      0.015095387,
      -0.009005472,
      0.0029652212,
      0.012605085,
      0.0072676083,
      0.023145853,
      0.007471643,
      -0.016008342,
      0.0004467924,
      -0.0026318172,
      -0.014761686,
      -0.00051180494,
      0.020817425,
      0.011739661,
      -0.0058684885,
      -0.013896392,
      0.019016648,
      -0.010348696,
      0.020191142,
      -0.019914163,
      0.011239144,
      0.016006662,
      -0.0075548277,
      -0.013854451,
      0.00014809112,
      -0.0020745052,
      0.0029988247,
      -0.010656037,
      0.021716317,
      -0.017377887,
      -0.0034260957,
      0.0029690873,
      0.013875136,
      0.024485495,
      0.0056263646,
      0.012564191,
      0.0040937006,
      -0.007932069,
      0.016095584,
      0.0042321733,
      -0.0066291695,
      0.021616139,
      0.03326965,
      -0.004672957,
      -0.023228183,
      -0.012790527,
      0.0009616694,
      0.016006026,
      0.0036384307,
      0.02586559,
      0.016826179,
      0.01243033,
      -0.008123863,
      -0.016326794,
      -0.026063759,
      0.014275322,
      -0.0024005626,
      -0.0032660414,
      -0.018211083,
      -0.014418626,
      0.002471204,
      -0.012684438,
      -0.01505241,
      0.0009271475,
      0.018218609,
      -0.028066205,
      0.012296245,
      -0.021190347,
      -0.042024776,
      0.0041970136,
      -0.0111603765,
      0.0024660493,
      -0.0030499913,
      -0.0036552905,
      -0.017409278,
      0.0040872125,
      0.025127862,
      -0.0065137004,
      -0.012463322,
      0.014337704,
      -0.019073661,
      0.0141806435,
      0.008013012,
      0.001837506,
      -0.0001256499,
      -0.0037393486,
      -0.029912755,
      0.02323871,
      -0.098177016,
      0.037343144,
      0.011872,
      -0.016448984,
      0.0067937435,
      0.031430237,
      -0.024732823,
      -0.0023614552,
      -0.009511123,
      0.018808868,
      0.000097402415,
      -0.011857875,
      0.035127092,
      -0.016511355,
      -0.02856271,
      -0.012366493,
      0.011395567,
      0.00064256386,
      0.011663619,
      -0.01296398,
      0.008949682,
      -0.0045584613,
      -0.02397336,
      -0.0032108817,
      0.019262211,
      0.023773197,
      -0.009918505,
      0.037104756,
      0.014289223,
      0.006316743,
      -0.00157095,
      0.028419785,
      -0.017537924,
      -0.008878835,
      0.0034923141,
      0.010571933,
      -0.0030092073,
      0.00061643054,
      -0.0049038297,
      -0.011057922,
      0.010184564,
      -0.0146761285,
      0.0058099767,
      0.029586911,
      0.0015993649,
      0.008320254,
      -0.018054223,
      0.008635803,
      -0.015800057,
      -0.012982139,
      -0.009643916,
      0.0010056754,
      0.0029764313,
      -0.012823206,
      0.010155067,
      0.024015233,
      0.00893078,
      -0.0029060512,
      0.00831178,
      0.005680243,
      0.005943328,
      0.0007860634,
      0.02837144,
      -0.016185863,
      0.0029471626,
      0.0049217762,
      0.016158605,
      -0.024268845,
      -0.038463295,
      -0.000098906596,
      0.024996677,
      -0.004789091,
      0.0070221694,
      -0.03270903,
      0.023879213,
      -0.0007494267,
      0.022152651,
      -0.029015368,
      -0.015657134,
      0.029084917,
      0.0052065607,
      -0.018764885,
      -0.0010418632,
      0.024931656,
      -0.003159258,
      0.0118521135,
      -0.0032623871,
      0.0045711827,
      0.02041853,
      -0.023989636,
      0.027737102,
      0.015284976,
      0.013214263,
      0.0057861763,
      -0.026380388,
      0.010445775,
      -0.0042724707,
      -0.040612236,
      0.010987731,
      0.022819193,
      -0.022003775,
      -0.0015834782,
      -0.014585919,
      0.009628336,
      0.010022744,
      0.002391556,
      -0.04212464,
      -0.019345785,
      -0.0053506293,
      -0.03163288,
      0.008880361,
      -0.0019114611,
      -0.019524802,
      -0.017236218,
      -0.016076664,
      0.01134214,
      -0.008054159,
      -0.0020073326,
      0.01241966,
      -0.0034076064,
      0.0028649743,
      -0.0023082993,
      -0.008326958,
      0.016090378,
      -0.0055613397,
      0.025909353,
      -0.01814612,
      -0.005918542,
      -0.0075301453,
      -0.011926886,
      -0.020733723,
      0.001236594,
      -0.017514778,
      -0.017406948,
      -0.007161072,
      -0.0105154775,
      0.028287627,
      0.012839227,
      -0.005064736,
      0.008621245,
      0.005746671,
      -0.00019574874,
      0.02410414,
      -0.0027650094,
      0.016806295,
      0.012975976,
      -0.014087557,
      0.0069147674,
      0.005931447,
      -0.003765747,
      -0.020241808,
      -0.005466892,
      -0.015807489,
      0.0025522353,
      -0.010487364,
      0.0011019369,
      0.008117589,
      -0.0034593088,
      -0.021704288,
      -0.025001818,
      0.00026043205,
      0.0005953604,
      -0.024110809,
      0.0000034558925,
      0.023818335,
      0.0029006798,
      0.0015945826,
      -0.008346537,
      -0.005999249,
      -0.0041709146,
      -0.018121762,
      -0.018369682,
      -0.03182317,
      0.0016188903,
      0.027600838,
      -0.0019642257,
      0.029808534,
      -0.022364544,
      0.031147746,
      0.027701173,
      0.009392646,
      0.00034588375,
      -0.013434505,
      0.0018806545,
      -0.00097043667,
      -0.019563401,
      0.012704617,
      0.006338797,
      -0.031341802,
      0.016118519,
      0.00021953748,
      -0.017434971,
      0.0040438306,
      0.030529518,
      0.0037384501,
      0.01376058,
      -0.0270307,
      0.017565738,
      -0.001005161,
      0.014311463,
      -0.0055047725,
      -0.012761377,
      -0.02320522,
      0.017466515,
      0.03504886,
      -0.0024770277,
      -0.007881659,
      -0.012689562,
      0.003645777,
      0.01875558,
      -0.009673579,
      0.021215595,
      0.006027021,
      0.0027089296,
      0.015571241,
      0.04205198,
      0.0023320112,
      0.0007334298,
      -0.032442812,
      -0.01106525,
      -0.00038738488,
      -0.008342612,
      -0.006746798,
      -0.01628269,
      0.02311013,
      -0.008013471,
      -0.023680404,
      0.009550459,
      0.011773522,
      -0.0053890618,
      -0.0044343844,
      0.010221412,
      -0.006608842,
      0.00038978798,
      -0.03406329,
      -0.023448749,
      0.010449458,
      0.016249442,
      -0.01171247,
      0.013275356,
      0.016433086,
      -0.013640727,
      0.00013849289,
      -0.0018477582,
      0.018269787,
      0.008411154,
      0.026157161,
      0.0072102663,
      -0.014378621,
      0.00645368,
      0.021482022,
      0.02061091,
      -0.0108172335,
      -0.014088834,
      -0.019350855,
      0.027575765,
      -0.013907093,
      -0.0017589061,
      -0.01212987,
      -0.0049285977,
      0.015451877,
      0.019230751,
      -0.0026514295,
      0.008023067,
      0.010324164,
      -0.022586105,
      0.00070981466,
      -0.019016135,
      -0.009462857,
      -0.14065562,
      -0.010461205,
      -0.015609982,
      -0.012619644,
      -0.020995922,
      0.0022246044,
      -0.00021833571,
      -0.0019841453,
      0.012943445,
      0.010990463,
      0.02325022,
      0.009182842,
      -0.009964817,
      -0.0019277523,
      -0.0060464465,
      -0.016249934,
      0.018920455,
      0.013034817,
      0.026219167,
      -0.013353502,
      0.004706346,
      -0.013576488,
      0.008177879,
      -0.0063148043,
      -0.0034455692,
      -0.023053538,
      -0.00043246665,
      0.008325631,
      -0.0059453426,
      0.005995941,
      -0.021563534,
      -0.006709114,
      -0.009093614,
      -0.005293096,
      0.014376931,
      -0.0059660673,
      -0.024582898,
      -0.010851093,
      0.008160949,
      0.011792294,
      -0.020041952,
      -0.013673725,
      0.03430522,
      0.0011533328,
      -0.019794991,
      0.03166775,
      0.010551549,
      -0.015435571,
      -0.009143311,
      0.026797533,
      -0.033776134,
      -0.016314903,
      -0.002800381,
      -0.025958685,
      -0.029993676,
      0.010834402,
      0.0047062845,
      -0.014046825,
      -0.013032923,
      -0.026551938,
      0.0018531985,
      0.003193669,
      0.0056930543,
      0.020383721,
      -0.005196114,
      0.00021234535,
      0.00825281,
      0.0013297402,
      -0.0051518627,
      0.007951875,
      -0.0121571915,
      -0.00080948195,
      -0.010400972,
      0.0031361906,
      0.01743156,
      0.012330803,
      -0.021020943,
      -0.013361693,
      -0.0033164257,
      -0.008789756,
      -0.024833936,
      -0.017611578,
      -0.05711712,
      -0.014778549,
      0.00029875102,
      -0.016390178,
      0.000051294413,
      0.017320491,
      -0.009006863,
      0.011959546,
      0.0035612895,
      -0.0063552433,
      -0.014700005,
      -0.0028377841,
      0.008551366,
      -0.009834846,
      -0.02118837,
      -0.0011566982,
      0.016635409,
      -0.008927574,
      -0.016739877,
      -0.006658184,
      -0.007713384,
      -0.0075022564,
      -0.014138139,
      -0.023976147,
      0.015641462,
      0.008876358,
      -0.022223184,
      -0.0057948823,
      -0.0012114146,
      0.010417529,
      0.010163062,
      -0.1487047,
      -0.022682106,
      0.00174602,
      0.012380329,
      0.0015155027,
      0.018256076,
      -0.00019620366,
      -0.017364094,
      0.007761889,
      -0.0027330203,
      0.008766441,
      -0.007309138,
      0.00094680995,
      -0.0023303407,
      0.010220661,
      0.12904908,
      -0.0058736196,
      0.0000032038379,
      -0.010001226,
      -0.00166437,
      -0.0052363444,
      -0.00662882,
      -0.03144877,
      0.013676419,
      0.007187194,
      -0.023196138,
      -0.0047068577,
      -0.029660452,
      0.0070011173,
      0.0073806033,
      -0.008256716,
      -0.02462373,
      0.0035664274,
      0.0067992713,
      0.0097994,
      -0.013849195,
      0.000014971319,
      0.016875878,
      -0.019930487,
      -0.0056711817,
      -0.0030145436,
      0.004320683,
      -0.0019246365,
      -0.003538194,
      0.008976503,
      0.005807019,
      0.0027832538,
      -0.018566966,
      0.011413318,
      0.022309199,
      -0.030555258,
      -0.055209327,
      -0.0022245792,
      -0.010524326,
      -0.014475399,
      0.018716749,
      0.0192858,
      0.009010911,
      0.001957748,
      0.014887897,
      0.0052511855,
      -0.023198683,
      -0.005754355,
      -0.008245395,
      0.009027664,
      -0.014677109,
      0.006400079,
      0.02055942,
      0.024723718,
      -0.022395376,
      0.0038068208,
      0.015882429,
      0.00092684664,
      0.01945693,
      -0.012961387,
      -0.005260808,
      -0.0051470706,
      0.013886453,
      0.0052378434,
      0.005800873,
      0.013067206,
      -0.014882539,
      -0.008270365,
      -0.014736196,
      0.0034889493,
      -0.0024655915,
      -0.013415637,
      0.006316224,
      -0.004694455,
      0.0036694393,
      -0.0075708805,
      0.0070633567,
      -0.012824915,
      0.0297404,
      -0.009978266,
      0.0035191819,
      -0.010999914,
      -0.011025263,
      0.023403045,
      0.005638824,
      -0.00017446427,
      -0.011186423,
      0.0060692006,
      -0.028019171,
      0.01397032,
      0.006598365,
      0.011601905,
      0.0003302435,
      -0.008328723,
      -0.0014072986
    ]
  },
  {
    "id": "genai_cohort_python_01_What_are_comprehensions_in_python_vtt",
    "content": "Hey there everyone and welcome 2 to the Python course on Udemy. 3 So in this video or in this 4 section, we are starting 5 comprehensions in Python. 6 Now here's a two very interesting 7 thing about comprehensions. 8 First of all, almost 9 everything that we are going to do 10 with the comprehensions can be done 11 with the loops as well. 12 Comprehensions are just a stylized 13 way of writing Python code. 14 So if we can do all of these 15 things, why we are using 16 comprehensions because sometimes 17 they make our life little 18 easier, they are a shorter way 19 of writing the code and 20 sometimes they feel like writing 21 just English statement and one 22 statement can do the whole job. 23 Yes, it can be done with the loops 24 as well, but this is more 25 stylized way so more people 26 in the production actually uses it. 27 And if you really want to master 28 the comprehensions in Python, 29 you have to Var this section, you 30 have to go through with this. 31 I have made sure that I keep 32 the videos bite sized so that 33 you can actually learn and focus on 34 just one task or one comprehension 35 at the one time. 36 There are multiple of them which 37 we are going to talk about then. 38 The second most important part about 39 the comprehension is that people 40 don't like it in the very first go. 41 There are only handful of people 42 who actually appreciate 43 the importance and the syntax 44 of comprehensions in the first go. 45 Most of people who want to learn 46 Python, they just learn till 47 the loops and functions and say I 48 want to skip the comprehensions. 49 Not really. 50 For me it's little difficult. 51 I agree it is little 52 difficult, but you have 53 to go through with this. 54 This is really important 55 part and you're going to see 56 so many production code 57 with the comprehension. 58 But the most important question, 59 what is comprehension? 60 So for this we will do this entire 61 video with just the comprehensions. 62 I'm going to write some keywords 63 will help you to understand 64 this and all the syntax. 65 And from the later on video, 66 the next video onwards, we are going 67 to study them one by one. 68 So what are comprehensions? 69 A very good question that you have 70 asked since you are in this section. 71 So comprehensions are a way of, 72 are a concise way of creating lists, 73 sets, dictionaries or generators in 74 Python using a single line of code. 75 Your entire focus should be 76 on using a single line of code. 77 So yes, just like the loops, we 78 don't keep on creating this, 79 we just write a simple one line 80 and it can do a lot of logical 81 things for you as well. 82 So the big question that we have is 83 where, they, where are they used? 84 I'll write that patiently 85 where they are used in real Life. 86 And yes, that's a good question. 87 So where they are used 88 in the real life, are they even 89 used in the real life? 90 And the answer is yes, very much. 91 They are used quite a lot. 92 The most common place that 93 where you're going to see is 94 through filtering the items. 95 So filter item. 96 This is where you're going 97 to see them being used. 98 What items you want to filter. 99 Maybe you want to pick all 100 the hot teas from a menu. 101 Maybe you want to pick all 102 the iced T from the menu. 103 So in that filtering you can do 104 the job in just one line and you 105 can also see them in transforming 106 some of the objects as well. 107 So transform what kind 108 of transforming the item? 109 You might want to say I want 110 to convert all the pricing 111 from INR to USD. 112 I can do that all in one line 113 using the comprehensions. 114 There are more things. 115 Maybe I want to create a new, 116 create a new collection. 117 I can do that in variety 118 of ways, but maybe I want to map 119 the tea names to the pricing. 120 So I want to make a fresh 121 collection out of it. 122 So in that case, yes, 123 comprehensions are super useful. 124 And another thing is sometimes you 125 want to flatten nested structure. 126 So maybe there is you want to extract 127 the ingredients out of a T recipe. 128 It's nested quite a lot 129 in the objects and dictionaries 130 and key value pairs. 131 So if you want to flatten a nested 132 structure they can be used. 133 So again, these are some 134 of the common out of top 135 of the head examples that I 136 could have figured out. 137 But I'm pretty sure there 138 are hundreds of other. 139 But this gives you a clear picture 140 that yes, actually if I go 141 ahead and use them in the real life 142 they will actually make sense. 143 So look at this. 144 We have drawn a pretty good 145 diagram of them as well. 146 So this is the most common one. 147 So if they have this one and we 148 can do the same task with 149 the loops as well, what purpose 150 they might serve do they serve? 151 And that's also a good question 152 that if we know them like this, what 153 purpose they actually serve? 154 The most important purpose, that 155 you're going to see it everywhere. 156 It's actually a cleaner code. 157 I would not say easiest of the code 158 to understand, but comparatively 159 to the loops and other things 160 it's rather cleaner and in some 161 of the cases actually faster. 162 So faster execution is also the way 163 you use less memory. 164 You can do all of the things. 165 It's a functional style code as well. 166 But I would give these two things 167 most of the important parts. 168 First of all It's a cleaner code. 169 Not the easiest one 170 to understand, but it's cleaner one. 171 Once you get in the habit, 172 you'll realize, this one 173 is actually much better. 174 And final and last thing that 175 I would like to discuss is, 176 the types of comprehensions. 177 What are the type of comprehensions 178 that wrote a bad spelling? 179 So what are the types of, 180 comprehensions that we have? 181 Great question you might have asked. 182 Actually we have a few of them. 183 Some of them you have already 184 seen not the comprehensions 185 but the data structure types. 186 So I'll just list them. 187 The first one is the list. 188 The second one that we have is set. 189 Remember we saw the set. 190 Yeah, we discussed the math 191 part of it as well. 192 The next one is dictionary 193 and the last one 194 is actually generator. 195 You might be asking what 196 is this generator? 197 We haven't studied them. 198 Yes, you are correct. 199 It's not a data type. 200 It's a whole new structure in itself. 201 We'll study about them. 202 So the first one is list. 203 The second one is set. 204 The third one is dictionary. 205 And the last one is generator, 206 which is very interesting. 207 Again, we'll spend some good amount 208 of time in the generator as well. 209 First we'll see a brief look 210 in here, then we'll go through 211 with them in the detail. 212 So in the next video we'll 213 directly pick up the list 214 comprehension and we'll see that, 215 okay, this is how the list 216 comprehension looks like. 217 The basic structure will first study 218 the theory part of it and then 219 we'll go into the code part of it. 220 It will be fun. 221 Don't you worry. 222 You will get enough of, 223 the confidence that. 224 Okay, now I can write this within 225 just one example, you'll find 226 immense confidence that I 227 can write the comprehensions. 228 That is it. 229 Let's catch up quickly 230 in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 What are comprehensions in python.vtt",
      "originalPath": "genai-cohort/python/06 Chapter Subtitles/01 What are comprehensions in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.012860173,
      0.0011226607,
      0.039418567,
      -0.048772514,
      -0.0034464602,
      0.01046851,
      0.012619569,
      0.028161176,
      0.0066110063,
      0.04355986,
      -0.013823472,
      0.004426746,
      0.009995038,
      0.03951793,
      0.11497924,
      -0.0014972269,
      -0.017615473,
      -0.021019688,
      0.018808374,
      -0.019783989,
      0.022817431,
      0.010640253,
      -0.006972512,
      -0.00390576,
      -0.009551039,
      -0.002477045,
      0.0015179157,
      0.00047046898,
      0.020077728,
      -0.022052994,
      -0.018821878,
      0.020303316,
      0.0006943003,
      0.01827348,
      0.0035764128,
      0.0055062897,
      0.0026407845,
      -0.019050388,
      -0.02642418,
      0.003122031,
      -0.029544465,
      -0.008381671,
      -0.0072719934,
      0.003691871,
      0.01801576,
      -0.030827977,
      -0.009849959,
      -0.020813841,
      -0.0060380646,
      0.030898746,
      0.0048299613,
      0.013210707,
      -0.0010977647,
      -0.18448451,
      0.021500176,
      0.002251808,
      -0.0025939948,
      0.005427146,
      0.0007855623,
      0.009168483,
      -0.013661556,
      0.0131416265,
      -0.033400558,
      -0.016929934,
      -0.042108003,
      -0.015112028,
      0.01897019,
      -0.010301023,
      -0.0069628516,
      0.009491204,
      0.017547058,
      0.003527659,
      -0.007449533,
      -0.009045158,
      -0.017499449,
      -0.020227212,
      0.006468807,
      0.0028203463,
      -0.010718331,
      0.014390885,
      -0.00707304,
      -0.002707598,
      -0.025936203,
      0.022819422,
      0.0066116652,
      0.007983955,
      -0.025954602,
      -0.022891412,
      0.0026468975,
      0.004373709,
      -0.0145357745,
      0.007294774,
      -0.0190178,
      0.017070226,
      -0.006340064,
      -0.022666538,
      -0.009655692,
      0.0054734824,
      -0.0024499467,
      0.0048735924,
      0.019847281,
      -0.013809598,
      -0.009604423,
      -0.00840206,
      0.0041320664,
      0.012777628,
      0.0006936196,
      -0.025348006,
      -0.02134217,
      -0.0028358866,
      -0.0022525971,
      0.008774359,
      -0.002848089,
      0.028358297,
      0.007219016,
      -0.16591837,
      0.010267262,
      -0.002574194,
      -0.036010906,
      0.020863464,
      -0.019984413,
      -0.0035099993,
      0.0021380875,
      0.008793006,
      -0.016159426,
      0.018172763,
      -0.005459594,
      0.019718159,
      -0.013132251,
      -0.0052542393,
      -0.02137738,
      -0.018556047,
      0.0062468546,
      0.0235544,
      0.006677775,
      0.0022091516,
      -0.009098794,
      -0.01101248,
      -0.015611483,
      0.0019868047,
      -0.030360036,
      0.020238556,
      0.0027611346,
      0.035685863,
      0.018221365,
      -0.002608525,
      -0.03191645,
      0.013427437,
      -0.02756647,
      -0.011641389,
      0.007316257,
      -0.009075459,
      -0.014134801,
      -0.0021389392,
      0.023651812,
      -0.025422528,
      -0.023529423,
      0.021737158,
      -0.008568445,
      -0.008126242,
      -0.0036255838,
      -0.0005256812,
      -0.000098305434,
      0.0020604185,
      0.0018038658,
      0.010095986,
      -0.017930316,
      0.00036049314,
      0.014497892,
      0.0026550696,
      0.009324036,
      -0.015698807,
      0.01730074,
      -0.009840791,
      -0.0054612868,
      -0.010714411,
      0.0046117655,
      0.0025672545,
      0.005130727,
      -0.01181468,
      0.013716599,
      0.004249924,
      -0.00020239763,
      0.0046665696,
      -0.0057290923,
      0.008167424,
      -0.00739163,
      0.0015727374,
      0.007870758,
      0.00034087815,
      -0.0032377928,
      0.0104742,
      0.051941495,
      0.019315565,
      -0.009996177,
      -0.0032766403,
      0.024553038,
      0.016962182,
      0.0019931435,
      0.027528223,
      0.023825979,
      -0.00859112,
      0.0031208198,
      -0.024464298,
      0.02520378,
      -0.0025312498,
      0.015614306,
      -0.013753091,
      0.026882729,
      0.0069923056,
      -0.0031301465,
      -0.015346165,
      0.006121263,
      -0.0057348954,
      0.023700362,
      0.00019027345,
      0.013379203,
      0.0015791655,
      -0.009542947,
      -0.011539734,
      0.0023221523,
      0.008242079,
      0.017573617,
      0.013917404,
      -0.010617985,
      -0.015269458,
      0.019666981,
      0.0008657367,
      0.0007975569,
      0.006834875,
      0.0102150785,
      0.0004530208,
      -0.010280827,
      -0.0047264206,
      -0.012625375,
      0.0018815373,
      -0.0063488944,
      0.014978433,
      0.036975097,
      0.001744821,
      -0.0037106315,
      -0.00085465366,
      0.0064317035,
      0.021571366,
      0.025561165,
      0.002866852,
      -0.0035220599,
      -0.006049282,
      -0.006059639,
      -0.020120582,
      -0.0157428,
      -0.009864376,
      -0.0028975983,
      -0.01428757,
      -0.006616568,
      -0.009415625,
      -0.032234408,
      -0.0022438546,
      0.017897967,
      -0.025596308,
      -0.0037977926,
      -0.02936614,
      -0.020808404,
      -0.010675539,
      0.021191793,
      0.016682867,
      0.012948696,
      0.019066611,
      0.008582326,
      0.010588963,
      0.013285551,
      0.009609299,
      0.011115078,
      0.0082317805,
      -0.019406011,
      -0.004953048,
      -0.102060296,
      0.0042896406,
      0.028006861,
      -0.015100009,
      0.0019762686,
      0.005463068,
      -0.020416113,
      0.032310754,
      0.015769517,
      0.013171753,
      0.016340856,
      0.0037331113,
      0.04996044,
      -0.016727777,
      -0.011202809,
      0.0033628684,
      -0.0065765847,
      -0.0384058,
      0.03621472,
      -0.0015805541,
      0.0036808574,
      0.0024760282,
      -0.011174634,
      -0.007947623,
      -0.0008398322,
      -0.0029074878,
      -0.01921509,
      0.0262922,
      0.013314759,
      0.003785037,
      0.004711012,
      0.033221852,
      -0.0023127182,
      0.00588026,
      -0.008463159,
      0.010100118,
      0.0046162736,
      0.009621478,
      -0.020003099,
      -0.013166448,
      0.035262935,
      -0.0073162518,
      0.020453548,
      0.029516326,
      0.0013496011,
      -0.006067307,
      -0.01649629,
      0.02025779,
      -0.027500931,
      -0.0065368456,
      -0.00536269,
      -0.0041337665,
      0.01660747,
      -0.0034244845,
      0.011532439,
      -0.0014566501,
      -0.0039941324,
      0.010376725,
      0.009646392,
      0.0040531764,
      -0.017096369,
      -0.002102162,
      0.0027767303,
      -0.026918579,
      0.0064790347,
      0.0097098015,
      0.0028901948,
      -0.010850566,
      -0.00023744178,
      0.0064060995,
      -0.0024049683,
      -0.01310012,
      -0.0032965336,
      -0.002049503,
      0.00091176794,
      0.0019291706,
      0.0071249814,
      -0.01611449,
      -0.028321031,
      0.011634199,
      0.008580894,
      -0.0015077776,
      0.019469917,
      0.0038403587,
      0.0034172444,
      0.00086165295,
      0.0014313757,
      0.0018557588,
      0.011361709,
      -0.004940797,
      0.01640082,
      0.023389732,
      -0.045822162,
      0.0051236693,
      -0.035037383,
      -0.0010285833,
      0.021879187,
      -0.020200655,
      -0.011062409,
      0.017371042,
      -0.02387227,
      0.00041827475,
      -0.012192321,
      0.012368889,
      -0.024989422,
      0.008711956,
      -0.024541523,
      -0.023518898,
      -0.0076114987,
      -0.009277785,
      0.0041197864,
      0.016717415,
      -0.022440704,
      -0.007726227,
      0.013267271,
      0.010831817,
      0.009506147,
      0.0013354092,
      0.019369982,
      -0.01511058,
      -0.0006153537,
      -0.0093643805,
      0.00012677051,
      0.0172673,
      -0.007089878,
      -0.008659916,
      -0.008425475,
      -0.019414268,
      -0.02124944,
      -0.029503128,
      -0.017779998,
      0.01243329,
      -0.0040898304,
      -0.01931878,
      -0.019638555,
      -0.0032597927,
      0.030043798,
      0.02087751,
      0.020636704,
      0.011077162,
      -0.014743666,
      0.013300654,
      0.02415181,
      0.015735243,
      0.007357297,
      0.020722685,
      -0.0066455696,
      -0.018615453,
      -0.000667866,
      -0.02156723,
      -0.031869378,
      -0.020856341,
      -0.012439925,
      -0.008057862,
      -0.0043028016,
      -0.002857617,
      0.004805902,
      -0.0033794716,
      -0.033283245,
      -0.014627463,
      0.0003834984,
      -0.0017781176,
      -0.009464726,
      -0.008341754,
      0.03146791,
      0.0037094508,
      0.008626737,
      0.011846351,
      -0.0101803895,
      -0.009410606,
      -0.0063252123,
      0.012161005,
      -0.035626337,
      0.01020402,
      0.029852856,
      0.026477588,
      0.0031478184,
      0.015036707,
      0.025183138,
      0.017486664,
      -0.00012644354,
      0.0005830357,
      -0.011284611,
      0.0061825034,
      -0.00063389185,
      0.00986734,
      0.024699617,
      -0.0019829518,
      -0.024368405,
      -0.01294091,
      -0.018560003,
      0.01260483,
      -0.0035201733,
      0.010685381,
      0.012122518,
      0.015713844,
      0.0015491111,
      0.017231662,
      0.0026009728,
      -0.0033718953,
      -0.0043780766,
      -0.018377231,
      0.0042917565,
      -0.003855992,
      -0.0001835361,
      -0.014132161,
      -0.006596146,
      -0.028549049,
      0.0027571048,
      0.018489907,
      0.014550643,
      0.012787736,
      0.0012269622,
      0.0039060873,
      0.01191273,
      0.027025921,
      0.0017351554,
      -0.015716339,
      -0.002930618,
      0.004191243,
      0.010576836,
      -0.01196233,
      -0.00081066636,
      0.0035214017,
      0.009271526,
      0.010654234,
      0.005412824,
      -0.0033615795,
      0.0018833565,
      0.0037566442,
      -0.0043974444,
      -0.00092642865,
      -0.015924215,
      0.020387424,
      -0.012062485,
      -0.0123729035,
      0.010771928,
      0.01751001,
      -0.022162633,
      0.020609312,
      -0.006901498,
      -0.023690294,
      -0.010666017,
      0.0059857545,
      -0.019733336,
      0.0013950572,
      0.0086026,
      -0.00384175,
      -0.017106278,
      -0.00976178,
      -0.016142776,
      0.017740577,
      -0.014988199,
      -0.009729143,
      -0.010888876,
      0.02578789,
      0.015166966,
      -0.0047811475,
      0.009166376,
      -0.0030877292,
      0.009341557,
      0.011305115,
      -0.006543579,
      0.017350353,
      -0.003808309,
      -0.011372276,
      -0.010740564,
      -0.03303472,
      -0.0046169385,
      -0.11363125,
      -0.00070397515,
      -0.007976071,
      0.008761553,
      -0.019415956,
      -0.0059503517,
      -0.0055697765,
      -0.0044269343,
      -0.0044840486,
      0.005746652,
      0.028877266,
      -0.026839793,
      0.0023115748,
      -0.015241217,
      0.005662893,
      -0.029915674,
      0.02347211,
      0.016511036,
      0.012577015,
      -0.021809256,
      -0.009255988,
      0.014167182,
      -0.016557638,
      0.0037463096,
      -0.010245922,
      -0.0077852667,
      0.021324696,
      0.008577688,
      0.00022823818,
      -0.0055386564,
      -0.026402913,
      -0.005590554,
      -0.0017778728,
      0.016470117,
      -0.003332168,
      0.001156877,
      -0.02315431,
      0.0078005916,
      0.02748085,
      -0.0022778616,
      -0.014190817,
      0.0022714925,
      0.013988826,
      0.015087656,
      0.007049628,
      0.018457348,
      0.03820071,
      -0.017056167,
      -0.0052727284,
      0.039359655,
      -0.027318902,
      -0.029573003,
      0.010731792,
      -0.015546085,
      -0.0034160488,
      -0.001953888,
      0.020089354,
      -0.011834399,
      0.005299034,
      -0.012427684,
      0.00999145,
      0.0122796055,
      0.019449703,
      0.03822787,
      0.008185112,
      -0.0128579615,
      0.028119976,
      0.007735704,
      0.023081712,
      -0.0033914603,
      0.01242337,
      0.005303721,
      0.0053279414,
      0.024825567,
      0.008438203,
      0.01000202,
      0.010181912,
      -0.0028903058,
      -0.0056219283,
      0.009625375,
      -0.030564532,
      0.01228365,
      -0.04645149,
      -0.027850082,
      0.025688522,
      0.011904848,
      0.005097425,
      0.012238327,
      -0.0035624276,
      0.0028399997,
      0.009345758,
      -0.014020255,
      -0.027160361,
      0.001794324,
      0.022251112,
      0.019964771,
      -0.020481113,
      0.020946642,
      0.010117035,
      -0.014181711,
      -0.022738203,
      0.0045566573,
      -0.0035419154,
      -0.008427026,
      0.0006882806,
      -0.02172367,
      0.021267598,
      0.019985493,
      -0.0120305,
      0.00086642615,
      -0.0090457145,
      0.012643739,
      -0.005932023,
      -0.14541166,
      -0.041216187,
      0.0078087775,
      0.004600923,
      -0.011259356,
      -0.0005886479,
      -0.01653904,
      -0.036546826,
      0.0155397,
      -0.0061168196,
      0.0102565605,
      -0.022935817,
      -0.019732585,
      -0.025847923,
      0.036785938,
      0.1423631,
      0.001693887,
      0.001828961,
      -0.021459242,
      0.006125492,
      -0.018452821,
      -0.031167058,
      -0.010512724,
      0.005319783,
      -0.010296537,
      -0.002594482,
      0.008550797,
      -0.015114483,
      0.00068672735,
      0.006499541,
      -0.013990361,
      -0.002604459,
      0.010703666,
      0.02438071,
      -0.0025628398,
      0.0015566709,
      -0.0068845423,
      0.007333776,
      -0.00358438,
      0.0030505345,
      0.041855343,
      0.00031559644,
      0.009473149,
      -0.004371728,
      -0.004230028,
      0.0021639082,
      -0.0060578366,
      -0.001359277,
      -0.009471549,
      -0.013632091,
      -0.012521901,
      -0.070174426,
      0.01759646,
      -0.0013869907,
      -0.0015161249,
      0.00842526,
      0.009891706,
      0.025080645,
      -0.0033958515,
      0.025280546,
      -0.014405144,
      0.0064727957,
      -0.0060951035,
      0.016196657,
      0.00053635804,
      -0.0082084825,
      0.012215361,
      0.025126457,
      0.015424102,
      -0.010879405,
      0.0118598025,
      0.03344027,
      0.0063168015,
      0.021569662,
      -0.011318321,
      -0.010208162,
      -0.019724032,
      0.029477924,
      0.0022676033,
      0.006045685,
      0.0045030653,
      -0.009040073,
      0.006224636,
      -0.024353327,
      0.03096343,
      0.00121285,
      0.000781641,
      0.014525455,
      0.008852784,
      -0.014760046,
      -0.00021742846,
      -0.0033203128,
      0.00006786058,
      0.02319929,
      0.010455532,
      0.012152043,
      0.004163377,
      -0.019453159,
      0.028161297,
      0.0035791334,
      -0.011679599,
      0.0005591273,
      0.0036108026,
      -0.04526437,
      0.01271004,
      -0.0072808843,
      -0.014276588,
      0.02299481,
      0.0073753595,
      0.003804468
    ]
  },
  {
    "id": "genai_cohort_python_02_List_comprehensions_in_python_vtt",
    "content": "All right, going with 2 the chapter one, let me take 3 you directly on the screen. 4 And first of all, let's go 5 ahead and clean everything up. 6 We don't want any files opened 7 up or anything like that. 8 So we'll start with the 07. 9 And, I can now go 10 ahead and delete this. 11 We don't need this. 12 I just shadcn this file 13 with you already. 14 Let's create a new folder. 15 Let's call this one as 07. 16 And that will be comprehensions. 17 There we go. 18 Now, in this, let's go ahead 19 and start with the very first one, 20 which is the list comprehension. 21 So what is this list comprehension? 22 How does it work? 23 So the list comprehension, let's 24 go ahead and write that, 25 because that would be easier for me. 26 There we go. 27 First of all, let's 28 understand the syntax. 29 That's the most important part. 30 So the syntax looks 31 something like this. 32 We have the square brackets. 33 So we go ahead and put 34 up the square brackets. 35 Then you simply go ahead 36 and write your expression here, 37 whatever you want to do. 38 I'll show you what expression 39 and all of this means. 40 And then you simply go 41 ahead and put a loop. 42 Yes, I know I told you 43 that we will be using. 44 We'll not be using the loop. 45 We can do it. 46 But actually the loop is being used. 47 Just look at the syntax. 48 You will get this. 49 So for item in items, and I hope you 50 got the syntax, items is an array. 51 Item is an individual item of that. 52 Rather, it would be correct 53 to write it as iterable. 54 Iterable. 55 So that I can iterate over it. 56 And then you simply 57 write if condition. 58 And you might be thinking, all 59 right, all right, I was there 60 with you, but now I'm not with you. 61 What is all of this? 62 That's why I say sometimes 63 the practicals are much more easier. 64 So expression for item in iteratable. 65 Iterable. 66 If condition. 67 I know, I know, you lost me 68 there, but let me walk you 69 through with an example. 70 The practical examples 71 are much easier. 72 Call this one as 01 and call 73 this one as list, compre py. 74 All right, let's go with this. 75 Let's just say we have a menu. 76 Let's go with the real example. 77 We have a menu, all right? 78 This is your menu, which 79 is a list in itself. 80 And if you remember, list actually 81 can be written in just one line. 82 Or you can hit an enter and can 83 write a list like this. 84 This is much easier 85 to read, actually. 86 So we just have some of the masala 87 chai, and then separated 88 by comma, we can have another chai 89 this one is iced lemon, T. 90 Then we have another one which is 91 green T or chai, 92 whichever you want to have. 93 Another one we have is going 94 to be iced peach T. 95 And we have one last one which is 96 maybe ginger T or ginger chai, 97 whichever you want to call it. 98 That's totally okay. 99 So this is our menu. 100 This is our list. 101 Now, I want to bring all 102 the iced T out of it. 103 So how can I do this? 104 Pretty easy way. 105 You can loop through the values 106 and look for the character 107 that it should have iced, 108 in that particular T. 109 And then I'll filter them out. 110 But the easiest way is 111 with the comprehension. 112 Now let's go through with the syntax. 113 So we have the square brackets. 114 All right, I understand 115 square brackets. 116 That's easy for me. 117 Now then I go ahead and say that, 118 hey, this is expression for items. 119 So what is this expression? 120 Expression means 121 it's not going to be. 122 It's going to be evaluated in 123 a moment, but it will get the value. 124 So I'll just call this as, tea. 125 All right, tea for a moment. 126 We can call this simply a variable. 127 Okay, Acceptable. 128 Let's go ahead and call this 129 one as for tea in menu. 130 This is also acceptable that. 131 All right, you are using a loop 132 in this. 133 The menu is a trable, 134 which is a, list in itself. 135 The tea is each individual item. 136 All right, I got this part as well. 137 And then we simply go ahead and use 138 condition, Remember if condition. 139 So we'll always have 140 a if condition in this. 141 No exception if. 142 And I can go ahead and say iced int. 143 What did I just did here? 144 Remember, each of this is a string. 145 And I can check for the characters 146 that, hey, I want iced inside tea. 147 So this can be done because 148 it's a, whole iterable. 149 Strings are also iterable. 150 I can go ahead and look. 151 I want this to be a part of this tea. 152 So this whole item should 153 have iced somewhere in it. 154 So first. 155 Nope, the second one. 156 Surely it has the third one. 157 Nope, the fourth one will have it, 158 and the fifth one will not have it. 159 So each there should be 160 somewhere iced word into it, 161 either here or here or here. 162 So once we find it, 163 we actually filter that. 164 So we are looping through it. 165 We are checking for a condition. 166 And finally we are actually 167 collecting this, all of this 168 inside an expression, which is teas. 169 And this whole thing will be 170 collected inside the iced tea. 171 And I'm pretty sure 172 you're looking forward. 173 I want to see this. 174 I want to see the print 175 statement of this. 176 And you're Absolutely correct. 177 I can just go ahead and say print. 178 We'll change some of the variables 179 and do investigative study as well. 180 I'll just say iced tea and let's 181 go ahead and print this. 182 What do we get in return? 183 So I'll just go ahead and close this. 184 Open up an integrated terminal 185 just here, and with the Python 186 3, I want to run single file. 187 There we go. 188 Notice here we have iced 189 T, lemon T, iced peach T, 190 and lemon T all up here. 191 Okay, you might be having. 192 I do have some questions. 193 What is this? 194 T. 195 Can I call this one as 196 my underscore tea? 197 You will immediately 198 notice an error here. 199 The notice here, the error 200 says my T is not defined. 201 How can you say it is not defined? 202 Because this variable 203 actually comes from there. 204 Each individual item of the tea is 205 actually called this one here. 206 This is the syntax part. 207 So if I go ahead and call this as 208 myt, I have to call my variable 209 as myt, then it's all happy. 210 All right, so this part is all clear. 211 Now, this part shouldn't make 212 much of the trouble for you. 213 This is just any table. 214 In this case, since we call it 215 as list comprehension, 216 it expects that you will provide 217 a list, or in short array, 218 then comes up the condition part. 219 So this condition could be iced 220 here, but this could also be that. 221 Hey, if, maybe you want to check 222 for something different. 223 Notice here. 224 This one is also now getting 225 in trouble because we are 226 calling everything as myt, so you 227 should call this as well. 228 So right now we are checking 229 for iced in my tea, but I 230 can also go ahead and check if 231 my tea is or Mighty dot. 232 I can use the length operator, 233 or I can simply go 234 ahead and say, the length. 235 Not like that. 236 If the length of my tea is, 237 probably greater than, 10, 238 again, we can just calculate that. 239 But I want to see the result 240 of this as well. 241 So notice here, if I go ahead 242 for that, all of them are actually 243 bigger than 10, so that's great. 244 So, 1, 2, 3, 4, 5, 245 6, 7, 8, 9, 10, 11. 246 So we should actually try for 12. 247 Maybe we can get some different 248 result just to show you. 249 So there we go. 250 Now we have iced T and lemon T. 251 Because these are three 252 characters and they are 253 definitely more than 12. 254 So we only get the result 255 if we go ahead and change this sign. 256 They should be less than 12. 257 So what we're going to get. 258 And, I hope you get the power 259 of it, all right? 260 It's a pretty fun way 261 of writing the code, and it's 262 actually pretty understandable. 263 Now let's take this one here 264 or I'll actually go back 265 to the previous example. 266 That was pretty much more fun. 267 So this one. 268 Yeah, this one was 269 actually much more fun. 270 Let's go ahead and copy this 271 and compare with 272 the example that we have here. 273 So notice here, this one says 274 expression for item in iterable. 275 Now I hope this is much easier. 276 So this expression is 277 actually my tea here. 278 And then we have this 279 for matching up. 280 So item. 281 This is exactly the item we have 282 in iterable. 283 This menu is our iterable. 284 And the if condition. 285 The. 286 The whole condition part is up here. 287 So I can just go ahead 288 and wrap this up. 289 So this is whole condition part. 290 So. 291 Told you. 292 It looks weird at first, but once 293 you practice this a little bit more, 294 this will actually become 295 easier and you will see. 296 Yeah, this is actually much 297 fun way of writing Python 298 and easier as well. 299 Again, practice is the key, 300 but I hope I have done a good job 301 in making sure that you 302 understand each and every line 303 of list comprehensions. 304 That is it for this video. 305 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 List comprehensions in python.vtt",
      "originalPath": "genai-cohort/python/06 Chapter Subtitles/02 List comprehensions in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.004522909,
      0.0123290615,
      0.042472083,
      -0.0732246,
      -0.0044778497,
      -0.0066427365,
      0.00436547,
      0.018504944,
      0.0010665791,
      0.024623511,
      -0.009584861,
      -0.004392586,
      0.009803164,
      0.013950845,
      0.11915708,
      -0.004220828,
      -0.024695784,
      -0.008212252,
      0.015601168,
      -0.033321477,
      -0.00014429314,
      0.01575543,
      -0.006480143,
      -0.007068733,
      0.006662069,
      -0.010347649,
      0.014773927,
      0.01627454,
      0.025979962,
      -0.029097354,
      -0.013472922,
      0.009878118,
      0.00045030576,
      0.0035249796,
      -0.0042413557,
      0.017637875,
      0.0037008252,
      -0.01448174,
      -0.021592045,
      0.0152689135,
      -0.017347166,
      -0.002606692,
      -0.008902872,
      -0.02368276,
      0.021643195,
      -0.033311598,
      -0.0049241083,
      -0.018620694,
      -0.009046026,
      0.02389423,
      0.00725541,
      -0.0014890586,
      0.0073966947,
      -0.19183746,
      0.019713657,
      0.0054432177,
      -0.0031423247,
      0.0044485033,
      0.01334649,
      0.00915397,
      -0.007956291,
      0.0036570139,
      -0.023145424,
      -0.008604486,
      -0.044052277,
      -0.022689682,
      0.03073802,
      -0.0044623353,
      0.004032824,
      0.0011294237,
      0.009078179,
      0.01109914,
      -0.0008463563,
      0.0026829145,
      -0.018611336,
      -0.035396304,
      0.013500534,
      -0.0107712755,
      0.00904108,
      0.015503118,
      0.003624233,
      -0.0020360204,
      -0.01560712,
      0.008529366,
      0.008076073,
      0.013841809,
      -0.02430717,
      -0.017078077,
      -0.00093436806,
      -0.0064034034,
      -0.026008412,
      0.013367652,
      -0.026388269,
      0.0024462265,
      -0.018849272,
      -0.004816935,
      -0.0053863646,
      0.007442849,
      -0.0053453813,
      -0.0023771815,
      0.019833261,
      -0.018038174,
      -0.009097271,
      -0.006683275,
      0.009367783,
      0.013064714,
      0.012972085,
      -0.030892026,
      -0.012234775,
      -0.009713458,
      0.008549304,
      -0.0039318986,
      -0.00008452611,
      0.022625636,
      -0.011692919,
      -0.16080339,
      0.026138702,
      -0.00019591776,
      -0.030135414,
      0.0030319812,
      -0.018077802,
      -0.015917545,
      -0.0023638078,
      0.025405725,
      -0.0140483305,
      0.0021637501,
      -0.0042330474,
      0.028341623,
      -0.0024675997,
      -0.007070468,
      -0.017311744,
      -0.015754523,
      0.00862704,
      0.014961839,
      0.0013502033,
      -0.002047495,
      -0.014970539,
      -0.0067227576,
      -0.03098829,
      -0.00045387517,
      -0.017824529,
      0.020734036,
      0.0051632035,
      0.03243346,
      0.032439187,
      -0.01330161,
      -0.026820187,
      0.009613084,
      -0.007200786,
      -0.010505545,
      0.024557868,
      -0.0042166226,
      -0.016282052,
      -0.0046162712,
      0.014300691,
      -0.03201431,
      -0.011980289,
      0.017805882,
      -0.0077238968,
      -0.0066222553,
      0.010340883,
      0.0067076967,
      0.006441339,
      0.011020778,
      0.0062052933,
      0.0057862666,
      -0.023298379,
      -0.0015421999,
      0.008793523,
      0.013833657,
      0.011796341,
      -0.014415787,
      0.003776777,
      -0.019084197,
      -0.009608331,
      -0.011784311,
      0.00093216356,
      0.0010019703,
      0.019022102,
      -0.010951675,
      -0.01427976,
      -0.010641687,
      0.008434357,
      0.001378305,
      -0.0014392659,
      -0.0038622895,
      -0.022824883,
      0.006039436,
      -0.002201449,
      -0.0001876506,
      0.0021555012,
      0.0011255387,
      0.040501405,
      0.027547026,
      -0.008154207,
      0.0027792885,
      -0.0018993245,
      0.007473307,
      0.004207249,
      0.02041399,
      0.032394156,
      -0.022397289,
      -0.008145005,
      -0.0108372215,
      0.028742895,
      -0.016718967,
      -0.00057722116,
      -0.009224159,
      0.017367262,
      0.022403436,
      -0.012964349,
      -0.01276069,
      0.0084256865,
      0.001176335,
      0.027193008,
      -0.0058160564,
      0.01049873,
      0.0019764071,
      -0.016233342,
      -0.007877389,
      0.009030695,
      0.00029808236,
      0.013341844,
      0.018027492,
      -0.005283991,
      -0.008943291,
      0.018537333,
      0.004469611,
      -0.003449175,
      0.005492055,
      0.030109528,
      -0.0011169184,
      -0.0067131147,
      -0.012172582,
      -0.008146916,
      -0.0018013773,
      -0.003147623,
      0.022529854,
      0.026989361,
      -0.0024630215,
      0.011197633,
      0.009203507,
      -0.0039069094,
      0.0014147623,
      0.039283,
      -0.00083665084,
      -0.0036425013,
      -0.009970065,
      -0.021103889,
      -0.023555387,
      -0.028474743,
      -0.022550112,
      -0.014184891,
      -0.010870285,
      -0.000488856,
      -0.007878473,
      -0.020279465,
      -0.003911229,
      -0.0001551603,
      -0.021599654,
      -0.0021467693,
      -0.0162928,
      -0.020894818,
      -0.0077369343,
      0.018484,
      0.011165967,
      0.0031434805,
      0.018723775,
      0.010389208,
      0.006346752,
      -0.0014997616,
      0.004301625,
      0.0022606263,
      0.010740824,
      -0.01563598,
      0.019519826,
      -0.10899634,
      0.016387442,
      0.03621911,
      -0.0054903687,
      0.012039803,
      0.010640893,
      -0.0042648376,
      0.00952279,
      0.016270202,
      -0.0025506422,
      0.0050476547,
      0.0019278781,
      0.055527285,
      -0.029149855,
      0.0021440221,
      0.009185267,
      -0.0018714893,
      -0.020442188,
      0.025162483,
      -0.012001156,
      0.016152568,
      0.00021975515,
      -0.01846763,
      -0.023437878,
      0.010130056,
      0.00079590804,
      -0.024690934,
      0.018553855,
      0.011088518,
      0.0038463739,
      -0.0038673286,
      0.03168931,
      0.0017771537,
      0.0025207081,
      -0.0118737025,
      0.0055422587,
      0.003199422,
      0.012259037,
      -0.016110634,
      -0.015817596,
      0.031315815,
      -0.0039294213,
      0.02922011,
      0.03533473,
      0.00447818,
      -0.003422879,
      -0.009432555,
      0.0033905527,
      -0.0124311475,
      0.011760141,
      -0.009098405,
      0.0066372664,
      0.008762269,
      -0.0005155176,
      0.012971066,
      0.017406398,
      0.0016804719,
      0.001268626,
      0.008823553,
      -0.0011738879,
      -0.025971666,
      -0.00774838,
      0.0018700389,
      -0.021471256,
      0.015045322,
      0.009417908,
      0.0034060688,
      -0.010215227,
      -0.006339363,
      -0.0033821638,
      0.0024431287,
      -0.00015805245,
      -0.0016449172,
      -0.0046745157,
      -0.004398125,
      -0.0016508606,
      0.021247182,
      -0.016217364,
      -0.019864164,
      0.013508259,
      0.014106618,
      -0.0056313165,
      0.0020847074,
      0.010682316,
      -0.0035786286,
      0.010651985,
      -0.011183511,
      0.0020431785,
      0.0062813694,
      -0.008176343,
      0.005229662,
      0.020355258,
      -0.043101378,
      0.01198364,
      -0.026491223,
      -0.004330494,
      0.0028467032,
      -0.021949165,
      -0.006739363,
      0.024253745,
      -0.02699085,
      0.012073797,
      -0.016613407,
      0.020377597,
      -0.010536604,
      -0.0062423856,
      -0.01883501,
      -0.013649655,
      0.008889738,
      -0.026880413,
      -0.010934945,
      -0.012552862,
      -0.021955058,
      -0.00901341,
      -0.0028334062,
      0.009825819,
      0.011796391,
      0.001971308,
      0.009815818,
      -0.010900222,
      -0.0064204764,
      -0.0046204557,
      -0.0064838086,
      -0.0015340806,
      -0.009986026,
      0.005982057,
      -0.015502653,
      -0.010594878,
      -0.026016619,
      -0.037765764,
      -0.027493801,
      0.015057343,
      -0.005511426,
      -0.021356927,
      -0.0043701446,
      -0.006660615,
      0.021714998,
      0.028748749,
      0.02180938,
      0.018264718,
      -0.016613629,
      0.017065637,
      0.011932223,
      0.0070361835,
      -0.0021291669,
      0.012034802,
      -0.01533236,
      -0.0036370305,
      -0.00024571366,
      -0.02052276,
      -0.011134919,
      -0.014404518,
      -0.009819195,
      -0.007798504,
      0.003337938,
      -0.013381015,
      0.00086193293,
      -0.023671698,
      -0.021140689,
      -0.021123054,
      -0.009660617,
      0.015440621,
      0.0009147118,
      -0.0085205175,
      0.036108576,
      -0.005609897,
      -0.0101423785,
      0.008501647,
      -0.00065879297,
      -0.008476616,
      -0.005746269,
      0.0009976058,
      -0.03666408,
      0.006399098,
      0.03505577,
      0.0153005505,
      -0.00007272708,
      0.0075880745,
      0.01926365,
      -0.0011573787,
      -0.004038515,
      0.0042521236,
      -0.0059094396,
      0.00021353866,
      0.007784816,
      -0.0019475623,
      0.034571305,
      -0.0032490925,
      -0.026456388,
      -0.016819853,
      -0.009879179,
      -0.001055199,
      -0.005945954,
      0.015907139,
      0.0015839303,
      0.014242794,
      0.022556625,
      -0.0023138556,
      -0.0014307429,
      0.0032943354,
      -0.013478091,
      -0.007304839,
      0.0022445817,
      -0.001403977,
      0.0007569239,
      -0.0054926365,
      -0.010249093,
      -0.024590708,
      0.00635765,
      0.012926095,
      0.004137606,
      0.011203022,
      -0.0045864913,
      0.0041833045,
      0.015326586,
      0.01652671,
      -0.008210945,
      0.003935583,
      -0.011942443,
      0.016777258,
      0.011780614,
      0.0021984258,
      0.0021041727,
      -0.010454679,
      0.015152663,
      0.00062993064,
      0.005062622,
      -0.004610495,
      -0.0035072544,
      -0.020532575,
      -0.003166772,
      0.007992414,
      -0.002702881,
      0.029022729,
      -0.027011264,
      -0.00970376,
      0.024805605,
      0.02292576,
      -0.01953592,
      0.012231046,
      0.004645727,
      -0.018708153,
      -0.002877446,
      0.001293003,
      0.0018678751,
      0.004718829,
      0.005483096,
      -0.0009314507,
      -0.0067292643,
      -0.0067275865,
      -0.00078562053,
      0.0082986485,
      -0.010709085,
      -0.004569119,
      -0.013916371,
      0.015640942,
      0.0016915377,
      0.00081074913,
      0.0061750086,
      -0.00961824,
      0.006558128,
      0.015316956,
      0.0028269251,
      0.020174937,
      -0.014879322,
      0.0034252654,
      -0.0057718963,
      -0.023518844,
      0.010036942,
      -0.11433593,
      -0.015513279,
      0.011722789,
      -0.001890247,
      -0.014769649,
      -0.0075058746,
      -0.012930336,
      -0.012799566,
      0.009026817,
      0.004996767,
      0.017549615,
      -0.004672771,
      0.009570957,
      -0.012753607,
      0.015057428,
      -0.02491358,
      0.027273808,
      0.016460128,
      0.022068588,
      -0.015318305,
      -0.0072967364,
      0.016558532,
      -0.012535366,
      0.0051505696,
      -0.020921145,
      -0.013361364,
      0.014694338,
      0.006246598,
      -0.0060418225,
      -0.0019196315,
      -0.035070468,
      -0.005610144,
      -0.0005602937,
      0.02163376,
      -0.008997926,
      0.000017316417,
      -0.021272035,
      -0.015333358,
      0.036978092,
      -0.0066926647,
      0.0069072987,
      -0.006553872,
      0.022797253,
      0.017160904,
      0.018795101,
      0.034911856,
      0.02566083,
      -0.012593139,
      -0.02089764,
      0.027711896,
      -0.042751446,
      -0.024958525,
      -0.002166698,
      -0.011134121,
      -0.0077634417,
      0.011445995,
      0.008434038,
      -0.006827373,
      -0.009819438,
      -0.023074731,
      0.0066873413,
      -0.00054427446,
      0.027211716,
      0.037564162,
      0.004899128,
      0.0032142822,
      0.027783833,
      0.012514227,
      0.016006531,
      -0.009058653,
      0.018076807,
      -0.0021231766,
      0.011226255,
      0.012240832,
      0.011561639,
      0.013333787,
      -0.008844653,
      -0.0021830262,
      0.005094961,
      0.028226102,
      -0.029879626,
      -0.009147235,
      -0.044012036,
      -0.014717181,
      0.019036133,
      0.0035819958,
      0.015885191,
      0.021342777,
      0.0026037488,
      -0.0032055206,
      -0.00075670664,
      -0.017327603,
      -0.033947915,
      0.0033809086,
      0.014469312,
      0.019116666,
      -0.003084583,
      0.012255107,
      0.011382101,
      -0.006749204,
      -0.018134052,
      0.030745078,
      -0.008985598,
      -0.014779102,
      0.013679568,
      -0.023604805,
      0.026751332,
      0.009356617,
      -0.008437407,
      0.005042881,
      -0.00905641,
      0.000103893195,
      0.003807776,
      -0.14681727,
      -0.03538265,
      0.015926246,
      -0.0021650826,
      0.0030887944,
      -0.0009251444,
      -0.022028584,
      -0.024961393,
      0.017026993,
      -0.008706072,
      0.017916327,
      -0.012598476,
      -0.014161933,
      -0.009820785,
      0.03612809,
      0.14433585,
      0.007899807,
      0.0036377043,
      -0.017968437,
      0.011561821,
      -0.019106712,
      -0.014357798,
      -0.028969621,
      -0.0015313854,
      -0.01906142,
      0.00032894785,
      0.008831303,
      -0.013251905,
      0.0014747183,
      -0.000007679659,
      -0.019367954,
      0.008318272,
      0.0065670437,
      0.021446344,
      -0.008791487,
      0.011156611,
      -0.00905047,
      0.004202482,
      -0.006038476,
      0.0076891747,
      0.04118147,
      0.004278134,
      0.008556611,
      0.010949556,
      -0.0009793686,
      0.015933646,
      -0.011607722,
      -0.00890536,
      0.0009399107,
      -0.00200511,
      -0.0085592065,
      -0.062325906,
      0.011786407,
      -0.007018767,
      -0.0069569238,
      0.015154559,
      0.010279188,
      0.013654159,
      -0.007485679,
      0.015661692,
      -0.019563206,
      0.0025489505,
      -0.003762537,
      0.0077117695,
      -0.0077235145,
      -0.010725685,
      0.029463554,
      0.039559357,
      0.039225195,
      -0.021744287,
      0.016140517,
      0.03085005,
      -0.011526734,
      0.027775623,
      -0.0060357745,
      -0.010408902,
      -0.011200091,
      0.023336962,
      0.006935008,
      0.003101111,
      0.0017269992,
      -0.007818443,
      0.023435159,
      -0.033481706,
      0.02109019,
      0.001325292,
      -0.013885088,
      0.012190297,
      -0.008091353,
      -0.0039678556,
      -0.001764823,
      -0.009095738,
      -0.007063194,
      0.029767513,
      0.009363973,
      0.011287134,
      -0.0025991045,
      -0.02359309,
      0.02657549,
      -0.005391325,
      -0.021547178,
      -0.0018373556,
      0.004274914,
      -0.04666727,
      0.0022655658,
      0.018044405,
      0.00060019724,
      0.005188053,
      -0.0036822916,
      0.0021956156
    ]
  },
  {
    "id": "genai_cohort_python_03_Set_comprehensions_in_python_vtt",
    "content": "All right, so now that you are quite 2 comfortable with the comprehensions, 3 at least the list comprehension, 4 I will challenge you again. 5 Yes. 6 The whole part of learning 7 process is to take enough challenges 8 and help that so that 9 your brain exe start working. 10 So I'll throw up a relatively simpler 11 challenge first, and then I'll 12 give you a really complex challenge 13 and we'll ask you a question. 14 I'm pretty sure you'll get 15 it wrong at the first go. 16 Usually people does. 17 But that's okay. 18 You will learn a lot in this one. 19 So let me take you 20 on the screen directly. 21 And we're going to just work with, 22 the comprehensions first. 23 So this comprehension next is going 24 to be the set comprehension. 25 So 02 set compre py. 26 All right, good enough. 27 Fair name. 28 So how does the set 29 comprehension work? 30 And you will be surprised 31 to know the set comprehension is 32 almost exactly. 33 Not almost exactly. 34 It is exactly same. 35 It works with the same thing 36 expression for item 37 in iterable if condition. 38 So you might be wondering, 39 all right, it goes exactly same. 40 So what can go wrong with this one? 41 This thing, the first bracket 42 that makes it as a list. 43 So if you go ahead and change this 44 to just like this, it becomes a set. 45 Is it that much? 46 Yes, literally is. 47 But now we are going to focus 48 more on this one expression. 49 What does this. 50 This expression means? 51 And you will get more clarity on 52 the lists as well with this example. 53 That's interesting. 54 Let me show you this. 55 So let's go up here. 56 We'll have a simple, the most 57 basic example first. 58 So let's just say we call this as, 59 favorite, favorite choice. 60 There we go. 61 Favorite choice. 62 And this is going to be a list. 63 And again, this guy got up again. 64 So this is how we have it. 65 All right, let's just say the first, 66 we have couple of lines of this. 67 So let's just go with the easy one. 68 Sub. 69 So this is my masala chai. 70 Then we have green T. 71 And let's just assume 72 this is my orders. 73 So I said masala chai again. 74 And let's just say we have more. 75 Although lemon is also my favorite. 76 But let's just say 77 I've ordered it less. 78 Lemon chai. 79 Lemon chai doesn't sound great. 80 I actually prefer lemon T to call it. 81 Don't know, for some reason. 82 We have another one 83 which is green, T. 84 And then we have, maybe lichi, chai. 85 All right, so we can see if we have 86 this favorite chai as a list. 87 We have masala chai. 88 Oh, that's Two times we have green T 89 which is also two time. 90 I don't prefer green T but let's 91 just say if we want to find out 92 how many unique chais are there. 93 So definitely masala chai is 94 one unique green chai is 95 another one Lemon and Elijah. 96 So these are unique teas. 97 How can I find a unique ones? 98 Whenever there is an idea 99 of unique ones, you go with the set. 100 So how does the set work? 101 I'll just go ahead and say this is 102 uniquechai and pretty easy if you 103 know the comprehension that should 104 be easy and expression for item 105 in iterable if condition. 106 So let's not focus much 107 on the expression first. 108 Let's start always with 109 for item in iterable if condition. 110 So this is how the value should 111 be read or this is how 112 you should write it for item 113 in iterable if condition. 114 So we'll also do this one and most 115 of the time you'll see people 116 actually does exactly same. 117 So we'll just go ahead and say for 118 chai in favorite chai's and then 119 we write the if condition. 120 So I'll just go ahead and say 121 for chai in chai's and then the same 122 for chai in favorites 123 and automatically I don't have 124 to put any if condition here. 125 I can, I will do that in later on. 126 But if I go ahead and do this 127 for chai in favorite chais 128 automatically whatever is coming up. 129 And since we have started 130 with the curly braces, I don't 131 have to write much if condition 132 automatically the unique 133 values will come to me and I 134 just have to store this. 135 So what we are calling this so chai 136 so whatever is the final value. 137 Remember the keyword here, final 138 expression which is evaluating. 139 This is what we write 140 at the very top. 141 So automatically don't 142 have to do anything. 143 I hope you get the idea what 144 or where I'm going with this. 145 So if I go ahead and print out the 146 unique chai, I hope you got the 147 answer that if I go ahead and say 148 Python 3 let's just run 02 and 149 there we go, we got all the unique 150 values. 151 Now surely I can go ahead and 152 write this that hey, just say 153 there is an if condition and I 154 go ahead and say calculate the 155 length of same example, length 156 of the chai then what do I want 157 to do? 158 If it is greater than 8, 159 then we'll go ahead and do this. 160 Surely there's a lot of ways 161 how you can work with this. 162 You get the idea, you 163 are now getting it. 164 Probably 8 is everything 165 is greater than 8. 166 Anything less than 8 167 probably will get nothing. 168 But I would love to save this 169 and run this one more time. 170 So we got the empty set. 171 You can't see it. 172 There we go. 173 So we got the empty set in this one. 174 So again, there could be many ways 175 of doing this, but, you got 176 the idea that how this is being 177 done and how you can have 178 the unique values onto this one. 179 So I'll just remove this if part 180 because it is not required. 181 But now you understand 182 the syntax of it. 183 But the most important 184 part now, which will confuse you 185 for a moment, but you'll get 186 more clarity into this one. 187 Let me just go with this. 188 The thing that will confuse 189 you next is going to be something 190 a little bit complex. 191 So you got the idea 192 how the syntax works. 193 So expression for item in iteratable. 194 If condition. 195 If you have the condition, 196 that's great. 197 Sometimes you can avoid it. 198 We just saw an example. 199 But what goes in this expression? 200 Okay, we have seen this, 201 that whatever you write 202 it here goes up here. 203 But what if we have 204 some complex example? 205 I'll write a complex example for you. 206 So let's just say we have recipes. 207 And this recipes is a dictionary. 208 What does dictionary does? 209 It has a key value pair. 210 So we have a, masala chai. 211 And the value is going 212 to be an array. 213 Very interesting. 214 So we have ginger. 215 There we go. 216 Another masala that 217 we have is cardamom. 218 And the last one that 219 we have is clove. 220 All right, we'll have a comma, 221 and we'll duplicate it two times. 222 So this time. 223 Oh, this should be 224 masala, not masal chai. 225 This one is going to be elaichichai. 226 And for the lychee, we 227 are using cardamom. 228 And the next one. 229 Oh, this should be cardamom. 230 Again, ignore the typos. 231 This one is having milk, but we 232 don't have anything else. 233 Again, this could be. 234 This is just recipe. 235 It could be anything. 236 All right, the last one that 237 we have is going to be spicy. 238 For the spicy chai, we 239 definitely want to put ginger. 240 We don't want to put cardamom. 241 We will put black pepper. 242 That's going to be very, very spicy. 243 And clove is also good. 244 So very spicy chai. 245 All right, so we have a recipe. 246 Now. 247 We want to find 248 all the unique spices. 249 Yeah, this one is complex. 250 You get the idea. 251 All right, so ginger is the one, 252 but ginger is also here. 253 So we need to figure out a way 254 how we can find out all the unique, 255 spices into this one. 256 So first, let's go ahead and work 257 with the unique, spices. 258 So can we go ahead for 259 the uniqueness, since the keyword is 260 unique, can we use this one? 261 All right, now all we have 262 to do is write comprehension. 263 Now here's the interesting part. 264 We actually will use 265 the underscores here. 266 Many of the underscores, because 267 we are about to fill this. 268 All right, the step one 269 is loop through it. 270 So I'll just go ahead and say 271 for ingredients in recipe. 272 So if you go ahead and work 273 with this recipe, this is a key 274 value pair, and you are not 275 iterating through it right now. 276 You are just referencing it. 277 It's not directly iteratable. 278 But I know one thing that if I 279 have a dictionary, if I put up 280 a dot here, I can access all 281 the keys or the values if I go 282 ahead and run the values like 283 this. 284 Now I have all the values. 285 So first iteration will go 286 like this, the second will 287 go like this, and the third 288 one will go like this one. 289 But if I go ahead and just 290 say keys, then I'll iterate 291 over this guy first, then this 292 guy, and then this one. 293 All right, so then the step 294 one, I'm actually going through 295 with all this value. 296 Let me go ahead and get 297 more room for myself. 298 So this is the part one. 299 All right. 300 Notice here we says for item 301 in iterable, and then we have 302 always seen the if condition. 303 Now, it doesn't always need 304 to be if condition. 305 You can actually write 306 more code after this. 307 This is the interesting part, 308 but everywhere the syntax is same. 309 So once I'm inside this, 310 now I'm iterating, I'm going 311 through with this one. 312 So can I run a loop 313 on this one as well? 314 And yes, you can. 315 You can just go ahead and say 316 just a space and say four. 317 And let's call this 318 one as a spice in. 319 And I, will call this one as 320 ingredients, because remember, you 321 are targeting this as ingredients. 322 So for spice, that means for 323 each item in this is what we are 324 referencing as ingredients. 325 Got it. 326 Very interesting way 327 of writing the code. 328 But the bigger question here 329 is what should I write 330 in place of this underscore? 331 Should I write ingredients 332 or should I write spice? 333 Go ahead and vote for it. 334 I would wait for it. 335 Try this out. 336 This is very fun. 337 Now most of the people will 338 say ingredients, because 339 this is what we have seen. 340 Whatever we write here, 341 we go ahead and use it in expression 342 if we are using item. 343 So we go ahead and write 344 in the expressions here, we have 345 seen mighty, always mighty. 346 Goes up here. 347 But no, this is not correct. 348 This is not how it works. 349 Whatever the ultimate value you 350 return from this whole thing 351 is actually going in the expression. 352 So whatever the whole thing you are 353 trying to use or trying to go with 354 this, that actually ultimate goes. 355 So ingredients in this 356 case is a middleman. 357 We are just using it 358 for storing a temporary value inside 359 this, and ultimately we 360 are checking it for spice. 361 So the value that will go here 362 is going to be spice here. 363 There we go. 364 And I, know this is a lot. 365 That's why I say initially, 366 it is very tricky 367 to understand the comprehension. 368 But after watching this video, 369 you'll realize, 370 okay, this is a very extreme case. 371 And that's why I'm here to teach 372 about the extreme cases. 373 Now, if I go ahead and simply 374 say that I want to print, 375 the unique spices, 376 I hope we'll get the results. 377 So I'll just go back 378 onto this syntax. 379 All right, let's open this 380 up and try to run this. 381 And notice here we got 382 the clove, cardamom, ginger, 383 black pepper, and milk. 384 We were able to get 385 unique values out of it. 386 Very interesting aspect of dealing 387 the things, especially when we 388 have these set comprehension. 389 I'm pretty sure you have not seen 390 anybody going this much depth in 391 this, but this is a very use case. 392 It took us some time to actually 393 figure out this use case, 394 but now you have more confidence. 395 All right, I truly understand 396 what goes inside this. 397 And every single time. 398 Now I'll write this syntax 399 of comprehension. 400 I'll go and start with a loop 401 first, because this is. 402 Or this can be filled later on. 403 So I hope this was, 404 a pretty fun exercise for you. 405 Please do rate us for this 406 particular video as well. 407 That. 408 All right, you enjoyed this video. 409 You learned quite a lot. 410 Little bit uncomfortable, 411 but you learned a lot. 412 That is it for this video. 413 Let's catch up, in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 Set comprehensions in python.vtt",
      "originalPath": "genai-cohort/python/06 Chapter Subtitles/03 Set comprehensions in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.012827497,
      -0.008092574,
      0.044481546,
      -0.069770195,
      0.004770943,
      -0.01123822,
      0.0074541676,
      0.04076505,
      0.0056064483,
      0.016163347,
      -0.009548948,
      -0.022300363,
      0.0045141485,
      0.02774504,
      0.10685163,
      0.009552971,
      -0.022136679,
      -0.014369884,
      0.007208547,
      -0.02193555,
      0.008167469,
      0.0048164446,
      -0.0037750239,
      0.0010639834,
      0.0005503031,
      -0.015803976,
      0.00066485285,
      0.015810383,
      0.0153179215,
      -0.029067071,
      -0.011796149,
      0.01252005,
      0.011178763,
      0.019740922,
      -0.005480786,
      0.02606649,
      0.016444262,
      -0.012792012,
      -0.01872345,
      0.0069252895,
      0.0020174037,
      0.01047636,
      0.013447594,
      -0.0060906657,
      0.00090346165,
      -0.042977203,
      -0.013543852,
      -0.008664759,
      0.012518518,
      0.021336434,
      0.0069827936,
      0.0033295243,
      -0.004141745,
      -0.1792515,
      0.028743086,
      0.0006339806,
      0.000031780102,
      0.009284525,
      -0.0037212765,
      0.009736457,
      -0.01348208,
      0.02145403,
      -0.04401821,
      -0.026137697,
      -0.021762552,
      0.0035959654,
      0.024107443,
      -0.020142721,
      -0.0069439122,
      -0.0074446294,
      0.0042922716,
      -0.00095483026,
      -0.0003729046,
      -0.021558594,
      -0.012518625,
      -0.043256454,
      -0.0038874464,
      -0.015799182,
      -0.02085961,
      0.0016765444,
      -0.004296366,
      -0.0058767046,
      -0.0001394972,
      0.013359585,
      0.003731736,
      -0.004344436,
      -0.028418416,
      -0.005094851,
      0.0085943695,
      -0.003969137,
      -0.0232691,
      -0.00047626774,
      -0.02076097,
      0.006742212,
      -0.0009260411,
      0.0027767054,
      -0.0011043806,
      0.0074449694,
      -0.0027600352,
      0.0089773815,
      0.00037932026,
      -0.009223799,
      -0.0060286024,
      -0.028089197,
      0.0051477873,
      0.0025731442,
      0.00887176,
      -0.039883893,
      -0.011031998,
      0.0068853525,
      -0.0042345137,
      -0.015261121,
      0.006310824,
      0.01118157,
      0.010652243,
      -0.1778251,
      0.0013450127,
      0.008318846,
      -0.032783754,
      0.04312346,
      -0.008482635,
      -0.009921918,
      0.015764376,
      0.016102869,
      -0.020563575,
      0.0070608626,
      0.002666596,
      0.001914686,
      -0.0031745792,
      -0.013123947,
      -0.0069382256,
      -0.025853982,
      0.0024412584,
      0.009618138,
      -0.00075893337,
      0.013326054,
      -0.009946835,
      -0.012190032,
      -0.020243118,
      -0.0035701932,
      -0.012887919,
      0.008915238,
      -0.008542582,
      0.01961095,
      0.018726107,
      -0.0032502925,
      -0.013519431,
      0.02401761,
      -0.012736631,
      -0.0053695575,
      0.012227876,
      -0.016069937,
      0.0014434922,
      0.004676616,
      0.017988818,
      -0.030639974,
      -0.008398639,
      0.018559467,
      -0.009060071,
      -0.0015585577,
      -0.017014159,
      0.0069751176,
      0.00050406787,
      0.0061809653,
      -0.005765208,
      0.0135524,
      -0.01062724,
      -0.011073295,
      0.025308272,
      0.009942268,
      0.015773151,
      -0.01537726,
      0.021698603,
      -0.009008299,
      -0.01739476,
      -0.019432755,
      0.0007675041,
      0.019723449,
      0.00501972,
      -0.0013559337,
      -0.007275002,
      -0.024314646,
      0.006158739,
      -0.00032328558,
      0.015390221,
      -0.010704218,
      -0.023738448,
      0.007894194,
      0.0020984805,
      -0.013885806,
      0.005634055,
      0.016798401,
      0.033324193,
      0.024190076,
      -0.0063732686,
      -0.008302023,
      -0.0058624307,
      0.01782887,
      0.0069008213,
      0.0062260353,
      0.022326982,
      -0.012078272,
      -0.010035699,
      -0.017286602,
      0.027278414,
      -0.0069966926,
      0.0040343488,
      -0.009738027,
      0.011379461,
      0.0011206943,
      -0.01682568,
      0.0027470519,
      0.017405089,
      0.008519277,
      0.015468498,
      0.0012948128,
      0.02078997,
      -0.0002770332,
      -0.010149805,
      -0.018554525,
      0.00481799,
      0.0088983895,
      0.014816832,
      0.0041063186,
      -0.001706313,
      -0.0056079444,
      0.0133601865,
      0.0036593587,
      -0.000035733632,
      0.0170827,
      0.019864216,
      0.006820288,
      -0.016915781,
      -0.017068304,
      -0.010768216,
      0.0032578572,
      -0.021641193,
      0.02782467,
      0.029542502,
      -0.0041014766,
      -0.0035823307,
      0.013928365,
      0.0071191858,
      -0.0019165844,
      0.02295429,
      -0.005300169,
      -0.0041517573,
      0.00018830992,
      -0.0035723215,
      -0.018691156,
      -0.009888646,
      -0.021650013,
      -0.005838966,
      -0.02804103,
      0.0011202109,
      -0.017318193,
      -0.02129339,
      -0.006576313,
      0.0041122558,
      -0.010094691,
      -0.008331295,
      -0.008862236,
      -0.018119657,
      -0.024182009,
      0.008790333,
      -0.0069836127,
      0.0074477457,
      0.018555125,
      0.010822496,
      0.0107707605,
      0.0016572907,
      0.008944823,
      -0.004224919,
      0.009605398,
      -0.019660158,
      0.0044768527,
      -0.11247589,
      0.0027042327,
      0.01253133,
      -0.021996217,
      0.008051457,
      0.012948114,
      0.005574607,
      0.017739292,
      0.008264219,
      0.010699512,
      0.0027958895,
      -0.0103097465,
      0.04851187,
      -0.03401227,
      -0.0035131674,
      0.0038970425,
      0.005678116,
      -0.025108093,
      0.022068048,
      -0.0012191948,
      0.009406744,
      -0.012423183,
      -0.004949299,
      0.0013912494,
      0.010221303,
      0.022274105,
      -0.011570187,
      0.032978814,
      0.010550518,
      -0.0022352962,
      -0.007300675,
      0.022738863,
      -0.0014239887,
      0.016523978,
      0.0054267626,
      0.0042978004,
      -0.0005554558,
      -0.0067985905,
      -0.008074339,
      -0.017051997,
      0.036083132,
      0.0015927925,
      0.0147581,
      0.037727643,
      -0.009085234,
      -0.009619036,
      -0.01712257,
      -0.0016853942,
      -0.016738586,
      0.009444759,
      -0.0058189016,
      0.0005762244,
      0.0010154706,
      -0.013724633,
      0.0120255025,
      0.011360311,
      0.006857192,
      0.009968779,
      -0.0050909757,
      0.012630649,
      0.0020216275,
      -0.00009644363,
      0.015029364,
      -0.014680374,
      0.0016853799,
      0.011114802,
      -0.0021793768,
      -0.023296854,
      -0.0095712105,
      0.014014427,
      0.0008723815,
      -0.0045828195,
      0.0012760562,
      -0.008543114,
      0.0060580843,
      -0.0071577695,
      0.018886829,
      -0.01978683,
      -0.028655497,
      0.01298335,
      0.010839838,
      0.0011915063,
      0.004385253,
      -0.0012649638,
      0.002165347,
      0.016795298,
      0.009461754,
      0.007707654,
      0.0074744513,
      -0.0032584267,
      0.0042713173,
      0.013764101,
      -0.037069045,
      0.0058325315,
      -0.040049437,
      0.0068954737,
      -0.0003652071,
      -0.033266634,
      0.0016738679,
      0.01704126,
      -0.022629175,
      0.005076376,
      -0.019591723,
      0.0071092164,
      -0.012338493,
      0.008293309,
      -0.023554847,
      -0.016619094,
      0.0077936165,
      -0.022495644,
      -0.007002046,
      -0.0010061598,
      -0.005660138,
      -0.022246268,
      -0.021185584,
      0.006673828,
      0.011615931,
      0.0040052617,
      0.02237968,
      -0.011639646,
      0.020074554,
      0.005539228,
      0.0054804543,
      0.001576148,
      -0.0051093237,
      0.0028169053,
      -0.022909429,
      -0.018307883,
      -0.021151666,
      -0.027645761,
      -0.028194036,
      0.023046376,
      -0.00938337,
      -0.019251661,
      -0.00878278,
      -0.0061611068,
      0.015251017,
      0.006530601,
      0.021009177,
      0.013514446,
      -0.014929259,
      0.008485898,
      0.01433823,
      0.026441785,
      0.0012635752,
      0.024260717,
      0.0043485123,
      -0.016924355,
      0.0073016984,
      -0.023328653,
      -0.012612484,
      -0.022926645,
      -0.01909877,
      -0.013472792,
      0.0052475217,
      -0.009569228,
      -0.00092188077,
      -0.018958444,
      -0.02603378,
      -0.009334184,
      0.006463371,
      -0.007475167,
      -0.022175971,
      -0.008291283,
      0.022170078,
      -0.016447173,
      -0.0020873821,
      0.02166652,
      0.007512458,
      -0.0028441749,
      -0.000006396168,
      -0.0008715523,
      -0.039686088,
      0.016226562,
      0.017644243,
      0.025517087,
      0.016750993,
      0.01469437,
      0.02002007,
      0.010961431,
      0.0038711918,
      -0.005334699,
      0.0048244745,
      -0.006804688,
      0.007443808,
      0.021491673,
      0.02491169,
      -0.01245367,
      -0.02737237,
      0.0005135735,
      0.0021762464,
      -0.009315206,
      -0.003682555,
      0.02817797,
      0.010040431,
      0.03164885,
      0.007489995,
      -0.0010170203,
      0.011648485,
      0.012354966,
      -0.005076774,
      -0.0031571987,
      0.0014061541,
      0.007059908,
      0.0075892196,
      -0.01190444,
      -0.004798641,
      -0.017419755,
      0.011723188,
      0.0065646386,
      0.00035088247,
      0.013970636,
      -0.013623044,
      -0.0011595305,
      0.017832577,
      0.025597434,
      -0.013270747,
      0.0060627535,
      -0.011932517,
      0.0036757945,
      0.018292967,
      -0.004175009,
      -0.0101231,
      -0.0036059034,
      0.009143917,
      -0.00060326274,
      0.026394965,
      0.016807232,
      -0.003541011,
      0.008976425,
      -0.017549166,
      -0.0009285007,
      -0.003250832,
      0.016460843,
      -0.025978377,
      -0.0051906686,
      -0.0037625062,
      0.031692374,
      -0.0077602533,
      0.0215939,
      -0.010842407,
      -0.020093711,
      -0.0056825075,
      0.00014066724,
      -0.016425822,
      -0.00895417,
      0.00044613803,
      -0.0022108785,
      -0.010282889,
      -0.011703402,
      0.0035333412,
      0.012776493,
      -0.011272589,
      -0.0028750538,
      -0.015078862,
      0.026117928,
      0.00970267,
      -0.004264944,
      0.009067535,
      -0.009984682,
      0.013769766,
      0.015206896,
      0.0056214384,
      0.011447356,
      -0.0018807574,
      -0.015594288,
      -0.01269032,
      -0.0353019,
      -0.013429734,
      -0.111556895,
      -0.010736643,
      -0.006051886,
      0.014844916,
      -0.02572638,
      -0.0044061774,
      -0.0030082925,
      -0.009593106,
      -0.0043556197,
      -0.0011325725,
      0.018804617,
      -0.0068630297,
      0.011652238,
      -0.009670048,
      0.014065648,
      -0.034037452,
      0.03171716,
      0.027705805,
      0.015424158,
      -0.005713283,
      -0.012197919,
      0.006531797,
      0.0068061557,
      0.0063768714,
      -0.022234183,
      -0.010926832,
      0.014610722,
      0.0076758363,
      -0.009714292,
      -0.01333971,
      -0.026853926,
      0.008705709,
      0.012469155,
      0.015654529,
      -0.0092056,
      -0.0115706455,
      -0.023177674,
      -0.017449478,
      0.028125701,
      0.011380545,
      -0.0033396368,
      0.0052969786,
      0.032876942,
      0.014673302,
      0.011704536,
      0.020624543,
      0.03598993,
      -0.0127864,
      -0.0037010894,
      0.02799867,
      -0.02875396,
      -0.01306693,
      0.0040419865,
      -0.0057016914,
      -0.022248138,
      -0.01039077,
      0.013681252,
      -0.006916033,
      0.009523286,
      -0.008582334,
      0.01347042,
      0.011022525,
      0.008180998,
      0.039069768,
      -0.0042580804,
      -0.013890825,
      0.012898623,
      0.0043894565,
      0.015877703,
      -0.004496185,
      -0.0005362629,
      0.005018493,
      0.0013597559,
      0.026620248,
      0.005323004,
      0.017650845,
      0.00016760381,
      -0.01205275,
      -0.011187216,
      0.018902628,
      -0.011520933,
      -0.00848129,
      -0.04561736,
      -0.017643835,
      0.0071968534,
      0.0056665908,
      0.004691457,
      0.027317496,
      -0.013763312,
      0.002160541,
      0.007614262,
      -0.032304097,
      -0.03248199,
      0.00050012424,
      0.009169289,
      0.008522889,
      -0.02108811,
      0.014009487,
      0.008072406,
      -0.014542028,
      -0.011918166,
      0.021352634,
      0.0053141126,
      -0.0021306823,
      0.009628373,
      -0.01731006,
      0.021704078,
      0.010616537,
      -0.0013016738,
      0.00017988402,
      0.0029586584,
      0.006894031,
      0.016519982,
      -0.13989866,
      -0.026021868,
      0.0042496133,
      -0.0031572732,
      -0.0043862243,
      -0.0029356694,
      -0.0065569747,
      -0.024910359,
      0.0069116554,
      -0.012649189,
      0.01113643,
      -0.025973026,
      -0.0073653683,
      -0.014464191,
      0.04819633,
      0.14698423,
      -0.009949663,
      0.012985319,
      -0.02126455,
      0.0030951656,
      0.0030267222,
      -0.0278024,
      -0.017626293,
      0.005027872,
      -0.0011380111,
      0.0075919465,
      0.009424976,
      -0.02396095,
      0.0045545665,
      0.011156328,
      -0.02467232,
      -0.00033847566,
      0.011424212,
      0.029089093,
      -0.005389364,
      -0.012456986,
      -0.0054235826,
      0.014120584,
      0.0015393045,
      0.00043511856,
      0.036304817,
      0.017490184,
      0.012398992,
      -0.0015517407,
      0.0034176558,
      0.007616997,
      0.00698381,
      -0.007585301,
      0.0049326345,
      -0.0132882055,
      -0.013263497,
      -0.066288024,
      0.0067587374,
      -0.007371933,
      -0.0069465847,
      -0.00799517,
      0.016189495,
      0.012312364,
      0.008793701,
      0.0069318423,
      -0.01689263,
      0.002751875,
      0.0062581007,
      0.018948443,
      -0.0038770365,
      -0.004822371,
      0.0058302754,
      0.026649559,
      0.037823416,
      -0.014789769,
      0.00266336,
      0.042076435,
      -0.019624967,
      0.020821573,
      -0.01054866,
      -0.0009898976,
      -0.022279484,
      0.024084179,
      0.008828681,
      0.0039167255,
      -0.006210959,
      -0.01430519,
      0.009289739,
      -0.020979814,
      0.03651353,
      -0.0039151143,
      -0.012295589,
      0.006031559,
      0.0072455127,
      -0.024352469,
      0.0050624157,
      -0.002940355,
      0.0086066965,
      0.0014306516,
      0.012705038,
      0.024126902,
      -0.0040085083,
      -0.023374086,
      0.030822335,
      0.009541679,
      -0.029012,
      0.00034018644,
      0.009044463,
      -0.042936135,
      0.0019174174,
      0.022388015,
      -0.007036932,
      0.016538681,
      -0.0009534343,
      -0.0008475614
    ]
  },
  {
    "id": "genai_cohort_python_04_dictionary_comprehensions_in_python_vtt",
    "content": "All right, so we have seen quite 2 a lot and I hope you are having fun 3 with the comprehensions. 4 And now what I want you to do is 5 let's go ahead and work with 6 the dictionary as a comprehension, 7 which is very interesting actually. 8 I don't have too much 9 of the tricks remaining with me 10 in the comprehension. 11 Just one more. 12 But it will help you to understand 13 dictionaries like quite 14 in detail and quite in depth. 15 So I have created a new file which 16 I've called it as dictcompre for py. 17 Very innovative name. 18 And let's call this one as. 19 Okay, so how does 20 the dictionary actually works? 21 So let's just go ahead 22 and copy this one. 23 So this is my dictionary 24 and I want to work with this. 25 And the thing with the dictionary is 26 that you can actually 27 go ahead and copy this. 28 The set also works with the curly 29 braces, and dictionary also 30 works with the curly braces. 31 The only difference is how you 32 store the value as a final 33 expression, if this expression is 34 actually a key value pair. 35 So if we have a key and then a value. 36 So if we are storing this as 37 an expression, this will 38 be treated as dictionary. 39 Otherwise this is regular one. 40 And I'll show you one. 41 Really nice and a neat 42 example for this one. 43 You'll love the example. 44 So let's just say we go back and we 45 have some of the tea prices. 46 So let's just say tea prices. 47 And we have all these prices 48 in inr, which is Indian rupees. 49 And I have a dictionary. 50 And for this dictionary, let's 51 just say we have masala chai, 52 which is right now 40 rupees. 53 It will be really pennies 54 in the dollars. 55 But we'll just do that. 56 We also have green, chai or 57 green T actually sounds better. 58 And then we have the green T, 59 which will be, let's just say 50. 60 And then we have one more. 61 We'll just have three. 62 You can add more if you wish to have. 63 I'll have lemon T. 64 Again, favorite one. 65 And this is bit expensive. 66 Let's just say 200. 67 All right, now here's the thing. 68 I want to convert all 69 of these prices into dollars. 70 So all the prices needs 71 to be divided by 80. 72 80 rupees. 73 It is general average right now. 74 How can I do this? 75 I have to create a fresh dictionary. 76 So comprehensions comes 77 really handy in this case. 78 And we'll directly write them just 79 like we have learned right now. 80 I'll just go ahead and say, but this 81 time this is in USD and the way how 82 it works again Same just like list. 83 We go like that. 84 And first of all we keep them as 85 underscore because I don't know 86 what to fill this up here. 87 I'll just go ahead and say 88 for and then I have to loop through. 89 So far we have been going through 90 with only, one item itself. 91 But now we want to worry 92 about key as well as value. 93 So I have what's come back as 94 a return value are two things. 95 I'll call them as tea and price. 96 This is just my regular loops, 97 nothing fancy in this. 98 And I have to say 99 in and then tea price is inr. 100 This is the looping part of it. 101 All right, let's get 102 more space for us. 103 And then what you want to do 104 in this, I want to go 105 ahead and take, the prices. 106 So for this I have to actually grab 107 all of this value. 108 So if I go ahead and say just the tea 109 prices inr it's not going to work. 110 I have to say either 111 dot keys or dot values. 112 Or if I want to grab both of them, 113 I have a method for that. 114 We studied that 115 that is known as items. 116 I have to run this. 117 So I have got now the whole thing. 118 So in each of the tea prize, I get 119 this one in the first iteration, 120 this one in the second one, 121 and this one in the third one. 122 All right, got it. 123 But what we're going to put 124 this here and it hasn't. 125 We haven't yet divided 126 it back with the price. 127 So how we're going to get it. 128 So this is where 129 the expression comes up. 130 Expression is something 131 that you want to return. 132 In this case, I want 133 to return tea as a price. 134 tea and a price here. 135 So the way how I'm going to store 136 this, I'll call this one as a tea 137 then colon and then the price here. 138 So this will be exactly. 139 We have done nothing. 140 We have just looped through it, got 141 the value and we're storing it. 142 But I can do something interesting. 143 I can just go ahead 144 and divide the price 80. 145 So before saving the price, 146 now this will be evaluated. 147 This is an expression which will 148 be evaluated and you will 149 get all the prices in dollars. 150 So told you comprehension are a way 151 of shrinking your code. 152 It makes logic everything. 153 You just have to start reading 154 from the for loop always and always. 155 And then whatever comes back, 156 this is always towards the end 157 the expression says something 158 like this, for all of my 159 items here in the tea prices 160 get me back tea and prices. 161 This is I'm sending back 162 and then I'll just divide it 163 by 80 super easy. 164 But really fun. 165 Told you it's really fun. 166 And. 167 And in the very last I'm going 168 to go ahead and print 169 the tea prices in the USD. 170 Let's go ahead and grab it like this 171 And I will love to run Python. 172 Python. 173 And this time we are running.03. 174 There we go. 175 So I told you it's 176 almost like pennies. 177 So 0.5 which makes sense. 178 80. 179 So this is 0.5 and then we have all 180 of this in this and surely 181 you can use your backticks. 182 You can use your formatted strings. 183 Not backticks, the formatted strings. 184 Whatever you wish to have. 185 You can just go ahead and work 186 with this super easy. 187 But I hope you are now 188 somewhat in there between that. 189 Okay, I'm getting it. 190 I'm started to loving it 191 but I still need more practice 192 and that is totally fine. 193 That is totally okay. 194 So this was it. 195 This was all about your 196 dictionary comprehensions. 197 Hope you enjoyed it. 198 Do rate us. 199 Let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 dictionary comprehensions in python.vtt",
      "originalPath": "genai-cohort/python/06 Chapter Subtitles/04 dictionary comprehensions in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0012274248,
      -0.012065084,
      0.025886234,
      -0.061156683,
      0.00050945807,
      0.006421368,
      0.016239878,
      0.0108026005,
      -0.002533219,
      0.016149612,
      -0.018507801,
      -0.01816357,
      0.010966591,
      0.013968776,
      0.11196801,
      0.003829723,
      -0.013218234,
      0.0077583413,
      0.009516742,
      -0.02547957,
      -0.002451075,
      0.0047224783,
      0.0071140374,
      -0.014470505,
      0.008198334,
      -0.011473271,
      0.009680341,
      0.012384565,
      0.02052912,
      -0.016521847,
      -0.016300103,
      -0.0009435057,
      0.014451455,
      0.016728198,
      -0.0051515154,
      0.003423994,
      0.004688461,
      0.0052665947,
      -0.02452181,
      -0.00023070571,
      -0.010048618,
      0.023509793,
      -0.007070621,
      0.0048044706,
      0.020654038,
      -0.03042222,
      0.000066920875,
      -0.0067821397,
      -0.01404926,
      0.03451737,
      0.0110206455,
      -0.0037241336,
      0.0038187045,
      -0.18219845,
      0.014322845,
      0.023699839,
      -0.0067937938,
      0.0020012783,
      0.018108118,
      0.01248976,
      -0.01857926,
      0.013532138,
      -0.04646403,
      -0.0014274617,
      -0.016596366,
      -0.026325433,
      0.011645656,
      0.0007802347,
      -0.017838914,
      -0.007872853,
      0.011114741,
      0.00069970026,
      -0.011206706,
      0.0038661654,
      -0.0039981953,
      -0.027533822,
      0.005492822,
      -0.00682911,
      -0.010232866,
      0.018982328,
      -0.0065692994,
      -0.0029980585,
      -0.001462075,
      0.021780854,
      -0.005304054,
      0.0073874802,
      -0.026577665,
      -0.019308371,
      0.0037835815,
      -0.012930719,
      -0.01892032,
      -0.009405674,
      -0.010719635,
      0.0029492348,
      -0.010980293,
      -0.0013336204,
      0.018457705,
      0.0014201093,
      -0.011567506,
      -0.0065962616,
      0.010457307,
      -0.01726656,
      -0.01546445,
      -0.004668011,
      -0.0036992321,
      -0.009863315,
      -0.00721979,
      -0.018197285,
      -0.02652514,
      -0.0048652147,
      -0.009180165,
      -0.0066182893,
      -0.0038020047,
      0.0276482,
      0.014726385,
      -0.16915354,
      0.02165837,
      -0.0131115215,
      -0.030485786,
      0.0070531466,
      0.00030609217,
      0.00044598436,
      0.012697243,
      0.0095380945,
      -0.017131772,
      0.0079101585,
      -0.001814515,
      0.015506869,
      0.006393031,
      -0.004401211,
      -0.005888939,
      -0.015194745,
      -0.01154566,
      0.015919613,
      -0.013663173,
      0.008337105,
      -0.014399627,
      0.0023484596,
      -0.02541316,
      -0.0025314915,
      -0.02968849,
      0.01676845,
      -0.0044346247,
      0.033866253,
      0.013683186,
      -0.014255241,
      -0.030378595,
      0.019321691,
      -0.026881991,
      -0.0067942366,
      0.020819172,
      -0.019533345,
      -0.0033409,
      -0.00056973123,
      0.02584515,
      -0.031117685,
      -0.011614736,
      0.019999344,
      -0.006080343,
      -0.0040819193,
      0.005915351,
      0.00844783,
      0.007779775,
      0.01353469,
      0.0033197897,
      0.008219886,
      -0.03216919,
      -0.019847576,
      0.024653248,
      0.0047336556,
      -0.0171636,
      -0.022092601,
      0.0031421874,
      -0.0066906135,
      -0.0015637113,
      -0.016097678,
      0.008823152,
      0.0037153196,
      0.013241209,
      -0.0017141441,
      0.012932691,
      -0.013670484,
      0.005715577,
      -0.0035765031,
      -0.0056708525,
      -0.0001575483,
      -0.016190348,
      0.00081943965,
      -0.0042791488,
      -0.014728122,
      0.0072607608,
      0.019760385,
      0.026497427,
      -0.005072756,
      -0.010337919,
      -0.012789958,
      0.004778505,
      0.020947494,
      0.0072072973,
      0.022476777,
      0.02535153,
      -0.008247715,
      -0.012599982,
      -0.018028727,
      0.040795982,
      -0.008155476,
      0.009039779,
      -0.013766726,
      0.039463587,
      0.0077081043,
      -0.0023825932,
      -0.018285776,
      0.034150008,
      -0.0016323655,
      0.004944181,
      0.0018659797,
      0.01450402,
      -0.021067366,
      -0.013065696,
      -0.014687063,
      0.015388297,
      0.002053301,
      0.019148195,
      0.018389557,
      -0.011313287,
      -0.012625994,
      0.02218402,
      0.003330131,
      0.0018514107,
      -0.017823722,
      0.028015392,
      0.0015585833,
      -0.0118251955,
      -0.021959664,
      -0.02360401,
      -0.0039456887,
      -0.019740365,
      0.005731949,
      0.015122968,
      0.0021035597,
      0.012422887,
      -0.0029437765,
      0.00027524953,
      0.013229144,
      0.017360711,
      -0.0018499311,
      -0.002665889,
      -0.0007657082,
      -0.003979603,
      -0.014618017,
      -0.017490879,
      -0.0068466743,
      -0.007194797,
      -0.04411876,
      -0.005634426,
      -0.017236685,
      -0.024528058,
      -0.016798971,
      -0.011266881,
      -0.01127295,
      -0.011158249,
      -0.03407871,
      -0.017788783,
      -0.020298148,
      0.013736247,
      -0.0026868368,
      -0.014615279,
      0.009791699,
      0.0010969085,
      -0.0048557115,
      0.006921767,
      0.01146473,
      0.010435006,
      -0.0015786022,
      -0.017595911,
      0.005050233,
      -0.10916227,
      0.0047506616,
      0.016406592,
      -0.005643512,
      0.016314585,
      0.021600941,
      -0.0018784566,
      0.023462808,
      -0.004122028,
      0.020036856,
      0.0054374044,
      -0.0020902348,
      0.037884727,
      -0.017885704,
      -0.00772161,
      -0.017356083,
      -0.0028555088,
      -0.019808076,
      0.027021917,
      -0.0066387258,
      0.008257587,
      0.014013962,
      -0.003737777,
      0.0023204985,
      0.0031058218,
      -0.0005956103,
      -0.015571823,
      0.03705217,
      0.0038942997,
      0.0025494767,
      -0.0024530357,
      0.020256704,
      -0.002996915,
      -0.008794867,
      0.0042681983,
      0.015843121,
      -0.00039989117,
      -0.005206077,
      0.0057331882,
      -0.0091234455,
      0.0425761,
      0.007751532,
      0.011987901,
      0.03670759,
      -0.0018865934,
      -0.0009990786,
      -0.010458942,
      0.0038767736,
      -0.027516115,
      -0.0001916883,
      -0.0050474955,
      -0.0016732094,
      0.006159957,
      -0.0013709884,
      0.011116686,
      0.007289342,
      0.015142541,
      -0.0020274054,
      0.008328052,
      0.000519365,
      -0.0038800784,
      0.0074029085,
      0.012543964,
      -0.027460048,
      0.01948263,
      0.0037461633,
      0.016120257,
      -0.00829486,
      -0.013792089,
      0.0025235666,
      0.003237344,
      -0.01509774,
      -0.016410816,
      -0.022925423,
      0.0015438705,
      0.0074251066,
      0.01906071,
      -0.02939866,
      -0.029095324,
      0.026375847,
      0.020376658,
      -0.0167509,
      0.02446863,
      0.004892706,
      0.005667485,
      -0.011403455,
      0.0075302594,
      0.0005316007,
      -0.0004946684,
      -0.016806692,
      0.03507386,
      -0.005263797,
      -0.015186725,
      0.0030634818,
      -0.03637195,
      -0.0045212414,
      0.010082299,
      -0.029087493,
      -0.010125789,
      0.025244229,
      -0.030079631,
      0.0028357722,
      -0.014979259,
      -0.0033072643,
      -0.022523077,
      0.0056656883,
      -0.022390384,
      -0.011011399,
      -0.0038555737,
      -0.033719502,
      -0.0023144449,
      0.013748539,
      -0.028611355,
      -0.016527463,
      0.011193546,
      0.0112900315,
      0.027582452,
      0.018461742,
      0.021634536,
      0.0016407134,
      -0.00743612,
      -0.0010238234,
      -0.0091383485,
      -0.01718553,
      -0.0013337395,
      0.013163617,
      -0.008750862,
      -0.006362144,
      -0.008986288,
      -0.016451547,
      -0.028641699,
      0.013123678,
      -0.014426954,
      -0.012951108,
      -0.017197702,
      -0.009904025,
      0.024583597,
      0.000098836,
      0.024044167,
      -0.0026749624,
      -0.0073325834,
      -0.0060918084,
      -0.0005100497,
      0.015118295,
      0.0142018525,
      0.014995013,
      0.0015769231,
      -0.009178403,
      -0.012418809,
      -0.025225352,
      -0.01275967,
      -0.035634447,
      -0.011829939,
      0.0065375986,
      0.0140799945,
      -0.0015677083,
      0.004777762,
      -0.0068247486,
      -0.020833056,
      -0.03212159,
      0.00037216733,
      0.003981926,
      -0.015053888,
      -0.009567723,
      0.019097017,
      -0.0011721583,
      0.0067451983,
      0.019659346,
      -0.02745528,
      -0.0060978653,
      -0.0068148356,
      -0.0083347615,
      -0.026803967,
      0.012320899,
      0.015098319,
      0.009595554,
      0.009014048,
      0.0051562116,
      0.020553933,
      0.020918418,
      0.0022360638,
      0.0065913675,
      -0.001990803,
      0.0055431044,
      0.005726683,
      0.0046910057,
      0.011563388,
      0.016493153,
      -0.027546842,
      0.0014811644,
      0.009104892,
      0.006635415,
      -0.0077799726,
      0.010147319,
      -0.011701634,
      -0.0023482342,
      0.004991141,
      0.01757447,
      0.010992566,
      0.006033713,
      0.0016942063,
      -0.013406681,
      -0.00090987055,
      0.0035413483,
      0.007897901,
      -0.0074729393,
      -0.009968186,
      -0.011373767,
      -0.0048253397,
      0.032300025,
      0.012685479,
      0.037818514,
      -0.004359338,
      0.00397277,
      0.013624989,
      0.032221813,
      -0.02798986,
      -0.00024691966,
      -0.010939076,
      0.00030573606,
      0.012152609,
      -0.0024752866,
      0.007577423,
      0.002276392,
      0.01050928,
      0.0057226773,
      0.010832694,
      -0.003992944,
      0.008849992,
      0.0048663723,
      0.019996554,
      -0.005207622,
      0.004016707,
      0.032414395,
      -0.013594795,
      -0.023273528,
      0.01348871,
      0.028725369,
      -0.010369495,
      0.026580542,
      -0.0028234285,
      -0.02106197,
      -0.0054530553,
      -0.012293718,
      -0.016545199,
      -0.028841576,
      0.00089735014,
      0.004972014,
      0.0026762541,
      -0.021420605,
      -0.0043020975,
      0.028220559,
      -0.025067026,
      -0.018328758,
      -0.006057613,
      0.037760235,
      0.013890071,
      -0.009237992,
      0.015222896,
      0.015357882,
      0.001854118,
      0.01841521,
      0.011464142,
      0.010555265,
      -0.0011757277,
      -0.013861616,
      -0.010601396,
      -0.03430389,
      0.005538338,
      -0.11753917,
      -0.008383442,
      0.009618577,
      -0.0088378,
      -0.009202619,
      -0.016899638,
      -0.0051933834,
      -0.02971236,
      0.005499796,
      0.011186011,
      0.018450776,
      0.0007313346,
      0.00794401,
      -0.006770634,
      -0.0025202136,
      -0.037107076,
      0.02963377,
      0.02338992,
      0.009322786,
      -0.0003184603,
      -0.030461352,
      0.019628538,
      -0.024411954,
      -0.012440227,
      -0.018635558,
      -0.030602463,
      0.020478718,
      0.015371974,
      -0.0011034819,
      -0.0059913993,
      -0.035800915,
      -0.0004167635,
      0.0006917145,
      0.023772463,
      0.013068274,
      -0.004380945,
      -0.020503994,
      0.017002752,
      0.03282372,
      -0.0018344996,
      -0.016073968,
      0.00935026,
      0.026189208,
      0.01600233,
      0.006817226,
      0.0214181,
      0.031174915,
      -0.011366628,
      -0.012654793,
      0.0118955,
      -0.02312599,
      -0.007030497,
      -0.009750436,
      -0.009534198,
      0.0039057485,
      -0.0036364014,
      0.015909612,
      -0.00036511154,
      0.005185814,
      0.0012217668,
      0.0053065717,
      0.015724264,
      -0.0003307813,
      0.041081343,
      0.011302501,
      -0.0022031995,
      0.0189306,
      0.029731616,
      0.025047058,
      0.004496266,
      0.01551988,
      0.013226932,
      0.009122085,
      0.02451788,
      0.018520804,
      -0.0026307597,
      0.0069070715,
      -0.0047745206,
      -0.0033957507,
      0.01790788,
      -0.029812371,
      -0.007490293,
      -0.05211078,
      -0.012298862,
      0.0065584416,
      0.016257348,
      0.018838111,
      0.032845214,
      0.006823368,
      0.005039037,
      0.022995228,
      -0.019438772,
      -0.01913051,
      0.002673158,
      0.011876834,
      0.00005647783,
      -0.0042706584,
      0.0016160543,
      -0.0042611216,
      -0.01201414,
      -0.019813288,
      0.00018661583,
      -0.0020905726,
      -0.012014182,
      0.0088370675,
      -0.017143589,
      0.01636201,
      0.017722493,
      -0.014383684,
      -0.015298631,
      -0.017398765,
      0.014028529,
      0.009376345,
      -0.15208018,
      -0.034213725,
      -0.005727988,
      -0.025297156,
      -0.01885866,
      -0.0022843913,
      0.00024377604,
      -0.012267312,
      -0.003643952,
      -0.018876085,
      0.0034834729,
      -0.027047949,
      -0.027070701,
      -0.015359109,
      0.025793256,
      0.13848095,
      -0.017283507,
      0.0015940672,
      -0.012241053,
      0.008336345,
      -0.016995877,
      -0.030462295,
      -0.01002712,
      0.0193958,
      -0.012722893,
      0.0017428633,
      -0.0070284987,
      -0.025084535,
      -0.0015592119,
      0.0050051417,
      -0.02784603,
      0.0047459044,
      0.011847344,
      0.02154452,
      -0.013089175,
      -0.009014223,
      0.009091366,
      0.015540518,
      0.0072905603,
      0.0018530528,
      0.026327742,
      0.01402996,
      0.0143433865,
      -0.013091323,
      0.0009768405,
      0.0017313783,
      -0.012457183,
      -0.020408886,
      -0.016460996,
      -0.003964358,
      -0.026630623,
      -0.053619035,
      0.00013354426,
      -0.00020818032,
      0.0026306985,
      -0.000663898,
      0.020728715,
      0.022229463,
      0.0047489237,
      0.03309863,
      -0.020256303,
      -0.0026669549,
      0.007836583,
      0.0016852252,
      0.000028350942,
      -0.009125035,
      0.010881533,
      0.024583424,
      0.01831886,
      -0.008461627,
      0.009027424,
      0.03622435,
      -0.0016653701,
      0.028545676,
      -0.012752227,
      -0.014921723,
      -0.010858006,
      0.012381033,
      0.0044626724,
      0.0067951665,
      -0.006499679,
      -0.016996585,
      0.0007418515,
      -0.006958145,
      0.04346857,
      0.008529707,
      0.015557085,
      0.01169101,
      -0.004999913,
      -0.011948579,
      0.0072902823,
      -0.012172259,
      -0.023720521,
      0.013056364,
      0.0065177507,
      0.0132055245,
      -0.009023681,
      -0.023434049,
      0.029659072,
      0.011355614,
      -0.0317194,
      -0.012619904,
      0.021993563,
      -0.032251634,
      -0.0034916913,
      -0.0141549455,
      -0.016483808,
      0.02461552,
      -0.0019375256,
      -0.0008090556
    ]
  },
  {
    "id": "genai_cohort_python_05_Generator_comprehensions_for_memory_optimization_vtt",
    "content": "All right, so let's talk about 2 the final type of comprehension, 3 which is generator comprehension. 4 Now, in order to understand 5 the generators, this is your first 6 preview of understanding them. 7 And it's easy, but you need 8 to understand what happens 9 behind the scene in front. 10 If I just give you any example, 11 there is no such example that 12 I have, which has millions 13 of record that I can show you. 14 Okay, this one is 15 faster, this one is not. 16 Generators are used just and just 17 for saving the memory, which is not 18 just, it is a really huge aspect. 19 Most of the Python programs 20 that you see are not really 21 caring much about the memory. 22 But if you're a good 23 software engineer, you do 24 really care about memory. 25 Most of the Python engineers, they 26 work with the heavy machines, which 27 has around, 64 GBs of RAM or 128 GBs 28 of RAM or probably works in the GPU. 29 But if your program is efficient, 30 it can do a lot of job 31 and make Python functions faster. 32 It's already a slow language, but if 33 we can do something about the memory 34 and make it more faster, 35 that is what exactly generator does. 36 The syntax is pretty 37 easy, you will love that. 38 But just get this, this is used 39 entirely for saving the memory. 40 You don't see them here 41 in these small examples. 42 But remember, if you want 43 to save memory in some of the cases, 44 then it's the best thing. 45 So again, it's a super easy one. 46 So we have the final one here. 47 Remember generators? 48 Yep, that's what we are 49 talking about, generator. 50 So if I go ahead and wrap this up, 51 so how does the syntax look like? 52 And you'll be surprised. 53 Exactly. 54 Same. 55 The only thing that changes 56 in this is they start with 57 parenthesis and that is it. 58 That is your generator expression for 59 item in iterable, if condition or 60 for loop or whatever you want to do. 61 Further, you can go 62 ahead and do that. 63 Can we go ahead and take 64 an example of this one? 65 Surely. 66 First I'll tell you how it 67 works actually and what's 68 the difference between them? 69 So you might have seen, for 70 example, I can just use the square 71 brackets and can get exactly 72 same result for X, in, items. 73 And there is another case that 74 we have, or we have to put 75 an expression X for x in items. 76 So this is our first 77 case that we have seen. 78 And there is another one 79 which actually goes through 80 with just like this. 81 So apart from these parentheses, 82 technically there is no 83 difference between, this piece 84 of code and this piece of code. 85 But the only difference is this piece 86 of code actually makes the entire 87 list in the memory it generates 88 it immediately and everything 89 is stored in the memory. 90 On the other hand, this one actually, 91 gives you one item at a time. 92 This is like a stream. 93 So always remember, this thing, 94 is going to make a list 95 or make entire list, in memory. 96 So this is the part where we go 97 with the square brackets. 98 So this is part for this. 99 And this one is more like a stream. 100 So all of your memory is 101 not clogged at once. 102 It actually gives you a constant 103 flow of the things as you require 104 them or as you process them. 105 Let me go ahead and show 106 you how it actually works. 107 It's actually super easy example, 108 don't you worry on that part. 109 So I'll take you onto the screen. 110 We'll close all of this. 111 And this, is probably last video 112 in this section, hopefully. 113 And this one is generator compre py. 114 All right, so let's just 115 say we have a, daily sales. 116 And this could be like 117 hundreds of value. 118 We cannot write hundreds 119 of values as of now. 120 I know we can use range, but I 121 don't want to go with that. 122 So let's just say we have 123 the daily sales and we'll 124 have some of the values. 125 So let's just say we have 5, 10, 12, 126 7, 3. 127 What else you can have? 128 Let's just say 8, 9, 15. 129 You can have more values, but let's 130 just say we have hundreds of values. 131 In this case, you want to find out 132 that what was the total cup sold? 133 One by one. 134 So we want to find out, analyze that, 135 and only want to figure out if 136 the sale is above the 5.5rupees. 137 So any sale which is above 5 rupees, 138 I want to calculate the sum of that. 139 So can we find them out? 140 I guess yes, that is super easy. 141 So you want to find out total cups, 142 but that are, above three rupees. 143 So how can we do that? 144 You, can just go ahead 145 and make it like this. 146 Hey, I want a list comprehension, 147 something like that. 148 But I'll show you 149 a neat trick for that. 150 Let's go with 151 the generator comprehension. 152 In this one we'll go with underscore 153 again, just like a syntax. 154 So for sale in daily, 155 sales, we know this part. 156 We can use conditions pretty easy. 157 We'll call this one as sale, 158 which is going to be above 5. 159 So exactly the same syntax. 160 And what goes into this one? 161 This empty one here? 162 Of course, you get the idea 163 that we get the sale. 164 Now this will feel like that. 165 Okay, we got all the values 166 up here just like this. 167 First of all, let's print this. 168 Let's see what actually 169 goes inside this. 170 This will actually probably surprise. 171 I'll just go ahead 172 and say Total Cups. 173 Yep, that's the one I want 174 and I want to see the result. 175 All right, so no big deal. 176 Python 3,04 and get like this. 177 So we get this notice here 178 generator object. 179 So it's not usable right now. 180 Generator objects need 181 to be consumed since they are 182 streaming this one by one. 183 If I go ahead and change this, 184 that, hey, I will just go ahead 185 and use this, this will be a whole 186 different story altogether. 187 Now notice here, if I go ahead 188 and run this, this gives you 189 a list directly and that is. 190 Okay, that's exactly what I want. 191 And now further through this 192 list I have to go through with 193 the values I have to say that, 194 okay, let's create a global variable 195 which says total sum. 196 If I want to know the sale addition 197 of all of this, then loop 198 through it all that or probably 199 can use a comprehension again. 200 But what the generator allows you 201 to do is if I go back and turn 202 this up into parenthesis I can 203 use inbuilt methods like filter. 204 There's one method which is sum. 205 You provide a iterable to it and it 206 automatically makes the sum of it. 207 And this will be a memory 208 efficient operation because you're 209 not just throwing all the memory 210 of hundreds of this. 211 The sum is given one by one. 212 So automatically the stream 213 of values are given to it. 214 And once you actually do this, 215 what you're going to notice we get 216 the result exactly what we want. 217 But this is a memory 218 efficient operation. 219 All right, so the whole point of 220 teaching you or giving you a glimpse 221 of generator is so that you 222 understand what happens behind the 223 scene and you also get to know about 224 a little bit on the sum operation 225 which we can do. 226 The sum operation can be done 227 on variety of other things as well. 228 But what we have done here is 229 a very memory efficient code. 230 This is very rare to see 231 that somebody writes that. 232 But eventually you'll see that if 233 you work really good in the python, 234 you, you will write similar 235 code out a similar piece of code. 236 That is it for this video. 237 Hope you've enjoyed this section. 238 Pretty fun, a little bit new, 239 little scary, but we have learned 240 a lot and that's kind 241 of a mixed feeling that we get. 242 That is it for this video. 243 Let's catch up in the next one. 244 Don't forget to rate.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 Generator comprehensions for memory optimization.vtt",
      "originalPath": "genai-cohort/python/06 Chapter Subtitles/05 Generator comprehensions for memory optimization.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0036535955,
      0.01830642,
      0.036867607,
      -0.06582366,
      0.009062735,
      0.0042933533,
      0.011131166,
      0.028625991,
      0.009554224,
      0.036054168,
      -0.0077612135,
      0.006269417,
      0.009656784,
      0.019777063,
      0.11592355,
      0.014281355,
      -0.0124471625,
      -0.0052155033,
      0.022670567,
      -0.022218522,
      0.011344093,
      -0.013786012,
      -0.005383357,
      -0.010296665,
      0.010840245,
      -0.0056640385,
      0.0050683757,
      0.011108803,
      0.029870551,
      -0.018242264,
      -0.022454767,
      0.010491634,
      0.0040856097,
      0.0069669327,
      0.0007383345,
      0.0031730528,
      0.0016404315,
      -0.004436558,
      -0.025183158,
      0.011927172,
      -0.014007083,
      -0.011616063,
      0.004780966,
      -0.010209338,
      0.012264655,
      -0.028969932,
      -0.0052916952,
      -0.014011148,
      -0.0032965124,
      0.03566581,
      0.013429905,
      0.005338077,
      -0.00012736178,
      -0.17197587,
      0.018246315,
      0.009702643,
      0.0032426473,
      -0.00019373541,
      0.019130852,
      0.007823409,
      -0.026135864,
      0.014968351,
      -0.023149658,
      -0.020868428,
      -0.028941896,
      -0.015660457,
      0.02401426,
      -0.0055518933,
      -0.016837945,
      -0.0070102313,
      -0.0043640225,
      0.012713286,
      -0.0169446,
      -0.0024425443,
      -0.017878484,
      -0.029770777,
      0.015560951,
      -0.017581252,
      0.007917682,
      0.009327291,
      -0.0023168302,
      -0.01959837,
      -0.006884732,
      0.028142488,
      -0.005387974,
      0.0037935153,
      -0.04262731,
      -0.022116994,
      -0.0042567104,
      0.0006734993,
      -0.01546111,
      0.004424068,
      -0.027361048,
      0.0196438,
      -0.014794502,
      -0.010956611,
      -0.007329533,
      0.028908739,
      -0.028581563,
      0.010995492,
      0.020137178,
      0.0007853568,
      0.0029551324,
      -0.006512414,
      -0.011491228,
      0.015186529,
      -0.009237819,
      -0.020112975,
      -0.015604642,
      -0.007683525,
      -0.005409558,
      -0.014538188,
      0.006044101,
      0.016201572,
      0.011412122,
      -0.15268448,
      0.028720777,
      0.0059384634,
      -0.021669334,
      0.030677704,
      -0.014023304,
      -0.0057701697,
      0.023721894,
      0.001972793,
      -0.021872696,
      0.015972821,
      0.011585992,
      0.00575238,
      -0.009814961,
      -0.0036128266,
      -0.013637618,
      -0.0039536613,
      -0.0005561803,
      0.010428275,
      -0.021445885,
      0.010242088,
      -0.0046761725,
      -0.0005270617,
      -0.022534572,
      -0.004398531,
      -0.022395138,
      0.020254405,
      -0.008665598,
      0.030735785,
      0.02160991,
      -0.01787441,
      -0.016163064,
      0.00726275,
      -0.0054184226,
      -0.016230972,
      -0.007742191,
      -0.014032468,
      -0.00411165,
      0.0047376794,
      0.031470403,
      -0.032813236,
      -0.0074433126,
      0.0358482,
      -0.019392557,
      -0.022984786,
      -0.011738169,
      0.002078545,
      0.010946027,
      0.02234424,
      0.0011620187,
      0.0006552164,
      -0.021674791,
      -0.010550519,
      0.02238508,
      0.0081753135,
      0.0034381882,
      -0.020888025,
      0.008578072,
      -0.027410597,
      -0.013107872,
      -0.007494097,
      -0.0029711255,
      0.0013847484,
      0.0065136496,
      0.009577995,
      0.007250618,
      -0.0060492433,
      -0.013036834,
      -0.0022429584,
      0.0045633935,
      -0.0040706587,
      -0.017916538,
      0.002143862,
      0.010918891,
      -0.002072309,
      -0.0054923967,
      0.025465159,
      0.044987388,
      0.0002152914,
      -0.007767977,
      -0.004032492,
      0.009617905,
      0.008661136,
      0.0021494639,
      0.011536231,
      0.049004074,
      -0.005365667,
      0.00017838771,
      -0.029828174,
      0.009141257,
      -0.005607724,
      0.010851439,
      -0.01568055,
      0.030038834,
      0.010895285,
      -0.0053751655,
      -0.019426405,
      0.024854796,
      0.0021731805,
      0.030898364,
      0.012845514,
      0.015707158,
      -0.00035745205,
      -0.011866738,
      0.00061828166,
      -0.0023997661,
      0.01739488,
      0.01200947,
      0.0010528732,
      -0.005489989,
      -0.0016602055,
      0.016961815,
      0.009255228,
      -0.01350647,
      0.0116787795,
      0.013344399,
      0.021637341,
      -0.02692087,
      0.005198765,
      -0.016328696,
      -0.00421846,
      -0.0072406065,
      0.021735873,
      0.033440884,
      -0.0006403587,
      0.0032970489,
      0.0071662506,
      -0.0064839437,
      0.013024751,
      0.016755193,
      -0.011034784,
      0.0099952575,
      -0.009534895,
      -0.013236661,
      -0.03423873,
      -0.0068938923,
      -0.024950812,
      0.0011914667,
      -0.025570482,
      -0.016781922,
      -0.020990385,
      -0.020993968,
      -0.024596956,
      0.0007116027,
      -0.015565364,
      0.011941529,
      -0.020758789,
      -0.031895842,
      0.004895933,
      0.008095693,
      0.0070130415,
      -0.0016255621,
      0.02174896,
      0.0006461026,
      0.005529294,
      0.010260882,
      0.016493281,
      0.0053363466,
      0.034421552,
      -0.017917661,
      0.014379819,
      -0.088521756,
      0.005727156,
      0.020273192,
      -0.027703157,
      0.0036776103,
      0.017566822,
      -0.007880199,
      0.01820437,
      0.0064172475,
      -0.01723028,
      0.0021235924,
      -0.0032904143,
      0.030886982,
      -0.03194217,
      0.01273235,
      0.003588099,
      0.012678453,
      -0.025871156,
      0.032742627,
      0.001524584,
      -0.0053849197,
      0.0033481778,
      -0.002501259,
      0.0062219882,
      0.021199333,
      0.009048405,
      -0.017749153,
      0.031546287,
      0.006989701,
      -0.0027936609,
      0.0024877375,
      0.019463696,
      -0.009636369,
      0.01897995,
      0.0032168354,
      0.019394519,
      0.015120635,
      -0.013627886,
      -0.008353571,
      -0.02006786,
      0.022511939,
      0.017930297,
      0.018538479,
      0.04315498,
      -0.007657489,
      0.00070426357,
      0.006149137,
      0.016057491,
      -0.021705003,
      0.0057719056,
      0.0050076144,
      0.0023724143,
      0.017011654,
      -0.0008244142,
      0.015847119,
      0.004727944,
      0.0045318156,
      0.002565955,
      -0.014064591,
      0.012414096,
      -0.00797187,
      0.009484908,
      0.01663625,
      -0.01718799,
      0.01573445,
      0.0040948605,
      -0.00013774882,
      -0.015260842,
      -0.006495405,
      0.012731709,
      0.007972355,
      0.0032429323,
      -0.0001519533,
      -0.019075371,
      0.005607667,
      0.005705186,
      0.04096737,
      0.00026751636,
      -0.017239582,
      0.0412767,
      0.008165115,
      -0.019926364,
      0.008988848,
      0.0106212655,
      -0.0036706496,
      0.006215173,
      -0.0030162262,
      0.0074280356,
      0.009607253,
      0.001971253,
      0.012438369,
      0.0050271526,
      -0.031083485,
      0.005203589,
      -0.038536355,
      -0.014504971,
      0.018096233,
      -0.02391211,
      -0.0029615362,
      0.0143783735,
      -0.02488426,
      -0.0061100726,
      -0.009963748,
      0.016279997,
      -0.022610601,
      0.006106967,
      -0.0059061707,
      -0.0057134964,
      -0.009541532,
      -0.034299757,
      -0.021852054,
      -0.01034305,
      -0.013552805,
      -0.016188236,
      -0.0022024608,
      0.0075825914,
      0.009944729,
      0.017033268,
      0.012080606,
      -0.011773477,
      -0.009009085,
      -0.0021355767,
      -0.004140265,
      0.0012781187,
      0.008517102,
      -0.004329467,
      -0.0012587958,
      -0.028488573,
      -0.023751153,
      -0.033027112,
      -0.035678525,
      0.027232181,
      -0.007562687,
      -0.02580889,
      -0.0035815428,
      -0.0005531081,
      0.032963432,
      0.014894047,
      0.029764995,
      -0.004209076,
      -0.012821556,
      -0.015321977,
      0.012480999,
      0.00869469,
      -0.01226499,
      0.029544197,
      -0.00465224,
      -0.0040272907,
      0.0026512041,
      -0.011619226,
      -0.019394848,
      -0.03280324,
      -0.007665316,
      0.002798597,
      -0.008697058,
      -0.0063636857,
      -0.0039746077,
      -0.016601376,
      -0.028662132,
      -0.017283762,
      0.0043925066,
      -0.006682292,
      -0.020499613,
      0.00067652314,
      0.029337145,
      0.0034478933,
      -0.0040670782,
      0.010884086,
      -0.0045720586,
      -0.013503582,
      -0.014075007,
      0.001247987,
      -0.04202977,
      0.008963328,
      0.02742327,
      0.010776697,
      0.0021019438,
      0.01498529,
      0.0399448,
      0.003351138,
      0.0029810132,
      0.0009996311,
      -0.0013103195,
      0.021505414,
      -0.006973155,
      0.017000068,
      0.025721435,
      -0.0027927118,
      -0.0039837346,
      -0.015788198,
      -0.027824178,
      -0.008250233,
      -0.02102737,
      0.029067947,
      0.0025692242,
      0.02885979,
      0.014485245,
      0.0012297082,
      0.009713358,
      0.010126599,
      -0.012825526,
      -0.017498199,
      0.008009804,
      0.0027229777,
      -0.0062394585,
      -0.011059269,
      -0.01135989,
      0.0046414305,
      0.009950395,
      0.029253662,
      0.006496353,
      0.014617606,
      -0.0019471701,
      0.007714222,
      0.018450866,
      0.023820326,
      -0.0009094218,
      -0.021666748,
      -0.018455787,
      0.0057089096,
      0.00895489,
      -0.0139378,
      0.0037583734,
      0.0037366573,
      0.008818208,
      0.0030571907,
      0.0040527023,
      0.0069771074,
      -0.005454894,
      -0.0052377395,
      -0.0121452045,
      0.00093687273,
      -0.013088338,
      0.03421337,
      -0.03341115,
      -0.005988574,
      0.017057193,
      0.010513305,
      -0.030824857,
      0.0019966834,
      0.0052322154,
      -0.037394453,
      -0.01952547,
      0.0028623093,
      -0.008167511,
      -0.0102570485,
      0.009031605,
      0.0018877262,
      -0.018034305,
      0.0027219467,
      -0.009762638,
      0.011907893,
      -0.009715127,
      -0.007335905,
      -0.010155623,
      0.004895708,
      0.0019114227,
      -0.021402597,
      0.0069211414,
      -0.00788463,
      0.021203808,
      0.023255039,
      -0.004528164,
      0.0388107,
      -0.016187465,
      -0.015295106,
      0.01073619,
      -0.018917987,
      -0.014474832,
      -0.11463692,
      -0.005751698,
      0.0028440417,
      0.004104079,
      -0.022006512,
      -0.01289823,
      -0.020300202,
      -0.014954253,
      0.007594292,
      0.009373971,
      0.02151472,
      -0.024397997,
      0.0066526677,
      -0.026223801,
      0.014793956,
      -0.028032836,
      0.024875857,
      0.009203782,
      0.004193492,
      -0.016425151,
      0.0067445673,
      0.02534654,
      -0.025878387,
      0.000017506753,
      -0.022518823,
      0.006229505,
      0.01090368,
      0.015725223,
      0.0097575225,
      -0.005394326,
      -0.035522934,
      -0.011584068,
      0.0009131447,
      0.023043497,
      0.013110039,
      -0.0071817194,
      -0.015477998,
      0.014028613,
      0.014154982,
      0.0064288517,
      0.008739785,
      0.009151119,
      0.036475193,
      0.014956779,
      0.0017289516,
      0.014637096,
      0.035718713,
      -0.02883323,
      -0.0048353137,
      0.03388224,
      -0.023695154,
      -0.015557842,
      0.009123996,
      -0.012697022,
      -0.008950654,
      0.0030383873,
      0.020381631,
      -0.028873596,
      -0.006126986,
      -0.005811761,
      0.018554736,
      -0.006955133,
      0.0056223916,
      0.029698513,
      0.015146155,
      -0.006299298,
      0.027524596,
      0.010197655,
      0.010488147,
      -0.007987027,
      0.0115076015,
      0.004613134,
      -0.00085388264,
      0.030097462,
      0.008339352,
      0.0070849294,
      0.000673628,
      0.004183342,
      0.0029373984,
      0.024002997,
      -0.025504546,
      -0.016362151,
      -0.050938647,
      -0.009780334,
      0.00555472,
      -0.015709372,
      -0.005319045,
      0.023887616,
      -0.014368171,
      0.0115320375,
      0.028232876,
      -0.032841373,
      -0.014823535,
      0.010165006,
      -0.0029885862,
      0.012074968,
      0.0015507389,
      0.011084547,
      0.016273765,
      -0.002022661,
      -0.019317409,
      0.005252742,
      -0.0031663321,
      0.0036607815,
      0.0049709366,
      -0.030471705,
      0.014905028,
      0.013809996,
      -0.008212383,
      -0.005555977,
      -0.0024837996,
      -0.0019734886,
      -0.0041126534,
      -0.14115283,
      -0.03344518,
      0.011113589,
      -0.010879142,
      -0.008464886,
      0.0080847135,
      -0.020490665,
      -0.022742141,
      -0.008322254,
      0.013858077,
      0.00009904359,
      -0.019457262,
      -0.01949157,
      -0.01925905,
      0.036294736,
      0.15009879,
      0.00067421794,
      0.010082657,
      -0.016818844,
      -0.0025028167,
      0.0058951676,
      -0.025985349,
      -0.023127342,
      0.0116430195,
      -0.021699723,
      -0.0036338174,
      0.016696436,
      -0.019986475,
      0.0045871176,
      0.013575847,
      -0.0012201563,
      0.0077820737,
      0.001257118,
      0.01288478,
      0.014530888,
      0.006202362,
      0.00043433075,
      0.019004036,
      -0.0007212019,
      0.010879866,
      0.03846643,
      0.005412617,
      0.0017610961,
      -0.001824334,
      0.011282001,
      0.0022842563,
      -0.030146208,
      -0.007245529,
      0.0034267218,
      -0.0101460405,
      -0.015009707,
      -0.06126616,
      0.012483494,
      -0.0096867075,
      -0.0061360383,
      0.015211979,
      0.002966323,
      0.018075123,
      0.0056330063,
      0.015049824,
      -0.023039099,
      -0.002240004,
      -0.00091498747,
      0.0154933,
      -0.016781725,
      -0.009011365,
      0.0060388795,
      0.02326402,
      0.019367369,
      -0.0037922016,
      -0.0067609884,
      0.02435816,
      -0.01858001,
      0.030444968,
      -0.010189926,
      -0.00925003,
      -0.013136459,
      0.018594414,
      0.004314108,
      0.0045806943,
      -0.0044117854,
      -0.024709046,
      0.022096766,
      -0.024725942,
      0.026606707,
      0.005234589,
      -0.0024147362,
      -0.0004413056,
      0.004197969,
      -0.021443548,
      -0.0021683602,
      -0.0111425,
      -0.010734299,
      0.012206528,
      0.017814998,
      0.021268537,
      -0.002868029,
      -0.0029946805,
      0.019813877,
      -0.0027735566,
      -0.009045808,
      -0.005197849,
      0.009381334,
      -0.047296584,
      0.0031918949,
      0.00037396004,
      -0.01693511,
      0.0184501,
      -0.0041373717,
      0.003082039
    ]
  },
  {
    "id": "genai_cohort_python_01_Functions___Reducing_duplicationa_and_splitting_complex_tasks_vtt",
    "content": "Hey there everyone and welcome 2 to the section of functions 3 in the udemy's Python course. 4 So in this course we are 5 learning a lot on Python and further 6 down we want to learn 7 and explore about functions. 8 Now functions are nothing 9 much more than a wrapper. 10 So they wrap your code 11 and make your code reusable. 12 But not only just reusable, it 13 has some more advantages of that. 14 And we're going to study each 15 of those advantages. 16 Not only we are going to study, 17 we do have a use case just like 18 a small story or a mini project. 19 And through that we are going 20 to learn about each individual 21 specification that why 22 the functions are being created. 23 Now functions are known with 24 variety of different names, 25 especially functions methods, you 26 can call them whatever you like, 27 the way how they are defined 28 exactly same but depends on where 29 you are defining. 30 Sometimes the naming might change 31 as you know programmers really 32 love to name things really 33 complex, although they are not 34 really complex under the hood 35 they does exactly the same kind 36 of a job. 37 So in this section we are 38 going to learn about them. 39 So let me take you up on to the 40 section and let me take you 41 onto the screen with the 42 screen, let me take you to the 43 screen with me so that we can 44 study. 45 Now not only that, we're going 46 to go ahead and write the code 47 along with me so that we 48 can actually truly understand 49 the meaning of all of them. 50 So I'll just arrange my 51 keyboard a little so that I 52 don't do much of the typos. 53 So we will have a simple 54 functions and just like that, 55 if I can write them better that 56 would be great functions. 57 There we go. 58 And let's start with pretty 59 much exploring about what 60 the functions are and how do 61 they work first of all. 62 So welcome to the topic 63 officially of the functions. 64 Now by the end of this whole 65 chapter and by the term chapter 66 means I mean to say the whole 67 section because we have a lot 68 of videos in this section as well. 69 You will be able to 70 understand the purpose and benefit 71 of the function. 72 Now this first video is, or probably 73 the first two videos are all 74 about understanding the purpose 75 and benefits of the function. 76 We will learn how we can create 77 a reusable and modular 78 code using the def keyword. 79 I'll show you that part as well. 80 And we want to improve 81 the readability, traceability, 82 maintainability with the function. 83 Now I know these are 84 really big words. 85 What do you mean by readability? 86 What do you mean by traceability 87 and maintainability? 88 We do have a separate example 89 for each one of These words 90 so that you truly understand. 91 Okay, this is why I'm 92 creating the function. 93 Otherwise your regular 94 code is working fine. 95 What's the need? 96 What's the problem? 97 Problem we are solving 98 with the functions. 99 We are going to focus on that. 100 After that we have break down 101 larger task into smaller steps using 102 well named function. 103 The well name here is a pretty 104 much big keyword here. 105 So make sure you pay 106 a huge attention on this. 107 Naming your variables as well 108 as your function is one 109 of the most important tasks. 110 This is written in the PEP 111 of Python as well and it's 112 in general good practice. 113 Your function should ideally 114 describe what it does 115 as descriptive as you want to be. 116 Make it really good so that 117 somebody don't have to ask anybody 118 or read the documentation. 119 The function should say it itself 120 that what we are going to be doing. 121 All right, I hope we are clear with 122 the agenda, what we are about to do. 123 And now we have a lot of tasks. 124 So we have this 125 task 1, 2, 3, 4 and 5. 126 So we have five of these tasks. 127 We'll try to do two tasks in this 128 video and three tasks we're going 129 to do in the next video itself. 130 Let's go ahead and study about. 131 So this is the task where we 132 are going to work on 133 reducing the code duplication. 134 So let me go ahead and move it 135 up here so that we can 136 actually understand this, 137 see it a little bit better. 138 So this is what we have. 139 I can expand this a little. 140 There we go. 141 Looks nice now. 142 So this is for reducing 143 the code duplication. 144 What do you mean 145 by even code duplication? 146 Sometimes the code that we 147 are writing needs to be utilized 148 at multiple places. 149 So why to write this code again 150 and again, Maybe we can wrap that up 151 in a function and wherever we need 152 we can actually call the same guy 153 because the functionality is same. 154 So here is a simple example 155 in front of us that we have. 156 You are managing a busy T 157 stall, which is a good stuff. 158 You receive many orders and want 159 to print each customer's name along 160 with the type of chai they ordered. 161 All right, pretty much 162 very much doable kind of a job. 163 And then it says task. 164 We have to do write a function 165 which says print order 166 and it prints the name and the type 167 of chai that the person wants. 168 Call it multiple times 169 for different customer. 170 All right, pretty good 171 example, pretty good one. 172 So let's go ahead 173 and work on with this. 174 This is the problem that 175 we are solving is reducing 176 the code duplication. 177 So let's go into function 178 create a New file. 179 And call this one as 01 180 and let's call this one as 181 duplication, because that's what 182 we are solving in this one. 183 Duplication Python. 184 All right, so what is 185 the task that we have to do? 186 First of all it's saying write 187 a function print order, 188 which accepts name and child types. 189 So let me tell you 190 how it's being done. 191 It's a super easy process, 192 don't you worry. 193 Every single function, whenever 194 you're writing, starts 195 with the keyword def, just 196 like we have if else for. 197 So it starts with def. 198 Then you simply go ahead 199 and write the function name. 200 So this is my function name 201 in this case print order. 202 And this is a valid function. 203 We can just put up a colon 204 and I'll come back to write the body 205 of the function that what 206 this function actually does. 207 I can just put a pass for 208 a moment here so that we 209 can come back later on. 210 Fill this up so that 211 syntax doesn't bother us. 212 Now whenever you need 213 to actually call this function, all 214 you have to do now is say 215 print order and execute this 216 function, just like we do. 217 The print just like this. 218 It is exactly same print was already 219 defined by the Python developers. 220 Print order is something 221 that we are defining. 222 I hope you got this. 223 Now we also have noticed that 224 in the print, sometimes we 225 actually put the strings and whole 226 lot of different things. 227 So this will print my name. 228 So print order can also 229 takes these parameters. 230 Notice here, this is there is a 231 different name when you actually 232 put the names here and when you 233 put the names here, although 234 they are the same thing, the 235 value is passed on directly like 236 this. 237 But there is a way 238 how we call them up. 239 And I'll show you what this is. 240 So what you accept here 241 is known as parameters. 242 Yep. 243 And when we actually pass up them 244 here, they are called as argument. 245 Yeah, Note them down 246 in your notebook. 247 It's important to be really clear 248 about what we call each things. 249 Programmers really love that. 250 So we're going to pass 251 parameters here. 252 Let's just say you accept two things. 253 The one is I accept names 254 and I also accept chaitype. 255 You can accept as many 256 parameters as you wish to have. 257 There is no stoppage. 258 You can also get no parameters. 259 You can get 3, 5, 260 whatever you wish to have. 261 Now after that we just simply 262 want to process this. 263 We will learn more about this. 264 Right now I just want to print it. 265 So we'll just say that, hey, 266 whatever the name you pass me up, 267 I'll just go ahead and use this. 268 So for this I have to say 269 this and say name ordered, ordered 270 and the chai type Chai type chai. 271 So this is the message 272 that I want to print. 273 Now the advantage of this 274 particular syntax is that I can 275 just pass on these parameter. 276 For example, just say aman 277 and he is ordering a chai of masala. 278 So this is masala. 279 But I can also duplicate this 280 and say that, hey, another 281 guy is ordering ginger. 282 And who is ordering Ginger? 283 Probably me. 284 And there's another guy who might 285 be ordering something else. 286 For example, let's just say jia 287 and she orders tulsi chai. 288 There we go. 289 And again, we don't have 290 to write this line again. 291 Again you don't get it much 292 because hey, it's just one line. 293 I could have done it here as well. 294 That's okay. 295 But it could be a long 296 printing statement. 297 I'll show you one more 298 example of this. 299 So we will first open this up 300 in a new in the integrated terminal 301 and then we are going to. 302 Let's open this again. 303 Too many terminals opened up. 304 Open an integrated terminal. 305 And now I can just go 306 ahead and say Python. 307 Let's go ahead and run 01 308 duplication and we can see 309 aman ordered masala chai Hitesh. 310 But now there is a problem. 311 The problem is simple that hey, 312 we don't want this message 313 like this name ordered chai. 314 Let's just say we want to add 315 maybe just an exclamation here 316 so we don't have to write 317 the exclamation three times. 318 This is something which is fun here. 319 And notice here, this is what 320 the reducing the code duplication. 321 We are not duplicating the code, 322 we just are appending this or 323 editing this at one place. 324 Now just by editing it one place I 325 can run the code again and I got 326 the exclamation every single place. 327 This is the advantage of it. 328 And I hope you understand 329 that we are reducing 330 the duplication of the code. 331 This piece of code, there could 332 be like 10 different lines. 333 There could be a call to a database, 334 There could be a lot of things 335 and those all lot of things 336 can be easily done at one place. 337 And whenever you want to use it, 338 you can just go ahead and pass 339 on different arguments. 340 Remember this is argument, 341 this is parameter. 342 So you can pass on different 343 arguments and can just get 344 the value a lot of time. 345 It just saves the time. 346 So this is one of the example 347 that we have now let's go ahead 348 and see another example here. 349 We'll do two examples in this one 350 which will help you to Understand 351 more about the functions and as 352 I say, the more you write the code, 353 the better it is for you. 354 All right, so let's go 355 ahead and get this one up. 356 So what the next problem 357 statement say to us? 358 All right, hope this is 359 much more visible now. 360 There we go. 361 So next one is splitting 362 the complex task. 363 All right, so let's just 364 see what the problem says. 365 The problem statement says 366 you are creating a monthly report 367 for a cafe's sale. 368 Pretty much doable. 369 Instead of putting all logic 370 in one place, break it down. 371 Task and write a function, 372 generate report that calls 373 fetch sales, filter valid orders 374 and summarize the data. 375 All right, so this time we are 376 creating different methods and each 377 method is doing some complex task. 378 And that is also one of the key thing 379 about the functions which 380 is splitting the complex task. 381 So we are splitting that. 382 How do we generate the report? 383 We'll keep this somewhere, safe. 384 How do we fetch the sales? 385 We keep it separate and filter valid. 386 So all of these things are 387 definitely reusable, but they are 388 performing each of the task. 389 And maybe you're working in a team. 390 So each team member is doing 391 a different complex task. 392 Let's go ahead and try to work 393 on this complex task as well. 394 Let's close this one and see 395 how that can be done. 396 Let's create a new file 02 and we 397 will say complex python, not js. 398 All right, so the first part 399 of my problem is to fetch the sales. 400 I don't know how to fetch 401 the sales as of now, but I 402 can mimic the functions. 403 I can just go ahead and call 404 the fetch underscore 405 sales and assume that 406 it does complex tasks. 407 Maybe you provide some CSV file 408 into it and all of that. 409 We'll do that later on. 410 Right now I just want to print 411 a message that okay, sales 412 report is generated or it 413 is fetching the sales data. 414 So we'll just say 415 fetching the sales data all. 416 Right. 417 It has done its job. 418 This is one function. 419 What could be another 420 function that we can use? 421 Another function is 422 filter valid orders all. 423 Right, so this one says 424 my job is filter valid sales. 425 This is what I do, how I do it. 426 We will learn about those 427 things later on in the project, 428 but right now we're just 429 focusing on the function. 430 So I'll just go ahead and say print 431 and this is going 432 to go ahead and say filtering 433 valid valid sales data. 434 All right, and what's the third 435 thing that we have to do? 436 Summarize the data. 437 All right, no problem, 438 summarize the data. 439 So this summarize the data. 440 All it does is pretty simple. 441 Oops, my bad. 442 Summarize the data. 443 Syntax mistake. 444 And there we go. 445 And we are going to go ahead and say 446 this is summarizing sales data. 447 Hopefully that's the sales data. 448 But I hope you can see that how we 449 have splitted the complex task 450 into different this could be one 451 line, this could be hundred lines, 452 or probably thousand lines. 453 There could be more. 454 Usually it's not thousand lines, 455 but I'm exaggerating to make sure 456 that you are understanding. 457 And finally we can do 458 is generate report. 459 When the report is generating, we 460 have to call all of these functions. 461 So it's also pretty doable. 462 It's pretty simple. 463 Let's just say I am going to call 464 this one as generate report report. 465 And in this method all we do is 466 first of all we fetch the sales. 467 So there we go, sales data is done. 468 How complex this is, I don't really 469 care, I am just calling the methods 470 just like I've been doing so far. 471 Filter valid sales. 472 There we go, done that task. 473 And now after that we 474 summarize the data. 475 So there we go. 476 And finally we just go 477 ahead and print the ready, 478 report ready message. 479 So I'll just say print. 480 I will say report is ready. 481 There we go. 482 This is how it's literally 483 easy to work with that. 484 Let's go ahead and execute this 485 as well so that we get the idea. 486 So we'll say Python 3 this time 487 we'll print the complex PI and we 488 forgot to call the function. 489 If you're not going 490 to call the function, this 491 is how it will behave. 492 So this all task is being done. 493 But remember you have never 494 called this particular method. 495 You have called other methods, 496 but these methods are called 497 when this method is called. 498 Pretty good catch that 499 we have done here. 500 So all I have to do is once all 501 of this is done then we have 502 to say what's the name? 503 Generate report. 504 Generate report. 505 Call this method just 506 like you call print. 507 And now these are all definitions. 508 So as soon as you use the def, 509 that means you are providing 510 a definition of function. 511 This is where you use the function. 512 All right, let's go 513 ahead and run this. 514 So notice here it says 515 fetching the sales data. 516 Filtering the valid sales data, 517 summarizing the sales data 518 and then says report is ready. 519 So there we go. 520 Pretty good, pretty fun exercise. 521 I hope you have enjoyed this. 522 So this is the part where 523 we have the basics done. 524 We have three more exercises 525 to be done, but let's go ahead 526 and do them in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 Functions - Reducing duplicationa and splitting complex tasks.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/01 Functions - Reducing duplicationa and splitting complex tasks.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0076319254,
      -0.006699054,
      0.035262816,
      -0.046555627,
      -0.008561537,
      -0.014062089,
      0.0018352336,
      0.0250114,
      0.0007624806,
      0.004497921,
      -0.016666489,
      0.0002542978,
      0.0059346016,
      0.009177291,
      0.12867837,
      -0.00041047006,
      -0.0003718105,
      0.0025566355,
      0.010379315,
      -0.018092584,
      0.009133733,
      0.0064640585,
      -0.010921981,
      -0.007841412,
      0.0068279197,
      0.012540855,
      -0.0002964123,
      0.0043978347,
      0.038866237,
      -0.027503734,
      -0.011400809,
      0.01306677,
      0.0036318253,
      0.021163622,
      0.0110389395,
      0.006867827,
      0.0025551773,
      -0.003976261,
      -0.020962156,
      0.014407732,
      -0.021628434,
      -0.015683765,
      -0.0095071895,
      -0.003813707,
      0.018772062,
      -0.03238398,
      -0.00737547,
      -0.028672222,
      0.0049296077,
      0.026422834,
      0.0106563,
      -0.021008678,
      -0.01378581,
      -0.19813807,
      0.00014025935,
      0.0017066734,
      -0.022269014,
      0.022147525,
      0.008130827,
      0.007089133,
      -0.018920626,
      0.021532318,
      -0.044074763,
      -0.015438592,
      0.009296486,
      -0.024683345,
      0.024206758,
      -0.012088017,
      -0.0027726146,
      -0.00083691627,
      0.031562123,
      0.017552238,
      -0.008967355,
      -0.0108147375,
      -0.032972097,
      -0.012439139,
      0.009683357,
      -0.018829275,
      0.001117942,
      -0.0042499322,
      0.006842408,
      -0.008207058,
      -0.011158797,
      0.005433043,
      0.023403151,
      0.013301808,
      -0.04005755,
      -0.008013526,
      -0.0033629118,
      -0.010743827,
      -0.01406396,
      0.025436118,
      0.007823717,
      0.017315768,
      -0.009015658,
      -0.0033693386,
      -0.008086411,
      -0.0034377617,
      -0.0095190555,
      0.0060280645,
      -0.0028879598,
      -0.029854601,
      -0.025785834,
      0.00093600014,
      0.008584804,
      0.0013229053,
      -0.0072284956,
      -0.013694986,
      -0.0020144426,
      -0.015690971,
      -0.012502221,
      -0.012866547,
      -0.013865572,
      0.029975444,
      -0.0015041953,
      -0.18441284,
      0.010152103,
      0.0015458748,
      -0.01993369,
      0.0006930434,
      -0.011887534,
      0.009296019,
      0.010997573,
      0.0004693989,
      -0.007025882,
      0.026514428,
      -0.00980443,
      0.031951375,
      -0.010087335,
      0.0033179692,
      -0.025435092,
      -0.020548662,
      -0.0004333225,
      0.0155857485,
      -0.0059964214,
      0.023776595,
      -0.027575746,
      -0.01509977,
      -0.018768307,
      -0.0068434025,
      -0.006959126,
      0.019364744,
      0.00089561875,
      0.029819781,
      0.009591896,
      0.00097394607,
      -0.008784045,
      0.016717426,
      -0.029129375,
      -0.0329144,
      0.0015113889,
      -0.011348539,
      -0.003370323,
      -0.005531028,
      0.022671876,
      -0.025353257,
      -0.011560906,
      -0.030329794,
      -0.00623838,
      -0.01326699,
      -0.011389155,
      -0.0020626502,
      -0.003943773,
      -0.003835503,
      -0.014879937,
      0.006089471,
      -0.016270492,
      0.00039245997,
      0.016001029,
      0.020892253,
      0.008852775,
      -0.0044187917,
      -0.0018699326,
      -0.00008765746,
      -0.013377917,
      -0.011809176,
      0.0023261416,
      0.0011631374,
      0.03250256,
      -0.013360064,
      0.009473912,
      -0.0000678142,
      0.03228293,
      -0.004252472,
      0.0031368092,
      0.009320757,
      -0.010290811,
      0.012425656,
      0.010599885,
      -0.008053985,
      -0.006937457,
      -0.0067269746,
      0.0150476275,
      0.0055518453,
      0.010719364,
      -0.029482175,
      0.0016847056,
      -0.0032062526,
      0.010036773,
      0.024977373,
      0.02143814,
      -0.020060135,
      0.011526005,
      -0.019412527,
      0.038747847,
      0.0043161213,
      0.0060351896,
      -0.009162839,
      0.02161133,
      0.01594229,
      -0.018304016,
      -0.00783937,
      -0.0019205321,
      0.00658139,
      0.009085172,
      0.0027606648,
      0.020014944,
      -0.010106984,
      0.00861272,
      0.013884649,
      0.023439549,
      0.007330542,
      0.014766317,
      0.02422533,
      0.0025211617,
      -0.0015111836,
      0.0030950208,
      -0.0060819387,
      -0.0016484972,
      0.020098051,
      0.024857515,
      -0.0025691024,
      0.00004302521,
      -0.01138194,
      -0.0031457294,
      -0.00732745,
      0.011249353,
      0.030137666,
      0.0061749937,
      0.0014941447,
      -0.00266772,
      -0.017416459,
      0.0008308994,
      0.0062599676,
      0.024011474,
      0.0032707164,
      -0.0013867237,
      -0.006216393,
      0.0029096198,
      -0.010666265,
      -0.017422708,
      -0.0066369595,
      0.01626591,
      0.0027585162,
      0.0043486725,
      -0.0006566281,
      -0.013532131,
      -0.008519994,
      -0.017574843,
      -0.007595071,
      -0.020856308,
      -0.004836146,
      -0.017821535,
      0.0036300784,
      0.03531937,
      0.004709567,
      0.0075067277,
      0.02691752,
      -0.013946508,
      0.0044765393,
      0.011640611,
      0.012313304,
      0.01989452,
      -0.0067195147,
      -0.017660327,
      -0.0053936145,
      -0.089071356,
      0.016406748,
      0.010562906,
      -0.0077812364,
      0.008193253,
      0.0037991025,
      -0.01619878,
      0.030498108,
      0.0005342204,
      0.027072243,
      0.011512151,
      -0.0044188104,
      0.031929888,
      -0.0074698436,
      -0.007826731,
      0.015213991,
      0.01575721,
      -0.030747702,
      0.02927759,
      -0.0052315756,
      0.0020417413,
      0.005097222,
      -0.004285159,
      -0.023816483,
      0.014633147,
      0.00022398368,
      0.0012758933,
      0.018827848,
      0.010532042,
      -0.007438625,
      -0.0003687944,
      0.044070654,
      -0.0039199856,
      -0.012552727,
      0.014647698,
      0.010283113,
      0.004210567,
      0.002463888,
      0.013394354,
      -0.0044479975,
      0.00431485,
      -0.03365068,
      0.043738,
      0.023711203,
      0.015482443,
      0.019753091,
      -0.010066479,
      0.02149548,
      -0.011872773,
      -0.0012996974,
      -0.022630725,
      -0.0035526045,
      0.015896572,
      -0.004375395,
      0.014917262,
      0.004855995,
      0.00023898107,
      -0.023112679,
      0.020243248,
      0.021988828,
      -0.0064266976,
      -0.008234919,
      0.012343909,
      -0.010656257,
      0.00007499972,
      -0.01143347,
      0.009042224,
      -0.0011092321,
      -0.01623219,
      -0.0058465414,
      0.02604752,
      -0.014149312,
      0.01677347,
      -0.0026084865,
      -0.005967973,
      -0.009905772,
      0.011580274,
      -0.0034712777,
      -0.028250689,
      0.016472436,
      0.009950269,
      -0.00201261,
      -0.0004307641,
      0.012376248,
      0.009805696,
      0.0053515662,
      -0.002708371,
      0.0007992334,
      -0.00087782735,
      -0.009516334,
      0.013922875,
      0.0069860145,
      -0.021075316,
      0.017971579,
      -0.02157123,
      0.017248096,
      -0.017132273,
      -0.009998931,
      -0.023906697,
      0.02001172,
      -0.01995157,
      0.008442172,
      -0.023176724,
      0.011155671,
      -0.006478095,
      0.020237917,
      -0.032432057,
      -0.015316688,
      0.0052062985,
      -0.029158115,
      0.016246134,
      0.0036204008,
      -0.021793948,
      -0.009247614,
      -0.00091529073,
      0.017795421,
      -0.0037238367,
      -0.001670511,
      0.010301988,
      -0.042252775,
      -0.0023950147,
      -0.020134002,
      -0.028823188,
      0.01682623,
      -0.010618967,
      -0.002752622,
      -0.0039012926,
      -0.001545663,
      -0.0037897222,
      -0.025121717,
      -0.023338279,
      0.0085167615,
      -0.022914354,
      -0.0047745085,
      -0.02599329,
      -0.014384509,
      0.01758991,
      0.02821178,
      0.011507552,
      -0.007902473,
      -0.00831761,
      0.010635902,
      0.020260062,
      -0.0035957154,
      -0.005153969,
      0.029239336,
      -0.021041356,
      -0.02115773,
      0.002598841,
      -0.02803559,
      -0.024905818,
      -0.0017543493,
      0.0029154923,
      -0.002779579,
      -0.014356055,
      0.008463567,
      0.012035679,
      -0.009688491,
      -0.002642638,
      -0.021701217,
      -0.01627971,
      0.0090396525,
      -0.03516191,
      0.005621207,
      0.017734291,
      0.009272304,
      0.01610138,
      0.001314817,
      0.005660484,
      0.009656456,
      -0.00041043997,
      -0.007269225,
      -0.03908232,
      -0.029038055,
      0.0270011,
      0.0077303923,
      0.003237694,
      0.0033985686,
      0.007790572,
      0.0074821822,
      0.007352229,
      0.0037951644,
      -0.02659191,
      0.007298631,
      0.00578319,
      0.011322132,
      0.013462121,
      -0.013107017,
      -0.026198452,
      0.013654623,
      0.022249784,
      -0.028410818,
      -0.0045242314,
      0.008305453,
      -0.002240516,
      0.018299408,
      -0.016552377,
      0.0139088845,
      0.0042333105,
      -0.0017416222,
      0.003646402,
      -0.022709379,
      -0.00058207044,
      -0.002849229,
      0.019116662,
      -0.016631272,
      -0.008980537,
      -0.007397984,
      0.01454001,
      0.010902232,
      0.0023539232,
      -0.011674577,
      -0.0076351487,
      0.013400981,
      -0.0056656064,
      0.041661922,
      0.009469352,
      -0.00019492843,
      -0.033373754,
      -0.000323366,
      0.015007456,
      -0.022427551,
      0.0018360291,
      -0.029892366,
      0.016232489,
      -0.004876198,
      -0.01024028,
      0.0058931117,
      0.010679156,
      -0.0031804326,
      -0.0062821354,
      0.018833226,
      -0.016195552,
      0.0018163811,
      -0.007881237,
      -0.018097889,
      0.004860562,
      0.020391494,
      -0.011460519,
      0.016809097,
      -0.012906698,
      -0.0054697143,
      -0.013904427,
      0.0101285335,
      0.01545301,
      -0.012653613,
      0.025647692,
      -0.0007875433,
      -0.010124458,
      -0.014292946,
      -0.0063941013,
      0.00902812,
      -0.0032623431,
      0.0020137706,
      -0.014489914,
      0.031444967,
      -0.010640199,
      0.0086197145,
      -0.012412616,
      -0.007852253,
      -0.002987107,
      0.013686016,
      -0.010745466,
      -0.013524621,
      -0.011853281,
      -0.0225444,
      -0.014926194,
      -0.01269019,
      0.017637596,
      -0.12964435,
      0.0077133416,
      -0.013687427,
      0.013726501,
      0.0013371712,
      -0.015906813,
      -0.003138112,
      0.0018300059,
      -0.004058025,
      -0.010903748,
      0.036124073,
      0.0077889753,
      -0.0101732155,
      -0.009373434,
      0.0038856317,
      -0.0034855683,
      0.009714726,
      0.0025681918,
      0.024715573,
      0.00012863829,
      -0.013723985,
      0.011815033,
      0.007340089,
      0.0020261263,
      -0.019158851,
      -0.003151705,
      -0.0019448127,
      0.008971443,
      -0.011593618,
      -0.025477082,
      -0.027258242,
      -0.0050595095,
      -0.018246954,
      0.005221012,
      0.0033917855,
      -0.0149482,
      -0.021892807,
      0.015022775,
      0.014505172,
      -0.00081815483,
      0.0039561833,
      -0.009369509,
      -0.0024516422,
      0.011315968,
      0.000447533,
      0.03548874,
      0.017846797,
      -0.0014805844,
      0.003386028,
      0.03405457,
      -0.026416056,
      -0.011296962,
      0.017929532,
      -0.029826015,
      -0.01364969,
      0.0073249396,
      0.02289546,
      -0.024834102,
      0.003120756,
      -0.009339582,
      -0.017428186,
      0.01181452,
      0.0050059864,
      0.016857177,
      -0.007179316,
      0.011214078,
      0.015092995,
      0.014616573,
      -0.003124316,
      -0.017649872,
      -0.0040536216,
      0.00037488254,
      0.0072067208,
      0.013345239,
      0.011032051,
      0.0058191917,
      0.016176922,
      0.00504701,
      -0.0027823162,
      -0.0045026867,
      -0.039892502,
      0.008365787,
      -0.050882768,
      -0.020808471,
      0.00905399,
      -0.0135272,
      0.010174879,
      0.0057463194,
      -0.006676226,
      0.010673547,
      0.0024694225,
      -0.0012219233,
      -0.033448156,
      -0.004488168,
      0.023647338,
      -0.00079377333,
      -0.013263861,
      0.00089111255,
      -0.003163289,
      -0.01777559,
      -0.026191914,
      0.010979962,
      -0.004718765,
      0.009115772,
      -0.01877374,
      -0.006783444,
      0.011471383,
      0.01952984,
      -0.022814976,
      0.0093695065,
      -0.016770156,
      -0.009334014,
      0.005005561,
      -0.15765491,
      -0.027481629,
      0.012618444,
      -0.0010981567,
      0.015890269,
      0.008252436,
      0.0022835704,
      -0.0030675072,
      0.00079447986,
      0.009822349,
      0.0060956683,
      -0.010686686,
      -0.026280405,
      -0.0273398,
      0.032623954,
      0.12523623,
      -0.010926087,
      -0.0076719616,
      -0.019420004,
      0.006174193,
      -0.010164805,
      -0.028146692,
      -0.002471969,
      0.0036446657,
      -0.001031495,
      -0.023625765,
      0.0145447515,
      0.0015311473,
      -0.0010300501,
      -0.018933997,
      0.011370379,
      -0.009180455,
      -0.007263577,
      0.009855775,
      0.00872262,
      -0.004531767,
      -0.009332871,
      0.008343884,
      0.01145747,
      0.0023895865,
      0.021408234,
      0.003672364,
      -0.011992996,
      0.009096096,
      -0.00017499573,
      0.005458215,
      -0.019493759,
      -0.008041318,
      0.0021045946,
      0.013735514,
      0.002022295,
      -0.059497677,
      0.015623959,
      -0.013799884,
      -0.005380828,
      0.020411048,
      0.007025613,
      0.0019537653,
      0.012943544,
      0.005188276,
      -0.0018219133,
      0.0053953514,
      -0.0028090086,
      0.016427988,
      0.010652991,
      -0.013100153,
      0.019462546,
      0.02521792,
      0.003770384,
      -0.0042174067,
      0.008211826,
      0.015716812,
      0.009762716,
      0.007492709,
      -0.017761227,
      -0.0045567574,
      0.013551798,
      0.030238332,
      0.008841265,
      -0.009521599,
      0.004375277,
      0.011195472,
      0.01119355,
      -0.017778922,
      0.0029912489,
      0.0136072505,
      -0.007917215,
      0.032448962,
      -0.0022826812,
      0.0018222695,
      -0.0059789545,
      0.0054910528,
      -0.016828442,
      0.0067435303,
      -0.0070022345,
      0.0069037187,
      0.007758181,
      -0.036187537,
      0.027906891,
      -0.015873222,
      0.007657866,
      -0.0009909759,
      -0.023641516,
      -0.022993537,
      0.02157712,
      -0.006954159,
      -0.008740961,
      0.023428096,
      0.00033179097,
      -0.009323099
    ]
  },
  {
    "id": "genai_cohort_python_02_Functions___3_more_features_vtt",
    "content": "All right, so let's go 2 with three more features of 3 functions in Python. 4 So it's better actually directly 5 to go onto the Blackboard or our 6 tutorial guide kind of a thing. 7 So the next one is hiding 8 implementation detail. 9 Now this is not something that we 10 want to protect something there are 11 other mechanism of protecting. 12 This is like somebody should not 13 be able to see what complexity 14 of the function is going on. 15 Once it's done, it should be done 16 how, how we are doing it, how we are 17 managing the complexity that should 18 be usually hidden by other people. 19 We have implemented our brain once. 20 We don't want to get again with that. 21 So let's go with this one. 22 This is another challenge that we 23 have is you are building a simple 24 app that registers the user. 25 We will do that later on as well. 26 It's fun. 27 You want to separate the concerns 28 and by the way, separations of 29 concern, you will hear that a lot. 30 This is a common software 31 design pattern as well. 32 Getting input, validating 33 it and saving it. 34 So there are three jobs 35 that we have here. 36 Get the input, validate the input 37 and save that to the database. 38 I don't know what that database is. 39 I really don't care. 40 Whenever I want to save some 41 information in the database, it 42 should be just a method available to 43 me with of course more information 44 that I can give it to you later on. 45 But let's go ahead and design this. 46 So let's call this one as hiding. 47 Let's close this. 48 This one is 03 and we'll call 49 this one as hiding py 50 all right, so what I need 51 to do step one, get the input. 52 All right, pretty simple. 53 We have done this kind 54 of example as well. 55 We'll call this one as get input. 56 It doesn't pass on any parameter. 57 That is totally fine. 58 We just want to have a definition 59 which says printing and I will 60 just say getting user, input. 61 User input might come from terminal, 62 might be a web page. 63 I don't really care about 64 the complexity of it. 65 Another one is validate the input. 66 There we go, nice and easy. 67 Now how the validation is being done? 68 Probably we are using regex, 69 also known as regular expressions 70 or any other Mechanism. 71 Don't really care about it, just want 72 to hide the complexity of it. 73 And I will just say 74 validating the user, info, 75 short for information. 76 And the last task is 77 save it to the database. 78 So let's define the method, call it 79 as save to db, short for database. 80 And we'll just go like this. 81 Don't really care if it is MySQL 82 MongoDB, whatever that is. 83 The job is, whatever the data, 84 you give it to me, I'll 85 just save it to the database. 86 I'll call this one as 87 saving to database. 88 So there we go, we have 89 separated the concerns as well. 90 Now, finally, let's try 91 to register a user as it 92 says write register user. 93 So let's call this one as 94 register, user, and again, this 95 is also a common pattern. 96 Sometimes you use underscore, 97 sometimes you use camel. 98 Cases. 99 No right or wrong. 100 Each one have their own way 101 of writing the things. 102 There is no right or 103 wrong in this case. 104 All right, the step 105 one, get user input. 106 All right, got it. 107 The step two, validate the data. 108 All right, let's validate the input 109 and then save it to the database. 110 Save it to the database and finally 111 says user registration complete. 112 Simple. 113 It is user registration complete. 114 All right, and then don't 115 forget to call this one. 116 Otherwise if you are not calling it, 117 that means you are not running it. 118 So register user. 119 Let's of course validate it 120 by running this. 121 So I'll just go ahead and say 122 Python 3 wants to run 03 hiding. 123 And there we go, getting the user 124 input, validating the user info, 125 saving to the database. 126 Saving to the database. 127 And finally saying that user 128 registration is complete. 129 Pretty good, isn't it? 130 So this is how you practice defining 131 the methods, and we are doing a lot 132 of practice by these examples. 133 Let's move on to the next one which 134 says improving the readability. 135 First of all, I need to improve this 136 by making this a little larger 137 one so that readability improves. 138 There we go. 139 And we can actually move 140 this just right there. 141 Looks good. 142 Now you sell different sizes of chai. 143 All right, Pretty good. 144 Instead of writing down formulas 145 everywhere, create a function. 146 What it does, it simply goes 147 ahead and says calculate bills. 148 You provide it cups and price per cup 149 returns the total bill. 150 Use the function for multiple orders. 151 This is a very, very 152 interesting problem. 153 Why? 154 Because it says return total bill. 155 So far whatever we are doing 156 is just a print statement. 157 The function itself prints something. 158 It doesn't return you anything back 159 you cannot hold. 160 Like whenever a function 161 returns anything that you can hold 162 in the variable because 163 that's being returned, but but so 164 far is just printing. 165 Printing and returning the value 166 are two different concepts. 167 Let me show you that. 168 So what do we call this? 169 Readability. 170 Yeah, that would be good. 171 Let's create a new one. 172 Call this one as 04readability. 173 Hope I wrote that correct. 174 If not, make sure you correct me up. 175 All right, so we simply Go 176 ahead and define a method that says 177 calculate bills or bill. 178 And what we expect is you 179 pass me a child that 180 how many cups are there? 181 So cups and we'll say price per cup. 182 Price per cup. 183 All right, pretty good. 184 Now based on the information, 185 we want to actually 186 calculate the total bill. 187 It's super easy math. 188 We can just simply take 189 the cups and go ahead and multiply 190 it by, price per cup. 191 Now you could have 192 formatted this as well. 193 Like I will just use 194 the printf formatted string. 195 But when we use the keyword return, 196 that means I don't want to print it. 197 Maybe you don't want to print it. 198 You want to store that 199 in the variable and do some 200 more processing on it. 201 That's totally okay. 202 So this one is never going to 203 automatically print anything at all. 204 Let me show you. 205 What does it mean by that? 206 So if I go ahead and say 207 calculate bill and I provide that, 208 hey, there are three cups 209 and each cup cost 15 rupees. 210 Let's try to run this. 211 This is the most important 212 part of the whole video. 213 And let's call this1 as Python 3 214 and this will say04 and run this. 215 Although we are calling it, we 216 have seen that in the last time 217 that when we call it, it prints 218 because we asked it to print. 219 This one simply says, hey, 220 we just returned the value. 221 So in such cases you can just 222 go ahead and create 223 a variable and hold this value. 224 So I will call this one as my 225 bill, just like this. 226 And we will hold this value 227 because it's returning me, it's 228 giving me a return value. 229 And then later on I can go 230 ahead and print this, my bill. 231 Because the instruction 232 now is to print bill. 233 If I run this again now we get 234 the 45, which is actually correct. 235 But because we asked it 236 to print, we never said that 237 the function will itself print. 238 Another kind of a thing that you 239 are going to get with this is 240 some people actually directly 241 use it inside the print statement, 242 which is also totally fine. 243 So let's just say I call it like this 244 and I will say order for table two. 245 And just like this. 246 And then, separated by comma, you can 247 actually call this method directly 248 here and provide the details. 249 For example, there were 250 two cups expensive T for 50 251 rupees just like that. 252 In this case, since we have asked 253 the order to be printed, it 254 just goes ahead and print that. 255 So I hope you got this. 256 There is a huge, huge difference 257 between, both of them. 258 And again both of them have 259 their use cases, their ways of 260 places where they can be used. 261 But remember, the return 262 is a very, very interesting 263 concept that we have. 264 All right, you got a lot of things 265 in this one last one that we have. 266 Definitely need to make it a little 267 bit bigger so that we can 268 see that easily on the screen. 269 There we go. 270 Looks good now. 271 So this one is for 272 improving the traceability. 273 Each one of your functions 274 should be traceable. 275 They should not be like your 276 logic should not be scattered 277 into thousand places. 278 So if you make a mistake in one 279 of them, you, you can fix it 280 at just one place and go with that. 281 And this is one prime example of it. 282 Your shop adds a 10% of VAT. 283 Now VAT is no longer kind, 284 of a thing in India, but I'm pretty 285 sure it is there in the Europe 286 and other countries as well. 287 But consider this like an equivalent 288 of GST or vat, whatever you think, 289 you just add some tax on it. 290 So 10% tax on every order. 291 You want this to be consistent 292 and traceable, right? 293 Add vat. 294 We have to give the price and what is 295 the VAT rate and use it to compute 296 the final price for three orders. 297 So we have to actually give 298 at least three examples for it. 299 And we will use loop for it. 300 We'll try to get our concepts 301 of loop again, let's call 302 this one as a new file. 303 We will have a 05 304 oops underscore trace py. 305 All right, so the step one is 306 let's create add vat as a method. 307 What it gives us is a parameter 308 price and the VAT rate. 309 Let's call the same. 310 You will give me price and VAT rate. 311 So whatever the price and VAT 312 rate you give me, I will just 313 go ahead and return this. 314 Not printed, but I'll 315 return the order. 316 So for this, simply go ahead 317 and say that price, 318 this is the price that I have. 319 And this is going to be multiplied 320 by whatever the VAT rate is. 321 So what we're going to do is 322 we're going to say 100 plus VAT 323 rate and we're going to go 324 ahead and divide it by 100 so 325 you get the percentage in the 326 VAT rate. 327 All right? 328 So pretty basic maths. 329 If you don't want it, you can 330 do different maths as well. 331 That is totally, totally fine. 332 But what I'm doing is 100. 333 I shouldn't be explaining this. 334 I shouldn't be explaining this. 335 You can use any other methods. 336 If you prefer to multiply it 337 by zero point, whatever 338 the VAT rate, you can try that. 339 But let's just say we have the orders 340 and in the orders we are 341 going to go ahead and put 342 up an array or list in this case. 343 So first order is of 100, then we 344 have 150, then we have maybe 200. 345 So we can use a simple loop 346 to calculate that. 347 So for price in orders, 348 just like that, feel free 349 to call it whatever you like. 350 Order in orders, price in orders, 351 whatever you want to have. 352 And for this, for each one 353 of them we are going to go ahead 354 and create a final or final amount. 355 Final amount would be 356 better word here. 357 And that is calculated by our 358 method which says add vet. 359 And for this you go ahead and say 360 the price is going to be like this. 361 So we can just go ahead and give 362 this as a variable just like that. 363 And we'll say we 364 added 10% of the VAT. 365 So there we go, we have added the 10 366 and then finally we go ahead 367 and print out a nice message print. 368 There we go. 369 We'll use a formatted string 370 and we'll go ahead and say original, 371 original and the original value is 372 price Price final with VAT 373 is going to be final, not finally. 374 Make sure you keep an eye on that 375 or, or in this case final amount. 376 There we go. 377 Don't worry about this. 378 It's just auto formatted. 379 This is the code that we have. 380 My code auto wrap setup 381 in case you also want that. 382 Click on the view and we 383 have this world wrap. 384 Pretty easy. 385 Let's go ahead and run this 386 and see what happens with this. 387 Have we done any mistake? 388 This one is 05 traces. 389 And there we go. 390 So original was 391 10 and we have added 110. 392 Pretty good. 393 Accurate 10% VAT. 394 150, 165 again pretty good. 395 Pretty easy calculation for this 396 200 we got 220 easy calculation. 397 So at least we can verify that 398 10% VAT is getting added. 399 So whatever the math formula we 400 have added it actually is working. 401 So this was all about functions. 402 You don't realize it but we 403 have covered so much of 404 in depth about the function. 405 We have covered about 406 the readability, reducing 407 the complexity, segregation 408 of the complexity also known 409 as separation of concern. 410 We have also seen how return 411 and print are different in 412 functions, how to define a function. 413 So so many activities, so many 414 mini challenges we have done. 415 I hope you have enjoyed them and make 416 sure you rate us as well 417 because your rating is something 418 that will help me to make the best 419 course in the world on Python. 420 That is it for this video. 421 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 Functions - 3 more features.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/02 Functions - 3 more features.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.028745893,
      -0.011398497,
      0.04279789,
      -0.05325694,
      -0.00006682198,
      -0.027693296,
      0.013836466,
      0.026226427,
      0.014622941,
      -0.009584479,
      -0.014339162,
      0.0031970276,
      -0.0022527315,
      0.015806805,
      0.13050024,
      0.019541902,
      -0.006315188,
      -0.003660649,
      -0.00010535531,
      -0.015922403,
      0.0037194504,
      -0.0024055645,
      -0.02581814,
      -0.012119273,
      0.011498401,
      0.0018746448,
      0.013340292,
      0.028202638,
      0.042687953,
      -0.026772408,
      0.010168156,
      0.01750775,
      0.0053464244,
      0.021812677,
      0.008270033,
      0.017767066,
      0.012793409,
      -0.0029353234,
      -0.0061256457,
      0.021264732,
      -0.005150296,
      -0.0023323025,
      -0.0005773388,
      -0.015946459,
      0.024324562,
      -0.021289093,
      -0.008584909,
      -0.02158904,
      0.008105349,
      0.022962015,
      0.015576899,
      -0.027514001,
      -0.01945242,
      -0.19208682,
      0.023172108,
      -0.004009172,
      0.0010645994,
      -0.005713045,
      0.014504037,
      0.009767847,
      -0.024811931,
      0.023202496,
      -0.027377706,
      -0.007714168,
      0.0003367173,
      -0.021550683,
      0.014482909,
      -0.011991711,
      -0.006512026,
      -0.010739603,
      0.025427142,
      0.03567872,
      -0.012320813,
      -0.014040195,
      -0.015955389,
      -0.031412385,
      0.0070720413,
      -0.021302445,
      0.00049071957,
      -0.004571926,
      0.0037374857,
      -0.0015839365,
      -0.0012896716,
      -0.0013296952,
      0.0147443125,
      -0.0018626368,
      -0.021909375,
      -0.00040804275,
      0.004232794,
      0.00086542417,
      -0.00013051035,
      0.020885203,
      -0.0021891987,
      0.011672844,
      -0.025079792,
      0.00074549206,
      -0.00866788,
      0.00050288206,
      -0.016309952,
      -0.014815048,
      -0.0020598795,
      -0.011530392,
      -0.024638431,
      0.0007941213,
      -0.009293857,
      -0.00000422879,
      0.0019520416,
      -0.00030401576,
      0.0115797995,
      -0.008288051,
      -0.020959496,
      -0.01161289,
      0.00018920767,
      0.028712612,
      0.0025934156,
      -0.17602411,
      0.01979711,
      -0.02826334,
      -0.009823171,
      0.00815433,
      0.0019393695,
      0.010423735,
      0.013286575,
      0.009027272,
      -0.008085561,
      0.016795592,
      0.0052700485,
      0.012878776,
      0.0055569834,
      0.0022110085,
      -0.030556647,
      -0.011920785,
      -0.0056486493,
      0.0118295355,
      0.00053914194,
      0.017107408,
      -0.027140765,
      -0.0187763,
      -0.012143023,
      -0.011451637,
      -0.005846523,
      0.02217924,
      -0.004086001,
      0.028393017,
      0.01193804,
      -0.012323711,
      -0.008485825,
      0.015362967,
      -0.02864286,
      -0.04014405,
      0.01595983,
      -0.010039924,
      0.01115342,
      0.0041212584,
      0.024439504,
      -0.028738387,
      -0.0018934276,
      0.012402732,
      0.0002240402,
      0.013550849,
      -0.002799833,
      0.004895908,
      0.013383462,
      -0.005672896,
      0.0010388964,
      0.0022669225,
      -0.0053106826,
      0.00025687247,
      0.018540284,
      0.029064085,
      0.0034451447,
      -0.016289635,
      0.0073398747,
      0.0076002995,
      -0.010058865,
      -0.019990183,
      0.0054603056,
      -0.005092691,
      0.01621502,
      -0.007868029,
      0.005355253,
      0.0025152464,
      0.015674721,
      -0.0027783914,
      -0.007766651,
      -0.0017744619,
      -0.012460794,
      0.012817825,
      0.0054071583,
      -0.0060426514,
      -0.013647954,
      0.0009123493,
      0.0007371804,
      -0.012321531,
      0.010660905,
      -0.047979277,
      0.010328753,
      -0.005694547,
      -0.003408441,
      0.017919157,
      0.02912453,
      -0.01611447,
      0.013737732,
      -0.022235338,
      0.009789303,
      -0.014363289,
      0.0061323354,
      -0.020183168,
      0.01874373,
      0.015590779,
      -0.02316946,
      -0.006181608,
      0.009376986,
      -0.0024612732,
      0.002253534,
      -0.009357521,
      0.013535305,
      -0.0018818293,
      -0.0011594372,
      0.01582768,
      0.004913709,
      0.014909655,
      0.0037193324,
      0.023515185,
      0.004713675,
      -0.014221634,
      0.012044503,
      -0.013413157,
      0.006430761,
      0.019948674,
      0.030194456,
      -0.00092674914,
      -0.027268197,
      0.004105787,
      0.0035775865,
      -0.015596532,
      -0.01044962,
      0.023625081,
      0.0069023063,
      0.018584559,
      0.001870813,
      -0.0071531376,
      0.013377183,
      -0.0017612955,
      0.02064299,
      -0.0046596276,
      0.011383101,
      -0.0004982375,
      0.0077668373,
      -0.0088482285,
      -0.019403445,
      -0.019733494,
      0.0064736833,
      -0.0064789476,
      0.004773641,
      -0.025627637,
      -0.029552832,
      0.0053661517,
      -0.009802943,
      -0.015121659,
      -0.010278085,
      -0.01470854,
      -0.012842939,
      0.0023728688,
      0.01796352,
      -0.015748171,
      -0.011999281,
      0.019792976,
      -0.0026464958,
      0.0011774609,
      0.020352881,
      0.020552274,
      0.0039652945,
      -0.019414786,
      -0.008689,
      0.012003769,
      -0.09997765,
      0.03524719,
      0.014073063,
      -0.0119592175,
      -0.0012598705,
      0.00974496,
      -0.016470958,
      0.018087132,
      -0.0073185787,
      0.011842719,
      0.0021195677,
      -0.020292455,
      0.018733734,
      -0.0050518746,
      -0.008648274,
      0.0041067004,
      0.015525662,
      -0.01739466,
      0.019705333,
      -0.009882672,
      -0.001086162,
      -0.0067780223,
      -0.009076785,
      -0.003963194,
      0.020753082,
      0.010227067,
      0.00051844714,
      0.026001252,
      0.005262806,
      -0.004190607,
      -0.009175483,
      0.02943342,
      -0.0028058598,
      -0.0105115995,
      0.008490749,
      0.004639539,
      0.01227303,
      -0.010006851,
      0.017752351,
      0.0033903203,
      -0.0012331137,
      -0.024353316,
      0.025668874,
      0.026200013,
      -0.0020911854,
      0.025074705,
      -0.015387409,
      0.020648848,
      -0.019066881,
      -0.012775887,
      -0.028463226,
      0.008814093,
      0.016188106,
      0.00097191916,
      0.0013052415,
      0.017132385,
      0.009152868,
      -0.014625695,
      0.012510384,
      0.019781705,
      -0.001206347,
      -0.00021578101,
      0.000089508416,
      -0.008315501,
      0.005327869,
      0.004483698,
      0.015039967,
      -0.0027218806,
      -0.018061528,
      -0.0037657635,
      0.030888673,
      -0.01752097,
      -0.009367439,
      -0.010789773,
      0.007439032,
      0.010744381,
      0.024774328,
      -0.011619987,
      -0.010595421,
      0.026443295,
      -0.004971111,
      -0.010057831,
      0.0087535875,
      0.010703395,
      -0.023812765,
      0.0061793686,
      0.0022966773,
      0.018433979,
      0.02078521,
      -0.021790244,
      0.018294413,
      0.007685031,
      0.0042604133,
      0.011524904,
      -0.016300421,
      0.017967645,
      -0.031122236,
      -0.004875098,
      -0.020618068,
      0.0151385525,
      -0.00090025243,
      0.0012470977,
      -0.02348091,
      0.0036754536,
      -0.0107965665,
      0.013439771,
      -0.028826647,
      -0.003907356,
      0.000553056,
      -0.0036857643,
      0.020760108,
      -0.0015182392,
      -0.030531934,
      -0.0010580474,
      -0.019830767,
      0.023722809,
      -0.0026928922,
      0.010369628,
      0.017732807,
      -0.024739314,
      -0.008449648,
      -0.022154953,
      -0.011992712,
      0.023167368,
      -0.024355374,
      -0.0031444957,
      -0.01622843,
      -0.006126651,
      -0.0095275575,
      -0.012162563,
      -0.027108334,
      0.02396989,
      -0.030182777,
      -0.0052335514,
      0.0050191297,
      -0.017948864,
      0.027871676,
      0.017423844,
      0.0050281985,
      -0.010550001,
      -0.0015396228,
      -0.0021323028,
      0.0058363425,
      0.0050413855,
      -0.004391201,
      0.03557899,
      -0.0024640332,
      -0.013772389,
      0.009374432,
      -0.022293877,
      -0.03129707,
      0.0035663424,
      -0.01288817,
      0.0008513473,
      -0.0044413474,
      0.005390331,
      0.008544775,
      -0.009049255,
      -0.014182347,
      -0.028411582,
      0.009032475,
      0.013989086,
      -0.022962783,
      -0.00032432858,
      0.014664315,
      0.0021357706,
      0.0032611697,
      0.0010410037,
      0.011950123,
      0.0010243092,
      -0.008414053,
      -0.005807233,
      -0.02659402,
      -0.019301925,
      0.008068515,
      0.008060062,
      0.017747022,
      -0.011799935,
      0.026174892,
      0.0112473555,
      0.016093366,
      -0.008332617,
      -0.004758683,
      0.009901993,
      0.00052081037,
      0.019368961,
      0.027733138,
      -0.0063901395,
      -0.031622134,
      0.008045431,
      0.0076329913,
      -0.035330117,
      -0.007075787,
      0.026301568,
      0.004481981,
      0.025341578,
      -0.009341054,
      0.014770749,
      -0.0024449516,
      0.006574452,
      -0.008519822,
      -0.024944901,
      -0.0029142927,
      8.1570147e-7,
      0.011684499,
      0.00648788,
      -0.0068845744,
      -0.0033389595,
      -0.0031332944,
      0.007891464,
      -0.006789379,
      -0.008724274,
      -0.00019258162,
      0.009422659,
      0.02341032,
      0.03971368,
      0.0034950336,
      0.0029181084,
      -0.02724429,
      0.0032114421,
      0.010488867,
      -0.014324365,
      0.0066487174,
      -0.008435694,
      0.01660407,
      -0.011679942,
      -0.009825139,
      -0.0058599627,
      -0.0052819573,
      0.020596825,
      -0.011490245,
      0.011793574,
      -0.01782982,
      -0.00385939,
      -0.024243219,
      -0.009308782,
      0.0015739191,
      0.031298228,
      -0.006558395,
      0.02038238,
      0.010620216,
      0.006364718,
      -0.02002279,
      -0.0067031966,
      0.012946659,
      -0.0013612851,
      0.023457417,
      -0.0074026035,
      -0.010596957,
      -0.00008422389,
      0.0049218396,
      0.024587946,
      -0.01628258,
      -0.005598245,
      -0.011367903,
      0.030940607,
      -0.02452574,
      -0.0050385697,
      0.0068159914,
      -0.002696419,
      -0.004504673,
      0.013569639,
      0.007068358,
      -0.0109319985,
      0.0022069584,
      -0.013596995,
      -0.0012887019,
      -0.014751557,
      0.007900096,
      -0.135663,
      0.010988308,
      -0.02143124,
      0.0077724536,
      -0.015158354,
      -0.0023236312,
      -0.0026885136,
      -0.00758946,
      0.003979785,
      -0.00018650676,
      0.022126362,
      0.013531935,
      0.0071478393,
      -0.006607058,
      -0.0013276921,
      0.0055738944,
      0.013488568,
      0.008404144,
      0.029428706,
      -0.0033361625,
      -0.010432661,
      -0.0029070005,
      0.010924333,
      0.009542211,
      -0.016014082,
      -0.0068578343,
      0.002672385,
      -0.0059627094,
      -0.003327174,
      -0.024851073,
      -0.04036327,
      -0.008786039,
      -0.0008037189,
      0.013070551,
      0.004632116,
      -0.0020933049,
      -0.011462486,
      0.011229927,
      0.004179869,
      0.006993704,
      0.0065803463,
      -0.015300447,
      0.02570961,
      0.0076145823,
      0.0011096237,
      0.020539034,
      0.015762268,
      -0.018876398,
      0.0006899048,
      0.025527406,
      -0.028995724,
      -0.0108131,
      -0.002478276,
      -0.030689344,
      -0.0003217172,
      -0.004564843,
      0.008500758,
      -0.01613011,
      -0.016093768,
      0.0026903271,
      -0.0045190393,
      0.022023274,
      -0.000059300954,
      0.03068709,
      0.009854665,
      0.01080243,
      0.012102072,
      0.022804292,
      -0.0070470613,
      0.002324714,
      -0.0158859,
      0.0019732579,
      0.0017906486,
      0.033891384,
      0.008002553,
      -0.008026891,
      -0.020080855,
      0.003568214,
      -0.020832326,
      0.001157677,
      -0.043665633,
      0.017528404,
      -0.058158014,
      -0.007107732,
      -0.0010630735,
      -0.018071303,
      0.00019748032,
      -0.003854621,
      -0.00202586,
      0.019853024,
      0.0034645835,
      0.0026592766,
      -0.020358216,
      -0.009283956,
      0.0054318556,
      -0.016878264,
      0.0025948354,
      0.021301294,
      0.0018727893,
      -0.01687302,
      -0.036125,
      0.007736064,
      0.01080243,
      0.008561612,
      -0.012346855,
      -0.012012218,
      0.007516124,
      0.016329225,
      -0.011931483,
      -0.004099517,
      -0.0107683465,
      -0.011900409,
      0.003406538,
      -0.15077274,
      -0.008845168,
      0.0005578613,
      -0.0064188363,
      0.013798147,
      0.006217551,
      -0.006221548,
      -0.015664982,
      -0.0052646548,
      -0.0013097543,
      -0.00081492,
      -0.017340444,
      -0.018709559,
      -0.009939991,
      0.02267141,
      0.13348986,
      -0.011904786,
      -0.02101739,
      -0.0018804395,
      0.0069324607,
      0.0017525984,
      -0.0030686944,
      -0.028832149,
      -0.009423089,
      0.008177418,
      -0.024562305,
      0.01472301,
      0.0037269525,
      0.0037588633,
      -0.0033941998,
      0.0066000796,
      0.008102307,
      -0.0038799532,
      0.027928285,
      0.008501397,
      -0.0039610453,
      0.010758199,
      0.011531519,
      -0.011311993,
      0.001910066,
      0.028540857,
      0.0059565385,
      0.006258329,
      -0.00019792283,
      0.011193284,
      0.011048267,
      -0.0038796556,
      -0.013516898,
      0.009201836,
      -0.0043434226,
      -0.0058645313,
      -0.05580473,
      -0.00095396163,
      -0.0081518255,
      -0.008423001,
      0.024141854,
      -0.0004682984,
      0.023174584,
      0.0021551442,
      0.017409995,
      -0.008468107,
      -0.008269516,
      0.001966953,
      0.014103827,
      0.0007752341,
      0.0031328425,
      0.014392505,
      0.017936567,
      0.022838388,
      -0.0001735743,
      0.0024599798,
      0.023932729,
      -0.0010883053,
      0.024486434,
      -0.0066447807,
      0.008764,
      -0.001814618,
      0.021452159,
      0.012260492,
      0.0037767354,
      0.015046127,
      0.006775804,
      -0.0075613027,
      -0.01394926,
      0.0114822425,
      0.0078536775,
      0.0023631263,
      0.01775989,
      -0.008730065,
      -0.0032527759,
      0.015220552,
      -0.0062136077,
      -0.009992009,
      0.023982309,
      -0.010568862,
      0.0050044493,
      0.015296815,
      -0.03311212,
      0.04564777,
      0.012048156,
      -0.017190391,
      -0.006634999,
      -0.020960419,
      -0.026503647,
      0.021542404,
      0.009102228,
      -0.005431572,
      0.016659828,
      0.0013166916,
      0.010840934
    ]
  },
  {
    "id": "genai_cohort_python_03_Scope_and_named_space_in_functions_vtt",
    "content": "Next up in the world of functions we 2 are going to learn about scopes. 3 This is fun topic and too much theory 4 in this topic will make sure 5 that you are absolutely confused. 6 We are not going to do that 7 with just a simple example 8 and moving after the example, 9 we'll just write the code. 10 The code will make all 11 the doubts absolutely clear. 12 And that is the difference between 13 people who teach theory 14 too much and people who have 15 worked in the production. 16 They like to show you the code first. 17 And I'm a guy who have 18 always been into the production 19 for as long as I remember. 20 So I'll just show you the code 21 and you will love this one. 22 For this one, all I 23 need is two things. 24 The first of all, your 25 undivided attention and focus 26 on the screen itself. 27 I'll remove myself from here so that 28 we can focus just on the screen. 29 The second one is please do rate 30 this course as well. 31 I know I've said it many 32 times but you know, a lot 33 of people doesn't rate and this 34 is not really great. 35 So don't worry, I'm just here, 36 I'm just trying to make sure that 37 you focus on the screen more. 38 So we'll just go on that part. 39 So what are these scopes and what 40 does it even mean to have 41 something in the scope itself? 42 So this is pretty, fun. 43 Let's take the example. 44 Imagine you are running 45 a bustling chai cafe. 46 It's called as, let's just give 47 it a name as well for fun. 48 Let's call this one as Global Sip. 49 So this is your cafe name. 50 Pretty fun name. 51 And each team member has their 52 own notepad for the order. 53 So let's just say we are modern, 54 we have the apps for, for orders. 55 So we have one app which is 56 with the team and there is 57 another one which is required 58 by the owner as well. 59 So this is owner, owner. 60 And this owner has an app. 61 And again this app, let's 62 just say this, we call this 63 one as Master Notepad. 64 So this is Master Notepad. 65 This is the app which is owned 66 by the owner and he's responsible 67 for placing all the orders 68 in the kitchen itself. 69 But the team also got 70 their own notepad as well. 71 And each one of the team member 72 will have their own notepad. 73 Maybe we have two 74 workers in the cafe. 75 This one has its own notepad 76 and this one has its own notepad. 77 So this is run and this 78 is also there. 79 So this team member one which 80 gets a notepad and this one also 81 gets a notepad, another one. 82 Now if the kitchen guy writes 83 down, let's just say two masala chai 84 in his own notepad, this guy. 85 It doesn't change your master order. 86 So whatever is written here, 87 it doesn't change it there. 88 Although these are called as 89 notepad, this is also notepad. 90 Let's just say this is not master 91 notepad, this is also notepad. 92 But taking an order here 93 doesn't change this. 94 This has right now no 95 relation with this guy. 96 So again, let's just say 97 for the fun stuff, let's 98 call this one as notepad. 99 Why to call it Master Notepad. 100 This can also be just 101 a notepad and this is fine, 102 this is absolutely fair. 103 So I hope you get this. 104 Why the global scope and local 105 scope whole thing actually comes 106 up in the world of thing. 107 And this has a name itself, 108 we call it as scope, but there 109 is another name for it 110 and this is called as scopes. 111 Surely that's the one. 112 And this is known as name resolution. 113 The word whole name resolution means 114 which one should I resolve to? 115 Is this notepad I'm talking about? 116 Is this notepad I'm talking about or 117 is this notepad I'm talking about? 118 In the world of Python we have 119 a whole lot of ranges 120 and names and all these things. 121 So first of all the scope that you're 122 going to study is known as local. 123 This is called as inside a function. 124 This is a very common one. 125 So this is the first one 126 we are going to study. 127 We will have a lot 128 of examples of this one. 129 Then we have enclosing and yes 130 we are going to study. 131 This is actually from outer 132 function, if nested and yes there 133 could be nested functions as well. 134 So if this is nested, so this 135 is local, this is enclosing. 136 But we have another one. 137 Yes we do have. 138 This is known as global. 139 So this is like a master notepad, 140 but this is like global. 141 We call this as top level, 142 script or sometimes module, 143 whichever makes sense. 144 And also we have another one, 145 this is the final one, 146 don't worry on that part. 147 This is called as built in. 148 So there are some built in things 149 which are reserved like the print. 150 I cannot use the method name print. 151 But yes, there are many of such 152 these scopes and name resolutions. 153 So let's go through them one by one. 154 Again the first one is local, 155 the second one is enclosing or 156 from the outer one. 157 We'll study about that as 158 well, don't you worry. 159 And then we have the global 160 one and then we have the built 161 in one, or rather it 162 would be said not built in. 163 Built in. 164 Built in. 165 That's correct. 166 So I think it's enough. 167 That's all what we 168 are going to study. 169 Let's go ahead and now 170 write some code. 171 Coding always gives more 172 positive response. 173 So let's call this 174 one as new function. 175 We are into the 06 file and call 176 this one as scopes py good stuff. 177 I'll shut up my AI as well so 178 that it doesn't bother us. 179 So let's just say in this very 180 first example we have a simple 181 mechanism of serve chai. 182 That's good enough. 183 And this is our method name. 184 Let's go like that. 185 In this I go ahead and declare 186 a variable that says chai type. 187 And there could be a variety of chai. 188 Let's just say this 189 one is Masala chai. 190 All right, make sure 191 that you understand. 192 I can write the comments like this. 193 This is known as local scope. 194 Local scope simply means 195 the validation of this variable 196 is just inside this method. 197 So I can just go ahead 198 and use it like this. 199 I can say formatted string 200 and I can call this one as inside 201 function and then just 202 use this variable name. 203 This is chai type. 204 This is completely valid. 205 But what if there could be 206 a case that you have declared this 207 chai type here as well? 208 And you call that hey, I will prefer 209 lemon, which is my favorite one. 210 And I call this serve chai. 211 So what do you think this print 212 method is going to refer to? 213 Is it going to refer to this 214 chai type or is it going 215 to refer to this chai type? 216 And again on top of that, if I write 217 the same method again here or 218 the same print statement here with 219 the formatted string and I'll call 220 this one as outside format function. 221 And then we're going 222 to again say chai type. 223 Pretty good. 224 This is definitely confusing 225 and you'll see this quite a lot. 226 One thing you have to remember, 227 whenever you have created a variable 228 inside a function, the scope 229 of it is just within 230 the function, never outside of it. 231 So all the people who are outside 232 of this function, 233 maybe another function don't 234 know what you have done it. 235 This is like you have 236 worked inside your home. 237 So anytime this outside function 238 tries to refer to chai type, it will 239 refer to something which is outside 240 only it cannot refer to inside here. 241 And we'll see that in action. 242 Now let's go ahead and run this, 243 we'll go ahead and say, hey python, 244 let's run this 06 file and you 245 can see inside the function there 246 is masala outside the function. 247 It's level. 248 But what if I go ahead 249 and don't have this chai type? 250 Notice here immediately we have 251 an error that I don't know 252 what you're talking about. 253 I have zero idea what this 254 chai type actually is. 255 So you have to provide a scope 256 for which it can access. 257 It can reach out. 258 And I can only reach out because 259 I am declared an outside file or. 260 Or in the global scope. 261 Yeah, this whole file 262 is a global one. 263 Here it works like that. 264 And as I mentioned, the scope 265 local inside the function. 266 This is exactly what it means. 267 If you have declared something 268 inside the function, it's only 269 accessible inside the function 270 the moment you move it outside. 271 It's not fun. 272 It's not available. 273 Let's also go ahead and talk 274 about the nested function as well. 275 We can create it here. 276 No need to create too many files. 277 I'll now restrict myself 278 from creating too many files. 279 But we'll still write a lot of code. 280 Let's just say we have 281 an example of chai counter. 282 Pretty solid examples 283 related to all the chai. 284 And let's just say we 285 have a chai order. 286 The chai order for us 287 this time is Lemon. 288 Lemon, I can write that. 289 And this one, we call this one as 290 enclosing, scope Scope. 291 So that means the scope that 292 where this chai order is 293 available within the function. 294 That's the whole meaning 295 of enclosing scope. 296 Now let's just say further 297 down we have another function 298 designed in this function. 299 This is interesting one, 300 we call this as chiorder again. 301 And in this I want to say, hey, my 302 chiorder again function inside 303 a function is going to be Ginger. 304 Ginger. 305 And then I go ahead and print this. 306 So let's just say I have a print 307 statement and I go ahead and say 308 inner just to make sure that 309 you understand that we are talking 310 about this chorder chiorder. 311 So we have two chi order and just 312 with the color contrast 313 you can imagine, yes, we are 314 still inside this function 315 and we are talking about this. 316 Only now the moment I go 317 outside of this, this is 318 where people get confused. 319 The moment I have returned 320 this one here, indentation level, 321 that means I'm outside. 322 Now the outer function that 323 we are talking about. 324 So I can just go ahead and say outer 325 just like this, put up a comma 326 and then we have a chai order. 327 Notice here, the color contrast. 328 So the line number 16 Chai order 329 is referring to this chai. 330 The scope of this print order 331 is just here, nowhere outside. 332 And I can just go ahead 333 and print this as well. 334 I can come here outside of this 335 and I can say, hey, I run this 336 print order function just like this. 337 So I am declaring a function 338 inside a function as well as I am 339 calling this function 340 from within the function. 341 I know a lot is happening, but if 342 you truly look at this and take 343 a moment, pause the video here, you 344 will understand it's not that big. 345 We have an outer function 346 within this, we have this 347 small function inside it. 348 We declared some variable, the scope 349 is within the function itself. 350 And I've called this here super easy. 351 Now same thing can 352 happen outside as well. 353 Let's just say here I have no 354 idea about that function. 355 I can just go ahead and have 356 my all variable chai order. 357 And let's just say this time we 358 are looking for the Tulsi chai. 359 This is actually in the global scope. 360 Now global global scope. 361 And here I can have chi counter, 362 being called again. 363 There we go. 364 We execute everything that's 365 inside that and further at the very 366 end of it we print something 367 like this, global, I can write that 368 global colon and then we 369 can simply say chai order. 370 So I hope you can see this, we 371 are using the same variable. 372 And again the common question 373 is why would anybody 374 use the same variable name? 375 It's too common. 376 It's actually too common. 377 But I hope you get that 378 how the functioning 379 and how the reachability 380 of the function works. 381 So let's go ahead and run this again. 382 So, so notice here the inner 383 one is still ginger. 384 It's not getting overridden. 385 The inner one still is ginger, 386 outside that the outer one is lemon. 387 So this is outer what we have 388 within the function and the final, 389 the global one is tulsi. 390 Is there no way that these 391 can actually hinder? 392 Yes, there is no way that they 393 can actually hinder each other. 394 Each function is a scoped one. 395 Let's draw a diagram on this one. 396 So let's just say this is 397 whole, your global scope. 398 And we are going to call this 399 one as global globe global. 400 And this is your global 401 file level access. 402 And inside this file you 403 can have many functions. 404 We have this function, 405 we have this function. 406 And just for representation we 407 can have the smaller ones. 408 So we have many functions 409 and each function is represented 410 like a house itself. 411 Whatever you do inside the house, 412 remain inside the house 413 the moment you go outside of it. 414 Surely you can access all 415 the things which are global, but you 416 cannot access what's happening 417 inside each of the house. 418 That is all yes. 419 There are ways how we can 420 access each of these. 421 Like, if I want to access the global 422 one, there is a way, There 423 is a mechanism for doing it. 424 But right now, let's not do 425 that in the same video. 426 Otherwise we're going 427 to lose the context of this one. 428 I hope it was fun for you. 429 It was definitely fun for you. 430 Fun for me, actually. 431 And, don't forget to rate, and let's 432 catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 Scope and named space in functions.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/03 Scope and named space in functions.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.018236147,
      0.0023154367,
      0.041923493,
      -0.06642653,
      -0.025774108,
      -0.002227567,
      -0.009801124,
      0.01817648,
      0.0077497866,
      0.004876862,
      -0.009740988,
      -0.004172406,
      0.0018663798,
      0.02760497,
      0.11742254,
      0.0006499374,
      -0.033688474,
      -0.013610779,
      0.033529263,
      -0.019917684,
      -0.0015308633,
      0.006677988,
      0.0053641354,
      -0.013970606,
      -0.006217231,
      0.012254229,
      0.009203222,
      0.028777093,
      0.0381406,
      -0.018421616,
      -0.022939842,
      0.0047521703,
      0.0070687663,
      0.024022019,
      0.0123043405,
      0.015458861,
      0.0064125503,
      -0.0056020245,
      -0.027734078,
      0.0006033852,
      -0.032002687,
      -0.007985237,
      0.011597025,
      -0.02668397,
      -0.0037896524,
      -0.028942896,
      -0.011002441,
      -0.030269809,
      -0.0054474976,
      0.013984029,
      -0.0027082737,
      -0.0035632441,
      -0.020103374,
      -0.17208132,
      0.0068837726,
      -0.0068818997,
      -0.012657565,
      0.0066974955,
      -0.005753825,
      0.013834754,
      -0.0264845,
      0.0063436637,
      -0.03559027,
      -0.0074855024,
      0.010353909,
      -0.024191804,
      0.008673914,
      -0.0036255976,
      0.008541847,
      0.0008239452,
      0.008472899,
      0.009412019,
      -0.017586851,
      -0.010153674,
      -0.035149053,
      -0.015885936,
      -0.001812363,
      -0.021473078,
      0.014866692,
      0.021880124,
      -0.0040713823,
      0.005676818,
      0.0010004581,
      -0.008655926,
      0.027953314,
      0.02619415,
      -0.021293309,
      -0.009622606,
      -0.0032795938,
      -0.01085814,
      -0.017755795,
      0.04564513,
      0.01381273,
      0.015890079,
      -0.026675664,
      -0.003993626,
      -0.0044414145,
      0.0066815508,
      -0.0076837786,
      -0.012017307,
      0.0039085816,
      -0.0075032706,
      -0.01625757,
      -0.02090393,
      0.0022317565,
      -0.005342293,
      0.014019205,
      0.0020340472,
      -0.02543315,
      -0.027735598,
      0.00059723755,
      0.0005688331,
      -0.0037626682,
      0.02369253,
      0.01683436,
      -0.17460044,
      0.025718266,
      -0.016146637,
      -0.024619855,
      0.0026242752,
      -0.00046225698,
      0.0018019389,
      -0.0045692385,
      -0.0019343122,
      -0.009121379,
      0.027297849,
      -0.0094155725,
      0.026569434,
      0.0059577147,
      0.0011237513,
      -0.02393438,
      -0.008559952,
      0.002818783,
      -0.0028577426,
      -0.0023753422,
      0.030379297,
      -0.011650029,
      -0.023747653,
      -0.033772293,
      -0.020368133,
      -0.0047986056,
      0.02371371,
      0.00845873,
      0.025564034,
      0.009099927,
      -0.011296473,
      -0.021971516,
      0.0053620283,
      -0.030593207,
      -0.0389934,
      0.009444427,
      -0.012042619,
      0.0018550764,
      -0.013473771,
      0.031950753,
      -0.018037299,
      0.008775846,
      -0.01708811,
      -0.010782468,
      0.0067076287,
      0.008126174,
      0.003734937,
      0.014329337,
      0.010917415,
      -0.00822177,
      0.007502389,
      -0.01801412,
      0.006596614,
      0.0051675225,
      0.021197805,
      -0.0017578875,
      -0.0030084501,
      -0.0071497904,
      -0.00057148986,
      -0.014721761,
      -0.008005574,
      0.0014183322,
      0.01874403,
      0.040806223,
      0.011061369,
      -0.003700611,
      -0.01385848,
      0.0142729785,
      -0.009345863,
      0.010015522,
      0.0025911583,
      -0.01329029,
      0.024092842,
      0.021133386,
      -0.007335554,
      0.0071797827,
      -0.009518569,
      0.0032685478,
      0.01514481,
      0.0028440706,
      -0.026036961,
      -0.0027714313,
      -0.015679581,
      0.006592412,
      0.0046115033,
      0.0093669975,
      -0.0112457285,
      0.0014717813,
      -0.018005986,
      0.025737729,
      -0.018015264,
      0.006759485,
      -0.011930498,
      -0.007111889,
      0.02151637,
      -0.008437652,
      -0.013134287,
      0.013634449,
      -0.007370223,
      0.004630913,
      0.011747681,
      0.00419582,
      -0.0022766374,
      0.0016972217,
      -0.005431155,
      0.019792957,
      0.02001236,
      0.004402955,
      0.02159337,
      0.00569963,
      -0.008966204,
      -0.0009707437,
      0.0015388853,
      0.025298916,
      0.0030827865,
      0.046028074,
      0.01575272,
      -0.008333914,
      -0.0026551043,
      -0.010403347,
      -0.011054377,
      -0.008058564,
      0.028832797,
      -0.0077651725,
      0.011403491,
      0.002810571,
      -0.0196598,
      -0.007417642,
      -0.0064138314,
      0.0223039,
      -0.002400999,
      0.02194157,
      -0.01420342,
      0.0015702975,
      -0.010943093,
      -0.021534288,
      -0.025462745,
      0.010197384,
      -0.013160297,
      -0.0030123296,
      -0.03519762,
      0.010171254,
      -0.0018219117,
      -0.016752686,
      0.0017909503,
      -0.019059714,
      -0.009322804,
      -0.0305774,
      0.020157821,
      0.0067231813,
      0.0062838686,
      0.0034696257,
      0.020732349,
      -0.012913256,
      0.016820583,
      0.008055046,
      0.012809143,
      -0.011347851,
      -0.003019157,
      -0.0034820216,
      0.02556994,
      -0.09539676,
      0.019636057,
      0.006791207,
      0.009724474,
      0.020252401,
      0.012766051,
      -0.038635086,
      0.022905398,
      0.00605407,
      0.020473422,
      0.0036278025,
      0.012109973,
      0.018526329,
      -0.003989685,
      -0.0013792542,
      0.0064231902,
      0.014059293,
      -0.010201165,
      0.014181204,
      -0.009106502,
      0.011529155,
      0.009848852,
      0.0014042436,
      -0.022774618,
      0.020463817,
      -0.011925792,
      -0.0142950835,
      0.037219446,
      0.02703442,
      -0.008304473,
      -0.0062051266,
      0.031074055,
      -0.0023343014,
      -0.015544534,
      -0.0029980484,
      0.00019177486,
      -0.006786707,
      -0.012261964,
      -0.0008107788,
      0.001996071,
      0.00014016317,
      -0.02465104,
      0.029880561,
      0.018897152,
      -0.008824749,
      0.008249181,
      0.0045647845,
      0.005360211,
      -0.033545397,
      0.0132771395,
      -0.006811429,
      0.0034953475,
      0.008380123,
      -0.00023135568,
      -0.004703132,
      0.026705956,
      -0.009846368,
      0.010196375,
      0.0126889525,
      0.015065133,
      -0.012371051,
      -0.022650037,
      -0.006296039,
      0.0051320773,
      0.0148525005,
      -0.0027381766,
      0.0044514765,
      -0.002663937,
      -0.015599548,
      -0.0077180015,
      0.021967435,
      -0.0034730942,
      0.004612627,
      -0.010948803,
      0.020786036,
      -0.009701991,
      0.01194162,
      -0.024952423,
      -0.022992114,
      0.019691918,
      0.011099555,
      -0.016572738,
      0.0037206775,
      0.0020110505,
      0.02823235,
      0.010811259,
      -0.014684638,
      -0.00087065407,
      0.004226112,
      -0.01670083,
      0.0028132198,
      -0.006388543,
      -0.02751928,
      0.0111193145,
      -0.027294649,
      -0.017458577,
      -0.015263654,
      -0.015327094,
      -0.013895128,
      0.006993116,
      -0.029656831,
      -0.0067908396,
      -0.029327298,
      0.013495775,
      -0.010133343,
      0.01185198,
      -0.01634514,
      -0.0066976063,
      -0.008418008,
      -0.029131953,
      -0.0025579927,
      -0.011267653,
      -0.017644126,
      -0.012313961,
      0.01395881,
      0.034696113,
      -0.006883123,
      0.006682772,
      0.011840324,
      -0.024149112,
      0.008094755,
      -0.0055018775,
      0.00599177,
      0.011143438,
      -0.013603642,
      0.027045434,
      0.0074257134,
      0.0035612648,
      -0.024544206,
      -0.02678693,
      -0.004863794,
      0.010381078,
      -0.02491347,
      -0.004283409,
      -0.019253816,
      -0.011217146,
      0.030564334,
      0.008445427,
      0.0055132103,
      0.0023591488,
      -0.009829757,
      0.010274552,
      0.011366844,
      -0.008380594,
      -0.003113487,
      0.033101205,
      0.00033517834,
      -0.009495794,
      0.0058300206,
      0.0024312842,
      -0.040192716,
      -0.008385542,
      0.00025955454,
      0.0054699876,
      -0.0009778354,
      -0.0011763908,
      0.0053281994,
      0.0007201205,
      -0.025988078,
      -0.020375425,
      -0.005261603,
      -0.0042382404,
      -0.009339726,
      0.0058598756,
      0.026803907,
      0.015265319,
      0.010354958,
      0.013941627,
      -0.0036442613,
      0.002372686,
      0.0071328427,
      -0.014476644,
      -0.03916736,
      -0.019437203,
      0.0007985389,
      -0.004950591,
      0.000045514906,
      -0.014389242,
      0.02170961,
      0.013753586,
      0.006407926,
      -0.016504312,
      -0.009783443,
      -0.0072796545,
      0.009669879,
      0.0119435685,
      -0.007440844,
      -0.0017843113,
      -0.041100495,
      -0.0037172718,
      0.013852413,
      -0.018253094,
      -0.0061023193,
      0.014663433,
      0.0043345895,
      0.018967764,
      0.007072103,
      0.0018136466,
      0.00034453446,
      0.020436931,
      -0.003584147,
      -0.029081594,
      0.0033192132,
      -0.008880186,
      -0.0030076816,
      -0.021308996,
      0.0007945294,
      -0.02821598,
      0.033479,
      0.017851314,
      0.0052639456,
      -0.008362454,
      -0.00052017445,
      0.0071420684,
      0.024819912,
      0.016087128,
      -0.009513904,
      -0.015944464,
      -0.021960415,
      -0.00870671,
      0.009078568,
      -0.035044163,
      -0.008204172,
      -0.008658816,
      -0.008064331,
      -0.015547562,
      -0.010943379,
      -0.0079613365,
      0.008999309,
      0.0035595198,
      -0.004081329,
      0.003979934,
      -0.027112262,
      0.00810284,
      -0.019759614,
      -0.012429634,
      0.026030425,
      0.017112596,
      -0.00078780175,
      0.028412588,
      -0.011301447,
      -0.0070154676,
      0.0063660867,
      -0.0017636642,
      0.0051170127,
      -0.016167391,
      0.02887172,
      0.019828033,
      -0.0153067615,
      0.002988644,
      -0.0047018947,
      0.0096392855,
      0.00096896425,
      -0.0060748486,
      -0.0037438644,
      0.030434938,
      -0.005902569,
      0.0121331215,
      -0.0034791806,
      -0.010180727,
      0.019473257,
      0.019646622,
      0.01472013,
      -0.005940309,
      -0.027987039,
      -0.017409952,
      -0.011209005,
      0.0007239104,
      0.03691273,
      -0.13108842,
      -0.013246945,
      -0.022883337,
      -0.0002624571,
      -0.018413058,
      -0.010148448,
      0.0069728745,
      -0.011766204,
      -0.0008182468,
      0.0022916885,
      0.035667088,
      -0.017629579,
      0.008344606,
      -0.011457383,
      0.019684091,
      -0.009517965,
      0.0006081978,
      0.010175294,
      0.03724314,
      -0.012077099,
      -0.0034552051,
      -0.0069169146,
      0.012801429,
      -0.011345414,
      -0.008475183,
      -0.00718321,
      0.027564706,
      -0.013728129,
      -0.016099779,
      -0.01881474,
      -0.024203764,
      -0.009464411,
      0.004648022,
      0.016090317,
      0.00780595,
      0.00016760424,
      -0.0010813338,
      0.009394394,
      0.01700719,
      0.014578276,
      -0.0018464286,
      -0.0020737452,
      0.02194993,
      0.026374293,
      -0.008222041,
      0.035127047,
      0.031384677,
      -0.008001814,
      0.0022978492,
      0.032306217,
      -0.04033491,
      -0.020331798,
      0.0073554986,
      -0.022246335,
      -0.013186169,
      -0.00054062443,
      -0.00018308689,
      -0.017407928,
      -0.017629175,
      -0.014055236,
      -0.0014409275,
      0.019987965,
      0.023965014,
      0.01356552,
      -0.015654696,
      -0.0020851388,
      0.024171762,
      0.005663189,
      0.0024642025,
      -0.01745589,
      -0.017189642,
      0.00033341904,
      -0.00703736,
      0.026040873,
      -0.005803893,
      -0.011884366,
      -0.0014746203,
      -0.006080919,
      -0.021560058,
      -0.00065327383,
      -0.019737333,
      0.007011957,
      -0.06277311,
      -0.020607745,
      0.0047915946,
      -0.011595864,
      0.0074774805,
      0.0029509917,
      -0.018179791,
      -0.00511997,
      0.0010964765,
      0.0056483964,
      -0.013632682,
      -0.02140601,
      -0.007726858,
      -0.004098455,
      -0.006664234,
      -0.02019882,
      -0.01676141,
      -0.024641035,
      -0.024820102,
      0.022294624,
      -0.012725885,
      0.006988948,
      -0.00801572,
      -0.030731393,
      0.011693588,
      0.015272636,
      -0.010542866,
      0.007175703,
      0.0020726265,
      0.013464041,
      0.0023158242,
      -0.15939036,
      -0.020469086,
      0.015647585,
      0.011297849,
      0.0051672477,
      0.0027075694,
      -0.011904257,
      0.007862112,
      0.0010373249,
      0.002239088,
      -0.0031929705,
      -0.0021386624,
      -0.007495248,
      -0.024004942,
      0.0148292035,
      0.13005084,
      -0.00685742,
      0.009802992,
      -0.02733906,
      0.0076158806,
      -0.007276502,
      -0.016657513,
      -0.0064990106,
      0.009173566,
      -0.012776465,
      -0.009861855,
      0.0020979596,
      -0.01008973,
      0.0077219834,
      -0.019740561,
      0.0030533904,
      -0.01730263,
      -0.0077386606,
      0.041630954,
      0.011390994,
      -0.015243896,
      -0.006848684,
      0.0042678495,
      0.009826456,
      0.0044664764,
      0.02897025,
      0.012042377,
      0.006622269,
      0.0030383188,
      0.0083041545,
      -0.0073899706,
      -0.01637255,
      -0.016489113,
      -0.0010272915,
      0.014151424,
      -0.0054696742,
      -0.062292565,
      -0.008398702,
      -0.017616581,
      -0.0001064241,
      0.013916467,
      -0.0036470646,
      0.0056443815,
      -0.00032510253,
      0.037309475,
      0.008894795,
      0.00029576922,
      -0.0049452963,
      0.010142993,
      -0.0016478896,
      -0.0021037704,
      0.021307718,
      0.037987445,
      0.020585222,
      -0.010929709,
      0.011284219,
      0.021420507,
      -0.0089756055,
      -0.006876882,
      0.012115189,
      -0.013329415,
      0.011780786,
      0.021948127,
      -0.00061452726,
      -0.008844825,
      -0.0031712896,
      0.001260676,
      0.012813731,
      -0.001923477,
      0.015402023,
      0.010018545,
      -0.004459019,
      0.0144232195,
      -0.0026955274,
      0.01090809,
      -0.019479236,
      0.0041351677,
      0.0019509839,
      0.013963555,
      -0.010861436,
      0.0015347827,
      -0.0062063723,
      -0.025626706,
      0.03582785,
      -0.006479129,
      0.01108869,
      -0.028559653,
      -0.012462302,
      -0.032774925,
      0.024064045,
      0.0035797916,
      -0.0022077193,
      0.0026767773,
      0.00758351,
      -0.008094036
    ]
  },
  {
    "id": "genai_cohort_python_04_non_local_vs_Global_scopes_vtt",
    "content": "All right, let's go ahead 2 and talk about something 3 much more interesting now. 4 So let's just say you have designed 5 this particular function 6 here that we discussed earlier. 7 And we also have one more 8 function inside it. 9 There could be many, but let's 10 not go too much in depth. 11 And that's a crazy way of writing 12 this, these kinds of functions, 13 but this is justifiable. 14 You have a function inside 15 that probably for some reason 16 you have decided to have one 17 more function inside it. 18 Usually I don't recommend it. 19 I try to keep it separate up here so 20 that I can call it whenever needed. 21 But let's just say 22 there are some issues. 23 So what if some variable are there? 24 So for example, this is maybe a tea, 25 order and I want to access this, 26 this is here, and I want 27 to access it from here. 28 So is there a way that I can go 29 ahead and access this tea order? 30 Or maybe this tea order 31 exists outside as well and from 32 within the function. 33 From this inside one, 34 I just want to access this one. 35 So is there any way that I 36 can go ahead and do this? 37 Yes, actually. 38 But you have to be very cautious 39 that how you're doing it 40 and you should know about this. 41 This is known as non 42 local and global. 43 I'll give you code example 44 because code examples 45 are much easier and fun. 46 And of course you are going 47 to build more code friendly 48 application, not just research work. 49 So research work has its 50 own place by the way. 51 But I think you want to build 52 something based on the research. 53 So there it is. 54 Let's call this one as non local. 55 Local. 56 That's a good name. 57 Py. 58 Let's have our example first. 59 I'll just close this one. 60 Have this on the full screen. 61 Come on, expand a little. 62 There we go. 63 Finally. 64 Okay, so how does it work? 65 Let's just say we have a simple 66 method that says update order. 67 There we go. 68 No problem at all. 69 Now inside this we have a chai type 70 which is not one of my favorite. 71 This is Indian spice Eli Chi. 72 So maybe just like me, 73 you don't like it. 74 And there's also a method 75 which is kitchen. 76 Kitchen and kitchen can actually 77 go ahead and want to 78 for some reason want to update. 79 They don't have the lychee, 80 they don't serve it. 81 So what they can do, they can use 82 a keyword that says non local. 83 The moment you say non local 84 that means you want to refer 85 something which may be just 86 outside the scope of it. 87 Like in this case 88 just above function. 89 So in that case I can just 90 Go ahead and refer this. 91 Now you have access to the chai 92 type which is above this. 93 Previously we didn't have access 94 and now I can just go 95 ahead and override this one. 96 So I'll just go ahead and use another 97 Indian spice, which is kesar. 98 So I'll say that. 99 Okay, now if I go ahead and run 100 this function as Kitchen. 101 So Kitchen has implemented this, 102 what you're going 103 to notice that the value 104 of the chai type is actually keser. 105 It's being changed. 106 So that's a fun one. 107 And make sure to keep it 108 in the notes as well. 109 Non local means from 110 inside to inside function. 111 You are just targeting 112 outside the function. 113 I'll show you one more 114 interesting part of this as well. 115 Right now let's just go ahead 116 and print this and we'll say after 117 Kitchen update, 118 what's the value of chai type? 119 Pretty simple. 120 Now let's go ahead and run this. 121 Have we updated the order? 122 Pretty simple actually. 123 Not a big deal. 124 Let's go ahead and run this again. 125 Python 3 is going 126 to run 07 non local. 127 And there we go. 128 After Kitchen, the value 129 is updated as caser. 130 But what if I go ahead and say 131 this line doesn't exist. 132 So if I comment this line out, what 133 is going to happen in that case? 134 So whatever you have added as a case 135 or child type, let's see the result. 136 That's easier. 137 It's always going to be lychee 138 because you don't have access this. 139 Although you have made a new variable 140 here, but this actually proves 141 the point that you are not accessing 142 this one here, outside this one. 143 This one line 144 is the whole difference. 145 Got it. 146 Pretty simple, no big deal. 147 Let's just say we are here 148 to make some more fun stuff. 149 So this is our chai 150 type that we have. 151 Can we go ahead and comment 152 out all of this? 153 Yes, but I think keeping a new file 154 would be much safer and much fun. 155 I'll create a new one. 156 We are not running short 157 of the variable names 158 or the files herein. 159 So we'll just go ahead 160 and call this one as global. 161 Global scope. 162 I can write that for sure. 163 Global scope py. 164 Let's just say in this case you 165 again have a chai type variable. 166 This time it's a global variable that 167 everybody looks for a plain chai. 168 Don't want to ask it anything. 169 Now there is also a method 170 that says front, desk. 171 And on the front desk of our chai, 172 you might want to define a kitchen. 173 So let's just say this is 174 kitchen, Kitchen. 175 And this kitchen wants 176 to update some things. 177 So there we go. 178 In this case, I want 179 to access the chai type which 180 is available globally. 181 And by the way, you can actually 182 refer this from any place, 183 from function within the function. 184 Within, within, within the function. 185 You got the idea. 186 All I have to do is use a keyword 187 global, and this global now can 188 access the chai type just like this. 189 Now I can actually refer, to this 190 chai type and I will call this one. 191 So there's a very popular chai 192 in India, which is Irani. 193 It's a pretty good, very 194 tasty chai, usually found 195 in the area near Mumbai. 196 But again, enough of the chai 197 knowledge, let's go ahead 198 and work on with this 199 kitchen function is running now. 200 And let's just say we run the whole 201 of the front desk, 202 use this method very, very carefully 203 and be extra, extra cautious. 204 Not just extra cautious, 205 extra, extra cautious. 206 Yes, I know. 207 You might be thinking why. 208 Too much of caution. 209 I'll show you. 210 I'll tell you a reason as well. 211 Final global chai. 212 And what's the value of it? 213 You might have already 214 guessed the value. 215 We are definitely updating it. 216 That's why I'm teaching you. 217 Otherwise why would I. 218 All right, so this time 219 let's just say we are running 220 this one and obviously 221 the chai has been updated. 222 The reason this alone keyword. 223 Now there is another thing which 224 might be bothering you that 225 instead of the global, 226 can I go ahead and use non local? 227 What happens in that case? 228 Let's just say if I go ahead and say 229 non local, then it says, hey, 230 there's already an error. 231 No binding for non local chai 232 type found because it's looking 233 for just above the function. 234 The non local is designed 235 specifically in such a way that it 236 should be looking up just in this 237 outer function, not the global. 238 So don't use non local. 239 There's a specific case for this one. 240 Okay, so let's go ahead and say 241 we want to access the global. 242 Just want to show you one more thing. 243 In the non local of this, let's 244 just say we have, another thing. 245 So let's just say we go ahead 246 and say chai type here as well. 247 Chai type. 248 And that's going to be ginger. 249 It's one of my favorite one. 250 And I want to access this. 251 Can I go ahead and access this? 252 Yes, you can. 253 Here you are accessing still 254 the code will run as it is. 255 No problem there because 256 you're using non local. 257 So if I go ahead and try 258 to use the non local just above. 259 No problem, you can go in. 260 But this is your global scope. 261 Remember always where the global 262 scope is for this entire file. 263 Anything which is outside of this 264 function in the global space. 265 This is global space. 266 Line number 11, line line number two. 267 If you want to access this, 268 you can actually, you can 269 just go ahead and say I want 270 to update the global one. 271 And you can just update the global 272 directly here as well. 273 So global is a reference 274 to global object from anywhere. 275 You can access this anywhere. 276 But if you just want to access 277 just above in the function 278 non local is your friend. 279 You should be doing it like that. 280 All right, I hope you got this. 281 One last thing which we want 282 to mention why you should be 283 extra, extra cautious 284 in using this global keyword. 285 I'll tell you. 286 So let's just say again, we 287 have a beautiful diagram. 288 This is your global scope. 289 And you say that I want 290 to use this chai type. 291 So there we go. 292 Chai type shouldn't be capital. 293 I don't prefer it. 294 Lowercase is good for me. 295 This is our global 296 scope that we have. 297 Now in this you are defining 298 different function. 299 This function is written by you, 300 this function is written 301 by your friend and this function is 302 written by another coworker. 303 Similarly, another coworker. 304 Now if everybody's trying to access 305 this chai type and trying to update 306 it, let's just say somebody says 307 true and, and this guy expects that 308 this function should always be true. 309 But this guy goes ahead and update 310 this, that, hey, I'm not going 311 to be saying this true, I 312 probably need this in a string. 313 And that should be saying, 314 ginger, because that makes sense. 315 Then what you have done, this 316 guy is also accessing this and now 317 you have changed the value. 318 So this whole piece of code 319 is not going to work. 320 So this is absolutely, 321 absolutely gone case here. 322 This code will break. 323 So usage of this local global, all 324 of this should be very, very 325 carefully done because you 326 might break somebody else's code 327 who is dependent on this one. 328 That's why it is recommended. 329 A lot of people you are going 330 to see that they avoid 331 totally using of the global. 332 But again, it's a use case 333 and there might be a specific use 334 case for you in this case or 335 in that, in your code case. 336 That is it for this video. 337 Let's go ahead and catch 338 up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 non local vs Global scopes.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/04 non local vs Global scopes.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.010917127,
      -0.014320407,
      0.03312876,
      -0.06230642,
      -0.019331384,
      0.0016178383,
      0.005018158,
      0.026033776,
      -0.0029038133,
      -0.0015511353,
      0.003807992,
      -0.00823621,
      -0.00040377481,
      0.014306394,
      0.110146925,
      -0.003249697,
      -0.036997534,
      -0.018296681,
      0.018894427,
      -0.014772426,
      0.00029431755,
      -0.0033846241,
      0.009728098,
      -0.013041931,
      0.010888024,
      0.0053895223,
      0.014015149,
      0.034529727,
      0.023083232,
      -0.020319488,
      -0.00586913,
      0.007408709,
      0.01932801,
      0.002928829,
      0.014483784,
      0.029828703,
      0.020093722,
      0.009735572,
      -0.023717498,
      -0.008217377,
      -0.030814566,
      -0.0022393789,
      0.0012481408,
      -0.013540106,
      -0.00072027446,
      -0.007814504,
      -0.006806528,
      -0.037898757,
      0.0040349783,
      0.02232577,
      0.015962385,
      -0.00608169,
      -0.0146323545,
      -0.16862342,
      0.004781085,
      -0.0076500336,
      -0.017632509,
      0.0073146713,
      0.012780472,
      0.020089777,
      -0.036869977,
      0.016893435,
      -0.030559612,
      -0.000492656,
      -0.00052414305,
      -0.01787411,
      0.016525894,
      -0.006559732,
      0.0070486786,
      0.0044546146,
      0.015512429,
      0.005523771,
      -0.021106586,
      -0.0077529317,
      -0.030028015,
      -0.01277526,
      0.010317615,
      -0.010623818,
      0.0050881985,
      0.017585533,
      -0.010173171,
      -0.0010245598,
      0.0022053637,
      -0.007341212,
      0.021996124,
      0.016043775,
      -0.014422198,
      -0.009295911,
      -0.00411039,
      -0.013194684,
      -0.018392932,
      0.033252724,
      0.016774295,
      0.009281569,
      -0.021928761,
      0.01914542,
      0.0008550861,
      0.0060963784,
      -0.022592654,
      -0.009038664,
      0.00474037,
      -0.005552827,
      -0.0077050864,
      -0.009463411,
      0.0010121047,
      -0.013679604,
      -0.0043017506,
      0.011450572,
      -0.018485542,
      -0.016559292,
      -0.005042776,
      -0.0001724455,
      0.01062383,
      0.01636977,
      0.015843455,
      -0.17597593,
      0.01404696,
      -0.0085356105,
      -0.020946752,
      0.0191652,
      -0.011759705,
      0.014377655,
      -0.0028980416,
      -0.008070722,
      -0.012854244,
      0.013930606,
      0.0054246397,
      0.028425597,
      -0.00959619,
      -0.0073658414,
      -0.025925007,
      -0.017572548,
      -0.0018602082,
      0.0013883328,
      -0.005170826,
      0.026284264,
      -0.007877864,
      -0.011411847,
      -0.042715203,
      -0.012053981,
      0.008684917,
      0.025766617,
      -0.00091383344,
      0.018418908,
      0.011458763,
      -0.0051531196,
      -0.017471945,
      -0.007828002,
      -0.024521071,
      -0.04877306,
      0.019016555,
      -0.010762521,
      0.012973935,
      -0.0146766035,
      0.037725117,
      -0.017823612,
      0.009704324,
      -0.022232981,
      0.008760244,
      0.0067880424,
      0.0050712503,
      0.0049174316,
      0.011682705,
      0.006991646,
      -0.004011194,
      0.018004516,
      -0.02925586,
      0.0130309025,
      0.014986092,
      0.022061223,
      -0.010361291,
      -0.017388504,
      0.008786622,
      -0.001432541,
      -0.021911627,
      -0.016635258,
      0.012070504,
      0.00832725,
      0.028334986,
      -0.010618181,
      -0.004662609,
      -0.00936025,
      0.012434874,
      0.002127708,
      0.0154134175,
      -0.014510973,
      -0.0058070607,
      0.014762059,
      -0.011610918,
      -0.01112426,
      0.013460088,
      -0.004740237,
      0.0011348512,
      0.015862552,
      -0.010426994,
      -0.015903383,
      -0.0047574737,
      -0.0007419736,
      0.0040954067,
      0.01744949,
      0.019634677,
      -0.012719168,
      0.011338851,
      -0.019821728,
      0.018794494,
      -0.014708135,
      0.013315172,
      -0.0050354297,
      0.014185217,
      0.0095059145,
      -0.0008356138,
      -0.0052799108,
      0.009371384,
      -0.012535567,
      0.006444661,
      0.005497421,
      0.010498367,
      -0.0066876467,
      0.0023437093,
      0.0014663364,
      0.020385193,
      0.013813571,
      0.015454711,
      0.02850951,
      -0.004000541,
      -0.013992243,
      0.011267873,
      -0.0023809546,
      0.011641669,
      0.01285325,
      0.0556017,
      0.031336214,
      -0.01150271,
      -0.011461125,
      -0.016232908,
      -0.013055316,
      -0.015286515,
      0.025380535,
      0.0031814524,
      0.010476056,
      0.0004699247,
      -0.018621271,
      -0.024587432,
      -0.009347295,
      0.011250488,
      0.014104249,
      0.018032076,
      -0.020663917,
      -0.001219929,
      -0.013035305,
      -0.013269748,
      -0.021656115,
      0.005556675,
      -0.011598,
      -0.006980294,
      -0.034243833,
      0.008946882,
      -0.0019944147,
      0.002263872,
      -0.0027883933,
      -0.004330006,
      -0.01634452,
      -0.016559664,
      0.028075133,
      0.013794936,
      -0.00830676,
      0.008889411,
      0.030661901,
      0.00089875446,
      0.016139857,
      0.014605823,
      0.014770951,
      -0.0041149356,
      -0.004221214,
      -0.010854362,
      0.008810052,
      -0.0932662,
      0.037130445,
      0.0043543805,
      0.0061505944,
      -0.0014771231,
      0.016123036,
      -0.021630011,
      0.03154932,
      0.0003732685,
      0.010256263,
      0.021387434,
      0.0011018611,
      0.008785745,
      -0.019427197,
      -0.0014435829,
      -0.023951,
      0.024547478,
      -0.009746437,
      0.00700667,
      0.0026336755,
      0.016047878,
      0.015513907,
      -0.00017935959,
      -0.010132717,
      0.017124146,
      0.012861558,
      -0.0035574103,
      0.034229368,
      0.027841356,
      0.013228604,
      -0.011232382,
      0.025220169,
      -0.01598481,
      -0.01871776,
      0.0025696903,
      -0.005709704,
      -0.0042296755,
      -0.018844824,
      0.0068296464,
      0.0019304527,
      -0.0076686814,
      -0.017116254,
      0.024232566,
      0.028751906,
      -0.0015832977,
      0.00023920594,
      0.013847605,
      0.0024272834,
      -0.02436144,
      0.0109433085,
      -0.010452841,
      -0.017343573,
      -0.0012082064,
      0.0036674538,
      -0.0100230295,
      0.019744728,
      0.007639111,
      0.009381185,
      0.008358118,
      0.013915511,
      0.0066264155,
      -0.0052511804,
      0.0053189164,
      -0.016972622,
      0.018605568,
      -0.0013292218,
      0.004144074,
      -0.022968108,
      -0.012559525,
      -0.0028863002,
      0.012919593,
      -0.0035522743,
      -0.0063357404,
      -0.024754047,
      0.014890959,
      -0.00630107,
      0.020947576,
      -0.003565675,
      -0.015088171,
      0.029706445,
      0.0056984182,
      -0.022700328,
      0.00601344,
      0.002024387,
      0.03224742,
      -0.002052655,
      -0.015030847,
      -0.0015029254,
      0.0192818,
      -0.024516907,
      0.0071337908,
      0.015650187,
      -0.00987359,
      0.0020290124,
      -0.01966516,
      -0.007343467,
      -0.01743748,
      -0.022056948,
      -0.020292148,
      0.00062850193,
      -0.018174218,
      0.001420558,
      -0.0151111,
      0.0079317875,
      -0.009630739,
      -0.001247851,
      -0.018050132,
      -0.0022210334,
      -0.01733106,
      -0.0280573,
      -0.0048208283,
      -0.011418405,
      -0.017161705,
      -0.011082907,
      -0.0028156068,
      0.026749946,
      0.0052724816,
      0.012243556,
      -0.000088545916,
      -0.015702197,
      0.005366645,
      0.007886536,
      0.003926526,
      -0.004371211,
      -0.010630502,
      0.019487597,
      -0.0007962903,
      -0.0020314648,
      -0.026082212,
      -0.027164698,
      -0.014038969,
      0.005284426,
      -0.02517781,
      -0.0057775103,
      0.0074875765,
      -0.013139034,
      0.02480554,
      0.007292266,
      0.008541546,
      0.0035778705,
      -0.008410851,
      0.012228351,
      -0.0029008319,
      0.00081448635,
      -0.0066193356,
      0.031138541,
      0.0008018827,
      -0.015805596,
      -0.009275252,
      -0.013270841,
      -0.036956027,
      -0.008800753,
      -0.002606564,
      0.006466889,
      -0.0015437551,
      -0.0050179316,
      -0.00048604692,
      0.0012116847,
      -0.009064713,
      -0.020838642,
      -0.0014142396,
      -0.002067181,
      -0.014125346,
      0.004352131,
      0.018813862,
      0.0004913217,
      0.012595676,
      0.021706149,
      0.0035933033,
      0.00030729052,
      0.0029943872,
      -0.008023272,
      -0.045996185,
      -0.020978518,
      0.015733281,
      -0.023585381,
      0.011351894,
      -0.014304403,
      0.027780615,
      0.021287777,
      0.006117037,
      0.0017988656,
      -0.0041907732,
      -0.003923424,
      -0.009662835,
      0.0068375613,
      0.002586749,
      -0.0019214336,
      -0.040128075,
      -0.0107490895,
      0.021238042,
      -0.02626773,
      0.0032889917,
      0.011051614,
      0.00021091096,
      0.017522939,
      0.009501223,
      -0.009562571,
      0.0013728405,
      0.0345349,
      -0.009500265,
      -0.02798011,
      -0.017640311,
      -0.0006722069,
      -0.00820309,
      -0.030470487,
      -0.0021216716,
      -0.024092564,
      0.026239676,
      0.024980672,
      -0.009084979,
      0.009002891,
      -0.0021826862,
      0.012051155,
      0.025294205,
      0.019655906,
      -0.0023902205,
      -0.024645336,
      -0.016702695,
      -0.0004829368,
      0.010009812,
      -0.037397716,
      -0.0014615349,
      -0.013424694,
      0.0064138896,
      -0.025800064,
      -0.015493924,
      0.004500683,
      -0.000797262,
      -0.0004810443,
      -0.007542006,
      0.008916749,
      -0.01340957,
      0.0048852344,
      -0.025314488,
      -0.0087340595,
      0.020216422,
      0.027813138,
      -0.016096165,
      0.006815358,
      -0.010086615,
      -0.009330349,
      -0.0005974331,
      0.00027339358,
      -0.003376301,
      -0.015520418,
      0.018245773,
      0.008661731,
      -0.013935233,
      -0.008269016,
      -0.021106627,
      0.028464133,
      -0.007967105,
      0.00021020693,
      -0.012117339,
      0.032369874,
      -0.0078053074,
      0.0073318025,
      -0.014849873,
      -0.011978855,
      0.032253113,
      0.012569256,
      0.013801271,
      0.00079803006,
      -0.022428986,
      -0.023462785,
      0.003789805,
      0.009808153,
      0.02803788,
      -0.13873489,
      -0.0045379237,
      -0.011206968,
      -0.0039724926,
      -0.029431392,
      0.00579582,
      0.012123033,
      -0.027049677,
      -0.0026617178,
      0.011641456,
      0.035981253,
      -0.015719,
      0.019603997,
      0.00052141753,
      0.01478967,
      -0.007999235,
      0.0077706785,
      0.015216231,
      0.036725264,
      0.0034192386,
      0.004875283,
      0.0007256153,
      0.016805837,
      -0.00630311,
      -0.0138441995,
      -0.021510534,
      0.026326599,
      -0.005436172,
      0.00442338,
      -0.023838613,
      -0.031860147,
      0.0020005258,
      0.00096826605,
      0.018661046,
      0.0075516994,
      -0.00943686,
      0.0021191693,
      0.013016682,
      0.0026572116,
      0.014152943,
      -0.0012080071,
      -0.016268726,
      0.02911753,
      0.015439071,
      -0.022827268,
      0.019311324,
      0.031869218,
      -0.008838642,
      -0.0038719482,
      0.026837872,
      -0.027558494,
      -0.010426458,
      0.003808005,
      -0.030017233,
      -0.022154009,
      -0.0045719803,
      -0.005712799,
      -0.012369272,
      -0.017987154,
      -0.008476528,
      0.00004670124,
      0.010354563,
      0.016949732,
      0.011837567,
      -0.0036916398,
      0.0042980174,
      0.012572538,
      0.021554623,
      -0.0060149985,
      0.005321983,
      -0.01016896,
      0.0076797386,
      -0.020588806,
      0.01004516,
      0.010773852,
      -0.025900772,
      -0.010370783,
      -0.00040427718,
      -0.012533623,
      0.0031957792,
      -0.0136024635,
      -0.010042491,
      -0.07050954,
      -0.038893085,
      0.0005244417,
      -0.009887641,
      0.016007708,
      -0.00094399485,
      -0.024606321,
      -0.015580493,
      0.0021940009,
      -0.0076567815,
      -0.011011968,
      -0.028131735,
      -0.0096667055,
      0.0062109455,
      -0.0033793387,
      -0.034103535,
      -0.010778741,
      -0.013525846,
      -0.023128929,
      0.0052066166,
      -0.00028862536,
      0.015107229,
      0.00034763952,
      -0.0323716,
      -0.0028776259,
      0.010108211,
      -0.002323513,
      0.013195089,
      -0.01092522,
      -0.006595627,
      0.0034438588,
      -0.15286,
      -0.0018880129,
      0.0063953344,
      0.011822883,
      0.0040681204,
      -0.0011795999,
      -0.012780176,
      -0.020412877,
      0.00092504587,
      -0.013600849,
      0.0063236733,
      -0.0030721624,
      0.013500871,
      -0.0039589675,
      0.0029615662,
      0.12913258,
      -0.02852049,
      0.0033364072,
      -0.016837467,
      -0.019936737,
      -0.0059877676,
      -0.019690916,
      -0.014293321,
      0.018612262,
      -0.014740413,
      -0.008543154,
      -0.018400904,
      0.0003391658,
      0.026455777,
      -0.02270123,
      -0.009503649,
      -0.029240793,
      -0.018611854,
      0.03288674,
      0.002672762,
      -0.011739973,
      0.0043170843,
      0.008137588,
      0.00066129694,
      -0.005047964,
      0.019885434,
      -0.00049220887,
      0.0049944473,
      0.00027834467,
      0.013462739,
      -0.0068245777,
      -0.02157682,
      -0.0146540515,
      -0.011109847,
      0.011282208,
      -0.009868297,
      -0.06297531,
      -0.0035437508,
      -0.011409863,
      0.009089273,
      -0.0007851821,
      -0.011100038,
      0.012438095,
      0.01042091,
      0.02811683,
      0.0043944116,
      0.008269485,
      -0.001828599,
      -0.00073330756,
      -0.0071542747,
      -0.014655525,
      0.026824119,
      0.036866665,
      0.026554756,
      -0.0034898666,
      0.0075058555,
      0.03045802,
      -0.017009981,
      0.006368955,
      -0.0009254421,
      -0.002835009,
      -0.0045309593,
      0.022329759,
      0.008670115,
      -0.008766496,
      -0.021087624,
      -0.010812373,
      0.00495606,
      -0.007911227,
      0.0065901685,
      0.010275738,
      -0.026312526,
      0.0049148328,
      -0.0053113704,
      0.0058736587,
      0.00715231,
      0.008332064,
      -0.013182762,
      0.019394943,
      0.0008057366,
      0.00770026,
      -0.0039724167,
      -0.029690223,
      0.028545234,
      -0.006747056,
      0.0043703797,
      -0.028911373,
      0.0029926607,
      -0.03422962,
      0.023879716,
      0.007341768,
      -0.0029383055,
      0.005962727,
      0.0042051696,
      -0.012003626
    ]
  },
  {
    "id": "genai_cohort_python_05_Handling_arguments_in_function_in_python_vtt",
    "content": "All right, so let's go ahead 2 and have another discussion on 3 something really really interesting. 4 So let's just say we so far have seen 5 that we have a function, let's call 6 this one as simple function name. 7 We have a placeholder which 8 takes the parameter names and we 9 simply go like this and then 10 we have a simple pass here. 11 This is our function definition. 12 Now what's really interesting 13 that what do you pass 14 in here in this function? 15 Let's just say this is kind 16 of a mysterious box and all 17 the value you go ahead and simply 18 pass on into this place. 19 This is known as parameters. 20 We know this. 21 But what value can go 22 inside the parameter? 23 There are a lot of values 24 two can go into it. 25 Maybe you want to go ahead and pass 26 on just the true, or maybe 27 you want to go ahead and pass 28 on just the name just like this. 29 Or maybe you want to pass 30 on values in this format. 31 So there is a lot of thing 32 that can go inside this as 33 a parameter and what happens 34 to the original value? 35 This is also a piece 36 of question we should be answering. 37 So in this entire video we are going 38 to go through with different 39 ways of how things actually 40 goes and what happens when things 41 goes into this, whether 42 the original one changes or not. 43 What happens to this? 44 We'll just go ahead and figure 45 it out in this one. 46 Let's go ahead and create this. 47 I've already created a file 48 which is known as input params, 49 input parameters and I'll 50 show you one of the most basic 51 example of what happens. 52 So when you let just say decide 53 that hey, this is my chai 54 and and I go ahead and simply 55 say this is my ginger T 56 or ginger chai would be better. 57 And if I go ahead and define a method 58 that says preparechie and I go ahead 59 and take any parameter, this could 60 be order, this could be anything. 61 It's just a placeholder, hence 62 we call it as parameter. 63 And I go ahead and print this out 64 or maybe do some more operations 65 on it doesn't really matter. 66 I'll just say preparing then 67 a space and we'll just go 68 ahead and print the order. 69 Now depends on what value 70 you are passing on. 71 A lot of things might change 72 or might not change. 73 So in this case if I go ahead 74 and pass on the chai, 75 this is like I would just want 76 to read this value in this case. 77 This is a string and if you remember, 78 strings don't change really. 79 So you are just passing 80 on this value and that is it, that 81 is all that you are doing. 82 Of course if you go ahead 83 and Use globals and all of that. 84 That's different use case, but in 85 most of the cases it doesn't change 86 or it will never change the original 87 chai, it will always remain. 88 Like you can go ahead and do 89 manipulation up here. 90 Like we have added this 91 preparing chai and all of that. 92 But in true sense, if you go ahead 93 and print out this variable chai, 94 if you notice it here, if I go 95 ahead and print the variable chai 96 here, if you look at this closely, 97 we have actually appended this so 98 the function actually takes the 99 order and we have passed on a chai 100 but we have actually concatenated 101 this. 102 Now the preparing is 103 appending to this. 104 So does it change the original one? 105 No, no it doesn't. 106 It just reads the value. 107 That is the whole point. 108 I'll show you by running 109 this, don't you worry. 110 So if I go ahead and say I want 111 Python to run 09 still, 112 we have ginger chai, but things 113 actually do change when we 114 have different values to it. 115 So let's just say I'll remove this 116 example, I'll keep this example 117 as comments so that you can later 118 on come onto this and see this. 119 Now let's just say we have 120 again an example of chai, 121 but this time I go ahead and say 122 the values are 1, 2 and 3. 123 Now remember this is a list 124 and list can be mutated. 125 So your whole idea about what 126 we studied about mutated, 127 immutable, mutable, this 128 will come handy in here. 129 Let's just say we have a simple 130 function which says 131 I will edit chai and all it does, 132 it takes the input of cup. 133 How many cups are there? 134 And this is array, we are 135 expecting an array here. 136 In this I will change the first value 137 to be something else, maybe 138 40, two, whatever, 139 it's just an arbitrary number. 140 And then I go ahead and call 141 the edit chai and notice I am 142 passing on this chai here. 143 What will happen to this chai? 144 Now previously we just passed 145 on, we did of course 146 performed an operation of adding it. 147 Now we are amending this. 148 So what will happen 149 to the original object? 150 So in this case you'll be surprised 151 to know and that's where 152 the mutable immutable comes 153 into, into the handy that. 154 Yes, now we have 1, 42 and 31. 155 So original object or original 156 property is being changed. 157 It's a mutable, the list. 158 So always remember, make sure that 159 you have gone through with this. 160 So this is nice, this is okay, 161 now let's go ahead and work 162 on with this more. 163 This idea can be extended 164 a little bit more. 165 We do have two types of arguments 166 that we can pass on in here. 167 The first you are going 168 to hear about is the args. 169 Yes, this is a proper name. 170 For this one is actually known 171 for positional ingredient, 172 positional parameters. 173 And you will hear another one 174 which is denoted by an asterisk. 175 And then you simply say kwargs. 176 This is keyword args. 177 Remember I told you. 178 Arguments. 179 There is one thing 180 known as parameters. 181 One is argument. 182 So this here is argument. 183 This one, when you are defining 184 the function, this is parameter. 185 Because it can have any value. 186 It can be cup as a list. 187 It can be anything or 188 any kind of a list. 189 So that's why we call 190 it as parameter. 191 But on the other hand, 192 this is our, sorry. 193 This one is parameter 194 and this is our args. 195 Arguments. 196 Based on this, I want 197 to show you something really, 198 really interesting. 199 Let's just say we have a, 200 method which says makechai. 201 And in this you expect 202 that I'll pass you a tea. 203 I. 204 I'll pass you a milk. 205 These are just variable name. 206 It can be anything. 207 And I'll pass you sugar, 208 not cigar sugar. 209 And there we go. 210 And I simply just print them out. 211 I don't do anything else. 212 So I'll just go ahead and say 213 this is my T, this is my milk, 214 and this is what else we have? 215 Sugar. 216 There we go. 217 It does nothing. 218 Now, interestingly, I can just 219 go ahead and say make chai. 220 And I have two ways of doing this. 221 I can just go ahead and say I want 222 a chai from a very beautiful place 223 in India, which is Darjeeling. 224 It's very beautiful. 225 And I will say milk. 226 I'll say yes. 227 And for the sugar I'll say 228 I'll definitely not say no. 229 But I'll say low. 230 This is something 231 known as, positional. 232 Positional. 233 Because I know the position of it. 234 So I know exactly that the Darjeeling 235 will go inside the T. 236 The yes will go into the milk 237 and the sugar is going to go. 238 This sometime can be confusing. 239 So another way of handling 240 this is known as keywords. 241 So how can we do this? 242 As soon as you put up the make 243 chai, you will see you 244 have some parameters here. 245 So I can just go ahead 246 and use this equal sign. 247 Notice this tea equals. 248 And then I'll just go 249 ahead and say green. 250 This makes sure that order 251 doesn't really matter. 252 But my value is going exactly. 253 So I'll swap the value of now sugar. 254 So first I'll pass on the sugar. 255 I know exactly what I'm saying. 256 So I'll just go ahead and say medium. 257 And then we have milk. 258 And the milk will be. 259 Let's, just say no. 260 I actually don't prefer milk T. 261 But this whole syntax is known as 262 keywords, and whenever you define 263 the function automatically. 264 This is available to you 265 and should be basic. 266 I shouldn't be printing this 267 out, but you get the idea. 268 It's green. 269 It says no, it says medium, 270 although we have swapped 271 the value, but it says green. 272 No, and medium. 273 This is where I have to keep 274 in mind that, hey, in what 275 order they are being passed on. 276 So based on this, we can 277 actually design another method 278 which uses, this args and kwargs, 279 or keyword arguments. 280 And I'll show you what 281 does it mean by that? 282 Really? 283 Truly not the theoretical 284 aspect, but impractical. 285 Let's just say we have 286 a special, chai. 287 I know a lot of chai these days. 288 So let's just say we put 289 up an asterisk here. 290 This asterisk is a part of syntax. 291 I will just go ahead 292 and say ingredients. 293 Hope I wrote that correct. 294 And I will also use asterisk. 295 Asterisk. 296 Yes. 297 This is again a syntax. 298 And I will say extras. 299 All right, so what do I mean by that? 300 What's the importance of this? 301 1 * and 2, *. 302 I'm not giving, T, milk like that. 303 I'm just saying ingredients. 304 And this is a variable name. 305 This is just a placeholder. 306 It can be anything. 307 I just want to print what happens 308 when all of this is written 309 in this format with the asterisk. 310 So I'll just go ahead 311 and say ingredients. 312 Hope I wrote that correct. 313 And second time, I'll 314 not take a chance. 315 I'll just copy this ingredients. 316 Because this is what I want to print. 317 And then second time, 318 we'll just say extras. 319 Copy this with a capital 320 E and this will be extra. 321 So what happens and how 322 does this work? 323 The way to learn this is 324 by seeing an practical 325 implementation for this one. 326 So let's just say if I go ahead 327 and call the special chai. 328 Now that you have seen how positional 329 works, how keyword works, 330 this is actually a mix of both. 331 So here is the interesting part. 332 Let's just say if I go 333 ahead and say, cinnamon. 334 Cinnamon. 335 And I go ahead and say another 336 one, which is cardamom. 337 And then I go ahead and say that 338 I want to use a sweetener. 339 There we go. 340 Very tough. 341 I will use Sweetener as honey 342 and will I use foam? 343 I don't know who uses foam, 344 but anyways foam will be yes. 345 So I hope you got a hint 346 of what we are trying to do. 347 Let me make it on the same line. 348 Notice here some 349 of the parameters don't have a name. 350 Some of them do have a name. 351 And you got that. 352 This is. 353 And this is exactly there. 354 We got args and we got kwargs 355 arguments and key value arguments 356 or also known as keyword arguments. 357 Whatever you want to call 358 them doesn't really matter. 359 But what's interesting here is 360 if I go ahead and run this 361 now, you're going to see that 362 ingredients gets a tuple 363 of all the values that we have. 364 So this is what the asterisk. 365 I didn't say that I'm expecting 366 one, two, whatever is 367 coming up without any name. 368 This is where we are getting. 369 So all the tuples are 370 going to come in. 371 But this is where you actually 372 says that, hey, I'm expecting 373 that you will provide me 374 the name of this value. 375 And this is exactly what we got. 376 Key value. 377 So. 378 So this is a dictionary and as 379 long as you understand 380 and know the data type, you can 381 do magic in programming. 382 Notice here, sweetener is 383 honey and the foam is. 384 Yes, and this is all it is. 385 I know a lot of people, 386 do a whole lot of drama with these 387 kinds of things, but I don't. 388 I prefer to show you 389 practically what it means. 390 And I have seen people spending 391 like 30 minutes, 1 hour 392 on the args and kw args. 393 No, it's not that difficult if you 394 don't get the values or the names. 395 If you don't provide the names, hey, 396 this will go into just one asterisk. 397 I can call this as 398 orgs as well, no problem. 399 Hey, feel free to call it args. 400 Feel free to call it as ingredients. 401 This one usually people 402 call it as kaw. 403 Orgs. 404 Hey, call it kwargs, call it 405 as extras, whatever you wish. 406 It's just a placeholder name. 407 The foundation of programming 408 should be strong. 409 There's one more thing I would like 410 to discuss here, which is also 411 production kind of a thing. 412 So sometimes let's just say 413 I have a simple value here. 414 I'll just go ahead and say chioders 415 and you can actually go 416 ahead and provide default values 417 to all these things. 418 So let's just say user 419 doesn't provide anything. 420 I still want to have a value, 421 so there is nothing which stops me 422 to provide a value just like this. 423 It is totally, totally okay. 424 But here's interesting part 425 if I go ahead and provide a value 426 of empty array which is mutable, 427 that means it can be changed. 428 Let's just see what happens. 429 When I go ahead and say order it 430 has a property of appendix because 431 it's an array and I can go ahead 432 and add a masala chai to this one. 433 That's it, that's all 434 what we are doing. 435 And now we are printing. 436 Come on, write that print 437 and I want to print whatever 438 the value of the order is. 439 Now here's the interesting part. 440 Let me show you the most 441 interesting and gotchas 442 of programming in Python. 443 We want to run this chai order. 444 I run it, but I go ahead 445 and accidentally run it twice. 446 Hey, this is interesting 447 what will happen when I 448 accidentally run it twice. 449 Because you have appended 450 the orders is going to append 451 in a very interesting way. 452 Notice here it says masala masala. 453 So be very very careful 454 for the default trap because this 455 is known as default traps. 456 So default has trapped you. 457 If you have the default value you 458 have nothing inside it and you have 459 tried to append so this whenever you 460 are going to run it second time 461 because first time it has already 462 done this. 463 We have seen actually 464 this kind of error. 465 So it has actually bite us here. 466 Now what we can do, 467 in this case this can be actually 468 made a little bit easier. 469 So I'll just go ahead and first 470 make a copy of this and we'll show 471 you that instead of putting an empty 472 value up here, you can actually 473 make your life little easier. 474 I'll just go ahead and comment 475 this so that you can have it. 476 Instead of putting the empty array, 477 what you can do is make your 478 code little bit secure or safe. 479 I can just say none. 480 So by default it's not empty 481 array, it is absolutely no value. 482 Here it is all none. 483 I don't want to append it like this. 484 I only want to append it 485 in certain cases only if 486 the value is being provided 487 to me or something like that. 488 So we are going to just go 489 ahead and remove this 490 and instead this I'll show you 491 a nice way of writing this. 492 If the order that is being provided 493 is none, notice here we are not 494 providing any value and in this case 495 we are not providing any value. 496 So you shouldn't be appending 497 or something like this. 498 If you provide me a value then only 499 the order append whatever value 500 is coming in here should be there. 501 So in this case I can just 502 go ahead and use if clause 503 and say if order is not in. 504 If Order is none. 505 I'll just go ahead and say 506 order is equals to empty array. 507 Now, no matter how many times I'm 508 calling this, this will always 509 remain because what I'm technically 510 passing here is actually none. 511 Whenever you are passing nothing, 512 that means you're passing on none. 513 It's something that we 514 encountered, in here. 515 So again, notice here we 516 are not printing anything. 517 Obviously we are not 518 printing anything. 519 But if you want to print this as well 520 that, hey, what's the value of this? 521 We can just go ahead 522 and quickly do this. 523 Print the order just like this. 524 And I hope you got the idea of 525 this is now both the time it's 526 empty because you are not 527 passing anything and you can 528 still use the same logic order, 529 append whatever the value is 530 coming in. 531 You can also check whether 532 the length is more than zero. 533 And then. 534 You got the idea. 535 You got the idea. 536 This was just a small incident 537 which I wanted to talk about. 538 It's not something that, hey, 539 just always keep in mind 540 you will eventually learn with them 541 as you will write more code. 542 But that's all. 543 That's all I wanted to talk 544 about this hope you've enjoyed 545 these, fun little videos. 546 Please do rate us. 547 And that is it. 548 Let's catch up in next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 Handling arguments in function in python.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/05 Handling arguments in function in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.015266083,
      0.0021684633,
      0.031259775,
      -0.070672706,
      0.0017548518,
      0.012494891,
      0.006721047,
      0.040030804,
      0.015255606,
      0.010823567,
      -0.024628853,
      -0.006811365,
      -0.0037931271,
      0.019319268,
      0.10887747,
      -0.0046672067,
      -0.009885587,
      0.01072947,
      -0.006834819,
      -0.024772342,
      0.00027245976,
      0.0021363308,
      -0.0026838426,
      -0.0049791955,
      0.005845239,
      -0.0072966595,
      0.0025904241,
      0.009306996,
      0.024018092,
      -0.02657573,
      -0.014713379,
      0.00007427375,
      -0.0031670986,
      0.006410049,
      0.007883343,
      0.013844331,
      0.01085292,
      -0.02176211,
      -0.023804031,
      0.020653728,
      -0.021950316,
      -0.030808931,
      0.0059415633,
      -0.028434355,
      0.005830333,
      -0.017650848,
      0.025751583,
      -0.021420624,
      0.0013165508,
      0.03090806,
      0.006049949,
      0.0009660281,
      0.0067008985,
      -0.18976334,
      0.013071872,
      0.011821987,
      -0.0037235988,
      -0.004910136,
      0.0059562097,
      0.022163186,
      -0.021350028,
      0.019619776,
      -0.031201521,
      -0.008617479,
      0.0005424566,
      -0.025286093,
      0.023296278,
      0.008473898,
      -0.01677382,
      -0.010628127,
      0.0428417,
      0.020284552,
      -0.010540978,
      -0.02096463,
      -0.017001206,
      -0.032576654,
      0.025927415,
      -0.015217739,
      -0.005154914,
      0.014367125,
      0.007433608,
      -0.014575623,
      -0.018852679,
      -0.017209955,
      0.021179516,
      -0.011370188,
      -0.018416982,
      -0.015893914,
      0.013218512,
      -0.007623076,
      -0.011261359,
      0.00007074335,
      0.012954404,
      0.0024922905,
      0.00047247126,
      0.022562934,
      -0.013433838,
      -0.0030468144,
      -0.029387208,
      -0.019165862,
      0.011667997,
      -0.006373216,
      -0.0030126937,
      -0.005453827,
      0.014828803,
      -0.0063715293,
      -0.002727491,
      -0.00012950764,
      -0.0273809,
      -0.009055433,
      -0.0008497886,
      -0.019795569,
      0.005375634,
      0.0111101875,
      -0.0059379605,
      -0.17438973,
      0.0147013785,
      0.002903189,
      -0.025608892,
      0.002715722,
      -0.004527933,
      0.004679146,
      0.007558196,
      -0.00031165904,
      0.00089431624,
      0.01816002,
      -0.006986476,
      0.031207934,
      0.018675301,
      0.003320412,
      -0.021135055,
      -0.027295267,
      0.00063950336,
      0.013781823,
      0.00025526766,
      0.016887566,
      -0.04637403,
      -0.020986253,
      -0.029646944,
      0.00010432799,
      0.011726816,
      0.0080012,
      -0.00047495245,
      0.020980716,
      0.0044178064,
      0.006768381,
      -0.009326949,
      0.0018772398,
      -0.024375252,
      -0.03236506,
      0.022816217,
      0.0024172305,
      -0.0008354392,
      -0.00035928836,
      0.029007994,
      -0.016411893,
      0.020010449,
      -0.014383641,
      0.0011061144,
      0.012519941,
      -0.00726381,
      0.006379636,
      0.0051495726,
      0.014152833,
      0.00036789596,
      -0.000012904098,
      -0.021949718,
      0.0201166,
      0.012434162,
      0.025415013,
      -0.011220145,
      -0.010278358,
      -0.011216379,
      -0.008217233,
      -0.009867556,
      -0.002309921,
      0.0030262196,
      -0.00074438367,
      0.02587188,
      -0.007884682,
      -0.012090663,
      -0.02430016,
      0.0041964087,
      -0.011074846,
      0.0026585944,
      0.0012379886,
      -0.015559648,
      0.017065369,
      0.0007320884,
      -0.011466197,
      -0.0021710151,
      -0.0035108277,
      0.021442585,
      0.02035308,
      0.010335836,
      -0.02844253,
      -0.01566922,
      -0.0065543093,
      0.00046229703,
      0.026058603,
      0.014871706,
      -0.011404435,
      -0.0054622293,
      -0.019751009,
      0.030887319,
      -0.013895077,
      0.009444005,
      -0.0099899275,
      0.015906285,
      0.0017931752,
      -0.0231361,
      -0.010020637,
      -0.0050317356,
      -0.0007722572,
      0.0003109114,
      -0.0040854774,
      0.033094835,
      -0.011291821,
      -0.00628495,
      0.00604873,
      0.008696304,
      -0.016741348,
      -0.017085245,
      0.013592703,
      -0.00023568019,
      0.0015500723,
      0.0035086826,
      -0.014802205,
      0.0043802904,
      0.021680167,
      0.024529325,
      0.0028238816,
      -0.021014312,
      -0.011300523,
      0.004268754,
      -0.02595164,
      -0.00600371,
      0.023351489,
      0.010613452,
      0.021519644,
      0.0059334664,
      -0.008574309,
      -0.005113148,
      0.006275457,
      0.0063253255,
      -0.0022771417,
      0.0033350433,
      -0.01250863,
      0.00478998,
      -0.009704808,
      -0.027283378,
      -0.02231104,
      -0.009049453,
      0.01164649,
      0.013257587,
      -0.024996435,
      -0.014833614,
      -0.012882462,
      -0.0039004614,
      -0.012379013,
      -0.003231319,
      0.008235624,
      -0.0032767947,
      -0.002677137,
      0.0135367615,
      0.0010925999,
      0.003907206,
      0.046443038,
      -0.020521667,
      0.001358729,
      0.007870658,
      0.007717799,
      -0.009450049,
      0.012197628,
      -0.014426137,
      0.0098687,
      -0.089057714,
      0.031143822,
      0.01704345,
      -0.02219829,
      0.000027797289,
      0.008703374,
      -0.024063941,
      0.033255346,
      0.0024108866,
      0.015038632,
      0.0005862914,
      -0.009280631,
      0.029001042,
      -0.012470608,
      -0.006511452,
      -0.009144008,
      0.006824404,
      -0.00904857,
      0.0022807082,
      -0.010823518,
      0.02934596,
      0.005021728,
      0.003307377,
      -0.0010450823,
      0.017651146,
      0.0031031433,
      -0.004412129,
      0.019478662,
      0.0077500204,
      -0.0046484154,
      0.0072432095,
      0.027760906,
      -0.016337112,
      -0.010868464,
      0.014458432,
      0.005871942,
      -0.0080892835,
      0.0022789072,
      -0.018589778,
      -0.013136202,
      0.013265936,
      -0.01455031,
      0.03713844,
      0.036049437,
      0.011341205,
      0.0064502764,
      0.0149100125,
      -0.0037533084,
      -0.0051728357,
      0.0064983605,
      -0.028626302,
      -0.013500262,
      0.0015333615,
      -0.01707679,
      0.029853651,
      0.01489203,
      0.0038476705,
      -0.014685034,
      0.0050643226,
      0.0056739408,
      0.0055604414,
      0.011584259,
      0.000632507,
      -0.0007513128,
      0.011039023,
      -0.012004547,
      0.017475175,
      0.005939302,
      -0.012940843,
      -0.010518789,
      0.021468012,
      -0.0008563234,
      -0.009561605,
      -0.016679566,
      0.0058916006,
      0.00020889715,
      0.031080144,
      -0.0095134545,
      -0.00096601894,
      0.029946748,
      0.015404152,
      -0.0063197496,
      -0.0042519765,
      0.0064338315,
      -0.0026612964,
      0.008570179,
      0.00008139133,
      -0.0052795936,
      0.018722774,
      -0.012186524,
      0.021538226,
      0.008166125,
      -0.011443564,
      0.018050341,
      -0.016739301,
      0.014616166,
      -0.033748895,
      -0.014388871,
      -0.024605999,
      0.009364525,
      -0.014287576,
      -0.021937283,
      -0.023167765,
      -0.0014987394,
      -0.019911095,
      0.019849373,
      -0.03453204,
      -0.008878927,
      -0.002892138,
      -0.031611357,
      0.015731413,
      -0.015158541,
      -0.024835074,
      0.00052146387,
      -0.008213408,
      0.018028278,
      -0.01979485,
      0.0128837,
      0.010491474,
      -0.03493582,
      -0.009726769,
      0.0015576747,
      0.0030717428,
      -0.00414134,
      0.0016064332,
      0.014761684,
      -0.012369009,
      -0.015091609,
      -0.006895744,
      -0.017326761,
      -0.0072478643,
      0.016798703,
      -0.028020857,
      -0.014258221,
      -0.02479162,
      -0.02716692,
      0.018191207,
      0.012999946,
      0.015445765,
      0.009263227,
      -0.032720674,
      0.011023597,
      0.0008809084,
      0.0063357665,
      -0.0055629257,
      0.032668564,
      -0.010649983,
      -0.013959387,
      0.006792817,
      -0.035404768,
      -0.013828622,
      -0.010453358,
      -0.010908888,
      -0.022191586,
      -0.006628741,
      0.0060018417,
      -0.0131864725,
      -0.0043203034,
      -0.018204032,
      -0.031420473,
      -0.0001782419,
      0.006638002,
      -0.011452293,
      -0.011630385,
      0.027678488,
      -0.0053466335,
      0.031040404,
      0.0042178826,
      0.022354458,
      0.011241718,
      0.00053741393,
      -0.011545247,
      -0.03666021,
      -0.018445892,
      0.026578955,
      -0.0065617673,
      0.007832323,
      0.0075112297,
      -0.0046349685,
      0.027339386,
      0.019050073,
      0.0014608132,
      -0.011375881,
      0.0153680695,
      0.0083015645,
      0.0016155782,
      0.018651284,
      0.0049520256,
      -0.024440773,
      -0.0015007453,
      0.020454802,
      0.0019187367,
      -0.0055174064,
      0.013366344,
      0.011557421,
      -0.008550186,
      -0.011153375,
      0.0032094663,
      -0.015390516,
      0.010061944,
      -0.0031357969,
      0.0014224288,
      -0.0075409063,
      0.0106506515,
      -0.009951247,
      -0.010830434,
      -0.016278282,
      -0.031763624,
      0.0015310406,
      0.008845088,
      -0.005577144,
      0.011021249,
      -0.011021861,
      -0.014078045,
      0.029031849,
      0.022036804,
      0.0042203204,
      -0.0068911114,
      -0.030891279,
      -0.016850457,
      0.018694904,
      -0.0076150317,
      0.004309837,
      -0.020706726,
      0.018039787,
      -0.023895206,
      -0.0023731375,
      0.004703138,
      0.00064521126,
      -0.00033928934,
      -0.018488944,
      0.009377057,
      -0.003162114,
      -0.00083470787,
      -0.016322264,
      -0.0140065495,
      0.023948625,
      0.030280974,
      -0.012161948,
      0.035023354,
      -0.000056508383,
      -0.0052884487,
      -0.026049383,
      0.008783973,
      0.025224546,
      0.0032288646,
      0.0063905753,
      0.008793726,
      -0.019509919,
      -0.009442993,
      0.0039412724,
      0.011106841,
      -0.014246898,
      -0.0014987651,
      -0.0296021,
      0.032700576,
      -0.024539672,
      -0.0035079722,
      -0.003413808,
      0.0007964434,
      0.027665915,
      0.021587465,
      0.004588459,
      0.0013608024,
      -0.031136874,
      -0.00331681,
      0.00746074,
      -0.0040683737,
      0.013634762,
      -0.13226268,
      0.013797517,
      -0.012075068,
      0.014748175,
      -0.020772798,
      0.0058053187,
      -0.0060703126,
      -0.010036861,
      0.005766218,
      -0.0051776697,
      0.02941723,
      -0.0072691743,
      0.001317754,
      -0.005678305,
      -0.008016848,
      -0.0027569046,
      0.018581161,
      0.015907567,
      0.011240951,
      -0.0002740956,
      -0.009164091,
      0.002695165,
      -0.016175088,
      -0.010772055,
      -0.026458094,
      -0.009383755,
      0.011907137,
      -0.012080317,
      -0.0314514,
      -0.010289875,
      -0.027265389,
      -0.01613627,
      0.0038178677,
      0.00954517,
      0.0026523483,
      -0.004581918,
      -0.016453696,
      0.019811349,
      0.0017627064,
      0.013745396,
      0.016928175,
      -0.0046519483,
      0.039533734,
      0.010386953,
      0.000018050607,
      0.023813488,
      0.036300167,
      -0.0019534335,
      -0.013702102,
      0.03476657,
      -0.021469142,
      -0.012677356,
      0.0044843433,
      -0.023421558,
      -0.038654685,
      -0.004202383,
      0.024788275,
      -0.022841945,
      -0.013323831,
      -0.008476896,
      0.017223015,
      0.00793017,
      0.023797618,
      0.0015604369,
      -0.004465111,
      0.00060668885,
      0.0035921838,
      0.015540531,
      -0.013422504,
      -0.03263238,
      0.0057046884,
      0.0022089123,
      0.0064102677,
      0.008728718,
      -0.0026472511,
      -0.00436446,
      -0.00023681948,
      0.017712237,
      0.014335565,
      0.010212862,
      -0.03747456,
      -0.012720626,
      -0.06398288,
      -0.023976497,
      0.017181998,
      -0.013950273,
      0.024447395,
      0.02202486,
      -0.012042208,
      0.007819012,
      0.0066612195,
      -0.01634665,
      -0.014565034,
      -0.004994547,
      0.012997354,
      -0.007672847,
      0.013297825,
      -0.01395861,
      -0.0029689188,
      -0.015709708,
      -0.02368895,
      -0.00946234,
      0.003938894,
      -0.0010356465,
      0.0034994003,
      -0.016186588,
      -0.004583681,
      0.036618154,
      -0.00045830794,
      0.014906993,
      -0.002359827,
      0.01939263,
      0.0014563717,
      -0.1537705,
      -0.024255944,
      -0.00253807,
      0.010543047,
      0.006862894,
      -0.00190482,
      -0.013019539,
      -0.018401813,
      0.0050045643,
      -0.0046265568,
      0.0020186552,
      -0.005463702,
      -0.014991168,
      -0.012242348,
      0.024328671,
      0.1254691,
      0.003133291,
      0.0062771775,
      -0.018256018,
      -0.01253819,
      -0.0029633236,
      -0.013545252,
      -0.0054047103,
      -0.0070135826,
      0.004402439,
      -0.013763061,
      0.00018748929,
      0.0072629014,
      0.016482646,
      -0.0145836,
      0.0041237506,
      -0.026740985,
      -0.010420441,
      0.028663231,
      0.0062225163,
      0.0008869459,
      -0.0042735273,
      -0.0020043848,
      0.00028014465,
      -0.012866448,
      0.018424762,
      0.011625761,
      0.010920818,
      -0.0067051705,
      -0.007089698,
      0.016313935,
      -0.0024062803,
      -0.0075510745,
      -0.0010535521,
      0.017214468,
      0.008930686,
      -0.052237928,
      -0.0026396208,
      -0.014400027,
      -0.012827313,
      0.001736947,
      0.0079997685,
      0.008537155,
      0.0012679589,
      0.02707266,
      -0.006957053,
      0.0021435744,
      -0.0108032795,
      0.009606494,
      0.003142538,
      -0.012697325,
      0.020663008,
      0.023359554,
      0.0012964,
      0.007511046,
      0.00033047225,
      0.008495777,
      0.013640953,
      0.0015771489,
      0.0017171882,
      0.008677445,
      0.011082522,
      0.025189973,
      0.010254537,
      -0.008364938,
      -0.01166369,
      -0.0026822141,
      0.004701043,
      0.0006495775,
      0.009711686,
      0.016605677,
      -0.0166576,
      0.024938723,
      -0.0035821088,
      0.016547827,
      0.009713498,
      0.017532721,
      -0.012553026,
      0.016281115,
      -0.014335889,
      0.01201147,
      0.0071946136,
      -0.020218367,
      0.029029494,
      0.0036094508,
      0.009969917,
      -0.005370648,
      -0.010803146,
      -0.028003315,
      0.010110598,
      0.010580328,
      -0.004406149,
      0.0003475657,
      -0.006636601,
      0.005185491
    ]
  },
  {
    "id": "genai_cohort_python_06_handle_multiple_return_in_python_vtt",
    "content": "All right, so the next topic 2 that we're going to discuss 3 is about the return. 4 So if you remember, we briefly 5 touched on this topic, we had 6 a simple function just like this. 7 We have a function name 8 we have discussed about what goes 9 inside these parentheses. 10 We goes like this. 11 And, we usually go 12 ahead and say pass. 13 But you also have noticed, apart 14 from print statement, we 15 once wrote a return, 16 value here or return keyword here. 17 And when I say it's going 18 to return, let's just say hitesh. 19 That means it's returning 20 a value, it's not printing it. 21 What does it mean really? 22 And can we have a small 23 discussion on this for sure. 24 Now I want to focus majorly 25 on this keyword because 26 it's an important one. 27 Now imagine that you are a T seller 28 and you have a great masala chai. 29 What good is the effort if you don't 30 hand in the cup to your customer? 31 Exactly. 32 Similar. 33 This return keyword is this actually 34 goes ahead and simply says, 35 I will return you this value. 36 And this value here 37 can, be any value. 38 So if I go ahead and say this 39 value, this is exactly. 40 Can be any value. 41 Yeah, this is exactly 42 what it's saying. 43 I'll show you a more practical 44 example of it, in fact, multiple 45 examples of it, and then 46 you will truly realize, 47 all right, this is a really powerful 48 keyword in its altogether. 49 Let's go ahead and create a new file 50 and call this one as tenreturn py. 51 All right, so let's just say we 52 simply go ahead and make 53 a function which says make chai. 54 And there we go. 55 And, here it is. 56 The simplest example is return. 57 If I go ahead and use the keyword 58 return, and I simply say, 59 here is your masala chai. 60 This is really interesting. 61 Now further in my instruction, 62 it's not printing by default as 63 a function, but I want to print 64 whatever the value it returns. 65 So there are a couple 66 of ways how this can be done. 67 I can go ahead and say make chai. 68 Now, whatever the result comes 69 back, I'm immediately going 70 ahead and printing this out. 71 That's one way, very common way. 72 You're going to see this quite a lot. 73 So I just say Python 3, run this one. 74 This is totally okay, but this 75 is not really that easy 76 to understand that what happens. 77 So we'll cut this out and instead 78 of going with this, I will just go 79 ahead and use a value, return value. 80 Don't use return as a keyword 81 because it's, a reserved keyword. 82 Python uses it, so we can't use it 83 so now if I go ahead and use this, 84 I hope you can see whenever this 85 function executes and whatever it 86 returns, that gets stored into 87 this value and I can definitely 88 after this print this value as 89 return value, the result will be 90 exactly same. 91 But now this is much more easier 92 for me to understand. 93 So we need to study that. 94 What happens when I go 95 ahead and print this? 96 That could be a case. 97 That's a very interesting case. 98 Let's just say I'll 99 comment this out and I'll go 100 ahead and just say print. 101 And I want to print 102 something like this. 103 And I will say here is your masala. 104 Oh, I did a typo prep before that. 105 Masala chai. 106 What's in this case? 107 What would be the value 108 of return value? 109 And this is exactly, you 110 should be aware of this, 111 that this will be none. 112 So let's go ahead and have 113 a discussion on this one. 114 So whenever there are a couple of 115 cases that goes through like this. 116 So let's go ahead 117 and understand this. 118 So return can actually 119 return nothing. 120 When you go ahead and return nothing, 121 this is simply known 122 as that you are implicitly, 123 implicitly returns as none. 124 That's interesting. 125 Now you can also go ahead. 126 If you don't return anything, 127 the none will be returned to you. 128 So this is again a keyword. 129 But this is interesting. 130 You can also return one value value. 131 You can return multiple 132 value and you can also 133 early return from a function. 134 What do you mean by early? 135 From a function. 136 I'll show you example 137 for each one of them. 138 Don't you worry in that case. 139 So we'll take another such 140 examples for in this case we 141 have seen it once, but I want 142 to show you it again. 143 All right, so let's just say I 144 create a function and I say this 145 is my idle ideal idle chaiwala, 146 which also names as tea seller. 147 And I will go ahead 148 and just say pass. 149 I don't do anything in this one. 150 So if I go ahead and try to print 151 the value here and I say this 152 is my idle chaiwala, runs this. 153 Now you'll also notice again this 154 time first let's comment this one. 155 No printing. 156 And yeah, that's okay. 157 That's it. 158 Save this. 159 Run this again. 160 And now you see print. 161 Of course this also prints. 162 I don't want it to be here. 163 I'll just comment this 164 and this as well. 165 Too many comments. 166 But don't focus on that. 167 Just focus on this. 168 So we can see this ideally 169 gives me none as the value. 170 Just see it up here. 171 The none. 172 Yep. 173 This marks the point 174 that, hey, nothing. 175 When you give me nothing, 176 it will be implicitly 177 returning me a none object. 178 And I can do a lot 179 of things with that. 180 Now what happens if I want 181 to do something more? 182 All right, let's just say you define 183 another function which is sold cups. 184 And in the sold cups you go ahead 185 and return me one number only. 186 So that number could be 187 anything or could be a true 188 false, whatever the value is. 189 The interesting part now is 190 I can go ahead and store 191 this into any variable. 192 I can just run this function just 193 like this and whatever the result 194 comes back, I store that result. 195 I can go ahead and print this 196 total and I'm pretty sure you have 197 guessed the output by now. 198 What's going to be the output 199 for this one? 200 So there we go, run it again. 201 We see that the none is above 202 output, but we have this 120. 203 Pretty nice. 204 Interesting, isn't it? 205 All right, so what about 206 returning early? 207 Because I know multiple value 208 will see that for sure. 209 But right now let's just see. 210 We have seen the one value. 211 Now I want to see the early 212 from a function. 213 We'll surely handle 214 the multiple value. 215 Don't you worry on that. 216 Let's just say you define another 217 one which says chai status. 218 And what I say is this takes 219 parameter as cups left left. 220 And we have a condition here that 221 if somehow the value cups left is 222 equals to zero, and in that case 223 I simply want to return, surely I 224 can use break, but I just want to 225 return that says sorry chai over 226 or chai I can use other words as 227 well in my native language, but 228 I'll go and in the other cases 229 I'll go ahead and say chai is 230 ready. 231 All right, so how can we use this? 232 How can we actually 233 short circuit this one? 234 So if I go ahead and print this out 235 as my chai status and I go ahead 236 and pass on a value of 0 VS I pass 237 on a value of 5 in the first line, 238 we are actually short circuiting 239 it. 240 That means once the return value is 241 there and once a function hits 242 return, no other code is executed. 243 I repeat this once a function 244 hits the return keyword. 245 After that, no matter what happens, 246 other code will not execute. 247 All right, let's see that in action. 248 So in the first line you're going 249 to see that the sorry chi over. 250 If this is getting printed in 251 the first iteration of the function, 252 this chai isready never prints out. 253 But in the other case, when you 254 pass on the 5 value, you never 255 are Short circuiting it and you 256 always get the chise ready. 257 What you'll also notice if I go ahead 258 and say that I want to print 259 something here within this function. 260 Notice here what happens if I 261 go ahead and print say chai. 262 Notice here it's always grayed out. 263 I hope you can see that. 264 Very difficult. 265 But still you can see this. 266 This is grayed out. 267 If I try to run this, the code, 268 no matter what happens, will 269 never reach to line number 24. 270 Because once you return, 271 that means that is it. 272 And that's what it says 273 early from a function. 274 Returns early from a function. 275 All right, hope this is now clear. 276 Now one more thing. 277 How about we talk about 278 returning multiple values. 279 This is what you will 280 see quite a lot. 281 A lot of other languages are also 282 adopting this behavior. 283 But this is actually very fun. 284 I can go ahead and say that I will 285 go ahead and work on with chireport. 286 I'm collecting a report for chai 287 and then I return 288 somehow I return two values. 289 120. 290 Now by the way, you can return true, 291 false or arrays. 292 You can return anything 293 which you wish. 294 What I am returning for just my 295 reference, I'm saying how many 296 sold and how many remaining. 297 All right, good enough. 298 Now with this, any function, as 299 soon as you execute this 300 method, which is chireport, 301 this will return you two values. 302 So what you can expect, 303 you can declare two values, sold 304 and remaining. 305 And automatically when this 306 function execute, it will 307 give you the two values. 308 Surely you can return 309 third value as well. 310 But since you are not handling this, 311 this will go probably in the air. 312 Nobody is going with that. 313 Let's go ahead and print 314 out the values. 315 So I'll just go ahead and say this 316 one is sold and I want to have 317 the sold variable another one. 318 We are going to go ahead 319 and say remaining. 320 For this one I will say remaining. 321 Hope I wrote that correct. 322 So we get this one. 323 Let's see what's the output of this? 324 You might have guessed the sold 325 is 100 and all of that. 326 But what happens in the case 327 when actually function returns 10 328 for something? 329 Some people haven't paid for that. 330 So in that case the function will 331 simply say that hey, we are 332 returning unpacking three values. 333 Why are you not handling 334 the three values? 335 And there are a couple 336 of ways how this is handled 337 or this can be handled. 338 Oh, in case you are an experienced 339 programmer, you might be guessing, 340 hey, what if I just go ahead 341 and put up an underscore here. 342 I'll show you directly 343 practical what happens. 344 The code actually runs. 345 And you will see this quite a lot. 346 Underscore means, hey, I know 347 the three values are coming in, I'm 348 handling them, but I'll probably 349 never ever use this value here. 350 So it's, a common practice. 351 You might use underscore here. 352 That's a hack. 353 But most of the time you want 354 to have this, so, I'll just 355 go ahead and say, not paid. 356 And it's up to me that I don't want 357 to use this value or this variable. 358 It's okay. 359 You can actually run both 360 of the cases, so this is really fun. 361 So I hope this gives you the idea 362 of how it works and how 363 the function return can be a really, 364 really interesting topic. 365 So that is it for this video. 366 Let's catch up quickly 367 in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "06 handle multiple return in python.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/06 handle multiple return in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.03455393,
      -0.0018003111,
      0.037382424,
      -0.05987787,
      -0.013837849,
      -0.014537935,
      0.009063299,
      0.02206815,
      0.001925676,
      -0.006021243,
      0.005823429,
      0.004238966,
      -0.0068758656,
      0.016337039,
      0.12436265,
      -0.00012620466,
      -0.013441681,
      -0.012507694,
      0.010696092,
      -0.01914266,
      0.017742561,
      0.0033935858,
      -0.018056879,
      -0.01658629,
      -0.0055173817,
      0.016012343,
      0.010468249,
      0.03084769,
      0.027169222,
      -0.030287785,
      -0.007851834,
      -0.0032358097,
      0.0020054101,
      0.02471844,
      0.00568299,
      0.023691643,
      0.00014973832,
      0.00069713726,
      -0.0121427355,
      -0.00012327325,
      -0.03247364,
      -0.017983254,
      0.005883527,
      -0.030786563,
      0.016520435,
      -0.03963207,
      -0.0131714195,
      -0.002894996,
      0.0067078196,
      0.032541882,
      0.008709534,
      -0.010628871,
      -0.00933454,
      -0.19449042,
      0.022029655,
      -0.0016732971,
      0.0012800981,
      0.009653534,
      0.009945526,
      0.003397585,
      -0.024067847,
      0.011505643,
      -0.024750216,
      -0.015978862,
      0.004714076,
      -0.019398442,
      0.032675587,
      0.007575913,
      -0.0036836327,
      0.005788118,
      0.021519572,
      0.03296735,
      -0.014662145,
      -0.006643931,
      -0.02529776,
      -0.030877488,
      0.01310381,
      -0.026414365,
      -0.0003593208,
      -0.003263162,
      0.02431161,
      -0.01610976,
      -0.0038310834,
      -0.0072793276,
      0.019897485,
      0.005174555,
      -0.022672521,
      -0.0037619218,
      0.022679191,
      -0.0084381895,
      -0.008248846,
      0.007855545,
      0.0006382528,
      0.0035893514,
      -0.012417388,
      -0.0054564043,
      -0.0054126554,
      0.01437702,
      -0.038574994,
      -0.0037574596,
      -0.014702196,
      -0.009130757,
      -0.014268453,
      -0.0007093186,
      -0.002198992,
      -0.0052426937,
      0.0064795655,
      -0.0009572856,
      -0.028402796,
      -0.0013083329,
      -0.0066087805,
      -0.0011444242,
      0.00239146,
      0.030941606,
      -0.0008685576,
      -0.1681682,
      0.011509284,
      -0.01351876,
      -0.021193434,
      0.0031431797,
      0.0031207127,
      0.013052889,
      0.004485031,
      0.008588317,
      -0.0051464415,
      0.03324986,
      -0.012873185,
      0.029916089,
      -0.002405038,
      -0.0056189355,
      -0.020881439,
      -0.011756788,
      -0.0042929114,
      0.00070598425,
      -0.0050517204,
      0.024744399,
      -0.024816334,
      -0.004361727,
      -0.017260846,
      -0.0023833956,
      -0.0042450405,
      0.021093393,
      0.0010304106,
      0.02788676,
      0.013923503,
      -0.00017803514,
      -0.01376851,
      0.0022636952,
      -0.024768913,
      -0.028928833,
      0.0075957603,
      -0.010793385,
      0.0037167314,
      -0.00047209134,
      0.04053925,
      -0.013252399,
      -0.0070214383,
      -0.004851496,
      -0.0048756204,
      0.007408642,
      -0.007860041,
      -0.006087997,
      0.014039969,
      0.0008700753,
      -0.014456062,
      0.0006823949,
      -0.001069758,
      -0.010395913,
      0.017852105,
      0.022879712,
      -0.0007532396,
      -0.015659953,
      0.0015112341,
      -0.010575526,
      -0.013976405,
      -0.0033222972,
      0.010383175,
      0.0025059727,
      0.018163763,
      -0.0061387974,
      0.019173888,
      -0.0009645825,
      0.014469275,
      0.006935786,
      -0.0028051762,
      0.01040742,
      -0.006222183,
      0.0036490136,
      0.0001577359,
      -0.020441609,
      -0.013173105,
      0.0031403892,
      -0.0022350182,
      0.015430389,
      0.00836079,
      -0.033480145,
      -0.01399085,
      0.009410331,
      0.0116655165,
      0.00010710887,
      0.02083767,
      -0.015826246,
      0.0052657058,
      -0.025444701,
      0.041012533,
      -0.012217467,
      0.0017983947,
      -0.009737407,
      0.030561648,
      0.009355415,
      -0.013839376,
      -0.0049238615,
      0.008588396,
      -0.007872701,
      -0.0026975865,
      -0.005137395,
      0.01697732,
      -0.006755123,
      0.001501441,
      0.007116707,
      -0.0034838258,
      0.010852477,
      -0.0045291325,
      0.020727161,
      0.015172291,
      -0.022422412,
      0.010541076,
      -0.006941281,
      0.00034237228,
      -0.0015999177,
      0.027920356,
      -0.00833975,
      -0.0020452382,
      -0.008392374,
      0.0012441233,
      -0.005338969,
      -0.0005022738,
      0.027874127,
      0.0035870904,
      0.0030514165,
      0.013446333,
      -0.012595867,
      -0.010933476,
      -0.005768722,
      0.01131872,
      -0.0067375596,
      0.009570955,
      -0.0038422893,
      -0.0023966143,
      -0.022242121,
      -0.014133734,
      -0.012748422,
      0.0026648357,
      0.007463527,
      0.0040994263,
      -0.032894403,
      -0.030659435,
      -0.006150058,
      -0.014498041,
      -0.017847322,
      -0.0018724084,
      -0.0023241218,
      -0.014534189,
      0.009134388,
      0.022274578,
      0.0012833365,
      -0.005736475,
      0.033803914,
      -0.023880742,
      0.006483045,
      0.01987793,
      0.025881426,
      0.016737396,
      0.0072792643,
      -0.031384602,
      0.018384434,
      -0.099585466,
      0.008937653,
      0.024056576,
      -0.015615854,
      -0.0073294993,
      0.01932481,
      -0.009044692,
      0.015519502,
      -0.0074515203,
      0.016586535,
      0.00738288,
      -0.016314775,
      0.02472472,
      -0.012027482,
      -0.008026286,
      -0.009880984,
      0.015090188,
      -0.0032199728,
      0.019650362,
      -0.01136659,
      0.000611487,
      -0.0132051045,
      -0.022987992,
      -0.017275494,
      0.009385203,
      0.017109323,
      -0.016191794,
      0.02752216,
      0.014233689,
      -0.0015805932,
      0.008762329,
      0.014620622,
      -0.016573798,
      -0.00039570226,
      0.023590403,
      0.011180517,
      0.0017400673,
      -0.0043452354,
      -0.0008017408,
      -0.00958454,
      0.013453073,
      -0.018739784,
      0.017650077,
      0.035676066,
      -0.0018848958,
      0.012774287,
      0.00201245,
      0.015441126,
      -0.019486506,
      0.003232536,
      -0.028646974,
      0.021716066,
      0.012292986,
      -0.0055702585,
      0.009100274,
      -0.0074112406,
      0.02285832,
      -0.0004962431,
      0.006825385,
      0.0017256929,
      0.005119113,
      0.013954093,
      0.017831651,
      -0.01994952,
      0.011544988,
      0.008887146,
      0.030566914,
      -0.014460416,
      -0.017075967,
      -0.0040539657,
      0.007975712,
      0.0012601553,
      -0.012992905,
      -0.024748122,
      0.0019549108,
      0.0066270153,
      0.015850652,
      -0.021011313,
      -0.013226152,
      0.036958054,
      -0.0047783246,
      -0.01051153,
      -0.014440762,
      0.022867754,
      0.0021286295,
      0.021322578,
      0.0096636,
      -0.008422985,
      0.012700122,
      -0.010729715,
      0.007610941,
      0.009330405,
      -0.016639011,
      0.0032861154,
      -0.027375093,
      0.013041509,
      -0.021266999,
      -0.025954578,
      -0.018862728,
      0.006894412,
      -0.006627926,
      -0.014952276,
      -0.025897138,
      0.009588186,
      -0.0037944687,
      0.007882797,
      -0.025303239,
      -0.005778412,
      0.010285974,
      -0.038077544,
      0.0056006494,
      -0.028590977,
      -0.029889142,
      -0.016929142,
      -0.016880812,
      0.015768351,
      -0.021170279,
      0.0061419783,
      0.011455303,
      -0.025695635,
      0.00068355404,
      0.0014894088,
      -0.014272247,
      -0.0012701489,
      -0.004437896,
      0.009792,
      0.0025728424,
      0.02462418,
      -0.020373078,
      -0.027493915,
      -0.021454789,
      0.034148313,
      -0.037009757,
      -0.01719685,
      -0.0075241146,
      -0.016196026,
      0.022507299,
      0.022410095,
      0.002205926,
      -0.0200031,
      -0.0065918793,
      0.0004062395,
      0.026203195,
      -0.0024903805,
      -0.0020350672,
      0.019858057,
      -0.008416308,
      -0.01594308,
      -0.007400158,
      -0.029824167,
      -0.025369262,
      0.005987473,
      -0.014697646,
      0.0040951013,
      -0.012902863,
      0.0072035724,
      -0.010046688,
      -0.007324395,
      -0.005941427,
      -0.027078781,
      0.011120872,
      0.012007927,
      -0.027127545,
      -0.0064657894,
      0.015787365,
      0.008747117,
      -0.014956477,
      -0.013588976,
      0.005837784,
      0.015678536,
      -0.0019070836,
      -0.014034018,
      -0.050915595,
      -0.014255276,
      0.029240089,
      -0.004318445,
      0.020406678,
      -0.008746023,
      0.037460532,
      0.01381599,
      0.013816761,
      0.013026259,
      -0.011298625,
      0.0029526912,
      -0.008145653,
      -0.0019929819,
      0.0059160795,
      -0.0077517647,
      -0.03795768,
      -0.012296069,
      0.012362984,
      -0.0233272,
      -0.007875221,
      0.020684855,
      0.0058093234,
      0.035781134,
      -0.0075029945,
      0.0055290116,
      -0.014680879,
      0.020039137,
      -0.0066329916,
      -0.014397665,
      -0.009753798,
      -0.00826018,
      0.015760515,
      -0.02741677,
      -0.01158466,
      -0.017797628,
      -0.008032435,
      0.007894454,
      -0.020201044,
      -0.0074759466,
      0.0016476398,
      0.0009852836,
      0.022569668,
      0.027750136,
      -0.008679658,
      0.008513676,
      -0.0340094,
      0.00133141,
      0.015160354,
      -0.0120643135,
      0.0022490013,
      -0.018000476,
      0.008738803,
      -0.017276729,
      0.009197386,
      -0.002169802,
      -0.0057806014,
      0.016420634,
      -0.02345766,
      0.010809414,
      -0.015815979,
      0.0023497194,
      -0.023920849,
      -0.015803955,
      0.01682834,
      0.025986115,
      -0.0056987302,
      0.018078808,
      0.0010742168,
      0.00043241118,
      -0.0076647527,
      0.015260156,
      0.013751608,
      -0.016788661,
      0.020721069,
      -0.0043685953,
      -0.008972533,
      -0.0025965504,
      -0.0072317612,
      0.016564174,
      -0.0010134896,
      0.0021376295,
      -0.027784174,
      0.04761819,
      -0.0111733,
      0.0057131774,
      -0.003736208,
      -0.01624885,
      0.021812042,
      0.031748053,
      0.007028002,
      -0.002657953,
      -0.015833868,
      -0.02625694,
      -0.011297372,
      0.00977103,
      0.009648778,
      -0.11702888,
      -0.011466453,
      -0.011082448,
      -0.0013578626,
      -0.021622067,
      -0.010669369,
      0.014192568,
      -0.017270466,
      0.014060671,
      0.0004978758,
      0.019045107,
      -0.01073863,
      -0.005953554,
      -0.012373928,
      0.0037036892,
      -0.01933712,
      0.016637204,
      0.011324798,
      0.02025311,
      -0.0031351566,
      -0.022112763,
      -0.0072064237,
      0.007153964,
      -0.010569828,
      -0.007846711,
      -0.017023908,
      -0.0019686944,
      0.0034702993,
      -0.0057548564,
      -0.030353062,
      -0.035397176,
      -0.0064406744,
      -0.012517013,
      0.011826013,
      0.005678179,
      -0.006729437,
      -0.011919095,
      -0.00031987202,
      0.0045061326,
      0.0045065125,
      0.003247319,
      -0.0031834191,
      0.019433727,
      0.0018344412,
      -0.0048447074,
      0.038727008,
      0.049126167,
      -0.02064089,
      -0.013629615,
      0.03328524,
      -0.022815883,
      -0.015374982,
      0.0032371036,
      -0.031455632,
      -0.013779307,
      0.0044702436,
      0.023628283,
      -0.013553067,
      -0.0035518163,
      -0.011456093,
      0.0015228962,
      0.0018616499,
      0.009032604,
      0.04512028,
      0.011623106,
      0.0118633695,
      0.03446228,
      0.004220252,
      0.004808743,
      0.0018595284,
      0.0018428247,
      0.015060437,
      -0.007242352,
      0.034144104,
      0.016674163,
      0.0042273924,
      0.0025325406,
      -0.005099391,
      -0.0148984445,
      0.0061281174,
      -0.027760461,
      0.0055031674,
      -0.057495795,
      -0.01874472,
      0.014320785,
      -0.012355545,
      0.013054989,
      0.0029047066,
      -0.01505224,
      -0.0057843598,
      0.0030810316,
      0.010097207,
      -0.021229643,
      -0.015854575,
      -0.0030844063,
      -0.014573496,
      -0.0049611498,
      0.005652976,
      0.011102899,
      -0.010206902,
      -0.027905656,
      0.0065932088,
      -0.01319586,
      0.0006195166,
      -0.016105441,
      -0.022625593,
      0.020268278,
      0.024815697,
      -0.0030824004,
      -0.0029459312,
      -0.010888019,
      -0.00476234,
      0.004950385,
      -0.14461209,
      -0.00484003,
      0.0047727777,
      0.013406664,
      -0.009439716,
      0.00030358587,
      -0.0038554843,
      0.0034254433,
      -0.000022501756,
      -0.011111734,
      0.004122187,
      -0.0049414295,
      -0.01447892,
      -0.008850137,
      0.018177731,
      0.12403542,
      -0.01757954,
      0.011042149,
      -0.013604022,
      0.0039033622,
      -0.015272313,
      -0.01310392,
      -0.022367703,
      0.02199715,
      -0.021510135,
      -0.022330048,
      0.017404977,
      -0.002655852,
      0.003658345,
      0.0039996672,
      -0.010159478,
      -0.012739584,
      0.007152302,
      0.014326573,
      -0.0038507103,
      -0.0052981786,
      0.0042603454,
      0.017185649,
      -0.007853649,
      0.007946917,
      0.019417742,
      0.01304335,
      -0.0018258962,
      -0.011541703,
      0.011777404,
      0.0047536315,
      -0.004572024,
      -0.025097474,
      0.0025442839,
      0.004911507,
      0.00001760287,
      -0.05904805,
      -0.003922112,
      -0.01610583,
      -0.017200813,
      0.026435263,
      0.0014684803,
      0.008735994,
      0.019188384,
      0.01132841,
      -0.021309618,
      -0.020735858,
      0.0007041437,
      -0.0058591687,
      0.0052587013,
      -0.00991282,
      0.028652934,
      0.016882667,
      -0.0052309437,
      0.0015418269,
      -0.003544149,
      0.008134031,
      0.002476835,
      0.0085737575,
      -0.0048347577,
      -0.005990796,
      0.014078059,
      0.018711843,
      0.009329346,
      -0.008102713,
      0.000306304,
      0.0046397853,
      -0.0021677325,
      -0.014171882,
      0.017555937,
      0.010916782,
      0.00049887714,
      0.0044857496,
      -0.018188927,
      -0.011869558,
      0.005023393,
      -0.013494936,
      -0.013955868,
      0.01627362,
      -0.013466789,
      0.003710899,
      0.01351006,
      -0.039718214,
      0.030563248,
      -0.017790234,
      -0.0047788946,
      0.0058466205,
      -0.014303087,
      -0.019682854,
      0.015147305,
      0.0062321573,
      0.0033677178,
      0.02623213,
      -0.0065709804,
      -0.009782156
    ]
  },
  {
    "id": "genai_cohort_python_07_Lambdas__pure_vs_impure_functions_vtt",
    "content": "All right, I hope the videos are 2 packing up you with a lot 3 of knowledge and that's 4 why you probably would consider 5 to rate us as well. 6 Hopefully you have done that. 7 Anyways, let's go ahead and now 8 talk about types of function. 9 This is really an interesting topic. 10 So as we see that the functions 11 are really the core of building 12 large scale projects in the Python, 13 but there are actually variety 14 of types of function. 15 Now again, this is not really 16 specific that there is actually 17 a type, but people love to have 18 a differentiation between them. 19 For example, we have pure 20 VS impure function. 21 I'll show you what they are. 22 We also have another types as well. 23 I'll just go ahead 24 and add this one here. 25 Some things are known as 26 recursive functions. 27 Yes, there's actually a name for it, 28 recursive function functions. 29 Some functions don't even 30 have names as well. 31 Yeah, how does that work if 32 function doesn't have a name? 33 Yes, there is a way of how 34 to deal with them as well. 35 So these are known as anonymous 36 function, but in the world 37 of Python they are famously known as 38 lambdas, lambdas or also known as 39 anonymous function Anonymous. 40 Hope I wrote that Correct, 41 Anonymous functions. 42 But again whatever you call 43 them, they are just functions 44 and they are just type of it. 45 Don't worry too much about that. 46 So let's go ahead and talk 47 about them that how the function 48 can actually behave. 49 First of all, let's start 50 with the basic one which is 51 pure VS impure function. 52 What they are, let's go ahead 53 and close this, we'll have 54 another one, we're not 55 running out of the files. 56 So this one is types of function, 57 types of functions py. 58 All right, first of all 59 let's talk about the pure 60 functions in pure function. 61 So let's just say you define 62 that this is pure chai. 63 Hope you'll remember that always. 64 We simply go ahead and say cups and 65 we simply I'll just close my AI 66 editor, it's bothering and I go 67 ahead and simply say I want to 68 return whatever the cups value 69 pass me up, I go ahead and 70 multiply it by 10. 71 All right. 72 This is known as pure function. 73 It doesn't alter any 74 ingredient globally. 75 The moment you touch anything 76 globally for example, it 77 doesn't need to be at the very top 78 of the file as well. 79 Globally can be any variable which 80 is available in the global scope. 81 So I go ahead and say totalchai, 82 and you can see if the total chai 83 value is, let's just say zero. 84 Our top function still doesn't change 85 or any way manipulate this one. 86 But if I go ahead and say, impure 87 chai, hope this will help you 88 to remember this always. 89 This one also asks for the cup, 90 but apart from the cups, this one 91 somehow manipulates this one. 92 I hope the knowledge is still 93 with you that we can actually 94 use global as a variable. 95 And then I can go ahead and say I 96 have the access now, I want to 97 access the total chai and 98 whatever the total chai that we 99 have is, simply go ahead and 100 plus equals cups or somehow 101 manipulate that. 102 This is known as impure function. 103 And what's the most important 104 part about this is 105 that this is not recommended. 106 Yeah, I have discussed the reason 107 in the past as well. 108 Recommended. 109 All right, so this is 110 not a recommended way. 111 Again, make sure you always 112 remember you never want 113 to touch these things. 114 This can actually eventually lead 115 to some of these implications 116 which we don't see right now. 117 So remember, pure functions just 118 work with their in itself. 119 Impure functions are 120 usually not recommended. 121 They are supposed to be avoided. 122 But if you're writing them, you 123 know that this is not recommended 124 and this is an impure function. 125 The next one that we have, we have 126 talked about this pure and impure. 127 Next one we talk about, want to talk 128 about is recursive function. 129 You might have seen this topic 130 quite often in your data 131 structures and algorithm class. 132 This means the function 133 is going to call itself. 134 Yeah, but it's not going 135 to call like endlessly. 136 There's always a trip, 137 condition which ends it. 138 For example, if I go ahead 139 and say I have a poor chai, 140 I'm pouring the chai and I'll just 141 pass on a variable n here. 142 And we simply go ahead and say if n 143 is equals to zero, 144 then we go ahead and say return. 145 This means we just end the function. 146 We simply go ahead and say, all 147 right, cups poured, 148 something like that. 149 And in all the other cases 150 we simply go ahead and return, 151 the same calling of the function 152 poorchai, but we this time 153 call it with n minus 1. 154 So this is a little tricky. 155 But I'll show you by taking you 156 on the board itself that what does 157 this function actually does. 158 So you're going to notice that 159 if we have this function, 160 this is a very interesting case 161 study of a function itself. 162 If you have this function, let's 163 just say the first value we go 164 ahead and say this value is, oops. 165 The value that we 166 are giving is three. 167 All right? 168 So the value three goes 169 inside this function up here 170 and especially up here. 171 Come on There we go. 172 It goes up here. 173 The value is not zero. 174 So it's going to go ahead 175 and call the function again 176 with the value of n minus 1. 177 So 3 automatically becomes 2. 178 It again goes ahead and call this. 179 But this function will be 180 called with the value 2. 181 Again, it is not 0. 182 So then it again calls the function 183 with the value of one. 184 You guessed it right. 185 So we get the value of one. 186 Now again the function 187 goes inside this one. 188 It goes up here again. 189 Since it's not zero, it will 190 be called one more time. 191 And finally, when the value actually 192 becomes 0, then this 0 will go 193 up here and this will say, okay, 194 this time the n is equals to zero. 195 So it will simply say 196 return all cubs board. 197 So notice here how many 198 times actually we are calling 199 the function itself. 200 And believe it or not, 201 this is actually a technique 202 used quite a lot. 203 So I'll just go ahead and print 204 this one here and I will say 205 go ahead and pour the chai. 206 Let's use the same example. 207 But three. 208 Three is good enough. 209 I'll just go ahead and run this. 210 And notice here, we are 211 just returning it. 212 Notice here remaining is 20. 213 Again, we should be 214 pouring the chai printing. 215 We're just returning the things 216 we are not printing. 217 So all cups are poured. 218 Why we don't get it? 219 Let's run this one more time. 220 Why we are not getting this value? 221 My bad. 222 I'm running the wrong file. 223 That's the reason. 224 Silly me. 225 11 run this. 226 And there we go. 227 It says all cups poured. 228 So although we get the result. 229 But if we go ahead and print 230 the value of N just before 231 checking off anything, I 232 think that would be useful. 233 So let's just say we print just the N 234 and let's just run this. 235 And there we go. 236 We get this three, 237 then two, then one, then finally 238 one, then finally zero. 239 And then finally it 240 says all cap board. 241 This, recursion is a very, 242 very classic technique of doing 243 a lot of complex tasks. 244 But yeah, it works. 245 Now, last but not 246 the least is the lambdas. 247 They are very fun. 248 Little bit tricky for a lot 249 of people to go through with 250 it, but hey, this is okay. 251 You'll be there. 252 For example, let's go up here. 253 And there we go. 254 Let's say we have, chai types. 255 We have a lot of types of chai. 256 Let's just say the first one being, 257 we have a list of them. 258 The first one being a light chai. 259 Then we have a, karak chai. 260 That means a very strong One. 261 Then we have a famous ginger T. 262 Then we go have and probably have 263 again reputation. 264 Oh goodness. 265 We have seen reputation. 266 So notice here, this is one here, 267 this is one here, this is one here. 268 But this is exactly same. 269 So maybe you want to filter out all 270 the cups that are not Kadak chai. 271 Or you can use any other 272 variable if this is too 273 difficult for you to say. 274 So I can just go ahead 275 and say I will have a variable 276 known as strong, chai. 277 All right, so in this I want 278 to filter out this thing. 279 So here's the interesting part. 280 How can I do this? 281 I can go ahead and call 282 this one as a list. 283 I'll prepare a fresh list again 284 and as soon as I go ahead 285 and use this list, this is a built 286 in immutable sequence. 287 I, I can use a filter here. 288 Notice here it's a filter. 289 It returns an iterator. 290 That means, yeah, it's going 291 to return you again, a list. 292 And the way how you use it is 293 you pass on a function to it. 294 And most of the time you 295 are not going to see people 296 passing you functions. 297 They actually usually pass 298 on a lambda here. 299 And again notice here there's no 300 argument that hey, can I 301 always just only pass lambdas? 302 No, you can pass on functions 303 as well, no problem there. 304 But if I go ahead and use 305 filter, this is the syntax, 306 I go ahead and provide 307 the filter just like this. 308 The first argument is your lambda. 309 And the second argument that you have 310 to provide is where should iterate. 311 So you should iterate 312 over chai types. 313 All right, this is all good. 314 Hopefully that is this 315 is second argument. 316 The first argument is 317 the function name. 318 So the function name 319 could be anything. 320 So for example, if we 321 have function name. 322 Yeah, we have poorchai. 323 You can go ahead 324 and literally say poor chai. 325 This will be all happy. 326 But this is not what most people do. 327 Most people try to write this 328 function just for once because 329 they don't want to use it again. 330 It's a very simple one. 331 For example, I can just use 332 a lambda instead of the def. 333 We use lambda because these 334 functions don't have a name. 335 Now what happens in this one 336 is I go ahead and say chai. 337 And the reason I'm calling this 338 Chai because this is my 339 iteratable and I have to name each 340 of this variable something. 341 It could be chai, it 342 could be anything else. 343 Then you go ahead and put up a colon. 344 That means I want 345 to do something now. 346 And I will say chai 347 is equals, equals. 348 I'll just look for kadak 349 and you can look for anything else. 350 I'll just make this all in one line. 351 It's easier to see this way. 352 This is a little bit 353 of a syntax involved. 354 Syntax. 355 Now what you're going to see 356 what's the expected result. 357 Now the result simply says I want to 358 filter out and only the value gets 359 out of this filter which are true. 360 So first we simply say I want 361 to go through this loop. 362 All right, you go through 363 this entire loop. 364 I am saying that each of 365 the variable, whatever these values 366 are, I'm going to call them as chai. 367 You can call them Superman. 368 Nobody is bothering on that part. 369 But only return me the result 370 when this condition is met. 371 So when the chai name is equals 372 to Kadak, only return me 373 that and store that as a list. 374 So what's going to be 375 in the strong chai? 376 Two times this one because 377 this matches up two times. 378 So that is the result we have got. 379 I'll show you one more 380 interesting result as well 381 which is commonly used. 382 So if I go ahead and print out 383 the strong chai, this is 384 something that I should know what 385 I will get as a result. 386 Value. 387 Notice here we get two 388 times of the Karak chi. 389 Hope that's clear. 390 Now what you're also going to notice 391 sometimes people say I want a result 392 which is not equals to Karakchai. 393 So what do you think what is going 394 to happen when I just say this? 395 That means hey, this is not Karakcha. 396 I will return that this is true. 397 Is this Karakchai? 398 Oh, this is not equals to. 399 So only true part will get that. 400 Is it not Kadak? 401 No, it is Karak. 402 It is true. 403 So I hope you get that we 404 have reversed the logic. 405 If I'll explain it more I'll 406 probably confuse you more. 407 So notice here we get 408 something like this. 409 So whenever we want to make a fresh 410 list where I want to delete some 411 objects or something, whatever the 412 ID you have passed me on in a todo, 413 I usually use this logic that hey, 414 just make a fresh list and which 415 don't use the ID which user has 416 given me. 417 So we just avoid the ones which we 418 match exactly and we get the idea. 419 So this is really really fun that 420 we have and that we can do again. 421 Try to practice this. 422 This is a very new syntax. 423 Because this function doesn't have 424 a name, it's just use and throw. 425 We use it once and then 426 we just forget about it. 427 Little bit of a new syntax. 428 But try it one more 429 time, get some examples. 430 Try to practice it a little 431 bit and you will get it. 432 So this is all about your Lambdas, 433 also known as Anonymous function. 434 Pretty fun, isn't it? 435 Let's catch up in the next video. 436 And don't forget to rate.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "07 Lambdas, pure vs impure functions.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/07 Lambdas, pure vs impure functions.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.014487983,
      0.004291266,
      0.02552724,
      -0.053030416,
      -0.015532314,
      -0.015211351,
      0.01598781,
      0.031553358,
      0.004520896,
      0.013368486,
      0.012997877,
      0.009038222,
      0.009552282,
      0.034022816,
      0.113752626,
      0.0065260762,
      -0.016354445,
      -0.01131314,
      0.011950533,
      -0.026676662,
      0.0019900177,
      -0.015652617,
      -0.010233129,
      -0.014732693,
      -0.0021148112,
      0.0028294448,
      0.013195798,
      0.0051190755,
      0.036074806,
      -0.0042258506,
      -0.034020405,
      0.0020378272,
      0.01290415,
      0.023722082,
      0.013469209,
      0.02877331,
      0.0019407744,
      -0.004648122,
      -0.0019416421,
      0.024888102,
      -0.022062032,
      -0.0069638956,
      -0.006634959,
      -0.01160828,
      -0.0015920122,
      -0.036153134,
      0.0003110656,
      -0.020871932,
      -0.0084791025,
      0.020319471,
      0.0034286745,
      -0.016179254,
      -0.015465343,
      -0.18561004,
      -0.0017176322,
      0.018768195,
      -0.009959074,
      0.015357534,
      0.010782851,
      0.0054863594,
      -0.030564774,
      0.0138062835,
      -0.034281503,
      0.013329139,
      0.006926097,
      -0.01382421,
      0.018312652,
      0.0023368178,
      -0.0006591407,
      -0.019971741,
      0.020522097,
      0.015063662,
      -0.0154447695,
      -0.013837492,
      -0.025308011,
      -0.015577142,
      -0.001307039,
      -0.01591096,
      0.010396331,
      0.01507947,
      0.0039708624,
      -0.015814401,
      -0.008681519,
      -0.0024141232,
      0.022949558,
      0.016567538,
      -0.019042036,
      -0.012963742,
      0.009973233,
      -0.015876418,
      -0.008649174,
      0.0057845083,
      -0.0006016275,
      0.013255815,
      -0.026830927,
      0.018605934,
      -0.0026394017,
      0.0000087486815,
      -0.0313489,
      -0.0017356935,
      0.012267683,
      -0.017690236,
      -0.0041085957,
      -0.0011199344,
      -0.0018105996,
      0.010390118,
      -0.0050803004,
      -0.0069325413,
      -0.025434818,
      -0.022889921,
      -0.01888975,
      -0.005306117,
      0.009777673,
      0.02251659,
      0.014492887,
      -0.18199426,
      0.014138175,
      -0.01272323,
      -0.016382419,
      -0.00090054487,
      0.004748113,
      0.018432181,
      0.014035911,
      -0.0071236845,
      -0.0076746535,
      0.020177806,
      -0.0071657696,
      0.04650726,
      0.009655624,
      0.0027136449,
      -0.013233103,
      -0.021735366,
      0.007565594,
      0.0063929567,
      0.002234948,
      0.017893488,
      -0.03820882,
      -0.010660207,
      -0.018232575,
      -0.004603897,
      -0.012479157,
      0.029949987,
      -0.000750599,
      0.014373751,
      0.009936318,
      -0.004880498,
      -0.009713536,
      0.011122478,
      -0.033251148,
      -0.03304829,
      0.027291318,
      -0.018064544,
      -0.003902209,
      -0.005008222,
      0.021486595,
      -0.019591564,
      -0.007662949,
      -0.0072343447,
      0.008435668,
      0.011276882,
      -0.020442933,
      0.010055406,
      0.01486918,
      -0.00036558314,
      0.006755804,
      0.012088429,
      -0.027517889,
      0.012804484,
      0.014519278,
      0.023951363,
      -0.009221746,
      -0.011217336,
      0.0037318298,
      -0.010396945,
      -0.012907836,
      -0.00092367956,
      0.006586791,
      0.0009572995,
      0.023344405,
      -0.017092898,
      0.012261233,
      -0.002500031,
      0.011960378,
      0.014656583,
      0.008283366,
      -0.0057967706,
      -0.013646354,
      0.017944187,
      -0.00056033896,
      -0.01874501,
      -0.0004325619,
      0.0022553662,
      0.005906573,
      0.0137705635,
      0.022657704,
      -0.035283435,
      -0.009213623,
      -0.014992696,
      -0.008390604,
      0.018547881,
      0.021900188,
      -0.0232574,
      0.020978954,
      -0.035385314,
      0.014060824,
      0.006436263,
      0.003755249,
      0.0007815693,
      0.0339743,
      0.00025258167,
      -0.03168712,
      0.005706233,
      0.0016972099,
      -0.0056483215,
      0.01355635,
      0.012903689,
      0.01204286,
      0.004017967,
      -0.0055428585,
      -0.00031219385,
      -0.0016612224,
      0.021768412,
      0.008425704,
      0.027937975,
      0.0032976344,
      -0.013346539,
      0.018424764,
      -0.003877389,
      -0.012179182,
      0.009696637,
      0.032782156,
      0.019532276,
      -0.025437314,
      -0.029508559,
      0.012476876,
      -0.014251715,
      -0.00915231,
      0.023579169,
      0.016923811,
      -0.0037328687,
      -0.014314563,
      -0.015573667,
      -0.0127140805,
      0.007600622,
      0.0135846855,
      0.013258141,
      0.013268769,
      -0.0055597266,
      0.0054297512,
      -0.025259912,
      -0.034619477,
      -0.011066221,
      0.015419561,
      0.0046947724,
      -0.009077339,
      -0.032286443,
      -0.011344693,
      0.0048325527,
      0.015767397,
      -0.011292061,
      0.003969604,
      0.012799774,
      -0.009969255,
      -0.00031367826,
      0.010486533,
      0.018074885,
      0.004384,
      0.038954634,
      -0.022217048,
      0.008164554,
      0.009947476,
      -0.00048563795,
      0.00093373685,
      -0.018452395,
      -0.006439743,
      0.0059269536,
      -0.09615366,
      0.03506559,
      0.008762829,
      0.001968157,
      0.0059684166,
      0.015099093,
      -0.012982875,
      0.02901353,
      0.017760351,
      0.017844656,
      0.00658526,
      -0.006128304,
      0.004788787,
      -0.01019024,
      -0.005448604,
      -0.01837461,
      -0.0016823225,
      -0.018148338,
      0.014327711,
      -0.014142646,
      0.0051965574,
      0.004059541,
      -0.0068379813,
      -0.0042469115,
      -0.00016187155,
      -0.00025946894,
      -0.018715635,
      0.017009774,
      0.010561698,
      -0.0014131328,
      -0.007846935,
      0.023687705,
      -0.016309235,
      -0.004333246,
      0.01584206,
      0.0018287814,
      0.017237466,
      0.0077980887,
      -0.014044267,
      -0.021510188,
      -0.01233023,
      -0.01706067,
      0.024123115,
      0.024221603,
      -0.010956511,
      0.0065071955,
      0.00019562588,
      0.01323708,
      -0.0053699906,
      -0.006308111,
      -0.01601728,
      -0.009873398,
      0.011587628,
      0.0016045556,
      0.017360419,
      0.014121227,
      0.0040373458,
      -0.008716796,
      0.012634991,
      -0.001216583,
      -0.0035353915,
      0.003788396,
      0.005521546,
      -0.02101689,
      0.02073468,
      0.0027259316,
      0.01397783,
      0.006274351,
      -0.009322012,
      0.00093190727,
      0.014916793,
      -0.010789126,
      -0.013726333,
      -0.030397234,
      0.015778976,
      -0.0055001215,
      0.00432912,
      -0.008004192,
      -0.027126173,
      0.02865831,
      0.014244681,
      -0.010784558,
      -0.010012539,
      0.022752786,
      -0.01696821,
      0.0029941166,
      -0.015021996,
      -0.0073647927,
      -0.0057983724,
      -0.017161062,
      0.00521426,
      0.00915894,
      -0.02689238,
      0.011734563,
      -0.034531865,
      0.005160267,
      -0.021498414,
      -0.02261624,
      -0.018131979,
      0.00196895,
      -0.036038097,
      -0.018281963,
      -0.025886828,
      0.0034328557,
      -0.0114675965,
      0.016253628,
      -0.023297489,
      -0.01659422,
      -0.0046755313,
      -0.031145144,
      0.012650494,
      -0.0020911929,
      -0.005610978,
      -0.01598269,
      -0.00018187126,
      0.021145394,
      -0.008531352,
      0.023231177,
      0.018384103,
      -0.029835498,
      -0.0001554953,
      -0.0029954757,
      -0.016547209,
      0.010928195,
      -0.0026763896,
      0.015481802,
      0.0057267244,
      -0.0022939125,
      -0.015670955,
      -0.016090734,
      -0.014327198,
      0.022572115,
      -0.016746843,
      -0.022088414,
      -0.004633639,
      -0.023593122,
      0.022906585,
      0.03315396,
      -0.0018379965,
      0.0014668574,
      0.000089221474,
      0.010578233,
      0.013306513,
      -0.002661194,
      0.0102360705,
      0.043130815,
      -0.02101799,
      -0.015679134,
      0.014295084,
      -0.03396328,
      -0.024507841,
      -0.0054146065,
      -0.00937685,
      0.0031493516,
      -0.0031650772,
      -0.002998095,
      0.02131215,
      0.010248929,
      -0.004283436,
      -0.017645318,
      0.020470357,
      -0.0022850959,
      -0.026753148,
      0.003473776,
      0.016870124,
      0.002711973,
      0.02198482,
      0.0036246153,
      0.0009559644,
      -0.010561123,
      0.0022950578,
      -0.013401405,
      -0.03395186,
      -0.015801117,
      0.025327785,
      -0.010391935,
      0.011571224,
      -0.0013079363,
      0.019179165,
      0.0045951325,
      0.010662835,
      -0.0048581483,
      -0.0012888054,
      0.016229264,
      -0.011651678,
      0.0024848594,
      0.01355371,
      -0.0017675955,
      -0.040979177,
      -0.0037267588,
      -0.0012369158,
      -0.017153911,
      -0.0006815135,
      0.003494538,
      -0.00019509892,
      0.01838738,
      -0.0023677144,
      0.010880116,
      0.003599008,
      0.016286802,
      -0.01224078,
      -0.02089883,
      -0.0058423793,
      0.011985194,
      0.0015267954,
      -0.0045589586,
      -0.016942652,
      -0.0041984334,
      0.014224826,
      0.023264633,
      0.006235332,
      -0.0025410885,
      -0.00030523713,
      0.0072273687,
      0.0072093564,
      0.014033779,
      0.003199304,
      -0.014379888,
      -0.008548446,
      -0.005106426,
      0.025390225,
      -0.04924681,
      -0.011841946,
      -0.027184624,
      0.02003262,
      -0.03185714,
      -0.009030375,
      0.006987063,
      0.015031268,
      -0.0064783846,
      -0.01393252,
      0.009458755,
      -0.012544863,
      0.009618509,
      -0.017597277,
      -0.0075147054,
      0.016306926,
      0.025683466,
      -0.006867003,
      0.0047790753,
      0.0040025935,
      -0.021588506,
      -0.013174229,
      0.0074831294,
      -0.00059533323,
      -0.0026354925,
      0.02978078,
      0.01849435,
      0.001343739,
      -0.010738021,
      -0.010037079,
      0.011525033,
      -0.0015073366,
      -0.005685977,
      -0.018681688,
      0.040279254,
      -0.010429778,
      -0.009061576,
      0.0020443378,
      -0.012798341,
      0.020798396,
      0.017354382,
      0.003331719,
      -0.00052784965,
      -0.017474212,
      -0.018880712,
      0.004210508,
      -0.00483977,
      0.012284337,
      -0.115424514,
      -0.0113098575,
      -0.020129854,
      0.000344725,
      -0.0016595979,
      0.009270695,
      -0.0028535216,
      -0.014788809,
      0.0024882893,
      0.003995594,
      0.032715313,
      0.008193274,
      -0.00026261652,
      -0.00008377512,
      0.011850807,
      -0.023103748,
      0.00056587684,
      -0.0018937476,
      0.02991077,
      -0.012794725,
      -0.0046079773,
      0.0038946588,
      -0.0014020861,
      -0.0023703307,
      -0.037242487,
      -0.011402516,
      0.0248487,
      -0.0065647704,
      -0.021335784,
      -0.016669743,
      -0.013633805,
      -0.0059773815,
      -0.0063503617,
      0.02156767,
      -0.004018221,
      -0.004734477,
      -0.0015698303,
      0.014963767,
      0.0064731464,
      0.012478742,
      0.0037176078,
      -0.0054570893,
      0.01915828,
      0.022347026,
      -0.00030702606,
      0.00049933576,
      0.03573371,
      -0.0055708494,
      -0.007037161,
      0.047450956,
      -0.042655602,
      -0.013291128,
      0.0033515801,
      -0.038153276,
      -0.013602602,
      -0.01192639,
      0.019514767,
      -0.0069722864,
      -0.034592543,
      -0.022797605,
      0.0041402555,
      0.0065697255,
      0.007186258,
      0.004493131,
      -0.008611847,
      0.00015835973,
      0.015638772,
      0.031803295,
      -0.000093634175,
      -0.010328974,
      -0.004701856,
      0.01490405,
      0.023907447,
      0.028528312,
      0.024355473,
      -0.018720435,
      0.0040857377,
      0.0131046865,
      -0.029534409,
      0.005112798,
      -0.03493234,
      -0.0013117017,
      -0.064371414,
      -0.02613316,
      0.021620559,
      -0.013199818,
      0.003575663,
      -0.008208971,
      -0.0022290845,
      0.011156642,
      0.0062985765,
      -0.00014736693,
      -0.02937601,
      -0.008298417,
      0.007254433,
      -0.0020186063,
      -0.012667121,
      0.0018336395,
      -0.009454655,
      -0.0073652165,
      -0.029199146,
      0.0007365993,
      0.0049820216,
      0.0075430484,
      -0.0053189644,
      -0.017141735,
      0.013637312,
      0.01148941,
      -0.011909353,
      0.0064692143,
      -0.014529587,
      -0.0010557979,
      -0.0099358745,
      -0.14249784,
      -0.010306235,
      0.015856644,
      0.008884864,
      0.0030640806,
      0.009243262,
      -0.012174336,
      -0.015395665,
      -0.0053425347,
      0.010168433,
      -0.0076093776,
      -0.02148384,
      -0.014797856,
      -0.005150175,
      0.024980353,
      0.13016035,
      -0.004738857,
      0.0058161635,
      -0.0069034607,
      -0.0027639915,
      -0.010946855,
      -0.026793508,
      -0.00407009,
      0.0015966109,
      0.0019281703,
      -0.033122387,
      0.0062965886,
      0.009656222,
      0.009364582,
      -0.017673897,
      -0.01612858,
      -0.01329051,
      0.0026374094,
      0.0087762615,
      0.015445902,
      0.00048778305,
      0.0025444033,
      0.005737433,
      0.005574078,
      0.011887555,
      0.023991724,
      -0.0015456955,
      -0.0026480318,
      0.0058978293,
      0.008545911,
      -0.011280219,
      -0.010547315,
      -0.009135769,
      0.00078309944,
      0.016705774,
      -0.0053075706,
      -0.052657224,
      0.007143436,
      -0.0072637275,
      -0.007372957,
      0.00907549,
      -0.015324829,
      0.002337966,
      0.012349981,
      0.0030486593,
      -0.008652736,
      -0.012828532,
      0.010701446,
      -0.0038440172,
      -0.007942508,
      -0.017775064,
      0.033918653,
      0.027020808,
      0.010610675,
      -0.008502107,
      0.011736327,
      0.012201672,
      0.005818385,
      -0.006310113,
      -0.0007897632,
      -0.01301602,
      0.0052402792,
      0.023429384,
      0.0027465827,
      -0.018339105,
      -0.00848234,
      0.0110026905,
      0.0033242928,
      -0.011156376,
      0.022135228,
      0.009431651,
      -0.0060879337,
      0.014158708,
      -0.011892867,
      0.0071025854,
      -0.0026997894,
      0.006689265,
      0.0047378414,
      0.0116488375,
      0.008062301,
      -0.0002592002,
      0.023080003,
      -0.04144159,
      0.036756128,
      -0.009594154,
      0.003610815,
      0.007663467,
      -0.01970017,
      -0.03008779,
      0.011447675,
      -0.0025963066,
      -0.0050027403,
      0.020314516,
      0.0014720527,
      -0.001623423
    ]
  },
  {
    "id": "genai_cohort_python_08_Documenting_your_functions_and_built_ins_vtt",
    "content": "In this huge world of Python 2 we have so many things to cover, 3 but we have covered 4 quite a lot about the Python. 5 Now I want to introduce you 6 something which is built in. 7 We don't have to write 8 anything for this. 9 This actually kind 10 of exists in Python. 11 We don't pay huge attention to this, 12 but we should be paying to this one. 13 So let me take you on the screen 14 and directly walk you through 15 that, what I'm talking about. 16 So this is a direct documentation 17 page that says built in functions. 18 So Python has so many things 19 which we can use directly. 20 The Python interpret has a number 21 of functions and built 22 in types that are always available. 23 They are listed here 24 in alphabetical order. 25 Not only that, some 26 of the functions which you define 27 also comes up with the by default 28 some of the tricks and tips. 29 So I'll show you what 30 actually it means. 31 So we'll just talk about 32 the built ins in Python. 33 So I'll just write this here. 34 Hopefully I'm here. 35 Yep, we are actually 36 on the right track. 37 So let's go ahead and talk about 38 built ins in Python and I 39 think it would be rather accurate 40 to call it as built in. 41 Just like that. 42 Yeah, this is actually fun. 43 So every single function which 44 you go ahead and define. 45 So let's just say we have a simple 46 function name and we 47 go ahead and design it like this 48 and simply say pass. 49 So this is the bare minimum 50 function we are defining. 51 Let's actually go ahead and write 52 the code along with this. 53 Actually that will 54 make much more sense. 55 And I'll close this one 56 and create a new function. 57 This time we are on 12, 58 so 12 underscore. 59 Let's call this one as built in py 60 so let's just say we define a built 61 in or a very basic function. 62 The first step is let's just 63 say we have a chai flavor. 64 Hope I wrote that correct. 65 And this time we are simply 66 saying that the flavor that we 67 have is going to be masala. 68 So we'll put provide a default 69 parameter to this one. 70 By default I mean you can provide 71 the value that will overwrite it, 72 but if you don't provide any, this 73 will be the default value for it. 74 And end of the day I go 75 ahead and simply say whatever 76 the flavor you tell me, 77 I'll just return it back. 78 This is a basic one, but actually 79 you can do something interesting. 80 The very first line in your function 81 definition can be triple quotes. 82 Yeah notice here, triple quotes. 83 This is also a thing in which we are 84 going to use it a lot in which you 85 can add enters and line breaks. 86 And you can define it 87 however you like. 88 This one what it does it return 89 the flavor of Chai. 90 That's all it does. 91 Now this small string, 92 just by adding it. 93 Now you can utilize so many internal 94 things in the Python itself. 95 For example, if I just go 96 ahead and print this chai flavor, 97 I can actually use a dot 98 just on the function name. 99 And you can see so many things, 100 annotations built in, class 101 closure, so many of them. 102 Of course we cannot go with all 103 of them, but there is a small name 104 for this known as dunder. 105 Very, very funny 106 name to go with that. 107 At least I find it funny. 108 The whole point of this dunder 109 is you have one underscore, then 110 you have another underscore. 111 And then the things like 112 for example, we have doc as one 113 of the dunder, then we have also 114 underscore, underscore. 115 So instead of calling it as doc, 116 we just call it as dunderdoc. 117 Yeah, so two underscores are called 118 as dunder, but we don't call it 119 as like underscore, Dunder, dog, 120 Dunder, we just call it once. 121 Yeah, very weird. 122 So one of them is actually 123 this doc, what it does. 124 I'll show you that in a second. 125 But also there is another 126 dunder that you can use. 127 So there is underscore, 128 underscore name for it. 129 Let me show you what 130 each of them does. 131 It's very super easy actually. 132 Python 3 and please run the 12 file. 133 And there we go. 134 The first, when you say doc, 135 this is a doc string, documentation 136 function string or 137 function documentation string or 138 short is better doc string. 139 So this is a doc string 140 which actually prints. 141 So whatever you write it 142 here, it will get printed. 143 What if I go ahead 144 and declare a variable? 145 For example, chai is, ginger, 146 ginger, Something like this. 147 Will it work after this? 148 Here's the interesting part. 149 Now notice here it says none. 150 So it needs to be the very first 151 line and whatever you want 152 to do, you can do after that. 153 Feel free to do it. 154 It needs to be the very 155 first line and then only 156 and only then it works. 157 All right. 158 And then the name of the function, 159 notice here it says chai flavor. 160 So whatever the function you 161 are actually running, you 162 can just provide its name. 163 Why would I do that? 164 I already know the name of it. 165 Yes, you do. 166 But sometimes when you are 167 debugging the application, it's 168 not easy to find that what actually 169 is causing the trouble. 170 Now, not only that, we have actually 171 more inbuilt function. 172 For example, there is one help 173 which is always there and you 174 can pass on anything to it. 175 For example, I don't know 176 what the len does so I just want 177 to know more about it. 178 I can just go ahead and pass 179 on this and any function in between. 180 Notice here it gives you a whole lot 181 of documentation and all that. 182 It's not easy to read it here 183 because it's actually vim based. 184 I don't expect you to work on that. 185 Just press the Q in case you have 186 accidentally opened this up. 187 The better way to learn and study 188 about all of these method is 189 actually this documentation. 190 So built in function just 191 search for that version. 192 Doesn't really matter. 193 They are very standard 194 in every single version. 195 And notice so many of them. 196 There's absolute, there's 197 all and nobody knows 198 what all of them does. 199 We actually find them out 200 as we need some of them. 201 For example filter. 202 Yes, we have seen one of them. 203 Format frozen set, min max Next. 204 Some of them we definitely 205 encounter day to day life. 206 Some of them we never 207 encounter and some of them 208 we don't want to use. 209 Remember we used the zip? 210 Yep, that's exactly. 211 That's where this is coming up from. 212 We have tuple type. 213 Remember we use type once. 214 Yeah, I hope you do. 215 So this is the basics 216 of how it can be done. 217 Now make sure a couple of things 218 you need to take care of it. 219 The first one is it's always a good 220 idea that if you're writing 221 too big of a function on everything, 222 just write the documentation 223 of function right up here. 224 It's actually super easy to be done. 225 It's a good practice as well. 226 So again there's nothing too 227 much but try to give it yourself 228 a couple of more minutes if 229 you're writing production ready app 230 that actually does this. 231 I'll show you a sample example 232 of how it actually looks just 233 to make sure that you get an idea. 234 I'll be little bit exaggerating it 235 but we'll get the point of it. 236 Let's just say I go ahead and create 237 a method which says generate bill 238 which takes chai if nobody gives 239 me I'll take zero as a default. 240 Also snack which is samosa 241 which will also be zero. 242 There we go. 243 Now I take my time 244 by triple quotes to actually write 245 the documentation and you don't have 246 to write it all one line. 247 Once you start with this then I 248 can go ahead and go all freehand. 249 So what it does, it actually 250 goes ahead and calculate the total 251 bill for chai and samosa. 252 And then I can use and say like this, 253 what are the param? 254 This is just for me. 255 Pram chai. 256 And that is number of chai cups. 257 And for example, that 258 would be 10 rupees each. 259 These are just for me. 260 And I can go ahead and say I have 261 another param which is samosa. 262 Samosa and which goes like 263 number of samosa. 264 And that can be 15 rupees each. 265 Again, you don't have to use 266 this format, but it's good. 267 And I also go ahead and calculate 268 what it returns so that anybody who 269 is using it gets to know what 270 the function is expected to return. 271 I just go ahead and return total 272 amount and thank you message. 273 So this gives an idea 274 what this function is. 275 I know you'll not be writing for 276 each one of them, but some 277 companies actually will force you 278 to write all of this because hey, 279 lots of people are going to be 280 using your method. 281 So we'll just go ahead and say 282 we calculate a total like 283 this, which is chai, 284 which gets multiplied by 10. 285 So you get to know that why it 286 is getting multiplied by 10. 287 And we also have samosa 288 which gets multiplied by 15. 289 You get the point. 290 We'll have the consistency. 291 And then we simply go ahead and say 292 we return a, total as well as 293 we return a thank you message. 294 So thank you for visiting 295 chaicode.com, which 296 is my website name. 297 So there we go. 298 Now somebody says returns it 299 returns a total amount as 300 well as a thank you message. 301 Or probably we can actually say 302 thank you message as a string. 303 That is also pretty cool. 304 Now this actually is a nice method 305 although took us a little bit 306 more time and there's a lot more. 307 We can actually return the defined, 308 the return type that there 309 are more ways of playing 310 with that we'll surely do that. 311 But now that you know that, okay, 312 how this is all can be done. 313 And this is the best 314 example for this one. 315 All right. 316 I hope you have enjoyed this, 317 really detailed sessions on Python. 318 I'm enjoying them 319 teaching this whole thing. 320 Hope you are also 321 enjoying learning this. 322 So please do rate us and if you find 323 anything that hey, you should 324 cover more of that topic, tweet me. 325 I'll add this. 326 I want to create the best course 327 on the Python. 328 That is it for this video. 329 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "08 Documenting your functions and built ins.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/08 Documenting your functions and built ins.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.017704435,
      -0.0014223709,
      0.03287289,
      -0.06635052,
      0.009368347,
      0.0004472638,
      0.013413221,
      0.013526946,
      0.0036642773,
      -0.0140371695,
      -0.023787128,
      -0.018446535,
      0.012897276,
      0.03166449,
      0.13645557,
      -0.009034424,
      -0.01849706,
      -0.022199126,
      0.0068513397,
      -0.021581206,
      0.0045793843,
      0.0015305771,
      -0.0028974654,
      -0.015115854,
      0.0020842296,
      0.004026012,
      0.011006587,
      0.013892167,
      0.0272214,
      -0.025887992,
      -0.014559914,
      0.014060223,
      0.01647918,
      0.00857413,
      0.005532184,
      0.013643242,
      0.027551644,
      -0.0034409573,
      -0.014282581,
      0.008041923,
      -0.020611139,
      0.014438072,
      0.006735608,
      -0.020497413,
      0.0064524016,
      -0.03415202,
      -0.010508248,
      -0.012869356,
      -0.003818229,
      0.011008403,
      0.006262574,
      -0.021548478,
      -0.00017514237,
      -0.17890778,
      0.018028866,
      0.005674173,
      -0.021747846,
      0.007048385,
      0.009596806,
      -0.010659648,
      -0.030797156,
      -0.0032396882,
      -0.045068957,
      -0.015460241,
      -0.00029916046,
      -0.017033197,
      0.0010710689,
      0.0030122013,
      0.0016111404,
      -0.020007106,
      0.018099079,
      0.0019191114,
      -0.03254582,
      -0.02022248,
      -0.031075086,
      -0.03303243,
      0.025792565,
      -0.019340536,
      0.0019674525,
      0.010501041,
      0.008000438,
      -0.0039600465,
      -0.0071243984,
      0.0009940978,
      0.043678757,
      0.014459443,
      -0.030153079,
      -0.017714888,
      -0.0031733632,
      -0.006362559,
      0.0016565179,
      0.012502305,
      0.020144334,
      0.004769003,
      -0.020729035,
      -0.0038561488,
      -0.006866986,
      0.00055722496,
      -0.02597106,
      0.013933514,
      0.0031648022,
      -0.028158145,
      -0.019010197,
      -0.013398532,
      0.004348184,
      0.008896496,
      0.00058640906,
      0.016397875,
      -0.013030862,
      0.0027134574,
      0.0037535834,
      0.008518791,
      0.002091931,
      0.030392611,
      0.013143664,
      -0.17079799,
      0.0032444668,
      -0.00881819,
      -0.0030378427,
      0.00509084,
      -0.015595675,
      0.008034096,
      -0.008710205,
      -0.00542987,
      -0.005781628,
      0.02902786,
      0.0015941975,
      0.034410834,
      -0.009426536,
      -0.0004917388,
      -0.02154225,
      -0.014847629,
      -0.0027011263,
      0.0014343865,
      -0.00398103,
      0.013224502,
      -0.030717429,
      0.0008456695,
      -0.03257578,
      -0.0013654646,
      -0.002325401,
      0.025312793,
      0.0029793484,
      0.013444022,
      0.0206954,
      0.0045322534,
      -0.0014823838,
      0.016588153,
      -0.04847546,
      -0.02114347,
      0.0026305215,
      -0.019728847,
      0.015490762,
      -0.019114172,
      0.038277082,
      -0.020595046,
      0.005919439,
      0.007380771,
      0.00022185541,
      -0.0094425315,
      0.005304957,
      0.007385972,
      -0.011365676,
      -0.0020202852,
      -0.019325927,
      -0.011810413,
      -0.016745439,
      -0.0046936385,
      0.0028568776,
      0.027368894,
      -0.013767968,
      -0.0018199396,
      -0.00842663,
      -0.013318184,
      -0.024232157,
      -0.013913807,
      0.011294142,
      0.0036346975,
      0.010756453,
      -0.0073152515,
      -0.0053880285,
      -0.0024563484,
      0.015549257,
      0.0013922403,
      0.005010628,
      0.012422865,
      0.0037111794,
      0.0115041975,
      0.027619075,
      -0.008515753,
      0.0010513396,
      0.0053708875,
      0.031228743,
      0.015403258,
      -0.0025886872,
      -0.035691228,
      -0.009474597,
      0.006493755,
      -0.006849276,
      0.022278612,
      0.02541529,
      -0.0032189996,
      0.019816823,
      -0.02384023,
      0.03038029,
      -0.019486563,
      0.016454436,
      -0.028541734,
      0.0017041673,
      -0.00009690115,
      -0.012096973,
      -0.026474841,
      0.010229218,
      -0.0030453643,
      0.04321202,
      0.0020034385,
      0.01348228,
      -0.0096900435,
      0.011863038,
      -0.021559829,
      0.0024625347,
      -0.0050346474,
      0.012019338,
      0.018210351,
      -0.009758871,
      -0.01268448,
      0.0007865797,
      -0.026546227,
      -0.0073919846,
      0.013611407,
      0.024935633,
      -0.016933179,
      -0.027680578,
      0.0049183783,
      -0.010732906,
      -0.00006483348,
      0.003992362,
      0.0192435,
      0.0034968536,
      -0.0054718894,
      -0.01335334,
      -0.0051694987,
      -0.0059515056,
      0.010139376,
      0.022643032,
      0.004729275,
      0.01007667,
      -0.016938055,
      0.013958164,
      -0.010315294,
      -0.036269963,
      -0.010146907,
      0.013236959,
      -0.008279378,
      0.0028699853,
      -0.013022159,
      -0.028345466,
      -0.013645988,
      0.0057122624,
      -0.0020467946,
      0.008698043,
      0.002488527,
      -0.028586838,
      -0.0010018246,
      0.029312633,
      0.0085337665,
      -0.0031529837,
      0.028987655,
      -0.010674719,
      0.00966671,
      0.031921282,
      0.005096828,
      -0.008528882,
      -0.006970486,
      -0.0046038814,
      0.0022732147,
      -0.11452102,
      0.025485458,
      -0.001641609,
      -0.006999047,
      0.008443793,
      0.0064459387,
      -0.041815456,
      -0.008420354,
      -0.0043265834,
      0.004641511,
      -0.019640597,
      -0.0033838167,
      0.033879004,
      -0.011701399,
      -0.0056478414,
      -0.012053737,
      0.0022543054,
      -0.023214286,
      0.0051973965,
      0.0055082217,
      0.014671068,
      -0.0026568186,
      -0.0120123625,
      -0.001405625,
      0.01215313,
      -0.000037040918,
      -0.015994564,
      0.021652289,
      0.017493451,
      0.0075361608,
      0.015128618,
      0.022228107,
      -0.013668001,
      0.0042752735,
      -0.0025408007,
      -0.005841864,
      0.0016233398,
      -0.0067909155,
      0.0017754142,
      -0.021921294,
      0.010213859,
      -0.010342724,
      0.036480308,
      0.03634801,
      -0.0057895244,
      0.009796831,
      -0.02341955,
      0.006766729,
      -0.0013856106,
      -0.01008298,
      -0.010853045,
      0.007276584,
      0.017105341,
      -0.0072092977,
      0.003260268,
      0.011236745,
      -0.014882236,
      -0.026925499,
      0.0024142838,
      0.0039525772,
      0.0014443555,
      -0.0027337996,
      0.015102846,
      -0.021641493,
      0.01654927,
      -0.010190931,
      0.006741508,
      -0.004138017,
      -0.009016904,
      0.0032953445,
      0.02041825,
      -0.004287662,
      0.0021362728,
      -0.010581053,
      0.0035047228,
      -0.008895717,
      -0.0071759326,
      -0.012812752,
      -0.023929741,
      0.0176119,
      0.0168734,
      -0.00940339,
      0.008238143,
      -0.0045175627,
      -0.0019968231,
      -0.005704496,
      -0.019189712,
      0.003746431,
      0.012806165,
      -0.027503032,
      0.012019307,
      -0.006255155,
      -0.026311923,
      -0.0055308086,
      -0.019617898,
      0.006308208,
      -0.013270803,
      -0.024553126,
      -0.010637777,
      0.021414949,
      -0.007692221,
      0.009698726,
      -0.023368414,
      0.0061705983,
      -0.0090653,
      0.0025887643,
      -0.03408538,
      -0.011510691,
      -0.010947292,
      0.0036535915,
      0.010038537,
      0.0060349456,
      -0.018737253,
      -0.01881962,
      -0.0070586274,
      0.02700881,
      -0.014671789,
      0.016883664,
      0.020257285,
      -0.027216338,
      -0.0033723281,
      -0.01611136,
      -0.012486293,
      0.0013292634,
      -0.025528083,
      0.03016253,
      0.013810777,
      0.021513479,
      -0.020948812,
      -0.024043882,
      -0.015176927,
      0.0072019277,
      -0.022453887,
      -0.017591609,
      -0.021563308,
      -0.0049490416,
      0.011528839,
      0.010767748,
      0.011393227,
      -0.010378848,
      -0.026098317,
      -0.010047694,
      0.01768219,
      -0.00085603294,
      0.0067076134,
      0.029119337,
      0.0024479327,
      -0.005796732,
      -0.01480281,
      -0.017204314,
      -0.018192321,
      -0.0067143952,
      -0.012150282,
      0.0006527651,
      -0.008005669,
      -0.001789284,
      0.0032883277,
      -0.008613189,
      0.0005904782,
      -0.013302331,
      0.0034750064,
      0.025496574,
      -0.029922143,
      0.015791444,
      0.021953482,
      0.024998536,
      0.0099706985,
      0.0064132423,
      -0.00099711,
      -0.013080058,
      -0.0113191465,
      0.004777158,
      -0.0314682,
      -0.003031739,
      0.013353583,
      0.008032886,
      0.014274377,
      -0.01601769,
      0.015667569,
      0.033894904,
      0.0017618616,
      -0.0025482266,
      -0.02216046,
      0.021397097,
      0.0029348326,
      0.003895137,
      0.011545167,
      -0.005068717,
      -0.031271636,
      -0.0031892648,
      0.0016489102,
      -0.027579233,
      0.0043999213,
      0.020468164,
      0.007810707,
      0.0111749265,
      -0.024309153,
      -0.00028339936,
      -0.00705441,
      0.015907215,
      -0.0014307244,
      -0.022335343,
      -0.0065802196,
      -0.0002006789,
      0.015471506,
      -0.026286442,
      -0.004893611,
      -0.010641606,
      0.011746428,
      0.007420487,
      -0.004896942,
      -0.01953768,
      -0.0021698591,
      0.023978867,
      -0.0059684743,
      0.028382638,
      0.0059726606,
      -0.013380806,
      -0.03876587,
      -0.015801026,
      0.014206446,
      -0.027247537,
      -0.007953607,
      -0.020275097,
      0.0060383077,
      -0.009726187,
      -0.012157267,
      0.0022257017,
      -0.0022421845,
      -0.006571592,
      -0.0067626573,
      -0.004624129,
      -0.014893739,
      0.0048792907,
      -0.024952084,
      -0.011465176,
      0.017930463,
      0.017777942,
      -0.010252523,
      0.016409332,
      0.012620304,
      -0.0022891948,
      -0.015787197,
      -0.0140013965,
      0.009892321,
      -0.013774512,
      -0.0052590137,
      -0.0010500344,
      -0.012553291,
      0.00027097677,
      0.0014888651,
      0.013520292,
      -0.0184924,
      0.0033566656,
      -0.018125938,
      0.015110469,
      -0.01609056,
      0.0010098912,
      -0.0045275385,
      0.0019227888,
      0.014181139,
      0.021530489,
      0.008724104,
      -0.0023574957,
      -0.019841693,
      0.0014903051,
      -0.0037536714,
      -0.011613492,
      0.0066117165,
      -0.12628603,
      0.0075475154,
      -0.01523104,
      0.003810026,
      -0.0053386902,
      -0.0036787887,
      0.009510751,
      -0.005051944,
      0.0031458486,
      0.0042783557,
      0.0412281,
      0.015408969,
      0.0016574931,
      -0.016253166,
      0.008130297,
      -0.02494786,
      0.008855904,
      -0.0009985206,
      0.0097523425,
      -0.00002439807,
      -0.012458324,
      -0.0051991893,
      0.0044261576,
      0.0020912956,
      -0.016083946,
      -0.0007603989,
      0.009778781,
      -0.0016080263,
      -0.010103644,
      -0.0102282325,
      -0.026775429,
      -0.02187924,
      0.0011238109,
      -0.0031312061,
      0.014281965,
      0.0017360025,
      -0.021478105,
      0.014369164,
      0.002049843,
      0.005231116,
      0.014623262,
      -0.0013429332,
      0.032998655,
      0.017038103,
      -0.017599178,
      0.028442122,
      0.035222884,
      -0.008268014,
      -0.0071753287,
      0.025891915,
      -0.04285883,
      -0.013128316,
      0.0021689974,
      -0.029935021,
      -0.021334136,
      -0.02557049,
      0.013280113,
      -0.0027686674,
      -0.009570297,
      0.0033229047,
      0.0027242952,
      0.024822004,
      -0.014322805,
      0.016512146,
      0.007910689,
      0.0043429313,
      0.02139214,
      0.03195391,
      -0.0050783567,
      -0.004009955,
      0.01616369,
      0.010731379,
      0.0015798149,
      0.012178612,
      0.0119779715,
      0.00390449,
      0.005282738,
      0.016799571,
      0.0035281307,
      -0.022834774,
      -0.031079523,
      -0.0073648444,
      -0.056191362,
      -0.0108493455,
      0.014075514,
      -0.01616282,
      0.017973926,
      0.012298569,
      -0.0058183596,
      0.003196632,
      0.014440683,
      0.0023209127,
      -0.02933159,
      -0.01881238,
      0.015805362,
      -0.010572555,
      -0.010393961,
      -0.0030050494,
      -0.005542712,
      -0.009257083,
      -0.015887516,
      -0.009974899,
      0.0032735164,
      -0.015623692,
      -0.0048813866,
      -0.0174608,
      0.0062526516,
      0.023839876,
      -0.013923243,
      0.0061484952,
      0.0013193467,
      0.0053804335,
      0.023155853,
      -0.15366872,
      0.0071967673,
      0.0019173556,
      0.018163957,
      0.008977785,
      0.022123028,
      0.0012698881,
      -0.012450659,
      -0.00018357852,
      -0.0105280215,
      0.017746286,
      -0.008254592,
      -0.009863531,
      -0.016029747,
      0.014989413,
      0.12239318,
      -0.01837157,
      -0.018235411,
      0.00041663242,
      0.01369171,
      -0.008833011,
      -0.018674629,
      -0.0077541647,
      -0.00431134,
      -0.0033656454,
      -0.008176634,
      -0.013965981,
      0.002549717,
      0.015282598,
      -0.0033720841,
      0.006504201,
      -0.011281695,
      0.0077321115,
      0.032378934,
      -0.0026128204,
      -0.011484847,
      0.00032599928,
      0.017839393,
      0.00070933666,
      0.015205159,
      0.035128046,
      0.0030601735,
      0.012895592,
      0.005168592,
      0.013639253,
      0.009284189,
      -0.001978355,
      -0.010215637,
      -0.0022608764,
      0.0008384389,
      -0.013389596,
      -0.047604367,
      0.011714347,
      -0.02114022,
      0.0007375792,
      0.017262325,
      -0.009204831,
      0.005586405,
      0.0030355097,
      0.028345961,
      -0.008464631,
      -0.014093534,
      -0.0017722223,
      0.0066092513,
      -0.0051995553,
      0.008508388,
      0.023581754,
      0.025427604,
      0.010675939,
      -0.0061540776,
      0.019297784,
      0.014251028,
      -0.021022512,
      0.026439924,
      -0.009194005,
      0.011819719,
      -0.004682401,
      0.019101547,
      0.0044432813,
      -0.00016991333,
      -0.012325883,
      -0.012292103,
      0.010785144,
      -0.014061223,
      0.014389306,
      0.007596548,
      -0.0191199,
      0.029740524,
      0.008430651,
      0.008074278,
      0.01543981,
      0.019730438,
      -0.0033544265,
      0.011538985,
      -0.011556117,
      0.0028283566,
      0.0044295806,
      -0.026303558,
      0.03571826,
      -0.002201487,
      -0.013997039,
      -0.011142463,
      -0.002407053,
      -0.029362692,
      0.024414798,
      0.00475923,
      0.002934102,
      0.011444729,
      0.010670067,
      -0.0014513002
    ]
  },
  {
    "id": "genai_cohort_python_09_Python_imports__modules_and_init_file_vtt",
    "content": "This one is one of my favorite 2 topic in Python because a lot of 3 people write Python code but 4 just do guesswork when they have 5 to bring in the code from other 6 files in their, actual working 7 file. 8 This is a really fun and 9 interesting topic, but rest 10 assured that after watching this 11 particular video, it might be a 12 little bit longer one, but you 13 will never face any problem in 14 importing any file from anywhere 15 into the Python. 16 I have seen this struggle with 17 the students who actually write 18 code in Django or Fast API. 19 They just keep on wondering why this 20 is happening, how this is happening. 21 You will get answer of all of this. 22 The video could be slightly longer 23 than the usual one, but I want 24 to cover this all in one go. 25 So let me take you onto 26 the screen and we're going 27 to just work with this. 28 So it's a really simple 29 and fun thing to do. 30 Hope you remember the name. 31 What was the name? 32 This is Dunder. 33 I hope you do that. 34 All right, so let's go ahead 35 and talk about the imports. 36 And especially, I'll call this one 37 as importing objects or importing 38 functions would also not be bad. 39 But everything is an object 40 in the world of Python, so 41 calling functions also as an object 42 is also a true statement. 43 Very, very weird. 44 But this is also a true 45 statement here. 46 All right, so let's talk 47 about why we need an import here. 48 Imagine you have a perfect 49 masala chai recipe. 50 You have saved it in a notebook. 51 And, what's that notebook? 52 That notebook is, masala chai py. 53 All right, we'll first grab 54 the theory and then definitely 100% 55 will code out the things as well. 56 So this is one of your 57 file masalachai py. 58 Now, rather than rewriting the same 59 instruction every time you brew 60 a chai in a new shop, let's just say 61 you have opened up a new branch. 62 So let's just call this 63 one as, new branch py. 64 Of course. 65 So we opened up this new branch. 66 So would you rather go ahead and get 67 this masala chai every single 68 time, write a fresh function? 69 No, we want to import this 70 into the masala chai. 71 So how do we do this? 72 How we bring the code from masala 73 chai py into the new branch? 74 There are a couple 75 of ways how we do it. 76 We'll surely write the Python 77 code first, grab the theory. 78 So we can just go ahead 79 and say import masala. 80 I wrote it, correct? 81 Yep. 82 Import masalachai py. 83 Once you write this statement 84 at the very top, what this statement 85 will allow you to do is you can just 86 go ahead and use something like this 87 Masalachai and then use a method. 88 Maybe this whole file. 89 Masalachai py has a lot of methods 90 but we want to use a brew method. 91 I can call all of this method here. 92 So, so this will be my code if I 93 go ahead and bring it up here. 94 Now what we are doing is you 95 are bringing the full recipe 96 notebook to the table. 97 You are not bringing one 98 method or two things, you are 99 bringing the whole recipe. 100 It's just like flipping 101 the pages and finding 102 the right methods for this. 103 There could be another 104 way of doing this. 105 So this is one way. 106 There is no wrong or no right. 107 This is one way of doing the things. 108 Another way is saying that I don't 109 want the whole book to come in. 110 I, I want certain methods to come up. 111 So I can just go ahead and say 112 from Masalachai Py I want 113 to import not everything but let's 114 just say the brew method. 115 So this is what I want to bring 116 in, only the brew method. 117 Now this gives me a really 118 interesting way to use this. 119 Now my file has the functionality 120 of brewing. 121 I can directly go ahead 122 and use the brew. 123 The only difference between this 124 and this here you have 125 to simply say okay from this book 126 use this particular method. 127 Some people prefer this, 128 some people prefer this. 129 And of course there are use 130 case scenarios of this. 131 So this is also a right way and this 132 is also an equally right way. 133 But you should know what 134 we are bringing in. 135 There is also another way. 136 Yeah, there is also interesting way. 137 Let's just say you don't want 138 to call it as brew. 139 Maybe your file still has a method 140 which is doing some brewing. 141 You want to change the name of it. 142 So I can go ahead and simply say 143 from Masala chai, import brew 144 but call it as start brewing. 145 Yeah, this simple as 146 brewing the moment you get 147 it as start brewing. 148 As start brewing. 149 Now I can simply go ahead and call 150 this one as start brewing. 151 So again we have literally 152 three ways of how we can import 153 the same thing from here. 154 So in the new branch 155 you have three ways. 156 Now we can actually import the whole 157 thing and call dot ways 158 and can get the methods out of it. 159 We can actually have the named 160 import that I only want brew 161 but if there are more methods 162 you can just comma separate them 163 and have more values of it. 164 For example the brew is 165 there or there is a prepare. 166 You get the idea. 167 So you can have as many as you wish. 168 Now these are the three ways. 169 I hope you got an idea. 170 Of how this can be done. 171 This was a very fictitious scenario. 172 But I also want to talk 173 on one more thing. 174 Sometimes you are importing things 175 which are not from the other files 176 but rather Python is giving you. 177 So there are other ways. 178 For example, you'll sometimes say 179 from datetime, which is a inbuilt 180 methods and inbuilt functionality 181 in the Python and you want 182 to say import, date, time. 183 So you are bringing from the datetime 184 file the datetime functionality. 185 The name happened to be same, 186 but this is very common. 187 It happens. 188 It's a standard library 189 that we are bringing in. 190 Sometimes we go ahead 191 and say from requests. 192 This is also a really popular library 193 for making web requests. 194 So you simply go ahead and do that. 195 And sometimes you will say that hey, 196 I want to have a localized import. 197 By the way, this is called 198 as localized import. 199 So I would say something like 200 from Chai. 201 This is a fictitious one. 202 So Chai Shop, let's just 203 say.utils I'll show you. 204 What does it mean? 205 I want to go ahead and say import 206 discount and I want to import, 207 calculate, tax and all these things. 208 And this might be 209 a little bit confusing. 210 Okay, from the Chai Shop 211 utils, what do you mean by utils? 212 We haven't seen anything 213 of this syntax. 214 We are actually importing from PY Py 215 to understand this particular 216 syntax, which you'll see 217 quite a lot, especially in 218 the frameworks, we have to actually 219 design something like this. 220 So what we're going to do is 221 let's prepare a structure first. 222 First I'll walk you through what 223 structure we are creating, 224 then we'll create it actually. 225 So let's just say we have a folder 226 which says chibe business. 227 Inside the chai business we 228 will have a recipe recipes 229 which will be a folder itself. 230 I'll denote the folder by having 231 a trailing slash at the end. 232 I think that's easier one. 233 So inside the recipe we are going 234 to further go ahead and have 235 let's just say flavor py 236 and just like we have a recipe we 237 will have another folder. 238 We will have utils Just like we saw 239 this here we will have the utils 240 again I'll denote trailing slash as 241 the folder name and then further 242 inside this we will have discount or 243 discounts py and at the very outside 244 of this we will have a main file 245 just here. 246 So main py so this is 247 what we want to build. 248 Now I'll show you some very 249 interesting part about it like inits 250 and why you should use it. 251 Why you shouldn't use it 252 in all of this. 253 First, let's create this 254 structure whole thing. 255 So I'll just close this and instead 256 of calling this one as just 257 the chai business, we'll call it as, 258 06 chai chai business. 259 It's easier for us. 260 So 06 underscore. 261 And let's call this 262 one as Chai business. 263 And the first thing that we saw 264 in here, that I want to create 265 a new file which is main py. 266 What we'll write into that, 267 that comes up a little later. 268 Not worried much on that. 269 Let's have a two folder first. 270 First one being recipes. 271 Recipe or recipes. 272 Totally up to you. 273 And we'll have another folder 274 which is going to call as utils. 275 We know in the utils 276 we have discounts. 277 Discounts py. 278 And in the recipe we have flavors. 279 Flavors Py. 280 Hope I wrote that correct. 281 I'm a big type of guy. 282 So in this flavor py, what we're 283 doing is let's define some 284 utilities or some functions for it. 285 One is this chai. 286 So we have a lot of Chai 287 flavors going on in this one. 288 Feel free to add as many 289 as you, want to have. 290 This doesn't print out anything. 291 Most of the function will return. 292 Do you want to print it? 293 That should be your choice. 294 And chai, is ready. 295 Ready. 296 And we'll have another one 297 which is going to be ginger 298 Gingerchi, just like that. 299 And we can have many 300 hundreds of them. 301 No problem here. 302 And we'll say ginger T. 303 No, ginger chai is ready. 304 You get the idea what this 305 flavor is actually doing. 306 All right, now let's 307 go ahead and work on. 308 We'll work on the discounts 309 a little bit later. 310 First, let's see how we can actually 311 bring this into the main py. 312 So, so notice here in this 313 I will just go ahead and say import 314 from the recipes. 315 I'll just go ahead 316 and say dot flavor. 317 That is all I have to do. 318 So if some files are inside a folder, 319 all you have to do is name 320 that folder, then say dot flavors. 321 No need to add the py 322 and all of that. 323 Usually you don't need it, 324 especially in the Python ecosystem. 325 That is it. 326 Now I can just go ahead 327 and say I want to print 328 whatever the thing says. 329 This is like bringing a brook. 330 So I'll just say, hey, 331 recipes, flavors dot. 332 And notice here I have access 333 to elaichi chai and ginger chai. 334 So whichever one I want to run, I 335 can just go ahead and run this. 336 But I Have to flip the whole book. 337 That's one other thing. 338 I can just go ahead 339 and use another option B. 340 So we'll comment this out. 341 You get the import, 342 we'll just do another import. 343 So another way of importing this is 344 from recipes dot flavor. 345 I can use the named import 346 and I can say oops, my 347 bad, this is not import. 348 This is actually from. 349 I want to import the method name. 350 So you can just press control 351 space and it will give 352 you suggestions as well. 353 Elijah. 354 And you have another one. 355 There we go. 356 Now I have the ability 357 to just print them directly. 358 So let's just say I want 359 to call gingerchai. 360 I can just go ahead 361 and call Ginger Chai. 362 This is totally on you. 363 That how you want to work with this. 364 Totally on you. 365 Everything is correct. 366 There is no right and wrong. 367 Whichever makes sense. 368 You can just go ahead 369 and work with that. 370 This is named import VS all import. 371 Now there is another 372 way of handling this. 373 Yeah. 374 So what we can do is we can actually 375 have a, relative imports as well. 376 So relative imports are helpful 377 where the module lives 378 in the same directory tree. 379 They're often used 380 in the packages as well. 381 So from within the recipe package 382 you can try something like this. 383 I'll show you something. 384 This, this is also interesting. 385 So notice here I can just go 386 ahead and say from 387 dot and notice here I can just go 388 ahead and say from recipes. 389 And if the recipe file is within 390 the same part where the main py 391 I can just go ahead and say 392 dot flavors just like this. 393 But it is not. 394 So here's the interesting part. 395 I can use two dots. 396 That means go one directory back 397 and it can actually go. 398 Right now I don't want to go one 399 directory back because it will 400 take me onto the root level. 401 But just wanted to show 402 you that it exists. 403 Now here I have to say 404 the same recipes then I have 405 to say dot flavors. 406 It's also a syntax and I can 407 just go ahead and say import. 408 Very weird syntax. 409 But I want to show you that this 410 actually exists. 411 Now here's the interesting thing 412 that usually I say avoid this. 413 I'll just show you. 414 But please don't do this. 415 So let's just say from I 416 should actually show you. 417 Not here, actually here because 418 this is where we are importing. 419 So what you have to never do 420 or should actually avoid as 421 much as possible is from 422 Masalachai import asterisk. 423 This means I'm importing 424 everything without knowing 425 what it's going to do. 426 What, what it's not going to do. 427 How is it going to impact the things 428 and all of these things? 429 This is something which 430 is usually avoided. 431 Now here's the interesting 432 part I want to show you. 433 Since we are talking about the 434 imports, one thing that you have 435 hundred percent seen is dunder 436 init dunder py now you will see, 437 almost everybody will say that 438 the presence of this init py 439 file turns a folder into a 440 Python package. 441 So technically if we are making 442 a Python package, go into 443 the recipe, create a new file. 444 This is underscore, underscore init 445 in it we don't write anything inside 446 this file, but this actually turns 447 folder into a Python package. 448 It can also contain initialization 449 code, but this is. 450 Okay, but here's the interesting 451 part, what people 452 don't tell you ever probably 453 those videos are a bit old. 454 So anytime that you see Python, 455 which is about 3.3 or 456 the Python 3.3 onwards, 457 you don't have to do this anymore. 458 But it is still commonly used. 459 So much so that you're going to 460 see this and people talk about it. 461 But the reality is 462 in the Python 3.3 this is obsolete. 463 So all the code that you're writing 464 doesn't really need it. 465 But if you still want 466 to have it, you can keep it. 467 There is no right or wrong in this 468 one, so, so just wanted to make 469 sure that you understand that. 470 Okay, this one converts my 471 folder into the Python modules 472 and technically now we can call 473 this one as Recipe modules just 474 for saying it's already a 475 module because it's in the 476 Python structure. 477 There's a Python files 478 and all of that. 479 Python automatically does that, 480 but still people love to use it. 481 I don't do it because I know 482 Python 3.3 doesn't need 483 this file and anyways this 484 file is always empty. 485 This is just for the Python 486 internal architecture. 487 You don't do anything with this. 488 So I hope this all information 489 was useful for you. 490 And now from this point 491 onwards, importing any 492 file will be your call. 493 It's not just the guesswork. 494 You know exactly where I 495 am going, what I'm doing. 496 Different types of import, 497 I'm aware of them. 498 I know how the named import works, 499 I know how not to do the star 500 work and everything beyond that. 501 That is it for this video. 502 Hope you have enjoyed it. 503 Do rate us and we'll catch 504 up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "09 Python imports, modules and init file.vtt",
      "originalPath": "genai-cohort/python/05 Chapter Subtitles/09 Python imports, modules and init file.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0033050403,
      -0.004824825,
      0.045294993,
      -0.058213633,
      -0.0041409396,
      0.0005547115,
      0.009831061,
      0.027339906,
      0.0036351292,
      -0.004120717,
      -0.010928308,
      -0.013290457,
      0.01728836,
      0.030567398,
      0.12763533,
      0.008204054,
      -0.009937443,
      -0.017883038,
      -0.0028129765,
      -0.030870792,
      -0.004648487,
      -0.007571356,
      0.003887721,
      -0.011864253,
      0.010624124,
      0.0009854664,
      0.011906126,
      0.0067260093,
      0.031071018,
      -0.023569653,
      -0.008272808,
      -0.0020003805,
      0.0019717833,
      0.012761524,
      0.026342034,
      0.006939431,
      0.011660865,
      -0.004694306,
      -0.01019823,
      -0.0022552903,
      -0.018323673,
      0.0073380205,
      0.014162103,
      -0.018503632,
      0.00908393,
      -0.03376003,
      0.0050037582,
      -0.03553313,
      -0.0072272373,
      0.008935296,
      0.0046178172,
      -0.00056522596,
      -0.010947558,
      -0.17782758,
      0.019407824,
      0.0001456896,
      0.0031271395,
      -0.001746972,
      0.015275357,
      0.00073054084,
      -0.042778764,
      0.021037161,
      -0.03864939,
      -0.0063758045,
      0.015054502,
      -0.02280252,
      0.018060023,
      -0.021816934,
      0.008962529,
      -0.0022002724,
      0.01490646,
      0.012163082,
      -0.028162593,
      -0.023623884,
      -0.017315198,
      -0.026860772,
      0.016105957,
      -0.0046227574,
      0.025236243,
      0.021167755,
      -0.00187305,
      -0.011117384,
      -0.009683321,
      -0.014156138,
      0.03585229,
      0.015800012,
      -0.024162183,
      0.0011279196,
      -0.020986203,
      0.006525658,
      -0.003412114,
      0.0208873,
      0.012292662,
      0.014145949,
      0.0038415573,
      0.0055844914,
      -0.006340133,
      -0.007793415,
      -0.009572483,
      -0.008208558,
      0.021758104,
      -0.03466403,
      -0.031289443,
      -0.013231586,
      0.008089784,
      0.000787321,
      0.009070733,
      -0.00714707,
      -0.02342288,
      0.00084346574,
      -0.019429699,
      -0.010842872,
      0.0025193887,
      0.029646529,
      0.019251322,
      -0.17188518,
      0.004991137,
      -0.019529028,
      -0.013815796,
      -0.00478352,
      -0.009658481,
      0.00095086364,
      0.008867361,
      0.003048487,
      0.013805352,
      0.031290423,
      -0.012264358,
      0.0235695,
      -0.01398578,
      0.0021875014,
      -0.017339343,
      -0.033620436,
      0.014191383,
      0.006712459,
      0.0064981235,
      0.0150359385,
      -0.012329839,
      0.012068814,
      -0.015333165,
      -0.0059947995,
      -0.0013408399,
      0.01364485,
      -0.0012026806,
      0.021223102,
      0.005908628,
      0.0062366547,
      -0.0044221813,
      0.0063291313,
      -0.024989288,
      -0.03247176,
      -0.0026810546,
      -0.010017579,
      -0.0032152084,
      -0.0122178905,
      0.020598687,
      -0.018519998,
      0.011582322,
      -0.0026945614,
      -0.0072761485,
      0.0048068124,
      -0.0057322374,
      0.014755747,
      -0.0029616382,
      0.016369456,
      -0.0013903743,
      0.0023225814,
      -0.017345646,
      0.013211987,
      0.013996152,
      0.005278407,
      -0.0009605564,
      -0.016999513,
      -0.010371087,
      -0.001271688,
      -0.015404808,
      -0.007957147,
      0.0045189043,
      -0.011002724,
      0.010005611,
      -0.032324348,
      0.014314789,
      -0.012068289,
      0.027678395,
      -0.004497393,
      -0.0034627307,
      -0.00053058064,
      -0.01350848,
      0.018262077,
      0.013926954,
      -0.006562019,
      0.009164611,
      -0.011124165,
      0.017531373,
      0.014379992,
      -0.0026890137,
      -0.02621604,
      0.007947693,
      0.0038140896,
      -0.01010313,
      0.009962308,
      0.03161864,
      -0.002549003,
      -0.004312667,
      -0.03928576,
      0.036081612,
      -0.0030492607,
      -0.0040733293,
      -0.023030547,
      -0.002179128,
      0.007782036,
      -0.023312395,
      -0.008228254,
      0.021196235,
      -0.021662587,
      0.014978797,
      0.0020086693,
      0.03236451,
      -0.01415292,
      0.0019520618,
      -0.027881442,
      0.0052848454,
      -0.011111212,
      0.013637863,
      0.027542725,
      -0.0067018108,
      -0.020027883,
      -0.0017456006,
      0.0070103826,
      -0.007862601,
      0.0081498865,
      0.036199424,
      0.00641351,
      -0.028610064,
      -0.0058231517,
      -0.0028975706,
      0.00038248723,
      -0.022147827,
      0.029405309,
      -0.00080769253,
      0.00012276556,
      -0.000563311,
      -0.006025964,
      -0.0059588207,
      -0.0072290576,
      0.026451383,
      0.0042273635,
      -0.0011484053,
      -0.009394114,
      -0.0025069746,
      -0.022866623,
      -0.020450022,
      -0.010749364,
      0.009047599,
      -0.020671763,
      0.0025502427,
      -0.023201548,
      -0.01629188,
      -0.0044635036,
      -0.012860101,
      -0.008639263,
      -0.014834223,
      0.00723609,
      -0.027480511,
      -0.0028270863,
      0.012150026,
      0.032921996,
      0.0015100907,
      0.03172793,
      -0.012960843,
      0.037568916,
      0.025086202,
      0.02143304,
      0.0131266685,
      0.004045676,
      -0.016188372,
      -0.007312862,
      -0.10143871,
      0.031198045,
      -0.00013493063,
      -0.023546692,
      0.013512905,
      0.0056607183,
      -0.04532365,
      0.012590221,
      0.0030701195,
      0.012959832,
      -0.0026949914,
      -0.0019561097,
      0.03173777,
      0.0051291473,
      -0.014620535,
      -0.010604894,
      0.00088652334,
      -0.017718764,
      0.01448108,
      -0.010252802,
      -0.0022991854,
      -0.0031154156,
      -0.0133858,
      0.0020237684,
      0.015141541,
      -0.01342284,
      -0.005225864,
      0.021597175,
      0.030849209,
      0.01592309,
      0.0002085696,
      0.0039051923,
      0.0012282537,
      0.0035519507,
      -0.0008471851,
      0.008266654,
      0.020700127,
      -0.022238601,
      0.007991723,
      -0.008543293,
      -0.008860316,
      -0.019970689,
      0.012915761,
      0.015544318,
      -0.014205865,
      -0.0036226283,
      -0.011498783,
      0.011874817,
      -0.011561957,
      0.016595118,
      -0.021133183,
      0.0050976733,
      0.016923359,
      0.00000397424,
      0.013670528,
      0.011218237,
      -0.011441173,
      -0.013599792,
      0.02374551,
      0.00806428,
      -0.00031962036,
      -0.0053239707,
      0.008945036,
      -0.011243663,
      0.01520405,
      -0.019335032,
      0.00626436,
      -0.00083103956,
      -0.002142329,
      -0.0028098158,
      0.014194014,
      -0.01693738,
      -0.0044758017,
      -0.020660086,
      0.011417315,
      0.023774661,
      0.011860287,
      -0.012097704,
      -0.015095839,
      0.014533883,
      0.021157194,
      0.008591111,
      0.0107771,
      0.015393604,
      -0.011740994,
      0.016515115,
      -0.01144733,
      0.0031380008,
      0.010057832,
      -0.02860151,
      0.009351801,
      0.017737543,
      -0.022543093,
      -0.0047443016,
      -0.013282022,
      0.009329847,
      -0.015741006,
      -0.018337652,
      -0.0194121,
      0.014941051,
      -0.01773519,
      0.002524911,
      -0.017906737,
      -0.000006187435,
      0.0018349206,
      -0.006834606,
      -0.008757072,
      -0.009820065,
      0.0017738839,
      0.0029877084,
      0.012382632,
      -0.0025974007,
      -0.023510115,
      -0.012419051,
      -0.004872098,
      0.011371655,
      0.0014399263,
      0.028849073,
      0.0016480512,
      -0.029291427,
      -0.019072335,
      -0.021316364,
      -0.01649139,
      0.0022068662,
      -0.003283308,
      0.005231634,
      0.0021566243,
      -0.0031769536,
      -0.013997644,
      -0.02196399,
      -0.014419791,
      0.003209224,
      -0.029895108,
      0.0037667505,
      -0.009560485,
      -0.029080732,
      0.012537585,
      0.018880496,
      0.008021903,
      0.008686579,
      -0.013737962,
      0.015007096,
      0.02301494,
      -0.015158953,
      -0.010427936,
      0.028400417,
      -0.016126478,
      -0.012080786,
      -0.019311095,
      -0.021994568,
      -0.026254082,
      -0.009468298,
      -0.01645022,
      0.004141456,
      -0.007497799,
      -0.002649987,
      0.0067851283,
      0.0014538947,
      -0.021271618,
      -0.0107862335,
      0.011609404,
      0.018637946,
      -0.008345354,
      -0.023140606,
      0.031280536,
      0.014717533,
      -0.0018885573,
      0.012998582,
      -0.0011870811,
      0.0045954757,
      -0.01823354,
      -0.028805245,
      -0.025087446,
      0.0010951918,
      0.0033502094,
      0.00049450214,
      0.0029612402,
      -0.001201622,
      0.0059186886,
      0.017945958,
      -0.010367818,
      -0.009742672,
      -0.02410375,
      0.020531543,
      0.0013412264,
      0.013058967,
      0.014851872,
      -0.018732967,
      -0.031175692,
      -0.009939708,
      0.022559082,
      -0.030109918,
      0.0045620804,
      0.015959427,
      -0.00028998844,
      0.010345632,
      -0.016226744,
      0.0045827026,
      0.018323554,
      0.02662963,
      -0.008089864,
      -0.019161835,
      -0.0028024395,
      -0.0013679826,
      0.010968248,
      -0.016352354,
      0.018699337,
      -0.002971043,
      0.010414291,
      0.017363172,
      0.0044844355,
      -0.024815734,
      -0.0056223758,
      -0.0026214484,
      0.007940974,
      0.015439411,
      0.008569832,
      -0.020904873,
      -0.02120684,
      -0.005344006,
      0.020922616,
      -0.0078505995,
      -0.009012195,
      -0.01631479,
      0.011099928,
      0.011117606,
      -0.0102466,
      0.000160793,
      -0.015239117,
      0.003925906,
      0.0040801526,
      0.004940263,
      -0.011384494,
      0.020306649,
      -0.025108881,
      -0.014817933,
      0.008064561,
      0.028451081,
      -0.0073217964,
      0.0016915409,
      0.009659564,
      -0.0076001217,
      -0.020091848,
      0.0128810415,
      -0.002041999,
      -0.018028991,
      0.03181432,
      0.008199805,
      -0.02169665,
      -0.0034824184,
      -0.003400428,
      0.028485699,
      -0.0069464846,
      -0.0057000006,
      -0.021094188,
      0.032144204,
      -0.00554958,
      0.018628003,
      -0.0046359994,
      -0.0027193103,
      0.022701848,
      0.030631647,
      -0.007855627,
      0.000626465,
      0.0006610724,
      -0.007874628,
      -0.0116700325,
      0.02112388,
      0.010747426,
      -0.12401679,
      0.006951586,
      -0.01828236,
      0.013978367,
      -0.000770668,
      0.0017579566,
      0.0020733334,
      -0.020428905,
      0.0033160488,
      -0.001575701,
      0.042636074,
      0.008623413,
      0.0117347855,
      -0.017167225,
      0.01151035,
      -0.01135697,
      0.0046291198,
      0.0025477747,
      0.0225419,
      0.0040429933,
      -0.02260506,
      -0.009660234,
      -0.015548766,
      0.0012521542,
      -0.026334701,
      -0.0043366435,
      -0.0036349506,
      0.0130467545,
      -0.018153297,
      -0.014048879,
      -0.022494555,
      -0.015553769,
      0.016153978,
      0.011799876,
      0.0030596834,
      -0.009741732,
      -0.01831562,
      0.017816244,
      0.0021774832,
      0.015747169,
      -0.017583746,
      -0.0077374233,
      0.016180687,
      0.02004737,
      -0.02526989,
      0.020614652,
      0.029024363,
      -0.005048082,
      0.015094678,
      0.042119622,
      -0.028997831,
      -0.018883688,
      -0.003836468,
      -0.020323789,
      0.013198297,
      0.004191133,
      0.007058796,
      0.007226238,
      -0.0004031134,
      0.006586542,
      0.022781646,
      0.003169615,
      0.0077991067,
      0.015688851,
      -0.010988964,
      0.012739367,
      0.017522808,
      0.0037352701,
      0.018940995,
      -0.017239476,
      -0.0020109324,
      0.014611215,
      0.007315309,
      0.013180647,
      0.0075621596,
      -0.0019133047,
      -0.0032193006,
      0.0034352613,
      -0.010512557,
      -0.0085258195,
      -0.026032137,
      0.0058147656,
      -0.057588927,
      -0.004299986,
      0.019242223,
      0.01177853,
      0.030270236,
      0.020194212,
      -0.008948962,
      0.0051027597,
      0.031294726,
      0.0049209693,
      -0.0061240937,
      -0.011255099,
      0.005500846,
      -0.0065730163,
      -0.013130099,
      -0.00023406139,
      0.0028835838,
      -0.026753932,
      -0.024664091,
      0.015855063,
      0.023398904,
      -0.006464081,
      0.0062293564,
      -0.017468616,
      0.011473829,
      0.015803438,
      -0.0011235287,
      0.009139936,
      0.00083157845,
      -0.01826706,
      0.011840445,
      -0.15113863,
      -0.017478878,
      -0.0050953203,
      0.019900681,
      0.015091004,
      0.0044985753,
      -0.014237797,
      -0.0064161164,
      -0.009012077,
      -0.01684356,
      0.017291665,
      -0.005983886,
      -0.005165959,
      -0.017463919,
      0.028899644,
      0.1314053,
      -0.011533932,
      -0.0014626797,
      -0.010457564,
      0.008905828,
      -0.0025050638,
      -0.034047272,
      -0.010892213,
      0.022295302,
      -0.006176349,
      -0.003140462,
      0.01583763,
      0.0077624293,
      0.0046194163,
      -0.021437833,
      -0.008128297,
      -0.024701204,
      -0.012367685,
      0.027982585,
      -0.0069606123,
      -0.0063753156,
      0.0076533053,
      -0.0051317126,
      -0.006949142,
      0.0023129391,
      0.010933638,
      0.005117188,
      -0.0027086998,
      0.0015053748,
      0.00017072193,
      0.011819028,
      -0.015314172,
      -0.0033777677,
      0.0005267538,
      0.010537135,
      -0.006971362,
      -0.05940785,
      0.0110546425,
      -0.0104948,
      -0.010393766,
      0.017601855,
      -0.015273487,
      0.015139087,
      -0.00018365386,
      0.024505235,
      -0.005508795,
      -0.0018751812,
      -0.0086350525,
      0.001939221,
      0.0014874564,
      -0.00028855162,
      0.016180163,
      0.031331718,
      0.025613979,
      -0.010637693,
      0.018269612,
      0.029435404,
      -0.01162904,
      0.013910204,
      -0.016749885,
      0.0025461144,
      -0.022131015,
      0.033959247,
      -0.007972157,
      -0.012172427,
      0.006697171,
      -0.0025380186,
      -0.011409393,
      -0.01846778,
      0.011776157,
      0.0115917,
      -0.025322573,
      0.02662886,
      -0.01144998,
      0.007535326,
      0.001708426,
      0.016268514,
      -0.012268389,
      0.0057077883,
      -0.008996221,
      -0.007506332,
      0.00014331374,
      -0.026606472,
      0.029110825,
      -0.004132172,
      -0.0032191754,
      0.007408257,
      0.009996891,
      -0.025323654,
      0.014606504,
      0.007671041,
      0.010146925,
      0.017243221,
      0.023858609,
      0.00077299844
    ]
  },
  {
    "id": "genai_cohort_python_01_Introduction_to_loops_in_python_vtt",
    "content": "Right. 2 Welcome to the new section 3 of the Udemy's Python course. 4 So, next up, what we are 5 taking up next, we want 6 to study about the loops. 7 This is an interesting concept 8 in the world of Python, 9 but requires a little bit 10 more additional practice. 11 So make sure you are practicing 12 enough on the Python loop section. 13 The loop simply means I want 14 to do a task again and again. 15 So far in the course, we have seen 16 that based on certain condition, 17 we go either left or right. 18 And by the left and right, I mean 19 to say whether we go onto a route 20 of yes or we go for a route of no. 21 The condition was false, 22 so I'm going this side. 23 If the condition is false, 24 I'm going that side. 25 This is what we have done so far. 26 Now we want to do certain 27 tasks again and again. 28 And you might be asking, why 29 would you want to do that? 30 Why? 31 A task needs to be performed 32 10 times or 20 times. 33 What's the point of it? 34 Now, sometimes programming, and 35 especially in the world of 36 programming, it requires you to 37 perform a task again, again, 38 sometimes 10 times, sometimes five 39 times, and sometimes you don't even 40 know how many times. 41 I'll give you an example. 42 Let's just say you made a web 43 request to a database, a, 44 backend side, and that backend gave 45 you five books to display. 46 So you have wrote a code, you 47 have written a code that displays 48 the book one time, and based 49 on the request, you get five 50 data to display the books. 51 You repeat the logic again, you 52 display one book, then second book, 53 then third book, and all of this. 54 Now, in the world of programming, 55 we don't say we start with one. 56 In the world of programming, 57 everything, almost 58 everything starts with zero. 59 So first item is always 0th 60 index, then first index. 61 So we display all 62 of the five items like that. 63 This is a common thing that you'll 64 be doing, and we will be learning 65 about them in the course itself. 66 So take a moment and try to 67 understand what we are doing here. 68 Loops are a very interesting concept, 69 but they require a little bit 70 more effort than the regular ones. 71 And don't worry, we will have 72 stories for this one as well. 73 So let's go with the sum 74 of the stories. 75 So we will start the loop section. 76 And loops are pretty fun, actually. 77 They are pretty fun. 78 And by the end of this chapter, 79 you'll be able to use for loop. 80 And while loop, these are the most 81 prominent loop that are used. 82 Just like we have the condition if 83 else if, or else, 84 these are just the keywords. 85 So we will be fully comfortable with 86 working with for and the while loop. 87 Apart from this, we will also 88 learn how we can loop through 89 some of the sequences. 90 Like there is a sequence range, 91 they gives you certain 92 range like this range. 93 If you give a start limit 94 and end limit, it gives you 95 all the data in between. 96 For example, you can put a range of 97 1 to 11 and it will give you all 98 the numbers starting from 1 to 10. 99 Remember in the Python, 100 range is never inclusive. 101 In the whole of Python, wherever 102 you see whether numbers, strings, 103 range or anything, 104 the range is never inclusive. 105 So, so keep that in mind 106 and we will use it later on. 107 So we'll see that how we can 108 produce some of the sequences. 109 The sequences producers can 110 be range, enumerate, zip, 111 and they all have their equal. 112 I will show you real world 113 stories so that we can actually 114 learn to utilize them. 115 We will see some of the control 116 behaviors on the loop. 117 Like how we can control 118 the loop in between. 119 Let's just say the loop was asked 120 to run between 1 and 10. 121 But there are certain conditions, 122 if those conditions are met, 123 they might met, they might not met. 124 We want to break out 125 of the loop or we want to just 126 skip one part of the loop. 127 There are so many things that 128 we can do so we are going 129 to just work with that. 130 Then we are going to identify when 131 to use for VS while loop. 132 Again they are kind of same, but of 133 course they are two different ones. 134 So we will see that how it can work 135 and we will of course go through 136 with the real world logic. 137 We will have the challenges, 138 we will fix those challenges 139 and work just like that. 140 So with this, I really don't want 141 to waste too much of your time. 142 We will directly jump into 143 very first, exercise here, very 144 first example, but that 145 we'll do in the next video. 146 So let's catch up 147 in the next video quickly.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 Introduction to loops in python.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/01 Introduction to loops in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0020065187,
      -0.0026304936,
      0.014556534,
      -0.051005464,
      -0.02165768,
      -0.010978491,
      -0.0013060446,
      0.02005605,
      0.00029957262,
      0.0135846315,
      -0.0028593729,
      -0.013160089,
      -0.0002643564,
      0.038176414,
      0.12846173,
      0.0016014518,
      0.0065105874,
      -0.028601356,
      0.00043763756,
      -0.0067769187,
      -0.012926615,
      -0.005973019,
      0.009841106,
      -0.036995284,
      0.011075466,
      0.016113466,
      0.0012424261,
      0.010887824,
      0.038012754,
      -0.021825569,
      -0.02645168,
      -0.003169066,
      0.006159446,
      0.026926966,
      0.0089648105,
      0.015380924,
      -0.005445157,
      0.0011208021,
      -0.027195565,
      -0.0016702575,
      -0.0063698557,
      -0.011657188,
      -0.014215458,
      -0.020138098,
      0.0073695043,
      -0.026420293,
      -0.0118055595,
      -0.023633588,
      0.008765032,
      0.019920073,
      -0.0010941358,
      -0.010172194,
      -0.00583389,
      -0.18769501,
      0.0008703229,
      0.012303277,
      -0.010588878,
      0.0032209146,
      -0.0054478995,
      0.012648749,
      -0.017763672,
      0.00605119,
      -0.016266543,
      -0.005977506,
      -0.015192925,
      -0.029591493,
      0.02201686,
      -0.00046914732,
      0.005448969,
      0.007822926,
      0.010395461,
      0.010227907,
      -0.0041136006,
      -0.020434946,
      -0.02758902,
      -0.039750084,
      -0.007131583,
      -0.0070728553,
      -0.004805168,
      0.016529746,
      -0.014580722,
      -0.018451141,
      -0.00998202,
      0.0002055549,
      0.018751716,
      0.008047717,
      -0.033637516,
      -0.014363102,
      -0.008504575,
      -0.0054683355,
      -0.03803119,
      0.017163716,
      -0.0043434366,
      0.0066986773,
      -0.012256463,
      -0.009150974,
      -0.01826853,
      -0.0022834213,
      -0.004310598,
      0.002091604,
      0.001246664,
      -0.014967973,
      -0.03135651,
      -0.016412027,
      -0.005456102,
      0.026043149,
      -0.012156923,
      -0.027016846,
      -0.0021132473,
      -0.006722595,
      -0.009350105,
      0.0034335717,
      0.004203301,
      0.03819288,
      -0.014816448,
      -0.18373393,
      0.020203711,
      0.004424752,
      -0.028815093,
      0.013665134,
      -0.020215968,
      0.012136836,
      -0.0071005863,
      0.014246677,
      -0.017375471,
      0.013164403,
      -0.011925551,
      0.040659014,
      0.0011162343,
      -0.0005334431,
      -0.018006392,
      0.0028583645,
      -0.0080949105,
      0.02283608,
      -0.009612989,
      0.021286294,
      -0.023324266,
      -0.019275283,
      -0.0059327376,
      0.0097697815,
      -0.0041844146,
      0.015942352,
      -0.002839382,
      0.043339726,
      0.006904929,
      0.001668209,
      -0.012690378,
      0.016435197,
      -0.018883213,
      -0.0063507766,
      0.012070563,
      -0.0068566,
      -0.0077230674,
      0.008304245,
      0.020323507,
      -0.024584454,
      -0.0060395687,
      -0.014735412,
      -0.01745428,
      -0.0063445303,
      0.00003521601,
      -0.008316454,
      0.01503123,
      -0.001524092,
      0.007846638,
      0.0050454163,
      -0.017341532,
      0.0099934125,
      0.018763164,
      0.004385025,
      -0.008127703,
      -0.0043670456,
      -0.0062647797,
      -0.011295563,
      -0.008162539,
      0.002423317,
      0.0050278464,
      -0.006372423,
      0.010737563,
      -0.016960239,
      0.01863291,
      -0.00319416,
      0.0025652957,
      -0.002249848,
      -0.00047636547,
      -0.0013235558,
      -0.027074102,
      0.0049421852,
      0.01252246,
      0.00083160045,
      -0.0130647365,
      -0.0034450484,
      0.029757693,
      -0.0041933847,
      -0.011523076,
      -0.006939305,
      0.004887564,
      -0.004058678,
      0.0028044262,
      0.027152639,
      0.004685708,
      0.008868262,
      0.011094811,
      -0.02283995,
      0.029206354,
      -0.015387879,
      -0.01093249,
      0.0014097302,
      0.014968862,
      0.015769243,
      0.0022211785,
      0.0019108196,
      0.011345681,
      -0.0026827983,
      0.008794443,
      0.0012552376,
      0.019055717,
      0.00509829,
      0.008643173,
      0.0045945435,
      0.013460742,
      0.01523066,
      0.0068242284,
      0.026294524,
      0.006221356,
      -0.01552476,
      0.008418829,
      -0.00022829145,
      0.0070321993,
      0.0120844385,
      0.018314617,
      0.015935495,
      -0.02248022,
      -0.0100464495,
      0.0011514475,
      -0.0033872917,
      0.0139921205,
      0.020360196,
      0.010769989,
      -0.0013229782,
      -0.0011666479,
      -0.00663309,
      -0.022265367,
      0.010595642,
      0.01913151,
      -0.011964936,
      -0.0028602832,
      0.00598292,
      0.004487809,
      -0.043261465,
      -0.005005956,
      -0.004808713,
      0.02186792,
      -0.015344987,
      0.008377806,
      -0.008319121,
      -0.015774906,
      -0.014699531,
      -0.006493024,
      -0.029914813,
      -0.023588672,
      -0.011286575,
      -0.025993012,
      -0.009529538,
      0.024715979,
      -0.009845655,
      0.005047531,
      0.030984769,
      0.00087811955,
      -0.0050660716,
      0.00077536365,
      -0.0005149738,
      0.025875743,
      0.0048121507,
      -0.023221832,
      0.005352275,
      -0.095282614,
      0.01938902,
      0.008296667,
      -0.012724866,
      -0.0040566917,
      0.007520047,
      -0.02380006,
      0.021827916,
      0.023341881,
      0.011892665,
      0.01914905,
      -0.011232602,
      0.030491829,
      -0.02611298,
      -0.0010521049,
      -0.0007054326,
      0.0013311644,
      -0.029673455,
      0.027725298,
      -0.0006985992,
      -0.0032294712,
      -0.016122574,
      -0.008761403,
      -0.017431783,
      -0.000009345207,
      -0.006375603,
      -0.008376813,
      0.03487563,
      0.019189334,
      -0.005507443,
      -0.009739795,
      0.04602916,
      -0.001336261,
      -0.0019298284,
      0.008421799,
      0.017933091,
      -0.0026023542,
      -0.0043241037,
      0.008968479,
      -0.004030826,
      0.022756858,
      -0.0315334,
      0.025636198,
      0.019976564,
      0.0059224395,
      0.010103513,
      0.00018215767,
      0.018179754,
      -0.010785289,
      0.004157776,
      -0.0069902474,
      0.0033802001,
      0.0035300024,
      -0.017093163,
      0.020626683,
      0.01705065,
      -0.015147467,
      0.0016049288,
      0.015494477,
      0.014081705,
      -0.004408856,
      0.008586334,
      0.0037585876,
      -0.013269187,
      -0.00068138115,
      0.007285771,
      0.010863144,
      -0.0022023392,
      -0.021711944,
      0.010572997,
      -0.00951213,
      -0.001440848,
      0.008727808,
      -0.014784597,
      0.008432679,
      0.002234586,
      0.017661119,
      -0.011707405,
      -0.03282628,
      0.025448522,
      0.028778631,
      -0.0040510218,
      -0.0011487901,
      -0.0035123785,
      0.016576855,
      -0.00038080357,
      0.0013607296,
      -0.016790692,
      -0.009557482,
      -0.0063314354,
      0.01991809,
      0.022133822,
      -0.03202993,
      0.011490999,
      -0.031895928,
      -0.01656587,
      -0.008836817,
      -0.022267235,
      -0.020239785,
      0.0049419976,
      -0.014927199,
      0.018632652,
      -0.017968848,
      -0.007883223,
      -0.0049404497,
      0.012384072,
      -0.0059440015,
      -0.015856085,
      0.017635817,
      -0.01267484,
      0.00762452,
      0.008083168,
      -0.004264042,
      -0.01672833,
      -0.006346941,
      0.00037928185,
      0.0027119322,
      0.0063210954,
      0.00031503785,
      -0.03319305,
      0.0047848746,
      -0.018594567,
      -0.0022087411,
      0.01794659,
      0.0009920034,
      0.023975438,
      -0.02135473,
      -0.0016804709,
      -0.013716696,
      -0.030595735,
      -0.02714934,
      0.009653731,
      -0.023904532,
      -0.015657073,
      -0.009724158,
      -0.0018382947,
      0.022303093,
      0.03169846,
      0.010333808,
      0.0033060652,
      0.0023325172,
      0.009656203,
      0.026088934,
      0.0032174385,
      -0.023973037,
      0.035397466,
      -0.02318729,
      -0.010704458,
      0.013682406,
      -0.019818503,
      -0.018407498,
      -0.010109998,
      0.0003629779,
      0.00020962175,
      -0.013234477,
      0.0028766661,
      0.010816429,
      -0.024591839,
      -0.00832408,
      -0.021743538,
      -0.0013647592,
      -0.00532621,
      -0.010122403,
      0.008704924,
      0.030188274,
      -0.0029600346,
      -0.005053105,
      -0.0096859615,
      -0.001599719,
      0.009501407,
      -0.013809305,
      0.00080554286,
      -0.042255778,
      -0.02182893,
      0.021617943,
      0.016929492,
      -0.01781215,
      0.003666379,
      0.011433397,
      0.00913135,
      0.0074678063,
      -0.003134769,
      -0.012529651,
      0.010879738,
      0.0028052519,
      0.016371462,
      0.0230614,
      -0.01737819,
      -0.033610333,
      0.012263804,
      -0.0017837492,
      -0.0044048196,
      -0.0014062894,
      0.0210979,
      0.010104814,
      0.0237916,
      0.0024974449,
      -0.0015970449,
      -0.0020323165,
      0.0038366304,
      0.00401234,
      -0.007640004,
      0.019338021,
      -0.019882873,
      0.02520905,
      -0.018891463,
      -0.018412825,
      -0.009660747,
      0.015162344,
      0.0039880015,
      -0.017689778,
      0.0037906324,
      -0.0015140562,
      0.008237388,
      0.025856942,
      0.031649075,
      -0.0060223048,
      -0.0012493907,
      -0.020350397,
      -0.01763461,
      -0.005415498,
      -0.017119253,
      -0.020671885,
      0.0014940762,
      0.0012399929,
      0.016313355,
      -0.015018579,
      -0.00430683,
      0.0007725271,
      -0.007898825,
      -0.008983134,
      0.011058597,
      -0.033305287,
      0.023114078,
      -0.025427805,
      -0.017449247,
      0.019926628,
      0.015736325,
      -0.02196514,
      0.002116946,
      -0.005046407,
      -0.0039039736,
      0.014111023,
      0.028311538,
      0.011536787,
      -0.008017032,
      0.014315775,
      0.004537748,
      -0.009616352,
      -0.013189212,
      -0.0034301698,
      0.013199225,
      0.006690558,
      -0.0064647077,
      0.011263006,
      0.026765792,
      -0.0028481197,
      0.0048639877,
      0.004580277,
      -0.016168822,
      0.028312808,
      0.017533654,
      -0.003580076,
      -0.008291238,
      0.008905726,
      -0.024805605,
      -0.022914622,
      -0.017326409,
      0.013639056,
      -0.12832147,
      -0.009684363,
      -0.003138299,
      0.0087609,
      -0.022854595,
      -0.008837544,
      0.006098717,
      -0.023734016,
      0.00012655155,
      -0.0028556886,
      0.027437165,
      -0.004542105,
      -0.0020348025,
      -0.017774189,
      0.00932557,
      -0.024944892,
      0.0065836394,
      0.0072340723,
      0.012141922,
      0.00019935386,
      -0.013598023,
      0.0045826617,
      -0.0072887866,
      -0.0023833865,
      -0.01509839,
      -0.018027816,
      0.0063126916,
      0.018741813,
      -0.0019767582,
      0.0053220456,
      -0.020648062,
      0.010730208,
      0.0056676683,
      0.010120773,
      0.0060558566,
      -0.0208415,
      -0.021978721,
      0.019792685,
      0.015909819,
      0.0023386562,
      -0.014306069,
      -0.009269036,
      -0.0035383708,
      0.005311083,
      -0.015697569,
      0.022485297,
      0.015617302,
      -0.016010795,
      -0.008658889,
      0.016467761,
      -0.03911514,
      -0.012157238,
      0.0010003236,
      -0.040935922,
      -0.008333304,
      0.0018275375,
      0.00053326896,
      -0.016579613,
      0.0041759177,
      -0.029900141,
      -0.009379243,
      0.0018369495,
      0.012667278,
      0.02056951,
      -0.0012617552,
      -0.0026098592,
      0.036310654,
      0.0016996558,
      0.011827698,
      -0.027928736,
      0.011203965,
      0.015999196,
      -0.008565455,
      0.017766349,
      0.006259657,
      -0.020183792,
      0.037984613,
      0.008413717,
      -0.0075445967,
      -0.0026066909,
      -0.0105710905,
      0.0022392464,
      -0.04590985,
      -0.008241013,
      0.017126445,
      0.009590305,
      -0.0009177395,
      0.002151478,
      -0.026137918,
      0.0025206846,
      0.0154634835,
      -0.0015442747,
      -0.04513304,
      -0.0064718705,
      0.027405227,
      0.0123718735,
      -0.016770383,
      -0.013297605,
      -0.0023544629,
      -0.024940208,
      -0.0012065899,
      0.010081183,
      -0.019106314,
      0.016569456,
      0.005978527,
      -0.028344305,
      0.017449748,
      0.01160316,
      -0.011991346,
      -0.0014032054,
      0.0059270444,
      0.009652982,
      0.004336449,
      -0.15707822,
      -0.014388881,
      0.006363561,
      0.010398637,
      0.006616117,
      -0.016070923,
      -0.000179487,
      -0.013618136,
      0.007370427,
      0.004720393,
      0.0041173194,
      -0.016463289,
      -0.017952869,
      -0.008560808,
      0.01636589,
      0.12440773,
      0.0011398975,
      0.0056973896,
      -0.03202924,
      0.009404338,
      -0.0028665015,
      -0.030030372,
      -0.013369674,
      0.006558614,
      -0.012487777,
      -0.02923308,
      0.02450376,
      -0.018162053,
      -0.00061189954,
      0.0044233846,
      0.008366356,
      -0.0032458992,
      0.0069461176,
      0.022927081,
      0.0005528321,
      0.0055452078,
      -0.0060836542,
      0.0053032977,
      0.005802422,
      0.018596692,
      0.02558204,
      -0.002260344,
      -0.0019061923,
      0.008755109,
      0.003544056,
      0.006197337,
      -0.03255202,
      -0.01754023,
      -0.0077944547,
      0.006117487,
      0.001396448,
      -0.06251982,
      0.007253811,
      -0.010095872,
      0.00072017306,
      0.01516781,
      -0.013651957,
      0.01822139,
      0.0019256157,
      0.004761657,
      -0.024664572,
      -0.0056412183,
      0.0044800327,
      0.013613168,
      0.007625911,
      0.0049113897,
      0.018972052,
      0.012894761,
      0.014181969,
      -0.01042825,
      0.0015690785,
      0.014490633,
      0.0076745697,
      0.019183483,
      -0.011706817,
      -0.0021833743,
      -0.021269748,
      0.019437144,
      0.008519377,
      -0.0028816175,
      0.00456819,
      -0.0085698515,
      -0.0119701745,
      -0.009143075,
      0.01551972,
      0.00811275,
      -0.026383707,
      0.011437245,
      0.0073793624,
      -0.009037281,
      -0.0010883233,
      -0.0043609254,
      0.011069048,
      0.0033639616,
      0.00038704826,
      0.017923435,
      -0.0008043204,
      -0.0045613605,
      0.021062776,
      -0.00554734,
      -0.013472166,
      0.0060162204,
      -0.016667467,
      -0.0364528,
      0.03407724,
      0.006990965,
      0.003038321,
      0.02587027,
      0.0035752258,
      -0.0014818087
    ]
  },
  {
    "id": "genai_cohort_python_02_Tea_Token_Dispenser_vtt",
    "content": "All right, so we have our very first 2 problem already in front of us. 3 Let me remove myself from 4 here so that we can focus fully 5 on the screen itself. 6 So notice here we have 7 a problem statement written. 8 And just like previous ones, we will 9 just focus on one thing first. 10 Understand the problem, and then 11 we'll write the code for it. 12 Let's prepare the code 13 material first because we have 14 to create a new folder. 15 Let's call this one as 04 loops. 16 So much code that we have written. 17 Let me write that again. 18 Made a mistake. 19 Mistakes are part 20 of writing the code. 21 We'll call them as loop or loops. 22 Both are interchangeable word. 23 So, all right, what's the problem? 24 What kind of software 25 we want to build? 26 The software is pretty easy. 27 A T stall owner has a digital 28 token display. 29 All right. 30 Pretty common. 31 We have seen that 32 in the queue system. 33 Might be T staller, might be 34 in the hospital queues everywhere. 35 For every customer in line, 36 a token number is printed 37 and chai is served. 38 Okay, so task use a for loop 39 to generate a token number between 40 from 1 and 10 using range. 41 So we'll see the implementation 42 of range as well. 43 And print servingchai 44 to token and then also print 45 the token number as well. 46 So this might sound. 47 Okay, I don't know how 48 to even start with that. 49 So because this is all 50 new, you haven't looped 51 through anything at all. 52 So, so how we can print this. 53 And if you see this closely, 54 the goal is pretty simple. 55 The first goal is learn how to use 56 range so that you can generate 57 number between 1 and 10 and then 58 simply print this message 10 times. 59 But the only thing that's 60 changing all the 10 times is 61 the number, hashtag, then 62 whatever the number is here. 63 So that should be pretty. 64 Okay, let me walk you 65 through with the syntax. 66 And I think this is one 67 of the best way to learn about this. 68 So we'll create the new file 69 and I will call this one 70 as, let's just say 01. 71 And this will be token dispenser. 72 That's what it is doing. 73 It's dispensing the token. 74 Of course we have 75 to go through with py. 76 All right, I'll, shut up my AI. 77 Otherwise it will disturb us. 78 There we go, moving nicely. 79 And let me expand this. 80 All right, so how do we start Loop? 81 Loop always starts with the keyword 82 for yes, there is another one while, 83 but this is always how it starts. 84 Then you simply declare a variable. 85 I will call this variable as token. 86 Now feel free to call 87 this as anything. 88 This is just a Variable. 89 Now once you have decided 90 the variable, then you put up 91 the keyword in and then you decide 92 where you want to loop through. 93 This is the range you give and this 94 can be any iteratable object, it can 95 be a list, it can also be a string. 96 But in this case we will 97 learn how the range works. 98 So this is range. 99 This automatically comes 100 up with the python. 101 And here you give a start and a stop 102 range to this one. 103 So my starting point is one, 104 I want to start with one 105 and I want to go till the 10. 106 So I will just put 11 here because 107 range are not inclusive in 108 the manner so it will start with 1, 109 1, 2, 3 so on will go till the 10. 110 As soon as it goes 11, 111 this is not inclusive. 112 Then hit a column and then hit enter. 113 Automatically the indentation comes 114 up. 115 So I'll just go ahead and say 116 print and then the message, 117 what's the message? 118 We have to get serving chai to token 119 and then token number as well. 120 So we'll just go ahead and say 121 serving chai to token and then put 122 up a hash and then the token number. 123 So this token, the variable 124 that we have declared here, this 125 could be anything right now 126 token makes sense for us so 127 we are calling it as token. 128 But this could be anything. 129 This could be hitesh. 130 This could be chai, this could 131 be index, whatever you like. 132 This will be the range will keep 133 on producing the number. 134 For example 1, the variable 135 will first iteration it will 136 go ahead and say that hey, 137 this is now number one. 138 So let's draw actually a diagram 139 to understand this a little 140 bit that how the whole 141 processing actually works. 142 So this is your range. 143 So in this range your numbers 144 will keep on starting. 145 So I just say that hey, in the range 146 I will have the number one first. 147 And we have also created 148 a variable here. 149 That variable is token token. 150 And the value of the token 151 right now is exactly what 152 you have produced here. 153 So I'll just go ahead and come 154 up here and then simply you do what 155 is the task that I have to do. 156 So everything that you see after 157 indentation, this is the task. 158 So I will just go ahead and say hey, 159 I want to produce or do a task. 160 So I'll just go ahead 161 and put up a task here. 162 There we go. 163 We do a task like this. 164 So I'll just shrink this 165 because it doesn't make sense 166 to have it big and wide. 167 Whatever the task is, it could be one 168 line of task, it could be hundred 169 line of task, doesn't really matter. 170 So as long as we are keeping 171 printing this range. 172 So notice here the range is 1. 173 So first of all it will go 174 ahead and do this task. 175 Then it will come back again. 176 The range will again 177 produce a new number. 178 So it will be two. 179 This number will also be two. 180 It will again go ahead and say that. 181 Hey, now we want 182 to print this one here. 183 Again, sorry for the 2a, 184 it's actually 2. 185 Then we'll go ahead 186 and change the number 3. 187 This will also get 3. 188 So the display 189 of the variable will be 3. 190 So we'll just go ahead 191 and display it like 3. 192 Eventually the number will 193 reach to a point where 194 it is out of the range. 195 We don't have any range. 196 So it will go to 11. 197 11 we don't want to print. 198 So it will just end it up there. 199 And just before that it will be 10. 200 So the number here will 201 become 10 and for the 10 202 type it will go ahead. 203 Oops. 204 It will go ahead and print this one. 205 So this will be the last one. 206 So the 10th number will be last. 207 That is how it works. 208 Pretty simple. 209 You asked it to work on 10 210 times, it is working 10 times. 211 That's the most simplest 212 and basic loop. 213 Let's go ahead and run this 214 so that we can just finally 215 validate what's going on. 216 So I'll just go ahead and say 217 hey Python, I want to run 218 inside the 04 and probably I want 219 to wrong one, delete this. 220 Open an integrated terminal 221 on this one and we'll say Python 3. 222 Just run this file and there we go. 223 So we can see we just added 224 the value token here. 225 And notice here it just always says 226 token, token, token just like that. 227 So this is a little bit of a strange 228 that why we got this one. 229 I'm pretty sure you might 230 have debugged this already. 231 This is not a special string 232 that we are printing. 233 So what wrong we are doing? 234 Just forgotten a F here. 235 I hope that was easy to catch. 236 This was not intentional. 237 I also did a mistake. 238 But again, don't panic 239 on the mistake. 240 It's okay. 241 We always fix those mistakes. 242 So we can see now we have 243 all the values till the 10. 244 And once the 10 was hit, that is it. 245 The loop ended. 246 Pretty good example to work on with. 247 I hope you have enjoyed this. 248 Along with this nice small diagram, 249 we will be keep on drawing them. 250 That is it for this video. 251 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 Tea Token Dispenser.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/02 Tea Token Dispenser.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.018665748,
      0.024449268,
      0.013166015,
      -0.053173605,
      -0.018731713,
      -0.0044470313,
      -0.005307856,
      0.007953836,
      -0.008579117,
      0.006672069,
      -0.008183391,
      -0.03759159,
      0.0006031294,
      0.026818885,
      0.1256752,
      0.009393357,
      -0.0028067601,
      -0.024843471,
      0.0017637103,
      -0.017201096,
      -0.018000845,
      -0.008519326,
      0.023244083,
      -0.013785469,
      0.0029766762,
      0.008110532,
      -0.0014580224,
      0.025919965,
      0.044790242,
      -0.019423319,
      -0.029500365,
      -0.010417609,
      0.010937607,
      0.021253299,
      -0.00863396,
      0.023766216,
      0.012776807,
      0.00036509853,
      -0.016680256,
      -0.00023874643,
      -0.0128700575,
      -0.006398172,
      0.0048696534,
      -0.011995646,
      0.010137066,
      -0.0155041395,
      -0.0345489,
      -0.036111202,
      0.011193981,
      0.016598385,
      0.0120535195,
      0.0016298557,
      -0.0069023813,
      -0.18292186,
      0.009667839,
      0.0064363615,
      -0.0038471266,
      0.015381223,
      0.01024427,
      -0.009493792,
      -0.012653623,
      -0.0010644007,
      -0.040733952,
      -0.014873179,
      -0.012109306,
      -0.033771392,
      0.02920259,
      0.0056944257,
      0.002309099,
      0.0036843866,
      0.014947752,
      0.016882682,
      -0.008657461,
      -0.0015934941,
      -0.027812565,
      -0.027025426,
      0.010735737,
      -0.0027488903,
      0.002171099,
      0.0148396585,
      -0.00024170023,
      -0.012004509,
      -0.0036378384,
      0.0020105916,
      0.019608524,
      -0.005406807,
      -0.033462204,
      -0.013121873,
      0.003592265,
      -0.006914293,
      -0.028549463,
      0.01655121,
      -0.0030178488,
      -0.0052599073,
      -0.0041014464,
      -0.0046973354,
      -0.0038737308,
      0.0053544217,
      -0.00524512,
      -0.0050182403,
      0.0098221,
      -0.01021309,
      -0.033481818,
      0.0024195714,
      0.0081198085,
      0.0027130363,
      -0.011844134,
      -0.028733566,
      0.0062948717,
      -0.011298581,
      -0.0050725196,
      -0.008754633,
      0.016968397,
      0.020168856,
      0.00399899,
      -0.16963707,
      0.022756714,
      0.0047938796,
      -0.010443137,
      -0.009691044,
      -0.01876226,
      -0.003268233,
      -0.0038603272,
      0.03333933,
      -0.024581993,
      0.015886415,
      -0.013592083,
      0.037219394,
      0.009961488,
      -0.0025953387,
      -0.037614506,
      -0.01661963,
      0.001767834,
      0.015191727,
      -0.009570201,
      0.016353838,
      -0.024347743,
      -0.0072559216,
      -0.012481119,
      -0.011616859,
      -0.015307285,
      0.022628626,
      -0.0019159407,
      0.02229648,
      0.004242697,
      -0.008644676,
      -0.030392205,
      0.023267845,
      -0.013052944,
      -0.023611873,
      0.009300261,
      -0.023342052,
      0.0036494173,
      -0.010471722,
      0.019967701,
      -0.033990737,
      -0.007967206,
      -0.0042571397,
      -0.018376907,
      -0.0012956543,
      0.018865125,
      -0.0137101775,
      0.010821878,
      0.012614673,
      -0.005761563,
      0.014944788,
      -0.011371605,
      0.006411625,
      0.006242824,
      -0.0051443875,
      0.0046221614,
      -0.008543342,
      0.0009789547,
      -0.0025006072,
      0.002930661,
      0.006423962,
      0.006274187,
      -0.014052125,
      0.01390801,
      0.0036636337,
      0.018628014,
      -0.011831255,
      0.005841163,
      0.0023476565,
      0.00533528,
      0.0033899075,
      -0.029294966,
      0.006247101,
      0.018212996,
      -0.012474647,
      -0.013840514,
      -0.002450954,
      0.029228719,
      0.0025904418,
      0.008234448,
      -0.014338054,
      -0.0146948015,
      -0.0035242517,
      0.006909126,
      0.018270303,
      0.0031004439,
      -0.0008923738,
      -0.008254589,
      -0.016827164,
      0.033159062,
      -0.033262365,
      -0.009788395,
      -0.0039915657,
      0.019097645,
      0.02614779,
      -0.0066194283,
      -0.010733662,
      0.009562291,
      0.011723289,
      0.015317275,
      -0.010215319,
      0.009415018,
      0.009182173,
      0.0010976444,
      0.0035914865,
      0.022839729,
      0.01284121,
      0.0080496045,
      0.013638474,
      0.0066617886,
      -0.009445388,
      0.0071604797,
      0.020605912,
      0.016637934,
      0.0066605457,
      0.035267703,
      0.01663728,
      -0.010944635,
      -0.0035755371,
      0.0046535204,
      -0.011909244,
      -0.00018986202,
      0.014414062,
      0.005071712,
      0.00618289,
      0.00740967,
      0.014751848,
      0.0024110866,
      0.021739688,
      0.04071613,
      -0.00077810773,
      0.00765348,
      0.01402617,
      -0.011927638,
      -0.028668119,
      -0.004157181,
      -0.014631819,
      0.013136413,
      -0.015785787,
      0.009457123,
      -0.01163911,
      -0.021738684,
      -0.013038994,
      -0.015245671,
      -0.016189683,
      -0.028796805,
      -0.013048882,
      -0.019695766,
      -0.0021634623,
      0.024312358,
      -0.006364291,
      0.015021238,
      0.02735764,
      -0.013470379,
      0.0071295053,
      0.00014628566,
      0.011092885,
      0.008419117,
      -0.0048949267,
      -0.021016903,
      0.024154993,
      -0.11040486,
      0.008973054,
      0.0046939626,
      -0.012535727,
      -0.007913553,
      0.010675781,
      -0.015855,
      -0.016917394,
      0.014427328,
      0.0115296645,
      0.0057138857,
      -0.0035068232,
      0.023150645,
      -0.02346513,
      0.008358093,
      0.0034160516,
      0.0010417637,
      -0.024927996,
      0.036477946,
      0.013769354,
      -0.008646489,
      -0.0043299957,
      -0.016909456,
      -0.023632687,
      0.012383305,
      -0.0077802124,
      -0.01163549,
      0.029922402,
      0.011519517,
      -0.015241273,
      -0.0077659944,
      0.0377703,
      0.0056040487,
      -0.01654461,
      -0.00023729108,
      0.018439874,
      0.025682637,
      -0.0055116927,
      0.016063752,
      -0.0041809306,
      0.017746417,
      -0.0255108,
      0.03251268,
      0.029447641,
      -0.0058300234,
      0.0057817884,
      0.009371297,
      0.015004956,
      -0.019266093,
      0.012488981,
      -0.015694283,
      0.034021508,
      -0.0072854357,
      -0.011959591,
      0.00077162014,
      0.02209232,
      0.0076706265,
      0.013623677,
      0.0154262055,
      0.03327862,
      -0.012498252,
      -0.0010843857,
      0.008953332,
      0.004607778,
      -0.0032253389,
      -0.007778254,
      0.019269628,
      -0.015082399,
      -0.028304325,
      0.0002465493,
      0.0024100936,
      -0.00895599,
      0.0065943897,
      -0.009183509,
      -0.010708184,
      -0.00693606,
      0.019587677,
      -0.024426686,
      -0.032163616,
      0.030443707,
      0.022784883,
      -0.008863567,
      -0.012024844,
      0.005374533,
      0.011215651,
      0.010546846,
      -0.006757572,
      -0.010356366,
      -0.0045020157,
      -0.011394351,
      0.024669504,
      0.023605255,
      -0.028025072,
      0.013194796,
      -0.034735613,
      -0.013398105,
      -0.032033898,
      -0.01092552,
      0.000103065526,
      0.0022602957,
      -0.02250742,
      -0.0033901297,
      -0.01712023,
      -0.0113617275,
      -0.009021747,
      -0.0011348756,
      -0.009532977,
      -0.018696332,
      0.005010021,
      -0.023910923,
      0.003513772,
      -0.0063531552,
      -0.012807351,
      -0.009164524,
      -0.014818989,
      0.0010434154,
      -0.009867346,
      0.0011863974,
      0.00040043157,
      -0.023366626,
      -0.00056764466,
      0.0050539137,
      0.0014391615,
      0.012869237,
      0.00655795,
      0.010556537,
      -0.01499621,
      0.011821077,
      -0.013948378,
      -0.029053757,
      -0.048898242,
      0.020475097,
      -0.01003526,
      -0.009451825,
      -0.0066807717,
      -0.013697413,
      0.018739272,
      0.027152125,
      0.022613255,
      0.0048426404,
      -0.0062855845,
      -0.0015300411,
      0.008935105,
      -0.010511685,
      -0.015874876,
      0.018015616,
      -0.02179306,
      -0.01117907,
      0.009169755,
      -0.020396741,
      -0.020514905,
      -0.027150298,
      -0.007509621,
      -0.018247832,
      0.002295317,
      0.00583826,
      0.009300814,
      -0.019634845,
      -0.006902956,
      -0.004551619,
      -0.00917066,
      -0.00829707,
      -0.004991237,
      -0.012567343,
      0.018216833,
      -0.00384693,
      -0.0074085705,
      -0.014502104,
      -0.007900245,
      0.013948844,
      0.00019636413,
      -0.008863563,
      -0.041740652,
      -0.021223184,
      0.018051622,
      0.006511522,
      -0.012494454,
      -0.007577072,
      0.024138302,
      -0.017007858,
      0.011715231,
      0.01294088,
      -0.008627053,
      0.01314754,
      0.012860795,
      0.015436951,
      0.018476056,
      0.0018584857,
      -0.038389977,
      0.0063896924,
      0.0131159425,
      -0.03240955,
      0.015050388,
      0.013627979,
      -0.012803944,
      0.02806613,
      0.0009200658,
      -0.00843482,
      -0.017882492,
      0.005976736,
      0.018711286,
      0.009134827,
      0.015543845,
      -0.006006251,
      0.0075319135,
      -0.019148769,
      -0.015249493,
      -0.010601371,
      0.007925869,
      0.02741499,
      -0.0057597994,
      -0.007144633,
      -0.0042217546,
      -0.0057134205,
      0.02520832,
      0.025388947,
      -0.02409898,
      0.01599569,
      -0.017850732,
      -0.004581734,
      0.0044402503,
      -0.0027842561,
      -0.011753795,
      -0.0042144004,
      -0.0056418767,
      0.006733068,
      -0.007752553,
      -0.009677435,
      0.0027986052,
      -0.000035944875,
      -0.012599924,
      -0.0056314724,
      -0.02500527,
      0.0103782965,
      -0.02342688,
      -0.0076216604,
      0.012759127,
      0.010315569,
      -0.0092353355,
      0.015791086,
      -0.020417957,
      -0.013962843,
      -0.011734969,
      -0.0026196018,
      0.017620847,
      -0.018373165,
      0.0042467094,
      0.00573848,
      0.0034113647,
      -0.0010792452,
      0.0027871362,
      -0.0018685815,
      -0.00069054315,
      -0.006427985,
      0.0041002277,
      0.033722542,
      0.0024616679,
      0.0001737398,
      0.00868173,
      -0.01380774,
      0.0236286,
      0.011172507,
      0.0076850588,
      0.0048341365,
      -0.005839962,
      -0.023623211,
      -0.035063084,
      -0.008370281,
      0.0076352516,
      -0.1300503,
      0.0069359615,
      0.0076584145,
      0.0028287973,
      -0.018193481,
      -0.02393268,
      0.011725277,
      -0.024947822,
      -0.015557323,
      -0.009660687,
      0.027408704,
      -0.013283576,
      0.00014207988,
      -0.018536976,
      -0.015538334,
      -0.01322626,
      0.019928312,
      0.02570288,
      0.024605535,
      0.009426746,
      -0.018885514,
      0.00701912,
      0.0031059238,
      -0.0031958441,
      -0.00706132,
      -0.013443187,
      0.008435514,
      -0.00087228074,
      0.0022048524,
      0.0019102144,
      -0.024231823,
      0.010388539,
      -0.01310351,
      0.022141317,
      0.021491155,
      -0.01716712,
      -0.015264703,
      0.0016967836,
      0.028789802,
      0.010645687,
      -0.011912687,
      0.0017847718,
      0.010513519,
      0.002555022,
      -0.0008639011,
      0.030860242,
      0.0134729175,
      -0.016588744,
      -0.017352909,
      0.021493066,
      -0.033742476,
      -0.015432744,
      -0.02441638,
      -0.02984234,
      -0.005654607,
      0.008873136,
      0.0021603908,
      -0.0007416042,
      -0.009846166,
      -0.022602623,
      0.011227909,
      -0.0058416645,
      0.013671411,
      0.025418447,
      -0.00814729,
      0.014516114,
      0.037718803,
      0.0007373463,
      0.006924447,
      -0.016555982,
      0.0069056465,
      -0.0010890053,
      -0.00006236248,
      0.008408667,
      0.011001102,
      -0.004735582,
      0.021063762,
      0.019551272,
      0.0024597296,
      0.022077248,
      -0.019344358,
      0.0025930484,
      -0.05978452,
      -0.008210002,
      0.013648089,
      0.011969831,
      0.009007274,
      0.013961201,
      -0.01909845,
      -0.009629508,
      -0.00074448506,
      -0.0025257145,
      -0.017443394,
      0.000103490645,
      0.02181156,
      0.0141504165,
      -0.008882247,
      -0.008008534,
      -0.015691638,
      -0.021021707,
      -0.032062884,
      0.024166003,
      -0.019838916,
      0.013403735,
      0.009736022,
      -0.01783984,
      0.003689883,
      0.005965688,
      -0.012391851,
      -0.011298702,
      -0.0033974112,
      0.006160362,
      0.0013723664,
      -0.15862711,
      -0.019276284,
      0.011998296,
      0.0059535424,
      -0.00060078996,
      -0.010389103,
      -0.011452104,
      -0.010297483,
      -0.002412252,
      0.00032674416,
      0.0092679225,
      -0.002288951,
      -0.009605437,
      -0.0067523154,
      0.030129138,
      0.12578613,
      -0.009860278,
      0.010743661,
      -0.01664438,
      0.023087868,
      0.011535255,
      -0.02174368,
      -0.023952976,
      -0.002128801,
      -0.029713972,
      -0.020908512,
      0.025446478,
      -0.022911817,
      0.0028821835,
      0.019129418,
      -0.007881428,
      0.008088403,
      -0.00076147745,
      0.01908864,
      -0.0024869808,
      -0.017524017,
      -0.015775705,
      0.014651761,
      -0.0022395062,
      0.0138715925,
      0.01680118,
      -0.00021714876,
      -0.0018819382,
      0.014376457,
      -0.00089386496,
      0.0045425394,
      -0.037071943,
      -0.023524994,
      0.017724141,
      0.0031753904,
      -0.0011153035,
      -0.067339815,
      0.0020870755,
      -0.021571752,
      -0.007681662,
      0.028316457,
      0.009154922,
      0.00781916,
      0.013795319,
      0.009877614,
      -0.016046604,
      -0.0040219035,
      0.0027880438,
      0.009766176,
      0.027240776,
      0.014656049,
      0.014682603,
      0.00022330116,
      0.0089951595,
      -0.008064436,
      0.004210229,
      0.010316218,
      -0.0063373297,
      0.017483464,
      -0.0074424846,
      -0.004188393,
      0.0018672756,
      0.020791216,
      0.008539615,
      -0.006612608,
      -0.01301932,
      -0.008036856,
      0.005746436,
      -0.01205726,
      0.008824813,
      0.010901981,
      -0.015230448,
      0.0036549773,
      0.0045348294,
      -0.00036769608,
      0.019987343,
      -0.009490067,
      0.002580111,
      0.008119217,
      0.0045287926,
      0.01919311,
      0.0028565829,
      -0.0054260716,
      0.029264824,
      -0.017283926,
      -0.00012047843,
      -0.02382631,
      -0.018754477,
      -0.031073727,
      0.025932513,
      0.009305387,
      0.0009887663,
      0.041466758,
      -0.008304862,
      -0.008483362
    ]
  },
  {
    "id": "genai_cohort_python_03_Batch_chai_preparation_vtt",
    "content": "All right, welcome to another 2 challenge that we are 3 going to do in this one. 4 And this will sound a little bit 5 similar because sometimes 6 reputation is also quite necessary. 7 So let's see this problem. 8 A, chai shop makes 9 T in batches every 15 minutes. 10 Now don't pay too much attention. 11 15 minutes. 12 We are not going to be stopping our 13 program for 15 minutes for that. 14 We just want to simulate that. 15 You want to simulate four batches. 16 So the point is, the important 17 part is that we want 18 to simulate four batches. 19 The task is pretty simple. 20 Use the range method to simulate 21 the batch numbers and prepare 22 the chai for the batch. 23 The whole point that I want you 24 to see in this entire problem is we 25 want to simulate four batches. 26 So use the range for simulating 27 the four batches and then 28 print the number for each batch. 29 It's a pretty similar problem that we 30 did in the token dispenser as well. 31 So this is kind 32 of a reputation, but this is okay. 33 Sometimes reputation 34 is actually good. 35 So let's call this 36 one as 02 underscore. 37 And this is, batch chai. 38 So I'll just move my 39 keyboard a little. 40 Batch chai py of course. 41 There we go. 42 And, now let's try to use a simple 43 for loop for batching this. 44 Now for is a keyword. 45 Then we can name the variable. 46 Let's call this as batch, but feel 47 free to call this whatever you like 48 then in and provide your 49 range or anything like that. 50 And again, we'll close our AI so that 51 we can actually discuss these things 52 and then simply go with the range. 53 Now you want to simulate range 54 of how many numbers? 55 So I want to simulate 56 a range of four batches. 57 Now we have couple of options 58 of how this actually works. 59 Range can have a start value 60 and can have end value or just 61 have an end value as well. 62 We'll start with the value 63 of one because I want to start 64 the range not from the zero 65 but from a starting number. 66 And then I'll go till 5. 67 As I mentioned, range is 68 non inclusive 69 in the programming languages. 70 So five is not going to be inclusive. 71 We'll get the range till the four, 72 put up a colon sign, hit the enter, 73 and this is where we are right now. 74 Let's go ahead and print the values. 75 Pretty easy. 76 Use the formatted strings and put up 77 a message, something like preparing, 78 prepare ring chai for batch. 79 And then we'll provide 80 the batch number. 81 So we'll use a pound sign 82 or a hash sign, whatever 83 you want to call this. 84 We'll inject the curly braces to 85 get this variable and the variable 86 will automatically increase. 87 We don't have to do anything. 88 That is it. 89 Pretty simple example 90 and pretty nice one. 91 Let's open our integrated terminal 92 just right here and use Python. 93 And for this we will open 94 up the 02 file. 95 There we go. 96 And notice here it it's preparing 97 exactly for four batches and this 98 is exactly what we wanted. 99 So pretty simple problem. 100 But now that we have this 101 problem, I am super happy 102 that we did it together. 103 It will give you a good reputation as 104 well as more confidence in the loop. 105 Now let's move on to the next video 106 and take down the next challenge.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 Batch chai preparation.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/03 Batch chai preparation.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0061786724,
      0.02067655,
      0.031109354,
      -0.0779209,
      -0.018903734,
      -0.004801871,
      0.003803899,
      0.019520903,
      0.006633588,
      0.009628884,
      0.0012922261,
      -0.02324774,
      0.0063058618,
      0.032098774,
      0.12617943,
      0.016448293,
      -0.0033576698,
      -0.03196134,
      0.010402385,
      -0.021600075,
      -0.018763091,
      -0.010797156,
      0.020567153,
      -0.013589882,
      0.012183596,
      -0.011060485,
      0.010064739,
      0.01652931,
      0.036893692,
      -0.008728672,
      -0.019961618,
      -0.0016827356,
      0.029074576,
      0.02308338,
      -0.010970093,
      0.025303315,
      0.016442396,
      -0.008715154,
      -0.0063373777,
      -0.00095494307,
      -0.007340445,
      -0.0034511231,
      0.008410222,
      -0.013581285,
      0.0040994724,
      -0.029208412,
      -0.03099526,
      -0.028594172,
      0.01468501,
      0.013608101,
      0.006014562,
      -0.003438559,
      -0.01015543,
      -0.16531904,
      0.015299956,
      -0.0024240469,
      0.0027597072,
      0.013402987,
      0.027477173,
      -0.011423006,
      -0.016991392,
      -0.0010483689,
      -0.049001284,
      -0.0010996985,
      -0.01428354,
      -0.03346514,
      0.017192326,
      0.005072212,
      -0.0050878744,
      -0.012594725,
      0.02047192,
      0.004624356,
      -0.019909583,
      -0.003017081,
      -0.011498482,
      -0.03218294,
      0.005069311,
      -0.011569531,
      0.002985079,
      0.013182747,
      0.009779242,
      -0.018775381,
      -0.0071032443,
      -0.0011709927,
      0.018203035,
      0.00020190544,
      -0.024028322,
      -0.017161407,
      0.0057635335,
      -0.021097606,
      -0.049477484,
      0.014706486,
      0.0018014263,
      -0.0048724557,
      -0.0069215177,
      0.008429419,
      -0.0058757537,
      0.008134445,
      -0.0219764,
      -0.011981433,
      0.0064720083,
      -0.0075254403,
      -0.015709108,
      0.0016031613,
      0.01269252,
      -0.0037282007,
      -0.006336683,
      -0.028949318,
      0.016813107,
      0.00054994953,
      -0.0047031883,
      -0.0057601347,
      0.013237375,
      0.017495723,
      0.011974893,
      -0.1678431,
      0.024607655,
      -0.00072242465,
      -0.015553677,
      -0.0037157421,
      -0.012474129,
      0.0013925072,
      0.0061619105,
      0.027920034,
      -0.010719959,
      0.018622022,
      -0.000008273359,
      0.031004168,
      0.010074482,
      0.014542369,
      -0.0136711905,
      -0.009950198,
      0.0062736953,
      0.01198612,
      -0.010722136,
      0.0047589573,
      -0.0061096777,
      -0.0038290555,
      -0.010457761,
      -0.005896301,
      -0.010812856,
      0.027304484,
      -0.005352535,
      0.011131406,
      -0.00012885606,
      -0.018783297,
      -0.019014245,
      0.022557346,
      -0.0119661465,
      -0.014417165,
      0.011109077,
      -0.0316421,
      0.0058445046,
      -0.004125318,
      0.029477915,
      -0.0395282,
      -0.01561861,
      0.00052301347,
      -0.016738283,
      0.013727862,
      0.013134127,
      0.0036798206,
      0.0039177677,
      0.004552342,
      -0.0010678754,
      0.013464232,
      0.0073205126,
      0.012831129,
      -0.0014316667,
      -0.0022415565,
      0.0009877558,
      -0.011765094,
      -0.0037618016,
      -0.010838856,
      0.0015311133,
      -0.00040145617,
      0.0046520527,
      -0.011401979,
      0.012218546,
      -0.0036029022,
      0.0064656325,
      -0.017485652,
      -0.005019436,
      -0.0033103726,
      0.009464846,
      -0.0073569473,
      -0.02946074,
      0.019491447,
      0.019771887,
      -0.005542561,
      -0.016578024,
      0.00092345965,
      0.030177992,
      0.006902099,
      0.006612873,
      -0.017878354,
      -0.014891989,
      -0.005100977,
      0.0040080207,
      0.0030947404,
      0.010685665,
      -0.004027074,
      -0.009549314,
      -0.0076820096,
      0.021313587,
      -0.016912077,
      -0.008307261,
      0.009820757,
      0.011212479,
      0.018979462,
      -0.004434312,
      -0.003358128,
      0.0113060195,
      0.015716648,
      0.0045214538,
      -0.0006584116,
      0.022366384,
      -0.0070199724,
      -0.0016519633,
      -0.0015560202,
      0.036816526,
      0.019387025,
      0.0016657592,
      0.010805127,
      0.001079878,
      -0.023940742,
      0.007677349,
      0.020975614,
      0.0014286877,
      0.012555527,
      0.04412497,
      0.01906992,
      -0.013377183,
      -0.0015762658,
      0.0066544064,
      -0.012184099,
      -0.0069078603,
      0.012236899,
      0.015617206,
      -0.010652992,
      -0.0040230844,
      0.0069950223,
      0.009112293,
      0.0039662817,
      0.039782394,
      -0.007498895,
      0.013153249,
      0.0073381523,
      -0.00773436,
      -0.016805623,
      -0.0010465956,
      -0.010329238,
      0.015986921,
      -0.009636959,
      0.012072506,
      -0.007864509,
      -0.001617131,
      -0.021162314,
      -0.017495338,
      -0.010312216,
      -0.014709329,
      0.008095167,
      -0.0135782715,
      -0.020188695,
      0.009353228,
      0.00013459794,
      0.011978438,
      0.027444057,
      -0.014794128,
      0.014193612,
      0.0068969885,
      0.011571679,
      0.013393926,
      -0.00402949,
      -0.03899656,
      0.019982006,
      -0.11200046,
      0.019261733,
      -0.0041485024,
      -0.006753187,
      0.0041814763,
      0.0104899425,
      -0.013993083,
      -0.019113524,
      -0.0021684985,
      0.009949666,
      -0.0013442879,
      -0.008485438,
      0.019062744,
      -0.028797789,
      0.0035218599,
      -0.00009429175,
      -0.0063715926,
      -0.020258684,
      0.03694288,
      0.0052798153,
      -0.0048083947,
      -0.008268193,
      -0.013874493,
      -0.009300521,
      0.011485905,
      -0.0043214797,
      -0.0098239975,
      0.039860927,
      -0.008275524,
      -0.0050263572,
      -0.013233515,
      0.03509178,
      0.004207947,
      -0.018426605,
      -0.0013006672,
      0.016190676,
      0.023902299,
      -0.016213069,
      0.018365178,
      -0.0060156984,
      0.028510168,
      -0.039858535,
      0.026105637,
      0.036680676,
      -0.003528407,
      0.018404678,
      0.0107669225,
      0.01405906,
      -0.016282227,
      0.0063617746,
      -0.011017408,
      0.021734387,
      -0.0059250845,
      -0.014990905,
      0.009392038,
      0.023271583,
      0.009924949,
      0.0018030811,
      0.011732071,
      0.021926044,
      -0.0029471854,
      0.011732596,
      0.0151053965,
      0.0031321011,
      0.008624155,
      -0.014620845,
      0.019141879,
      -0.0066249524,
      -0.02160227,
      0.006353979,
      -0.0027917088,
      -0.0063211285,
      0.010960328,
      -0.0007858038,
      -0.016979521,
      0.0013840024,
      0.030529743,
      -0.026472956,
      -0.03514851,
      0.033945527,
      0.021003641,
      -0.021125298,
      -0.005742373,
      0.004985714,
      -0.0015636517,
      0.00252829,
      0.00086114026,
      -0.010682612,
      0.0017149419,
      -0.0066744154,
      0.023167416,
      0.018760419,
      -0.017495612,
      -0.004232292,
      -0.040078364,
      0.0074174446,
      -0.030603578,
      0.0008224372,
      -0.00014028746,
      0.01259713,
      -0.023393737,
      -0.0068590944,
      -0.015704801,
      -0.01947934,
      -0.0051965155,
      -0.00027156164,
      -0.011670049,
      -0.02237839,
      0.019922834,
      -0.020446582,
      0.0035986367,
      -0.006438045,
      -0.0069488725,
      -0.016974725,
      -0.007776785,
      0.0024572266,
      0.0027742824,
      0.0008751363,
      0.010072171,
      -0.0030979933,
      -0.008064915,
      -0.00025654258,
      -0.0078041162,
      -0.001475609,
      -0.0032347408,
      0.022345161,
      -0.019676581,
      0.002952105,
      -0.030596185,
      -0.01857248,
      -0.031730715,
      0.013410053,
      -0.00974535,
      -0.0072494955,
      0.0068153967,
      -0.011810008,
      0.01683113,
      0.024565076,
      0.008351956,
      0.0012795728,
      -0.0065426994,
      0.0051553026,
      0.004143463,
      -0.016842047,
      -0.025700035,
      0.026131513,
      -0.010722145,
      -0.0050902814,
      0.02250747,
      -0.031970337,
      -0.00034434133,
      -0.025876496,
      -0.013899693,
      -0.005597262,
      -0.0037578098,
      -0.00094041275,
      -0.0054102154,
      -0.0082229925,
      -0.007923352,
      -0.020419097,
      -0.01665372,
      -0.011957173,
      0.0013746893,
      -0.024528194,
      0.020714447,
      -0.008442124,
      -0.0018231154,
      -0.01081688,
      -0.0096349185,
      0.0029215515,
      -0.022761114,
      -0.016707437,
      -0.02675564,
      -0.021548342,
      0.0068748593,
      0.017701702,
      -0.0039184727,
      -0.0054104156,
      0.023348676,
      -0.0036898982,
      0.0056879125,
      0.010023259,
      -0.00054843555,
      0.018499188,
      0.009712976,
      -0.004262602,
      0.006791067,
      -0.014429723,
      -0.043393705,
      0.006974139,
      0.013467093,
      -0.034012947,
      0.0022408809,
      0.021422705,
      0.00412401,
      0.02007032,
      0.013243791,
      -0.006299358,
      -0.010899167,
      0.0029164231,
      0.0038973065,
      -0.0031087315,
      0.008054277,
      0.010099289,
      0.009620261,
      -0.0026596407,
      -0.016665291,
      -0.011884815,
      0.008030087,
      0.026373427,
      -0.024662359,
      -0.011506103,
      -0.015048808,
      0.009177327,
      0.034736123,
      0.024912722,
      -0.019957254,
      0.015603292,
      0.0047354857,
      0.0015600243,
      0.007171667,
      -0.009489413,
      -0.0054642195,
      -0.008963547,
      0.0079982225,
      -0.016277475,
      -0.0036529985,
      0.0030816742,
      -0.006067491,
      0.01697253,
      0.00021844835,
      -0.008990201,
      -0.014596955,
      0.016567325,
      -0.02612127,
      -0.015295198,
      0.013211299,
      0.022767454,
      -0.017806703,
      0.021618742,
      -0.006444235,
      -0.0195791,
      -0.012588724,
      -0.0018049601,
      0.022660378,
      -0.0037188726,
      -0.004859381,
      0.002372714,
      -0.008091362,
      -0.0036327592,
      -0.011192531,
      0.007541957,
      0.008647693,
      0.00062232115,
      -0.007840246,
      0.028643863,
      0.0033787184,
      0.0019284487,
      0.007571232,
      -0.006011264,
      0.013246949,
      0.008822279,
      0.009749037,
      0.013026485,
      -0.011959138,
      -0.023498747,
      -0.011889175,
      -0.0014630969,
      -0.0019573148,
      -0.13820119,
      0.010900877,
      -0.011132649,
      0.016940517,
      -0.020450773,
      -0.019472484,
      0.013510877,
      -0.037820924,
      -0.022257043,
      -0.009680066,
      0.020352738,
      -0.010315507,
      0.016298978,
      -0.0154569745,
      -0.006602207,
      -0.009855082,
      0.030829629,
      0.024787916,
      0.02729605,
      0.001981216,
      -0.012433106,
      0.00763,
      0.013598119,
      -0.009442722,
      -0.01953975,
      -0.0130115105,
      0.016026618,
      0.017463336,
      -0.010639451,
      -0.008075331,
      -0.007599363,
      -0.010394196,
      -0.003684088,
      0.008135033,
      0.016512908,
      -0.009238665,
      -0.0049059098,
      0.0099269245,
      0.030297898,
      0.011637939,
      -0.025134709,
      0.003541132,
      0.021748995,
      -0.005906898,
      -0.0075551113,
      0.021444552,
      0.018111194,
      -0.012336898,
      -0.015313553,
      0.015069938,
      -0.0322442,
      -0.011519807,
      -0.03114871,
      -0.028886974,
      -0.010887657,
      0.008627949,
      -0.003437279,
      0.0039907196,
      -0.0088403085,
      -0.032715797,
      0.015666358,
      -0.0036726699,
      0.006473393,
      0.028839752,
      -0.007810346,
      0.017969921,
      0.025579406,
      -0.0009561298,
      0.0024662048,
      -0.008262344,
      -0.00055436,
      -0.013416537,
      0.010078802,
      0.014328887,
      0.0043255,
      -0.0073334365,
      0.022051305,
      0.014746502,
      0.0034147582,
      0.012989066,
      -0.009068985,
      -0.004957555,
      -0.056428954,
      -0.0005796184,
      0.015009028,
      0.016413053,
      -0.0029028663,
      0.007948319,
      -0.02315648,
      -0.0058246464,
      0.021498047,
      -0.006377723,
      -0.01779118,
      0.019543538,
      0.022261571,
      0.026834754,
      -0.016294394,
      -0.0034829138,
      -0.011885887,
      -0.011508859,
      -0.033363566,
      0.010810809,
      -0.018630864,
      0.0014838326,
      0.015846694,
      -0.013540034,
      -0.0089482,
      0.014128749,
      -0.0030781846,
      -0.0063564316,
      0.00274972,
      0.005567012,
      -0.0023590454,
      -0.16590498,
      -0.01888725,
      0.0144202905,
      0.012802109,
      -0.002683184,
      -0.016507914,
      -0.014805062,
      0.0061444193,
      -0.0115745105,
      -0.012057548,
      0.002088397,
      -0.009940479,
      -0.004727579,
      0.00040735854,
      0.036938667,
      0.121266805,
      -0.008322308,
      0.015592949,
      -0.022319362,
      0.007647231,
      0.016099874,
      -0.0063392995,
      -0.034478214,
      -0.00938481,
      -0.025806334,
      -0.00886049,
      0.024912663,
      -0.008150694,
      -0.011617146,
      0.006062588,
      0.01164607,
      -0.004475355,
      0.008128306,
      0.0266071,
      0.005340356,
      -0.000018059907,
      -0.012642747,
      0.014308045,
      -0.0024651736,
      -0.00029548397,
      0.02821544,
      0.007973709,
      -0.0070848195,
      0.012259707,
      0.0004892769,
      -0.0068923817,
      -0.028568683,
      -0.022012688,
      0.0050648632,
      -0.008626216,
      -0.011852498,
      -0.05023031,
      0.0027309596,
      -0.023890954,
      -0.006146884,
      0.019809166,
      0.021140458,
      0.010422963,
      0.0046036546,
      0.0053326925,
      -0.006704976,
      0.0018025617,
      0.001278545,
      0.0045368383,
      0.013423609,
      0.013420815,
      0.0088164555,
      -0.0048739915,
      0.0031136987,
      -0.0051666023,
      0.013881426,
      0.016080983,
      0.007150024,
      0.030139588,
      -0.009072593,
      -0.0029592481,
      0.0035111848,
      0.030937143,
      0.016912756,
      -0.0025729814,
      0.0054638013,
      -0.0020621154,
      0.011334264,
      -0.010195418,
      0.026305927,
      0.0020301181,
      -0.025741136,
      -0.0017650997,
      0.00466516,
      -0.005479014,
      0.014799011,
      -0.0080988975,
      0.009476846,
      0.0030362296,
      0.009917853,
      0.0091214385,
      0.0052355276,
      -0.0071147084,
      0.02503189,
      -0.017574245,
      -0.003877068,
      -0.018745841,
      -0.028744418,
      -0.03209228,
      0.017978719,
      0.025733057,
      0.01043722,
      0.02685382,
      -0.0034482824,
      -0.0009690086
    ]
  },
  {
    "id": "genai_cohort_python_04_Looping_through_list___Orders_name_vtt",
    "content": "All right, so moving on, 2 this is another interesting 3 project and I'm pretty sure 4 you're going to love this. 5 Let's read the problem statement. 6 I love to introduce you with 7 the problem statements because 8 this is actually you'll be doing 9 in the real world as well. 10 You received a list of names 11 for chai orders, and the goal is 12 to print out the order queue. 13 Your task is to use a list 14 of names and print the order ready 15 for whatever the name is. 16 So, so far, whatever we have 17 seen or whatever we have done, 18 was just on the range. 19 This was the range, 20 this was the range. 21 But now we want to work 22 on something different. 23 So let's go ahead 24 and create a new file. 25 Call this one as 03,_t order 26 or orders py and the first thing 27 that we have to do here is to create 28 a list which has, names in it. 29 So let's just call this 30 one as orders, which will 31 be a list just like this. 32 It will have a lot of name. 33 I'll go ahead and add my name first. 34 And then let's just say we 35 have other name as well. 36 Let's just say Aman is one 37 of another name and another, 38 one is, let's just say Becky. 39 Another one. 40 Let's just say we have Carlos. 41 So now we want to loop through. 42 And again, keep in mind that 43 you have no idea how many 44 names are in this order. 45 There could be four, there could be 46 four, zero, or there could be 400. 47 No idea. 48 So in such case, just like we 49 have used the range, we can 50 simply go ahead and create a, 51 loop using the for, use the for 52 keyword, provide a, variable. 53 It could be name, it could be my 54 name, it could be your name, 55 whatever you want to go with this, 56 then in and then provide just like 57 the range we are providing, we can 58 also provide a list which is also 59 iteratable. 60 Yeah, this is the word. 61 You'll see quite a lot. 62 A lot of objects 63 in the Python are iteratable. 64 That means you can loop through them. 65 So I'll just go ahead and put up 66 the orders just like this and I'll 67 just go say print just like this 68 and I will say order ready for. 69 And then simply go ahead and put 70 up this name automatically. 71 This loop will go to the list 72 and first time on the first 73 loop this will be the value. 74 On the second loop, this 75 will be the value. 76 On the third loop this will be 77 the value, and on the fourth loop 78 this is going to be the value. 79 So this is it. 80 Super easy. 81 Told you. 82 Python is really really easy 83 if you work just like that. 84 So let's just say I want 85 to run this one. 86 And we can see order 87 is ready for Hitesh. 88 Next time, it's ready for Aman. 89 Next time, it's ready 90 for Becky and Carlos. 91 So pretty good, pretty fun. 92 And we can see we have actually 93 done this task as well. 94 That is it for this video. 95 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 Looping through list - Orders name.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/04 Looping through list - Orders name.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0010336933,
      0.014909075,
      0.032619685,
      -0.05293498,
      -0.013800436,
      -0.015051085,
      -0.013535784,
      0.020226164,
      -0.006848197,
      -0.0043246998,
      0.001796155,
      -0.027072217,
      -0.0050351904,
      0.012591452,
      0.13043839,
      -0.014963938,
      -0.0058336505,
      -0.028148316,
      -0.01690015,
      -0.012564209,
      -0.01769179,
      -0.0015911886,
      0.010381473,
      -0.01118258,
      0.02513704,
      -0.0005711063,
      0.012176106,
      0.018848918,
      0.032646433,
      -0.012013552,
      -0.025814936,
      0.006997847,
      -0.004402278,
      0.017964078,
      -0.0006406639,
      0.022075916,
      0.023620928,
      -0.005102927,
      -0.033963036,
      0.014930326,
      -0.010051169,
      -0.00062409276,
      0.0004706093,
      -0.02806845,
      0.008814408,
      -0.023275847,
      0.0012442389,
      -0.037991714,
      -0.0004768492,
      0.028356206,
      0.0127458945,
      -0.004467853,
      0.0010219164,
      -0.16978228,
      0.021146255,
      0.007908393,
      0.0027372818,
      -0.003777655,
      0.017845733,
      0.00064708455,
      -0.010338276,
      0.016361635,
      -0.035875544,
      -0.009092016,
      -0.0045113903,
      -0.027807713,
      0.019271865,
      0.0056876466,
      0.0043979175,
      -0.005257322,
      0.013227597,
      0.016384661,
      -0.0072434377,
      -0.010082814,
      -0.015456479,
      -0.039843746,
      0.0069047273,
      -0.0070441905,
      0.0038266333,
      0.012716744,
      0.00428298,
      -0.007280863,
      -0.008973546,
      0.001959455,
      0.017281784,
      -0.010696379,
      -0.020136666,
      -0.0041789287,
      -0.009205323,
      -0.006997502,
      -0.049163874,
      0.014139611,
      -0.014741308,
      -0.0077544805,
      -0.012613366,
      -0.0054601766,
      -0.0031325964,
      0.0032883864,
      -0.019946504,
      -0.014258977,
      0.008477118,
      -0.0024163679,
      -0.029773135,
      -0.00064680603,
      -0.0043794047,
      -0.016134458,
      -0.009232893,
      -0.029630022,
      -0.0031625358,
      -0.024353933,
      0.0032190634,
      -0.003638787,
      0.016616711,
      0.021549303,
      -0.0065379804,
      -0.1517527,
      0.011118099,
      0.005233404,
      -0.021814492,
      -0.0061642937,
      -0.014252775,
      0.01041671,
      -0.004794304,
      0.0346108,
      -0.024200581,
      0.01263074,
      -0.008982854,
      0.030595385,
      0.002159717,
      0.00027841315,
      -0.020684173,
      -0.02813613,
      0.008588519,
      0.010678898,
      -0.02021023,
      0.008978483,
      -0.02055103,
      -0.005193471,
      -0.009186297,
      -0.015233579,
      -0.014723616,
      0.029586736,
      0.006109442,
      0.035275735,
      0.005738936,
      -0.012176219,
      -0.019468203,
      0.0074103083,
      -0.019749692,
      -0.016986685,
      0.021278244,
      -0.008753411,
      0.0063159815,
      0.0015163202,
      0.032117445,
      -0.029142652,
      -0.009675982,
      0.0029889285,
      -0.008221072,
      -0.0001552921,
      0.006866735,
      0.0043476694,
      0.015199345,
      0.0044978065,
      -0.0034745503,
      0.023856616,
      0.0028306216,
      0.007001661,
      0.011815396,
      -0.00091177656,
      0.0011682396,
      -0.013503572,
      -0.0006491083,
      -0.007431164,
      0.0017928251,
      0.0009999112,
      -0.00079759996,
      -0.017068975,
      0.026568199,
      -0.018331215,
      -0.0032833477,
      -0.033440515,
      0.014400558,
      0.008166715,
      0.01765884,
      -0.009964255,
      -0.024124436,
      0.010489473,
      -0.012368237,
      0.023827512,
      -0.019330073,
      0.00887161,
      0.017441826,
      0.0068070646,
      -0.0046184612,
      -0.00023162125,
      -0.024795301,
      -0.011437263,
      -0.0022039288,
      0.0046850895,
      0.014174726,
      -0.0018400704,
      -0.006659934,
      -0.012739429,
      0.030306254,
      -0.03993937,
      0.006196491,
      0.002337441,
      0.026200846,
      0.021376215,
      -0.005208086,
      -0.021804078,
      0.015519619,
      -0.0032795095,
      0.024619963,
      0.012181993,
      0.019597512,
      0.00207678,
      0.0038937517,
      0.0038170589,
      0.013532145,
      0.0052950685,
      0.02405704,
      0.014462316,
      0.0035944397,
      -0.0005768389,
      0.0025445125,
      0.02711561,
      0.0031284636,
      0.0025883762,
      0.051899746,
      0.009042597,
      -0.00838628,
      -0.014229307,
      -0.002042029,
      -0.010691649,
      0.014359814,
      0.03272909,
      0.008606694,
      -0.008257685,
      0.004569215,
      0.013378481,
      0.009605267,
      -0.002512324,
      0.025055045,
      -0.021598456,
      0.005667973,
      -0.011959794,
      -0.005713672,
      -0.02856604,
      0.004900634,
      -0.022600755,
      -0.002327736,
      -0.0160182,
      0.013898585,
      -0.018901736,
      -0.008118353,
      -0.003512842,
      -0.006580267,
      -0.025551368,
      -0.009969897,
      -0.0035015226,
      -0.01692117,
      -0.0062290253,
      0.0314948,
      -0.0017782011,
      0.008053315,
      0.013886889,
      -0.0019942112,
      0.01675365,
      -0.009560777,
      0.00951177,
      0.012294256,
      0.0023428937,
      -0.021872573,
      0.011162345,
      -0.111593544,
      0.013448747,
      0.016672388,
      -0.014784403,
      0.0029541133,
      0.017541705,
      -0.02559441,
      0.0037812847,
      0.016684337,
      0.013359127,
      0.023866244,
      -0.020581193,
      0.022970065,
      -0.033374295,
      -0.0069611976,
      0.0042716693,
      -0.007821561,
      -0.020494008,
      0.047085002,
      0.00013051332,
      0.010881114,
      -0.0008679119,
      0.00771335,
      -0.008254498,
      0.019191341,
      -0.0045681503,
      -0.011152065,
      0.02655841,
      0.009426781,
      -0.011885205,
      -0.024353094,
      0.025379628,
      -0.01207771,
      -0.012017409,
      -0.002647599,
      0.014649484,
      0.015276171,
      -0.007068099,
      0.0057400516,
      -0.009596511,
      0.018717216,
      -0.020862164,
      0.028284824,
      0.03922047,
      -0.0098197125,
      0.014772623,
      0.010281226,
      0.018214218,
      -0.0052145883,
      0.016633807,
      -0.012483339,
      0.031250592,
      0.010899078,
      -0.02201953,
      0.0037159373,
      0.0044734487,
      -0.0013969747,
      0.0004125928,
      0.020032,
      0.025590599,
      -0.010085472,
      0.0018191466,
      0.0035316988,
      -0.00015418077,
      -0.010007617,
      -0.0051212986,
      -0.0067610913,
      -0.010005177,
      -0.024221092,
      0.009012025,
      -0.0013056224,
      -0.009811428,
      0.0115144495,
      -0.01808325,
      -0.0029374391,
      0.013742348,
      0.030736085,
      -0.028149826,
      -0.020877857,
      0.027698278,
      0.03362974,
      -0.010406072,
      0.0050236816,
      0.018464163,
      0.0019891337,
      0.009931937,
      -0.0018136252,
      0.008136796,
      0.009182489,
      -0.020207928,
      0.016345033,
      0.0047209905,
      -0.0045975437,
      0.01621105,
      -0.028307257,
      -0.006013677,
      -0.024870468,
      -0.002808958,
      -0.005663687,
      0.013281096,
      -0.010618695,
      0.018555645,
      -0.014428761,
      0.0049054506,
      -0.007581889,
      -0.009036623,
      -0.02230215,
      -0.021638226,
      0.0077089416,
      -0.032201618,
      -0.011935325,
      -0.01599464,
      -0.014119757,
      -0.015601145,
      -0.00019368218,
      0.024427379,
      0.008351087,
      -0.011407903,
      -0.0077694836,
      -0.017176192,
      -0.015523096,
      -0.00813096,
      -0.0002952946,
      -0.0035857274,
      0.0067633213,
      0.017140819,
      -0.017756665,
      0.007002264,
      -0.018632289,
      -0.029374253,
      -0.03443743,
      0.018626003,
      -0.0013436768,
      -0.011061779,
      0.006599283,
      -0.022243515,
      0.019468937,
      0.035939183,
      0.01954715,
      0.0105262855,
      -0.01997793,
      0.00538206,
      0.0062163966,
      0.0051694317,
      -0.029824149,
      0.011293884,
      -0.02436953,
      0.008153394,
      0.01116407,
      -0.030383963,
      -0.0169107,
      -0.014517899,
      -0.0017847675,
      -0.014363474,
      0.011437439,
      -0.00027493332,
      -0.012754147,
      -0.017764715,
      -0.018689083,
      -0.017890204,
      -0.000715262,
      -0.0065800417,
      -0.000889042,
      -0.020149145,
      0.017290795,
      -0.00749964,
      0.0016649364,
      -0.005985937,
      -0.0005701244,
      -0.006490417,
      -0.007684305,
      -0.0102355685,
      -0.030832777,
      -0.039640654,
      0.03946503,
      0.006676659,
      -0.002521824,
      -0.006431587,
      0.034334775,
      0.010207646,
      0.011177704,
      -0.010292953,
      -0.009480547,
      0.0050893268,
      0.005432841,
      0.008572651,
      0.0026730793,
      0.013439451,
      -0.022519685,
      -0.01665099,
      0.030985745,
      -0.020177083,
      0.010139091,
      0.02278183,
      -0.013451607,
      0.0124523,
      0.022226825,
      -0.017788252,
      -0.00612723,
      0.010659679,
      0.008995821,
      -0.0077538225,
      0.004462946,
      -0.012408774,
      0.011253567,
      -0.017045865,
      -0.0175891,
      -0.027339729,
      0.0069017867,
      0.022052158,
      -0.011337731,
      -0.014298879,
      -0.0034099035,
      0.0071804742,
      0.023331055,
      0.011865509,
      -0.040579174,
      -0.0020390097,
      -0.031701844,
      0.007892678,
      0.0060570287,
      -0.012934457,
      0.00003683983,
      0.0034723682,
      0.0027978313,
      0.00093312614,
      0.0090141855,
      -0.008430958,
      0.010952118,
      -0.017275792,
      -0.0066304835,
      0.00020059047,
      -0.0014478631,
      0.014324178,
      -0.018076736,
      -0.008913004,
      0.024849536,
      0.022526147,
      -0.0079816505,
      0.0135764005,
      -0.0012915861,
      -0.013469764,
      -0.0056962073,
      -0.00094904227,
      0.026712224,
      -0.00883944,
      -0.0076946644,
      -0.0050413134,
      0.012712476,
      0.000060333434,
      -0.0030188786,
      0.0054676044,
      -0.02592947,
      -0.0069401534,
      -0.0024132445,
      0.02239451,
      -0.008946751,
      0.0064587696,
      0.009692509,
      -0.0032480783,
      0.02159827,
      0.014467535,
      0.005183472,
      0.016296186,
      -0.0021833966,
      -0.022655219,
      -0.028713608,
      -0.013737881,
      0.00033606755,
      -0.1343945,
      -0.009335093,
      -0.00327549,
      0.020846926,
      -0.021254752,
      -0.014520819,
      -0.007552189,
      -0.03015648,
      -0.01271365,
      -0.0069706845,
      0.009278245,
      -0.0075289514,
      0.0021593967,
      -0.020579152,
      0.0014039654,
      -0.021740558,
      0.014992001,
      0.02355347,
      0.023466563,
      0.0016971257,
      -0.015662096,
      0.022895113,
      0.0067698555,
      -0.0016005349,
      -0.02062333,
      -0.02344798,
      0.017208913,
      0.0063174195,
      -0.005969014,
      -0.0008652457,
      -0.028908735,
      -0.005273296,
      -0.0030657016,
      0.009661514,
      0.02802859,
      -0.013504713,
      -0.008723996,
      0.026166096,
      0.02289051,
      0.016009558,
      -0.00947041,
      -0.008319441,
      0.021251593,
      -0.0048235063,
      -0.0024538033,
      0.028778529,
      0.010784306,
      -0.02466536,
      -0.015967062,
      0.028400823,
      -0.031025471,
      -0.01174052,
      -0.01411198,
      -0.037407167,
      -0.0048409794,
      -0.0065980945,
      -0.006015886,
      -0.0014069241,
      -0.005407126,
      -0.037808955,
      0.009489443,
      0.015904102,
      0.027051771,
      0.020437578,
      0.0009700371,
      0.019412009,
      0.033162802,
      0.01250947,
      -0.006317619,
      -0.00862309,
      -0.0033309455,
      -0.008415334,
      0.008574735,
      0.027767962,
      0.027455617,
      0.015729634,
      0.011555355,
      0.0044505736,
      0.0053146454,
      0.01994342,
      -0.028010886,
      -0.018257597,
      -0.05017587,
      -0.004980514,
      0.005979844,
      0.004792553,
      -0.0074852635,
      0.000882785,
      -0.024013843,
      -0.013630403,
      -0.0068991585,
      0.0042775893,
      -0.025452167,
      0.0060256417,
      0.026716428,
      0.03209319,
      -0.012325292,
      -0.010690018,
      0.00033819705,
      -0.021577755,
      -0.030329771,
      0.022204991,
      -0.023426557,
      -0.0055272984,
      0.020740198,
      -0.01083299,
      0.009298311,
      0.008932726,
      -0.006744313,
      -0.009656508,
      0.0053298064,
      -0.018160574,
      0.009069933,
      -0.15756832,
      0.0016838952,
      0.012255537,
      0.0011255463,
      0.0097372895,
      -0.0045336536,
      -0.0069425777,
      -0.01366113,
      0.0055965213,
      0.0075722462,
      -0.008319056,
      -0.008380082,
      -0.008005635,
      -0.007135071,
      0.03931809,
      0.13035853,
      -0.012233339,
      0.007527565,
      -0.019413333,
      0.00997333,
      0.008939902,
      -0.008485417,
      -0.02603211,
      -0.010838636,
      -0.028690208,
      -0.022103999,
      0.0073079625,
      -0.013870468,
      -0.010184749,
      0.011391381,
      0.004755228,
      0.009922682,
      0.004629365,
      0.036782686,
      0.006974139,
      -0.0096945185,
      -0.020340232,
      0.019952629,
      -0.024002654,
      0.005327008,
      0.027835222,
      0.004444598,
      0.003291097,
      0.02898362,
      -0.0023508929,
      0.018875372,
      -0.017590107,
      -0.019435838,
      0.010934473,
      0.008551906,
      -0.014145242,
      -0.048500758,
      -0.010292745,
      -0.014027708,
      -0.011892143,
      0.016978474,
      -0.0040525156,
      0.0075859274,
      -0.007136108,
      0.00485887,
      -0.011849341,
      0.0054005594,
      0.010116255,
      0.01041939,
      0.015531337,
      0.00277854,
      0.023468148,
      0.003940076,
      0.016069368,
      -0.0065807225,
      0.009387172,
      0.009786039,
      -0.0022617297,
      0.017986739,
      -0.0074563567,
      0.0014169944,
      -0.008920083,
      0.022397872,
      0.023569489,
      0.011237606,
      -0.0019999342,
      -0.011410534,
      0.019005565,
      -0.022268908,
      -0.0027073848,
      0.0014011419,
      -0.031585284,
      -0.0018651333,
      -0.0073896293,
      -0.0018774099,
      0.022407865,
      0.0014616806,
      0.008658436,
      0.0073170234,
      0.009290838,
      0.028361266,
      -0.0035397443,
      0.0053345473,
      0.039313298,
      -0.008658327,
      -0.009424727,
      -0.006952988,
      -0.020124605,
      -0.049112745,
      0.03601123,
      0.021055367,
      0.012795131,
      0.013937281,
      -0.018186765,
      -0.011732358
    ]
  },
  {
    "id": "genai_cohort_python_05_Why_to_use_Enumerate_vtt",
    "content": "All right, let's go ahead and move 2 on to the next challenge 3 that we have in front of us. 4 And that says you're creating a tea 5 menu board and each 6 item must be numbered. 7 Task use enumerate to print 8 the menu with the numbers. 9 Now this is a very interesting 10 problem because we have a new 11 keyword here which is enumerate. 12 And as you can see, I 13 have opened up the docs. 14 I'll come back onto 15 the docs in a second. 16 First of all, let's see what 17 is the problem and how we 18 can actually deal with that. 19 Just like we saw that we have 20 orders here, let's go ahead 21 and create a new file and see 22 what is exactly the problem. 23 Why can't we deal with this problem 24 using the classic for loop? 25 So let's just say I create a new 26 one and call this one as 04. 27 Yep, that's the number. 28 And we'll be call this 29 one as tea menu py. 30 Let's just say we have a simple 31 menu, we call it like this. 32 And this menu has lot 33 of items of list. 34 For example, there might be 35 a green green T for that, 36 we might have lemon for lemon T, 37 which is my favorite one. 38 We also might have spiced one 39 which is pretty good. 40 I like that part too. 41 And we can have a mint too as well. 42 Not one of my favorite, but still 43 we have now we can definitely 44 go ahead and create a variable 45 for In menu just like this. 46 And we can definitely go 47 ahead and print this. 48 And you have seen this. 49 And we can call this 50 one as menu item is. 51 And then I can use curly braces and I 52 can just put a Here for this menu. 53 This has no problem. 54 You might be wondering, yeah, 55 we have studied this and this works 56 absolutely fine. 57 And you are correct. 58 This works absolutely fine. 59 We can just verify that 60 by running this. 61 So we can see that the menu 62 item is green spice lemon. 63 Everything is good. 64 But what the question says is 65 each item must be numbered. 66 So right now I have this list 67 or an array and I know that this 68 is my 0th position, this is 69 my first position, second 70 position, and third position. 71 But I have no way of right 72 now printing out the numbers 73 of each of these item. 74 And for exactly this problem, 75 the enumerate function is utilized. 76 If you study the docs of this 77 enumerate, you're going to see 78 that we have the seasons. 79 This is exactly like 80 the problem statement that 81 we have in front of us. 82 Now we can go ahead 83 and create a list out of it. 84 Notice here the list and in the list 85 we are using this enumerate method 86 for this seasons and what we 87 get back of course it's a list. 88 So outer one is the list, we 89 get a list and inside this 90 we get each of the item being 91 numbered automatically. 92 So the spring gets zero, one gets 93 summer, or summer gets one, 94 fall gets two and three gets winter. 95 And notice here it says 96 enumerate and I can still give 97 the season and I can say hey, I want 98 to start with one, I don't 99 want to start with zero. 100 So this is also pretty 101 good, we can just go ahead 102 and start just like that. 103 So this is one of the way of how 104 you actually work with enumerate. 105 So this is one example that 106 is being given to us. 107 And surely numerate has more things 108 like it has a next take, it can 109 used as a generator, 110 iterators and lot of things we will 111 study about them later on. 112 But one of the another way this 113 is already you have seen, so no 114 need to discuss more on this. 115 Another way of handling this 116 is something like this. 117 So instead of printing it like this, 118 I can actually declare two variable. 119 The first one is index. 120 You can write the whole 121 index or IDX for short. 122 It doesn't really matter, 123 it's a variable name. 124 And the next thing that I'll say 125 is item and then I'll use the same 126 in and now interestingly I can 127 use enumerate and, and in this 128 enumerate I can pass on two things. 129 The first one is menu 130 and as we just saw we don't want 131 to start with zero. 132 So I'll just create a variable 133 which is start and I'll 134 provide start my value 1. 135 Now as we just saw here 136 in the enumerate portion 137 that now the value can start 138 with 1, 2 and all of that. 139 But when you loop through with 140 an enumerated list you can actually 141 use two variables because 142 notice here this is a tuple. 143 So every time the value gets 144 returned to you it's two set 145 of values one and two. 146 So this is our IDX or index 147 and this is our value itself. 148 So that is why I have two 149 variable here, IDX and item. 150 Once I'm here I can just go ahead 151 and use the classic print 152 statement with the formatted 153 string and I can say something 154 like this, this is going to put my 155 index and I'll just say item just 156 like this and chai. 157 So this is how we construct our menu. 158 Now if I run this program again, 159 you'll notice that the first 160 is greench, the second is lemon chai 161 the third is Spiced Chai 162 and the fourth is Mint chai. 163 So how nicely we have handled this 164 problem because we knew about 165 one more thing in our programming 166 tool belt, which is Enumerate. 167 It's a pretty interesting, 168 very powerful thing, and I highly 169 recommend to at least check 170 out this example as well. 171 This is a pretty beautiful example. 172 We are not yet capable 173 of understanding this yield yet, 174 but surely it will come on later on. 175 We are not skipping anything 176 in this course, 177 so I hope you have enjoyed this. 178 And Enumerate is actually 179 fun and pretty easy 180 to understand, especially after 181 watching this video. 182 Let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 Why to use Enumerate.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/05 Why to use Enumerate.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.018251253,
      -0.011073386,
      0.02462418,
      -0.05765778,
      -0.014851541,
      -0.01755992,
      -0.0068869316,
      0.030760173,
      0.0071021765,
      0.0031736873,
      -0.032364294,
      -0.013830332,
      0.0012851201,
      0.018483317,
      0.12710208,
      0.0038248608,
      -0.0011133325,
      -0.027275663,
      0.008115161,
      -0.02115548,
      -0.0050666854,
      -0.0032762426,
      -0.0001756385,
      -0.019790621,
      0.022895962,
      0.0015862952,
      -0.0050699166,
      0.023858096,
      0.037304807,
      -0.019235944,
      -0.019591985,
      0.008978956,
      0.016054537,
      0.01929766,
      -0.008956673,
      0.017216425,
      0.03992584,
      -0.003185865,
      -0.031302366,
      -0.0013030671,
      -0.010801427,
      0.0012046649,
      0.0137041835,
      -0.014348653,
      -0.002551156,
      -0.0359014,
      -0.00875049,
      -0.013122357,
      0.015259847,
      0.017579531,
      0.018880503,
      -0.023587642,
      -0.0022218318,
      -0.17037226,
      0.032881256,
      0.018952321,
      -0.015101598,
      -0.004241318,
      0.024492646,
      0.005584976,
      -0.014701687,
      0.0025587466,
      -0.039586786,
      -0.005354405,
      -0.009638739,
      -0.0350108,
      0.01773735,
      -0.0018329845,
      0.0057027484,
      -0.01776303,
      0.017731108,
      0.030943533,
      -0.028801212,
      -0.0130560715,
      -0.020081514,
      -0.036346585,
      0.01891179,
      -0.016753083,
      0.0064731212,
      0.013985488,
      0.009737893,
      -0.014347781,
      -0.010562738,
      0.012133782,
      0.02261423,
      0.0059212535,
      -0.029943919,
      0.0018701092,
      -0.016479913,
      -0.0045533734,
      -0.044326965,
      0.018806802,
      -0.0136313215,
      -0.00077982584,
      -0.013641568,
      0.0033111214,
      -0.015669953,
      0.002768916,
      -0.022922348,
      -0.0031474428,
      0.009945598,
      -0.0070500737,
      -0.029946957,
      -0.0011549129,
      0.00933461,
      0.0026265362,
      -0.009295651,
      -0.013963676,
      0.0040379497,
      -0.01635902,
      -0.003335399,
      0.0026038878,
      0.0042290925,
      -0.004637958,
      -0.0023884894,
      -0.15606397,
      0.01175634,
      0.00181874,
      -0.018433351,
      -0.0053706616,
      -0.013928726,
      -0.0024792987,
      -0.006647641,
      0.020029256,
      -0.03134309,
      0.008821642,
      -0.011930745,
      0.029318254,
      0.018672055,
      0.010295889,
      -0.009358294,
      -0.021729523,
      0.0061293687,
      0.023981329,
      -0.019743955,
      0.005983388,
      -0.010027554,
      -0.005979513,
      -0.011716403,
      -0.009265426,
      -0.0070122243,
      0.013822046,
      0.015205535,
      0.029530384,
      0.0019064096,
      -0.013568142,
      -0.030299282,
      0.023206485,
      -0.014831036,
      -0.010609887,
      0.01162644,
      -0.015954794,
      0.0012808308,
      0.006520876,
      0.03282454,
      -0.031346112,
      0.011376738,
      0.009133661,
      -0.019122358,
      -0.01055173,
      0.016783047,
      0.0056608324,
      -0.0044320626,
      0.0037702096,
      -0.0017635691,
      0.014586198,
      0.0070639527,
      -0.0022161196,
      0.008022132,
      -0.0069090477,
      -0.013004161,
      -0.010933988,
      -0.0024296315,
      -0.0033108862,
      -0.020620085,
      0.016574461,
      0.00069477345,
      -0.006724295,
      0.013006269,
      -0.0058385166,
      0.02098693,
      -0.017257145,
      0.013613195,
      -0.008337006,
      0.022400957,
      0.00091505627,
      -0.0104653165,
      0.034192815,
      -0.0070712334,
      0.0056609935,
      -0.020739121,
      0.0027667186,
      0.024530452,
      0.003056697,
      0.0031358013,
      -0.018127132,
      -0.02095975,
      0.0012086232,
      -0.003926323,
      0.028288173,
      0.016847556,
      0.006687135,
      -0.033858195,
      -0.0053351275,
      0.046295937,
      -0.015297721,
      0.0002466468,
      -0.012000234,
      0.031787362,
      0.017842272,
      0.008742169,
      -0.00072373694,
      -0.004382501,
      -0.0053703426,
      0.0090888515,
      -0.01087058,
      0.020800276,
      -0.003876637,
      0.0064907162,
      -0.014614069,
      0.018682227,
      -0.009349562,
      0.023566743,
      0.026380356,
      -0.012424365,
      0.0061793453,
      0.00005502927,
      0.009041359,
      -0.002714335,
      0.008516965,
      0.045246016,
      0.0055902093,
      -0.013389261,
      -0.012779474,
      0.007462088,
      -0.039215524,
      -0.0030756332,
      0.009481091,
      0.006845734,
      -0.00005281469,
      0.009060592,
      0.005414218,
      0.005319062,
      0.00859953,
      0.0073120934,
      -0.031948213,
      0.0014458327,
      -0.00917846,
      -0.011525099,
      -0.012889821,
      -0.012774466,
      -0.03482535,
      0.0045518354,
      -0.012902533,
      -0.00027395692,
      -0.01779976,
      -0.007882453,
      -0.011122132,
      0.008178613,
      -0.004755901,
      -0.021382837,
      -0.008629034,
      -0.028200928,
      -0.014393431,
      0.01474676,
      -0.017359778,
      0.012288032,
      0.026575716,
      -0.009627598,
      0.0064598243,
      0.011193385,
      0.0063712266,
      -0.0010027871,
      0.013208162,
      -0.017701207,
      0.012769762,
      -0.11305437,
      0.00641118,
      0.022378696,
      -0.021111995,
      -0.0001263237,
      0.011731701,
      -0.029584212,
      -0.006006259,
      0.010441391,
      -0.0101808505,
      0.018087808,
      -0.022958808,
      0.0072711897,
      -0.040408727,
      -0.0019700534,
      -0.0033960808,
      -0.0069429977,
      -0.016139893,
      0.03782216,
      0.0023433312,
      0.00050449895,
      -0.009989281,
      -0.011697432,
      -0.01572157,
      0.015425934,
      -0.0014532492,
      -0.01500201,
      0.03687064,
      0.012739166,
      -0.010378593,
      -0.017728416,
      0.01185101,
      -0.0039487993,
      -0.016450921,
      -0.0016705801,
      0.0043267864,
      0.0055124653,
      -0.0033475964,
      0.011795615,
      0.0038477837,
      0.024698492,
      -0.027649619,
      0.025740726,
      0.040104274,
      0.005809581,
      0.020613741,
      0.007607838,
      0.03803878,
      -0.0008130424,
      0.00812802,
      -0.019395845,
      0.019195184,
      0.015044987,
      -0.013778205,
      0.0022476972,
      0.017192842,
      -0.00687198,
      -0.015160357,
      0.021945572,
      0.018016903,
      0.0003694876,
      -0.010017577,
      0.027020121,
      0.0015732349,
      0.019194778,
      -0.014221755,
      0.00624171,
      -0.020110065,
      -0.01869567,
      0.012644315,
      -0.010983532,
      -0.017238343,
      -0.014740156,
      0.012434707,
      -0.0010557942,
      -0.0028167472,
      0.025135966,
      -0.01780136,
      -0.010620116,
      0.027373997,
      0.023181582,
      -0.007556145,
      -0.018309386,
      0.0035044935,
      0.015518754,
      -0.0010017825,
      -0.0043512555,
      0.026343085,
      0.006675429,
      -0.024564773,
      0.032873165,
      0.0206156,
      -0.015617347,
      0.002550368,
      -0.005421248,
      0.0154876225,
      -0.015142216,
      -0.01595038,
      0.00076130085,
      0.006623031,
      -0.018122561,
      -0.0071819224,
      -0.026274286,
      -0.0054742647,
      -0.0107862465,
      -0.011330127,
      -0.0078424,
      -0.028774718,
      0.00008788548,
      -0.029704446,
      -0.0022531373,
      -0.0068320488,
      -0.022700395,
      -0.024938172,
      -0.0045708707,
      0.022109324,
      -0.012940676,
      0.0057916455,
      -0.00076904474,
      0.012542886,
      -0.01835988,
      0.004299845,
      0.001129735,
      0.0066197617,
      -0.00025046617,
      0.0033838253,
      -0.010880657,
      -0.009373551,
      -0.01308187,
      -0.021355957,
      -0.02949728,
      0.022410054,
      -0.013423598,
      0.005077958,
      -0.02051714,
      -0.007119785,
      0.013834815,
      0.018067561,
      0.01584571,
      0.0051701018,
      0.005061344,
      -0.0043746643,
      0.009942844,
      0.0043722866,
      -0.007328137,
      0.0041497946,
      -0.015242684,
      0.0071690734,
      0.000799924,
      -0.022907777,
      -0.01600707,
      -0.033859383,
      0.0046683922,
      -0.008124105,
      0.009215589,
      -0.0021059995,
      -0.005040668,
      -0.006518042,
      -0.011961824,
      -0.0045156623,
      -0.0033076294,
      0.0035439567,
      -0.019435486,
      0.019423693,
      0.023365565,
      0.0048742658,
      -0.0015323334,
      -0.0037580556,
      -0.013893093,
      -0.0100743715,
      -0.0050948523,
      -0.014577987,
      -0.028796673,
      -0.044638515,
      0.016796757,
      0.011237758,
      -0.00088324514,
      -0.003675838,
      0.028858103,
      0.0057631973,
      0.017183932,
      -0.0063360473,
      -0.016141918,
      0.014774516,
      0.0028106694,
      -0.00020207268,
      0.00983672,
      -0.005708261,
      -0.03452231,
      -0.008939195,
      0.01663032,
      -0.018008498,
      -0.0062250188,
      0.02415174,
      -0.01333212,
      0.040995467,
      0.008269789,
      -0.0018099814,
      0.0016363587,
      -8.784566e-7,
      0.011086012,
      -0.01088206,
      0.010673454,
      0.0020194321,
      -0.0055734618,
      -0.00917953,
      -0.015866162,
      -0.015443656,
      0.008070533,
      0.021338968,
      -0.022064723,
      -0.009288213,
      -0.006988838,
      -0.0038894634,
      0.04134275,
      0.024046639,
      -0.004825742,
      -0.0042263106,
      -0.031032516,
      -0.005141408,
      0.009962632,
      -0.018867189,
      -0.003939574,
      -0.004564174,
      0.005434063,
      -0.0006271436,
      0.0053275023,
      -0.011304357,
      0.0014157434,
      -0.01449147,
      -0.016609624,
      -0.014075978,
      -0.007883573,
      0.015520749,
      -0.04312719,
      -0.0068131993,
      0.0072720046,
      0.025983049,
      -0.02164613,
      0.012502054,
      -0.0062330384,
      -0.0115503995,
      -0.01709756,
      -0.0029307378,
      0.014673583,
      -0.008343417,
      0.0008498037,
      0.005429738,
      -0.0025141977,
      -0.0104112495,
      -0.014063644,
      0.010896723,
      -0.013753947,
      0.006617095,
      -0.0099143265,
      0.01796963,
      -0.0017490649,
      -0.0030486812,
      0.0015752997,
      0.0009755529,
      0.030201703,
      0.020987637,
      0.002538465,
      0.013232169,
      -0.0015993583,
      -0.0016403295,
      -0.009424499,
      -0.018370083,
      -0.0026377824,
      -0.12414527,
      -0.003541875,
      -0.0020258727,
      0.010258165,
      -0.023882227,
      -0.019455118,
      0.012074238,
      -0.02609884,
      0.0045232833,
      0.0013668361,
      0.020017307,
      -0.02104826,
      -0.004410018,
      -0.019847963,
      0.010094392,
      -0.038697924,
      0.03476658,
      0.009837579,
      0.005965934,
      0.014329139,
      -0.021354636,
      0.013953118,
      0.0015303193,
      0.0070705228,
      -0.028143426,
      -0.020546952,
      -0.00050401804,
      0.01695935,
      -0.008008078,
      -0.0002207164,
      -0.02986957,
      -0.022257874,
      -0.00059095485,
      0.009227396,
      -0.0001868577,
      0.005477175,
      -0.015315009,
      0.016168902,
      0.022784073,
      -0.012850932,
      -0.018966615,
      -0.0029409365,
      0.018164879,
      -0.0036921648,
      -0.010015696,
      0.028349588,
      0.024276197,
      -0.02531345,
      -0.017086562,
      0.023447454,
      -0.032776907,
      -0.013331809,
      -0.00656231,
      -0.034120675,
      -0.025747214,
      0.0023875628,
      -0.0075309044,
      -0.009328022,
      -0.01030533,
      -0.02908948,
      0.0021165456,
      0.002789622,
      0.0022166607,
      0.031949908,
      0.005990757,
      0.007677917,
      0.022751536,
      0.012802024,
      -0.019641656,
      -0.008377772,
      0.0040857936,
      0.007424803,
      0.004461987,
      0.014130355,
      0.01443905,
      -0.004447586,
      -0.002086687,
      -0.0017998532,
      0.031540096,
      0.019180931,
      -0.030304754,
      0.003741423,
      -0.046844434,
      -0.018859651,
      -0.0018243489,
      0.0049583246,
      0.013165202,
      0.0062979334,
      -0.0071989126,
      0.0023376234,
      0.0058545326,
      0.011376204,
      -0.025097163,
      0.0225014,
      0.018598955,
      0.014940488,
      -0.035379235,
      -0.0059758895,
      -0.012314263,
      -0.016165076,
      -0.021083733,
      0.0077859485,
      -0.013175448,
      0.00928414,
      -0.008099479,
      -0.02713948,
      0.0038127878,
      0.016393725,
      0.0027747613,
      -0.011572171,
      -0.014120048,
      0.0043385564,
      0.0022190341,
      -0.15811431,
      -0.019196711,
      0.011666705,
      -0.0068306564,
      0.008402466,
      0.002155452,
      0.010524556,
      -0.009661981,
      0.012133602,
      0.014957809,
      0.013512468,
      -0.022336239,
      -0.0167289,
      -0.0041071256,
      0.01546608,
      0.123525456,
      0.0000331785,
      0.0032924092,
      -0.02340975,
      0.010826915,
      0.006366407,
      -0.023699071,
      -0.027455421,
      -0.0010293013,
      -0.025891097,
      -0.010487174,
      0.008719304,
      -0.021649025,
      -0.006899913,
      0.004964446,
      -0.0085038785,
      0.010730857,
      0.009598287,
      0.029575894,
      -0.002180491,
      -0.0037282996,
      -0.026512096,
      0.0012458038,
      -0.021084424,
      0.014554038,
      0.0215395,
      -0.0020388118,
      0.010571047,
      0.025600532,
      0.005913055,
      0.016212111,
      -0.017210547,
      -0.0038568624,
      0.007799578,
      0.0015554004,
      -0.015850382,
      -0.045364205,
      -0.0015695172,
      -0.014701186,
      -0.002304582,
      0.018236779,
      0.0054405574,
      -0.007214447,
      0.0010668153,
      0.029826444,
      -0.0040735216,
      0.011825385,
      0.0035684004,
      -0.004034836,
      0.008631649,
      -0.008415248,
      0.015345951,
      0.0065243547,
      0.009586058,
      0.0032049213,
      0.009696184,
      0.016148088,
      0.005848572,
      0.01729583,
      -0.007908812,
      0.0040837745,
      0.0032154694,
      -0.00078111596,
      0.023061024,
      -0.021061158,
      0.00051629083,
      -0.021319065,
      0.019961288,
      -0.022569582,
      0.010362529,
      -0.008217899,
      -0.027558599,
      0.011425368,
      0.0059387446,
      0.0050661415,
      0.027265305,
      -0.0032118233,
      0.014253232,
      -0.008410941,
      -0.0018565153,
      0.03240952,
      0.011824569,
      -0.006915975,
      0.035599284,
      -0.009576557,
      -0.027754819,
      -0.0031323393,
      -0.020403402,
      -0.026054421,
      0.030160539,
      0.008106329,
      0.018055368,
      0.012856723,
      -0.016559966,
      -0.008345246
    ]
  },
  {
    "id": "genai_cohort_python_06_Zip_can_combine_lists_vtt",
    "content": "All right, let's move on 2 to the next challenge. 3 And this is a pretty fun and 4 interesting challenge and you will 5 get to know that there are so many 6 situations just like this and 7 without learning a new concept 8 it's very difficult to actually 9 pull this off. 10 Surely can be done but it's 11 rather difficult. 12 So notice here you are preparing 13 an order summary with customer 14 names and their total bill task. 15 Use two list, one for 16 name and one for bills. 17 So let's just do whatever 18 the problem statement is saying. 19 Let's do one by one that exactly 20 this one is 05 and we are going 21 to call this one as order summary 22 Py So it's asking us that we 23 should have two list first of all 24 names. 25 So let's go ahead and create a list 26 for names. 27 I will definitely go ahead and add 28 my name first, which usually I do. 29 And then let's add some more name, 30 maybe Mira, maybe Sam and maybe Ali. 31 Alright, the another 32 list is for bills. 33 So each customer gets a bill. 34 Let's just say the first customer 35 gets 50 rupees, 36 the second customer gets 70 rupees. 37 Sam probably got 100 rupees. 38 He's rich, he can pay. 39 Ali gets let's just say 55. 40 That's good. 41 Now we have four people in 42 the names, four bills in our list. 43 And what we want to do, we want to 44 actually go ahead and print the name 45 and paid this much amount of rupees. 46 So how can we do that? 47 We can loop through the names 48 at the same time. 49 We can loop through the bills 50 because the numbers are same. 51 But it would be very difficult 52 to run these two loops for exactly 53 these kinds of situation. 54 We need to study one more 55 topic which is the zip. 56 So zip is exactly like that, 57 iterates over several iteratable in 58 parallel producing tuples or tuples 59 with an item from each one. 60 So notice here the example says 61 from item. 62 This is just a variable name. 63 Feel free to call it anything. 64 We can use a zip, which is a tuple. 65 It takes tuple as a input parameter. 66 It's a function 67 which takes two lists. 68 This is the first list 69 and this is the second list. 70 Notice here we have the sugar, spice 71 and everything nice just like this. 72 And then when we print the item 73 it actually prints it like this. 74 So we receive a tuple itself. 75 If we are receiving a tuple itself as 76 a back in the item instead of 77 putting this as just item so that we 78 get all of these things, we can use 79 our previous knowledge of enumerate, 80 we can have the index as well as the 81 item and we will get two of these 82 things nicely and we can just do the 83 job. 84 And that is why zip is necessary. 85 So let's go ahead and work with that. 86 Pretty simple. 87 We are going to call this one as name 88 and and comma amount. 89 Feel free to call it as index. 90 These are just variable name 91 doesn't really matter much. 92 So inside the zip we'll 93 provide the two list. 94 The first one being names, 95 second one being bills. 96 And then we can just go ahead 97 and print our statement 98 just like we want it to be. 99 So we'll say first of all let's say 100 name paid and then we can 101 use the amount and rupees. 102 It depends on you how you want 103 to print the statement. 104 Totally on you and very optional, 105 no big deal there. 106 Let's go ahead and clean this up. 107 Call this one as python and we want 108 to print the 05 file and we can 109 see Hitesh paid 50 rupees, Meera 110 paid 70, Sam paid 100, Ali paid 55. 111 So pretty easy and workaround 112 with that. 113 So as you saw that some 114 of the knowledge is really required 115 and some of the knowledge actually 116 builds on top of the others. 117 So we saw already some 118 of the knowledge in enumerate 119 but on top of that we added our 120 knowledge for the zip as well. 121 That is it. 122 Hope you enjoyed these 123 crisp and small tutorial. 124 But actually they pay really good 125 in the sense of knowledge. 126 That is it for this video. 127 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "06 Zip can combine lists.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/06 Zip can combine lists.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.008053163,
      -0.003288462,
      0.027031884,
      -0.051765632,
      -0.0018175062,
      -0.024000954,
      0.012109855,
      0.024025965,
      0.0067385067,
      0.017760007,
      -0.02810783,
      -0.0025980964,
      0.0054063695,
      0.0071934354,
      0.10938763,
      0.01048701,
      0.0007072631,
      -0.022728765,
      0.015563452,
      -0.0032982966,
      0.004990204,
      0.012189796,
      0.016685465,
      -0.028524585,
      0.027901655,
      -0.014996712,
      0.011638713,
      0.0025347103,
      0.01809653,
      -0.0059293234,
      -0.0105232345,
      0.00672031,
      -0.00664453,
      0.037591286,
      0.0077314065,
      -0.0081662005,
      0.0055501424,
      0.009161387,
      -0.043776955,
      0.008117824,
      -0.007144363,
      0.004407213,
      0.008343795,
      -0.0022859257,
      0.006908733,
      -0.033665985,
      -0.0062907864,
      -0.005097175,
      -0.0064875726,
      0.029042086,
      0.017938748,
      -0.008980368,
      -0.00029568028,
      -0.17398693,
      0.027393002,
      0.01112664,
      -0.014828697,
      -0.010402244,
      0.017436378,
      0.001066098,
      -0.003913028,
      0.002436023,
      -0.033291306,
      -0.030051447,
      -0.021122178,
      -0.03973427,
      0.019518722,
      0.018436922,
      0.0025245033,
      -0.007866426,
      0.027670689,
      0.011443508,
      -0.02589895,
      -0.012670123,
      -0.017888537,
      -0.04493881,
      0.019763358,
      -0.0053753764,
      -0.0024818697,
      0.012684795,
      0.001140913,
      0.0037138003,
      -0.01013845,
      0.015248502,
      -0.0044920905,
      0.016961971,
      -0.021569338,
      0.004415019,
      -0.02515641,
      0.014313663,
      -0.037683416,
      0.005016337,
      -0.0022743414,
      -0.0028442147,
      -0.019740766,
      0.010821847,
      -0.0038268808,
      -0.0017031614,
      -0.017650893,
      -0.01978703,
      0.0017089165,
      -0.02003598,
      -0.032115128,
      -0.00909228,
      -0.009045046,
      -0.020958029,
      -0.0028794247,
      -0.022466665,
      0.014015895,
      0.00654436,
      -0.008524285,
      -0.020074714,
      0.00061007286,
      0.029847857,
      -0.0045450246,
      -0.16940388,
      0.009642857,
      0.0070125153,
      -0.03558214,
      -0.0077514886,
      -0.019267384,
      -0.00042274134,
      0.0043330346,
      0.0049724844,
      -0.020864911,
      0.010367519,
      -0.0076577286,
      0.018801836,
      0.0039057378,
      0.0015113517,
      -0.015619926,
      -0.027559217,
      -0.0016889011,
      0.011566999,
      -0.027883388,
      0.0028037298,
      -0.0122484565,
      -0.016123954,
      -0.017349003,
      0.0049590864,
      -0.008247208,
      0.020025037,
      0.0026269509,
      0.036339715,
      0.0027173236,
      -0.0027351025,
      -0.034669474,
      0.012556665,
      -0.029729726,
      -0.020476202,
      0.01192717,
      -0.0025673008,
      0.004280384,
      0.0154800955,
      0.019467577,
      -0.042420574,
      0.0013370336,
      0.001106442,
      -0.011809452,
      -0.016625471,
      0.0021931597,
      0.010504462,
      0.009854975,
      0.01499185,
      0.006956909,
      0.0122146895,
      -0.0038453627,
      -0.018313052,
      0.008514326,
      0.0032712773,
      0.0075963032,
      -0.0048044287,
      -0.0016195291,
      -0.007338996,
      -0.011130703,
      0.013002158,
      0.004897809,
      -0.0058164084,
      0.018049128,
      -0.01104882,
      0.015551646,
      -0.010325372,
      0.013773106,
      -0.015461604,
      0.02107505,
      -0.0027614962,
      -0.008845563,
      0.006106206,
      -0.008857511,
      0.0072629037,
      -0.02021762,
      0.013561784,
      0.02139461,
      -0.014952038,
      0.002779463,
      -0.029821975,
      -0.015099251,
      0.0018023414,
      -0.00745842,
      0.023629816,
      0.0152404215,
      -0.00788304,
      0.00050528365,
      -0.008344791,
      0.0142512135,
      -0.018156705,
      0.005263971,
      -0.01396305,
      0.042370725,
      -0.0032809158,
      -0.005396885,
      0.003003653,
      0.010074584,
      -0.0024250608,
      0.0145323835,
      0.004806341,
      0.014507233,
      -0.009328056,
      0.005519472,
      0.016966593,
      0.028065417,
      0.009916358,
      0.027216872,
      0.023247728,
      -0.015128502,
      0.012015553,
      0.007271468,
      0.008628158,
      -0.0075201415,
      -0.009522653,
      0.046282414,
      0.017355898,
      -0.01841574,
      -0.017928304,
      0.0060995105,
      -0.013156017,
      -0.0057385378,
      0.018533517,
      0.003535607,
      0.0048645576,
      0.003913921,
      0.013516915,
      0.021181135,
      -0.0056660944,
      0.005219118,
      -0.009738461,
      0.0014013463,
      0.0038843236,
      -0.0027304846,
      -0.011849239,
      -0.005002054,
      -0.044321604,
      -0.007339842,
      -0.016642459,
      -0.006242966,
      -0.021882672,
      -0.020798698,
      0.0036162767,
      -0.01577663,
      -0.013687501,
      -0.0022536563,
      -0.011141277,
      -0.03809958,
      -0.0076033166,
      0.021941112,
      -0.00426412,
      0.016700244,
      0.027594687,
      0.00058125594,
      0.00037367264,
      -0.00039521992,
      0.02054561,
      -0.012404424,
      0.0037273243,
      -0.014217706,
      0.024945369,
      -0.109598495,
      -0.006979707,
      0.009850707,
      -0.02931383,
      0.011614794,
      0.033465754,
      -0.02138005,
      0.01862612,
      0.0014610842,
      -0.0049107317,
      0.008254461,
      -0.014135109,
      0.016471554,
      -0.021468414,
      -0.009312563,
      0.017744083,
      -0.011853724,
      -0.023913523,
      0.04845344,
      -0.0025751123,
      0.009606538,
      0.0070713274,
      0.0005733665,
      0.00019027448,
      0.0038862112,
      -0.0033799813,
      -0.0075817173,
      0.04483907,
      0.00039571745,
      -0.010730392,
      -0.030879097,
      0.021783713,
      0.0014931799,
      -0.009132753,
      0.008255047,
      0.0047828574,
      0.012504127,
      -0.005316257,
      0.014180912,
      0.010748741,
      0.011665892,
      -0.02579011,
      0.033210337,
      0.031811073,
      -0.004821515,
      0.016957073,
      0.021478008,
      0.02664668,
      -0.01348221,
      -0.006921133,
      -0.020914106,
      0.010942247,
      0.005574766,
      -0.009582381,
      0.013772073,
      0.009040368,
      0.0044824765,
      -0.02985403,
      0.008709331,
      0.024153888,
      -0.006775151,
      -0.0045184596,
      -0.007667022,
      0.005848635,
      -0.017518321,
      0.001491436,
      -0.00652148,
      -0.024875714,
      -0.032110542,
      -0.003957261,
      0.006148357,
      -0.0013327845,
      0.0023207436,
      -0.004915068,
      -0.013147047,
      0.015970586,
      0.020086847,
      -0.032623336,
      -0.022194203,
      0.034042962,
      0.024520777,
      -0.0037700178,
      0.005442624,
      0.019930366,
      -0.004871614,
      0.021216223,
      -0.008598663,
      0.019521076,
      -0.006480457,
      -0.0050257496,
      0.012138499,
      0.0042912504,
      -0.0042953184,
      -0.007901451,
      -0.030830335,
      0.0132754985,
      -0.015796065,
      -0.013029617,
      -0.024367807,
      0.013013633,
      -0.021465901,
      0.008472123,
      -0.024798134,
      -0.014792785,
      -0.022019703,
      -0.016907629,
      0.0021517954,
      -0.020777285,
      0.0073722163,
      -0.027461514,
      -0.006593656,
      -0.0024016476,
      -0.005697782,
      -0.01970324,
      -0.011484293,
      0.022103513,
      -0.0020578355,
      0.01404187,
      0.016544385,
      -0.014146911,
      -0.0031609377,
      0.000530115,
      0.006745316,
      0.0022241739,
      -0.011221636,
      0.0029214188,
      -0.026818294,
      -0.021205755,
      0.0079673845,
      -0.01560611,
      -0.01607393,
      0.012308566,
      -0.009732498,
      -0.0022730401,
      -0.02593112,
      -0.00038372006,
      0.021412134,
      0.019334054,
      0.03335509,
      0.0021193414,
      0.006510672,
      0.0017645254,
      0.021588543,
      0.00042934585,
      0.0008013397,
      0.01777788,
      -0.0028097082,
      0.0039382274,
      0.0068567228,
      -0.03330646,
      -0.010040264,
      -0.033672526,
      0.015136464,
      -0.019886706,
      -0.015478378,
      -0.0019506796,
      -0.0013977084,
      -0.019177688,
      -0.020852566,
      -0.017675111,
      -0.026304021,
      -0.015389464,
      -0.01556676,
      -0.010127619,
      0.022457182,
      0.0056402828,
      0.004591201,
      0.002113618,
      -0.016578596,
      0.0039310325,
      -0.01132,
      -0.02000486,
      -0.029444894,
      -0.034279544,
      0.015524854,
      0.0154719185,
      -0.0031497136,
      0.005144357,
      0.029772453,
      0.009369099,
      0.006928761,
      -0.013671049,
      -0.0143755395,
      0.008231014,
      0.0033475417,
      0.0038667598,
      -0.0049382388,
      0.0047856406,
      -0.033328276,
      -0.01467616,
      0.023537733,
      -0.0059324834,
      -0.0045721713,
      0.022148544,
      -0.000710399,
      0.024238715,
      0.003205394,
      0.0074696215,
      -0.00011973775,
      -0.0005946308,
      0.018243607,
      -0.030317457,
      0.025844531,
      -0.0076025166,
      0.012192946,
      -0.009238708,
      -0.009640571,
      -0.011224828,
      0.015645137,
      0.021009125,
      -0.020066988,
      0.0069676484,
      -0.010487955,
      -0.001374307,
      0.026947765,
      0.034826316,
      -0.0050307075,
      -0.007972281,
      -0.023196492,
      -0.006170005,
      0.0126778055,
      -0.02322065,
      0.022678774,
      0.00011219041,
      -0.0022050366,
      0.0014647197,
      0.008261728,
      -0.009970364,
      0.006029247,
      -0.008998676,
      -0.0068142097,
      0.014806271,
      -0.010683545,
      0.011185715,
      -0.01023901,
      -0.010614618,
      0.023052117,
      0.025007531,
      -0.015477614,
      -0.00006491074,
      -0.0002563669,
      0.002778759,
      -0.008859626,
      -0.01155428,
      0.020287199,
      -0.010289953,
      -0.000046340614,
      0.0071406355,
      0.010397751,
      0.012121026,
      0.0039126086,
      0.009792728,
      -0.016686665,
      0.005635329,
      -0.013421053,
      0.0065002893,
      -0.0065019685,
      -0.016219664,
      0.0031467492,
      0.0068299654,
      0.014758261,
      0.011606372,
      0.010911131,
      0.025484113,
      0.0037804558,
      -0.0184576,
      -0.00089258194,
      0.00064309855,
      0.010319884,
      -0.1352348,
      -0.0031672188,
      0.0017082351,
      0.015544919,
      -0.007868293,
      -0.02900582,
      -0.011141146,
      -0.023005402,
      -0.018891761,
      0.0027245055,
      0.030377964,
      -0.0020060886,
      -0.009076519,
      -0.023202732,
      0.010581317,
      -0.017578308,
      0.032093592,
      0.010759905,
      0.015220499,
      0.0110369045,
      -0.025241928,
      0.020657746,
      -0.009450534,
      0.028524688,
      -0.023457179,
      -0.015201712,
      0.010364053,
      0.02677756,
      0.0128545845,
      -0.0043647108,
      -0.036074795,
      -0.007025572,
      0.015471191,
      0.027807698,
      0.0022016282,
      -0.0074820262,
      -0.011259922,
      0.023035808,
      0.0051995213,
      0.015040039,
      -0.01569612,
      -0.015366377,
      0.020626714,
      -0.008359986,
      -0.0019642601,
      0.038481075,
      0.031287905,
      -0.023599006,
      -0.018876728,
      0.022083666,
      -0.029937362,
      -0.007035168,
      -0.003243526,
      -0.026628025,
      -0.013977427,
      -0.003346334,
      0.0054897987,
      0.0041050594,
      -0.0039982195,
      -0.028747244,
      0.0020909614,
      0.008855505,
      -0.0042658714,
      0.02766662,
      0.008467824,
      -0.011540223,
      0.019167216,
      0.0119723175,
      -0.0037421212,
      -0.008855,
      -0.0156206135,
      0.009454513,
      -0.005653484,
      0.021507751,
      0.010662828,
      0.014044563,
      0.007044225,
      0.004579022,
      0.015464201,
      0.015515837,
      -0.025337644,
      0.012104082,
      -0.0478619,
      -0.026340595,
      0.00016035822,
      0.020005707,
      0.0016608761,
      0.016887216,
      -0.0077979113,
      0.0072184475,
      0.024508901,
      0.0061179306,
      -0.017792776,
      0.007943559,
      0.039511446,
      0.0047192457,
      -0.013360232,
      0.0036928607,
      -0.011141217,
      -0.0035579014,
      -0.017928932,
      0.0031115757,
      -0.014654755,
      0.01343533,
      -0.008885583,
      -0.031220919,
      -0.0035138056,
      0.018164491,
      -0.009765203,
      -0.0138985505,
      -0.0024607007,
      -0.004748835,
      0.009606067,
      -0.15067689,
      -0.009581516,
      -0.00334331,
      0.010338667,
      0.0017970689,
      -0.005433243,
      0.012818021,
      -0.0022631814,
      0.012932007,
      -0.0023818484,
      0.012898276,
      -0.033880852,
      -0.01706341,
      -0.0038253793,
      0.030545251,
      0.13098337,
      -0.011141133,
      0.014846432,
      -0.0019730383,
      0.0034641873,
      0.015636973,
      -0.013535032,
      -0.0126418965,
      -0.012923399,
      -0.009483181,
      0.0008144196,
      0.0056780106,
      -0.021198174,
      -0.0136930365,
      0.0036844118,
      0.0015881764,
      0.015186168,
      0.014831043,
      0.0197556,
      0.0005367784,
      0.015975278,
      -0.019990148,
      0.017749703,
      -0.019009147,
      0.009525077,
      0.024798186,
      0.008738625,
      -0.0071096984,
      0.024344198,
      0.0028302139,
      0.015518381,
      -0.017330036,
      -0.016725853,
      0.00058171316,
      0.0069424873,
      -0.0142353,
      -0.06190047,
      0.0032596895,
      0.0025323243,
      0.0013325278,
      0.015018113,
      -0.004533256,
      0.005781976,
      -0.002111508,
      0.02416105,
      -0.0067579905,
      0.01081719,
      -0.00021638484,
      0.0059375516,
      0.009181109,
      -0.0026551276,
      0.023156524,
      0.013928093,
      0.010933641,
      -0.0072116805,
      0.00706878,
      0.0061879177,
      0.0065898453,
      0.012850641,
      -0.0025127642,
      0.007964873,
      -0.014968981,
      -0.0040903967,
      0.02103744,
      0.0061089233,
      0.007928079,
      0.00034600226,
      0.012164068,
      -0.008882758,
      0.008685247,
      -0.007321845,
      -0.035312388,
      0.004588222,
      -0.008062525,
      0.016216353,
      0.008076447,
      -0.010219541,
      0.004861681,
      0.009036126,
      0.0030309206,
      0.015730347,
      -0.010956858,
      -0.013944102,
      0.023285212,
      0.010242382,
      -0.0069576087,
      -0.014320436,
      -0.0038321856,
      -0.04280694,
      0.017762795,
      0.013192024,
      0.0045601367,
      -0.00090442476,
      -0.014599619,
      -0.00033759658
    ]
  },
  {
    "id": "genai_cohort_python_07_Introducing_while_loop_in_python_vtt",
    "content": "Another day, another challenge. 2 I love these challenge approach. 3 It teaches us so much. 4 So let's start with this 5 reading the fresh new 6 challenge in front of us. 7 Let's just say the challenge says 8 not just. 9 Let's just say it is saying that 10 you want to simulate a tea heating. 11 It starts with 40 degree 12 Celsius, of course, and boils 13 at 100 degrees Celsius. 14 Your task is pretty simple. 15 Use a while loop. 16 And this is a new kind of a loop. 17 We haven't seen that 18 in the past so far. 19 Increase the temperature by 15 20 until it reaches or exceeds 100. 21 Print each temperature step. 22 All right. 23 And after that also we'll 24 print some message. 25 So let's go ahead 26 and try out the loops. 27 So this is going to be 28 my, I guess sixth one. 29 So let's create a new file and call 30 this one as 06/ underscore and let's 31 call this one as tea temperature. 32 There we go. 33 So the step one is it asks us 34 to create a variable that is 35 temperature or you can 36 just call it as temp 37 for short and starts with 40. 38 We don't have to put a sign like 39 degrees Celsius or something. 40 For us it's just 40. 41 Now we have to use while loop 42 and we have to take care that it 43 needs to run till the hundred. 44 So the for loop is also pretty good. 45 But for loop is majorly used 46 for iterating over a list or when we 47 know there is something which 48 has auto ending or something. 49 Here we have to check and keep 50 on checking for a certain condition. 51 So just like we have if statement, 52 we also have a while statement 53 also known as while loop. 54 This is going to keep 55 on doing the stuff until 56 the condition becomes false. 57 So for example, the condition 58 which we are checking for is 59 temperature less than 100. 60 You can also check for equals 61 to 100 as well, just like this. 62 Less than equal to 100. 63 But we'll just check 64 for less than 100. 65 The moment it becomes 100. 66 That means it's done, it's boiled. 67 Now first of all it says that I want 68 to print increase the temperature by 69 15 until it reached or exceed 100. 70 And then we want to print 71 the temperature in each step. 72 So I would prefer to print my 73 temperature first, otherwise 74 if the value is all gone, it's 75 not going to be available. 76 Or anyways you can print 77 it afterwards as well. 78 No problem there. 79 We'll just go ahead and say 80 current temperature 81 and then we'll just print 82 the temperature just like that. 83 It also says that you need 84 to add the temperature by 15 85 until it decreases 100. 86 So every single time we obviously 87 have the access to this 88 temperature, we are going to go 89 ahead and say that whatever the 90 value of temperature is, we are 91 going to add 15 to this. 92 Now this is a very common syntax 93 and so many times you add 15 or one 94 or whatever the value to itself. 95 And it is such a common statement, 96 by the way, I just press control 97 slash to quickly comment a line. 98 This is such a common statement 99 that you will see that 100 temperature plus equals 15. 101 The line number 5 and line 102 number 6 are exactly same. 103 This also adds 15 to the existing 104 value of temperature. 105 This is a shorthand notation 106 of what we wrote about. 107 So whatever feels good 108 to you, you can use that. 109 Most of the time you'll see 110 people using the short one. 111 So plus equals means whatever 112 the existing values is, we 113 want to Increase it by 15. 114 Python is full 115 of these kinds of things. 116 Now we'll go outside of it, make 117 sure you keep an eye on the 118 indentation and we'll just print 119 up a message which says that T is 120 ready to boil, or T is ready to 121 be served. 122 So water is all ready. 123 So T, you can boil the T. 124 Now we'll save this and see 125 the result and I'll show you 126 different ways of how this 127 result can be manipulated. 128 Pretty simple, no big deal there. 129 So we'll just go ahead 130 and say Python 3. 131 This time it's 06. 132 And there we go. 133 So we can see current temperature 134 is 40, then we have 55, then 135 we have 70, then we have 85 136 and then it gets ready because it's 137 increasing by in itself 15. 138 The only change that you're going 139 to see if I take this line number 140 four and move it to the very end, 141 or probably we print the message 142 after increasing the value. 143 So a shortcut is just hold down 144 the option key or alt key 145 and move this line at the bottom. 146 Let's try to see what happens when 147 we run the program like this. 148 So notice here, this time it says 149 current temperature is 55. 150 So it comes up here, it increases 151 the temperature, so 40, added 15, 152 it becomes 55, then 70, then 85, 153 and then finally when we are here, 154 after 85, it actually increases it 155 to 100. 156 Once it is 100, that means 100 157 is not equals to 100, it is 158 it not less than 100, it is 159 actually equal to the 100. 160 So we simply get out of it 161 and we simply print this. 162 So again, depends on what 163 you really want to do. 164 I like to keep this at the very top 165 just like this. 166 Make sure you understand that 167 the how you write the code, 168 it's actually going to execute 169 in the same order as well. 170 So that is it. 171 Now you understand the while loop 172 as well as the importance of it, 173 as well as a use case for it. 174 You have done a practical 175 example for it. 176 That is it for this video. 177 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "07 Introducing while loop in python.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/07 Introducing while loop in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.005921706,
      0.017547717,
      0.02744315,
      -0.070807025,
      -0.004960524,
      -0.025953554,
      -0.0019865104,
      0.01620738,
      0.010290854,
      0.005231222,
      0.007923012,
      -0.008366216,
      0.0065667625,
      0.016000487,
      0.117633924,
      0.02949726,
      -0.007775378,
      -0.010112191,
      0.0073599815,
      -0.0024215777,
      -0.029911386,
      -0.012292189,
      0.012504214,
      -0.019006658,
      0.008653889,
      0.0047162315,
      0.016730554,
      0.014368895,
      0.040537987,
      -0.015934624,
      -0.011747239,
      0.014933818,
      0.01116875,
      0.036774848,
      0.0009177704,
      0.022054853,
      0.022421826,
      -0.015551493,
      -0.010212647,
      0.010975517,
      -0.0029143256,
      0.0009489356,
      -0.001676303,
      -0.011612123,
      0.0074223555,
      -0.011813999,
      -0.027049197,
      -0.039355725,
      -0.009192393,
      0.033697505,
      0.0098178955,
      0.011615445,
      -0.015531417,
      -0.18207982,
      0.0010694761,
      0.0098267,
      0.001519331,
      0.019604279,
      0.020163577,
      -0.0122917015,
      -0.01978305,
      0.004543548,
      -0.014351063,
      0.010751466,
      -0.021071589,
      -0.022028495,
      0.007824769,
      -0.00854547,
      0.0053747236,
      -0.00018335604,
      0.0116604045,
      0.017665798,
      -0.01561922,
      -0.0029686682,
      -0.003250999,
      -0.029091649,
      -0.0028119355,
      -0.0017150872,
      0.0044385795,
      0.0017488246,
      0.002159812,
      -0.013524742,
      -0.0062437365,
      -0.015285475,
      0.0164022,
      0.016000042,
      -0.027794536,
      -0.0043373406,
      0.0044832346,
      -0.008701572,
      -0.033340234,
      0.012304527,
      0.0011501668,
      0.01641773,
      -0.006966843,
      0.010824239,
      0.0006480452,
      -0.016030423,
      -0.02196129,
      -0.0026466236,
      -0.006858329,
      0.00429328,
      -0.021800876,
      -0.015687987,
      0.011390428,
      0.007303617,
      -0.014698806,
      -0.017557025,
      0.015752023,
      0.0017704968,
      -0.0052511888,
      -0.0003385091,
      0.0030474751,
      0.038271777,
      0.009054819,
      -0.1737885,
      0.023562657,
      0.008455865,
      -0.01454569,
      -0.0036007734,
      -0.009000034,
      0.004092126,
      -0.008192875,
      0.02166695,
      -0.017117614,
      0.018398711,
      0.0019930217,
      0.023350656,
      0.010604324,
      0.0029974352,
      -0.009575629,
      -0.0026657954,
      0.0032642148,
      0.0053594625,
      -0.0008753207,
      0.00978374,
      -0.024220627,
      -0.019162906,
      -0.02340532,
      -0.008447451,
      -0.010374494,
      0.0142527325,
      -0.01713557,
      0.036873545,
      -0.009113954,
      -0.009955798,
      0.0036052961,
      0.021584425,
      0.0027140016,
      0.0069301766,
      -0.0016674417,
      -0.02208543,
      0.0002773204,
      -0.014389513,
      0.025104519,
      -0.03228826,
      -0.006191254,
      0.0020876552,
      -0.0060987878,
      -0.0048364014,
      0.011481924,
      -0.0047103027,
      0.02362184,
      0.011019228,
      0.004076834,
      0.0017852134,
      0.0073238504,
      -0.002289726,
      0.01937355,
      0.019529361,
      0.008142134,
      -0.008185933,
      0.00021022497,
      -0.025799524,
      -0.01374303,
      0.010950024,
      0.011831535,
      -0.015532147,
      0.0030217657,
      -0.007371377,
      0.0066401307,
      -0.019127829,
      -0.0049295505,
      -0.0032365937,
      0.00828611,
      -0.014768074,
      -0.020587118,
      0.017627113,
      0.0131170945,
      -0.00035421035,
      -0.006013469,
      0.0042723264,
      0.019089196,
      0.010161586,
      0.013455963,
      -0.007997552,
      -0.013283407,
      -0.0037087363,
      0.01548871,
      0.014797603,
      0.022321496,
      -0.0076317717,
      0.00037363506,
      -0.018202778,
      0.014872836,
      -0.02572506,
      0.0052149775,
      -0.0067754346,
      0.020846114,
      -0.0010697723,
      -0.00929902,
      0.0124632185,
      0.02588552,
      0.018360578,
      0.0015307724,
      0.006449667,
      0.030531684,
      -0.006515613,
      0.012764936,
      0.005685295,
      0.0011964694,
      0.017992297,
      0.0026256943,
      0.008566513,
      0.013134026,
      -0.02125187,
      0.016702507,
      0.008878262,
      0.00030257367,
      0.011250023,
      0.0394579,
      -0.0062418156,
      -0.0019198023,
      -0.0037733007,
      0.027349427,
      0.017422948,
      -0.0027750272,
      0.01738952,
      0.014378853,
      -0.0028185234,
      -0.0005075025,
      -0.008720614,
      -0.018125586,
      0.006062892,
      0.022688232,
      0.0009392268,
      -0.005017229,
      0.0025711698,
      -0.024084708,
      -0.037983444,
      -0.011658136,
      -0.01245342,
      0.0129328035,
      -0.008493158,
      0.0058297836,
      -0.024551056,
      -0.012532415,
      -0.01492612,
      0.008719899,
      -0.015061866,
      -0.016307762,
      0.0005695203,
      -0.0074882503,
      -0.0094596315,
      0.031012168,
      -0.013337733,
      -0.0073676356,
      0.028823502,
      -0.016428402,
      0.01096176,
      0.02245637,
      0.013574603,
      -0.0009417802,
      -0.011814513,
      -0.027013568,
      0.020122671,
      -0.102505974,
      0.03203076,
      0.013651288,
      -0.01684609,
      0.011668873,
      0.00586935,
      -0.0015422611,
      0.0058463635,
      -0.008940595,
      -0.008022744,
      0.0126208095,
      -0.0070108515,
      0.028550476,
      -0.024645898,
      0.0112766735,
      -0.011285131,
      0.009697943,
      -0.024081094,
      0.03274502,
      -0.011709404,
      -0.0055459454,
      -0.019977532,
      -0.02346205,
      -0.005682878,
      0.0027271113,
      -0.006350226,
      -0.004062492,
      0.033374414,
      0.017555432,
      -0.0076698493,
      -0.019073263,
      0.01650856,
      -0.004349698,
      -0.025365049,
      0.015413438,
      0.020527946,
      0.020975884,
      -0.0010678866,
      0.02659409,
      -0.014495495,
      0.032272905,
      0.0038778714,
      0.008424581,
      0.039795347,
      0.003364085,
      0.0065292693,
      0.0051781773,
      0.025112137,
      -0.0017927216,
      0.008303994,
      -0.0027744793,
      0.017496377,
      -0.027694222,
      -0.013189359,
      0.014226832,
      0.02707916,
      0.008887304,
      0.0026217205,
      0.00869416,
      0.017693704,
      0.007672885,
      -0.0043878346,
      0.015126654,
      -0.009988649,
      -0.0016149427,
      -0.002378232,
      0.021999603,
      -0.007561485,
      -0.03344726,
      0.0069366912,
      -0.015703652,
      -0.0067364564,
      0.0040433696,
      -0.025756354,
      -0.01865784,
      0.0015748057,
      0.01727788,
      -0.023518657,
      -0.024167897,
      0.026721904,
      0.035576303,
      -0.01682293,
      -0.010214057,
      0.010394833,
      -0.009351699,
      0.0052865203,
      0.011203691,
      -0.025824765,
      0.0017687833,
      -0.016528424,
      0.010088209,
      0.01866187,
      -0.015824197,
      0.008488029,
      -0.0049291016,
      -0.0019996585,
      -0.022623828,
      -0.005539714,
      0.0048931395,
      0.013718502,
      -0.020780386,
      -0.02034467,
      -0.00785283,
      -0.00795198,
      -0.007117816,
      -0.0029737188,
      -0.021352712,
      -0.031792693,
      0.009386453,
      -0.0016422463,
      0.0065591168,
      -0.012092475,
      -0.0076229987,
      -0.001149249,
      0.0017291509,
      -0.0040647476,
      -0.009216746,
      0.008912029,
      0.007689235,
      -0.0041572982,
      -0.0077695935,
      0.012190369,
      0.0041020424,
      0.004651116,
      0.023598136,
      0.026749844,
      -0.012871837,
      0.005572443,
      -0.0082135005,
      -0.041512854,
      -0.033310607,
      0.018792093,
      -0.019221187,
      -0.011251052,
      -0.002120828,
      0.0013709165,
      0.036720358,
      0.005041892,
      0.019668618,
      0.0006869584,
      -0.004752736,
      0.019474374,
      -0.010885402,
      -0.01312313,
      -0.026225058,
      0.017187363,
      -0.013456121,
      -0.021550164,
      0.014735253,
      -0.025846468,
      -0.008223266,
      -0.019072317,
      -0.00783289,
      0.0022555718,
      0.002914237,
      -0.00014469813,
      -0.015763601,
      -0.026347488,
      -0.014994194,
      -0.025827875,
      0.002282345,
      0.0015369856,
      -0.0014912442,
      -0.0037935467,
      0.0070208204,
      -0.0034504395,
      -0.022730554,
      -0.016975172,
      -0.0009120256,
      0.0049472027,
      -0.022180289,
      -0.0039676786,
      -0.024763077,
      -0.019000046,
      -0.00047339598,
      0.00619524,
      0.011855028,
      0.0021724473,
      0.03275012,
      0.0003713597,
      0.01172707,
      -0.0021060084,
      -0.02207109,
      0.002132125,
      0.014160654,
      0.01947884,
      0.010816025,
      0.00094472396,
      -0.03718753,
      -0.0028335243,
      0.006318951,
      -0.028362224,
      0.019660812,
      0.020065866,
      0.012368259,
      0.011147893,
      0.019531516,
      -0.006420188,
      0.0023474821,
      0.020203913,
      0.0041858996,
      0.009155526,
      -0.0077814274,
      -0.008698847,
      0.03257249,
      -0.011198225,
      -0.009793721,
      -0.0015124916,
      -0.0014757433,
      0.014648051,
      -0.022926202,
      0.013014449,
      0.0020843367,
      0.0043107676,
      0.031625357,
      0.027291983,
      -0.023871092,
      0.016111115,
      -0.014312654,
      0.013812911,
      0.0102082165,
      0.0016857838,
      -0.008395717,
      -0.003877069,
      -0.0040588225,
      -0.0095374705,
      -0.003147469,
      0.012921005,
      -0.0068795704,
      -0.009988663,
      -0.0029405043,
      -0.008387822,
      -0.006327144,
      0.027252957,
      -0.011325761,
      -0.02875162,
      0.013797879,
      0.026507238,
      -0.020192228,
      0.007900868,
      -0.011412523,
      -0.020868024,
      -0.016172325,
      -0.0039005396,
      0.01611387,
      -0.0010217469,
      0.009132927,
      0.0038435787,
      -0.01784047,
      -0.013491278,
      0.00870838,
      0.009001262,
      -0.011576971,
      -0.0006872551,
      -0.016235944,
      0.026742686,
      0.0025058687,
      0.010216081,
      0.0028234373,
      -0.008115056,
      0.025238821,
      0.026614137,
      -0.011784145,
      -0.0141047705,
      -0.0037208556,
      -0.03755892,
      -0.0010496774,
      -0.01077958,
      -0.008454196,
      -0.14512026,
      -0.004209803,
      0.0064483117,
      0.0047309925,
      -0.02195811,
      -0.025996115,
      0.011266482,
      -0.031615466,
      0.018152839,
      0.014388147,
      0.02974016,
      -0.00132902,
      -0.0070728213,
      -0.010376238,
      -0.0035132444,
      -0.014186752,
      0.04001149,
      0.007527994,
      0.030701548,
      -0.0028823789,
      -0.023097923,
      0.007338983,
      -0.00049131725,
      0.009858091,
      -0.02541877,
      -0.019693365,
      0.0104350895,
      0.020113626,
      -0.0073314332,
      -0.0024115294,
      -0.032120448,
      -0.0027984579,
      0.012772975,
      -0.0018312794,
      0.010834381,
      -0.016181143,
      -0.025384257,
      0.013131611,
      0.023409916,
      0.0024439972,
      -0.012245124,
      -0.0071603917,
      0.01662343,
      0.0023938383,
      -0.020307975,
      0.013591386,
      0.016447008,
      -0.015648333,
      -0.007940868,
      0.030959293,
      -0.037216272,
      -0.011225253,
      -0.009122659,
      -0.020133058,
      -0.0043901107,
      0.026450269,
      -0.013387152,
      -0.008185711,
      -0.0048026154,
      -0.016791327,
      0.0012538265,
      0.0027612597,
      0.018254057,
      0.013552956,
      0.0065874686,
      -0.004184757,
      0.028280811,
      0.013167281,
      0.013200486,
      -0.0049113394,
      -0.012549356,
      0.011363874,
      0.002528718,
      0.00031658975,
      0.013783425,
      -0.015204042,
      0.029349143,
      0.013860136,
      -0.00048457872,
      0.0049062637,
      -0.0032785535,
      -0.014673585,
      -0.050758254,
      -0.023566881,
      0.017549952,
      0.007313679,
      0.005528878,
      0.0048903786,
      -0.012178053,
      -0.0045992397,
      0.029865634,
      0.008307799,
      -0.029412124,
      0.002397028,
      0.017984124,
      -0.00006733137,
      -0.014474837,
      -0.0012696157,
      -0.015274033,
      -0.014801249,
      -0.014240415,
      0.020094307,
      -0.009238009,
      0.022144495,
      -0.0014432649,
      -0.0061692502,
      -0.00082304946,
      0.015537764,
      -0.0025251943,
      -0.012207202,
      0.00027911228,
      0.0034841306,
      0.002033438,
      -0.16134341,
      -0.0063043246,
      0.0073306235,
      0.009436939,
      0.0106826415,
      -0.005117906,
      -0.0017661724,
      -0.0077725663,
      0.007246197,
      0.014174308,
      0.0103709,
      -0.0074924044,
      -0.013692319,
      -0.0028854792,
      0.02768518,
      0.118165866,
      -0.010567422,
      0.015197001,
      -0.019124195,
      0.004998849,
      -0.006271613,
      -0.008988645,
      -0.019633645,
      0.001501894,
      -0.009772497,
      -0.023146452,
      0.015994448,
      -0.0038118903,
      0.0033061428,
      0.0035442016,
      -0.012932523,
      -0.010378899,
      0.030498447,
      0.026373234,
      0.005274531,
      -0.0057471273,
      -0.005922946,
      0.01743844,
      0.005282855,
      0.010226798,
      0.002703569,
      -0.0020017966,
      -0.004367831,
      0.014885635,
      -0.00019192493,
      -0.0019073982,
      -0.032859813,
      -0.031627372,
      -0.018765794,
      0.006413878,
      -0.030357575,
      -0.054794487,
      -0.0050180606,
      -0.011865655,
      0.0027797262,
      0.018197414,
      0.006197977,
      0.01167614,
      0.0021686088,
      0.0004840874,
      -0.010208138,
      0.016286228,
      0.0018262409,
      0.0051777945,
      0.0014101155,
      0.004921178,
      0.031786364,
      0.013133329,
      0.020333843,
      -0.013852386,
      0.024535883,
      -0.0042023854,
      0.000977578,
      0.0193471,
      -0.006804989,
      -0.006594149,
      -0.0039153784,
      0.030105636,
      0.01136838,
      -0.004778545,
      0.0045381635,
      -0.007864465,
      0.012061345,
      0.0013754845,
      0.013401729,
      -0.008107854,
      -0.02310832,
      0.0008832028,
      -0.010226944,
      0.0075239195,
      0.0006807134,
      -0.015763814,
      -0.019992365,
      -0.0068690386,
      -0.004456886,
      0.030788526,
      -0.015341453,
      -0.024296386,
      0.040555324,
      -0.0076604057,
      0.007655941,
      -0.019255724,
      -0.005381747,
      -0.048862103,
      0.025366943,
      0.020998986,
      -0.0063796826,
      0.014042537,
      -0.0021341268,
      -0.015734809
    ]
  },
  {
    "id": "genai_cohort_python_08_Break_continue_and_loop_fallback_vtt",
    "content": "All right, so let's move on to 2 probably the final video of this 3 section where we are going to study 4 about the two important topic which 5 is one is a skip, another one is a 6 break. 7 So we'll study the first of all 8 the problem statement and then we're 9 going to write the code for it. 10 And then I'll show you one 11 of the interesting case 12 of the loop as well. 13 It's not a part of a subject 14 as such, but it's a pretty 15 interesting use case as well. 16 So notice here it says some 17 chai flavors are out of stock. 18 You want to skip those and stop 19 entirely if someone 20 requests a restricted flavor. 21 So the task is skip if flavor 22 is out of stock and break if 23 the flavor is discontinued. 24 Now let's go ahead 25 and study about them. 26 First of all, so let's just say 27 this is your loop that's going on. 28 So this is your loop. 29 And in your loop you are constantly 30 going ahead and trying 31 to get the values just like this. 32 This is how the loop work. 33 Constantly keep on going into it. 34 Now what this skip and these things 35 means that let's just say 36 you are going to go ahead and loop 37 through it probably five or six 38 different times just like that. 39 So we'll just change this up here 40 a little bit here so 41 that it actually looks good. 42 So let's just assume this is five 43 different times that you're looping. 44 The first thing that you're going 45 to study is known as continue. 46 This is a keyword now the continue. 47 The whole job of the continue is 48 to make sure that 49 whatever the time you're looping, 50 I'll just skip one of them. 51 So let's just say this is one of 52 them and probably we should 53 have one more of them to make 54 sure that we are actually going 55 through with this nicely and we 56 can actually understand this 57 part. 58 So we will put up some 59 of the checking condition and let's 60 just say out of these three, this 61 is the condition which matches. 62 So as soon as we write 63 the continue statement, this whole 64 thing will just go away. 65 So as we can see, this 66 will be deleted. 67 So this part of the loop 68 will be skipped. 69 On the other hand, the break 70 is also another keyword 71 just like the continue. 72 But since the continue just breaks, 73 or kind of allows you to skip one 74 of the loop while the break allows 75 you to just completely stop the loop 76 wherever it has encountered this. 77 It's much more easier actually 78 to see in the code part 79 and realize that what's happening. 80 I hope you got some of the GIST 81 at least 20, 30% of it. 82 But rest you will easily understand 83 as we go through this one. 84 So we call this one as 85 simply 07 underscore. 86 Not like that, out of order. 87 Py. 88 And let's just say we have some 89 of these orders in front of us. 90 Let's just say we call them, flavors. 91 So somebody's asking us for 92 the flavors of the chai, and we're 93 going to literally match with them. 94 So first is ginger. 95 The second flavor in itself, 96 we call this as out of stock. 97 Let's go and say out of stock. 98 Just like this. 99 Another one is, lemon. 100 And just like this, another 101 one is discontinued. 102 Discontinued. 103 And. 104 And let's just say there is 105 another one which is Tulsi. 106 This is also an interesting flavor. 107 So these are all the flavors that 108 we have, and right now we want 109 to loop through all of them. 110 So simple way of looping 111 through that is. 112 Let's call this one as 113 flavor out of in flavors. 114 There we go. 115 So first flavor is a variable. 116 The second flavors is a list. 117 So we need to put up a check. 118 Check always comes up 119 with the if condition. 120 And yes, this again gets up. 121 So we'll just say if the flavor 122 that we have is discontinued, 123 so we'll just match it exactly. 124 First of all, we'll just check 125 for out of stock, and then we'll 126 check for the discontinued. 127 So if the flavor is out of stock, 128 then we can simply go ahead 129 and skip that particular loop. 130 So all you got to do is 131 in this case, we use 132 the keyword which is continue. 133 So we'll just go ahead 134 and say continue. 135 Now, here's a small 136 mistake that we have done. 137 We forgot the semicolon. 138 The moment you put up a semicolon, 139 the continue is going 140 to give you a problem because we 141 have an indentation problem. 142 So make sure you go up here 143 and hit four spaces or tab, 144 whatever you want to wish. 145 Literally in the Python file 146 automatically VS code will give 147 you four spaces, just like as 148 mentioned in the pep as well. 149 Now we also want to check 150 for another condition. 151 So we can just come up here 152 and check for another one. 153 If the flavor is equals to. 154 Let's go ahead and copy this so 155 that we don't make any typo. 156 And just like this. 157 So in this case, we use 158 a keyword known as break. 159 Now, after this, we go ahead 160 and print, whatever 161 the statement we want to print. 162 So we'll just go ahead and say 163 that, hey, I, would love to print 164 and use a printing method. 165 And we'll just say this 166 continued item Foundation. 167 Now here's a very, very 168 interesting, part of it. 169 We can just go ahead and break it 170 and we'll see what happens in this. 171 And notice here the indentation. 172 This is my if statement. 173 This is outside of the if statement, 174 but still inside the loop. 175 And we can have another such 176 statement, but we can actually 177 go ahead and move it outside 178 of the for statement as well. 179 And we can just print and see 180 what happens in this. 181 So I'll just go ahead and remove this 182 and I'll just say F and we'll just 183 go ahead and say outside of, loop. 184 So this is just to make sure that 185 you understand what is happening 186 and we'll definitely add a little 187 bit more to it that how it goes 188 and how it works and everything. 189 Let's just go ahead and run this. 190 You will learn quite a lot, 191 although it looks a little bit 192 confusing, but bear with me. 193 You will learn a lot 194 in this video itself. 195 So let's just go 196 ahead and run and 07. 197 There we go. 198 Notice here it says 199 discontinued item found. 200 Then again, discontinued item found. 201 And then we are simply 202 outside of the loop. 203 This is interesting that. 204 Why did this happen? 205 Why did. 206 We got, this one being 207 printed two times. 208 So the first time it actually looped 209 through, it found ginger and then 210 it went to the out of stock. 211 So the out of stock ginger, one 212 went, all the way through it. 213 We didn't do any printing 214 of the ginger or anything, but. 215 But as you will notice, this was 216 printed at the time of ginger. 217 Then as we simply move to the out 218 of stock, it simply says, hey, 219 I don't want to do anything. 220 So out of stock simply came up here. 221 And as soon as it saw the continue, 222 it didn't worked out there. 223 It would be rather interesting if 224 we go ahead and also print out. 225 Let's go ahead and print 226 this, statement 227 because this is interesting. 228 Instead of saying discontinued 229 out term, find, go ahead and remove 230 this, add this one, and say 231 we want to print the flavor. 232 Can we print the flavor? 233 Much more interesting stuff. 234 All right, let's go 235 ahead and print this. 236 So it says first time 237 the ginger item was found. 238 All right, no problem there. 239 Ginger item was found. 240 Then it found the out of stock. 241 So as soon as it finds the out 242 of stock, it says continue. 243 That means I will not 244 continue the loop. 245 I'll skip right from here. 246 So nothing was printed. 247 Then it says lemon. 248 So lemon was printed here. 249 And then, it didn't 250 match this condition. 251 It didn't match this condition. 252 So it printed out. 253 Then we Simply got interacted 254 with the discontinued. 255 So as soon as you interact 256 with the discontinued, 257 the break statement hits. 258 That means the whole of the loop is 259 not going to run outside of this. 260 So you got only till the lemon. 261 After that nothing prints. 262 This guy never got a chance 263 to be printed. 264 And as soon as we got out of this we 265 simply go ahead and say that, hey, 266 I am printing outside of the loop. 267 This understanding of indentation 268 is pretty important and we 269 really, really need that. 270 Now apart from this, you could have 271 done something like this, that 272 hey, before we break this, we want 273 to print this and obviously we 274 need to work on indentation. 275 So there we go. 276 Now the output will be 277 drastically different. 278 So if I go ahead and run this notice 279 here, Discontinued item found. 280 And we simply say 281 outside of the loop. 282 Because this time we don't 283 have anything to be printed out in 284 in just the loop. 285 We just are checking 286 for the two condition. 287 First one for out of stock, 288 second one for the discontinued. 289 So the only item that gets printed 290 is discontinued because only 291 then you move inside this loop. 292 So that's why we see 293 discontinued outem found. 294 And then we simply have the item, 295 outside of this being found. 296 We can do one more thing, one 297 more very interesting thing. 298 I can just go ahead and have 299 a duplicate of this. 300 I'll print this up and notice 301 here I'm printing it outside. 302 So this is if block. 303 This again is if block. 304 But this is a loop block. 305 Notice here it's inside the loop. 306 So the ability to understand 307 what's happening and how is it 308 happening is actually very, 309 very interesting and important 310 in the world of Python. 311 I'll print this notice here. 312 Ginger, item found. 313 Lemon, item found Discontinued 314 Block also got executed outside. 315 After that nothing gets executed. 316 So this one gets out. 317 So this is the most important part 318 that you learn and understand deeply 319 about the continue break and how 320 the structure of the loop work. 321 Now I have another such example 322 and that will be interesting. 323 I thought to keep it as a separate 324 video, but I'll just 325 introduce you within this video. 326 So this is 08 and we're going 327 to call this one as for else. 328 Yes, there is a such thing 329 as known as for else. 330 Now look at this very interesting 331 example that we have. 332 So I'll just go ahead 333 and call this one as staff. 334 So we have some of the staff 335 members which is a list. 336 Inside the list we have tuples. 337 So first of all we have Amit 338 and we also store the age of them. 339 So let's just say 16. 340 And we have another staff 341 which is also a Tuple. 342 So I'll just go ahead and say Zara 343 and the staff age probably 17. 344 And then we have another tuple 345 and let's just say we call 346 this as Raj, fictitious name. 347 No, no matter there. 348 And we simply go 349 ahead and work on 15. 350 Now we have the tuple, we 351 have name as well as age. 352 Can we loop through them? 353 For sure. 354 We can just go ahead and say 355 name age, because that's what 356 we are about to return. 357 And we'll simply say 358 this in the staff. 359 Now I don't want to use it like that. 360 I only want to print when 361 the age is above 18. 362 Hey Hitesh, what are you saying? 363 Nobody's age is above 18. 364 That's exactly my point. 365 So I can just go ahead 366 and write it like this. 367 If age is greater than or equal 368 to 18, then only we are 369 doing the hiring or we are 370 printing some message. 371 In this case we are simply go ahead 372 and simply use the print just like 373 this and formatted string and we 374 will say name is eligible for. 375 Eligible to manage the staff. 376 Manage the staff or hiring, 377 whatever you want to call this. 378 All right, now once this is all 379 done, we simply want to go ahead 380 and hit the break as well. 381 Now here's the most interesting part. 382 We will go ahead and simply say else. 383 That's interesting. 384 Yes, just in the indentation level 385 of where the for loop is. 386 And I can go ahead and print 387 the value just like this 388 and can have a probably a formatted 389 string however you like that. 390 No one is eligible 391 to manage the stuff. 392 This is one of the most interesting 393 case and interesting style 394 of writing the Python code. 395 I'll run this one and we will call 396 this1as08 and run this notice here. 397 It says no one is eligible 398 for managing the staff. 399 But let's go ahead and reverse 400 the rule we are looking up 401 for less than eight should be 402 less than or again use this. 403 So age should be less than 404 or equal to 18. 405 So all of them are now part of it. 406 Now here's the interesting part. 407 What will be printed? 408 That's the most 409 interesting part of it. 410 Notice here Amit is eligible, so 411 the very first guy is eligible. 412 And after that we are 413 just breaking this. 414 So we are not running 415 the loop anymore. 416 Whoever the first guy comes 417 up and meets the criteria, 418 we're just simply saying that 419 you are eligible for it. 420 But notice here the else 421 statement doesn't print. 422 And this is one of the strangest 423 behavior that where the else 424 statement is used or could 425 be used, the indentation is not 426 in the if statement. 427 This is not a part of if statement. 428 This is a part of a For statement. 429 So this is one of the most 430 interesting way the else block only 431 runs if the loop didn't break. 432 Use it when you are searching 433 for something, it's not found. 434 It's kind of a execution 435 of the fallback logic. 436 So call this one as 437 a fallback one here. 438 Pretty interesting. 439 You will see this quite a lot, 440 but only in the in depth series, 441 just like we are doing here. 442 That is it for this video. 443 Hope you enjoyed this one. 444 It was a pretty interesting video 445 altogether and hope you have 446 learned in that and that is it all 447 about the loops in Python. 448 That is it for this video. 449 And let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "08 Break continue and loop fallback.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/08 Break continue and loop fallback.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0068240804,
      0.0097093,
      0.017086709,
      -0.06368467,
      0.0031248056,
      -0.025965732,
      -0.012303124,
      0.012715128,
      0.008344107,
      -0.012802148,
      -0.00028285352,
      -0.023417637,
      0.00009319552,
      0.0059309877,
      0.11517207,
      -0.010580838,
      0.00083438575,
      -0.024018792,
      0.013243444,
      0.0020739196,
      -0.009678791,
      -0.0070006726,
      0.026214749,
      -0.033945788,
      0.015975734,
      -0.008430342,
      -0.004176983,
      0.020593222,
      0.033290297,
      -0.018306999,
      -0.004141125,
      -0.00854952,
      0.012542796,
      0.027893698,
      0.0049364325,
      0.025997441,
      0.005840583,
      0.0010595198,
      -0.018054215,
      0.004194573,
      -0.007891286,
      0.009790696,
      0.009977453,
      -0.005187115,
      0.009312869,
      -0.0063296123,
      -0.010928177,
      -0.0032058337,
      0.0049343533,
      0.0358231,
      0.011267872,
      -0.00017878959,
      0.006862372,
      -0.18663752,
      0.020531457,
      -0.0012814923,
      0.003263663,
      -0.0039434703,
      0.010218533,
      0.0025319995,
      -0.027693309,
      0.0039380104,
      -0.025361039,
      -0.024693185,
      -0.008044747,
      -0.01580806,
      0.030310541,
      -0.002666644,
      -0.013137657,
      -0.0026610724,
      0.012890039,
      0.0042008855,
      -0.023453299,
      -0.012132676,
      -0.017985525,
      -0.046378452,
      0.015044492,
      -0.015455545,
      -0.008077085,
      0.016313322,
      0.014744638,
      -0.017370494,
      -0.014657254,
      -0.012662181,
      0.002072869,
      0.010843106,
      -0.01634066,
      -0.011254642,
      0.012036396,
      0.0022805673,
      -0.045999072,
      0.02007357,
      -0.009409509,
      -0.021868683,
      -0.016081914,
      -0.00069110544,
      -0.021893766,
      0.0036346992,
      -0.0072368733,
      -0.0045033335,
      0.0053051934,
      -0.016947217,
      -0.009009947,
      -0.007681544,
      0.005243225,
      0.009571957,
      -0.009617019,
      -0.027147476,
      -0.0031246326,
      -0.017294142,
      -0.003254868,
      0.0026629681,
      -0.003149547,
      0.013225175,
      -0.007890672,
      -0.1656266,
      0.0019473794,
      0.014878493,
      -0.023306964,
      0.0044196863,
      -0.01300836,
      0.0028483244,
      -0.009267507,
      0.034376148,
      -0.01949235,
      0.020738028,
      0.009787404,
      0.021798719,
      -0.0077472297,
      0.006981124,
      -0.017899862,
      -0.016250148,
      -0.0042252075,
      0.00044104582,
      -0.00028358484,
      0.03121631,
      -0.00953472,
      -0.016148245,
      -0.0047265366,
      -0.0028636858,
      -0.018742958,
      0.019618986,
      0.0010282159,
      0.025320485,
      -0.006608831,
      -0.010369487,
      -0.025063308,
      0.00012193315,
      -0.009128554,
      -0.0259703,
      0.01871989,
      -0.0064133923,
      -0.006589087,
      -0.017815161,
      0.018564014,
      -0.023525173,
      -0.0009133052,
      0.018185375,
      -0.0021752992,
      -0.0042516016,
      -0.014478904,
      0.00013558369,
      0.0028707609,
      0.002431197,
      0.000121126795,
      0.010009317,
      -0.0020291398,
      -0.0033294547,
      0.00934429,
      0.007787798,
      0.0036207305,
      -0.00887075,
      0.01347989,
      -0.0036216218,
      -0.01343812,
      -0.003765533,
      -0.001938518,
      -0.017814895,
      0.017673543,
      -0.00754382,
      0.002717904,
      -0.010663489,
      0.003931782,
      0.019792503,
      -0.0021984563,
      -0.0059885485,
      -0.017809864,
      0.004802227,
      -0.0000088796105,
      -0.0048936857,
      -0.00546913,
      0.0020425345,
      0.023825698,
      0.013599902,
      -0.006443875,
      -0.017844649,
      0.0022982392,
      0.008291439,
      0.0037478914,
      0.023128524,
      0.021340765,
      -0.018430427,
      -0.004473457,
      -0.005596177,
      0.019385941,
      -0.03737806,
      0.013188713,
      -0.016667264,
      0.006479097,
      0.01599326,
      -0.01698788,
      0.007438404,
      0.008834188,
      -0.008847448,
      0.012733961,
      -0.010388091,
      0.009600409,
      0.006012087,
      -0.00079043873,
      -0.009787085,
      0.004726245,
      0.002176785,
      0.009724985,
      0.033757053,
      0.00039447917,
      -0.009454177,
      0.022306165,
      0.010546835,
      -0.0012408688,
      0.00034447483,
      0.031878397,
      0.0018364775,
      -0.022243971,
      0.0054517556,
      -0.0008685313,
      -0.0049830065,
      0.014461139,
      0.045464233,
      0.000845422,
      0.019163735,
      0.00463609,
      0.00061965635,
      -0.033038024,
      -0.004648142,
      0.022392256,
      -0.013460604,
      0.012710121,
      0.0004511438,
      -0.0078110415,
      -0.03412582,
      -0.0003948988,
      -0.016434059,
      0.003205727,
      -0.010551234,
      -0.0034495406,
      -0.020810487,
      -0.019230427,
      -0.0066630696,
      -0.0036069588,
      -0.010503487,
      -0.014471611,
      0.000024655868,
      -0.004036935,
      -0.012313387,
      0.030056618,
      -0.0033691546,
      0.009789982,
      0.02361472,
      -0.009124911,
      0.016755521,
      0.012433599,
      -0.005064061,
      -0.0006182939,
      0.008964963,
      -0.03303905,
      0.0136054605,
      -0.117099516,
      0.019593857,
      -0.00057246565,
      -0.023229083,
      0.006502338,
      0.005144507,
      -0.02441856,
      0.0025162785,
      0.0114889275,
      0.005482253,
      -0.00079698244,
      -0.017362738,
      0.024756484,
      -0.033307765,
      0.008822615,
      -0.011885264,
      0.0035490366,
      -0.012757807,
      0.025990546,
      0.00509856,
      -0.0029258651,
      -0.02025136,
      -0.0101930285,
      -0.004740025,
      0.017376002,
      -0.0056821294,
      0.009410274,
      0.018557003,
      0.014746325,
      -0.008047838,
      -0.010971925,
      0.03234636,
      -0.006532727,
      0.008591795,
      -0.0017798141,
      0.020144438,
      -0.0099153705,
      0.003210572,
      0.00028561102,
      -0.013088851,
      0.029154439,
      -0.022550277,
      0.010145522,
      0.043003947,
      0.005690278,
      0.030462118,
      0.0002833202,
      0.0028165237,
      -0.015318611,
      0.0050385366,
      -0.00719397,
      0.01686162,
      -0.014613852,
      0.013549367,
      0.021243814,
      0.023117842,
      0.0028704386,
      0.007959485,
      0.009629067,
      0.019748498,
      0.008304419,
      0.0009828043,
      0.0021291964,
      -0.021372277,
      0.016481832,
      0.016682172,
      0.0035476433,
      -0.01802535,
      -0.019263033,
      -0.0009542923,
      0.0040990575,
      -0.008892082,
      0.02305134,
      -0.025609037,
      -0.010242333,
      0.0037133382,
      0.030593937,
      -0.0115538165,
      -0.028523073,
      0.029881759,
      0.04274428,
      -0.010813674,
      -0.005479608,
      0.011191493,
      0.005630891,
      0.0154167805,
      0.012612876,
      -0.0044142962,
      -0.0021230015,
      -0.022732208,
      0.013318714,
      0.01764341,
      -0.024338426,
      0.003376468,
      -0.034762956,
      -0.014112531,
      -0.018687304,
      -0.014094522,
      -0.023391178,
      0.022811588,
      -0.026924683,
      0.008356748,
      -0.0145982485,
      -0.0044787736,
      -0.0073349485,
      -0.014599459,
      -0.0018731303,
      -0.0077481735,
      0.008329507,
      -0.033925578,
      -0.0030899083,
      -0.01122899,
      -0.004936426,
      -0.012549256,
      -0.02864144,
      0.018176153,
      0.007424275,
      -0.0038220326,
      0.015363243,
      -0.008361613,
      0.004185926,
      -0.0035018467,
      0.006767865,
      0.016267337,
      -0.013021326,
      0.010881838,
      -0.017461147,
      0.008158712,
      -0.026797228,
      -0.041390873,
      -0.027271498,
      0.038949605,
      -0.03391161,
      -0.016583148,
      -0.00026460382,
      0.004904692,
      0.016335942,
      0.031353224,
      0.020943956,
      0.0038153152,
      -0.007864859,
      0.024759898,
      0.0033367022,
      -0.0011219793,
      -0.015954925,
      0.033212095,
      -0.015136694,
      -0.006941275,
      -0.0072313426,
      -0.0123610925,
      -0.014310579,
      -0.015703496,
      -0.0047661797,
      -0.0074154423,
      0.00924083,
      0.005508285,
      -0.0018999523,
      -0.017268294,
      0.000187569,
      -0.009329444,
      -0.0144234095,
      -0.001524428,
      -0.020746052,
      -0.008048212,
      0.027510848,
      0.011160035,
      -0.018701911,
      -0.0099719465,
      0.012953636,
      0.0085719535,
      -0.004780936,
      -0.014201839,
      -0.029836446,
      -0.0065278145,
      0.019527724,
      0.008769815,
      0.022535315,
      -0.006102972,
      0.035704207,
      -0.004308311,
      0.023643767,
      -0.0029379434,
      -0.0041386876,
      -0.0014400121,
      0.0115550235,
      0.0011269999,
      0.027432121,
      -0.0061492138,
      -0.031704433,
      0.01024936,
      -0.0040409276,
      -0.018442571,
      0.0026753033,
      0.014980629,
      0.0042484864,
      0.031706862,
      0.025939675,
      0.0018986241,
      -0.007203042,
      0.018947575,
      -0.00868901,
      -0.008746655,
      0.009909959,
      -0.0014676505,
      0.019069815,
      -0.00856682,
      -0.016427515,
      -0.020515433,
      0.00476259,
      0.006914456,
      -0.019914256,
      -0.00049842196,
      -0.011216692,
      0.0029872514,
      0.024551256,
      0.030060055,
      -0.006799389,
      -0.0018749158,
      -0.03370093,
      0.0025664524,
      0.012755931,
      -0.01699434,
      0.012843042,
      -0.0077653145,
      0.009392856,
      -0.0035592024,
      0.0001479352,
      0.008157873,
      -0.004266436,
      -0.0023134013,
      -0.0067380285,
      0.013630503,
      -0.010286688,
      0.009828125,
      -0.044421375,
      -0.005602815,
      0.01863764,
      0.028440593,
      -0.010337822,
      0.003200666,
      0.010731113,
      -0.022838209,
      -0.0119660525,
      0.006259625,
      0.013732529,
      0.010341579,
      0.030045385,
      -0.0011880165,
      -0.006079045,
      -0.02545269,
      -0.023163477,
      0.014300883,
      0.005014156,
      0.0052386466,
      0.0011357355,
      0.041923083,
      -0.0032600039,
      0.0043466543,
      0.013803905,
      -0.012306404,
      0.039207496,
      0.02044975,
      -0.001335063,
      0.0018644625,
      -0.009732788,
      -0.026081204,
      -0.015544493,
      -0.003750479,
      0.006242793,
      -0.1355194,
      0.0014216132,
      0.009191094,
      -0.0028751963,
      -0.010924702,
      0.004700219,
      -0.020522859,
      -0.03189181,
      0.0009732967,
      -0.0032407122,
      0.020601045,
      -0.009588916,
      0.00075922033,
      -0.029525196,
      0.008708764,
      -0.013122508,
      0.0013723618,
      0.0136738485,
      0.028263424,
      -0.011936794,
      0.0035898814,
      0.010837946,
      0.0016112301,
      0.004239599,
      -0.0062897736,
      -0.015921248,
      -0.0029782865,
      0.015677646,
      0.0049467543,
      0.009903043,
      -0.04289802,
      0.00993007,
      0.0035672947,
      0.010567255,
      0.0016551329,
      -0.02195452,
      -0.012247877,
      0.005250699,
      -0.0019648192,
      0.0011106115,
      -0.00030989997,
      -0.010670252,
      0.018301535,
      0.0064316536,
      0.0014018009,
      0.015020395,
      0.022059327,
      -0.017415235,
      0.0006868615,
      0.014813567,
      -0.034466725,
      -0.019344656,
      -0.007010438,
      -0.021179277,
      -0.016715579,
      0.012133627,
      0.004029549,
      -0.006684912,
      -0.0065375604,
      -0.021902194,
      0.0035328385,
      0.004937912,
      0.0205363,
      0.027295342,
      0.0051719877,
      -0.009683335,
      0.023665642,
      0.010327105,
      0.012835709,
      -0.005623999,
      -0.013290508,
      0.017073594,
      0.003000518,
      0.024698809,
      0.026645971,
      0.002316139,
      0.017178202,
      -0.0017443076,
      0.0005056214,
      -0.0023505068,
      -0.01618707,
      -0.022948287,
      -0.060312223,
      -0.018736497,
      -0.0032086908,
      -0.0056644883,
      0.0045398553,
      0.01621199,
      -0.012285699,
      -0.0030694513,
      0.01395527,
      -0.017594082,
      -0.023618521,
      -0.013498543,
      0.02939317,
      0.019353483,
      -0.0048095724,
      -0.009456366,
      -0.012265222,
      -0.010703237,
      -0.013326321,
      0.011799304,
      -0.024532052,
      -0.012323142,
      0.007926612,
      -0.026523348,
      0.0072334115,
      -0.001403576,
      0.00053271546,
      0.008750622,
      0.011915661,
      -0.009176663,
      0.0012651361,
      -0.1548571,
      -0.0036313874,
      -0.0029296954,
      -0.0020227237,
      -0.0076519814,
      0.008812245,
      -0.016701058,
      -0.021109004,
      0.009524728,
      -0.003778722,
      0.012084293,
      -0.013078353,
      0.0063370797,
      0.0060157827,
      0.034225475,
      0.12261645,
      -0.0096633425,
      0.0066782134,
      -0.03223795,
      0.019531643,
      -0.006820674,
      -0.015689047,
      -0.024159072,
      0.012105417,
      -0.017732635,
      -0.014795683,
      0.0058072666,
      -0.0030732176,
      0.0039366144,
      -0.008849326,
      -0.0102476,
      -0.005835616,
      0.01385527,
      0.029917587,
      0.0044520507,
      -0.0097403,
      -0.00080559624,
      0.023870032,
      -0.014545366,
      0.009272026,
      0.029840898,
      0.014360517,
      -0.01092479,
      0.00013504062,
      0.016129598,
      0.0075656725,
      -0.013935688,
      -0.013407288,
      -0.00335773,
      -0.0072318967,
      -0.03087094,
      -0.0631289,
      0.0042003784,
      -0.010468741,
      -0.009016127,
      0.03062116,
      0.007029821,
      0.017899726,
      -0.0017376939,
      0.016981576,
      -0.020764662,
      0.0023024278,
      -0.01203065,
      -0.0015569974,
      0.00295239,
      -0.00037944166,
      -0.00040403113,
      0.0026879641,
      0.030416112,
      -0.007073736,
      0.011248331,
      0.020062797,
      -0.0045298245,
      0.0138871055,
      0.0047617843,
      -0.0041173426,
      -0.024541628,
      0.033469126,
      0.0056348015,
      -0.0019752416,
      0.0060814717,
      -0.0015215455,
      0.0129576,
      -0.022763858,
      0.015979683,
      -0.008638051,
      -0.0226094,
      -0.01008607,
      0.0030610277,
      -0.0081492625,
      -0.0024045215,
      -0.008092429,
      -0.0023117834,
      -0.0014337652,
      0.008566025,
      0.008036379,
      -0.009183471,
      -0.014915017,
      0.017494531,
      -0.010225743,
      -0.017075688,
      0.009733845,
      -0.008369237,
      -0.029539227,
      0.024253426,
      0.007812446,
      -0.0007006934,
      0.021339554,
      0.0006387601,
      -0.008645785
    ]
  },
  {
    "id": "genai_cohort_python_09_Walrus_operator_is_interesting_in_python_vtt",
    "content": "All right, so in the last video 2 I said that we are done 3 with the loop section, and that 4 is absolutely correct, we are 5 done with the loop section. 6 But I have these two topics which 7 I want to discuss and I didn't 8 want to create a fresh new section 9 just for the two topics, so 10 I thought it would be bad idea. 11 So instead I will just introduce 12 them in the loops itself. 13 It has nothing to do 14 in the context of the loop itself. 15 These are standalone operator, 16 kind of newly introduced 17 in the world of Python. 18 But now we cannot call them as new. 19 They are pretty much here 20 for a really long time. 21 The first one we are going 22 to talk about is the Walrus. 23 The second is not even operator, 24 just the style of writing the code, 25 especially the Python code. 26 So the walrus operator, you will 27 see this quite a lot these days. 28 It looks like the colon 29 and an equal sign. 30 I will give you the entire 31 history workflow as well as some 32 of the examples of it. 33 But first of all, let's 34 understand, there are certain 35 things in the Python. 36 For example, in Python an assignment 37 like x equals 5, is a statement. 38 Remember this is a statement, 39 it sets something, 40 it doesn't return a value. 41 An expression on the other hand is 42 something that returns a value. 43 For example, if I go ahead and say 44 three plus three, 45 this is an expression, so this 46 actually returns a value. 47 This is going to return 48 us the value six. 49 So, so whoever returns us 50 a value which consider 51 that as an expression. 52 So this is going 53 to be the output here. 54 We are just assigning the value, 55 so it is just a statement. 56 So always remember that this 57 will serve us a little 58 bit purpose in this here. 59 And now for the Walrus operator 60 I'll take you on to the code 61 part because that is much easier 62 than just discussing it. 63 Up here I'll create the new 64 file in the loop itself. 65 I'll call this one as 09 and we'll 66 call this one as Walrus Py. 67 Okay, first of all, let's see 68 that what happens when we 69 don't use the walrus again? 70 Nothing happens, you 71 just write your code. 72 Just like that. 73 For example, let's just say we 74 have a value 13, it's just a number 75 and we also want to have 76 a remainder, so remainder. 77 So we can pretty much easily 78 see that if the value is modulus 79 by 5, we get the remainder, 80 whatever the value is. 81 And let's print out 82 a simple statement. 83 If we have a remainder, 84 we want to print this up. 85 So we'll just go ahead and say print 86 Just like this, a formatted value 87 and we'll say if we have a remainder 88 that means not divisible, obviously 89 it's not completely divisible. 90 And we'll say remainder is. 91 And whatever the value of 92 remainder that we get, pretty 93 simple program, no big deal. 94 I'll comment out a lot of code 95 in this entire program. 96 So this is be aware of that part. 97 I'll go ahead and run the python 98 with the 09 and we can see not 99 divisible, the remainder is 3. 100 Obviously when you divide 13 101 by 5 you get 3 as a remainder. 102 Now how can you write 103 the exact same program when we 104 have the Walrus operator? 105 Let's convert this exact same program 106 and again this is an easy way 107 select all of them, press control/uh 108 or command/on a Mac and it 109 will just comment out everything. 110 Let's rewrite this exact same program 111 so we have a value which is 13. 112 Now previously we calculated 113 the remainder in a separate line. 114 Then we tested out remainder. 115 But here what we can do is I can 116 just put out this if statement 117 and then I use a parenthesis 118 because I'm evaluating something. 119 An expression will be here. 120 So I'll just use a variable 121 directly that says remainder. 122 And as you can see we cannot 123 use it, it's giving us error. 124 But with the help of Walrus operator 125 I can just use it just like this 126 and I can say value simply moduled 127 by 5 and then I can just keep on 128 writing my code and I can actually 129 go ahead and use this exact same 130 line just right here and uncomment 131 that. 132 And There we go. 133 So we can just, we see that 134 exact same program can be 135 shrinken down a little bit. 136 And what we saw that we first 137 calculated the remainder We found 138 this expression's value and stored 139 that into a variable 140 and then we evaluated the variable. 141 This all can be done 142 just right up here. 143 So this is going to be 144 an exact expression value? 145 Yes, this is little bit 146 shorter version of it. 147 It works fine. 148 Let me show you by doing that also. 149 So if I clean this, run 150 this again, it says not 151 divisible, remainder is 3. 152 So yes, this is a pretty 153 interesting operator. 154 Now not only that, through this 155 operator you can actually work 156 in a pretty interesting ways. 157 It's little hard to digest that. 158 Okay, and by the way, what 159 happens if you go ahead and just 160 don't use walrus here? 161 If I don't use a walrus? 162 You can see we have 163 whole syntax error. 164 Let's see what syntax it says. 165 It says this was not closed. 166 Yes, we are closing this. 167 No problem there. 168 And you're going to see 169 the errors are not easy. 170 Even if I remove this kind of 171 a thing, you're going to see this is 172 still not that remainder is not 173 defined and you cannot actually go 174 ahead and have the value here. 175 What are you trying to do? 176 This is not an allowed 177 syntax, but with the help 178 of Walrus Operator, you, 179 do all the things at once. 180 Let's just go ahead and read 181 a little bit of the docs as well. 182 So I'll just go ahead and move 183 at the very top and hopefully 184 I'll be able to search for it. 185 Can we go ahead and search for it? 186 Walrus? 187 Nope. 188 I guess Google would be 189 a good one to search for it. 190 So let's just say walrus and the 191 reason why I am taking you onto the 192 documentation website so that you 193 develop a small habit of seeing what 194 happens when you study the real 195 documentation or from the original 196 documentation. 197 So it recently came in the Python 198 3.8 and you're going to see, this 199 is a walrus, the eyes and the tusk 200 of a walrus, just like this. 201 So they have this whole 202 thing available to us 203 and you get the idea. 204 So pretty simple and pretty easy 205 to work on with and the part 206 is pretty clear, they mention 207 it pretty nice and easily. 208 What we just saw there is 209 a new syntax that assigns the value 210 to a variable as a part 211 of larger expression. 212 Remember, that's exactly why 213 I told you this is a statement, 214 this is an expression. 215 So notice here, this whole thing is 216 an expression, not this whole, 217 this whole thing is an expression. 218 And this will deliver the value 219 here in the remainder. 220 But the moment you actually go ahead 221 and use a walrus, then you actually 222 allows it to be used just like that. 223 All right, so as you can see, 224 it not only gets that, 225 but now it gets a value. 226 So pretty interesting. 227 And I'll show you some 228 of the other use cases as well 229 and you will have fun with this. 230 So, all right, we'll 231 keep it as it is. 232 Let me go ahead and create 233 another example. 234 I'll say available sizes. 235 So you have some of these sizes 236 available to you, and the first one 237 is small, then we have medium, 238 of course, and then we have large. 239 So these are sizes of T cups maybe. 240 And then we want to check whether 241 these are available or not. 242 And user is requesting this. 243 So previously what we do, we 244 create an input variable or 245 some kind of a way to take 246 the user input just like that. 247 But with the help of Walrus 248 Operator we can actually Go 249 ahead and shrink this all. 250 So we can go ahead and call 251 this one as requested size 252 or requested size by user. 253 So I'll just go ahead 254 and say request size. 255 And I can use walrus operator here 256 and use an expression 257 just like input. 258 I will take the user input just 259 here and I will say enter your 260 chai cup size just like this. 261 And on top of this, once we have 262 this requested size, I can actually 263 go ahead because this whole 264 thing is going to be evaluated. 265 Let me just go ahead 266 and get more space. 267 And now just here I can use in which 268 is in checker of available sizes. 269 And based on this I can just 270 go ahead and print it, 271 whatever I want to print. 272 So for example, I want to print 273 like this and I will say 274 serving requested size chai. 275 That's nice. 276 And surely I can go ahead 277 and use an else operator. 278 If somebody request us something 279 other than this, we can 280 just go ahead and say, hey, I want 281 to print just like this. 282 And I will say size is unavailable. 283 And I'll still just want to see that 284 whether I get the access of this, 285 requested size here or not. 286 Obviously I get. 287 But I just wanted to print this out. 288 So let's just go ahead and run this. 289 And it's a pretty interesting one. 290 Let's go ahead and run this. 291 It says not divisible 292 chai is remaining three. 293 That's from above. 294 Let's just say I get a chai of test. 295 Give me a tester. 296 I enter, it says size 297 unavailable tester. 298 Let's run it one more time and let's 299 just say I ask for a small 300 chai and say serving small chai. 301 So you can see it's 302 a pretty interesting way 303 of writing the code in itself. 304 I wouldn't say that it's super 305 easy to work on with, but hey, 306 it's a pretty fun way of doing 307 the things just like that. 308 So pretty fun to use walrus operator. 309 Let's go ahead and finally write, 310 one more interesting 311 aspect of this and it's going 312 to be a pretty fun one. 313 So let's just write one more 314 of the piece of code for this one. 315 Let's just say we have flavors, 316 in our shop we have a lot 317 of flavors available to us. 318 One is masala, a lot of teas that 319 we serve throughout the course. 320 You might have noticed the theme 321 that we use, for the chai. 322 So we have masala, we have ginger, 323 we have lemon, 324 my favorite one, and mint as well. 325 So what I want to do now is 326 based on the Flavors. 327 First of all, I want to give 328 this message to the user. 329 Hey, these are the available 330 flavors that we have in front of us. 331 So I'll just use a classic one 332 and I will say away. 333 Label. 334 Flavors. 335 Flavors. 336 Did I wrote it correct? 337 Absolutely not. 338 So flavors. 339 And I've been writing 340 this all along wrong. 341 Excuse me for that. 342 So available flavors. 343 I can just put up a space 344 or a colon like that and we can just 345 go ahead and say flavors. 346 All right, so we have printed 347 a message to the user. 348 Now I want that user should actually, 349 be stuck in a loop and choose 350 the only flavor that we showed us. 351 And we don't get away. 352 We just keep on asking that, hey, 353 choose another flavor or this is not 354 available or something like that. 355 So we can run an infinite 356 kind of a loop. 357 But this time instead of just saying 358 while true so that it always keeps 359 on going, what I can do is I can 360 just go ahead and say, hey, I will 361 go ahead and say flavor, not 362 flavors. 363 And I'll use a walrus operator. 364 This is going to be fulfilled 365 by an input value. 366 And we'll go ahead and say choose 367 your flavor and we'll 368 just accept the flavor. 369 And not only that, we are going 370 to check it immediately. 371 Not in flavors. 372 So there we go. 373 If it is not in the flavors. 374 This is a very strange syntax. 375 I know. 376 First time it. 377 It bothers a lot of people that, 378 yeah, I kind of forget it, but I'm 379 not fully understanding it. 380 And that's okay. 381 Feeling totally okay. 382 Not a lot of people use this. 383 So we'll just go ahead and say sorry 384 and whatever the flavor 385 you are asking is not available. 386 Is not available. 387 If I can write that. 388 Available. 389 There we go. 390 And once we are done with this loop, 391 we can just get out of it and we 392 can just print it and we will use 393 the formatted string just like this. 394 And we'll say you chose 395 whatever the flavor he is choosing. 396 So I still have an axis of this 397 and we'll just say chai. 398 Now one thing I want you to pay small 399 attention here is this is a part 400 of loop, this line number 28. 401 But line number 29 is 402 not part of a loop. 403 What I usually try to do is 404 just separate them out a little 405 bit so that it makes sense. 406 Okay, this is a loop. 407 This is outside of a loop. 408 Again, you can keep it 409 on the line number 29 as well. 410 But I don't like it. 411 So for this part, let's go 412 ahead and comment out 413 this whole piece of code. 414 Don't want extra information 415 so we just want to see the, walrus 416 operator working in the loop itself. 417 Let's go ahead and run this. 418 I'll clean this. 419 Run this again. 420 It says, available flavors are 421 masala, ginger, lemon and mint. 422 But somehow I want, maybe. 423 What else? 424 Oolong tea. 425 So I say, sorry, oolong 426 is not available. 427 All right, it's okay. 428 I would choose Masala. 429 And it says, you chose Masala tea. 430 And our program exited. 431 So this is pretty nice 432 and pretty interesting way 433 of working through it. 434 So, as I mentioned, this walrus 435 operator is just an alternative way 436 of writing the code. 437 It just makes your 438 one line shorter of the code. 439 You could have taken this input 440 in the separate line and then 441 could have evaluated here. 442 But here you are allowed to take 443 the input on the go as well, 444 which is very, very strange for 445 seasoned Python developers. 446 But I have to teach it it exists 447 and I want to discuss that. 448 So that is it for this video. 449 Hope you have enjoyed this, and let's 450 catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "09 Walrus operator is interesting in python.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/09 Walrus operator is interesting in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.01949331,
      0.0027609074,
      0.018367847,
      -0.06559052,
      -0.01063393,
      -0.015493806,
      0.009265596,
      0.019279344,
      0.013687487,
      -0.014318887,
      -0.018915523,
      -0.020701673,
      0.0020913873,
      0.019075079,
      0.13056442,
      0.029815758,
      -0.0059822686,
      -0.015982063,
      0.012043912,
      -0.014278096,
      -0.0025125132,
      -0.0053512584,
      0.004578592,
      -0.012985108,
      0.0076998286,
      0.0033783037,
      0.030051215,
      -0.009446598,
      0.036774527,
      -0.01965699,
      -0.025640042,
      -0.009732066,
      -0.004515302,
      0.024569063,
      0.0055081984,
      0.0124549875,
      0.025318857,
      0.0076937308,
      -0.018494735,
      0.0020605053,
      -0.014324563,
      -0.0013884811,
      0.011516258,
      -0.0006360402,
      0.012705833,
      -0.010408991,
      -0.024354674,
      -0.013761585,
      0.0026721456,
      0.0326711,
      0.0069841025,
      0.0029826632,
      -0.0197021,
      -0.18225522,
      -0.009219129,
      0.006213505,
      -0.009298102,
      0.00950648,
      0.0070485785,
      -0.0036906116,
      -0.0040930426,
      0.0012092941,
      -0.02283971,
      0.004140855,
      -0.016686343,
      -0.020696364,
      0.006853111,
      -0.0071344236,
      -0.011831604,
      -0.012558593,
      0.026474128,
      0.0148827825,
      -0.020116782,
      -0.0038982467,
      -0.0026901523,
      -0.04679127,
      -0.010363155,
      -0.017039258,
      -0.011568702,
      0.019157238,
      0.0063487054,
      -0.015202466,
      -0.0054314495,
      -0.00030231397,
      0.0037879795,
      0.005220249,
      -0.048062265,
      -0.015895456,
      0.0013234043,
      -0.013079444,
      -0.030755315,
      -0.010769421,
      -0.008311986,
      0.0068862117,
      -0.017194767,
      0.02080202,
      -0.01587859,
      0.005578926,
      -0.013036901,
      0.00037514645,
      0.00006714782,
      -0.0069773695,
      -0.0134688,
      0.0091400705,
      0.004262383,
      0.01618708,
      -0.00497262,
      -0.012772183,
      -0.0031044076,
      -0.0071625724,
      -0.012986685,
      0.005455748,
      -0.0062178704,
      0.0388595,
      0.030550392,
      -0.15566042,
      -0.0043964223,
      -0.0011545139,
      0.000155108,
      0.0083621945,
      -0.0025732266,
      0.015774088,
      0.009522385,
      0.015272091,
      -0.006789733,
      0.024510259,
      0.00071236613,
      0.030074779,
      -0.004791667,
      -0.002272265,
      -0.043430787,
      -0.0005190684,
      -0.013749354,
      0.0014952772,
      -0.011975193,
      0.021041607,
      -0.0042202,
      0.0046957,
      -0.038956635,
      0.008259862,
      0.0030593197,
      0.010312957,
      -0.024466423,
      0.0427246,
      0.006615138,
      -0.0009076694,
      -0.0067920526,
      0.00858957,
      -0.011831657,
      -0.035122506,
      0.0032349403,
      -0.020003526,
      0.004204941,
      0.008428883,
      0.0069855438,
      -0.024732456,
      -0.010081969,
      0.023065027,
      -0.016173484,
      -0.00067662436,
      0.0024285985,
      -0.013480425,
      -0.003153402,
      0.0042750277,
      -0.009350592,
      -0.009755012,
      -0.0059224255,
      -0.018408295,
      -0.006330617,
      0.022948662,
      -0.0018434278,
      -0.025218286,
      0.010951657,
      -0.002942198,
      -0.01852726,
      -0.010247765,
      0.0039602574,
      0.00056292943,
      -0.006002895,
      -0.016145734,
      0.010972218,
      -0.0107411,
      0.030765004,
      0.008975913,
      -0.0072053457,
      -0.007363642,
      -0.008023504,
      0.030429807,
      0.0040624337,
      -0.0064169406,
      0.0005173661,
      0.006530225,
      0.040671203,
      0.0027920406,
      -0.007409054,
      -0.007082617,
      0.00044226393,
      0.016133754,
      0.017990343,
      0.023938427,
      0.012625044,
      -0.022298435,
      0.009666002,
      -0.024528012,
      0.011210028,
      -0.023252862,
      -0.008099298,
      -0.010946075,
      0.027498888,
      -0.0071591143,
      0.0049691116,
      0.0021259459,
      0.010066176,
      -0.0156234205,
      0.027177317,
      -0.0020378842,
      0.029716799,
      -0.023385018,
      0.005834113,
      -0.015041626,
      0.0019091181,
      -0.010614591,
      0.0047069704,
      0.028008679,
      -0.0053218286,
      -0.026035542,
      0.014804624,
      -0.0068064095,
      -0.0151074305,
      0.018494705,
      0.019136276,
      0.016743403,
      -0.0063000377,
      -0.013573709,
      -0.02022823,
      0.019034555,
      -0.0023323847,
      0.027006576,
      0.019849584,
      -0.012044605,
      0.004034118,
      -0.019729108,
      -0.014860227,
      0.0040727966,
      0.028436817,
      -0.004968362,
      0.0008758328,
      0.00057377695,
      0.010509951,
      -0.02135137,
      -0.019483317,
      -0.009002138,
      0.013269191,
      -0.030335998,
      0.0010812542,
      -0.012611537,
      -0.024053214,
      -0.012883944,
      -0.002329914,
      0.0049136677,
      -0.014893503,
      -0.032991666,
      -0.024875544,
      0.0041615977,
      0.02447623,
      -0.012782923,
      -0.000508928,
      0.037592094,
      -0.03531207,
      0.020617563,
      0.02032797,
      0.010931395,
      0.026570706,
      -0.0075287344,
      -0.009540917,
      0.023873666,
      -0.08976434,
      0.029361676,
      0.020140847,
      -0.009167365,
      0.0061203227,
      0.01752504,
      -0.0039595542,
      0.011107316,
      0.007914575,
      0.0010258171,
      0.00039475667,
      -0.00603326,
      0.010571602,
      -0.014660372,
      0.002051216,
      -0.0047963853,
      0.0006212599,
      -0.009808854,
      0.028373016,
      -0.004796474,
      0.0095956335,
      -0.019072229,
      0.0065783663,
      -0.004887173,
      0.018994365,
      0.012219284,
      -0.009922347,
      0.033045027,
      0.004779825,
      -0.0023267788,
      -0.012551783,
      0.03445092,
      -0.02204967,
      -0.0029945057,
      -0.0067402623,
      0.011719794,
      -0.000020579067,
      -0.0047662063,
      -0.00008304798,
      -0.017038805,
      0.029578207,
      0.0029850001,
      0.014756948,
      0.035173763,
      -0.0015468876,
      -0.009583161,
      -0.0058278353,
      -0.0011748621,
      -0.007765482,
      0.008106774,
      -0.0032709653,
      0.005828345,
      0.0013687393,
      -0.01740324,
      0.024472417,
      0.0056485604,
      0.0030876761,
      -0.008269247,
      -0.00016421641,
      0.007374479,
      0.0030933379,
      0.014528934,
      0.0026594212,
      -0.032410875,
      -0.004075273,
      0.011794606,
      0.020492557,
      -0.014279025,
      -0.029969672,
      0.00079032185,
      -0.0025333695,
      -0.014541798,
      -0.012368443,
      -0.028504763,
      0.008206216,
      0.00025901248,
      0.022934133,
      -0.027045127,
      -0.017944558,
      0.017695356,
      0.01891157,
      -0.014231062,
      -0.007009489,
      0.0054831905,
      0.014531963,
      0.0012340255,
      -0.012656637,
      -0.017903756,
      -0.002586187,
      -0.021614658,
      0.0101341065,
      0.010162526,
      -0.038396716,
      -0.015874889,
      -0.014596777,
      0.024850737,
      -0.009755311,
      -0.02635638,
      -0.02948607,
      0.01414912,
      -0.017031647,
      0.012628478,
      -0.035053894,
      -0.0077859005,
      0.003481559,
      -0.00572703,
      -0.027084408,
      -0.011802166,
      -0.002549379,
      -0.017660275,
      0.014308841,
      -0.006145412,
      -0.029507224,
      -0.015473134,
      -0.012690559,
      0.014799126,
      0.016757745,
      -0.0003385756,
      0.010452297,
      -0.0035326632,
      0.009087006,
      0.0015970904,
      -0.005108812,
      -0.012851878,
      0.013809054,
      0.018851425,
      -0.00016302575,
      -0.005226205,
      -0.008279578,
      -0.030468356,
      -0.021125408,
      0.006759487,
      -0.021492321,
      -0.01498237,
      -0.002113779,
      0.01219217,
      0.025625192,
      0.011263748,
      -0.008806439,
      -0.012084912,
      -0.0067941956,
      0.00845417,
      0.004191074,
      -0.012801075,
      -0.013906429,
      0.03316014,
      -0.0009613525,
      -0.017980324,
      0.003767639,
      -0.011892945,
      -0.01767131,
      -0.02981468,
      -0.0052280794,
      0.00698977,
      -0.0060639572,
      -0.008992514,
      -0.010658777,
      -0.017638898,
      -0.005287397,
      -0.025729699,
      0.0025922367,
      -0.008099389,
      -0.005309277,
      0.0062326803,
      0.027756218,
      -0.0119937975,
      0.0063727326,
      0.007491744,
      0.0065411674,
      0.010855865,
      0.0074292845,
      -0.011446895,
      -0.02935211,
      -0.0010570216,
      0.028787771,
      -0.00029368617,
      0.02511546,
      0.016437547,
      0.02216945,
      0.026753284,
      0.0058283154,
      0.006543682,
      -0.022280397,
      0.010731411,
      0.018164057,
      -0.01613095,
      0.016025629,
      -0.018096827,
      -0.02664924,
      0.009628363,
      0.0077331886,
      -0.013987372,
      -0.0054589463,
      0.019230682,
      -0.0034044662,
      0.0425615,
      -0.009627085,
      0.0072088996,
      0.0020766475,
      0.023022126,
      -0.0037763438,
      -0.0119994925,
      0.0035962581,
      0.0121066505,
      0.019694725,
      -0.0026396047,
      -0.0109848045,
      -0.029440323,
      0.005175951,
      0.017670965,
      0.006864372,
      -0.0037035707,
      0.0062571075,
      0.011647047,
      0.004029057,
      0.025782619,
      -0.020309206,
      -0.020297209,
      -0.027903691,
      0.01070977,
      0.0035943727,
      -0.015511384,
      0.013035739,
      0.0036471132,
      -0.0022392434,
      -0.008769259,
      0.012469941,
      0.00025335944,
      -0.007627142,
      0.01076792,
      -0.0018374821,
      -0.0045368155,
      -0.016959459,
      0.022003964,
      -0.023434104,
      -0.0054515945,
      0.015325447,
      0.04036819,
      -0.023836141,
      0.018194854,
      -0.009434637,
      -0.024498692,
      -0.007279763,
      0.006482186,
      -0.027335232,
      -0.005196293,
      0.00952861,
      0.0031894608,
      0.0056266105,
      0.0037407163,
      0.01221642,
      0.0136681,
      -0.011972346,
      0.008608606,
      -0.021580793,
      0.049206916,
      -0.009493299,
      0.00999011,
      0.0018169363,
      0.008926173,
      0.02635857,
      0.017491903,
      -0.008157731,
      0.005882576,
      -0.0099887205,
      -0.026605302,
      -0.00073119125,
      -0.002458327,
      0.0070817405,
      -0.13942584,
      0.00681762,
      -0.009895542,
      -0.003455868,
      -0.009159086,
      -0.01382108,
      -0.013503632,
      -0.0056015877,
      0.012668872,
      0.006869667,
      0.03264722,
      -0.011425006,
      0.005777064,
      0.0009700679,
      0.008965722,
      -0.031181771,
      0.013898446,
      -0.0038746868,
      0.036784697,
      -0.009800117,
      -0.008772923,
      -0.007782731,
      0.006324512,
      0.0102028875,
      -0.0075256224,
      -0.0044123908,
      0.007840138,
      0.02929937,
      0.003564475,
      -0.0044959495,
      -0.022644596,
      0.011070748,
      0.0062106173,
      0.01296763,
      0.01095013,
      -0.00095395505,
      -0.012930479,
      0.035478428,
      0.0076664635,
      0.0057360893,
      0.0126631465,
      -0.0039591035,
      0.012810338,
      0.015120944,
      -0.021410618,
      0.01333603,
      0.03310478,
      -0.009645892,
      -0.011710231,
      0.022783015,
      -0.037434027,
      0.0007103407,
      0.0023846366,
      -0.033159316,
      0.0030767536,
      0.0004458245,
      0.011142945,
      -0.0048887,
      -0.0203842,
      -0.015763056,
      -0.0039387415,
      0.008318485,
      0.027247502,
      0.009894798,
      0.020807313,
      -0.003955766,
      0.021631632,
      0.016896192,
      0.010451761,
      -0.01722434,
      -0.00758518,
      0.013897309,
      0.013697268,
      0.0050200284,
      -0.0018271633,
      -0.010864357,
      0.011023415,
      -0.00275302,
      0.0066020493,
      -0.0018442415,
      -0.019185841,
      -0.02222027,
      -0.058120664,
      -0.01326014,
      0.009388984,
      -0.0008441072,
      0.0072588325,
      0.004217401,
      0.0049550263,
      -0.00050855015,
      0.011814833,
      -0.0068399655,
      -0.03168395,
      -0.0005747034,
      -0.010923942,
      -0.009739741,
      -0.0054994496,
      -0.0013435007,
      0.0047522606,
      -0.014005352,
      -0.0025009045,
      0.006228568,
      -0.006592413,
      -0.006240778,
      -0.001337689,
      -0.022139613,
      0.010953271,
      0.00986398,
      -0.024912668,
      -0.0067449133,
      -0.008480311,
      0.026199438,
      0.022382377,
      -0.14170833,
      -0.011413571,
      0.002588676,
      0.003575167,
      0.003604278,
      -0.011502642,
      -0.01020266,
      -0.00043124036,
      -0.00017185748,
      -0.011307823,
      -0.01683201,
      -0.014346913,
      -0.021947749,
      -0.003703743,
      0.011254753,
      0.13560931,
      -0.013167676,
      -0.009819573,
      -0.010599976,
      -0.0051343804,
      0.0032389937,
      -0.017443301,
      -0.011806334,
      0.023429908,
      -0.010008881,
      0.0033645157,
      0.0060724355,
      -0.007182531,
      0.0005001076,
      0.004445228,
      -0.019795058,
      -0.0045603043,
      0.014303067,
      0.006920024,
      -0.00955771,
      -0.010107296,
      0.0076482003,
      -0.0050344146,
      -0.0025738408,
      0.012286932,
      0.01272533,
      0.0040265867,
      -0.0118336165,
      0.008222667,
      0.02670416,
      -0.002238902,
      -0.018405298,
      -0.008794742,
      -0.0021854043,
      0.004732637,
      -0.026677132,
      -0.07140978,
      0.0062315436,
      -0.023430374,
      0.010962231,
      0.030334031,
      -0.02086514,
      0.016811669,
      0.0063070497,
      0.024560355,
      -0.017689949,
      0.0105977915,
      0.011927423,
      0.012580045,
      0.0073512187,
      -0.0060590934,
      0.016277166,
      0.009495024,
      0.010937886,
      -0.015508248,
      -0.0045853714,
      0.00906165,
      -0.0010956043,
      0.020012014,
      0.010186473,
      -0.0260771,
      0.010292872,
      0.0036686375,
      0.012163515,
      0.0066871257,
      0.0037038673,
      -0.005902123,
      0.012318715,
      -0.019348523,
      0.0136823105,
      0.010273096,
      -0.011846709,
      0.019018967,
      0.005602016,
      -0.013594607,
      -0.007901346,
      -0.01517669,
      -0.012136804,
      -0.0154038705,
      -0.0094976295,
      0.008354693,
      -0.012313275,
      -0.008095078,
      0.03204415,
      0.020270193,
      -0.019770259,
      -0.018450955,
      -0.018908663,
      -0.02548401,
      0.010949077,
      0.010429208,
      0.0009857456,
      0.007820025,
      0.012444141,
      -0.0106748445
    ]
  },
  {
    "id": "genai_cohort_python_10_Dictionary_in_place_of_match_case_vtt",
    "content": "All right, so one more example. 2 And again, this is a way 3 of writing code. 4 This is not a new topic. 5 This is how some people do it. 6 And the reason of the whole series is 7 to make sure that you don't just 8 mindlessly write just the loops 9 and functions and conditionals. 10 You understand what it takes 11 to write the industry level 12 code, production ready code. 13 So one of the common practice 14 that you're going to see 15 is people use dictionaries 16 instead of repeated cases. 17 We saw that we can actually, 18 This whole problem that I'm going 19 to show you can be done via 20 the if statements as well. 21 Can be done by the match 22 cases as well. 23 Whatever you want to use, 24 you can actually use it. 25 But I will show you a very 26 interesting example for this 27 which uses dictionary. 28 So again this can only be 29 shown in the code part. 30 There is no point 31 of discussing the theory of it. 32 So I'll just go ahead and say 33 10 and this will be dictionary, 34 case, just a file name. 35 Don't bother too much about it. 36 All right, so let's just say 37 we have a users and this is 38 just a list, ordinary list. 39 Inside the list we have a sum 40 of the key value pairs. 41 So this is how we define 42 the dictionary, the key value pair. 43 Each one of them gets an id. 44 So let's just say this is ID 45 one and then we get another key 46 which is total pretty simple. 47 No problem there. 48 Hope there is no issue with this. 49 And we get the total of 100. 50 And then finally this guy gets 51 a coupon code and everybody 52 gets a different coupon code. 53 Let's just say the coupon code that 54 he is using is going to be P20. 55 It could be any coupon code. 56 No problem there. 57 And again, this needs to be a string. 58 So I'll just go ahead 59 and change this into a string. 60 I hope there is no issue with this 61 really simple example. 62 And we need just three copies of it. 63 So we'll just go ahead 64 and change this one. 65 So this one will be two, 66 this one will be three. 67 Let's change the values as well. 68 This gets 150 and 80. 69 Whatever you wish to have. 70 This one is F10. 71 The first one is P20. 72 Let's keep all of our 73 coupon codes in uppercase. 74 Makes sense. 75 Most of the coupon codes are 76 usually in the uppercase. 77 It's easier and we just 78 go ahead and say P50. 79 All right, now we don't 80 have a mapping of how 81 the coupon code works. 82 So I have no idea what P20 means. 83 I don't have an idea of F10 84 means all of this. 85 So for this I'll go ahead and I 86 can definitely use if else case. 87 I can go ahead and use match cases 88 for this one but I'll instead 89 use discounts as a dictionary. 90 So this is a dictionary and for 91 this dictionary I'll mention that 92 hey, we have created a Coupon 93 which says P20 and some 94 of the coupon have a discount value. 95 Some of them have a flat value. 96 Like you have seen flat 100 97 rupees off or flat 50 rupees off 98 while some of them gets 99 a discounted like 10% off, 20% off. 100 So let's just say for this one we get 101 0 uh.2 and this is 102 a percentage off and we don't give 103 any of the flat discount. 104 Maybe we can give both as well. 105 Right now that's not the goal. 106 Another coupon code 107 that we have is F10. 108 This one gives again 109 let's just say 50% off and we have 110 another one which is P50. 111 This one gets a flat off. 112 So you get a 0 here 0.0 or 0 113 does means the same and this 114 gives a flat 10 rupees discount. 115 Now you have to process this 116 whole users and give them discount 117 based on the discount. 118 Now surely you can do a case that hey 119 if the case matches with P20 I'll 120 give you the discount like this. 121 But this is a very 122 real world scenario. 123 This is a very real world situation. 124 This is how a lot of coupon 125 codes are designed. 126 This is how you get the value 127 from the database, all the values 128 and, and you have to process this 129 how you're going to do that. 130 Surely 100% this can be done. 131 But there is an interesting way 132 of handling this and this is just 133 a piece of pure code, no extra 134 operator or anything like that. 135 So I can just go ahead and say for 136 user in users, that's the part once. 137 All right, we are looping 138 through all the users. 139 I hope there is no problem in it. 140 Now once I'm looping into this 141 now next thing that I want 142 to do is find out what are 143 the discount values into it. 144 So what I'll do is I'll take 145 so notice here. 146 This is a tuple. 147 This first part will give me 148 percent, the second part will 149 give me flat or fixed, whatever 150 you want to call this. 151 I will call this one as percent 152 and this one as fixed. 153 How you're going to extract 154 the values, pretty simple. 155 I'll just say discount and in that 156 you can use a lot of methods. 157 I'll just say get, which allows me 158 to get a specific key. 159 And the key that I'm going to 160 provide is going to be the coupon. 161 All right, let's use 162 all lowercase coupon. 163 So discounts gets a coupon. 164 And we don't want to get just 165 like this, like coupon. 166 This will give me nothing. 167 So I want to go inside this. 168 So notice here I have 169 the access of this user. 170 This user means this 171 whole access property. 172 And what I want 173 to access is this coupon. 174 So again, let me just remove this. 175 So inside this get again 176 by the way, wrong asset. 177 Let me try it one more time. 178 I have this get, which is a method. 179 All right, hope that's clear now. 180 And now I want to access this user. 181 Each user looks like this. 182 So I'll just say hey user, what 183 property you want to access? 184 Because it's a key value pair. 185 Now I'll use square brackets 186 and I will say coupon. 187 Make sure you don't do any typo. 188 This is the property 189 we are looking for. 190 So now we have access to this coupon. 191 And once you have this 192 I can just go come up here. 193 So just after the discount you 194 have grabbed, the get value. 195 Now in here through this 196 notice here, we are still 197 getting this one discounts. 198 So ultimately the return 199 value you are going to get. 200 This is bit interesting is going 201 to be just like this 202 and we are going to put 0, comma 0. 203 So this is the default value. 204 So if nothing we are able to grab, 205 this is something that we'll get 206 in the percent and discount. 207 So there is no discount, 208 nothing like that. 209 What in the case when 210 there is no coupon. 211 So this is the value 212 which takes care of that. 213 If there is no coupons or you 214 are not able to access this 215 key, then the percentage is 216 zero and the fixed is zero. 217 That is all very, 218 very strange syntax. 219 But just wanted to get you 220 through with this one. 221 Now how can we calculate discount 222 based on this interesting question, 223 but it's now a math question. 224 So we'll just go ahead and say 225 the discount that you are getting is 226 again whoever is the user and we 227 want to access the key of total. 228 Remember the total. 229 Yep, that what I get. 230 And in that we are going 231 to multiply it by percent 232 and we are going to add a fixed one. 233 Maybe we have both, maybe 234 we don't have both. 235 And then finally we have 236 the discount calculated. 237 So you can subtract between 238 the total and all these things. 239 I'll just print out a statement 240 because I want to see all 241 the values so you can do the math 242 calculation of subtracting. 243 Pretty easy. 244 I will just go ahead and say I 245 want a user and not any user. 246 I want to get the ID of it. 247 So I'll just say id. 248 So make sure you mention the key 249 and once we have this 250 so I'll just say paid. 251 Next key will be user. 252 Again the key that I want to 253 access is total and we'll get 254 out of it and got discount for 255 next visit of rupees and then we 256 simply go ahead and put up a 257 discount. 258 There we go. 259 So I hope this is a little 260 bit of a too much but this 261 is the real world code. 262 I don't want to show you just the toy 263 applications and the toy projects. 264 Sometimes it's a lot. 265 But I hope you get this what we 266 are seeing and what we have done. 267 So we have got the discounts 268 and we got the get 269 what discounts you want to get. 270 Whatever the value. 271 There could be multiple 272 values repeating and this 273 code will still work. 274 This is highly scalable code. 275 Let's go ahead and save this 276 and try to run this and see 277 if we are doing any good. 278 This is 10th dictionary 279 and there we go. 280 So the one, the ID one we should 281 actually mention the ID but anyways 282 paid 100 and got a discount 283 for next visit of 20. 284 So this is what we have. 285 So 20 this is what we have. 286 150 got a discount of 75 287 because it's a 50% off. 288 And the third one which paid 80 289 got a discount of rupees 10. 290 So hope you can see how 291 scalable this code is. 292 We can keep on adding the discount. 293 We don't worry about 294 which code gets it. 295 It needs to have an entry in 296 the discount and then you can give 297 the coupon code to any of the user. 298 So it's a very very interesting point 299 of how this is being done. 300 I hope you got the idea of this. 301 So pretty nice, pretty 302 interesting part of it. 303 Hope you all got it. 304 That is it for this video and let's 305 catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "10 Dictionary in place of match case.vtt",
      "originalPath": "genai-cohort/python/04 Chapter Subtitles/10 Dictionary in place of match case.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.003233354,
      -0.010976851,
      0.007163049,
      -0.047731362,
      -0.030383823,
      -0.0130584035,
      -0.00089825987,
      0.03132929,
      0.006608827,
      0.020090077,
      -0.01612297,
      -0.009751771,
      0.019129777,
      0.009023148,
      0.11523126,
      0.0070825,
      -0.006932717,
      -0.0030852603,
      -0.014555781,
      -0.012845284,
      -0.0014515981,
      0.0062833503,
      0.019229535,
      -0.029936302,
      0.020891372,
      -0.011366669,
      -0.005287685,
      0.0049760784,
      0.023927921,
      -0.009527172,
      -0.009974377,
      0.01295222,
      0.024872934,
      0.033112343,
      0.01679881,
      -0.0063604773,
      0.007849261,
      0.007796047,
      -0.015103902,
      0.006348341,
      0.0056954613,
      -0.0040638684,
      -0.010141519,
      0.02692737,
      0.02460806,
      -0.008129565,
      -0.01186488,
      -0.013418748,
      -0.019950055,
      0.02183772,
      0.00063340965,
      -0.015183872,
      0.011854764,
      -0.18238963,
      0.02490467,
      0.00913034,
      -0.013221091,
      -0.005376458,
      0.0065999795,
      0.026635792,
      -0.034075364,
      0.031276125,
      -0.03881731,
      0.0060624345,
      -0.0035586879,
      -0.0070179584,
      -0.0017461097,
      -0.004185923,
      -0.005340521,
      -0.005415333,
      0.032744803,
      -0.010543099,
      -0.01926679,
      -0.02574398,
      0.0022405998,
      -0.039145794,
      0.0123677775,
      -0.026879894,
      -0.02010476,
      0.004201513,
      -0.011186088,
      -0.0018958343,
      -0.018116843,
      -0.0006166248,
      0.0043125097,
      0.014892342,
      -0.0088846125,
      -0.024144318,
      0.0068057408,
      0.002984039,
      -0.013088411,
      -0.012330938,
      0.01236883,
      -0.013854329,
      -0.03477809,
      0.0041491273,
      0.011303221,
      0.002019275,
      0.00064529356,
      -0.0113660805,
      0.011619085,
      -0.012986943,
      -0.02001729,
      0.0020048574,
      0.0020457997,
      -0.009785139,
      -0.013987942,
      -0.017233577,
      -0.017192371,
      -0.009514491,
      0.0013474015,
      -0.01443553,
      -0.0040100617,
      0.0128403455,
      0.008123768,
      -0.16479313,
      0.015920494,
      -0.017747933,
      -0.015754815,
      -0.009718989,
      0.0024902506,
      0.0043779747,
      0.015846709,
      0.027048737,
      -0.017567692,
      0.017791059,
      -0.004148345,
      -0.0014362314,
      -0.01036471,
      -0.0056736646,
      -0.019827852,
      -0.006119643,
      0.0022174274,
      0.012084355,
      -0.007122884,
      0.012827637,
      -0.01250068,
      -0.011629225,
      -0.019908799,
      -0.012120544,
      -0.02382123,
      0.01973916,
      -0.0069407523,
      0.020836566,
      0.014408316,
      -0.008097824,
      -0.022015266,
      0.017578634,
      -0.021447673,
      -0.0296662,
      0.020848665,
      -0.007452942,
      0.0017850803,
      0.00939679,
      0.021029493,
      -0.027913122,
      0.0014604698,
      0.0111913495,
      -0.0018381752,
      0.009648976,
      -0.0033232393,
      0.008072884,
      0.006622742,
      -0.0011858657,
      0.0026291881,
      0.021418182,
      -0.023620225,
      -0.01290259,
      0.01628437,
      0.0001129449,
      -0.0153655475,
      -0.0038718963,
      -0.0025726121,
      0.0024939904,
      -0.0033449035,
      -0.006927934,
      -0.011383395,
      0.0106282355,
      0.008284109,
      -0.0095322095,
      0.0015778046,
      -0.014249022,
      0.00584616,
      0.0050561037,
      0.011480637,
      -0.008443309,
      0.0031312646,
      -0.015979161,
      0.0033273192,
      0.0076516056,
      0.02011008,
      -0.004816342,
      0.017268918,
      -0.0040152892,
      0.0025960035,
      -0.026251541,
      0.0077168224,
      0.009291439,
      0.001785739,
      0.010839965,
      0.020240165,
      0.0061422638,
      -0.002843435,
      -0.021411605,
      0.021808702,
      -0.010080382,
      0.023967884,
      -0.04017447,
      0.03037585,
      0.005958192,
      -0.010259264,
      -0.00972678,
      0.029871112,
      0.008412006,
      0.007019563,
      -0.0019837192,
      0.01890102,
      -0.015693748,
      -0.0060684574,
      0.003960133,
      0.002931608,
      -0.0012875709,
      0.023564873,
      0.029300261,
      -0.0028818867,
      0.002915942,
      0.013608447,
      -0.024127118,
      -0.008996701,
      -0.009622319,
      0.04846424,
      0.012742836,
      -0.009323757,
      -0.011532113,
      -0.012069387,
      -0.012674678,
      -0.012342835,
      0.028455207,
      0.013383273,
      0.002105526,
      -0.0018370035,
      -0.005794607,
      -0.02019426,
      0.012900015,
      0.0016843353,
      -0.007585878,
      -0.01863105,
      0.0021906535,
      0.026729792,
      -0.0070988163,
      0.0012441033,
      -0.00534853,
      -0.00104768,
      -0.022747178,
      0.006658248,
      -0.0070276656,
      -0.03400983,
      -0.01816654,
      -0.023409687,
      -0.0035290967,
      -0.00938145,
      -0.018362602,
      -0.0075495746,
      -0.027967453,
      0.007519819,
      0.0026371137,
      -0.010603859,
      0.0122037465,
      -0.017443178,
      0.018021103,
      0.0064249947,
      0.010378262,
      0.00846748,
      0.0039661056,
      -0.016062498,
      0.00796245,
      -0.09297671,
      0.016178431,
      0.005866076,
      -0.028441833,
      0.004778615,
      0.018432816,
      0.005585759,
      0.024546407,
      -0.012817528,
      0.035616305,
      -0.0021024803,
      -0.015148059,
      0.036062293,
      -0.002094208,
      -0.022951711,
      -0.0020959026,
      -0.0056592426,
      -0.021776002,
      0.04027402,
      -0.01714253,
      0.0009373549,
      -0.01791467,
      0.00213539,
      0.01689879,
      0.012525412,
      0.014823199,
      -0.018672416,
      0.038639575,
      -0.012122349,
      -0.0014421599,
      -0.012786138,
      0.03600975,
      -0.0038310136,
      -0.01764643,
      -0.002103461,
      0.021273628,
      0.009044597,
      -0.006942685,
      0.010521541,
      0.0012024113,
      0.004619575,
      -0.004744887,
      0.009994239,
      0.034739867,
      -0.0012898154,
      0.011776926,
      -0.02431856,
      0.00056886306,
      -0.016245017,
      -0.00730104,
      0.005625804,
      0.0023419142,
      -0.016843319,
      -0.020048134,
      0.012152665,
      0.01179429,
      0.015429733,
      -0.013114979,
      0.0009823175,
      -0.0032369767,
      -0.002735562,
      0.0043061893,
      0.00925833,
      -0.03286475,
      -0.006334591,
      0.017871946,
      0.00600216,
      -0.019623447,
      -0.024539387,
      -0.01140165,
      0.015595462,
      -0.0051603615,
      0.0073856427,
      -0.015213112,
      -0.013192972,
      0.013188357,
      0.013085868,
      -0.024523359,
      -0.016197495,
      0.027879767,
      0.024208268,
      -0.0014762572,
      0.012618782,
      0.008109537,
      0.003442303,
      -0.0015461951,
      -0.0022798283,
      0.014958254,
      -0.0075151864,
      -0.017508931,
      0.028565621,
      -0.013398039,
      -0.0051526227,
      0.003541061,
      -0.02641581,
      0.003242641,
      -0.0016373245,
      -0.027017564,
      -0.015562842,
      0.029027583,
      -0.034154817,
      0.0005331654,
      -0.02953362,
      0.0027786933,
      -0.021889668,
      0.00817935,
      -0.022995427,
      -0.015224191,
      -0.009438963,
      -0.03303787,
      -0.006028656,
      0.0050703576,
      -0.019761864,
      -0.014590214,
      -0.016257117,
      0.010210504,
      0.007542628,
      0.0021482646,
      0.02021053,
      -0.017909428,
      -0.012611524,
      0.0061019096,
      0.010267789,
      0.0109449085,
      -0.005007842,
      0.016353287,
      -0.029464716,
      0.0035931203,
      -0.020676402,
      -0.00054890884,
      -0.03999659,
      0.017401636,
      -0.025612935,
      -0.005954883,
      -0.011756024,
      -0.012189337,
      0.014963799,
      0.019449273,
      0.016444959,
      0.0055745463,
      -0.00073856686,
      -0.0001945137,
      0.005654954,
      -0.013322714,
      0.0012691829,
      0.030950205,
      -0.008375778,
      0.008001101,
      0.009314037,
      -0.0068037123,
      -0.023054069,
      -0.030199658,
      -0.02129035,
      -0.014608767,
      -0.009301219,
      -0.009234514,
      0.007963692,
      -0.010560258,
      -0.036812123,
      -0.029353952,
      -0.008832176,
      -0.008870139,
      -0.02431384,
      -0.006814825,
      0.026976451,
      0.0036552346,
      -0.005490985,
      -0.0013198056,
      0.0017724975,
      0.00552226,
      0.00019794953,
      -0.018065602,
      -0.018846048,
      -0.0078560915,
      0.023213949,
      0.011312954,
      0.005406828,
      0.0005772539,
      0.018538672,
      0.012775912,
      0.013985532,
      -0.015874885,
      -0.008119628,
      0.005791229,
      0.005152271,
      0.007909258,
      0.008075108,
      0.032485377,
      -0.036686677,
      -0.0076552182,
      -0.004324516,
      -0.005105764,
      -0.014354852,
      0.031954356,
      -0.0015950393,
      0.011589562,
      -0.0024439872,
      0.014564404,
      0.006807468,
      0.0041201315,
      0.0037387726,
      -0.0067734267,
      0.007790846,
      -0.0011657084,
      0.0060604764,
      0.003101825,
      -0.00003810852,
      -0.018381372,
      0.0061315894,
      0.012736912,
      0.014581184,
      0.013279103,
      -0.010171503,
      -0.010013632,
      0.0023778868,
      0.028634654,
      -0.020835843,
      -0.0033941413,
      -0.038105085,
      0.017312972,
      0.013887681,
      -0.01099354,
      0.009637819,
      -0.009757347,
      0.01706843,
      -0.0023103727,
      -0.00045369746,
      0.0037695388,
      0.0038666534,
      0.0048979125,
      0.005001667,
      -0.0038681335,
      0.0027129003,
      0.032205235,
      -0.030735573,
      -0.013897805,
      0.00026043202,
      0.039421286,
      -0.010255238,
      0.02099266,
      0.003332011,
      -0.01844134,
      -0.010391944,
      -0.026695814,
      0.009741866,
      -0.0067733824,
      -0.00007361046,
      0.0016380621,
      0.004263871,
      -0.028113581,
      0.011156496,
      0.018641368,
      -0.007834165,
      -0.005335478,
      -0.018914351,
      0.030814314,
      0.001241188,
      -0.008714057,
      0.009457382,
      -0.003915946,
      0.006718737,
      0.020510016,
      0.0137458835,
      0.030388191,
      0.019655837,
      -0.020128014,
      0.008317881,
      -0.02340199,
      -0.0068606297,
      -0.14299962,
      -0.009205293,
      -0.004985179,
      -0.0043568746,
      -0.0019114057,
      -0.016502766,
      -0.005930652,
      -0.02390046,
      -0.0029265047,
      0.007853217,
      0.024037784,
      0.0056527625,
      -0.0013465561,
      -0.012214386,
      -0.0095622735,
      -0.041263543,
      0.016726894,
      0.027952684,
      0.027027547,
      -0.008468422,
      -0.020157844,
      0.030410284,
      -0.012700921,
      0.014894386,
      -0.0099712005,
      -0.027111506,
      0.01945356,
      0.021045415,
      0.0031877465,
      0.014976309,
      -0.044124026,
      0.002817236,
      -0.0056977062,
      0.016372088,
      0.015370552,
      -0.007858546,
      -0.022820914,
      0.02176721,
      0.014587371,
      -0.0032049199,
      -0.0039548436,
      -0.005809149,
      0.015644517,
      0.013620343,
      0.0030231152,
      0.017119223,
      0.017741479,
      -0.021243576,
      -0.010349533,
      0.009600603,
      -0.034511507,
      -0.020874208,
      0.021302884,
      -0.015875777,
      -0.018036699,
      0.008744052,
      0.018176315,
      -0.010366514,
      -0.0015470985,
      -0.013297499,
      -0.0067670406,
      0.0029299795,
      -0.005980104,
      0.03408461,
      -0.005081107,
      0.010850698,
      0.01534644,
      0.021771695,
      0.021298671,
      0.0035900322,
      -0.0012723242,
      0.008169759,
      -0.000865418,
      0.02115923,
      0.019494776,
      0.013447069,
      0.0054473504,
      0.0016750286,
      0.008574529,
      0.003761533,
      -0.031510863,
      0.01381908,
      -0.06101043,
      -0.01325858,
      0.0012485419,
      0.0016035739,
      0.009062663,
      0.03367627,
      -0.0066886432,
      0.012463465,
      0.0049158162,
      -0.028833674,
      -0.019284429,
      -0.013917374,
      0.02377949,
      -0.0127541,
      -0.0010853363,
      0.009144004,
      0.00060650904,
      -0.013164476,
      -0.009689463,
      0.008927486,
      -0.0040431935,
      -0.01009633,
      0.0065280464,
      -0.0038263295,
      0.0027477501,
      0.021651464,
      -0.0064042597,
      -0.0073085986,
      0.009216414,
      0.0056377975,
      0.009210128,
      -0.14880626,
      -0.030873876,
      -0.0025784532,
      -0.006738979,
      0.0016347453,
      -0.013005621,
      0.0069046924,
      -0.020911368,
      0.024468578,
      -0.031503174,
      -0.011399035,
      -0.023315502,
      -0.017985096,
      -0.016715601,
      0.023435201,
      0.13535184,
      -0.01522024,
      0.011457729,
      -0.0071543613,
      0.0019895192,
      -0.013185508,
      -0.012654832,
      -0.018319791,
      0.0038689207,
      -0.0067641395,
      -0.01501227,
      0.004992783,
      -0.015478055,
      0.0029694752,
      -0.006706957,
      -0.029428989,
      0.0009743402,
      0.010247444,
      0.02009188,
      -0.004988725,
      -0.008768497,
      0.018778488,
      0.010210529,
      0.016253073,
      -0.00043240102,
      0.018716788,
      0.01813147,
      0.009787927,
      -0.0067831594,
      -0.003720454,
      0.007070694,
      0.000758689,
      -0.005127756,
      -0.022487031,
      0.0047245086,
      -0.023490794,
      -0.06533205,
      -0.010517518,
      0.010419155,
      0.0020546012,
      0.009719827,
      0.018123748,
      0.011508505,
      0.013612527,
      0.00421681,
      -0.015412734,
      0.015268735,
      0.014069151,
      0.012650275,
      -0.0118721435,
      -0.010174714,
      0.009473412,
      0.011838902,
      0.02591023,
      -0.018027047,
      0.0040579215,
      0.014596528,
      0.007312824,
      0.029812919,
      -0.0075420314,
      -0.009153649,
      -0.0017462574,
      0.02687195,
      -0.0022505969,
      -0.010186846,
      -0.000052002535,
      -0.012638944,
      0.003009631,
      -0.0052127894,
      0.013675306,
      -0.026749317,
      -0.016224647,
      0.004670747,
      -0.010967886,
      -0.0026868503,
      0.016434308,
      -0.0069161495,
      -0.00507779,
      0.015949298,
      0.025102662,
      0.02679312,
      -0.005847592,
      -0.022290485,
      0.013422621,
      -0.002540189,
      -0.016585262,
      -0.029037701,
      0.0058421795,
      -0.022467831,
      0.0031130717,
      -0.021142008,
      -0.021676678,
      0.023254218,
      0.01460043,
      -0.0034134411
    ]
  },
  {
    "id": "genai_cohort_python_01_Kettle_boiling_story_project_vtt",
    "content": "Hey there everyone, and welcome 2 to a fresh new section 3 on the udemy's Python course. 4 Now, from this moment onwards, 5 we are into a position where 6 so far we have studied about 7 what are the data types 8 in the Python programming language. 9 This means I truly understand 10 that data can be of variety 11 of types, it can be numbers, 12 it can be string, date, time 13 and probably others as well. 14 But this is enough of knowledge to 15 start moving forward in the Python. 16 From this point onwards we are going 17 to study about how we can 18 process this data and in fact 19 rest of the whole course is all 20 about processing the data. 21 In programming world there is a whole 22 lot of logics that you can apply to 23 your data and there are a lot of 24 again, another keywords and style of 25 processing the data that you have to 26 go through with Python programming 27 language, in fact any programming 28 language. 29 So from here onwards let's 30 learn and study about 31 how we process the data. 32 And the way we are going to do is 33 going to be very creative, something 34 that you haven't seen anywhere, 35 so far in any Python course. 36 We are directly jumping into 37 the mini projects and mini stories. 38 And yes, these stories 39 are pretty fun. 40 They will help you to understand 41 why we are doing the things, 42 because doing the things is 43 easy, why we are doing, why this 44 particular set of tools were 45 being chosen to do the 46 particular activity. 47 This is what we need right now. 48 So, so let me walk 49 you through in this. 50 You will absolutely love this. 51 So we're going to start 52 with the conditionals first. 53 We are going to study a little bit 54 about what is conditionals, why this 55 is conditional, and then we are 56 going to work on this mini project. 57 We will have many such mini 58 projects throughout this entire 59 chapter and you're going 60 to absolutely love this. 61 So just to give you a brief 62 idea, we're going to go 63 ahead and work on with this. 64 So let's just say I have 65 this small, rectangle. 66 I'll just go ahead and rotate 67 this like this because 68 this is how usually diagrams 69 are drawn in this one. 70 So, so let's just say what we 71 do is we check for some certain 72 things, maybe a pretty basic 73 that whether you have, some T 74 leaves at your home or not. 75 So we go like this, that we simply 76 have T leaves at our home or not. 77 Now based on this, you take decision, 78 for example, if you have 79 T leaves at your home. 80 So this is the route that I'm going 81 to go ahead and call this. 82 This is as, simply yes route. 83 So let me just write this. 84 This is a yes route. 85 You have the tea. 86 If you have the tea I 87 would say do nothing. 88 You don't need to buy the teas 89 or T leaves, so you 90 don't have to do anything. 91 But there could be another 92 route here as well, which could 93 be something like this. 94 So if I go ahead and say you have 95 another route which is a no route, 96 I don't have T at my home. 97 So the place logical answer is 98 go ahead and buy some T or T leaves. 99 This is the whole point 100 of conditionals. 101 You have certain condition. 102 This condition eventually evaluates 103 to a yes or no condition. 104 And based on this we either take 105 some action or we don't take 106 some action or sometimes we 107 take different set of actions. 108 This instead of do nothing 109 could also be that, hey, I 110 don't want to do nothing. 111 I probably want to say make some T. 112 So again these decisions are 113 heavily based on whether the T 114 leaves at your home, the answer 115 of this is yes or no. 116 So you have to work on this. 117 So we're going to simply say either 118 buy some T if you don't have them. 119 If you have them, probably 120 do nothing or make some T 121 or maybe check for sugar. 122 There could be lot of things. 123 So based on these kinds 124 of action, now we're going to study 125 about our simple conditionals. 126 So we have first set 127 of challenge and we're going 128 to take down this challenge. 129 We are going to build 130 a program that actually address 131 this real world problem. 132 So this is the problem that we have. 133 You're creating a notification 134 system for a smart kettle. 135 All. 136 Right. 137 That's a pretty good job. 138 It should remind the user only when 139 the kettle has finished boiling. 140 Task. 141 Okay. 142 A variable kettle 143 boiled equals to true. 144 If boiled, show kettle done. 145 Time to make chai. 146 So this is what we have to do now. 147 At first it might look really 148 overwhelming that okay, this is 149 lot but in real world you will 150 get these kinds of questions and 151 these kinds of problems and you 152 have to convert the problems into 153 a solution. 154 And that solution needs 155 to be delivered via software. 156 That's what we do. 157 So let's go ahead and build 158 this how this can be done. 159 And we're going to go into 160 a new file now, new folder rather. 161 We'll call this one as 162 03 and conditionals. 163 It's very hard to speak 164 and type at the same time. 165 Let's create a new file and we're 166 going to call this one as Project 167 1SO or Ministory1PY so all of this 168 project are going to be mini 169 stories and we are going to work 170 with that. 171 I'll turn off my AI Companion so that 172 we just write everything manually. 173 And this is a good practice when 174 you're learning programming 175 in the early days, you shouldn't 176 be using AI because it will 177 stop your learning process. 178 It hinders a lot of. 179 So let's just see how we can do that. 180 The process is pretty simple. 181 The says that hey, you are 182 creating a notification 183 system for smart kettle. 184 Got it. 185 It should remind the user only when 186 the kettle has finished boiling. 187 The task which we have in front 188 of us is there should be a variable 189 kettle boiled which should be. 190 Which can be true or false. 191 So let's just say how we 192 declare the variable. 193 We simply say kettle boiled 194 and usually or sometimes. 195 You'll see these as is kettle boiled. 196 That is also a good variable name. 197 Make sure you always have 198 good variable name. 199 101 of writing Python. 200 Let's just say this is true. 201 So now I need to learn how 202 can I evaluate the condition. 203 So I can use a special 204 keyword known as. 205 If this is a keyword, you cannot 206 use it for variable name. 207 This is a special thing. 208 And then you simply put 209 up a conditional here. 210 This needs to be a Boolean data type. 211 Remember, boolean data type 212 can only be true and false. 213 So this needs to evaluate 214 as true and false this 215 particular keyword here. 216 Then you put up a colon and hit enter 217 and automatically 218 the indentation comes to you. 219 Python is very, very lean or very 220 interested in the indentation part. 221 Slight wrong Indentation can 222 give you lot of bad answers 223 and a lot of errors as well. 224 Then we simply go ahead and use 225 print statement and simply 226 say, hey, we want to have this. 227 I'll just go ahead and say, 228 kettle done with an exclamation 229 and time to make some chai. 230 That's what was instructed to us. 231 It says kettle done. 232 Time to make chai, not some chai. 233 We have to follow the instructions 234 and that is it. 235 That is all the program. 236 It is. 237 Now this program will work only 238 when the kettle is boiling. 239 So let's go ahead and see 240 that how it actually works. 241 I'll go ahead and open up my 242 integrated terminal within 243 this folder so that I can 244 directly run my program 245 and I'll just go ahead and close all 246 of these previous ones. 247 Time to do it again. 248 All right, looks good. 249 Now all I have to do is simply say 250 Python 3 because I'm on a Mac. 251 If you're on Windows, just say 252 Python and we're going 253 to run this program, the one program 254 that we have, Ministory1Py 255 and it says kettle done. 256 Time to make chai. 257 And if the kettle boiling is 258 not done, let's just say that 259 is having a false value. 260 What does this means? 261 This simply says hey do nothing. 262 That's simply just 263 the example we studied. 264 Now what you need to understand 265 here that this whole thing needs 266 to evaluate either true and 267 false and just after the is if 268 this needs to be a condition 269 which finally evaluates to true 270 or false, we will have more such 271 examples and you will absolutely 272 enjoy it. 273 So don't worry about that part. 274 Hope you have enjoyed this. 275 Exactly like this we 276 will move forward. 277 We will have one small story. 278 We will try to write some 279 code for the story. 280 This will make your habit 281 of writing better program in 282 the Python and will get you in habit 283 of solving a problem by making 284 software small software. 285 But it's a software. 286 Let's go ahead and catch 287 up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 Kettle boiling story project.vtt",
      "originalPath": "genai-cohort/python/03 Chapter Subtitles/01 Kettle boiling story project.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.002538383,
      -0.004434974,
      0.039626915,
      -0.062777735,
      -0.0067574,
      -0.012360965,
      -0.010729798,
      0.021632137,
      0.0030258563,
      0.010748794,
      -0.015465711,
      -0.009601884,
      0.0046646995,
      0.028132102,
      0.1288528,
      0.014140017,
      -0.0009851271,
      -0.022852482,
      0.008726308,
      -0.0052055977,
      -0.01596347,
      0.008750335,
      0.008887255,
      -0.034900725,
      -0.015874578,
      -0.0069446936,
      -0.010247052,
      0.017289316,
      0.0232391,
      -0.028204806,
      -0.02416846,
      0.0019916403,
      -0.0046542697,
      0.032934926,
      0.006631246,
      0.029124692,
      0.01747628,
      0.0047055543,
      -0.004024145,
      0.018746018,
      -0.018677762,
      -0.010941326,
      -0.0037337632,
      -0.016004909,
      0.0045844237,
      0.001509023,
      -0.011279394,
      -0.010812546,
      0.015210037,
      0.03662541,
      -0.0060381,
      0.008159951,
      -0.012754854,
      -0.18423334,
      0.008872995,
      0.0055557922,
      -0.0060656318,
      0.006777291,
      -0.018560302,
      0.001028471,
      -0.03981355,
      -0.0014821595,
      -0.046284575,
      -0.021641867,
      -0.004389197,
      -0.010280266,
      0.015658244,
      -0.027441246,
      -0.00531042,
      -0.021119857,
      0.010641018,
      -0.003408684,
      -0.012799518,
      -0.010992803,
      -0.015024976,
      -0.022143696,
      0.010598493,
      -0.008564657,
      0.0010788682,
      0.01764135,
      -0.0056177503,
      -0.008433506,
      -0.010850177,
      -0.010819063,
      0.0071182535,
      0.0021861992,
      -0.023647485,
      0.006534382,
      0.011609264,
      -0.013842111,
      -0.024172662,
      0.003173976,
      0.0028043296,
      0.019333323,
      -0.03024788,
      0.006557696,
      -0.008925203,
      -0.006446779,
      -0.0014666114,
      0.0077382675,
      -0.0049667684,
      -0.009476106,
      -0.024864217,
      -0.022338493,
      -0.005338569,
      0.020189023,
      -0.0043073464,
      -0.026213799,
      -0.0005867193,
      -0.012525219,
      0.0018065673,
      -0.022877544,
      -0.000070133894,
      0.02235055,
      0.003709605,
      -0.17867121,
      0.009204331,
      -0.00052592333,
      -0.024241664,
      0.012790261,
      -0.014445283,
      -0.0015672889,
      0.002779335,
      0.031109711,
      0.0039523626,
      0.010023172,
      0.009235955,
      0.033469148,
      -0.0056011854,
      -0.0057623517,
      -0.018494843,
      0.00006748376,
      0.0043045427,
      0.0024851926,
      0.008939825,
      0.016227266,
      -0.0075220577,
      -0.020979466,
      -0.007829268,
      -0.009329626,
      -0.0019199152,
      0.02510662,
      -0.012816107,
      0.02904356,
      0.002707693,
      -0.0064183567,
      -0.010290516,
      0.026819242,
      -0.013861158,
      -0.01789926,
      0.0010493388,
      -0.017125383,
      0.008070206,
      0.0068541816,
      0.023755275,
      -0.016412659,
      -0.01872777,
      0.010962101,
      -0.008133371,
      0.008786529,
      0.0070447326,
      -0.0058962265,
      0.007821753,
      0.011320585,
      -0.0036833615,
      -0.020827483,
      -0.009544812,
      0.004118066,
      0.01706032,
      0.0070182784,
      0.008713064,
      -0.006828562,
      -0.012944307,
      -0.0058249347,
      -0.010149982,
      0.008760617,
      0.00078241836,
      0.0049861614,
      0.020865245,
      -0.021765037,
      -0.0054594227,
      -0.005232994,
      -0.0017846483,
      0.01930372,
      0.0029697618,
      0.0019463325,
      0.0090174405,
      -0.010933421,
      0.023640221,
      -0.0024884536,
      -0.0028655236,
      -0.006500506,
      0.010323268,
      0.014204864,
      0.017436963,
      -0.008228157,
      0.0022008466,
      -0.0068647075,
      0.013384991,
      0.008341258,
      0.032025877,
      -0.005676749,
      0.008497892,
      -0.015769074,
      0.01153021,
      -0.0009251571,
      -0.0078850435,
      -0.022920327,
      0.0030110641,
      -0.004311759,
      -0.010568539,
      -0.005226956,
      0.013140498,
      0.014769117,
      0.015991416,
      -0.008174337,
      0.02402732,
      -0.009733109,
      0.008599104,
      0.0012313196,
      0.022576759,
      0.0059597264,
      -0.0015949347,
      0.02993849,
      0.0042249393,
      -0.024426008,
      0.016720066,
      -0.0054915366,
      -0.0013024124,
      0.00897221,
      0.028825626,
      -0.0092325425,
      -0.0064657615,
      -0.0006522626,
      0.0051231897,
      -0.0036604188,
      0.0052595334,
      0.022180127,
      0.017755311,
      -0.006372371,
      0.00011223115,
      -0.0071280603,
      -0.02153818,
      0.014177042,
      0.010776311,
      -0.012513927,
      -0.0016855195,
      0.0019906813,
      0.0059940075,
      -0.019059258,
      -0.012242733,
      0.0005732073,
      0.01838089,
      -0.011281101,
      0.014983338,
      -0.03281661,
      -0.012619987,
      -0.0027953137,
      -0.00895341,
      -0.0016152757,
      -0.009806353,
      -0.008467955,
      -0.017959625,
      -0.013796215,
      0.019574966,
      -0.0101546375,
      -0.0017353796,
      0.018063197,
      -0.020249989,
      0.019553855,
      0.014468766,
      -0.0027151704,
      0.009400949,
      0.0002007662,
      -0.019705191,
      0.012869933,
      -0.10970145,
      0.026871236,
      0.0013511751,
      -0.014648123,
      0.0067179967,
      0.011906128,
      -0.0068977405,
      0.020635076,
      0.009738551,
      0.017580505,
      0.024394788,
      -0.017429085,
      0.0394261,
      -0.013276545,
      0.0027762405,
      0.005824358,
      -0.0042030145,
      -0.017583314,
      0.022714406,
      0.0019595048,
      -0.00063999847,
      -0.025221843,
      -0.028685052,
      -0.026979754,
      0.016518416,
      0.005045841,
      0.010191677,
      0.04946233,
      0.013478528,
      -0.02345973,
      -0.019076847,
      0.038439754,
      -0.0012300225,
      -0.0018485659,
      0.006984887,
      0.003395772,
      -0.0015831933,
      0.006434795,
      0.019170994,
      -0.007497063,
      0.022227256,
      -0.016643593,
      0.014077919,
      0.016315356,
      -0.0065524597,
      -0.006126261,
      -0.023672016,
      0.012963542,
      -0.020915719,
      0.0039675944,
      -0.019129653,
      0.011581954,
      -0.014154914,
      -0.020635195,
      0.011804817,
      0.0019546254,
      0.0038696465,
      -0.002742478,
      0.0011134549,
      -0.0029106983,
      -0.01253451,
      0.009801276,
      0.011733835,
      -0.009126013,
      -0.0027765662,
      -0.0010738636,
      0.024641855,
      0.00050139514,
      -0.006203899,
      -0.0125790145,
      0.014371512,
      -0.00020746449,
      -0.00027929104,
      -0.02185115,
      0.0035702416,
      0.00669764,
      -0.005777741,
      -0.00864399,
      -0.021920761,
      0.021668602,
      0.030945785,
      -0.017060095,
      -0.0025142592,
      0.007641536,
      0.004139312,
      0.012558127,
      -0.015122056,
      -0.000121889556,
      -0.0060816878,
      -0.011459794,
      0.009143682,
      0.026414337,
      -0.013134027,
      0.017882815,
      -0.01828794,
      -0.0016335461,
      -0.012932743,
      0.0033097488,
      -0.0048633274,
      0.028127968,
      -0.007807643,
      -0.0047188294,
      -0.03421191,
      0.017309794,
      0.0051746075,
      0.003752885,
      -0.026049297,
      -0.026744165,
      0.0099872295,
      -0.019355949,
      0.006741854,
      0.010957889,
      -0.00952741,
      -0.00002316274,
      -0.013939588,
      0.006825903,
      0.00086642936,
      -0.0076273056,
      0.009467371,
      -0.024867468,
      0.0043596704,
      -0.02065437,
      -0.0007260829,
      0.016219355,
      0.0032919676,
      0.030419141,
      -0.005272096,
      -0.007936917,
      -0.017554807,
      -0.038323216,
      -0.021601401,
      0.01773426,
      -0.02846386,
      -0.015697286,
      -0.007427417,
      0.0010091931,
      0.030674499,
      0.034967072,
      0.008786329,
      -0.009712112,
      0.00088118884,
      0.015282564,
      0.012898636,
      -0.006769982,
      -0.017962234,
      0.014231636,
      -0.020527389,
      -0.00376998,
      0.026727911,
      -0.03363005,
      -0.030681415,
      -0.012605854,
      -0.01096313,
      0.0007043479,
      -0.0063556083,
      -0.008382311,
      0.0099531775,
      -0.0174503,
      -0.009544742,
      -0.01689416,
      0.01925038,
      0.00271879,
      -0.00837418,
      0.0024052276,
      0.022636065,
      0.009860677,
      -0.017761558,
      0.0044171205,
      -0.0018891575,
      0.015837748,
      -0.010758892,
      -0.010143253,
      -0.03897157,
      -0.011903639,
      0.015077119,
      0.0057233106,
      0.00320771,
      0.0044272877,
      0.019150374,
      -0.0008485757,
      0.019507088,
      0.014027906,
      -0.015832668,
      0.0024264206,
      0.022200292,
      0.010439178,
      0.016854959,
      0.0025679711,
      -0.024818461,
      0.010722732,
      0.008716091,
      -0.020126872,
      -0.011547005,
      -0.0006105059,
      0.003509299,
      0.023032961,
      -0.0027821201,
      -0.014345044,
      0.022245897,
      0.014532229,
      -0.003546276,
      -0.0115716485,
      0.003119144,
      0.00082545774,
      0.022192381,
      -0.012632734,
      -0.0054004434,
      -0.011074322,
      0.006780381,
      0.011685349,
      -0.010010551,
      0.0015679325,
      -0.010833715,
      0.017085312,
      0.029613929,
      0.0223063,
      -0.036008146,
      0.0023911016,
      -0.018974498,
      0.0074620387,
      -0.002147191,
      -0.007245679,
      0.008337524,
      0.0019856016,
      0.001545018,
      -0.00021092068,
      0.006300982,
      -0.012144464,
      -0.01781176,
      0.0067548086,
      -0.0039189714,
      0.0049146325,
      -0.010969803,
      0.01952451,
      -0.025578648,
      -0.039532784,
      0.015659891,
      0.01234967,
      -0.023305187,
      0.018663486,
      -0.012203887,
      -0.022957264,
      0.007621752,
      -0.0063133575,
      0.0035191579,
      0.009924705,
      0.016165562,
      0.003981757,
      -0.019577116,
      -0.0035933182,
      0.0014639889,
      0.0253066,
      0.00019165619,
      -0.021396875,
      -0.016266411,
      0.025425147,
      0.0012396037,
      0.009045311,
      0.00070575066,
      -0.019802414,
      0.027130729,
      0.016279325,
      -0.016746743,
      -0.0055030524,
      -0.008590154,
      -0.015046926,
      -0.018967628,
      -0.018883789,
      -0.0026548493,
      -0.13783105,
      0.007233261,
      0.0058690454,
      -0.0039153825,
      -0.018859144,
      -0.0076084454,
      0.023899585,
      -0.013668536,
      0.012174068,
      0.002168661,
      0.028155157,
      -0.0018836192,
      -0.0021974856,
      -0.00954572,
      0.003304925,
      -0.006078053,
      0.009915251,
      0.00559358,
      0.030748198,
      -0.022198671,
      -0.019023426,
      0.00068407325,
      0.005252365,
      -0.009628751,
      -0.029876895,
      -0.009107476,
      0.015034389,
      0.011811034,
      0.003094533,
      0.010408188,
      -0.021066695,
      -0.00034467143,
      0.013692674,
      0.022524983,
      0.004236075,
      -0.008933409,
      -0.024355076,
      0.0017980462,
      0.025136461,
      -0.008043333,
      -0.008181451,
      -0.006944786,
      0.009635668,
      -0.00003291139,
      -0.0013745994,
      0.006954932,
      0.019700453,
      -0.01161051,
      0.0032355248,
      0.020264624,
      -0.029187622,
      -0.024505956,
      -0.009657063,
      -0.027870925,
      -0.005326166,
      0.022600805,
      0.0007074141,
      -0.00619687,
      -0.00037534683,
      -0.017935459,
      -0.03324448,
      0.016879277,
      0.014711102,
      0.03006379,
      0.012028877,
      -0.0041505178,
      0.041087747,
      0.004279908,
      0.023874504,
      -0.0028172291,
      -0.013022543,
      -0.0072292634,
      0.0050717657,
      -0.00017998868,
      0.010631574,
      0.0067409347,
      0.015914591,
      0.008324625,
      0.0016941053,
      0.017095527,
      -0.02039792,
      -0.028919945,
      -0.05739501,
      -0.020151595,
      0.012801886,
      0.0070167067,
      0.0068676854,
      0.016315091,
      -0.011543257,
      -0.006114007,
      -0.000006320874,
      -0.0017265407,
      -0.027278697,
      -0.008620313,
      0.024091015,
      0.0007351128,
      -0.019403795,
      0.002783501,
      -0.017647965,
      -0.012788793,
      -0.008232952,
      0.014274944,
      -0.023207646,
      -0.0059811166,
      0.010641997,
      -0.022549108,
      0.0188984,
      0.0073548234,
      -0.02764726,
      0.00054337276,
      0.0024727818,
      -0.012712153,
      -0.017506944,
      -0.16994072,
      -0.009377696,
      -0.011452693,
      0.016888512,
      0.015212917,
      -0.0080198925,
      0.0057304227,
      -0.006466558,
      0.005674586,
      -0.013412452,
      -0.0043508704,
      -0.0072285836,
      -0.018164206,
      -0.0048286137,
      0.016736288,
      0.122930825,
      -0.0048683016,
      0.013610732,
      -0.02243984,
      0.001998666,
      -0.008241949,
      -0.008318063,
      -0.028386405,
      0.0023877216,
      -0.00230254,
      -0.010234679,
      0.011269546,
      -0.03514305,
      0.0020299158,
      0.0034062923,
      -0.0008852998,
      0.006474517,
      0.019018129,
      0.0056830775,
      0.00692263,
      0.008260667,
      -0.0068743415,
      0.008629297,
      -0.005422044,
      0.0005390123,
      0.004495977,
      0.007356839,
      -0.0015725455,
      0.012357863,
      0.021651579,
      0.0047230865,
      -0.004513301,
      -0.027156746,
      -0.013881411,
      0.0029728361,
      0.0003568627,
      -0.04919259,
      -0.015658898,
      0.004284393,
      -0.010719643,
      0.02542953,
      -0.0029266563,
      0.020101555,
      0.014080072,
      0.024268562,
      -0.025365213,
      -0.0026830914,
      0.013526336,
      -0.0062259445,
      0.01356801,
      0.007702668,
      0.029481009,
      0.009008866,
      0.036369532,
      -0.024933495,
      0.021324672,
      0.024136666,
      -0.008073806,
      0.023061894,
      -0.01392537,
      -0.023393169,
      -0.017649217,
      0.031200385,
      -0.014773049,
      -0.010278324,
      -0.009921188,
      0.004432794,
      -0.0067733997,
      -0.025296772,
      0.023762878,
      -0.00060928974,
      -0.018087735,
      0.01833858,
      0.011135145,
      -0.0015454458,
      -0.00797983,
      -0.0055579464,
      0.00020709334,
      -0.0016649726,
      0.017440557,
      0.024054827,
      0.016731303,
      -0.00093760755,
      0.020214818,
      -0.011015717,
      0.006400971,
      0.00008413875,
      -0.006511139,
      -0.041534998,
      0.01084664,
      0.015140206,
      -0.0054669767,
      0.012702663,
      0.013879119,
      -0.020130929
    ]
  },
  {
    "id": "genai_cohort_python_02_Building_a_snack_system_vtt",
    "content": "All right, moving into our 2 Python journey, we got another 3 project and we have 4 to serve to this local cafe. 5 Let's see what is the problem 6 that they are facing. 7 And based on that we 8 will create a software. 9 And the best way to learn how 10 to build software is through tackle 11 down these kinds of problem. 12 You will learn so much more than 13 just going through with the syntax. 14 So let's go through 15 with this one by one. 16 So here's what we have. 17 A local cafe wants a program 18 that suggests a snack. 19 So we are building 20 suggestion system, all right? 21 And you will be surprised to know 22 a lot of suggestion systems are 23 actually mapped one to one, just 24 like what we are building right now. 25 In the early days there was 26 no AI machine learning. 27 We were actually doing all 28 the things that we are 29 about to do just like this. 30 If a customer ask for cookies 31 or samosa, which is 32 a local Indian dish, 33 it confirms the order, all right? 34 Otherwise it says it's not available. 35 So what it's saying 36 first task is take snack input. 37 So we have to put the question 38 in front of the user that hey, 39 enter your preferred snack. 40 And then we are going to go 41 ahead and check whether 42 this is cookies or samosa. 43 Both of them are absolutely fine. 44 Then we go ahead 45 and confirm the order. 46 Otherwise we simply show that, sorry, 47 we only serve cookies or samosa. 48 That's it. 49 So this is kind of a software we 50 have to build and you might be 51 wondering, hey, the wording of the 52 software is not really that clear 53 that this is exactly what we have 54 to do. 55 And this is what you do 56 in the real life. 57 You actually try to get as max 58 as possible from the user 59 and then you try to build 60 the software around it and then 61 the feedback loops continue. 62 So let's build this story and try 63 to walk you through with a couple 64 of new things that you haven't seen. 65 But these kinds of things you learn 66 on the go. 67 And this is our on the go. 68 So this is our snack system. 69 So I think instead of mini 70 story, I'll call this one as a snack 71 suggestion.py of course 72 the first problem in front 73 of us is take snack input. 74 So how do I take input from the user, 75 especially on the command line? 76 Later on we are going to learn that 77 how we can take input from anywhere. 78 You can take into a GUI software, 79 you can take input onto a, 80 web interface like website. 81 There are a lot of ways. 82 Right now command line 83 is our best tool. 84 So the way how we take input from 85 the Python input, command line 86 input is simply say input. 87 Really I told you, Python is 88 the most Easiest language of all. 89 We simply go ahead and simply 90 ask a question that hey, enter 91 your preferred snack. 92 And we simply go ahead 93 and add some space here. 94 And we want to store this whole user, 95 input into a variable. 96 Let's call this one as a snack. 97 And there we go. 98 First of all, I just want to print 99 whatever the value, I'm getting it. 100 This is how you build real software. 101 So we'll just go ahead and say let's 102 use a formatted string for this. 103 And user said user said. 104 And then we'll use 105 the variable of snack. 106 Let's run this program and see 107 what happens when we run 108 these kinds of programs. 109 So again we'll just go ahead 110 and say Python, Python 3 111 and snack suggestion, it says 112 enter your preferred snack. 113 So if I go ahead and say 114 something else, let's just say 115 I want to have a burger. 116 I enter this and it says burger. 117 Now what additionally you can do 118 in such kind of a program is you can 119 just go ahead and add an input. 120 Because I don't want to process 121 burger in so many ways. 122 The B could be capital, 123 the B could be lowercase, 124 the G could be capital. 125 User can enter the input 126 in any way or any format. 127 So what you can do further on 128 to this, because this is just 129 a string that user enters, 130 whenever user gives you input, 131 it always comes into a string 132 format, even the numbers. 133 So we go ahead and simply say I want 134 to run a function known as lower. 135 This is a function so you put up 136 parenthesis just like that. 137 Now no matter how you say this, 138 it's always going to be same. 139 So enter a preferred snack. 140 So I'm going to go ahead and say 141 burger just like this. 142 But the result we are 143 getting is all lowercase. 144 This will make our life little 145 bit easier in just a moment. 146 All right, so this is 147 first part is done. 148 We don't need to validate 149 by printing again we are happy. 150 Then if it is cookies 151 or samosa, confirm the order. 152 So we need to check whether 153 the snack which user is giving 154 the input should be either equal 155 to the cookie or to samosa. 156 And this is where you learn 157 another style of writing. 158 So if we know and this snack needs 159 to convert into some kind 160 of a true and false value. 161 So I can actually go ahead and say 162 this snack needs to be equal to and 163 by the way, one equal that we are 164 using at line number one, that 165 means I'm transferring the value 166 from the right hand side to the 167 left hand side. 168 But once you put two equal, 169 that means you are comparing 170 the thing this is comparison. 171 So I want to compare for 172 one thing which is cookies. 173 That is good. 174 But I also want to compare 175 for another thing which is samosa. 176 So let's go ahead and write 177 simple python or your snack 178 is equals to samosa. 179 That is it. 180 Now if user answers this, then we 181 simply go ahead and print a message 182 to the user that hey, your order, 183 was successfully taken. 184 Or we can also say something like 185 great, choice. 186 It's always a good idea 187 to complement the choice of the user 188 with an exclamation and we will say 189 will serve you and then whatever 190 the user has mentioned snack. 191 That's a good one. 192 But what if user 193 is saying something else? 194 Else we'll say show unavailability. 195 So we're going to go ahead and put 196 again notice the indentation. 197 We'll go back into indentation part. 198 We'll go ahead and say else and then 199 again follow with the colon. 200 This is important, hit enter. 201 And again notice the indentation. 202 We are using four automatically. 203 The editor is giving me four spaces. 204 That's good of it. 205 And then we'll simply go ahead 206 and print something like a message 207 which says, sorry, we only. 208 Not only only serve cookies 209 or samosa, with tea. 210 So let's run this program and see 211 that what user is giving. 212 Now we have created a dynamic 213 program which user actually can use. 214 So let's just say user simply 215 says I want to have burger. 216 So he says, oh, we only 217 serve cookies or samosa. 218 Now again, let's run the program. 219 This time user says samosa, 220 but he tries a little bit different. 221 So he says something 222 like this samosa. 223 Now this definitely is a weird 224 input, but we'll try this. 225 Enter this and it says great choice. 226 We serve you samosa. 227 So notice here, just adding a small 228 method had made our life so much 229 easier for these kinds of program. 230 And this is kind of exactly 231 the thing that you learn when you 232 build these kinds of programs. 233 So this part is all done. 234 And by the way, you have 235 the access to all the notes. 236 I'm just creating the notes back 237 to back so that you have 238 also all the access of them. 239 These stories, yes, do really take 240 a little bit extra effort, but they 241 actually teach really better. 242 And I think you will definitely rate 243 us pretty good and leave some 244 kind words in the review section. 245 That is it for this video. 246 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 Building a snack system.vtt",
      "originalPath": "genai-cohort/python/03 Chapter Subtitles/02 Building a snack system.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0034282065,
      0.0033441747,
      0.032013174,
      -0.051272452,
      0.0008711074,
      -0.025438024,
      -0.026011445,
      0.02087288,
      0.020854212,
      -0.0012476533,
      -0.004074874,
      -0.018487094,
      0.010348222,
      0.007922814,
      0.13853642,
      -0.008965078,
      -0.018714795,
      -0.026293566,
      -0.010954845,
      -0.020821422,
      -0.0008005445,
      0.0090197325,
      0.009472026,
      -0.016705409,
      0.0015684708,
      -0.018572837,
      -0.002598856,
      0.028766703,
      0.028147746,
      -0.02844125,
      -0.008311584,
      -0.0014683285,
      -0.0028556448,
      0.04025396,
      0.01841052,
      0.012777704,
      0.013504587,
      -0.0043975087,
      -0.0062678712,
      0.015514718,
      -0.021014662,
      -0.010569182,
      0.009194253,
      -0.012619056,
      0.024756758,
      -0.0071145194,
      -0.019926513,
      -0.019205514,
      0.017120752,
      0.018254677,
      0.000020401967,
      0.001362122,
      -0.016382994,
      -0.17773537,
      0.016146582,
      -0.0086293025,
      0.013000889,
      -0.0074913986,
      -0.01404881,
      -0.003930341,
      -0.02916505,
      0.021564888,
      -0.03521346,
      -0.011715946,
      0.0013734485,
      -0.015505608,
      0.025715629,
      -0.014226007,
      -0.000020379639,
      -0.013711159,
      0.027683308,
      0.016063277,
      -0.014816351,
      0.0059943814,
      -0.014578618,
      -0.0245495,
      0.015203022,
      -0.007581493,
      -0.010454649,
      0.013469728,
      0.0080110915,
      -0.010724978,
      -0.0048469407,
      -0.009820948,
      0.010741208,
      -0.0011684819,
      -0.016578304,
      0.005958378,
      0.00042972987,
      -0.006982539,
      -0.031842913,
      -0.00796102,
      -0.0007050739,
      -0.0026839916,
      -0.012699239,
      0.015120452,
      -0.019052688,
      -0.0053373985,
      -0.014228418,
      0.009672591,
      0.0035341498,
      0.0013580364,
      -0.038890686,
      -0.0072977506,
      -0.006001444,
      -0.005967005,
      -0.0067329207,
      -0.015430731,
      0.008415528,
      -0.0014513655,
      -0.006512822,
      -0.004843654,
      0.0007079695,
      0.03268733,
      0.004140998,
      -0.16136034,
      0.0026509305,
      0.0016417347,
      -0.018305989,
      0.00023618195,
      -0.025376134,
      0.0019274858,
      -0.004172231,
      0.020591106,
      -0.010302941,
      0.009639715,
      0.016364872,
      0.013245484,
      -0.0017958651,
      -0.0025616956,
      -0.033043653,
      -0.024516307,
      0.003816482,
      -0.0013409747,
      0.0040068165,
      0.022012036,
      -0.008552993,
      -0.020758644,
      -0.019394586,
      -0.016542325,
      -0.004490237,
      0.023932636,
      0.005416003,
      0.015792284,
      0.009516806,
      -0.02063733,
      -0.009456982,
      0.01796979,
      -0.002470015,
      -0.04515157,
      0.021630956,
      -0.0029248195,
      0.026231397,
      -0.0018254211,
      0.023722235,
      -0.022483042,
      -0.012553962,
      0.007284124,
      -0.019844586,
      -0.000729332,
      0.010609676,
      -0.015656158,
      0.013722908,
      -0.007136781,
      -0.0082766,
      -0.0090462705,
      -0.010930825,
      -0.016370589,
      0.0102421865,
      0.008965033,
      0.00023626625,
      -0.0030975624,
      -0.007468946,
      -0.0007508883,
      -0.019825695,
      -0.0025669897,
      0.002167544,
      -0.017179592,
      0.021637747,
      -0.0029448082,
      -0.013309545,
      -0.00857905,
      0.0150403045,
      0.012911264,
      0.0017066636,
      0.012863574,
      -0.014491235,
      0.005003389,
      0.013100739,
      0.010436705,
      -0.001271758,
      -0.0033511966,
      0.0063671535,
      0.012626216,
      0.019969523,
      -0.017575793,
      -0.0059538456,
      0.004272102,
      0.0076648886,
      0.0005297556,
      0.030048583,
      -0.005223032,
      0.0062257266,
      -0.011433331,
      0.023445493,
      -0.026226861,
      0.009683146,
      -0.024153987,
      0.019094521,
      0.018732768,
      -0.0029784276,
      -0.024990285,
      -0.0014994545,
      0.017759109,
      0.021090787,
      -0.013280134,
      0.02810718,
      -0.011793789,
      0.0060196165,
      0.008851528,
      0.009036456,
      0.003732465,
      -0.0013892334,
      0.028211383,
      0.0032971294,
      -0.013634104,
      0.013595416,
      -0.007716068,
      -0.020629989,
      0.019178372,
      0.028067417,
      -0.012035642,
      -0.020338874,
      0.016415201,
      -0.004168017,
      0.0022229156,
      0.015974853,
      0.04499548,
      0.0095246835,
      0.013364057,
      0.012942142,
      -0.0073380983,
      -0.019608341,
      0.0077645862,
      0.034297526,
      -0.015530294,
      0.0050291987,
      -0.016329318,
      0.006225528,
      -0.030939354,
      -0.007189544,
      -0.012734239,
      0.007827701,
      -0.012637889,
      0.012688578,
      -0.04143232,
      -0.017567866,
      -0.011003922,
      -0.01830912,
      -0.005485099,
      -0.005426337,
      -0.006387547,
      0.01166334,
      -0.003227726,
      0.025540372,
      -0.018598301,
      0.017566456,
      0.009540719,
      -0.016653674,
      0.028301468,
      0.0118052745,
      -0.0169664,
      0.0056182425,
      -0.0033979288,
      -0.014003899,
      0.013443178,
      -0.101257615,
      0.012027566,
      0.0022430106,
      -0.0035201497,
      0.010348431,
      0.0034468283,
      -0.019621715,
      -0.0014109666,
      0.001984934,
      0.02067157,
      0.015479498,
      -0.008494572,
      0.035444204,
      -0.010770321,
      -0.0051327012,
      -0.0041662934,
      -0.018303588,
      -0.019448629,
      0.02949487,
      -0.012001066,
      0.0013635531,
      -0.0321513,
      -0.011445521,
      0.011840918,
      0.02962399,
      0.0032801677,
      -0.009576066,
      0.033719465,
      0.01792342,
      -0.008747187,
      -0.016899068,
      0.031869654,
      -0.013751781,
      -0.023450084,
      0.0057920674,
      -0.00075655617,
      0.025465343,
      -0.0032380389,
      0.016554656,
      -0.02407266,
      0.030336803,
      -0.036619697,
      0.015729487,
      0.028667113,
      -0.015145085,
      0.014138911,
      -0.030796371,
      0.004262231,
      -0.028134782,
      0.012888489,
      -0.015384266,
      0.012242047,
      0.00094200834,
      -0.02454912,
      -0.0009386264,
      0.026566748,
      0.0024575363,
      -0.0015125326,
      -0.008540558,
      0.01037146,
      0.0016635518,
      0.0036636298,
      -0.0033788206,
      0.00097252,
      -0.006790399,
      0.001957692,
      0.006995507,
      -0.009039186,
      -0.02690766,
      -0.004231437,
      0.0152792195,
      0.020835275,
      0.014576172,
      -0.030526664,
      -0.010137091,
      0.0076669795,
      0.009428481,
      -0.031370796,
      -0.009454395,
      0.011213197,
      0.00979071,
      -0.021739388,
      -0.0061992407,
      0.0055370918,
      0.005356789,
      0.004267527,
      -0.0043062544,
      -0.006642467,
      0.01791706,
      -0.011450243,
      0.016541507,
      0.010891315,
      -0.011079235,
      0.0038312853,
      -0.0078336205,
      0.010866682,
      -0.019440914,
      0.018638687,
      -0.0100222835,
      0.02098832,
      -0.013989643,
      0.015033637,
      -0.01203672,
      0.021335052,
      -0.007052431,
      -0.003077123,
      -0.022596337,
      -0.012239225,
      0.01808807,
      -0.017040713,
      0.0011743424,
      0.002079178,
      -0.00965437,
      0.0056867627,
      0.0030699614,
      0.02384312,
      0.008016134,
      -0.003045385,
      0.012011866,
      -0.01839945,
      0.005007995,
      -0.007126142,
      -0.007276156,
      0.012886725,
      -0.011087488,
      0.0074804174,
      0.0012233607,
      -0.008477948,
      -0.0049857474,
      -0.026047928,
      -0.017947154,
      0.01191226,
      -0.0177466,
      -0.019134304,
      -0.014101343,
      -0.011938987,
      0.02237016,
      0.011674456,
      0.010923429,
      0.006872693,
      -0.008143016,
      0.02976932,
      0.00060553354,
      -0.016634705,
      -0.019212242,
      0.02278137,
      -0.0072403573,
      0.00020458268,
      0.003772262,
      -0.030591814,
      -0.01744819,
      -0.013196965,
      0.00381844,
      -0.027846929,
      0.0032372104,
      -0.0026164993,
      0.011649821,
      -0.022813823,
      -0.015763007,
      -0.031252515,
      -0.00073409395,
      -0.0068141897,
      -0.010010515,
      0.0061003114,
      0.016570529,
      0.013490027,
      -0.0043490087,
      -0.012429072,
      0.005428326,
      0.0008068436,
      -0.0064534065,
      -0.006367005,
      -0.02907114,
      -0.004147572,
      0.015254108,
      0.010017363,
      0.015946764,
      -0.003946994,
      0.03235087,
      0.015862744,
      0.0032860334,
      0.0035118945,
      -0.0067553283,
      -0.008870337,
      0.022701409,
      0.019429816,
      0.004729413,
      0.010270875,
      -0.031282503,
      0.001094826,
      0.012365768,
      -0.014050571,
      -0.003898341,
      0.0201343,
      0.0020795632,
      0.029664354,
      -0.013864956,
      -0.012319916,
      -0.0017997534,
      0.008443267,
      0.0076332027,
      -0.008021828,
      -0.008776176,
      -0.00090723886,
      0.020390604,
      0.005037693,
      0.004233693,
      -0.026637552,
      0.004237441,
      0.022107223,
      -0.018133486,
      -0.011134289,
      -0.0110432245,
      0.0012499011,
      0.038820688,
      0.03181489,
      -0.024042703,
      0.0027037351,
      -0.025553428,
      0.0070270826,
      0.00020660182,
      -0.013915327,
      -0.0005167366,
      -0.018484345,
      0.0068479427,
      0.0029507626,
      0.012319735,
      0.0019611518,
      -0.010092462,
      0.0045924406,
      -0.004359101,
      0.004172474,
      -0.0024558217,
      -0.004508999,
      -0.025971793,
      -0.023065077,
      0.006496592,
      0.02216802,
      -0.004974727,
      0.0086442325,
      -0.0064485422,
      -0.029081756,
      -0.004103549,
      0.00092183653,
      0.008420019,
      -0.009045579,
      0.010485167,
      0.0022312026,
      -0.0033574787,
      -0.006961195,
      0.0023239278,
      0.027579416,
      0.01103245,
      -0.00080835813,
      -0.0097562205,
      0.0191529,
      -0.01548517,
      0.004558491,
      0.001868207,
      -0.004727105,
      0.014846807,
      0.017392498,
      -0.01078351,
      -0.00014573021,
      0.0028862148,
      -0.016552174,
      -0.024849152,
      -0.01371815,
      -0.0063390145,
      -0.13725097,
      0.009617323,
      0.005324394,
      0.0047091106,
      -0.007613447,
      -0.018991552,
      -0.011798733,
      -0.0045349086,
      0.014868336,
      -0.008079091,
      0.027683,
      0.0048035183,
      -0.012996957,
      -0.016888985,
      0.00026655442,
      0.0020615875,
      0.014551966,
      0.009871765,
      0.04658104,
      -0.012361089,
      -0.009864144,
      0.004066248,
      0.0028682558,
      0.0016358342,
      -0.012296426,
      -0.026110837,
      0.0025952365,
      -0.004327999,
      -0.027097955,
      -0.0029343797,
      -0.024460258,
      -0.015582219,
      -0.0006666253,
      0.024874436,
      0.008445633,
      -0.013226309,
      -0.028145278,
      0.010537445,
      0.0041878936,
      -0.004511537,
      0.00254925,
      0.008021967,
      0.02742553,
      0.014043782,
      -0.00064795447,
      0.0059359516,
      0.009446939,
      -0.011048154,
      0.0011554986,
      0.0129283015,
      -0.044222128,
      -0.017963748,
      -0.03682996,
      -0.0121700885,
      -0.00027085666,
      0.01871281,
      -0.0041652215,
      -0.0035922942,
      -0.007188832,
      -0.012317127,
      -0.006835171,
      0.013936997,
      -0.0062475894,
      0.03212026,
      0.012170243,
      -0.0081280535,
      0.032044742,
      0.023815861,
      0.013829324,
      -0.0078519955,
      -0.0071731387,
      -0.014890215,
      0.011979139,
      0.013315951,
      0.019764433,
      0.025751524,
      0.0020558757,
      -0.012953508,
      -0.004256583,
      0.022448465,
      -0.026119405,
      -0.019329328,
      -0.05756095,
      -0.0053979396,
      0.009245712,
      -0.007720836,
      0.017288154,
      0.03313662,
      -0.016735464,
      -0.0051908093,
      0.0104736015,
      -0.007150136,
      -0.019808954,
      -0.012574136,
      0.023522139,
      -0.017507393,
      -0.016098417,
      -0.0025508197,
      0.01021478,
      -0.020655278,
      -0.022040682,
      0.007468217,
      -0.025321724,
      -0.0069078626,
      0.019388888,
      -0.021880014,
      -0.007813718,
      0.0073976633,
      -0.017239857,
      0.006943419,
      0.009127225,
      0.00417057,
      0.005988316,
      -0.16785975,
      0.002128673,
      -0.008555734,
      0.0076559563,
      0.012020103,
      0.005182046,
      0.0021832495,
      -0.0112001235,
      0.007917249,
      -0.005170016,
      -0.01199436,
      -0.018821009,
      -0.033658117,
      0.010171124,
      0.023694776,
      0.13168952,
      -0.002707081,
      0.009803966,
      -0.013472758,
      0.015988132,
      0.0024874245,
      -0.010536283,
      -0.02185513,
      0.003410431,
      0.0001430769,
      -0.0026840328,
      -0.007988402,
      -0.019385695,
      0.0003284498,
      0.009211094,
      0.0006697456,
      0.0070717987,
      0.015740111,
      0.027436446,
      -0.004390341,
      0.0038936476,
      -0.01268041,
      0.009603584,
      -0.019808622,
      0.007439595,
      0.004979296,
      0.026224697,
      0.0041299006,
      0.0058787004,
      0.016206153,
      0.015562879,
      -0.008242042,
      -0.01646839,
      0.0064816456,
      -0.008552959,
      -0.02146766,
      -0.064720415,
      -0.009408103,
      0.0046180817,
      -0.011359965,
      0.029759863,
      0.01418388,
      0.0064803725,
      0.0042081075,
      0.013994217,
      -0.01075703,
      -0.0056410083,
      0.0048661497,
      0.005467465,
      0.014271002,
      -0.0009609277,
      0.015939498,
      0.0025523503,
      0.02917981,
      -0.02518815,
      0.026487231,
      0.012064567,
      -0.009936583,
      0.02373835,
      -0.0014331707,
      -0.00395966,
      -0.00849419,
      0.010192232,
      0.008629026,
      -0.013361064,
      -0.008846912,
      0.006365269,
      0.0032506105,
      -0.019994028,
      0.015141264,
      0.019151527,
      -0.04079436,
      0.013515926,
      0.01040519,
      0.0025741402,
      0.012230381,
      -0.0003924463,
      -0.0017932473,
      -0.007828952,
      0.0056129205,
      0.01027462,
      0.008335867,
      -0.007881892,
      0.025633503,
      -0.026485268,
      -0.008526429,
      -0.015552561,
      -0.012547705,
      -0.036936656,
      0.014768796,
      0.016803032,
      -0.0011026586,
      0.012798052,
      0.0027058958,
      -0.013821946
    ]
  },
  {
    "id": "genai_cohort_python_03_Building_a_chai_price_calculator_vtt",
    "content": "All right. 2 Another day, another 3 project that we have to do. 4 So this time the project is going 5 little bit complex and as you will 6 move forward the project are going 7 to be little bit more complex. 8 Nothing much, nothing 9 to be worried on. 10 So the next project that 11 we have is this one. 12 We have a T stall which 13 offers different prices 14 for different cup sizes. 15 Very valid. 16 Write a program that calculates 17 the price based on the size. 18 And I want your attention fully 19 on the problem statement. 20 So I'll remove myself from the screen 21 so that you get full attention 22 on the screen itself, nothing else. 23 So try to analyze this program. 24 No need to hurry up. 25 Try to pause and even see that 26 how you will approach this program, 27 at least, at least some 28 part of the task, you can 29 actually go ahead and do this. 30 So write a program that 31 calculates the price. 32 So the first step is input 33 small, medium or large. 34 That simply says that user is trying 35 to give me an input based on small, 36 medium or large as a price size. 37 And we have done this 38 in the past as well. 39 This is not anything new to us. 40 Then we have to evaluate 41 for the three conditions. 42 This time it can be a small, it can 43 be a medium, or it can be a large. 44 But the difference is this time 45 we have to take different decision 46 based on what's happening. 47 Previously we were just checking for 48 the OR condition cookies or samosa. 49 This time we are actually 50 taking different steps or we 51 are taking different measures 52 based on different 53 condition that we are checking. 54 So we have to be little bit 55 more thorough this time. 56 And if we don't see any 57 of the cup size between small, 58 medium and large, we simply 59 say is unknown cup size. 60 So let's take down this problem 61 and try to build this 62 small chai price calculator. 63 Let's go ahead and close this 64 and create the new one. 65 And this one is chai 66 price calculator. 67 PY of course. 68 So the step one should be very 69 clear and I think everybody 70 should be able to do this. 71 This is input. 72 We have done this in the past. 73 You simply go ahead and put 74 up a message 75 which says something like this. 76 Choose your cup size. 77 And we also will give some message 78 to the user, an indication that 79 you can only choose from small 80 or you can choose from medium, 81 or you can choose from large. 82 And whatever the user says, we'll 83 just go ahead and add a dot lower. 84 We have already seen this is a good 85 practice that we can apply and we 86 have to store this into a variable. 87 Let's call this one as simply cup 88 or user input cup, whatever you 89 want to call now don't worry. 90 Automatically this my 91 co data actually wrap the lines. 92 If they don't fit in the same 93 line, it automatically 94 moves into the next line. 95 But again, nothing to worry. 96 It's still on the same line. 97 No indentation is going on. 98 Okay, once this is done, 99 now we have to evaluate. 100 For evaluation we simply can say 101 if the cup is equals to 102 the variable small or the checking 103 that we are doing for is small 104 and we pretty much know what to do. 105 We have seen this part so far, so 106 this shouldn't be a problem anymore. 107 And we're going to go ahead and say 108 that Your price is 10, rupees. 109 All right, this is all good. 110 We have seen this. 111 So this is 10 rupees. 112 Or we can use the rupee 113 symbol as well. 114 But this is all okay. 115 Now we have to check 116 for another condition. 117 So so far we have seen that 118 in the very first problem 119 statement we have if and else. 120 But what about this case when we 121 have to check for three condition or 122 probably more, we have 123 another keyword that we are going 124 to study instead of the else. 125 Just rewrite that. 126 We have another one which 127 is elif, also known as lf. 128 No other way. 129 We simply can check for cup now 130 and again put another condition that 131 I want to check the cup for medium. 132 Now if the cup is of size medium, 133 I can go ahead and do another print 134 statement, something like this. 135 And I can say price is medium. 136 How much is the price for medium? 137 15 and 20 rupees. 138 15 rupees. 139 Rupees. 140 There we go. 141 We also have to check another one. 142 So no worries. 143 We can again use the same 144 lf and we can put up a check 145 for the condition. 146 And there we go. 147 We simply go ahead 148 and check for large. 149 We all have to check for 150 the lowercase large because 151 we are converting our input 152 into the all lowercase. 153 And in this part we'll just go ahead 154 and say print and we will say price. 155 Oops. 156 In the quotes I have to say 157 price is 20 rupees. 158 20 rupees. 159 For rest of the all things. 160 This is our conditional part. 161 So this is our part two where we 162 check for all the condition. 163 If invalid show cup unknown cup size. 164 So for rest of all the things, I 165 don't want to check anything when 166 you don't want to check anything 167 else is again your best friend. 168 So we simply go ahead and say 169 print and we are going 170 to say unknown cup size. 171 So I hope now you understand that 172 why I didn't want it to teach you 173 about just the conditionals and 174 just the keywords, because these 175 kinds of real world 176 implementation, you only and only 177 learn when you actually solve 178 these kinds of problems. 179 Again, we have studied that. 180 What's the importance of converting 181 everything, what we are taking from 182 the user into a single case, whether 183 that's an upper case or lowercase. 184 And what's really important 185 that we go through 186 with these cycles of this. 187 This is really boring of a, 188 learning process if you just go 189 ahead and learn the syntax. 190 But this time we are actually taking 191 down a problem for a real cafe. 192 Yeah, it is very real. 193 I know this. 194 So I hope you have enjoyed this. 195 Don't forget to rate us and hope you 196 are enjoying the entire content. 197 If yes, do tweet as well. 198 We would love to enjoy 199 to see your progress as well. 200 That is it for this video. 201 Let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 Building a chai price calculator.vtt",
      "originalPath": "genai-cohort/python/03 Chapter Subtitles/03 Building a chai price calculator.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0037819906,
      -0.004762234,
      0.03624219,
      -0.06996857,
      -0.018029904,
      -0.014656489,
      -0.010142491,
      0.015958523,
      0.013016676,
      -0.00006315983,
      -0.0059528304,
      -0.017321581,
      0.01474418,
      0.0113590155,
      0.12479812,
      0.0050035864,
      -0.0072457506,
      -0.007637678,
      0.0048655304,
      -0.0037835718,
      -0.011830775,
      0.024198446,
      0.014450034,
      -0.0134893125,
      0.0018534716,
      -0.014649562,
      0.0006309669,
      0.025930611,
      0.026325647,
      -0.02716385,
      -0.011736414,
      -0.014669855,
      0.012184879,
      0.025469571,
      0.007701241,
      0.008215225,
      0.020361913,
      0.0014824306,
      -0.00084414124,
      0.019523112,
      -0.01652715,
      0.0059595495,
      0.0033453377,
      -0.009379264,
      0.0059652203,
      -0.014964832,
      -0.010090953,
      -0.036303185,
      0.024438005,
      0.036071233,
      0.0026820851,
      0.0064989156,
      -0.033698242,
      -0.17554423,
      0.0087998025,
      0.010704967,
      -0.0004353845,
      -0.005586588,
      -0.016973965,
      0.009710086,
      -0.028518043,
      0.014271648,
      -0.026383592,
      -0.0015918755,
      0.009390506,
      -0.020795552,
      0.016957104,
      0.001560704,
      -0.007904698,
      -0.024174852,
      0.019849453,
      0.019434325,
      -0.0061148084,
      -0.005059543,
      -0.020434035,
      -0.018429626,
      0.017030159,
      -0.01008664,
      -0.0009363175,
      0.013886213,
      0.004338539,
      -0.007453304,
      0.000946972,
      -0.011222522,
      -0.002457353,
      0.00086301763,
      -0.010764468,
      -0.00090905384,
      -0.0072355694,
      -0.015607365,
      -0.030442419,
      0.012165817,
      0.00062339427,
      -0.0007948959,
      -0.023985457,
      0.008627754,
      -0.010884631,
      -0.004138784,
      -0.0131175835,
      -0.0056717014,
      -0.0023247043,
      0.004930273,
      -0.013188216,
      0.0014273248,
      0.007215027,
      0.002810124,
      -0.00049733603,
      -0.020246346,
      -0.002895759,
      -0.0009982936,
      -0.008955957,
      0.0010963904,
      0.004978888,
      0.025176609,
      0.0117479,
      -0.17869239,
      0.009315104,
      -0.004205121,
      -0.024527105,
      -0.01266209,
      0.0026851916,
      0.010993549,
      0.011707311,
      0.026468335,
      -0.00751168,
      0.020909782,
      0.016520452,
      0.02667093,
      -0.00048610923,
      -0.0014675688,
      -0.026051115,
      -0.017621625,
      0.019419454,
      0.0019685605,
      -0.0075818943,
      0.019701336,
      -0.013612676,
      -0.028966118,
      -0.01891677,
      -0.019986248,
      -0.0068125045,
      0.028417516,
      -0.010381541,
      0.014706525,
      0.019559482,
      -0.026643666,
      -0.008222876,
      0.022035778,
      -0.0036540995,
      -0.029738402,
      0.013667932,
      -0.008943949,
      0.021480536,
      0.017822795,
      0.018647734,
      -0.028622856,
      -0.0060222237,
      0.011598257,
      -0.0065982817,
      0.02354895,
      0.017271927,
      -0.002725627,
      0.008371561,
      0.017419009,
      -0.023165172,
      0.008185279,
      0.0003550409,
      -0.022148099,
      0.0010582966,
      0.0051211207,
      0.0039326916,
      -0.0085036745,
      -0.013214879,
      -0.004390411,
      0.0030131775,
      0.0073085874,
      0.00031281734,
      0.005062165,
      0.023338344,
      -0.029949097,
      -0.022395395,
      -0.014488304,
      0.0109002795,
      0.014195392,
      0.0064263106,
      0.008792793,
      -0.0062332763,
      -0.006686759,
      0.02232005,
      0.0017570746,
      0.008395894,
      -0.015003207,
      0.02117285,
      0.0011353104,
      0.029678494,
      -0.014462154,
      -0.004309715,
      0.008038186,
      -0.00421313,
      -0.012337934,
      0.025753653,
      -0.019423068,
      0.0026558847,
      0.0027992413,
      0.008726458,
      -0.006544292,
      0.0075505488,
      -0.021750757,
      0.012297073,
      -0.0017585352,
      -0.01215621,
      -0.013688885,
      0.0091962805,
      0.03387736,
      0.012640306,
      -0.0045687333,
      0.012305157,
      -0.016181381,
      -0.0055218632,
      0.0077538397,
      0.020322002,
      0.010186337,
      0.0047979364,
      0.035451297,
      -0.00813193,
      -0.005272218,
      0.02072323,
      0.0005383256,
      -0.015538591,
      0.016231904,
      0.045711372,
      -0.008997717,
      -0.018975683,
      -0.0005053764,
      0.0036616256,
      -0.000316042,
      -0.023965972,
      0.040959787,
      0.019186113,
      0.0017229897,
      0.0012508426,
      0.022561075,
      -0.017502349,
      0.0035594942,
      0.008522905,
      -0.015700672,
      -0.0067272517,
      -0.02019433,
      0.0033324314,
      -0.020039978,
      -0.016242756,
      -0.0068794177,
      0.009915709,
      -0.022252856,
      0.015914349,
      -0.0451653,
      -0.001601457,
      -0.0055175996,
      -0.004998196,
      -0.000033316483,
      -0.007231047,
      -0.0009474739,
      0.0064632995,
      -0.0011384212,
      0.036855996,
      -0.013984731,
      0.016178658,
      0.03021905,
      -0.0217185,
      0.02710392,
      0.010929144,
      -0.003780679,
      -0.0043381364,
      0.0061015687,
      -0.018890982,
      0.015965978,
      -0.11068547,
      0.009877235,
      -0.0016754657,
      -0.013659712,
      0.012716073,
      0.012599197,
      0.0026127184,
      0.0017876074,
      -0.008824864,
      0.014500149,
      0.024206243,
      -0.010323797,
      0.031679545,
      -0.032570425,
      -0.0236296,
      -0.010875869,
      -0.011302475,
      -0.017797364,
      0.018764585,
      -0.011086271,
      0.004247819,
      -0.025809307,
      -0.025012597,
      -0.0010227143,
      0.02055998,
      0.002421822,
      -0.0048382943,
      0.02331727,
      0.02694165,
      -0.0056732027,
      -0.02019201,
      0.018445436,
      -0.0068391827,
      -0.014985349,
      0.000027353239,
      0.013994477,
      0.032083094,
      -0.014477304,
      0.011024925,
      -0.0160029,
      0.016311156,
      -0.025373114,
      -0.0012618278,
      0.027247349,
      -0.006806695,
      0.009322125,
      -0.0155573925,
      0.006601351,
      -0.018925313,
      -0.004042919,
      -0.0041402243,
      0.018772824,
      -0.017917315,
      -0.011076403,
      -0.000374411,
      0.020329144,
      0.022420462,
      -0.0060512754,
      -0.012774618,
      -0.003516862,
      0.0020890764,
      -0.0068047666,
      -0.0068510175,
      -0.005474209,
      0.01099563,
      0.0036907739,
      0.012112301,
      -0.009364544,
      -0.02762399,
      0.00039291038,
      0.018749438,
      0.015400175,
      -0.002068449,
      -0.036248516,
      -0.004250166,
      0.009632231,
      0.0068459986,
      -0.029912222,
      -0.012781453,
      0.01818255,
      0.023104776,
      -0.017196933,
      -0.019079307,
      0.0074483496,
      -0.0071895216,
      0.00979742,
      0.0070267227,
      -0.0030546847,
      0.0009005065,
      -0.024955386,
      0.019231932,
      0.0058637583,
      -0.0062329303,
      0.010393479,
      -0.019754946,
      0.008808977,
      -0.020475388,
      0.009746773,
      -0.005324166,
      0.03439252,
      0.0018328262,
      -0.006358409,
      0.005303233,
      0.0053004767,
      -0.018343406,
      -0.007481931,
      -0.03469773,
      -0.028430546,
      0.012584292,
      -0.018627558,
      0.017945634,
      0.0012476352,
      -0.018254474,
      -0.0047497586,
      -0.0036459076,
      0.020203603,
      0.016423231,
      0.015805917,
      0.015148229,
      -0.0067025693,
      -0.0014692238,
      0.0002021184,
      -0.0055130073,
      0.012920215,
      0.0058419495,
      0.011944249,
      -0.007701484,
      0.007629114,
      -0.01920895,
      -0.012819572,
      -0.021987809,
      0.027727243,
      -0.029304713,
      -0.020725371,
      -0.011325337,
      -0.0028628898,
      0.020002792,
      0.026121518,
      0.024508772,
      -0.0074732555,
      0.002832529,
      0.016406488,
      -0.0075548193,
      -0.0060208617,
      -0.02482692,
      0.012470291,
      -0.0090354355,
      0.00087225984,
      0.011761695,
      -0.020044668,
      -0.022415368,
      -0.026121074,
      -0.009911028,
      -0.004466822,
      0.010149049,
      -0.0047655823,
      0.011291829,
      -0.0069706365,
      -0.02070441,
      -0.018180724,
      0.0027811343,
      -0.0064274096,
      -0.012696384,
      0.0016526966,
      0.026030315,
      0.006276212,
      -0.0033549962,
      0.00085342594,
      0.012623776,
      0.009604696,
      -0.0073163407,
      -0.012427786,
      -0.00729137,
      -0.0033348151,
      0.0012578026,
      0.0047114054,
      0.021605717,
      -0.015070432,
      0.023029124,
      0.019927245,
      -0.00680946,
      0.009933839,
      -0.010737764,
      -0.002816877,
      0.01143733,
      0.0056103324,
      -0.0013912857,
      0.022506952,
      -0.051002674,
      0.016632937,
      0.0067468765,
      -0.01622832,
      -0.00630518,
      0.016531566,
      -0.0032114263,
      0.0054917997,
      -0.00039011502,
      -0.0038547113,
      0.00072349864,
      0.0005106888,
      0.00089190906,
      -0.0019201881,
      -0.013126845,
      0.0006315935,
      0.009052886,
      -0.0035990782,
      -0.0012262797,
      -0.004778308,
      -0.011574226,
      0.0014474443,
      -0.011895837,
      -0.008297629,
      -0.010897349,
      0.005753654,
      0.04451095,
      0.022356203,
      -0.03578626,
      0.014021333,
      -0.019153664,
      0.01123225,
      0.015589197,
      -0.0125289075,
      0.015201364,
      0.0014142445,
      0.015088505,
      -0.0031115683,
      0.014594452,
      0.009998471,
      -0.008479886,
      0.007278889,
      -0.01040937,
      0.024182694,
      -0.0054282304,
      0.013442461,
      -0.054664847,
      -0.02903904,
      0.009825134,
      0.022120701,
      -0.020648291,
      0.01786179,
      -0.009214027,
      -0.015276693,
      -0.00080556277,
      -0.009992789,
      -0.002167359,
      -0.011632824,
      0.023285925,
      0.0088735195,
      -0.004709314,
      -0.005026877,
      -0.0032849319,
      0.015210827,
      -0.0006693667,
      -0.015114373,
      -0.018719928,
      0.024622582,
      0.002373623,
      -0.009480883,
      -0.00766104,
      -0.006779729,
      0.028729122,
      0.019248893,
      0.0016990721,
      -0.0025199775,
      -0.0031500433,
      -0.018679332,
      -0.0018443954,
      -0.014943833,
      -0.008155725,
      -0.14278723,
      0.008278579,
      0.009722122,
      -0.0073072994,
      -0.020738192,
      -0.009590067,
      0.000092279915,
      -0.016727107,
      0.018439854,
      -0.012999792,
      0.03761578,
      0.0055796937,
      -0.005976881,
      -0.020393308,
      0.0011077415,
      -0.0016700601,
      0.016731188,
      0.018081317,
      0.032862056,
      -0.011741639,
      -0.011973684,
      0.006770122,
      0.017954415,
      -0.0047400156,
      -0.01180946,
      -0.02235853,
      0.001215188,
      0.0073480685,
      -0.011175785,
      -0.010674903,
      -0.031206168,
      -0.006853223,
      -0.0058184788,
      0.015893692,
      0.0038713445,
      -0.008207704,
      -0.016296498,
      0.0077367765,
      0.029492015,
      -0.014030612,
      0.008092644,
      -0.00035940474,
      0.045127172,
      0.014749539,
      0.0013465777,
      0.0067145494,
      0.016847236,
      -0.017145392,
      0.000884929,
      0.029352382,
      -0.03081827,
      -0.015819874,
      -0.019602798,
      -0.001490737,
      -0.0003234497,
      0.0047172685,
      -0.0014071033,
      -0.0050472594,
      -0.0018861463,
      -0.025428934,
      -0.01961818,
      0.014443553,
      0.009549811,
      0.03420193,
      0.0044258228,
      -0.004398939,
      0.03183391,
      0.025174547,
      0.0074490546,
      0.0048746318,
      -0.012064971,
      -0.034259368,
      -0.009775526,
      0.004347819,
      0.011820917,
      0.014986091,
      0.017815135,
      -0.01498486,
      -0.0013787015,
      0.01672636,
      -0.022246247,
      -0.015737753,
      -0.05466026,
      -0.018942155,
      -0.0034984823,
      0.01328814,
      0.0097252885,
      0.027352935,
      -0.009617077,
      -0.01895327,
      0.005377508,
      0.005602719,
      0.0024089906,
      0.0079647135,
      0.023044197,
      -0.012888902,
      -0.004387779,
      0.00029943825,
      -0.02365775,
      0.0014388226,
      -0.011307233,
      0.0061401986,
      -0.017569657,
      -0.011118616,
      0.019095266,
      -0.03346462,
      -0.005031117,
      0.013559287,
      -0.015291716,
      0.012965978,
      0.009856457,
      -0.0010963879,
      -0.006266908,
      -0.1552718,
      -0.0045560063,
      -0.0015354946,
      0.0022328792,
      0.0066889976,
      0.0035249465,
      -0.008523151,
      -0.011319766,
      0.012051907,
      -0.003628523,
      0.008352809,
      -0.01930745,
      -0.030700032,
      0.010209134,
      0.045129605,
      0.119737655,
      -0.018193958,
      0.013943877,
      -0.01188578,
      0.014909494,
      -0.0014150689,
      -0.0069443537,
      -0.026438355,
      0.002710389,
      -0.000021963771,
      -0.00037204573,
      0.0011462693,
      -0.007342497,
      0.0041660625,
      0.0007072897,
      -0.0005575297,
      0.01637532,
      0.015219129,
      0.019251848,
      -0.006421812,
      -0.018245514,
      -0.007900113,
      0.018814608,
      -0.016181627,
      -0.01981236,
      0.0224765,
      0.008973498,
      -0.0036429118,
      0.0021584122,
      0.013151164,
      0.004130203,
      -0.020545723,
      -0.033180594,
      -0.007957381,
      -0.0049441047,
      -0.02931684,
      -0.061462656,
      -0.0113276355,
      0.0033729735,
      -0.004147622,
      0.0152012855,
      0.027529337,
      0.009790987,
      0.01794837,
      0.016608076,
      -0.0025579894,
      -0.012405244,
      0.007387633,
      -0.0070557543,
      -0.008311572,
      -0.00692908,
      0.027353413,
      0.0001878538,
      0.018658927,
      -0.020268612,
      0.019921428,
      0.012026028,
      -0.0059244446,
      0.021513566,
      0.0011835418,
      -0.022517143,
      -0.013198291,
      0.026923228,
      -0.0047879955,
      -0.008322856,
      -0.009570914,
      0.009961877,
      0.010028183,
      -0.022023117,
      0.027481655,
      -0.0044973237,
      -0.030524231,
      0.011486088,
      -0.00785031,
      0.0030851325,
      0.010266586,
      -0.017346552,
      -0.027526082,
      0.012569816,
      0.015314757,
      0.011810511,
      -0.008037167,
      -0.0057083787,
      0.02150932,
      -0.010587722,
      -0.0079125,
      0.0088311685,
      -0.00442649,
      -0.026403552,
      0.009797367,
      0.021444757,
      -0.020955449,
      0.00524255,
      -0.009574063,
      -0.026327644
    ]
  },
  {
    "id": "genai_cohort_python_04_Building_Smart_Thermostat_system_vtt",
    "content": "All right, let's move on. 2 And this one is a little bit 3 of a complex problem. 4 But yes, we have to deal with 5 the complex problems as well. 6 The ability to handle 7 the complex problems will make 8 you a great developer. 9 Don't shy them away. 10 They look really, scary at first. 11 But eventually you will 12 nail down much, much 13 greater problems than this. 14 So let's read this one by one. 15 The step one is always to read 16 the problem as closely as you can. 17 So notice here you can. 18 You are building a smart 19 thermostat alert system. 20 Pretty good. 21 We are building a thermostat 22 alerting system. 23 And what do we want 24 to do in this, system? 25 Just read this pretty easy. 26 If the device status is active, 27 okay, so we have to measure 28 the device status first 29 and the temperature is above 35. 30 Then we have to put 31 up a warning sign that high 32 temperature alert, all right? 33 Else the temperature is normal. 34 If the device is off, 35 device is offline. 36 So notice here we are not checking 37 just for one condition, but we 38 are checking for one condition 39 and inside that also we are checking 40 for another condition. 41 And this is a kind 42 of a leveling of the condition. 43 As you can say. 44 This is also known as a nesting 45 of if statements. 46 But again, that doesn't really matter 47 or doesn't really sound much. 48 Now you have seen 49 the problem statement. 50 You can see, it makes sense. 51 I'm checking for one condition, 52 then inside that I'm checking for 53 further another condition. 54 And then only I'm putting 55 up the warning message. 56 Else part is pretty clear. 57 And we are checking for here. 58 So first let's see how we can 59 actually take down this problem. 60 So we'll close this one and we'll 61 create a new file and we'll 62 call this one as smart, 63 probably lowercase smart thermostat. 64 Py the first thing that we have 65 to measure is device status. 66 I don't know how that is coming 67 up, but as of now, let's assume that 68 the device status is active. 69 Now as the problem statement says, it 70 could be device status as active or 71 it could be as device is offline. 72 So that's good. 73 And I another thing that will come 74 up here is notice here 75 the temperature is 35, so we are 76 checking this 35 only when 77 the device status is active. 78 So let's just say we 79 create a variable. 80 We call this one as temperature. 81 Temperature. 82 And the temperature is 38. 83 Okay, so how do we write a program? 84 We simply go ahead and say if 85 the device status 86 is equals to active. 87 If it is active, we simply go 88 ahead and Put some message. 89 And by the way, just for temporary 90 point, you want 91 to write the else part first. 92 There is a nice trick 93 in these kinds of statements. 94 You can write a keyword as pass. 95 Pass simply means I 96 will come back here. 97 We'll do about it later on. 98 Right now just ignore this so that 99 you don't give me any warning. 100 I come back here and I write 101 the else part here and else part. 102 The writing of the else part is easy. 103 If the device status is active, 104 we are doing something else. 105 If the device is off, we are 106 saying device is offline. 107 So here I can simply go 108 ahead and print a statement 109 that says like this. 110 And we simply call this 111 one as device is offline. 112 So I hope you can see, 113 the keyword pass helped me 114 to write the else part first. 115 Without giving me any warning. 116 If I just go ahead and remove 117 this and write it like this, 118 it always keeps me yelling 119 give me that squiggly line. 120 So I don't like them. 121 So I sometimes temporarily write 122 these kinds of code just because 123 I want to come back here later. 124 Now notice here it says 125 okay, device is active. 126 If we go into this part, then we 127 simply check for the temperature. 128 If it is above 35, we put a warning. 129 Otherwise we say 130 temperature is normal. 131 So inside this we can again 132 start if condition here or 133 conditional block and we can check 134 for temperature here. 135 Now temperature. 136 If it is greater than 35, we simply 137 go ahead and say some message. 138 So I'll just go ahead and print 139 a simple statement, 140 high temperature alert. 141 And if it is an alert, it should end 142 with an exclamation. 143 And here also I can put 144 up an else part. 145 And this is the most interesting 146 and point where you should 147 pay a little attention. 148 So I'll just go ahead and print this 149 and I will first say 150 temperature is normal. 151 So the most important part here is. 152 Notice here we have two 153 else's here, but each one is 154 denoted inside a block. 155 The block is the most important 156 part that we are studying here. 157 This is the outer block. 158 The else part here is 159 of the outer if. 160 But here we can see this is 161 if statement and the if 162 can be easily found out. 163 The else part with the indentation. 164 Now here the else part is 165 actually totally optional. 166 We could have it. 167 We couldn't have it. 168 Doesn't really bother us much. 169 We can have it. 170 We might ignore it, 171 but in this case we have it. 172 Our problem statement says 173 that we need to have it. 174 But again, pay small attention 175 on the indentation 176 and how the leveling. 177 And again there is nothing which 178 is stopping you to start another 179 block inside the if statement. 180 Maybe after printing a message 181 you want to start another condition 182 here, so you can go ahead 183 and start another condition. 184 So so let's just say I will simply 185 write it as true and then I want 186 to write another print statement. 187 I can just go ahead and write 188 that I will not do it here. 189 This was just to explain you, 190 but get the point that yes, 191 we can write as many if else 192 nesting of them as we like. 193 Or the problem statement says right 194 now, our problem statement says that 195 hey, you should do only this much. 196 So yeah, we are okay, we 197 are doing this much only. 198 Hope you have enjoyed building this 199 smart thermostat warning system 200 and hope you have enjoyed this. 201 If yes, please do rate us. 202 Let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 Building Smart Thermostat system.vtt",
      "originalPath": "genai-cohort/python/03 Chapter Subtitles/04 Building Smart Thermostat system.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.000056474673,
      -0.0028529235,
      0.021456689,
      -0.06540654,
      0.0033965446,
      -0.017948227,
      0.004138294,
      0.0246983,
      0.0061237225,
      -0.008473223,
      0.0011342405,
      -0.0214537,
      0.0148175,
      0.024093168,
      0.11800532,
      0.01426858,
      -0.008297083,
      -0.004648025,
      0.016364358,
      -0.0016800623,
      -0.00007761214,
      0.0054302523,
      0.0036466368,
      -0.016024303,
      -0.00029087436,
      -0.0015435795,
      -0.0016578702,
      0.030068047,
      0.022936802,
      -0.031573772,
      -0.011230616,
      0.0075462162,
      0.012153441,
      0.018624634,
      -0.007723889,
      0.0060141548,
      -0.0024865353,
      -0.00085270155,
      -0.01962244,
      0.02310492,
      -0.014769106,
      0.0037375956,
      0.00944057,
      -0.008651141,
      0.016755542,
      -0.0030702776,
      0.00039055946,
      -0.006472963,
      0.0114661325,
      0.04624612,
      0.00085502176,
      0.015380084,
      -0.030918831,
      -0.19337825,
      0.013467493,
      0.008886611,
      -0.012980783,
      0.0071223215,
      -0.0051067546,
      0.012642095,
      -0.027470268,
      0.012823906,
      -0.03109196,
      -0.019837944,
      0.002600812,
      -0.009281199,
      0.028970752,
      -0.01312445,
      0.0032373369,
      -0.011834297,
      0.010852457,
      0.01093783,
      -0.007608535,
      -0.005756659,
      -0.01608717,
      -0.023412174,
      0.008273196,
      -0.009361243,
      -0.008567157,
      0.007138135,
      0.0018148057,
      0.0012108088,
      0.0045303437,
      -0.010501211,
      -0.0027232568,
      -0.013301536,
      -0.020320784,
      0.0015225435,
      -0.0037467973,
      -0.00822708,
      -0.032787398,
      0.00091294857,
      0.009140643,
      0.025707854,
      -0.012866695,
      0.0023369847,
      -0.001850909,
      -0.00064599223,
      -0.003726927,
      0.0011223345,
      0.00036740815,
      -0.0037957153,
      -0.011161159,
      -0.011265286,
      0.002927255,
      0.0012743152,
      -0.014859541,
      -0.010125436,
      0.00603777,
      -0.0060900194,
      0.010788938,
      -0.02177584,
      -0.011639355,
      0.024175711,
      0.008174429,
      -0.1711151,
      -0.000040570703,
      -0.0018929655,
      -0.0059236223,
      0.004688355,
      -0.009688901,
      0.0009423296,
      0.020314757,
      0.02107807,
      -0.0074182805,
      0.008117278,
      0.018365659,
      0.021014797,
      0.0057841847,
      0.00556488,
      -0.020641103,
      -0.021170111,
      0.017944172,
      0.0041630883,
      -0.0054097334,
      0.009477504,
      -0.0152039975,
      -0.010822654,
      -0.021341275,
      -0.013731483,
      -0.0049881856,
      0.023980537,
      -0.007996532,
      0.018474165,
      0.009390261,
      -0.025313,
      -0.006966715,
      0.032587692,
      -0.010452496,
      -0.040686004,
      -0.0013916515,
      -0.024451643,
      0.013664456,
      0.014860179,
      0.026708452,
      -0.025922196,
      -0.007971545,
      0.004002037,
      0.0024473958,
      -0.0037809818,
      -0.001927103,
      0.0050923056,
      0.0017578237,
      0.015557572,
      0.010511654,
      -0.013586573,
      0.013796395,
      -0.006716464,
      0.009986229,
      0.012938939,
      0.014029438,
      -0.0151234865,
      -0.004655261,
      -0.002841791,
      -0.0013063282,
      0.003578189,
      0.0038765967,
      -0.0044761994,
      0.009927551,
      0.0024158505,
      -0.017958228,
      -0.006807279,
      0.011094894,
      0.007900003,
      0.000055878703,
      -0.016481128,
      -0.005454716,
      0.0076957354,
      0.0014422904,
      0.0035222447,
      0.009755047,
      0.004904606,
      0.012128656,
      0.011470421,
      0.034970872,
      -0.012492332,
      -0.004756623,
      0.002754047,
      -0.00013651476,
      0.0041078376,
      0.034146987,
      -0.01604776,
      0.0038587567,
      -0.007899955,
      0.014574115,
      -0.0021315424,
      0.010704559,
      -0.03080874,
      0.011144148,
      -0.0055881715,
      -0.00034371312,
      -0.0030773669,
      0.0010298901,
      0.013432859,
      0.016766673,
      -0.018952912,
      0.025779137,
      -0.0030726383,
      0.0083316015,
      0.017849838,
      0.012009136,
      0.021341272,
      -0.0025834083,
      0.039860316,
      0.0016025861,
      -0.006434654,
      0.018943796,
      -0.0014568233,
      0.0010810907,
      0.01835762,
      0.025258249,
      -0.016539974,
      -0.0035923005,
      0.0010164955,
      0.01508505,
      0.008648246,
      0.009583222,
      0.028261587,
      0.0200618,
      0.01445587,
      0.004763667,
      0.015609376,
      -0.02558657,
      0.017448915,
      0.016736418,
      -0.01561759,
      -0.0034591123,
      -0.016690167,
      -0.0031341973,
      -0.023181422,
      0.00038463183,
      -0.011376261,
      0.0091091925,
      -0.005525246,
      0.008505091,
      -0.019874392,
      -0.010263577,
      -0.0046881116,
      0.008640565,
      0.0047182464,
      -0.008914969,
      -0.011143786,
      0.0043024137,
      0.00042486616,
      0.02875947,
      -0.031712238,
      0.020446775,
      0.024855193,
      -0.009773455,
      0.021737497,
      0.01783081,
      -0.005271103,
      -0.016065521,
      -0.01220272,
      -0.026237939,
      0.023597514,
      -0.08938971,
      0.021515027,
      0.0044330843,
      -0.025701297,
      0.009328153,
      0.0055656238,
      -0.021245023,
      -0.002577277,
      0.010730272,
      0.010902543,
      0.009935091,
      -0.018164255,
      0.011872706,
      -0.032736722,
      0.007918775,
      -0.016325325,
      -0.010508934,
      -0.028254148,
      0.03705465,
      -0.020838918,
      0.005824126,
      -0.042761914,
      -0.029394666,
      -0.010228661,
      0.027958041,
      0.025388027,
      0.018413208,
      0.040636286,
      0.019158361,
      0.0015695454,
      -0.021077916,
      0.024317902,
      -0.007311298,
      -0.030279465,
      0.004583565,
      0.008939974,
      0.022581838,
      -0.007146753,
      0.012117001,
      -0.013480356,
      0.020138122,
      -0.007844561,
      0.012316312,
      0.016654747,
      -0.0021442312,
      0.0024471383,
      -0.011378707,
      0.017633546,
      -0.045881107,
      0.0010076622,
      -0.0046064076,
      0.030403841,
      -0.011354585,
      -0.009932111,
      0.008320078,
      0.015871614,
      0.019516837,
      -0.0043133274,
      -0.008879573,
      0.0071570785,
      0.004889691,
      -0.010991295,
      0.0074632694,
      -0.007104875,
      -0.0009801273,
      -0.0024236755,
      0.0153592415,
      -0.008140534,
      -0.023283841,
      -0.0014522193,
      0.002184199,
      0.0118908575,
      0.0031460174,
      -0.032102376,
      0.010210014,
      0.0016047966,
      0.005097888,
      -0.022361996,
      -0.025011614,
      -0.003915827,
      0.020171942,
      -0.010392994,
      -0.020325761,
      0.021631697,
      0.000091858616,
      0.019248167,
      0.000010769054,
      -0.012781066,
      -0.013380344,
      -0.026576877,
      0.011173371,
      0.012544678,
      -0.019639656,
      0.0047284337,
      -0.028148934,
      0.0014815044,
      -0.019948881,
      -0.0113089075,
      -0.00708143,
      0.009124211,
      -0.021307172,
      0.013253111,
      -0.018003149,
      0.0012595671,
      0.002076278,
      0.0053938967,
      -0.023892105,
      -0.033682458,
      -0.005317362,
      -0.014473976,
      0.011835286,
      0.011758683,
      -0.0074692112,
      0.0016535338,
      -0.020644465,
      0.00826,
      0.0070151025,
      0.0101089915,
      0.004347784,
      -0.002550345,
      -0.0007470785,
      -0.002981102,
      0.001283242,
      0.03012673,
      0.0023185287,
      0.025253354,
      -0.0076083248,
      0.007391707,
      -0.0013840288,
      -0.032791197,
      -0.033139657,
      0.0151380785,
      -0.012208142,
      -0.019769533,
      0.009812363,
      -0.0031150903,
      0.009962185,
      0.014356794,
      0.013724659,
      -0.003492155,
      0.0027944348,
      0.014690642,
      -0.008970818,
      -0.02452863,
      -0.009751801,
      0.014146151,
      0.005381754,
      -0.005056232,
      0.014734744,
      -0.020256933,
      -0.014360739,
      -0.018267721,
      -0.029070957,
      -0.0032327175,
      -0.0075848615,
      0.0012654219,
      -0.011814948,
      -0.011339174,
      -0.02400041,
      -0.03271472,
      0.018209469,
      0.00779598,
      -0.032268275,
      0.0053390223,
      0.016348107,
      0.006164762,
      -0.020026082,
      0.0044266526,
      -0.0047387155,
      0.021398157,
      -0.019187344,
      0.006492306,
      -0.0027878298,
      -0.0063918424,
      0.0097022345,
      0.013584634,
      0.021616613,
      -0.0038632085,
      0.045821697,
      0.016081296,
      -0.00077562215,
      0.004318096,
      -0.014160355,
      -0.0041860933,
      0.014661381,
      0.001548853,
      0.0152713675,
      0.0113609005,
      -0.020249639,
      0.008104478,
      -0.008801058,
      -0.026061572,
      0.0108773215,
      0.004339867,
      0.012137666,
      0.023415167,
      -0.003887286,
      -0.0012027489,
      0.017966218,
      0.01840322,
      0.0028330183,
      -0.0019328758,
      0.00010841346,
      0.00035831006,
      0.011884202,
      -0.0016616107,
      -0.0026638065,
      -0.017058268,
      -0.0050458442,
      0.012357884,
      -0.0153129455,
      0.0044095735,
      -0.0052230004,
      0.0011440122,
      0.021654733,
      0.021451067,
      -0.018135292,
      0.01615652,
      -0.024166958,
      0.010151611,
      0.01321549,
      -0.0058684633,
      0.019468194,
      0.0032476909,
      0.0049050595,
      -0.013257855,
      0.015083712,
      0.0025175007,
      -0.01956609,
      -0.0018263193,
      -0.0076642567,
      0.019560182,
      -0.008705387,
      0.026847988,
      -0.022174165,
      -0.022822246,
      -0.0042564427,
      0.030226445,
      -0.030027546,
      0.0043243137,
      0.000359713,
      -0.009607168,
      -0.010817602,
      -0.013292192,
      -0.0010358328,
      0.0031516007,
      0.011228746,
      -0.0045948173,
      -0.015002245,
      -0.002327166,
      -0.0060942015,
      0.032387305,
      0.01233817,
      -0.002760355,
      -0.027828842,
      0.02770307,
      -0.001457076,
      -0.0018013208,
      -0.005280596,
      -0.013488211,
      0.030740444,
      0.01531536,
      0.0017892492,
      0.0061432794,
      0.0023159457,
      -0.056133218,
      -0.0031425403,
      -0.0043330537,
      -0.009068452,
      -0.14869903,
      0.0211052,
      0.0022022373,
      -0.024711039,
      -0.01262142,
      -0.013868569,
      0.034866717,
      -0.016797524,
      0.026332071,
      -0.0069468007,
      0.023585755,
      0.009677767,
      -0.010334228,
      -0.0013464456,
      -0.008173172,
      0.004643009,
      0.02275027,
      0.024349561,
      0.04132807,
      -0.024191659,
      -0.013937764,
      -0.009349949,
      0.014481231,
      0.0037562037,
      -0.0058805807,
      0.0013697584,
      -0.0072815907,
      0.018720524,
      -0.007092056,
      -0.008955561,
      -0.036047988,
      0.004918266,
      0.020652138,
      0.021492332,
      -0.0008240208,
      -0.0015866222,
      -0.0210851,
      -0.00048276564,
      0.009518802,
      -0.010937711,
      -0.012418696,
      -0.0043757693,
      0.012994714,
      0.011487662,
      -0.0136934025,
      -0.018498426,
      0.014275227,
      -0.0085928505,
      -0.007525163,
      0.024902942,
      -0.028139895,
      -0.002505742,
      -0.012676167,
      -0.015207219,
      -0.0046977545,
      0.02006456,
      0.00926797,
      0.0046188664,
      -0.020654146,
      -0.015004088,
      -0.026704282,
      0.011112364,
      0.003628087,
      0.015041591,
      0.006462836,
      -0.0075510163,
      0.020422291,
      0.019882683,
      0.019216927,
      0.019323437,
      -0.01129879,
      -0.0018041978,
      -0.0064368425,
      -0.0024164873,
      0.005009407,
      0.002320642,
      -0.00545344,
      0.008876233,
      -0.014075284,
      0.014205772,
      -0.013091206,
      -0.024886057,
      -0.06786416,
      -0.0240254,
      0.017350575,
      0.009187245,
      -0.002341748,
      0.023031365,
      -0.004558215,
      0.00097545265,
      -0.0018409633,
      0.0032501703,
      -0.0039206045,
      0.0056803664,
      0.017578794,
      -0.014989026,
      -0.011207977,
      -0.010811684,
      -0.01565736,
      0.000160719,
      -0.0049872617,
      0.020494903,
      -0.0027370902,
      -0.0014219019,
      -0.0004428497,
      -0.016723825,
      0.028808009,
      0.009343369,
      -0.012870434,
      0.007580485,
      -0.0027236103,
      -0.022659106,
      0.0029994831,
      -0.15002915,
      -0.019924741,
      -0.003537006,
      -0.0057004513,
      0.014596704,
      -0.0038803357,
      -0.0062056463,
      -0.021813575,
      -0.012464404,
      -0.009144029,
      0.013931229,
      0.0008699993,
      -0.011674324,
      -0.0015654258,
      0.022614498,
      0.119796544,
      -0.01502184,
      -0.008459198,
      0.000007647163,
      0.006839506,
      0.008681457,
      -0.010798611,
      -0.014506356,
      0.02236837,
      -0.0038758782,
      -0.0065894667,
      -0.0026358739,
      -0.0013271702,
      0.019256616,
      0.0051719043,
      -0.0039901906,
      0.0038639882,
      0.004129119,
      0.017813131,
      0.004612275,
      -0.012291411,
      0.0063728187,
      0.018855618,
      0.00021869564,
      -0.0076992377,
      0.0019510479,
      0.010120149,
      0.00030148495,
      0.0036795419,
      0.02023528,
      -0.004276299,
      -0.0026919781,
      -0.039713964,
      0.002110296,
      -0.00930567,
      -0.03445772,
      -0.06319257,
      -0.00970522,
      -0.012538665,
      0.0031724428,
      0.028986437,
      0.01949049,
      0.016648652,
      0.01237628,
      0.01014911,
      -0.0075972993,
      -0.003702569,
      0.0035808664,
      0.0070411116,
      -0.014630628,
      -0.010223142,
      0.021694876,
      0.0058731358,
      0.032007284,
      -0.034340024,
      0.023127975,
      -0.004623411,
      -0.0058306954,
      0.02537944,
      -0.01899669,
      -0.011243779,
      -0.01053978,
      0.045513958,
      0.011445848,
      -0.0053250478,
      -0.0023043656,
      0.0073353546,
      0.007901982,
      -0.02574114,
      0.018306945,
      -0.019137276,
      -0.02439578,
      0.024687344,
      0.012298294,
      0.008979853,
      -0.0000908916,
      -0.015944576,
      -0.0075505986,
      0.01600505,
      0.010862863,
      0.018306494,
      -0.01638393,
      -0.016045108,
      0.027226977,
      -0.0003584827,
      -0.0017414214,
      -0.0051204893,
      -0.00061600114,
      -0.021720827,
      0.0020394719,
      0.020723501,
      -0.015357793,
      0.0049685026,
      0.0014928066,
      -0.02604677
    ]
  },
  {
    "id": "genai_cohort_python_05_Delivery_fees_waiver_system_vtt",
    "content": "All right, so the next problem 2 that we are going to deal up with is 3 little bit had to do more 4 with the syntax of Python rather 5 than just solving the problem. 6 This exact same problem can be 7 solved by if and else, and rightly 8 so, it can be easily done. 9 But the whole point of learning 10 the Python so that we can understand 11 variety of syntax that 12 other people are writing. 13 And this is one of the common way 14 of writing the Python syntax. 15 So notice here the problem statement. 16 First let's go ahead and read this. 17 This is the most fun part. 18 You run an online T store. 19 I would love to run 20 an online T store. 21 If the order amount is more than 300, 22 delivery is free, 23 otherwise it costs 30 rupees. 24 Fair deal. 25 Now the task that we have is 26 input the order amount 27 and use a ternary operator 28 to decide the delivery fees. 29 Now there are a variety 30 of ways how this problem can be 31 solved and rightfully so. 32 I can simply take the order amount, 33 then I can do an if and else. 34 If the order amount is more 35 than 300, I can mark a variable 36 delivery fees as 0. 37 If it is less than 300, I 38 can mark it as 330 rupees. 39 Surely I am pretty sure 40 you can do this now. 41 But the way how it is asked us 42 to do so is use the ternary 43 operator to decide the fees. 44 This is where the syntax 45 comes and it's a really 46 interesting syntax. 47 So let's call this one as new file 48 and we're going to call this one as 49 delivery fees waiver or calculator. 50 I think waiver would 51 be good waiver py. 52 So the way how we want 53 to do it, first of all we have 54 to grab the order amount. 55 So let's go ahead and say this 56 is our order amount that we 57 have and the order amount. 58 Again my AI needs to shut 59 up and the order amount. 60 So how we're going to do this, we 61 are going to first go ahead and take 62 the input and we'll ask the user 63 to say enter the order amount. 64 There we go. 65 Now whatever the user enters at his 66 order amount first we need to check 67 that how we are getting the data. 68 And for this I would like to print 69 this order amount just like this. 70 Let's use a formatted string 71 and say order amount. 72 And I can definitely go ahead 73 and get the order amount as a value. 74 But what I really want is 75 to check the type of it. 76 And the way how we do it is 77 just put the type 78 and I simply say order amount. 79 Now this will teach you a really 80 interesting aspect of how we 81 go ahead and run the program 82 or how we get the input data. 83 So I'll just go ahead and say 84 Python 3 and we are going 85 to run this delivery fees. 86 It asks us the order amount and I 87 just say this is 40, rupees. 88 Now, notice here it says 89 the class of string. 90 So the data that we are getting 91 from the user back is actually 92 in the string format. 93 You might be wondering, 94 no, this is a number. 95 This is a number. 96 But in the world of Python, 97 there are two different things. 98 Once you write a 40 like 99 this, and once you write a 40 100 like this, there is a huge 101 difference between them. 102 One inside the double 103 quote is a string. 104 One, this is a number. 105 So we need to figure out 106 a way how we can convert this string 107 into a number. 108 And trust me, there 109 is a super easy way. 110 Just take your input, wrap them, 111 in a parenthesis, and this just 112 at the front of it, write int. 113 Int stands for integer. 114 Just like this, you can 115 convert them into float as 116 well or a string as well. 117 The moment you say int, that means 118 whatever the value is coming up 119 from, which is a string, it will try 120 its best to convert into the string. 121 If it fail, that's okay, 122 but it will try its best. 123 Let's run the program again. 124 And when I say 40 this time, 125 notice here, the class 126 changes to the integer 127 and the order amount is 40. 128 But yes, our program is still 129 prone to some of the errors. 130 We will talk about them 131 as we go forward. 132 Let's just say instead 133 of the amount, if I just go ahead 134 and add my, it will crash. 135 That, hey, I don't know how 136 to convert hitesh into a number 137 or rather a specific integer. 138 So this is the first part that you 139 have learned so far and pretty good. 140 Notice here. 141 Each project gives you 142 a new knowledge which is 143 absolutely, I love. 144 All right, next up, what we want 145 to do now that we have gone through 146 with this, particular cycle, 147 let's see how we want 148 to calculate the delivery fees. 149 So I have another one. 150 Delivery fees. 151 Delivery fees. 152 Now you can just go ahead and do 153 something like this, that my 154 Delivery fees is 0 as of now 155 and I can do a simple if statement. 156 If the order amount is greater than 157 300, I can just go ahead and change 158 the value of this delivery fees 159 instead of pointing towards zero. 160 If it is above 300, then I can 161 just keep it as it is zero. 162 And in the else part, if it is less 163 than 300 or I can use an else if 164 that is also if the order amount 165 is less than 300, I can mark it. 166 All we can do. 167 But I want you to pay attention 168 on this ternary operation. 169 In the world of ternary 170 operation, how you can actually 171 shrink this piece of code 172 instead of if and else. 173 It might sound a little 174 bit overwhelming at first, 175 but just pay attention. 176 Right now we have 177 a variable, delivery fees. 178 After that you're putting up what 179 should go inside this variable. 180 It can be zero or it 181 can be something. 182 The way how ternary operation work, 183 you simply say the delivery fees 184 is zero if the order amount that 185 you have is greater than 300. 186 And on the same line you can say else 187 the order fees will be 30 rupees. 188 Now this looks like a lot, 189 but notice here what's happening. 190 This whole thing is being calculated, 191 this whole thing is being evaluated. 192 And whatever is the result that 193 goes into the delivery fees 194 as a variable, the first 195 value that we are Putting up is 0. 196 If the order amount is above 300, if 197 this statement is correct, then this 198 value will go inside the variable. 199 If this statement is false, 200 then the else part, whatever 201 the value are putting up will 202 go inside the delivery fees. 203 Let's go ahead and try this and try 204 to print the delivery fees so 205 that we can see that in action. 206 So we'll just go ahead and print 207 the statement and we're going 208 to say delivery fees is. 209 And we'll use our classic 210 just like this, delivery fees. 211 All right, and why is 212 it having the issue? 213 I guess delivery fees is. 214 And I forgot to close this one should 215 be all happy now let's try to run 216 this program and see what happens. 217 So let's just say 218 enter the order amount. 219 Let's just say my 220 order amount is 100. 221 So in that case 222 the delivery fees is 30. 223 If I run it again and if my order 224 amount is, let's just say 400, 225 the delivery fees is zero. 226 So you can see both 227 the things in action. 228 We get the delivery fees as 0 and 30. 229 And this is a lot that we are writing 230 in just one line of code. 231 And that is why I say 232 Python looks simple. 233 It's just like reading English. 234 But sometimes the logic is little 235 bit interesting to Var out for. 236 So, so that is what I'm saying. 237 Go ahead and Var out 238 for these things. 239 And again we can only learn 240 about them as we write these kinds 241 of real world programs and try 242 to solve real world problems 243 as a software problems. 244 That is it for this video. 245 Make sure to review us and let's 246 catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 Delivery fees waiver system.vtt",
      "originalPath": "genai-cohort/python/03 Chapter Subtitles/05 Delivery fees waiver system.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.004501089,
      -0.006682974,
      0.029536033,
      -0.06408283,
      -0.0036658111,
      0.0013766286,
      0.005787011,
      0.02868674,
      0.0038436365,
      -0.014743008,
      0.00081137323,
      -0.019543953,
      0.0046434826,
      0.019058084,
      0.13625202,
      0.0058529414,
      -0.0049148463,
      -0.01985461,
      0.016395433,
      -0.008664643,
      -0.01179462,
      0.028998924,
      0.000072283736,
      -0.022059847,
      -0.0037312263,
      -0.007563076,
      -0.010847666,
      0.012415531,
      0.028910741,
      -0.023095457,
      -0.023957748,
      0.005763744,
      0.0008679433,
      0.023572346,
      -0.017983764,
      0.0058510527,
      0.022301469,
      -0.009214324,
      -0.008120221,
      0.0065142857,
      -0.013789567,
      0.013678773,
      0.015845865,
      -0.022947568,
      0.015356717,
      -0.0075252517,
      -0.0028129455,
      -0.02745907,
      0.013353208,
      0.018271944,
      0.017863622,
      -0.0010474048,
      -0.03407128,
      -0.18453555,
      0.010481138,
      0.0065266187,
      -0.010666472,
      -0.015634075,
      -0.0014343273,
      0.015362058,
      -0.0066549424,
      0.019798132,
      -0.036459226,
      -0.023047743,
      -0.02135975,
      0.0013180127,
      0.012398419,
      -0.011632869,
      -0.013699523,
      -0.01937714,
      0.0246863,
      0.0155788725,
      -0.011883975,
      -0.018701011,
      -0.013601763,
      -0.029867299,
      0.010853282,
      -0.015118682,
      0.0058846837,
      0.02505854,
      0.010080766,
      -0.021912858,
      0.00089465344,
      0.013647408,
      -0.0018056219,
      0.0025808515,
      -0.02309786,
      -0.008857839,
      0.01057465,
      -0.011491372,
      -0.029286828,
      -0.0008588053,
      -0.009131411,
      -0.0014547923,
      -0.0072048884,
      0.015057126,
      0.017488336,
      -0.0024618688,
      -0.012716192,
      0.0018673778,
      0.00009534828,
      -0.011884195,
      -0.0040328847,
      0.00011783821,
      -0.00952145,
      -0.0044230116,
      0.001830711,
      -0.009753991,
      0.0030215038,
      -0.0065598306,
      -0.008736507,
      -0.0145810135,
      -0.005905173,
      0.019439477,
      0.012939658,
      -0.15899348,
      0.0045536165,
      -0.0012403909,
      -0.014505318,
      -0.0052497336,
      -0.0043214713,
      0.002127234,
      0.0077761314,
      0.026682466,
      -0.021238688,
      0.026992781,
      0.024099771,
      0.034642134,
      -0.0070677004,
      0.00070754084,
      -0.009415584,
      -0.012956744,
      0.014831365,
      0.013095652,
      -0.0044058086,
      0.030446317,
      -0.00486198,
      -0.003211985,
      -0.018688796,
      -0.023686983,
      -0.011609949,
      0.014861626,
      -0.026241042,
      0.028474443,
      0.018064313,
      -0.0144951865,
      0.0009939804,
      0.023212599,
      -0.013474853,
      -0.04053778,
      0.0062477877,
      -0.02082012,
      0.010089429,
      0.025503015,
      0.021086736,
      -0.024215115,
      -0.009286134,
      0.027085915,
      -0.011979465,
      0.006898929,
      0.013294448,
      -0.0076309396,
      0.019522533,
      0.006706484,
      -0.018370071,
      0.0016122136,
      -0.009782398,
      0.0022244027,
      0.0089133335,
      0.004641958,
      -0.003681458,
      -0.009353179,
      -0.010019502,
      -0.0008432876,
      -0.022306131,
      0.0009932356,
      0.0026572123,
      -0.00803955,
      0.018999534,
      -0.013060804,
      -0.0022775528,
      -0.006387505,
      0.014769798,
      0.0072899237,
      0.01131151,
      0.0033446378,
      -0.0028875724,
      -0.004374513,
      -0.0018684764,
      0.013095349,
      -0.0031039473,
      -0.0017356906,
      0.016824659,
      -0.0046990965,
      0.033250723,
      -0.031787854,
      -0.004883735,
      0.01685116,
      -0.0049322606,
      -0.0101824775,
      0.024972532,
      -0.020824986,
      0.008950189,
      -0.022162551,
      0.014904041,
      -0.025238937,
      -0.008206323,
      -0.014898999,
      0.023621967,
      0.0012101043,
      -0.0004974265,
      -0.01778843,
      0.0098999655,
      0.01687765,
      0.027749613,
      -0.008057868,
      0.016467368,
      -0.0073580914,
      -0.0047134687,
      0.005863935,
      0.04227116,
      -0.003646594,
      -0.000058209844,
      0.034983456,
      0.0064326273,
      -0.021046791,
      0.017787479,
      0.0003982429,
      -0.024835186,
      -0.0016323898,
      0.03246695,
      0.020552821,
      0.0010236612,
      -0.0030328538,
      0.008601846,
      0.017797958,
      0.01294942,
      0.01801254,
      0.02069623,
      -0.004378653,
      0.009927826,
      0.013091338,
      0.003714324,
      0.012828214,
      0.02431682,
      0.008745419,
      0.00048678895,
      -0.007867579,
      0.0028806499,
      -0.018189682,
      -0.0036655623,
      -0.010358197,
      0.02005978,
      -0.038370032,
      0.017024385,
      -0.026335498,
      -0.014882988,
      -0.00849302,
      -0.015896235,
      0.0076608984,
      -0.006483047,
      -0.029080061,
      -0.007785656,
      -0.0052987966,
      0.027275579,
      -0.004915727,
      -0.0069691557,
      0.03158956,
      -0.01850092,
      0.02562749,
      0.0070457407,
      0.0009822313,
      -0.0030014876,
      -0.0034720998,
      -0.019683708,
      0.010962598,
      -0.09353138,
      0.024417603,
      0.015305322,
      -0.008692089,
      0.010912329,
      0.021360068,
      -0.0042658094,
      0.02236599,
      0.0055259727,
      0.028772177,
      0.017197665,
      -0.014147831,
      0.022124818,
      -0.028008252,
      -0.0060283965,
      -0.0047182427,
      -0.018504165,
      -0.011731742,
      0.038016856,
      -0.006776892,
      0.017631294,
      -0.0114261545,
      -0.01634713,
      0.009319557,
      0.02616313,
      0.013912872,
      -0.020129526,
      0.038559675,
      0.000814899,
      -0.007910753,
      -0.020248715,
      0.01846423,
      -0.014141902,
      -0.01717763,
      -0.01307334,
      0.025026385,
      0.015720388,
      -0.008411611,
      0.017290547,
      -0.014064435,
      0.018325169,
      -0.011914856,
      0.017198319,
      0.041099012,
      -0.015207644,
      -0.0018143248,
      -0.01884957,
      0.004683779,
      -0.012698383,
      0.003971129,
      -0.0021475032,
      0.028607735,
      -0.0038522573,
      -0.022071088,
      0.0006189621,
      0.022229522,
      0.010512577,
      0.0032029867,
      -0.009107192,
      0.013439312,
      0.013426075,
      0.0119964145,
      -0.0033438357,
      -0.033203628,
      0.0011920267,
      0.00403947,
      0.016133573,
      -0.014034306,
      -0.016767824,
      -0.0049691107,
      0.005891423,
      0.019442657,
      -0.021169264,
      -0.024461366,
      -0.006635612,
      0.011797153,
      0.011372087,
      -0.0058747735,
      0.0065993266,
      0.015617656,
      0.009395387,
      -0.02403162,
      0.0034495536,
      0.010951207,
      -0.003921591,
      -0.0019167886,
      -0.0010563687,
      -0.010816089,
      0.0052545536,
      -0.010086406,
      0.004994982,
      0.0063118814,
      -0.003835224,
      0.0031967612,
      -0.027281482,
      0.0069016325,
      -0.0078043104,
      -0.0096802,
      -0.01520102,
      0.012722056,
      -0.015467749,
      -0.0021083206,
      -0.028602399,
      0.011072487,
      -0.017447218,
      0.0076996093,
      -0.037230615,
      -0.024597362,
      0.025307173,
      -0.027914338,
      0.011846213,
      0.006032581,
      -0.017830385,
      0.0027093566,
      -0.0030968608,
      0.035704367,
      0.009463718,
      0.01531806,
      0.013302556,
      0.007876504,
      0.005338328,
      -0.015314226,
      -0.0161791,
      0.019750383,
      0.006748483,
      0.010767644,
      0.007421027,
      0.008733281,
      -0.0066146534,
      -0.026671886,
      -0.017671654,
      0.011015352,
      -0.024476862,
      -0.019623743,
      -0.01046884,
      -0.0072255656,
      0.01921949,
      0.021637995,
      0.024484014,
      -0.0057734977,
      0.00050206314,
      0.015468393,
      0.018614953,
      -0.008393918,
      -0.014829677,
      0.027601007,
      -0.014716866,
      0.015751695,
      0.031642023,
      -0.025931323,
      -0.024444075,
      -0.015920067,
      -0.003788901,
      -0.0055022123,
      -0.008824335,
      0.003223374,
      -0.0011624948,
      -0.0063564917,
      -0.020222008,
      -0.015407105,
      -0.00037415608,
      0.0002757316,
      -0.024689019,
      0.025123665,
      -0.00012728287,
      0.010558029,
      0.0020012613,
      -0.0027345591,
      0.0051161656,
      0.004535522,
      -0.010221725,
      -0.018827116,
      -0.021922821,
      -0.00814314,
      0.023980446,
      -0.003237577,
      0.014361906,
      0.0017789435,
      0.018370504,
      0.015308149,
      0.012803659,
      -0.008068321,
      -0.013442762,
      0.027091626,
      0.017367672,
      0.0105145015,
      0.0054908986,
      0.012418221,
      -0.031938583,
      -0.0035119937,
      -0.0030106977,
      -0.029955171,
      -0.014886191,
      0.019948978,
      0.013665189,
      0.022169372,
      -0.019105185,
      0.008902609,
      0.02267353,
      0.0141549865,
      0.0060988036,
      -0.009085864,
      -0.0058782552,
      0.00405356,
      0.005724888,
      -0.01344426,
      -0.016972793,
      -0.01227382,
      -0.0070932303,
      0.005261701,
      -0.0043476275,
      0.0004181482,
      -0.0008617604,
      -0.003253743,
      0.013689428,
      0.018354958,
      -0.04079838,
      0.007808661,
      -0.020524753,
      0.017589606,
      0.017399263,
      -0.009504154,
      -0.0038877372,
      -0.00350937,
      0.02050911,
      0.00042022316,
      0.0033799424,
      -0.0039346335,
      -0.0014809255,
      -0.0017588708,
      -0.014730863,
      -0.0077532525,
      -0.013548092,
      0.016077809,
      -0.027746582,
      -0.023572434,
      0.012311488,
      0.016147781,
      -0.018114738,
      0.0033982787,
      -0.014574391,
      -0.025309512,
      -0.010247871,
      -0.005070673,
      0.0014293727,
      -0.007595666,
      0.02984971,
      0.0042473385,
      0.0012877651,
      0.009511278,
      -0.0037256882,
      0.022930145,
      0.0048427787,
      -0.0047915014,
      -0.033719502,
      0.027075881,
      0.0013764641,
      0.012921221,
      -0.0013579034,
      0.0057523004,
      0.04680116,
      0.014625437,
      -0.012248952,
      0.0054334383,
      -0.00844236,
      -0.010567046,
      -0.00451797,
      0.0023770814,
      -0.015993904,
      -0.132401,
      0.0059862044,
      0.0136258025,
      -0.0012372474,
      -0.0076283426,
      -0.016056433,
      -0.018246628,
      -0.0026084373,
      0.0031015722,
      0.0045842635,
      0.043046687,
      -0.0015057701,
      -0.015792111,
      0.00003076331,
      0.00007557795,
      -0.017425667,
      0.034409214,
      0.025383582,
      0.025354672,
      -0.009645395,
      -0.017673668,
      0.009368531,
      0.0070736078,
      0.01260422,
      -0.025851883,
      -0.0015351876,
      0.0033391425,
      0.014617825,
      -0.004345146,
      -0.002468396,
      -0.031891707,
      -0.021499194,
      0.010363209,
      0.0029004877,
      0.010609355,
      -0.010164786,
      -0.022816017,
      0.01672081,
      0.014118121,
      -0.0077347383,
      0.008813526,
      0.009797275,
      0.018683527,
      0.009973904,
      -0.0033041816,
      0.0036504632,
      0.028989859,
      -0.0066065206,
      0.0018007247,
      0.029009644,
      -0.03939042,
      -0.032650694,
      -0.021840109,
      -0.0045695393,
      0.0005713833,
      0.008847026,
      0.0023637847,
      -0.017889436,
      -0.0013491367,
      -0.020504488,
      -0.026950337,
      -0.011276571,
      0.01811141,
      0.03669926,
      0.019338138,
      -0.008766834,
      0.037663944,
      0.031557273,
      0.028932374,
      0.0018724418,
      0.013005516,
      -0.018763624,
      0.013713905,
      0.013804778,
      0.023676835,
      0.002042036,
      0.007755024,
      -0.0017618495,
      0.01268157,
      0.030897345,
      -0.01744703,
      -0.026458457,
      -0.048685037,
      -0.004473715,
      0.0038875132,
      0.00022586358,
      0.014727342,
      0.02696141,
      -0.012766082,
      -0.0045497296,
      0.009307336,
      -0.0065495074,
      -0.01109226,
      0.016120505,
      0.024025306,
      -0.007271845,
      0.00014647668,
      0.0013338933,
      0.004843713,
      -0.0059866025,
      -0.033046804,
      0.00015472919,
      -0.005846405,
      -0.0030722904,
      0.019544423,
      -0.018658808,
      0.0001743031,
      0.015288827,
      -0.026806675,
      0.0019049599,
      0.009099377,
      0.008357787,
      -0.01055035,
      -0.1469853,
      -0.021281824,
      -0.014327302,
      -0.004904253,
      -0.0009973322,
      0.0030011279,
      0.0061330204,
      -0.018975051,
      0.02228828,
      -0.022484407,
      0.00071640033,
      -0.0054707644,
      -0.020202156,
      -0.00098262,
      0.04053167,
      0.14415017,
      -0.011276881,
      0.004052573,
      -0.008064667,
      0.013840066,
      -0.00013929825,
      -0.007617644,
      -0.02186663,
      0.00832186,
      0.0045157666,
      -0.018533206,
      -0.008163969,
      -0.023023805,
      0.0069107995,
      -0.0016896384,
      -0.013601134,
      0.016920174,
      0.006055393,
      0.011631098,
      -0.000520432,
      -0.014139988,
      -0.009495594,
      0.006521826,
      -0.01074321,
      -0.0016606593,
      0.017143065,
      0.0069774045,
      -0.013336293,
      0.009700807,
      0.025977788,
      0.014076615,
      0.0035653075,
      -0.02426396,
      0.0041758614,
      0.0029568756,
      -0.021753008,
      -0.050258826,
      -0.019643573,
      -0.01099111,
      0.0062083644,
      0.025639525,
      -0.0011773646,
      0.009166718,
      0.019885292,
      0.0035640683,
      0.009853875,
      -0.005320811,
      0.0075441557,
      0.006578485,
      0.0035398917,
      -0.008667893,
      0.026632017,
      0.011569452,
      0.023998156,
      -0.013672653,
      0.0012980412,
      0.0019048983,
      -0.009336863,
      0.028162396,
      -0.016081488,
      -0.014480489,
      0.0072273966,
      0.013368859,
      0.01731805,
      -0.0037612037,
      -0.006217524,
      -0.0074289343,
      0.0034058397,
      -0.024900602,
      0.021451661,
      0.0136974305,
      -0.019548161,
      0.008831266,
      -0.0011940805,
      -0.0030443685,
      0.009454747,
      -0.00849964,
      -0.023001615,
      0.005438344,
      -0.013764771,
      0.005421442,
      -0.0001392392,
      0.0053176293,
      0.023192385,
      0.00020940875,
      0.006471703,
      -0.009020122,
      0.002593482,
      -0.03101841,
      0.00069292565,
      0.0026327232,
      -0.0070570763,
      0.0025192518,
      0.0015855078,
      -0.0051553324
    ]
  },
  {
    "id": "genai_cohort_python_06_Build_a_train_seat_information_system_vtt",
    "content": "Hey there everyone. 2 And welcome to another problem. 3 Now this next problem that we 4 have in front of us is a very 5 interesting problem 6 and actually a real world problem. 7 This is something that you will 8 be building in your application. 9 Maybe you'll build something 10 for an aeroplane system or 11 for a train system. 12 This is exactly how you build 13 them in the real world. 14 Also, we'll write 15 the exact same code. 16 Let's read the problem statement, 17 which is my favorite part. 18 You're building a ticket info 19 system for a railway app 20 or a railway application. 21 In short, based on the seat 22 type, show its features. 23 All right. 24 I don't have the idea how to show 25 the features or what features are 26 available, but we'll try our best. 27 The first task is take the input, 28 sleeper, ac, general or luxury. 29 So we have four categories 30 of them and you might be 31 wondering, all right, I have 32 to write a lot of if and else. 33 If the user input is sleeper 34 else if user input is ac, else 35 if the user input is general 36 else if you get the idea. 37 And then we have to match 38 using the match case. 39 So I'll show you another 40 interesting way. 41 Then once you have too many cases 42 to check, you can actually skip 43 the if else loop and the drilling 44 of the whole if else if, else 45 if, else or else if, else if. 46 And then we'll show the unknown. 47 If somebody gives us message 48 which is not matching into 49 these four categories, we'll just 50 show invalid seed type. 51 This is a very interesting 52 problem and a very interesting 53 set of code that we go ahead 54 and write for this one. 55 So we'll just go ahead and get 56 into the conditional and we 57 are going to go ahead and say 58 this one is train seat py. 59 So the step one, the obvious step is 60 to take input from the user. 61 So in this one we'll just go 62 ahead and say input 63 and we'll ask the user enter 64 the seat type or enter seat type. 65 And we'll give the user a message 66 that what kind of seats? 67 You can choose. 68 You can, you can choose from slipper 69 sleeper and you can choose from ac. 70 Obviously air conditioned. 71 You can choose from general 72 if you are in a hurry 73 and we will choose luxury. 74 So these are all the options 75 that user can choose from. 76 And just like always, we'll do 77 the lower so that we don't have 78 to match for so many conditions. 79 We can just reliably check 80 for a couple of conditions only. 81 Now let's store this into a variable. 82 Let's call this one as seat type. 83 There we go. 84 Now once we are done with this, 85 then we can use Instead of else. 86 If we can use a really 87 smart and interesting way 88 of writing the code that is 89 known as match syntax. 90 So what is the variable that you want 91 to match for variety of condition? 92 I want to match for a seat type 93 and it should be 94 a seat type, not tie. 95 Seat type. 96 There we go, seat type. 97 Now then put up 98 a colon and hit enter. 99 Now once you're done with this you 100 can write a keyword case and you 101 can match for a variety of case. 102 Now this case could be integer, could 103 be a float, it could be a string. 104 Lot of things you can match for. 105 And the first case that we 106 are matching for is sleeper. 107 If user has selected sleeper 108 then we want to provide 109 a message based on sleeper. 110 So for example, what are 111 the specialty of a sleeper? 112 I have no idea what user 113 wants to put up here. 114 But we'll just go ahead and say 115 in the sleeper you don't have ac. 116 So no ac. 117 But beds are available. 118 So we'll just say beds available. 119 So this is the features of it. 120 Now not only this, it also 121 can match for another case. 122 So write as many case 123 as you wish to have. 124 Let's just say another case 125 we want to match for is ac. 126 Now behind the scene, what's 127 happening in this is this seat type. 128 Whatever the variable is 129 behind the scene, we are 130 doing something like this. 131 Seat type is equal, equal to sleeper. 132 So behind the scene it is matching 133 for all of this AC just like this. 134 But we don't write this syntax 135 when we actually go 136 for the case we simply go ahead 137 and say if the case is ac. 138 So in that case we simply 139 go ahead and print ac. 140 What do we want to write in the ac? 141 So AC is going to be air 142 conditioned hopefully. 143 And we'll say comfy, right? 144 Comfy. 145 Right. 146 And we have couple of other 147 cases that we have to match it. 148 I'll just go ahead and say case. 149 What else you want to go for? 150 Maybe we want to go for next is 151 general and we want to print 152 a message for the general. 153 There we go. 154 And we will say general, these 155 are usually the cheapest option. 156 Cheapest option. 157 And we'll say no reservation. 158 Hopefully I wrote that correct. 159 And then we simply can have 160 for another case which is luxury. 161 And probably they give 162 meal in the luxury. 163 So I'll just go ahead and put 164 up a print statement 165 and we are going to call this one as 166 luxury just like this. 167 And we'll say premium seats 168 with meals. 169 And what about the case when 170 it doesn't match anything? 171 So in that case what we can 172 go ahead and simply put 173 up a statement case and then you 174 can just put an underscore. 175 Yes, this looks little 176 weird, but this is how 177 it works, underscore. 178 And then you can simply say 179 a print message that simply says 180 invalid seed type. 181 There we go. 182 So notice here it's a very strange 183 kind of a, mechanism if you're 184 seeing this for the first time. 185 But this actually looks much 186 more readable as compared 187 to constant if and else. 188 And yes, you can use 189 anywhere, wherever you like. 190 Let's go ahead and try to run 191 this program and first let's 192 check what happens when we give 193 any type of seat and see 194 if, if we're doing anything wrong. 195 Let's go ahead and clean this 196 up and we'll say Python 3 and this 197 time we'll run for the train seats, 198 enter the seat type. 199 I would say something 200 and it says invalid seat type. 201 All right, so at least our 202 last case is getting matched. 203 Let's run it one more time. 204 This time I want to say I want 205 to match for ac and it says ac 206 air conditioned, comfy ride. 207 And the best part about this program 208 is now I can just write it like 209 this, this general, general. 210 There we go. 211 And still it will match because 212 we have actually taken care 213 of it by putting up a lower here. 214 So this is a great way of how we 215 can actually work with that. 216 And trust me, these are the only 217 cases you want to walk through. 218 So in the entirety 219 of the program that we have written, 220 these are only the cases. 221 I've given these exercise for you 222 in case you want to try them 223 again in the same program. 224 But again just giving you 225 a walkthrough, these are the only 226 problems that we have. 227 So if we go ahead and build 228 the mini store, this is simple. 229 If and else if you want to break 230 for more suggestion. 231 This is classic if and else. 232 If you want to go for more 233 nesting of it. 234 Yes, we saw that as well. 235 We also saw that we can 236 use ternary operator. 237 We have also seen that we 238 can actually go ahead and do 239 a lot of if and else. 240 And another alternative of lot of if 241 and else is this match and case. 242 So I hope you have had an interesting 243 time in building this train 244 seat classification information 245 program and enjoyed this as well. 246 That is it for this video 247 and you know the drill. 248 I always ask for the reviews. 249 That's it for this video and catch 250 up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "06 Build a train seat information system.vtt",
      "originalPath": "genai-cohort/python/03 Chapter Subtitles/06 Build a train seat information system.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.015776357,
      -0.000099841556,
      0.018129895,
      -0.060885873,
      -0.024384499,
      -0.021251287,
      -0.009639491,
      0.020355817,
      -0.007578661,
      0.015766008,
      -0.022639064,
      -0.017744334,
      -0.00105483,
      0.028893003,
      0.12423604,
      0.0027921658,
      -0.013579402,
      -0.004201,
      -0.0019413403,
      -0.0036500618,
      -0.001956816,
      0.008428254,
      0.013770362,
      -0.030958604,
      0.012828866,
      0.001994918,
      0.00036701388,
      0.009078143,
      0.018887807,
      -0.03550265,
      -0.009333616,
      0.023053277,
      0.005049728,
      0.04592595,
      0.017340485,
      0.010395652,
      0.024507709,
      0.0147349,
      -0.0036152506,
      0.015319345,
      0.010616454,
      0.0029108224,
      0.0051533496,
      0.000558997,
      0.016887194,
      -0.013481622,
      -0.006881145,
      -0.009792378,
      0.008267306,
      0.031733572,
      -0.011110713,
      -0.0056633754,
      -0.016371662,
      -0.18908228,
      0.0023527597,
      0.0059571574,
      -0.010642048,
      0.0027196596,
      -0.0032877058,
      0.0019543727,
      -0.027623134,
      0.007549431,
      -0.021442201,
      -0.005914513,
      0.031821385,
      -0.016054085,
      0.013776576,
      -0.005250284,
      -0.017407397,
      -0.004110523,
      0.027156724,
      0.004008455,
      -0.017611325,
      -0.016005948,
      -0.005826099,
      -0.025546774,
      0.018963674,
      -0.0061016465,
      -0.007919173,
      0.019967718,
      -0.003185422,
      -0.01584549,
      -0.02523036,
      -0.001836282,
      0.004698665,
      0.00032335726,
      -0.033468027,
      -0.009675739,
      0.0004691682,
      -0.0014518326,
      -0.007219875,
      0.0019144068,
      0.0009398919,
      -0.017475238,
      -0.014538065,
      -0.004665159,
      -0.009113786,
      0.0048165265,
      -0.01102416,
      -0.00530219,
      0.013736372,
      -0.0016190214,
      -0.03340621,
      -0.001778058,
      0.00667538,
      0.007427533,
      0.007916768,
      -0.004011166,
      -0.008234187,
      0.001072408,
      -0.0037702413,
      0.0018320092,
      0.0027528733,
      0.02854635,
      0.019258438,
      -0.17182547,
      0.002987174,
      -0.0023510994,
      -0.022027252,
      -0.0029942172,
      0.0012555636,
      0.0016937443,
      0.03490309,
      0.006753399,
      -0.017410444,
      0.041836653,
      0.0078739235,
      0.012434658,
      0.01151966,
      -0.00925692,
      -0.023569379,
      -0.006940408,
      0.010028681,
      -0.016078947,
      -0.013481657,
      0.012405396,
      -0.011039561,
      -0.034666255,
      -0.0129528195,
      -0.01144959,
      0.007311515,
      0.013718363,
      -0.0035522731,
      0.020589452,
      0.019822199,
      -0.011974755,
      -0.019062223,
      0.027034728,
      -0.0016162292,
      -0.028560895,
      0.017952913,
      -0.012458228,
      0.011173937,
      -0.011788946,
      0.019368023,
      -0.03459811,
      0.00517278,
      0.004006839,
      -0.020119883,
      0.008381246,
      -0.00006967236,
      -0.0067148427,
      -0.016584776,
      -0.002032677,
      0.0017045084,
      -0.00958078,
      -0.012942442,
      -0.007451242,
      -0.0036134343,
      0.019194407,
      0.0072168703,
      -0.005215915,
      0.0031753662,
      0.012714468,
      0.00075608585,
      -0.0016452915,
      0.0067138053,
      0.01814442,
      0.005589672,
      0.0026812218,
      -0.024692431,
      -0.0039181774,
      0.012683966,
      0.0051244423,
      -0.0018257564,
      -0.0013038528,
      -0.004288521,
      0.0016957675,
      0.029988598,
      -0.0013480606,
      0.014790478,
      -0.0063851997,
      0.014870282,
      0.010717737,
      0.011389612,
      -0.010538713,
      0.014259499,
      0.015090778,
      -0.00816999,
      -0.012243256,
      0.021773802,
      -0.016353015,
      0.0018086619,
      -0.0017950095,
      0.016951267,
      -0.01713525,
      0.0028423674,
      -0.028432012,
      -0.0011169614,
      -0.006130885,
      -0.00794409,
      -0.018028544,
      0.009348279,
      0.012185398,
      0.023725208,
      -0.0036933103,
      0.018140178,
      -0.003117443,
      -0.012963111,
      0.0026582477,
      -0.009572266,
      -0.007701611,
      0.017669624,
      0.028753487,
      -0.00891837,
      -0.012180224,
      0.013175733,
      -0.020462336,
      0.005279243,
      0.0134032015,
      0.035957813,
      -0.002551287,
      0.007826648,
      -0.00085743336,
      0.024706645,
      -0.0032840145,
      -0.017198674,
      0.026501875,
      0.026617788,
      0.007836259,
      0.00867087,
      0.0012650162,
      -0.02896034,
      0.013554447,
      0.016783953,
      -0.0014596285,
      0.0042348346,
      -0.03205366,
      0.014158304,
      -0.019307278,
      -0.013513064,
      -0.015827363,
      0.007066057,
      -0.011860616,
      -0.0065011033,
      -0.033636652,
      -0.027253533,
      -0.01633311,
      0.0053014266,
      -0.0002995245,
      -0.0040449197,
      -0.00472001,
      0.013687003,
      -0.018824955,
      0.016793182,
      -0.016867304,
      -0.0030159787,
      0.022327814,
      -0.021097757,
      0.009018057,
      0.02758872,
      -0.010569855,
      0.0052845855,
      -0.009470804,
      -0.01281287,
      0.008607983,
      -0.101038076,
      0.016408833,
      -0.0057525444,
      -0.03194354,
      -0.0041120397,
      0.013658109,
      -0.002668451,
      0.011939792,
      -0.012987641,
      0.020032752,
      0.012319446,
      -0.017544232,
      0.027620533,
      -0.029667081,
      -0.02056952,
      -0.0025880132,
      -0.019922914,
      -0.013048451,
      0.030285705,
      -0.018398438,
      0.00035526705,
      -0.028129388,
      0.008896252,
      0.010185987,
      0.02789734,
      0.0073364927,
      0.0082676755,
      0.028579786,
      0.023606189,
      -0.0051502925,
      -0.0227217,
      0.022785319,
      0.004581947,
      -0.020321665,
      0.017690754,
      0.00397136,
      0.019052297,
      0.010210523,
      0.0052461214,
      -0.027920267,
      0.022258699,
      -0.038353868,
      0.01589865,
      0.037864298,
      -0.01093754,
      0.0016935035,
      -0.015205539,
      0.011026362,
      -0.025735179,
      -0.0058435323,
      -0.00040573673,
      0.007253048,
      0.0016188648,
      -0.024215164,
      0.00012180197,
      0.027220905,
      0.00572098,
      -0.0149771115,
      0.021118306,
      -0.0050070602,
      0.01044008,
      0.011697054,
      0.00091506634,
      -0.011826455,
      -0.014172774,
      0.0137031665,
      0.012816695,
      -0.017435834,
      -0.026138738,
      -0.0027429487,
      0.018175043,
      0.00018114124,
      0.005803006,
      -0.025988804,
      -0.0061703357,
      -0.0012438883,
      -0.0021349483,
      -0.03837551,
      -0.022424335,
      0.0074404185,
      0.020534713,
      -0.0053400397,
      -0.013909316,
      0.0034436875,
      -0.011679106,
      0.0024707224,
      -0.000002648528,
      -0.003446009,
      0.0039869496,
      -0.018201536,
      0.024723215,
      0.008462915,
      0.0029985788,
      0.009378992,
      -0.00689936,
      0.021015488,
      -0.009606661,
      -0.021403914,
      -0.0011697601,
      0.016516495,
      -0.021768205,
      -0.0016878356,
      -0.01827051,
      0.016879719,
      0.006458016,
      -0.0004709865,
      -0.024156831,
      -0.025439803,
      0.007623718,
      -0.0128156645,
      0.0081783105,
      0.0058379173,
      -0.018613338,
      -0.007545043,
      -0.0096876295,
      0.012322338,
      0.00328546,
      0.0009661734,
      0.013006564,
      -0.0093581695,
      0.0019654,
      -0.0072042434,
      -0.003396021,
      0.029630892,
      -0.0037659726,
      0.0031623761,
      -0.004029757,
      0.0035421683,
      -0.01508971,
      -0.015870938,
      -0.033828303,
      0.0070161643,
      -0.027300889,
      -0.020473795,
      -0.011691342,
      -0.017412795,
      0.013914762,
      0.025986314,
      0.0137356045,
      0.0138931535,
      0.010505539,
      0.0116895735,
      0.00033981548,
      -0.0018044271,
      -0.016234336,
      0.025942203,
      0.002181602,
      -0.0008563781,
      0.0064365594,
      -0.0059680943,
      -0.022153359,
      -0.03239972,
      -0.005746262,
      -0.005945723,
      -0.03158689,
      -0.009926657,
      0.014609955,
      -0.012741579,
      -0.032837823,
      -0.023719227,
      -0.012327194,
      0.015259314,
      0.00361595,
      -0.0029462061,
      0.028604042,
      0.008441586,
      -0.0211959,
      -0.013922533,
      0.024027325,
      -0.00473458,
      0.0033877022,
      -0.012708657,
      -0.011799318,
      -0.006234577,
      0.014008548,
      -0.008161852,
      0.015075833,
      -0.013288978,
      0.03257758,
      0.024295952,
      -0.016414126,
      0.0032367643,
      -0.0006113099,
      -0.010800651,
      0.016522482,
      0.003185541,
      0.010686649,
      0.027520293,
      -0.0170428,
      -0.009324136,
      0.029160902,
      -0.03737573,
      -0.006352972,
      0.0167255,
      0.0073481435,
      0.034873504,
      -0.0019868389,
      -0.0085295085,
      0.011508855,
      0.011561927,
      -0.013423736,
      -0.014038799,
      -0.0055836267,
      0.006806963,
      0.012756315,
      -0.0083874855,
      -0.007021358,
      -0.01021339,
      0.00910557,
      0.02002139,
      -0.0054467786,
      -0.017714962,
      -0.0075981924,
      -0.0058162566,
      0.029720373,
      0.020498259,
      -0.0076550473,
      0.03517892,
      -0.009531805,
      0.015357675,
      -0.007449033,
      -0.0016189056,
      0.007717203,
      0.0040816865,
      0.018065598,
      -0.0065028714,
      0.0041224146,
      0.015430266,
      -0.021173319,
      0.010871858,
      0.00007531151,
      -0.014369905,
      -0.01058505,
      -0.012216239,
      -0.042712074,
      -0.01612423,
      0.009773451,
      0.032327663,
      -0.006147293,
      0.017227769,
      -0.01811621,
      -0.021971447,
      -0.02233972,
      -0.005370901,
      0.017518362,
      0.005194315,
      0.015086244,
      0.0075747403,
      -0.01600758,
      -0.00151074,
      0.01689313,
      0.026868764,
      0.016429866,
      -0.01780381,
      -0.040646374,
      0.023389816,
      -0.0014492546,
      -0.0056180903,
      0.005105423,
      -0.00025435977,
      0.035504557,
      0.0013345774,
      -0.0014319826,
      0.0053308005,
      0.007497257,
      -0.003948821,
      -0.022050329,
      -0.0069877226,
      0.000070660186,
      -0.14115772,
      0.009031601,
      0.0071942685,
      0.016315725,
      0.005322049,
      -0.03733494,
      -0.0051614796,
      -0.015710348,
      -0.0033147964,
      -0.013858899,
      0.030308526,
      0.011237867,
      0.004896071,
      -0.001044685,
      0.01199338,
      -0.020039843,
      0.008985418,
      0.020464562,
      0.02186952,
      -0.012447026,
      -0.007517903,
      0.004706015,
      0.0055574332,
      0.009197004,
      0.0029459815,
      -0.020418728,
      0.014128701,
      0.011687085,
      -0.0240574,
      -0.008051771,
      -0.007801163,
      -0.0026987235,
      -0.005850153,
      0.018289512,
      0.0066657863,
      0.0032324882,
      -0.019069148,
      0.022532737,
      0.022324368,
      -0.013326129,
      -0.017161561,
      0.007899802,
      0.017896194,
      0.022355068,
      -0.0057070977,
      0.005060406,
      0.018322859,
      -0.029919226,
      -0.015494968,
      0.012305991,
      -0.03812046,
      -0.019524962,
      -0.012609936,
      -0.008540137,
      -0.031550337,
      0.010596613,
      0.0029038019,
      -0.0025110845,
      0.0045128767,
      -0.01366261,
      -0.011716342,
      0.010745389,
      -0.015481141,
      0.040772352,
      0.009639849,
      0.0034226489,
      0.029435812,
      0.016299399,
      0.0114870295,
      0.01849254,
      -0.003062645,
      -0.01820368,
      0.0077283457,
      0.00036979333,
      -0.0005999329,
      0.02096639,
      0.0069690105,
      -0.013177503,
      0.0056993063,
      0.0021899692,
      -0.034313813,
      -0.007657592,
      -0.058696054,
      -0.022524714,
      -0.002500783,
      -0.0058561084,
      0.011194291,
      0.025878157,
      -0.0049483334,
      0.000018057479,
      -0.0048071574,
      0.011556991,
      -0.012534765,
      0.012195957,
      0.010632646,
      0.0005295946,
      -0.012254379,
      0.0062814006,
      0.016468598,
      -0.0056276633,
      -0.005906176,
      -0.0052203154,
      -0.015551714,
      0.004464547,
      0.007857263,
      -0.021328028,
      -0.005369557,
      0.017444959,
      -0.020757606,
      0.0011699212,
      0.0053939046,
      -0.0070095,
      0.00030196548,
      -0.14749552,
      -0.0027559432,
      0.008588378,
      0.0131263165,
      0.027400726,
      0.003322626,
      0.004444155,
      -0.040314265,
      0.013707692,
      -0.01809862,
      -0.008619683,
      -0.012234051,
      -0.020289913,
      0.0094597135,
      0.028699031,
      0.12635277,
      -0.0055238823,
      0.0026326547,
      -0.011392041,
      -0.012001506,
      -0.00005630545,
      -0.011635588,
      -0.012013114,
      0.011507387,
      0.004198176,
      0.002603776,
      0.0054752147,
      -0.014493462,
      0.004134749,
      0.01859563,
      -0.010325548,
      -0.0041530337,
      0.025802888,
      0.0038114884,
      -0.019227834,
      0.0035040916,
      -0.009692142,
      0.014240079,
      -0.005023621,
      -0.0057566413,
      0.015496141,
      0.0064667566,
      -0.0055861534,
      0.016825065,
      -0.0009202918,
      0.0057738232,
      0.0016006051,
      -0.0096414145,
      -0.00891626,
      -0.0019675898,
      -0.03393956,
      -0.061228357,
      -0.013766771,
      -0.0033546374,
      -0.014405757,
      0.009937563,
      0.005332118,
      0.014459795,
      0.02133944,
      -0.0023842414,
      -0.0039081303,
      -0.009591527,
      -0.0009884121,
      0.026119487,
      -0.004907938,
      -0.0117077045,
      0.02600803,
      -0.00015013585,
      0.02585843,
      -0.021239538,
      0.029743906,
      0.011661722,
      -0.0108900145,
      0.021295134,
      -0.003917489,
      -0.002780215,
      -0.0005438443,
      0.011080474,
      -0.0023194125,
      -0.01457283,
      -0.013167338,
      -0.0116897095,
      0.01805509,
      -0.021309976,
      0.016529033,
      0.010112039,
      -0.03860749,
      0.0065087974,
      0.002803969,
      -0.0058266744,
      0.014701983,
      0.0011923996,
      -0.0051281187,
      0.013003123,
      0.0005268111,
      0.009942242,
      -0.008003507,
      -0.0007606165,
      0.023893913,
      -0.012178044,
      -0.009220882,
      -0.010766618,
      -0.0030222386,
      -0.040962923,
      0.014371708,
      -0.00508526,
      -0.011705875,
      0.014997457,
      0.0046192147,
      -0.013530304
    ]
  },
  {
    "id": "genai_cohort_python_01_Objects___Mutable_and_Immutable_in_python_vtt",
    "content": "Hi and welcome to the chapter 2 two or section two, whatever 3 you like to call this one. 4 Now in this section we would go 5 with the data types. 6 Now whenever you learn any 7 programming language there are just 8 two types of thing you have to 9 learn formally, the first one being 10 what is the type of data. 11 For example, are those data numbers 12 or are those data like names? 13 We call them as strings 14 in programming terms. 15 Now numbers could also be 16 of variety of types. 17 It could be regular number, it 18 could be with the decimal number, 19 it could be imaginary numbers. 20 In case you are not familiar 21 with the math, we do have IOTA 22 numbers which are maths heavy 23 number which have a real part 24 as well as imaginary part. 25 We have a lot of mathematics that 26 can be done in the Python world. 27 So the first part of learning 28 programming language is 29 to understand the types of the data 30 as we call them as data types. 31 The next part is how do 32 we manipulate that data? 33 For example I want to add 34 the numbers, multiply the numbers 35 or probably change the name 36 to uppercase or lowercase or 37 validate, that's a valid email 38 or not in the format. 39 There are a lot of things that we do. 40 This is exactly what we're going 41 to learn in this section, 42 the data types part and we 43 will understand some of the behind 44 the scene of the Python 45 that how it stores the data. 46 There's a great concept in Python 47 known as mutability immutability. 48 We'll have a discussion on this one. 49 It's a very fantastic concept. 50 Once you actually see it 51 from my perspective you will 52 absolutely love it and you 53 will never forget about it. 54 So this is all that we will 55 be doing in this section 56 and with this let me go ahead 57 and take you onto the screen. 58 Let's start with the section one. 59 We'll go on our board, 60 by the board I mean the black 61 board that we have been using. 62 So let's go up here and we 63 will be working and learning 64 through this one. 65 So this one we want to go with 66 two things first and then we'll 67 study about anything else. 68 And these are our objects. 69 Now what are objects? 70 We will have a discussion on this 71 and as well as we are going 72 to talk about mutability. 73 So this is our objective for this 74 entire whole section as well. 75 But we'll pick the topics one by one. 76 So let me just get your entire focus 77 on the screen itself so that we can 78 go ahead and just talk about that. 79 First of all let's talk 80 about what is object. 81 Now in Python there is a concept that 82 you're going to see that Is called 83 as everything is object in Python. 84 And this is very true. 85 What do you mean by object? 86 Literally anything that 87 you see is an object. 88 And the one thing that you have to 89 remember always about the object, 90 that if we are terming anything 91 as an object, so let's go ahead 92 and write that it needs to have 93 few of the properties mentioned 94 up. 95 For example, this is the object. 96 So every single object 97 will have a unique id. 98 And we call this one as identity. 99 And this is like 100 a tea has a unique blend. 101 And again, this is a bit 102 of a vague example, but you 103 will get this in a minute. 104 So we have this identity, Every 105 object have this unique identity. 106 And I will walk you through how 107 to find out that every object will 108 also have a unique type as well. 109 What do you mean by unique type? 110 The type simply means just like 111 in the T, we have the black T, we 112 have green T, we have herbal T. 113 So every object will have 114 its own type as well. 115 And further, each of the object 116 will have some of the value. 117 For example, like 2, 118 maybe hitesh, maybe chai code. 119 Each object will have the value 120 and we will see them, 121 don't you worry on that part. 122 So we're going to see that we 123 do have this object with us. 124 And once we have this object, 125 we are going to see that. 126 All right, so we have this 127 identity types and everything 128 they are associated with that. 129 Let's put them in the nice 130 diagram so that we actually enjoy 131 learning part of it as well. 132 And let me go ahead and grab this. 133 So whenever object comes 134 to your mind, make sure object will 135 have an identity, make sure 136 the object will have a type 137 and make sure the object actually 138 represents all the values. 139 The value could be empty, 140 that is also a part of this. 141 But we'll actually go 142 ahead and visualize this. 143 Now there's another 144 minor concept that we are going 145 to go through about this is 146 mutable, and image mutable. 147 This is really 148 an interesting concept. 149 Mutable simply means, 150 that is changeable. 151 And this is the concept where 152 a lot of people get it 153 absolutely wrong about 154 the mutability and immutability. 155 So the word mutable means that this 156 thing can be changed and then there 157 is immutable that is not changeable. 158 So always keep that in mind. 159 This is the easiest example. 160 So immutable means no, I cannot 161 go ahead and change this. 162 We will see an example. 163 And this actually ID helps us. 164 This identity helps us 165 to figure out whether it's actually 166 changeable or it's not changeable. 167 Never ever go through with the value. 168 If you go ahead and have this, 169 confirmation about whether it's 170 mutable or immutable with the value, 171 then that is the wrong way. 172 Never do it like this. 173 So this is where I would love 174 to write as no, 175 never check it with the value. 176 This is not a good idea. 177 Never check it with a value. 178 Same goes for here. 179 If you're checking whether 180 it's changeable or not 181 changeable with the value. 182 Nope, that's always a bad idea. 183 If you want to check it 184 with the identity. 185 Yes, that is how we do it. 186 If the identity is same, that means 187 hey, value didn't got changed. 188 If the identity is different, 189 hey, value got changed. 190 So this yes part is all up here. 191 Let me go ahead and put some 192 diagrams or some boxes around it 193 to make it look nice. 194 There we go. 195 All right, makes sense. 196 Looks good. 197 Okay, time for some practical 198 to understand this. 199 Just to summarize this again. 200 Each object has some identity, 201 some type and some value. 202 And objects can also be 203 mutable or immutable. 204 Mutable means this is changeable. 205 Immutable means this 206 is not changeable. 207 And we always validate that through 208 the identity, not through the value. 209 A lot of beginners who get started 210 in the world of Python 211 always look for it with the value, 212 which is a wrong indicator. 213 Please make sure you 214 don't do the mistake. 215 You will not do that mistake 216 because I am here with you. 217 Let's go ahead and create 218 a new folder. 219 Let's call this1 as 02 underscore. 220 This is data types. 221 All right. 222 We will also open this up 223 in the integrated terminal so 224 that we can actually work 225 on it easily and nicely. 226 I will go ahead and create a new 227 file and we're going to call this 228 one as chapter one dot P Y. 229 We can use chapter underscore one. 230 That will be good dot P Y. 231 Now how do we go with that? 232 First of all, we can name 233 anything as variable. 234 So let's just say, for example, you 235 want to get a sugar amount, how much 236 sugar you want to have in the cup. 237 Maybe you want to have two cups 238 or two spoons of the sugar. 239 I really don't judge you based 240 on if you want to have 2 tablespoon 241 or teaspoon, whatever you like. 242 Now first of all, let's see how we 243 can actually print this value. 244 This is something which 245 is stored in memory. 246 And I will depict you 247 with the diagram as well. 248 We use a keyword F. 249 Then we can use double quotes 250 to put up the string. 251 And then we can use something like 252 initial sugarsugar 253 and then put up a column, then use 254 the curly braces and yes, 255 they come always in the pair. 256 Now here I can actually go ahead 257 and inject the variable to actually 258 go ahead and print this out. 259 This is it. 260 We have written our first program 261 where we have a variable and we 262 are trying to print that 263 variable along with a, string. 264 First let's see the output of it. 265 Then we'll actually draw some 266 diagrams to understand this. 267 So all to run for this or 268 to make sure that this runs, I have 269 to say Python 3, please run a file 270 known as chapter1py. 271 Make sure the path 272 is correct for you. 273 I have opened the integrated 274 terminal just right here. 275 So it says initial sugar 2. 276 If I change this from 2 to 12 again. 277 Now the program actually says 12. 278 So let's see what is happening here 279 with the help of diagram. 280 So this is your computer memory 281 and in this memory you say 282 that, hey, I want to store 283 this value 2 or 12, 2 would be 284 good 2 inside my memory. 285 So you said, okay, so the memory 286 is going to create a number two 287 for you just like this. 288 I'll make this a little 289 bit bigger one. 290 And now how do you actually 291 call this memory? 292 So to call this memory you 293 actually created a variable 294 known as sugar amount. 295 And then you actually said that, hey, 296 in order to point to this memory 297 I will just go ahead and use this. 298 And through this I will go ahead 299 and point out this part here. 300 Again, super simple. 301 You have this one here, pretty nice. 302 I'll just go ahead and remove this, 303 draw it again, let's use the arrow. 304 There we go. 305 So this is what exactly happened. 306 Now, interestingly, what I want 307 to show you about the mutable 308 and immutable part, which most 309 people goes absolutely wrong. 310 When I go ahead and say sugar 311 amount is going to equal to, 312 let's just say 12 this time. 313 And I actually go ahead 314 and use the same thing again. 315 Let's go up here. 316 So we are printing sugar. 317 So what do you think 318 should have happened here? 319 The sugar amount was 2 320 and sugar amount is 12. 321 And now if I try to print it and 322 we'll call this one as second, 323 easier to find it out which one 324 is what if I go ahead and run 325 this, we can say initial sugar 326 is 2 and second initial sugar is 327 12. 328 Now here's the interesting part. 329 Now this thing is 330 here what we have done. 331 The numbers 332 are considered as immutable. 333 They do not change. 334 But again, the point is, hey, 335 Hitesh, this just changed here. 336 We initially were 337 having the value of 2. 338 Now we have a value of 12. 339 So it definitely changed. 340 How can you say that? 341 This is immutable. 342 This cannot be changed. 343 This is where a lot of people 344 make it absolutely wrong 345 in the Python, as I mentioned, you 346 never check it with the value. 347 The value definitely of the sugar 348 amount is getting changed. 349 But behind the scene, this number 350 itself is actually immutable. 351 This never changed. 352 What Python did behind the scene for 353 you is it took this number and it 354 actually created a new number. 355 This time it says, hey, you want 12? 356 Okay, we'll give you 12. 357 So a new number was created 358 for you, and this time instead 359 of pointing to the two, you 360 are pointing actually to 12. 361 Yeah, this is a little bit 362 of an interesting aspect of 363 how Python actually works. 364 So instead this time we simply 365 go ahead and say that, hey, we 366 are pointing to 12, not two. 367 This two is still here. 368 This is immutable, 369 you cannot change it. 370 What you're changing 371 now is reference. 372 Always remember what we are changing. 373 What seems to be changing 374 in the world of mutable 375 is the reference. 376 So you are changing the reference. 377 You are not changing the actual 378 value itself. 379 I'll show you that. 380 Yes, some of these 381 values do get changed. 382 You might be asking, 383 what's the proof of it? 384 Yeah, that's a good question. 385 As I mentioned, always check 386 for identity, never for the value. 387 Yeah, our value got changed. 388 But I asked you, hey, not 389 to track with the values. 390 There's a big no here. 391 Now, what I want to do is change 392 or track based on identity. 393 So how can we find 394 the identity of it? 395 It's actually super easy. 396 All we got to do is print. 397 And for any of the ID you want 398 to check, let's 399 just say we will use F strings. 400 Again, these are formatted strings. 401 So I will just say ID of 402 2 and then I want to print an ID. 403 So I'll just go ahead and say 404 that, hey, use curly braces. 405 Inside the curly braces you have 406 a keyword ID to find ID of anything. 407 I want to find an ID of 2, 408 and similarly I want to 409 find the ID of, 12 also. 410 So let's just say 12. 411 And what you're going to notice, 412 the ID of 2 is always same 413 in your program, but what's 414 being changed is this ID of 12. 415 Let's go ahead and run this program 416 to understand it better. 417 So you will notice you get a unique 418 ID here, and you get a unique ID 419 of this one is actually 12. 420 We just missed one here. 421 12. 422 Let's run this again. 423 And what we see is this one 424 is different for your program, 425 and this one is totally 426 different in your program. 427 This is 680 at the end, 428 this is 3, 60 at the end. 429 And this is the most important part 430 because you have 431 created a new reference. 432 It's just the variable which is 433 behind the scene pointing 434 to a different memory location. 435 And that's the magic. 436 That's the part which a lot 437 of people don't understand 438 about mutable and immutable. 439 So summarizing this, 440 mutable means that's changeable. 441 Immutable means this 442 cannot be changed. 443 Never reference them by the value. 444 Always check the mutability 445 and immutability 446 via the identity itself. 447 A pretty interesting 448 concept, isn't it? 449 So that's really nice. 450 You might be wondering, hey, can 451 we get some of the examples, 452 of the things which are mutable 453 that really do get changed? 454 Yes, of course, why not? 455 You ask for it, I will deliver it. 456 Let's just call this one as, 457 chapter two PY and let's write 458 some of the code which is 459 mutable, which is changeable. 460 So I'll just go ahead and say I want 461 to have a spice mix and which is 462 going to be represented by set. 463 Set is also a data type 464 which represents a collection 465 of the things. 466 So so far we have been doing 467 and checking just the numbers. 468 Numbers are individual, but, 469 but let's just say you want 470 to collect a whole lot of numbers 471 or whole lot of other 472 things, maybe collection 473 of strings, collection of names. 474 So for that set is used, 475 we will learn a lot 476 of these different types. 477 So let's just say I want 478 to print and I will go ahead 479 and say, initial spice mix. 480 What does it mean? 481 So I'll just go ahead and say initial 482 spice mix id, just like that. 483 And we're going to go ahead 484 and say use curly braces. 485 Then we'll use again the ID 486 and we're going to go ahead and say 487 give me the ID of spice mix 488 so that I can see whether it's 489 changing or not changing. 490 This is mutable, this 491 is supposed to change. 492 So now if I go ahead and say, hey, 493 spice mix, I want to add tolu. 494 Python is all about if you can 495 read English, you can read this. 496 So let's just say my favorite one, 497 I want to add ginger for it. 498 So we have added ginger 499 and we're going to use one more 500 probably cardamom. 501 Cardamom. 502 There we go. 503 So we have added two values 504 in it and now we would look 505 to see that whether the ID 506 has been changed or not. 507 So I'll just use this one 508 and I'll just Move it. 509 And by the way, I love 510 keyboard shortcuts. 511 I have spent a good amount of time in 512 VS code, so I know the shortcuts of. 513 If you want to know about this one, 514 let me just show you because I'm 515 pretty sure you'll be asking if 516 you want to duplicate any line, 517 you can just press shift and 518 option key on or the alt key on 519 your keyboard and it actually 520 duplicates that. 521 And that's how I duplicate that. 522 And if you want to have it duplicate 523 and then want to move any line, 524 just press the alt key or the option 525 key and then it moves up here. 526 So that's how I actually run 527 fast in the VS code. 528 Again, super fun to have it. 529 So let's just say initial Spice Mix 530 and then we are going to go ahead 531 and say after Spice Mix, let's see 532 whether the ID gets changed or not. 533 This. 534 So we're going to go 535 ahead and say Python 3. 536 Please go ahead and run 537 chapter two this time. 538 And there we go. 539 So we can see this ID. 540 Actually we can see this. 541 This is 944. 542 This is 944. 543 So there we go. 544 We can see this. 545 This is mutable. 546 This is changing. 547 So if I print out what is inside 548 the spice mix, before that. 549 Yes, definitely we 550 have added something. 551 But again this always is. 552 This is mutable part. 553 All right, I hope you got this. 554 And yes, I do understand this 555 confusion here that hey, this 556 value didn't change up here. 557 So how you're calling this 558 as mutable, immutable 559 and all of these things. 560 Let me get you back onto 561 the board because I know this 562 requires more explanation. 563 So we get this set here. 564 So this is how the set looks like. 565 Let's also print the set as well. 566 That how does the set 567 actually looks like. 568 So we're going to go ahead and say, 569 instead of putting up the id, 570 we'll just go ahead and just 571 print the spice mix so that, you 572 know, how does it look like? 573 And after printing this, 574 we will also print this. 575 All right, so this is 576 the initial ID that we have. 577 Initially the set was empty 578 and then we actually were able 579 to add values into this 580 and still we get the exact same id. 581 So the whole concept. 582 Let me just write this here. 583 So the whole concept of mutable 584 and immutable is what value can 585 I change and what values I cannot 586 change in the memory itself. 587 So when I said the numbers are 588 immutable, this simply means 589 that I cannot change this number's 590 existence in the memory. 591 This will always remain like 592 That I can change the reference 593 where I'm pointing, but nothing 594 can actually be changed. 595 This is known as immutable. 596 I cannot change it. 597 But when I went into the spice mix, 598 I was able to constantly 599 add more spices into this. 600 Notice here. 601 First we added ginger, 602 then we add cardamom. 603 So I am just always pointing this 604 so the same object can be changed. 605 I can just go up, come up here 606 and can say, hey, instead of 607 cardamom, I'll probably add a lemon. 608 And that is totally fine. 609 I can mutate it. 610 It is mutable. 611 So if I run this again, 612 yes, I'm able to mutate this thing. 613 I'm able to change this thing still. 614 The ID remains exactly same. 615 And that's the whole concept 616 behind mutable and immutable. 617 You change it or you don't 618 change it in the memory. 619 And again, this is the whole point. 620 So I hope now it makes it 621 absolutely clear that numbers, 622 they are immutable. 623 We cannot change them. 624 The reference can be changed, 625 but they always remain same. 626 While on the other hand, the things 627 like set, they are mutable, 628 they can be changed in the memory. 629 You can always point 630 to the same thing. 631 You actually always points 632 to the same thing. 633 So I hope this gets you now the clear 634 about the confusion 635 of mutable, immutable, what it's 636 like, because this is the core 637 foundation in the whole object. 638 Rest of the things 639 are super easy to work on with. 640 I hope these diagrams helps you 641 to actually clear, up the confusion. 642 And if you enjoyed this lecture, 643 please don't forget to rate us. 644 We really need that. 645 We really work hard for this. 646 And even your smallest rating 647 can help us in boosting our 648 emotions and morale. 649 Let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "01 Objects - Mutable and Immutable in python.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/01 Objects - Mutable and Immutable in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.03209474,
      -0.0114492,
      0.027111173,
      -0.055116437,
      -0.015659355,
      0.0059300554,
      0.014836235,
      0.026148906,
      0.009302347,
      0.0056983633,
      -0.017761162,
      0.009334295,
      0.017111879,
      0.026152354,
      0.13036896,
      -0.0061482047,
      -0.021072201,
      -0.010497723,
      0.0046013515,
      -0.023083689,
      0.000024373247,
      0.003528434,
      -0.008546197,
      -0.008405439,
      -0.00038557782,
      -0.007069387,
      0.0031143972,
      0.0057549896,
      0.03083105,
      -0.016704889,
      -0.016163709,
      -0.0032071325,
      0.013443505,
      0.021648293,
      0.0033025844,
      0.0015744035,
      0.0040202495,
      -0.0074026985,
      -0.026617128,
      0.0084707765,
      -0.017769761,
      0.00065115915,
      0.00558238,
      -0.013473038,
      0.025571683,
      -0.015811494,
      0.00018407813,
      -0.0047209817,
      0.008211055,
      0.010388595,
      -0.019739226,
      0.002685126,
      -0.0075570727,
      -0.1877611,
      0.023810579,
      -0.008162412,
      -0.009065204,
      0.012894033,
      -0.0082000755,
      0.0076431395,
      -0.01624,
      0.0060821637,
      -0.029505046,
      0.0012794844,
      0.0043187486,
      -0.002558453,
      0.011917916,
      -0.0013968563,
      0.0075062867,
      -0.0017187153,
      0.024109798,
      -0.00394007,
      -0.025577277,
      -0.03256257,
      -0.0267795,
      -0.03889034,
      0.012496552,
      -0.013866589,
      0.0062148683,
      0.023195764,
      -0.024320116,
      -0.00094700296,
      -0.009913739,
      0.0030986047,
      0.026586853,
      -0.0026618568,
      -0.023479668,
      -0.004880109,
      0.0054651625,
      -0.013405103,
      -0.006922803,
      -0.0083226515,
      0.017763756,
      0.0033546512,
      0.0034861628,
      0.003765242,
      -0.043017473,
      0.0034115603,
      -0.024791738,
      0.0056166393,
      0.023219978,
      -0.022005267,
      -0.033586383,
      -0.009830107,
      0.0056471545,
      0.000107887776,
      -0.0022594864,
      -0.016909435,
      -0.032652427,
      0.007561917,
      0.006593898,
      -0.01358907,
      0.026523352,
      0.017562449,
      0.012277737,
      -0.17585103,
      0.011733975,
      -0.007879939,
      -0.029804217,
      0.012058734,
      -0.010471636,
      0.012601127,
      -0.005766961,
      -0.0016543714,
      -0.0023744209,
      0.004635334,
      -0.009966524,
      0.03503614,
      0.01881151,
      -0.006271294,
      -0.015421946,
      -0.00039813618,
      -0.021117082,
      0.014229506,
      0.020657014,
      -0.004266848,
      -0.03226575,
      0.0022763195,
      -0.01983241,
      0.013764543,
      0.010500239,
      0.022368923,
      -0.005139087,
      0.04204599,
      0.01038087,
      0.0049551297,
      -0.0254818,
      0.017972093,
      -0.020771772,
      -0.040629715,
      0.011401009,
      -0.006287867,
      -0.0062828893,
      0.013058249,
      0.016087236,
      -0.0147993,
      0.00039643128,
      0.010157813,
      -0.028687624,
      0.0053036534,
      -0.008889252,
      -0.005108601,
      0.008076717,
      0.007609621,
      -0.007774651,
      -0.0057168943,
      -0.014476501,
      0.0069346507,
      0.020389736,
      -0.0055780266,
      -0.013600584,
      -0.007453329,
      -0.004465495,
      0.0025835598,
      -0.01974583,
      -0.0069487663,
      0.0012325844,
      -0.0006798753,
      0.014375051,
      0.0010321325,
      0.0020197537,
      -0.005996422,
      0.00516944,
      -0.0015197088,
      0.0065868287,
      0.01197245,
      -0.003795294,
      0.016577195,
      0.008842202,
      0.022288071,
      0.0052594114,
      -0.007905821,
      0.02001717,
      0.015193432,
      0.0171299,
      -0.005390838,
      -0.011610342,
      -0.005604515,
      -0.011875821,
      0.035506014,
      0.020062324,
      -0.010708838,
      -0.010663686,
      -0.03427127,
      0.038105756,
      0.0061360644,
      0.000067257446,
      -0.013688331,
      0.0019219759,
      0.018327605,
      -0.01807026,
      -0.0053462223,
      0.013183824,
      -0.0035533956,
      0.021949878,
      -0.003977529,
      0.0258749,
      -0.014594072,
      -0.0020343068,
      -0.010276338,
      0.015114983,
      -0.0038101785,
      -0.008291052,
      0.034025766,
      0.019137729,
      -0.008620989,
      -0.011634835,
      -0.0053145066,
      -0.0062562637,
      0.010819264,
      0.005672026,
      0.007952397,
      -0.018747471,
      -0.009807724,
      0.012908825,
      -0.0077408766,
      -0.0039714323,
      0.0050133034,
      -0.004930359,
      0.0066406783,
      -0.012873191,
      -0.011747866,
      -0.0077082203,
      0.020579336,
      0.02337196,
      -0.0032550094,
      0.010055568,
      -0.0006183651,
      -0.0024059678,
      -0.00919284,
      -0.022646694,
      0.00047888685,
      0.002313621,
      -0.0007159624,
      0.0195873,
      -0.015156313,
      -0.02525844,
      0.007858612,
      0.0039068037,
      -0.023376824,
      -0.026650745,
      0.0004226758,
      0.00038407577,
      -0.00033505258,
      0.020709792,
      -0.01106121,
      0.0239083,
      0.042429034,
      -0.015218252,
      0.012145939,
      0.0153487865,
      0.0052727885,
      0.008862041,
      0.012023373,
      -0.0011129909,
      0.016712552,
      -0.090806685,
      0.0066382075,
      0.008288589,
      -0.009846871,
      -0.0039462023,
      0.005338279,
      -0.013046687,
      0.023818294,
      0.015126712,
      0.05136939,
      0.00064829696,
      -0.006710306,
      0.022934629,
      -0.0032002958,
      0.021454703,
      -0.03154515,
      -0.007045516,
      -0.014345262,
      0.006578421,
      -0.0038283868,
      0.0114350235,
      -0.008847701,
      -0.004176537,
      -0.015503169,
      0.0009470756,
      -0.008205873,
      -0.0045829215,
      0.042813677,
      0.0009103907,
      -0.00806801,
      -0.013759642,
      0.026402544,
      -0.00035448172,
      -0.009158314,
      0.01884895,
      0.00096374936,
      -0.006364481,
      0.00044473787,
      -0.02240165,
      -0.015919173,
      0.03705732,
      -0.0031881365,
      0.02916757,
      0.027894175,
      -0.0067028804,
      0.0012188145,
      0.00007512814,
      -0.007563957,
      -0.0013034228,
      0.0067964136,
      -0.017301418,
      -0.007485943,
      0.013079092,
      -0.016847758,
      -0.0002613779,
      0.014036952,
      -0.007108979,
      -0.026577584,
      0.0068736356,
      0.007560987,
      -0.01765279,
      0.016575243,
      -0.00014420389,
      -0.0041451994,
      -0.013411468,
      -0.015606016,
      0.024391338,
      0.009992791,
      0.0061106374,
      -0.0059222877,
      0.04024758,
      -0.0037631008,
      -0.018324146,
      0.0057579125,
      -0.0024532957,
      0.0029949758,
      0.003301085,
      0.015204857,
      -0.008599587,
      0.0428306,
      0.010859085,
      0.012471788,
      0.006640948,
      0.014741548,
      -0.0051375506,
      0.01963941,
      -0.0017832101,
      -0.020656712,
      -0.003504899,
      -0.019017413,
      0.0042914995,
      0.024697706,
      -0.029804243,
      0.007743131,
      -0.020770863,
      -0.004825048,
      -0.016802425,
      -0.017895136,
      -0.013458261,
      0.00095257134,
      -0.022403164,
      -0.012731212,
      -0.021467812,
      -0.00750862,
      0.008200173,
      0.016246421,
      -0.04013785,
      -0.006598845,
      -0.0011561776,
      -0.01568178,
      -0.0034779194,
      0.0057772,
      -0.012634657,
      -0.010440857,
      -0.005463273,
      0.020098679,
      -0.004740528,
      0.0042320234,
      0.031165343,
      -0.02221147,
      0.007906314,
      -0.011201043,
      0.014182678,
      0.015144876,
      -0.013284628,
      0.010710893,
      -0.011541876,
      -0.0074277027,
      -0.024085049,
      -0.030168515,
      -0.023182014,
      -0.0046657533,
      -0.022654623,
      -0.01576435,
      -0.018792724,
      -0.012348352,
      0.03906691,
      0.011099091,
      0.009594065,
      0.0076646945,
      -0.015818628,
      0.016146397,
      0.03070351,
      0.006033656,
      -0.013397415,
      0.0059389747,
      -0.0108600715,
      -0.024809206,
      0.007702579,
      -0.01001678,
      -0.03028592,
      -0.021225303,
      -0.029519103,
      -0.007083872,
      -0.025597716,
      0.0031430512,
      0.0030069677,
      -0.026654968,
      -0.025259959,
      -0.016756853,
      0.022658555,
      0.013058317,
      -0.018713528,
      0.006990136,
      0.02058075,
      0.012468906,
      0.0065427003,
      0.011858402,
      0.008754362,
      0.0013413449,
      0.0049392474,
      -0.0046725376,
      -0.034532756,
      -0.0051628943,
      0.023268806,
      0.00091221626,
      0.01849652,
      0.008449505,
      -0.008519383,
      0.026292173,
      0.010559408,
      -0.0078010084,
      -0.02945753,
      0.014940062,
      0.019700678,
      0.012843138,
      0.015807118,
      -0.004180139,
      -0.025979262,
      -0.004624916,
      0.024854718,
      -0.0020314325,
      0.0019347026,
      0.013869376,
      -0.008099796,
      0.01743279,
      -0.020368706,
      -0.0006932792,
      0.0057214717,
      0.018447032,
      -0.0010223037,
      -0.0066096,
      0.0032620826,
      -0.0011035583,
      -0.0033109784,
      -0.012287771,
      -0.029194387,
      -0.014471949,
      0.022365993,
      0.01023149,
      0.016828155,
      0.002385726,
      -0.022271363,
      0.024831522,
      0.010860032,
      0.017600214,
      0.008289089,
      -0.012885202,
      -0.01800785,
      -0.0031950795,
      0.0055420646,
      -0.022788813,
      0.0045715775,
      0.0010198386,
      0.00019290454,
      0.008406067,
      -0.0050552837,
      -0.00002476458,
      -0.027701521,
      -0.0007903697,
      0.004432738,
      0.0055170157,
      -0.026783502,
      0.0064844987,
      -0.016301343,
      -0.018952576,
      0.013821314,
      0.012957349,
      -0.01373385,
      0.013395329,
      0.005503716,
      -0.00877524,
      -0.001536105,
      0.017551666,
      -0.0028797202,
      -0.014849072,
      0.01723229,
      0.01344936,
      -0.015913326,
      -0.0010250425,
      0.013386363,
      0.01909803,
      -0.00026697727,
      -0.008754432,
      -0.023811683,
      0.021610491,
      -0.009307758,
      -0.0058204513,
      -0.010205828,
      -0.017439306,
      0.0336453,
      0.029217945,
      -0.0072266688,
      -0.0079932455,
      -0.021919392,
      0.0011184703,
      -0.016207118,
      -0.0058361543,
      0.0048091044,
      -0.12169488,
      -0.004382478,
      -0.01084717,
      0.014600429,
      0.0044408916,
      -0.0010550382,
      0.0025819864,
      -0.012686379,
      0.008715399,
      -0.020510433,
      0.019911531,
      0.008598148,
      0.006270574,
      0.007072285,
      -0.005450748,
      -0.019638997,
      0.011766332,
      0.015116218,
      0.017292421,
      -0.01161179,
      -0.014913723,
      0.00021020316,
      0.0015916718,
      0.0013798866,
      -0.028405797,
      -0.001559422,
      0.011719948,
      0.014997084,
      -0.010387934,
      -0.0038537867,
      -0.01913259,
      0.0050953366,
      -0.0050964216,
      0.010565679,
      -0.007063124,
      -0.0021139088,
      -0.02707295,
      0.00902924,
      0.008708138,
      0.015080333,
      -0.0103789205,
      -0.0067392355,
      0.017362796,
      0.022150002,
      0.00783696,
      0.026106866,
      0.03920822,
      -0.011462697,
      -0.020779064,
      0.036982466,
      -0.027484214,
      -0.014285706,
      -0.0027913305,
      -0.032804184,
      -0.0016134366,
      -0.0019626128,
      0.020115308,
      -0.010312122,
      0.0024284814,
      -0.012202132,
      -0.013015029,
      0.011630792,
      0.027450763,
      0.026059577,
      0.009932795,
      0.0059155356,
      0.03162474,
      0.0014355545,
      -0.01559468,
      -0.017870182,
      -0.0045998385,
      0.010422118,
      -0.0068346965,
      0.030462204,
      -0.01202666,
      -0.003777879,
      0.0054771854,
      0.003038814,
      -0.0062849135,
      0.004338,
      -0.02595004,
      -0.001933375,
      -0.06810193,
      -0.041012533,
      0.028498113,
      0.009287033,
      0.018851656,
      0.021124799,
      -0.01039981,
      -0.0066123474,
      0.0030829078,
      -0.013187182,
      -0.020063374,
      -0.016602414,
      0.006543561,
      -0.0066329283,
      -0.029672733,
      -0.00023127634,
      -0.0077274465,
      -0.018888451,
      -0.009314162,
      0.0002233462,
      -0.010002763,
      0.013266704,
      -0.0038392858,
      -0.029899705,
      0.019058384,
      0.029026803,
      0.009003803,
      0.0082684,
      0.010197947,
      0.005506458,
      -0.008701154,
      -0.13484438,
      -0.0059196963,
      0.010115712,
      0.00011855887,
      -0.0026879276,
      -0.020886563,
      -0.001436197,
      -0.018455615,
      0.014648766,
      -0.003805788,
      -0.0023919134,
      -0.005388675,
      -0.013717007,
      -0.0009929227,
      0.03385842,
      0.13750805,
      0.00684157,
      -0.0036049713,
      -0.02640454,
      -0.004474045,
      -0.018138465,
      -0.029182903,
      -0.009927254,
      0.005969125,
      -0.012088991,
      -0.01033555,
      0.0013441055,
      0.00009616379,
      0.0017792133,
      -0.017328164,
      0.00617772,
      -0.045276426,
      0.006054144,
      0.028905526,
      -0.0048710755,
      0.00476795,
      -0.0010466637,
      -0.012634214,
      0.0022288593,
      0.0041827303,
      0.022722995,
      0.0012258467,
      -0.004029156,
      0.0057502594,
      0.0073034186,
      -0.007014115,
      0.0061078076,
      -0.007834616,
      -0.023933727,
      -0.0056096804,
      0.019049479,
      -0.04683678,
      -0.0017672179,
      -0.007619561,
      -0.0036501538,
      -0.005982571,
      0.0033219198,
      0.017828187,
      0.011460488,
      0.005726853,
      -0.022142718,
      -0.00253435,
      0.003400645,
      0.013719746,
      -0.00069672026,
      -0.017936012,
      0.03340889,
      0.0096421465,
      0.009962462,
      0.0042254175,
      0.01305017,
      0.024948243,
      -0.009902077,
      -0.0069287806,
      -0.016712835,
      -0.009665356,
      -0.027138235,
      0.0057291677,
      0.00094045966,
      -0.010205573,
      -0.019125754,
      -0.0034161098,
      -0.012729174,
      -0.010869416,
      0.005099181,
      0.011564776,
      -0.009359002,
      0.02500145,
      0.017091768,
      -0.0037918028,
      0.017302267,
      0.016881438,
      0.0009324963,
      0.013296666,
      0.000015614394,
      0.01729923,
      0.04085685,
      -0.03182332,
      0.030777484,
      0.0081284745,
      0.0012271068,
      -0.007009497,
      -0.02563081,
      -0.013599034,
      0.026609289,
      -0.001336253,
      -0.0074599506,
      0.003215237,
      0.010889071,
      0.0023223895
    ]
  },
  {
    "id": "genai_cohort_python_02_Numbers_in_depth_in_python_with_logical_operations_vtt_chunk_0",
    "content": "Hey there and welcome 2 to another video. 3 So in this video we're going to go 4 through with another search topic. 5 Let's go ahead and draw the. 6 These are the blackboards 7 which I absolutely love. 8 They are super easy to teach. 9 So we're going to go 10 ahead and discuss about 11 numbers in this one. 12 Numbers are pretty interesting and we 13 do have limited type of numbers in 14 every programming concept in itself. 15 So the first number that we're going 16 to talk about are numbers, numbers 17 in general, but we do have a special 18 name that how we represent them. 19 They're called as integers. 20 And throughout the entire programming 21 course you're going to realize 22 that programmers actually love 23 to call things with a fancy names. 24 Integer is among one of them. 25 Now apart from integer, we 26 also will love to see about 27 another type of numbers that 28 we use known as Booleans. 29 These are true false value and they 30 are used quite a lot in figuring it 31 out, what to do, what not to do. 32 They just have two 33 values, true and false. 34 We'll actually see 35 the practical aspect of it. 36 Apart from this we also have 37 another one which is a real number. 38 So you might be wondering, hey, every 39 number is real, which one is fake? 40 By real number they actually want 41 to represent about the precision. 42 So these are floating point 43 numbers, also known as sometimes 44 and they simply represent 45 everything which is decimal. 46 So where the decimal is important 47 like stock price or rupees 48 or maybe temperature, where 49 the decimal is of super importance, 50 that's called as real number. 51 Yeah, programming people 52 love to deal with that. 53 Then since Python is very 54 friendly with scientists, 55 mathematicians, they also 56 support the concept of complex 57 numbers in which one part is 58 real, the another part is 59 fictitious the iota values. 60 We won't be going too much into 61 depth of it but still just want 62 to mention that complex number 63 do exist and they look something 64 like this like 2 plus 3J. 65 It's not really J, it's 66 iotas and all of that. 67 I don't want you to go in too much 68 depth of it but yes they do actually 69 exist in Python, only restricted 70 for very very rare use case. 71 We won't be probably going with that. 72 So we have integer, we have Boolean, 73 we have these real numbers 74 or floating point number 75 and we do have complex numbers. 76 So these are types of numbers 77 that we have and yes they do 78 each one of them have their own 79 fancy names so we actually 80 represent them just like this. 81 Super easy to have the diagrams 82 for each one of them 83 but where they shine actually 84 really is the code part. 85 So I will walk you through 86 with the code of it. 87 And yes, we'll be writing a lot 88 of it, but, it will be super easy. 89 So let's go ahead and close all 90 of this and let's go ahead 91 and move on to chapter three. 92 Chapter three py. 93 Let's write a lot of code 94 to understand what it means 95 by each one of them. 96 First of all, we are going to press 97 control slash or command slash. 98 This gives you a pound 99 sign automatically. 100 This means we can 101 actually comment things. 102 This will not be executed. 103 So these are comments, everybody 104 use them for notes, for mentioning 105 what you're doing in the code, or 106 to strategize write algorithms. 107 A lot of things. 108 It's like your rough part of 109 the code where it doesn't execute. 110 It's just a rough section that 111 you can write whatever you like. 112 So let's go ahead and start. 113 So let's just say I want 114 to create a variable also known 115 as reference in the memory. 116 So this is my, black table grams. 117 So how many grams 118 of the black T you want to have? 119 Let's just say I want to have a 14. 120 That means 14 grams. 121 And then we're going to go ahead 122 and say I want to have, ginger. 123 If I can write that. 124 Ginger grams. 125 How much ginger T you want? 126 Maybe you want three grams. 127 I know. 128 And now you want to add all of this. 129 This is super easy. 130 You can just go ahead and say 131 I want to grab total 132 grams, which is super easy. 133 Now that you have a reference 134 in the memory, you can just say 135 black teak in the grams and go 136 ahead and add ginger grams. 137 And that's it. 138 Now you have the total gram. 139 Super easy. 140 I can just go ahead and say print 141 a simple string in which we say 142 total grams of base tea is, 143 and then use this curly braces. 144 And then you can 145 inject variable here. 146 So we'll just go ahead and say 147 total grams and that's it. 148 So this is the basics 149 of how it actually works. 150 And maybe you want 151 to do more calculation. 152 For example, you want to go ahead 153 and calculate remaining, T. 154 So that can be easily calculated by 155 saying that, hey, black T in grams. 156 And we're going to subtract 157 it with, ginger grams. 158 And that's it. 159 We have got this one. 160 So we can actually use the same 161 line to represent that. 162 And we're going to say total 163 grams of remaining tea is. 164 Now don't go too much in. 165 What does it make sense or not? 166 That doesn't really matter here. 167 This is all what we have. 168 So just like this, 169 we can do addition. 170 Similarly you can do multiplication, 171 whatever you wish. 172 You can actually go 173 ahead and do that. 174 By the way, the sign 175 of multiplication is this asterisk 176 and you can multiply the things 177 however you like. 178 Whatever you like. 179 Super easy to work on 180 with nothing complex. 181 Python is one of the easiest 182 language now where it 183 actually shines a little bit. 184 And by the way, if you are big fan 185 of running everything, yes, we 186 can do that part, no worries. 187 We can simply go ahead and say 188 run the chapter three 189 and oops, forgot the extension. 190 There we go. 191 We have 17, we have 11. 192 No big deal. 193 14 plus 3, 17 minus that. 194 You get the idea. 195 It's super easy. 196 Now where Python actually 197 shines is the true division. 198 The division is actually a little 199 bit complex in the world of Python. 200 For example, if I just go ahead 201 and say we have milk liters, 202 let's just say we have 7 liters 203 of milk and we are servings. 204 Serving is 4 liter. 205 I don't know how we are serving, 206 but we are somehow doing a, serving 207 of four liters of milk. 208 So I will go ahead and say milk per 209 serving and I want to find out that 210 in order to find out that the 211 obvious answer is, you go ahead and 212 take the milk liter, you go ahead 213 and divide it by the servings and 214 you get this. 215 So super easy. 216 And I'll just go ahead and say 217 print again with a formatted string 218 and we're going to say milk per 219 serving is use the curly braces 220 and we'll say milk per serving. 221 That's it. 222 This is interesting. 223 We want to see the output 224 of it because this one will 225 be little bit interesting. 226 So we see that the milk 227 serving is 1.75 exactly 228 the way we want it to be. 229 But sometimes you want 230 not to be that exact. 231 So I'll give you another example. 232 Let's just say we have, total teabag. 233 And again, make sure you also 234 develop this habit of writing a lot 235 of things in the programming. 236 A lot of people just want to copy, 237 paste, no, write it on the keyboard. 238 It will develop a good habit. 239 Let's just say you have total teabag 240 and the pots that you have are four. 241 Again exactly same. 242 But we want to now calculate 243 that how much bags per pot. 244 So we'll just say bags per 245 pots or pot will be total 246 teabags that we have. 247 And this time we want to use two 248 slashes and you will see the meaning 249 of it in just a second. 250 As I mentioned, this is investigative 251 study and we will see what happens 252 when we go ahead and do this. 253 Let's Just say we format 254 this and we're going to say whole 255 tea bags per pot. 256 Pot is going to be like this 257 and we'll say bags per pot. 258 Now, you will notice a bit 259 of a strange that this time we get 260 just 1, not the 1.75. 261 All the numbers are same. 262 So the whole point of having two 263 slashes is I really don't care 264 about what comes after the decimal. 265 I'm not worried. 266 And there are a lot of cases where 267 you're not worried about it. 268 And that's totally okay. 269 And this is how it is 270 supposed to work. 271 Not every time you should be caring 272 about after decimal in the point 273 of money, in the point of stocks. 274 Yes, I do care, but there are also 275 times when I don't care about it. 276 And there's another 277 thing which we have. 278 Let's just say we have 279 a total, cardamom. 280 Cardamom pods are 10 with us. 281 Okay. 282 And we, want to have pods 283 per cup is three. 284 Okay, now you want to find out 285 what are the leftover pods. 286 So how you'll do this? 287 So we'll just go ahead and say 288 that leftover pods. 289 How do we calculate that? 290 That's interesting. 291 I want to calculate 292 the leftover ones. 293 And it's, super easy. 294 We can just divide this. 295 So after dividing whatever 296 is the remainder, that is 297 where we are worried about. 298 We want to have 299 the remainder, the leftover. 300 So this is interesting example. 301 Let's just go see how 302 we can calculate that. 303 So we have a total cardamom pods. 304 And if I go ahead and divide it 305 by the pods per cup, I hope 306 you can see the problem here. 307 There is a problem. 308 This is not an accurate code. 309 This will not give 310 you the exact result. 311 I want to say the leftover 312 pods or cardamom pod. 313 For the cardamom, I'll just write C. 314 Leftover cardamom pods 315 are leftover pods. 316 Can you detect what's 317 the problem in this code is? 318 It's a logical error. 319 So the Leftover pods are 3.3333. 320 Is this accurate? 321 Probably not. 322 Because if we are putting up 323 three pods per cup and we have 324 total pods of 10, so technically 325 it should be just one. 326 But when we divide it, 327 it just shows that, hey, now 328 the three division, is three. 329 That is, we get. 330 So each cup gets three pods. 331 So three, three and three. 332 That we already know. 333 But this is not accurate. 334 We want to see the leftover. 335 So for the leftover, in the world 336 of Python, we use something 337 known as modulo operator or known 338 as percentage, which gives you 339 the remainder of the division. 340 So notice here the leftover part is 341 one, which is exactly what we want. 342 So pretty good and pretty nice. 343 Now one last thing. 344 Not last, but still, before we 345 go back onto the blackboard, 346 I will show you that how it 347 actually works with the scaling. 348 So let's just say we want 349 to have an exponential power. 350 Just say we have a base 351 flavor strength. 352 There we go. 353 Base flavor strength is 2. 354 And what we want to do is we want to 355 have a scale factor, scale factor. 356 And I want to scale, have 357 a scale factor of three. 358 So now the powerful flavor, 359 how much is it going to scale? 360 I know this is a very weird 361 example, but, but I couldn't 362 come up anything better. 363 So let's just say we 364 have a powerful flavor. 365 And how do we calculate 366 the powerful flavor? 367 The whole point of this example is 368 to have the base flavor 369 strength and use two asterisks. 370 This means I want exponential. 371 So this will be scale, factor. 372 This means that we will have two 373 to the power of three. 374 That means two multiplied 375 by two multiplied by two, two 376 is multiplied three times. 377 That's the whole point. 378 Yeah, and we'll just go ahead 379 and duplicate this, move it up here 380 and we will just change this one to 381 scaled flavor strength is going 382 to be this one powerful flavor. 383 Very weird example, 384 doesn't make much of the sense. 385 But you get the point if we get this. 386 So it's super easy to work on with. 387 What it does is actually 388 it's the power. 389 So we simply say two 390 multiplied by two multiplied 391 by three multiplied by two. 392 I mean if this would be 393 scale would be four. 394 So we would add just one more time. 395 So whatever the number is, this is 396 being multiplied this many times. 397 That's the power. 398 Now one last thing that I 399 would love to show you. 400 This is rarely used, but I 401 would still love to show you. 402 So let's just say you have a value 403 where you want to see and want 404 to have total tea leaves harvested. 405 This is a big number 406 that you want to have. 407 What Python does, it allows you 408 to actually separate the number. 409 Let's just say you want 410 to write billion of the leaves. 411 So you can actually go ahead 412 and write billion just like this. 413 So I can have a 30 here 414 and I can have a 30 here. 415 This improves the readability, 416 doesn't really bother. 417 It's still being treated 418 as without underscore. 419 This is a unique thing 420 about the Python. 421 Just to improve the readability. 422 I hope this gives you an idea 423 how much important is readability 424 in the world of Python. 425 And yes, it's printable, in case 426 you want to know about that. 427 So I'll just go ahead 428 and say T leaves. 429 And we'll just go ahead and say 430 total T leaves harvested. 431 And yes, it doesn't impact anything. 432 The number still comes 433 up just like this. 434 So looks little bit weird, but a lot 435 of Python people love to do it. 436 And this is it. 437 This is what we have done in Integer. 438 So this part of the integer 439 is considered as done. 440 This is all about the integer. 441 You know, how to deal with them, how 442 to work, work with them. 443 Next up, let's take 444 the boolean as well. 445 So can we take this in the same file? 446 Probably use the next one. 447 Let's go ahead with the chapter four. 448 Yeah, we're quite far here. 449 So the Boolean is 450 actually pretty easy. 451 Let's just say I want to ask 452 question that is is boiling. 453 We ask a lot of questions like this 454 is boiling, for the T boiling. 455 I can write that. 456 So the answer of the boiling is 457 either true or it can be false. 458 The first letter is capital 459 and that's it. 460 That is it. 461 You ask a lot of questions like, 462 hey, is the user logged in? 463 Is the credit card there? 464 Is he a paid user? 465 A lot of these questions have 466 just true and false answers. 467 For example, 468 is the temperature hot outside? 469 Is the temperature above 42 degrees? 470 Is the temperature below 42 degrees? 471 A lot of this and then we simply 472 go ahead and say, let's just say we, 473 have another variable, 474 the stir count is five that you 475 want to stir it five times. 476 So one more interesting thing that 477 you will find that this true 478 is actually represented as 1 479 and the false is represented as 0. 480 This is also a short notation for it. 481 And to prove that this exists, 482 I can show you this, that sometimes 483 people does this, that total 484 actions, actions can actually 485 be represented like this. 486 And we can just have a stir 487 count and we can just go ahead 488 and add is boiling to it. 489 And to your surprise, this 490 true will automatically 491 get converted into one. 492 This is known as upcasting. 493 I'll write this as well. 494 This is known as upcasting. 495 Yeah, There is a fancy word for 496 almost everything in Python and yes, 497 this is exactly how you can 498 write your notes and comments. 499 So I think the better version would 500 be just to have a pound sign or 501 a hash and a space looks good. 502 And then I can just go ahead 503 and use a printing of 504 the formatted string and I can say 505 total action or actions. 506 And that would be total actions. 507 That is it. 508 So super nice. 509 And we'll use a Python 3 510 to run a chapter four. 511 There we go. 512 So we can see the total action is six 513 five plus one, which is true. 514 So this is really nice 515 and sometimes we actually use that. 516 And you can also do one more thing. 517 Let me show you one 518 interesting aspect of it. 519 Let's just say you say that 520 whether the milk is present 521 in the shop or not, this is zero 522 and this actually represents that 523 we don't have any milk. 524 So I'll just go ahead 525 and say no milk. 526 This is a representation of it. 527 Now you can actually go ahead 528 and print it into the Boolean 529 format just like this. 530 So I'll just go ahead 531 and say formatted 532 and we'll say is there milk? 533 And I can use this one. 534 And I have a strong keyword or 535 interesting keyword known as bool. 536 This is actually a method or 537 a function and anything that has 538 a function it has two parentheses. 539 And in here I can pass 540 on the variable milk present. 541 It automatically will 542 convert zero to false. 543 Let me go ahead and try that. 544 And yes, it actually does that. 545 And let's try it for one as 546 well, because I know you 547 are wondering that as well. 548 Run this. 549 And yeah, it is true. 550 So pretty good. 551 What happens when it's not one? 552 What happens when it is 11? 553 That's a very interesting answer. 554 It is still true. 555 What happens if I just go ahead 556 and give it a name like Hitesh? 557 What happens in this case? 558 That's very interesting as well. 559 This is still true. 560 So there are only a handful of values 561 which are represented as false. 562 0 is one of them. 563 But we do have more as well. 564 Like there is a one 565 more keyword none. 566 What does this gets converted when 567 you want to convert that that 568 obviously is converted into false. 569 We will There's nothing much, 570 although you have gone through 571 with almost all of them. 572 But yes, I usually hate to actually 573 convert things like that. 574 I convert them when I'm 575 absolutely sure that this is 576 the result I'm probably get. 577 Or these are the only two option 578 which will give me the result. 579 This is really nice. 580 And since we are talking 581 about the Boolean, there's one 582 more thing which we should 583 really talk about when we are 584 talking about the Boolean, 585 which is logical operations. 586 And yeah, it's actually super easy. 587 Don't worry, don't sweat it out. 588 We'll actually cover 589 this part here as well. 590 What are these logical operation. 591 So logical operations are 592 of just majorly of 3 type 593 in the python which is and there is 594 or and there is not 595 what do you mean by all of them? 596 Simply say somebody is asking 597 you for, a T or coffee. 598 So when somebody asks you 599 for a T or coffee, you simply 600 say, hey, T or coffee. 601 You say hey, I'll pick only one. 602 And when somebody says, hey, we 603 would love to have T and biscuit, 604 and means hey, we would love 605 to have both T and biscuit. 606 That's it. 607 And not simply just 608 converts true to false. 609 False to true. 610 That's it. 611 Yeah. 612 I hope you remember 613 the examples as well. 614 So the one example that we worked 615 on is simply T or coffee. 616 So when somebody says T or coffee, 617 this likely means that we are 618 talking about the or part of it. 619 And when somebody is saying T 620 and biscuit, that means, 621 hey, both needs to be true. 622 T and cookies. 623 I like cookies. 624 So when somebody says T and cookies, 625 we'll just go ahead and say, 626 hey, this is the and part. 627 This simply means 628 any one can be true. 629 That is totally fine for our program. 630 We'll still move on. 631 This means both booth, not Booth, 632 both, Both should be true. 633 So this is the meaning of it. 634 Let's go ahead and now 635 work on with this. 636 You will see a variety of examples 637 like hey, is user logged in? 638 Is user having the card information? 639 Then only I, will allow him 640 to check out lot of such incidents. 641 In this case, since we are 642 making the T shop, let's just 643 say water hot is true 644 as well as, T added is false. 645 So what do you think should happen 646 in the variable can serve? 647 So should I be serving the T 648 when the water is hot 649 and I haven't added the T? 650 If you haven't added 651 the tea, that is not tea. 652 So I'll, just go ahead and say 653 water should be hot 654 and the T should be added. 655 Then only it makes a T. 656 So I hope you get the answer of it. 657 Pretty nice. 658 Good example this time. 659 So we'll say can serve 660 Chai will not call it tea. 661 We'll call it chai. 662 We'll use this variable 663 and we can see can serve. 664 That's it. 665 Super easy to work on 666 with can serve chai. 667 False. 668 You cannot serve it. 669 You haven't added the T. 670 And once you have added 671 the tree tea, that means 672 hey, this is all good now. 673 Now probably you should be able 674 to serve and yes, you are. 675 You can now serve this one. 676 So this is pretty nice. 677 All right, I think this 678 part is all done now. 679 The only thing that's remaining 680 for us is the real numbers or 681 the floating point numbers. 682 These are very interesting, examples. 683 We'll take them as a separate 684 example in the chapter five. 685 Let's go ahead and create this. 686 Usually people just prefer to create 687 one video for each one of them. 688 I prefer to have a bit 689 of a longer video. 690 It's okay to have longer videos 691 as long as you are enjoying. 692 So I don't find it as 693 a hesitation or a problem. 694 People get panics out when the video 695 goes about two minutes of length. 696 I don't. 697 All right, so let's just say 698 we want to have chapter five. 699 I'll rename this chapter five.py. 700 there we go. 701 All right, so what does this means? 702 Real number? 703 Real number simply means I want 704 to have precision in my program. 705 Let's just say I call this as. 706 I'll show you a very 707 interesting example. 708 So let's just say I have an ideal 709 temperature which is 95.5. 710 Of course this is all in Celsius 711 and let's just say current 712 temp and the current temperature is 713 a little bit more. 714 So we have 95 dot and we have four. 715 A lot of nines. 716 I don't know how many, 717 but a lot of them. 718 So what does this means? 719 I want to have approximation 720 and in this case I'll just go ahead 721 and say let's print all of them. 722 So print. 723 I will go ahead and say ideal temp 724 is going to be ideal temp 725 and we'll have duplicate of this. 726 This one should be current 727 temperature and we'll have another 728 one which is going to be difference 729 difference, difference temperature. 730 And for the difference temperature 731 I would say that we will take 732 the ideal temperature and we're 733 going to go ahead and subtract 734 the current temperature with it. 735 This is an interesting 736 activity to do. 737 So let's go ahead and call 738 Python, investigate this, 739 what happens when I do so. 740 And we're going to go ahead 741 and say chapter five. 742 I'm pretty sure you're also excited. 743 Hey, what is about to happen? 744 How can I go ahead and work 745 on with this? 746 Now notice you can see 747 the difference temperature is 9. 748 You didn't expected that. 749 Yeah, of course you 750 didn't expected that. 751 You expected 0.0 or something. 752 This is not exactly zero because 753 sometimes the precision are there 754 and the way how Python calculate 755 the precision is bit different. 756 This actually drastically changed 757 when I go ahead and remove 758 this much of the precision and try 759 to run this program again. 760 This time we get 0.01. 761 So this is much more 762 of an expected number. 763 So when you want to deal with 764 higher numbers there are packages, 765 as I mentioned, we borrow 766 the code from somebody else's 767 who has written the code. 768 We simply take that and work 769 on more precision. 770 Python is a very favored 771 language for scientific 772 computings and mathematician, 773 so it does that one. 774 Another interesting thing that you 775 can do is you can actually go ahead 776 and say hey, I want to use sys. 777 And then you can use floatinfo. 778 This is the package. 779 And to actually import this piece 780 of code, this is the code 781 somebody else has written. 782 It's not written by me. 783 So all you just go ahead and say 784 I want to import the sys. 785 We will learn how we 786 can actually do this. 787 This is a code we are bringing 788 in that we haven't written, 789 but Python has written it. 790 So we can actually borrow this. 791 And this gives me a float information 792 that hey, what's the float 793 information you can give me about? 794 It gives that, hey, the f",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 Numbers in depth in python with logical operations.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/02 Numbers in depth in python with logical operations.vtt",
      "type": ".vtt",
      "isChunk": true,
      "chunkIndex": 0,
      "totalChunks": 2
    },
    "embedding": [
      -0.019103916,
      -0.0149634965,
      0.035724655,
      -0.048158627,
      -0.015982226,
      0.0038016504,
      0.011218374,
      0.019336337,
      -0.0016232627,
      0.014514437,
      -0.00900455,
      -0.013969298,
      0.009421878,
      0.013081823,
      0.13471773,
      0.025950717,
      -0.00005041579,
      -0.010039121,
      0.010446388,
      -0.012439309,
      -0.011154079,
      0.0139546245,
      -0.007441767,
      0.0012994192,
      -0.013030268,
      0.0048684385,
      -0.005140715,
      0.0061234604,
      0.034855425,
      -0.027699841,
      -0.014083613,
      0.00008678496,
      0.0038524193,
      0.007841693,
      -0.008228191,
      0.015389622,
      0.009867616,
      -0.0045809946,
      -0.016124291,
      0.0320979,
      -0.017983917,
      0.005171474,
      0.0019860577,
      -0.04147961,
      0.016356615,
      -0.0024447243,
      -0.022882152,
      -0.0152376285,
      -0.0020969552,
      0.02037078,
      -0.00032283363,
      -0.012534518,
      -0.024007041,
      -0.18337375,
      0.015739854,
      -0.009111784,
      -0.0034835183,
      -0.0016224096,
      0.0002527862,
      -0.0021626116,
      -0.011792203,
      0.021788923,
      -0.045334406,
      -0.009155253,
      -0.011437197,
      -0.00947171,
      0.022120055,
      0.00911111,
      0.008749796,
      -0.013420062,
      0.027708832,
      0.016013602,
      -0.019583862,
      0.0027663948,
      -0.015153223,
      -0.026369134,
      0.013499143,
      -0.005595729,
      -0.008150853,
      0.024844665,
      -0.0041208374,
      0.0004253218,
      -0.004852738,
      -0.003678608,
      0.016806172,
      -0.006729521,
      -0.02507527,
      -0.010408569,
      -0.0038808805,
      -0.011640579,
      -0.0047925627,
      -0.0024208245,
      0.0030759785,
      0.019987347,
      -0.032503337,
      -0.0019344643,
      0.0013286235,
      -0.00738542,
      -0.02656531,
      -0.00071621133,
      0.01324708,
      -0.0010266121,
      -0.0352003,
      -0.012407967,
      -0.0039029273,
      0.009286505,
      0.010201857,
      -0.007104028,
      -0.001566045,
      0.00076792954,
      -0.01618967,
      -0.018088982,
      0.012426631,
      0.034883346,
      0.013661576,
      -0.16895773,
      0.011224973,
      -0.002318641,
      -0.017479476,
      0.0014274071,
      -0.025682457,
      0.00901217,
      -0.025733203,
      0.018355884,
      -0.0040234034,
      0.013054763,
      -0.011625302,
      0.05573208,
      0.00002683296,
      0.0045757806,
      -0.024839282,
      -0.005243549,
      -0.025142653,
      0.0009811526,
      0.016684039,
      -0.0009515207,
      -0.016038343,
      0.0010805137,
      -0.024092095,
      -0.013243611,
      -0.01595405,
      0.008200895,
      -0.006118926,
      0.040046412,
      0.015943207,
      -0.009502283,
      -0.020373726,
      0.027561579,
      -0.025396606,
      -0.030031275,
      0.015270895,
      -0.024718624,
      0.010802742,
      0.007060448,
      0.020469652,
      0.0002958634,
      -0.0028190776,
      0.032025807,
      -0.012702127,
      -0.007404564,
      -0.009776245,
      0.005804772,
      0.004512703,
      0.011545151,
      -0.024503466,
      -0.030109962,
      -0.005787341,
      0.0045537567,
      0.01349367,
      0.0033058901,
      -0.011658835,
      -0.0032819107,
      -0.016320564,
      -0.0027056898,
      -0.015792983,
      -0.0076713306,
      0.02044973,
      -0.009021174,
      0.022409756,
      0.007915343,
      -0.006740163,
      0.0019370283,
      0.016801486,
      0.0027484503,
      0.0035240622,
      0.011922962,
      -0.0010304037,
      0.009782741,
      0.020459648,
      0.01291518,
      0.00038492828,
      -0.01396062,
      0.009984075,
      0.0012572653,
      0.030533144,
      -0.026085926,
      -0.0041757477,
      0.0045022136,
      -0.0071029537,
      0.011866971,
      0.017279902,
      -0.0025875797,
      -0.0009624171,
      -0.030377485,
      0.011667634,
      -0.017558359,
      -0.0107699465,
      -0.019624922,
      0.012723084,
      0.0055571063,
      -0.0026100345,
      -0.018233057,
      0.023349816,
      -0.0026244174,
      0.021526894,
      0.00796363,
      0.030373208,
      -0.019404316,
      -0.015343991,
      -0.0010153722,
      0.021305563,
      0.0071772924,
      0.0046456293,
      0.01997948,
      0.03207789,
      -0.01959782,
      0.016309673,
      -0.0057464917,
      0.0006764422,
      -0.004158345,
      0.015589695,
      0.011013135,
      -0.004227338,
      -0.0070274207,
      0.004350669,
      -0.0017341458,
      -0.0007974462,
      0.016596153,
      -0.009588302,
      0.00029677304,
      -0.0044534155,
      -0.0066936384,
      -0.019869821,
      0.0114285145,
      0.027981492,
      -0.007196751,
      0.006354612,
      0.0048551927,
      -0.0028679154,
      -0.0035647876,
      -0.020354755,
      -0.0129771605,
      0.016624726,
      -0.018061597,
      0.013881912,
      -0.020475877,
      -0.008367082,
      -0.013606049,
      0.010328691,
      -0.002307482,
      -0.007491151,
      -0.0047492613,
      -0.011610224,
      -0.0014796976,
      0.025342217,
      -0.01997984,
      0.0063687973,
      0.019509776,
      -0.009363482,
      0.023377307,
      0.014422779,
      0.01344364,
      0.009504782,
      -0.009420222,
      -0.0165229,
      0.0039859544,
      -0.108382516,
      0.020293025,
      0.012768342,
      -0.011521487,
      0.006933162,
      0.00697439,
      -0.020595057,
      0.016372219,
      0.0035390274,
      0.017291794,
      0.006448839,
      -0.021148432,
      0.019326085,
      -0.015034507,
      0.021481931,
      -0.024020258,
      -0.01229774,
      -0.011505809,
      0.024521954,
      -0.00034739083,
      0.0026389102,
      -0.018817205,
      -0.000121136785,
      -0.003792514,
      0.0044143926,
      -0.0094192205,
      -0.000027858796,
      0.0294454,
      0.006395486,
      -0.0017103777,
      -0.013835804,
      0.025242599,
      -0.011429396,
      -0.015734319,
      -0.014008912,
      0.017382273,
      0.016503943,
      -0.0155128585,
      -0.0030219913,
      0.0024131236,
      0.01622757,
      -0.023626408,
      0.02867564,
      0.029690783,
      -0.014920654,
      -0.0030367677,
      -0.017290873,
      0.00439099,
      -0.010768325,
      -0.008567952,
      -0.03659281,
      -0.0061663496,
      0.018263474,
      -0.006840408,
      0.010192052,
      -0.008888825,
      -0.012719245,
      -0.013820556,
      0.0058518522,
      -0.0006212192,
      0.0077115237,
      0.004565925,
      0.014943733,
      -0.011829254,
      0.008332952,
      -0.004738184,
      0.01452854,
      -0.003992689,
      -0.0047161384,
      -0.0018475107,
      0.0076871943,
      0.00007056108,
      -0.009883697,
      -0.009202698,
      0.00074123614,
      0.0031687494,
      0.006033654,
      -0.0073713567,
      -0.0042511467,
      0.03569801,
      0.016478967,
      -0.017855722,
      0.011089454,
      0.0011351584,
      0.00088599586,
      0.0117605245,
      0.008376557,
      -0.013203141,
      -0.009206497,
      -0.021102846,
      0.00528928,
      0.02615339,
      -0.017099883,
      0.007526541,
      -0.024326568,
      -0.0014082433,
      -0.013231881,
      -0.0027088998,
      -0.021615729,
      0.0038716733,
      0.0012415777,
      -0.0068258834,
      -0.023579381,
      0.008822359,
      0.0045560393,
      0.0006920403,
      -0.021831848,
      -0.0194973,
      0.007850588,
      -0.014753256,
      -0.003285103,
      0.014086154,
      -0.013692795,
      0.006161912,
      -0.0039351624,
      0.010387667,
      0.0040731956,
      0.01991631,
      0.003393956,
      -0.018423218,
      0.009026492,
      -0.005443422,
      -0.014839042,
      -0.0024132957,
      -0.008637207,
      0.0033515447,
      -0.018523876,
      -0.009426105,
      -0.021659065,
      -0.042723086,
      -0.017550876,
      -0.0016827685,
      -0.0020096537,
      -0.017310856,
      -0.009057697,
      -0.0067892126,
      0.038609374,
      0.02440773,
      0.0073151737,
      0.0044663944,
      0.0066829235,
      0.006094868,
      0.011651532,
      -0.012413109,
      -0.008201311,
      0.032817766,
      -0.009206367,
      -0.0014733638,
      0.01894008,
      -0.018811863,
      -0.0279767,
      -0.011692566,
      -0.012442012,
      0.0007599197,
      -0.0037428204,
      0.0091477055,
      0.014171185,
      -0.01937617,
      -0.015587975,
      -0.0032296372,
      0.0035630446,
      0.0064269328,
      0.0004456237,
      0.013405937,
      -0.000074336844,
      0.019053306,
      0.008728081,
      0.015398583,
      0.0014952975,
      -0.013309453,
      -0.010521222,
      -0.004834464,
      -0.030266894,
      -0.015659556,
      -0.0018037776,
      -0.0026045942,
      0.0058682826,
      0.006201555,
      0.011649969,
      0.023082959,
      0.02438169,
      0.002810374,
      -0.008973732,
      0.018771308,
      0.014994917,
      0.0041268095,
      0.0338218,
      0.0005967313,
      -0.01740804,
      -0.002962894,
      0.00061600324,
      -0.0022496448,
      0.008959847,
      0.006598697,
      -0.008009687,
      0.0047637913,
      -0.02484853,
      -0.009842738,
      0.020086482,
      0.027858963,
      -0.0074647404,
      -0.023457443,
      0.014080177,
      0.0055690557,
      -0.010924092,
      -0.012360108,
      -0.017041268,
      0.005792527,
      0.012392421,
      0.01669037,
      -0.006381212,
      0.001562295,
      -0.007824024,
      0.010399732,
      0.02028151,
      0.010674982,
      -0.013912354,
      -0.006465185,
      -0.016505001,
      0.01096747,
      0.011533239,
      -0.015999477,
      0.0032939587,
      0.009941138,
      0.00920239,
      -0.0042833835,
      -0.009399195,
      0.011168028,
      -0.021209775,
      0.0139125325,
      -0.024377322,
      -0.0098197935,
      -0.0022340142,
      0.0008526165,
      -0.03208789,
      -0.015928995,
      0.009646387,
      0.005544891,
      -0.022717709,
      0.00884584,
      -0.0033627683,
      -0.017662585,
      -0.012799798,
      0.01692355,
      -0.00061569933,
      -0.01597368,
      0.004669389,
      0.0011414716,
      -0.0076623713,
      0.0057526887,
      0.0024619414,
      0.019847669,
      -0.00007781997,
      -0.022720085,
      -0.019140754,
      0.047244456,
      0.0011154494,
      -0.01034086,
      -0.009812955,
      -0.004837436,
      0.030665347,
      0.021783186,
      0.0025296647,
      0.0019548673,
      -0.006254571,
      -0.0051411036,
      -0.023144519,
      -0.016070522,
      0.004716633,
      -0.12634014,
      0.009413914,
      -0.00010860922,
      0.0052209496,
      -0.0019115177,
      -0.017888088,
      0.00961629,
      -0.022260727,
      0.0039530266,
      -0.010763433,
      0.035757065,
      -0.0008823804,
      0.000781247,
      -0.0037100194,
      0.0004504256,
      -0.019359538,
      0.026034627,
      0.009246144,
      0.019037012,
      0.010589982,
      -0.028633567,
      -0.0011463892,
      0.0044745873,
      -0.010474421,
      -0.06151934,
      -0.0037473228,
      0.009173503,
      0.006921901,
      -0.009316007,
      -0.0019711282,
      -0.015055551,
      -0.016641287,
      -0.0072064917,
      0.020213809,
      -0.00030881033,
      -0.002882278,
      -0.032316055,
      0.025445431,
      0.0007014733,
      0.0013655102,
      0.0017740814,
      -0.001037372,
      0.024135685,
      0.016147962,
      -0.0067582442,
      0.00897752,
      0.0404032,
      -0.020273224,
      -0.004974568,
      0.024485257,
      -0.04600579,
      -0.004912815,
      -0.0031008504,
      -0.014635033,
      0.0078954315,
      0.00029973872,
      0.021376835,
      -0.014114815,
      -0.00574728,
      -0.015099254,
      -0.0053576063,
      0.014053667,
      0.015313318,
      0.02623305,
      0.015801625,
      -0.0053539057,
      0.026735326,
      0.016540362,
      0.026881699,
      -0.016965304,
      0.0139589,
      -0.0008059427,
      0.013665544,
      0.010423579,
      -0.0033325332,
      -0.0066662277,
      0.0056281276,
      -0.005976356,
      -0.005622206,
      0.009018617,
      -0.04317802,
      -0.021494249,
      -0.04942039,
      -0.02370526,
      0.013813339,
      0.011345305,
      0.0033396964,
      0.017371505,
      -0.0070834104,
      0.0054134713,
      0.016389828,
      -0.011128839,
      -0.019638043,
      0.0012356284,
      0.016702276,
      -0.0028425555,
      -0.013690611,
      0.009142841,
      -0.0061138812,
      -0.0150015745,
      -0.004814305,
      0.008954476,
      -0.009324302,
      0.0031452687,
      0.012052741,
      -0.02422604,
      0.01181476,
      0.0037644457,
      -0.008089245,
      -0.0013145637,
      0.011435052,
      0.004178405,
      0.0019663996,
      -0.15796559,
      -0.0027348136,
      -0.0060899593,
      0.00087725953,
      0.011487775,
      0.012176814,
      -0.020110972,
      -0.007264765,
      0.004220111,
      -0.012690964,
      -0.012048614,
      -0.013240882,
      -0.029680956,
      -0.010052403,
      0.021939676,
      0.13943848,
      -0.0064974464,
      -0.010428654,
      -0.028130915,
      0.008140137,
      -0.015575369,
      -0.026784915,
      -0.018852882,
      0.0077156965,
      -0.010716711,
      -0.0100337295,
      0.005270758,
      0.000039511386,
      -0.006136907,
      0.0027045724,
      0.0011990553,
      -0.002867183,
      0.014611576,
      0.024312053,
      -0.011277892,
      -0.00030352265,
      -0.011547635,
      0.00723303,
      0.0008093154,
      0.011243549,
      0.011644084,
      -0.021006986,
      0.0067485203,
      -0.0046084733,
      0.012917757,
      -0.01794227,
      -0.008100374,
      -0.024652185,
      -0.004516708,
      0.010050363,
      -0.0048766234,
      -0.03910302,
      -0.0035073266,
      -0.011327464,
      -0.003982432,
      0.018669812,
      0.0016680015,
      0.01815162,
      0.0045625344,
      0.014565728,
      -0.0142047675,
      -0.0002825536,
      0.0011629262,
      0.011134162,
      0.020217752,
      -0.0067673656,
      0.034867916,
      0.008725035,
      0.024481334,
      -0.0051612253,
      0.018143494,
      0.013317824,
      -0.020657957,
      0.012301599,
      0.006815528,
      -0.02472428,
      -0.011717542,
      0.020162847,
      0.005801766,
      -0.0017328425,
      -0.012867361,
      0.009625491,
      -0.0066648535,
      -0.011801127,
      0.029540475,
      0.016913917,
      -0.014819126,
      0.0013251714,
      -0.008471539,
      -0.016282097,
      0.012668629,
      0.015054579,
      -0.0042022956,
      0.02093781,
      -0.0045792256,
      0.014154378,
      0.042952172,
      -0.022184175,
      0.044874724,
      0.00015550721,
      0.009574344,
      -0.006833169,
      -0.015793897,
      -0.022448327,
      0.0070231073,
      0.016408997,
      -0.004783511,
      0.022575721,
      0.015854292,
      0.0010610477
    ]
  },
  {
    "id": "genai_cohort_python_02_Numbers_in_depth_in_python_with_logical_operations_vtt_chunk_1",
    "content": "loat 795 information is like this, the max. 796 This is the number 797 that you can go for. 798 The maxed exponential you can go for. 799 And this actually varies 800 on system to system that how much 801 calculation you can do. 802 More ram, more memory, 803 the system float. 804 This will give you totally 805 different result in your case 806 compared to mine case. 807 So we explored pretty nice. 808 I hope you enjoyed this part as well. 809 And again we actually can have 810 a lot of things, moving on. 811 We have fractions as well, we can 812 work with the decimals as well. 813 A whole lot of things actually 814 work in the world of Python. 815 I probably don't want to go into 816 that, but can I show you a little 817 bit of this just by importing this. 818 All right, so you are going to see 819 that when you want to deal up with 820 the fractions, Python actually go 821 ahead and say that hey, from a 822 package file from known as 823 fractions, fractions, you can go 824 ahead and import fractions. 825 This is a common syntax 826 now you will be able to deal up with 827 a whole lot of fractions, 828 to the power of six and seven. 829 So six decimal point numbers, 830 you can go ahead and do that. 831 Not only this, we have whole 832 powerful decimals as well. 833 So similar to this we 834 have from decimal. 835 Yep, from decimal go 836 ahead and import decimal. 837 And we actually can actually 838 typecast them as well as D. 839 I want to call this as D. 840 Weird syntax, but they do exist. 841 I'll still show you on the Google 842 as well that hey, they do exist, 843 decimal in Python. 844 And we actually will go 845 ahead and see this. 846 Yeah this is the one 847 we have the documentation. 848 So decimal, decimal point, all 849 of this right now you don't have 850 to do much into this but yes, just 851 remember that these Things do exist 852 and they have a huge importance now. 853 You can see that they can 854 actually deal up with a huge number 855 of after decimal values. 856 Yeah, they are designed 857 just for this. 858 We won't be using them right 859 now, but it's actually important 860 that we know about them. 861 That hey, a floating send decimal. 862 They have fractions, 863 they have decimal. 864 You can consist, you can borrow 865 whenever you need more power, 866 anytime from the system. 867 But we can work with that 868 complex number. 869 We are not going to touch because 870 this is bit of out of the scope as 871 of now for this course. 872 But just to give you an idea, 873 yes, complex number do exist. 874 For the complex number, usually 875 we bring out fractions and that 876 library actually works way 877 better in that I haven't dealt 878 much with the complex numbers, 879 especially the imaginary numbers 880 usually in the university 881 scientists and all of them, they 882 work more on it. 883 I don't have much experience with it. 884 I'll be just honest 885 with you on this part. 886 But yes, they do exist. 887 All right, so quite a lot about 888 the numbers that we have dealt up. 889 I hope you have enjoyed 890 this long lecture. 891 Bit long, but very valuable. 892 We have learned so much, we 893 have written so much code. 894 Go ahead, go through with this 895 code entire part and I'm 896 pretty sure you'll love it. 897 Don't forget to rate us and let's 898 catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 Numbers in depth in python with logical operations.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/02 Numbers in depth in python with logical operations.vtt",
      "type": ".vtt",
      "isChunk": true,
      "chunkIndex": 1,
      "totalChunks": 2
    },
    "embedding": [
      -0.00532361,
      -0.02360779,
      0.016339604,
      -0.05817799,
      -0.00024029495,
      -0.0006611511,
      0.011594444,
      0.024174752,
      -0.005533719,
      -0.0075688725,
      0.0029473472,
      -0.017480498,
      0.040389266,
      0.016412307,
      0.12997203,
      0.020814383,
      -0.015447485,
      -0.01454345,
      0.010077199,
      0.0040663355,
      -0.0047018575,
      0.01082444,
      0.006831938,
      0.00028399818,
      0.0042641703,
      -0.00395836,
      -0.009379254,
      0.0039544175,
      0.031563547,
      -0.007073358,
      -0.00719486,
      0.000559949,
      0.009460836,
      0.00037806097,
      0.01001298,
      0.018438792,
      -0.0016183725,
      0.0078116152,
      -0.014123607,
      0.020211464,
      -0.02290557,
      0.002821156,
      0.0153672155,
      -0.009754915,
      0.009654831,
      -0.0059954156,
      -0.0185869,
      -0.008766217,
      0.001115662,
      0.014302091,
      0.0014951673,
      -0.0061425227,
      -0.011900478,
      -0.17252567,
      0.022015894,
      0.0020873484,
      0.010212783,
      0.014778618,
      0.016047694,
      0.013689233,
      -0.026178908,
      0.028597718,
      -0.031440794,
      0.0059764995,
      0.0066739195,
      -0.0066329427,
      0.013721882,
      0.013531476,
      -0.0039081974,
      -0.0177852,
      0.024548642,
      0.0044793324,
      -0.017832829,
      -0.00875214,
      0.00097183534,
      -0.046408255,
      0.021109503,
      -0.005003598,
      -0.01646807,
      0.023170976,
      -0.011845912,
      0.0028738484,
      0.0084018605,
      0.00020519811,
      0.0039059427,
      0.0055166376,
      -0.03134958,
      -0.0071339784,
      0.010886981,
      0.0041589965,
      -0.013691957,
      -0.0012391397,
      -0.01002285,
      0.025811113,
      -0.04258095,
      0.010008845,
      -0.0000017976985,
      -0.0051358994,
      -0.034507535,
      0.008284681,
      0.005316645,
      -0.009346703,
      -0.031789232,
      -0.0045330087,
      -0.012591824,
      0.005495615,
      -0.009638733,
      0.004772048,
      -0.007263264,
      0.0044267103,
      -0.024600487,
      -0.011601088,
      0.013869567,
      0.026008913,
      0.012892812,
      -0.17955792,
      0.023197792,
      -0.0025391483,
      -0.020369483,
      0.0033865315,
      -0.016869858,
      0.014400884,
      0.0072997524,
      0.012762121,
      -0.0059845657,
      0.011598391,
      0.0068404833,
      0.035350144,
      -0.0009338933,
      0.011207611,
      -0.0038014208,
      -0.0002673954,
      -0.014206392,
      -0.008416933,
      -0.0030433855,
      0.011352385,
      -0.01894411,
      0.017012244,
      -0.018503498,
      -0.007355655,
      -0.0053536,
      0.015285469,
      -0.004823808,
      0.03487637,
      0.0038583153,
      -0.00043867543,
      -0.021006368,
      0.018371172,
      -0.026312476,
      -0.027948044,
      0.0054545887,
      -0.016431507,
      0.03657909,
      -0.0049057826,
      0.023297135,
      -0.0093446635,
      0.0038267756,
      0.029731158,
      -0.014212585,
      0.002322189,
      -0.014651048,
      0.009220249,
      0.011148002,
      0.01869077,
      -0.0052672853,
      -0.012836139,
      -0.031333514,
      -0.004480258,
      0.020354763,
      0.016858231,
      -0.020193914,
      -0.005051579,
      -0.009234115,
      -0.00049283955,
      -0.025456693,
      -0.008353312,
      0.02191552,
      -0.002448326,
      0.0007157596,
      -0.00071157946,
      -0.0031799218,
      -0.0004939868,
      0.019398566,
      -0.0042680595,
      0.005374789,
      0.015331466,
      -0.021793146,
      0.01116997,
      0.02191716,
      0.006270619,
      -0.008847086,
      -0.013684353,
      0.0241602,
      -0.004566549,
      0.017577562,
      -0.02173731,
      0.0072814235,
      0.019128291,
      -0.023120966,
      -0.0049597304,
      0.029313471,
      0.0032210448,
      0.0035099231,
      -0.018712308,
      0.0026463156,
      0.0016184835,
      -0.0022347223,
      -0.024802173,
      0.014269141,
      0.011895683,
      -0.003473336,
      -0.016621301,
      0.015675718,
      0.0014471947,
      0.023798129,
      0.005187632,
      0.027089968,
      -0.023965454,
      -0.0029026687,
      0.013068499,
      0.0141745955,
      0.004138076,
      0.012714677,
      0.0070585306,
      0.01744546,
      -0.028808061,
      0.00919367,
      0.00068913476,
      0.0029875955,
      -0.008983828,
      0.010757626,
      0.023491882,
      -0.009535947,
      -0.009224039,
      -0.0070266663,
      -0.008238606,
      -0.007743551,
      0.00062252145,
      -0.005662744,
      0.00090247684,
      -0.004356298,
      -0.004175277,
      -0.006282411,
      0.0027694844,
      0.011743506,
      -0.009268488,
      0.008075029,
      0.0068770056,
      -0.0050439206,
      -0.018468464,
      -0.0060064164,
      -0.0012067364,
      0.0045173117,
      -0.030412871,
      0.0060439412,
      -0.008561172,
      -0.02398318,
      -0.003986216,
      -0.016396547,
      0.0008210132,
      -0.008862736,
      -0.0006831749,
      0.0021929217,
      -0.012846524,
      0.032587703,
      -0.01854493,
      0.015671588,
      0.01904364,
      -0.009700002,
      0.02975268,
      0.025950031,
      -0.0038561227,
      0.025428759,
      0.007486837,
      -0.008908292,
      0.007442213,
      -0.09873151,
      0.0073090927,
      0.0078026787,
      -0.012945191,
      0.024871998,
      0.0036620253,
      -0.01641701,
      0.019647704,
      0.0069150436,
      0.0011255064,
      0.0005053169,
      -0.020881949,
      0.008221064,
      -0.015495832,
      0.0019653519,
      -0.02457611,
      -0.0031766153,
      -0.013870987,
      0.022564156,
      -0.008151277,
      0.016481644,
      -0.017357094,
      -0.008095019,
      0.009371383,
      0.008883283,
      -0.01750627,
      -0.014438695,
      0.03806146,
      0.016314147,
      -0.012016865,
      -0.0052803517,
      0.012863876,
      -0.01559835,
      0.010054814,
      0.001156209,
      0.011876151,
      0.000044908094,
      -0.025392229,
      0.002946739,
      0.0020418055,
      0.015193688,
      -0.021089466,
      0.017211065,
      0.032808468,
      -0.0142307645,
      0.006914382,
      -0.011216539,
      -0.0033287685,
      -0.020991554,
      -0.018820256,
      -0.010107876,
      0.004492191,
      0.018024191,
      -0.010353408,
      0.013142622,
      0.0068183937,
      -0.027157035,
      -0.0028424656,
      -0.0047197603,
      0.012258292,
      0.009875666,
      0.009100049,
      -0.0060689207,
      -0.012153186,
      0.011377791,
      -0.01821184,
      0.014496102,
      -0.006537544,
      -0.017809326,
      0.010792524,
      0.010796641,
      -0.002431071,
      -0.009758467,
      -0.033302937,
      -0.0016353074,
      0.002697818,
      0.019991243,
      -0.009526622,
      0.0007651661,
      0.034501348,
      0.02666911,
      -0.007118682,
      0.013919504,
      -0.0006994993,
      0.012737806,
      -0.019282488,
      0.013194374,
      -0.0028282402,
      -0.004461067,
      -0.03642716,
      0.0017941417,
      0.016574215,
      -0.024798581,
      0.011686327,
      -0.028614582,
      0.0034740549,
      -0.015608265,
      -0.024936628,
      -0.017096004,
      -0.0048100557,
      -0.00205691,
      0.007913693,
      -0.02061117,
      0.027950661,
      -0.0064358828,
      -0.0019399263,
      -0.023992082,
      0.000021821515,
      -0.022247978,
      -0.0061271563,
      0.00075488864,
      0.006057972,
      -0.006936837,
      -0.005275009,
      -0.0032775188,
      0.033206694,
      0.01040967,
      0.019036194,
      0.0011591167,
      -0.029306287,
      0.0128992675,
      0.009549556,
      -0.0037028599,
      0.010872548,
      -0.0055652424,
      0.0039515924,
      -0.020443782,
      -0.004884269,
      -0.016517697,
      -0.026648697,
      -0.03396823,
      0.0064278124,
      -0.011445951,
      -0.027983846,
      0.009224439,
      -0.015278831,
      0.01931509,
      0.012889807,
      0.005689099,
      -0.0045309616,
      0.019093037,
      0.010719579,
      0.014238147,
      -0.013945506,
      -0.020000799,
      0.018325774,
      -0.008013372,
      -0.007473468,
      0.013995574,
      -0.0053099273,
      -0.014689773,
      0.008706686,
      -0.002709653,
      0.0025508688,
      -0.0024740216,
      0.01582035,
      0.0090851085,
      -0.012322408,
      -0.021068415,
      -0.01386404,
      -0.004611432,
      0.010997537,
      -0.027084067,
      0.0028965613,
      0.019590676,
      0.012481709,
      0.03443105,
      0.0019575995,
      -0.00007686468,
      -0.025178885,
      -0.024693405,
      -0.006387968,
      -0.02800676,
      -0.009834261,
      0.0028993918,
      -0.0038640155,
      0.017968386,
      0.00075669924,
      0.01188758,
      0.028481554,
      0.008717093,
      0.0016327105,
      -0.011140951,
      0.008307362,
      -0.0021179577,
      0.0007880785,
      0.023692805,
      0.007046293,
      -0.015989643,
      -0.00940636,
      -0.0006473799,
      -0.009600396,
      0.0056671137,
      0.015181006,
      -0.0124673415,
      0.010863818,
      -0.0038850114,
      0.0048771175,
      0.043691624,
      0.025843186,
      0.000018184412,
      -0.023201322,
      0.007867605,
      -0.005238363,
      -0.0023806156,
      0.0029369076,
      0.012515487,
      -0.005536706,
      0.008457435,
      0.007648805,
      0.0019627854,
      0.009148656,
      -0.004022704,
      0.019535884,
      0.011532217,
      0.025299963,
      -0.0045002857,
      -0.0045273905,
      -0.025645174,
      -0.00081492343,
      0.000045328776,
      -0.020727847,
      -0.0006533227,
      0.018640812,
      0.019064778,
      0.0021656768,
      -0.014201313,
      0.020409184,
      -0.004545607,
      -0.00409772,
      -0.016677301,
      -0.002901367,
      -0.010020916,
      0.013417689,
      -0.02308158,
      -0.022118283,
      -0.0072845677,
      0.03341006,
      -0.03098661,
      0.005067647,
      0.002662164,
      -0.006376462,
      -0.013982368,
      0.0060595064,
      -0.0015323776,
      -0.030326016,
      0.017491387,
      0.01801233,
      -0.005217544,
      0.0070175645,
      0.014015403,
      0.015356255,
      0.0027082583,
      0.003101958,
      -0.011088261,
      0.029995738,
      0.009540214,
      -0.0007130624,
      -0.00443212,
      -0.006027206,
      0.026737584,
      0.023358881,
      0.010751416,
      0.010271819,
      0.011235776,
      -0.013698395,
      -0.011483664,
      -0.0051571513,
      0.011915381,
      -0.13368334,
      -0.00325555,
      -0.009691061,
      0.010916707,
      -0.0040642484,
      -0.017946627,
      -0.013026306,
      -0.012083508,
      0.0024992593,
      -0.010892853,
      0.03557806,
      0.0025759689,
      0.013266996,
      0.0028088589,
      0.010373679,
      -0.0044643483,
      0.01979523,
      0.012324051,
      0.0034319335,
      0.0003800247,
      -0.017537838,
      0.00025556242,
      0.0064587537,
      -0.015477049,
      -0.03170301,
      -0.010584046,
      0.0075604026,
      0.0012536953,
      -0.008660842,
      -0.0011134384,
      -0.036608025,
      -0.021067888,
      -0.012722466,
      0.0037563557,
      0.01461995,
      0.008302801,
      -0.030627554,
      0.015975444,
      0.007955916,
      0.013133412,
      -0.002314591,
      -0.009299876,
      0.019127576,
      0.014161969,
      -0.016193166,
      0.0037352755,
      0.038959987,
      -0.01856568,
      0.0024653927,
      0.037830357,
      -0.041599654,
      0.0048630415,
      0.0016419361,
      -0.007488482,
      0.004205163,
      -0.014062262,
      0.013066278,
      0.0034437685,
      0.0062042666,
      -0.01984193,
      -0.022165833,
      0.016555596,
      -0.018826831,
      0.017498998,
      -0.006260102,
      -0.013039419,
      0.016280524,
      0.018750247,
      0.026055977,
      -0.013546745,
      0.017319575,
      0.016708903,
      0.0049835653,
      0.018111946,
      -0.014289504,
      -0.02827469,
      0.019665023,
      -0.0014617312,
      0.0008898831,
      0.0029006477,
      -0.017629744,
      -0.0028412421,
      -0.07562234,
      -0.009042537,
      0.03542166,
      0.004258183,
      0.010243269,
      0.015771324,
      -0.011794158,
      0.011812915,
      0.030531745,
      -0.023265189,
      -0.019013656,
      -0.0032848937,
      0.010586363,
      -0.0035505102,
      -0.019035337,
      0.0071680383,
      -0.002734785,
      -0.0077043376,
      -0.0035635012,
      0.0048923767,
      -0.0042313146,
      0.015968876,
      -0.0020943235,
      -0.022341661,
      -0.012571185,
      -0.0062557682,
      -0.0061102426,
      -0.004184225,
      -0.004536673,
      0.0017714747,
      -0.0052723354,
      -0.14000209,
      -0.020178143,
      -0.0021046118,
      0.0013023107,
      0.0054851305,
      0.002270389,
      -0.0030426043,
      -0.01621944,
      -0.0043972954,
      -0.007930134,
      -0.0010614373,
      -0.01612732,
      -0.016007537,
      0.007166802,
      0.016260153,
      0.14314394,
      -0.013629103,
      -0.014882487,
      -0.027285323,
      -0.004929728,
      -0.0066847107,
      -0.03670794,
      0.001979291,
      0.025450481,
      -0.026114399,
      -0.030823564,
      0.004200347,
      -0.0102769425,
      -0.005453537,
      0.0032091325,
      -0.0013598949,
      -0.01349881,
      0.0204704,
      0.017726853,
      -0.0016654232,
      0.018588835,
      -0.013474228,
      0.0055151605,
      0.0059378077,
      0.016072001,
      0.008879973,
      0.0015662222,
      -0.008459124,
      -0.017437508,
      0.02081328,
      -0.008269327,
      -0.0083640935,
      -0.017659107,
      -0.008792558,
      -0.004879967,
      -0.02413745,
      -0.047148205,
      0.00030835354,
      -0.0053672097,
      0.008864718,
      0.013941411,
      0.0028879424,
      0.01919742,
      0.013969906,
      0.021923289,
      -0.012941603,
      -0.019127233,
      0.0004557817,
      -0.0019684772,
      -0.0025453707,
      -0.0048785824,
      0.034551326,
      -0.0060600624,
      0.033138853,
      -0.00853069,
      -0.0034188502,
      0.02340459,
      -0.014091384,
      0.0055831545,
      -0.003713094,
      -0.024199137,
      -0.0293365,
      0.01485909,
      0.010115254,
      -0.011129403,
      -0.0019296133,
      0.009858043,
      -0.016456528,
      -0.012936986,
      0.035783276,
      0.0040919436,
      -0.019903243,
      0.0056385575,
      -0.0060028555,
      0.010333951,
      0.004911575,
      0.039141804,
      -0.009732134,
      -0.0008306659,
      0.0023670055,
      0.0040934924,
      0.021952035,
      -0.014342451,
      0.047808442,
      0.007508774,
      -0.004173681,
      0.017569963,
      -0.005524904,
      -0.030677224,
      -0.0027659412,
      0.004053735,
      -0.015333999,
      0.023709277,
      0.01802435,
      -0.0027653764
    ]
  },
  {
    "id": "genai_cohort_python_03_String___index__slice_and_encoding__vtt",
    "content": "Moving ahead into the journey of our 2 Python, let's take one more topic 3 which we are going to briefly touch. 4 We will not go too much in 5 depth as of now because we are just 6 exploring the data 7 types that is known as string. 8 So anytime you see the word, 9 the string itself or the word like 10 fraction, these are treated as 11 string in the world of Python. 12 And yes, I am hundred percent 13 aware that string is 14 this much of the in depth. 15 They have a lot of methods, you can 16 do lot of things with the strings, 17 format them, uppercase 18 them, lower them, count the values, 19 manipulations, a whole lot 20 of thing exist with that. 21 But I personally think that the best 22 time to learn the string is when 23 you actually build something, do 24 some projects in it, or actually 25 have a use case of the string. 26 So what we're going to see is just 27 the basics of string, one or two 28 use cases so that we understand 29 the part of it and we'll learn 30 about a little bit of the slicing 31 of the strings, indexing as well 32 as slicing. 33 So the only two topics that we want 34 to start with is the core 35 string itself, what does it mean by 36 to have a string in itself? 37 Once we understand the core 38 of it, then we just want 39 to touch briefly about indexing. 40 So each letter in the string, 41 how does it mean and what 42 does it actually does. 43 And apart from this one final one 44 which is actually pretty interesting 45 and useful, is known as slicing. 46 So these are the only three 47 topic we are going to cover. 48 We'll go with the foundation 49 of it, the code, the indexing part 50 of it and the slicing part of it. 51 Yes, I 100% agree. 52 String deserves a lot of videos, 53 they have a lot of use case. 54 But we'll do that right now. 55 Let's just go with the basics of it. 56 All right. 57 And by the way, string is, 58 in case you haven't just figured 59 it out, it's actually 60 immutable, they cannot be changed. 61 So always remember strings 62 are actually mutable, 63 they cannot be changed. 64 So in the memory they always 65 actually create a new reference. 66 All right, so let's go 67 ahead and we still are 68 in the data types actually. 69 So let's go into the chapter six. 70 We are running with 71 a lot of chapters. 72 So chapter six py and there we go. 73 So in order to have a string, 74 let's just define a chai type. 75 The chai type is one of my favorite 76 one which is ginger, chai. 77 This is a string. 78 Anything that you see 79 in the double quote is a string. 80 That is it. 81 Nothing much, nothing less. 82 That's it. 83 And let's Just say you also are 84 having, let me just shut this down. 85 You also have a customer name. 86 Who is asking for this one? 87 Let's just say the customer 88 name is Priya. 89 So how do we do that? 90 How do we use the string? 91 Using the string is 92 actually exactly same. 93 Let's just say I want to print, 94 I want to print a formatted string. 95 So we'll just say order for. 96 Inject a variable. 97 We're going to go ahead and say 98 customer name, order for. 99 And then we are going to say chai. 100 Type please with an exclamation. 101 There we go. 102 And if I go ahead and run 103 this, the output should 104 be pretty expected. 105 Python 3 chapter 6 Py There we go. 106 Order for Priya, Ginger. 107 Chai please. 108 That is it, that is the whole string. 109 Now let me go ahead 110 and add more to this one. 111 So let's just say we want 112 to have a description for the chai. 113 How does the description 114 for chai works? 115 Let's just say we want 116 to call it as aromatic and bold. 117 This is our chai. 118 Now we want to have the first word 119 and the last word of this, string. 120 I don't know why the reason 121 for it, but we just want to grab it. 122 So how do we do this? 123 We actually go ahead and take this 124 whole string and this is where we 125 learn about the indexing part of it. 126 So, so indexing is 127 actually super easy. 128 For the indexing, I'll just go 129 ahead and say let's paste this. 130 There we go. 131 So this indexing means that 132 each letter in this string is 133 represented by a number. 134 So the 0th letter is actually 135 represented by this one. 136 So the letter numbering 137 actually starts with zero. 138 After that, if you want to have 139 the first character, then you 140 simply go ahead and say, hey, 141 this is my first character. 142 So the first character is actually R 143 and we can just keep on moving that. 144 Always remember that the letter 145 and the indexing always 146 starts in the programming, 147 especially starts from zero. 148 So if I want to get the first 149 world, this is my zeroth world. 150 So 0, 1, 2, 3, 4, 5, 6 and 7. 151 Also remember one of the thing 152 in indexing range, slicing, 153 whatever, that the last 154 number is not inclusive. 155 In the world of Python, 156 last number is not inclusive. 157 So when I say 0, 1, 2, 3, 4, 5, 6, 7. 158 So 7 is not going to be inclusive. 159 So if I just put it to 7, the C 160 is never going to be inclusive. 161 So I have to say from zero 162 to the eight so that I can get 163 the first letter and that's 164 it, that's all it takes. 165 So if I go ahead and say I want to 166 print the first number, so I'll just 167 go ahead and say first, not number. 168 First word is going to be like this. 169 So I can just take the chai 170 description and then I can 171 use the square brackets. 172 That's how you define that. 173 Okay. 174 And this has two part the start, 175 the end, and the step. 176 And the step. 177 So this is how I start from the 0th. 178 I know if I just print out the 7. 179 This is not going to be inclusive, 180 but I still want to see. 181 This is investigative study. 182 I want a proof of everything. 183 So this is what we have. 184 Aromatic. 185 We want C as well, so 186 you get the point. 187 We have aromatic as well. 188 This is what we have. 189 If I print this. 190 There we go, nice and easy. 191 There is also one more thing. 192 After the colon, you can actually 193 go ahead and put up a one here. 194 And then let's see what happens. 195 Investigation. 196 Nothing happens because one means, 197 each letter do not skip anything. 198 One simply means one character. 199 So but if I go ahead and say 200 two, that means every second 201 character, the one means 202 every character, and two means 203 every second character. 204 So what you're going to get in this 205 one is you get A, then the next 206 character, R is being skipped. 207 So every second character 208 is being skipped. 209 This one we get it. 210 But after that Is being skipped. 211 And you might be wondering 212 what's the use case of this? 213 This sounds really bad. 214 It's not usable anymore. 215 But it has its own use cases. 216 Now if I go back onto this, 217 there are some Pythonic way 218 of doing the things. 219 For example, if it is zero, 220 you can avoid this, but you cannot 221 avoid the starting colon. 222 Yeah, Python guys loves 223 to use this and show off a lot. 224 But, again, you get the point. 225 Now similar to this, if you want to 226 have the last word just like this. 227 So I can just go ahead 228 and say, hey, last. 229 And I have prepared 230 in advance, what is this? 231 So I can just say, hey, start point. 232 I will just go ahead and say 12, 233 but I don't mention the last point. 234 That means go ahead 235 at the end, whatever it takes. 236 So if I go ahead and start 237 with this, we get the bold. 238 So the 12th letter is B. 239 And after that whatever it takes. 240 So if I add more things here, so 241 for example aromatic and bold, more, 242 it will just keep 243 on going and will never stop. 244 So that's how it is done. 245 I hope you get the idea how this 246 indexing and slicing works. 247 Pretty nice and interesting, isn't 248 it? 249 Now one last thing, which is, 250 being shown off Quite a lot. 251 One more thing that you can do 252 is now that we know we have a 253 start, then a colon, then we 254 have an end, and then we have 255 a colon, and then we have a 256 step. 257 In the step, you can go 258 ahead and add minus one. 259 Yeah. 260 What's the point of this minus one? 261 The minus one is a shorthand 262 for reversing the whole string. 263 So this aromatic and this is 264 a shorthand notation for that. 265 The steps can be negative indexed. 266 And yes, in the world of Python 267 you can actually negative index. 268 So it will start 269 from the rotative way. 270 You get the idea. 271 So if I go ahead and run this 272 notice here, now it says 273 dolb, which is bold and DNA. 274 So everything goes. 275 So this is a nice trick 276 to actually reverse the string. 277 A lot of people use it 278 and they actually love 279 to use this part as well. 280 All right, so this is 281 pretty interesting. 282 One more thing I would like to 283 mention about the string which 284 we will use quite a lot and a 285 lot of time these strings, we 286 are writing all the English 287 strings, but it's not always 288 that you'll be writing English 289 scripts sometimes. 290 Maybe you want to write Hindi, 291 maybe you want to write, Tamil, 292 maybe you want to write Japanese, 293 Chinese or Mandarin, whatever. 294 The language you want to write, 295 they have own characters. 296 Like for example, in the Spanish 297 you might have seen if 298 you press A quite a lot, there 299 are tilde is over the A. 300 So if you want to use these 301 kinds of things, there is 302 a special way of do it. 303 But for example, we do 304 have a variable, let's 305 just say labeltext. 306 And this label text needs to go 307 onto a variety of places. 308 So we'll just call this one 309 as chai and let's call 310 this one E as special one. 311 So I'll just go ahead and use this e 312 and we'll just say special. 313 Now this is not an ordinary character 314 that we are working with and this 315 can actually create problem. 316 So for these kinds of things, 317 when you have these special 318 characters or special symbols, 319 we actually use encoded string. 320 So let's just call this 321 one as encoded label. 322 How do we do that? 323 We actually take the label text 324 and we have a function, we just put 325 a dot and you can see there are 326 a lot of methods in the string. 327 We can capitalize it, case, fold 328 it, center it, we can count it. 329 There are a lot of things. 330 One of the things which is important 331 for us as of now is encode and then 332 you provide the encoding for it. 333 The common encoding 334 that we use is UTF 8. 335 This is a, Way to symbolize 336 the strings in the computer format. 337 So we have UTF 8, we have UTF 16. 338 There's a lot of them right now. 339 UTF 8 will do our job. 340 Let's try to print what 341 happens in this one. 342 So when I go ahead and print this out 343 and I say encoded label, 344 and I try to print this, I want 345 to print the encoded label. 346 I also want to print the non 347 encoded one as well. 348 So I'll just go ahead and say 349 non encoded label. 350 And we'll just go 351 ahead and say label. 352 Very bad label. 353 We should actually have a label text. 354 I'll just copy this 355 and paste it everywhere so that 356 we have at least nice one. 357 All right, so once you actually 358 do this, you actually see that, 359 the encoded label looks 360 like this, which is okay. 361 This one looks okay. 362 In this case it's okay. 363 But when you actually deal up 364 with the Mandarin characters, 365 and especially Japanese characters, 366 very, very difficult. 367 And you might be wondering, hey, this 368 actually messed up all the things. 369 This is not how I want to print it. 370 But behind the scene, this one 371 has a guarantee that all 372 of your characters are truly 373 encoded and all these special 374 meanings actually carry on. 375 But in order to actually properly 376 print this up, you actually 377 don't print it like this. 378 You have to. 379 You have encoded it, 380 you will decode this. 381 So I'll just go ahead and store 382 this as decode or decoded label. 383 This time, no spelling mistake. 384 And you again use encoded label, 385 and you have a property of 386 decode, decode, and then you 387 provide the exact same encoding 388 that you have used, probably UTF 389 8, probably UTF 16, whatever you 390 are using. 391 So I'll just say that, hey, I 392 have used encoding of UTF8. 393 Now you give me this. 394 And now we can actually go ahead 395 and say instead of encoding 396 label, we'll use decoded label, 397 and we'll just go ahead 398 and change this decoded label. 399 There we go. 400 This is a proper syntax and a proper 401 way to actually take this. 402 This looks okay, at least in 403 terminal, but you will be thanking 404 me that yes, I taught you the way 405 of properly taking these 406 special symbols in the string. 407 This is rarely being taught, but I 408 have worked with one of the client 409 in Japanese and I learned 410 it through the hard way that how 411 important these conversion is. 412 Although it was a web development 413 project, but that was the lesson 414 I learned once and for all. 415 So we actually studied about 416 the indexing slicing as well as 417 we explored encoding as well. 418 How awesome that is. 419 Encoding, decoding. 420 There we go. 421 And that is it. 422 That is all that we wanted 423 to go through with a string. 424 Hope you have enjoyed this chill back 425 investigative study. 426 And that's it for this video. 427 Don't forget to rate us and let's 428 catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 String - index, slice and encoding_.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/03 String - index, slice and encoding_.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.022017082,
      0.0021893238,
      0.016728472,
      -0.053930424,
      -0.016355714,
      0.014527188,
      0.004222377,
      0.02803214,
      -0.0039132074,
      0.0039000546,
      -0.021864334,
      -0.01551057,
      0.010626661,
      0.02380488,
      0.12786439,
      -0.006385569,
      -0.023348095,
      -0.00024288757,
      0.011062121,
      -0.014449548,
      -0.0030309653,
      0.014213081,
      -0.008188305,
      -0.014024781,
      0.004042796,
      -0.0088226935,
      0.008879696,
      -0.0022713025,
      0.027905075,
      -0.019756572,
      -0.017390836,
      0.000982232,
      0.013955033,
      0.008075473,
      0.00022287945,
      0.006400188,
      0.015818626,
      -0.010713732,
      -0.025676986,
      0.013256829,
      0.0048148157,
      -0.013430061,
      -0.0029082762,
      -0.023829116,
      0.01647378,
      -0.017758368,
      0.015130267,
      -0.008404219,
      -0.0034738951,
      0.010646221,
      0.0015332409,
      -0.011862761,
      -0.014083376,
      -0.1859369,
      0.02105083,
      0.0064342273,
      -0.0030810554,
      0.0015268058,
      0.013554073,
      0.00091290515,
      -0.009374998,
      0.023698166,
      -0.020453209,
      -0.003593737,
      0.007975625,
      -0.0122188525,
      0.029892335,
      0.0076758564,
      0.0021667301,
      -0.0039021098,
      0.010817385,
      0.00089185656,
      -0.03246766,
      -0.012799094,
      -0.02193708,
      -0.039170217,
      0.020428717,
      -0.011025101,
      0.000082172766,
      0.030765826,
      0.0017615451,
      -0.018589228,
      -0.012187559,
      0.0018993892,
      0.029605169,
      0.006858414,
      -0.025688985,
      -0.00922122,
      -0.004401716,
      -0.0022087614,
      -0.024116667,
      -0.013185196,
      0.013771127,
      0.0008036617,
      -0.008250055,
      -0.00005236319,
      -0.016061923,
      0.0073955604,
      -0.011557568,
      0.0046515623,
      0.020459944,
      -0.011363098,
      -0.023554487,
      -0.010381769,
      0.009191544,
      -0.008769923,
      0.0143396,
      -0.0020773304,
      -0.012157572,
      -0.003767035,
      -0.011979464,
      0.010058276,
      0.006748064,
      0.022311669,
      0.004132504,
      -0.1666349,
      0.0065915072,
      -0.0221712,
      -0.021553578,
      -0.015752004,
      -0.021519663,
      -0.014684433,
      -0.01200148,
      0.0084347045,
      -0.013749587,
      0.0059840637,
      0.01436248,
      0.039129443,
      0.0064270482,
      0.0030157708,
      -0.018281622,
      0.010730833,
      -0.003916406,
      -0.012594788,
      -0.0028029531,
      0.009362129,
      -0.030297859,
      -0.00899892,
      -0.018801944,
      -0.0051060994,
      0.0063459543,
      0.023631327,
      -0.004213339,
      0.018469496,
      0.017068798,
      -0.0032227128,
      -0.014564409,
      0.024262143,
      -0.018920667,
      -0.028744135,
      -0.000840236,
      -0.01370031,
      0.009266194,
      -0.010759723,
      0.02498316,
      -0.013208432,
      -0.0022749784,
      0.006930466,
      -0.021455681,
      0.00867846,
      0.014637612,
      -0.0019635747,
      0.015661107,
      -0.0015929401,
      -0.012863668,
      0.0055599217,
      -0.023010923,
      0.013704768,
      0.028128903,
      -0.010165876,
      -0.000918929,
      -0.0032287051,
      -0.00801931,
      -0.0069088098,
      -0.0052059004,
      -0.0057312604,
      0.015659153,
      0.009900953,
      0.008385714,
      -0.0041513764,
      -0.0050280425,
      -0.012986313,
      0.018284712,
      0.0064080525,
      -0.00043099033,
      0.025773613,
      -0.0014471029,
      0.020804152,
      0.02812635,
      0.0038167872,
      -0.004408981,
      -0.011018369,
      0.013296794,
      0.022340214,
      -0.0055572544,
      -0.007049193,
      -0.014287403,
      0.0020152647,
      -0.006788857,
      0.008439169,
      0.005188616,
      0.002498791,
      0.0069527254,
      -0.027402282,
      0.040939834,
      -0.022543117,
      0.010709597,
      -0.027234696,
      0.0021343986,
      0.025610782,
      0.0046661864,
      -0.0060439906,
      0.00073248445,
      -0.004752724,
      0.020835767,
      0.006760604,
      0.018493319,
      0.0028460242,
      -0.007944765,
      0.0002825963,
      -0.0013746019,
      -0.011985615,
      0.01281193,
      0.02620432,
      -0.0033297478,
      -0.004414944,
      0.00399211,
      0.0040345923,
      -0.003112955,
      0.0029315928,
      0.018784948,
      0.0060264217,
      -0.023513336,
      0.012439518,
      -0.0068681682,
      -0.012918944,
      -0.0012781353,
      0.011756587,
      -0.002463808,
      0.01540688,
      0.017446922,
      -0.00363162,
      0.013235801,
      0.00151802,
      0.044067893,
      0.0067875916,
      0.0055376114,
      -0.0017719414,
      -0.007832017,
      -0.01590236,
      -0.014658232,
      -0.019329222,
      0.010285082,
      -0.003931882,
      0.022706252,
      -0.032668587,
      -0.029857459,
      -0.013798801,
      -0.017456377,
      -0.010637888,
      -0.014186001,
      -0.0030681302,
      -0.002256601,
      -0.005990887,
      0.02463969,
      0.0032627147,
      0.018050594,
      0.040504947,
      -0.010680524,
      0.009685985,
      0.026173232,
      -0.003360923,
      0.014353781,
      -0.011851886,
      -0.021940129,
      0.025070919,
      -0.11036263,
      0.01492157,
      0.011608195,
      -0.006262758,
      -0.0038704462,
      0.0050486485,
      -0.026489861,
      0.007813279,
      0.0035563197,
      0.013931362,
      0.006090771,
      -0.009283648,
      0.032437064,
      -0.01760679,
      0.0022278465,
      0.0038399436,
      -0.0002795996,
      -0.01964272,
      0.016560992,
      0.001957444,
      0.002667803,
      -0.0072058938,
      0.005405518,
      -0.023569096,
      0.019281525,
      -0.013544352,
      -0.015541772,
      0.030642584,
      0.01851153,
      -0.00510324,
      0.000030929205,
      0.027797865,
      -0.0038228873,
      -0.0092136385,
      0.0014707167,
      0.01431716,
      -0.0014228872,
      0.019990077,
      -0.00004784373,
      -0.023132792,
      0.011493937,
      -0.04570889,
      0.02744286,
      0.042212643,
      0.002759262,
      0.001636304,
      -0.009615298,
      0.0011538968,
      -0.014569398,
      0.018302402,
      -0.010966409,
      0.0017816308,
      0.004801576,
      -0.0051610684,
      0.014150833,
      0.023170102,
      -0.020623347,
      -0.03135148,
      -0.00043773724,
      0.008445468,
      -0.034074005,
      -0.0087211775,
      0.008454045,
      0.013454807,
      0.005692695,
      -0.015310699,
      0.02549808,
      0.0134376455,
      -0.01553878,
      -0.008258906,
      0.018410228,
      -0.0009942873,
      -0.0100836875,
      -0.0052849064,
      0.0052856943,
      -0.007936259,
      0.00943045,
      0.00204765,
      -0.004220375,
      0.033296842,
      0.020289514,
      -0.0047796853,
      -0.009096061,
      -0.013507062,
      0.008885564,
      -0.0011826641,
      0.01453641,
      -0.012153777,
      0.014845675,
      -0.040882833,
      0.011527406,
      0.013938309,
      -0.04709909,
      0.0069305873,
      -0.031205637,
      -0.0015626778,
      -0.0063283104,
      0.0039323997,
      -0.025122618,
      0.008313987,
      -0.025107125,
      0.0026207522,
      -0.013845498,
      0.0047956146,
      -0.002711081,
      0.0020605586,
      -0.018248376,
      -0.015291009,
      -0.003761739,
      -0.020007998,
      0.0028358737,
      0.012672937,
      -0.009041917,
      -0.008902677,
      -0.0013757269,
      0.019011833,
      0.007872535,
      0.016139736,
      0.015126075,
      -0.026252197,
      -0.0024243179,
      -0.012905983,
      -0.014576906,
      0.024623087,
      -0.0009779262,
      -0.0031578853,
      -0.020717748,
      0.0042584995,
      -0.011816985,
      -0.03101311,
      -0.015833132,
      -0.012530669,
      -0.008978101,
      -0.008855583,
      -0.017254913,
      -0.024839377,
      0.017984064,
      0.018793298,
      0.0053855833,
      0.018221559,
      0.010515047,
      -0.0053127557,
      0.0006475251,
      0.0047577713,
      -0.017206024,
      0.01309702,
      -0.011112544,
      -0.010068242,
      0.009846602,
      -0.018448368,
      -0.004141295,
      -0.032507684,
      -0.010641914,
      -0.010648414,
      -0.019802956,
      -0.005684621,
      0.0025499407,
      0.008218524,
      -0.011939398,
      -0.010481225,
      0.003752846,
      0.0008504767,
      -0.03881597,
      0.009302937,
      0.024204092,
      0.028053084,
      -0.0045196554,
      -0.018179689,
      -0.015158318,
      -0.027092816,
      -0.009813198,
      -0.019597018,
      -0.020187592,
      -0.016916595,
      0.006817941,
      -0.014316581,
      0.004483846,
      -0.0026212316,
      0.0024005445,
      0.024561262,
      0.01641703,
      0.012558866,
      -0.0062109213,
      0.011127194,
      0.0098008895,
      0.016927619,
      0.015672598,
      0.009848344,
      -0.019030798,
      -0.008230098,
      0.017269738,
      -0.003006291,
      -0.018598448,
      0.017198117,
      0.0008512753,
      0.010007765,
      -0.016594896,
      -0.003452866,
      0.00044357587,
      0.005122687,
      -0.0039766226,
      -0.0013967456,
      0.0051659327,
      0.005650505,
      0.004792052,
      -0.01906578,
      -0.020351354,
      -0.018611629,
      -0.0046679745,
      0.0086160265,
      0.014781618,
      0.0007234556,
      -0.022857366,
      0.009298794,
      0.0048121153,
      0.02452034,
      -0.011242678,
      -0.0009843727,
      -0.0061383843,
      -0.010525821,
      0.016749635,
      -0.025221862,
      -0.0007214156,
      0.0041598203,
      0.0027730635,
      -0.0043353573,
      -0.025297957,
      0.008211156,
      0.007287712,
      -0.015061952,
      -0.015290847,
      -0.020619584,
      -0.006545821,
      0.014460988,
      -0.02589938,
      -0.02270926,
      0.01482024,
      0.014719457,
      0.0038992479,
      0.019666044,
      0.021489864,
      -0.0015621278,
      -0.0078745205,
      0.007220557,
      0.017336192,
      -0.010673733,
      0.0108400015,
      -0.0004688007,
      0.0074599884,
      0.018080173,
      0.008023408,
      0.013406275,
      0.00012268013,
      -0.017411897,
      -0.013592149,
      0.021356046,
      -0.01367468,
      -0.00083164667,
      -0.02824139,
      -0.009658803,
      0.02271972,
      0.030574998,
      0.0004199057,
      -0.009641177,
      -0.024318436,
      0.0029286696,
      -0.020712087,
      -0.014896366,
      0.017662771,
      -0.11806074,
      0.0041548624,
      -0.0018518581,
      0.0040767444,
      0.009115422,
      -0.020832967,
      -0.0005624266,
      -0.027479714,
      -0.016922675,
      -0.029786563,
      0.029638357,
      0.010154314,
      0.006853777,
      0.016466212,
      0.0014847622,
      -0.0055834595,
      0.025165193,
      0.024233501,
      0.011451961,
      -0.018280078,
      -0.019583985,
      0.0070041264,
      -0.006262846,
      0.0057382253,
      -0.02192089,
      -0.018007282,
      0.0011047036,
      -0.0013628305,
      -0.015571133,
      0.009543615,
      -0.039278142,
      -0.024512783,
      -0.004412164,
      0.02922811,
      0.0152853,
      -0.012131295,
      -0.04014449,
      0.014745368,
      0.009881285,
      0.010124537,
      0.0051300223,
      -0.0019681351,
      0.009578585,
      0.01118953,
      0.010716199,
      0.019690203,
      0.035293646,
      -0.00838738,
      -0.005048094,
      0.04399221,
      -0.038664244,
      0.0049906126,
      -0.0060274266,
      -0.01898362,
      -0.00045772467,
      0.011230058,
      -0.0000076970555,
      -0.001222611,
      0.0043170527,
      -0.033304237,
      0.005436433,
      0.020604994,
      0.0062201996,
      0.030108597,
      -0.0000041242665,
      0.016975129,
      0.025498545,
      0.010989594,
      -0.015471455,
      -0.014685728,
      0.0057435352,
      0.0080056265,
      0.0070680073,
      0.00008164408,
      -0.012877866,
      0.00096246327,
      -0.0017423321,
      -0.014698271,
      0.010049533,
      0.015067487,
      -0.023687318,
      -0.00886697,
      -0.06129349,
      -0.029329563,
      0.03362107,
      -0.008730449,
      0.004553959,
      0.010101032,
      -0.013784533,
      -0.0035744128,
      0.016079918,
      -0.0056028906,
      -0.029063351,
      0.011241621,
      0.014888562,
      -0.011749047,
      -0.027413191,
      0.020851305,
      -0.019142272,
      -0.016142195,
      -0.024323046,
      0.00947516,
      -0.014857333,
      0.0011898938,
      0.0014796555,
      -0.021421403,
      0.0047594123,
      0.020666672,
      0.00517914,
      -0.001509129,
      -0.0026815243,
      -0.0004572263,
      0.009894844,
      -0.1565637,
      -0.014290438,
      0.0029699309,
      0.015948543,
      0.0064958115,
      0.009251764,
      -0.00013688243,
      -0.0027227208,
      0.0029594111,
      -0.00210027,
      0.014495786,
      -0.004202604,
      -0.032946106,
      -0.018058022,
      0.022755692,
      0.13803822,
      -0.0018152471,
      0.029356467,
      -0.026287396,
      0.014693343,
      -0.0011345338,
      -0.030085547,
      -0.0059901606,
      -0.013629159,
      -0.021584563,
      -0.004956301,
      -0.014817706,
      -0.026776634,
      0.004975839,
      -0.0013788189,
      0.0106462175,
      -0.025124494,
      0.018474694,
      0.024103798,
      -0.004502793,
      -0.005059537,
      -0.0013867605,
      0.008297601,
      -0.014060017,
      0.008067817,
      0.019475441,
      0.023301808,
      -0.0077819703,
      0.0075705177,
      -0.003112429,
      0.0021893962,
      -0.016858855,
      -0.027007168,
      -0.011598734,
      0.0186922,
      0.005607435,
      -0.036761586,
      -0.0055503994,
      -0.0075743506,
      -0.004401996,
      -0.0034609972,
      -0.0029990121,
      0.0059884735,
      0.0015511877,
      -0.004775138,
      0.012529417,
      -0.021677993,
      0.009642419,
      -0.0010469215,
      0.01277066,
      -0.009592188,
      0.028240334,
      0.0076517514,
      0.009231054,
      -0.0074139624,
      0.018293386,
      0.0052530095,
      -0.006427153,
      0.0113427965,
      0.0003157139,
      -0.0063054995,
      -0.01520998,
      0.016663633,
      0.0124206925,
      -0.011375636,
      -0.004476079,
      -0.005034694,
      0.0044798004,
      -0.011624578,
      0.01875695,
      0.013412428,
      -0.026893724,
      0.026020974,
      0.005959563,
      0.004066684,
      0.021917589,
      0.01141864,
      -0.017790837,
      -0.0061348053,
      -0.023758348,
      0.01724552,
      -0.0066587823,
      -0.0024524885,
      0.034197677,
      -0.015275114,
      -0.012637263,
      -0.010257316,
      -0.033067327,
      -0.03493443,
      0.004852441,
      -0.0019467787,
      -0.000006129785,
      0.011290213,
      0.0043179346,
      0.0109361755
    ]
  },
  {
    "id": "genai_cohort_python_04_tuples_and_membership_testing__vtt",
    "content": "Hey there everyone. 2 Hitesh here and welcome 3 to the core Python training 4 that we are going through. 5 In case you haven't yet, 6 posted a review. 7 Please do that. 8 We really need that. 9 A lot of people, sometimes try 10 to push us down and your kind words 11 in the, in the review section 12 really help us in motivating 13 and putting more content as well. 14 Anyways, let's go ahead and get 15 started with the next topic 16 in the Python, which is tuples. 17 Now there are a lot of ways, how 18 you say it out, some call it 19 as tuples, which is also good. 20 Some, some say as tuples, 21 which is also good. 22 And I still haven't made my 23 mind what to call them. 24 I usually sometimes call them 25 as tuples, but again, 26 don't judge me based on that. 27 We will just study 28 and learn about them. 29 It is actually a really fun topic. 30 You're going to 31 absolutely enjoy this. 32 And these are used quite a lot. 33 Let me take you on the screen itself 34 and this, is where we 35 are going to go with that. 36 So for this let's go ahead 37 and create a new file in itself. 38 This is going to be chapter, 39 seven, I guess. 40 Yep, pretty accurate there. 41 All right, so let me bring your 42 focus entirely on the screen itself. 43 Hope that's great. 44 Now let's go ahead and study 45 about the tuples. 46 What are tuples? 47 So just like we have been going 48 through with a lot of data types, 49 like string was one of them, 50 so now we have another one 51 of the data type which is tuples. 52 Tuples. 53 There we go. 54 That's how we say it. 55 Now tuples comes with this kind 56 of a thing, known as parenthesis. 57 And yes, in the world of programming, 58 brackets have their own importance. 59 This is known as parenthesis. 60 We do have another one which 61 we call them as brackets. 62 Yes, these square ones. 63 And we have another one 64 which is known as curly braces 65 or braces in general. 66 So yes, they have their own names, 67 parentheses, brackets and braces. 68 Anyways, we are not here 69 to talk about that. 70 This is tuple. 71 So anytime somebody says 72 tuple, that means we have 73 to use these parentheses. 74 And they have really strange way 75 of working with them. 76 They're very interesting. 77 They are immutable. 78 Yep. 79 They cannot be changed. 80 That's the only thing you 81 need to know about it. 82 All right, so let's just say we 83 are going to call this one as 84 masala spices, Quite spicy. 85 And whenever you want 86 to define tuples, just go ahead 87 and use parenthesis and I'll shut 88 up my AI agent so that we 89 can Talk about the code. 90 Not that. 91 Let's just say we want 92 to have some spices. 93 So, cardamom is going 94 to be one of them. 95 Then probably some 96 of the spices, name even you don't 97 know that is also fine. 98 We will use clove and we 99 will use, cinnamon. 100 So these are my fixed 101 ingredients, immutable. 102 They cannot be changed ever. 103 Now, sometimes you want 104 to unpack them, so 105 this is how you create them. 106 But sometimes there is an object 107 which is already being created 108 and now you want 109 to extract values out of it. 110 So, for example, all of my 111 values are in masala spices. 112 Now I want to add them 113 into variables. 114 Spice one, spice two, spice three. 115 How do we do that? 116 That's actually very 117 interesting and an easy syntax. 118 You can just use tuples again. 119 And this time I'm going to call this 120 one as spice one, and then spice 121 two and then spice three. 122 The only thing I have to be careful 123 is that I should know that what kind 124 of and what amount of values are 125 coming in, I should know the number. 126 So. 127 So that I can allocate a variable 128 for each one of them. 129 And then all I have to do is 130 simply say print and let's 131 just say go for like this. 132 And we are going to call this 133 one as main masala spices. 134 And then I can just use variables. 135 So I can just call this 136 one as spice one. 137 And then separated by comma, 138 we will have spice two. 139 Of course, separated by comma, 140 we will have the spice three. 141 And that's it. 142 Now we can run this file, clean 143 this up, and I can call my Python 144 interpreter that, hey, Python 3, 145 I want to run a file, chapter 7. 146 And there we go, we got all 147 the values being extracted, or 148 as we call them, as we call them, as 149 unpacking in the world of this. 150 Now, this is Tuple actually 151 gives you a lot of superpower 152 in the Python, especially superpower 153 like this, for example. 154 Let's just say we have 155 some special ratios. 156 We are making a good T. 157 So we have ginger ratio. 158 Ratio, as well as we have, cardamom. 159 Cardamom. 160 Yep, that's correct. 161 Cardamom ratio. 162 And we are calling this 163 ratio as two is to one. 164 So this is my ratio and I 165 call this as two is to one. 166 So yes, you can actually 167 directly have the variables. 168 So these are two variables. 169 And separated by comma, I am able 170 to allocate these variables. 171 So two will automatically go 172 to ginger, one will 173 automatically go to cardamom. 174 And I'm able to do this 175 because behind the scene, 176 this Tuple is responsible 177 for this, yes, I do agree. 178 We are not writing it in this format. 179 We are writing it directly. 180 But behind the scene, Python 181 gives me this ability is all 182 in all because of the tuples. 183 So just remember that. 184 And yes, we can actually 185 go ahead and use that. 186 There is another 187 interesting part of it. 188 First, let me go ahead 189 and print, a string here. 190 There we go. 191 And we're going to call this one 192 as ratio is for the G for ginger. 193 I hope you understand. 194 I'll write this in short, ginger. 195 And we're going to use G is 196 in this ratio, and C for cardamom 197 is going to be 198 in the ratio of cardamom ratio. 199 So we can see that we have all these 200 ratios being nicely available to us. 201 I can print this out. 202 No worries. 203 I will do that. 204 But what's really interesting now is 205 that I can actually flip the ratio. 206 I can just go ahead and call 207 this hey, ginger ratio 208 and the cardamom ratio. 209 The value of them can 210 be switched as well. 211 So first of all, I'll just 212 say cardamom ratio as well as 213 now the ginger ratio. 214 So the values, Python is really smart 215 that will automatically put 216 the cardamom ratio's value into, 217 ginger, and the ginger ratio 218 will go into the cardamom ratio. 219 This is one unique behavior 220 of Python that you can swap 221 the variables just like that. 222 Pretty interesting. 223 And now if I check the ratio 224 after this, obviously the ratio 225 will be flipped, but I'll still 226 run the program and we'll 227 show you what's happening. 228 So we can see, previously the ginger 229 ratio was two is to one, ginger 230 to cardamom, and now we have ginger 231 to cardamom ratio as 1 is to 2. 232 Pretty interesting, isn't it? 233 This is one of the really neat trick 234 that is being used quite a lot. 235 You will see this a lot. 236 That variable swiping doesn't 237 need a third variable. 238 We can just do it like that. 239 Told you. 240 Python is a language which 241 makes life lot easier. 242 Now, one more thing that I would 243 love to show you is membership. 244 Yes, you can test the membership 245 just like you test the membership, 246 in a club. 247 Just like this, we can actually do 248 print and I can say is, we have to 249 make it exactly same in the tuple. 250 So I'm calling this a, ginger ratio. 251 I have to call it exactly 252 like ginger ratio. 253 So here it's not really good. 254 This is a better tuple. 255 So let's go ahead and check this. 256 So we would love to first check 257 whether ginger is in masala spices. 258 So let's go ahead and do that. 259 So we'll say that is ginger. 260 Ginger is ginger in. 261 Come on, masala spices. 262 And then I can just use my variable 263 and then I have to mention 264 exactly what I'm asking for. 265 And this needs to be all 266 case sensitive and stuff. 267 So I'll go ahead and say ginger just 268 like this in and then name of this. 269 So masala spices again, 270 let me just expand this. 271 So remember, this is 272 the variable I'm testing for. 273 It's not a variable on 274 to say it can be a variable. 275 But this is my string that I'm 276 checking whether it is available 277 in masala spices or not. 278 So I'll just open up this 279 and show you what's going on. 280 And that's the beauty about it 281 when I don't show up myself 282 on the screen that you can 283 see and totally focus on this. 284 So, right now it's false, obviously, 285 because it doesn't exist. 286 Now let's just say if I 287 check for cinnamon, is 288 cinnamon available here? 289 So let's just check for cinnamon. 290 We'll ask the question 291 for cinnamon as well. 292 And if I run the program 293 again, this is true. 294 Now what happens if I go 295 ahead and check for a cinnamon 296 with a capital C? 297 If I try this, it is false. 298 So just wanted to show you 299 that yes, this is investigative 300 study, that it is case sensitive. 301 You need to ask that what 302 you are looking for 303 in the tuple as availability. 304 This is known as a membership 305 testing or membership test, 306 whatever you want to call it. 307 This whole thing is dependent 308 on this keyword which is in. 309 In works with the tuple. 310 And that is it. 311 That is all that I wanted 312 to teach you about the tuple. 313 Eventually you will learn more 314 about it as you will use it.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 tuples and membership testing_.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/04 tuples and membership testing_.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.016296623,
      -0.010635916,
      0.006685118,
      -0.0625286,
      -0.0073814103,
      0.0031997373,
      0.019280763,
      0.03052892,
      0.017149355,
      0.0097987605,
      -0.023505261,
      -0.0053369943,
      0.005673418,
      0.02162112,
      0.11268174,
      -0.0041343397,
      -0.02176948,
      -0.016414171,
      -0.0022404848,
      -0.0063013583,
      -0.00021479937,
      0.015551045,
      -0.008124777,
      -0.006874869,
      0.01582908,
      -0.0022117838,
      0.0051918984,
      -0.011139981,
      0.025723364,
      -0.013988739,
      -0.014119506,
      0.0063883886,
      0.00744192,
      0.022770066,
      0.013588489,
      0.009419908,
      0.0006339152,
      -0.0073029287,
      -0.030336358,
      0.010680306,
      -0.014493254,
      0.0015750661,
      0.0026441894,
      -0.00016408695,
      0.018078044,
      -0.032500446,
      0.0097014215,
      -0.013667113,
      -0.0045016906,
      0.020331003,
      0.008513498,
      -0.023482922,
      0.01036886,
      -0.18559738,
      0.009859054,
      0.012794639,
      -0.0022879494,
      0.0016265584,
      0.019272037,
      0.010076805,
      -0.02612599,
      0.005930454,
      -0.027800186,
      -0.010269375,
      0.006822782,
      -0.029831523,
      0.007503813,
      0.007173708,
      0.0058799,
      0.0073516383,
      0.03197269,
      0.01721825,
      -0.010419909,
      -0.030789863,
      -0.03086076,
      -0.023599317,
      0.010172342,
      -0.0065797293,
      -0.011343815,
      0.016661316,
      0.011523349,
      -0.028283866,
      -0.02719404,
      -0.0059397668,
      0.008888873,
      0.013348268,
      -0.018467227,
      -0.0024446086,
      0.002239615,
      -0.0039192312,
      -0.031658277,
      0.018171947,
      0.010805584,
      0.00417586,
      0.0019086843,
      0.011526085,
      -0.011280509,
      -0.000331347,
      -0.03470002,
      -0.015659122,
      0.0065417006,
      -0.019019676,
      -0.019123768,
      -0.010902233,
      -0.00008284205,
      0.000872703,
      0.0011756913,
      -0.01855871,
      -0.014638332,
      0.003857896,
      0.0025025227,
      0.0049252054,
      0.01066822,
      0.012991952,
      -0.0032652055,
      -0.16521513,
      0.008267241,
      0.0019901628,
      -0.044984125,
      0.00045908644,
      -0.0044560554,
      -0.00028410816,
      -0.0034536696,
      -0.0003978065,
      -0.021526637,
      0.027371742,
      0.004836632,
      0.026177626,
      0.0031870073,
      0.0036250537,
      -0.02123742,
      -0.012801468,
      0.005850669,
      0.024865123,
      -0.019555084,
      0.02854434,
      -0.009450636,
      0.005926816,
      -0.0417799,
      0.0006596916,
      0.012708652,
      0.023794394,
      -0.002050661,
      0.033512622,
      0.0071180933,
      -0.006815464,
      -0.012128006,
      0.0134851765,
      -0.030994637,
      -0.028726837,
      -0.0027363214,
      0.0034293628,
      -0.010679378,
      -0.010947737,
      0.015444463,
      -0.01623463,
      0.0020514342,
      -0.004345711,
      -0.003838831,
      0.023038756,
      -0.015231269,
      0.00997733,
      0.014986949,
      -0.00065734185,
      -0.012215221,
      0.004876316,
      -0.025386507,
      0.0012255175,
      0.048666354,
      0.0027625484,
      0.0005641625,
      -0.0037678655,
      -0.0009531145,
      -0.011080377,
      -0.008319371,
      -0.004265816,
      0.008171117,
      -0.011598828,
      0.013985638,
      0.0003023008,
      -0.0005405018,
      -0.0067646685,
      0.023023542,
      -0.005671342,
      0.02472262,
      -0.008522924,
      -0.000020340698,
      0.013761104,
      -0.004450982,
      -0.007518595,
      0.0054883915,
      -0.00059650576,
      0.02017563,
      -0.0022912181,
      -0.0025297739,
      -0.0009188864,
      -0.008184598,
      -0.0014251298,
      -0.013850701,
      0.025462208,
      0.01823622,
      -0.0011635119,
      0.000061136816,
      -0.019416949,
      0.037003882,
      -0.009176963,
      0.0007914551,
      -0.035187066,
      0.019161113,
      0.0145893805,
      -0.010637328,
      -0.00476819,
      0.010412517,
      -0.013300354,
      0.016516639,
      0.010874993,
      0.037897665,
      -0.014898959,
      0.00819268,
      -0.006350039,
      -0.002424944,
      -0.007176362,
      0.004498889,
      0.040112715,
      0.004177828,
      -0.019255443,
      -0.0046466286,
      0.0035748265,
      0.0033566137,
      0.0016714248,
      0.010947286,
      -0.0024527665,
      -0.0026114204,
      -0.008704171,
      0.009312228,
      -0.012350131,
      -0.009040208,
      0.013361115,
      -0.01182028,
      0.00018185866,
      0.013762905,
      0.0019811648,
      0.0013688675,
      -0.0029459903,
      0.020604607,
      -0.012775983,
      -0.0017383522,
      0.0014411344,
      -0.0016955847,
      -0.0066511976,
      -0.020644847,
      -0.024880929,
      0.013537777,
      -0.0117284255,
      0.003810103,
      -0.0022857215,
      -0.036247786,
      -0.009855295,
      0.006600377,
      0.0025211237,
      -0.0056094294,
      -0.012276549,
      -0.003255264,
      -0.0034648264,
      0.010901959,
      -0.00032797668,
      0.01561703,
      0.021039218,
      -0.0021710212,
      0.006422333,
      0.018975625,
      0.022800522,
      0.038231242,
      -0.004698382,
      0.005654026,
      0.00039344758,
      -0.09393403,
      0.019795416,
      -0.00071556267,
      -0.010009303,
      0.0067883604,
      0.01886281,
      -0.010405308,
      0.044685576,
      -0.007881935,
      0.014727776,
      0.017553225,
      -0.009304937,
      0.026937323,
      -0.029478054,
      -0.0003564474,
      0.0013538307,
      -0.0006991077,
      -0.030362055,
      0.023151474,
      0.012202647,
      -0.006672828,
      -0.0013723958,
      0.0073135956,
      -0.0063719065,
      0.005047348,
      -0.026517814,
      -0.016961474,
      0.048596784,
      0.011865728,
      -0.0071620843,
      0.0075499867,
      0.033334628,
      -0.013175382,
      -0.023285264,
      0.018654278,
      -0.019413633,
      0.009251435,
      -0.011345216,
      -0.01374085,
      -0.011170144,
      0.015877908,
      -0.004135781,
      0.033476412,
      0.036792886,
      0.008159694,
      0.0039248914,
      0.005992718,
      0.0070750196,
      -0.0042350073,
      -0.012194658,
      -0.009628274,
      0.0012162331,
      0.010877797,
      -0.0067010075,
      0.033925794,
      0.016257111,
      -0.003002544,
      -0.014760545,
      0.021485573,
      0.014489247,
      -0.013796452,
      -0.00046826949,
      0.01430808,
      -0.029116485,
      -0.013031955,
      -0.023036089,
      0.023677444,
      -0.013510925,
      -0.0031007158,
      0.0029090086,
      -0.006296939,
      0.0018622214,
      -0.014628333,
      0.004625817,
      0.009098509,
      0.0038687326,
      0.01890129,
      -0.017330546,
      -0.016247189,
      0.030755019,
      0.017655842,
      0.001146497,
      0.008894693,
      0.0105603365,
      -0.008527927,
      0.02151204,
      -0.006515691,
      -0.011710279,
      0.0089707095,
      -0.034722373,
      -0.0033752488,
      0.010734046,
      -0.028122898,
      0.0027585556,
      -0.02399124,
      0.0028099536,
      -0.00858619,
      -0.021012895,
      -0.019708375,
      0.008452493,
      -0.016942332,
      0.0008976099,
      -0.022362156,
      0.0012528673,
      0.0049072155,
      0.0013931433,
      -0.014052401,
      0.0004401743,
      -0.0064420924,
      -0.018302744,
      0.0006079594,
      -0.002033268,
      -0.014850751,
      -0.0018259668,
      -0.012555946,
      0.038823362,
      -0.009396532,
      0.0124553945,
      0.008874054,
      -0.041683972,
      0.009951109,
      -0.008029866,
      0.017292006,
      0.0067476593,
      -0.016431792,
      -0.008049659,
      -0.020560255,
      -0.011555934,
      0.0034766125,
      -0.011433095,
      -0.022454372,
      0.0009853682,
      -0.03370047,
      -0.023089452,
      -0.018153321,
      -0.005136543,
      0.02904572,
      0.019656397,
      0.024079423,
      0.0035361843,
      -0.008842813,
      0.008118871,
      0.013339005,
      0.0026327423,
      -0.006392727,
      0.02786082,
      0.016168596,
      -0.0024657457,
      -0.00060298195,
      -0.03304258,
      -0.017064895,
      -0.0317896,
      0.00053664757,
      -0.003136988,
      -0.0062289857,
      -0.01227777,
      0.0022700876,
      0.0013387111,
      -0.011948945,
      -0.013127647,
      0.007839359,
      0.011243789,
      -0.0058595818,
      0.000551042,
      0.027221698,
      0.011978193,
      0.0042954003,
      0.00017089375,
      0.005051998,
      -0.016125537,
      -0.0028458256,
      -0.01819239,
      -0.031836107,
      -0.0051509184,
      0.011770112,
      -0.000062625615,
      0.0024719755,
      -0.00035675295,
      -0.003016447,
      0.024344306,
      0.022617854,
      0.0014677194,
      -0.01838949,
      0.00034058222,
      0.00854189,
      0.0062194304,
      0.011491478,
      -0.0030079486,
      -0.014573753,
      -0.010780482,
      0.022316508,
      0.0010826808,
      -0.0064070565,
      0.01941926,
      0.014566359,
      0.014093442,
      -0.019288996,
      -0.0022769736,
      0.012109539,
      0.0065701893,
      -0.009122845,
      -0.010664394,
      0.010371936,
      -0.0016323086,
      -0.0064327684,
      -0.02049655,
      -0.0044705565,
      -0.018819258,
      0.019053917,
      0.009492249,
      0.009277606,
      0.024158787,
      -0.009883648,
      0.01253632,
      0.0017127527,
      0.03888095,
      0.0030824223,
      0.00043465954,
      -0.023422536,
      -0.00036137024,
      0.00833935,
      -0.0027365494,
      0.00823028,
      -0.008552174,
      -0.0039611068,
      -0.018383604,
      -0.005654548,
      -0.0001400693,
      0.011606491,
      -0.006716249,
      -0.012358653,
      0.010218637,
      -0.009794284,
      0.0018104824,
      -0.02184548,
      -0.022944938,
      0.014175298,
      0.01904655,
      -0.020492142,
      0.014282497,
      -0.00019879955,
      -0.019977313,
      -0.0046232087,
      -0.009026525,
      0.0048765107,
      -0.016155325,
      0.017080382,
      0.0015613311,
      0.00051800883,
      -0.008259127,
      0.016806262,
      0.010159387,
      -0.019029176,
      -0.002412572,
      -0.021178218,
      0.02097799,
      -0.021140693,
      -0.020249834,
      -0.00042237015,
      -0.009910275,
      -0.002271252,
      0.018173056,
      0.0066691255,
      0.020952871,
      -0.0017731009,
      -0.02348973,
      -0.008886933,
      0.011631093,
      0.020759363,
      -0.13325678,
      -0.018163448,
      0.0057580704,
      0.008547154,
      0.00085648836,
      0.003399782,
      -0.017472152,
      -0.03299672,
      0.0010017002,
      0.005157987,
      0.02280611,
      0.003470727,
      0.0021826974,
      -0.0052555124,
      0.00048493344,
      -0.019615764,
      0.035954755,
      0.0008544794,
      0.01499111,
      -0.0010711175,
      -0.02215995,
      -0.0067943917,
      -0.014021164,
      0.008113637,
      -0.03395278,
      -0.012911095,
      0.00285968,
      -0.0014983234,
      -0.00052021496,
      -0.025910385,
      -0.02025468,
      -0.012423224,
      0.009825211,
      0.00751404,
      0.007348853,
      0.005763671,
      -0.022244612,
      0.0150298765,
      0.016500667,
      -0.0030087032,
      0.0004427611,
      -0.0011842322,
      0.004514122,
      0.012051423,
      0.009761127,
      0.034668524,
      0.052736994,
      -0.030765789,
      -0.019060263,
      0.036688194,
      -0.028353624,
      0.0014334627,
      0.01171367,
      -0.014019822,
      -0.011627493,
      -0.00013690222,
      0.012880603,
      0.0022680415,
      -0.010528851,
      -0.02026705,
      -0.011628087,
      -0.006994333,
      0.0013191877,
      0.039543666,
      0.0042282697,
      0.015275861,
      0.026756786,
      0.007429136,
      -0.012764918,
      0.000035229692,
      0.00703412,
      0.015639694,
      0.0081929825,
      0.04608918,
      -0.016862994,
      0.0095560495,
      -0.006284237,
      -0.011189485,
      0.0119347805,
      0.0022015092,
      -0.023701137,
      -0.010275214,
      -0.054838568,
      -0.037136257,
      0.022196239,
      -0.003760309,
      0.014283058,
      0.02985238,
      -0.025102973,
      -0.0046715424,
      -0.0027722614,
      -0.010153287,
      -0.016855596,
      -0.0017432744,
      0.0013875063,
      0.003729056,
      -0.018954167,
      -0.00062711537,
      0.017485775,
      -0.01923004,
      -0.01784249,
      -0.0187325,
      -0.016616523,
      0.0074331574,
      -0.011580314,
      -0.02867156,
      0.0075870114,
      0.023013849,
      -0.009672845,
      -0.016622052,
      -0.004218716,
      -0.0021319408,
      0.011549495,
      -0.1518635,
      -0.025282668,
      0.009017546,
      -0.0011841368,
      0.011161931,
      -0.014282561,
      0.015767384,
      -0.0021495197,
      0.014962216,
      -0.007796015,
      0.0015503145,
      -0.0072018174,
      -0.020310635,
      -0.016050713,
      0.012532626,
      0.13887738,
      -0.013256095,
      -0.0015299176,
      -0.044577703,
      -0.004683061,
      -0.007596405,
      -0.03817325,
      -0.025634374,
      0.0059268237,
      -0.014549905,
      -0.00087069545,
      0.007210859,
      0.0020780566,
      0.0011669486,
      -0.0016732567,
      -0.0015922275,
      -0.011239963,
      0.01721449,
      0.026775846,
      -0.008883373,
      0.011644871,
      -0.015326693,
      -0.0046485825,
      0.00068188563,
      0.0072599244,
      0.028136238,
      -0.005504567,
      -0.009707569,
      0.009768117,
      -0.006430378,
      0.010093927,
      -0.016321113,
      -0.0046703727,
      -0.0185374,
      0.008426952,
      -0.0030538104,
      -0.061784647,
      0.020484127,
      0.0014926336,
      0.013776199,
      0.0071890266,
      0.00032803626,
      -0.004471019,
      0.006029299,
      0.010306434,
      -0.020906461,
      0.006230316,
      -0.0005021178,
      0.017584221,
      -0.0016053894,
      -0.010490677,
      0.046783466,
      0.005334574,
      0.013158816,
      0.00061206194,
      0.015271768,
      0.013337314,
      -0.008439472,
      -0.0004671085,
      -0.021459237,
      0.0010881122,
      -0.027141625,
      0.0014423456,
      0.017399086,
      -0.010220925,
      0.0033632375,
      -0.0036657362,
      -0.0010518819,
      -0.0076491116,
      0.015808688,
      0.009759575,
      -0.009417098,
      0.007142182,
      -0.0021421004,
      -0.0037514502,
      -0.012707461,
      -0.0022861245,
      -0.0020631207,
      -0.00006752143,
      -0.015774671,
      0.021298151,
      0.0057230536,
      -0.029359475,
      0.029526398,
      0.0056830836,
      -0.00073333044,
      -0.011720019,
      -0.0052083,
      -0.030608715,
      -0.004132919,
      0.0008929355,
      -0.0004411504,
      0.014836769,
      -0.0038890475,
      0.00026790064
    ]
  },
  {
    "id": "genai_cohort_python_05_Basics_of_list_in_python_vtt",
    "content": "Hey there, Hitesh here and welcome 2 to another video of Python learning. 3 Now, this video, or from this video 4 onwards we start another section. 5 I know the video is still 6 in the section of the Udemy, 7 but so far what we have studied 8 are immutable sections. 9 That means they cannot be changed 10 once the memory reference 11 is done, that is means it's 12 done, it cannot be changed. 13 Yes, you can create the fresh 14 one and have a reference 15 of it, just like number two is 16 being changed to number three. 17 Surely that can be done. 18 But the whole goal is once 19 a memory reference is done, 20 it cannot be changed. 21 It gets a unique id. 22 That unique ID never changes that. 23 Now there are other type of things 24 as well, data types which are known 25 as mutable, they can be changed 26 and that's exactly what we're going 27 to study from here onwards. 28 There are not much of them, but yes, 29 a lot more methods exist of them, 30 a lot more functionality exist 31 on them because they can be changed. 32 So there can be append method, 33 there can be insert method. 34 A lot of them exist 35 just because they are mutable. 36 That's what we are going 37 to study and I highly request 38 you that please do review us. 39 We want to make it world's 40 best Python course. 41 We are working really hard 42 on it and your support will 43 help us to make that. 44 Let's go onto the screen 45 and discuss about this. 46 So let's talk about them. 47 So there are mutables and there 48 are immutables as well. 49 We are going to the mutable or 50 journey now first let's write that. 51 That would be super fun 52 to write actually. 53 So this one that you have is mutable. 54 There we go. 55 So the first sequence that we're 56 going to study in the mutable 57 data type is going to be list. 58 Now list has variety of name. 59 I'll call this some, list 60 but you will find as an alternate 61 name or the neighbor cousin 62 in another language known as array. 63 We don't call it as an array 64 in the world of Python we call 65 it as list but treatment. 66 The defining way the data structure 67 is exactly same, there is no 68 difference between the list 69 and the array and we can actually 70 mix and match things into it. 71 And that's it, that is it. 72 We can reorder them, change 73 them because they are mutable. 74 I think let's go ahead 75 and talk about them. 76 I think rest can be discussed 77 on the code editor, which is better. 78 All right, so let's close 79 all of this and another 80 chapter in the data type. 81 Look at this, how many 82 chapters we are going for. 83 Too many. 84 Chapter 8 Py. 85 There we go. 86 So what is this list? 87 Let's just say I want 88 to call ingredients. 89 I sometimes have a tough time 90 in spelling it out. 91 Hopefully I did a correct job. 92 Ingredients shouldn't have used that. 93 But anyways we have to because that's 94 the ingredients of making a good T. 95 Let's just say we have water 96 and what do we have? 97 Milk. 98 I don't prefer milk in my T. 99 But still I will consider this. 100 And let's just say we 101 have a black T as well. 102 These are my ingredients. 103 Now let's just say this 104 is what we have defined. 105 That is it. 106 That's what we want to have. 107 And I'll focus up here. 108 Now let's just say you 109 forgot to add sugar. 110 So what we are going to do if it 111 would be tuple, I had no choice. 112 I had to come up here and add it 113 here because once it is defined, 114 I cannot change it throughout 115 the lifecycle of a program. 116 But in the world of mutable 117 sequences and mutable data 118 types, that's not the case. 119 I can just go ahead and say 120 hey, ingredients, I want 121 to add one more thing. 122 That means I want to append it. 123 Append will add it 124 at the very end of it. 125 What do you want to append? 126 I want to add sugar, 127 or append sugar into this one. 128 That is it. 129 And let's just say 130 let's print it first because I 131 think that would be fun. 132 So printing a formatted string. 133 And I would say ingredients are. 134 And then we can use a variable here. 135 There we go. 136 So we are printing it up now. 137 Not only just we can add things, 138 we can remove the things as well. 139 I don't know who would love 140 to remove it, but let's just say 141 I want to remove the water. 142 So all I do is put up a dot and I 143 can see all the method that are 144 available here for me to use 145 in this list or in the sequence. 146 So append, clear, count, 147 extend, index. 148 Now obviously nobody can teach 149 you all this because 150 the better way to learn about them 151 is via implementation. 152 But again most of them make sense. 153 Like we have count, it is going to 154 count how many elements are there. 155 Similarly we have 156 one known as remove. 157 So this is what we want 158 to use and just mention what 159 do you want to remove. 160 So I want to remove 161 water from this one. 162 If it will be available, 163 it will be removed no matter 164 what the position is. 165 So let's just say we are saying, 166 we have the boiling water, 167 we don't need this so we 168 can just work like this. 169 And I will just like to print this. 170 Let's see what happened. 171 All right, so this time, 172 this is chapter eight. 173 We run this and we can see that 174 we have water, milk, 175 black T and sugar is being added. 176 Because we have printed this 177 after adding the sugar 178 and then we are printing this one. 179 So again, doesn't really matter 180 if it is at the very start end. 181 It will just find it 182 and will remove it. 183 There are a lot of methods available 184 in the world of list. 185 Let's try some of them. 186 I think the best way is 187 to learn them on the go. 188 But let's just say we want 189 to have some practice on this. 190 I will say I have ginger. 191 I usually go first 192 for the ginger, always. 193 And then we have, cardamom. 194 Hopefully I wrote it correct. 195 Yeah, looks good. 196 So let's just say we want to have 197 another ingredients for chai. 198 So these are my spice options, 199 and these are my chai ingredients. 200 And, the chai ingredients are 201 water and milk. 202 That's it. 203 Water and we got milk. 204 There we go. 205 Now, first of all, what we want to do 206 is we want to add spice to our chai. 207 So how I can do that, the easiest 208 way is chai ingredients 209 can actually extend 210 to an existing list just by this. 211 And I can say spice options. 212 Pretty easy. 213 What's the output? 214 Yeah, that's a good question. 215 So I would love to just directly 216 print it without any formality. 217 I will just say, chai 218 and I will say chai ingredients. 219 Let's go ahead and print it out. 220 There we go. 221 And as you can see, we have chai 222 and we have water, milk, ginger. 223 So all of this is combined. 224 This is one of the common way that 225 you might want to combine two 226 of the list and stuff like that. 227 There is another interesting stuff. 228 As you can see right now we have, 229 this is known as 0th position. 230 So on the 0th position we have 231 water, then we have milk. 232 So let me just copy this 233 and bring it onto our board. 234 So there we go. 235 So this is whole how 236 a list looks like. 237 And always remember that you 238 have the 0 position first. 239 So who is at 0 position? 240 Always remember 241 that water is at 0 position. 242 Come on. 243 Can you point this? 244 Yeah, there we go. 245 And then similar to this, we 246 have position number one 247 and one position is milk. 248 Super easy. 249 Not too tough. 250 So let's just say on a certain 251 specific position, you want to add 252 something and you know the position 253 where it's going to be. 254 It's super easy. 255 I Can just go ahead and call 256 the chai ingredients and use 257 the method insert appends always 258 adds it at the very end of it. 259 But insert. 260 You have to provide what 261 position you want to add. 262 This position is known as index. 263 You're going to see this 264 index quite a lot. 265 So let's just say my 266 index or my position is number two. 267 And I want to add something 268 like black T here. 269 Black T, where it will 270 go ahead and add it. 271 So since this is my zero position, 272 this is my one position. 273 And I know that ginger is 274 at position number two. 275 And I have asked something to add 276 in the position of the two. 277 So obviously these things 278 will move towards the right. 279 Let's see if we are 280 actually correct or not. 281 Let's go ahead and use this quick 282 keyboard shortcuts always help. 283 So we can see that we have 284 the water, milk and black T is 285 at position number two now. 286 And obviously the ginger 287 and cardamom got shifted. 288 So this is what happens when we 289 go ahead and work like this. 290 So I'll just copy this 291 for you to compare. 292 And I think I should add it up here. 293 And there we go. 294 So we still have the water and milk. 295 So water is still at a position zero. 296 Milk is still at a position one. 297 But this time the position 298 two is for black T. 299 And there we go. 300 So this is how the basics 301 of it, how it works. 302 And in the world of list there are 303 some more details just like this. 304 Usually this is the important part. 305 But yes, there are other stuff that 306 exists and I would love to show you. 307 So let me show you some 308 of the more methods that you can use 309 in the list. 310 And let's carry that on. 311 Okay, we have inserted the list. 312 Let me show you that how 313 we can remove something. 314 Yeah. 315 From a particular position 316 that would be good to have. 317 So I would say that, 318 let's pop something. 319 So let's just say last added. 320 This is the value. 321 And I will use chai ingredients 322 and I can use a method pop. 323 Now what this pop actually does 324 whatever is 325 the last element we have. 326 So in this case we 327 have this cardamom. 328 It will remove it from the list 329 as well as it will give it to 330 you back so that you can 331 actually use it into a variable 332 and just use it wherever you 333 like, but it's emptied out from 334 the list itself. 335 Let me go ahead and show you 336 what we have in the last added 337 so that you can see it. 338 And there we go. 339 Let's run this. 340 And what we see is cardamom. 341 So cardamom is now removed 342 from the list. 343 If I just go ahead and print this 344 list again at the very end 345 of it, I know there's a lot 346 of printing that is. 347 Oops. 348 There's a lot of printing 349 that is going on. 350 But that's okay. 351 So we see that the cardamom 352 is here, but cardamom is gone 353 from the list itself. 354 And that's the whole point 355 of having the pop here. 356 Now we have another thing which 357 is pretty fun is I'll show you 358 directly in the print statement. 359 I think that is also possible 360 and doable and it's actually fun. 361 I can store that into 362 a variable as well. 363 But I can use directly a method 364 known as reverse here. 365 And again it's a method, it needs 366 to execute immediately. 367 Now if I try, obviously 368 will reverse the list. 369 Not like each word will be reversed, 370 but whole list will be reversed. 371 So didn't worked out well. 372 So we have to actually 373 it doesn't return you anything. 374 That's why it's saying none here. 375 Because it doesn't return anything 376 in order to do. 377 So I have to actually copy this 378 and have to execute this 379 because this is mutable. 380 That means list do get changed. 381 So I have to say chai 382 ingredients reverse. 383 So whatever the value is, 384 we have reversed that. 385 And now if I print this up, it has 386 actually changed my list entirely. 387 Let's run this again so we can see. 388 Previously it was water, 389 milk, black T and ginger. 390 Now we have ginger, 391 black T, milk and water. 392 So each position is being reversed. 393 Pretty nice. 394 Pretty interesting. 395 Okay, we can also do some kind 396 of a sorting as well. 397 And for sorting as well I have 398 to use the same method. 399 Oops. 400 And I have to say 401 that I want to sort. 402 That's it. 403 And now we can actually 404 print this again. 405 So notice here we have reversed it. 406 Now we are sorting it. 407 And again these are very 408 interesting examples. 409 And again they take little bit time 410 to digest, but that's okay. 411 So we have B as a black T, 412 then we have G as a ginger, then 413 Then W for water. 414 Pretty interesting. 415 Pretty nice. 416 Pretty going good. 417 So pretty interesting stuff. 418 But what I say is this method doesn't 419 make sense as of now too much that 420 hey, why would I reverse this? 421 Why would I sort this? 422 If I had to reverse, I would have 423 written this in that order. 424 But yes, there are some points, 425 there are some times like when 426 you see the buttons which says 427 sort the items from price low to 428 high or low to high, when you 429 actually make real world 430 application, they're much easier 431 to connect with. 432 So I say Just remember them. 433 Don't sweat it out too much. 434 That is totally okay. 435 Now let me show you one. 436 Another interesting example. 437 Let's just say we have a variable 438 that calls as, sugar levels. 439 Each T shop should have sugar levels. 440 So we have 1, 2, 3, 4, 5. 441 I don't know who drinks that 442 much of sugar, but maybe, 443 maybe there are people. 444 So I'll just go ahead and print 445 the stuff like this. 446 I'll format this and what I 447 can use is I can find out what 448 is the maximum out of it. 449 So maximum sugar level. 450 And again, as I say, you might be 451 thinking, hey, I know already 452 what the maximum sugar level is. 453 It's five. 454 But sometimes in the program you 455 are not aware of this array, 456 this might be coming up from the 457 database and you only want to 458 show the maximum item with the 459 highest pricing or something 460 like that. 461 So in that case you can 462 actually go ahead and use 463 the function known as max. 464 Yes, this exists directly 465 and you can pass the list to it. 466 So for example, our 467 list is sugar level. 468 So this will give me whatever 469 the maximum value of this is. 470 Pretty easy, pretty fun to work with. 471 So maximum sugar level is 5. 472 And just like this, we do 473 have a minimum as well. 474 So in case I want to find minimum 475 and you guessed it right, just 476 like this is max, we do have min. 477 So yeah, no surprise there. 478 We have the maximum sugar level. 479 We have the minimum sugar level. 480 Pretty easy, pretty fun to run. 481 Now there is one couple of more 482 things I want to discuss this. 483 And again, I'm not in a hurry. 484 That's why I say my lectures are 485 little bit longer, but they are fun. 486 Usually people prefer 487 to break these lectures into 488 two parts or three parts. 489 I think we are also running 490 a little bit higher on the time. 491 So instead of this, let's go 492 ahead and start this video 493 right here and I will show you 494 two more things and let's 495 discuss them in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 Basics of list in python.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/05 Basics of list in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.024396813,
      -0.016131235,
      0.017884469,
      -0.06312665,
      -0.010756168,
      -0.0074035595,
      0.00016030311,
      0.036637798,
      -0.006534196,
      0.010888877,
      -0.025090205,
      -0.00875983,
      0.012843719,
      0.020399423,
      0.12423555,
      -0.007880495,
      -0.011430758,
      -0.0041685044,
      -0.008292823,
      -0.009871585,
      -0.00533886,
      0.007824924,
      -0.009523887,
      0.0028771642,
      -0.002479001,
      -0.004453236,
      0.029471202,
      -0.009680714,
      0.03612605,
      -0.024641141,
      -0.009210877,
      0.01600972,
      0.0025537612,
      0.008259082,
      0.008378813,
      0.014014998,
      0.031731445,
      0.0035740011,
      -0.020841144,
      0.010547936,
      -0.0031828873,
      -0.014043142,
      0.0010274689,
      -0.028680239,
      0.0040167896,
      -0.011058438,
      0.009549065,
      -0.023970721,
      0.00071071304,
      0.02347665,
      0.00003787062,
      -0.010701234,
      0.00894192,
      -0.17932442,
      0.023792455,
      -0.0010479795,
      -0.004458355,
      -0.0057559614,
      -0.001646372,
      0.0045699985,
      -0.014638387,
      0.008228059,
      -0.010861457,
      0.0024693538,
      -0.010009406,
      -0.012234587,
      0.014503679,
      0.00277368,
      -0.00066512614,
      0.003527234,
      0.008411735,
      0.0007946825,
      -0.0046107974,
      -0.045147907,
      -0.0079705445,
      -0.043671925,
      0.0099085085,
      -0.008037264,
      -0.0015640617,
      0.028377095,
      -0.00921861,
      -0.00075322494,
      -0.017220942,
      0.0024166058,
      0.0027385973,
      0.00775044,
      -0.029312912,
      0.0040874174,
      -0.013116203,
      0.006907043,
      -0.011320145,
      0.004744976,
      -0.008656043,
      -0.00255188,
      -0.021132091,
      0.0037460253,
      -0.018150024,
      -0.0026846454,
      -0.00431889,
      0.006802212,
      0.016407188,
      -0.012811678,
      -0.024774717,
      -0.011321292,
      0.000987969,
      -0.0045573167,
      -0.021767102,
      -0.016366245,
      0.005032431,
      0.0018812079,
      0.017353112,
      0.0076119024,
      0.021295434,
      0.018895328,
      0.0054176277,
      -0.17761557,
      0.028017066,
      0.023252444,
      -0.032455157,
      0.012784681,
      -0.017046843,
      0.018988946,
      -0.012744358,
      0.009519253,
      -0.02320503,
      0.0024057336,
      -0.0087017715,
      0.027181193,
      0.006135552,
      -0.024493676,
      -0.016913678,
      -0.016969744,
      -0.0029171587,
      0.018916965,
      -0.0050923997,
      -0.002839222,
      -0.020927703,
      -0.009068608,
      -0.03525652,
      -0.003978329,
      0.011136052,
      0.014806224,
      0.00522053,
      0.018063664,
      0.012380652,
      -0.006869057,
      -0.009381991,
      0.007926725,
      -0.018329417,
      -0.016053025,
      0.012614573,
      0.011580171,
      -0.012882945,
      -0.0048981467,
      0.02319997,
      -0.016454903,
      0.0027068942,
      0.004479594,
      -0.013158373,
      -0.0023418379,
      -0.0035393524,
      0.004816745,
      0.011768674,
      -0.0065039364,
      0.0019101327,
      0.0006518646,
      -0.036627587,
      0.013145928,
      0.034984034,
      0.02210523,
      -0.003808372,
      -0.002027529,
      0.016661543,
      -0.005058253,
      -0.02271199,
      0.0027402518,
      -0.0018115436,
      0.004584246,
      0.016805226,
      -0.012216452,
      -0.010277628,
      -0.0015165304,
      0.010235763,
      0.023998847,
      0.026414713,
      0.005598352,
      -0.004550342,
      0.016108047,
      0.0044167456,
      0.026376318,
      -0.009155402,
      -0.004422475,
      0.018413093,
      0.0072764605,
      0.005600775,
      -0.0077069574,
      -0.0034973403,
      -0.006029143,
      0.0010782181,
      0.016206482,
      0.028215127,
      0.002600995,
      -0.020690477,
      -0.028321587,
      0.017844202,
      -0.008841112,
      0.013350927,
      -0.015254335,
      0.020033503,
      0.0034573993,
      -0.006201209,
      0.0012745126,
      0.0050649564,
      -0.01103972,
      0.023587745,
      -0.00893521,
      0.025813852,
      0.01367708,
      -0.013194815,
      -0.0056707007,
      0.005858016,
      -0.02315308,
      0.008248624,
      0.013434904,
      0.012100757,
      0.005132285,
      0.00235577,
      -0.009112822,
      0.014080958,
      0.009309527,
      0.03150849,
      0.009679712,
      -0.009581723,
      -0.0105676055,
      -0.00045200094,
      -0.01290932,
      -0.008683512,
      0.016968202,
      0.011822459,
      0.0034412218,
      -0.00041305888,
      -0.009387759,
      -0.0004447247,
      0.007759426,
      0.026288867,
      -0.012043964,
      0.0055761025,
      -0.012393007,
      -0.0002763923,
      -0.009635719,
      -0.0049563395,
      -0.011986913,
      0.007126667,
      -0.011486412,
      0.01915925,
      0.008561605,
      -0.026768347,
      -0.00053093256,
      0.012903605,
      -0.018725563,
      -0.017563697,
      -0.005924592,
      -0.013960667,
      -0.0095603485,
      0.026059942,
      -0.0009592168,
      0.008780244,
      0.01765473,
      -0.0157864,
      0.013069621,
      0.015394246,
      0.00821575,
      0.008861064,
      0.0090471795,
      -0.017300183,
      0.023699656,
      -0.108085304,
      0.023034902,
      0.010655052,
      -0.006482432,
      0.010744345,
      0.016962724,
      -0.01699309,
      0.038133934,
      -0.0013333777,
      0.00857607,
      0.009036896,
      -0.003520533,
      0.018245548,
      -0.022457922,
      0.012864456,
      -0.011116009,
      0.00692288,
      -0.021287316,
      0.010612666,
      -0.009514592,
      0.01716894,
      -0.009434549,
      -0.00027922657,
      -0.021337079,
      0.010186236,
      0.004177311,
      -0.012975593,
      0.031130934,
      0.018385759,
      0.005840133,
      0.0015299915,
      0.044648625,
      -0.006297898,
      -0.007995395,
      -0.001881143,
      -0.0038691915,
      -0.01050109,
      -0.003461362,
      -0.024049269,
      -0.010125503,
      0.020004723,
      -0.013591303,
      0.019378258,
      0.013417667,
      0.024323534,
      0.012868718,
      0.007937571,
      -0.0030409144,
      0.0022811492,
      0.009529346,
      -0.0038959747,
      -0.00056214875,
      0.023053719,
      -0.0012874466,
      0.014216163,
      0.008428679,
      -0.009538387,
      -0.02891302,
      0.018990932,
      0.011367767,
      -0.014796306,
      -0.005606878,
      0.0012178675,
      -0.027296556,
      0.0031262692,
      -0.017442217,
      0.0138732055,
      -0.003024481,
      0.014677174,
      -0.0005847526,
      0.011186497,
      -0.009955557,
      -0.0034824086,
      0.0030713198,
      -0.0051690876,
      0.0072769783,
      0.012673586,
      -0.0010997865,
      -0.009572625,
      0.03183706,
      0.028748948,
      -0.010362395,
      0.0045455615,
      0.01281231,
      0.0008271611,
      0.015742015,
      0.0093370965,
      -0.011635621,
      0.011904629,
      -0.021096617,
      -0.009975575,
      0.017542241,
      -0.028235229,
      0.004470773,
      -0.019966148,
      -0.0023237623,
      -0.010418738,
      -0.013500785,
      -0.0017895004,
      0.017170124,
      -0.008803149,
      0.0018103095,
      -0.015450519,
      -0.009322829,
      0.004787331,
      -0.003712702,
      -0.02726296,
      -0.007303714,
      -0.007513607,
      -0.009171681,
      -0.005646034,
      0.0064721904,
      -0.0080245575,
      -0.016845845,
      -0.0022215238,
      0.022577353,
      0.0012296853,
      -0.0035556492,
      0.012529945,
      -0.038709342,
      -0.0003139006,
      -0.011605159,
      0.009607392,
      0.008187755,
      -0.009143448,
      0.012207235,
      -0.021433968,
      -0.009363901,
      -0.0040521366,
      -0.020267338,
      -0.010690903,
      0.0050637517,
      -0.03251033,
      -0.010814825,
      -0.0077988673,
      -0.022996543,
      0.024142897,
      0.008067949,
      0.0151677225,
      0.020134993,
      -0.031713367,
      0.00019203765,
      0.00928798,
      0.0021752263,
      -0.008083008,
      0.007876338,
      -0.015690308,
      -0.0132709155,
      0.007677534,
      -0.034879856,
      -0.0024076249,
      -0.011358399,
      -0.012283629,
      -0.017027583,
      -0.012976965,
      -0.0015042995,
      -0.0011953486,
      -0.020240389,
      -0.014572467,
      -0.019395798,
      0.00093555794,
      -0.0030672338,
      -0.020159325,
      -0.009495554,
      0.035384756,
      -0.004018158,
      -0.0059730583,
      0.008836741,
      0.0024372635,
      -0.0021028873,
      -0.008852979,
      -0.012376337,
      -0.048052434,
      -0.029555304,
      0.024842182,
      -0.0060037374,
      0.007973855,
      -0.0069549154,
      -0.003406789,
      0.028188447,
      0.016399384,
      -0.0059331646,
      -0.032196593,
      0.014225017,
      0.0014079482,
      -0.0055076154,
      0.017747147,
      0.0048310133,
      -0.01967782,
      -0.0028487484,
      0.013409333,
      0.017175127,
      0.009416378,
      0.017818622,
      -0.0041539157,
      0.010646442,
      0.0072501344,
      0.0020252739,
      0.009739072,
      0.002293123,
      -0.002453358,
      0.021672571,
      0.011792174,
      -0.01891665,
      0.000098381526,
      -0.020845953,
      -0.026528595,
      -0.041780192,
      0.008556706,
      0.023972396,
      0.021808978,
      0.00736892,
      -0.018939508,
      0.014639911,
      0.0065174215,
      0.02664031,
      0.0011159409,
      -0.008941622,
      -0.02762054,
      -0.0047022146,
      0.016427612,
      -0.034133445,
      -0.0054073213,
      0.0036018868,
      0.007093501,
      0.015892666,
      -0.00030077543,
      -0.013905632,
      -0.0043148524,
      -0.0042315354,
      -0.004389326,
      -0.004715646,
      -0.002945976,
      0.027619176,
      -0.042976916,
      -0.013404039,
      0.030992337,
      0.022447485,
      -0.03320343,
      0.01214253,
      0.011176252,
      -0.012949739,
      -0.0034590163,
      0.022279125,
      0.0064868145,
      0.00041333147,
      0.010067305,
      0.0029368235,
      -0.006073211,
      -0.005395147,
      0.0069036153,
      0.009734343,
      -0.016591432,
      -0.0031273463,
      -0.021305192,
      0.017071357,
      -0.007519462,
      -0.009023727,
      0.00012194612,
      -0.0010454404,
      0.016062304,
      0.026475834,
      0.0013778071,
      -0.004593987,
      0.0001466236,
      0.000032609816,
      -0.019489314,
      -0.007633108,
      0.016649485,
      -0.12288809,
      -0.020467756,
      -0.005921725,
      0.015363669,
      -0.014885231,
      0.005842877,
      -0.0076273736,
      -0.018642982,
      0.0028111185,
      0.00047240264,
      0.0009855775,
      -0.013906812,
      0.014061495,
      -0.022579206,
      0.0029184592,
      -0.025294023,
      0.005241682,
      0.015867047,
      0.020702273,
      -0.02235555,
      -0.008438411,
      0.011314293,
      -0.0062938645,
      -0.0009317501,
      -0.035328224,
      -0.027386406,
      0.006289762,
      -0.012744938,
      -0.030044934,
      -0.004087082,
      -0.030083863,
      -0.009379244,
      0.0015249379,
      -0.010727334,
      -0.003954928,
      0.005997824,
      -0.01165655,
      0.024688656,
      0.02085193,
      0.00636072,
      -0.005415489,
      -0.014975233,
      0.019067643,
      -0.003461866,
      0.0076572625,
      0.02324265,
      0.051308945,
      -0.01963261,
      -0.0020707657,
      0.04146717,
      -0.035057012,
      -0.024455404,
      0.0024413068,
      -0.027013332,
      -0.009583415,
      -0.010441329,
      0.005331323,
      -0.0051571457,
      -0.004598665,
      -0.009958865,
      -0.0078061842,
      0.005317103,
      0.025227293,
      0.02482337,
      -0.0098104905,
      0.013526737,
      0.027103372,
      0.003455736,
      -0.023205368,
      -0.01030783,
      0.005613498,
      0.0073851077,
      0.008959404,
      0.025474107,
      0.00012291313,
      -0.011518012,
      0.0031662951,
      -0.010762606,
      0.012801751,
      -0.015011955,
      -0.023541313,
      0.0007182267,
      -0.05584707,
      -0.028156167,
      0.024237871,
      -0.0007956194,
      0.018402683,
      0.0215322,
      -0.02431743,
      0.00007158333,
      0.0034456456,
      -0.005476208,
      -0.036918335,
      -0.007606366,
      0.0067864805,
      0.009579843,
      -0.023416493,
      -0.0056424104,
      0.011851035,
      -0.017632779,
      -0.0051568905,
      -0.0037692434,
      -0.0008091406,
      0.0047991173,
      0.011647941,
      -0.015505308,
      0.008459665,
      0.015706811,
      0.01338557,
      0.00823739,
      0.0030234605,
      0.0023349724,
      -0.0040581217,
      -0.1566144,
      -0.008100536,
      0.015163962,
      0.016414365,
      0.01153501,
      -0.0032042698,
      -0.001665224,
      -0.025553498,
      0.031451534,
      0.008628488,
      0.012497613,
      -0.007189803,
      -0.011357849,
      -0.0060176146,
      0.033924088,
      0.13075015,
      0.0011333111,
      -0.0010682788,
      -0.042363517,
      -0.0068919323,
      -0.000040178027,
      -0.023738269,
      0.0015196173,
      -0.011079893,
      -0.013342938,
      -0.020099206,
      0.024888933,
      -0.004425757,
      0.0135807,
      0.0049079903,
      -0.009113474,
      -0.019775907,
      0.009011754,
      0.030164996,
      -0.011081742,
      0.013189559,
      -0.019186009,
      -0.012807182,
      -0.00530062,
      0.006895456,
      0.035867605,
      -0.0013757244,
      0.004003178,
      0.0072339573,
      -0.024274116,
      0.008110142,
      -0.008585979,
      -0.0033815475,
      -0.014305557,
      0.0043145427,
      0.020219779,
      -0.036028363,
      0.00086498505,
      -0.00089170627,
      -0.015215871,
      -0.001328619,
      0.005136863,
      0.01555375,
      0.008751288,
      0.01661157,
      -0.01636102,
      0.009947083,
      0.005853946,
      0.006136603,
      -0.0031828731,
      -0.013847201,
      0.018224299,
      0.012580013,
      0.01308628,
      0.008587102,
      0.02108426,
      0.022087561,
      -0.0057771406,
      0.00095712533,
      -0.010722829,
      -0.015132141,
      -0.019499827,
      0.015235254,
      -0.004340442,
      -0.015896266,
      -0.008345291,
      -0.0025112168,
      -0.0015416589,
      -0.018124701,
      0.0018156928,
      -0.00383459,
      -0.026491601,
      0.010567256,
      -0.012922106,
      0.0044727866,
      0.017193936,
      0.0016984709,
      0.010397639,
      0.02337686,
      -0.019758603,
      0.024035122,
      0.017776512,
      -0.00315625,
      0.030575514,
      0.008378127,
      -0.009020686,
      -0.0051962594,
      -0.021713234,
      -0.03610886,
      0.016985018,
      0.008229119,
      0.008493148,
      0.00691896,
      -0.012043825,
      0.013681144
    ]
  },
  {
    "id": "genai_cohort_python_06_Operator_overloading_and_bytearray_in_python_vtt",
    "content": "All right, so we'll continue 2 the lecture right, from here 3 because this is a continuation 4 of our talk on, list itself. 5 Now again, there's not too much 6 to discuss about it here, but still 7 want to give you a little bit 8 base of operator overloading. 9 So what is this operator overloading? 10 There are a lot of operators 11 in the world of programming. 12 Like plus is an operator which adds 13 two things, which is on their left 14 and right like this and whatever 15 is here and it just adds it. 16 This is designed to add numbers. 17 But whenever this operator, whether 18 it's a plus minus, whatever it is, 19 it's being used 20 for doing more than one task that is 21 called as operator overloading. 22 Let me show you a base 23 example and you will 24 understand it much better. 25 So let's just say I 26 have a base liquid. 27 And this base liquid is, 28 let's just say we want to have water 29 and another base liquid of milk. 30 Okay, no problem. 31 Then we have some 32 extra liquids as well. 33 Or probably better one 34 would be extra flavor. 35 Flavor looks good. 36 Extra flavor. 37 There we go. 38 Now we have extra flavor of liquid. 39 And in that again, my 40 favorite, which is ginger. 41 Now we want to combine all of them. 42 We want to make a full liquid mix. 43 How can we do that? 44 Surely I showed you the append. 45 Or we actually saw that we can 46 actually, combine all of this. 47 Remember this ingredient append. 48 We can actually use this or we 49 can actually go ahead and use 50 the method that, hey, I just 51 want to add all of them. 52 And a lot of methods can be done 53 just like we saw this extend here. 54 But there is another way, another 55 shortcut that I can simply go 56 ahead and say, hey, base liquid. 57 And I just want 58 to add an extra, flavor. 59 Now again, this plus was not 60 supposed to do these things, 61 but it is able to do this thing. 62 This is your operator overloading. 63 Yeah, very surprised. 64 But this is all it is. 65 What would be the result of it? 66 No, no surprises here. 67 Exactly what you have guessed for it. 68 So we'll just go ahead 69 and say liquid mix. 70 And then we are going to say that, 71 hey, just give me a full liquid mix. 72 That's it. 73 That is it. 74 No big deal. 75 No surprises, nothing. 76 So we can see the liquid milk mixes, 77 water, milk and ginger. 78 So it just works exactly 79 like concatenations. 80 All right, so this is nice 81 and operative. 82 Overloading exists 83 a little bit more as well. 84 Not just by combining this in 85 the array especially they, work like 86 for example, let's just say you want 87 to have a strong brew and this T 88 is going to be pretty strong. 89 So let's just say I have 90 one ingredient for having a strong 91 T which is black. 92 Black T. 93 So I'll just say now you can use 94 operator overloading here as well. 95 Like I want to multiply it by three. 96 So what is the result? 97 You might be wondering for that. 98 And this might surprise you 99 a little bit, but again this 100 is investigation study. 101 So just guess what 102 could have happened. 103 So I'll just say strong brew and we 104 will use strong brew variable here. 105 Just guess, take a guess. 106 Will this black T will be three times 107 or will three be added 108 just here what will happen? 109 And again, in case you were able 110 to guess it right or probably not, 111 we get three shots of the black T. 112 That's what multiply by three. 113 And what would have happened if there 114 would be another element in it? 115 That's very surprising. 116 Let's just say we have 117 a water in this one. 118 Now what happens does this three 119 gets multiplied only by this 120 or by this or by both of them? 121 Yeah, that's where the operative 122 overloading and their 123 knowledge, is important. 124 So notice here, black T and water, 125 then again black T and water, 126 and then again black T and water. 127 So technically you can say 128 yes, it gets multiplied 129 by each of the element. 130 That's absolutely correct. 131 But notice here it was able 132 to maintain the order as well. 133 This whole thing one, 134 this whole thing as twice and this 135 whole thing as thrice. 136 Yeah, that's very 137 interesting part of it. 138 So, so I hope you get this now 139 that how this actually goes 140 and how this actually works. 141 Now there are a lot of things 142 which you can actually go ahead 143 and bring more components onto it. 144 Like for example, I usually never 145 like to import anything in between. 146 I prefer all of my 147 imports at the top. 148 But there are things that 149 you can import as well. 150 So for example, there is 151 something known as operator. 152 And from this whole module we'll 153 discuss about them later on as well, 154 you can actually get item getter. 155 Now notice here it says return 156 a callable object that fetches 157 the given item from its operand. 158 Hi. 159 This is gibberish. 160 This is 100% gibberish. 161 I don't think so. 162 Anybody can understand this, 163 what's going on in here. 164 But if you wish I can show 165 you some examples as well. 166 But again the point is that not 167 just list is powerful, you can 168 actually bring more operations. 169 Just like we have seen the operator 170 overloading, we can bring 171 more things and we can perform more 172 operations on the list. 173 You will see this item getter much 174 quite in the lot of source codes. 175 And you can Sort them, 176 based on variety of steps. 177 But my goal is not to just 178 scare you away for this. 179 The last topic that we're 180 going to study about this 181 is an interesting concept. 182 Let's just say I want 183 to have one string. 184 My string is cinnamon. 185 This is my string and I want 186 to convert this into a list. 187 How do I do this? 188 Because this is a list. 189 So you might be wondering, 190 can I go ahead and do this? 191 For example, if I have a variable 192 raw spice data and can I go 193 ahead and use it like this? 194 Yes, surely you can actually 195 go ahead and do this. 196 But then you have one 197 element in the list. 198 I want a list of just this string. 199 That's an interesting 200 concept in itself. 201 How you can do that is 202 a really different way. 203 You have something inbuilt 204 known as byte array. 205 I'll show you more 206 about the byte array. 207 But you will use it very rarely. 208 But still it exists. 209 I wanted to show you. 210 And this is a method, so you 211 don't use square brackets, 212 you use actually parenthesis, 213 because parenthesis is 214 used for tuple as well. 215 But it is also used for methods. 216 And inside this you say B 217 for byte array. 218 And then you use the quotes 219 and inside this 220 you use the cinnamon. 221 So I'll just go ahead and paste this. 222 Now this is. 223 Each element will be treated 224 as almost like array. 225 But what's the output? 226 Yeah, pretty sure you are 227 interested in that. 228 So I'll just say raw data or bytes. 229 Yeah, byte would be good. 230 Bytes. 231 And let's just say we have 232 raw spice data. 233 What is the output of this? 234 Pretty interesting actually. 235 You will see that 236 still gives you bytes. 237 And then it says 238 byte array B cinnamon. 239 So yeah, it's not an ordinary thing 240 to actually work with that. 241 You have to modify this, 242 you have to replace this. 243 There's a lot of thing that goes on, 244 into this one. 245 And printing is not that easy. 246 You will use it 247 rarely, but it exists. 248 Now the advantage of this is you 249 can actually perform all these 250 replace and all these things. 251 For example, just to show you a 252 brief example, let's just say 253 we have a raw spice data in 254 this you have again lot of 255 methods like append, 256 capitalize, center, just like 257 you have in the list. 258 Let's just say I want to have 259 a replace method that I want to use. 260 So replace also has 261 a way how it works. 262 So I'll just say I want 263 to replace cina. 264 Instead of cinnamon, we 265 want to have cardamom. 266 So I'll just go ahead and say B 267 and I'll say Cardamom. 268 And that's it. 269 Now if I print this again, 270 I'm manipulating the bytes array. 271 And again, did we print it up so. 272 Nope. 273 And again, the reason is simple. 274 You expected something 275 different, but the result is 276 going to be different. 277 So what happens in the bytes array? 278 I'll show you the documentation 279 and then we'll fix it 280 to the expected result. 281 Right now we are expecting that 282 when we print this raw spice data, 283 it should have cardamom 284 instead of the cinnamon. 285 But we are getting cinnamon. 286 That is okay, we will fix that. 287 But for this, let's read a little bit 288 of documentation so that 289 we can actually fix this. 290 This is what investigation study is. 291 I love that. 292 So if I come back, I have opened 293 up the documentation. 294 This is my bytes array. 295 One thing that you need 296 to understand that it returns 297 a new array of bytes. 298 Okay, that's good. 299 And the byte array type is 300 a mutable sequence of integer. 301 Okay. 302 So I can change it 303 in the range of 0 to 256. 304 So it's a very small range. 305 It's usually used only for characters 306 like this, the string that we have. 307 So it breaks it down into characters. 308 It has the most usual method 309 of mutable sequence. 310 So yeah, sequence means list. 311 Yeah, they actually interchangeably 312 use, use this quite a lot. 313 Now if it is a string, you 314 must also give the encoding. 315 We haven't given that 316 it's optional, but you should give 317 them encoding like it is a UTF 318 8, UTF 16, whatever that is. 319 And a lot of things are 320 also mentioned up here. 321 Now what is the wrong that we are 322 doing here now whenever you actually 323 provide or run a method on this, 324 bytes array, it actually 325 returns you a new array or bytes. 326 Bytes array. 327 What we are doing is we have 328 performed an operation. 329 It has given us return back 330 a value, but we are printing 331 the original one still. 332 So one of the fix or a quick fix 333 that we can do is we can simply 334 say, hey, raw spice data, 335 small data would be the value. 336 Now that whatever the value 337 you actually return me after 338 performing this operation, this 339 will go back onto this one. 340 And now probably we will 341 have a different result. 342 Probably again, because it's 343 an investigation study. 344 If I run this again now I see that 345 I do have bytes array as cardamom. 346 Okay, it's working as we expected. 347 But now you also have learned what 348 and when it is not working, what 349 to expect and how does it work. 350 Again, I love this investigation 351 study because you actually 352 don't get the answer directly, 353 but you actually investigate 354 and then reach onto a point 355 where it is actually working. 356 This is my favorite part of it. 357 All right, so, quite a lot. 358 But we have now finished 359 the list entirety as a topic. 360 Hope you have enjoyed it. 361 And this is it. 362 But surely there are lots 363 of more methods I can create 364 probably five more videos on. 365 Just use cases of the list methods. 366 Like we have seen a lot, like we 367 have seen these methods, up here 368 at the top, like reverse and sort. 369 And I can dance with the examples, 370 but I don't want to do that. 371 So that is it for this video. 372 And I hope you have enjoyed 373 the journey of lists in Python.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "06 Operator overloading and bytearray in python.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/06 Operator overloading and bytearray in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0011410345,
      -0.018141927,
      0.042926226,
      -0.07592547,
      -0.0006212477,
      -0.013368427,
      0.010421836,
      0.036536824,
      0.0046607438,
      -0.00075276906,
      -0.022746097,
      0.0029664284,
      0.00007357813,
      -0.0043581,
      0.1438188,
      0.014044456,
      -0.021437384,
      -0.022486787,
      -0.008870716,
      0.008631482,
      -0.0060564335,
      -0.015110104,
      0.012483014,
      -0.00213933,
      0.012415927,
      -0.006176596,
      0.024704536,
      -0.0048592617,
      0.032323536,
      -0.020336878,
      -0.015265879,
      0.013354777,
      0.011965712,
      0.0053906236,
      -0.021032479,
      0.0066206255,
      0.011489197,
      -0.000034389122,
      -0.02299344,
      0.021118617,
      0.0021606637,
      0.00035023302,
      0.002638439,
      -0.025596984,
      0.00072097476,
      -0.004232196,
      0.0041522863,
      -0.034971755,
      -0.0019185104,
      0.020991556,
      0.03621439,
      -0.0062118527,
      0.011940734,
      -0.1728068,
      0.021813003,
      0.007501931,
      0.002260514,
      -0.016734771,
      0.02159141,
      0.0029850856,
      0.014392061,
      0.025703447,
      -0.019285077,
      0.014449204,
      -0.016948614,
      -0.008893339,
      0.01919293,
      0.016949221,
      0.007646471,
      -0.0072304076,
      0.0156104,
      0.0134751415,
      -0.027225869,
      -0.034607258,
      0.0043656295,
      -0.055170417,
      0.022626346,
      -0.0193877,
      -0.018233743,
      0.018464215,
      -0.013526576,
      -0.015972188,
      -0.015380145,
      -0.005901132,
      -0.0019099715,
      0.0028763465,
      -0.026100976,
      -0.014934423,
      -0.011279768,
      0.0062196297,
      -0.012721945,
      -0.015219324,
      -0.0061710086,
      0.025908785,
      -0.017129203,
      -0.0012841604,
      -0.00018171992,
      0.021215336,
      -0.024827613,
      0.011782441,
      0.011453393,
      -0.00093513785,
      -0.020128889,
      -0.0016126924,
      -0.012822092,
      -0.0012655265,
      -0.0062020407,
      -0.008867604,
      0.004426039,
      0.01156259,
      -0.007085701,
      -0.015799295,
      0.0037227392,
      0.026855707,
      -0.0040307413,
      -0.16318643,
      0.018294353,
      0.0033376587,
      -0.005763727,
      0.012187939,
      -0.035394497,
      -0.011369774,
      0.0034469226,
      0.025384532,
      -0.023966487,
      -0.0072610667,
      0.01630335,
      0.035882447,
      -0.0009075012,
      -0.019635053,
      -0.0046934434,
      -0.021735178,
      0.00035215585,
      0.016318727,
      -0.015853718,
      0.014639049,
      -0.021090874,
      -0.0007635518,
      -0.033825442,
      -0.0033867306,
      -0.0053640823,
      -0.0018123506,
      -0.0099172965,
      0.031002495,
      0.02151146,
      -0.00950937,
      -0.010844914,
      0.022144832,
      -0.018765833,
      -0.016364887,
      0.016508363,
      -0.01796979,
      0.0041541834,
      0.0009456148,
      0.009135753,
      -0.020276152,
      -0.005782815,
      0.02835175,
      -0.014280455,
      -0.012572417,
      -0.0044197207,
      0.0062181274,
      0.010454957,
      0.0023762248,
      0.008504627,
      -0.007025224,
      -0.0128742615,
      0.023989912,
      0.015998209,
      0.02479586,
      -0.007893267,
      0.008562302,
      0.0018554874,
      -0.0023761485,
      -0.016859613,
      0.010147674,
      -0.012523108,
      0.00037760477,
      0.017611595,
      -0.020997256,
      -0.006745555,
      0.00062895595,
      0.017902719,
      0.012640852,
      0.0052161105,
      0.009570744,
      0.000008924494,
      0.0036338565,
      0.015096626,
      0.0030835925,
      0.010847233,
      0.0008800735,
      0.019727446,
      0.014285914,
      -0.009088244,
      -0.0046627815,
      0.000575795,
      -0.0032328367,
      -0.016511489,
      0.0026989332,
      0.030923184,
      -0.010211581,
      -0.0032463933,
      -0.022152249,
      0.023314344,
      -0.0043896893,
      0.0044613723,
      -0.012968793,
      0.006045587,
      0.013155612,
      0.0026046778,
      -0.0017348351,
      0.013828659,
      -0.0045092055,
      0.014009887,
      -0.027935216,
      0.021007804,
      -0.0084173735,
      0.007243168,
      -0.0058395173,
      0.005468622,
      -0.011837474,
      0.020857612,
      0.024978343,
      0.008225147,
      -0.008874866,
      0.0071112965,
      0.012425869,
      0.0035089906,
      -0.010531873,
      0.012152552,
      0.017497111,
      -0.014280235,
      -0.009001074,
      -0.012204674,
      0.0064881113,
      0.0011960205,
      0.00560773,
      0.0025347662,
      -0.000014218327,
      0.001765045,
      -0.011344086,
      -0.004307517,
      -0.008315072,
      0.03405096,
      -0.01081028,
      -0.012594741,
      -0.0017488259,
      -0.020471385,
      -0.0154475765,
      -0.0023599605,
      -0.013477669,
      -0.013300546,
      -0.019441208,
      0.023579761,
      -0.0088938465,
      -0.030510962,
      -0.0034543902,
      0.0022712878,
      -0.013037413,
      0.011602809,
      0.00018534504,
      -0.005005391,
      -0.031793285,
      0.02030442,
      -0.024517966,
      -0.02320999,
      0.032952808,
      -0.0147640975,
      0.024888013,
      0.0056633195,
      0.013078946,
      0.0019175357,
      0.018115034,
      -0.033011135,
      0.014244944,
      -0.09519718,
      0.019029746,
      0.018406501,
      -0.023158655,
      0.021449035,
      0.01151434,
      -0.020043844,
      0.023918618,
      0.010500228,
      0.003872254,
      -0.0035776335,
      -0.026074294,
      0.025852922,
      -0.016282743,
      0.0062912605,
      -0.007095489,
      -0.015231211,
      -0.007654752,
      0.022085851,
      -0.010780047,
      0.021578552,
      0.0068189264,
      0.014126205,
      0.0041122036,
      0.011344849,
      -0.0036857706,
      -0.005814511,
      0.029471202,
      0.015657743,
      0.0016346546,
      -0.0043567005,
      0.029219203,
      0.00028541256,
      -0.0119000655,
      -0.009336052,
      -0.00017519762,
      -0.010155536,
      -0.010197431,
      -0.015058317,
      -0.013710643,
      0.018293554,
      0.0056025432,
      0.03765823,
      0.052648216,
      0.005991055,
      0.004154812,
      -0.0027658567,
      0.0128943715,
      -0.0057282886,
      0.004767743,
      -0.02531682,
      -0.008722934,
      0.019869402,
      -0.015317501,
      0.03051148,
      0.0034796589,
      -0.008357932,
      -0.025284985,
      0.009590741,
      0.006908433,
      -0.0012017179,
      0.0038024555,
      -0.012179116,
      -0.0067505473,
      0.01763252,
      -0.016700458,
      -0.007649178,
      -0.016212778,
      -0.012289742,
      0.0013389039,
      -0.0063766246,
      -0.0029980114,
      -0.025420615,
      -0.008848589,
      0.00022247712,
      0.005904876,
      0.0039112936,
      -0.006700226,
      -0.003105985,
      0.037354395,
      0.032804403,
      0.0015853336,
      0.0052939607,
      -0.0038211027,
      0.0072865547,
      -0.0011452027,
      0.016188389,
      0.0006164387,
      0.008055367,
      -0.012331574,
      -0.009042226,
      0.03917858,
      -0.01634104,
      0.0011563346,
      -0.018132534,
      0.005216737,
      -0.031397477,
      -0.015942372,
      0.002381579,
      0.01430212,
      -0.018996323,
      0.0015016876,
      -0.024095334,
      0.000489554,
      -0.010134895,
      -0.0016683363,
      -0.018642476,
      -0.016950885,
      -0.012405395,
      -0.01058006,
      -0.0043304265,
      0.0012308102,
      -0.0082488675,
      -0.0058150413,
      -0.011085849,
      0.026973564,
      0.004702359,
      0.015098304,
      0.01728473,
      -0.028093955,
      -0.0137701575,
      -0.009734788,
      0.012344516,
      0.023177108,
      0.011204909,
      -0.0032044158,
      -0.017595438,
      0.0042870264,
      -0.008382436,
      -0.017253373,
      -0.009836613,
      0.010843724,
      -0.02925395,
      -0.020975647,
      -0.0070250947,
      -0.017617734,
      0.018027173,
      0.014507252,
      0.009788625,
      0.012665159,
      -0.011594441,
      0.0003180816,
      0.011081146,
      -0.010306481,
      -0.0012171953,
      0.015573295,
      -0.019099899,
      -0.0150254015,
      0.0018761706,
      -0.015187021,
      -0.008280745,
      -0.03170234,
      -0.009000111,
      -0.0032962682,
      0.0041408087,
      0.0054036225,
      0.00081921153,
      -0.016473625,
      -0.013805552,
      -0.012398179,
      0.009512091,
      -0.0011477629,
      -0.0107389605,
      0.0012545139,
      0.04222839,
      -0.0060875383,
      -0.0039109555,
      0.0029408047,
      0.00040295266,
      -0.016185807,
      -0.0126779685,
      -0.012620558,
      -0.019681023,
      -0.022445627,
      0.03434564,
      0.0074378406,
      0.0008931796,
      0.0028519246,
      0.00571966,
      0.022280844,
      0.028688384,
      0.014599578,
      -0.04159005,
      0.022027977,
      0.007104115,
      -0.009028121,
      0.0033640806,
      0.010842953,
      -0.027384734,
      -0.017363152,
      0.00017713955,
      0.0072328765,
      0.013276996,
      0.020903029,
      0.01656275,
      0.010218295,
      0.0072429483,
      0.0032943068,
      -0.00943838,
      0.015506628,
      -0.0044424688,
      -0.008078687,
      0.0050299475,
      -0.0046157814,
      -0.005392966,
      -0.0081416145,
      -0.0064188316,
      -0.020679934,
      0.008666129,
      0.020441368,
      0.001863175,
      -0.0034634322,
      -0.0089245,
      0.005076082,
      0.01437074,
      0.023109026,
      0.0011870449,
      -0.026150594,
      -0.023015043,
      0.0058132485,
      0.024944836,
      -0.016076649,
      0.0026146036,
      -0.0097627565,
      0.010981471,
      0.00042099736,
      0.0106003275,
      0.0030008112,
      -0.0059738527,
      -0.018959401,
      -0.015878493,
      -0.0032483921,
      0.0015862,
      0.032430902,
      -0.029436123,
      -0.010198225,
      0.027511561,
      0.012034866,
      -0.027879482,
      0.010450211,
      -0.0019926142,
      -0.018178273,
      -0.023598151,
      -0.0012671202,
      0.0045286007,
      -0.021791652,
      0.014989056,
      0.0026518542,
      -0.007091144,
      0.011428395,
      -0.0018064417,
      0.0062790755,
      -0.020875277,
      0.0062177414,
      -0.031995,
      0.034620676,
      -0.02158422,
      0.008402078,
      0.014448097,
      -0.0052722744,
      0.007853281,
      0.030724354,
      0.014986763,
      0.021752832,
      -0.016128812,
      -0.027372742,
      -0.0055866735,
      -0.0011638851,
      0.0064733378,
      -0.12056659,
      -0.014512948,
      -0.023694536,
      0.01194332,
      -0.0027720747,
      -0.0027546056,
      -0.028249066,
      -0.024297217,
      0.004260831,
      -0.01407486,
      0.026526755,
      -0.020314086,
      -0.0037271057,
      -0.0065777567,
      0.024847694,
      -0.04934149,
      0.03539124,
      0.011986691,
      0.0028132414,
      -0.009595602,
      0.0065222993,
      0.018793158,
      -0.004073705,
      -0.007592887,
      -0.027376775,
      -0.008340775,
      0.01373464,
      -0.009899883,
      -0.0051439526,
      0.0012731154,
      -0.027213475,
      -0.009021904,
      0.0015434045,
      0.0036515256,
      0.0021117576,
      -0.007893723,
      -0.016968291,
      0.014972797,
      0.011836653,
      0.0013719489,
      0.007245485,
      -0.021431206,
      0.031499263,
      0.0026338417,
      -0.015355586,
      0.013427117,
      0.04058331,
      -0.007296248,
      0.0044160797,
      0.04065755,
      -0.026742646,
      -0.0066408804,
      -0.016388154,
      -0.026121492,
      0.0022931474,
      -0.0054439744,
      0.009242749,
      -0.012692706,
      -0.0016356903,
      -0.0072967247,
      0.012638364,
      -0.0016966504,
      0.011918576,
      0.018968618,
      0.012043653,
      -0.009217225,
      0.0044704988,
      0.010012988,
      -0.007291501,
      -0.007854008,
      -0.0034501306,
      0.009919245,
      0.004589027,
      0.006647667,
      -0.00039301038,
      0.013303843,
      0.009009246,
      0.007997891,
      0.0040442734,
      0.0033859059,
      -0.032651134,
      0.0038407475,
      -0.07198698,
      -0.019967228,
      0.016843537,
      0.002810475,
      0.024989005,
      0.0062904144,
      -0.00027641156,
      0.0011352904,
      0.014843935,
      -0.01239006,
      -0.02910184,
      -0.006678385,
      0.022472756,
      -0.0042486168,
      -0.0041427827,
      0.006214156,
      0.010387937,
      -0.014010001,
      -0.0139739,
      0.00074270717,
      0.0028893799,
      -0.011727095,
      0.02508685,
      -0.01614613,
      -0.0013731559,
      0.0152328145,
      -0.0064566135,
      0.0046753325,
      0.0034471625,
      0.019452287,
      0.008714012,
      -0.14414233,
      -0.02343103,
      0.009193247,
      -0.0006868754,
      0.011067601,
      -0.0024972644,
      0.0028879796,
      -0.035606578,
      0.020355899,
      -0.017699827,
      0.014782781,
      -0.018780665,
      -0.010530424,
      -0.014053685,
      0.021775477,
      0.1437826,
      -0.019691227,
      0.012482157,
      -0.017222019,
      0.0015727746,
      0.00013330672,
      -0.013327069,
      0.0054821465,
      -0.01001423,
      -0.010603166,
      -0.02604787,
      0.017765447,
      0.017949788,
      0.010818697,
      -0.009370465,
      0.00119235,
      -0.010029903,
      -0.0035463672,
      0.0154365795,
      -0.015198314,
      0.0011633494,
      -0.021824826,
      0.006756593,
      -0.0037612347,
      0.01255438,
      0.017200317,
      -0.0023274852,
      0.012717039,
      0.0013461303,
      0.0076754405,
      0.0043967534,
      -0.012102894,
      -0.0042147073,
      -0.0065104286,
      0.0044028,
      0.010003604,
      -0.044343866,
      0.00015462785,
      0.007630088,
      0.004145829,
      0.01218084,
      -0.015232456,
      0.01198147,
      -0.021869965,
      0.0154074915,
      -0.01821867,
      0.010516297,
      -0.008243489,
      -0.014510815,
      -0.00481058,
      -0.011118086,
      0.035554595,
      0.012351065,
      -0.004611969,
      -0.0036232301,
      0.0024918616,
      0.016342046,
      -0.008327546,
      0.020185921,
      -0.009034775,
      -0.012946024,
      -0.006026686,
      0.0223858,
      0.009175906,
      -0.0048057665,
      -0.005019473,
      -0.021094423,
      0.010554895,
      -0.016207526,
      0.011346653,
      0.0020392418,
      -0.013128394,
      0.011779142,
      -0.008615921,
      -0.004322186,
      0.015773347,
      0.0101352995,
      -0.0010004452,
      0.0025724848,
      -0.022008762,
      0.026431633,
      0.012126094,
      -0.0009817758,
      0.02297224,
      0.017454784,
      0.008273551,
      -0.015684368,
      -0.004820273,
      -0.02242539,
      0.015332836,
      0.02172609,
      -0.000162959,
      0.010944953,
      -0.008811888,
      -0.0077537615
    ]
  },
  {
    "id": "genai_cohort_python_07_Set_and_frozenset_in_python_vtt",
    "content": "Next up, we're going to take sets. 2 And sets are super easy in Python. 3 No need to overcomplicate them. 4 I have seen a lot of people 5 who complicate them. 6 These are known as set or 7 sets, whatever you want 8 to call them, no big deal. 9 Now the way how set works is first 10 you go through with the diagram. 11 So in case you have studied 12 them in, your engineering 13 or maths, that's okay. 14 If you haven't, let me give 15 you a small tour of that. 16 No worries, I'll be your 17 math teacher for a while. 18 So the word and the concept 19 of the set is mathematical. 20 And the way how it works is you have 21 some of the data just like here. 22 And we'll get this data into orange. 23 That's nice. 24 And we have another data which is 25 in another color, maybe yellow. 26 So the way how set works is when 27 you actually overlap these 28 two things, what you are getting 29 and how you are getting. 30 So we can see this whole thing is 31 divided into multiple portion. 32 But the interesting portion 33 is just right here. 34 This is where the interesting portion 35 is. 36 I'll just go ahead 37 and make it transparent. 38 So what we see that if this is 39 called as set A, this one is set 40 B means any amount of data. 41 So we can see this 42 here is a whole of A. 43 This thing is whole of B here. 44 But when we make an intersection, 45 this is point where we 46 actually mix, some portion 47 of A and some portion of B. 48 And yes, this is it. 49 So whatever is the common part here, 50 this is known as intersection. 51 Yeah, pretty unique 52 name, Intersection. 53 So this whole thing in between 54 is known as intersection. 55 Pretty easy. 56 When you want to combine 57 everything, that means you want 58 to have everything with you. 59 This whole thing, this whole 60 thing is known as union. 61 That means I want to have 62 everything which is in the A, 63 everything in the B, everything. 64 I doesn't really care. 65 But the only thing that I care 66 about, if there is something common 67 in both of them, don't repeat 68 it again, don't write it again. 69 Set is known as for their uniqueness. 70 So set is designed in such 71 a way that, hey, 72 everything should be unique. 73 So whenever you study about the set, 74 make sure one thing is there 75 in your mind, which is 76 everything is going to be unique. 77 Unique. 78 So set simply means 79 things are unique. 80 And again, union means I want 81 to have everything 82 of this, this is known as union. 83 But if you want to have just 84 portion of it, this portion of it. 85 Again, if there is anything common 86 between both of them in this part 87 as well, I will not take them. 88 But if anything is present 89 in the A, but Not in the B. 90 I will not take that 91 in the intersection. 92 So that is the most common. 93 We have some of the others as well. 94 Like you want to have difference. 95 That means, hey, give me the A. 96 But if anything is there 97 in the B also, don't give me that. 98 I think the better would be 99 to take an example. 100 Now that you understand 101 the theory, part of it. 102 Example would be super, super easy. 103 Moving on to the chapter number nine. 104 We are into chapter nine. 105 Py now. 106 What can we do? 107 So let's just say we have, 108 essential spices. 109 And the way how we write 110 the set is like this. 111 There are other ways as 112 well, but this is the most 113 easy way to write the set. 114 So we have, cardamom, 115 and we have ginger. 116 And another set that we 117 have is maybe cinnamon. 118 All right, we have another one. 119 This time we'll not call them 120 as essential spice, 121 but rather we'll call them as 122 optional spice, optional spice. 123 And we have to change them. 124 So instead of cardamom, let's have 125 cloves, and we'll keep the ginger. 126 But we're going 127 to change the cinnamon. 128 So ginger is the common part. 129 Again, the order doesn't matter. 130 It can be at any position. 131 That really doesn't matter. 132 So we'll have the black pepper. 133 All right. 134 Yes. 135 Being from India, I 136 know a lot of spices. 137 Now, let's just say I want 138 to have an all spices box. 139 And in the all spices box, I want 140 to have all of them, but there's no 141 point of having duplicate of them. 142 So for this, I can have a union. 143 And union combines unique spices. 144 So for this, all I have to do 145 is take the essential spices, 146 use this sign, which is just 147 below your backspace key. 148 This is a pipe operator, 149 also known as union. 150 And then I can go ahead 151 and have the optional spices. 152 And you get the idea the all 153 spices is just like that. 154 Should we print it out? 155 Probably yes. 156 All spices. 157 And we'll have all spices. 158 Open this up and let's 159 run the chapter nine. 160 And there we go. 161 We have the ginger, clove, cardamom, 162 black pepper, and cinnamon. 163 But there is no presence 164 of the ginger twice. 165 That's the whole goal. 166 That's the union. 167 You get all of them, but you 168 don't get the reputation. 169 It's a very unique property of this 170 and used actually quite a lot. 171 We can actually go ahead and find, 172 what are the common one of them. 173 So we can just go ahead 174 and write like this. 175 So I want to find the common spices. 176 What are the common 177 between both of them? 178 For This, I have to say 179 essential spice. 180 And we want to have 181 an intersection of it. 182 Remember, the intersection 183 is this portion. 184 So we want to have an intersection. 185 And this is how you write. 186 No, I wish it would be in 187 for intersection, but it 188 is actually ampersand. 189 So. 190 So we have the optional spices. 191 And the interesting part 192 is, what do we get in here? 193 So first of all, this is going 194 to be common spices. 195 And then instead of the all spices, 196 we'll have the common spices. 197 Let's run this. 198 This would be fun to see. 199 So in the common spices, we 200 can see the only ingredient 201 which is common is ginger. 202 Between both of them, if there 203 would be no common ingredient, 204 we would get nothing. 205 That's it. 206 One last thing that's remaining 207 up here is the differences. 208 So let's try to leave that. 209 Let's also learn about that. 210 We are going to call this one 211 as only in, not like that. 212 Only in essential. 213 So how do we do that? 214 I want to find the spices 215 which are only in the essential, 216 not in the optional. 217 So easy part. 218 I can take the essential spices 219 and I can remove all the optional. 220 There we go. 221 And then we can just go 222 ahead and print it. 223 So instead of common spices, we'll 224 just go for only in essential. 225 And we will say only 226 in essential spices. 227 Pretty easy. 228 I hope this demo gives you 229 an idea about how it works. 230 Only in essentials, 231 are cinnamon and cardamom, because 232 ginger is common for both 233 of them, so it's being removed. 234 Pretty fun. 235 Pretty easy. 236 There is also a final thing 237 in the world of set, which is 238 known as again, membership test. 239 And yes, membership test 240 remains exactly same. 241 Whenever you want to check whether 242 this member exists in a particular 243 set or not, you ask questions 244 and you can simply ask them. 245 For example, I can just 246 have a simple print statement 247 and formatted string. 248 I will say is. 249 Then again clove. 250 Again, I have to be 251 case sensitive here. 252 Clove. 253 Or did I wrote it as cloves? 254 Yeah, I wrote it as cloves. 255 Is cloves in essential spices? 256 And then simply use the curly braces 257 and ask, what do you want to check? 258 I want to check for cloves. 259 Where do you want to check in? 260 And whatever the variable 261 that is essential spices. 262 That's it. 263 You put this up and there we go. 264 We run this and it says, 265 is clove in essential spices False 266 because it doesn't exist. 267 Probably I wrote it wrong. 268 Cloves. 269 We'll copy this. 270 Oh, it's actually not 271 in essential spices. 272 It is in optional spices. 273 So that's why I thought 274 little different so is 275 it an optional spices? 276 Let's just see. 277 Optional spices. 278 Okay let's see. 279 Yes true this is available in this. 280 Now there is one more thing known 281 available in this 282 so far you can actually do all 283 the manipulation and everything 284 in the set set by default is known 285 for uniqueness only. 286 We don't worry about too much 287 but if you want to freeze any 288 of the set there is 289 a concept known as frozen set. 290 It is available it has built 291 an immutable unordered collection 292 of unique elements. 293 It is also being used sometimes 294 but again no need 295 to worry too much about this. 296 Just remember there is a set there 297 is a frozen set both of them are 298 available the working wise they are 299 exactly same no problem there. 300 That's it and pretty 301 much it about the sets. 302 Hope you have enjoyed it and let's 303 catch up in the next video. 304 Hope you have reviewed us.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "07 Set and frozenset in python.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/07 Set and frozenset in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.017240403,
      -0.021324957,
      0.034130998,
      -0.06806563,
      -0.015432433,
      -0.005696563,
      -0.0008762186,
      0.024177337,
      -0.0008613865,
      0.0091452245,
      -0.016802449,
      -0.012134941,
      0.0035953154,
      0.014958279,
      0.12735523,
      0.005362748,
      -0.017613728,
      -0.025991634,
      0.0024478466,
      -0.018537482,
      0.021712549,
      0.0050225547,
      -0.013241924,
      -0.0050800866,
      -0.007605941,
      -0.006033278,
      0.004804763,
      0.0035355098,
      0.014701312,
      -0.02332545,
      -0.0068487497,
      0.023042148,
      0.0029856095,
      0.022560047,
      0.0006874858,
      0.020460581,
      0.000120652054,
      0.011490008,
      -0.022247681,
      -0.0033010233,
      0.013974235,
      0.008667345,
      0.011808577,
      -0.017637739,
      -0.0015187208,
      -0.029116513,
      -0.007152377,
      -0.0073943343,
      -0.0067955307,
      0.007995418,
      0.006716151,
      -0.0013149895,
      -0.012315116,
      -0.17765266,
      0.03234635,
      -0.024644691,
      0.0050014686,
      -0.013502349,
      -0.01793922,
      0.021603629,
      -0.014552129,
      0.01940873,
      -0.052764256,
      -0.019785708,
      -0.022028556,
      -0.005834632,
      0.026414476,
      -0.022164728,
      0.0032419227,
      -0.011549023,
      0.022271654,
      0.0035379198,
      -0.025432684,
      -0.025257207,
      -0.022003539,
      -0.03073503,
      -0.005236068,
      -0.016715012,
      -0.03191401,
      -0.000388946,
      -0.008324857,
      0.004170898,
      -0.010381486,
      -0.007611197,
      -0.0026403097,
      0.0039778915,
      -0.02713228,
      -0.003105185,
      0.0067185764,
      0.0021718363,
      -0.010101798,
      -0.011025845,
      -0.022072153,
      0.0030943132,
      -0.008881078,
      0.009465638,
      0.0057358867,
      -0.00557954,
      -0.017318472,
      0.009100862,
      0.012613374,
      -0.002474308,
      -0.02220085,
      -0.019959249,
      -0.0068026464,
      -0.0077194846,
      0.019422343,
      -0.030089207,
      0.0014426241,
      0.009193658,
      0.005256838,
      0.000084487285,
      0.01772601,
      0.008448177,
      0.022643145,
      -0.17482688,
      -0.01736649,
      -0.0003100544,
      -0.02718591,
      0.036330298,
      -0.024690183,
      -0.015568405,
      0.01895233,
      0.007352676,
      -0.033187993,
      0.01100193,
      0.008062725,
      0.009298132,
      0.0015914597,
      -0.013697897,
      -0.007554472,
      -0.031138802,
      -0.015751194,
      0.010639698,
      0.00095570623,
      0.005832832,
      -0.022558816,
      -0.0047017396,
      -0.022598354,
      0.00068803626,
      -0.008628007,
      0.0067618256,
      -0.02279481,
      0.017584424,
      0.015715383,
      -0.0016814328,
      -0.0045198267,
      0.009722828,
      -0.009293612,
      -0.018502697,
      0.007451308,
      -0.0124963205,
      -0.00005047779,
      -0.006131098,
      0.0108249895,
      -0.024644228,
      -0.0049871504,
      0.019736027,
      -0.012540237,
      0.02647714,
      -0.011254169,
      0.026342029,
      -0.01647625,
      0.02013487,
      -0.018862825,
      0.0019185196,
      -0.00007557744,
      0.016081654,
      0.030759413,
      0.00038024504,
      -0.008527827,
      -0.0063921725,
      0.014451162,
      0.0006433459,
      -0.018684695,
      -0.007692268,
      -0.0115390355,
      0.019800171,
      0.00036755705,
      0.0019762458,
      -0.009534676,
      -0.019207574,
      0.00462636,
      0.00004816128,
      0.007231425,
      0.004929914,
      -0.005954777,
      -0.0004617193,
      0.00753971,
      -0.018176848,
      0.0065893973,
      0.007888649,
      0.0099396845,
      0.007444271,
      0.0027947123,
      -0.030979823,
      -0.004539696,
      0.009091262,
      -0.0015177677,
      0.01814194,
      0.017186794,
      -0.0025785796,
      0.009512386,
      -0.031907663,
      0.030730553,
      -0.0077150515,
      0.0027531998,
      -0.012408126,
      0.007922943,
      0.011449371,
      -0.023246521,
      -0.013207851,
      0.021032382,
      -0.00077233167,
      0.026784372,
      -0.011543638,
      0.02639546,
      -0.0035559095,
      -0.009402376,
      -0.013403486,
      0.007941894,
      0.002768919,
      0.005793079,
      0.018547988,
      0.017226938,
      -0.0006895137,
      0.005658122,
      -0.012045916,
      0.0029056023,
      -0.011920561,
      0.013778635,
      0.010437122,
      -0.025601506,
      -0.008196675,
      -0.001358365,
      0.010138488,
      -0.025528867,
      0.019643368,
      -0.0021668125,
      -0.004513364,
      -0.0022748434,
      0.0047475724,
      -0.009449427,
      0.004042846,
      0.03222408,
      -0.0026609795,
      -0.0063112387,
      -0.0015981441,
      -0.005043886,
      -0.014466272,
      -0.0073611075,
      -0.013332704,
      0.0076834536,
      -0.029616058,
      0.0024716926,
      -0.015155018,
      -0.018937552,
      -0.004789472,
      0.002607436,
      -0.0030874761,
      -0.0008710804,
      -0.008053556,
      -0.030682731,
      -0.02738462,
      0.0097363,
      -0.02169831,
      0.009985305,
      0.0135375215,
      -0.007318047,
      0.030353714,
      0.020707887,
      -0.004359452,
      0.0076178,
      0.013707675,
      -0.020816373,
      0.0017648123,
      -0.105753325,
      0.010853392,
      0.0015206338,
      -0.019362524,
      0.014758454,
      0.016636519,
      -0.015406859,
      0.02574025,
      0.005543478,
      0.014622722,
      -0.0076828077,
      -0.019988876,
      0.03248966,
      -0.01901218,
      0.017186735,
      0.014558966,
      -0.00045963857,
      -0.0024653692,
      0.023868939,
      -0.022305977,
      0.010745598,
      0.0014792137,
      0.008022694,
      0.00016767741,
      0.009274994,
      0.0057440517,
      -0.011022614,
      0.04564308,
      0.02099186,
      0.0071227853,
      -0.018763594,
      0.04187228,
      0.015439313,
      0.0074270265,
      -0.0054818126,
      -0.020616433,
      0.007621571,
      -0.007209676,
      -0.02393352,
      -0.0008278791,
      0.018859962,
      -0.00713824,
      0.0149164405,
      0.032807104,
      0.0043297284,
      0.005651498,
      -0.015927214,
      -0.012599646,
      -0.01124361,
      0.007020812,
      -0.02571973,
      -0.01485308,
      0.014600851,
      -0.017950656,
      0.012038982,
      0.0063062357,
      -0.0085833445,
      -0.005997215,
      0.0030777662,
      0.019008597,
      -0.005089644,
      -0.005719341,
      -0.0019257057,
      -0.014397393,
      -0.01231581,
      -0.0065544765,
      -0.0045304163,
      -0.014321433,
      -0.011866872,
      0.0019145913,
      0.0008231743,
      -0.018434199,
      0.0034419824,
      0.0016785417,
      -0.0060817795,
      -0.00473076,
      -0.01414988,
      -0.020679584,
      -0.010710769,
      0.021042246,
      0.02272915,
      -0.008839139,
      0.01138336,
      -0.015208693,
      0.015561671,
      0.016428053,
      0.00618951,
      0.0070884605,
      0.004642583,
      -0.02614226,
      -0.003054746,
      0.021024749,
      -0.027854312,
      -0.009346637,
      -0.030047137,
      -0.002221035,
      -0.011676094,
      -0.025069147,
      -0.019900957,
      0.0037240065,
      -0.0092274295,
      -0.0050611356,
      -0.023588995,
      -0.0035867728,
      -0.008312022,
      -0.0083547635,
      0.00509731,
      -0.0159223,
      0.0045417366,
      -0.011930153,
      0.0002071668,
      0.011852344,
      -0.0051556015,
      -0.019528534,
      -0.03130594,
      0.018257055,
      -0.0011807921,
      0.016195238,
      0.0078968685,
      -0.04139203,
      0.022778176,
      0.003919405,
      -0.0032741523,
      -0.0010339604,
      -0.010363568,
      0.008498666,
      -0.021364324,
      -0.026802655,
      -0.0056891004,
      -0.03982934,
      -0.0101935575,
      0.013508901,
      -0.021893542,
      -0.028217936,
      -0.017590161,
      -0.008001577,
      0.009639812,
      0.0053130914,
      0.0029873333,
      0.00022998279,
      -0.009188826,
      -0.0026529077,
      0.008433852,
      0.013159455,
      0.0011873917,
      0.033986278,
      -0.008097974,
      -0.011205488,
      0.018150713,
      -0.035223145,
      -0.017325634,
      -0.012588382,
      -0.020598873,
      -0.009127201,
      -0.008480153,
      0.011052507,
      0.0026839694,
      -0.0339913,
      -0.027057426,
      -0.0078074643,
      0.0029287199,
      -0.01280094,
      -0.0334364,
      0.015200505,
      0.0046800035,
      0.0074022138,
      -0.0040640673,
      0.01517434,
      0.0028411879,
      -0.0088893445,
      0.0037960866,
      -0.017892288,
      -0.040969912,
      -0.0006830098,
      0.00065201666,
      0.0018156146,
      0.013274806,
      0.019899124,
      -0.008834431,
      0.025641872,
      0.020877104,
      -0.0011694526,
      0.00043726753,
      0.0034081,
      0.0014773512,
      0.02974886,
      0.005425795,
      -0.0020423383,
      -0.01757717,
      0.016198715,
      0.0030650932,
      -0.008906976,
      -0.0054692947,
      0.016252158,
      0.0043151635,
      0.011046212,
      -0.007591263,
      0.0060052644,
      0.019313175,
      0.00564,
      -0.013360864,
      -0.0065991865,
      0.006878821,
      0.003478892,
      0.025909446,
      -0.016481763,
      0.0018925538,
      -0.017422775,
      0.017886674,
      0.016159236,
      0.018387591,
      0.0029243678,
      -0.001308019,
      0.0013394265,
      0.012155015,
      0.03521085,
      -0.0047028153,
      0.00064954505,
      -0.009416499,
      0.0034619085,
      0.024531325,
      -0.029799767,
      0.00022702343,
      -0.015185628,
      -0.0007742376,
      -0.0054216157,
      0.0068313316,
      0.0103744855,
      0.014812805,
      0.02231271,
      -0.023375474,
      -0.003380328,
      -0.0061293403,
      0.006259883,
      -0.008016222,
      -0.010245129,
      0.0047899242,
      0.0186762,
      -0.009259024,
      0.018069888,
      -0.0068747126,
      -0.00050521176,
      -0.0023860836,
      -0.001800146,
      -0.007388348,
      -0.012304361,
      0.008498263,
      -0.0010759386,
      -0.0039803362,
      -0.013829172,
      -0.0069543365,
      0.013233769,
      -0.0026750467,
      0.0022069786,
      -0.016101299,
      0.031568907,
      -0.01456073,
      -0.002304744,
      -0.01041733,
      -0.0063635036,
      0.012741746,
      0.030088669,
      0.015908761,
      0.005610817,
      -0.007055299,
      -0.0021564653,
      -0.00784691,
      -0.00837402,
      0.00021527513,
      -0.12402305,
      -0.0017839024,
      -0.0069394237,
      0.02512234,
      -0.0053439448,
      -0.01038667,
      -0.012434806,
      -0.01750013,
      -0.011454876,
      -0.01081767,
      0.021152338,
      0.0052129743,
      0.012282,
      0.006421154,
      0.021189807,
      -0.030689757,
      0.015706912,
      0.021777164,
      0.006361407,
      0.007788724,
      -0.01037721,
      0.003962771,
      0.0030469445,
      0.021815572,
      -0.027933503,
      -0.003296607,
      0.020459369,
      -0.014602026,
      -0.0031863744,
      -0.0065579643,
      0.002349728,
      0.014445539,
      0.0077134874,
      0.008665268,
      -0.010003126,
      -0.0047357944,
      -0.02907249,
      0.0007624804,
      0.0034592815,
      0.015042736,
      0.008771974,
      0.009454893,
      0.02887969,
      0.007779493,
      -0.0030080616,
      0.02532921,
      0.04818524,
      -0.01068368,
      0.0014114772,
      0.029841026,
      -0.034476668,
      -0.0040868823,
      -0.011861443,
      -0.020943435,
      -0.014955906,
      -0.021493152,
      0.011595037,
      -0.010902609,
      -0.0025869028,
      -0.0005604849,
      0.015006525,
      0.02179346,
      0.011979166,
      0.013811228,
      -0.009256916,
      -0.010021814,
      0.015379096,
      -0.0060853036,
      0.023437979,
      -0.015537095,
      -0.005275514,
      0.0008290017,
      -0.017966779,
      0.01086256,
      -0.00726788,
      0.016902648,
      0.0016875888,
      -0.012174534,
      -0.011997854,
      -0.010451562,
      -0.02352941,
      0.0014186025,
      -0.05019807,
      -0.026004603,
      0.015027239,
      0.023193702,
      0.019005144,
      0.026899625,
      -0.014812661,
      -0.0007487761,
      0.021647876,
      -0.0073669846,
      -0.030796934,
      -0.011784668,
      -0.012609628,
      -0.005946068,
      -0.028887479,
      0.017024318,
      0.00426252,
      -0.007892774,
      0.0073415223,
      0.012440867,
      -0.007700093,
      -0.0006465598,
      -0.0053216955,
      -0.019884856,
      0.023051485,
      0.01965648,
      0.0029586507,
      -0.0010188486,
      0.019132873,
      0.0050897365,
      0.04376015,
      -0.13836543,
      -0.0014274905,
      -0.015147231,
      0.0004122018,
      0.012523495,
      -0.000106792846,
      0.0027482861,
      -0.029393291,
      0.011693655,
      -0.020319885,
      -0.004670488,
      -0.016995018,
      -0.025101664,
      -0.018166088,
      0.02430436,
      0.13424769,
      -0.018969532,
      0.023737367,
      -0.014093495,
      -0.0030776737,
      0.0044524483,
      -0.03747967,
      -0.011845008,
      0.00015023172,
      -0.0050943284,
      0.00042186308,
      0.019183189,
      -0.003862271,
      0.013860354,
      0.0061079008,
      -0.022851454,
      -0.028250609,
      0.004228332,
      0.028071651,
      -0.023278262,
      -0.031396363,
      -0.0232644,
      0.005515868,
      0.007802522,
      0.00546178,
      0.019644454,
      0.0062872465,
      0.01260864,
      0.005140716,
      0.0019863776,
      0.0047374056,
      -0.0070289755,
      0.0019806148,
      -0.0014291273,
      -0.012978318,
      0.007244046,
      -0.049479295,
      0.017948002,
      0.0005428743,
      0.0012029053,
      -0.002298178,
      -0.018068444,
      0.0021801838,
      -0.015555149,
      0.0029603879,
      -0.0065829484,
      0.0060538016,
      0.0055978685,
      0.0061059278,
      0.010009882,
      0.015032392,
      0.0122130485,
      0.008257981,
      0.010433648,
      0.00027315083,
      0.007982687,
      0.020609286,
      -0.013787903,
      0.0131606385,
      0.0015185208,
      -0.011573172,
      -0.015274417,
      0.012617713,
      0.01132199,
      -0.00642823,
      -0.01384027,
      -0.0006496279,
      0.0053952746,
      -0.0056854626,
      0.028810728,
      -0.00096686126,
      -0.017682482,
      0.008214595,
      -0.007774854,
      -0.027190302,
      0.014088461,
      0.001626723,
      0.0077176145,
      -0.013692426,
      0.002405021,
      0.002164789,
      -0.0035873074,
      -0.023958365,
      0.04716652,
      0.009095959,
      -0.016548656,
      -0.015169452,
      -0.010067662,
      -0.030815532,
      0.009557452,
      -0.0001443019,
      0.020068677,
      0.011629063,
      0.010270567,
      -0.011062096
    ]
  },
  {
    "id": "genai_cohort_python_08_Dictionary_in_python_vtt",
    "content": "All right, so first of all, 2 let's close this and then 3 make sure that you have reviewed us. 4 Your review is truly important 5 for Udemy. 6 And without the reviews, 7 the Udemy course don't grow much. 8 That's why I'm reminding you 9 again and again, I don't like 10 it, but I have to do it. 11 All right, so the next topic that we 12 are going to work is dictionary. 13 So why does dictionary exist? 14 Once you understand the meaning 15 of it, then you'll be probably okay. 16 That okay, why this exist? 17 So so far whatever we have seen, 18 like for example, we 19 have seen the list exist. 20 The whole point of list 21 being existing here. 22 So for example, let's just 23 say we choose Ginger and we choose 24 Lemon and all of this. 25 There is no way of pointing 26 out that hey, where is Lemon? 27 Or is this. 28 What type of this? 29 So in order to address any one 30 of them, we have indexing system. 31 So we have zero and then we 32 have one just like this. 33 So we have a zero. 34 Come on, don't do it like this. 35 So we have indexing based on this. 36 So we have this zero here. 37 And if we have one here just 38 like this in no matter what 39 happens, I have to always 40 call this from the number zero. 41 This one always from the number one. 42 But it would be really nice that 43 if you have something which is 44 named based indexing, I can 45 call it as something like name. 46 Or for example you are using 47 or you are storing another 48 things in the database. 49 For example, I want to call 50 this as Hitesh and I want 51 to call this one as my last name. 52 So there should be a way 53 that I should call it as. 54 Instead of 0 and 1 I should 55 be able to call this 56 I don't like this one here. 57 I would love to call this as 58 first name and I can point 59 the first name to this. 60 It would be super awesome. 61 And that's exactly what 62 dictionary does it. 63 It gives you named argument. 64 You can actually store the data 65 just like this. 66 But each data will be pointed 67 through the name instead 68 of the zeros and one. 69 That is all. 70 That is all your dictionary is about. 71 And why do you go like this? 72 There we go, dictionary. 73 So let's go ahead and code it out. 74 It's a super simple piece of code. 75 We will call this one as chapter 10. 76 Py quite far, isn't it? 77 In the journey. 78 And I think we should rename this 79 bothers me a little bit. 80 Oops, don't want to delete it. 81 Let's rename this and I want 82 to call this one as chapter 10. 83 Okay, so how do we have 84 a dictionary in us. 85 So first of all let me close this 86 and let's just say you 87 have chiorder and you want 88 to store them in the dictionary. 89 You call dictionary just like 90 this, then a parenthesis 91 because it's a function. 92 And then you simply define that. 93 Hey, the type is going to be 94 this one is masala chai. 95 And then we want another one. 96 We have size 97 and the size could be large. 98 What else information 99 you want to store? 100 Maybe sugar information, how 101 much sugar you want to have. 102 So there we go. 103 Now this actually makes 104 my list much easier. 105 This is still list, 106 but it is a dictionary. 107 So it's a dictionary list 108 and I can store my information, 109 which gives me much more idea. 110 And I'm pretty sure you are 111 wondering how does it look 112 like when we print this up? 113 Always remember in the dictionary 114 order doesn't really matter. 115 Masala chai could be first or sugar 116 could also be first because we 117 reference the element by their name. 118 So we're going to call this 119 one as chai order just like this 120 and we'll say chai order. 121 Let's go ahead and print this out. 122 So we'll just go ahead 123 and say this one is one. 124 There we go. 125 So we can see we have the chai order. 126 Then we have type, masala, chai, 127 size, sugar and all of them. 128 This is much better of information. 129 Now let me walk you through more 130 of how we add the data. 131 Accessing data. 132 This is just a brief overview of it. 133 Let me go in depth of this now. 134 So for example, we 135 have a chai recipe. 136 Recipe. 137 There we go. 138 We have chai recipe and in this 139 we have an empty dictionary. 140 This is another way 141 of creating the dictionary. 142 If you have data, use dict or you 143 can use this curly braces as well. 144 But this is the most common way. 145 Now in each of this chai recipe 146 I want to add more data. 147 The way how we add the data is 148 by square brackets. 149 Then name your key. 150 This will be my key. 151 So this key name is, let's just say 152 base and then value, that I want 153 to add here is going to be black T. 154 This is exactly same the way 155 we call it as type or 156 maybe size or maybe sugar. 157 This is exactly what 158 we are doing here. 159 Base the value. 160 Like it could be masala chai, it 161 could be large, it could be two. 162 The same as here the black T. 163 That is it. 164 Now let's just say we want 165 to add one more thing, 166 but this time instead of base. 167 Otherwise we will overwrite it. 168 Let's call this one as liquid. 169 And I want to have 170 a liquid base of milk. 171 I don't prefer it, but let's 172 just say we have it now. 173 How do we access the data for this? 174 We'll print this just like this 175 and we will say recipe 176 base and I want to access just 177 the base, not the liquid. 178 So all I have to do is say chai 179 recipe and again use the same 180 mechanism how you added the data. 181 So there we go. 182 We add the base again. 183 Don't worry too much 184 about the single quotes. 185 Double quote. 186 That is totally fine both way. 187 It is absolutely fine. 188 If I go ahead and open this up, clean 189 this and run this notice here we 190 get the black T, not the whole milk 191 and everything, just the black T. 192 This is how you access this. 193 You can definitely go ahead 194 and remove some of the data as well. 195 We use del del to delete any 196 component inside the dictionary. 197 So how do we do that? 198 We simply say, hey, chai recipe 199 inside you there is known as a, 200 liquid and I want to just remove it. 201 You just have to provide 202 the key to remove it. 203 That is it. 204 Now let's just say if we go ahead 205 and print out the chai recipe, not 206 the base, I want to print out the 207 whole and we'll just call this as 208 recipe and we'll have another one. 209 So one printout we are doing before 210 deleting and after deleting 211 the liquid, we are doing one more 212 printout to just verify the claim 213 that we have made just right now. 214 So we'll clean this up. 215 There we go. 216 We have a base black T. 217 Then we have a liquid 218 key with the milk. 219 And now we can see we have just 220 the base black T because we have 221 removed, we have removed the liquid. 222 That is it. 223 Super simple. 224 Remember, there's nothing too 225 much going on in this one. 226 No surprises, no magic. 227 And yes, we can also do membership 228 testing in this one as well. 229 Whenever there's a data, there's 230 a list almost everywhere. 231 When there's a list, however, it 232 is contained in the square brackets 233 and curly braces and set. 234 You can perform membership test. 235 Let's go ahead and do this. 236 So we are going to say like this and 237 we will say is sugar, in the order 238 you want to test now whether sugar 239 exists in your very first element, 240 the chai order, is it available or 241 not? 242 So we can do a pretty easy stuff. 243 We can just go ahead and use 244 the curly braces 245 and I will just ask for sugar 246 in wherever you want to ask. 247 I want to ask for chai order. 248 Again, super simple. 249 We have seen the membership 250 testing many, many times. 251 So true, because sugar is 252 there and no worries at all. 253 Now there are a lot of things 254 that you can do with this. 255 I will actually go ahead 256 and walk you through with this. 257 So let's just say we 258 redefine the chai order. 259 So I'll just go ahead and have 260 a new order in this one. 261 So there we go. 262 This time the new order 263 is type ginger chai. 264 We have a size of medium sugar, 265 just like we have at the top. 266 So I've just redefined the new. 267 It's a new order. 268 Now we can actually check 269 what are all the keys, what 270 are all the values, what 271 are the full order items. 272 All of this. 273 This is something that you will 274 be doing quite a lot and this 275 is super easy to work on with. 276 So I will just go ahead 277 and say I want to print 278 and I will say order details. 279 This time I want 280 to print the keys only. 281 So if you want to print just 282 the keys, it is super simple. 283 I can just have the chai 284 order and I have dot. 285 This gives me all 286 the things that I can do. 287 And yes, we have 288 already seen the pop. 289 The way how POP works in the list 290 that exactly how it works 291 in the dictionary as well. 292 Items, keys, get from keys. 293 There's a lot of things. 294 Update the things. 295 If you want to update 296 certain things, values. 297 All of this when you 298 simply run the keys. 299 And again this is a method so 300 you have to just go ahead 301 and put parenthesis after it. 302 You will get all the keys. 303 What do I mean by keys? 304 The type is a key, 305 size is a key, sugar is a key. 306 And similarly I can get 307 all the values as well. 308 So I can just go 309 ahead and say values. 310 And again this time we'll say values. 311 So we have separated them, each one 312 of them that hey, this will be my 313 printout for all the keys. 314 And this will be my printout 315 for all the values. 316 If you want to get all the items. 317 Yes, there is a way or a detail. 318 I'll just say items 319 and you guessed it right, there 320 is items here as well. 321 Let's go ahead and print it out so 322 that we can see what's happening. 323 There we go. 324 A little bit hard to see, but again, 325 just pay a little attention. 326 This is Order details Keys 1, 327 these are DICT keys. 328 So dictionary keys. 329 Again, there is a way how you 330 extract each one of them. 331 We have to go through with one 332 of them known as loop. 333 But again you get the point. 334 We are just getting back. 335 A list means an array 336 and it has type, size and sugar. 337 Then in the values notice here, 338 order detail values, we are 339 getting values which has 340 ginger, chai, medium and one. 341 Pretty nice. 342 Now when we are getting the order 343 details in the items 344 format, then we get all of this. 345 So we have an array. 346 Notice the data type. 347 That is the most important part. 348 A lot of people study the data type. 349 Don't focus on the data type. 350 Don't do that. 351 So we have a whole 352 list outside of this. 353 But inside the list we have a tuple. 354 We just studied about it. 355 In the tuple we see a key pair. 356 The type is ginger chai, the size 357 is medium and the sugar is one. 358 So we have a tuple 359 of each one of them. 360 And this is really useful. 361 It's really beautiful. 362 So let's go ahead and do 363 a couple of more stuff. 364 I will just comment this out so you 365 can select all of them and press 366 slash so that it gets commented out. 367 Otherwise it will be 368 keep on printing. 369 I don't want it to be. 370 I don't want to execute this 371 whole piece. 372 So I can just use last item 373 and I can use the chai order 374 and I can pop an item. 375 I will just go ahead 376 and say pop item. 377 Not just pop, I want 378 to pop the whole item. 379 This will obviously remove this 380 thing, the entirety of the thing. 381 And you can actually 382 print this as well. 383 I will print just like this and I 384 will say removed last item. 385 And the value is last item. 386 There we go. 387 Similarly, we can actually 388 pop the sugar level as well. 389 If you want to pop, some like. 390 I will give you the example. 391 I think first let's print this out. 392 That will be better. 393 So removed item, sugar is one. 394 So now in our order 395 there is no sugar item. 396 So let's go ahead and use this. 397 We can actually use it 398 in quite a lot of ways. 399 But I think you got the idea. 400 I should not be confusing you 401 with more example pop item 402 just removes the item. 403 That is it. 404 Now you can also go ahead 405 and update certain things as well. 406 Just like this. 407 So let's just say I have 408 a simple and a small example. 409 I'll just go ahead and bring it 410 up because don't want to write it. 411 So let's just say we have spices. 412 We have previously written this. 413 No big deal. 414 We have cardamom. 415 We have crushed 416 ginger will be sliced. 417 So again, key value pair 418 could be anything. 419 Key can be anything. 420 Value could be anything. 421 Almost anything. 422 This time my key is just like this, 423 this one is value again. 424 So a lot of things can happen. 425 Now you want to update certain thing. 426 Maybe, you want to update 427 extra spices or you want 428 to update a chai recipe. 429 Remember we have a chai recipe 430 which has a base liquid. 431 Now you have more detail. 432 So what happens when I go ahead 433 and say, hey, chai recipe, 434 I want to go ahead and update you. 435 And while updating, I'm providing 436 you these extra spices. 437 Yeah, that's an interesting 438 observation to have. 439 And again, we can just print it out. 440 So let's just say we simply 441 go ahead and remove this. 442 And we will say updated chai recipe. 443 Updated chai recipe. 444 Recipe. 445 There we go. 446 And we will say chai recipe now. 447 There we go. 448 So this is what we have, chai recipe. 449 And again, we will investigate 450 this first, try 451 to predict what might happen. 452 That's always a good idea. 453 Let's go ahead and run this. 454 And there we go. 455 Updated chai recipe. 456 We have a black T, we have cardamom 457 crushed and we have ginger. 458 Pretty good. 459 And if you're wondering, hey, 460 in the chai recipe, 461 don't we have the liquid as well? 462 Don't forget we have 463 updated the code. 464 The liquid was removed. 465 So again, no worries on that. 466 And we have other things as well. 467 Like safely getting 468 the values out of this. 469 Let's just say we have, we want 470 to get some of more things. 471 Let's just say there is a customer 472 note I want to get out of the order. 473 But hey, when we design 474 the order, we have type ginger 475 size, medium, sugar one. 476 But there's no such 477 thing as customer order. 478 So what will happen if I try to print 479 this out or I want to get this? 480 Let's just say I want to get size. 481 So I'll just go ahead and say size 482 is going to be equal to or I will 483 just say better would be chai size. 484 And you know this already that 485 from the chai order 486 I can extract any one of them. 487 So I'll just extract the size. 488 And if I try to print this chai 489 size, that is okay, I will 490 update the message as well. 491 Chai size is. 492 Now focus on this. 493 This is a good code. 494 No problem at all. 495 If I go ahead and print 496 this out, all good choice. 497 Size is medium. 498 But what about if I try to get 499 something which is not yet there? 500 Maybe I want to get customer note. 501 Does customer note exist? 502 Probably not. 503 Or maybe customer underscore note. 504 What happens when I try to grab this? 505 If I grab this, I crash 506 my entire application. 507 It's not working anymore. 508 So there is a safe way of 509 getting the values out of this. 510 So in this case I would use 511 that hey, in the chai order, 512 I would like to use a method 513 that is dot get what it does. 514 It safely gets whatever 515 you're trying to get. 516 For example, I want to grab 517 a customer note and I will just go 518 ahead and call this one as note. 519 We'll still call it as chai size 520 or I'll change this one as well. 521 But if I don't get the note, 522 I mark this as no note. 523 No note was given to by the customer. 524 I think instead of the chai 525 size now it's better 526 to call it as Customer Note. 527 And then I can just print 528 this one as Customer Note. 529 Customer note is. 530 And what you will notice that now 531 the app is not crashing but it's 532 saying hey, no note was available. 533 And just to give you an example, 534 instead of the no note you 535 can actually provide that 536 hey, I want to grab the size. 537 The message doesn't make sense 538 but you will get the point. 539 What I'm trying to say that hey, 540 it's medium so it gets the thing 541 which you want but it doesn't crash. 542 Instead of if it doesn't find it. 543 I can provide the default value 544 here, which is pretty cool. 545 I like this approach. 546 And there are a lot of things that 547 you can do with the dictionary. 548 Again you have to read a little bit 549 of the docs and you 550 can provide a lot more information 551 in the dictionary. 552 And one last note before 553 we wrap this up video. 554 All the thing that we 555 studied in the sets. 556 Yeah, these all things actually 557 apply to dictionary as well. 558 I don't think there is a need 559 of again kind of redoing the things. 560 But yes, all the union operation 561 that you studied and all 562 these things, yes, they do exist 563 in the dictionary as well. 564 I think that is more than 565 enough information. 566 No point of doing it again 567 and again and again. 568 I hope this lecture was 569 interesting for you. 570 You enjoyed the learning 571 part of the data types. 572 We will do more operations 573 on this data type. 574 Right now we are just studying them. 575 That okay, this is 576 another type that exists. 577 That is it for this video. 578 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "08 Dictionary in python.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/08 Dictionary in python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.021885537,
      -0.02550734,
      0.011652717,
      -0.05073277,
      0.00048196962,
      0.00046435813,
      0.003342469,
      0.021096291,
      -0.009861017,
      0.009490593,
      -0.026722163,
      -0.01765401,
      0.010099158,
      0.008770016,
      0.1251796,
      -0.004513023,
      -0.008967045,
      -0.0018027442,
      -0.012568214,
      -0.021489237,
      -0.014706429,
      0.022754816,
      0.019490508,
      -0.024284935,
      0.019053325,
      -0.014580495,
      0.00862758,
      0.011852304,
      0.017937697,
      -0.020579677,
      -0.02060987,
      0.0039732293,
      0.007829043,
      0.018907744,
      0.007878207,
      0.005225182,
      0.0037137507,
      0.009659028,
      -0.027151335,
      -0.003327209,
      -0.012065861,
      -0.008192705,
      -0.014976238,
      -0.003475936,
      0.017952658,
      -0.02372843,
      0.007521717,
      -0.009562439,
      -0.013820194,
      0.009593626,
      0.012442409,
      -0.013558849,
      -0.006273157,
      -0.18827905,
      0.03421274,
      0.011937038,
      -0.01659697,
      -0.0041636303,
      -0.00042049115,
      0.004205165,
      -0.03788988,
      0.017508276,
      -0.043724664,
      0.00951531,
      0.006943442,
      -0.020379405,
      0.025887514,
      0.0033068599,
      0.0023155452,
      -0.0005077552,
      0.014353812,
      -0.00055308914,
      -0.004145496,
      -0.008872898,
      -0.011240574,
      -0.031048503,
      0.018779585,
      -0.016910315,
      0.0059545157,
      0.01968302,
      -0.0139402505,
      -0.005727157,
      -0.0017557152,
      0.008994646,
      -0.00029497844,
      0.019116132,
      -0.00758366,
      -0.012102982,
      0.0055443887,
      -0.0036413334,
      -0.016854256,
      -0.0077054217,
      0.00796264,
      0.005915849,
      -0.0089167785,
      0.008048056,
      0.0025910758,
      0.0064398525,
      -0.0063167275,
      0.013154788,
      0.014747525,
      -0.023255449,
      -0.018808832,
      0.005103077,
      0.0023286487,
      -0.0025587159,
      -0.0004403408,
      -0.020407248,
      -0.0031088004,
      -0.00035319116,
      0.003212427,
      -0.007012961,
      0.00943992,
      0.023286661,
      0.028539594,
      -0.18912055,
      0.0029863492,
      -0.02254703,
      -0.021860497,
      0.012863466,
      -0.01411149,
      0.0034414362,
      -0.0026017576,
      0.0099636195,
      -0.031045482,
      0.0005629177,
      -0.003611545,
      0.029172352,
      0.012102556,
      -0.010025884,
      -0.028070327,
      -0.0160527,
      -0.012669368,
      0.020934492,
      -0.0036037776,
      0.008578741,
      -0.031631358,
      -0.010423459,
      -0.010466203,
      -0.0058288933,
      -0.004311554,
      0.013314565,
      -0.017899614,
      0.019333169,
      0.0060056974,
      -0.019453172,
      -0.01887309,
      0.00007493472,
      -0.03606084,
      -0.02003445,
      0.021886157,
      -0.0052891187,
      0.001309172,
      0.0022597602,
      0.03234333,
      -0.008628667,
      -0.005378499,
      -0.004752371,
      0.0070818113,
      0.008643065,
      0.024098165,
      0.012855336,
      0.009853216,
      0.0055409577,
      -0.0058971033,
      0.0076560243,
      -0.023883918,
      0.00052654307,
      0.03827353,
      -0.003651332,
      -0.0075469813,
      -0.012619275,
      0.0070855906,
      0.0069448045,
      -0.007149005,
      -0.0131192645,
      0.01104258,
      -0.003679655,
      0.010493571,
      -0.013398542,
      0.001836655,
      -0.02915936,
      0.011321395,
      0.0037327884,
      -0.0021363532,
      0.0062367185,
      0.012420933,
      0.001162673,
      0.009049395,
      0.011077165,
      0.0010448669,
      -0.0025772045,
      0.027254758,
      0.0008216918,
      -0.0021447577,
      -0.024975711,
      -0.015989333,
      0.016235579,
      0.0006229935,
      0.0180091,
      0.0127345035,
      0.0023349598,
      -0.002948928,
      -0.023736676,
      0.044828385,
      -0.0031142489,
      0.016229616,
      -0.025267307,
      0.03337772,
      0.00629404,
      -0.0009887554,
      -0.0149603095,
      0.03097959,
      0.00090539595,
      0.015286981,
      -0.019028611,
      0.010296408,
      -0.005675286,
      0.003133002,
      -0.01694968,
      0.016846113,
      0.012901309,
      0.014169334,
      0.026136886,
      0.014303961,
      -0.009570594,
      -0.0042948187,
      0.00070633355,
      0.010674506,
      -0.009231775,
      0.03815713,
      0.002261153,
      -0.014407609,
      -0.013454586,
      -0.01996771,
      -0.012302466,
      -0.011379562,
      0.0063187894,
      0.008041598,
      -0.002949684,
      0.0007785146,
      -0.01846326,
      -0.0058195577,
      0.014584813,
      0.020113375,
      -0.018743226,
      -0.005304396,
      0.00624493,
      0.004624438,
      -0.017437873,
      -0.0054034335,
      -0.010774461,
      0.007834168,
      -0.016121538,
      -0.0018444122,
      -0.02447227,
      -0.024187094,
      -0.02235189,
      -0.017820965,
      0.0027018418,
      -0.017687153,
      -0.02873081,
      -0.02422148,
      -0.005285436,
      0.036908682,
      -0.002231953,
      0.006504767,
      0.011454057,
      -0.009028327,
      0.021473197,
      0.025029551,
      0.014941559,
      0.0012784929,
      0.021056868,
      -0.028409682,
      0.018339694,
      -0.105798826,
      0.016447421,
      0.007751698,
      -0.0057827993,
      0.0061404835,
      0.016943844,
      -0.01146986,
      0.013861791,
      0.0039465134,
      0.021003501,
      0.0061628404,
      -0.01777161,
      0.02650753,
      -0.012387383,
      -0.0038713093,
      -0.016122181,
      -0.0024371026,
      -0.013389528,
      0.020370578,
      -0.0071682343,
      0.004851246,
      0.001816027,
      -0.005099146,
      -0.023426486,
      0.0065367804,
      0.0022785144,
      -0.014643906,
      0.026683457,
      0.025023328,
      0.0045135138,
      -0.015175251,
      0.039526783,
      -0.008062548,
      -0.01278563,
      -0.0035366353,
      0.01160383,
      -0.004450612,
      -0.014156576,
      0.0009945806,
      -0.0103972,
      0.026641557,
      0.0027143273,
      0.0037183044,
      0.016492628,
      0.000052909716,
      0.019341841,
      -0.0107599115,
      -0.008116289,
      -0.015293901,
      -0.006621041,
      -0.008034995,
      0.0063831364,
      0.014342005,
      -0.007854151,
      0.008968428,
      0.0028388463,
      0.0044405367,
      -0.015310101,
      0.014156902,
      0.012751492,
      -0.015098084,
      -0.0063773287,
      0.022676317,
      -0.036693707,
      0.010396853,
      -0.020826936,
      0.015628397,
      -0.008931579,
      -0.010835146,
      -0.005409426,
      0.0096438145,
      -0.012681655,
      -0.009957641,
      -0.004705389,
      -0.0075812116,
      -0.004302634,
      0.0023683477,
      -0.010082215,
      -0.02362612,
      0.029239444,
      0.024922254,
      -0.017130269,
      0.0123139955,
      0.012106411,
      0.00426144,
      -0.008509073,
      0.009185197,
      0.0014617643,
      -0.007603888,
      -0.0155213475,
      0.012271036,
      0.005076089,
      -0.0006501284,
      0.0033423887,
      -0.028705463,
      -0.007436897,
      0.0009472125,
      -0.029112307,
      -0.006884114,
      0.018782668,
      -0.014665281,
      -0.00059519196,
      -0.023715088,
      -0.005598623,
      0.007958179,
      -0.0094222175,
      -0.029463014,
      -0.012111106,
      0.0038015586,
      -0.018758673,
      -0.006909208,
      0.0011865308,
      -0.029857859,
      -0.019152574,
      -0.0002911759,
      0.0152611,
      0.016297178,
      0.01522344,
      0.00075819006,
      -0.032518934,
      -0.009898659,
      -0.0060197474,
      -0.016432637,
      0.0021649236,
      0.0008845192,
      -0.0033011667,
      -0.014191949,
      0.011492443,
      -0.0044991905,
      -0.015107298,
      -0.025262011,
      -0.0011781843,
      -0.032557417,
      -0.02682972,
      -0.014647722,
      -0.042030074,
      0.013426886,
      -0.0049864207,
      0.02304575,
      0.008390188,
      -0.010113222,
      0.011642446,
      -0.013348526,
      0.0045902664,
      0.008600041,
      0.014511703,
      -0.01616434,
      -0.013407769,
      0.0011523225,
      -0.02500539,
      -0.01731396,
      -0.028623674,
      -0.012838792,
      0.0019380905,
      0.004731558,
      0.0119706215,
      -0.008637577,
      -0.0031136298,
      -0.022980422,
      -0.026137488,
      0.0038278436,
      0.0033170192,
      -0.030154988,
      -0.007762285,
      0.029279731,
      0.007512575,
      -0.00078433624,
      0.012718033,
      -0.0056758076,
      0.00023708357,
      -0.011779799,
      -0.019964578,
      -0.038492203,
      -0.01674969,
      0.019641185,
      -0.0016328809,
      0.0010814017,
      -0.0018330199,
      0.006359458,
      0.00813845,
      0.025663918,
      0.005533559,
      -0.008624521,
      -0.007849219,
      0.0043442682,
      0.0035406274,
      0.024621135,
      0.0067753303,
      -0.020379364,
      0.00044499175,
      0.0013300097,
      0.011206041,
      0.0025617548,
      0.0037512856,
      -0.01145282,
      0.0064618858,
      0.007246273,
      0.007804237,
      0.0075103315,
      0.0002378293,
      -0.0036531705,
      0.008341312,
      0.0014855578,
      -0.0145648625,
      0.00751737,
      -0.032816425,
      -0.0027212172,
      -0.043727357,
      -0.00006972826,
      0.027876304,
      0.0038945647,
      0.016335377,
      -0.0036158648,
      0.0017058557,
      0.0054091364,
      0.023675462,
      -0.0046082884,
      -0.009720117,
      -0.030097121,
      0.0050627007,
      0.02028381,
      -0.013599712,
      0.007933304,
      -0.017703071,
      0.011868519,
      -0.0037126155,
      -0.014115963,
      0.0061771413,
      0.007273323,
      0.012403836,
      0.004742962,
      0.004550149,
      0.0053112856,
      0.013768811,
      -0.0075530624,
      -0.019503586,
      0.01871843,
      0.021397423,
      -0.00035021213,
      0.019834535,
      0.0072347973,
      -0.014276429,
      0.0030930904,
      0.001296396,
      -0.0068899076,
      -0.020338831,
      0.005781643,
      -0.0069099665,
      0.012752091,
      -0.0075814975,
      -0.0056787254,
      0.02270769,
      -0.014987401,
      -0.011917402,
      -0.0017223018,
      0.021123938,
      0.0020012914,
      -0.0048345122,
      -0.0057296674,
      0.00391621,
      0.006533812,
      0.016817817,
      0.007890169,
      -0.0004761169,
      -0.01046964,
      0.006890545,
      -0.015666306,
      -0.009378623,
      0.012136234,
      -0.1224392,
      -0.017747534,
      -0.0084662,
      0.003065457,
      -0.008855179,
      -0.0114571005,
      -0.015440296,
      -0.028136024,
      -0.0060684825,
      -0.011486739,
      0.015219741,
      0.0022517534,
      -0.00774497,
      -0.0045473874,
      0.0032762142,
      -0.028755764,
      0.0098747825,
      0.02109709,
      0.01249902,
      -0.013460888,
      -0.017103234,
      0.0019456528,
      -0.025784723,
      -0.004938454,
      -0.014880012,
      -0.043027177,
      0.010090145,
      -0.00595203,
      0.0033149049,
      0.0021484692,
      -0.020686785,
      -0.009427191,
      -0.0030813955,
      -0.0017722952,
      0.014474945,
      0.0023442532,
      -0.014387419,
      0.01990652,
      0.030511992,
      -0.005845627,
      -0.008774307,
      0.0039358214,
      0.014228728,
      0.010103986,
      -0.005274024,
      0.015519855,
      0.0350718,
      -0.027180837,
      -0.005907092,
      0.02790914,
      -0.030879054,
      -0.01397773,
      -0.003879493,
      -0.029575342,
      -0.006784513,
      0.006222292,
      0.008529535,
      -0.007123865,
      0.0058393506,
      -0.0017918623,
      -0.006641269,
      0.020279996,
      0.005092682,
      0.033295106,
      -0.0027139988,
      0.014976482,
      0.03490849,
      0.011900429,
      -0.011934423,
      0.0046064737,
      0.017534805,
      0.008286547,
      -0.0072732703,
      0.012620213,
      0.009134248,
      0.00596842,
      -0.000080839905,
      -0.0034413699,
      0.0027253977,
      0.0075911474,
      -0.03205313,
      0.0038268554,
      -0.0704882,
      -0.02797182,
      0.011419948,
      0.01294366,
      0.0088211745,
      0.032511555,
      -0.011756845,
      0.003698831,
      0.01821375,
      -0.002572544,
      -0.016033312,
      -0.010405405,
      0.013618586,
      -0.008320267,
      -0.023921365,
      -0.010097094,
      -0.0036095893,
      -0.0135453725,
      -0.017237782,
      -0.002474699,
      -0.00062389724,
      -0.01157337,
      -0.00087242795,
      -0.011787421,
      0.0040178304,
      0.02430155,
      -0.0014224922,
      0.0041862265,
      -0.004662533,
      -0.0023086302,
      0.013648827,
      -0.15912305,
      -0.025516039,
      -0.010693731,
      0.0023942355,
      -0.004164113,
      -0.00049129647,
      0.006611987,
      -0.01451993,
      0.019848986,
      -0.00858688,
      0.009959619,
      -0.022104446,
      -0.03192643,
      -0.011933468,
      0.013263109,
      0.12420764,
      -0.009689038,
      0.0083947405,
      -0.012014729,
      0.0010849548,
      -0.014889831,
      -0.0323307,
      -0.0010807507,
      -0.0048732106,
      -0.014690108,
      -0.0057920725,
      0.00071478484,
      -0.019936519,
      0.023373343,
      0.013205087,
      -0.006928051,
      -0.012579166,
      0.006676209,
      0.027121412,
      0.005404756,
      -0.004677316,
      -0.0028317827,
      -0.0063729817,
      -0.004029888,
      0.016476294,
      0.037228968,
      -0.0047951653,
      0.021402063,
      0.004219038,
      0.006279149,
      0.0059273085,
      -0.014569366,
      -0.012270093,
      -0.02308656,
      0.0054047094,
      0.00827341,
      -0.045428663,
      0.0011020264,
      -0.0010512415,
      -0.0047877817,
      -0.002064199,
      0.01313033,
      0.026463756,
      0.0037193452,
      0.018123638,
      -0.0128683,
      -0.002824114,
      0.016236879,
      0.0046763937,
      0.0076140366,
      -0.019072859,
      0.021044042,
      0.010982535,
      0.005218196,
      0.004238349,
      0.012807132,
      0.02085196,
      -0.002491308,
      0.009230431,
      -0.016207691,
      -0.023738792,
      -0.013758645,
      0.027338114,
      0.013314174,
      -0.011114131,
      -0.00546117,
      -0.003327613,
      -0.0032224227,
      -0.007433431,
      0.03375144,
      0.012891568,
      -0.0057748314,
      0.008839094,
      -0.016793346,
      -0.009607488,
      0.017250635,
      0.009965517,
      -0.01619936,
      0.020681683,
      -0.0020216906,
      0.016081702,
      0.004885842,
      -0.019177929,
      0.037117526,
      -0.00064466195,
      -0.01694799,
      -0.008803852,
      -0.008030496,
      -0.04173683,
      0.0049172128,
      -0.0051975246,
      -0.0016217045,
      0.0329454,
      0.004209368,
      -0.0023883465
    ]
  },
  {
    "id": "genai_cohort_python_09_touch_on_advance_data_type_like_collections_vtt",
    "content": "Hey there. 2 Welcome to the video 3 on advanced data type. 4 To be honest, I don't want to 5 make this video yet because this 6 is too early for you just 7 getting started with Python now, 8 these advanced data type do 9 exist, but they don't exist in 10 Python itself. 11 You have to bring in code that 12 is written by somebody else. 13 That means we want to bring in some 14 third party modules into our code. 15 The module is just a fancy name. 16 You are bringing somebody 17 else's code in our computer 18 or in our program rather. 19 And you shouldn't be watching 20 this video to be honest. 21 But still, I don't want to keep 22 this knowledge just with me, I 23 want to share it with you as well 24 so that maybe later on, probably 25 after having six month into the 26 Python experience, you want to 27 have a taste of it, you at least 28 get the idea of what I'm talking 29 about. 30 So I will be just showing you briefly 31 of some of the code and then 32 we will not discuss them too much. 33 But still you will have an idea 34 that okay, this, these things 35 do exist and I probably 36 can work on them on someday. 37 That's the whole goal, that's 38 the whole idea about them. 39 So first of all let me just 40 get this, that what are 41 the advanced data types that are 42 available for us in this? 43 So there are a lot of them. 44 First of all is date time. 45 Yes, it includes date and time 46 both at the same time. 47 But there is a separate one 48 known as just for time. 49 There's also a data type known 50 as calendar and this is 51 little bit strange calendar. 52 Hope I wrote it correct. 53 But, but yes these data type do exist 54 and they don't are not default, 55 they are not being used that much. 56 But you can actually manipulate 57 date, you can manipulate date time, 58 you can manipulate time and you 59 can manipulate calendar as well. 60 There's also a package which 61 actually can works with 62 something known as time delta. 63 What is this time delta? 64 Maybe you want to discuss some 65 duration duration between 66 when order was fetched and the order 67 was delivered to the user. 68 Or maybe just how much time it 69 took for your program to run. 70 There are a lot of deltas. 71 Deltas simply means difference 72 between the two things. 73 So yes, you can work with time deltas 74 as well and there are some 75 of the utilities that you bring in. 76 For example there is one 77 utility known as arrow. 78 Yes we import this so import arrow. 79 There is another one which 80 is known as date util. 81 We can actually work 82 with them and go with this. 83 I will just show you briefly 84 a little bit idea of how 85 the arrow or the date util works. 86 I think we should separate 87 this out, otherwise 88 it can be a point of confusion. 89 So arrow is one separate one 90 and another one is date util. 91 So make sure you remember 92 these are not the core python. 93 It's kind of a core Python now, 94 but you have to import them and 95 whatever the code we have written 96 so far, we don't have any import 97 statement because we don't have 98 the knowledge of how the import 99 works. 100 So I'll just go ahead 101 and briefly show you. 102 It was not supposed to be a part 103 of the chapters, but still, just to 104 make sure that you understand that, 105 yeah, a lot of things can be done. 106 So the step one is go ahead and 107 import arrow Arrow and once you've 108 imported the arrow, now you can 109 actually do a lot of things and 110 please don't suggest me the things 111 because most of the time you don't 112 do a good job. 113 So arrow, as soon as you put 114 this, you have a lot of things. 115 I hope the suggestion will be there. 116 But there is one thing that you 117 can use UTC now it gives you a UTC 118 time and you can store that and can 119 work with a lot of things. 120 Maybe you want to store that like, 121 brewing, brewing, underscore time. 122 That is your time. 123 And maybe you want to convert 124 this time later on so you 125 have the option of that. 126 Hey, I have this brewing time 127 and now I want to convert it into 128 some another time zone, so you 129 can just mention it like this. 130 And maybe I want to convert it into 131 Europe, slash, maybe roam. 132 If you know any other time 133 zone, go ahead and fill that. 134 So it just converts 135 it into time zone. 136 Not only that, we have a lot 137 more things available to us 138 in the world of data type. 139 This is just one time is very 140 common and most easy one. 141 But there is something known as 142 whole thing available to us. 143 This is mostly advanced data 144 type known as collections. 145 Yeah, collection is a big 146 thing in the python. 147 If I'll just show you directly. 148 I don't think so, I can actually show 149 you here, I have to search it again. 150 Collections, Python. 151 If I just search for it. 152 There we go. 153 Official documentation. 154 So we have these things available. 155 We have named Tuple. 156 We don't have it, but we 157 can actually bring it up. 158 We have named Tuple, we have deck. 159 Yes, this is called as DEC, not DQ. 160 I'm 100% sure about it. 161 We have chainmap, we have counter, we 162 have ordered dictionary, we have 163 default dictionary, user dictionary. 164 There's a lot of them and you 165 can use any one of them. 166 But there is a way how you 167 actually use Them right now we 168 don't have the capacity to use 169 it but still I'll show you. 170 Usually I keep all of my imports 171 above but for this just 172 example I'll make an exception. 173 So from collections you can 174 actually import whatever you like. 175 Probably you like. 176 Maybe you want to bring 177 the named tuple and want 178 to see how that works. 179 Now this will just give 180 you additional data type. 181 You have to bring it at the very 182 top, otherwise you cannot use it. 183 We can use strings, we can use 184 dictionary, no import was required 185 but for this it is required. 186 So for example maybe you 187 are bringing chai profiles. 188 Should I use it like this? 189 Chai profile it is good Chai 190 profile and what we are going to 191 do is in the chai profile we'll 192 use the named tuple and then we 193 can actually use this named tuple 194 just like this. 195 So what difference does it make? 196 Now since my tuple is going 197 to be referred by a name, I can 198 provide a name like Chai profile. 199 This will be the name of my tuple, 200 not the variable and I think we 201 should keep it just like that. 202 And then I can have my tuple 203 and the way how 204 you do it is iteratable. 205 That means an array or 206 a list just like this. 207 So we'll have a flavor, what else? 208 We can have aroma, what else? 209 Color maybe all the things 210 and this is how you do it. 211 Now you just print 212 the profile of this. 213 So a lot of things can be done. 214 But yes again each of them are built 215 on top of your default things. 216 Like this is a string we have studied 217 about them, this is a list, 218 they are built on top of that. 219 What nametuple does is it 220 brings it up all together. 221 That's all it does. 222 Now usage and everything is 223 very use case sensitive. 224 You have a special case 225 where you want to use them. 226 Forcing them right now 227 to learn is not a good idea. 228 So that is why I say this is 229 just a bonus extra lecture. 230 We have more data types 231 in available in Python and surely 232 there is no end of it. 233 But right now is not the good time. 234 We will surely cover them 235 up and later on we'll discuss them. 236 And if I forget, don't forget 237 to tweet me about it that hey, we 238 discussed something about it. 239 I would love to enhance 240 this course as one stop solution 241 to learn Python. 242 So don't hesitate to tweet this out. 243 But again right now this is more than 244 enough data type knowledge for you. 245 Now we need to learn how we can 246 manipulate the data data storage. 247 We are all clear now what kind of 248 processing we can do with the data. 249 That is our goal. 250 Now, let's go ahead, move 251 on to the next video and talk 252 about that in there. 253 And again, don't forget to review us.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "09 touch on advance data type like collections.vtt",
      "originalPath": "genai-cohort/python/02 Chapter Subtitles/09 touch on advance data type like collections.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.021258226,
      -0.019726543,
      0.016937092,
      -0.050412472,
      -0.021388011,
      0.006437537,
      0.013720756,
      0.023297822,
      0.00703449,
      -0.009129588,
      -0.02184513,
      -0.009897692,
      0.007822465,
      0.038501423,
      0.11650124,
      0.009783057,
      -0.017966323,
      -0.021948151,
      -0.0018634018,
      -0.0068071047,
      -0.00607503,
      0.0022287206,
      0.007979583,
      -0.010179712,
      0.014610785,
      -0.00965042,
      -0.007150405,
      -0.017829202,
      0.030153532,
      -0.0004326589,
      -0.015162771,
      -0.008047933,
      -0.0026649877,
      0.010374955,
      0.010395966,
      0.0031228547,
      0.010117363,
      0.0040697986,
      -0.0025043369,
      0.0076842126,
      -0.026624434,
      0.0068226797,
      0.002880594,
      -0.009238239,
      0.0051999018,
      -0.0071992087,
      0.007608705,
      -0.023798414,
      -0.006872412,
      0.016037185,
      0.008921741,
      0.008407204,
      -0.005394165,
      -0.18062185,
      0.04392306,
      0.010743891,
      -0.005620986,
      -0.005150532,
      0.010802318,
      0.008497461,
      -0.035127066,
      0.015592223,
      -0.047457907,
      0.01125255,
      0.009479011,
      -0.018848708,
      0.008239051,
      0.0033059176,
      -0.0038044974,
      0.006066951,
      0.0245144,
      -0.025223149,
      -0.028909327,
      -0.02285122,
      -0.0032966658,
      -0.030643297,
      0.012427949,
      -0.0063125803,
      -0.0100989565,
      0.015426736,
      0.00312587,
      -0.012071431,
      -0.020624185,
      0.0032104433,
      0.014576557,
      0.010583008,
      -0.019708805,
      -0.01756251,
      0.0060894615,
      -0.0080240015,
      -0.018708613,
      0.0047979625,
      -0.0054301852,
      0.020130975,
      -0.006143859,
      0.010894354,
      -0.0037885117,
      -0.0023400297,
      -0.0055003464,
      -0.013362261,
      0.02046932,
      -0.013410188,
      -0.0158221,
      -0.012147153,
      0.008127946,
      0.01391815,
      -0.01143524,
      -0.005028279,
      0.004784631,
      -0.0066100573,
      0.011568824,
      -0.013965614,
      0.002748138,
      0.042463087,
      0.027915122,
      -0.1782871,
      0.0058670607,
      0.012267623,
      -0.017340071,
      0.007867299,
      -0.008238215,
      0.008705016,
      -0.0066699353,
      -0.004361298,
      -0.025934437,
      0.0021779586,
      0.005780332,
      0.016561892,
      0.0075361393,
      0.00470518,
      -0.0077271457,
      -0.017026955,
      0.006491008,
      0.012926619,
      -0.0074053067,
      0.0061217723,
      -0.022313802,
      0.002690725,
      -0.003828068,
      -0.0021901212,
      -0.0005877095,
      0.024313997,
      -0.0077617513,
      0.022838809,
      -0.0057138675,
      -0.005312574,
      0.0042561274,
      -0.0015242527,
      -0.027495326,
      -0.030049069,
      -0.0005016965,
      -0.017849952,
      0.003186228,
      -0.0065684067,
      0.022082327,
      -0.029648015,
      0.00008024838,
      0.007702976,
      0.0030406318,
      0.008498689,
      -0.006850748,
      -0.0053442204,
      -0.002866086,
      0.01584566,
      -0.0070224465,
      -0.0004876163,
      -0.037827928,
      0.005767233,
      0.052112702,
      -0.005624522,
      -0.011106321,
      -0.01947086,
      -0.02616472,
      0.006178739,
      -0.028509252,
      0.007656136,
      -0.00090681325,
      0.001416405,
      0.0007565686,
      -0.036630932,
      0.0028460931,
      -0.010749482,
      0.029140733,
      -0.0005650846,
      0.024984062,
      0.01094427,
      -0.0065199826,
      0.009019956,
      0.020538656,
      0.003162678,
      0.0027145871,
      -0.019147001,
      0.037760146,
      -0.0014178874,
      -0.007189929,
      0.0092229135,
      0.004112078,
      0.022271952,
      -0.010957039,
      0.012265781,
      0.027026623,
      -0.00073915516,
      -0.007661992,
      -0.035190545,
      0.0034745657,
      -0.014435799,
      -0.008866471,
      -0.020075824,
      0.0110180415,
      -0.001820002,
      -0.0059659206,
      -0.006594012,
      0.015358399,
      -0.008509585,
      0.029437032,
      -0.0006456945,
      0.031674962,
      0.0056984574,
      -0.00039814366,
      -0.0020440533,
      0.020018209,
      -0.0027691226,
      0.013952847,
      0.031100865,
      -0.0132340025,
      -0.021069705,
      0.00481293,
      -0.016248966,
      -0.003469295,
      0.005602149,
      0.015152614,
      -0.002684972,
      -0.022213707,
      -0.014129453,
      -0.009211814,
      -0.007332091,
      -0.018901926,
      -0.0030616575,
      0.01971645,
      -0.002336829,
      -0.015932923,
      -0.0064416504,
      0.0045648636,
      0.0024574872,
      0.03115443,
      -0.0039662756,
      -0.0014360616,
      0.0049481103,
      0.0046699257,
      -0.025830038,
      -0.016400902,
      0.0014220662,
      0.016231092,
      -0.023722645,
      0.005706838,
      -0.0026569872,
      -0.0219514,
      0.0065997057,
      -0.019251512,
      -0.009833345,
      -0.010418152,
      -0.013493571,
      -0.003828325,
      -0.0123137515,
      0.021435402,
      -0.015294249,
      0.008812353,
      0.027268143,
      0.01098699,
      0.020187741,
      0.030410917,
      0.0057744067,
      0.031268355,
      0.005130169,
      -0.0070112324,
      0.0010980173,
      -0.08657663,
      0.015138856,
      0.0032500152,
      -0.021891875,
      0.018149339,
      0.0021154813,
      -0.023837069,
      0.024191134,
      -0.013413245,
      0.013726113,
      0.012645743,
      -0.03187785,
      0.011838346,
      -0.021579484,
      -0.012446551,
      -0.005730715,
      -0.011752101,
      -0.026225297,
      0.010242692,
      0.0050495877,
      0.02102055,
      -0.015595208,
      -0.008534482,
      0.010409379,
      0.010269564,
      0.008061269,
      -0.026196238,
      0.05217889,
      0.02588429,
      -0.008004121,
      -0.02229617,
      0.023186324,
      -0.008073449,
      -0.0035844313,
      -0.0053584967,
      0.0026278466,
      0.0018188837,
      -0.013242772,
      -0.0023520642,
      -0.009490557,
      0.014651583,
      -0.005764513,
      0.013120522,
      0.033720117,
      -0.019953538,
      0.006990149,
      -0.017429817,
      0.004688809,
      -0.008274599,
      -0.0063254596,
      -0.011452142,
      0.0042637424,
      0.0063256137,
      -0.010622102,
      0.031928044,
      -0.009573998,
      0.00026110932,
      -0.024642684,
      0.005170026,
      0.029957086,
      0.001405092,
      -0.0021306237,
      0.0025210162,
      -0.0056956224,
      -0.0016336733,
      -0.021523578,
      0.015096359,
      -0.0064806556,
      -0.008160811,
      0.0028913436,
      0.012266577,
      0.0021883913,
      -0.018749189,
      -0.016072202,
      0.0006327448,
      0.009697124,
      0.0032418643,
      -0.000414687,
      -0.009283856,
      0.026232332,
      0.01694693,
      0.0014357083,
      0.027587596,
      -0.0060994476,
      -0.018204736,
      -0.00276047,
      -0.002083122,
      0.003137884,
      0.003922428,
      -0.028799726,
      0.018646719,
      0.010248082,
      -0.0097509,
      -0.0051410142,
      -0.04289329,
      0.0052000144,
      0.0031979992,
      -0.03469989,
      -0.018640837,
      -0.0046925438,
      -0.010164122,
      -0.0068363887,
      -0.020446926,
      -0.0002337044,
      -0.005841362,
      -0.0041291,
      -0.023355529,
      0.005908458,
      -0.0016836618,
      0.0005866802,
      -0.002479135,
      0.008379413,
      -0.002235963,
      -0.018085573,
      0.00023997354,
      0.03920437,
      0.0016453447,
      0.018109186,
      -0.005445893,
      -0.032371,
      0.011141305,
      -0.011116357,
      -0.007103798,
      0.0061010956,
      -0.0093412995,
      0.017099349,
      -0.014809937,
      -0.0027949435,
      -0.00094383786,
      -0.027994331,
      0.0001649789,
      -0.0051842234,
      -0.03192957,
      -0.023323601,
      -0.0003143051,
      -0.01523039,
      0.019248059,
      0.011243722,
      0.01323578,
      -0.00248755,
      -0.011999023,
      0.0081578605,
      0.0076153125,
      -0.014322191,
      0.0036622165,
      0.009997577,
      -0.006524599,
      -0.006760754,
      0.0027140793,
      -0.0218441,
      -0.014268334,
      -0.01490409,
      -0.016698744,
      -0.00045413699,
      -0.011054681,
      -0.00026146515,
      -0.005598095,
      0.011185101,
      -0.03132635,
      -0.0054975254,
      0.02021065,
      -0.0058304053,
      -0.024799287,
      -0.004291929,
      0.026859904,
      0.0041958634,
      0.010746981,
      -0.008941154,
      -0.013804916,
      -0.0035130684,
      -0.014882699,
      -0.01375844,
      -0.029471274,
      -0.013320645,
      0.010512503,
      -0.0015669875,
      -0.0014155244,
      0.0094246445,
      0.016658036,
      0.03315053,
      0.016117042,
      -0.008696488,
      -0.014660403,
      0.028641144,
      0.0039848336,
      0.004651146,
      0.017791303,
      0.0201049,
      -0.018921435,
      -0.014825575,
      -0.0002865522,
      -0.006744101,
      0.007098868,
      0.0017789504,
      0.020603247,
      0.019739443,
      -0.015629543,
      -0.005719058,
      0.014033232,
      0.028336935,
      -0.00637434,
      0.0023526216,
      -0.0017403158,
      -0.006381725,
      -0.002016805,
      -0.00930714,
      -0.0047317436,
      0.0051970705,
      0.008299156,
      0.02371111,
      0.012939362,
      0.012522829,
      -0.0022018317,
      0.007644656,
      -0.0028910423,
      0.017362095,
      0.0028348377,
      -0.010043173,
      -0.033825032,
      -0.0016329043,
      0.026553104,
      -0.020316401,
      0.0038180049,
      0.021765107,
      0.010596309,
      0.0012688369,
      -0.0049844733,
      -0.0021027238,
      -0.0006462994,
      -0.0071229506,
      -0.013587584,
      0.0013512863,
      -0.012415015,
      0.00018949874,
      -0.020011235,
      -0.03017198,
      -0.0037973435,
      0.020773266,
      -0.035664145,
      0.017127296,
      -0.0012074795,
      0.0068463916,
      -0.022329127,
      -0.002615773,
      0.0067713684,
      -0.00937354,
      0.012889219,
      0.008584262,
      0.000032346306,
      0.00033788307,
      0.008557189,
      0.019229552,
      -0.012633392,
      -0.00094488193,
      -0.03079821,
      0.039928272,
      -0.011229152,
      0.007191855,
      0.00717234,
      -0.023678472,
      0.011144588,
      0.035790086,
      -0.00063300546,
      0.008605313,
      0.008446073,
      -0.006322084,
      -0.0047945264,
      0.010354119,
      0.014867699,
      -0.124610655,
      -0.017065754,
      0.012569087,
      0.008874192,
      -0.0011667564,
      0.004981106,
      0.0010695625,
      -0.017913673,
      -0.013960171,
      0.007428776,
      0.018820979,
      0.004837103,
      0.004216101,
      -0.02097391,
      0.008712879,
      -0.023809647,
      0.014441591,
      0.013381657,
      0.014010685,
      -0.0092035085,
      -0.01800631,
      -0.0004242205,
      -0.00045748864,
      0.009410837,
      -0.017792266,
      -0.014075736,
      0.01697628,
      0.0004781465,
      -0.017905759,
      -0.035009816,
      -0.029742155,
      -0.021490777,
      0.0009117473,
      0.0006381431,
      0.010088177,
      -0.023432316,
      -0.049151365,
      0.008800788,
      0.025926333,
      -0.00040115765,
      -0.020728154,
      -0.006629615,
      0.0301467,
      0.0026033141,
      -0.00982952,
      0.007651365,
      0.050109807,
      -0.023791444,
      0.00040113818,
      0.043077078,
      -0.035443656,
      -0.016101245,
      0.005729957,
      -0.016384505,
      -0.0025216143,
      0.0035073922,
      0.010637152,
      0.0033342799,
      -0.0031886585,
      -0.00060619914,
      -0.022681989,
      -0.0010665314,
      0.0013917346,
      0.03529987,
      -0.009990406,
      -0.008864409,
      0.023576705,
      0.0071736346,
      0.020734118,
      0.007268095,
      -0.008720685,
      0.0102027925,
      0.0012243597,
      0.03359781,
      0.0049262424,
      -0.015332848,
      0.012731816,
      -0.0057907016,
      0.009096302,
      -0.00028456128,
      -0.026196387,
      -0.016386589,
      -0.07400973,
      -0.037826236,
      0.020243607,
      0.0073976247,
      0.024139063,
      0.016617749,
      -0.008615989,
      -0.005689491,
      0.0012610963,
      -0.017769262,
      -0.024184551,
      0.0042345715,
      -0.004749399,
      -0.01669374,
      -0.019231569,
      0.029791066,
      0.0055692303,
      -0.014204708,
      -0.0029538637,
      0.00026820216,
      0.010886518,
      0.004873456,
      -0.0010419812,
      -0.017849127,
      0.013829229,
      0.024537813,
      -0.009323513,
      -0.006301933,
      -0.0065570455,
      -0.011334496,
      -0.00032983787,
      -0.15187967,
      -0.017601877,
      -0.0040783123,
      0.011410505,
      0.0025430832,
      -0.008564264,
      -0.0041121515,
      -0.031908453,
      0.024061056,
      -0.011760129,
      -0.003081581,
      -0.030770956,
      -0.022092462,
      0.0077382205,
      0.02393908,
      0.1244645,
      -0.0073049315,
      -0.004837159,
      -0.011374218,
      -0.019066257,
      -0.0031697007,
      -0.020992758,
      -0.00996451,
      0.0046559754,
      -0.016289067,
      -0.0069070165,
      -0.0045746868,
      -0.0012483872,
      0.01150923,
      0.0022926922,
      -0.006006054,
      -0.018480808,
      0.013826496,
      0.011460829,
      -0.0016122786,
      0.01277884,
      -0.00022466264,
      -0.0062157717,
      -0.000023861809,
      0.0065270434,
      0.015622058,
      -0.00085678126,
      -0.007738786,
      -0.00096183736,
      0.017373169,
      0.0023289663,
      -0.015198547,
      -0.012365787,
      -0.01427709,
      -0.0013281283,
      -0.017714791,
      -0.051521648,
      0.017038416,
      -0.0020182114,
      0.010446015,
      0.017249335,
      -0.017479146,
      0.018675273,
      0.008540754,
      0.017551614,
      -0.00423452,
      -0.0039378684,
      0.009823268,
      -0.0021739444,
      0.010886398,
      0.0030074692,
      0.00900685,
      0.008027836,
      0.013569459,
      -0.003990358,
      0.013592228,
      0.034602553,
      -0.01292811,
      0.015407826,
      -0.01170394,
      -0.008779425,
      -0.03861766,
      0.022593066,
      -0.004068379,
      -0.015263366,
      0.011845662,
      0.0024862331,
      -0.00052293116,
      -0.014512562,
      0.043562554,
      -0.008790097,
      -0.02802582,
      0.024505768,
      -0.0016070281,
      0.006047395,
      0.0010074005,
      0.017269982,
      -0.0037595164,
      0.00469685,
      0.0052588773,
      0.0013757253,
      0.022245696,
      0.015668685,
      0.031311966,
      0.008979537,
      -0.010953243,
      0.008748863,
      -0.0026507187,
      -0.046639465,
      0.017611323,
      0.0041614077,
      0.0044135177,
      0.009612043,
      0.022483012,
      -0.0017614984
    ]
  },
  {
    "id": "genai_cohort_python_02_Meet_your_instructor_vtt",
    "content": "Hi and welcome to the video 2 of meet your instructor. 3 Hi, meet me. 4 My name is Hitesh. 5 I really wanted to have this 6 video because we'll be spending 7 so much of time together 8 in learning Python and we're going 9 to be enjoying this so much. 10 I really wanted to have a personal 11 connection and knowing a little 12 bit more about me and my style of 13 teaching and what I've been doing 14 in life makes our connection more 15 stronger and you'll be feeling 16 much more comfortable in the 17 course now. 18 Don't worry, I'm not going to. 19 I will not bore you too much 20 with the details of every 21 single thing, but enough that 22 you get the confidence that 23 you are in the right hand. 24 And I've been doing this 25 for a really long time. 26 My name is Satish and I did my 27 engineering in electronics 28 and communications, specifically not 29 in computer science. 30 So yes, anybody can 31 learn how to code. 32 It really is also not a walk 33 in the park, but especially 34 it's not really that difficult. 35 Anybody can learn to code now. 36 Once I finished my engineering 37 I moved into the Python ecosystem, 38 especially in the cybersecurity, 39 but then quickly moved 40 into the development role, 41 especially iOS development. 42 And then thereafter I moved 43 into web development 44 and databases and JavaScript 45 and again Python based development 46 and a whole lot of things. 47 Now during my life I have done 48 a fair bit of my startups as well. 49 Some of them failed and really I love 50 to show off about them as well. 51 Two of them worked really well 52 and they got acquired 53 with a pretty big deal and I 54 enjoyed that deal after that. 55 Currently also I'm running 56 two of my startups, running 57 pretty good, one of them serving 58 around 22 million users. 59 So yes we really know how to scale 60 up the things and how 61 to write great quality softwares. 62 And apart from that I also 63 run two YouTube channels. 64 One is hitting a million 65 subscribers, it is already done 66 by the time you will be watching. 67 Another one has already crossed 68 half a million subscriber and my 69 specialty is to turn the toughest 70 topic into the easiest one. 71 I read a lot of books about teaching 72 and especially yes I do read about 73 the tech as well like Python, 74 JavaScript and all that but I also 75 read a lot about the teaching 76 mechanism, how to deliver engaging 77 content and one of my specialties 78 to turn the toughest topic into the 79 easiest one. 80 I use a lot of approach in teaching 81 like for example for frameworks and 82 library I use the approach of first 83 style of learning that is you get 84 into the details, explore every bit 85 out of it and see that oh, there is 86 no magic in this framework, go 87 inside detail and create those 88 features. 89 This is also first person 90 kind of a learning, 91 first principle learning. 92 But there is another style that I 93 have explored over the year which 94 is kind of exploration learning 95 or hunting learning and 96 experimenting learning in which 97 you just go ahead and investigate 98 the things. 99 I officially termed it as 100 investigative learning but there is 101 no official documentation about it 102 in which you try to investigate 103 the things as you write them. 104 This especially works really well 105 in the programming languages 106 and especially when 107 the ground details are required. 108 So for this entire course we'll 109 be providing and we'll be focusing 110 on moreover this investigative 111 style of learning and you'll be 112 thoroughly loving this part. 113 We'll be questioning every 114 output, we'll be questioning every 115 single line of code 116 that we're going to write. 117 And this is going to be one 118 of the most amazing class that you 119 have ever seen in the Python. 120 I've delivered Python 121 in the past as well in my YouTube 122 channels as well in Hindi and other 123 languages, regional. 124 But this course is exceptional. 125 I have spent months in just 126 preparing notes for this entire 127 course and then I realized now 128 that I have done my startups and 129 I enjoy teaching now I have no 130 hurry, nothing really is 131 important for me now. 132 It just all sit back and relax. 133 You will truly understand 134 what it takes to truly master 135 a language like Python. 136 And I'm pretty sure you're going 137 to be enjoying this part. 138 If you have any doubt anything, 139 reach me out on LinkedIn or Twitter. 140 I'm pretty much active there. 141 I tweet a lot, I spend 142 a lot of time on that. 143 So reach me out, don't hesitate 144 and if there is any topic which 145 requires more video, more knowledge 146 or more explanation or something 147 is missing, just tweet me out. 148 I would love to add that topic here. 149 So I guess that is quite more 150 than enough in the intro 151 about me and now I, I think 152 you also get that, that okay. 153 And again another thing that I would 154 like to mention about me is I enjoy 155 not just mindlessly like a robotic 156 way of just delivering the videos. 157 I prefer to have a style in it, ups 158 and downs on the videos and voices 159 and I love storytelling as well. 160 And my lectures are 161 a little bit laid back. 162 It's not really fast paced. 163 You're going to enjoy that. 164 If you wish you can turn me up into 165 1.5 but I prefer a laid back style 166 because your brain actually needs 167 some time to process the videos and 168 move it into the secondary storage 169 so that it's permanently saved a lot 170 of time. 171 People try to just move things 172 quickly in 1.5x or 2x and then 173 realize, I don't get the confidence 174 about this because you didn't allow 175 your brain to process this and move 176 into secondary storage so that it's 177 permanent. 178 So please don't do this. 179 Enjoy, the style. 180 It's not a race, it's a marathon. 181 Once you do Python with me, you 182 never have to look back again. 183 This is not going to be a tutorial 184 help, and this is going to be one 185 of the course which you will 186 absolutely commit complete. 187 Yes. 188 And we do run, also a lot of reward 189 programs as well on Twitter. 190 Whoever completes some section or 191 we give away tea shirts as well. 192 So there's a lot that going on. 193 Follow me up on Twitter as 194 well, and I think that's more 195 than enough of an intro. 196 Let's catch back and move 197 into the Python journey.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "02 Meet your instructor.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/02 Meet your instructor.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0065670814,
      0.006347692,
      0.0112766605,
      -0.060008876,
      -0.0015950362,
      -0.01558762,
      -0.010382866,
      0.019643847,
      -0.0043286993,
      0.020564428,
      -0.035135075,
      -0.017640091,
      0.011619682,
      0.05280802,
      0.1476197,
      0.016752526,
      0.00082628557,
      -0.017917624,
      -0.00030828043,
      0.0068952176,
      -0.011006951,
      0.00966822,
      0.002744324,
      -0.021649536,
      0.0031962756,
      -0.00002413407,
      0.011792032,
      0.0065474147,
      0.026253747,
      -0.03322662,
      -0.009229787,
      0.032591764,
      0.0019967854,
      0.038905483,
      0.015119974,
      0.021921951,
      0.013722184,
      -0.0027932741,
      -0.029298631,
      0.012044809,
      -0.028342422,
      -0.0134975985,
      0.0047996016,
      -0.012656254,
      0.015159938,
      -0.02430696,
      0.01268084,
      0.0009460054,
      0.013800789,
      0.017536364,
      -0.010881682,
      -0.009903439,
      -0.018527938,
      -0.18531573,
      0.013226833,
      0.0022647895,
      -0.0046518226,
      -0.0022661192,
      0.009893775,
      -0.00907115,
      -0.023100555,
      0.031923305,
      -0.029414898,
      -0.014920674,
      -0.013440554,
      -0.0064478973,
      0.019030128,
      -0.009063513,
      0.027659222,
      -0.0034028357,
      -0.00073430175,
      -0.0011990608,
      -0.005983215,
      -0.014712803,
      -0.01664246,
      -0.030822245,
      0.006353197,
      -0.02827886,
      0.008252979,
      0.0102881035,
      -0.0012077282,
      -0.006238986,
      -0.015927829,
      -0.020883355,
      -0.0031718141,
      -0.01319646,
      -0.019708198,
      0.004640856,
      -0.008065965,
      -0.0068384316,
      -0.021130085,
      0.01557944,
      0.0049644983,
      0.031355433,
      -0.009704657,
      -0.019355642,
      -0.012226436,
      0.006566434,
      -0.0010072037,
      -0.017308643,
      0.016887287,
      -0.013566888,
      -0.04254144,
      -0.038533904,
      0.006311928,
      0.012530178,
      -0.00067279866,
      -0.00946122,
      -0.0117434915,
      -0.0048510367,
      -0.027873851,
      0.011756402,
      0.0041970154,
      0.01667748,
      0.018140018,
      -0.17760494,
      0.0068507707,
      -0.0056715417,
      -0.007912545,
      -0.010288494,
      0.0009704851,
      0.013875093,
      0.0119214,
      -0.002911041,
      -0.02539812,
      0.000111710186,
      0.020728119,
      0.012088443,
      -0.016512597,
      -0.020504665,
      -0.01664493,
      0.0031318602,
      -0.0064787236,
      0.0035479614,
      0.0014469151,
      0.020413443,
      -0.004834599,
      -0.01899742,
      -0.02155059,
      0.0039513265,
      -0.00074416155,
      0.004370403,
      0.0054679257,
      0.028276924,
      0.0076851193,
      -0.0058768676,
      -0.0016927818,
      0.010199596,
      -0.033514,
      -0.025922079,
      0.026218183,
      0.0031716104,
      0.025144441,
      0.00004445943,
      0.012107892,
      -0.04036747,
      0.004090535,
      -0.009157288,
      -0.02534673,
      0.0019268645,
      -0.0022276444,
      0.0036713798,
      0.008585019,
      -0.00032567838,
      -0.0021263997,
      -0.007133533,
      -0.00942936,
      0.01440217,
      0.031904977,
      0.011955407,
      -0.002968225,
      0.0032467144,
      0.0024656823,
      0.010996816,
      -0.010368025,
      -0.01811225,
      -0.0106423525,
      0.003426606,
      0.02273726,
      -0.003195898,
      0.0076064323,
      0.011682169,
      0.010037008,
      -0.003659312,
      0.0037490125,
      -0.014039607,
      -0.020817537,
      0.010007326,
      0.013628817,
      -0.004879748,
      0.010291422,
      0.006498135,
      0.009949796,
      0.02302576,
      0.01851442,
      0.0017194176,
      0.0014126945,
      0.009506119,
      -0.0032897687,
      0.009059891,
      0.012768953,
      -0.01535298,
      0.012630743,
      -0.013639683,
      0.035346396,
      -0.00011052958,
      0.0005344091,
      -0.02112454,
      -0.004719562,
      0.010000276,
      -0.025336955,
      0.01345224,
      0.019259762,
      -0.012976121,
      0.012224295,
      0.00042977394,
      0.02798023,
      -0.021338392,
      0.00704073,
      0.0009694341,
      0.008740999,
      0.0013665335,
      0.013140092,
      0.018519823,
      0.0009716506,
      -0.013768182,
      0.009594373,
      -0.003699911,
      -0.0028673261,
      0.0052616172,
      0.009390241,
      -0.0015681328,
      0.0077541387,
      0.00090309867,
      0.003057776,
      -0.010049278,
      -0.002652793,
      0.0061618383,
      -0.0011890717,
      0.0032102703,
      -0.013936104,
      -0.0078067537,
      -0.007428259,
      0.021532541,
      0.02819959,
      -0.0050040036,
      0.0047823964,
      0.013572076,
      0.013053639,
      -0.015510737,
      -0.008119677,
      0.00012522827,
      0.021740844,
      -0.019513663,
      0.0021996077,
      -0.038829032,
      -0.032974657,
      -0.010351402,
      -0.011145859,
      0.0019118208,
      -0.018517237,
      -0.0047985623,
      -0.020395882,
      -0.02147015,
      0.024819667,
      -0.0026863266,
      -0.00432808,
      0.015292442,
      -0.01156944,
      0.028765371,
      -0.0057989648,
      0.0077355625,
      0.0050750654,
      -0.0037191263,
      -0.01712743,
      0.006788668,
      -0.09895701,
      0.018170439,
      -0.00491412,
      -0.028446456,
      -0.0026697982,
      0.0071770824,
      -0.033133265,
      0.0024292327,
      0.0041618994,
      0.011104103,
      0.01974647,
      -0.011741618,
      0.035202213,
      -0.013869109,
      0.008104814,
      -0.015550813,
      -0.000041796444,
      -0.013228172,
      0.027018813,
      -0.005663444,
      0.008753291,
      -0.0076790377,
      -0.0007661533,
      -0.018208897,
      0.015620454,
      -0.0030220652,
      0.004602588,
      0.04895344,
      0.0054988274,
      -0.015933583,
      0.0070948126,
      0.047866467,
      -0.016486114,
      -0.010379458,
      0.005916042,
      0.009108696,
      0.0057074917,
      -0.007523522,
      0.0004265465,
      -0.0155573655,
      0.01979643,
      -0.022588043,
      0.025154807,
      0.035031375,
      0.0022168863,
      -0.010475782,
      -0.006413612,
      0.02326277,
      -0.0065564457,
      -0.0052875364,
      -0.030706419,
      0.006376112,
      0.032098472,
      -0.004604807,
      -0.008610108,
      0.02995519,
      -0.000685564,
      -0.010935734,
      -0.0036273194,
      0.014713886,
      0.0060770214,
      0.0027358027,
      0.010637825,
      -0.011911794,
      -0.0057618865,
      -0.0114529645,
      0.012231669,
      -0.012612384,
      -0.0049757333,
      -0.016703645,
      0.0027392567,
      0.00898003,
      0.00048985763,
      -0.014043905,
      -0.011168676,
      0.0022854423,
      -0.0012489125,
      -0.009875433,
      -0.010995755,
      0.025163485,
      0.013851413,
      0.0103046745,
      0.0009316977,
      -0.00010162992,
      0.01302402,
      0.0016213278,
      0.002870845,
      0.0026112378,
      0.0090486705,
      -0.020995406,
      0.014959916,
      0.013113433,
      -0.03381064,
      -0.0007205409,
      -0.011449654,
      -0.00701576,
      -0.002606862,
      -0.020567525,
      -0.010178741,
      0.014755636,
      0.006329129,
      0.013317071,
      -0.03317838,
      -0.009683007,
      -0.0032114843,
      0.02295943,
      -0.015966212,
      -0.018568879,
      0.013901526,
      -0.0041804803,
      0.0020493737,
      -0.0038372094,
      -0.020086588,
      -0.012208444,
      0.01773285,
      0.029593745,
      -0.004767157,
      0.0006265483,
      0.009006484,
      -0.021503603,
      0.0055491794,
      -0.01732574,
      -0.008680421,
      0.020901091,
      -0.012659248,
      0.022343095,
      -0.00961633,
      0.014447024,
      0.0003384663,
      -0.021551855,
      -0.014152352,
      0.00088463776,
      -0.015938932,
      -0.0031135771,
      -0.0012771833,
      -0.0027817523,
      0.031286843,
      0.02011158,
      0.017702533,
      0.011026177,
      0.0013483018,
      0.0060783406,
      0.022079112,
      -0.008096448,
      -0.011662794,
      0.011217193,
      -0.026130527,
      -0.025659934,
      -0.008329201,
      -0.0075173327,
      -0.019841699,
      -0.009220868,
      0.0075399294,
      0.0064322674,
      -0.015438117,
      0.0048283036,
      0.0061098495,
      -0.009767512,
      -0.015844787,
      -0.024842173,
      0.006747881,
      0.00027803963,
      -0.005900884,
      0.018084466,
      0.002243546,
      0.021689119,
      0.0066354293,
      0.0007931372,
      0.03387111,
      -0.013695134,
      -0.010286907,
      0.0021428356,
      -0.032901574,
      0.0040238653,
      0.029569248,
      0.0069976305,
      -0.0016564609,
      -0.0098963445,
      0.013057321,
      0.028158648,
      -0.01145087,
      0.008879256,
      -0.0069087213,
      -0.00064456766,
      0.008654455,
      0.013088059,
      0.010446909,
      -0.007687054,
      -0.023595912,
      -0.013655259,
      0.000548922,
      0.006404904,
      -0.0064191176,
      0.0074546533,
      0.012178074,
      0.020075839,
      -0.014175409,
      0.008965849,
      0.0009135229,
      0.013916126,
      0.018242719,
      -0.02469693,
      0.0052394522,
      -0.0026771545,
      0.019666564,
      -0.022699462,
      0.0026649134,
      -0.026039828,
      0.023556061,
      0.011876716,
      -0.0053584557,
      0.006198926,
      -0.0049898573,
      0.014789526,
      0.0039010427,
      0.030534279,
      -0.0024954563,
      -0.0048870537,
      -0.018229438,
      0.0002160441,
      -0.014875779,
      -0.028437153,
      -0.007949903,
      -0.015799304,
      -0.004953223,
      0.012364054,
      -0.0008484212,
      0.0012290201,
      -0.008399139,
      -0.011364721,
      0.008097498,
      -0.011199056,
      -0.014322889,
      0.019994467,
      -0.0048013646,
      -0.013937997,
      0.0026031898,
      0.0070366566,
      -0.019376576,
      0.022205366,
      -0.004132301,
      -0.018483346,
      0.006135044,
      -0.008102243,
      -0.0037366862,
      -0.0055772057,
      0.026537715,
      0.022861486,
      -0.012215682,
      0.003298449,
      0.024688642,
      0.035047144,
      -0.0020768873,
      -0.019142278,
      -0.024617547,
      0.038252607,
      0.016215269,
      0.0051878,
      -0.012384436,
      -0.004900274,
      0.019010678,
      -0.0007430987,
      0.008726933,
      0.006654181,
      0.0019332806,
      0.00319103,
      -0.017645726,
      0.00428353,
      0.002920628,
      -0.11511447,
      0.010646716,
      -0.008902114,
      -0.0061637084,
      -0.012824507,
      -0.0027689822,
      0.001462686,
      -0.02435764,
      -0.010496232,
      -0.010892895,
      0.0075101433,
      -0.011965318,
      -0.0018496476,
      0.01163579,
      0.010795442,
      -0.0034037263,
      0.010685342,
      0.0050360267,
      0.0046452936,
      -0.015914442,
      -0.012120778,
      0.010477459,
      -0.0028783227,
      0.004620686,
      -0.023250766,
      0.0090387855,
      0.031176401,
      0.013328191,
      0.012373931,
      -0.0035331158,
      -0.012783215,
      0.0073476024,
      0.018712966,
      0.025288096,
      0.0044632587,
      -0.011213042,
      -0.029928168,
      0.0023964413,
      -0.0054663788,
      -0.0053535327,
      -0.009930211,
      0.0011408238,
      -0.0013562235,
      0.017139068,
      -0.022145186,
      0.01746187,
      0.029834159,
      -0.0036765991,
      0.0019012991,
      0.03154934,
      -0.04136838,
      -0.018520724,
      0.0036062028,
      -0.030319441,
      -0.004737882,
      0.02263078,
      0.015790325,
      -0.0037481417,
      0.009818617,
      -0.010938264,
      -0.0030958115,
      0.0042654346,
      0.00045482785,
      0.03254821,
      0.0005058426,
      0.012541322,
      0.03933106,
      -0.0012216136,
      0.003649695,
      -0.0002807531,
      -0.00065582973,
      0.021543035,
      -0.0071081803,
      0.025740763,
      0.0006236895,
      0.009516939,
      0.010510564,
      0.007936874,
      0.0019102189,
      0.0015409079,
      -0.012892005,
      0.0014451985,
      -0.04637731,
      -0.011477536,
      0.025424588,
      -0.0031355387,
      0.0030268806,
      -0.0068230764,
      -0.024599439,
      0.022181414,
      0.018832635,
      0.009933289,
      -0.017396703,
      -0.0085686585,
      0.03308445,
      -0.005487865,
      -0.031424373,
      0.00091720576,
      0.0038434218,
      -0.014457316,
      0.003605466,
      0.0028996249,
      0.009162132,
      0.00953972,
      -0.014765703,
      -0.03500625,
      0.010721479,
      0.021486927,
      0.00053926505,
      -0.0064932723,
      -0.01732574,
      0.013653432,
      0.0028370311,
      -0.15838306,
      -0.016736992,
      0.006015245,
      0.0034445273,
      -0.0012274265,
      0.005368061,
      -0.016419344,
      -0.012504101,
      -0.0025789605,
      -0.0058985837,
      0.004521575,
      -0.0004710153,
      -0.036296792,
      0.0028275207,
      0.0026615162,
      0.13729969,
      0.008916869,
      -0.0050409078,
      -0.028146408,
      0.007296362,
      -0.0013195021,
      -0.041891936,
      -0.016151931,
      -0.010902447,
      -0.008647116,
      -0.012392297,
      0.0157903,
      -0.012973317,
      -0.014933333,
      0.0070120655,
      0.011978134,
      -0.0042522447,
      0.0043730657,
      0.016511235,
      0.0054159462,
      -0.0017997808,
      -0.007520962,
      -0.010023393,
      -0.010213424,
      0.011176793,
      0.023979893,
      -0.003368934,
      -0.0042057573,
      0.014321393,
      -0.0012071612,
      -0.014217795,
      -0.012915555,
      0.0028339976,
      -0.014055367,
      0.0033367705,
      0.012927936,
      -0.051294576,
      -0.004257277,
      -0.0062465253,
      0.015662558,
      0.011387169,
      0.0064640273,
      0.0051813456,
      -0.020518048,
      0.003652285,
      -0.02003723,
      -0.007395486,
      -0.002182642,
      0.0057056425,
      -0.003169517,
      -0.012860368,
      0.0157367,
      0.017388722,
      0.014621324,
      -0.0006405767,
      0.02702506,
      0.023817023,
      -0.0022632785,
      -0.0069467416,
      -0.003108244,
      0.0010133437,
      -0.029138604,
      0.03679829,
      0.002221179,
      -0.013912619,
      -0.021106135,
      0.01031571,
      -0.0043439222,
      -0.0071486277,
      0.015361719,
      0.02133964,
      -0.0067638597,
      0.020649755,
      -0.007043952,
      -0.00047581468,
      0.012297732,
      0.003494561,
      -0.008792671,
      0.01792071,
      0.0023756626,
      0.012339598,
      0.01591892,
      -0.01321674,
      0.006562468,
      0.008660988,
      0.008158397,
      -0.012853203,
      -0.01718845,
      -0.013754208,
      0.02379196,
      0.0063040606,
      0.013778534,
      0.00030854117,
      -0.010498177,
      -0.023787599
    ]
  },
  {
    "id": "genai_cohort_python_03_What_is_programming_vtt",
    "content": "Hi and welcome 2 to the Udemy's Python course. 3 Now let's go ahead and get started. 4 Let me walk you through some 5 of the tools that I'll be using 6 for explaining the things, 7 for writing the code. 8 And don't worry, we have 9 the videos about installing 10 and doing everything 11 on Windows as well as on Mac. 12 So don't worry about that part. 13 We have covered that. 14 We have been doing 15 the teaching for like 30 years. 16 We know the drill, how 17 to work with that. 18 Now. 19 One more thing I would like to 20 mention is that I usually am down on 21 the screen on this part, but 22 sometimes when I want you to focus 23 more on the screen or entirely on 24 the screen, I just switch on to this 25 mode so that you can focus just 26 entirely on the screen. 27 But when it's required a little bit 28 of engagement or you want me 29 to see, or I want you to focus 30 on me as well, I switch it back. 31 But most of the time 32 you're going to see that. 33 Okay, you just need to focus 34 on the screen itself. 35 I want your 100% attention 36 on the screen itself. 37 So coming on that part, 38 we are going to be using VS 39 code as a code editor. 40 Go ahead and download it. 41 Don't worry. 42 We'll walk you through with 43 the installation part and Python 44 install and everything. 45 Apart from this, I also use 46 a mix of couple of tools 47 like one of them is Eraser. 48 I will provide you the link of this. 49 This helps me to teach. 50 I can draw diagrams easily and attach 51 them like these are two boxes 52 and I can just link these boxes 53 just like this and if I move one 54 box it normally goes like that. 55 This whole stuff helps me to teach. 56 This is like my whiteboard or rather 57 accurately blackboard on the screen. 58 You will find me using 59 other tools as well. 60 I don't use them that much. 61 But still if you want to know about 62 a little bit more, there's a tldraw. 63 You'll find that I draw a lot 64 of diagrams and this helps 65 people to actually learn. 66 I use Excalidraw as well, 67 in my YouTube videos extensively. 68 Not just a little bit extensively. 69 So I do have a lot of habit 70 of drawing the diagrams and stuff. 71 But for the courses specifically 72 especially I prefer to use this one, 73 because it's easier to actually work 74 on with and it's generally 75 pretty interesting to work on with. 76 All right, so this is the basics 77 of it, like let's go 78 ahead and get started. 79 I don't want to waste much 80 of your time in just overviews. 81 Let's directly start with somebody 82 who has never been coded or never 83 have programmed in the life as well. 84 So let's start with the basic 85 and obvious question, what is 86 programming in itself? 87 If you have never heard or thought 88 about it in that way. 89 So programming, it's a great subject. 90 Programming is more about like giving 91 instruction to a computer 92 and especially the instruction which 93 computer do understand that is 94 the most important part of this one. 95 Computers really 96 can't think on their own. 97 And you might be wondering, 98 hey, AI is there. 99 They can think. 100 No, they cannot. 101 In the AI Also they just repeat 102 the steps that they have seen 103 on the Internet quite extensively. 104 And they are just fancy 105 word completions. 106 And they are pretty good 107 in that I do give you on that. 108 But they can't really think still. 109 And you have to provide them 110 exact instruction, exactly as 111 written how we'd give them so that 112 they can think a little bit. 113 So that's go for that. 114 Now let's create analogy like what 115 it's like to have a program. 116 So let's go ahead and create 117 a program for making 118 chai or T as you call now. 119 Now I usually will give you whole 120 story and example and narrative 121 throughout this course. 122 We do have, let's just say 123 a chai store or a cafe. 124 And in that we will take examples 125 of each of the exercise that 126 we do related to the chai. 127 It's one of my favorite thing. 128 So how are you going 129 to make the chai? 130 How you'll give computer instruction 131 about making a chai. 132 That is bit challenging, 133 but we'll try our best to actually 134 give that instruction. 135 So all right, let's go 136 ahead and buckle up. 137 You also try it along with me. 138 So step one would be 139 like gather, water. 140 All right, I got the water. 141 Then go ahead and grab some milk. 142 If you prefer to have a milk T, then 143 go ahead and grab T leaves as well. 144 So you might want 145 to have some T leaves. 146 Obviously it's a chai. 147 And then go ahead and grab sugar. 148 Maybe you like sugar T. 149 And then also go ahead and grab some 150 utensils as well. 151 So these are gathering part. 152 This is collection of the data. 153 This is the part one you have 154 to have to do this. 155 There is no exception. 156 There is nothing in that. 157 Like. 158 So this is the part one 159 of giving the instructions. 160 Hey, collect all of this. 161 Now once you have done 162 with this, then obviously 163 the job is not yet done. 164 This is just collection 165 and then we have to provide some 166 of the conditions as well. 167 So check conditions and conditions 168 could be something like we want 169 to have enough water, maybe clean 170 cups and then we have to give 171 a precise instructions after that. 172 So you can see there are a lot 173 of moving parts into the coding 174 as well just like this. 175 So making chai, you have never 176 thought about it, but this is all 177 like gathering the stuff, then check 178 some condition and then finally 179 there will be thorough steps. 180 We will work on the steps as well 181 that how to actually make this tea. 182 So these are the three components 183 and these are the exactly three 184 components we are going to learn 185 throughout in this Python course. 186 Apart from this, I also would like 187 to address one more thing which is 188 is coding really that much hard? 189 This is a tangent example, 190 but I would say yes and a no. 191 Is coding truly super 192 easy walk in the park? 193 No, it is not. 194 Everybody says coding is easy, 195 but it is not that easy. 196 It requires extensive amount 197 of effort over the years. 198 Sometimes you will get comfortable 199 within months, few months, 200 but it requires definitely couple 201 of years to truly get the hand 202 of what it takes to be programming. 203 It's not the easiest job and that is 204 the reason why people get paid 205 highly for the computer programming. 206 I would want to have you 207 realistic aspect of this. 208 It's not going to be easy, 209 but it's surely doable. 210 And especially when the languages 211 are like Python or JavaScript, 212 they're super easy to learn. 213 And Python specially is like 214 a language which is almost feels 215 like you know the English, 216 you know the Python, but there 217 are nuances of it, there are 218 complexities of it as well. 219 So I want you to keep very 220 realistic ground on this. 221 It is not that easy, 222 it takes time to master it. 223 But getting started writing 224 simple code is super easy. 225 You can do this within few months. 226 But again coding is all about 227 having the process, breaking down 228 the steps and, and thinking more. 229 Writing the code is the easy part. 230 Thinking about it, having the thought 231 process of a programmer, that 232 is where the real magic is and that 233 is the toughest part of it. 234 All right, so now that you know 235 about the tangent part of it, let 236 me go ahead and give you one more 237 example before we wrap this up. 238 So how would you make this 239 the steps of this? 240 So let's go ahead and try 241 to have some of the steps 242 for making the tea. 243 First of all what I would like 244 to do is check if 245 cattle, we are making the T 246 in cattle, so cattle has water. 247 So this is my step one. 248 What would be your step two? 249 And again it doesn't really matter if 250 should have five step or six step. 251 Whatever it takes. 252 Whatever it takes. 253 Then I would love to simply have 254 a, plug, plug, plug in kettle. 255 Then obviously boil, boil water. 256 So these are the basic 257 steps I would love to have. 258 Let me shift my 259 keyboard a little bit. 260 And this is the second step. 261 What would be the third step? 262 I would say get clean cup 263 or cups, whatever you like. 264 This is my third step. 265 What would be my fourth step in that? 266 Give it a shot, think a little. 267 I would be saying that add 268 T leaves so that it gets the color. 269 And probably also let's add sugar 270 to cup or maybe to boiling 271 water, whatever you prefer. 272 And after that I would have 273 something more probably. 274 Pour, boiled. 275 Oops. 276 Pour boiled water into 277 cup and then add, sugar. 278 Or if you want milk as well, 279 you can pour that as well. 280 And then I would say stir and serve. 281 So these are my steps 282 of making a tea. 283 And again, everybody's steps 284 are different and that's why 285 they say programming code 286 is different for everyone. 287 So these are my steps. 288 So as you saw, this is 289 super easy and we can have 290 the things like this. 291 So we actually turned making Chai 292 into a simple piece of code. 293 Super easy, super nice. 294 And we have a, great diagram as well. 295 There we go. 296 So we first worked on gathering 297 the things, checking 298 the condition, and then we wrote 299 the steps and we have all the steps 300 for making the table. 301 And in the very next video, we 302 will go ahead and try to convert 303 this into a piece of code. 304 It is not going to be truly 305 a python code, we'll just 306 mimic the Python code. 307 This is not going to be 308 accurate, but it will give you 309 an idea that, okay, Python 310 is not that really hard. 311 It's super easy to work on with. 312 Let's go ahead and move 313 on to the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "03 What is programming.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/03 What is programming.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0019279039,
      0.0037451717,
      0.014844522,
      -0.046345703,
      0.0058431476,
      -0.0057815425,
      -0.00080336136,
      0.02007175,
      0.005642337,
      0.027355658,
      -0.028050324,
      -0.014069328,
      0.010578075,
      0.03312368,
      0.14623627,
      0.0006423846,
      0.00036012015,
      -0.010818792,
      0.01321419,
      -0.016928362,
      0.0034293267,
      0.021072289,
      0.008540722,
      -0.005271357,
      -0.010390102,
      -0.014348514,
      0.00731221,
      0.016837185,
      0.033657055,
      -0.029993314,
      -0.008703821,
      0.0061098165,
      -0.0051241573,
      0.017859112,
      0.017777486,
      0.02796721,
      0.009306408,
      -0.014784218,
      -0.013902561,
      0.01690671,
      -0.036712855,
      -0.010902072,
      -0.013430887,
      -0.010277385,
      0.014211165,
      -0.0037740357,
      0.005072138,
      -0.019454604,
      0.009808189,
      0.021763863,
      0.011635819,
      0.0052849255,
      -0.01592076,
      -0.19387648,
      -0.001118471,
      -0.01035223,
      -0.00662369,
      -0.002888984,
      -0.0031437562,
      -0.005146821,
      -0.023595512,
      0.005265394,
      -0.032114323,
      -0.008702507,
      -0.017918486,
      -0.021586373,
      0.021353101,
      -0.00474328,
      0.017925547,
      -0.008115903,
      0.011698645,
      0.0040500984,
      -0.012784543,
      0.00014378206,
      -0.023695657,
      -0.01873299,
      -0.001368819,
      -0.017572606,
      -0.0019759156,
      0.012066798,
      -0.006968111,
      -0.0075938073,
      -0.014401354,
      -0.008160888,
      0.026883543,
      -0.004862389,
      -0.03204541,
      -0.0037538286,
      0.0015246226,
      -0.0137987,
      -0.02210343,
      0.030920533,
      0.0032041105,
      0.013837428,
      -0.014340849,
      -0.014658923,
      -0.024177862,
      0.0014720662,
      -0.0033666808,
      -0.0054954193,
      0.00503741,
      -0.009244279,
      -0.029385485,
      -0.029165123,
      0.014513424,
      0.020299628,
      0.011571604,
      -0.0154832555,
      0.0056967945,
      -0.018005403,
      -0.011642704,
      -0.004492975,
      0.007733047,
      0.013065165,
      0.01197267,
      -0.18472172,
      0.0023276638,
      0.002431664,
      -0.017666956,
      0.0011441503,
      -0.011151011,
      0.004808608,
      0.004035756,
      0.009381156,
      -0.011135103,
      0.0024934956,
      0.0026339334,
      0.022360375,
      -0.019046217,
      -0.0022470846,
      -0.030867668,
      -0.017906597,
      -0.0098426975,
      0.015499464,
      0.010021588,
      0.0094556445,
      -0.009743533,
      -0.01775814,
      -0.021785274,
      -0.015512887,
      -0.010568693,
      0.013476017,
      -0.0007100884,
      0.020267768,
      0.014870723,
      -0.009029858,
      -0.0035484147,
      0.016497912,
      -0.029961847,
      -0.030894423,
      0.017949281,
      -0.014359028,
      -0.002341124,
      -0.00735585,
      0.011920755,
      -0.027405959,
      -0.011628182,
      -0.0077953446,
      -0.013200776,
      -0.003287436,
      -0.0023268377,
      -0.0038547427,
      0.0015343464,
      0.006136557,
      -0.01070231,
      -0.011834569,
      -0.0153066395,
      0.0077994447,
      0.02401013,
      0.0033548637,
      0.013179591,
      0.0060651707,
      -0.011146698,
      0.00267176,
      -0.0023807236,
      -0.009399429,
      0.013682635,
      -0.016251124,
      0.024416294,
      -0.011822864,
      0.010866701,
      0.003130061,
      -0.0033565883,
      0.011159494,
      0.0024509325,
      0.0024050423,
      -0.006142512,
      0.016669247,
      0.01671662,
      -0.0027659147,
      0.002756296,
      -0.014100044,
      0.012633886,
      0.0016005631,
      0.018295083,
      -0.016892806,
      -0.0053589446,
      0.009898342,
      0.012991578,
      0.022176135,
      0.020982813,
      -0.023358418,
      0.013080314,
      -0.028440543,
      0.028419187,
      -0.00055814104,
      -0.0041403007,
      -0.003296722,
      -0.011489275,
      -0.000583475,
      -0.017470187,
      0.0031840429,
      0.017294323,
      0.008671535,
      0.011696877,
      0.0048205224,
      0.02271023,
      -0.017862651,
      0.0073427167,
      0.0052171876,
      0.002125038,
      -0.000009930951,
      0.010513406,
      0.023989953,
      0.005487695,
      -0.02621026,
      -0.00003913051,
      -0.0045847693,
      0.001985593,
      0.0048335614,
      0.017688956,
      -0.011580617,
      -0.00070603506,
      0.0006085634,
      0.002599989,
      -0.008619562,
      -0.0088724205,
      0.019716438,
      0.009546477,
      -0.010984029,
      -0.0029666424,
      -0.007322301,
      -0.011304833,
      0.03273387,
      0.015449879,
      -0.010116965,
      -0.004520984,
      0.016537378,
      -0.0012174101,
      -0.023836333,
      -0.0057195444,
      0.0032449607,
      0.018067755,
      -0.0052860985,
      0.0116160745,
      -0.024143744,
      -0.0120574655,
      -0.009442584,
      -0.001153585,
      -0.0027016664,
      -0.018130485,
      -0.013602007,
      -0.0077712997,
      -0.00815921,
      0.028273111,
      0.008865494,
      0.0040763104,
      0.015224928,
      -0.010978764,
      0.028975928,
      0.006994662,
      0.003909733,
      0.0034573814,
      0.00037109363,
      -0.014182107,
      0.011940457,
      -0.10482497,
      0.026271092,
      0.00587561,
      -0.016975513,
      0.0008771619,
      0.02176597,
      -0.020967036,
      0.021140248,
      0.0097968355,
      0.015090624,
      0.017123956,
      -0.00684858,
      0.05072411,
      -0.018059965,
      0.0074493573,
      0.006192517,
      0.0006977303,
      -0.01631093,
      0.023250215,
      -0.016532084,
      -0.009474413,
      -0.005103168,
      -0.004686891,
      -0.021902319,
      0.0023213814,
      -0.024064483,
      -0.00044488104,
      0.0305672,
      -0.0050181546,
      -0.005043666,
      -0.0043974034,
      0.05677814,
      0.0110570295,
      -0.018447107,
      -0.0059052696,
      0.007906229,
      0.00729917,
      0.0009911822,
      0.0011933732,
      0.010641001,
      0.03161047,
      -0.03191523,
      0.030047435,
      0.02940705,
      -0.0020579684,
      -0.0062304987,
      -0.012660696,
      0.014520332,
      -0.01730277,
      0.0007459598,
      -0.025277248,
      0.014257323,
      -0.012285789,
      -0.014172167,
      0.009594952,
      0.022349415,
      0.007520553,
      -0.017851518,
      0.0037992003,
      0.018507846,
      -0.01326056,
      -0.011577177,
      0.0029349397,
      -0.010916746,
      0.0018913832,
      -0.0006687301,
      0.028652856,
      -0.02090682,
      -0.0069416417,
      -0.010213839,
      0.018885864,
      -0.0008314489,
      -0.017393485,
      -0.0053344998,
      0.0059660156,
      -0.014402934,
      -0.008763511,
      -0.019935546,
      -0.02123319,
      0.0272778,
      0.004569265,
      -0.005717856,
      -0.0056713214,
      0.003554463,
      0.0113848755,
      0.012233562,
      0.0030747002,
      -0.015149348,
      0.00010810218,
      -0.014109824,
      0.019364629,
      0.03293691,
      -0.019285996,
      0.015572287,
      -0.02411337,
      -0.0063488423,
      -0.007362086,
      -0.0001533281,
      -0.022592425,
      0.020610955,
      -0.009765087,
      0.0100158155,
      -0.018329319,
      0.005076029,
      -0.0033164385,
      0.012992385,
      -0.024998296,
      -0.010952855,
      0.010010789,
      -0.013811263,
      0.022015115,
      0.008767174,
      -0.0025789319,
      0.008512984,
      0.008925783,
      0.0136945825,
      -0.015637118,
      -0.0026449966,
      0.010201648,
      -0.016268961,
      0.012297916,
      -0.012656603,
      -0.02440613,
      0.016338814,
      -0.019032866,
      0.013807633,
      -0.010109747,
      -0.005438276,
      -0.0071243853,
      -0.024074912,
      -0.013788561,
      0.0018502449,
      -0.018238997,
      -0.022422811,
      -0.011116559,
      -0.0042568776,
      0.023840323,
      0.033753574,
      0.014658487,
      0.00006508474,
      -0.00055318215,
      0.0033610296,
      0.018380487,
      -0.0054216483,
      -0.0006388039,
      0.023633013,
      -0.023816075,
      -0.009025861,
      0.0034026918,
      -0.01673127,
      -0.015157408,
      -0.01881385,
      -0.0142617095,
      -0.008124039,
      -0.006551043,
      0.007686372,
      0.025168445,
      -0.025998505,
      -0.017340312,
      -0.01826345,
      0.0051706396,
      -0.0002915918,
      -0.0076494776,
      -0.0024360982,
      0.026954914,
      0.016217362,
      -0.00035018128,
      0.007931128,
      0.0034979314,
      -0.009726336,
      0.00065388274,
      -0.01864806,
      -0.050062995,
      -0.00921649,
      0.023536667,
      0.01352984,
      0.011917261,
      0.0053473185,
      0.023928562,
      0.015731577,
      0.0034537849,
      0.0008492897,
      -0.009967611,
      0.00548804,
      0.026402367,
      0.019124458,
      0.017782878,
      -0.004706898,
      -0.028057707,
      0.0008495905,
      0.004834005,
      -0.0028380011,
      0.0072298343,
      0.017693302,
      0.0022324463,
      0.005504299,
      -0.014190588,
      -0.01862499,
      -0.0022732927,
      0.0033280011,
      0.000060946193,
      -0.01121233,
      0.015148879,
      -0.004555868,
      0.00974413,
      -0.0074165748,
      0.010041679,
      -0.016089864,
      0.0044698617,
      0.011651807,
      -0.014543311,
      -0.008356899,
      -0.0027103845,
      -0.0013084122,
      0.024756784,
      0.015948672,
      -0.01215378,
      -0.008966333,
      -0.024206508,
      -0.003614305,
      0.019569825,
      -0.012402424,
      -0.0055218786,
      -0.016691877,
      0.009300598,
      -0.00029113793,
      -0.0066163517,
      0.0021430305,
      -0.0041294037,
      -0.0012770788,
      -0.008541061,
      -0.006702125,
      -0.0043962593,
      -0.00076055696,
      -0.009825311,
      -0.020733034,
      0.010280387,
      -0.00081019674,
      -0.018219735,
      0.024174716,
      -0.011216526,
      -0.016584715,
      0.011230264,
      -0.0078104464,
      0.0005099156,
      -0.014013564,
      0.019502167,
      0.020330127,
      -0.014045752,
      0.0046481066,
      0.011604253,
      0.03213779,
      -0.006352921,
      -0.016722992,
      -0.015542911,
      0.02639966,
      -0.0018191118,
      -0.016096193,
      -0.014562532,
      -0.012204843,
      0.024136292,
      0.0067377496,
      -0.006427754,
      -0.0035542888,
      -0.014578664,
      0.0032666666,
      -0.011701808,
      -0.014532581,
      0.010959302,
      -0.12525645,
      0.0064846394,
      -0.01292139,
      -0.002701069,
      -0.01725576,
      -0.010346582,
      0.0074445787,
      -0.03441556,
      -0.0027157548,
      -0.0033967183,
      0.029654786,
      -0.013357049,
      -0.004752664,
      0.00064287294,
      -0.0034792954,
      0.008220513,
      0.013991132,
      -0.0023622583,
      0.02723857,
      -0.020425526,
      -0.024579924,
      0.0057057724,
      0.0077035157,
      -0.00409801,
      -0.0341882,
      -0.004302323,
      0.026661474,
      0.010455365,
      0.0044909404,
      0.007403544,
      -0.011062559,
      -0.0010429571,
      -0.012786786,
      0.010015508,
      0.010203392,
      -0.003948449,
      -0.019287221,
      0.011557136,
      0.012893184,
      0.0023804444,
      -0.0103405155,
      -0.0058311936,
      0.0020812287,
      0.016654838,
      -0.00012410241,
      0.020982496,
      0.031785842,
      -0.014452151,
      0.011005813,
      0.028996397,
      -0.04884133,
      -0.02684434,
      -0.009433734,
      -0.035841376,
      0.0034920669,
      0.007082623,
      0.0117420815,
      -0.002848235,
      -0.0009537669,
      -0.010561541,
      -0.0030047705,
      0.0050488375,
      0.014323822,
      0.037828043,
      -0.0048011155,
      0.013060668,
      0.04194756,
      0.0025218318,
      0.0058066533,
      -0.021538371,
      0.008031194,
      0.0054462776,
      -0.007547451,
      0.011095957,
      0.0029618475,
      0.0033528688,
      0.014209998,
      0.0027008387,
      0.014820043,
      0.018408481,
      -0.027365878,
      -0.0020320064,
      -0.05286796,
      -0.021088755,
      0.015020542,
      -0.00079491147,
      0.006398248,
      0.0075540305,
      -0.015683811,
      -0.004261927,
      0.0055358754,
      0.0017993553,
      -0.015426419,
      -0.0032963068,
      0.022446845,
      -0.002665622,
      -0.020898044,
      -0.007637059,
      -0.012674467,
      -0.0064774663,
      -0.0044389768,
      0.013923193,
      -0.005218037,
      -0.0069728587,
      0.024946682,
      -0.019473782,
      0.01762008,
      0.012098937,
      0.004757751,
      0.002526838,
      -0.0052324175,
      0.010603666,
      -0.0067743473,
      -0.16110994,
      -0.028640995,
      0.012553774,
      0.024575375,
      0.010204489,
      0.0042513767,
      -0.020704512,
      -0.007201532,
      -0.002747371,
      -0.008562815,
      0.006036607,
      -0.013581454,
      -0.034742914,
      -0.010664526,
      0.021360265,
      0.13318619,
      0.0005379908,
      0.0030592878,
      -0.017744604,
      0.020269627,
      -0.0074038366,
      -0.030287188,
      -0.005605642,
      -0.0024777441,
      -0.008692984,
      -0.00014774167,
      0.011838935,
      -0.0102968635,
      -0.00995632,
      -0.000027418804,
      0.00576037,
      -0.019806573,
      0.012659621,
      0.013032062,
      0.00049533165,
      -0.0037192306,
      0.0051086163,
      -0.028679626,
      -0.009327544,
      0.003223516,
      0.025280492,
      -0.005155918,
      0.00041444373,
      0.016830008,
      0.008275622,
      -0.0076592597,
      -0.018781653,
      -0.009674141,
      -0.017968312,
      0.002329528,
      0.0057635466,
      -0.04259647,
      0.0048409225,
      -0.009062335,
      0.0024119557,
      0.02520821,
      -0.009651471,
      0.027810406,
      -0.0062536625,
      0.035666842,
      -0.01973081,
      0.007682747,
      0.0028484832,
      0.0058206036,
      0.0057555544,
      0.00012091835,
      0.02375151,
      0.01301015,
      0.015494261,
      -0.010657498,
      0.035050523,
      0.022606812,
      -0.008029003,
      0.023425153,
      -0.0077067586,
      -0.011799072,
      -0.013707284,
      0.031965304,
      -0.0021268332,
      -0.011715925,
      0.007972553,
      0.005296615,
      -0.017022599,
      -0.009422473,
      0.0258258,
      0.010917122,
      -0.018770194,
      0.017343568,
      0.00015664105,
      -0.009502206,
      -0.008336112,
      -0.0043815854,
      -0.0073505547,
      0.010467694,
      0.012094139,
      0.022957137,
      0.018099325,
      -0.012590221,
      0.01734981,
      -0.0014883678,
      0.011319623,
      -0.00067421776,
      -0.018768672,
      -0.026219046,
      0.0226889,
      0.016846484,
      0.00038062144,
      0.0105316695,
      0.010041931,
      -0.008663237
    ]
  },
  {
    "id": "genai_cohort_python_04_Convert_that_into_python_code_vtt",
    "content": "All right, continuing this 2 exact same thing that okay, 3 we do have the steps. 4 Can we convert these steps 5 into Python program? 6 Not really the perfect Python 7 program, but somewhat little bit 8 like that so that I get an idea what 9 it's like to code in the Python. 10 So I will go into the code 11 editor, this is how it looks like 12 and I literally have just drag 13 and dropped a folder to it. 14 A super easy work on that. 15 So I'll even show 16 you what I did here. 17 So let me just show you. 18 I do have a couple of other 19 stuff as well going on, 20 but let me just show you. 21 So I opened the program and once 22 I opened this up, or I can actually 23 go ahead and show you again. 24 Fresh. 25 So this is how it freshly looks 26 like when you open this up. 27 This is VS code. 28 I have installed a couple of themes. 29 I will walk you through as well. 30 But I have just literally 31 created empty folder on my English 32 subfolder there. 33 Python udemy is where we are going 34 to write all of our code. 35 I'll just drag and drop up here. 36 So that's all I did here. 37 Now once I go ahead and open this up, 38 first of all the theme 39 that I use because a lot of 40 people love it and I'm super proud 41 of it that I created this. 42 So you can go up here and search 43 for a chai theme. 44 It actually comes up very top. 45 So chai theme. 46 I love chai. 47 I love T. 48 So go ahead and use it. 49 I use a dark color of it. 50 The code looks absolutely 51 beautiful in this. 52 So that's why I go ahead and use it. 53 You can also install this, 54 it will look absolutely good 55 on your screen as well. 56 And we do have a couple 57 of Python extension as well. 58 If you just go ahead and search 59 for Python you will find other 60 instructions, other extensions which 61 will make your life a little easier. 62 For example, you just have 63 this Python install it. 64 It will give you the color 65 codes and type hinting. 66 You can also install Pylance as well. 67 Again color code, type hinting. 68 They will help you to write the code. 69 You don't have to type 70 everything manually. 71 They literally helps you out in that. 72 Now in this we can click 73 up here at the top to create 74 a folder and create a file. 75 We'll create a folder because 76 we want to mimic this. 77 So this is not going 78 to be original code. 79 Let's call this one as 00 and we'll 80 use an underscore and we're going 81 to call this one as Python. 82 So this is my chapter 00 inside 83 this I'll create a new file 84 and we're going to call this 85 one as non Python code because 86 it's not really a Python code 87 but, but the extension is 88 important. 89 We're going to call this as PY so 90 that we get a feel of what it's like 91 to code in the Python itself. 92 Now don't worry, I will walk 93 you through with installation 94 and everything of it. 95 And in fact let me write this. 96 This whole part is just 97 to get an experience. 98 You don't have to write the code 99 or even follow along with me. 100 So I will just say do not follow or 101 probably I'll say just experience. 102 Just experience it. 103 It's really hard to type in. 104 To type and talk at the same time. 105 But go ahead and just 106 experience this part. 107 You don't have to write any 108 code, even if it's actually 109 not a real code itself. 110 It's not going to work. 111 But I just wanted to have 112 explanation or brief overview. 113 So just like we have 114 actually extracted the things 115 into a separate box. 116 This box in the world 117 of programming known as function. 118 And yeah, function means I will just 119 wrap the things, whatever 120 my instruction is, into a box. 121 So literally function is a box. 122 So this is how you create your box. 123 So we'll call our box as makechai. 124 Pretty good. 125 And we use a syntax of these 126 parenthesis, then a simple column. 127 This is syntax. 128 You don't have to even remember that. 129 Eventually you will just learn them. 130 Then I hit enter and I see that I 131 do have four spaces automatically. 132 This is Python. 133 Python works on indentation. 134 If you go ahead and remove 135 this, this is bad. 136 Your code is not going to work. 137 We will learn about these 138 details later on. 139 But you should give indentation. 140 And it's usually not 141 recommended as tab, it's 142 recommended as four spaces. 143 So 1, 2, 3, 4. 144 I will walk you through why it 145 is four spaces, not the tab. 146 And internally tab also 147 gives you four spaces. 148 But we'll talk about it later. 149 Then we go ahead and simply 150 say not if not. 151 And yeah, it's a little bit 152 weird, but you'll understand that 153 kettle has water. 154 And then I simply go ahead and put 155 the same parenthesis colon 156 and we simply say fill cattle. 157 There we go. 158 Can you understand 159 this piece of code? 160 And I'm pretty sure you can. 161 It's saying if not kettle has water. 162 So it's probably saying that if 163 cattle doesn't have the water, 164 go ahead and fill it with the water. 165 And yes, if you can understand 166 this part, yeah, this is it. 167 That's how we actually go 168 ahead and write our program. 169 Let's go ahead and move on further. 170 So Katl part is done. 171 Then let's go ahead and ask somebody 172 to say that plug in kettle so 173 that they can actually plug in. 174 So we'll just go ahead 175 and say plug in the cattle. 176 That's another function that 177 means somebody will do it. 178 There's more instruction how 179 to do it, like pull up the cord, 180 move nearby, switch, plug it. 181 Like there are more instructions, 182 but let's just call this, 183 this is again a function. 184 Then this will help you 185 to actually, boil water. 186 There we go. 187 Write another function for it. 188 And we're going to say if not, 189 let's just say is cup clean? 190 So what should I do if 191 the cup is not clean? 192 You might be saying, 193 hey, just wash the cup. 194 Probably yes. 195 Or pick another cup. 196 It could also be correct. 197 After that we simply go 198 ahead and say add to cup. 199 What do you want to add to the cup? 200 Now probably, we'll see T leaves. 201 Yes. 202 And let's go ahead. 203 And what else do you want to add? 204 Maybe sugar. 205 So let's use the same method because 206 we are adding to the cup itself. 207 Then we probably want to pour it. 208 So let's just go ahead and say 209 there's a pouring, method 210 which says that, hey, 211 where do you want to pour? 212 We want to pour it into a pour. 213 What to pour? 214 Probably let's just say boiled water. 215 Maybe just like that. 216 Then probably you want to stir. 217 Where do you want to stir? 218 Maybe cup. 219 Oops, cup. 220 And then we simply want 221 to say serve, chai. 222 And there we go. 223 And function in the world 224 of Python also needs to be called. 225 So we'll just move a little 226 bit there and we'll just 227 call this as make chai. 228 And there we go, we 229 call the function. 230 So although you probably didn't 231 understand how to write this, 232 but if you can understand, okay, 233 I get like 60% of it or even 30% 234 of it, that how this is. 235 Eventually our Python code 236 will look exactly like this. 237 And this, believe it or not, 238 is Python programming. 239 That is why everybody says that 240 it is super easy to learn. 241 If you can read English, you can 242 definitely read Python code. 243 And this is actually 244 a legit Python code. 245 We have used so much of 246 the functionality already into it. 247 Now surely it's not an accurate code. 248 I would 100% say that, but it's 249 fairly understandable. 250 And that's the whole point of 251 the Python that anybody can learn it 252 as long as you know how to read it. 253 Like, if not, kettle has water. 254 So probably it's saying, if kettle 255 doesn't have it, we'll fill this. 256 So based on condition, we have 257 learned so much conditions 258 and functions and whatnot, even 259 methods and strings and whatnot. 260 But the whole point is that you 261 understand this piece of code and we 262 have converted this whole thing, 263 probably not line by line, but a lot 264 of it, into this piece of code. 265 And that's exactly what we'll be 266 doing throughout the course. 267 We'll design the diagrams like this. 268 Hey, these are my steps. 269 And now let's convert 270 these steps into the code. 271 That is whole programming experience. 272 So I hope now you understand 273 that what it is like to experience 274 in writing the Python code, 275 it has a lot more. 276 We will definitely explore 277 that part, but at least this 278 gives you a little bit. 279 Probably 20% would be good. 280 20% confidence that, yes, 281 you can also write it. 282 As long as you got 283 this, that is okay. 284 That's all I want. 285 So let's go ahead and move on 286 to the next video where we are 287 going to discuss more 288 on the Pythonic stuff of the things. 289 Let's move into the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "04 Convert that into python code.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/04 Convert that into python code.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.018937899,
      0.0129534,
      0.007891355,
      -0.06718303,
      0.0015260132,
      -0.009945688,
      -0.0021446804,
      0.01239035,
      0.000093334245,
      0.0075901076,
      -0.020495608,
      -0.022707067,
      0.015421313,
      0.027898217,
      0.14100224,
      0.0017662549,
      -0.012784944,
      0.0059815957,
      -0.0034775124,
      -0.01498498,
      0.0009258763,
      0.01355207,
      0.008364059,
      -0.005917828,
      -0.0029477198,
      -0.017363483,
      0.00699576,
      0.027955925,
      0.025013058,
      -0.031827677,
      -0.023541838,
      0.0030922059,
      0.0025225107,
      0.016439464,
      0.013721877,
      0.030272996,
      -0.0018658601,
      -0.009902659,
      -0.011133957,
      0.023900526,
      -0.033859752,
      -0.007858,
      -0.014232907,
      -0.011997771,
      0.021324674,
      -0.011249775,
      -0.005639226,
      -0.021944616,
      0.010091275,
      0.021035895,
      0.008511819,
      0.007474388,
      -0.014456973,
      -0.18256006,
      0.0011379855,
      -0.012832648,
      -0.007314309,
      0.00034607624,
      0.008233481,
      0.0016705606,
      -0.020765712,
      0.016451435,
      -0.04387993,
      -0.012296616,
      -0.021217585,
      -0.022246983,
      0.017715994,
      -0.017541986,
      0.017798843,
      -0.012729506,
      0.008039216,
      0.0082767075,
      -0.013066255,
      0.0059720115,
      -0.025350416,
      -0.016689003,
      -0.0013647582,
      -0.020502651,
      -0.004716649,
      0.020020261,
      -0.0004998441,
      -0.009296382,
      -0.007420545,
      -0.0032832434,
      0.021675425,
      0.007012137,
      -0.018933374,
      0.0112422425,
      0.0009223035,
      -0.019063588,
      -0.02724727,
      0.022573287,
      -0.0048528155,
      0.012383783,
      -0.031953428,
      0.003027465,
      -0.00049588544,
      -0.01124802,
      0.00036354046,
      0.0010044532,
      0.0024414372,
      -0.026966348,
      -0.023772065,
      -0.027926775,
      -0.0020641356,
      0.008809267,
      0.01753472,
      -0.013780805,
      0.0067842933,
      -0.022169875,
      -0.015455445,
      -0.0109850485,
      0.003738887,
      0.024135495,
      0.00954468,
      -0.17627065,
      -0.0007350256,
      -0.004436933,
      -0.021225736,
      -0.0036297147,
      0.00012559973,
      0.0026210807,
      0.0037952892,
      0.020934226,
      -0.0062036873,
      0.0115330275,
      0.006953089,
      0.021815535,
      -0.012174819,
      -0.0017569176,
      -0.017725112,
      -0.020665584,
      -0.002905448,
      0.017696962,
      0.0090765925,
      0.0036831738,
      -0.0028562474,
      -0.008623391,
      -0.020243168,
      -0.022262424,
      -0.006153054,
      0.023308918,
      -0.0060609644,
      0.031155678,
      0.010536844,
      -0.008835602,
      -0.0023480542,
      0.017797869,
      -0.02221423,
      -0.027363878,
      0.01451201,
      -0.02542665,
      0.0070688813,
      -0.009602319,
      0.01625647,
      -0.026556993,
      -0.008100534,
      -0.009141365,
      -0.014168352,
      0.0009833848,
      0.00060158223,
      -0.011518283,
      0.005667121,
      0.011601509,
      0.00051051046,
      -0.0012954496,
      -0.009245537,
      -0.0009980543,
      0.022447241,
      0.001868258,
      0.008111006,
      -0.012061834,
      0.0069636614,
      -0.006767027,
      0.00036624697,
      -0.007105674,
      0.009138815,
      -0.023911502,
      0.013126146,
      -0.011424062,
      -0.0057004886,
      -0.01157834,
      -0.0022627458,
      0.011541809,
      0.01059995,
      -0.009860456,
      -0.018625192,
      0.024970483,
      0.030580206,
      -0.014571404,
      0.0035866068,
      -0.004913327,
      0.017725524,
      -0.0029992466,
      0.02760239,
      -0.030355021,
      -0.01126234,
      0.011595688,
      0.005937628,
      0.017913077,
      0.030734787,
      -0.012483226,
      -0.010899073,
      -0.027169693,
      0.040700857,
      -0.005866735,
      -0.008153093,
      -0.015513521,
      0.0037763931,
      -0.004991248,
      -0.016227942,
      -0.0018939192,
      0.013420296,
      0.011418727,
      0.022936128,
      -0.0019072165,
      0.017041897,
      0.000043486893,
      0.003902763,
      -0.0023299935,
      0.023950057,
      0.00824061,
      0.010432121,
      0.026118107,
      -0.0034209765,
      -0.0197315,
      0.011392793,
      -0.016035313,
      0.004001913,
      0.003958807,
      0.024985168,
      -0.006744846,
      -0.014801019,
      -0.0055210353,
      -0.0026583872,
      0.00077480404,
      -0.004416178,
      0.017475504,
      0.0049836,
      -0.0051443935,
      -0.00036288082,
      -0.006032681,
      -0.01095508,
      0.013929507,
      0.021634704,
      0.0039976044,
      0.011581213,
      0.0058909124,
      -0.009448962,
      -0.025262097,
      -0.018215101,
      -0.005753649,
      0.016089115,
      -0.010666982,
      0.004612279,
      -0.013543157,
      -0.011597053,
      -0.010280693,
      -0.0047068,
      -0.012962016,
      -0.018682688,
      0.007401183,
      -0.010395925,
      -0.013635583,
      0.024004927,
      -0.004565374,
      0.012187237,
      0.029192492,
      -0.004096698,
      0.019361075,
      0.0040117307,
      0.020987984,
      0.0043122154,
      -0.013764727,
      -0.03293368,
      0.024278695,
      -0.105667025,
      0.037103005,
      0.010665886,
      -0.020830719,
      0.019749463,
      0.019374259,
      -0.019498229,
      0.0073474683,
      0.0005120242,
      0.018041905,
      0.007289061,
      -0.0038644075,
      0.049618617,
      -0.0041254926,
      -0.004159649,
      -0.013292968,
      0.0074612177,
      -0.023242934,
      0.02964826,
      -0.014235364,
      0.0014390039,
      -0.014254094,
      -0.0028169071,
      -0.031039601,
      0.008930558,
      -0.014084575,
      -0.005557122,
      0.022291185,
      0.013306814,
      -0.017466906,
      -0.010927549,
      0.039903995,
      -0.0035867156,
      -0.024047133,
      -0.009549193,
      0.00079383777,
      0.00971447,
      0.001294395,
      0.011683556,
      0.0006964787,
      0.026624555,
      -0.010871156,
      0.017327016,
      0.021408375,
      -0.008935316,
      0.008427166,
      -0.01841863,
      0.006676897,
      -0.013803546,
      0.010002067,
      -0.029529938,
      0.022309808,
      -0.0074155894,
      -0.00902959,
      0.016168032,
      0.026682008,
      0.011327332,
      -0.01863352,
      0.018610824,
      0.01529228,
      -0.015098206,
      -0.0011320352,
      0.010168655,
      -0.0054705064,
      -0.001069986,
      -0.006641358,
      0.025851754,
      -0.012353641,
      -0.015314074,
      0.0037265038,
      0.020216374,
      -0.004614958,
      -0.005800116,
      -0.014715708,
      -0.011119287,
      -0.012165725,
      -0.009307998,
      -0.010910948,
      -0.020394642,
      0.016326392,
      0.0065588485,
      -0.010142253,
      0.0007156082,
      0.007659411,
      0.0027152477,
      0.0030661842,
      -0.004434989,
      -0.004450319,
      -0.0034086253,
      -0.023371482,
      0.020236893,
      0.025512006,
      -0.011816187,
      0.009515115,
      -0.017040249,
      -0.0028496152,
      -0.019625945,
      -0.006141813,
      -0.0063026333,
      0.021886727,
      -0.0155883245,
      -0.004961646,
      -0.0037752483,
      0.0090060625,
      -0.006496427,
      0.00034733847,
      -0.02414569,
      -0.016574088,
      0.009646596,
      -0.024537068,
      0.009462048,
      -0.0071049626,
      -0.0069492077,
      0.0054094093,
      0.00029500684,
      -0.00046627424,
      0.000795991,
      -0.0014710296,
      0.018936075,
      -0.018817706,
      0.004062838,
      -0.0031591433,
      -0.036732286,
      0.012583852,
      -0.013365456,
      0.01207488,
      -0.010247676,
      -0.0014204977,
      -0.00505271,
      -0.01608507,
      -0.0074015264,
      0.014732107,
      -0.022831125,
      -0.010594012,
      0.0066450858,
      0.0065123662,
      0.020735227,
      0.02805861,
      0.019694997,
      0.0029779417,
      -0.005930913,
      0.0007275071,
      0.017188357,
      -0.0055119065,
      0.00002836052,
      0.019970607,
      -0.033701207,
      -0.02566519,
      0.0023154935,
      -0.020124579,
      -0.01322959,
      -0.0071345987,
      -0.019073298,
      -0.0066957567,
      0.0008057487,
      0.0115486095,
      0.013899982,
      -0.01677395,
      -0.018385774,
      -0.026677627,
      0.0007647208,
      0.0080263605,
      -0.017413776,
      0.0013581185,
      0.018943714,
      0.020197181,
      0.0029440192,
      0.0028465616,
      0.013633737,
      -0.0014183655,
      0.0008962853,
      -0.012456337,
      -0.037130173,
      -0.01329137,
      0.024957424,
      -0.008156992,
      0.014972163,
      0.010004434,
      0.024916556,
      0.0013973179,
      0.014487063,
      0.012760149,
      -0.008661609,
      -0.002772976,
      0.01924984,
      0.011560694,
      0.006515401,
      -0.004594905,
      -0.028328648,
      0.0077739195,
      0.010098746,
      -0.029453637,
      0.00873065,
      0.012991065,
      -0.0021054365,
      0.02158615,
      -0.0126577085,
      0.0014709728,
      0.0019149501,
      0.0072352476,
      -0.00155418,
      -0.004133034,
      -0.005742189,
      -0.00748902,
      0.0052432627,
      0.0010356876,
      0.002620011,
      -0.00021893244,
      0.0030820693,
      0.021296864,
      -0.02050803,
      -0.011328159,
      0.0052538333,
      0.0027185068,
      0.019622007,
      0.029415611,
      -0.015172004,
      0.0008564616,
      -0.02680738,
      0.016857682,
      0.021726072,
      -0.013550365,
      0.0025717698,
      -0.031045523,
      0.008417306,
      -0.022277987,
      -0.0016696887,
      0.0040444257,
      -0.007134151,
      -0.0063420804,
      -0.007926316,
      -0.0056323027,
      0.010170647,
      0.002961183,
      -0.013443337,
      -0.0200537,
      0.013221259,
      0.024663182,
      -0.015071014,
      0.028348533,
      -0.009376626,
      -0.012086363,
      -0.0015248943,
      -0.0077864933,
      0.0073003382,
      -0.00024089387,
      0.031213488,
      -0.0024800256,
      -0.0029957434,
      -0.005331914,
      -0.0020273984,
      0.042704217,
      -0.010374993,
      -0.009061838,
      -0.012669331,
      0.027315522,
      -0.008679943,
      0.00207137,
      -0.01001098,
      -0.023322053,
      0.0060134823,
      0.010814581,
      -0.0051460858,
      -0.0040759854,
      -0.0069307075,
      -0.011086139,
      -0.011934271,
      -0.009498567,
      0.007522676,
      -0.1422958,
      0.0093675135,
      -0.012553291,
      -0.00081306405,
      -0.011839929,
      -0.0053379177,
      0.011938355,
      -0.018485207,
      0.008574501,
      -0.0023602343,
      0.029232884,
      -0.004013885,
      0.00008018044,
      -0.003929978,
      0.004581397,
      0.004528175,
      0.0035548816,
      0.00048789597,
      0.040745653,
      -0.007740789,
      -0.021391269,
      0.013807523,
      0.019814696,
      -0.021342427,
      -0.032539733,
      -0.019030556,
      0.01149085,
      -0.0072920853,
      -0.008311529,
      -0.00245053,
      -0.03562099,
      -0.016730765,
      0.002287741,
      -0.0009193563,
      0.018217245,
      0.0003066482,
      -0.033403635,
      0.011574703,
      0.0137541955,
      -0.008595682,
      -0.0027425284,
      -0.0019889674,
      0.007665498,
      0.022422597,
      -0.011997522,
      0.011337782,
      0.025260033,
      -0.012360407,
      0.009192974,
      0.020966593,
      -0.03948158,
      -0.02864595,
      -0.016133077,
      -0.027016675,
      -0.01241763,
      0.019481655,
      0.001231855,
      0.0016355406,
      -0.0038321756,
      -0.011446487,
      0.006944688,
      0.013856453,
      0.0132459495,
      0.02701854,
      0.004695406,
      0.00010075036,
      0.02887703,
      0.013132849,
      0.010372792,
      -0.010707482,
      -0.004962035,
      -0.0061124233,
      0.013812134,
      0.011807903,
      0.012455166,
      0.007124661,
      0.009727215,
      -0.0003869496,
      0.0023420942,
      0.0098095825,
      -0.028669994,
      -0.0074764704,
      -0.055185888,
      -0.035291802,
      0.010872347,
      -0.0047698827,
      0.015116411,
      0.019665979,
      -0.010558614,
      -0.008115189,
      0.0039548054,
      0.0016564864,
      -0.028443458,
      -0.0016149539,
      0.018116286,
      -0.00058153865,
      -0.018860564,
      0.0006919356,
      -0.01235216,
      -0.012378939,
      -0.00024871717,
      0.02211747,
      0.002512164,
      0.0070117884,
      0.0211334,
      -0.033620387,
      0.020917999,
      0.010227035,
      -0.0031960318,
      0.0043584667,
      0.0059644785,
      -0.005225048,
      0.0013255675,
      -0.16584635,
      -0.017388457,
      0.012438985,
      0.006183788,
      0.0391651,
      -0.0010493477,
      0.0017631273,
      -0.007014994,
      -0.0019309815,
      -0.007124151,
      0.003928808,
      -0.02538001,
      -0.037597682,
      -0.0028239375,
      0.029612005,
      0.12368842,
      -0.016236443,
      0.00065824395,
      -0.013241469,
      0.022113504,
      -0.008602888,
      -0.023350138,
      -0.011611608,
      -0.0032509817,
      0.0047574365,
      -0.011376529,
      0.0062247836,
      -0.00423592,
      0.0072365436,
      -0.011669061,
      0.007739394,
      -0.0033226165,
      0.009232452,
      0.010867336,
      -0.0018347292,
      -0.008648481,
      0.0039648586,
      -0.00073541765,
      -0.0062715206,
      -0.0033866721,
      0.012485938,
      0.006522666,
      0.0033653325,
      0.016291328,
      0.017486274,
      -0.003828957,
      -0.022127118,
      -0.018052254,
      0.00032911933,
      0.0006231825,
      0.0005270294,
      -0.041302502,
      -0.004923011,
      -0.01827347,
      -0.009958411,
      0.03267883,
      0.0064369095,
      0.0074006263,
      0.016025875,
      0.026562868,
      -0.013623248,
      0.010581114,
      0.010750863,
      0.0065814974,
      -0.00077921036,
      -0.0019819366,
      0.030611211,
      0.021849297,
      0.030692475,
      -0.012738892,
      0.02154714,
      0.023242211,
      -0.009799116,
      0.03200319,
      -0.014237189,
      -0.015039364,
      -0.0034977656,
      0.032635234,
      0.0024280075,
      -0.0027487911,
      0.009205728,
      -0.0005852528,
      -0.0010565614,
      -0.00876696,
      0.01816591,
      0.015702415,
      -0.028707387,
      0.005232796,
      -0.0058630607,
      -0.0060860342,
      -0.0022863986,
      -0.0003843174,
      -0.0003530689,
      0.008599306,
      -0.003587204,
      0.014710671,
      0.0033223354,
      -0.022366304,
      0.031825963,
      -0.0024757124,
      0.0012172295,
      -0.0018919678,
      -0.0012983787,
      -0.036683157,
      0.017449517,
      0.029036548,
      -0.0007291786,
      0.01033863,
      0.0005410578,
      -0.015296839
    ]
  },
  {
    "id": "genai_cohort_python_05_A_real_world_python_code_intro_vtt",
    "content": "All right, I hope you are 2 enjoying this in this video also 3 I will introduce you 4 to the more code and more keywords. 5 Now don't take it too much 6 on the pressure side, take it light. 7 I'm just introducing you with a lot 8 of keywords on the code. 9 You will understand it more as we 10 grow and we got into the course. 11 But I just want you 12 to taste the Python right now. 13 We are not writing accurate 14 Python, but I just want you 15 to feel the language. 16 How does it look like? 17 It's not that scary. 18 Just type on the things 19 on the keyboard, you will 20 be all in under control. 21 Let's explore more 22 part of the Python. 23 Let me take you on the screen and you 24 will get to know more about it. 25 So we'll explore a little 26 bit about the Python. 27 Objects, properties, methods. 28 So what this is all about, 29 so whatever we have written here, 30 like boil waters, this is function. 31 This is also known as methods. 32 So it wouldn't be wrong if 33 I just go ahead and name this 34 whole thing as a method. 35 Yeah, method or call it as function. 36 These are like interchangeably terms. 37 So again, this makechai 38 is also a function. 39 And this whole fill kettle, 40 this is also a function. 41 Anything that has parenthesis, 42 this is a function. 43 Now, not all the time, we actually 44 write functions like this. 45 Sometimes we actually 46 write them something like this. 47 So we have a whole big box 48 and just like we have this small 49 box up here, we actually like 50 to write a lot of these functions. 51 So imagine this is one, 52 this is another one. 53 This is another one, 54 this is another one. 55 That's exactly what we, we saw that 56 we have fill kettle, we have plug 57 in kettle, we have boil water. 58 All these are functions, 59 so consider them as like this. 60 Now when we have these kinds 61 of things as methods or properties, 62 sometimes we call this 63 outer box as another name. 64 Yeah, this is known as whole class. 65 So I'll just go ahead and name this, 66 this is known as class. 67 And class could be named 68 anything, whatever you like, like 69 chai, chai, shop, whatever. 70 So this is whole big, like a factory. 71 And each factory has 72 its own smaller units. 73 Would you like to actually go 74 into the depth of it? 75 Surely we will write some 76 of the example code for it so that 77 we can understand more of it. 78 Apart from this, I also want you 79 to understand couple of more things. 80 First of all, there is 81 something known as object. 82 What is an object? 83 So in the world of programming, a lot 84 of things are called as object. 85 In the real world, let's just say 86 you want to call an object a cup. 87 Definitely it's an object. 88 Probably a, kettle. 89 This is also an object, 90 or probably chai. 91 This is also in itself an object. 92 This is like a thing in the world 93 of programming in itself. 94 Apart from this, you will 95 also get to know about 96 something known as properties. 97 So what are properties? 98 Just like English, nothing else. 99 Properties is like probably cup, 100 color, that's the property, 101 or probably chai sweetness. 102 So that is also a property. 103 Yeah, as I told you, it's exactly 104 like how it is in the real world. 105 And then finally we have 106 something known as methods, or 107 we call them as functions. 108 This is the most important part. 109 This is the actionable step. 110 Or I can call this as 111 in simple actions. 112 This is like performing something. 113 Probably you are staring 114 or you are pouring. 115 I'll just write pour, not pouring, 116 you're pouring 117 or pour or, or probably drink. 118 These are methods and this is 119 all what we're going to learn 120 in the world of Python that, okay, 121 this is all the things that I 122 have to go through and learn. 123 And yeah, this is all it 124 is all about, the Python. 125 All right, nicely 126 captured, nicely drawn. 127 I'll put up a box so that 128 when you see this, this looks 129 good, beautiful to you. 130 So a whole Python program can be 131 a mix of these classes, these 132 methods, objects and properties. 133 And that's what makes a program. 134 Can we go ahead and write 135 another fake program which doesn't 136 work, but still gives you 137 an idea of all the thing that 138 we are trying to do here. 139 Let's go ahead and try this. 140 Let's close this. 141 This is not going to work again, 142 but we can create a new file. 143 We are going to call this one as, 144 non Python Shop Py. 145 Of course, py is an extension 146 to write Python files. 147 And, and don't worry, very soon 148 we're going to again 149 see that how to actually install 150 the Python and go for it again. 151 This is also again a part where 152 I just say, just experience it. 153 And again, don't worry, you will 154 write a ton of code in the Python. 155 So right now just 156 experience it with me. 157 As I said, sometimes 158 we call it as class. 159 So this is a bigger, bigger function, 160 like big boss of a function. 161 We call this one as a chai. 162 There we go. 163 We don't put parentheses around 164 it because it's a class. 165 And as I mentioned, this 166 is exactly like this. 167 We have a class, we can 168 call it whatever you like. 169 In this case we are 170 calling it as chai. 171 In this we can have multiple of 172 these small factories or small area 173 in a chai shop or Just a function. 174 So let's go ahead and see 175 more keywords which 176 you haven't seen that. 177 So then we will discuss them. 178 Don't you worry. 179 We actually use to underscore. 180 Then we call init. 181 Then we use to underscore again. 182 And then we put it like this. 183 This means we have opened 184 the Chai factory. 185 Whenever you open a factory, it 186 requires some of the minimum things 187 in that, we will use them. 188 So whenever you open a new shop, 189 you need licenses, you need 190 some table and chair, maybe 191 a stove, something like that. 192 So we first of all, whenever we 193 use something like this, there 194 is a keyword known as self. 195 We will go in depth of it. 196 Don't worry about it, 197 don't sweat it too much. 198 This is just an experience 199 part that what's about to come. 200 We will go in depth 201 of each and everything. 202 Right now just sit back, enjoy it. 203 Then whenever you open, this one, 204 you actually go ahead and divide 205 something like sweetness. 206 That okay, by default if I'll cook, 207 a T or I'll brew a T, this is going 208 to be my sweetness level. 209 This is going to be my milk level. 210 Of course customer can customize 211 it, but this is my factory. 212 I'm just setting this 213 up blueprint of it. 214 So I'll just go ahead 215 and say self again. 216 This is a syntax. 217 Don't worry on too much. 218 I'll just go ahead and say sweetness. 219 So whenever I make it, this is going 220 to be my sweetness again. 221 What is this syntax? 222 Don't you worry, we 223 will understand this. 224 Right now I just want 225 you to have this. 226 This is a syntax 227 similar to sweetness. 228 We are going to go ahead and have 229 the milk level of it as well. 230 We are going to go ahead and say 231 milk underscore level. 232 And we're going to go 233 ahead and say milk level. 234 So whenever I open up a factory, 235 there is a method known as init. 236 And again, this has 237 its own importance. 238 So whenever you open up a class, 239 you have to have 240 to provide an INIT method. 241 Init. 242 And that's what we are doing. 243 So class INIT means class 244 has been initialized. 245 As soon as you initialize, you 246 cannot have an empty shop. 247 There needs to be some cup, 248 some T, or some preparation 249 method, something like that. 250 So this is our preparation method. 251 If you understand it, that is okay. 252 If you not understand 253 it, please remove it. 254 As of now, we are not 255 focusing on these. 256 I just want you to have. 257 Because as many time as you're going 258 to see in the iteration these 259 words, this will make your life 260 a Little easier right now. 261 It might feel a little bit 262 overwhelming, but that's okay. 263 Then let's try to set 264 up the factories. 265 Okay, so factory number one, 266 let's call this one as sip. 267 Somebody sip the T. 268 So we're going to define 269 method computer. 270 Is that dumb? 271 You have to define everything in it. 272 And whenever you define anything 273 inside the class, you have 274 to actually get the self. 275 What is the self? 276 It has its own important meaning. 277 We will explore it, we'll 278 cut through it like in depth 279 and we'll see everything. 280 And right now we just want 281 to have a print statement. 282 You're going to see in the Python 283 a lot of printing statement. 284 Get ready for does nothing. 285 It just prints nothing 286 in a black terminal. 287 That's it. 288 Okay, so we're going 289 to say sipping chai. 290 That's it. 291 We can have another factory or a, 292 small factory for it. 293 Let's just say somebody 294 wants to add a sugar. 295 So let's just create a method for it. 296 I want you to add sugar. 297 Again, self is obviously 298 going to be always there. 299 And then we ask how much 300 amount you want to have 301 and we're going to do nothing. 302 We're going to just go ahead 303 and say print like 304 added the sugar just like it. 305 So this is the most basic part 306 of how it's being done. 307 So we have a class, we have 308 this one basic factory. 309 Then we have two of these 310 methods inside this. 311 So you can add more as well. 312 We had just added two more. 313 Feel free to add more. 314 Like maybe you want to have 315 how strong you want 316 to have T so the customer 317 can tell the amount of T. 318 Now how do we go ahead 319 and get started with this? 320 So again, a little bit more code. 321 But again just experience this. 322 We will go through it, 323 we'll dissect of it. 324 But again I just want to have 325 you a little bit of experience. 326 People try to delay it as 327 much as I don't want. 328 I want you to have 329 at least a look that. 330 Okay, this is coming up. 331 It's okay. 332 It's okay to have this 333 much of line of code. 334 So how do we do it? 335 We simply go ahead and use this chai. 336 Remember we have used 337 the uppercase letter here. 338 So that's how we do it. 339 As soon as I make my chai, 340 this method will kick in. 341 This is init. 342 So as soon as initialized or 343 means you have set up a 344 factory, you have to tell me 345 how much sweet it is going to 346 be, how much the milk level is 347 going to be. 348 And again it's super easy. 349 I'LL just go ahead and say 350 that, hey, my sweetness level is 351 going to be probably three. 352 I don't know what that three is. 353 Maybe three teaspoon, 354 maybe three, tablespoon. 355 I don't know, but it is something. 356 Then I also give milk level. 357 I don't know. 358 We have probably milk 359 level one, two or three. 360 I'll just say 50, 50, like 361 two portion of milk. 362 I don't know how it is. 363 And then we can store it into 364 a memory with some reference. 365 And we can call 366 with a name like my name is Hitesh. 367 Your name might be Rahul 368 or John, whatever it is. 369 So we're going to call 370 this one as my chai. 371 So we're going to go ahead 372 and say my underscore chai. 373 And then we're going to say equal. 374 And again, I can write that better. 375 Mychai now mychai can use or 376 can run any of these methods. 377 You don't have to say define again. 378 You just have to name the method. 379 That's it. 380 So notice here, mychai can actually 381 use a dot and it has all the methods 382 like I can add sugar, I can sip. 383 I don't want to sip right now. 384 I want to add sugar. 385 How, how much sugar you want to add? 386 I don't know, probably 387 one, probably five. 388 Whatever. 389 So again, this is really a lot 390 of code in the very first section. 391 But I want you to taste this. 392 Not the T, but the whole 393 code part of it. 394 I could have avoided this 395 and got you into the course first 396 and just get you comfortable. 397 But I want you to write the code 398 by the end of this course. 399 That's why I've written this much 400 of the code in front of it. 401 15 lines of code in the very 402 first section is usually 403 avoided by most teachers. 404 I don't, I want you 405 to get right into it. 406 So I hope you got this part that. 407 Yes, this is like an object. 408 And again now just see that whatever 409 we have done, do we have some of 410 the objects like cup, kettle, chai? 411 Yeah, probably yes. 412 A little bit of the sweetness. 413 We do have some of the cups as well. 414 Probably sipping. 415 We can add some cups. 416 We have some properties as well, 417 like chai, how much sweet it is. 418 We are manipulating these 419 properties as well. 420 We do have some methods as well, 421 like stirring, pouring, drinking. 422 So we have a drinking 423 method like sip. 424 We have a method for adding 425 the sugar and we are controlling 426 some of the properties like 427 sweetness or milk. 428 So this is how a Python program 429 and believe it or not, you have 430 written a, really, really remarkable 431 and Complex Python code already. 432 This is exactly right now 433 it doesn't have a meaning. 434 But as eventually we'll go through 435 and we'll learn about the logic 436 part of it, you will be able to 437 turn everything into logic, like 438 what happens when you click on 439 the screen, what happens when you 440 move the cursor away from the 441 screen. 442 All of this can be controlled here, 443 and that's what I want you to see. 444 Yeah, Programming is nice and simple 445 again in this section. 446 From here onwards, we are not going 447 to be writing any more code. 448 Don't worry about it. 449 Your experience part is over. 450 But as long as you are decently 451 comfortable in this piece of 452 code, and this piece of code, you 453 probably don't write it right 454 now, but at least you understand, 455 okay, the SIP is a smaller 456 factory inside a bigger factory 457 and I can use it. 458 The add sugar is also like a small 459 factory, which does some work. 460 I don't know what work, but it 461 does some work to my program, 462 to my variables, or mean some 463 information on the program. 464 As long as you're comfortable 465 with this, that's it. 466 Your journey will be super easy 467 in the Python and this 468 is what it is coming up. 469 All right, so this is all the code 470 part for the section one. 471 Now let's go ahead and take a little 472 bit tour of the theoretical part. 473 And in the very next video, 474 we're going to learn one more thing 475 which is super important 476 for you to understand that why 477 we are going with the Python. 478 Of course you are in this course, 479 that's why we are going with it. 480 But there are other reasons that why 481 Python is getting popular and why 482 I made this course as well. 483 Let's go ahead and move on 484 to the next video 485 and explore why Python part.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "05 A real world python code intro.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/05 A real world python code intro.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0016072926,
      -0.0049812947,
      0.034548722,
      -0.061675757,
      0.00485535,
      -0.014346087,
      -0.0040099006,
      0.013830047,
      0.0068103224,
      0.005368414,
      -0.015882388,
      -0.009970909,
      0.0053287474,
      0.026873704,
      0.13786834,
      0.0022613036,
      -0.009430007,
      -0.011926597,
      -0.0007462807,
      -0.0026944373,
      0.005907251,
      0.010319173,
      0.024514616,
      -0.00728177,
      -0.0033812465,
      -0.0060259453,
      0.007019687,
      0.03149949,
      0.028599543,
      -0.029194973,
      -0.0118694985,
      0.023309063,
      0.012716251,
      0.015744172,
      0.014451377,
      0.029334133,
      0.0056129606,
      -0.024387717,
      -0.017413506,
      0.011888533,
      -0.042752896,
      0.004570997,
      -0.003439185,
      -0.0055096694,
      0.013480712,
      -0.008998204,
      0.0021659916,
      -0.016555734,
      0.021928415,
      0.016956262,
      0.0069208965,
      0.0050181192,
      -0.01255574,
      -0.1794558,
      0.015588602,
      -0.005725076,
      -0.018500406,
      -0.006393286,
      0.0106517,
      0.005526906,
      -0.02556848,
      0.01993491,
      -0.036251415,
      -0.0014398217,
      -0.007760536,
      -0.024645898,
      0.020822909,
      -0.005705762,
      0.015808873,
      -0.0014065591,
      0.012941693,
      0.013896583,
      -0.020064287,
      -0.007887548,
      -0.027711857,
      -0.024031956,
      0.011923953,
      -0.0048516006,
      -0.0014858439,
      0.028848764,
      -0.007751454,
      -0.0029511738,
      0.0019695289,
      -0.007303534,
      0.025983736,
      -0.007634471,
      -0.027158005,
      -0.015469008,
      -0.00921596,
      -0.020696802,
      -0.017158026,
      0.012567016,
      0.009130154,
      0.017595077,
      -0.01873212,
      -0.0057946118,
      -0.025713006,
      -0.015643977,
      -0.011635601,
      0.008657001,
      0.0011841407,
      -0.018418783,
      -0.02761349,
      -0.03239985,
      0.0063131694,
      0.0059170173,
      -0.0037915315,
      0.0010289,
      -0.021343507,
      0.004442911,
      -0.015085181,
      -0.014879199,
      0.01731597,
      0.030035876,
      0.008966459,
      -0.18077925,
      0.013487757,
      -0.003464819,
      -0.021782314,
      0.0028105732,
      -0.010601442,
      0.008165233,
      0.0021836879,
      0.008043071,
      -0.002215344,
      0.0051309937,
      0.0032415001,
      0.019966584,
      -0.007000624,
      0.009202722,
      -0.017515756,
      -0.017047785,
      -0.006336389,
      0.019803394,
      0.007007632,
      0.008492184,
      -0.0038049682,
      -0.014843218,
      -0.024621194,
      -0.0036429234,
      -0.01041824,
      0.0075611505,
      -0.009697755,
      0.03715894,
      -0.00018428332,
      -0.0057940413,
      -0.005080673,
      0.0014866088,
      -0.025120724,
      -0.033666573,
      0.010752427,
      -0.01289694,
      0.0020992386,
      -0.009839626,
      0.011007535,
      -0.025170406,
      0.0061490447,
      -0.006799545,
      -0.018383866,
      0.0015719327,
      0.0074768113,
      0.008909804,
      0.005281054,
      0.01025473,
      -0.011872431,
      -0.006276974,
      -0.0241516,
      -0.0030359456,
      0.020976689,
      0.017567867,
      -0.006184707,
      -0.005806166,
      0.0046530752,
      0.010038406,
      -0.018307228,
      -0.019092081,
      0.00026378778,
      -0.012743755,
      0.010797949,
      0.0032236315,
      -0.005822034,
      -0.0037594505,
      -0.0051895776,
      -0.01443251,
      0.020293035,
      -0.0028418608,
      -0.014076063,
      0.007945135,
      0.020533577,
      0.014573213,
      0.003342522,
      0.0013504392,
      0.025202751,
      0.0056125876,
      0.0197036,
      -0.01960703,
      -0.0014322515,
      0.005663288,
      0.00017766746,
      0.02291989,
      0.043810796,
      0.0059250602,
      -0.00933568,
      -0.02998127,
      0.031940788,
      0.00811287,
      0.017095106,
      -0.014608291,
      0.008301496,
      0.012146986,
      -0.03373992,
      -0.0059866323,
      0.023901533,
      0.016194284,
      0.01258052,
      -0.001174805,
      0.014620769,
      -0.0055390503,
      -0.005334725,
      -0.0029044328,
      0.015352969,
      0.009591059,
      -0.0039945426,
      0.025496248,
      0.004635239,
      -0.008486297,
      -0.010691055,
      -0.008327523,
      0.0048968988,
      0.007834019,
      0.011381158,
      -0.0022772378,
      -0.020882808,
      0.016065286,
      -0.004306544,
      -0.0052980166,
      -0.006668683,
      0.020323878,
      -0.011973164,
      -0.0050943457,
      -0.017582057,
      -0.020951884,
      -0.0047834883,
      0.013824928,
      0.019501425,
      -0.0024566236,
      -0.001244116,
      0.009979191,
      -0.008420053,
      -0.01488779,
      -0.031313363,
      -0.0066934796,
      0.010734439,
      -0.011277863,
      -0.0015910786,
      -0.033319376,
      -0.013937345,
      0.00513806,
      -0.0139416,
      -0.008417983,
      -0.0095567405,
      0.014303554,
      -0.013019669,
      -0.018157247,
      0.020634215,
      0.0052598366,
      0.0062003345,
      0.032517955,
      -0.020422498,
      0.025886677,
      0.009480912,
      0.0050205835,
      0.008295814,
      0.008302617,
      -0.024807772,
      0.013224914,
      -0.10825236,
      0.036563784,
      -0.0013094613,
      -0.022373173,
      0.025188034,
      0.0057747224,
      -0.046837218,
      0.0005122075,
      0.008814379,
      0.023665959,
      0.0012583468,
      -0.00897301,
      0.03005827,
      -0.009132403,
      0.005433188,
      -0.015685325,
      0.004201617,
      -0.018917799,
      0.024747692,
      -0.024011722,
      0.010255487,
      -0.01769838,
      -0.0049935575,
      -0.000041382027,
      0.0013906541,
      -0.012625586,
      -0.0046100854,
      0.020137532,
      -0.0033015462,
      -0.008866946,
      -0.003597354,
      0.015213239,
      -0.0015899675,
      -0.014206225,
      0.010914327,
      0.016587898,
      0.0070584174,
      -0.0107227545,
      0.008360291,
      -0.013963229,
      0.026864665,
      -0.016759403,
      0.027121183,
      0.025432082,
      -0.00936056,
      0.015207171,
      -0.005333609,
      -0.008645876,
      0.00052091386,
      0.006176271,
      -0.019755486,
      0.02295793,
      0.009894874,
      -0.02351187,
      0.006530764,
      0.021222463,
      -0.0009846569,
      -0.026474105,
      0.0020362467,
      0.013591862,
      -0.01359099,
      0.017286291,
      0.002783502,
      -0.010406569,
      0.008005094,
      -0.0084633855,
      0.020125857,
      -0.012931112,
      -0.005217889,
      -0.0026847792,
      0.02944218,
      0.0005028463,
      -0.0013381457,
      -0.022412749,
      -0.0030603823,
      0.0011751566,
      -0.006756126,
      -0.014417169,
      -0.017941078,
      0.0405987,
      0.016668854,
      -0.0118666105,
      -0.011513506,
      0.017824227,
      -0.0010643837,
      0.012184509,
      -0.0018803617,
      -0.015963692,
      0.007166972,
      -0.020637909,
      0.021252457,
      0.016451227,
      -0.016827285,
      -0.0032838976,
      -0.017096527,
      -0.0015878028,
      -0.0204297,
      0.0029945,
      -0.012565315,
      0.010913453,
      -0.0050773043,
      0.001342828,
      0.00015531796,
      0.0050975536,
      0.0015325804,
      0.00065449555,
      -0.030148659,
      -0.013298031,
      0.007103664,
      -0.011375729,
      0.014354756,
      -0.020018235,
      -0.013607122,
      -0.009258827,
      -0.008910259,
      0.008116273,
      -0.0024670584,
      0.0006978687,
      0.029158698,
      -0.018366033,
      -0.0045033074,
      -0.009213458,
      -0.019422513,
      0.0020275346,
      -0.018447937,
      0.0010444605,
      -0.020398961,
      -0.0006432087,
      -0.01456448,
      -0.029526332,
      -0.016472647,
      0.00840112,
      -0.02937578,
      -0.011676054,
      -0.016616022,
      -0.014659725,
      0.03336836,
      0.025124919,
      0.012688205,
      -0.0004616373,
      -0.02035616,
      -0.01105184,
      0.0139576495,
      -0.0051990403,
      -0.0065634814,
      0.032962296,
      -0.022617169,
      -0.017647699,
      -0.0061969673,
      -0.02194185,
      -0.026142288,
      -0.012286088,
      -0.01142077,
      0.0034081256,
      0.0022357223,
      0.00087379006,
      -0.000589331,
      -0.016192874,
      -0.0046542785,
      -0.029879682,
      0.0027073538,
      0.0030814253,
      -0.010142741,
      0.0065714256,
      0.021805856,
      0.019909643,
      0.006437731,
      0.00826578,
      0.007255788,
      0.007956097,
      -0.000011004367,
      -0.0074909134,
      -0.03556427,
      -0.009000558,
      0.0065888898,
      0.0049936096,
      0.0034351612,
      -0.014637829,
      0.013690672,
      0.010696451,
      0.01588527,
      0.011326691,
      -0.015383821,
      0.0019346792,
      0.011017033,
      0.009379158,
      0.0136512555,
      -0.0033584768,
      -0.036899764,
      -0.0017938573,
      0.002198219,
      -0.032860447,
      0.011669696,
      0.0117919585,
      -0.010586126,
      0.021650914,
      -0.0060732136,
      -0.0019755082,
      0.002893711,
      0.017480258,
      -0.004282182,
      -0.024190444,
      -0.0152487885,
      -0.009911508,
      0.0067466237,
      -0.017029097,
      0.006293239,
      -0.008813566,
      0.015313808,
      0.021940688,
      -0.004085224,
      -0.015152496,
      0.0029254993,
      -0.0029348156,
      0.016701743,
      0.022103848,
      0.0024962896,
      -0.008518752,
      -0.024597675,
      0.004490777,
      0.0194676,
      -0.0065407036,
      -0.0015635124,
      -0.021341082,
      0.018514454,
      -0.007248858,
      -0.0015436107,
      0.0073506013,
      -0.019240968,
      0.0024326905,
      -0.014248857,
      0.008185472,
      0.0015509328,
      -0.006459725,
      -0.0081171375,
      -0.028730117,
      0.0072412034,
      0.02195317,
      -0.02289164,
      0.033832077,
      -0.012968553,
      -0.009741306,
      -0.0026306522,
      -0.0016349402,
      0.010896946,
      -0.012246164,
      0.023124224,
      0.014224028,
      -0.007364089,
      0.010328901,
      0.009183894,
      0.029257825,
      0.011360621,
      -0.01604914,
      -0.015263118,
      0.037960514,
      0.0012644628,
      0.01103105,
      0.0063434667,
      -0.0074629146,
      0.009619196,
      0.015261184,
      -0.005145543,
      -0.0153214745,
      -0.030099984,
      -0.004647501,
      -0.009959673,
      -0.005518561,
      0.009081802,
      -0.14170152,
      0.0055163517,
      -0.018206805,
      -0.004511235,
      -0.00788585,
      -0.010239871,
      0.007150953,
      -0.017246412,
      -0.001117072,
      -0.01707875,
      0.025163343,
      0.00200541,
      -0.0063482923,
      -0.015361841,
      0.011026141,
      0.012335022,
      -0.004434761,
      -0.0017714777,
      0.015592771,
      0.0015906588,
      -0.006205393,
      0.0125349285,
      0.017742211,
      -0.012539986,
      -0.027725829,
      -0.0064236573,
      0.0041370317,
      -0.0023396758,
      -0.0047685155,
      -0.0090285735,
      -0.020337699,
      -0.0066363495,
      -0.009537237,
      0.008079415,
      0.00027304856,
      -0.011546436,
      -0.015894148,
      0.009495109,
      0.0047608567,
      0.019486595,
      -0.00092677533,
      -0.0117148785,
      0.015495876,
      0.006770951,
      -0.022821845,
      0.02205278,
      0.020547275,
      -0.007288181,
      0.004729423,
      0.022395946,
      -0.032003358,
      -0.008375563,
      -0.01754741,
      -0.025218498,
      -0.0029964673,
      0.0008071293,
      0.011775129,
      -0.0063615623,
      0.009351919,
      -0.018924294,
      0.0054779453,
      0.013197935,
      0.017847436,
      0.033739917,
      -0.008344705,
      0.016870962,
      0.04032354,
      0.00007255124,
      -0.0031438132,
      -0.0066386987,
      -0.006677181,
      0.015742501,
      -0.004040116,
      0.00596323,
      0.0041429647,
      0.005410512,
      0.002648192,
      0.011269874,
      -0.0064557414,
      -0.0017168152,
      -0.029767865,
      0.0010024889,
      -0.065668106,
      -0.033401914,
      0.012408163,
      0.0015431112,
      0.015467925,
      0.019186335,
      -0.02532128,
      -0.010248269,
      -0.0050248606,
      -0.01063565,
      -0.019196857,
      -0.004716985,
      0.007709819,
      0.0021026751,
      -0.017037293,
      -0.003002027,
      -0.0049414476,
      -0.014491981,
      -0.01803285,
      0.014581764,
      0.0044189426,
      -0.0114675425,
      0.017417392,
      -0.031978372,
      0.012196646,
      0.02139971,
      0.010838387,
      0.005280085,
      -0.0020491402,
      0.008775296,
      -0.0063680173,
      -0.14708951,
      -0.012122047,
      0.0075021884,
      0.017359257,
      0.03745321,
      -0.004754013,
      -0.012444135,
      -0.017453061,
      0.0048104627,
      -0.003917859,
      0.016749188,
      0.0013826032,
      -0.02425055,
      -0.007725017,
      0.03502868,
      0.11828396,
      -0.020672245,
      0.0025652642,
      -0.025170067,
      0.00805695,
      -0.008866013,
      -0.013586592,
      -0.014470293,
      -0.0015878845,
      -0.0009691016,
      -0.018528495,
      0.00088701124,
      -0.00505269,
      0.002206986,
      -0.022764437,
      0.0053403913,
      -0.01498578,
      -0.0033600845,
      0.036174744,
      -0.00031801252,
      -0.02163965,
      0.004460066,
      0.007260755,
      -0.0070634796,
      -0.0055294344,
      0.02477908,
      0.011306469,
      -0.004906573,
      0.0154495565,
      0.009677689,
      -0.0054765567,
      -0.015066214,
      -0.010934741,
      -0.0033238267,
      0.012504922,
      0.0068842494,
      -0.03830112,
      0.009597906,
      -0.0010643953,
      -0.0113511095,
      0.018352311,
      -0.013861213,
      0.00959588,
      0.018793639,
      0.026738351,
      -0.012289583,
      0.0036076067,
      -0.0044004135,
      0.0068848054,
      0.008347604,
      -0.00786719,
      0.021749264,
      0.01888894,
      0.013124243,
      -0.013674196,
      0.01101349,
      0.019178823,
      -0.0049042925,
      0.01850603,
      -0.0075842817,
      -0.016626643,
      -0.02311862,
      0.02900733,
      0.003976452,
      -0.0036231256,
      0.0069116787,
      0.011875566,
      0.010307845,
      -0.0047412035,
      0.01958476,
      0.025168406,
      -0.021150464,
      0.01693594,
      0.0019222519,
      0.006623846,
      0.0076543665,
      0.010342038,
      -0.01642681,
      0.023778781,
      0.0016010593,
      0.014021083,
      0.017940113,
      -0.03548186,
      0.026111675,
      -0.008863217,
      -0.0014426935,
      -0.0016937349,
      0.005651489,
      -0.014905916,
      0.026516577,
      0.022847045,
      -0.0003079073,
      0.005864843,
      0.0120339235,
      0.000058355115
    ]
  },
  {
    "id": "genai_cohort_python_06_Why_to_use_python_vtt",
    "content": "All right, so continuing further 2 from the last video which says, hey, 3 why do you want to learn Python? 4 The easiest answer would be 5 because it's easy. 6 That is why I want to learn it. 7 And most, for most 8 of the people it is actually true. 9 And I also started with Python 10 because it was super easy to learn 11 and eventually I switched to other 12 languages which I also enjoy. 13 But still I come back onto 14 the Python every now and then. 15 So the first reason that 16 you want to learn about it 17 is it's really portable. 18 Yeah, once the program is being 19 written in the Python they can 20 actually go ahead and run on variety 21 of operating system including 22 Windows, Mac and everybody's 23 favorite Linux as well. 24 So there is no such thing as 25 hey, I've written this, 26 you need exact same system. 27 No, it's not like that. 28 Once it's being written it can 29 be used on anywhere at all. 30 That's the first major 31 advantage of it. 32 Also another example is Python is 33 very, very readable and it's 34 super easy to guess what things 35 are doing, as long as you 36 maintain some form of readability 37 in your code as well, but it's 38 fairly readable. 39 Whatever you are doing, it's very 40 kind of predictable. 41 And I like predictability. 42 And one of the major reason why 43 this language even was invented 44 is for productive reasons. 45 Writing code in Java and C 46 definitely could be a little bit 47 faster, you can do the same 48 task but you can also do 49 the same task in Python as well. 50 Almost same, almost all task and it's 51 meant to be productive, friendly. 52 Python and Java code 53 looks too verbose. 54 There is a steep learning 55 curve for that. 56 But Python you can pick it 57 up pretty quickly. 58 Within a week you can pick 59 up decent Python. 60 And that is one of the reason, 61 other reason why everybody love 62 this is something known as 63 STL or I will call this one as 64 easier one standard library. 65 What do you mean by standard library? 66 A lot of code is already being 67 written in the Python and people 68 are very generous that they 69 have open sourced their code. 70 That means those codes are available 71 for you even to use commercially. 72 And that is the reason, one of 73 the reason why it's getting popular 74 in the world of data science 75 and machine learning and AI. 76 Hundreds, probably not hundred 77 millions of people have 78 written the code and made it 79 available for people, hey, go 80 ahead and use it for free. 81 And this huge standard library, 82 availability of the code built 83 in tools is the reason why 84 everybody loves and we will 85 learn a lot about pre built 86 libraries and we just import 87 these code. 88 It's like moving up here so 89 somebody has created this class. 90 All I got to do is bring up this part 91 of it and now I can use it. 92 I am commercially allowed to use 93 this piece of code from somebody 94 else's code that makes it 95 super powerful as a language. 96 So this is the beauty of it. 97 Now apart from this, this 98 language is actually 99 pretty flexible and multi use. 100 So I'll call this one as multi use. 101 So Python a lot of people 102 think is just terminal or 103 just for data science. 104 But no, it can actually use 105 for a lot of web apps. 106 Yes, you can build full 107 stack application with it. 108 We use it actually in that majorly. 109 We can do a lot of automation stuff. 110 We can do a lot of data science, 111 data manipulation, CSVs, 112 even for machine learning AI. 113 It's really a lot and my most 114 important reason is most favorite is 115 I call this one as 116 simply Chai level happiness. 117 So yeah, this language is super 118 amazing to learn and you enjoy 119 every bit of writing of it and I'll 120 make sure that you actually 121 go through with each part of it. 122 So this whole thing is at one place. 123 But this is my reason for using. 124 It's a Chai level happiness 125 that you get through writing 126 the code for this language. 127 And I will show you some of my 128 neat tricks and my super easy 129 scripts that I use still 130 to this date and every day 131 to do some of my regular tasks. 132 So these are my reason why I use 133 Python and I'm pretty sure you 134 will also leave some of your reason 135 to learn the Python or enjoy 136 the Python or write the Python. 137 Please do tweet me out. 138 I would love to know your reason 139 why you are using Python 140 or you want to learn Python. 141 Probably it will help me 142 to improve to make these 143 kinds of videos as well. 144 Let's catch up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "06 Why to use python.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/06 Why to use python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0046756207,
      -0.0029088242,
      0.022287112,
      -0.06972217,
      -0.017295992,
      -0.020556778,
      -0.014533048,
      0.038446564,
      0.012531761,
      0.0024410356,
      0.0017322394,
      -0.016400613,
      0.011668872,
      0.03162527,
      0.12559733,
      0.02780102,
      -0.015864521,
      -0.02949859,
      -0.0063644797,
      -0.008896444,
      -0.0021763446,
      0.013346293,
      0.004587221,
      -0.008241663,
      -0.0057763816,
      -0.004596511,
      0.015539936,
      0.0014604598,
      0.024659738,
      -0.046886083,
      -0.009923669,
      0.0068189194,
      0.0140584335,
      0.026155507,
      -0.002164524,
      0.023824863,
      0.03219255,
      0.004532287,
      0.002699598,
      0.018518686,
      -0.02219428,
      -0.0065740957,
      -0.0020381927,
      -0.009707568,
      0.0063591083,
      -0.004997342,
      -0.0034409247,
      -0.023037579,
      -0.01283998,
      0.0053519155,
      0.020583581,
      -0.020050554,
      -0.011981445,
      -0.18588293,
      0.025025982,
      0.0026201708,
      -0.019945437,
      -0.019880729,
      0.017608669,
      -0.0020116211,
      -0.035994876,
      0.020947145,
      -0.043614294,
      -0.022021933,
      0.0023306971,
      -0.036846664,
      0.020435158,
      -0.0038873663,
      0.010874231,
      0.00081196695,
      0.011434178,
      0.021222297,
      -0.0096800355,
      -0.011260468,
      -0.012284188,
      -0.020134807,
      -0.007892534,
      -0.024100129,
      0.0027953826,
      0.015658878,
      -0.007019287,
      -0.011995116,
      -0.005171325,
      0.0049706013,
      -0.0039613773,
      0.008155427,
      -0.028820451,
      -0.0095779775,
      0.0012480033,
      -0.0022413116,
      -0.019822326,
      0.01255057,
      -0.0035309105,
      0.033154584,
      0.0032007948,
      -0.0206959,
      -0.0069537507,
      0.0035005668,
      -0.0049860408,
      -0.006793678,
      0.017322626,
      -0.022913143,
      -0.024427494,
      -0.0067011015,
      -0.0026056452,
      0.0049765627,
      0.018599622,
      -0.00043558597,
      -0.014982233,
      0.008170067,
      -0.027682345,
      0.007590735,
      0.003813847,
      0.048494738,
      0.0050107394,
      -0.1697861,
      0.015687445,
      -0.00504934,
      -0.024950985,
      0.0015234612,
      0.0031905917,
      0.0047531137,
      -0.0056340476,
      0.017790982,
      -0.018835263,
      0.008072977,
      0.0075801583,
      0.013666152,
      -0.003507712,
      0.000578537,
      -0.04039238,
      -0.018387046,
      -0.018040776,
      0.008995358,
      0.008027936,
      0.018742302,
      -0.02176696,
      -0.015759356,
      -0.022192601,
      -0.012338987,
      0.00058528665,
      0.023429146,
      0.012056006,
      0.02885431,
      0.0043945895,
      0.0015988034,
      -0.0083200075,
      0.00508752,
      -0.023637183,
      -0.031642664,
      0.020681353,
      -0.01143234,
      0.019555101,
      -0.01090193,
      0.015251166,
      -0.01828347,
      -0.019624371,
      0.020243183,
      -0.009673437,
      -0.0058633075,
      -0.011692963,
      -0.00008772033,
      0.015069704,
      0.00884099,
      -0.01803071,
      -0.008092909,
      -0.014099938,
      0.015960375,
      0.018572316,
      0.0050218496,
      0.0002332629,
      -0.00568501,
      -0.00094575976,
      0.010880148,
      0.0042674816,
      0.0050357524,
      0.008774864,
      0.001859533,
      0.024975963,
      -0.020744028,
      0.039280277,
      0.008482967,
      0.0029592926,
      -0.014043777,
      0.0011998034,
      0.00962106,
      -0.022631204,
      0.014575503,
      0.009161168,
      -0.009395615,
      0.0031497949,
      0.0078409305,
      0.018499319,
      0.011478593,
      0.004739594,
      -0.003263122,
      0.006377095,
      0.015330449,
      0.001436302,
      0.019114919,
      0.027043601,
      -0.006705231,
      0.011537946,
      -0.034132365,
      0.033756252,
      -0.015277493,
      0.0101740025,
      -0.021353256,
      -0.005836328,
      0.018663958,
      -0.0064143883,
      -0.0024891603,
      0.00090289494,
      -0.019229393,
      0.0045108185,
      -0.009194723,
      0.023424597,
      -0.00018563392,
      0.003284867,
      0.0009002105,
      -0.027175486,
      0.0012239356,
      0.016424438,
      0.019207267,
      0.005579092,
      -0.03992285,
      0.017124712,
      -0.0082017165,
      -0.017721385,
      0.011891538,
      0.018304199,
      0.0111889895,
      -0.010513052,
      0.007349599,
      0.0035130035,
      -0.0045592086,
      -0.00037806947,
      0.022154829,
      0.022094883,
      0.000039868715,
      -0.011208223,
      -0.0115911085,
      -0.018962588,
      0.0006307445,
      0.021001216,
      -0.011339309,
      0.018751565,
      0.0059749037,
      -0.0029496644,
      -0.008552872,
      -0.010269068,
      0.0052782134,
      0.02735764,
      -0.002993285,
      0.016885174,
      -0.02041478,
      -0.039908208,
      -0.0033460807,
      0.0050791544,
      0.0042578834,
      -0.009900152,
      -0.011126623,
      -0.01141358,
      -0.02286396,
      0.035642717,
      0.0066001248,
      -0.0026055495,
      0.0010394546,
      0.0049570673,
      0.02066199,
      0.009589314,
      0.025693972,
      -0.0037109102,
      0.0036353273,
      -0.0237446,
      -0.009603527,
      -0.08684837,
      0.027922608,
      0.0014150384,
      -0.015943035,
      0.0068721264,
      0.0008131204,
      -0.039263204,
      0.027722098,
      -0.004608942,
      0.0051841536,
      0.012048259,
      0.0022199124,
      0.029788539,
      -0.004712857,
      -0.008059956,
      0.004496883,
      0.0010198427,
      -0.017548617,
      0.01875978,
      0.001760746,
      0.0020659158,
      -0.016273895,
      -0.012666921,
      0.0003032177,
      0.0064495183,
      -0.005866066,
      0.0030139578,
      0.034402747,
      0.013870677,
      -0.005435486,
      -0.0004889929,
      0.0278062,
      -0.0042382143,
      -0.00514192,
      0.016566046,
      0.0133628035,
      0.007863102,
      -0.008708061,
      0.0041814693,
      -0.029916486,
      0.017944602,
      -0.020456342,
      0.010117842,
      0.0177209,
      -0.024757508,
      0.0045767496,
      -0.019330468,
      0.017762875,
      -0.020683289,
      0.0018930995,
      -0.020340137,
      0.0044667204,
      0.02349617,
      -0.012827243,
      -0.0060354904,
      0.013382373,
      0.0047063027,
      -0.019720735,
      0.017750949,
      0.012609747,
      -0.017893955,
      0.016265355,
      -0.004956165,
      -0.012389069,
      -0.0045312163,
      -0.009152812,
      -0.0047322637,
      -0.011746499,
      -0.0033525652,
      0.0086397,
      -0.0052928063,
      -0.012851016,
      -0.003888673,
      -0.024945516,
      -0.005276057,
      -0.0030802474,
      -0.00313762,
      -0.011505886,
      -0.026944177,
      0.022549238,
      0.017219424,
      0.011068358,
      0.0037460022,
      0.010993237,
      0.005716451,
      -0.0066885506,
      -0.0070380806,
      -0.011692383,
      0.0043400316,
      -0.018338464,
      0.012479341,
      0.03025626,
      -0.02448911,
      0.0090995915,
      -0.016904807,
      0.013159243,
      -0.0052918307,
      -0.010981746,
      -0.010105116,
      0.0015950035,
      -0.007433846,
      0.016670814,
      -0.011979966,
      -0.0013110682,
      -0.0026850055,
      0.008044208,
      -0.01895431,
      -0.02125116,
      -0.0015030304,
      -0.005469546,
      0.017301867,
      -0.0017721958,
      -0.022875682,
      -0.0063264114,
      0.028548067,
      0.020138705,
      0.016223768,
      -0.004804025,
      -0.00039858426,
      -0.011698573,
      -0.011499414,
      -0.0071358643,
      -0.0071176775,
      -0.0040790336,
      -0.0052757305,
      -0.0027044618,
      -0.004957002,
      0.023596806,
      -0.008327077,
      -0.02386824,
      -0.010051861,
      0.0025140313,
      -0.014774106,
      -0.0014036048,
      -0.004994342,
      -0.01035202,
      0.034884226,
      0.019316882,
      0.0012122307,
      0.020177547,
      -0.012616296,
      -0.0017005766,
      0.027885295,
      -0.0054589184,
      -0.0062048975,
      0.010203393,
      -0.009341006,
      -0.023918813,
      -0.0029223037,
      -0.023950566,
      -0.02073908,
      -0.008188917,
      -0.016634563,
      -0.01111635,
      -0.0016286597,
      0.031759903,
      0.0048539736,
      -0.03923572,
      -0.030110408,
      -0.020509532,
      0.0065960116,
      -0.00032876714,
      0.0025537175,
      0.0010225181,
      0.023621744,
      0.004243457,
      0.009517523,
      -0.0018482588,
      0.010210041,
      -0.0042375843,
      -0.010569741,
      0.0035846822,
      -0.031158997,
      -0.0106105665,
      0.0050769895,
      0.0063696266,
      0.0137133,
      0.006362983,
      -0.00023265244,
      0.01948542,
      -0.0047887485,
      0.025051728,
      0.0061230115,
      0.0042001707,
      -0.0030989675,
      0.009724831,
      0.00052024,
      -0.0066010603,
      -0.010146265,
      -0.0057581775,
      0.014586041,
      -0.007005633,
      0.014943689,
      0.010570275,
      0.0018494509,
      0.0057669007,
      -0.024382345,
      0.0088980505,
      0.009977966,
      0.015904507,
      0.008857013,
      -0.049138326,
      -0.013340798,
      0.016123727,
      0.019428767,
      -0.020763278,
      0.010432098,
      -0.017861519,
      0.020533394,
      0.006606107,
      -0.033729065,
      -0.011109663,
      0.0072267954,
      0.0123473415,
      0.019273194,
      0.012314881,
      -0.0066730324,
      -0.011614051,
      -0.019518314,
      -0.0052305316,
      0.020006865,
      -0.003953268,
      -0.014816015,
      -0.019130198,
      -0.022893347,
      -0.002688077,
      -0.01471369,
      0.022674514,
      0.0006341075,
      -0.0059347064,
      -0.0005825432,
      -0.0016502602,
      -0.0024347361,
      0.0053931237,
      -0.026139276,
      -0.020288358,
      0.002193892,
      0.009771312,
      -0.01963059,
      0.01349404,
      -0.0074069975,
      -0.03180583,
      -0.021207219,
      0.0114824725,
      0.009612678,
      -0.010989358,
      0.024128325,
      -0.012487016,
      -0.015357671,
      0.0150297135,
      -0.0011738655,
      0.015992146,
      0.001516632,
      -0.00985461,
      0.0057316152,
      0.024512539,
      -0.0019649265,
      -0.0018310522,
      -0.0068035894,
      -0.0019921612,
      0.021532163,
      0.002418005,
      -0.0021314828,
      -0.0015325919,
      0.0110510215,
      -0.013916435,
      -0.011307724,
      -0.009840175,
      0.019846052,
      -0.121337935,
      -0.007035371,
      -0.011603478,
      -0.003923037,
      0.0040120655,
      -0.015915543,
      -0.017644254,
      -0.03189979,
      -0.0016212905,
      0.00004545899,
      0.030741025,
      0.011313894,
      0.00054938655,
      -0.0020861751,
      0.0011798493,
      -0.006606957,
      0.0090310015,
      0.0063349116,
      0.029954739,
      -0.01724392,
      -0.0030670844,
      -0.003809083,
      -0.011816418,
      0.019082692,
      -0.019442586,
      -0.006668786,
      0.006823937,
      0.0089901695,
      -0.0029661919,
      -0.0030270587,
      -0.046426862,
      0.004333307,
      0.011331438,
      0.012275016,
      -0.0017603013,
      -0.012105309,
      -0.03151798,
      0.021418283,
      0.0078133,
      0.0011823991,
      -0.02220612,
      0.0007659361,
      0.0037513112,
      -0.001407905,
      -0.008862941,
      0.006669903,
      0.025836812,
      -0.004388654,
      0.0033404317,
      0.042437915,
      -0.042509653,
      -0.012828996,
      -0.0054737516,
      -0.018533453,
      -0.0098839905,
      0.0013852996,
      0.011675354,
      -0.010866803,
      0.012481485,
      -0.0023123026,
      0.011815641,
      -0.010042146,
      0.0010485095,
      0.03916253,
      -0.013361396,
      0.018933529,
      0.0308745,
      0.003883329,
      -0.0024676328,
      -0.009030868,
      0.011505536,
      0.014246448,
      -0.008159342,
      0.02200665,
      0.014394832,
      -0.01326279,
      0.0011353771,
      -0.003399036,
      -0.0011356396,
      -0.00047632682,
      -0.021854207,
      0.0035225041,
      -0.05324677,
      -0.028580844,
      0.017522274,
      -0.006582221,
      0.005253383,
      0.011160031,
      -0.016733417,
      0.0026597243,
      0.003895347,
      0.007873747,
      -0.005150209,
      -0.0077572498,
      0.016685888,
      0.0009549102,
      -0.014927137,
      0.0019129389,
      0.010238019,
      -0.014004514,
      -0.006260833,
      -0.002502646,
      0.016929073,
      -0.024769217,
      0.008401889,
      -0.0018249489,
      0.0053364728,
      0.017980037,
      0.006532994,
      -0.000044747616,
      -0.00458061,
      -0.0046411753,
      0.003805144,
      -0.15189607,
      0.006437284,
      0.016704224,
      -0.00004391616,
      0.012172108,
      0.008789709,
      -0.0162465,
      -0.018043049,
      0.0034700127,
      -0.0009084673,
      0.008319301,
      -0.017061427,
      -0.022848578,
      -0.022101685,
      0.0129440185,
      0.14672618,
      0.011588414,
      -0.0026161384,
      -0.010119095,
      0.012590164,
      -0.01639472,
      -0.019524558,
      -0.008159361,
      -0.0018250789,
      -0.008578608,
      -0.011835935,
      0.018889826,
      -0.00067323854,
      -0.010914684,
      -0.0045486176,
      0.01636678,
      -0.013747818,
      0.015113327,
      0.013139015,
      -0.0059730485,
      -0.0040939054,
      -0.013211986,
      -0.006740732,
      0.003789515,
      0.0093512405,
      0.02076187,
      -0.0005731661,
      -0.005652264,
      0.015360664,
      0.0017693645,
      0.0016396404,
      -0.01570746,
      0.0010819975,
      -0.00049489754,
      -0.019547299,
      -0.005017861,
      -0.035759002,
      0.004732938,
      0.0042652413,
      -0.020281598,
      0.019200457,
      -0.009521296,
      0.021389576,
      -0.0011476347,
      0.011740683,
      -0.02232506,
      -0.005465408,
      0.009059561,
      0.006235276,
      0.0057850843,
      0.009012979,
      0.036474615,
      0.008511187,
      0.016981307,
      0.009740681,
      0.016607836,
      0.017575461,
      -0.012923054,
      0.026989678,
      -0.014272516,
      -0.026615713,
      -0.012541744,
      0.048832286,
      0.0014762171,
      -0.013975875,
      0.0012502533,
      0.0032701977,
      -0.0053696292,
      -0.01990147,
      0.034821242,
      0.008319927,
      -0.014302552,
      0.029368527,
      -0.026265932,
      -0.006184044,
      0.0002130354,
      0.0036287012,
      -0.009907661,
      0.031133255,
      0.002347662,
      0.009736317,
      0.010113776,
      -0.024336161,
      0.03521708,
      0.009925782,
      0.014396552,
      -0.007865242,
      -0.00868247,
      -0.027223984,
      0.030400513,
      0.018393183,
      0.011068797,
      0.034320127,
      -0.009330504,
      -0.0282685
    ]
  },
  {
    "id": "genai_cohort_python_07_Writing_1st_python_code_on_MAC_vtt",
    "content": "Hi. 2 And in this video I'm going to show 3 you on a Mac that how you can 4 install the Python as well as how 5 you can run the Python programs. 6 Now there are two basic ways of how 7 you can run the Python programs. 8 One is in the shell itself. 9 That means in the terminal. 10 Yeah, the black thing 11 on the screen, terminal, shell, 12 whatever you call that, you can 13 simply go ahead and install that, 14 use an existing one and you can 15 just run Python in that. 16 The only problem is once 17 it's gone, it's just gone. 18 There is no memory or there is no 19 stored way of keeping the files. 20 Other way of writing the Python 21 programs are into a file with a 22 special extension PY so that you 23 can just store the code that you 24 have written into a file and you 25 can reuse it. 26 And yes, obviously the second one is 27 much more easier way, but I'll show 28 you that how it's being done and how 29 you can actually install the Python. 30 Now installing the Python is one 31 of the most easiest thing, one 32 of the most simplified thing. 33 I have installed a lot of programming 34 language, nothing comes 35 nearby when installing the Python. 36 It's the most easiest one. 37 Simply go to python.org and just 38 click on the downloads and you 39 can just download it for or this 40 one, it automatically detects 41 your system whether it's a Mac or 42 Linux or Windows and it just 43 gives you the exact version which 44 you want. 45 Now also in here you can see 46 there are a lot of ways 47 you can actually use this. 48 This is the shell. 49 I will walk you through how you can 50 use this in your system as well. 51 But actually you can just click 52 on this and it loads up a shell 53 where you can write some basic 54 Python within just this one. 55 So it's not really the best 56 and the fun way, but I'll still show 57 you some of the way I that I can 58 just go ahead and run it like this. 59 So I can just go ahead and say two 60 plus two and yeah, it does the job, 61 it adds, it's not a calculator, 62 it does more thing. 63 For example, I can just go 64 ahead and say import sys 65 before recording the video. 66 I was trying this as well 67 and it's import sys which 68 is a library in Python. 69 Remember I told you that 70 Python has a lot of rich 71 extensive set of library. 72 This is one of that which is 73 there in Python by default. 74 But I can install so many other third 75 party libraries which other great 76 programmers have written and can 77 work with this and then I can just 78 ask it that, hey, I want to show you 79 that what kind of system version is 80 there and print it in the 81 parenthesis and it just gives me 82 that hey, the current version of 83 Python you're working on is 3.10.5 84 and whole lot of details. 85 We can understand that 86 details later on. 87 But right now if I click on the 88 download and just click on this 89 download button, it takes me on the 90 page where I can see the whole 91 different versions of Python which 92 are available. 93 So different versions 94 which you can install. 95 My recommendation is go ahead 96 and install the latest one. 97 Although the code that we're going to 98 run here is not going to be too much 99 dependent on version, any latest 100 version is going to be just fine. 101 And you can just go ahead and look 102 for other versions like 103 Windows and Linux and all that. 104 You can just click on that and it 105 will show you all the other 106 Windows installers as well. 107 Pretty easy. 108 Now let me take you onto this. 109 So once you click on the download 110 on the Mac, it will give 111 you a package just like this. 112 Just double click 113 on this and there we go. 114 It opens this up. 115 I'll remove this so that 116 it's not really that bothered 117 onto your screen. 118 And please excuse my other 119 code part, I keep on working 120 on the stuff so it's okay. 121 And let me click on the continue. 122 This is the first step, then 123 click on Continue again, 124 then accept the licenses. 125 Yes, I do agree. 126 I have read them thoroughly 127 of course. 128 And then look for the installation. 129 This is going to take this much 130 of installation and the type 131 and just click on install and it is 132 going to install it for you. 133 Now for me it is already 134 being installed, so no need 135 to do this again for me. 136 But if you do it again it's not going 137 to bother you anything or like that. 138 So I can just click 139 on this and close it. 140 Now next is you need a terminal 141 to verify that and I can just press 142 command space and click on Terminal 143 and you can just open up your 144 default terminal which is available. 145 So no, remind me later. 146 This is not here, so please 147 excuse me, I'll just quit this. 148 This is not the terminal 149 that I'm looking for. 150 I'm looking for this Terminal app 151 and please excuse me, 152 this is my other system. 153 I'll just open up the Terminal app 154 and this is the second one 155 which I was looking up for. 156 This is on the Mac so I can 157 just go ahead and use it. 158 I'll tell you another 159 better version of it, but here I can 160 just go ahead and say Python. 161 In the Mac you have to say Python 3 162 with the correct spelling 163 of course, Python 3, because 164 on the Mac Python comes as A 165 default which is Python 2. 166 I don't know why they are still 167 shipping it Python 2, but Python 3 168 is something that you have to write. 169 Then simply say dash dash, that 170 is two minus and then simply 171 go ahead and say version and this 172 gives you that, hey, I have 173 installed Python 3.13.2. 174 As long as it is giving you some 175 version back, that's okay. 176 That is all good. 177 Now I these days don't use 178 this terminal too much because 179 I have a better thing installed 180 on my system and I will 181 still walk you through. 182 Now again, I love it. 183 That's why I'm showing you. 184 Feel free to not use it. 185 I use Warp and this is a terminal 186 which is available these days also 187 on Windows as well. 188 I happen to use this. 189 So if you look at this, 190 I do have available up here. 191 So this is my Warp. 192 I use it and again I can just run 193 the same command here as well. 194 I can just go ahead and say Python 195 and, and it gives me suggestions, 196 AI assistant and whatnot. 197 I can just hit enter. 198 So this is the one way 199 of running the Python. 200 If you want to run up, fire 201 up the same shell that we saw 202 on the website, we can 203 actually go ahead and do this. 204 All I have to do is say python3 and 205 hit enter and it loads up the same 206 shell that I saw there and I can do 207 all the things that I saw there, 208 two plus two, which is very 209 interesting. 210 And it gives me four. 211 That is nice. 212 I can go ahead and import the 213 sys and now I can just go ahead 214 and say print and then I can 215 say sys version and it gives me 216 the system version or what 217 Python I'm installed I have on 218 my system. 219 I can go ahead and type 220 the exit and it exits it out. 221 Previously it was not the case. 222 Previously it was all the time 223 exit with the parenthesis 224 and then only it exit. 225 But in the latest version of 226 Python they actually made a change 227 and wrote even a blog post that 228 now exit works because a lot 229 of people just write exit. 230 It was a common thing. 231 And throughout this course you're 232 going to hear these kinds of stories 233 which I think you will enjoy. 234 Now, apart from this, let me 235 also go ahead and show you 236 another way of running 237 and running the Python files. 238 So I'll just close this terminal 239 because I don't need it. 240 So I have this VS code as my code 241 editor, in case you're wondering. 242 Yes, you can go ahead 243 and download this as well. 244 So let's just Google this quickly. 245 This is VS code. 246 This is, these days one 247 of the Most popular editor available 248 for Mac, Windows and Linux. 249 And it does have AI as well. 250 We will be using it very less 251 in the initial time and after that 252 I'll walk you through how you 253 can use that a lot, better way. 254 And you can just go ahead 255 and download it for Mac, 256 Windows, whichever you want. 257 And this is what gives 258 you installation. 259 It's pretty easy and straightforward. 260 Now you'll see it like this. 261 And why is it looking the way it is? 262 Because I have installed 263 a theme on it. 264 So if you google it, just 265 for Chai theme, VS code. 266 This is the one theme which I 267 design and I'm super proud of it. 268 And it's almost 91,000 installs. 269 It looks good. 270 The code looks really 271 beautiful in it. 272 Use the dark mode only 273 and it looks out of the box. 274 So all you can do is click 275 on the extensions here. 276 This is the icon for the extension. 277 Just click up here and look 278 for the Chai theme. 279 So Chai theme and this is the one. 280 Just click on the install 281 and that's it. 282 It works. 283 And look, code looks beautiful. 284 Now apart from this, what you can do 285 is just drag and drop this folder. 286 So I have this folder Python ds. 287 Just drag and drop a folder 288 and that's it. 289 And we are going to write, we 290 are going to learn how to write all 291 of our Python code up here. 292 Now forget about all 293 these installation that 294 is happening up here. 295 These are all my AI 296 editors and assistants 297 and extension that I have. 298 I do work a lot in Python and when 299 the very first time you actually 300 write some Python code or save some 301 file, it might ask you to install 302 some additional extensions to help 303 you, to give you better suggestions 304 for the code. 305 And don't hesitate, just go 306 ahead and install them. 307 Now for the first time we are going 308 to remove this, but I'm going 309 to go ahead and create a folder 310 and inside this folder we're going 311 to create some Python code file. 312 So we're going to say 01 basics. 313 This is where the folder is. 314 Inside this folder I'm going 315 to create a new file. 316 I'm going to call this one as 317 test Python py. 318 The PY extension is really 319 important because this makes 320 the compiler know that this is 321 a file that is supposed to be 322 run by the Python interpreter 323 or the Python programming 324 language software. 325 Just go ahead and write the exact 326 same code that we have seen here. 327 So import sys we're going 328 to do that and I'm going to zoom 329 this up a little bit so it's 330 much Easier for you to see. 331 And there we go. 332 Once we have this import sys, we're 333 going to go ahead and say print. 334 Notice here the suggestions comes 335 up automatically for me. 336 This is because it has 337 already installed the Python sys 338 intellisense for me. 339 Go ahead and install that for you. 340 But again, no big deal, we can 341 just go ahead and write this and 342 I can just go ahead and see much 343 more suggestions compared to what 344 I was able to see on the 345 interpreter. 346 That's why we use these editors. 347 Once I go ahead and use this, then I 348 can actually open up the terminal. 349 I can just go ahead and click on 350 the terminal and say new terminal. 351 Or I can use the shortcut, 352 for me it's control and the tilde 353 just below your escape key. 354 And this opens up a terminal. 355 And in this terminal I can just 356 go ahead and say Python of course, 357 three because I'm on a Mac. 358 Then go into the folder 01. 359 When you open up your terminal, 360 it automatically opens 361 up this folder for you and then 362 you can just walk through. 363 So I'll just go into this, I press 364 the tab, by the way, and then I can 365 again, write this test Python py. 366 Once I hit enter, this 367 actually runs my code. 368 Now the only difference is this 369 code is permanently with me. 370 So this is so much easier to work 371 on with and we'll be using this. 372 But I'll walk you through a little 373 bit minor details before 374 writing the files like this. 375 But yeah, this is a fully 376 functional Python code. 377 And congratulations, before 378 even writing hello world, 379 you have written a much bigger 380 and much better of a code. 381 So this is what we have as 382 of now and I'm pretty sure 383 that you have enjoyed this. 384 It was not that bad. 385 It was easier comparatively. 386 We just downloaded a Python version, 387 we wrote some code in the shell, 388 we wrote some code, we learned 389 about the VS code as well as 390 Warp, a really good terminal. 391 And I'll show you a lot 392 of details as we go further. 393 This is the very basics, very 394 first of the Python code. 395 And you might have already 396 realized, yes, we are 397 not going into the basics. 398 We will be going into 399 extensive, in depth. 400 And yes, I've been 401 writing code for years. 402 I want to transfer this, all 403 of this knowledge to you as well. 404 That is it for this video. 405 Let's catch up into the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "07 Writing 1st python code on MAC.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/07 Writing 1st python code on MAC.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0050601293,
      0.0065096314,
      0.017882446,
      -0.043438494,
      -0.004124882,
      -0.008769781,
      0.0029959588,
      0.0076905643,
      0.008281102,
      0.001882502,
      -0.004801948,
      -0.023928361,
      0.024355689,
      0.020949164,
      0.1279208,
      0.010772165,
      -0.016437083,
      -0.018128326,
      0.0070544123,
      -0.014385937,
      0.007941632,
      0.0019796346,
      0.0057853116,
      0.003119809,
      -0.0021117814,
      -0.0068357773,
      0.003487855,
      -0.0057175406,
      0.026311586,
      -0.023695823,
      -0.03467095,
      0.0013829115,
      -0.013989582,
      0.0153011745,
      -0.0029618496,
      0.018895287,
      0.0037778777,
      0.011263529,
      0.007397379,
      0.0063382243,
      -0.021777285,
      0.010135626,
      -0.0023965477,
      -0.022686008,
      0.0182151,
      -0.0049086036,
      -0.0047291107,
      -0.018642684,
      -0.0034398562,
      0.013324732,
      0.0020180515,
      -0.0021654507,
      -0.040375914,
      -0.19232723,
      -0.0030092024,
      -0.005121941,
      -0.0056845765,
      0.009154487,
      0.017909717,
      -0.00403131,
      -0.029909931,
      0.02514885,
      -0.039863765,
      -0.0034644078,
      0.0019678415,
      -0.009661204,
      0.030478552,
      0.007775902,
      0.0085450765,
      -0.010896394,
      0.010899503,
      0.015064279,
      -0.0025870514,
      -0.006683854,
      -0.029611424,
      -0.013092003,
      0.0282138,
      -0.012190249,
      0.0017322287,
      0.033283744,
      -0.0074854656,
      -0.0031610085,
      -0.012470282,
      -0.0114935255,
      0.020962859,
      0.0006205946,
      -0.03950734,
      0.00076329807,
      -0.0029179405,
      -0.00255485,
      -0.023021474,
      0.025958948,
      -0.012788921,
      0.019813892,
      -0.016002588,
      -0.0010141745,
      -0.036171816,
      0.0024770382,
      -0.015765883,
      -0.00033642867,
      0.026840702,
      -0.007703026,
      -0.04217358,
      -0.011913198,
      0.0067125615,
      -0.0051515093,
      0.01807844,
      -0.010444738,
      0.009165406,
      -0.015252544,
      -0.0115419505,
      -0.010672509,
      0.009231436,
      0.037699807,
      0.014326732,
      -0.17017728,
      0.015072573,
      0.0024062537,
      -0.011978417,
      -0.02071393,
      0.0063204374,
      0.008938809,
      0.00371158,
      0.009163715,
      -0.011440013,
      0.017282465,
      0.006333936,
      0.019061776,
      -0.016733436,
      -0.016281746,
      -0.017224185,
      -0.02211518,
      -0.019598123,
      0.011616371,
      0.009038412,
      0.024993878,
      -0.011114186,
      -0.0025034437,
      -0.018377993,
      -0.010425774,
      0.004528074,
      0.01717109,
      0.01644255,
      0.023469837,
      0.008532806,
      0.0004473316,
      0.004610238,
      -0.0043399264,
      -0.014810891,
      -0.03589998,
      0.0151386205,
      -0.010675848,
      0.022832328,
      -0.010435397,
      0.019713063,
      -0.011563918,
      -0.0074295574,
      0.0033221773,
      0.0044755912,
      0.0074498756,
      -0.0031822585,
      0.0142999,
      0.010136386,
      0.0039418745,
      -0.005030004,
      -0.015466125,
      -0.005990524,
      0.0065367166,
      0.0322508,
      0.011161645,
      0.002306701,
      -0.014131218,
      -0.010879388,
      -0.006364415,
      -0.020199379,
      -0.012948565,
      0.01054934,
      -0.012217407,
      0.01587457,
      -0.015485072,
      0.018054873,
      -0.005451915,
      0.021909054,
      0.009220386,
      -0.013794152,
      -0.017958168,
      -0.01954712,
      0.015263859,
      0.025133802,
      -0.0005369019,
      0.0140797645,
      0.013589575,
      0.025878513,
      0.014864883,
      0.020818045,
      -0.0078015537,
      -0.01432288,
      0.013966544,
      -0.012696016,
      0.015412429,
      0.02012031,
      -0.0028030016,
      0.008966705,
      -0.030405477,
      0.036862537,
      -0.004384334,
      -0.004811065,
      -0.029881574,
      0.003010115,
      -0.018375635,
      -0.0053106756,
      -0.015310228,
      0.015196799,
      0.001531691,
      0.026333747,
      0.00039671652,
      0.029086566,
      -0.0042011696,
      0.018249644,
      0.012032757,
      -0.014399149,
      0.008405459,
      0.00014876164,
      0.016549688,
      0.0027804037,
      -0.037213083,
      -0.008629273,
      -0.0008786818,
      0.009382758,
      0.009432878,
      0.028405242,
      0.02177613,
      -0.015575811,
      0.019532375,
      -0.013797528,
      0.005562835,
      0.0002756298,
      0.016476633,
      0.001780409,
      -0.010578357,
      0.003253081,
      -0.007900877,
      -0.021309001,
      0.017607724,
      0.027996248,
      -0.012875914,
      0.008832323,
      0.0007119768,
      -0.017887004,
      -0.011530888,
      -0.008410013,
      -0.0072504156,
      0.0042298255,
      -0.023676125,
      0.014666346,
      -0.020571794,
      -0.02801076,
      -0.009186383,
      -0.0044572926,
      -0.017524963,
      -0.0045820954,
      -0.010135706,
      -0.0058212937,
      -0.0127565395,
      0.029277328,
      0.0077637066,
      -0.00043475314,
      0.014264217,
      -0.0022881557,
      0.026784353,
      0.013967337,
      0.028395144,
      0.0097082695,
      -0.023619654,
      -0.037173245,
      0.0051437845,
      -0.08609084,
      0.016107475,
      0.012724138,
      -0.028144078,
      0.010708057,
      0.018362654,
      -0.031063892,
      0.00037233622,
      -0.00067498535,
      0.0017828386,
      0.0042943456,
      -0.0008877164,
      0.03824746,
      -0.019211633,
      -0.0053795786,
      -0.013129449,
      -0.006170233,
      -0.0056070737,
      0.0046882546,
      0.00010362407,
      -0.009942985,
      -0.0053700213,
      -0.00018065405,
      -0.0021621876,
      0.0058788587,
      -0.01093801,
      -0.007558793,
      0.02705329,
      0.011046611,
      -0.004327041,
      0.000030294266,
      0.052707493,
      -0.011457293,
      -0.010317126,
      0.0018225807,
      0.0050588935,
      0.015196253,
      -0.0149993105,
      0.0013257749,
      -0.018494021,
      0.024229657,
      -0.015212215,
      0.029842833,
      0.018644255,
      -0.03561629,
      -0.0061686556,
      -0.009412472,
      0.0041107237,
      -0.014586566,
      0.011927774,
      -0.028675359,
      0.02306294,
      0.006503066,
      -0.019861631,
      0.0046062693,
      0.0048488216,
      0.014630448,
      -0.009465464,
      0.0033256118,
      0.012426886,
      -0.005766717,
      0.00776561,
      0.002095845,
      -0.016884496,
      0.00085032074,
      0.009625857,
      0.021952817,
      -0.013141123,
      0.0051168757,
      0.016880753,
      0.025611866,
      0.0076654973,
      -0.018920926,
      -0.016937347,
      -0.0046430873,
      -0.020524187,
      -0.00048067755,
      -0.0075966497,
      -0.0025942582,
      0.015121133,
      0.015929064,
      -0.005622395,
      -0.010392901,
      0.0070513445,
      -0.00519076,
      -0.0106718205,
      -0.020921193,
      -0.023273114,
      -0.0028174361,
      -0.0075399093,
      0.020553373,
      0.027661098,
      -0.009281951,
      0.009294191,
      -0.0061473767,
      0.00371962,
      -0.0030367025,
      -0.011151345,
      0.00044384523,
      0.0064757043,
      -0.012078994,
      0.009704277,
      -0.016060231,
      0.0055858684,
      -0.019422678,
      -0.006422428,
      -0.005625246,
      -0.009572876,
      0.005825667,
      -0.009818731,
      0.022580685,
      0.000621095,
      0.002687249,
      -0.008556568,
      -0.0051710303,
      0.021999922,
      -0.010067445,
      0.014556949,
      -0.0036854902,
      -0.003031226,
      0.0125248525,
      -0.0041796174,
      -0.009676286,
      0.008576889,
      -0.0072426973,
      0.012529333,
      -0.0046743015,
      -0.000590397,
      -0.0008393912,
      -0.035556756,
      -0.029582042,
      -0.00019016855,
      -0.019820578,
      -0.018727668,
      -0.0036742077,
      -0.00605669,
      0.03890164,
      0.0066256397,
      0.0045724907,
      -0.005306761,
      -0.003222223,
      0.00327216,
      0.02321653,
      -0.018576523,
      -0.0065538315,
      0.037942592,
      -0.031120837,
      0.003961648,
      0.005756879,
      -0.004436244,
      -0.022094857,
      -0.011786487,
      -0.0149056185,
      -0.0102418,
      0.0070589893,
      0.013885764,
      0.020117199,
      -0.029616784,
      -0.02514272,
      -0.013982033,
      0.008952226,
      0.010285544,
      -0.01316925,
      -0.007010362,
      0.013051305,
      0.011786416,
      -0.006690179,
      -0.007063287,
      -0.00034032558,
      -0.007822287,
      -0.008632189,
      0.018178862,
      -0.03040836,
      -0.0026771736,
      0.0042455215,
      -0.0262561,
      0.017367655,
      0.010499502,
      0.027214259,
      0.009728472,
      -0.010042009,
      0.022996863,
      -0.012514505,
      0.011598667,
      0.027654635,
      0.021590296,
      0.0009810879,
      0.0013158337,
      -0.012446342,
      0.0072296457,
      0.0022947378,
      -0.007399442,
      0.010602143,
      0.00030653583,
      -0.012543627,
      0.023475321,
      -0.02441226,
      -0.0065640933,
      0.007408332,
      0.031532563,
      -0.005530367,
      -0.025055902,
      0.009835379,
      0.0015609465,
      0.035247717,
      -0.014679829,
      0.002604263,
      0.00497047,
      0.022765009,
      0.02920262,
      -0.017696325,
      -0.006385644,
      0.0016452514,
      0.017809864,
      0.01735548,
      0.010878686,
      0.0015833892,
      -0.0022040615,
      -0.026973005,
      0.007898772,
      0.008134286,
      0.023816276,
      -0.010276646,
      -0.016822884,
      0.0128124785,
      0.011884509,
      -0.015246614,
      0.007213051,
      -0.021020917,
      -0.0035471336,
      -0.0040114843,
      -0.0030258705,
      0.009773093,
      0.020052211,
      -0.01793599,
      -0.00858271,
      0.0063903816,
      -0.005099162,
      -0.004093197,
      0.009326511,
      0.002355767,
      -0.029969525,
      -0.0031235847,
      -0.0025969418,
      -0.004764159,
      -0.0021890532,
      0.025872735,
      -0.0061340476,
      0.003242045,
      -0.0017481089,
      0.0016941365,
      0.03131954,
      -0.0011094062,
      -0.015694713,
      -0.01889731,
      0.027557202,
      -0.01716376,
      0.014528271,
      -0.025683565,
      -0.027667629,
      0.032218426,
      0.017752932,
      0.008281751,
      0.003288898,
      0.0102464855,
      -0.014714289,
      -0.018754018,
      -0.007436247,
      0.0074148946,
      -0.11506929,
      -0.011179372,
      -0.020018028,
      0.03146201,
      0.0017821364,
      -0.018499568,
      -0.007555171,
      -0.01566226,
      0.0066844407,
      -0.004477436,
      0.0142181665,
      -0.0141595425,
      -0.004971044,
      -0.004294782,
      -0.011321494,
      -0.0047687157,
      0.017706987,
      -0.0003989995,
      0.03515405,
      0.006546085,
      -0.018051166,
      0.006395001,
      0.0077983127,
      0.003159227,
      -0.037399683,
      -0.0065598055,
      0.0039925235,
      0.0104753915,
      -0.009775389,
      0.009992271,
      -0.028710805,
      -0.0028456494,
      0.033777546,
      0.00040283607,
      0.019307178,
      0.005673273,
      -0.03290767,
      0.0035548327,
      0.0050465856,
      0.004189952,
      -0.022138016,
      0.013165245,
      0.01781962,
      0.020786809,
      -0.025560895,
      0.012846203,
      0.029982163,
      -0.013258337,
      -0.009223663,
      0.025486676,
      -0.051469415,
      -0.006520014,
      -0.006534544,
      -0.019966159,
      0.010655739,
      0.010100283,
      -0.0061014825,
      0.0014121997,
      -0.012587838,
      0.0058358843,
      0.0026975865,
      -0.006305148,
      -0.0010916046,
      0.02673666,
      -0.006237375,
      0.0031244704,
      0.018429054,
      0.01084138,
      0.005170549,
      -0.030861415,
      0.008069175,
      -0.011213895,
      -0.009841192,
      0.0076630744,
      0.00083920336,
      0.010240022,
      -0.0054599475,
      0.013802687,
      0.008119431,
      0.00823716,
      -0.019806242,
      -0.0065360344,
      -0.050503734,
      -0.021061635,
      0.004902954,
      0.010528329,
      0.015374209,
      0.018273603,
      -0.014421675,
      -0.0018932769,
      0.017512161,
      0.012844848,
      -0.0110809915,
      -0.01530808,
      0.019471368,
      -0.021006208,
      -0.016405152,
      -0.017586404,
      0.007544191,
      -0.003160452,
      0.004472579,
      0.015760617,
      -0.0043865102,
      -0.0112698665,
      0.020372568,
      -0.018635385,
      0.02267975,
      0.011070733,
      0.0024220634,
      0.00012788482,
      -0.011426134,
      -0.01315786,
      0.034200974,
      -0.15803762,
      0.006414325,
      0.013954819,
      0.0021005997,
      0.012618633,
      -0.015205259,
      -0.033970036,
      -0.009061229,
      0.012219801,
      -0.00516953,
      0.015405032,
      -0.015272421,
      -0.029764608,
      0.00076707196,
      0.0031869146,
      0.13907094,
      0.00015947156,
      0.00943341,
      -0.008099525,
      0.020476498,
      -0.009388071,
      -0.018390154,
      -0.004990895,
      0.009401668,
      -0.014269565,
      0.0004883693,
      -0.010505896,
      0.00069793913,
      0.012480059,
      0.021153549,
      0.009754702,
      -0.02212509,
      0.014595121,
      0.015563874,
      0.0046767406,
      -0.004234236,
      -0.0015803126,
      -0.009947976,
      0.0009828019,
      0.0067422595,
      0.013557216,
      0.009497303,
      -0.0016437897,
      0.002225688,
      0.0003283543,
      0.005297545,
      -0.012480157,
      -0.013634622,
      -0.019629443,
      -0.0011384177,
      0.0000026900182,
      -0.0462664,
      0.008837623,
      -0.026077405,
      0.0018089255,
      0.038536683,
      -0.020979704,
      0.01740137,
      0.015098011,
      0.011689657,
      -0.018619474,
      -0.009897662,
      0.011303327,
      -0.0035436244,
      0.01625501,
      -0.007989607,
      0.029381726,
      0.0003824063,
      0.01817709,
      -0.0022178348,
      0.040093783,
      0.005843531,
      -0.011657389,
      0.01658788,
      -0.029128058,
      -0.0097932145,
      -0.011061729,
      0.021023752,
      0.0104493145,
      -0.011804073,
      -0.0031393524,
      -0.004832045,
      -0.005832164,
      -0.003812633,
      0.026250144,
      -0.010858121,
      -0.020789932,
      0.02144256,
      -0.010900884,
      -0.01425128,
      -0.013509604,
      0.0056751086,
      -0.007771116,
      -0.0072713867,
      -0.0077170893,
      0.009672633,
      0.013310514,
      -0.0041353153,
      0.03134441,
      -0.009962763,
      0.0061062262,
      -0.019822413,
      0.006467479,
      -0.02938613,
      0.018597838,
      0.016138783,
      0.018220283,
      0.025241949,
      0.0021520746,
      -0.024799109
    ]
  },
  {
    "id": "genai_cohort_python_08_Writing_1st_python_code_on_WINDOWS_vtt",
    "content": "These days softwares 2 are very compatible. 3 You don't have to worry 4 about Mac or Windows too much. 5 But still, just for the sake of 6 having it, I will walk you through 7 that how you can install and run 8 Python programs on Windows as well. 9 Again there are two ways 10 of writing Python programs. 11 One in the shell itself, 12 another one is into file so that 13 we can save them forever. 14 And obviously the second 15 method is really good. 16 So let me just take you onto 17 a Windows screen and walk you 18 through that how you can 19 actually have a Python program 20 being installed as well as run 21 your very first fil file. 22 And it's exactly same as if you 23 have watched it on the Mac or 24 probably if you have skipped 25 it, you should really Var it. 26 It's a great way and probably 27 you'll learn a thing or two. 28 Anyways, if you don't want 29 to do that, that's totally okay. 30 Now I am on a Windows 31 machine and together we're 32 going to go through. 33 So just go ahead and fire up 34 any browser of your choice and go 35 ahead and have it for me. 36 I just use the default version 37 and I will just go ahead and use 38 python.org to download the Python. 39 Now apart from this I will 40 also use one more website 41 to download the VS code. 42 This is my choice of editor 43 and I prefer to use it instead 44 of others just for the sake of. 45 It's good, it's really nice 46 and I enjoy writing code in VS 47 code so that's why I use it. 48 Just download it for Windows. 49 Simple installation, 50 nothing big deal. 51 No big deal there. 52 Now once you go onto the python.org 53 what we can do is we can click on 54 download and just download the 55 version whichever version you want 56 to have with and usually it detects 57 the system whichever you are on and 58 it gives you appropriate version 59 for it. 60 But in case not you can always click 61 on the download and look 62 for the version you are looking for. 63 In my case it is Windows. 64 So all the things you can see 65 specific version of Windows I 66 recommend to choose the latest one. 67 But you can click on Windows or 68 Linux or Mac and can choose that. 69 Hey, I want this specific version 70 of the Windows so you can 71 see there's lots of installers 72 and things available for you. 73 Usually the default installer 74 which is next next I agree 75 one is usually the best one. 76 You can just go ahead 77 and install this one. 78 I have got one here on my desktop. 79 It doesn't look like it's the file 80 but hey this is my virtual machine 81 so just bear with me. 82 Now once you click on this it 83 says, hey, install the Python 84 where you want to install it. 85 The first thing I would love to add 86 a path so that I don't have to 87 manually go ahead and add the path. 88 I can just use it and, and use 89 the admin privileges when 90 installing the Python. 91 So you can just go ahead and use 92 it wherever you like so it 93 doesn't really bother much. 94 So I just happen to click on 95 the admin privileges when installing 96 so that it can be simply used. 97 Click on install now and it just 98 includes and install everything 99 and allow this app to make changes. 100 Yes, please go ahead 101 and install this. 102 And once you go ahead 103 and install this, this should 104 take fairly less time. 105 And apart from this I also as I 106 mentioned in my Mac video as well, 107 I actually don't use the default 108 terminal or the command prompt 109 from either the Mac or Windows. 110 I happen to use one another software 111 which I really love. 112 Feel free to use it, Feel free 113 to ignore it, feel free 114 to use the original terminal, 115 but I happen to just use it. 116 I just love it. 117 It's available on Mac, 118 Windows and Linux, so I 119 just happen to use it. 120 So just thought to mention it 121 now apart from this, once it's 122 installed, which is taking a little 123 time and let's wait for it 124 and let's wait for it to finish. 125 All right, since it's a Windows 126 you will see these kinds 127 of things that sometimes the path 128 is too long and all of that. 129 So we'll just disable the length 130 and yes, just allow it so that 131 sometimes the path where 132 the Python install is too long. 133 So Windows has its own default 134 configuration so we can just close 135 it now once we have it, I can just 136 go ahead and open up any terminal. 137 In this case I will use Warp 138 and I'll open up a new shell 139 of Warp and so I'll just open this 140 up and I'll start a fresh one. 141 So this is a new shell that I've 142 installed and here I can just 143 go ahead and type Python and then 144 I can say version and hopefully 145 this will give me that. 146 Hey, Python is installed 147 on your system. 148 I'll just zoom this a little bit. 149 Oops to zoom. 150 Shouldn't have done that, 151 but anyways, let me fix this. 152 Anyways let's go up here. 153 So now that we can see that we 154 have Python 3.13.2, any version 155 that you have installed and as 156 long as this command is giving 157 you an output that means we are 158 all okay, we can just get 159 started working with that now on 160 your desktop. 161 Just go ahead and create A new 162 folder, wherever you like. 163 So I'll just go ahead 164 and say new, folder. 165 I'm going to call this 166 one as Test Win. 167 Because anyways, I'm going 168 to go ahead and delete this 169 after this recording 170 and I'll just close this one. 171 I'll fire up my VS code, in the. 172 So once I have this, I'll just 173 go ahead and say that, hey, let's 174 go ahead and minimize this. 175 And now just go ahead and drag 176 and drop this Test Win. 177 And as soon as you drag and drop 178 this, yes, I do trust the author, 179 because I am the author. 180 And just click on this new folder. 181 We're going to call 182 this one as 01basics. 183 And inside this we're going 184 to create our new first file, 185 which is going to call this 186 one as Python Test document. 187 The extension PY is really important. 188 Once you have this, this 189 might prompt that. 190 Hey, do you want to install 191 some Python extension? 192 Yes, I would love to install 193 it because it will help me 194 to get suggestions so that 195 I can just write faster. 196 Just like Python has. 197 Every language has these 198 suggestions so that you can write 199 your language faster. 200 It's taking a little bit while to 201 install this and in case you're 202 wondering, I do have a theme 203 installed on my VS code, which is 204 known as chai theme and which 205 makes the code look a little bit 206 better. 207 So that's why I use it. 208 Once you have this 209 installed, that's it. 210 It's an official extension 211 by Microsoft. 212 So I can just go ahead and close 213 this, close this, close this, 214 come back to your code, click 215 on this icon so that you can 216 see all of the code files. 217 And now I'm going to go ahead 218 and just again, this, not this. 219 I just wanted to open the font 220 size editor so that I can 221 have some bigger font 222 and hopefully that will help you 223 to see the code much easier. 224 On my Mac it's much easier. 225 I can just go ahead and say import 226 sys, just like we have been writing 227 it on the very first installation. 228 This is just importing some system 229 libraries, with the Python and now 230 you can just ask it that, hey, just 231 go ahead and print sys and as soon 232 as I put up a dot you can see we 233 have so much things to learn about 234 it. 235 And as of now I just want 236 to have the version that is it. 237 It's going to give me some output. 238 But this is really what I want now. 239 I want to open up the terminal 240 and the easiest shortcut 241 for that is command and tilde. 242 The tilde is the key just 243 below your escape key. 244 And here I can just go ahead 245 and say, hey, Python, I just want 246 to run this file, 247 which is inside the 01, the basics 248 and inside this Python test. 249 As soon as I run this file, it 250 says, hey, this is the expected 251 output, this is what we have, 252 and as long as you are able to 253 run this, that means, hey, it's 254 all good. 255 Now we have all the things 256 up and ready and, and we can see 257 everything is working fine. 258 Absolutely. 259 On Windows, this is exactly 260 the same thing that we had 261 done on the Mac as well. 262 And I highly recommend you to Var 263 that video as well, so that you can 264 see how intercompatible this is. 265 You don't have to worry 266 about anything, it just 267 works out of the box. 268 The same instruction are on Mac, 269 the same instruction are on Windows. 270 The only difference is 271 in the path, that is it. 272 So in the Windows it is, 273 forward slashes, in the Mac it's 274 the backslashes that is it. 275 Apart from that, no 276 difference at all. 277 So this is good. 278 We have done the installation 279 as well as have run the first, 280 decent, Python code. 281 It's not a hello world, but it's 282 definitely a good one and we 283 have done it all awesomely. 284 So that is it. 285 We are now compatible with 286 the installation as well as 287 running the first command. 288 We have a good foundation 289 of knowing the Python as well. 290 And from the next video onwards 291 we can start writing some good 292 amount of Python code, have some 293 ground basics and the knowledge 294 behind the scene of Python. 295 It's all fun. 296 Let's go ahead and get started 297 with Python.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "08 Writing 1st python code on WINDOWS.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/08 Writing 1st python code on WINDOWS.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0010498343,
      0.014476888,
      0.014838376,
      -0.046866138,
      -0.004450638,
      0.014397005,
      -0.0026898852,
      0.012569492,
      0.008327831,
      -0.000875865,
      -0.009144851,
      -0.03586847,
      0.019131472,
      0.02497993,
      0.115085855,
      0.007280291,
      -0.015858006,
      -0.016203586,
      0.016662445,
      -0.012833177,
      0.0059749605,
      0.0064476375,
      0.008916896,
      0.0057934267,
      -0.0015754184,
      -0.0048020743,
      0.007952389,
      -0.0050161793,
      0.03277248,
      -0.035717446,
      -0.028090728,
      0.003347799,
      -0.014073852,
      0.017997727,
      -0.014777944,
      0.026725296,
      0.00600195,
      0.0065642865,
      0.009065109,
      0.017986532,
      -0.033778515,
      0.0035467837,
      -0.007672949,
      -0.028685125,
      0.020912757,
      0.0018945666,
      -0.008219086,
      -0.012716534,
      -0.011091855,
      0.018963339,
      0.0101883635,
      -0.009506264,
      -0.03583766,
      -0.17926247,
      0.004139248,
      -0.0034328646,
      0.00072258845,
      0.007320618,
      0.015583101,
      0.004654694,
      -0.023862412,
      0.026450625,
      -0.04694477,
      -0.015705349,
      -0.01748954,
      -0.018916294,
      0.026657108,
      0.006801144,
      -0.0061258166,
      -0.012117764,
      0.012085693,
      0.009005744,
      0.00073821214,
      -0.0043050637,
      -0.034608692,
      -0.024722567,
      0.010015604,
      -0.034106158,
      -0.005086276,
      0.05483593,
      -0.009764188,
      -0.0066786786,
      0.0013887583,
      0.0025019501,
      0.012598461,
      -0.00946424,
      -0.047695886,
      0.016233843,
      -0.0034890382,
      -0.013449315,
      -0.014848063,
      0.034087323,
      -0.011656013,
      0.023499627,
      -0.017964588,
      0.0016524964,
      -0.0077993725,
      -0.005303232,
      0.020576641,
      0.0022826279,
      0.03572736,
      -0.0056283395,
      -0.063677415,
      -0.021119524,
      0.0117758205,
      0.0002569639,
      0.017239768,
      -0.002836428,
      -0.0004786733,
      -0.027993701,
      -0.008996935,
      0.0067969994,
      0.00744014,
      0.043778922,
      0.010790152,
      -0.16373603,
      0.013968759,
      0.005646707,
      -0.0135048125,
      -0.017285604,
      0.0012637663,
      -0.009676449,
      -0.011008105,
      0.020026453,
      -0.012456073,
      0.013321397,
      0.007841491,
      0.02513228,
      -0.004694435,
      -0.0046352353,
      -0.022182127,
      -0.022744156,
      -0.025522096,
      0.0030908226,
      0.0072756,
      0.0058810385,
      -0.017650856,
      -0.0042164037,
      -0.022633435,
      -0.026316725,
      0.0063132336,
      0.008232847,
      0.007957747,
      0.022896368,
      0.010494274,
      0.022102367,
      0.0037515003,
      -0.0033898086,
      -0.019579964,
      -0.029173788,
      0.004481365,
      -0.013841657,
      0.025616923,
      -0.0073996196,
      0.023709394,
      -0.0020409313,
      0.00040686506,
      -0.013071835,
      -0.011251937,
      -0.0029347518,
      0.00051005237,
      0.007284864,
      -0.00006902321,
      0.03031328,
      -0.0029575278,
      0.00033008566,
      -0.015678708,
      0.0036245733,
      0.016384037,
      0.002913151,
      0.012388455,
      -0.010700996,
      -0.0044728923,
      0.0062763984,
      -0.018290661,
      -0.008634018,
      0.017066913,
      -0.0051848344,
      0.020927101,
      0.004375123,
      0.002689992,
      0.00070631225,
      0.008588476,
      0.0023960997,
      -0.006519731,
      -0.004065801,
      -0.022900112,
      0.02021481,
      0.021491518,
      -0.008563237,
      0.0038069203,
      0.00600932,
      0.019660622,
      0.023707343,
      0.011185683,
      -0.012688845,
      -0.0058591343,
      0.013827034,
      0.0060669873,
      0.0076689795,
      0.0113026295,
      -0.011096771,
      -0.004915173,
      -0.024120703,
      0.028855985,
      -0.013773589,
      -0.0015486798,
      -0.0199972,
      -0.003073822,
      -0.00425296,
      -0.0013217886,
      -0.01960102,
      0.007917263,
      0.009264861,
      0.024981022,
      0.0011121891,
      0.024376832,
      -0.0031648388,
      0.025299426,
      0.01669602,
      -0.018146172,
      0.0055573657,
      0.007324749,
      0.017866207,
      0.0005943217,
      -0.027061094,
      0.0027514983,
      0.0031557358,
      0.0018567616,
      -0.004214341,
      0.016002383,
      0.0052158358,
      -0.021154363,
      0.0031825963,
      -0.0102416035,
      -0.019874547,
      -0.0078056143,
      0.011493212,
      0.003425267,
      -0.018921746,
      -0.0015579959,
      -0.013605799,
      -0.009096613,
      0.03306195,
      0.03512785,
      -0.0016422328,
      0.0029524975,
      0.008799398,
      -0.024630308,
      -0.01833467,
      -0.007938969,
      0.0016448249,
      0.026061207,
      -0.022807036,
      0.024081096,
      -0.019438932,
      -0.018455526,
      -0.008891403,
      -0.002104109,
      -0.010921402,
      0.0040411707,
      -0.006794733,
      -0.02689102,
      -0.02134512,
      0.042397533,
      0.014527873,
      -0.0015226527,
      0.011191822,
      0.005829296,
      0.017052807,
      0.010117515,
      0.016542824,
      0.006543909,
      -0.016818376,
      -0.02085114,
      0.011738299,
      -0.08909031,
      0.007826364,
      0.003656255,
      -0.018240418,
      0.007900989,
      0.02091593,
      -0.030532524,
      0.010282174,
      -0.0035877635,
      -0.0062228725,
      -0.0062040365,
      -0.0072544683,
      0.035615124,
      -0.019017495,
      -0.0033150641,
      0.0049137175,
      -0.0051836874,
      -0.004839513,
      0.018551249,
      -0.009642057,
      -0.005322466,
      -0.013452818,
      -0.013379822,
      -0.022604005,
      0.019498581,
      -0.00014133872,
      0.0074375244,
      0.035347268,
      0.0013903489,
      -0.019772185,
      -0.008072294,
      0.03910441,
      -0.0044520367,
      -0.016250243,
      -0.0037012955,
      0.006210385,
      0.013040288,
      -0.004871454,
      -0.0028856837,
      -0.015521145,
      0.024250591,
      -0.03357956,
      0.019587038,
      0.021253686,
      -0.027257826,
      0.010992075,
      -0.011442472,
      0.012681386,
      -0.021549463,
      -0.00733882,
      -0.036096312,
      0.01362237,
      0.008832503,
      -0.015692305,
      0.012049595,
      0.010451161,
      0.015839651,
      -0.011414969,
      0.0027878426,
      0.0077410103,
      -0.012687747,
      0.007484192,
      0.009768454,
      -0.014320412,
      0.007209917,
      0.015934804,
      0.025533887,
      -0.016768858,
      0.007840602,
      0.0087380875,
      0.026502345,
      -0.0049521164,
      -0.0032903524,
      -0.018247195,
      -0.012607676,
      -0.024344062,
      0.008750994,
      -0.0050121676,
      0.00035849703,
      0.0333809,
      0.006926293,
      -0.00374278,
      -0.0015619278,
      0.0051530455,
      0.006948856,
      -0.015492494,
      -0.012252193,
      -0.018805565,
      0.012109914,
      -0.024439173,
      -0.0011427791,
      0.034607098,
      -0.0016476744,
      0.0017490402,
      -0.005847218,
      0.00038310047,
      -0.0069713774,
      -0.018455038,
      -0.002576508,
      0.02239689,
      0.005055655,
      0.0075503304,
      -0.001539983,
      0.0080377115,
      -0.008421023,
      -0.0048991903,
      0.004954226,
      -0.0037928438,
      -0.0024499977,
      -0.003211896,
      0.011875503,
      -0.00068187545,
      0.0016211153,
      0.0095494045,
      -0.010091537,
      0.007626815,
      -0.0048020524,
      0.008777976,
      -0.007815937,
      -0.0050084903,
      0.015096171,
      -0.010323102,
      -0.0084407525,
      0.008549862,
      -0.007945753,
      0.010054194,
      0.00097616075,
      0.002891891,
      0.0056557804,
      -0.026233105,
      -0.026313681,
      0.012499329,
      -0.026719926,
      -0.017559437,
      0.0011533176,
      -0.010716078,
      0.025489168,
      0.014370474,
      0.0102286,
      0.0014422545,
      -0.007862918,
      0.010486656,
      0.036065247,
      -0.010145916,
      -0.006055404,
      0.03158236,
      -0.041967195,
      -0.010475703,
      -0.008775804,
      0.0067713205,
      -0.00966101,
      -0.02332596,
      -0.017541852,
      -0.017727515,
      0.008881205,
      0.0042353184,
      0.02967567,
      -0.023991644,
      -0.011032522,
      -0.024180844,
      0.00803868,
      0.005217696,
      -0.007700009,
      -0.0042428975,
      0.006943141,
      0.013707489,
      -0.004700966,
      -0.01619089,
      -0.0027180521,
      -0.0033607015,
      0.0011144002,
      0.005415774,
      -0.039218113,
      -0.02370259,
      0.002740849,
      -0.00008865154,
      0.03093745,
      0.01986531,
      0.024428502,
      0.015686136,
      -0.00076437584,
      0.004234478,
      -0.009538639,
      0.007900822,
      0.011057159,
      0.03206991,
      0.006411905,
      0.003830732,
      -0.01717918,
      0.009737168,
      0.01013005,
      -0.014233051,
      0.017547118,
      0.009413792,
      -0.011506004,
      0.021292556,
      -0.031538732,
      -0.017056014,
      -0.001963573,
      0.0167523,
      0.006121593,
      -0.016368793,
      0.0022317315,
      -0.006913195,
      0.019379858,
      -0.0027009593,
      0.00070196454,
      0.0075720283,
      0.026169362,
      0.011034602,
      -0.011161834,
      -0.008713946,
      -0.0042297295,
      0.008724933,
      0.024395512,
      0.01834927,
      -0.008099263,
      0.0023691102,
      -0.013559023,
      -0.003197499,
      0.007312284,
      0.013694101,
      -0.011444925,
      -0.010719801,
      -0.0021232932,
      0.003855259,
      -0.01829574,
      0.00806235,
      -0.0025490497,
      -0.016406434,
      0.017378565,
      -0.0017940402,
      0.018207492,
      0.009160133,
      -0.0060135317,
      -0.005287139,
      0.0051749256,
      -0.0028760582,
      0.0057478733,
      0.012858005,
      -0.0013372414,
      -0.024147334,
      -0.008569505,
      0.0054480154,
      -0.00076622295,
      -0.0036070473,
      0.008196532,
      -0.0017377237,
      -0.009172937,
      -0.010644594,
      0.011031593,
      0.03798011,
      -0.0019431951,
      -0.017934298,
      -0.021954713,
      0.029912539,
      -0.010252641,
      0.016342632,
      -0.026863815,
      -0.020518498,
      0.023920922,
      0.0033513973,
      0.0041692373,
      0.013128584,
      0.008384333,
      -0.012438204,
      -0.014459929,
      -0.0015887826,
      -0.0043405057,
      -0.12952968,
      -0.011195302,
      -0.015742393,
      0.032291368,
      0.0061519044,
      -0.025135536,
      0.0009233878,
      -0.015118084,
      0.012595411,
      -0.002055477,
      0.022691943,
      -0.008894242,
      -0.01516405,
      -0.0033894854,
      -0.009297844,
      0.015580852,
      -0.0026329255,
      -0.0038766013,
      0.039644066,
      0.0141245825,
      -0.03704579,
      -0.0082247555,
      0.014455925,
      -0.013182403,
      -0.033836275,
      -0.019539801,
      0.0023204463,
      -0.00053361116,
      -0.000010797118,
      0.01209149,
      -0.02262815,
      0.0009653713,
      0.017371478,
      -0.0041906065,
      0.04134228,
      0.0077328742,
      -0.030050553,
      0.013317001,
      0.004255763,
      0.0031328418,
      -0.006958649,
      0.016795099,
      0.026915653,
      0.021101618,
      -0.028040288,
      0.01562552,
      0.019289007,
      -0.009799799,
      -0.001594925,
      0.036500443,
      -0.04810952,
      -0.013219709,
      -0.012182557,
      -0.029413719,
      0.00018362119,
      0.017380806,
      0.003053915,
      0.0060328133,
      -0.01796512,
      -0.007404085,
      0.00084069266,
      0.0019244842,
      0.015888177,
      0.020757994,
      0.006764032,
      -0.008991186,
      0.025745964,
      0.011025425,
      0.009555629,
      -0.029821305,
      0.008431769,
      -0.0106166005,
      -0.012946021,
      0.0023283528,
      0.009797998,
      0.004515824,
      0.012194523,
      0.015049021,
      0.0029097693,
      -0.0002040973,
      -0.018222969,
      -0.0030066913,
      -0.046962086,
      -0.019703642,
      -0.00024918973,
      0.006691476,
      0.011844495,
      0.0121492045,
      -0.009942476,
      -0.008213094,
      0.011857698,
      0.0140234325,
      -0.01455783,
      -0.013892699,
      0.025056846,
      -0.00443315,
      -0.018182432,
      -0.011913384,
      0.005555442,
      -0.0023027007,
      -0.0071395566,
      0.012471407,
      -0.0071948892,
      0.008702161,
      0.021091357,
      -0.03563201,
      0.019123226,
      0.011264562,
      -0.0011431806,
      -0.009182678,
      -0.017956892,
      -0.009950677,
      0.019949103,
      -0.15288463,
      0.004680366,
      0.0070175156,
      0.009153761,
      0.021031061,
      -0.009054811,
      -0.023496225,
      0.0013922298,
      -0.0003887089,
      -0.016379133,
      0.010130626,
      -0.01689178,
      -0.031565335,
      0.0011653333,
      0.008847506,
      0.13920975,
      -0.008540753,
      -0.0067066704,
      -0.0010925998,
      0.023063196,
      -0.012055106,
      -0.0069991313,
      0.0110147735,
      0.007958098,
      -0.009318017,
      0.00010563905,
      -0.0080647925,
      -0.0049296627,
      0.0019583046,
      -0.009406142,
      0.007884382,
      -0.02244429,
      0.020656655,
      0.011320146,
      -0.0013660535,
      -0.003300942,
      -0.00019071013,
      -0.005661855,
      0.0073371953,
      0.01043596,
      0.013036179,
      -0.0014825868,
      0.0010658314,
      -0.005239221,
      -0.002156204,
      -0.005518738,
      -0.009048303,
      -0.033917826,
      -0.0153788095,
      0.0083434535,
      -0.013051209,
      -0.053964626,
      0.0037546393,
      -0.012183785,
      -0.0076934583,
      0.04158616,
      -0.009452374,
      0.014751346,
      0.017744984,
      0.015005938,
      -0.0093489485,
      0.003527511,
      0.0021495805,
      0.0003889138,
      0.017266713,
      -0.022215895,
      0.030313946,
      0.010953771,
      0.012467784,
      0.001306174,
      0.039328184,
      0.0030403393,
      -0.016248478,
      0.010781892,
      -0.011886792,
      -0.0015376506,
      -0.011092323,
      0.013151618,
      -0.0025300544,
      -0.0057157003,
      -0.00042448507,
      0.00012623928,
      -0.0066402233,
      0.0007144855,
      0.032642327,
      -0.0029315716,
      -0.017027108,
      0.011016899,
      -0.0026765075,
      -0.022772904,
      -0.0039161984,
      -0.016296787,
      -0.015744528,
      -0.006137835,
      -0.0041375975,
      0.0030657556,
      0.000618923,
      -0.004561892,
      0.030373137,
      -0.01307394,
      0.008803136,
      -0.00982103,
      -0.0034157352,
      -0.024461895,
      0.020746933,
      0.014803775,
      0.023145527,
      -0.0014219233,
      0.011025168,
      -0.017642047
    ]
  },
  {
    "id": "genai_cohort_python_09_Get_everything_in_virtual_environment_vtt",
    "content": "Hey there and welcome to the Python. 2 Now that the Python is 3 installed and you have written 4 at least one hello world. 5 Now the next topic that we need 6 to work on is virtual environment. 7 Why does it even exist and why do we 8 even have the virtual environment? 9 So let me tell you that. 10 What's the story behind 11 Virtual environment? 12 It's like safeguarding your 13 application from other versions 14 and don't clutter your operating 15 system and also so that your 16 program actually moves safely in 17 other environment as well on 18 Linux, on Mac or other people's 19 computer. 20 So the most important part of it is, 21 let's just say that I 22 want you to say that this is your 23 whole computer, all right? 24 And you have installed Python 25 on it, all right? 26 Once you've installed the Python, you 27 will also bring third party code. 28 Remember I told you that you 29 can actually borrow this piece 30 of code anywhere you like? 31 Yeah, this is exactly like that. 32 And let's just say you're 33 working and you have installed 34 Python on your computer. 35 Now you go ahead and say, hey, I want 36 to borrow this piece of code. 37 So this piece of code is installed on 38 your system, probably in an orange 39 color, and you work on that. 40 Now you will have Python programs 41 in your computer just like this. 42 This is a small piece 43 of another standalone Python program 44 that you're working on. 45 This is also another one. 46 This is also another one. 47 Now all of these Python piece of 48 code, if they are dependent on this, 49 they have to actually go ahead 50 and communicate with this one. 51 So all of this is 52 dependent on this one. 53 And let's just say this piece 54 of code gets an update and now 55 it's not of orange color, it's 56 actually red in the color. 57 But your application, at least some 58 of the application, was dependent 59 on it, on the orange version of it. 60 Now what will happen? 61 This is not going to work, 62 so this will turn purple. 63 Not a good idea, that you 64 install the whole thing, 65 whatever the dependency you need, 66 into a single place. 67 And now if there is a dependency 68 on previous version, 69 it just gets really bad. 70 What could be the alternate version 71 of this entire thing, the 72 alternate version is actually 73 super easy, that instead of just 74 installing it like this, let's go 75 ahead and turn this back into the 76 orange color. 77 And instead of everybody marking 78 this as a dependency like this, 79 we simply go ahead and say, hey 80 everybody, you get your own Python. 81 I will have Python on my whole 82 operating system, that's okay. 83 But you also get your own version 84 of the Python, the smaller version. 85 And whenever you have a dependency 86 of it, you don't install 87 the dependency on my Whole computer. 88 You actually go ahead 89 and install the dependency 90 on your system as well. 91 Now this is actually behind this. 92 So there we go. 93 And similar to this, we will have. 94 Oops, we will have 95 this dependency here. 96 So we'll just go ahead and take 97 this one here as well, 98 and this one here as well. 99 Now if this operating system 100 want to stay up here, so let's 101 just say let's turn this 102 into green, everybody is happy. 103 But this application now says, hey, 104 I want the upgraded version 105 of it and I'll be fine with this. 106 This can turn into red. 107 This application is okay, 108 but this one is still 109 using the orange version. 110 Maybe this one also wants to get 111 even higher version than the red. 112 Probably a yellow version of it. 113 It's not visible. 114 We'll choose another color, 115 probably sharper. 116 Yellow. 117 Yeah, this one use a yellow 118 version of the Python or any 119 sub module of the Python. 120 And this is the whole concept 121 of a virtual environment. 122 You virtually create an environment 123 and this environment is just 124 isolated for this application only. 125 It's not dependent on your 126 whole operating system. 127 You can install whatever you like 128 on your operating system, but you 129 have a virtualized environment. 130 That means for every application 131 that I create, I create a, 132 standalone Python environment. 133 And then whatever I install gets 134 installed in this ecosystem, not 135 on my whole ecosystem. 136 And that's your virtual environment. 137 I hope you love this 138 diagrammatic explanation. 139 These are super awesome. 140 I love them actually. 141 So let me walk you through that, 142 how you can actually create them. 143 There are many ways. 144 The one that I'm showing you is 145 the most common one, the first one. 146 I'll show you the most latest 147 one as well, which is my favorite 148 and you will also love that. 149 And that piece of tech as well. 150 The most important and the easy way 151 of having this is first, let's 152 just say we want to have a folder. 153 We're going to call this 154 one as 01, not minus 1 01. 155 And we're going to call 156 this one as, virtual. 157 Feel free to name it 158 whatever you like. 159 The easy way is right click on this 160 and open the integrator terminal. 161 Now you will have a terminal or 162 also known as command line opened 163 up in this particular folder. 164 So I do have Python 165 installed on my system. 166 I can just verify it. 167 I'm on the Mac, so I have 168 to say Python 3. 169 If you're on Windows, 170 just say Python. 171 So I'll just say Python 3. 172 Just give it option dash 173 And then we will use 174 a program which automatically 175 comes up, which is venv. 176 This is known as Virtual Environment. 177 Now, in what folder or in what 178 directory you want to install 179 this virtual environment. 180 Remember I told you we will 181 install this in yellow one. 182 We will install this in, in this one. 183 Whatever you want to call 184 this one, you can just go 185 ahead and call this one. 186 Usually you'll see that either people 187 call it also Venv, the same name, 188 or some people call it as venv. 189 Just to make sure that it's hidden 190 from your regular files. 191 That's the only reason for creating, 192 you can call it Superman. 193 No problem there. 194 Once I hit Enter, this actually goes 195 ahead and create this whole thing. 196 Now notice here it 197 created a new folder. 198 I'll create one more folder here 199 so that it looks nice 200 and I'll call this one as temp, or I 201 can call this as src for Source. 202 And now you can see that we have this 203 whole virtual environment folder. 204 This actually creates a separate 205 version of the Python in itself. 206 Now this has just created 207 it, it's not activated. 208 Currently you're using the Python 209 version, which is installed 210 in my whole computer, not the small 211 box here to activate it. 212 There are actually two commands, one 213 for Mac, one for Windows. 214 You can use any one of them. 215 First I'll walk through 216 with the Windows. 217 So name your folder, 218 call it as vnv, Env. 219 Whatever you have named your 220 folder, I have called it as Venv. 221 So I'll name this one. 222 Then on the Windows and again it's 223 always same, it's a forward slash. 224 Then you have to go 225 ahead and say scripts. 226 You will have a folder. 227 So go ahead and open this 228 up and see the folder and inside 229 the scripts you have slash, 230 again forward slash and activate. 231 This is how you activate your 232 virtual environment 233 in Windows if you're on the Mac. 234 What I have to do is say Source. 235 That is how you load this. 236 Then I can see I do 237 have a bin folder. 238 So I'll go inside the bin. 239 Not like that. 240 So source. 241 And then I'll go ahead and say 242 first let's go ahead and dot, venv. 243 Then I'll go inside the Bin 244 folder and in the Bin I can see 245 that I do have an activate. 246 So just open this one. 247 This activate. 248 This is the file that I want to run. 249 So I'll just go ahead 250 and say activate. 251 Once I hit Enter, you will see 252 something like this parenthesis vnv. 253 That means now you are not 254 in my computer's Python, but you are 255 into the virtual environment. 256 This is where you can install 257 and bring the third party. 258 It will not affect anything 259 that you are Bringing in one. 260 So let me also walk you through 261 now that you understand this part 262 that why this was being done. 263 To actually go ahead and install 264 a third party, I have 265 to write it better third party 266 software or third party modules. 267 So let's just say I want to bring 268 in a module of web development 269 Flask, which is very, very popular. 270 All I have to do. 271 There are a couple of ways 272 how you can do this. 273 I can just go ahead now say pip 274 install and simply say 275 hey, I want to install flask. 276 It will go ahead and install flask. 277 And if I want to bring in, let's 278 just say request a module which 279 helps me to make web requests, 280 I can just go ahead and do this. 281 But there is another way. 282 Yeah, there is another way 283 which is more popular. 284 In this folder, whichever folder 285 you are, you actually tend to 286 create a new file known as 287 requirements Txt Again it's a 288 simple text file and there is no 289 strong reason to call it as 290 requirements. 291 It can be hitesh txt as well. 292 But I'm telling you the standard way 293 and you simply go ahead 294 and write what do you want? 295 For example, I want requests. 296 So it will install request. 297 I can have a flask and it will 298 have the flask and then I can 299 simply go ahead and say one more 300 command, pip install install. 301 But use the installation from 302 a file so dash R for the file 303 and just go ahead and say I want 304 to have this from requirements. 305 Other thing which most people does 306 is don't install 307 requests just like this. 308 They want a specific version of it. 309 Like this version will be 310 not red of course or a yellow 311 like I want to install 231310. 312 I will walk you through how they get 313 the version specifically later on. 314 But this is how they 315 mention it this one. 316 Let's just say I want 317 a version of 3.0.0. 318 There is a website from where 319 you get all of this information. 320 So don't use sweat on it. 321 Don't you worry on that. 322 Now once I do this and if I go 323 ahead and say install this one 324 and I hit enter on this, this is 325 going to go ahead and work on it. 326 You can ignore totally this. 327 You may have installed 328 Python package in a global 329 environment, all of this. 330 So no, don't worry, 331 totally ignore it. 332 We know that 100% we are into 333 this one virtual environment. 334 It's asking us that hey, you 335 can upgrade your pip as 336 well and all of this detail. 337 But hey, rest assured that you 338 have actually installed everything 339 in your virtual environment. 340 That's the reason. 341 So again It's a simple process 342 and it makes your environment 343 totally separate. 344 So we have the yellow one and in 345 this and the beauty about it, the 346 best part is now I can give this 347 software to anyone and I don't 348 have to include this virtual 349 environment. 350 They can install these dependency 351 which are required for my 352 software to run using this 353 requirement files super easy. 354 How cool is that? 355 Actually that is why I love 356 this and I will walk you through 357 with this entire process. 358 So now that you know that how you can 359 actually have a virtual environment, 360 one and only important 361 thing that I would recommend you. 362 Everyone is always work in venv. 363 That means virtual environment. 364 It is kind of a good practice and 365 a must have practice in the 366 entire Python ecosystem so that 367 your every software that you're 368 writing, every package that 369 you're writing is independent of 370 your software, independent of 371 your computer. 372 And anybody can actually install 373 your software and run through 374 it, whether Mac, Windows or 375 another system, always and always 376 work in virtual environment. 377 So we will bring this habit 378 of having virtual environment. 379 And the best part is that I don't 380 have to give this file to you. 381 Vnb, you can create a fresh virtual 382 environment, install the things 383 from the requirement and that's how 384 the softwares are being shipped. 385 We usually put it into git 386 ignore, but you can just go ahead 387 and simply delete it as well. 388 But first I'll actually go 389 ahead and say deactivate so 390 that it actually deactivates 391 this virtual environment. 392 And then we'll just go ahead and say 393 hey, I will just delete this. 394 This is how softwares 395 are being shipped. 396 You actually install a fresh 397 copy through the Python 398 requirement and we ship only 399 requirements as well as we 400 ship just the Python code. 401 So this is one way of having 402 the virtual environment. 403 This is a traditional way. 404 Yes, you need to know this is 405 traditional way. 406 Traditional. 407 This is a traditional way. 408 There is also a new way 409 of installing the Python. 410 So the traditional way says that 411 you always go ahead and use venv. 412 But there is a new way as well. 413 And new way actually uses more tool 414 of the Python which is uv. 415 This is actually much, much powerful. 416 And a lot of people are loving this. 417 This is too bright. 418 A lot of people are loving 419 the UV way, including me. 420 And in the next video I will walk you 421 through that how you can actually 422 have UV to work all of this. 423 You don't have to do all of this 424 installation, everything, it 425 works much smoother than this. 426 I would prefer to teach you the UV 427 way because hey, it's modern world. 428 This was used like 429 seven, eight years ago. 430 Still, it works fine, and you will 431 see a lot of source code with this, 432 but I want to walk you through 433 with a newer way as well. 434 So in the next video I will 435 walk you through with this. 436 Probably at the very 437 end of the section. 438 I still want to discuss a little 439 bit more on how to organize your 440 files and folders and structure 441 in the Python in a production way. 442 So let's talk about that first, 443 and then I will walk you through 444 with the UE as well. 445 Don't worry, I'll teach 446 you this part as well. 447 As a bonus, let's go ahead and catch 448 up in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "09 Get everything in virtual environment.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/09 Get everything in virtual environment.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0010284561,
      -0.0000804969,
      0.018192112,
      -0.049950853,
      0.019962884,
      -0.0013138467,
      0.0174278,
      0.009362849,
      0.02137327,
      -0.0068462044,
      -0.014488456,
      -0.012823829,
      0.0333169,
      0.04185653,
      0.122922316,
      0.023508111,
      -0.006558107,
      -0.009789424,
      0.00656227,
      -0.013795018,
      0.0049245316,
      0.0020318842,
      0.017519671,
      -0.010630036,
      0.02396609,
      -0.0044958754,
      0.0041604843,
      0.0054434347,
      0.011770232,
      -0.03103837,
      -0.024325361,
      0.00892523,
      -0.007300331,
      0.031179326,
      0.020387448,
      0.006101572,
      0.020406937,
      0.008489085,
      -0.009341366,
      -0.00237203,
      -0.023676747,
      0.01447101,
      -0.0060465857,
      -0.0109681925,
      0.018141167,
      -0.024738321,
      0.004543473,
      -0.031174634,
      0.020565327,
      0.015965175,
      -0.012060355,
      -0.005674569,
      -0.008252654,
      -0.18207316,
      0.010931454,
      -0.00643984,
      0.004338127,
      -0.0067026964,
      -0.009143511,
      0.019057926,
      -0.031923342,
      0.0205261,
      -0.04663929,
      -0.008167336,
      -0.008704163,
      -0.015703885,
      0.01626662,
      -0.0040470352,
      0.005241818,
      -0.014022436,
      0.009459194,
      0.0011662242,
      -0.015119548,
      -0.0031198857,
      -0.041779764,
      -0.013265545,
      0.013677816,
      -0.026451908,
      0.012680512,
      0.026302047,
      -0.012058552,
      -0.01142076,
      -0.00281826,
      -0.004233319,
      0.016782535,
      0.02128489,
      -0.036259256,
      -0.010126249,
      -0.0036779041,
      -0.013093943,
      -0.014747378,
      0.010887416,
      -0.020309856,
      0.007670028,
      -0.021939466,
      0.013941782,
      -0.034703348,
      0.011829399,
      -0.014398609,
      0.017105054,
      0.020326708,
      -0.007193932,
      -0.03617877,
      -0.008683332,
      0.0077760555,
      0.007492894,
      0.011457628,
      -0.016071578,
      0.0031885453,
      -0.023084763,
      0.0014595714,
      0.0056650555,
      -0.00013431463,
      0.032678854,
      0.0020763248,
      -0.17143822,
      0.019200705,
      -0.016621578,
      -0.010036867,
      -0.006018777,
      0.004277383,
      0.0025097784,
      0.0060765496,
      0.00002076774,
      -0.011542296,
      0.013523336,
      -0.0021641823,
      0.027239243,
      0.006835187,
      -0.018621312,
      -0.029092774,
      -0.026076734,
      0.0076584388,
      0.02293664,
      0.008505578,
      0.026746776,
      -0.021204105,
      -0.011830266,
      -0.028660458,
      -0.015046979,
      -0.011463554,
      0.034209073,
      0.019443339,
      0.036247186,
      0.0019027197,
      0.013667868,
      -0.014827043,
      0.00761537,
      -0.00012879795,
      -0.033110917,
      0.013186487,
      -0.016588503,
      0.011076152,
      -0.00481996,
      0.018142268,
      -0.000015280431,
      -0.010034098,
      0.0027060194,
      -0.016843481,
      -0.011353463,
      0.000010988098,
      -0.00058474916,
      0.012013444,
      0.014195625,
      0.0013559513,
      0.0020706735,
      -0.01498947,
      0.0022507298,
      0.030263409,
      0.008257854,
      -0.01019156,
      -0.019808557,
      -0.008128648,
      0.011330191,
      -0.00982605,
      0.004151554,
      -0.016910378,
      -0.008282991,
      0.008664094,
      -0.018993998,
      0.011612081,
      -0.00683768,
      0.016618643,
      0.00030360292,
      0.0061535374,
      -0.002770601,
      -0.010236057,
      0.014787829,
      0.007750955,
      -0.0051361728,
      -0.0021083967,
      0.01629324,
      0.008566382,
      0.009539956,
      0.007418692,
      -0.009688345,
      0.00905017,
      0.011773421,
      -0.011116245,
      0.028396746,
      0.016313244,
      -0.0056263567,
      -0.0032593599,
      -0.014454548,
      0.025552182,
      -0.0103699835,
      -0.021919994,
      -0.022460526,
      -0.004358038,
      -0.0032903757,
      0.0052161864,
      -0.03159566,
      0.020115161,
      -0.0046933484,
      0.0154805705,
      -0.0046485467,
      0.022404963,
      0.008001361,
      0.0003697292,
      -0.0032008744,
      0.01230884,
      0.00027146723,
      -0.004765126,
      0.030356081,
      0.0131524475,
      -0.025259897,
      -0.016426528,
      0.0034401251,
      0.0045714737,
      0.0053273765,
      0.019794676,
      0.0009979922,
      -0.011345455,
      0.018143034,
      0.0036785493,
      0.006787552,
      -0.010319759,
      0.017090064,
      0.0046664383,
      0.0054628127,
      0.0006528233,
      -0.022751095,
      -0.015000368,
      0.020788565,
      0.023768695,
      -0.006720877,
      -0.0027627756,
      0.0048837364,
      -0.0053237826,
      -0.025104567,
      -0.0127667505,
      -0.000733071,
      0.018810978,
      -0.01814171,
      0.0074846754,
      -0.014683688,
      -0.021845086,
      0.0025479884,
      -0.008703607,
      -0.007788301,
      0.0053108926,
      -0.012331224,
      -0.017436024,
      -0.010667088,
      0.016371347,
      -0.004248487,
      0.0038190642,
      0.019207004,
      -0.008159844,
      0.02385161,
      0.011435052,
      0.026772201,
      0.006127864,
      -0.005344422,
      -0.022710897,
      -0.004172772,
      -0.0910782,
      0.013915268,
      0.0029568113,
      -0.020152243,
      0.0017674434,
      0.006583751,
      -0.028503856,
      0.007907901,
      0.006766893,
      -0.005077716,
      -0.017224422,
      -0.0068094376,
      0.04031908,
      -0.010066809,
      -0.018184407,
      0.0055149673,
      -0.008976245,
      -0.0054632626,
      0.0113218315,
      -0.013111665,
      -0.010967652,
      0.0098670665,
      0.0046541984,
      0.00026539504,
      0.016270341,
      -0.022284469,
      -0.001223324,
      0.03494193,
      0.017604116,
      0.007578128,
      -0.030744221,
      0.037750777,
      -0.013502373,
      -0.00815328,
      -0.0043579484,
      -0.00530771,
      0.016549034,
      -0.039183937,
      0.0010445436,
      -0.01997455,
      0.020194538,
      -0.011483914,
      0.02401695,
      0.012270847,
      -0.0128299575,
      0.0016586436,
      -0.027330326,
      0.0046322104,
      -0.02849258,
      0.008043309,
      -0.01361898,
      -0.010040577,
      0.004184169,
      -0.016540827,
      -0.006235902,
      0.00029858606,
      -0.0013289482,
      -0.0072823954,
      0.02147934,
      0.02594446,
      0.0009962356,
      -0.011384383,
      0.00013567269,
      -0.00794765,
      0.016425395,
      0.0032861086,
      0.008945711,
      -0.019179031,
      0.011050082,
      0.027832616,
      0.02110886,
      -0.015104359,
      -0.003218082,
      -0.016733563,
      0.017691392,
      -0.014918485,
      -0.021268647,
      0.010811336,
      -0.009177319,
      0.0012114698,
      0.00521613,
      0.0039468156,
      0.009983131,
      0.005394881,
      0.007964253,
      0.009699471,
      -0.016198799,
      0.016025044,
      0.003402541,
      -0.020676563,
      0.0060320874,
      0.026321232,
      -0.007519541,
      0.0056680907,
      -0.015161808,
      0.008247211,
      0.0035852965,
      -0.015528374,
      -0.01805451,
      0.007889864,
      0.003393009,
      0.0091233095,
      -0.02244291,
      0.019210376,
      -0.010306752,
      0.00030672207,
      -0.01879487,
      -0.01663327,
      -0.028856553,
      0.0047922344,
      0.01786364,
      0.012206721,
      -0.015885534,
      -0.006420818,
      -0.0061022933,
      0.015220713,
      0.00059577,
      0.02061547,
      0.0068112765,
      0.0035833556,
      -0.0029611704,
      -0.005208673,
      -0.008442668,
      0.019366628,
      -0.015793322,
      -0.011494339,
      -0.019368555,
      -0.0095328195,
      -0.0057800845,
      -0.036093548,
      -0.034662887,
      0.018684939,
      -0.020344097,
      -0.025151964,
      -0.014560034,
      -0.007709237,
      0.02776372,
      0.009145981,
      0.006210365,
      0.026619812,
      0.0062475344,
      0.004806132,
      0.009182832,
      -0.012861627,
      -0.017038716,
      0.028224034,
      -0.022576677,
      -0.021281086,
      0.009813231,
      -0.010967454,
      -0.0051612817,
      0.006036931,
      -0.0051968014,
      -0.0012532225,
      -0.009840207,
      0.025092224,
      0.018708484,
      -0.011997006,
      -0.022516485,
      -0.019363295,
      0.0048863348,
      0.014856493,
      -0.011454281,
      0.008047388,
      0.0075575225,
      0.005245335,
      0.009204994,
      -0.003529835,
      -0.009770687,
      0.0029087453,
      -0.009929301,
      -0.02397934,
      -0.04226047,
      0.00016323756,
      0.009313498,
      -0.010315775,
      0.03295783,
      0.0075326604,
      0.022235347,
      0.011525308,
      0.0034191683,
      0.00080571556,
      -0.014849316,
      0.007546831,
      0.0066261506,
      0.026226664,
      -0.006506456,
      -0.010834894,
      -0.01498316,
      0.01976338,
      -0.0021440324,
      -0.0023635041,
      -0.003687591,
      -0.0015605118,
      -0.0063978676,
      0.025905985,
      -0.020445328,
      -0.001888892,
      0.018587245,
      0.002490609,
      -0.005275288,
      -0.028005771,
      0.011388203,
      -0.0078113894,
      0.008488009,
      -0.015494801,
      -0.00301867,
      -0.0055578244,
      0.013647198,
      0.0302146,
      -0.007263322,
      -0.0017446016,
      0.0034637162,
      0.015519515,
      0.012912001,
      0.01870517,
      -0.01620668,
      -0.0044417526,
      -0.011209376,
      0.010309744,
      0.019488828,
      -0.0040530316,
      0.0022589285,
      -0.010682264,
      0.0018438542,
      0.0036373104,
      -0.0066902163,
      0.010561278,
      0.011077445,
      -0.0075443354,
      -0.0020683631,
      -0.0052832915,
      -0.00458774,
      0.009520557,
      -0.019411713,
      -0.007971914,
      0.009941029,
      0.010990754,
      0.0075024124,
      0.012190073,
      0.0032108144,
      -0.027191523,
      0.003296498,
      0.004209641,
      0.0015901609,
      -0.0038211697,
      0.014714717,
      -0.011662332,
      -0.005967949,
      -0.0017825874,
      0.0021866914,
      0.036848072,
      -0.00036412507,
      -0.030656194,
      -0.012033861,
      0.0234843,
      -0.005611754,
      0.016588733,
      -0.014068258,
      -0.026939083,
      0.018420452,
      0.008514624,
      -0.008148455,
      0.015387228,
      0.007695805,
      -0.021769108,
      -0.0062480043,
      -0.016702995,
      0.02223579,
      -0.124520466,
      -0.028922385,
      -0.019302363,
      0.03540561,
      -0.013699675,
      -0.026757117,
      0.00047621483,
      0.005274737,
      0.030049393,
      0.010172926,
      0.017469723,
      0.000087601984,
      -0.007668053,
      -0.003686574,
      -0.00063200877,
      -0.005729827,
      0.0048271026,
      0.0032568101,
      0.02884576,
      -0.00999377,
      -0.006041497,
      0.0012085391,
      0.0004744522,
      -0.0029371136,
      -0.006539769,
      -0.0037826463,
      0.004307251,
      0.0088521,
      0.0020934534,
      -0.01180634,
      -0.003334695,
      -0.00583834,
      0.017104814,
      -0.0050259163,
      0.013599987,
      -0.0012348972,
      -0.030965023,
      0.015402752,
      -0.0039683017,
      0.013777805,
      -0.022433758,
      0.0035490112,
      0.024302678,
      0.012636437,
      -0.0055619148,
      0.011683215,
      0.008458132,
      -0.0083610425,
      -0.00426797,
      0.036806952,
      -0.033161797,
      0.0055849026,
      -0.001868035,
      -0.030134246,
      -0.001524654,
      0.021795793,
      0.017088333,
      -0.0047637513,
      -0.018981073,
      -0.0125437705,
      0.004447793,
      0.0019443589,
      0.011387425,
      0.01726876,
      -0.010147319,
      -0.0065831654,
      0.009487511,
      0.018028481,
      0.0039146775,
      -0.017280724,
      -0.00017474632,
      -0.00009500636,
      -0.0141843,
      0.017520117,
      0.007658285,
      0.017151875,
      -0.011765176,
      0.002442799,
      -0.0039058065,
      0.014428588,
      -0.022205433,
      -0.014931553,
      -0.04486768,
      -0.02520275,
      -0.008128874,
      0.0038100125,
      0.0369152,
      0.023698037,
      -0.0085473,
      -0.0012713528,
      0.004305346,
      0.016110245,
      -0.011926964,
      -0.017561853,
      -0.0006556795,
      -0.013191192,
      -0.020920385,
      -0.005953152,
      0.00014365197,
      -0.0195504,
      -0.0048508737,
      -0.0010124015,
      0.002438217,
      -0.0012285392,
      0.02229641,
      -0.006464124,
      0.025286147,
      0.01719317,
      -0.00033900558,
      0.0005018617,
      -0.006886604,
      -0.009810291,
      0.003532622,
      -0.16762789,
      -0.0023205092,
      0.009310952,
      -0.007232252,
      0.004601752,
      -0.013821205,
      -0.045203663,
      -0.0095691485,
      -0.006004177,
      0.0050632954,
      0.010081116,
      -0.0097987745,
      -0.028245263,
      -0.012695791,
      0.002907001,
      0.1464582,
      0.0052852505,
      -0.0036092794,
      -0.0037651379,
      0.022224858,
      -0.024008334,
      -0.013305414,
      -0.009169075,
      0.029184943,
      -0.009577104,
      0.0031376036,
      0.00926724,
      -0.021167789,
      -0.0050515886,
      0.000019532547,
      0.007203922,
      -0.016965305,
      0.009965131,
      0.01081471,
      -0.0013335608,
      -0.026642967,
      0.006120124,
      -0.0017173624,
      -0.0025150715,
      0.010361116,
      0.01864252,
      -0.005706956,
      0.0077184127,
      0.01171887,
      0.0046973806,
      0.0019171598,
      -0.0026496302,
      -0.0144625865,
      -0.017220166,
      -0.0048744166,
      0.008835692,
      -0.06816946,
      0.0024200284,
      -0.024343282,
      -0.026177496,
      0.02683729,
      -0.009503786,
      0.01998819,
      0.008051792,
      0.03583364,
      -0.01926985,
      -0.0057051983,
      0.0039029892,
      0.01041186,
      0.004981332,
      0.0033824379,
      0.042311896,
      0.012254639,
      0.023445984,
      -0.008676721,
      0.029368902,
      0.022225304,
      -0.002468521,
      0.009136605,
      -0.027025513,
      -0.014560703,
      -0.019773608,
      0.023781149,
      0.023530468,
      -0.0007598052,
      0.0021911217,
      -0.0034574359,
      -0.011635507,
      -0.0024520871,
      0.027519202,
      -0.009857621,
      -0.021476956,
      0.0016683402,
      -0.022444023,
      -0.0071678334,
      -0.009919284,
      0.0008143812,
      -0.001915988,
      0.0060915146,
      -0.0018565109,
      0.0042741615,
      0.0062779966,
      -0.00900128,
      0.03418227,
      -0.009023531,
      0.0118282875,
      -0.0052739307,
      0.0029066086,
      -0.028597394,
      0.015228507,
      0.032062262,
      0.006087538,
      0.02840055,
      -0.021354562,
      -0.01854415
    ]
  },
  {
    "id": "genai_cohort_python_10_Organize_python_code_like_a_pro_vtt",
    "content": "All right, so before we move any 2 further, I would like to discuss 3 very briefly about how do we 4 actually structure Python code. 5 Or probably more better word would be 6 organize, your Python code. 7 Organize your. 8 I can write that. 9 Organize your Python code. 10 So there are a lot of debates about 11 how do we organize Python, code. 12 And again, there are a lot of right 13 and wrong and a lot of very 14 opinionated people working on it. 15 I'll show you my way 16 of doing it and then you can just 17 go ahead and follow along 18 most of the part of it. 19 But again, feel free 20 to experiment with this. 21 There is no such thing. 22 Let's just say we want to have 23 a code for running a chai shop. 24 There are a lot of things 25 that happens with it. 26 So I call this my as first 27 or the top level folder, just like 28 we are creating here, things like 29 01, virtual or all of this. 30 So this is my first 31 folder level structure. 32 Now once I have this folder level 33 structure inside this, I simply 34 go ahead and say inside this I will 35 always have a run script 36 which runs my whole program. 37 It could be run py, it could be 38 main py, it could be index py. 39 A lot of people have opinions, 40 but this is majorly used 41 to start my application. 42 So I call this one as 43 starter or starts the app. 44 This is my first folder 45 or the file that I have after this, 46 what do I have is all the helpful 47 files, whatever is required 48 for the code part of it. 49 So let's just say there's a chai py 50 all the functional part of the code. 51 Now not all the part can actually 52 lie is just in this folder. 53 We need some more organization 54 like some of the part, maybe web 55 servers, maybe some code for 56 the client, maybe some process for 57 processing machine learning. 58 So again, lot of folders 59 can actually be there. 60 So for example, there is 61 a folder of processing. 62 Yeah, go ahead and have that inside 63 this, have more files onto it. 64 That's okay. 65 Another thing which I usually 66 recommend people that sometimes you 67 want to have, naming vocabularies 68 in the Python as well. 69 So let's just call this one as utils. 70 And you will find some folders 71 like processing. 72 This is also utils 73 known as utilities. 74 But in some of these folders like 75 utils, what do we have is 76 an underscore, underscore init py. 77 What do we write inside this files? 78 Actually nothing. 79 This file is empty. 80 It's just the name of the file 81 which matters and which 82 actually differentiates 83 this processing with the utils. 84 And I'll tell you what's 85 the reason and what's the name 86 of each one of them? 87 So we do have first name known as 88 module or modules. 89 So I'll just call this one. 90 So this modules every single 91 file that you have, like this run 92 py and this chai py 93 all these files are known as modules 94 and you will see them a lot. 95 Another word that you're going to 96 see a lot in the world of Python is 97 known as package or packages, 98 whatever you want to call them. 99 Any folder which has this initial 100 this is known as package. 101 And yes, that's the difference. 102 Any folder which has underscore 103 underscore in it py 104 empty file is called as package. 105 But this processing since it doesn't 106 have this file is not going to be 107 called as packages and that's it. 108 Now inside these files like chai py 109 we have the classes, just like we 110 saw at the very top of it here. 111 Like we call this class, then we 112 have some functions inside it, or 113 maybe file just have the function, 114 don't even have the class. 115 These are the files and we call them 116 just as classes or functions. 117 So just always keep in mind this 118 is organization, structure. 119 Again it could have been 120 different name like source 121 controllers, whatnot, whatever 122 you want to call them. 123 That's not the problem. 124 Just remember few things that 125 hey, these are my modules. 126 Like normal Python files. 127 If a folder has initinit underscore 128 that means it's a package, it's 129 a Python vocabulary and then rest 130 of the folders are just programs or 131 files and folders just like that. 132 We don't have a specific 133 name for them. 134 All right, apart from this, one 135 more thing I would like to mention 136 here is just keep this in mind 137 that we will have a lot 138 of folder based structure or files. 139 These are things. 140 Just remember one thing that 141 anything that goes, let's just 142 say diagrams will surely have. 143 Let's just say this is again a class 144 and inside this you 145 have created this folder and you 146 have created this folder. 147 Whatever you create. 148 For example, let's just say you 149 create a smaller thing, outside 150 in this class and you also 151 create some things inside this. 152 And you also create some 153 things inside this. 154 So whole other thing that I want 155 to say in this is if this program 156 wants to access this, it is 157 perfectly okay because it's outside. 158 And if this program wants to access 159 this thing which is 160 inside here, that is not okay. 161 Yeah, this part is not okay. 162 So treat each of the function 163 as an individual house 164 and anything inside this house is 165 accessible only by these people. 166 So they can access anything 167 outside the house, which is 168 here in public, in open. 169 But if you want to go anybody's 170 house and want to use 171 anything, that's not possible. 172 Now again, I just want you 173 to keep this in mind. 174 As of now it, will get much more 175 clear as we write the code. 176 But I just want you to keep this 177 in mind as this is whole of your 178 city and this is your house. 179 Anything that you bring inside the 180 house or you make inside the house, 181 maybe you're just a carpenter, you 182 like to make stuff, you can 183 actually, your family members can 184 access all of these things, no 185 problem at all. 186 This guy can access this, this 187 guy can access this, no problem. 188 But when you try to access somebody 189 else's house, he has to 190 explicitly give you the permission 191 that, hey, you can use this. 192 But if anything, this is here like 193 it's a public park or public 194 road, hey, anybody can access this. 195 If this guy wants to access 196 it, that's okay, totally 197 okay, no problem there. 198 But if something is inside 199 the house, that creates a problem. 200 So this is something known 201 as namespace and scope. 202 And yes, it will get much more 203 clear as we write the code. 204 But just remember this concept that, 205 hey, this is my house, this is whole 206 of my city, this is public park, 207 and this is again, somebody 208 else's property in their house. 209 So I cannot access that. 210 And yeah, this is all that 211 I wanted to have you about. 212 The basics of how can I actually 213 organize my Python code. 214 And this is it again. 215 I know this is a lot 216 of theory, but this is all 217 required, this is important. 218 I don't want to skip even 219 a tiny bit detail to make you 220 a Python programmer, even 221 a good Python programmer. 222 That is it for this video. 223 Let's catch up in the next one.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "10 Organize python code like a pro.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/10 Organize python code like a pro.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.009935302,
      0.0063763815,
      0.035278406,
      -0.050406825,
      -0.007074517,
      -0.0044179433,
      0.005987693,
      0.019532857,
      0.0055928165,
      -0.013830262,
      -0.022099542,
      -0.009617048,
      0.024605848,
      0.038357202,
      0.12249061,
      0.002596902,
      0.006944131,
      -0.016837772,
      0.0041895323,
      -0.03503629,
      0.0016473308,
      0.016149936,
      0.0012549752,
      -0.004862408,
      0.0017571875,
      -0.006416113,
      0.00397198,
      0.018969394,
      0.025442066,
      -0.023290202,
      -0.024014158,
      0.004560516,
      0.008441968,
      0.010549202,
      0.036580045,
      0.01780851,
      -0.004765976,
      -0.0066504185,
      -0.018421562,
      -0.004788174,
      -0.023228107,
      0.0016349499,
      0.004247053,
      -0.010218532,
      0.010923655,
      -0.016969152,
      -0.0023289386,
      -0.02357632,
      0.01932092,
      0.014887512,
      -0.0011684241,
      -0.013731394,
      -0.020953221,
      -0.1825735,
      0.012830718,
      0.008251527,
      -0.0006430207,
      -0.0061280276,
      0.002552863,
      0.015247632,
      -0.042040974,
      0.027691133,
      -0.035971824,
      0.003533176,
      -0.005867239,
      -0.026710343,
      0.025129791,
      -0.014230962,
      0.020454245,
      -0.007859544,
      0.0057851085,
      0.009742613,
      -0.019445317,
      -0.009086778,
      -0.026550088,
      -0.012980044,
      0.015543892,
      -0.010648928,
      0.008059807,
      0.043790825,
      -0.011225624,
      -0.008012996,
      -0.008071571,
      0.0021923028,
      0.027995303,
      -0.0012955155,
      -0.01993301,
      -0.008857774,
      -0.012096611,
      -0.010744681,
      -0.01706634,
      0.03578491,
      0.011655673,
      0.023495013,
      -0.0098237,
      0.0014057021,
      -0.009084494,
      -0.010042517,
      0.006304388,
      -0.010447342,
      0.014288361,
      -0.020197567,
      -0.033329688,
      -0.022035621,
      -0.0012225752,
      0.016790943,
      0.010883788,
      -0.001328074,
      -0.0151912635,
      -0.025306562,
      -0.00566755,
      -0.012907792,
      -0.0030591807,
      0.019154089,
      0.011959543,
      -0.1764303,
      0.009742101,
      -0.033053435,
      -0.021527074,
      -0.00014156918,
      -0.0057987706,
      0.0058475626,
      0.007854626,
      0.0010883559,
      -0.0016858848,
      0.012619463,
      0.0011817986,
      0.031086745,
      0.013067847,
      -0.0056729037,
      -0.019618187,
      -0.010467923,
      0.0064953906,
      0.022828981,
      0.017426794,
      0.016233483,
      -0.010953781,
      -0.0077458727,
      -0.014139669,
      -0.009511684,
      -0.003927136,
      0.02373536,
      -0.0036419616,
      0.03457296,
      0.0036811698,
      0.0067744623,
      -0.012346725,
      0.002875038,
      -0.03178714,
      -0.036600724,
      0.006667886,
      -0.02012123,
      0.010487965,
      -0.010979251,
      0.024743037,
      -0.0106704915,
      0.016351381,
      -0.0073609888,
      -0.0060436074,
      0.0081567,
      0.00526098,
      -0.0035887796,
      -0.01585711,
      0.013575877,
      0.008593029,
      0.018990895,
      -0.0020613659,
      0.012923839,
      0.037525117,
      0.007102506,
      0.004221578,
      -0.012148819,
      0.00043807822,
      0.014732709,
      -0.010977468,
      -0.02679571,
      0.0041080457,
      -0.009552427,
      0.02127477,
      -0.023054447,
      0.0037945986,
      -0.01814304,
      0.020542828,
      -0.0051897955,
      0.016602142,
      -0.0035906269,
      -0.021532318,
      0.023160143,
      0.032169126,
      -0.00041271007,
      0.0101085305,
      0.0025971567,
      0.01499361,
      -0.0032135774,
      0.015419122,
      -0.036204133,
      0.016120706,
      0.01601062,
      -0.0060228463,
      0.026424319,
      0.024422701,
      -0.011449961,
      -0.010088701,
      -0.046483397,
      0.032094803,
      -0.0054301233,
      -0.0049249073,
      -0.034357555,
      -0.012825294,
      0.011900908,
      -0.0122383,
      -0.016702756,
      0.01914549,
      0.007191322,
      0.0131854825,
      -0.009294701,
      0.01618258,
      -0.001722996,
      -0.014108266,
      -0.008226154,
      0.030743236,
      0.006131166,
      0.0038923894,
      0.039452754,
      0.0006870439,
      -0.010049515,
      0.00032857643,
      -0.008581257,
      0.0023221623,
      0.007213408,
      0.025316622,
      -0.001154987,
      -0.012467105,
      0.0020805537,
      -0.0069976244,
      0.012516036,
      -0.017952925,
      0.011722727,
      0.00030453585,
      0.0075769117,
      -0.0054445416,
      -0.012652825,
      -0.007860046,
      0.0026061258,
      0.019108716,
      0.008216684,
      -0.012312301,
      0.0017218225,
      0.008327732,
      -0.0108439345,
      -0.022614323,
      0.0015819673,
      0.007791122,
      -0.021456007,
      0.007749639,
      -0.020652983,
      -0.01939959,
      0.006757781,
      -0.01987931,
      -0.007517434,
      -0.001629598,
      0.005817843,
      -0.015708625,
      -0.004664942,
      0.009624284,
      0.012990513,
      0.012277494,
      0.02356711,
      -0.016685411,
      0.024888143,
      0.0033812975,
      0.00932101,
      0.0038170686,
      -0.006911115,
      -0.0036954156,
      0.014168994,
      -0.091241084,
      0.028916432,
      0.0035261677,
      -0.0034898713,
      0.008040464,
      0.0055119824,
      -0.038906604,
      -0.00065966346,
      0.008504971,
      0.010388376,
      -0.00852757,
      -0.0049864124,
      0.04092632,
      0.00024805174,
      0.0028074246,
      0.0007243197,
      -0.0034479068,
      -0.02119694,
      0.024751795,
      -0.019135041,
      0.004310925,
      -0.00093146163,
      -0.0016435666,
      -0.009951938,
      0.013903052,
      -0.021605011,
      0.0010614397,
      0.029918665,
      0.02662284,
      0.0062086377,
      -0.01171112,
      0.019620635,
      -0.0017199814,
      -0.0021918565,
      -0.008987861,
      0.01194661,
      0.01183327,
      -0.021881323,
      0.003779833,
      0.00084546907,
      -0.010211884,
      -0.01857088,
      0.01637452,
      0.0114735775,
      -0.012921344,
      0.00591424,
      -0.007993385,
      -0.011354562,
      -0.014967261,
      0.008120204,
      -0.020569602,
      0.007850177,
      0.0030331004,
      -0.007822409,
      0.002187286,
      0.018455196,
      0.00070719054,
      -0.013617725,
      0.029786054,
      0.030089995,
      0.0028292544,
      -0.007445833,
      0.010117672,
      -0.009881788,
      -0.0027342201,
      -0.0114026675,
      0.0016036353,
      -0.009499943,
      -0.0019721165,
      -0.010029908,
      0.024841826,
      -0.022992337,
      -0.00059026625,
      -0.006464404,
      0.031903327,
      -0.0045212507,
      -0.00067977,
      -0.014252093,
      -0.01717265,
      0.005967543,
      0.015128182,
      -0.015335282,
      0.011557196,
      0.0051112645,
      0.017622301,
      -0.0038535115,
      -0.025383592,
      -0.006144776,
      0.017507667,
      -0.035557844,
      0.00698113,
      0.01150695,
      -0.0179944,
      0.011630096,
      -0.016494377,
      -0.010190084,
      -0.010571797,
      -0.006818486,
      -0.016340414,
      0.017951954,
      -0.010456688,
      -0.0007272403,
      -0.03156433,
      0.010379992,
      -0.011499321,
      -0.0017986471,
      -0.013221937,
      -0.007285923,
      0.0058129244,
      -0.005108918,
      0.006805715,
      0.0026262598,
      -0.016468795,
      -0.0121435365,
      -0.005889504,
      0.025259191,
      0.00040747938,
      0.002290801,
      0.020263985,
      -0.027845846,
      -0.016663928,
      -0.004730263,
      -0.016331408,
      0.013435004,
      -0.005362611,
      0.008203425,
      -0.0047404785,
      -0.0044438513,
      -0.0049300864,
      -0.019420741,
      -0.017009491,
      0.0056282193,
      -0.0399182,
      -0.011778555,
      -0.001648393,
      -0.00616992,
      0.024909081,
      0.033095863,
      0.0051272884,
      0.010871836,
      -0.0017855727,
      0.011684196,
      0.027237115,
      -0.009794402,
      -0.012621051,
      0.03968703,
      -0.01816248,
      -0.030084353,
      0.0024670702,
      -0.014911465,
      -0.02678502,
      -0.0017807059,
      0.0036596104,
      0.0017247896,
      -0.00510655,
      -0.0021985201,
      0.022934165,
      -0.0010748474,
      -0.034768265,
      -0.029813288,
      0.0042346604,
      0.0043025147,
      -0.011163882,
      0.008896239,
      0.021005474,
      0.032747373,
      0.01163498,
      -0.00032991735,
      -0.0024493267,
      0.005890692,
      0.0038932527,
      -0.025976919,
      -0.0393365,
      -0.019730717,
      0.015333366,
      -0.008616971,
      0.009193955,
      -0.0038624203,
      0.011898692,
      0.0033242484,
      -0.0015538695,
      -0.027302383,
      -0.019756163,
      0.011115316,
      0.0008466111,
      0.02685764,
      0.011239923,
      -0.0050255605,
      -0.02336421,
      -0.0016285729,
      0.009978645,
      -0.026180819,
      -0.0024163066,
      -0.004833423,
      -0.002446822,
      0.017311687,
      -0.0068554115,
      -0.0010125098,
      0.015056703,
      0.026120666,
      -0.0012358553,
      -0.029978303,
      -0.003352544,
      -0.016938632,
      0.0030943863,
      -0.02750928,
      0.015722658,
      -0.007912576,
      0.020942066,
      0.02647662,
      0.0038570645,
      0.0029822532,
      -0.0072768317,
      0.004518513,
      0.01229464,
      0.020755807,
      -0.0013125476,
      -0.022324763,
      -0.024936056,
      -0.017131997,
      0.018588435,
      -0.0072676246,
      0.007078227,
      -0.0056660967,
      0.0044533326,
      -0.0041635,
      -0.013927187,
      0.0022683395,
      -0.02018209,
      -0.009524707,
      -0.0064415117,
      0.012652201,
      -0.010576034,
      0.007291696,
      -0.0154559985,
      -0.0075579523,
      0.017556371,
      0.01602307,
      0.00022533996,
      0.013570579,
      0.00028778907,
      -0.0048757545,
      -0.013442491,
      0.0078096227,
      0.0029264493,
      -0.0007585012,
      0.037604924,
      0.0029524015,
      -0.00841593,
      0.0023887968,
      0.00465006,
      0.038514283,
      0.0054351483,
      -0.0049588652,
      -0.009807153,
      0.032061264,
      -0.000043732678,
      0.012180035,
      -0.003930557,
      -0.012907373,
      0.0013767352,
      0.0059938743,
      -0.012830691,
      -0.00036595637,
      -0.009253758,
      -0.023729201,
      -0.0045610745,
      0.012535595,
      0.013076277,
      -0.12628524,
      -0.001561837,
      -0.012914653,
      0.016525073,
      -0.008235784,
      -0.008862849,
      -0.013036853,
      0.0005693318,
      0.0075466144,
      0.0006441863,
      0.027283333,
      0.0006880276,
      -0.0040975655,
      -0.0022596284,
      0.0025180345,
      -0.00065175386,
      -0.0059811333,
      0.005979798,
      0.045252223,
      -0.008713572,
      -0.014030507,
      0.008055708,
      -0.008956329,
      -0.017253451,
      -0.008980501,
      -0.002884166,
      0.0062174653,
      -0.008468407,
      0.0053765127,
      -0.020501807,
      -0.016896145,
      -0.009332986,
      0.00093409524,
      0.009496706,
      0.015185959,
      -0.0052978615,
      -0.018143643,
      0.005771878,
      0.0017656477,
      0.001494751,
      -0.0179469,
      -0.0025445737,
      0.0055809864,
      0.017841162,
      -0.004112124,
      0.022249112,
      0.017634781,
      -0.004199219,
      -0.00003871502,
      0.04353555,
      -0.035503034,
      -0.01662918,
      -0.0012718485,
      -0.022375943,
      -0.0027883034,
      0.0067613535,
      0.008902502,
      -0.0145620685,
      -0.0033067674,
      -0.0021702377,
      0.013251332,
      0.013334598,
      0.0065055257,
      0.020698925,
      -0.0075907866,
      0.016588883,
      0.02588437,
      0.016271468,
      0.0020051491,
      -0.00823483,
      0.0069937464,
      -0.004045336,
      0.0058899093,
      0.017359413,
      0.000647944,
      0.0027508659,
      -0.018257242,
      0.0077505987,
      -0.009667881,
      -0.0016501211,
      -0.019017637,
      0.01632471,
      -0.059250508,
      -0.01769342,
      0.019172356,
      0.009831668,
      0.010972062,
      0.023791825,
      -0.028657654,
      -0.009347341,
      0.003055159,
      0.0049228724,
      -0.015193974,
      -0.017058903,
      -0.00383718,
      0.007109939,
      -0.019608459,
      0.005159454,
      0.00006877147,
      -0.029615343,
      -0.015426348,
      0.00789563,
      -0.00054847175,
      0.0034083235,
      0.014935602,
      -0.023117205,
      0.027002027,
      0.019148242,
      -0.009897947,
      0.013470696,
      0.009842628,
      -0.005459328,
      0.008485961,
      -0.15342078,
      -0.02791893,
      0.013201173,
      0.0035528475,
      0.028578183,
      0.0022714946,
      -0.0040555364,
      -0.010298642,
      -0.014821462,
      -0.009294688,
      0.012842783,
      -0.0119368825,
      -0.01579266,
      -0.0054081315,
      0.011718423,
      0.14082567,
      -0.0125497645,
      -0.0011147402,
      0.0033464334,
      0.0096199345,
      -0.021802707,
      -0.00570029,
      -0.008788792,
      0.0072466675,
      -0.019247714,
      -0.019013744,
      0.0125345765,
      -0.0098706,
      0.0042577498,
      -0.0028033375,
      0.008696298,
      -0.019597463,
      -0.005327688,
      0.026420616,
      -0.0071653323,
      -0.009662564,
      -0.002967957,
      -0.008108194,
      -0.006066636,
      0.007532079,
      0.020319464,
      0.007152445,
      0.0038621463,
      0.015367561,
      0.025147535,
      0.004161378,
      0.0013268335,
      -0.013317649,
      -0.005286158,
      0.00090450473,
      -0.013882005,
      -0.059451126,
      0.008680186,
      -0.0000021449055,
      -0.00042051214,
      0.02604513,
      -0.0097346315,
      0.008844353,
      0.010624532,
      0.029927911,
      -0.003666454,
      0.008802569,
      0.0052616107,
      0.020741573,
      0.00006839826,
      0.014797002,
      0.036488105,
      0.018957317,
      0.022395682,
      -0.012806191,
      0.021053767,
      0.02352889,
      -0.006197973,
      0.009796276,
      -0.029785844,
      -0.004825992,
      -0.015735816,
      0.027413584,
      0.00078986405,
      0.0041861553,
      -0.005081925,
      0.011787516,
      -0.006830114,
      -0.017089257,
      0.016234044,
      0.015699225,
      -0.018382844,
      0.023774747,
      -0.0125923995,
      0.006102244,
      0.0031632518,
      0.020460116,
      0.009164736,
      0.025704365,
      0.00417804,
      0.017017027,
      -0.01058076,
      -0.01732373,
      0.03609233,
      -0.0058838488,
      0.010342689,
      -0.0032663671,
      0.006646492,
      -0.028849557,
      0.027441332,
      0.020089619,
      -0.0012418831,
      0.015258008,
      0.0074373237,
      -0.009288413
    ]
  },
  {
    "id": "genai_cohort_python_11_PEP8_and_Zen_of_python_vtt",
    "content": "All right. 2 I have already introduced a lot of 3 concepts in this very first section. 4 Usually people just give a brief 5 lightweight intro, but I wanted 6 to have you the taste of the Python. 7 That's why we are organizing things 8 in the professional way. 9 I don't want to get overwhelmed with 10 it, but I still want to show you one 11 of the another document that you 12 study once you learn the Python. 13 This is something that you 14 learn after learning Python. 15 It's the style of writing code. 16 And yes, there is a proper way 17 of how you write the Python code. 18 And everybody goes through this 19 documentation or this template 20 that what are do's and don'ts 21 while writing the Python code. 22 Again, reminding you this is not 23 something that should be learned 24 or gone through by a beginner or 25 especially somebody who's just 26 probably one year or one and a 27 half year in writing the Python 28 code. 29 This is for usually people 30 that eventually are comfortable 31 with Python and want 32 to improve their code. 33 But still, I don't want to miss 34 any bit of the Python part of it. 35 So, so let me walk you 36 through with this again. 37 This is super nice, 38 but just want to have it. 39 There is something known as, 40 in the Python world known as PEP8. 41 This PEP8 is the style 42 guideline for Python code. 43 We don't know right now how to write 44 the Python code that is okay, 45 but there is a guideline by the man 46 himself who created the Python 47 and it's a very simple guideline. 48 There is not too much included in it. 49 I'll just walk you through 50 with the things. 51 Like one of the point that they 52 always say in this, so let's just 53 go ahead and say that the name of 54 this is PEP 8, call it as 55 preparation talk or something 56 like that. 57 So in the whole PEP 8 they 58 mention a lot of points and don't 59 worry, as we write the code 60 I will automatically incorporate 61 these habits into you. 62 But some of the things like always 63 use four spaces, your editor 64 does it for you automatically. 65 But this says always use 66 four space, never tabs. 67 So although tab also does four 68 space, but they actually avoids it 69 because sometimes the tabs 70 are configured for two tabs or 71 two spaces, but again they say 72 explicitly use four spaces. 73 Another things, it's just a way 74 of writing the code, use 75 better meaningful names 76 for your methods and functions 77 and classes, all of that. 78 So call it as something like chai 79 and not C1 or C2. 80 Although in the tutorial you'll see 81 me using these names like F and G. 82 They're easier to explain. 83 That's why I do it, but their 84 whole goal is use better names. 85 That is always a good idea. 86 And then they also mentioned 87 that use formatters. 88 We are not going to talk about 89 them as of now, but formatters 90 like Black, rough, flakate, 91 whatever you want to use, what 92 formatter does, it automatically 93 makes your code more beautiful, 94 more pepe way. 95 It does it automatically. 96 We don't want to go into that. 97 But this is just few of them. 98 They have a whole lot 99 of guidelines, as you can see. 100 They have a whole examples 101 what to do, what not 102 to do, how to write this. 103 Definitely not this. 104 Rather not. 105 They have a lot of things when 106 to use trailing commas. 107 They have a lot of ways of defining 108 how to write better, readable, 109 maintainable Python code. 110 We will not go into that much of it. 111 One last thing I would like 112 to show you is a Zen of Python. 113 This is known as Pythonic 114 way of writing the code. 115 So what's the Pepit? 116 Pepit is also the same, but they 117 have this nice interesting thing. 118 So I'll just walk you 119 through with that. 120 So we can actually go ahead and see 121 this in the terminal itself. 122 Open up your terminal doesn't need 123 to be virtual environment. 124 Anything is fine. 125 Just go ahead and open your Python 126 in the terminal or in the shell. 127 We'll just do it here. 128 If you're on the Mac, do Python 3. 129 If you're on the Windows, 130 just do Python. 131 So I'll just go ahead 132 and do Python 3. 133 Three arrows means I 134 am into Python way. 135 Then just go ahead 136 and say import this. 137 Yeah, that's it. 138 One line, import this. 139 As soon as you do this, this actually 140 gives you the Zen of Python. 141 It's like a poem, 142 but again it is just basics. 143 So beautiful is better than ugly. 144 Explicit list is 145 better than implicit. 146 Simple is better than complex. 147 Complex is better than complicated. 148 Flat is better than nested. 149 The whole point is write your 150 code as simple as possible. 151 That is the whole this 152 poem is saying about it. 153 Again, I don't want you to get 154 too much into depth of it. 155 This is something once you 156 are comfortable in writing 157 the Python code, that is it. 158 But still I didn't want it to 159 actually not have in this course. 160 Rather to have this in early. 161 This is the point when you 162 tell it because there is no 163 other point When I actually 164 come back and hey, use this. 165 This should be introduced as 166 early as possible so that 167 you know, okay, there's a good way 168 of writing the code 169 and there's a documentation. 170 Once I'm comfortable with the Python 171 I can go ahead and read that. 172 So keep that in note, big and bold. 173 That. 174 Yes. 175 Always write simple code. 176 The most beautiful code 177 is the simplest code. 178 It should be readable. 179 It should be like, Anybody 180 can read it, understand what's 181 going on in this code. 182 That's the best code, actually. 183 So that is it for this video. 184 And let's catch up 185 in another such video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "python",
      "filename": "11 PEP8 and Zen of python.vtt",
      "originalPath": "genai-cohort/python/01 Chapter Subtitles/11 PEP8 and Zen of python.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.010416624,
      -0.0052705477,
      0.017767023,
      -0.053160228,
      -0.0009767023,
      -0.0088947285,
      -0.015699213,
      0.01697005,
      0.01155971,
      -0.00009896261,
      -0.0070141056,
      -0.020182844,
      0.022209225,
      0.039599568,
      0.13266194,
      0.021230124,
      -0.006900763,
      -0.016527012,
      -0.0015244322,
      -0.011303404,
      -0.0044096005,
      0.0071092253,
      -0.009294188,
      -0.015280191,
      0.019453214,
      -0.0071613435,
      0.012441521,
      0.008129044,
      0.0069375336,
      -0.013584821,
      -0.0314989,
      0.022471115,
      0.0079806205,
      0.021947365,
      -0.0028620984,
      0.021947738,
      0.010227178,
      -0.0030482276,
      -0.01623057,
      0.009444691,
      -0.030990625,
      0.011952649,
      0.0094175,
      -0.017546112,
      0.021223323,
      -0.014339725,
      -0.005810271,
      -0.02274531,
      -0.002920709,
      0.032281835,
      0.008538109,
      -0.020228185,
      -0.025239944,
      -0.18385316,
      0.019874323,
      0.009086721,
      -0.009745698,
      0.015487887,
      0.0030402788,
      -0.0024539516,
      -0.03939573,
      0.02346456,
      -0.024467096,
      0.002367878,
      -0.0040259636,
      -0.020173537,
      0.008654402,
      -0.020988233,
      -0.0014969953,
      -0.010628067,
      0.01060921,
      0.0011191367,
      -0.029101063,
      -0.002252054,
      -0.024997398,
      -0.029338418,
      0.0108090555,
      -0.0133392755,
      0.00021300772,
      0.023159394,
      -0.003105447,
      -0.013711209,
      -0.01423255,
      -0.0077674696,
      0.015604135,
      0.014044411,
      -0.015865097,
      0.005952801,
      -0.004781752,
      -0.010223489,
      -0.005560006,
      0.008934225,
      -0.005356796,
      0.022203716,
      -0.02039314,
      -0.0013483977,
      -0.021502443,
      -0.0023811674,
      -0.018117102,
      -0.015733069,
      0.004858452,
      -0.020004904,
      -0.02032832,
      -0.02456063,
      -0.00019532861,
      0.01853553,
      0.012108859,
      -0.0012286959,
      -0.00012809547,
      -0.005608209,
      -0.0065921,
      -0.010296672,
      -0.02256486,
      0.028353449,
      0.0077313553,
      -0.17650959,
      -0.00035660403,
      0.0027070977,
      0.009265323,
      -0.0020183492,
      -0.0037888756,
      0.008624082,
      0.00019044553,
      -0.0004990407,
      -0.017123427,
      0.0078157885,
      0.007072509,
      0.032472085,
      -0.006127444,
      0.013094695,
      -0.028725741,
      -0.011072196,
      -0.0015172993,
      0.0053961556,
      -0.0022206546,
      0.012442531,
      -0.025637267,
      -0.021832831,
      -0.026668757,
      -0.0054430943,
      -0.004845555,
      0.019820277,
      -0.009832688,
      0.041971657,
      0.01693787,
      -0.0126954615,
      -0.019720495,
      -0.0002686564,
      -0.03296308,
      -0.037702788,
      -0.0055463226,
      -0.034312762,
      0.017567158,
      -0.0038528906,
      0.019042837,
      -0.025754923,
      0.008076928,
      -0.0015936212,
      -0.004781275,
      -0.00982132,
      -0.006214434,
      0.012899234,
      -0.006535248,
      0.0186792,
      -0.0039145085,
      0.0025760846,
      0.010724104,
      -0.0019371399,
      0.0069381865,
      0.015859235,
      -0.01187315,
      -0.007883245,
      0.013641596,
      0.0056788386,
      -0.022628563,
      -0.022996046,
      0.013114062,
      -0.004181707,
      0.016698906,
      -0.010602136,
      -0.0051872027,
      -0.00689592,
      0.019932022,
      -0.012431993,
      0.013668767,
      -0.003114639,
      -0.012311833,
      0.029996317,
      0.03038653,
      0.012195985,
      -0.0049984045,
      0.017237974,
      0.029227445,
      0.0003141478,
      0.030488139,
      -0.012939755,
      0.0048453426,
      0.005285351,
      0.0048707747,
      0.020056061,
      0.028061118,
      -0.0070915376,
      0.0035565097,
      -0.043024227,
      0.017658046,
      -0.018632572,
      0.0012271845,
      -0.04297849,
      0.012148351,
      0.0015040296,
      -0.015575972,
      -0.00026817582,
      -0.0022662175,
      -0.015860483,
      0.01589974,
      -0.005703687,
      0.025703477,
      0.003410604,
      -0.0063283057,
      -0.0053575817,
      0.005323017,
      0.0025889128,
      0.021917438,
      0.018943137,
      -0.009044517,
      -0.01447988,
      0.01328143,
      -0.010492057,
      -0.020179551,
      0.015987614,
      0.014958748,
      0.008067342,
      -0.015826184,
      0.012518652,
      -0.017585453,
      0.012874312,
      0.009178716,
      0.009949587,
      0.00126607,
      0.023864087,
      -0.012074043,
      -0.010861252,
      -0.009355211,
      0.017897287,
      0.005618672,
      0.007820658,
      0.013862541,
      0.0034937835,
      0.011165447,
      -0.02559228,
      0.0036724035,
      0.019511523,
      0.019642986,
      -0.006847,
      0.0033827093,
      -0.020234738,
      -0.0344945,
      -0.01889487,
      -0.0037759587,
      -0.005147736,
      -0.017693013,
      0.0075678146,
      -0.014979261,
      -0.019428695,
      0.030248202,
      -0.002793275,
      0.012065366,
      0.016912375,
      -0.011466553,
      0.03058934,
      0.009233703,
      0.012812689,
      0.0068068253,
      0.000101121346,
      0.0028673005,
      0.026213627,
      -0.09879487,
      0.03620442,
      0.0017865179,
      -0.027033692,
      -0.0060179657,
      0.0058997213,
      -0.03386124,
      0.0058557196,
      -0.0006577026,
      0.004101648,
      -0.00440197,
      -0.003034102,
      0.02851641,
      -0.0041505415,
      -0.01719349,
      -0.017216552,
      -0.005731741,
      -0.029638013,
      0.019262409,
      0.0013433899,
      0.002951082,
      -0.008278802,
      -0.013657934,
      -0.0006070782,
      0.011375913,
      -0.016853618,
      0.014448421,
      0.037374347,
      0.012847751,
      -0.0069020856,
      -0.010049226,
      0.024524491,
      -0.009104145,
      -0.0212026,
      0.0010390372,
      0.012652554,
      -0.0006757177,
      -0.006465518,
      0.002334515,
      -0.010721,
      0.033066288,
      -0.013408814,
      0.016106237,
      0.01464131,
      -0.019512894,
      -0.0008029234,
      -0.021816283,
      -0.0019329499,
      -0.014426925,
      -0.0036101667,
      -0.011910327,
      0.020646842,
      0.01504645,
      -0.0047251815,
      0.0018503637,
      0.017079605,
      0.0064341296,
      -0.019267762,
      0.00008246018,
      0.018876947,
      -0.006848668,
      0.004476169,
      0.0122812195,
      -0.016814023,
      -0.0035996612,
      0.0008764307,
      0.0028119814,
      -0.009366161,
      -0.0002339989,
      0.0023578077,
      0.010108281,
      -0.021727098,
      0.00052035105,
      -0.009823688,
      0.010528326,
      -0.016667137,
      0.017212199,
      -0.019028949,
      -0.00579995,
      0.012124565,
      0.013222209,
      -0.009042918,
      0.01184315,
      -0.005655991,
      0.005071034,
      -0.0012312082,
      -0.001470472,
      -0.0068461434,
      0.0056152903,
      -0.025995107,
      0.005778191,
      0.017859602,
      -0.019784676,
      -0.012095095,
      -0.014700814,
      0.0017807082,
      -0.022537008,
      -0.02150813,
      -0.0131092,
      0.0058225393,
      0.0044564293,
      0.015169975,
      -0.003430334,
      -0.012691719,
      0.004648874,
      -0.013928375,
      -0.027158868,
      -0.010340933,
      0.015887702,
      -0.012623586,
      0.010042528,
      0.011129519,
      -0.021979786,
      -0.004430297,
      0.01552098,
      0.019511376,
      0.0019032037,
      0.005950761,
      -0.0017331927,
      -0.014914279,
      0.002502394,
      -0.020535687,
      -0.010972199,
      -0.009072235,
      -0.0025540886,
      0.018563809,
      -0.00080058014,
      -0.014002936,
      -0.018639386,
      -0.037797064,
      -0.022567252,
      0.013518011,
      -0.023821736,
      -0.01241368,
      0.0049229907,
      0.011296386,
      0.034653474,
      0.0120726535,
      0.003060372,
      0.016541103,
      -0.00043068515,
      0.00015668335,
      0.024370778,
      -0.006403704,
      -0.0031977994,
      0.03457124,
      -0.006533122,
      -0.015134747,
      -0.006309684,
      -0.024963655,
      -0.024532491,
      -0.0057837246,
      -0.011770017,
      0.0060381894,
      -0.013191141,
      0.0035347124,
      0.011286071,
      -0.015770355,
      -0.023050759,
      -0.020402858,
      0.0035902825,
      0.0048043854,
      -0.02293581,
      0.00036488922,
      0.01184854,
      0.014082796,
      0.0101529695,
      0.006266633,
      0.0108256405,
      -0.010270263,
      -0.0026267879,
      -0.01623044,
      -0.027936824,
      -0.00007121643,
      0.011916095,
      -0.0029510611,
      0.010192466,
      0.0028264897,
      0.017942818,
      0.027573057,
      0.0039101434,
      -0.0034334157,
      -0.024306932,
      0.007657252,
      0.012454934,
      -0.004336639,
      0.009322854,
      0.007976639,
      -0.012114949,
      -0.0011078904,
      -0.0024765022,
      -0.0070609087,
      -0.00090622576,
      0.019843383,
      0.00369019,
      0.02079939,
      -0.02340538,
      0.012831749,
      0.015043359,
      0.010616805,
      -0.00063594955,
      -0.013221692,
      0.011863779,
      -0.004830139,
      0.011403973,
      -0.015200028,
      0.011741593,
      -0.0123775145,
      0.006350943,
      0.026536005,
      0.0038661712,
      -0.012681974,
      -0.020632487,
      0.026592862,
      0.015020766,
      0.028216528,
      -0.0047346638,
      -0.015330289,
      -0.033152796,
      -0.0065248073,
      0.008225857,
      -0.005043626,
      0.00065035,
      -0.0140775805,
      0.0061230734,
      0.0059435195,
      -0.00019825011,
      0.0030419163,
      -0.0141530745,
      -0.0010386232,
      -0.0068867584,
      -0.008980011,
      -0.023564762,
      0.010014165,
      -0.0155790895,
      0.0012896574,
      0.0067242067,
      0.027831912,
      -0.013628099,
      0.014049428,
      0.012685758,
      -0.014344317,
      -0.0022917916,
      -0.020188075,
      -0.015845079,
      -0.008542598,
      0.023958145,
      -0.013891138,
      -0.017727109,
      -0.013248773,
      0.0022117672,
      0.033732664,
      -0.0062226118,
      -0.0004458777,
      -0.008898895,
      0.032088593,
      -0.0154864695,
      -0.0026073891,
      0.003512512,
      -0.017853754,
      0.011851761,
      0.013883769,
      0.001069892,
      0.007502971,
      0.010783656,
      -0.01629142,
      0.0070600766,
      -0.007806222,
      -0.00864727,
      -0.1441849,
      0.008139658,
      -0.015061222,
      -0.0071049947,
      -0.003666072,
      -0.013943208,
      0.0016973687,
      -0.008177296,
      0.0057428484,
      -0.0035296404,
      0.03529381,
      0.0030502912,
      -0.009941602,
      -0.011206983,
      -0.005268349,
      -0.0064579328,
      0.0067067062,
      -0.0015675102,
      0.019642675,
      0.00083186605,
      -0.024290383,
      -0.0005237465,
      0.0005167646,
      -0.009199138,
      -0.026623309,
      0.0062089455,
      0.007877925,
      0.0047109253,
      -0.0009642579,
      -0.010983505,
      -0.05537677,
      -0.018702812,
      0.02452496,
      0.013679937,
      0.014154084,
      -0.0014187684,
      -0.033320855,
      0.024987241,
      0.0008555418,
      -0.006407999,
      0.0016728695,
      0.00013646821,
      0.016922472,
      0.011416934,
      -0.015051985,
      0.0051065558,
      0.013760156,
      0.0041680546,
      0.006497988,
      0.031602137,
      -0.03876621,
      -0.015942877,
      -0.005177371,
      -0.012022675,
      -0.014249842,
      -0.0005516694,
      0.0013186854,
      -0.011419369,
      -0.0012778725,
      -0.0037682028,
      0.0059633204,
      0.006657949,
      -0.0023395177,
      0.027730824,
      0.00038690536,
      0.011894835,
      0.036202937,
      0.02088389,
      -0.0022451214,
      -0.026160786,
      -0.007480209,
      0.009722344,
      -0.0064416737,
      0.026464477,
      -0.028012319,
      -0.0023831734,
      -0.006733689,
      0.013786651,
      -0.00062121777,
      -0.009967091,
      -0.011681584,
      0.013079189,
      -0.054995794,
      -0.0044972096,
      0.010210658,
      0.01340638,
      0.018900454,
      0.013405,
      -0.0024450812,
      -0.0023326995,
      0.017096058,
      0.010782535,
      -0.027634174,
      0.008159497,
      0.017357793,
      -0.0023498137,
      -0.029218664,
      -0.009304265,
      -0.001969309,
      -0.026405068,
      -0.005268814,
      0.006511191,
      0.011006103,
      0.011889627,
      0.0015471047,
      -0.022209914,
      0.007761727,
      0.00906238,
      0.01209752,
      -0.012402822,
      -0.005478689,
      0.00042532547,
      0.023710623,
      -0.15272945,
      -0.014888819,
      0.007673094,
      0.0009963925,
      0.013796912,
      0.017207509,
      -0.004514711,
      -0.011868389,
      -0.004631147,
      -0.019608961,
      -0.0047005713,
      -0.0033428317,
      -0.029999303,
      0.0005311837,
      0.014222485,
      0.12763703,
      -0.00028923244,
      -0.0026359651,
      -0.025117476,
      0.022440547,
      -0.0036895224,
      -0.024523405,
      0.0014555746,
      -0.0069528283,
      -0.01791456,
      -0.008273942,
      0.0065432135,
      -0.007199245,
      0.003163256,
      -0.00577519,
      0.020471966,
      -0.010910231,
      0.018911658,
      0.00999365,
      -0.014630674,
      -0.0064841714,
      0.00020911553,
      -0.0049697626,
      -0.00997404,
      0.0011687723,
      0.018729571,
      0.008997415,
      -0.01685345,
      0.009660163,
      0.019332845,
      -0.017416364,
      -0.009023494,
      -0.016977338,
      -0.008773602,
      0.008469947,
      -0.0127997855,
      -0.055183623,
      0.01483868,
      -0.008088686,
      -0.0047883736,
      0.021140268,
      -0.010241766,
      0.016990647,
      0.019390764,
      0.01257014,
      -0.01925843,
      -0.0036520439,
      0.015640177,
      0.016740674,
      -0.0023460486,
      0.0006139426,
      0.015640998,
      0.012145004,
      0.03317321,
      0.001445176,
      0.0042145755,
      -0.003250451,
      -0.016493117,
      0.022883637,
      -0.015815744,
      -0.014202787,
      -0.021965943,
      0.009546204,
      0.004619508,
      0.004006438,
      -0.007965708,
      0.011603024,
      0.014673548,
      -0.022394398,
      0.0103760185,
      -0.00070323294,
      -0.030475607,
      0.035062913,
      -0.01449096,
      0.005106703,
      -0.0012692334,
      -0.009197666,
      0.0044909855,
      0.034524504,
      -0.008651539,
      -0.002924577,
      0.008101273,
      -0.0052563227,
      0.02777165,
      0.007170176,
      -0.013051701,
      0.00055013434,
      -0.0009964649,
      -0.025475215,
      0.021738797,
      0.0012932115,
      0.0038689564,
      0.012043336,
      0.01736768,
      -0.022044625
    ]
  },
  {
    "id": "genai_cohort_nodejs_01_NodeJS_SystemDesign_SectionInto_vtt",
    "content": "All right, so hey there and welcome 2 to a very exciting 3 new section on system design. 4 So in this particular section 5 we are going to master 6 the fundamentals of system design. 7 We are going to see how 8 in real world these servers work. 9 What is a server? 10 What is your scaling? 11 What are different, 12 different scaling policies? 13 What is vertical scaling? 14 What is horizontal scaling? 15 How do systems work at a scale? 16 What are queue systems? 17 What is pubnub and how these 18 systems, how these all the 19 components of system design work 20 together to become a robust 21 system, how Your Netflix and 22 YouTube works at that much scale 23 and how even this platform where 24 you are watching this video is 25 getting delivered to you. 26 This particular section is really, 27 really, really important for all 28 the beginners because this is 29 where you actually get the gist of 30 all the system design components 31 and what is happening behind the 32 scenes. 33 So I welcome you to this very 34 interesting section 35 of system design and with that, 36 let's start with the section.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "01-NodeJS-SystemDesign-SectionInto.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/01-NodeJS-SystemDesign-SectionInto.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.005626401,
      0.002477709,
      0.015847087,
      -0.050661717,
      -0.037982374,
      0.004411802,
      0.016777601,
      -0.0033153954,
      -0.0066185067,
      0.04013451,
      -0.004313499,
      0.0026111654,
      0.0214291,
      0.03426099,
      0.1264408,
      -0.00023588266,
      0.01738333,
      -0.0165987,
      0.000909104,
      -0.007762248,
      0.012296479,
      -0.00047599597,
      -0.0061605745,
      0.0017944573,
      0.0005086728,
      0.00909586,
      0.024137486,
      -0.013710145,
      0.038873084,
      -0.012743788,
      -0.0082560945,
      0.01245539,
      0.0006072732,
      0.026382025,
      0.012330611,
      0.027318576,
      0.011698036,
      0.0057168226,
      -0.030040743,
      0.013212996,
      -0.0061982274,
      -0.021762623,
      -0.010846878,
      -0.019034969,
      -0.0075420886,
      -0.0031657335,
      0.0069317603,
      -0.01119269,
      0.0025477007,
      0.0036093546,
      -0.024820058,
      -0.022728505,
      -0.01824767,
      -0.17608719,
      -0.010511306,
      0.0002504076,
      -0.017337196,
      0.012895232,
      -0.007272305,
      0.0011004005,
      -0.019700138,
      0.028455978,
      -0.024941243,
      -0.015939696,
      -0.020728713,
      0.002962421,
      0.030685233,
      -0.0037924384,
      0.0065370575,
      -0.007943332,
      0.0070030065,
      -0.0065782256,
      0.007096869,
      -0.018377742,
      -0.024645137,
      -0.022380028,
      -0.006818083,
      0.005595929,
      -0.004011563,
      0.021965658,
      -0.019853812,
      -0.004585899,
      -0.004192237,
      -0.009176021,
      0.001859085,
      -0.0021253685,
      -0.01096726,
      0.0119436905,
      0.0027324443,
      0.012162338,
      -0.008503396,
      0.007932283,
      0.0038359282,
      0.003661178,
      -0.012100035,
      -0.009080167,
      -0.021971479,
      -0.010435993,
      -0.022783106,
      0.0024636048,
      -0.013171875,
      0.0032592006,
      -0.026045267,
      0.0047831284,
      0.0010824932,
      0.009025562,
      0.025807273,
      -0.007963669,
      0.00007706657,
      -0.026908258,
      0.0018951612,
      0.0055778273,
      0.01539029,
      0.012393293,
      0.0053025587,
      -0.18192676,
      0.018358804,
      0.010834251,
      -0.0017918812,
      -0.005972208,
      -0.025693458,
      0.0018247244,
      0.03155983,
      0.0054128417,
      -0.0077825626,
      0.01047813,
      -0.0019067071,
      0.021323958,
      -0.007398362,
      0.002106994,
      -0.009383947,
      -0.0036492767,
      -0.014741789,
      0.016350642,
      0.036662567,
      0.0064811762,
      -0.019023811,
      -0.012613596,
      -0.007699271,
      -0.010834469,
      0.006115882,
      0.017304026,
      0.008042139,
      0.043256268,
      0.0054712854,
      -0.0059187044,
      -0.040595636,
      0.014026714,
      -0.016715877,
      -0.024003826,
      0.003464346,
      0.00063636363,
      0.019626414,
      0.010511496,
      0.01942043,
      -0.020742638,
      -0.0032896213,
      -0.022520624,
      0.0077702217,
      -0.0021545163,
      -0.007989942,
      -0.0073810243,
      0.017211048,
      0.0037943602,
      0.0059101614,
      -0.002194077,
      -0.02378452,
      0.012141383,
      -0.0033581092,
      0.004639318,
      -0.03208494,
      -0.014862814,
      -0.018450432,
      0.012135401,
      -0.010792567,
      -0.009222034,
      -0.009108668,
      0.011828049,
      0.012246684,
      -0.017116578,
      -0.004793996,
      -0.00043916548,
      -0.0076337745,
      -0.018529918,
      -0.0009304732,
      -0.016396824,
      -0.010616872,
      0.0048401877,
      0.021603536,
      0.001397535,
      0.020766107,
      -0.007871385,
      0.0022449016,
      0.013204761,
      -0.008443738,
      -0.036076237,
      0.019366978,
      -0.0075629274,
      -0.016607624,
      0.02904811,
      -0.008704832,
      -0.0053376956,
      0.025436265,
      -0.018365454,
      -0.0045817816,
      0.006737748,
      0.002750478,
      -0.018797107,
      -0.012303642,
      0.038167402,
      -0.0029306614,
      -0.012533568,
      0.029852727,
      0.0011738202,
      0.008766992,
      -0.006120671,
      0.0205474,
      0.017449819,
      -0.0073406706,
      -0.009226865,
      -0.016864538,
      -0.009121,
      0.004673179,
      0.015556034,
      0.024882903,
      0.005935395,
      -0.015402367,
      0.0012369371,
      0.0019379526,
      -0.011702492,
      0.014889752,
      0.005799161,
      -0.005178481,
      0.019520126,
      0.011479979,
      0.018092467,
      0.014655544,
      0.018122187,
      -0.012466663,
      -0.0025910675,
      -0.0075717866,
      -0.010167004,
      0.011466367,
      0.03188673,
      0.019290013,
      0.009714877,
      -0.0012924597,
      0.007798537,
      -0.008844642,
      -0.012708432,
      -0.0011649434,
      0.007727055,
      0.00954731,
      -0.005557918,
      -0.0033645572,
      -0.015871052,
      -0.041788206,
      -0.03469918,
      0.0035668516,
      -0.010043568,
      -0.022889417,
      -0.02109581,
      -0.018763175,
      0.0020735112,
      0.00026554023,
      0.0034329523,
      0.0060121706,
      0.028172659,
      -0.025385585,
      0.0039903517,
      0.025399122,
      -0.0070319874,
      -0.003297187,
      -0.010486442,
      0.0135173015,
      -0.008955217,
      -0.089232914,
      -0.005706365,
      0.006299437,
      -0.015375269,
      -0.0028347527,
      -0.006222007,
      -0.0048983637,
      0.030098513,
      0.020645184,
      0.023365483,
      0.021445375,
      -0.0073711625,
      0.012524526,
      -0.011880569,
      0.014576409,
      -0.009347877,
      -0.013594778,
      -0.0017827756,
      0.005649627,
      -0.021363398,
      0.00773988,
      0.004158288,
      0.00046357102,
      -0.013714519,
      0.004417412,
      -0.03402847,
      -0.012652959,
      0.015814448,
      0.0072673643,
      0.0056837215,
      0.011110915,
      0.029551668,
      0.012108767,
      0.014893277,
      -0.0060832235,
      0.0040742923,
      -0.010823751,
      0.0030217306,
      0.012983128,
      -0.010040215,
      0.016517276,
      -0.03148856,
      0.019587401,
      0.013608224,
      0.00587282,
      0.0036224439,
      0.013158405,
      0.025651162,
      -0.020831624,
      0.0073753092,
      -0.014273161,
      -0.0038673098,
      0.021381022,
      -0.02628875,
      -0.00059880235,
      0.005961615,
      -0.022382937,
      -0.010249804,
      0.006049239,
      0.019898238,
      0.0011740401,
      0.005289457,
      -0.012035142,
      -0.009309611,
      0.008414464,
      -0.015950728,
      0.017230976,
      -0.026809044,
      0.008997841,
      -0.005302279,
      -0.006660053,
      -0.013840524,
      0.0014138588,
      -0.03287848,
      0.024612498,
      0.0073289457,
      0.0048771366,
      -0.010366532,
      -0.019073423,
      0.007223741,
      0.0033582265,
      0.025544407,
      0.012125287,
      -0.0046890713,
      0.024276642,
      0.004724846,
      0.011083402,
      -0.011275868,
      -0.01622872,
      -0.022910103,
      0.0171221,
      0.01710884,
      -0.020764511,
      0.010290293,
      -0.015130256,
      -0.0032641524,
      -0.0071021747,
      -0.0049145194,
      0.003995295,
      0.020035239,
      -0.0012827555,
      0.007083359,
      -0.0026994878,
      -0.017772825,
      -0.011799273,
      0.021255055,
      -0.003912896,
      -0.0019298412,
      0.006364696,
      -0.0018431193,
      0.0015763685,
      0.02089968,
      -0.016502041,
      -0.018205114,
      -0.00045905513,
      0.0055657923,
      0.013273869,
      0.00034898103,
      -0.021900645,
      -0.019673813,
      -0.011026313,
      -0.009151186,
      -0.006955481,
      0.020232616,
      -0.04258829,
      -0.008634166,
      -0.008725928,
      0.009660684,
      0.0041955607,
      -0.031129297,
      -0.01419354,
      -0.0064474503,
      -0.006149899,
      -0.020020723,
      -0.023629103,
      -0.019876476,
      -0.0025651192,
      0.008914818,
      0.0048099332,
      0.016028488,
      -0.0051149977,
      0.022441871,
      0.0234564,
      -0.008092672,
      -0.011550402,
      0.0056435675,
      -0.021327827,
      -0.0056751734,
      -0.0077372473,
      0.0016787166,
      -0.018246781,
      -0.009229067,
      0.008563636,
      -0.010310672,
      -0.014766952,
      -0.006993631,
      0.013065503,
      0.0060682725,
      -0.0039659534,
      -0.016806379,
      0.008065598,
      -0.012898628,
      -0.024411108,
      -0.00062399276,
      0.028951488,
      -0.00018725281,
      -0.02033976,
      0.0100583015,
      0.004395348,
      -0.006477313,
      0.012202873,
      -0.021328872,
      -0.03994782,
      0.012269167,
      0.018713647,
      0.029332088,
      -0.003431449,
      -0.014469238,
      0.0026486965,
      0.009791217,
      -0.009024025,
      -0.00046998623,
      -0.030157408,
      -0.0003619663,
      0.015922975,
      0.008769445,
      0.00557945,
      -0.017083043,
      -0.027320819,
      -0.014381084,
      -0.00029228485,
      0.0029133174,
      -0.01331225,
      0.0038566112,
      -0.0032055813,
      0.0071429037,
      0.011519872,
      -0.026635237,
      0.00024191602,
      -0.0067297784,
      0.024303107,
      -0.01752427,
      0.021847434,
      -0.027053108,
      0.034431953,
      -0.017186549,
      0.0028537475,
      -0.022243598,
      0.009429482,
      0.0034730535,
      0.006443435,
      -0.004226236,
      -0.009382089,
      -0.0049800994,
      0.014850185,
      0.028350119,
      -0.0060060774,
      0.0047780937,
      -0.013110096,
      0.0074767326,
      0.029410461,
      -0.022738734,
      0.00021444817,
      0.0035536252,
      -0.008303655,
      0.008941639,
      -0.014290518,
      0.010046746,
      -0.026261255,
      0.006299102,
      0.018174347,
      0.022956051,
      -0.008438259,
      0.019107116,
      -0.0058523193,
      -0.011449015,
      -0.011203201,
      0.0069951285,
      -0.014055242,
      0.02094521,
      -0.016863916,
      0.014120003,
      -0.0019520464,
      -0.00492098,
      -0.010841345,
      -0.030302357,
      0.02501723,
      0.024210064,
      -0.0045539783,
      -0.007793312,
      0.024969323,
      0.018481903,
      0.01955021,
      -0.010742965,
      -0.0075233704,
      0.03931656,
      -0.0061343936,
      0.0026969938,
      -0.0051459717,
      -0.010249045,
      -0.0078111067,
      0.0043571065,
      0.0070274738,
      -0.0025554975,
      0.0012836772,
      -0.01602816,
      0.0111978995,
      -0.01862405,
      0.0047261943,
      -0.121297054,
      0.0012528604,
      -0.007866151,
      0.014362595,
      -0.03083677,
      -0.0141766425,
      -0.0044774585,
      -0.02761015,
      0.0035446167,
      -0.027828643,
      0.0036005762,
      0.012199296,
      0.018389044,
      0.011876348,
      -0.011906535,
      -0.0066045066,
      -0.006942327,
      0.045860548,
      0.0029536132,
      -0.013700055,
      0.003110245,
      0.0033284998,
      -0.005374528,
      0.019847149,
      -0.0074512777,
      0.0034223013,
      0.008303109,
      0.018807849,
      -0.0024275202,
      -0.0002280542,
      -0.012216482,
      -0.0069574257,
      0.0026284787,
      0.019136965,
      0.014654439,
      0.00089492736,
      0.0058879075,
      0.0012471739,
      -0.0019893404,
      0.013460643,
      -0.0053343624,
      0.012065691,
      -0.012291636,
      0.013685919,
      0.022985281,
      0.0016491238,
      0.02364782,
      0.0005940026,
      -0.0014654554,
      0.030910065,
      -0.03605838,
      -0.018109612,
      -0.02099273,
      -0.029387565,
      0.0026533003,
      -0.0152477175,
      0.029867416,
      -0.0067252154,
      -0.0030554594,
      -0.01529037,
      -0.031666473,
      0.025051797,
      -0.009219014,
      0.02713451,
      -0.022797404,
      -0.009697699,
      0.011378923,
      -0.0032366272,
      0.013100676,
      -0.014411364,
      -0.0075444276,
      0.0028980728,
      0.007933406,
      0.01574743,
      -0.009935471,
      0.01381509,
      0.008532127,
      0.0023217148,
      -0.016453018,
      0.014494472,
      -0.020012155,
      0.012952741,
      -0.07351507,
      -0.013924425,
      0.006646461,
      -0.005309087,
      0.03045057,
      -0.0059227846,
      -0.030011842,
      0.013033383,
      -0.015052522,
      0.005761786,
      -0.03935548,
      0.0024878252,
      -0.011663008,
      -0.011576313,
      -0.019680852,
      -0.00013895263,
      -0.008430453,
      -0.020744614,
      -0.019413393,
      0.00005590947,
      -0.014064271,
      -0.007518523,
      0.0058554793,
      -0.0059081865,
      0.012889439,
      0.021918004,
      -0.012587997,
      -0.0074909204,
      -0.01077038,
      -0.0116231395,
      -0.013205597,
      -0.16190748,
      -0.025019983,
      -0.0026097845,
      0.004257521,
      0.0055134674,
      0.0024505993,
      -0.009762539,
      -0.03624188,
      0.0022102757,
      -0.0034201408,
      0.014088202,
      -0.021437017,
      -0.0184422,
      -0.012456612,
      0.0058337776,
      0.1535938,
      0.00010430757,
      -0.0022316135,
      -0.016830575,
      0.009955201,
      -0.001754399,
      -0.009011746,
      0.0056223916,
      0.017003894,
      -0.016116235,
      0.003877727,
      0.0068825716,
      -0.02118313,
      0.007981947,
      0.0101909125,
      0.02050245,
      -0.010967694,
      -0.015795937,
      0.011801657,
      0.0031379422,
      -0.018249689,
      0.004760878,
      -0.023091558,
      0.010448529,
      -0.009473179,
      0.017564533,
      -0.021440089,
      0.0018651254,
      0.0076409606,
      -0.0005410093,
      -0.011845706,
      -0.0049767853,
      0.0033636629,
      -0.01269403,
      0.014645668,
      0.012276026,
      -0.062338658,
      0.0037265045,
      0.0023925358,
      0.0024702596,
      0.012964451,
      -0.017803498,
      0.01501453,
      -0.025096951,
      0.009514677,
      -0.008921617,
      -0.004262473,
      0.03300626,
      -0.0008156054,
      0.0056847073,
      -0.005943516,
      0.0008838636,
      0.01975192,
      0.024011187,
      -0.0067293597,
      -0.0034636369,
      0.026869897,
      -0.0033996184,
      -0.028130807,
      -0.015296837,
      -0.010467852,
      -0.0039946996,
      0.005427,
      -0.011181106,
      -0.017502408,
      0.010321526,
      0.0046780217,
      -0.011539235,
      -0.003691418,
      0.03765006,
      0.0015434354,
      0.016240384,
      0.0284141,
      0.004706368,
      0.004673764,
      -0.00021415259,
      0.014192006,
      0.0040368703,
      0.03595709,
      0.002450521,
      0.014081623,
      0.007858658,
      0.009001555,
      0.0058283056,
      0.016623579,
      0.016044017,
      -0.014907304,
      0.012264068,
      -0.013451445,
      0.010588978,
      -0.0153648015,
      0.019634156,
      0.023771862,
      0.013316121,
      -0.017104726
    ]
  },
  {
    "id": "genai_cohort_nodejs_02_NodeJS_SystemDesign_SimpleSystem_vtt",
    "content": "All right, so in this particular 2 video, let's start from very 3 basics and from the beginning. 4 Okay, so what is a, system design? 5 So system design refers to a, 6 mechanism or a study 7 where you design the systems 8 to work on a scale. 9 Let's start from the very 10 beginning that what is a simplest 11 system design can look like. 12 For example, in your system 13 design you have a component and 14 everything starts from a, user 15 who is a user who is basically 16 interacting with your server, 17 who is basically using your 18 application. 19 So in your system design 20 component, you have users who 21 are talking to your server. 22 So let's create a server here. 23 So let's say this is 24 my server, right? 25 So what happens? 26 Your users send a request 27 to the server. 28 So this is your request. 29 Your server internally 30 processes this request. 31 What do I mean by process? 32 Process basically means 33 to do something on this 34 particular request, right? 35 It's your application logic. 36 For example, this can be anything 37 for examp, this can be talking 38 to database, maybe a DB query. 39 So user is asking for all the books. 40 So you have to make a DB query 41 to get all the books. 42 This can be a DB mutation. 43 Okay. 44 This can be something like, 45 you know, authentication. 46 This can be a, signup request. 47 This can be a simple validation. 48 So anything is basically a part 49 of your processing. 50 Okay, now to do this particular 51 processing, your system, your 52 server is connected to a database. 53 So let's say you have 54 a database here. 55 So we are using postgres database, 56 but it can be any database. 57 So you are basically have 58 a connection with the database. 59 So you use this for primarily 60 storing something, right? 61 To store your data and to 62 retrieve the data. 63 And once the request is 64 processed, you send back something 65 known as a response. 66 Okay, so this is how a typical 67 system design works. 68 And let me just reduce 69 this to a, medium. 70 Yeah, now this looks good. 71 So what happens? 72 A user sends a, request 73 to the server, server processes 74 this particular request and then 75 sends back a response. 76 And this is known as a request, 77 response cycle. 78 This is the simplest system 79 design diagram that you can see. 80 Okay, now what happens 81 here is a problem. 82 The problem is what happens when 83 your users tend to scale, 84 when you have a lot of users. 85 Right now there was only one 86 user, and your system was able 87 to interact and was able 88 to process this request. 89 But the problem happens when 90 you have a lot of users. 91 Even I will not, I'll not 92 say millions of users. 93 Even if you have hundreds of 94 users, which is a very small number, 95 your server might crash. 96 Your server can crash 97 for many reasons. 98 Maybe your server was not capable 99 of you, know, handling 100 100 requests, your server 101 didn't have enough resources. 102 So this is where your system 103 actually starts to crash. 104 And this is where the system 105 design as a subject comes in. 106 Okay, now let's do one thing. 107 Let's quickly analyze that, you know, 108 how these systems are internally 109 working and all that stuff. 110 What is this server? 111 Tell me just in one line, 112 what is the server? 113 Can I say that this server is 114 nothing but just a physical machine. 115 At the end of the day, 116 it's just a physical machine 117 running on a power. 118 Now this machine, a physical 119 machine running on a power 120 which is connected to an Internet. 121 Let's say this machine 122 has two CPU, okay? 123 And the configuration is 124 that it has a 4GB of RAM. 125 Now this particular machine is, you 126 know, somewhere, maybe it is at my 127 home, maybe it is in a data center. 128 And it has a, 24 by 7 power supply. 129 Right, 24 by 7, power supply. 130 Okay, so let me just, write it down. 131 Power supply. 132 And it has an Internet connection. 133 It has a public Internet connection. 134 Because only then, only then 135 the users can basically come 136 to this particular machine. 137 Okay, When I talk about Internet 138 connection and public availability, 139 can I also say that this 140 machine will have an IP address? 141 Let's say the IP address of this 142 particular machine is 2.3.4.5. 143 Okay? 144 So just taking a random example. 145 So what happens is these users, in 146 order to reach to your server, they 147 need to know the IP address, right? 148 You have to publicly tell that, hey, 149 my IP address is 2.3.4.5. 150 So if you want to visit my website, 151 please open this particular 152 IP address on your browser. 153 But do you really think that 154 this is a really nice way 155 to promote your server? 156 Is this a really nice way 157 to promote your application? 158 Can users really remember 159 your IP address? 160 No. 161 So what you can do is you can 162 actually buy a domain, right? 163 So let's say I can buy a domain that 164 is piyushgurk.dev and what I want is 165 that whenever someone visits this 166 particular domain, piushkurk.dev it 167 actually, it should basically 168 redirect the users to this 169 particular machine. 170 But wait, how can this 171 be even possible? 172 How can magically just typing 173 pushkube.dev in the browser can 174 actually redirect the user to this 175 server which is running on 2.3.4.5. 176 So the answer is actually 177 it is not possible. 178 This is where, your first system 179 design component comes in. 180 That is a DNS server. 181 Okay? 182 The full form for DNS 183 is Domain Name System. 184 So think of it as 185 a public phone book, okay? 186 It's a public phone book 187 which is a public database, 188 okay, which stores which domain 189 has what IP address. 190 So this public domain name system 191 has a phone book, is a large 192 database which knows that 193 piyushka.dev has this IP address. 194 Google.com has this IP address. 195 So it basically has records 196 of all the websites on the Internet. 197 So in your browser when you 198 very first time type 199 in piushka dot dev, your browser 200 has no idea where to go. 201 So your browser 202 makes a request to a DNS server. 203 This step is known as 204 a DNS resolution. 205 Okay? 206 Your DNS server returns this 207 particular IP address that 208 hey, from for piushka.dev 209 this is the IP address. 210 And now your browser is 211 basically redirected 212 to this particular server. 213 So whenever you type google.com you 214 are actually not interacting with 215 google.com your request goes to a 216 DNS server, DNS server first returns 217 an IP address and then internally 218 your browser redirects you to that 219 IP address. 220 Because by name you 221 cannot reach any server. 222 You need a, physical IP address 223 and it is very hard 224 to remember IP addresses. 225 That is where the DNS 226 server really shines in. 227 Okay, now you might be thinking, 228 it's an overkill, right? 229 For every domain you need to make 230 a DNS query, the answer is no. 231 There is something 232 known as DNS caching. 233 So your browser, whenever you type 234 a URL, if it doesn't have it in 235 the cache, that means it's a first 236 request, it goes to the DNS 237 server, asks for the IP address 238 and then it stores locally on your 239 machine. 240 Okay, it caches that particular 241 value on your machine so 242 that you don't have to do the DNS 243 resolution step again. 244 So, which basically saves you some 245 milliseconds and it also saves 246 some load on the DNS server. 247 Okay, so this is how your DNS server 248 works and this is how your users 249 are redirected to your server. 250 So this is your single 251 server and a, database. 252 Now this particular video was 253 on DNS server and you 254 know, just a kickstart 255 on the system design topic. 256 This is going to be really complex. 257 We are going to grow 258 this system a lot. 259 So be with me. 260 So right now we just know one 261 problem that you know, we just have 262 single machine and because you know 263 our DNS is redirecting the user to 264 this machine and as the user 265 increases, my system crashes, my 266 machine crashes. 267 Because 2 CPU 4GB RAM is such 268 a small configuration, 100 269 requests come in and that's it. 270 My server is gone. 271 So in the next video, 272 let's see how can I solve this 273 particular problem using something 274 known as scaling policies. 275 So let's meet you right there.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "02-NodeJS-SystemDesign-SimpleSystem.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/02-NodeJS-SystemDesign-SimpleSystem.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.007949799,
      0.006227932,
      0.015087616,
      -0.049812067,
      -0.018552072,
      0.006775088,
      0.028092593,
      0.011570052,
      0.014458618,
      0.04661995,
      -0.011013333,
      -0.0061588464,
      0.00645408,
      0.029829679,
      0.122904554,
      -0.00044424727,
      -0.0029785675,
      0.0022903369,
      0.0009403287,
      -0.03394424,
      0.022731652,
      0.003010553,
      0.00031178794,
      0.00019361216,
      0.0021168587,
      -0.00048421742,
      -0.013785121,
      -0.006480073,
      0.025400644,
      -0.006573252,
      -0.001585868,
      -0.003408565,
      0.002519162,
      0.013702599,
      0.014018071,
      0.022637678,
      0.0152309,
      0.0072510913,
      -0.009943755,
      0.003683375,
      -0.010313632,
      -0.011485017,
      -0.0013922142,
      -0.014981257,
      0.009645326,
      0.0065130573,
      -0.00072741904,
      -0.01055927,
      -0.009625085,
      0.0026335372,
      -0.016371617,
      -0.009012164,
      -0.007999988,
      -0.18723787,
      0.00014312021,
      0.008212453,
      0.0044841883,
      0.001680022,
      -0.016576087,
      0.0008660899,
      -0.032612327,
      0.016265972,
      -0.010167976,
      0.008075768,
      -0.01493694,
      -0.0059033916,
      0.035506207,
      -0.005372475,
      -0.00594746,
      0.010696807,
      0.017458454,
      -0.004976529,
      -0.0028721744,
      -0.025622709,
      -0.020299148,
      -0.01888293,
      -0.0063072047,
      0.007579926,
      0.0068388423,
      0.0068256953,
      -0.0020198082,
      -0.012798692,
      -0.0090125855,
      0.0030412388,
      0.011530265,
      -0.007566107,
      -0.012107423,
      -0.0068314015,
      0.005128499,
      0.0016320628,
      -0.0028521183,
      0.014798239,
      0.02058777,
      0.00776096,
      -0.017708559,
      -0.0040625553,
      -0.017790753,
      -0.006894225,
      0.006560496,
      0.0050312,
      0.00076265354,
      0.0033587827,
      -0.02070438,
      0.028009094,
      -0.009309772,
      0.005066341,
      0.027310671,
      -0.014769215,
      -0.004973185,
      -0.023626173,
      0.008965786,
      -0.017643806,
      0.01919592,
      -0.0037998213,
      -0.001418569,
      -0.18344569,
      0.021962203,
      0.0009886835,
      0.007975162,
      -0.017801838,
      -0.027145814,
      -0.026272906,
      0.023099655,
      0.007766165,
      0.00007176748,
      -0.006292429,
      -0.014930611,
      0.02139597,
      -0.0070739905,
      0.0019146915,
      -0.010743746,
      -0.011934942,
      -0.0036769686,
      0.026629185,
      0.026504312,
      0.011059148,
      -0.036797788,
      -0.016777249,
      0.0057256683,
      -0.01781071,
      0.0057238247,
      0.025482511,
      0.00859187,
      0.047740176,
      0.007402756,
      0.011540352,
      -0.04487107,
      0.023400953,
      -0.024682732,
      -0.028917948,
      0.00879032,
      -0.010224378,
      0.020091018,
      0.0051716124,
      0.018927377,
      -0.025374537,
      -0.021947544,
      0.008904829,
      0.006817345,
      0.010781278,
      0.0042622034,
      0.0015052314,
      0.02107393,
      0.010325532,
      -0.0050903303,
      -0.0007130707,
      -0.022467729,
      0.0073098983,
      0.009249794,
      0.009767913,
      -0.020012489,
      -0.003937256,
      -0.028134707,
      0.00070665637,
      -0.0048565767,
      -0.010515099,
      -0.01892746,
      0.022153428,
      0.009352368,
      -0.014692738,
      0.005177344,
      0.0039495802,
      -0.001808994,
      -0.018284112,
      -0.0026125729,
      -0.0068878424,
      -0.0158215,
      -0.02550468,
      0.030556664,
      -0.0117253,
      0.008675139,
      -0.009790703,
      -0.004908504,
      -0.008731544,
      0.0064721717,
      -0.034272287,
      -0.0013742945,
      -0.0094325775,
      0.0011577314,
      0.027301686,
      -0.007822458,
      -0.007807086,
      0.019041255,
      -0.014413638,
      -0.004210185,
      0.0057293843,
      0.014356526,
      -0.026937312,
      0.0036005294,
      0.021223186,
      -0.016758643,
      -0.016183482,
      0.01316787,
      0.009952771,
      0.012510152,
      -0.00045143827,
      0.0093020005,
      0.010849856,
      -0.00020945024,
      0.0120525565,
      0.0017933286,
      0.002057874,
      0.003911033,
      0.015509291,
      0.03349084,
      0.0008841847,
      -0.00070008653,
      -0.0054620267,
      0.012643496,
      -0.005660115,
      0.007009982,
      0.01145353,
      -0.02073933,
      0.008229863,
      0.018725157,
      0.014172927,
      0.004666631,
      0.00473773,
      0.0026677123,
      0.0067508,
      -0.0016615491,
      -0.01652785,
      -0.01290554,
      0.02676494,
      0.0145823425,
      0.022498207,
      -0.012751054,
      0.016269634,
      -0.009086662,
      -0.006331791,
      0.009726142,
      -0.0027970595,
      -0.0044243075,
      0.012205073,
      0.027000424,
      -0.018630963,
      -0.041799765,
      -0.02606704,
      -0.003988439,
      -0.0019052073,
      -0.014123924,
      -0.030076962,
      0.0009253822,
      -0.002846981,
      -0.0045359796,
      -0.0052408283,
      -0.00035031443,
      0.01902711,
      -0.01535727,
      -0.00035801003,
      0.023937002,
      -0.0016653298,
      -0.018783478,
      -0.011607673,
      0.015131721,
      0.018137988,
      -0.09075942,
      -0.010347183,
      -0.011914154,
      -0.0024635124,
      -0.0018867378,
      -0.009916319,
      -0.005605937,
      0.008919966,
      0.022170546,
      0.019121084,
      0.015869422,
      0.006486692,
      0.022301912,
      -0.009034968,
      0.016455978,
      0.0070312656,
      -0.00075617834,
      -0.00015668814,
      0.011575839,
      -0.034833033,
      -0.015968088,
      0.011397033,
      -0.0026092525,
      0.0036068452,
      -0.0042015775,
      -0.0020086414,
      -0.019221501,
      0.01295315,
      0.0029050815,
      -0.0008434109,
      0.017272336,
      0.042325605,
      0.0024671445,
      0.0051784622,
      -0.0047909925,
      0.018135546,
      -0.0045031337,
      -0.011479105,
      0.010626191,
      -0.007525178,
      0.0041399943,
      -0.019624172,
      0.01774134,
      -0.0036812508,
      -0.019279154,
      0.016839957,
      0.0061914767,
      0.018632494,
      -0.044597678,
      -0.0024219379,
      -0.011103981,
      0.002843744,
      0.00108997,
      -0.025062693,
      -0.012168936,
      0.013760835,
      -0.00026370995,
      0.0045968243,
      -0.017338285,
      0.017689832,
      -0.012374992,
      -0.017103162,
      0.0009776508,
      0.0059668543,
      0.009188275,
      -0.01135963,
      0.0026150686,
      -0.032761574,
      0.0014150704,
      -0.011425012,
      0.0052599427,
      -0.028102962,
      0.0026322375,
      -0.03733761,
      0.02246756,
      0.01390969,
      -0.0020117222,
      -0.012691794,
      -0.024228688,
      0.015383864,
      -0.0014200568,
      0.02011766,
      0.016366327,
      0.015582076,
      0.013143576,
      0.0053387154,
      -0.0005492673,
      -0.005565604,
      -0.023063207,
      -0.023877623,
      0.016448691,
      0.036778238,
      -0.008930261,
      0.01700262,
      -0.015012756,
      0.006291674,
      -0.008460538,
      0.010617688,
      0.0013987138,
      0.021326628,
      -0.01142905,
      0.0044216197,
      -0.005407413,
      0.0019402014,
      -0.017826388,
      0.026942277,
      -0.025412545,
      0.0013317179,
      0.0049877767,
      0.0006702493,
      -0.007433731,
      0.010630322,
      0.0037811599,
      -0.007046892,
      0.00062616577,
      -0.006377279,
      -0.009758172,
      0.015757408,
      -0.010138296,
      -0.025613125,
      -0.01297238,
      0.0014546417,
      0.020310732,
      0.02606182,
      -0.042203523,
      -0.0035200652,
      -0.033879194,
      0.0045214775,
      0.0031369014,
      -0.022857187,
      -0.018391915,
      -0.010797978,
      0.0049289363,
      -0.02753663,
      -0.0129803885,
      -0.01931277,
      -0.004794435,
      0.0018832304,
      0.0042734994,
      0.015855685,
      0.001266779,
      0.021778515,
      0.0064827213,
      -0.0018246283,
      -0.010156743,
      -0.0146284085,
      -0.02793289,
      0.01058236,
      0.01650498,
      -0.0073180543,
      -0.025756383,
      -0.0061832224,
      -0.017473286,
      -0.0038852876,
      0.005387522,
      0.018444214,
      -0.002515828,
      0.013796318,
      0.00194729,
      -0.00964212,
      -0.018291533,
      -0.006091341,
      -0.009926604,
      -0.008006878,
      0.0225167,
      0.0023411594,
      -0.014879334,
      -0.0015991114,
      0.0014064148,
      0.009077827,
      -0.0006541529,
      -0.025236478,
      -0.04157384,
      0.0050917715,
      0.019309914,
      0.013760508,
      -0.0018864103,
      -0.0074634515,
      0.010752749,
      0.008775246,
      -0.005494807,
      -0.006667199,
      -0.01593913,
      0.007219695,
      0.019064235,
      0.0047057695,
      0.022705233,
      -0.008944332,
      -0.021075917,
      -0.01423965,
      -0.013302113,
      -0.0009691107,
      -0.012571329,
      0.0041964613,
      0.004106516,
      0.0050996644,
      0.0020625468,
      -0.0096640065,
      -0.015740115,
      0.0052251364,
      -0.005893168,
      -0.022946665,
      0.00932127,
      -0.013128461,
      0.025389662,
      -0.008207816,
      -0.0052314075,
      -0.018065909,
      0.016762901,
      0.009890888,
      0.0003158965,
      -0.0074093346,
      0.0065977187,
      -0.009645347,
      0.013168828,
      0.012745873,
      -0.005316033,
      -0.006204482,
      -0.017168067,
      -0.012082917,
      0.025217779,
      -0.014041992,
      -0.009166887,
      -0.016070591,
      -0.011066549,
      0.0035954728,
      -0.029071745,
      0.010581819,
      0.0005964683,
      -0.00095970946,
      0.024837496,
      0.016120471,
      -0.005408133,
      0.008965538,
      -0.016091222,
      -0.01847392,
      -0.0039019915,
      -0.0025704626,
      -0.007730307,
      0.02532082,
      0.0023567632,
      -0.000042865227,
      -0.014497783,
      -0.022611309,
      -0.004666215,
      -0.023479288,
      0.031941913,
      0.014859328,
      -0.010162811,
      -0.03395448,
      0.022371566,
      0.029088994,
      0.019525332,
      -0.0077681313,
      -0.0043110712,
      0.023630701,
      -0.020118652,
      -0.010379736,
      0.006065231,
      -0.009077819,
      -0.03309111,
      -0.01809344,
      0.0133773,
      0.024296122,
      0.00828854,
      -0.026299011,
      0.011647212,
      -0.013090907,
      0.0049392693,
      -0.11736843,
      0.0035431194,
      -0.021253847,
      0.0009621651,
      -0.017958859,
      -0.007341133,
      0.0048522796,
      -0.018947517,
      0.005526711,
      -0.015078601,
      0.02172644,
      0.012023,
      0.0063653216,
      0.015106694,
      -0.0016962078,
      -0.008249709,
      -0.015376075,
      0.029965827,
      0.02872276,
      -0.009771061,
      0.001339292,
      0.009049545,
      -0.008889147,
      0.027265867,
      -0.005653977,
      -0.009217568,
      0.010953784,
      0.023430012,
      -0.00041423817,
      0.007610437,
      -0.012860931,
      -0.018092843,
      -0.0027828582,
      -0.0042669903,
      0.026547754,
      -0.008737412,
      0.015044505,
      0.004909749,
      0.0122793615,
      0.020526294,
      -0.005165663,
      0.00813724,
      -0.00033250995,
      0.020560041,
      0.021193996,
      0.0070956605,
      -0.000015201213,
      -0.024118168,
      -0.015567784,
      0.022555364,
      -0.050092876,
      -0.017103937,
      -0.009288406,
      -0.024445765,
      0.014649331,
      -0.0013797653,
      0.026857447,
      -0.014657673,
      -0.0066559464,
      -0.014503965,
      -0.0097564515,
      0.026968911,
      -0.018934859,
      0.024630385,
      -0.008163286,
      -0.014851345,
      0.00802372,
      -0.017131241,
      0.021304863,
      -0.002385011,
      0.0018853779,
      0.002650678,
      0.018949011,
      0.032189935,
      0.006618779,
      0.0061513535,
      -0.004061078,
      0.014047431,
      -0.017077547,
      0.0071830163,
      -0.021551404,
      0.015764484,
      -0.07676097,
      -0.01853469,
      0.009894196,
      -0.0035771339,
      0.036557287,
      0.0018525507,
      -0.024307756,
      0.014402566,
      -0.009286268,
      0.009872678,
      -0.008081317,
      -0.008105539,
      -0.013340548,
      -0.02669347,
      -0.036091443,
      0.017430011,
      0.0058980277,
      -0.019142773,
      -0.02752432,
      -0.0018676913,
      -0.011626685,
      -0.0075776074,
      0.0044757817,
      -0.012826345,
      0.0052484777,
      0.016195757,
      -0.023664027,
      -0.0028489486,
      -0.006234108,
      0.007585564,
      -0.009276626,
      -0.13515972,
      -0.008856542,
      0.019649839,
      -0.008021179,
      0.005549576,
      0.0067754495,
      -0.018766241,
      -0.020758048,
      0.009304562,
      -0.016078213,
      -0.007274298,
      -0.01398071,
      -0.02163055,
      -0.004258832,
      0.012221071,
      0.1464438,
      -0.00021069597,
      0.008894925,
      -0.005537231,
      0.018495232,
      -0.015319591,
      0.007217924,
      0.0009667838,
      0.009358574,
      -0.016281476,
      0.0055891317,
      0.0059784777,
      -0.035001673,
      0.003942311,
      0.014179947,
      0.008509378,
      -0.018698351,
      -0.015861101,
      0.022663971,
      0.0052612424,
      -0.027200682,
      0.0148693435,
      -0.02769929,
      -0.004458933,
      -0.008927482,
      0.004206373,
      0.0022164276,
      -0.0194658,
      0.011989038,
      -0.0005886459,
      -0.0004845958,
      0.004360621,
      0.010698714,
      -0.018041406,
      0.01588505,
      0.0123286825,
      -0.06458063,
      -0.0026689305,
      -0.008897428,
      -0.0046678134,
      0.027226038,
      -0.008583499,
      0.01627825,
      -0.016474096,
      0.0024448824,
      -0.0141045,
      -0.013635183,
      0.031980976,
      0.0005770156,
      0.0021304134,
      0.007300812,
      0.01841205,
      0.030635383,
      0.030671997,
      0.0051396503,
      -0.0007946929,
      0.022893373,
      -0.022102203,
      -0.009795339,
      -0.014282081,
      -0.00839573,
      0.0003259251,
      0.013991145,
      -0.005640482,
      -0.0136287995,
      -0.0028147686,
      0.00063087046,
      -0.02032103,
      -0.0012201391,
      0.035319503,
      0.0038361007,
      -0.0046273777,
      0.031062726,
      0.0039868294,
      0.009611738,
      0.0046747383,
      0.011880877,
      0.005497657,
      0.022059934,
      0.022784175,
      0.006451084,
      -0.001996655,
      0.0005760846,
      0.028047651,
      0.011799747,
      0.009901143,
      -0.035708904,
      0.008053955,
      -0.0023003945,
      0.022479806,
      -0.012627259,
      0.030902587,
      0.022330668,
      0.021994606,
      -0.026405351
    ]
  },
  {
    "id": "genai_cohort_nodejs_03_NodeJS_SystemDesign_VerticalScaling_vtt",
    "content": "All right, so welcome to the second 2 video of system design section. 3 And in this particular video, let's 4 understand how are we going 5 to solve this typical problem of 6 not able to handle so many requests. 7 Okay, so what is the fundamental 8 reason that you are not 9 able to handle the request? 10 Because you have a lot 11 of users, right? 12 The problem is that your machine 13 is just a 2 CPU and 4GB RAM. 14 And it was able to maybe handle 15 80 requests, it was able 16 to handle 90 requests, but. 17 But it eventually crashed 18 on 100 request. 19 So Piyush, if this. 20 Let's, let's do some 21 of the calculations, right? 22 Some, estimates. 23 This machine configuration, that 24 is a 2 CPU, 4GB RAM machine 25 can handle these many requests. 26 What if I spend some more money, 27 okay, And I double my configuration? 28 This time I can use a 4 CPU. 29 Okay, let's say a 4 CPU machine 30 and I can use an 8GB of RAM. 31 So what I'm basically doing is 32 I'm doubling on my resources. 33 I am spending some money 34 on the infrastructure, I 35 am upgrading my system. 36 And now can I say that my system can 37 actually handle somewhat, okay, 38 somewhat around, 170 to 200 request. 39 Can I say that? 40 Of course I can say that, right? 41 So that means when my users 42 increased and my server got 43 crashed, what should I do? 44 I should spend some money because 45 of course the business 46 is also increasing, right? 47 So now what I will do is I will 48 do 8gb of RAM and 4gb of CPU. 49 So this solves my problem. 50 Now, hundred users or maybe 110 51 users is not a problem for me 52 because now my system is tuned. 53 Now my system is capable 54 of handling 170 to 200 request. 55 So that means this was 56 a good solution to have 57 spend some more money. 58 And that's it. 59 You have your server up and running, 60 but now still, 61 still, still, still, still. 62 The problem is that if you 63 have 200 users or more than 64 200 users, like 250 users, your 65 server is going to crash. 66 Now what will you do? 67 Okay, you will say when I reach to 68 that threshold, that is 200 users, 69 I'll again spend some money. 70 And this time what I'm going 71 to do is I'm going to do 8 CPU 72 and I'm going to do 16GB RAM. 73 And this time I can maybe 74 handle 400 to, 500 users. 75 This is your new benchmark, right? 76 So now you have finally 77 spent some more money. 78 So now your machine is 79 even more upgraded. 80 You are, you know, 81 upgrading your machine. 82 You're spending some more money 83 on the machine, and now 84 you can handle 500 users. 85 So initially you were just able 86 to handle 80 to 90 users and now you 87 are able to handle 400 to 500 users. 88 And it's an upgrade, right? 89 It's a scale, right? 90 So this is one way 91 of scaling your servers. 92 And this technique is 93 known as vertical scaling. 94 So this is known as vertical scaling. 95 So what you basically do 96 in the vertical scaling is you add 97 more power slash resources 98 to the system or to the server. 99 So what is a vertical scaling? 100 That what you do, you basically spend 101 more money on the infrastructure, 102 you add more power 103 and resources to, to the server. 104 So this is your vertical scaling. 105 Now the pro is very good, right? 106 The pro there. 107 What is the pro of this 108 particular scaling stuff? 109 That you have more power, okay, 110 you have more power on server. 111 But there is a drawback, 112 There is a trade off. 113 There is a con of this particular 114 mechanism of this vertical scaling. 115 Number one, tell me one thing. 116 Maybe you have a flash sale, maybe 117 you have a sale on near Diwali 118 where you have a lot of users, you 119 are expecting a lot of users. 120 What will happen is you are 121 expecting some 3000 users, okay? 122 So for 3000 users you need more 123 CPU and more RAM. 124 So okay, you, you go 125 to the market, you invest more 126 in the CPU and and RAM. 127 So now you have 32 128 CPUs, which is a lot. 129 And now you have a 128GB RAM. 130 So now your system can even 131 handle more than 3,000 users. 132 That's good. 133 But on a typical day when the sale 134 is not there, on an average 135 you only have 200 users, let's say, 136 or 170 users or 150 users. 137 So do you, so do you really think 138 that this is, this money that 139 you're spending is worth it? 140 Because once in a year you need 141 this particular scale, that is 142 of 3,000 users, right? 143 But once you have already 144 upgraded your machine, once you 145 have already invested on it. 146 Now on an average day, on a typical 147 day you only have 150 users, right? 148 But you still have 32 CPUs 149 and 128GB RAM running. 150 So the problem is that 151 overall cost is more. 152 Okay? 153 So that means you are always 154 prepared for the best case. 155 You are always prepared for the sale. 156 So even if you are not running 157 a sale, even if you have just 80 158 to 90 users, you still have 32 CPU 159 and 128GB RAM, which is an overkill. 160 So most of your system 161 is sitting idle. 162 You are not using the system 163 to the full potential. 164 So this is one con that 165 you have second con is. 166 Okay, what happens Even if you 167 have upgraded too much, 168 you have 32 CPUs, which is a lot. 169 Okay? 170 You have invested good amount 171 of money and you have 128 GB of RAM. 172 But for some technical reasons, 173 this machine has some fault. 174 I'm not saying you that 175 it is not scalable. 176 I'm not saying you that it 177 cannot handle the load. 178 It can handle the load. 179 But for some reasons, something 180 technical failure happened 181 in this particular machine. 182 Some circuit went off, there was, 183 some kind of mishap, there was 184 some kind of power issue, or maybe 185 the motherboard got some spark. 186 Okay? 187 This machine is dead. 188 So now what happens? 189 Even if you have spent a lot 190 of money on your resources, right? 191 Even if you have spent a lot 192 of money on your resources, 193 your server is still down. 194 So you have a single point 195 of failure here, okay. 196 That if this server goes down, 197 there's a single point of failure. 198 Even though this machine was 199 a big, giant machine, 200 it was a very powerful machine. 201 But because of some technical 202 issues, this machine is off. 203 And now you have a single 204 point of failure. 205 So this is your vertical scaling. 206 Okay? 207 So. 208 So in this particular video, we have 209 understood what is vertical scaling. 210 So let's see how can we solve 211 these particular problems 212 in the next scaling strategy.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "03-NodeJS-SystemDesign-VerticalScaling.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/03-NodeJS-SystemDesign-VerticalScaling.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.010487869,
      0.0023807236,
      0.012938074,
      -0.06521183,
      -0.023261646,
      0.0071942667,
      0.02064549,
      0.014960435,
      -0.012222409,
      0.03743057,
      -0.01788212,
      -0.006473809,
      0.015255006,
      0.0027314213,
      0.11782405,
      0.0038740742,
      0.0100076,
      0.0156209925,
      -0.0000522798,
      -0.0055368817,
      0.0082183285,
      -0.0053125867,
      -0.021356627,
      -0.0061888467,
      0.00515169,
      -0.00006911349,
      0.011214303,
      -0.007735411,
      0.023786206,
      -0.012461151,
      -0.010329231,
      -0.010898661,
      -0.0088534085,
      0.021292578,
      0.0020303442,
      0.019960612,
      0.021182958,
      -0.0030130043,
      -0.021229181,
      0.018280404,
      -0.02034407,
      0.00032899858,
      0.005686323,
      -0.0069100107,
      -0.005354724,
      -0.021129698,
      -0.0025838083,
      -0.026527671,
      -0.0052536246,
      0.0032529507,
      -0.0057994034,
      -0.017755274,
      0.005671876,
      -0.17780614,
      -0.0055937534,
      0.0070169047,
      -0.011555912,
      -0.013760015,
      0.004623319,
      0.0034071526,
      -0.038687136,
      0.02710315,
      -0.0051215533,
      -0.0051702075,
      -0.026563337,
      -0.015348576,
      0.042914838,
      0.021611147,
      -0.0044049914,
      -0.009754595,
      0.017436052,
      -0.028872734,
      -0.0007163393,
      -0.016888797,
      -0.020319803,
      -0.029051915,
      -0.0018635074,
      0.006714848,
      -0.0149004115,
      0.012416937,
      -0.015727699,
      -0.024269436,
      -0.011472864,
      -0.018477853,
      -0.009772687,
      0.010918549,
      -0.009959225,
      -0.007885211,
      0.01125281,
      -0.009116524,
      -0.0013243875,
      0.0053084693,
      0.0023049375,
      0.011633618,
      0.014117034,
      0.006716486,
      -0.0046500885,
      0.005434168,
      -0.013959199,
      -0.009640962,
      -0.005613641,
      0.0013063559,
      -0.03879774,
      0.027579311,
      -0.013276964,
      -0.0051942565,
      0.0011773065,
      -0.018003061,
      -0.0030331903,
      -0.014904839,
      -0.007342461,
      0.005304607,
      0.0099426145,
      0.019175122,
      -0.014821471,
      -0.17539577,
      0.015257568,
      0.011820527,
      -0.010405184,
      -0.006986013,
      -0.019787751,
      0.006576289,
      0.037750915,
      -0.0072280657,
      -0.008106043,
      0.001239502,
      0.0027413594,
      0.006338638,
      0.00054139254,
      -0.0063220863,
      -0.022005746,
      -0.0015812563,
      0.0024395664,
      0.036255047,
      0.021165568,
      -0.0132372,
      -0.011448085,
      -0.02981073,
      -0.014812197,
      -0.030091524,
      0.0051826295,
      0.013793292,
      -0.0072297202,
      0.04045862,
      0.024111783,
      -0.0049540247,
      -0.031241298,
      0.011357803,
      0.0056192456,
      -0.029604038,
      0.014269226,
      -0.0011495925,
      0.019054187,
      0.008693369,
      0.029589843,
      -0.025826074,
      -0.016992344,
      0.019955948,
      0.00667173,
      -0.015204336,
      -0.004907062,
      -0.0010366074,
      0.00017862322,
      0.025639582,
      0.014896803,
      -0.007421185,
      -0.017863428,
      0.0022848046,
      0.008214059,
      0.001528696,
      -0.01441275,
      -0.009060492,
      -0.022136452,
      -0.0050831838,
      0.005455818,
      -0.015232916,
      -0.019721625,
      0.00778502,
      0.020622144,
      -0.0057715494,
      0.005770079,
      0.007358736,
      0.007937576,
      -0.017892126,
      -0.015342668,
      -0.03773451,
      -0.012536811,
      0.002483263,
      0.016896203,
      -0.005578723,
      0.015866233,
      -0.0060383887,
      -0.001749697,
      -0.015426369,
      0.0017986088,
      -0.038844116,
      0.015668808,
      0.0030935546,
      -0.0031482708,
      0.03250799,
      -0.004692744,
      -0.005899706,
      0.031496104,
      -0.011018885,
      -0.0047469055,
      0.008736546,
      0.015878595,
      -0.004645596,
      0.00033600294,
      0.0229945,
      -0.006206887,
      -0.021452345,
      0.010268746,
      0.0069127097,
      0.006393934,
      -0.0023807744,
      0.022675907,
      0.009068332,
      -0.0011038753,
      0.0013638743,
      -0.026107585,
      -0.009701561,
      0.0069720205,
      0.012520998,
      0.05370382,
      -0.00043601173,
      -0.00029941558,
      -0.012857113,
      -0.001300204,
      0.009627856,
      0.024019849,
      0.030030767,
      0.0040466096,
      0.008831189,
      0.0127507085,
      -0.0023090714,
      -0.012545657,
      0.022459436,
      0.002232478,
      0.024220848,
      -0.019794509,
      0.0012434216,
      -0.013834159,
      0.002150412,
      0.01400572,
      0.0017251426,
      -0.005191123,
      0.004881354,
      -0.01177495,
      -0.015471094,
      -0.0076027783,
      0.019235125,
      -0.00036368062,
      0.006822888,
      0.032526467,
      -0.033862144,
      -0.04387911,
      -0.014148671,
      -0.015938751,
      -0.008815135,
      0.003500388,
      -0.024152093,
      0.0066963783,
      -0.02289497,
      0.010230412,
      0.0036749898,
      0.0062435707,
      0.019346317,
      -0.0079548545,
      -0.0038292012,
      0.02339644,
      0.00840737,
      -0.033226214,
      0.00048355805,
      -0.0038353107,
      -0.0068506035,
      -0.07935529,
      -0.00598852,
      -0.0015725177,
      -0.012615563,
      0.010457122,
      0.006992152,
      0.00254975,
      -0.00040507774,
      0.006953996,
      0.014290882,
      0.005019733,
      0.020026688,
      0.018454652,
      -0.02084893,
      0.0037871613,
      0.009844203,
      -0.017336857,
      -0.0018489771,
      0.0072513153,
      -0.022153491,
      -0.027209671,
      -0.020580983,
      0.0011550195,
      -0.013586701,
      -0.0147137595,
      -0.010733541,
      -0.028271975,
      0.03411864,
      0.0023384483,
      0.009686604,
      0.008972546,
      0.024346499,
      -0.022039447,
      -0.01257086,
      -0.009447217,
      0.022666236,
      0.0005713709,
      -0.019461125,
      -0.007207819,
      -0.0036673588,
      -0.0056220936,
      -0.017279513,
      0.015139402,
      -0.0026165827,
      -0.014832108,
      0.009293728,
      -0.0011553612,
      0.021985613,
      -0.045075428,
      0.0034832158,
      -0.008757128,
      -0.0076111914,
      0.00047514893,
      -0.012855652,
      -0.0069621755,
      0.0087452745,
      -0.0060807187,
      -0.009385199,
      -0.012776499,
      0.020006295,
      0.011178272,
      -0.016873393,
      -0.008113897,
      -0.00056852266,
      0.022094533,
      -0.0020136486,
      -0.00684487,
      -0.009192318,
      -0.010288092,
      0.0006228945,
      0.010594979,
      0.0040448327,
      0.015338103,
      -0.039669033,
      0.032257944,
      0.008836336,
      -0.0063921288,
      -0.014248968,
      -0.022386353,
      0.032747317,
      -0.00042996593,
      0.01407694,
      -0.009547839,
      0.0065111765,
      0.011697501,
      0.00033287492,
      -0.002531151,
      0.0060174353,
      -0.025026476,
      -0.020923564,
      0.0025667548,
      0.029479094,
      -0.01616139,
      0.013699044,
      -0.026648613,
      -0.0008213431,
      -0.011929311,
      0.0036401586,
      0.004574418,
      0.025240326,
      -0.010570297,
      -0.011808132,
      -0.005503228,
      -0.021731596,
      -0.025449822,
      0.03569748,
      -0.0113234455,
      0.008194987,
      -0.0018260791,
      -0.023718009,
      0.017291285,
      -0.0033737079,
      -0.008406351,
      -0.006064748,
      0.0016801363,
      0.016201032,
      0.0023428532,
      0.012344963,
      0.0008529208,
      -0.013710297,
      0.005183359,
      0.0053902646,
      0.002481391,
      -0.005158159,
      -0.010931956,
      -0.010120126,
      -0.026983863,
      0.016150262,
      0.003974323,
      -0.020836135,
      -0.016794685,
      0.02682455,
      -0.009972081,
      -0.024683224,
      0.0012418118,
      -0.016131094,
      0.0062673697,
      0.011939468,
      0.0046336534,
      0.018288894,
      0.004072777,
      0.026363913,
      0.017259683,
      -0.017466916,
      -0.016629767,
      -0.0009993429,
      -0.008402623,
      -0.0013909098,
      0.007977496,
      -0.006123754,
      -0.01571431,
      -0.02531523,
      -0.015978282,
      -0.014384078,
      -0.0023375093,
      0.02594991,
      0.002956709,
      0.0071076164,
      0.015522856,
      -0.00730705,
      -0.0071990304,
      -0.018637247,
      0.0017843903,
      -0.0149777755,
      0.028496025,
      -0.00926296,
      -0.0007555016,
      -0.0033843038,
      -0.0031054365,
      0.011803386,
      0.006998731,
      -0.016446933,
      -0.027950214,
      0.0035461735,
      0.021225072,
      0.031827446,
      -0.0015675966,
      -0.016948937,
      0.012060174,
      0.0069045783,
      0.01355706,
      0.014382654,
      -0.022503907,
      -0.00010550397,
      -0.00233102,
      -0.0040886095,
      -0.010940771,
      0.008983819,
      -0.031770207,
      -0.0046019573,
      -0.01995457,
      -0.010921623,
      -0.0031168882,
      0.0076544373,
      0.022839343,
      0.0018229487,
      0.003585271,
      -0.0061147204,
      0.0015713371,
      -0.020477783,
      0.00013088605,
      -0.041184083,
      0.025452133,
      -0.022853542,
      0.02165765,
      -0.011953786,
      -0.0047061467,
      -0.016599568,
      0.016938603,
      0.013957443,
      0.0043734303,
      0.012497247,
      0.003247393,
      0.0037898924,
      0.018305093,
      0.037816737,
      0.012331017,
      0.0013731904,
      -0.0022003127,
      0.0073425467,
      0.027794614,
      -0.01526892,
      0.0030508453,
      0.0008857261,
      0.001144471,
      -0.0042903386,
      -0.00036556055,
      0.003460898,
      -0.010574938,
      -0.0040108333,
      0.024666803,
      0.017736603,
      -0.0075423145,
      0.03254518,
      -0.052383933,
      -0.0043251463,
      -0.012095143,
      0.013714152,
      -0.0006072777,
      0.017534934,
      -0.019345913,
      -0.0077936393,
      -0.011727992,
      -0.0029838157,
      0.0077182706,
      -0.013272583,
      0.03543567,
      0.037196685,
      -0.0074554686,
      -0.0094147585,
      0.033822693,
      0.01233079,
      0.0082326755,
      -0.007487434,
      -0.022680158,
      0.022626033,
      -0.015831312,
      0.0067587066,
      -0.0018459221,
      -0.0016386259,
      -0.025002917,
      0.0071351207,
      0.010187308,
      0.008242421,
      0.01313943,
      -0.020272397,
      0.012347919,
      -0.015342452,
      0.011061757,
      -0.12255565,
      0.0031193336,
      -0.01612096,
      0.0021677325,
      -0.031844728,
      -0.015142912,
      -0.0015539554,
      -0.025253976,
      0.01431168,
      -0.012722524,
      0.009750187,
      -0.007154216,
      0.0072398614,
      -0.00050842325,
      -0.010266745,
      -0.017805226,
      -0.004677926,
      0.021817928,
      0.031084165,
      0.004924473,
      0.021157132,
      0.00055865117,
      -0.008336074,
      0.018864617,
      0.0049402164,
      -0.018349348,
      0.012551462,
      0.015586968,
      -0.007055268,
      -0.007826551,
      -0.012680783,
      -0.008528009,
      0.0114734145,
      0.014271614,
      0.033139132,
      -0.02568602,
      0.010426482,
      0.0025196443,
      0.008718082,
      0.019772425,
      -0.005461071,
      -0.0033077078,
      0.0049256408,
      0.010765324,
      0.012398383,
      0.0013604674,
      0.002922922,
      -0.015863126,
      -0.011103254,
      0.04363731,
      -0.03423398,
      -0.0062986123,
      0.0055662533,
      -0.03299155,
      0.02353233,
      -0.00787367,
      0.022132559,
      -0.011763828,
      -0.018515222,
      0.005105485,
      0.0019456515,
      0.004364193,
      0.0015953445,
      0.025028408,
      -0.014273485,
      -0.023170466,
      -0.0013460462,
      0.01108371,
      0.014709294,
      0.006124869,
      -0.022834182,
      0.012707249,
      -0.0020198578,
      0.022848463,
      0.008472418,
      -0.017842667,
      -0.0041400557,
      0.005660802,
      -0.01777723,
      0.010049941,
      -0.024393233,
      -0.013005631,
      -0.07348771,
      -0.026274253,
      -0.009403312,
      -0.011907645,
      0.044097878,
      0.013813342,
      -0.021833682,
      0.02244328,
      -0.004690612,
      0.0070752827,
      -0.009563308,
      -0.0041181603,
      0.003261139,
      -0.0017712285,
      -0.0065698805,
      0.004244758,
      -0.0024215586,
      -0.01149326,
      -0.020304505,
      -0.018540557,
      -0.00471685,
      -0.015344409,
      0.023571396,
      -0.0074126087,
      0.0076177036,
      0.017764334,
      -0.018380182,
      -0.010182521,
      -0.0068469746,
      0.0051999744,
      -0.0090217255,
      -0.12551837,
      -0.026447384,
      0.017507454,
      -0.009528141,
      0.015676633,
      0.010212835,
      -0.0065559642,
      -0.028609296,
      -0.0016237111,
      -0.0040948056,
      -0.007997848,
      -0.019216118,
      -0.013609883,
      0.0049873707,
      0.011606159,
      0.15007229,
      -0.0070352773,
      0.0063840025,
      -0.013620749,
      0.024988573,
      -0.018056566,
      -0.0010547857,
      -0.0028757306,
      0.019265754,
      -0.023939468,
      0.013449232,
      0.011826175,
      -0.012397803,
      0.010874055,
      0.0025320798,
      0.017809922,
      -0.0040542963,
      -0.0028329587,
      0.00820879,
      0.009272327,
      -0.027260186,
      -0.00023285151,
      -0.0073078093,
      -0.0051938514,
      -0.04149208,
      -0.006240304,
      0.0032375262,
      -0.021532262,
      0.012659378,
      0.0025439188,
      -0.009157811,
      -0.0075849365,
      -0.010228085,
      -0.0027189525,
      -0.000034214696,
      0.0012766405,
      -0.088652775,
      -0.0081988,
      -0.0071430183,
      -0.009997012,
      0.009396084,
      0.013048427,
      0.028814513,
      -0.016712075,
      -0.009567154,
      -0.008024068,
      -0.0019052102,
      0.0166966,
      -0.0028637133,
      -0.003933283,
      -0.0028580127,
      0.010987778,
      0.020217704,
      0.021376446,
      0.01120535,
      -0.010280296,
      0.03638477,
      -0.00047184425,
      -0.0018145641,
      -0.021766054,
      -0.0026296184,
      -0.0147960875,
      -0.0036257165,
      0.00042168403,
      -0.01809473,
      -0.012953714,
      0.007294153,
      0.0020027636,
      0.007289924,
      0.033917073,
      -0.01895218,
      -0.017796366,
      0.030389989,
      0.012717677,
      -0.0069476124,
      -0.014380192,
      -0.0031722109,
      0.013500234,
      0.010692783,
      0.017518183,
      0.02127118,
      -0.0047205943,
      -0.0062963953,
      0.01517043,
      0.012073209,
      0.0146848615,
      -0.032332256,
      0.014821932,
      -0.0002783539,
      -0.0011521153,
      -0.005909032,
      0.023521481,
      0.016118137,
      0.007404412,
      -0.011544679
    ]
  },
  {
    "id": "genai_cohort_nodejs_04_NodeJS_SystemDesign_HorizontalScaling_vtt",
    "content": "All right, so now let me talk about 2 another scaling strategy that 3 is known as horizontal scaling. 4 Okay, so in the last video we have 5 already seen the vertical scaling. 6 So now this system, you know, what 7 are the pros and what are the cons? 8 Let's redesign the system. 9 This time. 10 What I'm going to do is we are 11 going to have a lot of users. 12 Of course, right? 13 We have a lot of users. 14 Instead of having one server, let 15 me just have first one server. 16 Let's say this is my one server. 17 And this server has a bare minimum 18 configuration that is CPU 19 and you have a 4GB of RAM, right? 20 So 2 CPU, 4GB of RAM. 21 This machine is capable 22 of handling maybe 70 to 80 people. 23 Now what happens as my load is 24 increasing, what I'm going to do is 25 I am going to add one more server. 26 I am not upgrading the server, 27 I am not touching the server. 28 I added one more replica, 29 one more copy of the server. 30 As my load increases, I am going 31 to add one more server. 32 But here is a problem. 33 Okay? 34 You can see that I have 35 added more servers. 36 But the problem here is how users 37 will know to which server to go. 38 Because technically, let's say this 39 server, has an IP of this thing. 40 Okay? 41 This is the original ip. 42 Now you are spinning up one 43 more new machine, the IP 44 address will be different. 45 You are spinning up one more machine, 46 the IP address will be different if 47 on your DNS because you 48 can only have one IP per domain. 49 If piyushgurk.dev okay.dev 50 is actually pointing to 2. 51 3. 52 4.5. 53 All the users are anyway redirected 54 to this machine only, right? 55 No one is going to this 56 and no one is going to this. 57 So the problem is that either you 58 have to create multiple domains, 59 you have to create something like 60 fuse kirk.hyhen1.dev then you 61 have to create, then you have to 62 buy one more domain that is like 63 two and then you have to buy one 64 more domain that is something 65 like this. 66 And then you have to basically 67 point them to respective servers. 68 And you have to ask the users 69 that please choose any randomly. 70 If that server is not working, 71 you can choose any other of them. 72 Either one of them is 73 for sure working. 74 That's not the right thing, right? 75 Because eventually everyone will 76 first try to go to first server. 77 If it is not working, go to here. 78 So there is going to be a chaos. 79 The problem here is that you 80 are not able to balance the load 81 between them and that's where 82 your load balancer comes in. 83 So whenever you do this kind 84 of Scaling, where you add 85 more servers, you add more replicas 86 of the same server. 87 You need something known 88 as a load balancer. 89 Okay, this load balancer, 90 is again a machine which 91 has its own IP address. 92 Okay, so let's say, the IP address 93 of this particular machine 94 is, you know, maybe nine. 95 Let's take nine. 96 So what you are going to do is on 97 your DNS, you are going to redirect 98 the users on your load balancer. 99 So there is no direct request. 100 You can just drop all these, 101 you know, direct requests. 102 So direct requests are 103 not allowed anymore. 104 What users need to basically do is 105 users will interact with what 106 users are going to make all the 107 requests to the load balancer, 108 and your load balancer internally 109 will balance the load between the 110 servers. 111 So first request to first server, 112 second request to second server, 113 third request to third server, 114 fourth request to the first server. 115 5, 6, 7, 8. 116 And this is known as round 117 robin load balancing. 118 Okay, so in round, round robin 119 load balancing, what happens? 120 First user goes to first 121 server, second user goes 122 to second, third, fourth, fifth, 123 sixth, seventh, eighth, ninth, 124 tenth, eleventh, twelve. 125 Round robin load balancing. 126 So this solves the problem 127 that now what happens is number 128 one, you are scaling number one, 129 you are scaling number two. 130 There is no single point of failure. 131 If this machine has some 132 technical issue, let's say 133 this machine is down. 134 Now you still have two machines. 135 If this machine is also down 136 for some reasons, right, you 137 still have one machine running. 138 So what you can do is you can 139 actually keep on spinning more 140 machines as your traffic grows. 141 So you know here that, you know, 142 one machine, okay, one machine 143 is capable of handling around 144 approximately 60 users, 145 let's say 60 to 70 users. 146 So when you have more than 60 loads, 147 keep another machine ready. 148 When you have 120 users, 149 keep third machine ready. 150 So this is how you scale. 151 And this strategy is known as 152 horizontal scaling. 153 Scaling. 154 So what is horizontal scaling? 155 Horizontal scaling 156 by definition means adding more 157 replica of the server is 158 known as horizontal scaling. 159 Okay, so in horizontal scaling 160 you add more replicas and to, 161 to actually balance the load 162 between multiple servers, because 163 now you have multiple replicas, 164 you need a load balancer. 165 Okay, so vertical scaling, adding 166 more power and resources 167 to a single server, horizontal 168 scaling, adding more servers. 169 And you know, most cloud providers 170 like aws, they give you something 171 known as auto scaling policy. 172 Okay, Auto scaling groups 173 and auto scaling policy. 174 So this is known as auto scaling, 175 asg, auto scaling group. 176 So what happens is you can define 177 a policy saying, okay, that if 178 my average CPU goes, okay, goes 179 above, let's say you know, 70% 180 keep another machine ready. 181 So this is known as scaling out. 182 Okay, scaling out policy, 183 which means that if the how many 184 machines are running, I don't care 185 when the average CPU utilization 186 is more than 70%, please keep 187 the another machine ready. 188 And similarly, if it goes okay, 189 if it goes below 70%, okay, 70% 190 for let's say more than one hour, 191 just kill all the machines 192 and keep one machine. 193 Okay, kill all extra machines. 194 So what happens when you 195 have a spike traffic? 196 You add more servers when this, 197 when the traffic is gone 198 on your typical day, you delete 199 all the machines and just keep 200 one or two machines ready. 201 So this is how you do auto scaling. 202 So this is a nice balance 203 between resources. 204 When you need them, you add them. 205 When you don't need them, 206 you just destroy them. 207 So this is known as 208 horizontal scaling. 209 So now you know two scaling methods 210 of a server, that is vertical 211 scaling and horizontal scaling.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "04-NodeJS-SystemDesign-HorizontalScaling.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/04-NodeJS-SystemDesign-HorizontalScaling.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.008838294,
      0.014859202,
      0.016340783,
      -0.05564,
      -0.025400896,
      -0.0046639843,
      0.023447987,
      0.009756097,
      0.0021934987,
      0.023776041,
      0.008415146,
      -0.0026858235,
      0.028213196,
      0.019616123,
      0.124020964,
      0.00048168094,
      0.0028438384,
      0.0016859825,
      0.0015116126,
      -0.013194242,
      0.02238175,
      -0.010306934,
      -0.010187778,
      0.015294766,
      0.004262085,
      -0.0018696301,
      0.01082789,
      -0.0070627,
      0.025897417,
      -0.010650121,
      -0.026678825,
      -0.0007458291,
      0.0022720948,
      0.03402241,
      0.001551998,
      0.007752572,
      0.025857408,
      0.007775021,
      -0.016595755,
      0.029013136,
      -0.009452574,
      -0.00005077112,
      0.011598746,
      -0.0071022147,
      0.0019422303,
      -0.013797433,
      -0.0005338697,
      -0.021555396,
      -0.012572848,
      0.0077872598,
      -0.019114533,
      -0.025871435,
      0.010831559,
      -0.17671092,
      0.0074393232,
      -0.0055986284,
      -0.011610193,
      -0.0034582338,
      -0.0056424886,
      0.009965836,
      -0.02292599,
      0.01010031,
      -0.009703265,
      -0.0056098555,
      -0.018444424,
      -0.0025499435,
      0.045890182,
      0.022963485,
      0.0021889948,
      -0.009053232,
      0.023016863,
      -0.012433851,
      0.0016392819,
      -0.0016762207,
      -0.017204404,
      -0.044602674,
      0.00067521684,
      -0.0054460894,
      -0.017376326,
      0.024403,
      -0.017903872,
      -0.015330894,
      -0.022968043,
      -0.013805104,
      0.0041604466,
      -0.009607782,
      -0.016410384,
      -0.012118194,
      0.019077737,
      0.01347813,
      -0.0045193527,
      -0.00030985213,
      0.0040563107,
      0.003105149,
      -0.00041177054,
      -0.0036595622,
      -0.00020455592,
      -0.0031438412,
      -0.015617497,
      -0.0064036567,
      -0.007032891,
      0.002591713,
      -0.034911312,
      0.041165862,
      -0.029570762,
      -0.0042788996,
      0.02465205,
      -0.008842176,
      0.0025368638,
      -0.010917078,
      0.0013024664,
      0.01014977,
      0.017363118,
      0.0165073,
      -0.0009930101,
      -0.16853681,
      0.015355362,
      0.0049696914,
      -0.015812121,
      -0.005195086,
      -0.014275032,
      -0.0010349135,
      0.018868221,
      0.005523027,
      -0.017737871,
      -0.008053508,
      0.003982171,
      0.0071547655,
      -0.0012939023,
      -0.009271822,
      -0.011149829,
      -0.013031248,
      0.0008851558,
      0.024047604,
      0.024827622,
      -0.0074911583,
      -0.014923542,
      -0.02848356,
      -0.014879384,
      -0.023290519,
      0.012171061,
      0.026300011,
      0.0013505231,
      0.044913888,
      0.008342815,
      0.0090117585,
      -0.032421235,
      0.013234883,
      -0.0074288948,
      -0.03547377,
      0.008510908,
      -0.014664615,
      0.01788161,
      -0.005023935,
      0.008660491,
      -0.015196778,
      -0.020519089,
      0.016369428,
      0.014861474,
      -0.0007271042,
      0.013536071,
      0.0045675077,
      0.0075094244,
      0.025928384,
      0.0073115355,
      0.007529326,
      -0.0050240783,
      -0.00033757364,
      0.008457403,
      0.01144992,
      -0.03623631,
      -0.023231553,
      -0.014669333,
      0.00019426427,
      0.014278842,
      -0.0146868965,
      -0.018880287,
      0.012156556,
      0.010615215,
      -0.017604679,
      0.0017295026,
      -0.0057964805,
      0.009205228,
      -0.027786428,
      -0.012892302,
      -0.034142204,
      -0.02389651,
      -0.003951844,
      0.025640216,
      -0.012966137,
      0.013121834,
      -0.014632692,
      0.0019162743,
      -0.018543532,
      0.0065686754,
      -0.035427853,
      0.00554268,
      -0.016378207,
      -0.009137112,
      0.030472701,
      -0.004040954,
      -0.008382966,
      0.018849783,
      -0.027491717,
      -0.0139411045,
      -0.0022681416,
      0.015574207,
      -0.024137544,
      0.0024825674,
      0.021650005,
      0.0041007344,
      -0.009955356,
      0.004902761,
      -0.007111939,
      0.017549772,
      0.019950269,
      0.020385914,
      0.009086969,
      -0.00011420732,
      -0.0061553894,
      -0.018673781,
      -0.005331329,
      0.0027012522,
      0.020789476,
      0.037279908,
      -0.0016256018,
      -0.013751515,
      0.0005986113,
      0.00014282632,
      0.0049423357,
      0.031871554,
      0.019188212,
      -0.009178143,
      0.01704423,
      -0.0012488755,
      -0.004475556,
      -0.012045132,
      0.020327518,
      -0.00505691,
      0.015767153,
      -0.023244737,
      -0.0011160616,
      -0.0018474123,
      0.008689511,
      0.024411788,
      0.013004548,
      -0.0018494972,
      -0.0028785751,
      0.0013315731,
      -0.00380003,
      -0.006968737,
      0.009744054,
      -0.008202443,
      -0.018583685,
      0.027333831,
      -0.018977646,
      -0.042590886,
      -0.02855696,
      -0.0056523555,
      -0.011351954,
      -0.004387476,
      -0.025854612,
      -0.013518558,
      -0.0055665206,
      0.00015560542,
      -0.010043047,
      0.012806258,
      0.016951455,
      -0.015980564,
      0.0053808265,
      0.025741491,
      0.00060671935,
      -0.023854185,
      -0.015374682,
      -0.0054530394,
      -0.0059594694,
      -0.07007486,
      0.014242263,
      -0.00010835483,
      -0.013179045,
      0.003288539,
      0.00047294138,
      -0.008718787,
      -0.008200962,
      0.003924954,
      0.023937937,
      0.0023499816,
      0.0012072999,
      -0.0024989075,
      -0.008759512,
      0.0057449467,
      0.012234231,
      -0.0078017567,
      -0.017059166,
      0.010451072,
      -0.023383906,
      -0.028452562,
      0.009994971,
      -0.011330451,
      -0.010270018,
      0.0023280366,
      -0.002973547,
      -0.026677223,
      0.020620333,
      0.018118504,
      0.0068846135,
      -0.002885567,
      0.028517665,
      -0.03386406,
      -0.007919597,
      -0.019376421,
      0.007096665,
      0.0112620415,
      -0.017837064,
      0.0026972904,
      -0.015798388,
      -0.0040770606,
      0.004632984,
      0.020242028,
      0.0055391025,
      -0.013898512,
      0.03043484,
      -0.009489499,
      0.019189991,
      -0.023315985,
      -0.0039828904,
      -0.0061350255,
      0.0048091807,
      0.008176573,
      -0.013175047,
      0.017273331,
      0.003318708,
      -0.02367145,
      -0.0061815404,
      -0.015522431,
      0.016066292,
      0.0012590311,
      0.0027101736,
      -0.0150656495,
      0.0022340612,
      0.018488001,
      -0.0034939526,
      -0.011012036,
      -0.012856395,
      -0.010187219,
      -0.007133525,
      -0.016909553,
      -0.016829714,
      0.019373953,
      -0.04933439,
      0.04328855,
      0.014274472,
      -0.0041884207,
      -0.007388407,
      -0.037016854,
      0.013762947,
      -0.0003140222,
      0.024071231,
      -0.0007129694,
      -0.0038655857,
      0.008910745,
      -0.00059807446,
      0.0010477656,
      -0.014410643,
      -0.012363822,
      -0.021981206,
      0.0019677354,
      0.02665794,
      -0.008643029,
      -0.005268039,
      -0.021633472,
      -0.002749391,
      -0.01579588,
      0.014373568,
      0.0212672,
      0.02247589,
      -0.03725442,
      -0.0056703584,
      -0.0060406863,
      -0.020108785,
      -0.015654683,
      0.031783044,
      0.005428901,
      -0.010227073,
      0.0034615875,
      -0.030018562,
      0.019702673,
      0.021310305,
      -0.003069295,
      0.0052179755,
      0.003767367,
      0.019811032,
      0.0045640096,
      0.014259018,
      -0.020941962,
      -0.013913178,
      -0.0011309464,
      0.009257501,
      0.008436699,
      0.0005375559,
      0.0028703355,
      -0.002758084,
      -0.0024904853,
      0.01275844,
      0.009974728,
      -0.025044804,
      -0.030850554,
      0.007851139,
      -0.00065195025,
      -0.013251024,
      -0.0031606103,
      -0.009335459,
      -0.0059391013,
      -0.0005704234,
      0.007901756,
      0.016842633,
      0.0028700302,
      0.021176038,
      -0.0000847224,
      -0.01946479,
      -0.013492305,
      0.0054686554,
      -0.017799167,
      -0.004662625,
      -0.00045178682,
      -0.004774255,
      -0.020472586,
      -0.016923929,
      -0.018588273,
      0.009141632,
      0.008993271,
      0.030730665,
      0.0017936071,
      -0.0107951,
      0.023484394,
      -0.012966126,
      0.0021536855,
      -0.018214947,
      0.007876569,
      -0.0150194485,
      0.025445662,
      -0.018884132,
      -0.009906105,
      -0.010351469,
      0.009077511,
      0.00480889,
      -0.007481601,
      -0.015132972,
      -0.033861123,
      0.00570806,
      0.011172924,
      0.024614036,
      -0.0015542498,
      -0.0068335533,
      0.005604257,
      0.018156594,
      0.017593741,
      0.0024742913,
      -0.021844931,
      -0.004364916,
      0.009014544,
      -0.009292408,
      0.007664451,
      -0.011192729,
      -0.02594346,
      -0.009908912,
      -0.020969905,
      -0.02492198,
      -0.015749032,
      0.013294994,
      0.013915747,
      0.0025876388,
      0.014680306,
      -0.012360205,
      -0.00065297075,
      -0.0050403387,
      0.011192801,
      -0.019724838,
      0.026320595,
      -0.013121731,
      0.015619797,
      -0.001639389,
      0.00040323214,
      -0.004241211,
      0.009494462,
      0.01572408,
      0.0088189505,
      0.011846729,
      0.018952683,
      -0.0056237723,
      0.015733605,
      0.024525305,
      -0.0018926591,
      0.017184358,
      -0.0012585341,
      0.0112843225,
      0.045237646,
      -0.00914136,
      -0.015113487,
      0.004738684,
      -0.011322222,
      -0.01510561,
      -0.0061704298,
      -0.002496324,
      -0.00983257,
      -0.011070118,
      0.025980989,
      0.014178024,
      -0.0057173558,
      0.025765426,
      -0.025273446,
      -0.012248686,
      0.017874628,
      0.0233198,
      -0.0063946685,
      -0.0017884319,
      -0.010888411,
      0.010886231,
      -0.007148799,
      -0.004881724,
      0.00028487007,
      -0.019369802,
      0.036301173,
      0.014451001,
      0.007582319,
      -0.021851588,
      0.02251227,
      0.021215525,
      0.007933936,
      -0.013638025,
      0.0014341951,
      0.036199786,
      -0.0105615705,
      -0.01045043,
      0.0013115787,
      0.0057206643,
      -0.026927518,
      0.007886702,
      0.0052492553,
      0.018989755,
      0.010535205,
      -0.015013346,
      0.015065336,
      -0.00538536,
      0.018928237,
      -0.12780179,
      0.00019029243,
      -0.017804597,
      0.01648229,
      -0.025653325,
      -0.0076752584,
      -0.014862385,
      -0.01891258,
      -0.008464227,
      -0.0039384756,
      0.011233566,
      0.004862972,
      -0.0057464284,
      -0.00028203946,
      -0.01938355,
      -0.017044267,
      0.0007277533,
      0.028976873,
      0.03509535,
      0.0043775192,
      0.019569272,
      -0.003004803,
      0.0025899955,
      0.016133212,
      0.012867558,
      -0.023833927,
      0.009399471,
      0.003865726,
      0.013004697,
      -0.0064175604,
      0.0053557768,
      -0.010270388,
      0.023573061,
      0.03070905,
      0.025774503,
      -0.016740989,
      0.00674765,
      0.011937359,
      0.013819362,
      0.015644684,
      0.012904256,
      0.005443184,
      -0.0011729001,
      0.009741308,
      0.0010461136,
      -0.010250661,
      0.0060718125,
      -0.0035653375,
      -0.010826734,
      0.030760331,
      -0.04293829,
      0.0067113447,
      -0.01641346,
      -0.024974046,
      0.025528345,
      -0.018523904,
      0.016383763,
      -0.005070946,
      -0.024534795,
      0.0018081976,
      -0.000115534735,
      0.016080037,
      -0.011308196,
      0.015484434,
      -0.012741762,
      -0.0034401098,
      0.0040968973,
      0.0038495057,
      0.009149284,
      0.014932459,
      -0.022174716,
      0.002909705,
      -0.00015918231,
      0.025237022,
      0.002435868,
      -0.0053095142,
      -0.012024614,
      0.00012325341,
      -0.015470154,
      0.019608282,
      -0.021662738,
      -0.009192959,
      -0.07588703,
      -0.021429172,
      -0.0113865305,
      0.012576475,
      0.03958377,
      0.003386876,
      -0.020298736,
      0.021872252,
      -0.0048669656,
      -0.0067644175,
      -0.02392554,
      -0.008775106,
      -0.008018,
      -0.016603235,
      -0.022251187,
      0.015165699,
      0.004315798,
      -0.01732213,
      -0.00825736,
      -0.016257737,
      -0.019414717,
      -0.03627258,
      0.013634969,
      -0.002550186,
      0.002049104,
      0.019155445,
      -0.021941222,
      0.002353402,
      0.0024786189,
      -0.006684135,
      -0.0039558583,
      -0.12788816,
      -0.023260986,
      0.002429929,
      -0.0059374683,
      0.005193403,
      0.006092132,
      -0.021579903,
      -0.015525022,
      0.0024343042,
      0.00064700167,
      -0.0011179001,
      -0.0167932,
      -0.0068048825,
      0.0044758366,
      -0.006360226,
      0.13883291,
      -0.006204145,
      0.008653466,
      -0.0015628089,
      0.013311428,
      -0.0011124393,
      -0.009954289,
      0.0038276005,
      0.01743752,
      -0.017610868,
      -0.0067516193,
      0.012404537,
      -0.017993262,
      0.012921866,
      0.00798119,
      0.030686779,
      -0.015351984,
      0.0005778881,
      0.0058903797,
      0.015472918,
      -0.03422934,
      0.018642902,
      -0.0045233765,
      -0.010683859,
      -0.02853311,
      -0.010074251,
      -0.015283255,
      -0.026272105,
      0.012189921,
      0.015244056,
      -0.0019718474,
      -0.012226764,
      -0.0038045777,
      0.018863179,
      -0.0063117757,
      0.0062257224,
      -0.07793985,
      -0.017945316,
      -0.0004300698,
      0.006371119,
      0.015495075,
      0.0077356487,
      0.03098834,
      -0.018599685,
      -0.0009604378,
      -0.016095314,
      0.0024077112,
      0.022522267,
      -0.01211032,
      0.009068592,
      -0.014478222,
      0.008209229,
      0.016164437,
      0.027721053,
      -0.007889499,
      -0.018013906,
      0.025448259,
      -0.01587637,
      -0.015203782,
      -0.029463634,
      0.0036624677,
      -0.009657724,
      0.024263568,
      0.0024433436,
      -0.0167914,
      0.0030096697,
      -0.0022077404,
      0.0071495054,
      0.014931475,
      0.053701654,
      -0.023972115,
      -0.02561544,
      0.021885267,
      0.004513358,
      -0.0034239558,
      -0.00052243576,
      -0.0019053156,
      -0.0050598807,
      0.019155208,
      0.00030564057,
      0.0015180509,
      -0.0019743226,
      -0.004502854,
      0.02365632,
      0.019776314,
      0.009134347,
      -0.044071786,
      0.023995455,
      -0.0128617585,
      0.005003109,
      0.0071129333,
      0.019535929,
      0.028372087,
      0.011948242,
      -0.011743091
    ]
  },
  {
    "id": "genai_cohort_nodejs_05_NodeJS_SystemDesign_DBScaling1_vtt",
    "content": "All right, so you have done a good 2 job in scaling your servers 3 both vertically and horizontally. 4 But guys, what about 5 this little piece? 6 What about the database? 7 Because when load increases, it 8 is not only about the server. 9 It's a good thing that you have 10 already scaled your server. 11 But your database also 12 becomes a bottleneck. 13 So let's understand how can 14 we scale the data layer, 15 also known as the database. 16 So one way is very simple that what 17 I can do is when my email know, 18 the scale is increasing, when my 19 users are increasing, I can also 20 give more compute power to my 21 database. 22 If my database was originally 2, 23 4 CPU, let's say 4 CPU, 24 CPUs, I can make it 8, I can 25 make it 12, I can make it 20, 26 I can make it like 36, right? 27 I can make it 128. 28 So what I can do is I can still 29 have a single database instance 30 running and then based on the 31 load, based on how many active 32 users I have, I can make this 33 particular database more 34 powerful. 35 So this is one way of scaling, 36 but still the same problem 37 number one single point 38 of failure that what happens if 39 this database goes down? 40 Secondly, what happens if 41 this database goes down? 42 My all data is lost. 43 So yes, you can make the databases 44 more powerful by adding 45 more CPUs and more power to it. 46 But that's not the right way 47 to scale a database. 48 Now you might be thinking 49 that how can we actually 50 scale a database, right? 51 Vertical scaling is good, it 52 works, it works out of the box. 53 But now you will be 54 thinking, hey Piyush, what 55 about horizontal scaling? 56 Let's add more databases. 57 So technically that is not possible. 58 You cannot add more databases 59 because database is not a server, 60 it's not a stateless thing. 61 It is something which holds a data. 62 So you cannot really scale a database 63 like this because let's say you 64 have some data here, you have some 65 data here, you have some data here. 66 So if you are actually 67 making it horizontal, how will 68 you keep the data in sync? 69 Are you also copying the data? 70 If you are copying the data, then 71 what's the point of scaling? 72 Or are you actually 73 dividing the data? 74 If you are dividing the data, then 75 how you will know that which data is 76 in which server instance? 77 So let's understand, how can we, 78 you know, scale the database 79 in this particular architecture? 80 Okay, the first way is actually 81 something known as having more 82 replicas, kind of like horizontal 83 scaling, but not exactly. 84 So we can say multi replica of db. 85 But in this particular scenario, 86 when we talk about multi replica 87 of db, we follow 88 an architecture or an algorithm 89 Known as master slave architecture. 90 In this particular thing, what 91 happens is you have one master, 92 this is your one master, 93 and you have multiple slaves, so 94 the size will be decreased. 95 Okay, so let's say you have one 96 master and you have four slaves. 97 And these are exact replica 98 of the database. 99 What happens that the main, 100 okay, the application always 101 inserts or always do the operation 102 on the master database. 103 Let's say you want to insert 104 something into the database, 105 so you always and always 106 do it in the master. 107 Okay, the master instance. 108 So let's say this is 109 the master instance. 110 Always do an insert 111 operation in the master. 112 So master has its own storage. 113 Let's say this is a storage 114 of the master. 115 So it is going to create a record 116 in its database periodically. 117 These slaves are basically 118 syncing themselves from 119 the master and they actually 120 maintain a copy of the data. 121 Okay, so this is not, 122 not real time, right? 123 This is not real time 124 because let's say some, 125 some data is inserted here. 126 So it will take some time 127 to propagate to get 128 copied of that data. 129 So what these slaves are going 130 to do is eventually, maybe 131 after a minute or so, they are 132 also going to update their local 133 copies with the exact data. 134 Now what happens is when your 135 application wants to retrieve 136 some data, rather than 137 disturbing, rather than making 138 all the requests to the master 139 instance, they can actually 140 choose one of the replica. 141 They can actually ask one 142 of the replica to give the data. 143 Now here is the thing. 144 If you want the accuracy, if you 145 want the accuracy and consistency 146 that hey, I want real time 147 data, I don't want any latency. 148 In that case, both read and write. 149 Okay? 150 Both read and write. 151 Goes to master. 152 Okay, goes to the master. 153 What am I typing for? 154 Inserts. 155 Inserts are always done on master. 156 If you are okay, if you are 157 okay with little delay of data, 158 read them from these slaves. 159 Okay, let me give you an example. 160 If you are watching a video 161 on YouTube, you have seen the count, 162 you have seen the like count. 163 So those counts and like count 164 are actually not real time. 165 Okay, Might be a video 166 has 10,000 views and you 167 are seeing 9,000 views. 168 Okay? 169 Because what happens is thousand 170 views are still yet 171 to be propagated in the slaves. 172 So where the data accuracy can 173 be little bit, little bit up 174 and down, that is where you can 175 actually use, actually read the 176 data from the slave and avoid 177 some load on the master 178 database. 179 For example, likes 180 on an Instagram post, right? 181 Views on a reel. 182 So all these kind of data or 183 analytics about something, 184 they can be read from the slave 185 rather than putting a load 186 on the master instance. 187 So this is one way 188 of scaling the database. 189 So this is, known as the replication 190 of the databases. 191 So these are known as read 192 replicas, okay? 193 These are known as read replicas. 194 And this one is known as 195 primary instance, okay?",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "05-NodeJS-SystemDesign-DBScaling1.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/05-NodeJS-SystemDesign-DBScaling1.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.007922143,
      -0.005642737,
      0.020798912,
      -0.065934256,
      -0.026314367,
      0.010918804,
      0.015889494,
      0.018409861,
      -0.0064297756,
      0.029213337,
      -0.004465676,
      0.012297188,
      0.02698466,
      0.029479252,
      0.12177171,
      0.0065127173,
      -0.01319475,
      -0.007479338,
      0.0005181278,
      -0.0132678235,
      0.00021033794,
      -0.026675018,
      -0.019953815,
      -0.0025562705,
      0.005204222,
      0.008625844,
      0.018186398,
      -0.0070276004,
      0.030697292,
      -0.01843743,
      -0.012444334,
      -0.01040438,
      0.0066839694,
      0.033955026,
      0.011016196,
      0.004505077,
      0.0023221537,
      0.009751048,
      -0.023121245,
      0.021101955,
      0.0015588885,
      0.015970375,
      -0.00051960524,
      -0.0042593107,
      0.011056736,
      -0.009377289,
      -0.0033510425,
      -0.026384188,
      -0.010432007,
      0.0062971287,
      0.004416259,
      -0.024838118,
      -0.0093868235,
      -0.17540832,
      0.018316932,
      0.003403017,
      0.0018245006,
      -0.011482717,
      -0.000508447,
      0.00076276646,
      -0.02329599,
      0.01580472,
      -0.012127958,
      0.0037249834,
      -0.011993453,
      -0.010401095,
      0.029153528,
      0.030578151,
      0.010464647,
      -0.011113632,
      -0.0044739256,
      -0.0018158245,
      0.008299298,
      -0.000059178252,
      -0.011213852,
      -0.04681218,
      0.00402119,
      0.0027108595,
      -0.019647082,
      0.021819666,
      -0.0064119594,
      -0.026117064,
      -0.017801538,
      -0.0027322615,
      -0.018372083,
      -0.00959955,
      -0.002588864,
      -0.020503214,
      -0.0041119214,
      -0.0071023297,
      -0.022706833,
      -0.010215559,
      -0.002579736,
      -0.0053472472,
      -0.009430243,
      -0.00581832,
      0.0028498052,
      -0.008772076,
      -0.012643174,
      -0.002118366,
      0.018808588,
      0.025575457,
      -0.04539112,
      0.02508052,
      -0.006215184,
      -0.010147758,
      0.002973451,
      -0.011038751,
      0.0055469284,
      0.009841074,
      -0.007182682,
      -0.000066750865,
      0.0014949807,
      -0.0014638623,
      0.0034685486,
      -0.16213083,
      0.017622989,
      0.00089527416,
      -0.011505055,
      0.001438581,
      -0.02055976,
      0.02146804,
      0.030710232,
      -0.0076060668,
      0.0021432969,
      0.0036363518,
      0.0019210549,
      0.0055709165,
      -0.018984877,
      -0.013009463,
      -0.02250504,
      -0.00063718145,
      -0.008143549,
      0.020871833,
      0.006377289,
      -0.006871827,
      -0.018906306,
      -0.030878356,
      -0.024764126,
      -0.029372929,
      0.014203952,
      0.041746397,
      0.0011471023,
      0.03502188,
      0.0054232012,
      0.0036867291,
      -0.025702525,
      0.0014320675,
      -0.014211355,
      -0.023343783,
      0.034717884,
      -0.002678216,
      0.024427988,
      0.0272861,
      0.03505092,
      -0.015229796,
      -0.014765175,
      0.012708798,
      0.00899587,
      0.011342936,
      -0.0088924775,
      0.0021439374,
      0.012713774,
      0.012470755,
      0.009807292,
      -0.0091071725,
      0.0019025255,
      -0.0017749466,
      0.0046913153,
      -0.0003605111,
      -0.03128755,
      -0.0048194486,
      -0.023825243,
      0.014746688,
      -0.006351089,
      -0.01533196,
      -0.013475107,
      0.021570735,
      0.019098163,
      -0.00799123,
      0.012236823,
      -0.01740487,
      0.017312074,
      -0.012810472,
      -0.02217183,
      -0.015143292,
      -0.015629582,
      -0.010470635,
      0.021897718,
      -0.006203209,
      0.028375423,
      -0.016028123,
      0.012176136,
      -0.011071481,
      -0.007677972,
      -0.036782745,
      0.01516979,
      0.0027462298,
      -0.00009383677,
      0.023421252,
      -0.010131524,
      -0.00028613576,
      0.00706457,
      -0.018212395,
      -0.014130303,
      -0.019513711,
      0.0209625,
      -0.03635871,
      0.0057216682,
      0.030032558,
      0.0011639235,
      -0.005054295,
      0.0010879973,
      -0.009407578,
      0.011183439,
      0.0034661838,
      0.027598834,
      0.0089835,
      -0.013127889,
      -0.022037074,
      -0.030793142,
      -0.0070301415,
      -0.0011704139,
      0.030922616,
      0.032408793,
      -0.010261935,
      0.003903587,
      -0.0048272796,
      0.020145133,
      -0.007243661,
      0.030973148,
      0.030058736,
      -0.026417775,
      0.012436079,
      -0.0035260424,
      -0.0056538717,
      -0.017756974,
      0.0060014795,
      -0.005039307,
      0.029306274,
      -0.012615104,
      -0.0051772017,
      0.00004707745,
      0.015073482,
      0.02482487,
      -0.0006139389,
      -0.018886225,
      -0.008686337,
      0.0038270266,
      -0.0043033827,
      0.01711493,
      0.009917214,
      -0.0024842622,
      0.006182866,
      0.030013435,
      -0.039308365,
      -0.050790243,
      -0.013841885,
      -0.013948782,
      0.0013809012,
      -0.006907251,
      -0.032023493,
      -0.0071105887,
      -0.014020539,
      -0.01189483,
      -0.001389244,
      -0.004673815,
      0.020450847,
      0.0013224632,
      0.009715964,
      0.038324896,
      -0.0030069945,
      -0.003427821,
      -0.01269189,
      -0.003448946,
      0.0058485055,
      -0.07647962,
      -0.0032956323,
      -0.0062795067,
      -0.015214617,
      -0.0033999933,
      0.007042794,
      0.0039296765,
      0.0101620825,
      -0.0017637428,
      0.022550719,
      0.009643613,
      -0.0060546123,
      0.0047440804,
      -0.021900633,
      0.013450141,
      0.0015534689,
      -0.0010709713,
      -0.008839724,
      0.023380056,
      -0.02321282,
      -0.028540695,
      -0.004067042,
      0.0003536711,
      0.0041700103,
      -0.006547763,
      -0.006615825,
      -0.014084392,
      0.0347175,
      0.015091782,
      0.005989728,
      -0.006869145,
      0.020299016,
      -0.025448797,
      -0.010308152,
      -0.023221588,
      0.017269345,
      -0.002798142,
      -0.025482588,
      -0.00409382,
      -0.007938896,
      -0.020700665,
      -0.0027655887,
      0.010766265,
      0.0057515474,
      -0.012908618,
      0.025946964,
      0.009799604,
      0.013578012,
      -0.019613666,
      -0.007947797,
      -0.0042748437,
      -0.011406793,
      0.010774973,
      -0.004947138,
      0.0032736242,
      -0.005011714,
      -0.013369897,
      -0.004606595,
      -0.0028733967,
      0.009413206,
      -0.00691851,
      0.0059203077,
      -0.01390421,
      -0.00036170558,
      0.016581725,
      -0.007947159,
      0.0041680117,
      -0.005758001,
      -0.00189855,
      -0.0065710573,
      0.014372291,
      -0.0067683877,
      -0.00859251,
      -0.027577866,
      0.044961534,
      0.026080374,
      -0.008323591,
      0.00032355258,
      -0.02981234,
      0.030810762,
      -0.0014690885,
      0.028859204,
      0.017422851,
      -0.009096325,
      0.020463785,
      -0.0071610045,
      0.0086218305,
      -0.027424488,
      -0.0028251375,
      -0.027219739,
      -0.008581288,
      0.02060085,
      -0.012263631,
      0.007220837,
      -0.022744603,
      0.007834932,
      -0.017658362,
      0.0062147183,
      0.001476002,
      0.02724384,
      -0.005827892,
      -0.0050662127,
      -0.009511977,
      -0.013997591,
      -0.0041920464,
      0.030510604,
      -0.016894018,
      -0.0044331267,
      -0.0014929685,
      -0.0010258185,
      0.025878701,
      -0.0019406993,
      -0.013816955,
      -0.0007858702,
      -0.0056734113,
      0.017941505,
      0.0076720365,
      0.0075933887,
      -0.007838911,
      -0.018304328,
      0.005637675,
      0.008030642,
      0.0024859116,
      0.0025767703,
      -0.025190786,
      -0.023283722,
      -0.032432612,
      0.0063458635,
      0.016534701,
      -0.019199736,
      -0.01743251,
      0.0047041154,
      -0.0025197645,
      -0.015160794,
      0.0028122053,
      -0.015565901,
      -0.006837657,
      0.005326056,
      0.0099537335,
      0.021929465,
      0.013247397,
      0.0035456892,
      0.0029322356,
      -0.011554129,
      -0.011220672,
      0.03579785,
      -0.0009148549,
      -0.020868558,
      0.0059192004,
      -0.008602283,
      -0.043483287,
      -0.030880447,
      -0.005120728,
      0.0064569255,
      -0.009301389,
      0.023797268,
      -0.027835123,
      -0.0063059065,
      0.011079373,
      -0.0009381545,
      0.0015197647,
      -0.012196226,
      -0.00013531672,
      -0.017026823,
      0.03186896,
      -0.0027217353,
      -0.017413476,
      0.002008646,
      0.0068161497,
      -0.00041870456,
      -0.0010379202,
      -0.009439648,
      -0.04949139,
      -0.011942635,
      0.010148742,
      0.015893508,
      -0.0010393598,
      -0.013148132,
      -0.0019673156,
      0.015490225,
      0.012129342,
      0.0072363983,
      -0.03486626,
      0.00019957662,
      -0.0023241672,
      0.0022312945,
      -0.009529403,
      -0.006924689,
      -0.015401639,
      -0.018027434,
      -0.011365542,
      -0.0071160328,
      -0.028674409,
      0.019167047,
      0.015876677,
      0.01489733,
      0.0036522595,
      -0.005513253,
      0.0020762181,
      -0.0047435933,
      -0.005089625,
      -0.015257922,
      0.024376959,
      -0.020812578,
      0.0014568194,
      0.0060140174,
      -0.020325929,
      -0.009258864,
      0.00018870398,
      0.023253186,
      0.028901065,
      0.013956156,
      0.009945388,
      -0.011559973,
      0.0069582975,
      0.021581078,
      0.016531164,
      -0.0149391815,
      -0.018151361,
      0.0048710946,
      0.04819979,
      -0.009427767,
      -0.0001382099,
      0.0059326338,
      -0.0053129657,
      -0.0063464707,
      -0.0075340085,
      -0.007854166,
      0.008839023,
      0.0040609464,
      0.015390224,
      0.011583344,
      0.004307084,
      0.023064813,
      -0.020167787,
      -0.003149798,
      0.0050437725,
      0.0050539775,
      -0.016898995,
      -0.008200737,
      0.012816328,
      -0.0059231916,
      -0.006864097,
      -0.006423049,
      -0.0045286007,
      -0.021459986,
      0.027569346,
      0.031733528,
      0.0044488106,
      -0.01416656,
      0.019563556,
      0.024068303,
      -0.00986126,
      -0.014438963,
      -0.015286507,
      0.04489778,
      -0.013699103,
      0.008784061,
      -0.0015369175,
      0.000335845,
      -0.017030658,
      0.0034885814,
      0.010990697,
      0.0012235384,
      0.0045526824,
      -0.026875159,
      0.03125822,
      0.010951172,
      0.031993568,
      -0.109383576,
      0.001416765,
      0.0045214,
      0.0030112774,
      -0.004090339,
      -0.016745355,
      -0.02232364,
      -0.023258405,
      -0.0018931453,
      0.000766847,
      0.006415954,
      0.00898378,
      0.0072769774,
      0.0035716114,
      0.004127971,
      -0.0085303895,
      0.008571523,
      0.036942393,
      0.026047884,
      0.0016921291,
      -0.0031754037,
      -0.003171438,
      -0.008255,
      0.015052383,
      0.0072383885,
      -0.009972232,
      0.016242582,
      -0.0038708919,
      0.0022444436,
      0.0024593195,
      -0.018366136,
      -0.026162717,
      0.010244015,
      0.023601592,
      0.018120438,
      -0.014116341,
      0.0039340737,
      0.004055238,
      0.014917064,
      0.009669235,
      -0.0011137445,
      -0.001860355,
      -0.009057961,
      0.009984364,
      0.022189004,
      0.0058624777,
      0.03391945,
      -0.0086621,
      0.0023892438,
      0.04776881,
      -0.040941868,
      -0.0018956952,
      -0.0056537236,
      -0.019453833,
      -0.012271218,
      -0.015160336,
      0.007376402,
      0.013200481,
      -0.035864286,
      0.0021130312,
      0.015657617,
      0.005345149,
      -0.0024530836,
      0.02284453,
      -0.02236222,
      -0.014771167,
      -0.0006816336,
      -0.0027393207,
      0.003488109,
      0.0153208515,
      0.000042430966,
      0.008078404,
      -0.0038436754,
      0.026852563,
      0.0043627745,
      -0.012308661,
      0.001884913,
      0.0012213761,
      -0.031242987,
      0.031624746,
      -0.014441329,
      0.0011740059,
      -0.068190604,
      -0.028122881,
      0.0014994119,
      0.010592675,
      0.028656462,
      0.008383448,
      -0.011650277,
      0.01869854,
      0.0046259426,
      -0.016784236,
      -0.025654623,
      -0.0016755136,
      -0.0010214366,
      -0.0046472955,
      -0.033991136,
      0.01979861,
      -0.00817829,
      -0.0066052913,
      -0.0057465583,
      -0.004138571,
      -0.007899516,
      -0.0072104055,
      0.006135533,
      0.0053115995,
      0.016336171,
      0.014138095,
      -0.0175048,
      0.0056932485,
      0.013247381,
      -0.011264487,
      0.017070107,
      -0.12999718,
      -0.027179666,
      0.026945116,
      0.005549894,
      -0.0065727127,
      -0.0009906442,
      -0.04092488,
      -0.021782963,
      0.0006687233,
      0.0006145215,
      -0.008623008,
      -0.0004948668,
      -0.016873734,
      0.013241145,
      0.017026907,
      0.13272572,
      -0.0033727337,
      -0.014317777,
      -0.0025463053,
      0.0006513376,
      -0.0026318913,
      -0.01923383,
      0.000029296767,
      0.02344835,
      -0.0116672125,
      -0.0034192645,
      -0.0074097305,
      -0.012247616,
      0.008133025,
      0.0069363066,
      0.030342514,
      -0.010980915,
      -0.007239255,
      0.014639432,
      -0.004098902,
      -0.011549484,
      0.017547851,
      -0.0010485965,
      0.008929014,
      -0.018890912,
      0.025667097,
      -0.004344638,
      -0.019119602,
      0.015427255,
      0.010338156,
      -0.0020009133,
      -0.012733249,
      0.0054706903,
      -0.00885863,
      0.019887675,
      0.0015362147,
      -0.073429026,
      -0.01649481,
      -0.01529906,
      0.0068568154,
      0.016078347,
      0.0060031987,
      0.038214933,
      -0.013659043,
      -0.009509571,
      -0.0025154063,
      -0.0028009021,
      0.0052746236,
      -0.0027662117,
      0.0017201747,
      -0.014746221,
      0.00648177,
      0.01342465,
      0.03894703,
      -0.0046388884,
      -0.02180034,
      0.026324602,
      -0.0083925845,
      0.000080487946,
      -0.03275272,
      -0.0028232732,
      -0.022227665,
      0.022064038,
      0.006413087,
      -0.022957161,
      -0.0045016673,
      -0.0019139233,
      -0.0063309246,
      0.0012424483,
      0.03683417,
      -0.028739544,
      -0.006304062,
      0.015436942,
      0.0138388425,
      -0.0012075142,
      0.005322951,
      -0.0015110694,
      -0.008751653,
      0.03532892,
      -0.0036727972,
      0.013703877,
      0.008178958,
      -0.0006984117,
      0.028680189,
      0.022058435,
      0.024144065,
      -0.037309553,
      0.018461708,
      -0.041173737,
      0.0037304838,
      -0.01402913,
      0.0070073265,
      0.018574921,
      0.020294718,
      -0.013006404
    ]
  },
  {
    "id": "genai_cohort_nodejs_06_NodeJS_SystemDesign_DBScaling2_vtt",
    "content": "All right, now let's understand 2 the other way of scaling 3 the databases on scale. 4 That is known as partitioning. 5 So let me show you what happens 6 in partitioning thing. 7 Let's take one instance 8 of the database. 9 So let's say that this 10 is your instance, okay? 11 What you can do is you can 12 actually create multiple instances 13 of your database. 14 These are multiple different, 15 different servers. 16 There is no redundancy, there 17 is no duplication of data. 18 Okay? 19 What you can do is in this case, 20 let's name these instances, right? 21 This is your instance zero. 22 So, so I'll just name it as zero. 23 This is your instance, one. 24 Okay, Then this is your 25 instance number two. 26 I'll just quickly name them. 27 And finally we have the five here. 28 Now what you can do is see 29 a lot of data is coming, which 30 I need to put it here, right? 31 So what I can do is I can actually 32 create a hash function where you 33 can, you can give me some key, 34 most probably the user id, and 35 this hash function will return an 36 index. 37 How can you return an index? 38 The simplest function is 39 take the ID and mod it with 40 the size of your instances. 41 How many instances do you have? 42 You have six instances, right? 43 Zero to five. 44 So I'll just say six. 45 Whatever is returned to me, I 46 will use that database to store. 47 Now what happens is, let's say 48 you are storing something. 49 So the data is basically divided it 50 into this six, six partitions. 51 Your some data is stored here, some 52 data is stored here, some data is 53 stored here, some data is stored 54 here, some data is stored here. 55 Now the best part about this 56 particular strategy, which 57 is known as partitioning, 58 the data is actually divided 59 into the multiple databases. 60 Okay? 61 So that means one database 62 is not storing the data. 63 Multiple databases are there 64 which are storing your data. 65 How to choose that, which 66 database is perfect for you, 67 you have a hash function. 68 So this is the simplest 69 hash function. 70 You can even write this hash 71 function in such a way that hey, 72 all the India traffic will go here, 73 all the US customer data will go 74 here, all the European, traffic 75 will go here. 76 You can even partition based 77 on the geolocation. 78 You can partition based 79 on the IP address. 80 You can partition it on the user ID 81 basis howsoever you want to do it. 82 So partitioning algorithm is yours. 83 But this is also one way of scaling 84 the databases where you can divide 85 the load between the databases. 86 For this particular approach, there 87 is this one problem that if you 88 have to do a, join lookup, for 89 example, some data is here and some 90 data is here, then you have to 91 query it from two tables and then 92 you have to join them manually in 93 your application. 94 So joining is not easy. 95 It can take time. 96 So that is one downside 97 of this particular method. 98 But yes, partitioning of databases 99 is again a popular strategy 100 to scale the databases. 101 That is by dividing the load into 102 multiple instances of the database. 103 Okay, so now you know two ways 104 to scale a database. 105 That is one is the multi replica. 106 So you can have redundancy. 107 But the only problem 108 is that data is late. 109 The data in the read replicas 110 are late and a master slave 111 architecture is followed. 112 Then is data partitioning that 113 you can actually spin up multiple 114 databases, independent databases 115 which can store the data. 116 And further you can even have 117 read replicas of every instance. 118 I mean it is going to be very 119 costly, but yes, you can do it. 120 Now this is the master. 121 Just a second. 122 Now this is the master database. 123 Then it has three replicas. 124 So this further scales 125 every partition by a lot. 126 So this is how you can actually 127 scale the databases as 128 well in the system design.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "06-NodeJS-SystemDesign-DBScaling2.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/06-NodeJS-SystemDesign-DBScaling2.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.01018699,
      0.0033708091,
      0.026127974,
      -0.06258354,
      -0.02969974,
      0.013274762,
      0.03911319,
      0.018487452,
      -0.00022580293,
      0.025551604,
      -0.0026241406,
      0.009736855,
      0.03695465,
      0.020011254,
      0.10831669,
      0.000021872213,
      -0.025039248,
      0.0017926362,
      -0.0053128735,
      -0.008600956,
      0.012884135,
      -0.012905015,
      -0.0023584503,
      0.00010287933,
      0.013098098,
      0.005035218,
      0.014594656,
      -0.015284566,
      0.021901703,
      -0.001864815,
      -0.02447506,
      -0.00908685,
      0.005567802,
      0.027952883,
      0.009616218,
      0.009420602,
      0.007103216,
      0.024439523,
      -0.017288554,
      0.020235036,
      0.0043195146,
      0.0048313052,
      -0.002043508,
      -0.0073639224,
      0.007379857,
      -0.011765178,
      -0.008662303,
      -0.008987884,
      -0.010253936,
      -0.00050418335,
      0.000021941578,
      -0.031906284,
      -0.012462041,
      -0.18494938,
      0.013268352,
      -0.005014348,
      0.008557882,
      -0.013201309,
      -0.007530908,
      0.011314237,
      -0.013930329,
      0.016230425,
      -0.017128518,
      0.010000422,
      -0.011098506,
      -0.010656,
      0.025027448,
      0.022597287,
      -0.010023297,
      -0.0176449,
      0.018561248,
      -0.016393004,
      -0.0060103745,
      -0.002076003,
      -0.022748921,
      -0.042755313,
      -0.0025625865,
      -0.0010149452,
      -0.0056072683,
      0.03131319,
      -0.0113606,
      -0.029356012,
      -0.011784956,
      -0.008351639,
      -0.01478104,
      -0.009386737,
      -0.008622313,
      -0.021481063,
      0.0066957315,
      -0.008333685,
      -0.022164442,
      -0.015999638,
      0.00393535,
      0.005235948,
      -0.0020216529,
      0.0019605106,
      0.013608731,
      0.00608094,
      -0.007962199,
      -0.018760862,
      0.020070212,
      0.00896493,
      -0.043619484,
      0.016783142,
      -0.01010917,
      -0.023133574,
      0.011845168,
      0.011307505,
      0.013067417,
      0.0039498885,
      0.014119196,
      -0.0030923649,
      0.0018331768,
      -0.0067815892,
      0.0126107605,
      -0.16493398,
      0.009002202,
      -0.0016958835,
      -0.0045112385,
      0.013157868,
      -0.009580464,
      0.02986954,
      0.022633206,
      0.0033772301,
      -0.007911861,
      0.004807076,
      0.007553044,
      -0.00501464,
      0.0012514417,
      -0.018586705,
      -0.025121506,
      0.0034418048,
      -0.007092872,
      0.014804482,
      0.0013889233,
      0.007917438,
      -0.022859436,
      -0.026726963,
      -0.018703384,
      -0.02622342,
      0.015644541,
      0.035281863,
      -0.008766675,
      0.03327583,
      0.0060862037,
      0.014176704,
      -0.023599181,
      0.016090248,
      -0.0018822856,
      -0.025810087,
      0.040753376,
      -0.0042346558,
      0.020373205,
      0.033288807,
      0.026183603,
      -0.028628118,
      -0.013674268,
      0.01720993,
      0.0046047503,
      0.022647113,
      -0.007141531,
      -0.0033920137,
      0.0050760014,
      0.019352743,
      0.010786732,
      0.0115485145,
      -0.0012466444,
      0.0030576799,
      0.01867497,
      0.017016219,
      -0.019632343,
      -0.015994184,
      -0.024620706,
      0.020288037,
      -0.010799277,
      -0.004690718,
      -0.017435422,
      0.020871453,
      0.0063820197,
      -0.012100165,
      0.009897916,
      -0.016305374,
      0.0147250155,
      -0.015123665,
      -0.008398649,
      -0.008022661,
      -0.007036693,
      0.0026756774,
      0.023848366,
      -0.008192923,
      0.0195439,
      -0.009784293,
      0.005386232,
      -0.0115721235,
      -0.0063553336,
      -0.037962884,
      0.018089395,
      0.0024790196,
      0.012736304,
      0.027218323,
      0.000116849384,
      0.0026504258,
      0.0138920285,
      -0.03024383,
      -0.010080688,
      0.003365357,
      0.017259793,
      -0.03264112,
      0.009242139,
      0.026167152,
      0.009755105,
      0.014087161,
      0.0028714968,
      -0.010619883,
      0.0033135081,
      0.005084603,
      0.01845071,
      0.00044004427,
      0.00056914275,
      -0.019179374,
      -0.027657347,
      -0.007735913,
      -0.0010793434,
      0.02331004,
      0.030591961,
      -0.013925853,
      -0.013754391,
      -0.012668528,
      0.001029606,
      -0.017583353,
      0.029855324,
      0.025303971,
      -0.021885412,
      0.01822927,
      -0.003079949,
      -0.015409489,
      -0.012958762,
      -0.0017498826,
      -0.015163848,
      0.019788941,
      -0.010817884,
      -0.0096239345,
      0.0012646514,
      0.027121622,
      0.028134964,
      0.0026360785,
      -0.003140861,
      0.004347734,
      0.0005431827,
      0.0035890338,
      0.01396306,
      0.004739933,
      -0.0026683102,
      -0.006128506,
      0.026957298,
      -0.021451963,
      -0.051098652,
      -0.010875867,
      -0.03779488,
      0.0011901474,
      -0.020900782,
      -0.027078006,
      -0.0143554825,
      -0.02504179,
      -0.00399176,
      0.013471276,
      0.0041933246,
      0.029566782,
      -0.019874135,
      0.010521755,
      0.040558994,
      -0.006885314,
      0.0038763955,
      -0.016522244,
      -0.011540114,
      -0.0038991892,
      -0.09025824,
      -0.008579203,
      0.00071334286,
      -0.016956849,
      -0.00051453616,
      -0.0000294098,
      0.00514935,
      0.017051807,
      0.00104379,
      0.026581798,
      -0.0038222866,
      -0.01069861,
      -0.008346494,
      0.0015068395,
      0.002177823,
      -0.0014825999,
      -0.00029456484,
      -0.019999702,
      0.01544799,
      -0.017492095,
      -0.017925128,
      0.002324984,
      0.00074813404,
      0.0016630038,
      0.015940368,
      0.009924196,
      -0.0082270885,
      0.037829317,
      0.0125352265,
      0.011559278,
      -0.0035910388,
      0.024244655,
      -0.024933016,
      -0.0056438847,
      -0.015985413,
      0.005384231,
      -0.0028599296,
      -0.019157674,
      0.004751182,
      -0.0074798544,
      -0.014693345,
      -0.0124331005,
      0.004722071,
      -0.0015307416,
      -0.0033260626,
      0.016074799,
      -0.008195667,
      0.011250863,
      -0.01456296,
      -0.010006987,
      -0.0033587602,
      -0.008491179,
      0.010670247,
      -0.010223941,
      0.009837892,
      -0.012878283,
      -0.024853013,
      -0.010441203,
      -0.018434176,
      0.012648183,
      -0.0054183165,
      -0.0015396648,
      -0.018540042,
      0.0051230947,
      0.019258246,
      -0.0053272676,
      0.0076415306,
      0.0011955125,
      -0.001000553,
      -0.021152694,
      0.020478567,
      -0.007376722,
      -0.0062947217,
      -0.031093132,
      0.024632948,
      0.025355333,
      -0.0073665497,
      -0.011663835,
      -0.034168243,
      0.022516528,
      0.002531039,
      0.038578983,
      0.0020107885,
      -0.016271787,
      0.0143051,
      -0.0058700824,
      -0.0049984013,
      -0.017529799,
      -0.010380185,
      -0.029027835,
      0.0024613691,
      0.013519756,
      -0.004116987,
      -0.00035561796,
      -0.021816036,
      0.01174704,
      -0.019606115,
      0.0131625505,
      0.00577811,
      0.016303208,
      -0.023841439,
      -0.006168402,
      -0.009396233,
      -0.015483455,
      -0.010219198,
      0.022069732,
      -0.014426189,
      -0.015638934,
      -0.004067325,
      -0.009679821,
      0.019991193,
      0.01045981,
      -0.016532153,
      -0.020570893,
      -0.01602277,
      0.019778073,
      0.02287474,
      0.018315565,
      -0.007782021,
      0.007530927,
      0.004468144,
      0.0040523107,
      0.011179091,
      0.010259294,
      -0.02891393,
      -0.028440764,
      -0.028193738,
      0.009474939,
      0.016520845,
      -0.024715632,
      -0.026733743,
      -0.0034115827,
      -0.025379641,
      -0.020406755,
      0.00712808,
      -0.014205013,
      0.0010117621,
      0.00629467,
      0.0071611535,
      0.021934567,
      0.007559976,
      -0.008677342,
      0.0038199187,
      -0.016621625,
      0.0045023863,
      0.020828033,
      -0.002943634,
      -0.020006243,
      0.0030956469,
      -0.021380099,
      -0.03565467,
      -0.033143576,
      0.0018971644,
      -0.0017021379,
      -0.0019857455,
      0.02491794,
      -0.0074347146,
      -0.007731383,
      0.0023340941,
      -0.008257098,
      0.015800403,
      -0.0037241327,
      -0.012571618,
      -0.011549236,
      0.019889923,
      0.006159076,
      -0.017957097,
      -0.009827804,
      0.009218783,
      0.012121545,
      0.0012355857,
      -0.008833636,
      -0.03631906,
      -0.010176469,
      0.013205958,
      0.009817907,
      0.007827852,
      -0.03199049,
      0.0020322932,
      0.007708295,
      0.01318461,
      0.0140470965,
      -0.028431341,
      0.010546028,
      -0.0047675623,
      0.014972792,
      0.0047699576,
      -0.011407008,
      -0.0110143665,
      -0.017666182,
      -0.008953901,
      -0.0075997408,
      -0.017638564,
      0.0074014817,
      0.01279255,
      0.03068659,
      0.0050715124,
      -0.011020444,
      0.012781813,
      -0.0093742525,
      -0.00815984,
      -0.01891436,
      0.012529809,
      -0.016401006,
      -0.0037797324,
      0.003671923,
      -0.022939608,
      -0.011360955,
      0.006222478,
      0.03360291,
      0.026836433,
      0.0114639765,
      0.011443545,
      -0.014956455,
      0.0013986459,
      0.029619956,
      0.022497753,
      -0.0039676027,
      -0.012804262,
      0.0001786647,
      0.06411268,
      -0.016523002,
      0.009110295,
      -0.0022546544,
      -0.008116811,
      -0.007068841,
      -0.002643711,
      0.005465019,
      0.020313956,
      0.0064179003,
      0.020755243,
      0.024627715,
      0.009674925,
      0.018952819,
      -0.025490293,
      -0.004963537,
      -0.0026704334,
      0.00061802793,
      -0.017838908,
      -0.005273289,
      -0.010529219,
      0.0032789495,
      -0.009477281,
      -0.011918266,
      -0.010584756,
      -0.02465801,
      0.029351695,
      0.017346596,
      0.0023661992,
      -0.02298108,
      0.009826909,
      0.017061174,
      -0.003521293,
      -0.006488236,
      0.0025514148,
      0.036619082,
      -0.017667264,
      0.0018973505,
      0.005022685,
      0.004568014,
      -0.015561963,
      0.0073340363,
      0.018407123,
      -0.00067175133,
      0.01097615,
      -0.017458217,
      0.030620864,
      -0.0015468871,
      0.022817584,
      -0.11096601,
      0.0022640964,
      0.003622084,
      0.0066991476,
      0.0027840422,
      -0.0132271405,
      -0.03417464,
      -0.0319101,
      -0.014072235,
      -0.0019655174,
      0.00380482,
      0.023782732,
      0.00023043918,
      -0.008339197,
      -0.003079713,
      0.0010095814,
      0.003974368,
      0.039666835,
      0.022596909,
      0.010801844,
      -0.00012770509,
      0.009980574,
      -0.0077144825,
      -0.002882409,
      0.015506347,
      -0.0010490553,
      0.0070038484,
      0.018918606,
      0.00068646175,
      -0.012135877,
      -0.022845304,
      -0.013337966,
      0.012486702,
      0.019951537,
      0.011571163,
      -0.0076754093,
      0.0073534665,
      0.0071833334,
      0.0018833332,
      0.016459228,
      -0.00721268,
      0.001269617,
      -0.0065874564,
      0.013780345,
      0.011494735,
      0.0047269384,
      0.021098677,
      -0.0062322556,
      0.008945787,
      0.04126209,
      -0.026667539,
      0.016145337,
      -0.013820806,
      -0.01810638,
      0.0040079653,
      -0.005900905,
      0.011218331,
      0.011728773,
      -0.016043343,
      -0.0028207013,
      0.012273651,
      0.016134115,
      0.0075913114,
      0.014598418,
      -0.01148762,
      -0.009308841,
      -0.0031703888,
      0.0011314435,
      0.009635351,
      0.0009516509,
      -0.006150046,
      0.008922351,
      0.0038302313,
      0.027610924,
      -0.0026225562,
      -0.01445542,
      0.0024292713,
      0.0049705775,
      -0.030965777,
      0.018944615,
      -0.026131917,
      0.0029120396,
      -0.068622194,
      -0.017476307,
      -0.00023713158,
      0.0038689931,
      0.028199118,
      0.031847402,
      -0.028370595,
      0.020429665,
      0.0063002524,
      -0.0065013506,
      -0.019819358,
      -0.0051349564,
      -0.0026418408,
      -0.010779994,
      -0.021740435,
      0.015695132,
      -0.008654431,
      -0.0068657272,
      -0.012869603,
      0.004496647,
      -0.0019864612,
      -0.026282093,
      0.011879144,
      0.013720244,
      0.010984326,
      0.016955318,
      -0.013107138,
      0.008351765,
      -0.0036911056,
      -0.0058382303,
      0.024706386,
      -0.118281126,
      -0.0383186,
      0.017856749,
      -0.0029046452,
      0.0022388343,
      -0.0030621937,
      -0.024593705,
      -0.023775736,
      -0.005511514,
      -0.0020769292,
      -0.0040319497,
      -0.014878985,
      -0.01817731,
      0.005785877,
      0.010602509,
      0.1337269,
      -0.018634375,
      -0.014215833,
      -0.004958227,
      0.0075090597,
      0.00039847105,
      -0.019239157,
      0.0011426391,
      0.02647753,
      -0.014002433,
      0.0011249194,
      -0.0047422242,
      -0.0036202688,
      0.0005356233,
      0.0062258383,
      0.011832592,
      -0.0033790786,
      -0.013892593,
      0.023293635,
      0.008027693,
      -0.022558302,
      0.00024863108,
      0.005101905,
      0.016165588,
      -0.010145655,
      0.021175772,
      -0.0116435,
      -0.0015192415,
      0.01131061,
      0.0049688015,
      0.0048707835,
      -0.013697027,
      0.00075425947,
      -0.004908398,
      0.013497687,
      -0.0008977823,
      -0.07304135,
      -0.014838097,
      -0.015848154,
      0.010356801,
      0.013699591,
      0.0029721798,
      0.028933119,
      -0.011727727,
      0.0015496797,
      -0.008501447,
      0.0005681833,
      0.012613367,
      0.001978741,
      0.015527527,
      -0.016377004,
      0.009602777,
      0.017756663,
      0.030150281,
      0.0023057645,
      -0.025094531,
      0.015692815,
      -0.006261,
      0.010333933,
      -0.0191234,
      -0.0017703493,
      -0.005344919,
      0.035365127,
      0.012027189,
      -0.01783929,
      0.0019846437,
      0.007989499,
      -0.025010955,
      0.00062502775,
      0.025406437,
      -0.027579071,
      -0.007396972,
      0.026959214,
      0.009940358,
      -0.011246641,
      0.009513235,
      -0.011152196,
      -0.019110922,
      0.027598979,
      -0.016811388,
      0.012187331,
      0.0068143574,
      -0.01561209,
      0.016759483,
      0.031969864,
      0.017201683,
      -0.044488613,
      0.0123695545,
      -0.030655717,
      0.010747183,
      -0.020472527,
      0.006700464,
      0.020122832,
      -0.004036392,
      -0.0048481813
    ]
  },
  {
    "id": "genai_cohort_nodejs_07_Nodejs_SystemDesign_Monolith_vtt",
    "content": "All right, so in this particular 2 video, let's understand something 3 known as monolith architecture. 4 So monolith architecture is 5 actually a very common thing, 6 and that is something we 7 have been already doing. 8 Okay? 9 So till now you already have 10 a knowledge about horizontal 11 scaling, vertical scaling, 12 and how to scale databases. 13 Now let's understand what is this 14 monolith architecture, okay? 15 Now in reality, how the whole 16 workflow happens is that you 17 have a source code, right? 18 Now what is a source code? 19 Source code is something 20 that you write, that you 21 as a developer writes. 22 And what you do, you push 23 this particular source code 24 to the GitHub, right? 25 To your Git, GitHub or 26 whatever you are using. 27 Now this source code, which is 28 your Node JS course in our 29 case, has a lot of endpoints 30 and has a lot of services. 31 For example, if you're building an E 32 Commerce application, this source 33 code has authentication code. 34 It has all the payment code, it 35 has all the order code, it has all 36 the, let's say, payment, payment 37 processing order, and all 38 the emailing and notification code. 39 Now this code is packaged 40 into one single repository, 41 pushed onto the GitHub. 42 And then what you do, you basically 43 create a server out of it, right? 44 So let's say this is my server, okay? 45 So this is my server. 46 So you pull this particular 47 code from the GitHub. 48 And now this is a, server. 49 Let's say your application is 50 running on port number 80. 51 Now this particular port 80, 52 the server contains all the code 53 you can, your authentication 54 code, your payment code, 55 your orders code, and even 56 your, you know, emailing code. 57 All the code is in this 58 particular service. 59 Now this particular thing is known 60 as a monolith architecture because 61 everything is in single server. 62 Now what happens is, let's assume, 63 let's, you know, take something 64 that this order service is 65 something which is very busy. 66 Let's take, because authentication 67 is not that busy, because let's 68 say users have already signed up, 69 they are not doing something. 70 Payments are also okay. 71 It is not that much. 72 But orders is something 73 which is actually very 74 overwhelming coming, okay? 75 People are fetching their 76 orders again and again. 77 And it is a very, very, very 78 expensive and very, you 79 know, highly used route. 80 Now what happens is, because 81 people are making a lot of request 82 on the order service, your 83 server is getting overwhelmed. 84 You have to horizontally 85 scale your server. 86 So see, what I'm doing is 87 I'm basically horizontally 88 scaling my server, right? 89 And now what will happen because 90 I'm doing a horizontal scaling, 91 you need some kind of a, 92 reverse proxy, a load balancer. 93 So let's say nginx is 94 our load balancer. 95 So your request basically 96 goes to this nginx. 97 Not from the GitHub. 98 My basically the users will interact 99 from NGINX and NGINX will 100 load balance these servers. 101 Now, understand one thing. 102 In this particular architecture, 103 because it was a monolith 104 architecture, all these 105 servers have same code. 106 Now, even your AUTH server, 107 AUTH service has six codes. 108 Your payment also has six instances. 109 Your order also has six instances. 110 Just because you wanted to scale 111 the order service, you actually have 112 to scale all the servers at once. 113 Because we are here following the, 114 monolith architecture. 115 So monolith architecture is 116 basically, that is all your 117 code into one single code 118 base deployed on a server. 119 And then when you want to scale, you 120 basically scale the whole server. 121 So there is no segregation behind 122 the services, right in between 123 services, there is no segregation. 124 Everything is just one. 125 If you want to scale out, 126 you have to scale everything. 127 If you want to scale in, you have 128 to scale in everything. 129 So this is known as 130 a monolith architecture. 131 There are very common practices. 132 A lot of companies use this monolith 133 architecture because it is simpler 134 to implement and, you know, 135 it gives scaling out of the box. 136 And in the next particular 137 video, let's understand 138 the reverse of monolith. 139 Like, how can we break this 140 particular thing, monolith, and what 141 that thing is known as?",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "07-Nodejs-SystemDesign-Monolith.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/07-Nodejs-SystemDesign-Monolith.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.009153137,
      0.016813867,
      0.017657805,
      -0.069577605,
      -0.022948269,
      0.015416822,
      0.022141838,
      0.007384898,
      -0.0069523854,
      0.0259697,
      -0.0024824247,
      -0.00010585916,
      0.0038693587,
      0.030660432,
      0.12501882,
      -0.0060709524,
      -0.013967421,
      -0.0057092365,
      0.0034143464,
      -0.022622043,
      0.017395737,
      -0.012664792,
      -0.0008761201,
      0.022659421,
      0.0030396131,
      0.0063852337,
      0.0017444388,
      0.0033304065,
      0.024484184,
      -0.012317307,
      -0.01028207,
      -0.0056415997,
      -0.014345095,
      0.027984032,
      0.0013845791,
      0.005621802,
      -0.0032483223,
      0.010589347,
      -0.03288521,
      -0.00029875373,
      -0.014613564,
      0.0034740232,
      0.0063136714,
      -0.013789484,
      0.020716472,
      0.00831458,
      -0.0015587341,
      -0.04307983,
      0.0024890366,
      0.0026015588,
      -0.003968775,
      -0.005564271,
      -0.00015510194,
      -0.17052898,
      -0.0014828366,
      0.017323084,
      -0.0015029175,
      -0.003716465,
      -0.012125328,
      0.023370527,
      -0.04052974,
      -0.004991553,
      -0.014877836,
      0.009816816,
      -0.019518498,
      -0.015204888,
      0.048341032,
      0.015880141,
      -0.0010407323,
      -0.029560378,
      -0.0018478099,
      0.012628116,
      -0.0034747322,
      -0.005194053,
      -0.017622774,
      -0.0034036385,
      -0.0027179522,
      0.005230568,
      -0.017221447,
      0.014634227,
      -0.028996533,
      -0.020396018,
      -0.014996408,
      -0.019976163,
      -0.015757548,
      0.004786634,
      -0.031461168,
      0.0029024035,
      -0.0019674848,
      0.011422946,
      0.009016868,
      0.008695722,
      0.0012716444,
      -0.002168644,
      0.004343954,
      0.00850821,
      -0.01812022,
      -0.0023886154,
      -0.0009830031,
      -0.009133254,
      -0.0075104637,
      0.012950321,
      -0.02588839,
      0.015436943,
      -0.011290996,
      0.004483508,
      0.0002300391,
      0.010473453,
      0.021454442,
      -0.0015347685,
      -0.00009766687,
      -0.007839149,
      0.006353637,
      0.02644932,
      0.00429873,
      -0.17152189,
      0.03571179,
      -0.011191184,
      -0.0000038667226,
      0.0006600451,
      -0.014263934,
      0.0003461518,
      0.027867714,
      -0.0017840487,
      -0.022844413,
      -0.0011959614,
      0.005789027,
      0.027200755,
      0.0014940805,
      0.006107827,
      -0.011044808,
      -0.012058949,
      -0.015243764,
      0.025644584,
      0.018319359,
      -0.0075854757,
      -0.004083634,
      -0.02247005,
      -0.0200223,
      -0.036451794,
      0.02181221,
      0.03858071,
      -0.0022803065,
      0.032271963,
      -0.006564972,
      0.015157046,
      -0.019615993,
      0.002477017,
      -0.020265492,
      -0.034541056,
      0.012807968,
      0.00392656,
      0.007705846,
      0.0045683137,
      0.020802485,
      -0.0343966,
      -0.021586087,
      -0.0036409083,
      0.029910104,
      -0.015461602,
      0.011225412,
      -0.0014642763,
      0.011198521,
      0.007891518,
      -0.0058866628,
      0.0051926365,
      -0.010855407,
      -0.0042408705,
      0.020485383,
      0.017392965,
      -0.022521935,
      -0.0012019657,
      -0.019196162,
      0.00062744593,
      -0.0012788551,
      -0.027711408,
      -0.03069309,
      0.009058607,
      0.026844636,
      -0.008513841,
      -0.005685935,
      -0.0014093379,
      0.008539809,
      -0.031229874,
      -0.0082675,
      -0.013282932,
      -0.033205085,
      0.007212943,
      0.022656318,
      0.0038067873,
      0.021701694,
      -0.019867938,
      -0.01526733,
      -0.012080453,
      0.013467055,
      -0.011579487,
      0.0049753026,
      0.011916636,
      0.009537019,
      0.020494604,
      -0.01088099,
      -0.019236887,
      0.0128966905,
      -0.043065824,
      -0.0016681819,
      0.024798008,
      0.015657602,
      -0.010119168,
      0.0212409,
      0.028190434,
      -0.0029856695,
      -0.0046718908,
      0.009818713,
      -0.0046067564,
      0.007713463,
      -0.004150162,
      -0.001428109,
      0.019415021,
      0.006266581,
      -0.0005289111,
      -0.015520474,
      -0.016769528,
      0.01300261,
      0.023510052,
      0.027394652,
      0.0012371616,
      0.012552337,
      -0.0067862594,
      -0.0014406518,
      -0.0058853594,
      0.022681292,
      0.024922611,
      -0.0049013635,
      0.0025114838,
      0.011013224,
      0.008107107,
      -0.01591461,
      0.014033635,
      -0.009724251,
      0.019411638,
      -0.021972645,
      -0.009495589,
      -0.0022411484,
      0.006051195,
      0.038691502,
      -0.0048797065,
      -0.012976465,
      0.00015921058,
      -0.010953681,
      -0.0062509296,
      -0.018323569,
      0.004335015,
      -0.0071607656,
      -0.009149863,
      0.028365897,
      -0.015075853,
      -0.04196538,
      -0.0028129583,
      -0.015508598,
      -0.017842969,
      0.0024558268,
      -0.013637267,
      -0.01122218,
      -0.010951228,
      0.012815301,
      -0.0013058195,
      0.011812976,
      0.024669055,
      -0.0028941992,
      0.019460302,
      0.0060641035,
      0.007385543,
      -0.009656177,
      -0.0076003424,
      0.0158416,
      0.0280159,
      -0.07515046,
      -0.010264506,
      0.0026467696,
      -0.028091397,
      -0.013281408,
      -0.0021689776,
      -0.014971566,
      0.012189259,
      0.01968269,
      0.008285031,
      0.0027523295,
      0.000825197,
      0.014016611,
      -0.0077504762,
      0.0030211504,
      0.0057001943,
      -0.008189652,
      -0.02167216,
      0.02604166,
      -0.021751402,
      -0.02188301,
      0.0043291696,
      -0.0020777145,
      0.01024044,
      -0.0040672077,
      -0.019558309,
      -0.020058498,
      0.03678952,
      0.020242741,
      -0.0012557944,
      0.01657232,
      0.023307396,
      -0.031047173,
      0.010076143,
      -0.022660945,
      0.004712312,
      0.023787295,
      -0.021925202,
      0.010304958,
      0.0013975479,
      -0.008388977,
      -0.019481163,
      0.019728508,
      0.02469299,
      -0.005482203,
      0.0063654333,
      0.0024552469,
      0.01387774,
      -0.019767722,
      0.0014577586,
      -0.0061029056,
      -0.0200672,
      0.012698308,
      -0.020253582,
      -0.0032121313,
      -0.0062910398,
      -0.0129599385,
      -0.005292202,
      0.026888715,
      0.023484267,
      -0.018305702,
      -0.014315894,
      -0.017945377,
      0.013111803,
      0.00483068,
      -0.001463481,
      -0.020734366,
      -0.025253043,
      0.010892897,
      -0.013327469,
      0.0006888854,
      -0.005089473,
      -0.0056058494,
      -0.031017976,
      0.028400455,
      0.00956283,
      0.00033193783,
      -0.006307285,
      -0.025290713,
      0.014402138,
      -0.0047325655,
      0.021135855,
      0.017834574,
      0.023537708,
      0.018594462,
      0.0047800713,
      0.01962335,
      -0.00889893,
      -0.020870036,
      -0.010724092,
      0.014064615,
      0.016692705,
      -0.0040001627,
      -0.0053114183,
      -0.030480802,
      0.009509784,
      -0.009946425,
      0.0072131953,
      0.00049441966,
      0.0304039,
      -0.026282752,
      -0.024690092,
      0.0011119003,
      -0.010276064,
      -0.018364469,
      0.022570536,
      -0.017672282,
      -0.012603242,
      0.0017708116,
      -0.0203426,
      0.0010539442,
      0.011281697,
      -0.016080765,
      -0.007663785,
      -0.0040630195,
      0.009961259,
      -0.002580582,
      0.0027433475,
      -0.00707351,
      -0.004475142,
      0.00027481193,
      -0.0034146456,
      0.0031674025,
      0.0049275905,
      0.0039295712,
      -0.0025259778,
      -0.009566023,
      0.021645948,
      0.0017382598,
      -0.009595422,
      -0.03290774,
      -0.0028144508,
      -0.0119303595,
      -0.00809486,
      -0.008088683,
      -0.017275643,
      0.015387283,
      0.0063951514,
      0.012510108,
      0.020477466,
      0.0012106135,
      0.012868056,
      0.0054979706,
      -0.01891292,
      -0.0126442695,
      0.01600075,
      -0.01736949,
      -0.0019335271,
      0.00422058,
      -0.002461028,
      -0.027893066,
      -0.008223588,
      -0.0047822357,
      -0.009787825,
      -0.014609345,
      0.033458173,
      0.007042569,
      0.011991199,
      -0.0031568478,
      -0.014031754,
      -0.004668299,
      -0.005697137,
      0.005975117,
      -0.02745269,
      0.012838427,
      0.01063535,
      -0.006853132,
      0.0066464916,
      0.0068555376,
      0.010142429,
      -0.004064035,
      -0.02769265,
      -0.035575744,
      0.018391252,
      0.028797626,
      0.019504761,
      -0.0006554213,
      -0.024691386,
      0.010652173,
      0.0027703992,
      0.007063268,
      0.0026721556,
      -0.021427965,
      0.009818527,
      0.0023616853,
      0.012139214,
      0.011763745,
      -0.01899162,
      -0.03973716,
      -0.0041937847,
      -0.019370796,
      -0.010223591,
      -0.037280157,
      -0.0028415355,
      0.013999347,
      0.0014777016,
      0.012872759,
      -0.00932845,
      0.007345049,
      0.009240527,
      0.0016528296,
      -0.018740095,
      0.017962813,
      -0.032992817,
      0.016717069,
      0.00730931,
      0.009016507,
      -0.012784116,
      0.0067554293,
      0.01568175,
      0.019922238,
      0.011626813,
      0.0015686534,
      -0.007109822,
      0.02536882,
      0.023435073,
      0.020968413,
      -0.00041179417,
      -0.028905654,
      0.013318232,
      0.03057821,
      -0.013321869,
      0.008882663,
      -0.01603524,
      0.004571033,
      -0.0141914645,
      -0.016036596,
      0.0076115774,
      0.002158664,
      -0.0099207675,
      0.015585513,
      0.015491279,
      0.0006907927,
      0.015690668,
      -0.03264914,
      0.014894712,
      0.009180602,
      0.0027664958,
      0.01954271,
      -0.0015508339,
      -0.012604433,
      -0.0042293756,
      -0.0030976445,
      -0.0030479087,
      -0.0025039024,
      -0.011767177,
      0.021804556,
      0.019237341,
      -0.009860099,
      -0.008952851,
      0.022468295,
      0.025037976,
      0.0058373297,
      -0.011582592,
      -0.031080907,
      0.028295914,
      0.0041357963,
      0.01133766,
      0.00044208148,
      -0.002095169,
      -0.017970214,
      0.0073386803,
      0.004093099,
      0.010121288,
      -0.00026689496,
      -0.02735811,
      0.015785305,
      0.0002712801,
      0.01528137,
      -0.119909555,
      -0.01090016,
      -0.0056253024,
      0.009713525,
      -0.012830292,
      0.0066218073,
      -0.0023172733,
      -0.024751844,
      -0.011969927,
      -0.006294421,
      -0.0036296386,
      0.0024509411,
      -0.001127388,
      0.021212727,
      -0.009956817,
      -0.011345612,
      -0.021768797,
      0.02919878,
      0.04029661,
      0.0012750317,
      0.009221891,
      0.0049950173,
      -0.0077752965,
      0.018199014,
      -0.0066769794,
      -0.005695389,
      0.023008158,
      -0.0068258755,
      0.009010676,
      -0.014512511,
      -0.012521658,
      -0.011931592,
      0.00548478,
      0.023919202,
      0.029206578,
      -0.020999316,
      0.007800232,
      0.023136603,
      0.0076142773,
      0.019565267,
      0.0041629025,
      0.024415052,
      -0.010883085,
      0.013889185,
      0.013313108,
      0.01455221,
      0.0221526,
      -0.007957417,
      0.0083453115,
      0.04988427,
      -0.031744294,
      -0.013878355,
      0.00094745075,
      -0.02277159,
      0.00912868,
      -0.0042967065,
      0.019367484,
      -0.009766321,
      -0.019226016,
      0.017006068,
      0.005571705,
      -0.0057040155,
      0.009147516,
      0.029866537,
      -0.018079268,
      -0.013328533,
      0.0064481576,
      -0.0014627496,
      -0.0004393711,
      -0.0019916187,
      -0.00008994461,
      -0.0121068135,
      -0.017495468,
      0.0037119791,
      -0.004401493,
      0.012017572,
      -0.022323556,
      0.0030593348,
      -0.019696202,
      0.02426431,
      -0.0336646,
      -0.005037903,
      -0.07805965,
      -0.0305066,
      -0.015095796,
      0.010002298,
      0.037061263,
      0.008395661,
      -0.018309122,
      0.010337521,
      -0.013848248,
      -0.0001033338,
      -0.030750616,
      -0.02536756,
      -0.0017396864,
      0.0003850268,
      -0.008510792,
      0.014752794,
      0.01576793,
      -0.018561289,
      -0.028772177,
      0.0029776685,
      -0.004225842,
      0.0039184876,
      0.026085565,
      -0.0046490114,
      -0.000930958,
      0.026860498,
      -0.04340538,
      -0.0017794862,
      0.00017742362,
      0.007715804,
      -0.004415483,
      -0.11872445,
      -0.014565573,
      0.030201213,
      -0.005641785,
      0.0061473954,
      0.012728976,
      -0.01225576,
      -0.035519317,
      0.0140213445,
      -0.01107549,
      0.008841192,
      -0.0075721676,
      -0.00077203615,
      0.01042346,
      -0.0046434733,
      0.13049804,
      0.0014878793,
      0.011453204,
      0.00071087194,
      0.016697912,
      -0.022021987,
      -0.0074391225,
      0.0077532865,
      0.012144898,
      -0.0033122576,
      -0.0038384905,
      0.012569956,
      -0.018610545,
      0.03783616,
      0.018792013,
      0.026203794,
      -0.01461836,
      -0.026241302,
      -0.004439999,
      -0.0036057804,
      -0.024257755,
      0.019243807,
      0.0027948818,
      -0.0037075086,
      -0.01869859,
      0.010467452,
      -0.020739226,
      0.0023041964,
      0.0120941475,
      0.011301262,
      0.0167042,
      -0.0060219266,
      -0.012723139,
      -0.0007755353,
      -0.004913183,
      -0.0025176387,
      -0.07179556,
      -0.016671432,
      -0.015726445,
      0.0049197,
      0.010789951,
      0.0067186337,
      0.031703465,
      -0.03334455,
      -0.0035789234,
      0.0040865457,
      0.0051710415,
      0.014874823,
      0.017002726,
      0.0062570437,
      -0.018656245,
      0.014483101,
      0.02645636,
      0.02744509,
      -0.0025984186,
      -0.02801217,
      0.017499154,
      0.009142165,
      -0.005296287,
      -0.023440924,
      -0.009256805,
      -0.003776234,
      0.018286709,
      0.000101281505,
      -0.031794425,
      0.0048615905,
      -0.008088314,
      0.014402531,
      -0.007148182,
      0.025498709,
      -0.01549278,
      -0.01745379,
      0.011049485,
      0.0064334646,
      -0.019190108,
      -0.013445006,
      0.02336474,
      -0.0004460478,
      0.036511883,
      -0.0017422853,
      0.012136671,
      -0.006774308,
      0.015488265,
      0.023000011,
      0.032815788,
      0.014918553,
      -0.029265905,
      0.03936627,
      -0.015848717,
      0.02601217,
      -0.0033842963,
      0.014774824,
      0.04144333,
      0.012683654,
      0.0070426096
    ]
  },
  {
    "id": "genai_cohort_nodejs_08_Nodejs_SystemDesign_Mircoservice_vtt",
    "content": "All right, so now what we can do 2 is now to make it more scalable 3 and independent, what we can do is 4 we can break down our source code 5 into multiple source codes. 6 Okay? 7 So now in this particular 8 scenario, what we can do is I 9 will actually maintain four 10 different repositories for. 11 So I will just say four 12 different projects. 13 I will maintain. 14 One project is going 15 to be my auth service. 16 Okay? 17 Service, not service. 18 I'll just say service. 19 Then I will have a payment 20 service which is an independent 21 server, independent code, okay? 22 Independent running on a port. 23 I will have an order service, okay? 24 And then I will have 25 an email service. 26 Now the best part about breaking 27 this down is, number one, 28 now all the services 29 are isolated from each other. 30 That means these services can have 31 their independent databases. 32 Independent tech stack. 33 For example, you might write 34 auth service in Python. 35 You might, okay, you might write 36 your payment services in Golang. 37 You might write your order service in 38 Node JS, that is your JavaScript. 39 And you might write your 40 email service again in the node js. 41 There is also a possibility that your 42 auth server can use a MongoDB as a 43 primary database and rest of the 44 services can actually rely on a 45 postgres or some other database in 46 this case. 47 Okay? 48 So let's say this is also using 49 postgres, this is also using your, 50 you know, postgres, and this 51 is also using your postgres. 52 All right, now what happens is how 53 you basically deploy these services. 54 Number one, you have to deploy 55 them separately and every 56 service can have their 57 different auto scaling policy. 58 Let me just create a diagram for you. 59 Let's assume that this 60 is your auth service. 61 Okay? 62 So I'll just name it as auth service. 63 Let's say this auth service is 64 written in Python language. 65 Okay? 66 Now auth service is 67 somewhat not that busy. 68 So let's say I want three 69 instances of auth service. 70 That is it. 71 Okay, so this is your one, 72 and this service, will have its own 73 load, reverse proxy. 74 Okay? 75 Or a load balancer. 76 So this is a load balancer, which 77 is load balancing between 1, 78 this, 2, and this is the third one. 79 That's great. 80 Now if I copy this particular 81 thing, let's have another one. 82 You know, completely isolated. 83 Let's say this is your 84 payment service. 85 You want your payment service 86 to be very highly available. 87 And you know you will have 88 much more servers here. 89 So let's say you have more servers. 90 You again have a reverse proxy. 91 I mean a load balancer. 92 And this is also done. 93 Okay, now let's say your 94 order Service is something 95 which is very busy, right? 96 That is what we discussed. 97 So in your order service you 98 actually have more data, more 99 servers right here to deploy. 100 So let's rename it as order service. 101 Okay, Order service. 102 So now you have a lot of servers 103 for your order service. 104 Now see, we are 105 independently scaling. 106 Okay, so I'll just paste it here. 107 And then finally let's also 108 have our email service. 109 Now let's say email service 110 is a very simple service. 111 You know, there is not much 112 load in the email service. 113 So I'll just have two servers. 114 So let's remove that. 115 So now this is your 116 microservice architecture, micro 117 service architecture. 118 Because what you are basically 119 doing is you are breaking 120 down these concepts. 121 You are breaking down all 122 the services and routes 123 into their separate service. 124 Now the best part is the AUTH service 125 can be scaled independently that if 126 more request is coming, you can just 127 scale auth service tomorrow. 128 Let's say authentication service has 129 more load, just add one more server. 130 For the AUTH service, you need not 131 to touch payment service, you need 132 not to touch the order service. 133 One more advantage is that let's say 134 in your monolith architecture 135 something failed in email. 136 Something failed. 137 Okay? 138 There was a bug in your email code 139 due to which this whole 140 server is going to crash. 141 Due to which this whole 142 server is going to crash. 143 So that means the problem in one 144 service, that is email service can 145 lead to crash of the whole system. 146 But that is not the case here. 147 If in this particular scenario 148 the email service is causing 149 an issue, only and only 150 the email service will go down. 151 Rest all services, that is your 152 order service, your payment service 153 and your authentication service 154 will still work as fine. 155 So this is the main advantage 156 of microservice architecture. 157 There is of course a drawback 158 or a cost associated with 159 the microservice architecture 160 that now you have to maintain 161 a lot of servers, right? 162 The cost is high. 163 You have to monitor, 164 you have to maintain. 165 You have to maintain a lot of code, 166 a lot of segregation about the code. 167 And you have to maintain a lot 168 of new repositories, right? 169 For every service you have 170 to create a new source code. 171 You have to maintain a source code. 172 And monitoring can be sometimes 173 very difficult and it is 174 costly on infrastructure. 175 It costs a lot of money. 176 Okay, now there are two more 177 fundamental problems with 178 the microservice architecture. 179 Number one, how will user decide 180 that where to route the request? 181 Should I talk to the AUTH 182 server, Should I talk to 183 the payment service or should I talk 184 to the order service. 185 This is one fundamental problem. 186 Second fundamental problem 187 in microservice architecture 188 is how these services 189 can communicate to each other. 190 For example, when an order is 191 successful, maybe it want 192 to talk to the payment service 193 that hey, is this, 194 have you received this payment? 195 Or maybe the order service wants 196 to talk to email service 197 to send an email to the user. 198 So how this communication 199 will happen? 200 So this is one fundamental problem 201 which we are going to understand 202 in the upcoming videos.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "08-Nodejs-SystemDesign-Mircoservice.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/08-Nodejs-SystemDesign-Mircoservice.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.008630196,
      0.0052408245,
      0.011739962,
      -0.058823675,
      -0.015802365,
      0.0019669498,
      0.026683582,
      0.010461519,
      -0.005663924,
      0.015744304,
      0.003043122,
      0.021564784,
      0.007903788,
      0.030608421,
      0.13114029,
      -0.006123914,
      -0.010858632,
      -0.000014056285,
      -0.0043064565,
      -0.012762106,
      0.0064842384,
      -0.0029461312,
      -0.0075788815,
      0.026527463,
      0.010639319,
      0.02263275,
      0.022887804,
      -0.0056372345,
      0.005015818,
      -0.010477401,
      -0.019946631,
      -0.013031408,
      -0.001887677,
      0.034535173,
      0.01306809,
      -0.0074615874,
      0.007097694,
      0.0021512464,
      -0.028354922,
      0.0016476929,
      -0.018373156,
      0.008064719,
      0.004401956,
      -0.001769794,
      -0.00049773086,
      0.009574272,
      -0.0036631317,
      -0.019587917,
      0.007850729,
      -0.0033242626,
      0.011560876,
      -0.009798698,
      0.011977621,
      -0.1854425,
      0.006090601,
      -0.0038313207,
      -0.0009689185,
      -0.015002319,
      0.003971471,
      0.019306447,
      -0.03520289,
      0.013275337,
      -0.01656437,
      -0.00019928263,
      -0.008050127,
      -0.012203264,
      0.029272329,
      0.021806663,
      -0.010374799,
      -0.018232832,
      0.0017255967,
      0.009326042,
      -0.016753046,
      -0.010875006,
      -0.02009285,
      -0.016085725,
      -0.0048561245,
      -0.003327204,
      -0.010647015,
      0.021657377,
      -0.011703204,
      -0.027480457,
      -0.016295336,
      -0.008739657,
      -0.005728865,
      0.012314707,
      -0.021779044,
      0.003184561,
      0.0032444885,
      0.012762625,
      0.0014693411,
      0.0060547977,
      -0.0020551195,
      -0.0003084363,
      -0.0003477247,
      0.011157507,
      -0.013665104,
      0.0032006355,
      0.0015675158,
      -0.019715983,
      0.0060028927,
      -0.00024088754,
      -0.030291572,
      0.021689245,
      -0.0031412467,
      -0.0029463754,
      0.004756724,
      0.0017273001,
      -0.00751747,
      -0.022558285,
      -0.01868512,
      -0.018320989,
      0.01732745,
      0.01148084,
      0.005947505,
      -0.16782853,
      0.028997283,
      -0.0009085423,
      -0.008399799,
      -0.0073828227,
      -0.0036775107,
      0.0012216145,
      0.010130873,
      0.008286448,
      -0.027335934,
      0.0032756354,
      0.003984312,
      0.015494214,
      0.005247278,
      0.005510781,
      -0.0038020532,
      -0.016324684,
      -0.021451604,
      0.01974588,
      0.010180353,
      -0.012372733,
      -0.018667793,
      -0.02174038,
      -0.025308859,
      -0.024368294,
      0.008329339,
      0.023484746,
      0.00075925275,
      0.02999594,
      -0.018782036,
      0.008104307,
      -0.011166813,
      0.012483138,
      -0.016489469,
      -0.05698309,
      0.03422731,
      0.0002249364,
      0.006765965,
      -0.00932766,
      0.023455547,
      -0.028973624,
      -0.027134456,
      -0.0017372635,
      0.010416585,
      -0.01790923,
      -0.00031881165,
      0.010379783,
      0.0101935165,
      0.009731913,
      0.011425438,
      0.009291156,
      -0.0024900176,
      0.0053289197,
      0.011851336,
      0.008421816,
      -0.011335146,
      -0.01598543,
      -0.011813924,
      0.006537506,
      -0.0023848778,
      -0.005334521,
      -0.02391632,
      0.009766953,
      0.01627871,
      -0.015244238,
      0.009254922,
      -0.011001626,
      0.01644127,
      -0.020883266,
      -0.008394315,
      -0.026382867,
      -0.0336822,
      0.0075732446,
      0.017616546,
      -0.017693838,
      0.023417,
      -0.0013132386,
      -0.004345786,
      -0.02146046,
      0.017375408,
      -0.022718767,
      0.0072850455,
      0.019438175,
      -0.003528874,
      0.02571312,
      -0.00973307,
      -0.019628273,
      0.008257845,
      -0.038762596,
      -0.0017847915,
      0.0019294092,
      0.016033381,
      -0.018192166,
      0.006593818,
      0.029255537,
      0.0044183605,
      -0.017555181,
      0.005500761,
      -0.00536991,
      0.001996132,
      -0.010424946,
      0.01336521,
      0.00912019,
      -0.010363276,
      -0.010868823,
      -0.010923681,
      -0.018687908,
      0.0049975473,
      0.021454839,
      0.025484651,
      -0.010025379,
      0.011191747,
      -0.017920824,
      0.008024406,
      -0.0048074326,
      0.026512854,
      0.02858799,
      0.0018122998,
      -0.0021576607,
      0.021691538,
      -0.010816931,
      -0.007332332,
      0.0324901,
      -0.005939126,
      0.022311984,
      -0.027685037,
      -0.018775137,
      -0.0013541864,
      0.010291631,
      0.029025499,
      -0.019353546,
      -0.0043934095,
      -0.008061287,
      0.0060474994,
      -0.0145866,
      -0.0010492887,
      0.000782883,
      0.008275312,
      -0.01585804,
      0.023028214,
      -0.027790584,
      -0.033490192,
      -0.00054913474,
      -0.019284302,
      -0.00874655,
      -0.006844842,
      -0.026480902,
      -0.010982243,
      -0.018557629,
      0.010352055,
      -0.0075164717,
      0.012290466,
      0.014122589,
      -0.003250154,
      0.026660567,
      0.01700098,
      0.018285008,
      -0.01594205,
      -0.011763969,
      0.010090801,
      0.0058226325,
      -0.085084744,
      -0.0011533465,
      -0.0107201245,
      -0.03270941,
      -0.010780892,
      -0.0008298401,
      -0.008161875,
      0.0036267939,
      0.014675937,
      0.0024866734,
      -0.0083741415,
      0.0054396167,
      0.012763827,
      -0.013177828,
      -0.0109134875,
      0.023611262,
      -0.009666108,
      -0.02260932,
      0.026733689,
      -0.024633158,
      -0.012028221,
      0.0065627354,
      -0.0063530095,
      0.0049378364,
      0.015991136,
      -0.024594441,
      -0.020089705,
      0.034344476,
      0.016635153,
      0.00081927434,
      0.013350982,
      0.03326086,
      -0.014548053,
      0.0010180238,
      -0.011989597,
      0.012388163,
      0.004387865,
      -0.01508464,
      0.018061606,
      -0.011547468,
      -0.013970516,
      -0.013877285,
      0.005243552,
      0.013024169,
      -0.007900031,
      0.013919929,
      -0.008634915,
      0.016292464,
      -0.021899458,
      0.0014792088,
      -0.002216227,
      -0.0052343374,
      -0.00056828087,
      -0.02024224,
      -0.007570337,
      0.0006582652,
      -0.017573105,
      -0.021130268,
      0.010594906,
      0.034530643,
      -0.0014277177,
      -0.009795425,
      -0.016582564,
      0.0047016274,
      0.016107978,
      0.011904335,
      -0.014145179,
      -0.022916868,
      0.009822015,
      -0.011298184,
      0.011945616,
      -0.024788547,
      0.004598972,
      -0.04061453,
      0.0242517,
      0.02250386,
      0.00739279,
      0.0013941661,
      -0.03758269,
      0.014686247,
      0.01075168,
      0.024571085,
      0.0131269805,
      0.004811442,
      0.01944733,
      0.007620219,
      -0.0026718907,
      -0.011823561,
      -0.018377274,
      -0.026344273,
      0.008435515,
      0.014702628,
      0.0030322236,
      -0.010964754,
      -0.022346893,
      0.017966831,
      -0.0040114354,
      0.01281282,
      -0.012663767,
      0.032252103,
      -0.03378293,
      -0.01664341,
      -0.012060135,
      -0.023160757,
      -0.004457417,
      0.021116136,
      -0.02182432,
      -0.014303379,
      -0.006025528,
      -0.011392571,
      0.009596124,
      0.007255737,
      -0.022798404,
      -0.0035542415,
      -0.0037209736,
      0.030562546,
      0.007548592,
      0.00772285,
      0.011157521,
      -0.0030537292,
      -0.016525812,
      0.012366517,
      0.006054829,
      0.008542985,
      0.0013967479,
      -0.011399791,
      -0.01656616,
      0.0317496,
      -0.0025595208,
      -0.021049509,
      -0.033405494,
      -0.0046464526,
      0.0008163798,
      -0.0034270806,
      0.00089719763,
      -0.017047413,
      0.009612067,
      -0.0016863486,
      0.012797015,
      0.0069278614,
      0.0015529043,
      0.021585772,
      0.008944112,
      -0.010509829,
      -0.012604512,
      -0.0016290252,
      -0.009984807,
      -0.0059285997,
      0.01678857,
      -0.004553334,
      -0.04015005,
      -0.0057868874,
      -0.020142635,
      -0.017112792,
      -0.0005463413,
      0.029316487,
      -0.010853083,
      0.023895755,
      -0.013740892,
      -0.015460144,
      0.00466979,
      -0.011424972,
      0.0075506526,
      -0.018022642,
      0.013880506,
      0.003024641,
      -0.0129457805,
      -0.0055757714,
      0.0014721778,
      0.01672729,
      -0.0059860996,
      -0.03714874,
      -0.025899883,
      0.007155754,
      0.014533176,
      0.037285596,
      0.003948947,
      -0.013523554,
      0.013812756,
      0.0010581801,
      0.0126347635,
      -0.0005824293,
      -0.012641909,
      0.0036259566,
      -0.00492604,
      0.022142127,
      0.0040539,
      -0.004617604,
      -0.033079814,
      -0.006540097,
      -0.0064783366,
      -0.020510959,
      -0.035998937,
      0.019058432,
      0.004653768,
      0.010962404,
      0.002802289,
      -0.010210824,
      -0.002448549,
      -0.0054450966,
      -0.0028597505,
      -0.021106236,
      0.009686069,
      -0.02203469,
      0.01788452,
      -0.003106985,
      -0.00401262,
      -0.021631056,
      -0.007240816,
      0.02171918,
      0.020551985,
      0.011755683,
      -0.0012730439,
      0.015115715,
      0.015357031,
      0.033299923,
      0.00076414674,
      -0.006781528,
      -0.00061151356,
      -0.0040220516,
      0.030944083,
      -0.016639125,
      0.0058889585,
      -0.00964144,
      -0.024312332,
      0.0045052553,
      -0.012734167,
      0.02128242,
      0.01056532,
      0.0075820233,
      0.015034107,
      0.027810795,
      0.0009173603,
      0.022315858,
      -0.034052588,
      -0.0029943914,
      -0.0043923445,
      0.00075919117,
      0.013726232,
      0.002152726,
      -0.008162623,
      -0.014023362,
      -0.00003093167,
      -0.0010926608,
      0.0028738722,
      -0.014548734,
      0.02746777,
      0.031964976,
      -0.0018872514,
      -0.01652742,
      0.019792162,
      0.030830536,
      -0.0008549978,
      -0.01627634,
      -0.020943483,
      0.025796458,
      0.0005651,
      0.0034443364,
      0.0063576233,
      0.006147088,
      -0.016221799,
      -0.0047685853,
      -0.00034528066,
      -0.0011295245,
      0.012576122,
      -0.032442715,
      0.012964364,
      0.006388058,
      0.042606503,
      -0.10698121,
      0.011963816,
      -0.007909531,
      0.012610022,
      -0.0021695518,
      -0.012898854,
      -0.009417567,
      -0.016439846,
      -0.016459547,
      0.015946072,
      -0.0056980737,
      0.010729764,
      0.012488145,
      0.008448696,
      -0.005035033,
      -0.0068570394,
      0.0009817297,
      0.023548553,
      0.028556485,
      0.00004806162,
      0.010939639,
      0.007942776,
      -0.0039800303,
      0.010492468,
      0.0026577376,
      -0.01654775,
      0.0028708326,
      0.006847779,
      0.0149240885,
      -0.01829899,
      -0.022110857,
      -0.0038812384,
      0.0029030645,
      0.01836559,
      0.013324607,
      -0.009540055,
      -0.004317786,
      0.01941984,
      0.000099879864,
      0.018428806,
      -0.006729597,
      0.01972698,
      0.0035882131,
      0.007658179,
      0.012802864,
      0.0030271385,
      0.0016040258,
      -0.0040364405,
      0.008548492,
      0.045374654,
      -0.031122271,
      -0.018409071,
      -0.0015011881,
      -0.029354589,
      0.0065373946,
      -0.01434571,
      0.007542494,
      -0.0075088423,
      -0.022941148,
      -0.00063919474,
      0.008207218,
      0.019331733,
      0.015255469,
      0.04184621,
      -0.012414837,
      0.0020105084,
      0.0010393623,
      0.010374403,
      0.0012008244,
      0.0036610826,
      -0.005982476,
      -0.003634044,
      -0.0044978815,
      0.012802704,
      -0.012360206,
      -0.010755553,
      -0.036797915,
      0.0015730194,
      -0.018343719,
      0.021889273,
      -0.03247477,
      -0.007960274,
      -0.07558851,
      -0.0259667,
      -0.016774723,
      0.0014894176,
      0.018089429,
      0.007056021,
      -0.010564926,
      0.011375151,
      -0.01228654,
      -0.0015587015,
      -0.011882358,
      -0.009121667,
      0.009179273,
      -0.011131864,
      0.0015727354,
      0.005644595,
      -0.0044855354,
      -0.018853683,
      -0.013147219,
      -0.00086741743,
      -0.0015875335,
      -0.0053724474,
      0.015449955,
      -0.011523766,
      0.0014606372,
      0.024974402,
      -0.031863973,
      0.0057026907,
      -0.017362753,
      0.004428527,
      -0.007934886,
      -0.13852133,
      -0.025041945,
      0.011733497,
      -0.0073847715,
      0.019594656,
      0.024373803,
      -0.025617102,
      -0.03579868,
      -0.0064566047,
      -0.019757295,
      0.0009240929,
      0.0015112186,
      -0.00760324,
      0.012504441,
      0.0056727375,
      0.12693326,
      -0.013577232,
      -0.0038530808,
      -0.0005378847,
      0.017014468,
      -0.016373387,
      -0.0025434378,
      0.0007086274,
      0.01793547,
      -0.014092872,
      -0.014787731,
      0.0017921695,
      -0.024947431,
      0.028569808,
      0.016321264,
      0.0045213713,
      -0.007908865,
      -0.028672986,
      -0.0041243993,
      0.00035460337,
      -0.031862993,
      0.01401629,
      -0.0072060805,
      0.0010224977,
      -0.024025504,
      -0.00034652493,
      -0.025088249,
      0.0010500256,
      0.016405266,
      0.008901374,
      0.014147897,
      -0.004810256,
      -0.008836332,
      0.015086113,
      -0.012444283,
      0.0063547073,
      -0.069804005,
      -0.015302777,
      0.0008754141,
      0.0043523265,
      0.013924533,
      0.017063854,
      0.026589891,
      -0.027059464,
      0.006758621,
      0.00016860501,
      0.008088756,
      0.01744402,
      0.00131248,
      0.012510384,
      -0.003318172,
      0.013414174,
      0.013920791,
      0.035345696,
      0.001356631,
      -0.015182336,
      0.015104097,
      0.005301879,
      -0.0115129715,
      -0.01573494,
      -0.015779419,
      -0.0006177277,
      0.034878068,
      0.001454933,
      -0.03162383,
      0.0013544147,
      -0.0009710318,
      -0.015510002,
      0.003318841,
      0.028454684,
      -0.021415923,
      -0.007938846,
      0.016984368,
      -0.0070150653,
      -0.020623975,
      -0.006831081,
      0.015020545,
      -0.0058634053,
      0.04882078,
      0.0023405661,
      0.020594057,
      -0.0053456672,
      0.0027434528,
      0.023437547,
      0.025477413,
      0.007212562,
      -0.028099442,
      0.03049764,
      -0.018216629,
      0.007801016,
      -0.009609964,
      0.024872284,
      0.027895162,
      0.0075301346,
      -0.012871604
    ]
  },
  {
    "id": "genai_cohort_nodejs_09_Nodejs_SystemDesign_APIGateway_vtt",
    "content": "All right, so in this particular 2 video, let's understand 3 two fundamental things. 4 That is how scaling works 5 in microservice architecture. 6 And second is how does 7 people, the external users, talk 8 to the microservices. 9 So with that, let's start 10 with the video. 11 Now, one thing is that the first 12 benefit that you get of 13 a microservice architecture is that 14 every service is independent. 15 They can be scaled independently. 16 And one more thing is what I 17 can do is I can actually host my 18 order service on Amazon aws. 19 I can host my, my email service 20 on maybe digitaloceans. 21 I can host my payment service 22 on some other cloud provider, 23 because these services are 24 decoupled from each other. 25 Now, the problem is that, hey, 26 let's say you have users, right? 27 Ultimately this is a user. 28 Now user wants to create an order. 29 Where should this user go, right? 30 What is the DNS server? 31 How to communicate, like how 32 the API structure works. 33 So when you talk about microservice 34 architecture, one more 35 component comes into the picture 36 that is known as an API gateway. 37 Okay? 38 So this is an API gateway. 39 So this is a service from Amazon. 40 Or you can even have more API 41 gateways, okay, from other services. 42 API gateway basically has some rules. 43 Number one, and this is 44 your entry point to the system. 45 That means on your DNS server, 46 if I have a Piyushkar 47 dev as a domain, piyushkarg.dev 48 let me just bring it here. 49 So you are going to map this IP 50 address to the API gateway, okay? 51 So, so that means all the Internet 52 traffic is routed to where 53 all the Internet traffic 54 is routed to this gateway. 55 Now what you can do is 56 to this particular gateway, okay, 57 you can set up some rules. 58 So let's say my rule is if 59 the request, that is my host name. 60 So Pushkar is my host name. 61 That is host slash. 62 If it starts with auth 63 slash something, something. 64 Okay, Something, something, we must 65 redirect this particular request 66 to the authentication service. 67 SVC is for the service. 68 Okay? 69 So this is my rule number one. 70 So that means this is the rule. 71 Second is if this is your host, 72 so whatever is your host name. 73 I'll just say host name, 74 that is push dev slash. 75 If something starts from email 76 and anything goes, like emails. 77 So for example, email slash 78 send email slash get email slash 79 discard anything, it must go 80 to the email SVC service. 81 Okay? 82 Similarly, I can just 83 say, hey, the host name. 84 And then I can set up a rule 85 for orders as well. 86 So if something starts with 87 orders, it must go to where 88 it must go to the order svc. 89 So now what happens is your 90 users are basically going 91 to talk to the API gateway. 92 Okay, so let's say you 93 have a lot of users here. 94 So I'll just make some users here. 95 So all these users are talking 96 to this API gateway. 97 So let me just paste it here. 98 Let me just also bring it here. 99 Okay, yeah, all cool. 100 Now what will happen is this API 101 gateway will route the request 102 to the NGINX of that service. 103 That's the main catch. 104 Okay, let me just make it as green. 105 So this API gateway is routing 106 the request to this particular 107 load balancer, to the nginx, 108 to the load balancer 109 of that appropriate service. 110 And this load balancer 111 will internally route the request 112 to one of the server. 113 So this is how the communication 114 happens 115 in microservice architecture. 116 People come, people talk 117 to the API gateway. 118 API gateway sends to the appropriate 119 reverse proxy or the load balancer. 120 This load balancer is 121 basically set, as per rules. 122 Like you have to tell the API gateway 123 from like on what basis the request 124 must be redirected and then this 125 load balancer will internally give 126 this request to one of the server. 127 So this is basically a hybrid 128 approach, if you see. 129 So microservice architectures are 130 easy to scale, easy to monitor, but. 131 But yes, it comes with a lot of cost 132 because now you have a cost 133 for API gateway, you have a cost of 134 a lot of servers 135 and the maintenance is also high. 136 And big tech giant companies always 137 use microservices architecture.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "09-Nodejs-SystemDesign-APIGateway.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/09-Nodejs-SystemDesign-APIGateway.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0022334107,
      0.0074357204,
      0.022653367,
      -0.06367659,
      -0.027146552,
      0.018752674,
      0.03418132,
      0.014638368,
      0.008778657,
      0.027725056,
      0.007981301,
      0.023561725,
      0.008275255,
      0.029282035,
      0.12603971,
      -0.023263486,
      0.009812046,
      0.008806579,
      0.0027076046,
      -0.01935518,
      0.0054652165,
      0.0012804103,
      -0.0069389218,
      0.027604649,
      0.0039123693,
      0.018703042,
      0.012600037,
      -0.011686814,
      0.018515319,
      -0.009202996,
      -0.024385676,
      -0.028607666,
      -0.0038244752,
      0.025247514,
      0.0039068935,
      -0.0023491678,
      0.004758653,
      -0.0031936318,
      -0.015694717,
      -0.004282166,
      -0.016870799,
      0.002627882,
      -0.0003526348,
      -0.010171385,
      0.0027220184,
      0.006306951,
      -0.017897993,
      -0.02713289,
      0.0024161614,
      0.004593968,
      -0.002023291,
      -0.008395768,
      0.027762337,
      -0.18922736,
      0.0012720575,
      -0.0037333472,
      0.000762333,
      0.0020093364,
      0.00537232,
      0.012729105,
      -0.034222584,
      0.016706241,
      -0.01971176,
      0.00174937,
      -0.013894533,
      -0.012714969,
      0.026446315,
      0.010460301,
      0.008286985,
      0.0033902882,
      0.006221202,
      0.012842625,
      -0.028552674,
      -0.011944841,
      -0.018042369,
      -0.03288502,
      0.00007054236,
      -0.01503165,
      0.006310938,
      0.021931266,
      -0.008248994,
      -0.013336225,
      -0.008156048,
      -0.007408774,
      -0.0014910632,
      -0.010361853,
      -0.0057401927,
      -0.012101565,
      0.010147922,
      0.017459035,
      0.0054986305,
      0.012000554,
      -0.003869767,
      -0.017306758,
      -0.0029586032,
      -0.0011580812,
      -0.019538445,
      -0.013316842,
      -0.0024641596,
      -0.016893003,
      0.0017512931,
      0.0064105955,
      -0.02368989,
      0.036022786,
      -0.008971311,
      -0.0062889587,
      0.022686413,
      -0.0030682797,
      -0.016261002,
      -0.016389448,
      -0.0019172332,
      -0.021401737,
      0.015563686,
      0.0025053874,
      0.005345667,
      -0.16930094,
      0.022627715,
      -0.02449249,
      0.004631135,
      -0.0032312903,
      -0.02171844,
      -0.00739347,
      0.008194958,
      0.010049406,
      -0.017067974,
      -0.00083587295,
      0.003406224,
      0.015904522,
      0.0011235006,
      0.008896989,
      -0.005888762,
      -0.014874776,
      -0.019482324,
      0.02205148,
      -0.0016702518,
      0.0032514087,
      -0.008379427,
      -0.018334728,
      -0.02254908,
      -0.0045600072,
      0.015707912,
      0.021414155,
      -0.011095963,
      0.043705262,
      0.011317629,
      0.0001394128,
      -0.023805395,
      0.014835819,
      -0.019948525,
      -0.05711396,
      0.0100755105,
      0.009847893,
      -0.0032933713,
      0.0038866305,
      0.027018515,
      -0.026228247,
      -0.013837177,
      0.007813433,
      0.013524425,
      -0.0025252132,
      0.002251841,
      0.016683359,
      0.00091258675,
      0.012858477,
      0.00017298831,
      -0.0048653735,
      -0.010619264,
      0.017440962,
      0.008356602,
      0.0038964436,
      -0.018250363,
      -0.010398837,
      -0.019551244,
      0.0045298603,
      -0.0057015256,
      -0.0098733185,
      -0.022668175,
      0.0121051315,
      0.0069710696,
      -0.014411214,
      -0.0047775735,
      0.0009216481,
      -0.0072745867,
      -0.017400993,
      0.00055115327,
      -0.02320433,
      -0.036388792,
      -0.0033592933,
      0.008421317,
      -0.011395096,
      0.017878912,
      0.008659569,
      -0.005025228,
      -0.011256371,
      0.014912311,
      -0.02340833,
      0.005742052,
      -0.00012207915,
      -0.0093101375,
      0.012140823,
      -0.018944414,
      -0.0006725437,
      0.02286978,
      -0.0268884,
      0.0039362167,
      -0.011921135,
      0.015808756,
      -0.033595443,
      0.022101112,
      0.02717962,
      -0.0025669772,
      -0.028896924,
      -0.0023660802,
      -0.0027887584,
      0.01545785,
      0.0038624506,
      0.008989466,
      0.0042713857,
      -0.009131684,
      -0.0127115995,
      -0.012176388,
      -0.004946277,
      0.0052942773,
      0.029746074,
      0.012591613,
      0.0052669127,
      0.010673226,
      -0.010743787,
      0.008747783,
      -0.007887558,
      0.02128359,
      0.024407588,
      -0.0063654655,
      -0.00090013695,
      0.008632519,
      -0.009762274,
      0.0012229567,
      0.005408684,
      -0.0029791351,
      0.007686972,
      -0.0042988076,
      -0.006794702,
      -0.01049235,
      0.012787671,
      0.012316004,
      -0.007531697,
      -0.00300405,
      -0.013933495,
      -0.012001399,
      -0.015153344,
      -0.0008461089,
      -0.007087167,
      0.0020972365,
      -0.01496909,
      0.024870053,
      -0.026503893,
      -0.029210905,
      -0.028839946,
      -0.021067742,
      -0.01495938,
      -0.018039163,
      -0.027316794,
      0.004011991,
      0.0007014984,
      0.0069021014,
      -0.00012540618,
      -0.0015902069,
      0.014175147,
      -0.0038801664,
      0.020419937,
      0.010054729,
      0.0062850253,
      -0.029147886,
      -0.015494165,
      0.010925115,
      -0.00782209,
      -0.08157562,
      0.003157775,
      -0.0032666735,
      -0.015585661,
      -0.008576157,
      -0.008050302,
      0.00058112724,
      0.0063723894,
      0.0056506568,
      0.00046542706,
      -0.008914371,
      0.004004081,
      0.0021963345,
      -0.0065542697,
      -0.005478544,
      0.026499588,
      -0.021356639,
      -0.011288936,
      0.023410875,
      -0.03937547,
      -0.021488808,
      0.026296256,
      -0.0062975544,
      0.008268868,
      0.012166572,
      -0.0021938505,
      -0.020134449,
      0.019177139,
      -0.0012916379,
      0.004515616,
      0.0055081807,
      0.033133406,
      -0.01092093,
      0.0005722445,
      -0.007008075,
      0.00770832,
      0.0009776948,
      -0.011240715,
      -0.0021876341,
      -0.008554661,
      -0.0025822266,
      -0.012123386,
      0.0002657539,
      0.015893156,
      -0.005832811,
      0.019275527,
      -0.010154714,
      0.018141028,
      -0.012610774,
      -0.0059527387,
      -0.009370841,
      0.0129489675,
      0.0039004122,
      -0.030180538,
      -0.004096037,
      -0.0033774101,
      -0.0061430153,
      -0.01156776,
      0.0046519698,
      0.031158281,
      0.00012495257,
      -0.020215793,
      -0.0008283344,
      0.013575394,
      0.020036312,
      0.012116217,
      -0.016469683,
      -0.033756748,
      0.00829522,
      -0.011012777,
      0.02603846,
      -0.028000357,
      0.0045260624,
      -0.04475772,
      0.03835053,
      0.025526406,
      0.012778706,
      -0.013102138,
      -0.026405796,
      0.014743297,
      0.0040449547,
      0.019014005,
      0.0017349656,
      0.0154856695,
      0.008243502,
      0.006961993,
      0.0057272227,
      -0.0107308915,
      -0.025544895,
      -0.027747398,
      0.016371138,
      0.018962957,
      -0.0020965063,
      -0.0012027491,
      -0.008867424,
      0.00860682,
      -0.013071817,
      0.01421296,
      -0.015587097,
      0.026262073,
      -0.014959744,
      0.00015888971,
      -0.017250217,
      -0.016588481,
      -0.020462165,
      0.032874826,
      -0.016038308,
      -0.017335325,
      -0.00999502,
      -0.012564453,
      -0.0047667646,
      0.016658556,
      -0.02198067,
      0.0056878575,
      -0.001846795,
      0.024436379,
      0.002383508,
      0.010883937,
      -0.0073646046,
      -0.011094735,
      -0.021365914,
      0.01709979,
      0.009990681,
      0.009762839,
      -0.0150224045,
      0.0008326075,
      -0.016220052,
      0.010378423,
      0.0054198513,
      -0.018261066,
      -0.013653254,
      -0.014705404,
      0.00997284,
      0.008736914,
      -0.010520703,
      -0.017433127,
      0.0020598508,
      -0.013746343,
      0.019485276,
      0.018513247,
      0.00464514,
      0.01690381,
      -0.009452543,
      -0.009191609,
      -0.015590276,
      -0.0020791302,
      -0.020698054,
      0.017196963,
      0.007866308,
      -0.00874102,
      -0.03332,
      -0.0042830096,
      -0.019648837,
      -0.023039352,
      0.009367346,
      0.023076057,
      -0.011177117,
      0.026302869,
      -0.0058814706,
      -0.0048255827,
      0.010070085,
      -0.011539644,
      -0.007353199,
      -0.008439395,
      0.008399687,
      0.004049476,
      -0.006588528,
      -0.009447989,
      0.009126533,
      0.019710185,
      -0.0019580578,
      -0.017222317,
      -0.03307833,
      0.022978555,
      0.005628476,
      0.018891172,
      0.006277172,
      -0.0012065981,
      0.011843082,
      0.013076651,
      0.011757867,
      -0.005222481,
      -0.012137157,
      0.00030644066,
      0.010969918,
      0.014109237,
      0.004407608,
      -0.005779681,
      -0.03856058,
      -0.0024050984,
      -0.0065841074,
      -0.015358683,
      -0.032861598,
      0.029611005,
      -0.008895225,
      0.005404892,
      -0.00079943583,
      -0.010994719,
      0.0035178445,
      -0.012543014,
      -0.0003666162,
      -0.021226568,
      0.016409284,
      -0.0143838795,
      0.015562051,
      0.0004955804,
      -0.0049440106,
      -0.013294487,
      -0.0068614706,
      0.023080276,
      0.025875513,
      0.006215633,
      0.0070026633,
      -0.0006007324,
      0.01703814,
      0.011993227,
      -0.00061306113,
      -0.006428972,
      0.0009517227,
      -0.00858336,
      0.03229788,
      -0.028685318,
      -0.013003365,
      -0.00504462,
      -0.02344525,
      0.0075719096,
      -0.015533404,
      0.01015275,
      0.012370412,
      -0.0020667263,
      0.0067661107,
      0.03789552,
      0.020714024,
      0.027773326,
      -0.029206047,
      -0.0071907504,
      0.001097133,
      0.0054042186,
      0.013099151,
      0.0031842173,
      0.018429566,
      -0.016403563,
      -0.026820108,
      -0.012946808,
      -0.00850193,
      -0.023580056,
      0.025460845,
      0.015055397,
      -0.003489818,
      -0.029863318,
      0.017272953,
      0.043074805,
      0.009314786,
      -0.022396555,
      -0.01772237,
      0.017190725,
      -0.0020143394,
      -0.0130823,
      0.0046005785,
      0.0079708975,
      -0.004748138,
      0.0047419006,
      -0.0013004845,
      0.013524741,
      0.01201935,
      -0.024721332,
      0.029679677,
      -0.005823248,
      0.023172641,
      -0.11995954,
      0.020775214,
      -0.008912911,
      0.0057711466,
      -0.014402444,
      -0.020799411,
      -0.012338884,
      -0.027022855,
      -0.005949032,
      0.0039864425,
      -0.0061461646,
      0.016798234,
      0.0133945355,
      0.0033926922,
      -0.0022455351,
      -0.00980208,
      -0.009755377,
      0.0214102,
      0.030843072,
      0.0033779882,
      0.0024921156,
      0.006060287,
      -0.017948924,
      0.017167822,
      -0.008051375,
      -0.021899637,
      -0.01336119,
      0.0002455627,
      0.024688529,
      -0.008622914,
      -0.014579066,
      -0.000667505,
      0.0035846054,
      0.018640805,
      0.008028134,
      -0.0060003796,
      0.0024078442,
      0.017425764,
      0.00026509142,
      0.019098122,
      -0.0047325864,
      0.01092839,
      0.0030748262,
      0.0052324263,
      -0.0017576879,
      0.010919549,
      0.00899541,
      -0.012415529,
      -0.0013782525,
      0.031093096,
      -0.031878978,
      -0.005178615,
      -0.022181556,
      -0.02554087,
      0.025500996,
      -0.01010385,
      0.01819376,
      -0.013166939,
      -0.028411081,
      0.0104249995,
      -0.0034038601,
      0.023966258,
      -0.0031953177,
      0.03157325,
      -0.01824003,
      0.0071222465,
      -0.008654696,
      0.002204636,
      0.009453496,
      0.008739657,
      -0.005618345,
      -0.00057805463,
      -0.002373692,
      0.022671385,
      -0.0039024188,
      -0.008945334,
      -0.020720484,
      0.0055729416,
      -0.015530758,
      0.023828791,
      -0.036528017,
      0.008954203,
      -0.08447858,
      -0.004854429,
      -0.008180166,
      -0.0028807882,
      0.024235709,
      0.0033745125,
      -0.010786097,
      0.016460856,
      -0.0018099567,
      0.014847972,
      -0.019069986,
      -0.015106847,
      0.0043780208,
      -0.033976972,
      -0.0026488611,
      0.0064770514,
      -0.00554449,
      -0.009224096,
      -0.009558299,
      -0.0024270124,
      -0.001696172,
      -0.004132358,
      0.007222217,
      -0.008009834,
      -0.012030166,
      0.02455869,
      -0.0181595,
      0.008231185,
      -0.012339779,
      -0.0004524563,
      -0.0099135265,
      -0.121591434,
      -0.012763235,
      -0.018581787,
      0.014329278,
      0.02045339,
      0.014262707,
      -0.018540291,
      -0.022152942,
      0.013428983,
      -0.022237128,
      0.0150185125,
      -0.014066278,
      -0.0069259824,
      0.004298414,
      0.00023173285,
      0.12181668,
      -0.0028161649,
      0.0180291,
      -0.00010638504,
      0.004332978,
      0.0012366351,
      0.0074446304,
      0.017411048,
      0.01913505,
      -0.014313139,
      -0.008892229,
      0.006195225,
      -0.011481402,
      0.02817583,
      0.019790655,
      0.0060358914,
      -0.00368432,
      -0.031134648,
      0.019530967,
      0.0021316593,
      -0.03705453,
      0.03974113,
      -0.0065410645,
      -0.009247657,
      -0.018936394,
      0.004354172,
      -0.018357787,
      -0.020452939,
      0.0077653048,
      0.012265383,
      0.0051965863,
      0.002052751,
      -0.0028524944,
      0.013385913,
      -0.008664705,
      0.010062678,
      -0.071357824,
      -0.009553278,
      0.010519571,
      0.0020068777,
      0.012771131,
      0.017708872,
      0.02289146,
      -0.019093174,
      0.0058151255,
      -0.007045777,
      0.010918207,
      0.028460767,
      -0.009482281,
      0.0035918031,
      0.001609593,
      0.023557018,
      0.022329528,
      0.031642705,
      -0.0027678485,
      -0.010409078,
      0.0149160195,
      -0.009394769,
      -0.006716205,
      -0.013003198,
      -0.008779331,
      0.013092219,
      0.04143813,
      -0.005739741,
      -0.013190184,
      -0.0037842311,
      -0.0051035695,
      -0.012822765,
      0.008005412,
      0.02900804,
      -0.015335443,
      -0.019459162,
      0.014682994,
      -0.0027215919,
      -0.015355597,
      0.007571091,
      0.0029229154,
      -0.00053980463,
      0.04032419,
      0.0005645894,
      0.022687342,
      -0.01686976,
      -0.000003386433,
      0.019463552,
      0.025607007,
      0.0051986836,
      -0.04198173,
      0.026064271,
      -0.012687283,
      0.005338113,
      -0.014327457,
      0.016259303,
      0.0154095525,
      0.020870103,
      -0.020649714
    ]
  },
  {
    "id": "genai_cohort_nodejs_10_Nodejs_SystemDesign_HTTPSync_vtt",
    "content": "All right, so we are going really 2 great with microservice 3 architecture and we are 4 understanding the ins and outs 5 of the microservice architecture. 6 But here is one more fundamental 7 problem that how do 8 microservices are going 9 to communicate with each other? 10 Let's say the order service 11 wants to talk to the email service 12 because you know, when 13 you place an order you want 14 to send an email to the user. 15 So this is a fundamental 16 problem that how to establish 17 this order service, right? 18 This, this communication 19 in between the services. 20 How to establish this communication, 21 how to establish this communic. 22 So there are two methods 23 of establish this particular, 24 you know, communication. 25 One is known as a synchronous, 26 okay, a synchronous communication. 27 And one is known as 28 asynchronous communication. 29 So let me just get the terms first. 30 Sync means something is happening 31 in the sync, right? 32 You have to talk 33 to the service and you have to wait 34 for the response back. 35 That is a sync. 36 When we talk about async 37 means that, hey, you know, 38 do it in the background. 39 That is async. 40 So we will talk about these 41 things in the detail. 42 But these, the fundamental 43 problem is how services 44 can communicate with each other. 45 So in this particular video, let's 46 talk about the HTTP sync method. 47 One method is very simple that what 48 you can do is you can directly, you 49 can directly say the order service 50 that hey, whenever you want to send 51 an email, just make an HTTP call. 52 See how users are basically 53 interacting with the email 54 service using slash email. 55 So order service can also make a post 56 request on/emails/ let's say send 57 and send the payload as body, 58 okay, whatever they want to send 59 and they can talk to each other. 60 So that means any server, right? 61 Any server right here, if it wants 62 to send an email, it has 63 to basically talk to the load 64 balancer of the email service. 65 Now this request can be 66 redirected to any one of the server 67 that is that is all good. 68 And then what we can do, we 69 can basically send the email. 70 This is known as 71 a synchronous method. 72 Okay? 73 This is a synchronous method 74 because when you open a post 75 request, when you open this 76 connection, you have to wait, 77 you have to wait for the email 78 service to complete that 79 particular request and get back 80 the response of 200. 81 Here is a fundamental problem 82 with this approach, 83 the synchronous approach. 84 Number one, that it's 85 a blocking request. 86 Let's say for some reasons 87 the email server was down. 88 For some reasons the email 89 service has been down. 90 Now what will happen is when you will 91 make this particular connection. 92 When you will try to send 93 this request, this request 94 will also fail, right? 95 And if this request fail, this 96 server might also fail because it 97 was dependent on the email service 98 and it was not able to complete. 99 So this is one problem that 100 if this thing fails, this 101 thing also starts to fail. 102 Second problem is that now what 103 you are doing is that it 104 becomes a dependent service. 105 Order service has to know the address 106 of the email service, right? 107 What if there was no email service? 108 So, so order service is now, 109 you know, linked with is dependent 110 on the email service to be healthy. 111 If this service is down, this 112 server might went down. 113 So this is a problem. 114 But that's okay. 115 I mean, I'm not discussing 116 the problem here. 117 I was basically telling you that this 118 is known as a synchronous method. 119 So inside the code you can 120 actually make an API call 121 to the email service, do your stuff, 122 come back and do the stuff. 123 So this was a synchronous method. 124 This method is good, it is guaranteed 125 that the email will be sent. 126 But this introduces new set of 127 problems that it is more dependent. 128 There is a high coupling and we 129 usually do not prefer this method. 130 So to solve this particular method 131 we have an asynchronous method. 132 So in the next video, let's see what 133 is the asynchronous method 134 to communicate between the services.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "10-Nodejs-SystemDesign-HTTPSync.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/10-Nodejs-SystemDesign-HTTPSync.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0034516188,
      0.021825504,
      0.018993083,
      -0.05661318,
      -0.033277325,
      -0.0013811163,
      0.026565332,
      0.016560474,
      -0.008164825,
      0.0125264935,
      0.0063245776,
      0.023255857,
      -0.0044821515,
      0.032724824,
      0.1016874,
      -0.027415965,
      -0.004997629,
      -0.0009809427,
      -0.020481182,
      -0.015949843,
      0.0053995084,
      -0.009355238,
      -0.009180132,
      0.023082836,
      0.01356543,
      0.024202539,
      0.006044044,
      -0.0066653085,
      0.007756628,
      -0.0071962974,
      -0.015115038,
      -0.022093743,
      -0.008678465,
      0.038900867,
      0.01497537,
      0.006589498,
      0.0024046851,
      -0.0031894883,
      -0.021086851,
      0.011607559,
      0.0040167123,
      -0.009028431,
      0.015182657,
      -0.007967749,
      -0.0075819963,
      0.0039927913,
      -0.0069177262,
      -0.0016938635,
      0.0016996792,
      -0.003063495,
      -0.0024053683,
      -0.0030323905,
      0.014456155,
      -0.18387905,
      0.002034767,
      0.0071640904,
      0.0007360193,
      0.004181924,
      0.011173649,
      0.0030943467,
      -0.017628571,
      0.015244172,
      -0.015319443,
      -0.0018465318,
      -0.012157769,
      -0.01578087,
      0.02929973,
      0.01473962,
      0.015728114,
      -0.001702796,
      0.009684244,
      -0.012716212,
      -0.024968127,
      -0.0027532482,
      -0.008916567,
      -0.028242376,
      -0.0071494346,
      0.0036857564,
      -0.0044542584,
      0.00040023107,
      0.0090011135,
      -0.03750394,
      0.009086316,
      -0.010251427,
      0.0076223086,
      0.0052166893,
      -0.029268337,
      0.004479868,
      -0.013896776,
      0.026253907,
      -0.008591287,
      0.011042817,
      0.0056424947,
      -0.015568385,
      0.0048368275,
      0.003137989,
      -0.0117886625,
      -0.011627495,
      -0.01826588,
      -0.02710202,
      0.011133941,
      0.003730988,
      -0.02885743,
      0.041146137,
      -0.0015267779,
      -0.023069682,
      0.0049445205,
      0.00012596618,
      -0.014783381,
      -0.022469928,
      0.0008909941,
      -0.027387613,
      0.0027107373,
      -0.0041820547,
      -0.01904111,
      -0.17330456,
      0.016301202,
      -0.011772596,
      0.0037975055,
      -0.013109209,
      -0.017681867,
      -0.009910123,
      0.0004119892,
      -0.003785315,
      -0.026680792,
      0.0085291,
      -0.0023467934,
      0.011476877,
      0.016804632,
      0.023258718,
      0.005003424,
      -0.021631656,
      -0.021858828,
      0.039156776,
      0.01106977,
      0.0041848896,
      -0.004587334,
      -0.027324658,
      -0.0073227044,
      -0.016738098,
      0.030073367,
      0.020669535,
      -0.008427028,
      0.03607195,
      -0.006380748,
      0.019083422,
      -0.015217111,
      0.0051298058,
      -0.012996434,
      -0.05609657,
      0.019107988,
      0.016717527,
      0.0035949065,
      0.007944137,
      0.01870178,
      -0.022011258,
      -0.014950534,
      0.0019951086,
      0.017325118,
      -0.02866133,
      -0.013931931,
      0.013325172,
      0.00841604,
      -0.00037839246,
      0.0058231396,
      -0.0039015573,
      -0.016221747,
      0.008206865,
      0.005183331,
      -0.0043347706,
      -0.00934726,
      -0.020347161,
      -0.014108978,
      0.005014777,
      -0.005872395,
      -0.011208992,
      -0.01686281,
      -0.0064461934,
      0.018431157,
      0.002006652,
      0.010522288,
      -0.016372425,
      -0.0025152734,
      -0.039566457,
      0.0004708433,
      -0.015444692,
      -0.033157006,
      0.00037047596,
      0.009286789,
      -0.0122985225,
      0.0043826466,
      0.008785063,
      -0.0007538673,
      -0.0119340345,
      0.004265883,
      -0.027701205,
      -0.019478515,
      -0.00646069,
      -0.019598115,
      -0.0015990919,
      -0.00978165,
      -0.025416613,
      0.0137173915,
      -0.02812541,
      0.010771885,
      -0.0030101372,
      0.012366482,
      -0.014434501,
      0.00912172,
      0.018717496,
      -0.00022736384,
      -0.029953487,
      0.01664547,
      -0.013360673,
      0.00067966146,
      -0.0038359726,
      0.0219212,
      0.020747924,
      -0.011567063,
      -0.018937783,
      -0.002538361,
      -0.014554429,
      -0.006345622,
      0.018868478,
      0.01751553,
      -0.0065269945,
      0.009093774,
      0.01082219,
      0.0022469286,
      0.012718863,
      0.007166181,
      0.010665381,
      -0.023186345,
      -0.012353183,
      0.023452446,
      -0.01065485,
      0.005525457,
      0.013382862,
      -0.00033977279,
      0.004609437,
      -0.018978849,
      -0.017502883,
      -0.013711534,
      0.016763028,
      0.01911947,
      0.014066265,
      -0.012604101,
      0.0044703144,
      0.0064702,
      -0.025576094,
      0.027439553,
      -0.0056763366,
      0.011584878,
      -0.017036121,
      0.016308855,
      -0.024347318,
      -0.022194939,
      -0.005523481,
      -0.01811706,
      -0.02847662,
      -0.008065279,
      -0.0249633,
      -0.012887771,
      0.0056306706,
      0.0050486694,
      -0.00056111,
      0.011042834,
      0.00043584342,
      -0.017093852,
      0.017003797,
      -0.008899838,
      0.0060428283,
      -0.008237663,
      -0.016260704,
      -0.004068692,
      0.004853101,
      -0.09579689,
      0.011684342,
      -0.0036972847,
      -0.038723893,
      0.0011303122,
      -0.01211052,
      -0.010870357,
      0.010666862,
      0.014863357,
      -0.00949881,
      0.0008821524,
      -0.012556739,
      0.0007692903,
      -0.025597561,
      -0.009935704,
      0.00819209,
      -0.007558294,
      0.0048763035,
      0.029641744,
      -0.019108007,
      -0.008737633,
      0.017822187,
      0.0009002485,
      -0.009343496,
      0.011595471,
      -0.016428124,
      -0.03555074,
      0.016404347,
      0.0067350823,
      -0.011956817,
      0.003011075,
      0.021540415,
      -0.011428515,
      -0.0063462206,
      -0.01371004,
      -0.0057662884,
      0.009742437,
      -0.007635072,
      -0.0034064264,
      -0.0043473425,
      -0.012438917,
      -0.016423931,
      0.0085731605,
      -0.00021310388,
      -0.005890119,
      0.0019239621,
      0.01766356,
      0.034726582,
      -0.023973022,
      0.018399157,
      -0.00083642575,
      -0.022597557,
      0.011054349,
      -0.033101425,
      -0.0045606005,
      0.025215229,
      0.0076143118,
      0.006494007,
      0.010709125,
      0.025354594,
      -0.015844196,
      0.011306578,
      0.0029149286,
      0.018095845,
      -0.0012691503,
      0.0078094415,
      0.0058718096,
      -0.012390345,
      -0.000109878274,
      0.009516062,
      0.019542098,
      -0.016856644,
      -0.008258318,
      -0.03775119,
      -0.0034836808,
      0.02026509,
      0.005042442,
      0.002492941,
      -0.037614703,
      0.028908959,
      0.023182591,
      0.012733019,
      0.0077291885,
      0.032624304,
      0.02086816,
      0.011362401,
      -0.010397563,
      -0.012453094,
      -0.0033279283,
      -0.020605464,
      0.014234049,
      0.02034706,
      -0.022866897,
      0.0025488278,
      -0.00009059815,
      0.01762895,
      -0.016785922,
      0.016132087,
      -0.011466235,
      0.02695577,
      -0.024141798,
      0.0008498242,
      -0.004189167,
      -0.009797499,
      -0.01147457,
      0.042366218,
      -0.017210383,
      0.0021420936,
      0.007258199,
      -0.020517193,
      -0.0065835314,
      0.00022996451,
      -0.0234932,
      -0.0012769356,
      0.0015620267,
      0.021947168,
      0.0025634067,
      0.0030291758,
      0.011583635,
      -0.0022972608,
      -0.014636654,
      0.020255882,
      0.010559687,
      0.0014723288,
      -0.0032859934,
      0.006292864,
      -0.009641727,
      0.021108465,
      -0.005153267,
      -0.028283771,
      -0.009761563,
      -0.0069370903,
      0.0058330623,
      0.0053031333,
      0.0037044801,
      -0.025718112,
      0.0037068864,
      0.00058065215,
      0.035540804,
      0.0066147447,
      -0.008235596,
      0.008884903,
      -0.004941913,
      -0.00824157,
      -0.0071719876,
      -0.00046966982,
      -0.015331167,
      0.011481486,
      0.020820897,
      -0.023353923,
      -0.02317266,
      -0.013282319,
      -0.04323097,
      -0.016067116,
      0.0071287667,
      0.025775684,
      -0.010923072,
      0.022119379,
      -0.0063831583,
      -0.017813299,
      0.0008075921,
      -0.019905068,
      -0.013231216,
      -0.011620199,
      0.0067666443,
      -0.0030990099,
      -0.00911381,
      0.026706368,
      -0.005820144,
      0.017747786,
      -0.017170968,
      -0.013085674,
      -0.045826394,
      -0.0066529945,
      0.026635105,
      0.006122567,
      -0.014609075,
      -0.015735567,
      0.03274488,
      0.0008483031,
      0.007150838,
      -0.009388707,
      -0.010101738,
      0.017406402,
      -0.0085984515,
      0.021618474,
      0.029190267,
      -0.0013778746,
      -0.020152563,
      0.0010191677,
      -0.027286442,
      -0.010578814,
      -0.027142942,
      -0.001749057,
      -0.00036001968,
      0.02165415,
      0.0007482292,
      -0.018315272,
      0.0073703537,
      0.0035158084,
      -0.024155173,
      -0.001431771,
      0.015192587,
      -0.009014616,
      0.0037273972,
      -0.009693631,
      0.00018063828,
      -0.041589346,
      -0.025846686,
      0.02278312,
      0.01924004,
      -0.0031565889,
      0.008580609,
      0.005631971,
      0.016470252,
      0.019617286,
      -0.0033688154,
      -0.007437397,
      -0.00027325554,
      -0.011103939,
      0.009770156,
      -0.041562624,
      -0.0037192202,
      -0.009867332,
      0.003302237,
      0.004829645,
      -0.021642841,
      0.03421117,
      0.0009804956,
      0.005399328,
      0.0095480215,
      0.011737998,
      -0.00054638344,
      0.017684855,
      -0.022278996,
      -0.0138736665,
      0.0007358006,
      -0.0022964359,
      0.020447636,
      -0.0004552879,
      0.009392734,
      -0.008261276,
      -0.016731659,
      -0.008889924,
      0.012783858,
      0.003264938,
      0.016784895,
      0.014995491,
      -0.0111501925,
      -0.011421846,
      0.0264896,
      0.02578921,
      -0.0016574662,
      -0.022495331,
      -0.019007035,
      0.02152868,
      0.0031252108,
      -0.015791446,
      -0.0007963723,
      0.0019349648,
      0.003639948,
      -0.011143249,
      -0.0026592347,
      0.0021759036,
      -0.0016716382,
      -0.026623074,
      0.016144821,
      0.0016344839,
      0.04295844,
      -0.111014724,
      0.02022353,
      -0.018873174,
      -0.0066222637,
      0.0036907177,
      0.0033439323,
      0.0024197712,
      -0.01343777,
      0.004389651,
      -0.004117521,
      0.001884664,
      0.012419492,
      0.0077297506,
      -0.010118809,
      -0.0073338132,
      0.006661954,
      -0.011783083,
      0.028814984,
      0.020950912,
      -0.005937211,
      0.01391329,
      0.008981177,
      0.00017949948,
      0.0335625,
      0.0030960178,
      -0.012844152,
      -0.011506401,
      0.0167399,
      0.005568029,
      0.006765278,
      -0.012332559,
      -0.0064714095,
      0.0063950024,
      0.009666368,
      0.021648502,
      -0.0035194706,
      0.0007577992,
      0.007538913,
      0.023272077,
      0.032268513,
      -0.0024161395,
      0.010962061,
      -0.001296207,
      0.00900921,
      -0.007657038,
      -0.008736546,
      0.009125844,
      -0.014928655,
      -0.012321899,
      0.01885282,
      -0.04608262,
      -0.029557526,
      -0.014719525,
      -0.045534022,
      0.02450994,
      -0.017408207,
      0.01672965,
      0.015188591,
      0.0024638083,
      0.0039741723,
      -0.009481495,
      0.01641339,
      -0.012071272,
      0.032340694,
      0.005303339,
      0.00031311394,
      0.00460659,
      0.016038125,
      0.010227621,
      0.000007265546,
      -0.01576008,
      -0.00009244017,
      -0.0053624017,
      0.030920908,
      -0.013113514,
      -0.004513343,
      -0.025541784,
      0.010913784,
      -0.012899236,
      0.023676015,
      -0.024092859,
      -0.017342372,
      -0.067258425,
      -0.013376638,
      -0.010101425,
      -0.009589293,
      -0.005232005,
      0.0033566616,
      -0.0039721862,
      -0.0007317512,
      0.00019204058,
      -0.0065502753,
      -0.007650695,
      0.0056744637,
      0.0058635287,
      0.0018812964,
      -0.001723952,
      0.011973602,
      0.0114701,
      -0.027521323,
      -0.009540867,
      0.0064129187,
      0.011173268,
      -0.0054819873,
      0.014837691,
      -0.013066416,
      -0.008443988,
      0.023404311,
      -0.03201826,
      0.010746914,
      -0.016841458,
      -0.01110746,
      -0.0106840795,
      -0.13380763,
      0.0008070672,
      0.000062819556,
      0.022228774,
      0.026392464,
      0.029188504,
      -0.0053411126,
      -0.031149825,
      0.018076694,
      -0.024215585,
      -0.007187248,
      -0.0024008963,
      -0.019124227,
      0.008183175,
      -0.0031734828,
      0.1279778,
      -0.0060302597,
      0.020902973,
      -0.0011396952,
      0.0021549987,
      0.018705392,
      0.0042572143,
      0.0008325894,
      0.017201915,
      -0.011890943,
      0.0015169603,
      0.00006848879,
      -0.020274065,
      0.03647481,
      0.014849623,
      0.0046163946,
      0.0029949807,
      -0.03075309,
      0.022427687,
      -0.022651708,
      -0.023015248,
      0.02415254,
      -0.017923288,
      -0.0013426648,
      -0.009653394,
      -0.0022473526,
      -0.012331944,
      -0.016447436,
      -0.011406358,
      0.0009410133,
      0.010609188,
      -0.0060149007,
      -0.016680801,
      0.0023885916,
      -0.018207703,
      0.0047207316,
      -0.055557083,
      -0.007341684,
      -0.0067121377,
      -0.0070870873,
      0.0018358941,
      0.019203255,
      0.02596135,
      -0.011177088,
      -0.0021208157,
      0.0077645504,
      0.012454973,
      0.02190915,
      0.017258203,
      0.0052412217,
      -0.0055290074,
      0.017771557,
      0.03369927,
      0.021115765,
      -0.004797733,
      -0.0072019687,
      0.008752168,
      -0.01812021,
      -0.01436643,
      0.00061952363,
      -0.0034521616,
      -0.005237466,
      -0.00010101642,
      0.0015062433,
      -0.019712176,
      -0.0025158245,
      0.013557874,
      0.004803217,
      -0.0049281823,
      0.021169756,
      -0.016287016,
      -0.030044846,
      0.014532634,
      -0.0021333187,
      -0.020171203,
      0.010158657,
      -0.0034402353,
      0.016054329,
      0.05062011,
      -0.0035259388,
      0.012305121,
      -0.016243529,
      0.012150249,
      0.023889229,
      0.019435784,
      0.0023717184,
      -0.03807609,
      0.0080110645,
      -0.008705662,
      0.023376854,
      -0.002415543,
      0.02464293,
      0.005068566,
      0.012163738,
      -0.020997614
    ]
  },
  {
    "id": "genai_cohort_nodejs_11_Nodejs_SystemDesign_QueueAsync_vtt",
    "content": "All right, so in this 2 particular video, let's understand 3 the asynchronous method 4 of talking between 5 the services, the communication 6 between the services. 7 So the most common thing, so let me 8 just delete this particular stuff. 9 Okay, so the most common thing that 10 we use to establish a communication 11 between the order service 12 is known as a queue system. 13 Okay, so what is a queue? 14 So if we talk about a queue, okay, 15 so that's that this a queue. 16 And let me just make it, solid. 17 A queue works on a FIFO principle. 18 FIFO is first in and first out. 19 Okay, first in, first out. 20 That means what you can do is you 21 can keep on enqueuing something 22 here that is in cube, that is 23 pushing something into the cube. 24 So let's say that this is a data that 25 you want to put it in the queue. 26 So let's say this is your data 27 one, data two, data three, 28 data four and data five. 29 And then from the other end you can 30 keep on dequeuing the stuff, okay? 31 DQ. 32 So DQ happens in the sequence 33 like 1, 2, 3, 4, 1, 2, 3, 4. 34 So this is your queue. 35 So what we can do in an microservice 36 asynchronous architecture 37 is we can introduce a queue. 38 So let's say what I'm going 39 to do is I'm going 40 to introduce a queue system. 41 So let's search for sqs. 42 This is a queue system by aws. 43 Okay, so these are just terms. 44 That's okay whenever you place 45 an order, okay, let's name this 46 queue as, you know, order queue. 47 Let's say this is an order 48 queue, okay? 49 Or maybe I'll just name 50 it as email queue. 51 Okay, Email queue. 52 So what you can do is basically you 53 can push something into the queue. 54 Okay? 55 Now when you push something 56 into the queue, pushing something 57 into the queue is instant. 58 You need not to wait for it. 59 Just push into the queue 60 and forget it. 61 Okay? 62 Just push into the queue 63 and forget it. 64 So you are basically just pushing 65 messages into the queue and you 66 don't have to worry if someone is on 67 the other side of the queue or not. 68 So you are basically enqueuing 69 the message into the queue, but 70 need not to worry that if there 71 is someone de queuing these 72 messages or not now what will 73 happen is this is known as in 74 queue, right? 75 So what you are doing here 76 is basically in queuing 77 the messages, okay? 78 Now this email service, 79 on their own pace can keep on 80 dequeuing these messages, okay? 81 So let me just change the color. 82 Let's say this one. 83 So they are basically DQ DQing 84 the message one by one and sending 85 the email and then processing it. 86 Now the benefit of this particular 87 architecture is that let's say 88 the email service is only capable 89 of sending five messages 90 per, let's say per second. 91 Okay, it can only send 92 five messages per second. 93 But the orders are actually placed 94 in a very vast majority. 95 You know, the people are placing 96 like hundreds of orders per second. 97 So what you can basically do is 98 you can just throw these messages 99 into the queue, just keep 100 on throwing, throwing, throwing, 101 throwing, throwing, and then. 102 But on the email service you 103 can actually pull the message 104 in a controlled manner. 105 Got. 106 Now that is the reason that when 107 you place an order, sometimes 108 you receive an email later. 109 Because what happens is if there are 110 hundred orders, so there are hundred 111 messages in the queue, that's 112 okay, they are lying in the queue. 113 But you can still, you, know, 114 dequeue the messages at the rate 115 of five messages per second. 116 So you pull five, now you are left 117 with 95, you pull another 118 five, now you are left with 90. 119 So what happens is this, 120 this also acts as a bottleneck 121 in the system so that 122 the email service is not down. 123 And email service can work 124 on its own pace. 125 Similarly, you can even 126 have more queues. 127 For example, there is 128 a payment queue, right? 129 So let's have a payment queue. 130 So whenever you want, whenever 131 the payment queue wants to, you 132 know, whenever the order wants 133 to request a payment, you can just 134 put it into the payment queue. 135 The payment queue can 136 poll the messages. 137 Basically dequeue the messages 138 at their own pace. 139 So whenever you talk about 140 a microservice architecture, 141 internal communication 142 of the microservices usually happens 143 through a queue system because 144 number one, it is more scalable. 145 It helps you to decouple. 146 Because what happens is, let's say 147 the email service is down, let's 148 make the email service as down. 149 So I'll just make it as red. 150 So what happens is still you can 151 put the message into the queue. 152 You don't have to worry if the email 153 service is up and running and it 154 is pulling for the messages. 155 So what will happen is the messages 156 will get, you know, the queue will 157 be getting filled, there will be 158 more messages into the queue. 159 But whenever, whenever the 160 developer comes back and he fixes 161 the email service and email 162 service is back up and running, 163 then you can again start pulling 164 the messages so you are not losing 165 onto the messages and it is more 166 decoupled approach. 167 So queues are commonly used between, 168 as a communication protocol, 169 between microservices. 170 In a microservice architecture.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "11-Nodejs-SystemDesign-QueueAsync.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/11-Nodejs-SystemDesign-QueueAsync.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.01258801,
      0.026150305,
      0.01357344,
      -0.061268207,
      -0.034403086,
      0.008801925,
      0.015228242,
      0.011084788,
      -0.0026617171,
      0.0045941095,
      0.0051849913,
      0.014057836,
      0.01688845,
      0.04198161,
      0.119150385,
      -0.009959447,
      -0.011037823,
      -0.0016805481,
      -0.027541168,
      -0.020424562,
      -0.0054091797,
      0.0014692771,
      -0.0065504867,
      0.018974133,
      0.005343522,
      0.0075004953,
      0.031560533,
      -0.007745142,
      0.008386873,
      0.0015876238,
      -0.015399565,
      -0.0042662723,
      -0.010333232,
      0.033976942,
      0.002753901,
      0.009254996,
      0.0199601,
      -0.003946396,
      -0.023800917,
      0.015261839,
      -0.0046625272,
      -0.0013897491,
      0.0067199785,
      0.0030736974,
      -0.00962759,
      0.001585823,
      -0.0051813847,
      -0.010082929,
      0.011643068,
      -0.011612661,
      0.0112348795,
      -0.006549095,
      0.0045669205,
      -0.18389931,
      0.010175259,
      0.0028534296,
      -0.002816322,
      0.0016484649,
      0.009263213,
      -0.0015549192,
      -0.01358046,
      0.0014756869,
      -0.015957246,
      -0.014516688,
      -0.0060796463,
      -0.0015906172,
      0.01957546,
      0.01678765,
      0.010821294,
      0.0041190092,
      0.016683167,
      0.0012198619,
      -0.011986262,
      0.00035232847,
      -0.012634853,
      -0.039180264,
      -0.012363338,
      -0.0044287858,
      -0.0136222765,
      0.008855572,
      -0.008271092,
      -0.028971817,
      0.0036582605,
      -0.0070871646,
      0.0032024598,
      -0.0017466984,
      -0.017721165,
      0.011578084,
      0.012426695,
      0.0014958652,
      0.008015311,
      0.00889163,
      -0.004743763,
      -0.019544214,
      -0.0047134534,
      -0.0018240489,
      -0.003701754,
      -0.0036612465,
      -0.03197438,
      -0.014766247,
      0.012784691,
      0.0059777685,
      -0.026828313,
      0.0292823,
      0.0073460895,
      -0.024925139,
      0.010913001,
      -0.0024576113,
      0.0021318698,
      -0.018906344,
      0.0033371453,
      -0.023883305,
      0.03147937,
      0.0057458878,
      -0.004414357,
      -0.16537832,
      0.0099506965,
      -0.005811859,
      -0.008201749,
      -0.0023985873,
      -0.01661518,
      -0.0011190573,
      0.009749783,
      -0.0026972243,
      -0.0154027315,
      -0.005091303,
      0.002416793,
      0.0032377962,
      0.016422166,
      0.010636618,
      -0.014219817,
      -0.018480824,
      -0.02833172,
      0.016413065,
      0.01599357,
      0.0070468998,
      -0.006858057,
      -0.021068072,
      -0.01599401,
      -0.01834756,
      0.017783796,
      0.025236355,
      -0.010615815,
      0.033502534,
      -0.0003096284,
      0.014664157,
      -0.018156135,
      0.00067650975,
      -0.018949633,
      -0.033894647,
      0.021236401,
      0.0062163565,
      0.0048658946,
      0.005737583,
      0.020656971,
      -0.01935151,
      -0.009759836,
      0.0027928127,
      0.02878488,
      -0.008660844,
      -0.017650396,
      0.015029624,
      0.0023026406,
      0.014693944,
      -0.0006312033,
      -0.0031378055,
      -0.006504338,
      0.025472248,
      0.01510339,
      0.0017130915,
      -0.017209027,
      -0.011438524,
      -0.015506553,
      0.00138039,
      -0.0026715463,
      0.009609797,
      -0.008972013,
      -0.009800827,
      0.026315698,
      -0.0017774339,
      0.012502171,
      -0.024174584,
      -0.010992186,
      -0.011069416,
      -0.0050881943,
      -0.010481442,
      -0.03824044,
      0.0019100574,
      -0.0011193996,
      -0.003801801,
      0.001360834,
      0.0099206455,
      0.008622637,
      -0.0043521286,
      0.0030560005,
      -0.023272566,
      -0.0007314471,
      0.017037887,
      -0.021237541,
      0.01956381,
      -0.014153914,
      -0.013794383,
      0.017180832,
      -0.03140635,
      0.010071214,
      -0.016541373,
      0.008512793,
      -0.021683153,
      0.0068528946,
      0.019936308,
      0.0032517593,
      -0.027181767,
      0.0242789,
      -0.001868409,
      0.010736572,
      0.0018578691,
      0.01828737,
      0.014494195,
      -0.013360152,
      -0.029996773,
      -0.016272726,
      -0.0151291825,
      0.016275026,
      0.014488919,
      0.024084177,
      0.004348177,
      -0.008430377,
      0.00324174,
      0.011197041,
      -0.0047587277,
      0.011758866,
      0.011121521,
      -0.028176297,
      0.0014457182,
      0.011803005,
      -0.0020184852,
      -0.000093003975,
      0.019220736,
      0.0146013135,
      0.0029807137,
      -0.012396637,
      0.001156822,
      -0.0063117705,
      0.007977659,
      0.011293888,
      0.0045134677,
      -0.0047499714,
      0.008218036,
      0.004575183,
      -0.030649025,
      0.00948189,
      -0.005956336,
      0.002543675,
      -0.020247258,
      0.016822472,
      -0.02570514,
      -0.038371194,
      -0.008035651,
      -0.023171578,
      -0.008687062,
      -0.020742005,
      -0.033163007,
      -0.021043146,
      -0.0072871554,
      0.006587291,
      -0.006686472,
      0.015229804,
      0.014438728,
      -0.008860974,
      0.016758328,
      0.011977908,
      0.006665802,
      -0.021253215,
      -0.0031499274,
      0.00082871947,
      0.004992633,
      -0.08874571,
      -0.0021016563,
      -0.005816992,
      -0.036114324,
      -0.013914386,
      -0.0028791274,
      0.015266236,
      0.01608244,
      0.020946385,
      -0.0011416861,
      -0.011165852,
      -0.021552406,
      0.01349883,
      -0.02215022,
      -0.0031726996,
      0.014771869,
      0.0070436425,
      0.009521846,
      0.036255635,
      -0.0140632605,
      -0.015609377,
      0.015975684,
      0.0076018064,
      -0.0021622179,
      0.02172031,
      -0.02119237,
      -0.01577333,
      0.015232076,
      0.021780875,
      -0.00278759,
      0.010569625,
      0.027688874,
      -0.014466568,
      0.0096750995,
      -0.008962535,
      -0.003133464,
      0.012835037,
      -0.0049339375,
      0.008285311,
      -0.020610878,
      -0.005463873,
      -0.018340167,
      0.007636085,
      0.011267271,
      -0.0038641978,
      0.012714259,
      0.004586087,
      0.033994094,
      -0.014444734,
      0.010332145,
      -0.021368688,
      -0.014530527,
      0.024005847,
      -0.020208027,
      -0.004866004,
      0.00497872,
      0.011078633,
      0.01015,
      0.0058984407,
      0.029980866,
      0.008355859,
      0.0003570522,
      -0.0022946498,
      0.0071599274,
      0.007001312,
      -0.011058674,
      0.0016126113,
      -0.02422801,
      -0.015925104,
      0.0028911682,
      0.021889023,
      -0.016044714,
      -0.013112258,
      -0.054977775,
      0.0012939557,
      0.035045207,
      0.008476374,
      -0.0021380978,
      -0.041793026,
      0.017236447,
      0.031469207,
      0.009996693,
      0.017444536,
      0.013913979,
      0.019655734,
      0.007280401,
      0.014037552,
      -0.017174568,
      -0.01873398,
      -0.034419145,
      0.01170431,
      0.012404847,
      -0.024374474,
      -0.0037240975,
      -0.014551797,
      0.021807533,
      -0.020289425,
      0.016499594,
      -0.01007458,
      0.020067072,
      -0.008522949,
      0.01708769,
      -0.019477366,
      0.0038964164,
      -0.024592401,
      0.032374725,
      -0.007987046,
      0.0013716011,
      0.000051890427,
      -0.00984325,
      -0.0055092145,
      -0.0100221075,
      -0.029964207,
      -0.011860519,
      -0.0036103257,
      0.015968936,
      0.022561893,
      -0.0059578214,
      -0.00042593578,
      -0.0022490576,
      -0.010030549,
      0.014461577,
      0.00014638102,
      -0.000566165,
      -0.016107842,
      -0.011077348,
      0.0035121408,
      0.032440376,
      0.0036558043,
      -0.03746891,
      -0.00012449188,
      -0.00855642,
      -0.0038058066,
      -0.0103070615,
      0.008394344,
      -0.012866705,
      0.0051476434,
      -0.0023839073,
      0.021591334,
      0.008557499,
      -0.010050082,
      0.0053547807,
      0.013248483,
      -0.0037952173,
      -0.008258798,
      0.0047520255,
      -0.007433317,
      0.007155965,
      0.019644301,
      -0.01151166,
      -0.035766356,
      -0.020239867,
      -0.022494152,
      -0.03842494,
      0.010650502,
      0.01982852,
      -0.011708152,
      0.014064772,
      -0.0046151374,
      -0.014618497,
      -0.008644525,
      -0.044572774,
      -0.01365939,
      -0.018316055,
      0.0077853887,
      0.009316367,
      -0.000634428,
      -0.0074120467,
      0.014070437,
      0.017803567,
      -0.023906032,
      -0.017486004,
      -0.030888196,
      0.003983666,
      0.020817604,
      -0.00009283182,
      -0.017151905,
      -0.016365504,
      0.03277335,
      0.0024441949,
      0.014453113,
      -0.0088144,
      -0.019979788,
      0.00007500646,
      0.007877539,
      0.01614923,
      0.018706808,
      0.0057881684,
      -0.016819363,
      -0.018569497,
      -0.024820238,
      -0.018930217,
      -0.033632945,
      0.010188242,
      -0.004876433,
      0.0150020225,
      0.011663826,
      -0.023994293,
      -0.0109010395,
      -0.019896286,
      -0.013874864,
      -0.008080235,
      0.018421847,
      -0.019458232,
      -0.00019051839,
      -0.010863,
      -0.017161302,
      -0.026452785,
      -0.009980326,
      0.023863738,
      0.009906459,
      -0.00051080517,
      0.0015516613,
      -0.01358187,
      0.00404529,
      0.0009807241,
      -0.025216741,
      -0.028818823,
      -0.007431815,
      -0.0041084196,
      0.027547566,
      -0.03488473,
      0.014968118,
      -0.012231217,
      -0.0147937685,
      0.00499355,
      -0.020797664,
      0.020590918,
      0.014426401,
      0.0025887552,
      -0.0014917416,
      0.024465779,
      -0.002457671,
      0.030573701,
      -0.0269919,
      0.004910689,
      0.0036224227,
      0.006005874,
      0.01720387,
      -0.005743272,
      0.013048724,
      0.00056643493,
      -0.008036558,
      0.0046765124,
      -0.0025994824,
      0.0002855673,
      0.02584769,
      0.0235346,
      -0.002498822,
      -0.0203914,
      0.010399416,
      0.031787142,
      0.00013047957,
      -0.021989847,
      -0.01858504,
      0.026285948,
      -0.0039250595,
      0.001991011,
      0.010827974,
      0.002102718,
      0.007821793,
      -0.0040359544,
      0.0010673444,
      0.009974913,
      0.014645311,
      -0.013923683,
      0.016538596,
      0.008162323,
      0.037186723,
      -0.11066383,
      0.001956735,
      -0.009397031,
      0.0057629244,
      -0.008564651,
      -0.0024688505,
      -0.015171021,
      -0.014826416,
      0.009929267,
      -0.007586086,
      0.014179989,
      0.015183638,
      0.009170739,
      -0.016995024,
      -0.004883941,
      -0.003997957,
      0.010043784,
      0.021017645,
      0.0128514,
      -0.014267465,
      0.0022358093,
      0.014986818,
      0.00020966023,
      0.016643474,
      0.0085420925,
      -0.010036224,
      -0.016090322,
      -0.00013230997,
      0.005967324,
      -0.011604942,
      -0.0230136,
      -0.000101212296,
      -0.0048791245,
      0.017081909,
      0.031630486,
      -0.0018021528,
      -0.0026878242,
      0.016441597,
      0.0028912488,
      0.02748604,
      -0.00042608008,
      0.005343577,
      0.016324572,
      0.0012274707,
      0.006571939,
      0.00476502,
      0.018595038,
      -0.0061306874,
      0.002364045,
      0.015717503,
      -0.022537649,
      -0.022840016,
      -0.0134563055,
      -0.035694364,
      0.008607527,
      -0.011961791,
      0.013312252,
      -0.004353528,
      -0.022961972,
      -0.01804828,
      -0.006536583,
      0.025870526,
      -0.00028269165,
      0.02836917,
      -0.01890962,
      0.0070948913,
      -0.0061132023,
      0.019589536,
      0.017836688,
      0.0029307718,
      -0.015316854,
      -0.013705504,
      -0.0030392807,
      0.03681893,
      -0.017039843,
      0.00080200227,
      -0.018736845,
      0.014348227,
      -0.005581031,
      0.024894772,
      -0.023480043,
      -0.03765887,
      -0.06784414,
      -0.014659832,
      0.0058665904,
      -0.02810208,
      0.015303915,
      0.0039846487,
      -0.014955715,
      -0.0035640406,
      -0.010818793,
      -0.006967503,
      -0.035999306,
      -0.0021453057,
      0.00044573733,
      -0.0016459167,
      0.008162332,
      0.006295721,
      0.013981726,
      -0.019409036,
      -0.016080715,
      0.0053265183,
      0.0025176846,
      -0.0017920827,
      0.015237354,
      -0.0047806334,
      -0.0063049914,
      0.0056074793,
      -0.03477463,
      0.0024940856,
      -0.013467589,
      0.0011650636,
      -0.011502692,
      -0.15231909,
      0.013075001,
      -0.00055958604,
      0.02410226,
      0.011536064,
      0.024478937,
      -0.017228028,
      -0.03757756,
      0.00067993,
      -0.020877225,
      0.000521303,
      -0.00016595346,
      -0.0044903476,
      0.009419392,
      -0.010000891,
      0.13157374,
      -0.016131256,
      0.009260473,
      0.01372509,
      0.014398621,
      0.0030981905,
      0.0047758156,
      -0.0049525695,
      0.013989165,
      -0.02668421,
      -0.0030549522,
      -0.0014841546,
      -0.015713364,
      0.017247103,
      0.014681171,
      0.01367215,
      -0.0008217318,
      -0.028432848,
      0.017000536,
      -0.009331437,
      -0.03620492,
      0.025593935,
      -0.002217882,
      -0.00031791962,
      0.0016089489,
      0.014482238,
      -0.02287443,
      -0.008757396,
      0.0037589213,
      0.008903707,
      0.008797849,
      -0.0020047096,
      0.001032813,
      -0.017068466,
      0.0015747977,
      -0.009492267,
      -0.06508542,
      -0.013752507,
      0.0013733598,
      -0.0018861183,
      0.009225859,
      -0.00011255963,
      0.011688284,
      0.00752749,
      -0.008470658,
      -0.00288553,
      -0.002272249,
      0.03317553,
      0.0137317395,
      0.008282855,
      0.0028782028,
      0.014239337,
      0.012513188,
      0.030260185,
      0.0072735194,
      -0.014754528,
      0.016669696,
      0.0010220214,
      -0.018072098,
      -0.0073740147,
      -0.021152254,
      -0.021394722,
      0.018537443,
      0.009403454,
      -0.025389304,
      -0.000543855,
      0.007081272,
      0.0112118665,
      -0.0015726365,
      0.013033256,
      -0.020991739,
      -0.0038021144,
      0.0072725327,
      0.008585502,
      -0.008261877,
      -0.002210867,
      -0.012138654,
      0.02297839,
      0.04455145,
      0.00025806561,
      0.014427377,
      -0.015419156,
      0.016290877,
      0.02957171,
      0.018023267,
      0.006973287,
      -0.031015184,
      0.013641565,
      -0.025956018,
      0.027525527,
      -0.012136735,
      0.011120831,
      0.009115638,
      0.0037890817,
      -0.027684713
    ]
  },
  {
    "id": "genai_cohort_nodejs_12_Nodejs_SystemDesign_FanOut_vtt",
    "content": "All right, so in this particular 2 video, let's understand one more 3 very important concept because now 4 we already know about queue systems. 5 You know, even there is a small 6 problem with the queue system. 7 Let's say what happens is 8 whenever, okay, I'll just give you 9 a scenario that whenever 10 there is a payment success, okay? 11 Whenever there's a payment success, 12 you want to do couple of things. 13 Number one, you want 14 to trigger and email, okay? 15 And you want to update 16 the order to be success. 17 Let's say these are the two 18 things that you want to do. 19 Now in this particular architecture, 20 how you are going to do it? 21 Number one, the first way using 22 the simple queues, is what 23 you are going to do whenever 24 a payment gets successful. 25 First thing is that you 26 enqueue something into 27 the email queue, right? 28 So that it can be sent email send. 29 Second is that you 30 need one more queue. 31 Let's name this particular 32 queue as the order queue. 33 You are going to push one more 34 message into the order queue which 35 can be later processed by the order 36 service to update something. 37 Now see what happened here, you 38 are basically doing two different 39 tasks about one operations. 40 So whenever there's a payment 41 successful, you are 42 doing two different tasks. 43 What if these were three tasks? 44 Then you have to add one more thing. 45 Now this is a bad thing, right? 46 You are doing multiple things 47 when one event occurs. 48 So in this particular scenario, 49 we actually don't use 50 these kind of architectures. 51 We don't want this kind 52 of branching out everywhere. 53 We do something known as Pub nub. 54 Okay? 55 In pubnub, what happens is that 56 you basically put a publisher, 57 okay, let's take S and S. 58 So SNS is basically one too many. 59 So what you do, the payment service 60 can publish an event, okay? 61 An event saying payment success. 62 That's it, payment success. 63 So this is your event and you 64 are publishing this event 65 to some kind of a broker system. 66 Now this service can do is 67 it can internally send this message 68 to the order queue as well. 69 And it can internally send 70 the message automatically 71 to the email queue as well. 72 Because email queue and order queue 73 both are listening to this thing. 74 So if you see this diagram, it is 75 basically one too many, right? 76 One too many. 77 And there's a filter. 78 So what can, what you can do is you 79 can use this kind of an 80 architecture where now see, the 81 payment service is only and only 82 sending and emitting one event that 83 is payment success. 84 And if someone wants to do something 85 with that payment success, they 86 can do it right Tomorrow maybe I 87 have one more, one more service. 88 Let's say this is a WhatsApp service. 89 I also want to trigger 90 a WhatsApp service. 91 So what I can do is this WhatsApp 92 service can also listen 93 to this particular pub now. 94 So there is no change needed 95 on the payment side payments. 96 So it's basically like, you know, 97 let's say I am a payment service. 98 I can just you know, shout, hey, 99 the payment is successful. 100 And all the people in this room, if 101 they want to do something with 102 this information, they can do it. 103 It's basically like that. 104 So earlier what we were basically 105 doing with the email system was I, 106 as a payment service was going to 107 person A, that hey, this person has 108 done a payment, do you want to do 109 something? 110 I was going to person two that, hey, 111 he has done the payment service, 112 do you want to do something? 113 Rather now what I am basically 114 doing is I'm just shouting in 115 the air that payment is successful. 116 Whosoever wants to do 117 something, they can do it. 118 So this is your Pub Nub architecture. 119 And also, also, because if you 120 clearly see this, what happened 121 is you had one publisher. 122 So let's say you had 123 a publisher here. 124 This is, this is a publisher. 125 You published it to a topic. 126 SNS has a concept of topics, so sns. 127 So let's say this is 128 your pubnub, okay? 129 To a Pub Nub. 130 Now from this Pub Nub, 131 you are basically sending it 132 to multiple queues. 133 So let me just take an example 134 of a queue here. 135 So let's say this is your 136 queue system, okay? 137 So queue, then again a queue, 138 then again a queue. 139 So this is order queue, payment 140 queue, some other queue. 141 So this Pubnub sends this message 142 to 1, send this message to 2, 143 and sends this message to 3 queues. 144 This is also known as a, 145 fan out architecture. 146 Okay, so this is your fan out 147 architecture because if you notice 148 here, one message is getting 149 fanned out to multiple services 150 and to this multiple services. 151 Then you have your 152 servers listening to it. 153 So basically you have your servers. 154 So maybe you can have like 155 two servers right here, you can 156 have one server here, you can 157 have multiple servers here. 158 So these are basically dequeuing 159 your messages and processing it. 160 So this is how the reality works. 161 So whenever you place an order 162 on the Amazon, they just 163 say, hey, order received. 164 Whichever service wants to listen 165 to it, email service wants to listen 166 to it, WhatsApp service wants to 167 listen to it, some marketing or ad 168 service wants to listen to it. 169 They just keeps on listening it 170 and do their work and they go on. 171 So this is a true decoupling 172 between microservice architecture. 173 That is a fan out architecture. 174 So just look at this 175 particular complex diagram. 176 I mean, we have studied a lot 177 of things in the system design.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "12-Nodejs-SystemDesign-FanOut.vtt",
      "originalPath": "genai-cohort/nodejs/03 Subtitles BoSysDes/12-Nodejs-SystemDesign-FanOut.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.005418562,
      0.0002914087,
      0.009223327,
      -0.051055234,
      -0.033358626,
      -0.0036366696,
      0.006712799,
      0.042315092,
      -0.010479251,
      0.014224363,
      0.0047116103,
      0.013684348,
      0.011682236,
      0.022228438,
      0.11303249,
      -0.017957613,
      -0.025985995,
      -0.0053795795,
      -0.024372838,
      0.0017901416,
      0.005348951,
      -0.010908868,
      0.0017244355,
      0.0041749915,
      -0.013540381,
      0.012153892,
      0.023192583,
      -0.010006095,
      0.009451282,
      -0.00765785,
      0.00046998385,
      0.017016921,
      -0.007981065,
      0.041275512,
      0.00802043,
      0.021971423,
      0.029401805,
      0.00067409565,
      -0.016422242,
      0.01963301,
      0.016318403,
      -0.008918576,
      0.010588435,
      0.0128145525,
      0.011067037,
      -0.0036598966,
      -0.008285088,
      -0.007376942,
      0.0053752232,
      0.0037652208,
      -0.004878249,
      -0.007834177,
      0.0025159528,
      -0.17932263,
      0.007828927,
      0.007879622,
      -0.012861404,
      0.0026139044,
      -0.0033091262,
      0.014107216,
      -0.030247455,
      -0.0000215067,
      -0.029576927,
      -0.030587044,
      -0.004549474,
      0.008219024,
      0.017548738,
      -0.0074270964,
      0.0030508633,
      -0.00841357,
      0.028156096,
      -0.005279415,
      0.0037559224,
      -0.009312572,
      -0.011979881,
      -0.03500526,
      0.006414132,
      -0.017853122,
      -0.022911495,
      0.014555513,
      -0.005581228,
      -0.021695614,
      -0.014014608,
      -0.015899146,
      0.0008739217,
      0.0037486944,
      -0.019598052,
      0.004953371,
      0.0024898248,
      0.011571919,
      0.00009036708,
      -0.008695487,
      0.009041245,
      -0.018758306,
      -0.013898816,
      0.0026322186,
      -0.025898196,
      -0.0014387616,
      -0.009465978,
      -0.0005974305,
      0.0029712156,
      -0.009133374,
      -0.01450942,
      -0.0019069747,
      -0.012561903,
      -0.0037997342,
      -0.0013881626,
      -0.0024531428,
      0.012630799,
      -0.029423365,
      0.010702398,
      -0.0141159315,
      0.016228603,
      -0.0065065455,
      0.0040018526,
      -0.16371824,
      0.016346052,
      -0.00072882784,
      -0.023204204,
      0.0022927488,
      -0.013021748,
      -0.0022929232,
      0.03548383,
      -0.008811648,
      -0.0058218287,
      -0.0010395274,
      0.0053426633,
      0.023395097,
      0.011588508,
      -0.0030931002,
      -0.018562023,
      -0.02332085,
      -0.03035558,
      0.009799397,
      0.0055763237,
      0.01358269,
      -0.018517772,
      -0.02218366,
      -0.023411281,
      -0.021128988,
      -0.00066747837,
      0.018460156,
      -0.006362506,
      0.01961635,
      -0.0107897455,
      -0.0025680251,
      -0.04689582,
      0.013003226,
      -0.0075253905,
      -0.038568124,
      0.02953688,
      0.013637284,
      0.014184478,
      0.0066885087,
      0.016013652,
      -0.023500672,
      -0.0020614942,
      0.0033347285,
      0.01521158,
      -0.0047307694,
      -0.0073574395,
      0.017323999,
      0.00029046508,
      0.009316813,
      0.0038484752,
      0.013331664,
      -0.020315895,
      0.013628028,
      0.016983442,
      0.0009695221,
      -0.01851599,
      -0.015909605,
      -0.020620575,
      0.018489802,
      -0.013364228,
      0.0027597686,
      -0.019666847,
      0.0063209333,
      0.030612465,
      -0.011476067,
      0.005949574,
      -0.015678007,
      -0.012322474,
      -0.017953016,
      -0.0095333615,
      -0.0026541364,
      -0.02650349,
      0.0107199745,
      0.0050751795,
      0.010923823,
      0.007963248,
      -0.0040247967,
      0.009538643,
      0.0038138998,
      0.008475702,
      -0.0345035,
      0.013151588,
      0.016072882,
      -0.012347301,
      0.0055322163,
      -0.004773868,
      -0.009477621,
      0.012958035,
      -0.011798103,
      0.0030045626,
      -0.019592768,
      0.012817072,
      -0.030547332,
      0.028582253,
      0.022636168,
      -0.004991432,
      -0.019244267,
      0.021932801,
      -0.0067473226,
      -0.008128918,
      -0.0037575392,
      0.018762141,
      0.0020506016,
      -0.012898063,
      -0.028806726,
      -0.0051459903,
      -0.018235292,
      -0.0030645363,
      0.0154452445,
      0.030247135,
      0.007888783,
      -0.009371102,
      -0.0052089626,
      0.003486128,
      -0.0054932656,
      0.007559977,
      0.031065479,
      0.002154512,
      -0.00032785986,
      0.012194955,
      -0.009480478,
      0.008517102,
      0.03250082,
      -0.0101570105,
      0.011108177,
      -0.0050045056,
      -0.00056864164,
      0.00085985474,
      0.013668531,
      0.0055235145,
      0.012435757,
      0.007530603,
      0.00061619404,
      -0.003498412,
      -0.02197478,
      0.0005295167,
      0.004746211,
      0.0040124115,
      -0.0033931579,
      0.012328712,
      -0.01482029,
      -0.036957167,
      -0.003705939,
      -0.0076282336,
      -0.010723865,
      -0.013677351,
      -0.017810632,
      0.0043904334,
      -0.019448498,
      -0.00979968,
      -0.0114506455,
      0.0011330462,
      0.026467387,
      -0.016986927,
      0.0050183707,
      0.0065896413,
      -0.00797486,
      -0.023605192,
      -0.006916174,
      -0.012856891,
      0.0069733993,
      -0.081508964,
      -0.005665712,
      0.0033155296,
      -0.02034566,
      -0.008679339,
      0.0013301331,
      0.0048134867,
      0.029644223,
      0.025554266,
      0.005505778,
      -0.010753667,
      -0.019026186,
      0.008593784,
      -0.019908348,
      -0.00048161956,
      0.027263802,
      0.0010346209,
      0.005420507,
      0.022640513,
      -0.018612074,
      -0.011781036,
      0.00026794823,
      0.0020884764,
      0.0034645258,
      0.03732567,
      -0.010302064,
      -0.027571281,
      0.041790124,
      0.03426543,
      -0.005851185,
      0.011976244,
      0.007925109,
      -0.0035129855,
      0.022804853,
      -0.00084565487,
      0.006014236,
      0.018753348,
      -0.016675213,
      0.009293265,
      -0.024714049,
      0.009914742,
      -0.007716877,
      -0.0040270397,
      0.02404814,
      -0.0052682273,
      -0.0053256284,
      0.0045937286,
      0.0349633,
      -0.011257408,
      -0.000052555144,
      0.0030396217,
      -0.02507088,
      0.009734999,
      -0.022857575,
      0.006292407,
      0.0032516916,
      0.008045346,
      0.0018691745,
      -0.015376707,
      0.011712909,
      0.011557394,
      -0.0033266228,
      -0.0057652295,
      0.022375103,
      0.0043115388,
      -0.025040425,
      -0.005601185,
      -0.0380048,
      -0.0006391096,
      0.0077676526,
      0.0071984567,
      -0.021500638,
      0.0029125696,
      -0.035450652,
      0.008492684,
      0.028903231,
      0.007301282,
      -0.015495284,
      -0.036326166,
      0.020725146,
      0.01593505,
      0.0097372625,
      0.010203699,
      0.009394752,
      0.015311235,
      0.008157292,
      0.006750905,
      -0.001186907,
      -0.006631069,
      -0.024557488,
      0.027593888,
      -0.0044212188,
      0.0021966402,
      0.0018824642,
      -0.010572062,
      0.008424324,
      -0.026579913,
      0.016262697,
      -0.0031776808,
      0.0071195476,
      -0.0001235332,
      0.0019718418,
      -0.028388927,
      0.0031848485,
      -0.01758708,
      0.037504625,
      0.0083575845,
      0.0061737862,
      0.012461254,
      -0.012204419,
      0.0016024241,
      0.0021906104,
      -0.020982178,
      -0.02295165,
      -0.014023998,
      0.009114112,
      0.005949123,
      0.009488934,
      -0.0102418875,
      0.001653068,
      0.0046999324,
      0.018508725,
      -0.00903327,
      0.0045957724,
      -0.015402154,
      -0.012859837,
      -0.007820765,
      0.00942701,
      0.004435951,
      -0.032206632,
      -0.008422308,
      0.0009923428,
      -0.01713768,
      -0.014899594,
      -0.012876693,
      -0.006102608,
      0.003896994,
      -0.013695794,
      0.016267225,
      0.018664131,
      -0.01953287,
      -0.00010911976,
      0.021461478,
      -0.009524044,
      -0.016564438,
      0.0018914043,
      -0.01146668,
      0.0037779042,
      0.010918237,
      -0.009916128,
      -0.030129466,
      -0.01696866,
      -0.01571544,
      -0.017927593,
      -0.019258834,
      0.014580041,
      -0.005845663,
      0.022092568,
      -0.004841846,
      -0.016827995,
      -0.002336166,
      -0.038593274,
      -0.017446898,
      -0.018172927,
      -0.006207649,
      -0.007865239,
      -0.004077581,
      0.0072297105,
      0.0041281297,
      0.0037396878,
      0.008249788,
      -0.011340353,
      -0.04271245,
      -0.002972815,
      0.017682964,
      0.018069573,
      -0.017064977,
      -0.0043323427,
      0.029038023,
      0.010854797,
      0.006339039,
      -0.016418478,
      -0.020357901,
      0.016973699,
      0.0078030806,
      0.0038556827,
      0.0068879602,
      0.00073715486,
      -0.017382946,
      -0.0031087492,
      -0.018626707,
      -0.014296758,
      -0.025757076,
      -0.004396301,
      0.013695037,
      0.018053774,
      -0.0022129843,
      -0.022635281,
      -0.0027901512,
      -0.007951551,
      -0.013631521,
      -0.0077736587,
      0.011763752,
      -0.011586218,
      0.019893337,
      -0.0039435956,
      -0.0086567225,
      -0.005218241,
      -0.0053625302,
      0.029819587,
      -0.0011722976,
      -0.0029363802,
      -0.0000855427,
      -0.019491352,
      0.007857815,
      0.022292944,
      -0.022274496,
      -0.02393077,
      -0.0050358386,
      0.0035843307,
      0.013456377,
      -0.043060374,
      0.012997151,
      -0.008328855,
      -0.017737642,
      0.009639179,
      -0.017670622,
      0.02189466,
      -0.0010116962,
      0.0059525687,
      0.003993277,
      0.037978888,
      -0.010282244,
      0.020778114,
      -0.025256285,
      -0.001944082,
      -0.01415995,
      0.0025840646,
      0.018885164,
      0.0029665704,
      0.0125885485,
      -0.0044810968,
      -0.008345069,
      0.0036381816,
      0.0069947117,
      -0.01960286,
      0.020734878,
      0.01130847,
      -0.004056696,
      -0.026871547,
      -0.0005770622,
      0.031350516,
      0.008834819,
      -0.020508355,
      -0.014668488,
      0.029674692,
      -0.0000049289856,
      -0.004775533,
      0.038005754,
      0.01119847,
      -0.0003964806,
      0.01360135,
      -0.006123447,
      0.008035968,
      0.0166812,
      -0.020919027,
      0.023323253,
      -0.0063472,
      0.026326401,
      -0.11661269,
      0.022244502,
      -0.022851797,
      0.0048116343,
      -0.018545916,
      -0.0056221485,
      -0.011888837,
      -0.040438548,
      0.014492592,
      -0.0027494144,
      0.009386732,
      0.013537531,
      0.013282314,
      -0.010647881,
      0.008889884,
      -0.0039772606,
      -0.00069619913,
      -0.014752081,
      0.010600279,
      0.0074338214,
      0.005918692,
      0.016395537,
      0.007827463,
      0.016494924,
      -0.009562458,
      -0.013195604,
      -0.014206542,
      0.0008481641,
      0.005686384,
      -0.03642973,
      -0.013651847,
      0.0017619869,
      0.005645272,
      0.028906412,
      0.030146759,
      -0.020015053,
      -0.00007927212,
      0.023732936,
      0.008666045,
      0.030251594,
      -0.01250239,
      0.0033304226,
      0.027443027,
      -0.005367261,
      0.026419476,
      0.0039404626,
      0.037452478,
      0.0066256346,
      0.002582649,
      0.0407933,
      -0.029792447,
      -0.009153678,
      -0.003713161,
      -0.038340062,
      0.00501412,
      -0.022043766,
      0.020424547,
      -0.01658183,
      -0.027789949,
      -0.00504478,
      0.010868314,
      0.026023569,
      -0.0067219897,
      0.02431932,
      -0.026528792,
      -0.006791917,
      -0.0070253056,
      0.013705839,
      0.012816219,
      0.0023962136,
      -0.008327837,
      -0.005241049,
      0.0030150397,
      0.0064067175,
      -0.000711951,
      0.003719159,
      -0.028711136,
      0.009904893,
      -0.0056942743,
      0.030781114,
      -0.028112877,
      -0.02014586,
      -0.0710977,
      -0.013232501,
      -0.011759187,
      -0.0023051559,
      0.015084945,
      -0.013662334,
      -0.0027725964,
      -0.008147726,
      -0.013403289,
      -0.011675219,
      -0.03268265,
      0.012148269,
      -0.006367252,
      -0.0073895366,
      0.01672492,
      0.019691147,
      0.0012386543,
      -0.02436258,
      -0.027994636,
      -0.008015665,
      -0.028837735,
      -0.011466682,
      -0.009446574,
      -0.016869914,
      -0.014678859,
      0.0019506004,
      -0.016495453,
      0.0031145802,
      -0.0056863814,
      -0.008014251,
      -0.014746372,
      -0.15014583,
      -0.0100778835,
      0.0014604917,
      0.011975665,
      0.016620493,
      0.022050044,
      0.0063942014,
      -0.038567547,
      -0.010421576,
      -0.013804297,
      -0.0013142647,
      -0.014165412,
      0.0005692858,
      0.011828002,
      -0.0068638315,
      0.1435875,
      -0.020933593,
      -0.01049798,
      0.00900604,
      0.00063152413,
      0.0010546986,
      -0.012106715,
      -0.01021232,
      0.016793596,
      -0.013299647,
      -0.022646083,
      -0.006295046,
      -0.033100724,
      0.019389851,
      -0.0026705419,
      0.0071296496,
      0.017471725,
      -0.032420833,
      0.015734127,
      0.0031361626,
      -0.029469812,
      0.011197717,
      -0.004450592,
      -0.015172418,
      0.016430296,
      0.014092816,
      -0.0027916797,
      0.008046623,
      -0.004179507,
      0.011500238,
      -0.01069859,
      0.011464332,
      0.012892755,
      -0.008119376,
      -0.0045938417,
      -0.01792052,
      -0.07976284,
      -0.015502641,
      0.011579623,
      -0.008190218,
      0.033162918,
      0.0032543598,
      0.017906763,
      -0.0006088478,
      0.006951015,
      -0.0011754234,
      -0.00822057,
      0.037274614,
      0.0053976467,
      0.0064899377,
      0.0037682543,
      0.023495408,
      0.002606811,
      0.042043027,
      -0.0074957507,
      0.0009139864,
      0.027083972,
      -0.013547034,
      -0.005383987,
      -0.023259278,
      -0.021450533,
      0.00700457,
      0.017267171,
      0.00842611,
      -0.021110112,
      0.007932176,
      0.002262298,
      0.010284264,
      -0.014934917,
      -0.0021624,
      -0.016773248,
      0.006668936,
      0.01632171,
      -0.0071190414,
      0.0037953195,
      -0.0016020596,
      0.0063760905,
      0.012971272,
      0.033068664,
      0.00171612,
      0.009561966,
      -0.0021230783,
      0.0012037226,
      0.026242493,
      0.02520896,
      -0.013337427,
      -0.035177335,
      0.029322,
      -0.015855828,
      0.029168459,
      -0.013873117,
      -0.001177959,
      0.0154863605,
      0.0041908757,
      -0.023528898
    ]
  },
  {
    "id": "genai_cohort_nodejs_01_Authentication_vs_Authorization_vtt",
    "content": "Hi everyone and welcome 2 to brand new section 3 on authentication and authorization. 4 So personally this particular section 5 is very exciting and I personally 6 love this particular section. 7 Authentication and authorization 8 is a core concept 9 of any backend system, right? 10 And sometimes authentication 11 and authorization can be very 12 tricky or hard to understand. 13 But, but no worries. 14 In this particular section we 15 are going to go step by step. 16 We are going to understand 17 each and every bit of authentication 18 and authorization and how 19 in Node js we can build a secure 20 authentication workflow. 21 So in this particular video, 22 let's first understand the meaning 23 of these two words that how 24 authentication and authorization 25 are two different things. 26 Okay, so here we are talking 27 about authentication, which 28 is our first word, right? 29 That is authentication. 30 And secondly we have authorization. 31 Now knowing the difference between 32 these two things is very important. 33 Okay, so let's first understand 34 what is authentication, right? 35 Authentication basically 36 means that who are you? 37 In simple terms, 38 authentication means who are you? 39 Do I know you? 40 That is an authentication. 41 Okay, so which means like 42 for example, if you go on 43 to facebook.com, right? 44 If you are not logged in, you are 45 welcomed with a login screen. 46 Okay? 47 So whenever you open facebook.com 48 if you are not logged in, you are 49 welcomed with a login screen. 50 For example, if I open a new 51 tab and I go onto facebook.com 52 so what you will notice is 53 see, I am viewing this page. 54 That is a, login page. 55 Why am I seeing this page? 56 Because I am not authenticated. 57 The server is not able 58 to recognize me. 59 So that means let's say if we 60 have a server here, okay? 61 So let's say this is our server. 62 This is the Facebook 63 server, not my server. 64 So what is basically 65 happening here is the server 66 and I am a user, right? 67 So let's say here is the user. 68 So this user that is me, I 69 made a request to the server 70 and server says hey, I don't 71 know who are you, right? 72 It is not able to recognize me. 73 And that is the reason the response 74 from the server was a slash 75 login page, which is nice. 76 Now the thing is, this particular 77 thing means that this particular 78 user is not authenticated, 79 server is not able to recognize me. 80 On the other hand, let's say if I 81 am logged in, okay, so if I give 82 him my email and password and 83 somehow I am logged in, that 84 means that if I send a request to 85 the server in, instead of getting 86 a login screen, what I, what do I 87 get? 88 I get basically all my feed, okay? 89 I get feed posts, I get 90 all my friend requests, I 91 get all that data, right? 92 I am able to get my data 93 so that is what that means. 94 I am authenticated. 95 I am authenticated. 96 That means server is able 97 to recognize me that, 98 oh, this is Piyush Garg. 99 And based on who am I Based on like 100 my id, like, let's say Piyushkar. 101 It is sending me the post 102 that is relevant to me. 103 It is sending me the friend 104 request that are being sent to me. 105 It is sending me my messages, 106 my messenger, my 107 groups, everything, mine. 108 Okay, so this is 109 basically authentication. 110 That means whether you are logged 111 in or not, if you are authenticated, 112 okay, you are an authentic person. 113 I know who are you? 114 But what is this? 115 Authorization. 116 So authorization is basically 117 the next step of the authentication. 118 Authorization says that it. 119 It assumes that you are 120 already authenticated. 121 But are you authorized? 122 Are you authorized? 123 Okay. 124 To this resource? 125 Okay, now what does this mean? 126 I'll just give you an example 127 and everything will be super clear. 128 Let's say this is your college. 129 Okay? 130 This is your XYZ college. 131 Okay, that's good. 132 Now, first thing is, 133 can a random person. 134 Okay, let's say here 135 is a random person. 136 Can a random person enter, 137 the campus of the college? 138 No. 139 Right? 140 Why? 141 Because there is a security 142 guard sitting here. 143 So let's say that this 144 is your security guard. 145 So this security guard, whenever 146 you try to enter, you are not. 147 You are not allowed to enter because 148 he doesn't recognize you, right? 149 You are just a random person. 150 You have no ID card. 151 You don't have any kind of thing, 152 so you are not allowed. 153 That means you are not authenticated. 154 So your authentication failed. 155 But let's say you had. 156 You have taken the admission 157 in this college. 158 And in return, college has given 159 you something known as an ID card. 160 So whenever you go, you 161 submit your fees, right? 162 You pay your fees 163 and you get admission. 164 You are given an ID card. 165 Nice. 166 Now, this ID card, which is 167 issued by this XYZ college. 168 Now you take this ID card. 169 Now you as a person, go back 170 to the security guard. 171 Show your ID card. 172 Now you are authenticated. 173 Should this security, guard allow you 174 to enter the college? 175 Yes. 176 Why? 177 Because you were authenticated. 178 Nice. 179 Now, let's say this is print. 180 This is your classroom. 181 Okay? 182 So let's say this is your classroom. 183 So I'll just draw it in this way. 184 And, let's say this is 185 some internal staff room. 186 Okay? 187 So let's say this is the staff room 188 or principal's room or some kind 189 of internal room in your college. 190 So I'll just make it green. 191 Now, based on this ID card 192 and you are a student, can you Enter 193 this particular class? 194 Yes, you can enter. 195 Because that particular class 196 is meant for you, right? 197 That's a class. 198 You can enter it. 199 But with this ID card and this thing, 200 can you enter in the staff room? 201 No, right? 202 Why? 203 Because again, there will be one 204 more security guard, let's say 205 in front of the staff room. 206 But to enter here, 207 to enter here, you are not allowed. 208 Why? 209 Because your ID card says 210 that you are a student. 211 And as a student, you are not allowed 212 to enter the staff room. 213 But on the other hand, let's 214 say one more teacher is there. 215 Okay? 216 Now, teachers also 217 have their ID cards. 218 But this ID card holds 219 an authority of a teacher. 220 Okay, Of a teacher. 221 Now first of all, tell me, 222 should this particular person be 223 allowed inside the campus? 224 Yes, because they have an ID 225 card, they are authenticated. 226 Now, when they come here, this 227 person will check that, Hey, I 228 know that you are already a part 229 of this college, because if you 230 were not a part of this college, 231 anyway, you cannot bypass this 232 gate. 233 But now I have to check whether 234 you have authority 235 to enter the staff room or not. 236 So it will. 237 So this security guard will check. 238 Oh, I see that you are a teacher. 239 Your role is a teacher. 240 So I think you are allowed. 241 So this particular teacher 242 can go into the staff room, 243 but not this ID card. 244 So this is basically 245 authorization, okay? 246 That are you authorized 247 to this particular resource? 248 So authorized is the word here. 249 Okay? 250 So that means for authorization, 251 you have to be authenticated. 252 This is simple, right? 253 Because for authorization to work, 254 you should be authenticated. 255 Authenticated means 256 you are logged in. 257 The server knows who are you, right? 258 You have some kind of ID card. 259 But authorization means. 260 Authorization basically 261 means are you allowed to access 262 that resource or not? 263 Got it. 264 Now if I log into Facebook, 265 I am authenticated. 266 But can I access your friends? 267 Can I accept a friend 268 request that is sent to you? 269 Of course not, because I don't have 270 authenticity, I don't have 271 that authorization to accept 272 a friend request or on your behalf. 273 Got it? 274 Now can I change your password? 275 No, because I am not 276 authorized to do it. 277 So that is, your authorization. 278 So I hope the difference 279 between authentication 280 and authorization is clear. 281 So first step will be 282 authentication, understanding 283 authentication and everything. 284 Authorization is very 285 simple, to be honest. 286 Once authentication is clear, 287 authorization is nothing. 288 It's just a check. 289 Okay? 290 The main challenge, the main 291 security comes in the authentication 292 which we are going to cover 293 in the upcoming videos.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "01 Authentication vs Authorization.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/01 Authentication vs Authorization.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.023077024,
      0.0057531158,
      0.011588522,
      -0.046169437,
      -0.019206215,
      0.0064066225,
      0.016327383,
      0.015473677,
      -0.000019157362,
      0.006098371,
      0.006962346,
      0.006930528,
      -0.0039496906,
      0.02050486,
      0.12818144,
      -0.0019332664,
      -0.002103585,
      -0.007902833,
      0.010345498,
      -0.03119477,
      0.025520643,
      0.0069001387,
      0.0019093162,
      -0.0045143063,
      -0.0057985242,
      0.00885064,
      -0.012651136,
      -0.0024123064,
      0.031447627,
      -0.009248551,
      -0.015975881,
      -0.006205126,
      -0.0037863064,
      0.03871115,
      -0.0018836448,
      0.033025905,
      0.026828732,
      0.009139214,
      -0.044369083,
      -0.0061660567,
      -0.006053556,
      0.0045225956,
      -0.0028685825,
      -0.02084309,
      0.01012308,
      0.0034310478,
      0.0041197944,
      -0.005462968,
      0.01375033,
      0.010947222,
      -0.018003918,
      0.003861756,
      -0.0326682,
      -0.18825774,
      -0.0035938728,
      -0.0041154446,
      -0.003236637,
      0.0064292443,
      -0.0027329433,
      0.003070714,
      -0.036946192,
      0.010396246,
      -0.027297907,
      0.01420728,
      -0.021769298,
      0.01496566,
      0.048037354,
      0.012054269,
      0.0016942604,
      -0.008631238,
      0.010282592,
      0.014225252,
      -0.014364278,
      -0.015773244,
      -0.009733378,
      -0.005516953,
      0.008992162,
      -0.009266917,
      -0.009533351,
      0.0002675092,
      -0.016002234,
      -0.00600637,
      -0.02147529,
      -0.01334315,
      0.0051830094,
      -0.021967193,
      -0.005826221,
      -0.0104615,
      -0.013733012,
      0.0022032883,
      0.000076275675,
      0.0030474388,
      0.007433818,
      0.0069697974,
      0.00958116,
      -0.0067174956,
      -0.023457564,
      -0.0031155099,
      -0.004140697,
      0.014051669,
      -0.008730664,
      0.024996804,
      -0.027698992,
      -0.0012661084,
      -0.0049440456,
      0.01996722,
      0.0092476625,
      -0.006581306,
      0.015186237,
      -0.014388825,
      0.011532543,
      0.0011253896,
      -0.006323203,
      0.016070768,
      0.014552304,
      -0.18349318,
      0.029906148,
      -0.010174537,
      0.0126652755,
      0.0032222657,
      -0.023990352,
      0.015233706,
      0.030650247,
      0.0009618065,
      -0.017350996,
      0.0058076186,
      -0.018715652,
      0.009928435,
      0.021043545,
      0.0053237854,
      -0.024426326,
      0.008903691,
      0.016104596,
      0.013923078,
      0.03092918,
      0.007196983,
      -0.004816547,
      -0.010072051,
      0.012415161,
      -0.012293554,
      0.008700487,
      0.018199034,
      -0.018178934,
      0.03359919,
      0.011576898,
      -0.0032706535,
      -0.0328891,
      0.000064782456,
      0.0017267504,
      -0.03939707,
      0.039100464,
      -0.00015411041,
      -0.011840919,
      0.019650983,
      0.01644301,
      -0.052954298,
      0.012899544,
      0.0067713177,
      0.0041627516,
      0.0016513647,
      0.005054776,
      -0.0033380378,
      -0.0012320121,
      0.010051054,
      0.0045655966,
      -0.018010326,
      0.0049752765,
      0.014445878,
      -0.01648945,
      -0.01903021,
      -0.00407398,
      -0.005507911,
      -0.0017437667,
      0.017568849,
      -0.013476549,
      0.0037570405,
      -0.012566054,
      -0.008297582,
      0.014708382,
      -0.0015015694,
      -0.021755945,
      -0.006563129,
      0.017984817,
      -0.021547584,
      0.01491444,
      -0.0066966433,
      -0.033968586,
      0.0067779184,
      0.021618929,
      -0.0051058014,
      0.0011339955,
      -0.013543905,
      -0.007876993,
      0.029907342,
      0.0017734278,
      -0.0035473963,
      -0.009381652,
      -0.0012948074,
      -0.010676397,
      0.024606122,
      0.008018671,
      -0.0022548775,
      0.013647759,
      -0.020408897,
      0.013554863,
      0.00873929,
      0.014889046,
      -0.019080829,
      0.001736296,
      0.03315991,
      -0.011160545,
      -0.015694559,
      0.009248976,
      -0.016670238,
      -0.00014550844,
      -0.017027037,
      0.013576334,
      0.0038927507,
      -0.007387677,
      -0.026371019,
      0.01004927,
      -0.0037354196,
      -0.004186413,
      0.008569642,
      0.010123899,
      0.009445642,
      0.019331193,
      -0.019080073,
      0.024529247,
      -0.0035359666,
      -0.0016571822,
      0.0036440212,
      -0.002734202,
      -0.00576428,
      0.008576414,
      -0.005866959,
      -0.00024640397,
      0.018181589,
      -0.0002767704,
      -0.0013799884,
      -0.008803478,
      -0.01148873,
      0.0108558275,
      0.031695068,
      0.02483995,
      -0.008730802,
      -0.02483691,
      -0.013647773,
      -0.016286528,
      -0.018598929,
      -0.0014422914,
      -0.0047580707,
      0.009818263,
      -0.015613318,
      0.00070019986,
      -0.026773125,
      -0.03840467,
      -0.005541196,
      -0.00011252215,
      -0.02525628,
      -0.0024573067,
      -0.006222961,
      -0.016648615,
      -0.0008177431,
      0.009612352,
      -0.015012286,
      0.014928717,
      0.030280327,
      0.0026459675,
      -0.0043122675,
      0.0036472268,
      0.0011905401,
      -0.0047562057,
      -0.0033815417,
      -0.0062563694,
      0.006059912,
      -0.086834945,
      -0.01095786,
      0.008753826,
      -0.0034503997,
      -0.024126008,
      -0.00045752802,
      -0.009113559,
      0.003856288,
      0.018709408,
      0.030203305,
      0.0007155489,
      0.0015424304,
      0.022583934,
      -0.000018943732,
      -0.009124504,
      0.02715091,
      0.0021666612,
      -0.0043052137,
      0.004546561,
      -0.027081797,
      0.01451859,
      0.004568689,
      -0.014868383,
      -0.010081679,
      0.0056808684,
      0.017734168,
      -0.014618781,
      0.018552717,
      0.025968982,
      0.007714468,
      -0.0014960848,
      0.02938578,
      0.0012284116,
      0.0035862979,
      -0.0063312612,
      0.008022859,
      0.012502513,
      -0.010087533,
      -0.00541234,
      -0.019132752,
      -0.0036578232,
      -0.018103447,
      -0.00038124935,
      0.024121625,
      -0.012555996,
      0.011343544,
      0.0155424345,
      -0.013254187,
      -0.020242538,
      0.016040705,
      -0.034160364,
      -0.0095516015,
      0.0016133192,
      -0.018084437,
      -0.011139005,
      -0.014802274,
      -0.009114335,
      0.0022585732,
      0.020769598,
      0.00047169309,
      0.0023389442,
      -0.010899505,
      0.001504971,
      -0.002931419,
      0.01918902,
      -0.0012370691,
      0.02110421,
      -0.021100372,
      -0.027564783,
      -0.01993065,
      0.019202543,
      -0.01799139,
      -0.012762733,
      -0.021948788,
      0.02604213,
      -0.0020167923,
      0.01333741,
      -0.0047668987,
      -0.033754613,
      0.029685814,
      0.0036673285,
      0.007553793,
      0.010979636,
      0.023181533,
      0.009860026,
      0.013140912,
      0.007782979,
      -0.0002520807,
      -0.009702943,
      -0.018395117,
      0.014851648,
      0.035209853,
      -0.015408965,
      0.007921572,
      -0.0059315315,
      -0.008774776,
      -0.013721375,
      -0.019401744,
      -0.013503438,
      -0.00079306576,
      -0.033522423,
      -0.007165456,
      -0.020479681,
      0.0041344916,
      0.0077710045,
      0.037651036,
      -0.028905317,
      -0.008601138,
      0.0071559167,
      0.0013163219,
      0.006377626,
      0.019807437,
      -0.021137007,
      -0.009852762,
      -0.030935291,
      0.011899989,
      0.0034803778,
      0.005893299,
      -0.0095487805,
      -0.0030131212,
      -0.00016084142,
      -0.0045516896,
      -0.0082988,
      0.024235811,
      -0.017008109,
      0.015044759,
      -0.01871963,
      -0.0028356977,
      -0.007861722,
      -0.021008149,
      0.010947496,
      -0.028125426,
      0.001926359,
      -0.0067189243,
      -0.029008392,
      -0.017542537,
      0.023736287,
      0.0029606684,
      0.004002834,
      0.013204795,
      -0.0016360434,
      0.00579092,
      0.019229164,
      -0.012944102,
      0.020008495,
      0.005903425,
      -0.015920026,
      -0.002222536,
      0.0013143471,
      0.017713478,
      -0.016854964,
      -0.0047920477,
      -0.0264179,
      0.008594845,
      -0.002506433,
      0.027088834,
      0.0062575606,
      -0.008480374,
      0.01393257,
      -0.0054871473,
      -0.0105172945,
      -0.0010200143,
      -0.01139308,
      -0.0076679364,
      0.0071103894,
      0.015819078,
      0.0015153994,
      0.013039292,
      0.004602576,
      0.020930525,
      0.003962125,
      -0.014741298,
      -0.043216724,
      0.021094501,
      0.024814786,
      0.010663544,
      0.02005925,
      -0.014746017,
      0.016280977,
      0.004143148,
      0.018698778,
      -0.000096790434,
      -0.012615419,
      -0.0053831944,
      0.005854776,
      0.0039708633,
      0.01957301,
      -0.031381555,
      -0.030698748,
      0.0023635041,
      -0.0132736135,
      -0.028517658,
      -0.012485367,
      0.023786608,
      -0.013520357,
      0.025313469,
      -0.008427776,
      0.015601694,
      -0.008946575,
      -0.011739343,
      -0.008276455,
      -0.011466786,
      0.0085131675,
      0.0066354345,
      0.03263239,
      -0.00915224,
      -0.026710732,
      -0.016672665,
      0.009522908,
      0.028747126,
      -0.012053993,
      0.029145002,
      -0.0027566869,
      -0.006527491,
      0.011306736,
      0.0019663977,
      0.0016646687,
      0.00914844,
      -0.016422505,
      -0.0069166925,
      0.017729573,
      -0.02498343,
      -0.010385233,
      -0.012165819,
      0.009605846,
      0.0011364709,
      -0.019978577,
      0.017761586,
      0.0056004575,
      -0.025253372,
      -0.0032954589,
      0.0068510454,
      0.0089669805,
      0.0013985992,
      -0.0053004827,
      -0.0067509706,
      0.008503951,
      -0.0036808746,
      -0.0010113614,
      0.0029105456,
      -0.012355946,
      0.0065950695,
      0.0072496207,
      -0.0025776795,
      0.0011464888,
      -0.0034169643,
      0.03198207,
      0.02796179,
      -0.026118591,
      0.010764336,
      0.033156212,
      0.009447047,
      -0.0017128318,
      -0.019409692,
      -0.016000368,
      0.034906294,
      0.004578499,
      -0.012961088,
      0.0014203251,
      0.010487199,
      0.01722006,
      0.006855972,
      0.012890185,
      0.010449461,
      0.0075774244,
      0.0075115673,
      -0.008408025,
      -0.011102028,
      0.010071581,
      -0.113256395,
      -0.017616741,
      -0.02413137,
      -0.008453601,
      -0.00901247,
      -0.0024608714,
      0.0008192654,
      -0.022031458,
      -0.026970353,
      -0.013864478,
      0.0014255747,
      -0.0022718247,
      -0.0072154803,
      0.017130315,
      0.016435357,
      -0.016230583,
      0.0039905715,
      0.030467913,
      0.02216432,
      -0.013865836,
      0.011856729,
      -0.008430043,
      -0.014663148,
      -0.0025797787,
      0.005494578,
      0.0062822704,
      0.020385385,
      0.009992148,
      0.0040207584,
      0.0006517273,
      0.00073124655,
      0.0028946644,
      0.007456033,
      0.011099672,
      0.0033754515,
      -0.001756055,
      -0.020369366,
      -0.021607948,
      0.0072115078,
      0.014203335,
      -0.0011367239,
      -0.008013805,
      0.017963123,
      -0.0014831112,
      0.0021870101,
      0.023804866,
      0.015279164,
      -0.009538938,
      0.011176055,
      0.028775861,
      -0.04671672,
      -0.0006215986,
      -0.008536992,
      -0.016845077,
      0.003671783,
      0.017166005,
      0.0068356856,
      0.0005089544,
      -0.019062955,
      -0.021869356,
      0.025240414,
      0.023564609,
      0.014515464,
      0.026989562,
      -0.0103106545,
      0.009418132,
      0.020631457,
      -0.004304641,
      -0.006812165,
      -0.009912056,
      -0.010618702,
      0.018294089,
      -0.00843633,
      0.0078620855,
      0.012845161,
      0.010118364,
      -0.009600557,
      0.012865961,
      -0.030764677,
      0.008689531,
      -0.006532936,
      0.015190527,
      -0.07941372,
      -0.018603964,
      -0.0029076312,
      0.000999253,
      0.01591527,
      0.011298976,
      -0.003888479,
      0.0060419547,
      0.0059905006,
      0.0034485173,
      -0.013509749,
      -0.026013417,
      -0.00908407,
      -0.019338604,
      -0.022667427,
      0.007521898,
      -0.018071922,
      -0.016477393,
      -0.028390719,
      -0.01094739,
      -0.0036262348,
      0.0055892924,
      -0.005833146,
      -0.0136868525,
      0.011648785,
      0.013490752,
      -0.016795935,
      0.008842745,
      0.008676588,
      0.009454016,
      0.014191383,
      -0.14949052,
      -0.03015255,
      -0.012540594,
      0.024067558,
      -0.013290068,
      -0.009046861,
      -0.021323115,
      -0.0028354065,
      0.010109807,
      0.004788405,
      -0.004051691,
      -0.01638955,
      -0.018677823,
      0.0042646364,
      -0.012133002,
      0.12537508,
      0.01151238,
      0.009739553,
      -0.0062196148,
      -0.0028352423,
      -0.028647847,
      -0.011312417,
      -0.0050295903,
      0.0086704735,
      0.014824097,
      -0.009842117,
      0.026130727,
      -0.009774627,
      0.015903264,
      0.0037000247,
      0.004408742,
      -0.03599377,
      -0.020663401,
      0.006626828,
      0.013885972,
      -0.021901574,
      0.016387533,
      0.0015913252,
      -0.009283396,
      -0.0018723067,
      -0.00287445,
      0.007662993,
      0.0043399353,
      0.011763361,
      -0.0031967415,
      -0.0038697617,
      0.0019176183,
      0.010456608,
      -0.0004767516,
      -0.0055004586,
      0.02829453,
      -0.062221974,
      -0.004117036,
      -0.01578045,
      -0.01452053,
      0.029659053,
      0.0055196895,
      0.0052602184,
      -0.020312857,
      -0.016004842,
      0.0034446644,
      -0.027234223,
      0.011004511,
      -0.0065963403,
      0.019009802,
      0.0010285407,
      0.00063324673,
      0.027912552,
      0.027216272,
      -0.009353552,
      -0.0047658617,
      0.017827392,
      0.005619122,
      -0.0069323243,
      -0.023873687,
      -0.013773143,
      -0.0017992227,
      0.026156988,
      -0.010056528,
      -0.009419072,
      -0.0026574493,
      0.013628495,
      -0.027362853,
      -0.00030026166,
      0.017658161,
      -0.009613361,
      -0.01435978,
      0.016037488,
      -0.0010896801,
      -0.009265005,
      -0.0063096653,
      0.0026234314,
      -0.0068442696,
      0.04433252,
      0.0058655087,
      0.018864796,
      -0.0030389398,
      -0.020297738,
      0.027348883,
      0.004961541,
      0.0037892766,
      -0.017367348,
      0.0020007892,
      -0.022759916,
      0.041440982,
      0.0016104437,
      0.03174557,
      0.020574149,
      -0.011196821,
      -0.011202015
    ]
  },
  {
    "id": "genai_cohort_nodejs_02_What_is_Authentication__Story_Time_vtt",
    "content": "All right, so in this 2 particular video, I have a story 3 for you now, Piyush. 4 But we were here 5 to understand authentication. 6 Why there is a story. 7 You know what happens? 8 I am a kind of person 9 who don't, likes to understand 10 things by just coding, right? 11 We should understand 12 what we are coding. 13 The, what is the logic behind it? 14 What is it, how that 15 idea was invented. 16 Okay? 17 Because coding is the simplest 18 thing and at the end 19 thing that we have to do. 20 So let's understand 21 the authentication. 22 Now there was one more story 23 that I have just shadcn 24 with you that was XYZ College. 25 So this particular thing, I think 26 this particular story or this 27 particular visual representation 28 helped you in understanding what 29 authentication and authorization is. 30 Now let's understand authentication. 31 Little bit in deep and some 32 challenges that might occur. 33 Okay? 34 Now see there, this is 35 a story of a parking lot. 36 So let's say that this 37 particular area, this particular 38 is a parking lot. 39 So what is a parking lot? 40 Parking lot is an empty big space 41 where a lot of a lot of vehicles 42 can come and park themselves. 43 Right. 44 Now technically this parking lot is 45 let's say a paid service, okay. 46 Or a private owned service 47 by some kind of mall. 48 And you don't want that anyone can 49 come and park in this parking lot. 50 So what will you do? 51 You will basically hire 52 a security guard. 53 So, so let's say that this 54 is the gate and this 55 is your security guard. 56 Or I can say the valet parking. 57 So you have, basically you 58 have a security guard here. 59 So if anyone wants to park a car, 60 no one has access to here, right? 61 What you have to do is let's say 62 this is the person with his car. 63 So let me just try 64 to draw a very basic car. 65 So a green color car. 66 I don't know why I came 67 up with green color. 68 But I think yeah, this is okay. 69 Okay, so one more thing 70 I'll just try to do. 71 So let's say that this is your car. 72 Okay? 73 I didn't know that. 74 I am such a good artist, but yeah. 75 Now let's say this is a car, okay? 76 And this is the owner of the car. 77 Now this owner of the car wants 78 to park his car in this parking lot. 79 So what will happen is he will come 80 to the security 81 guard and he will say that, hey, 82 can you please park my car? 83 Security guard will say that, 84 okay, there is a space available. 85 I'll park your car. 86 So let's say that the number of this 87 particular car, okay, let's give 88 it a number, was, let's say 89 something like, you know, X, X1, Y 90 so this was the number of the car. 91 So what this particular 92 guy will do is he will park his car. 93 Okay? 94 So his car is parked. 95 Now, in return, he needs some 96 kind of receipt, right? 97 He needs some kind of token, right, 98 that, hey, you parked my car. 99 But when I will come back, how 100 can I tell you which was my car? 101 Because if we just say him 102 tell me your number, he might 103 say any other number. 104 Imagine coming in Honda City 105 and going back in Mercedes. 106 That's not a right thing, right? 107 So what this security 108 guard can do is security guard can 109 basically give him a number. 110 So let's say security guard 111 said, hey, here is your token. 112 Basically a token. 113 Let's say a number is written even. 114 Okay, I'm just taking 115 a random example of E1. 116 So what now this, this 117 particular person can do is. 118 But this particular person 119 can maintain a diary. 120 Okay, typical. 121 How happens he can maintain a diary. 122 Okay, so let's say this is the diary. 123 And in this diary he can 124 make an entry that E1 token 125 belongs to XX1Y car. 126 Okay? 127 Now this person can go roam around, 128 you know, he can go to shopping, 129 he can basically enjoy himself. 130 And when he comes back, what happens? 131 He has to give his token back. 132 That, hey, here is my token, 133 E1 that you gave me. 134 Can you give me my car? 135 And then security guard will 136 say, okay, let me check. 137 He will open his diary. 138 He will see E1 was this car. 139 So he will, he will take 140 the token back, give him his car, 141 and delete his entry. 142 Is this flow clear? 143 Typically how this basically 144 happens in the real world. 145 Also, whenever you go, you give 146 your car, you get a, token 147 which uniquely identifies your car. 148 Some kind of number you get, right? 149 So let's say this is one. 150 Let's say more users are coming. 151 Okay, so. 152 So one more user is there. 153 One more user is there. 154 One more user is there. 155 So what is happening is you are 156 getting different, different tokens. 157 So everyone is getting a token. 158 So let's say E3, E4. 159 And now we have a lot 160 of cars in the parking lot. 161 So these are the cars parked. 162 And let me just, quickly rename 163 their, you know, numbers. 164 So let's say this is E2, 165 this is, you know, this is 166 the three three number. 167 And this car has a number of four. 168 Okay, now what happens? 169 You have four entries in your, 170 in your book, in your, 171 diary, whatever you are maintaining. 172 So E2 is there, right? 173 Which is having 174 a number, let's say E2Y. 175 Then you have so on. 176 So you got the point. 177 Now tell me just one thing. 178 I just want to understand from you, 179 okay, how open minded you are. 180 Do you see any problem here 181 with this approach? 182 Everything is working fine. 183 Everything is secure, right? 184 There is no problem at all. 185 Everything is secure. 186 We are doing every kind of check. 187 We are maintaining a diary, 188 and our security guard is 189 working really nice, okay? 190 He is a very hardworking man. 191 But what problem could come here? 192 Can you think of a problem here? 193 Okay, now let me come back 194 with the problem. 195 Number one. 196 What happens if there 197 is a sale in the mall? 198 Let's say there's a lot of rush, 199 a lot of people came in. 200 You know, on a typical day, there 201 were just 30, 40, users or members 202 or, you know, users, coming in. 203 But some day 200 came in. 204 So what will happen? 205 This security guard will 206 be overwhelmed because 207 now he has to do 200. 208 Now, because you just had one 209 security guard, what you have 210 to do is he has to do one by one. 211 Number one, he's tired, okay? 212 He is tired. 213 That means he can basically, 214 you know, get a heart attack 215 or he can collapse, right? 216 So technically, there's a lot 217 of stress on one person. 218 Secondly, he has to do one by one. 219 So that means if someday 200 220 people came in, they have 221 to wait in a long queue because 222 you only had one resource. 223 See, there is a thing that 224 your parking lot can 225 support 200 cars, okay? 226 That is fine. 227 You have enough space. 228 But because you just had one 229 security guard, now he, now there is 230 a long queue of people, which 231 is not a good experience, right? 232 Because he is doing one 233 by one, one by one. 234 And so how can you 235 solve this problem? 236 You will say, push. 237 It's very simple. 238 What I can do is I can basically 239 have three security guards. 240 You will say that because 241 too many people are coming. 242 So what I will do is 243 I'll make three lines. 244 Okay, so one, two, and one more. 245 Security guard. 246 I said, very good. 247 This is a good optimization. 248 Now you have divided the traffic 249 into three lines. 250 And what is happening is you 251 are basically processing 252 three cars concurrently, correct? 253 Parallelly, I would say. 254 Parallelly, you are 255 processing three cars, okay? 256 So now your processing 257 speed is faster. 258 But now there is a problem 259 because there is only one diary. 260 Because there is only one diary. 261 When this person is writing 262 to this diary, can this person 263 also write to the diary? 264 No. 265 Right? 266 Because there is only one diary. 267 So technically, what happened? 268 Even if you have three security 269 guards, or even if you have four 270 security guards, the major problem 271 still remains that at a time 272 you can only process one car. 273 Because if this Person is busy 274 entering some entry here. 275 These three are waiting for 276 the notebook to get freedom, right? 277 So still you are only processing 278 one notebook at a time. 279 The only thing is 280 that the stress per. 281 What do you say? 282 That the per security 283 guard is reduced. 284 But still the line is very long. 285 So you will say, okay, no problem. 286 To solve this particular problem, 287 let's have four diaries. 288 No. 289 Hey, you have your own 290 independent diary. 291 You have your own independent diary. 292 You have your own independent diary. 293 And you also have your 294 own independent diary. 295 Now there is no one shadcn diary. 296 I said okay, which is very nice. 297 Right? 298 Now they are not dependent 299 on each other. 300 So what happens is he 301 can keep on entering. 302 So this particular guy can keep 303 on entering stuff here. 304 This particular can keep 305 on entering stuff here. 306 This here, and this here. 307 Now you have solved all 308 the problems very nicely. 309 I mean, you are processing 310 four cars parallelly, 311 which is like four times. 312 And no one is dependent 313 on each other, which is nice. 314 Now here comes a problem. 315 Let's say this person, when came for 316 parking, he gave to this guy, okay? 317 So that means the entry for 318 E2 is in this particular diary. 319 Now what happens when he 320 comes back to take his car? 321 He accidentally comes here 322 to this guy, he will say, 323 hey, My token is E2. 324 Can you give me my car? 325 Is there any E2 entry 326 in this particular diary? 327 No, right? 328 Because that. 329 That entry is here. 330 So technically this person 331 will say, sorry, bro, I 332 don't know who are you. 333 I don't have any entry for E2. 334 So I cannot process your request. 335 I cannot validate whether 336 your car, which is your car. 337 So that means this guy 338 has to remember that. 339 Hey, when you came for parking, 340 you have given to this security 341 guard, security guard number. 342 Let's say four. 343 So when taking back the car, 344 you have to come to four. 345 You cannot go to E1, you cannot go 346 to security guard one, two or three. 347 You have to come back to the same 348 person, which is a problem, right? 349 He has to remember something. 350 And tell me just one thing, 351 what happens? 352 Okay, if everyone parked their car 353 with person four, 354 now these three are sitting idle. 355 Because everyone parked 356 their car to number four. 357 While taking back, also 358 they have to come to four. 359 So that means four is always 360 under stress, right? 361 For some reasons, 1, 362 2 and 3 are busy. 363 Plus people have to remember that. 364 Hey, if I have given my car 365 to person number four, I have 366 to take back from him. 367 So this is a big problem, right? 368 You're trying to understand 369 the problem, right? 370 See, we are not talking 371 about authentication. 372 We are not talking 373 about authorization. 374 I'm just telling you a story. 375 Everything will 376 eventually make sense. 377 Now, how will you solve 378 this particular problem? 379 So, problem came that when you 380 distributed their diaries, okay? 381 When you distribute their diaries, 382 now you have to remember which 383 person is having which thing. 384 So this is basically what happened. 385 What I'm trying to tell you is 386 that initially, when you just 387 had one security guard, okay? 388 Let's note down our observations. 389 When you had one security 390 guard, okay, security guard, or 391 I could say the park person. 392 You had only one diary, okay? 393 Only one diary. 394 And what you were doing is you were 395 basically giving them tokens. 396 You were giving them tokens 397 and everything was good. 398 The pros were okay. 399 The pros were number one because 400 there was only one security guard. 401 No need to remember. 402 No need to remember. 403 Okay? 404 Which guard parked your car? 405 Which is nice. 406 You can just come back, okay? 407 Secondly, the problem was, 408 secondly, the cons, okay? 409 Con was, okay? 410 The problem was that there was only. 411 Only one guard, okay? 412 So speed was very slow. 413 So speed was a problem. 414 Speed was slow, okay? 415 Plus a lot of stress. 416 Only on one person. 417 Only on one person, okay? 418 And, so, yeah, this. 419 This was basically what was happening 420 in the first scenario, right? 421 Nice. 422 Then to solve the cons 423 of this particular thing, what it 424 did do, you basically had the. 425 Another architect that, hey, 426 I will have four security guards 427 but only one diary, okay? 428 So the pro was, okay, 429 what did you solve? 430 You basically solved 431 this problem, okay? 432 You solved this particular problem. 433 So I'll just say, hey, 434 this particular approach solved 435 this particular problem. 436 A lot of stress, okay? 437 But still, there was one con. 438 What? 439 That at a, given. 440 At a, given time, only one 441 person has access to diary. 442 So which basically 443 makes it still slow. 444 Got it. 445 Now, because, if one person is 446 writing to a diary, the all 447 others cannot write to it. 448 Okay? 449 This was your approach too. 450 See, this was your approach. 451 One, you got the problem. 452 Okay? 453 So you solved it, but you 454 got another problem. 455 So to solve this particular 456 problem, what did you do? 457 You basically said, okay, 458 I'll just do one thing. 459 Four security guards. 460 That means four diaries 461 must be there, okay? 462 That means four diaries. 463 Everyone has their, independent IDs. 464 Now, if I talk about the pros 465 of this thing, what did you solve? 466 You basically solved this 467 particular problem. 468 You solved this particular 469 problem, which is nice. 470 See, at every step, you are solving 471 one problem at a time, right? 472 So solved this particular problem 473 that at a given point of time, 474 only one person has the access. 475 But now you introduce one more con. 476 Now you introduce one more con. 477 What was the con? 478 The con was that hey, the you 479 know, the Parkers, or I can say 480 the customers have to remember, 481 have to remember which was 482 the guard while parking, okay? 483 Because you have to go 484 to the same person in which your 485 diary was maintained, right? 486 In which, in which your car's 487 diary is maintained or in which 488 diary or cars entries maintain. 489 You have to go to the same person. 490 Because if you go to some 491 other person in his diary, there 492 is no entry for your car. 493 So that's a problem. 494 Now technically, if you see 495 about authentication, what we 496 are going to do is now we are 497 going to first implement this 498 kind of authentication. 499 One server, one state, okay? 500 Diaries basically state. 501 And we are going to end 502 up in this problem. 503 Then we are going to solve 504 this problem and I'll show 505 you the another problem. 506 Then I'll going to say that hey, how 507 horizontally scaling is a problem. 508 But in this particular video I 509 just wanted you to visualize 510 what is happening as per your life. 511 Okay? 512 So in the next video, let's go ahead 513 and code this stuff, 514 code this stuff and code this 515 stuff and then finally solve all 516 the problems in just one go. 517 Okay? 518 So that is the thing. 519 So I hope that you have understood 520 the story and the problem behind it. 521 Now how to relate it 522 with the authentication. 523 That's my problem that we are going 524 to see in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "02 What is Authentication- Story Time.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/02 What is Authentication- Story Time.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.01937728,
      0.013373466,
      0.015825251,
      -0.053205226,
      -0.0154311545,
      -0.004072423,
      0.002773098,
      0.01832488,
      0.0033675467,
      0.015836325,
      0.0022571944,
      0.017591918,
      -0.006063625,
      0.029839352,
      0.14247909,
      0.007616816,
      0.0013887328,
      0.004258918,
      -0.012630695,
      -0.026865585,
      0.01327835,
      -0.0015488353,
      0.0074629616,
      -0.008245268,
      0.00880442,
      -0.0033616952,
      0.012281767,
      0.004540041,
      0.029872412,
      -0.010393486,
      -0.016643163,
      -0.014343857,
      -0.005757128,
      0.03452139,
      0.0069919354,
      0.018938905,
      0.037104648,
      0.0005183845,
      -0.030475086,
      0.0035378702,
      -0.01080684,
      -0.018052613,
      0.018339535,
      -0.018932976,
      -0.0029355038,
      0.0020767804,
      -0.022199376,
      -0.018988902,
      0.024571776,
      0.007698038,
      0.0061825565,
      0.009002243,
      -0.003474489,
      -0.20297898,
      0.010008633,
      0.0091217365,
      0.00444226,
      0.0013220422,
      -0.012978011,
      0.005278533,
      -0.0395155,
      0.016061729,
      -0.022257933,
      0.013667388,
      -0.005624331,
      0.012893168,
      0.029750012,
      0.007947838,
      -0.009396579,
      -0.008091624,
      0.02004929,
      0.008172405,
      -0.0038157457,
      -0.0015648504,
      0.0055153267,
      -0.025925547,
      0.0026742057,
      -0.021041492,
      -0.014383832,
      0.004075572,
      -0.0232761,
      -0.009871875,
      -0.017855624,
      -0.026329685,
      0.010217963,
      -0.0027493567,
      -0.01304336,
      -0.014924467,
      -0.005626127,
      -0.009412137,
      -0.01751937,
      0.00015734712,
      0.017966188,
      0.000042006843,
      0.0050193607,
      0.00094670826,
      -0.019571269,
      0.015449851,
      0.016026447,
      0.0048713475,
      -0.0008179261,
      0.018449148,
      -0.02259928,
      -0.0040509743,
      0.00023090153,
      0.00019427681,
      0.015350504,
      -0.01943464,
      0.014414231,
      0.004514915,
      -0.002190192,
      0.01986448,
      0.0064825793,
      -0.0059941285,
      -0.0061908513,
      -0.18413985,
      0.03466566,
      -0.0054722107,
      -0.0042266934,
      0.017480735,
      -0.0018028694,
      -0.0032774352,
      0.03191163,
      -0.0062645134,
      -0.014506939,
      0.0005772536,
      0.00088652055,
      0.011515391,
      0.034003176,
      -0.012209305,
      -0.0305601,
      -0.00700416,
      0.02458565,
      0.0020488373,
      0.0139242,
      0.022490367,
      -0.008293496,
      -0.01910741,
      -0.0027250105,
      -0.020830086,
      0.011382962,
      0.018620929,
      -0.017178508,
      0.028897975,
      0.014716491,
      -0.0032544446,
      -0.027291665,
      0.00957311,
      0.0059312773,
      -0.029667735,
      0.03390844,
      0.004591169,
      -0.011187748,
      0.0075776367,
      0.019934956,
      -0.05387133,
      0.008436877,
      -0.0005885701,
      0.013125275,
      0.021483954,
      0.010170739,
      -0.017441044,
      0.012456862,
      0.02443931,
      -0.00065853755,
      -0.02206907,
      0.008045203,
      -0.0043390477,
      0.0057598194,
      -0.019176103,
      -0.0035154016,
      -0.017255323,
      -0.015072806,
      0.0036819759,
      -0.016698798,
      0.0028519554,
      -0.00041629942,
      -0.010156343,
      0.007038254,
      -0.002742731,
      -0.014938785,
      -0.012176938,
      0.00924519,
      -0.020462018,
      0.019508112,
      -0.0032965855,
      -0.030599806,
      0.00963325,
      0.029080268,
      -0.013293009,
      -0.009634329,
      -0.0044848956,
      -0.00057840947,
      0.011260605,
      0.008591306,
      0.0016617075,
      -0.0043860595,
      0.0042274394,
      -0.0035230038,
      0.01975504,
      0.004855505,
      0.012486203,
      0.014202886,
      -0.008740199,
      0.026710799,
      0.0067541287,
      0.019853694,
      -0.02054191,
      -0.0058011306,
      0.044253998,
      -0.0009387073,
      0.0047686156,
      0.015731594,
      -0.008219224,
      0.011741519,
      -0.011970441,
      -0.00042806094,
      -0.0019395154,
      -0.009735477,
      -0.012540002,
      0.009181934,
      -0.0043788357,
      0.00409739,
      0.003133255,
      0.02640547,
      0.0031539677,
      0.0036242146,
      -0.029943312,
      0.0075519206,
      0.005961699,
      0.015432669,
      0.008080743,
      0.0040296195,
      -0.013173572,
      0.009684298,
      -0.0112798065,
      -0.009383588,
      0.017372072,
      0.0027406716,
      0.012692034,
      -0.0014765604,
      -0.013165851,
      0.005542252,
      0.021422729,
      0.018348565,
      0.0029088848,
      0.0018602667,
      0.0033420017,
      -0.00016871672,
      -0.0017528943,
      -0.0005729463,
      -0.008987611,
      -0.0013992192,
      -0.024188118,
      0.016093105,
      -0.025054924,
      -0.047653604,
      -0.006321743,
      -0.022787413,
      -0.010538057,
      -0.011391948,
      -0.009327681,
      -0.017798118,
      -0.02239034,
      0.013935522,
      -0.017491829,
      0.004337947,
      0.037834868,
      0.0005589309,
      -0.0012313931,
      -0.004962823,
      0.0037417142,
      -0.014976476,
      0.004329899,
      -0.023547428,
      -0.0014038685,
      -0.08672749,
      -0.00016545203,
      -0.0051623783,
      -0.022394525,
      -0.009803821,
      0.006862796,
      0.0047707357,
      0.0009415202,
      0.022810647,
      0.014532272,
      -0.0052559692,
      0.010000287,
      0.009701324,
      0.0059372797,
      -0.0029056156,
      0.0020340618,
      -0.0035665017,
      -0.015977217,
      0.014092157,
      -0.019414729,
      -0.002955917,
      0.0012745284,
      -0.004549155,
      -0.013732999,
      -0.008639274,
      0.016800908,
      -0.0027123808,
      0.029333768,
      0.021580758,
      -0.001071605,
      -0.0047991113,
      0.035618998,
      0.0029483081,
      0.009241113,
      -0.00447225,
      -0.002049283,
      -0.0141282845,
      -0.0056321425,
      0.0014316395,
      -0.010035981,
      0.0014537318,
      0.0021910612,
      0.011596499,
      0.01317638,
      -0.014318921,
      0.016588481,
      -0.005219377,
      -0.009998131,
      -0.0225435,
      0.0047941925,
      -0.03872519,
      0.0002135793,
      0.002961226,
      -0.016308058,
      -0.008026553,
      -0.019607084,
      -0.018020933,
      0.014001963,
      -0.0029418434,
      0.023921618,
      0.000098519544,
      -0.0115574375,
      0.0013127713,
      0.010910336,
      -0.0010152813,
      -0.009348634,
      0.012847434,
      -0.011076725,
      -0.031863518,
      -0.009194455,
      0.012931686,
      0.008150193,
      0.0067983167,
      -0.027510704,
      0.0179393,
      0.009896863,
      0.0051513775,
      -0.016586691,
      -0.029167425,
      0.028048849,
      0.010335549,
      0.015273739,
      0.0018965608,
      0.024889613,
      -0.0028628372,
      0.018470548,
      0.012162721,
      -0.011027165,
      -0.014780366,
      0.004183781,
      0.0266472,
      0.029317051,
      -0.004306795,
      0.0031171085,
      -0.010821044,
      0.0022445044,
      -0.019369263,
      -0.0028032975,
      -0.0080717215,
      0.01446771,
      -0.015999684,
      0.007284431,
      -0.02414803,
      -0.0060289437,
      -0.0066654067,
      0.030332565,
      -0.015116627,
      -0.014761196,
      0.00875641,
      -0.0013444008,
      0.0005300838,
      0.019871984,
      -0.018202014,
      0.0008888627,
      -0.016698284,
      0.004885361,
      -0.0039773174,
      0.0034714849,
      -0.0027192822,
      -0.00093784445,
      0.0040533347,
      0.0020580015,
      -0.00047263366,
      0.009737243,
      -0.01415291,
      0.0066026705,
      -0.027944466,
      0.007555946,
      0.0013749918,
      -0.018534446,
      -0.007990035,
      0.005920782,
      -0.004467306,
      -0.0041138423,
      -0.02386213,
      -0.019804318,
      0.021254202,
      0.017462417,
      0.027074987,
      0.016984146,
      -0.011313968,
      -0.009545292,
      0.008845662,
      0.009199202,
      0.009815682,
      -0.0049013845,
      -0.007206819,
      -0.0026348406,
      0.007120462,
      -0.0077127074,
      -0.022249987,
      -0.027538173,
      -0.025517492,
      0.008185398,
      -0.001534941,
      0.023521084,
      -0.0052584186,
      -0.017892733,
      0.011274961,
      -0.013089272,
      -0.0020120086,
      -0.015628897,
      -0.02277983,
      -0.009902521,
      0.0062223678,
      0.0025038288,
      0.01376691,
      -0.0015695619,
      0.009619781,
      0.022495698,
      -0.011933164,
      -0.021450862,
      -0.049316686,
      0.0033844146,
      0.034863148,
      -0.0026249813,
      0.00973157,
      -0.014361136,
      0.021559596,
      -0.0056081,
      0.027524516,
      0.009768509,
      -0.0036089097,
      0.0011464457,
      0.008364958,
      0.00410714,
      0.037777863,
      0.008093844,
      -0.010431713,
      0.0002933536,
      -0.022130461,
      -0.017976068,
      -0.021887735,
      0.01963273,
      -0.007783295,
      0.020747049,
      -0.017045919,
      0.007015876,
      -0.018259855,
      -0.009480244,
      -0.011732685,
      -0.007690417,
      0.0078092194,
      -0.0047540558,
      0.012841481,
      -0.012465712,
      -0.021088064,
      -0.0203476,
      -0.0045366525,
      0.034110863,
      -0.0051181014,
      0.009985076,
      0.00042236503,
      -0.017191024,
      0.024394289,
      0.018016938,
      0.0032255726,
      -0.0030146602,
      -0.019147824,
      -0.017869437,
      0.025993789,
      -0.012730382,
      -0.0036469446,
      -0.020861521,
      0.015728649,
      0.0037724068,
      -0.0026549066,
      0.019722903,
      -0.004941186,
      -0.027369658,
      0.0017281289,
      -0.0026925202,
      0.004279582,
      -0.00204407,
      -0.02319559,
      -0.011011865,
      -0.006543976,
      0.005539793,
      -0.0044185286,
      0.00075218105,
      -0.023677533,
      0.0039345357,
      -0.006962441,
      0.013151835,
      -0.008407934,
      -0.004738403,
      0.025850013,
      0.022790259,
      -0.035892874,
      -0.009087264,
      0.027213894,
      0.0016765819,
      -0.005469245,
      -0.030297829,
      0.011218862,
      0.023053288,
      -0.013134516,
      -0.007881765,
      0.013179879,
      0.026440918,
      0.018397475,
      -0.0062723984,
      0.0116602685,
      0.0061656097,
      0.0050218864,
      -0.005665835,
      -0.016535899,
      -0.008689383,
      0.012480186,
      -0.13130897,
      -0.004267208,
      -0.01817209,
      -0.014935839,
      -0.019542351,
      0.00075623614,
      -0.0034537653,
      -0.028415192,
      -0.00054341974,
      -0.016996806,
      0.0226729,
      -0.0114877,
      -0.0065831007,
      -0.019412773,
      0.013841417,
      -0.01753849,
      0.020916054,
      0.022137003,
      0.016711911,
      -0.021335756,
      0.008570276,
      0.0044811345,
      -0.0050809826,
      0.0015132957,
      0.023323622,
      0.003181798,
      0.014341124,
      0.0055608335,
      0.0071688476,
      -0.003988185,
      -0.011991455,
      0.0119212,
      0.01023876,
      0.008080947,
      0.019174686,
      -0.014242001,
      -0.00090623554,
      -0.010907961,
      0.02489751,
      0.02312128,
      -0.004568259,
      -0.015521401,
      0.01382441,
      -0.0194678,
      -0.010623846,
      0.02420549,
      0.0011640253,
      -0.012434276,
      0.007985666,
      0.012867025,
      -0.02829241,
      0.0071960436,
      -0.0078046178,
      -0.017895332,
      0.0034120858,
      0.013651661,
      0.017948087,
      -0.0033160725,
      -0.03260796,
      -0.014799751,
      0.011776519,
      0.015450127,
      0.0027631326,
      0.028987916,
      -0.011470063,
      0.007963667,
      0.010294454,
      0.022601519,
      0.003774682,
      0.0009031156,
      -0.009224969,
      0.00029086744,
      -0.005287175,
      0.030765496,
      0.010986482,
      0.021224543,
      -0.014412562,
      0.02101023,
      -0.02222688,
      0.016166348,
      -0.014716052,
      0.021690756,
      -0.074364975,
      -0.027181476,
      -0.0067955446,
      -0.003527569,
      0.019170653,
      0.019312695,
      0.0027207104,
      0.003961882,
      0.0068394537,
      0.0053105988,
      -0.015206626,
      -0.005878321,
      -0.01779339,
      -0.022410056,
      -0.0069916276,
      0.010418924,
      -0.013118988,
      -0.020596543,
      -0.035088293,
      -0.015737506,
      -0.0031975769,
      -0.0041329414,
      0.008560614,
      0.00896318,
      -0.0056124586,
      -0.015398203,
      -0.0054034228,
      0.00838417,
      0.010047279,
      0.0067038527,
      -0.004568564,
      -0.14340001,
      -0.021593459,
      -0.014890979,
      0.004887798,
      0.008150156,
      0.002550771,
      0.0012051936,
      -0.0037278202,
      -0.0032520427,
      -0.00075485866,
      -0.009682251,
      -0.0077969613,
      0.0050400733,
      -0.0051615383,
      0.0039281086,
      0.12347033,
      0.0026323749,
      -0.0000328221,
      -0.0045806733,
      -0.017518545,
      -0.017464112,
      -0.027837679,
      -0.007318018,
      -0.0056655807,
      -0.0036779142,
      0.010941469,
      0.039242078,
      -0.011082448,
      -0.007392843,
      0.013962015,
      0.008474634,
      -0.011108113,
      -0.013099474,
      0.008883883,
      0.0007168044,
      -0.03077592,
      0.011021235,
      -0.006542314,
      -0.0016185481,
      -0.0036354335,
      -0.0034020634,
      0.01302975,
      -0.0028905577,
      -0.002186123,
      -0.009593463,
      -0.006143592,
      0.0020195707,
      -0.0104135545,
      -0.0023693575,
      0.0004153998,
      0.014648678,
      -0.051310357,
      -0.011435772,
      -0.009769254,
      0.00061725284,
      0.012661349,
      -0.0020103,
      -0.0040122517,
      0.005440927,
      0.0054566744,
      -0.011307168,
      -0.018348912,
      -0.001735256,
      0.0028668863,
      0.023437189,
      0.009796352,
      0.00239101,
      0.01596953,
      0.012358053,
      -0.004761566,
      -0.02196104,
      0.012397634,
      -0.012545998,
      -0.00022321312,
      -0.022531474,
      -0.0023605332,
      0.008652649,
      0.021245942,
      0.010489258,
      0.0028901943,
      0.0012881547,
      0.0037486174,
      -0.016066799,
      0.020840075,
      0.008212338,
      -0.036397077,
      -0.01518401,
      0.0044886903,
      0.002280333,
      -0.0063324957,
      0.0036483007,
      0.002940544,
      0.00044461482,
      0.033093914,
      0.016065773,
      0.02176759,
      0.00024495253,
      -0.007983338,
      0.0447485,
      0.017280888,
      0.004876334,
      -0.023596985,
      0.0065280967,
      -0.030938772,
      0.022135066,
      0.026272554,
      0.019742154,
      0.04220275,
      -0.011934241,
      -0.0010364624
    ]
  },
  {
    "id": "genai_cohort_nodejs_03_Session_Based_Auth_vtt",
    "content": "All right, guys. 2 Hi. 3 So, in this particular video, 4 let's start by coding a basic 5 authentication system using 6 the story one, then improving it 7 with story two, and further 8 improving it with story three. 9 And finally the last set 10 of the story, how we can 11 make it fully optimized. 12 Okay, So I have made a very simple 13 project that is authentication 01. 14 So first things first, npm 15 init in your integrated terminal. 16 Right. 17 So authentication 01. 18 I'll just do enter, 19 enter, enter and enter. 20 Everything is good. 21 So let's install couple of things. 22 Right? 23 npm install express is first thing. 24 And please do mention at the rate 4. 25 Okay. 26 4 point x, because you know, we want 27 to install express at 4 so that 28 you don't get into any trouble. 29 Nice. 30 Now because we also want typings. 31 Okay, we also want typing. 32 So I'll just say npm install 33 at the rate types node at the rate 34 types express at 4.0 so that I 35 can get the IDE recommendations. 36 And don't forget to save 37 it as a dev dependency. 38 So after this particular 39 command, this is what my 40 package JSON looks like. 41 So you can see in the dependencies, 42 I only have Express 43 at this particular version. 44 I have dev dependencies at, 45 this particular version 46 and this particular version. 47 Nice. 48 Now let's get started 49 by creating an index js file. 50 So first things first, I just want to 51 basically create an express server. 52 Okay. 53 So I can just say import. 54 Okay, Import express from express. 55 Nice. 56 Then I can just create 57 an app which is express. 58 Okay, that's also good. 59 And let's create a port also. 60 So const port, is equals to I. 61 I'll just say 8,000 that is okay. 62 And app dot listen. 63 On which particular port? 64 This particular port. 65 And. 66 And a callback function 67 saying console log. 68 Let me just zoom in a little 69 bit for you so that 70 you can see this clearly. 71 Right. 72 I hope this is fine. 73 So console log. 74 And I can just say, you know, 75 server started 76 on port and just add the port here. 77 Nice. 78 Now what is the next step? 79 Let's create some routes. 80 Okay. 81 Now, as a part of authentication, 82 of course, you 83 need a login route, right? 84 So what do you mean by login? 85 Login basically means that 86 you are going to give me 87 your username password. 88 That means you are trying 89 to authenticate. 90 You are bringing back a token. 91 Okay, I'll create one more route. 92 Let's say, you know, sign up. 93 Okay, let's say sign up. 94 So this is, is going 95 to be your sign up route. 96 And sign up is basically like, you 97 know, taking your car and parking 98 it creating a new car sign up. 99 And I'll just create one 100 more route that is me. 101 Me basically returns that. 102 Who are you on the server? 103 Can I recognize you or not? 104 Is going to be the me route. 105 So now see what we are going 106 to do is app dot get. 107 Okay, first let's sorry app dot post. 108 Let's create a route that is sign up. 109 Okay? 110 Now what is the sign up? 111 Sign up basically means 112 that hey, here is my car. 113 Here is my car, okay? 114 Please park it and give 115 me back a token that is 116 your sign up, correct? 117 That is how you sign up. 118 So in the sign up, okay, one, 119 what will you give me? 120 Okay, so what are you 121 going to give me? 122 You are going to give 123 me your credentials. 124 Okay, so a callback function. 125 So I'll just say hey, this is 126 request, this is a response. 127 So I'll just take some data 128 from the request body. 129 What, what I want, I want. 130 Okay, when you bring your car 131 basically your data, 132 I want your first name, okay? 133 And let's just call it as name. 134 And you can give me your email 135 and you can give me your password. 136 So email is basically 137 like your car's number. 138 Okay, Just for the analogy. 139 So I'll just make a new comment. 140 So email is basically like 141 a unique car number, right? 142 So in order to have this, what I 143 will do understand this thing. 144 This is very important, correct? 145 First of all, I have to do 146 one thing that is a middleware 147 app dot use, okay? 148 App dot use that is express 149 dot JSON because we are going 150 to talk in the JSON format. 151 Now what I can do here is if 152 you think about it, I have 153 to create a user, right? 154 Basically I need my diary. 155 Okay? 156 Const diary. 157 Eventually it can be a database also. 158 But as of now let's go 159 with this thing diary. 160 So what I can do is first of all 161 check that if this particular 162 email is already in the diary. 163 If email in diary this means you 164 are already signed up, right? 165 So you can just say return 166 response status of a 400 and you 167 can just say JSON and return an 168 error that a user with account Or 169 I can just say user, email 170 already taken. 171 So this particular 172 email is already in the use. 173 Else what will you do is 174 let's create a token for this user. 175 Let's create a token 176 for this user, right? 177 So what I. 178 How can you create a token 179 for this particular user? 180 Tell me that. 181 Okay, So I can just say I'll 182 just use date.now so this 183 basically returns what is my 184 current date so that is a token. 185 Simple. 186 Okay. 187 Ideally it should have 188 to be some kind of id, but this 189 is my id let's say. 190 Okay, now here is the one 191 thing that I have done wrong. 192 Let's create a diary and let's 193 create a new set of emails 194 which are already taken. 195 So emails is basically 196 going to be a new set. 197 Okay. 198 Okay, so let's say if emails dot has 199 okay, this particular email. 200 Now if it is not there, what I'm 201 going to do is I'm going to just 202 say hey, in my diary, in my diary 203 at this particular token, whatever 204 you have created, I am going to 205 say hey, this is your name, this 206 is your email and this is your 207 password. 208 Okay, I have basically 209 made a diary entry. 210 Okay, so create a token for user. 211 A token for user. 212 Okay, I have made a token and then 213 I can just say do a diary entry. 214 Okay, do a entry in diary. 215 Okay, very nice. 216 And then, then what, what's next? 217 One more thing also you have to say 218 emails.add okay, this particular 219 email and finally you can 220 just return response.JSON saying 221 status is let's say success. 222 And then you can also return 223 his token that hey, hey bro. 224 That this is your token. 225 Every time you have to come back, 226 you have to come back 227 with this particular token. 228 Nice. 229 So this is what I have done. 230 This is what we basically discussed. 231 So just see, just go through 232 the code once what we are doing, 233 make a diary, make email set. 234 If user has already signed up using 235 this email you return a new error. 236 Else create a new token. 237 Okay, do a diary entry, add to 238 the email set and return the token. 239 So this is basically what I have 240 made which I told you here. 241 So you take a token, you basically do 242 a diary entry and return it back. 243 Nice. 244 Now let's create a route app dot get. 245 Okay, let's say a me route 246 slash me me is basically 247 what that I will tell you. 248 Who are you if you want 249 to take back your car. 250 It's kind of like you want 251 to take back your car. 252 Okay, so request and response. 253 So whenever you come back, what 254 I am basically saying you. 255 Okay, now listen to this thing. 256 Whenever you come back 257 you have to bring your token. 258 See now in this particular story, 259 if any user wants to take his car 260 back, he has to bring his token. 261 So I'll just say that hey, 262 in the request body you have 263 to bring your token back. 264 If there is no token. 265 If no token is there? 266 I'm just going to say return 267 response status. 268 Hey, it's a bad Request JSON. 269 That error is basically 270 missing token. 271 Okay, Missing token, which is good. 272 Else what I will do, I 273 will search my diary. 274 So I'll just say const. 275 Okay, I'll just search 276 for this token in my diary. 277 If Token. 278 Okay, in diary. 279 So let's say if you're not able to 280 find this, if token in diary is not 281 there, okay, then that means, hey, 282 you have just bought a token which 283 is not in my id, which means you are 284 not. 285 This is not a valid token. 286 Okay, you have 287 bought a different token. 288 So I'll just say invalid token. 289 Invalid token. 290 I don't have an entry. 291 Okay, but if I have an entry, 292 I'll just say const. 293 Entry equals diary and add 294 this particular token. 295 And what I can do, I can just 296 say return response JSON 297 and you can just return the data 298 as the entry that. 299 This is what I basically store about 300 you. 301 That's it. 302 So this is our me route. 303 That's it. 304 So this is your very 305 simple authentication. 306 Correct. 307 So now if I run this particular 308 application, how to run. 309 So I'll just create a new start 310 script and I'll say node index. 311 So npm start. 312 Okay, so everything has gone good. 313 You can see server, 314 is running on Port 8000. 315 So I'll just use the Thunder client. 316 Okay, so let me just create 317 a new request and you can 318 just ignore these requests. 319 Okay, so I'll just say that. 320 Hey, on localhost8000. 321 Okay. 322 On localhost8000, 323 on which particular thing? 324 On slash signup. 325 Correct? 326 Just a second. 327 Yeah, on slash signup. 328 I want to make a new post request. 329 Nice. 330 Okay, in the body, I'm going 331 to send a JSON there I have to send 332 my name, which is piyush Garg. 333 Okay. 334 And I will send my email, 335 okay, which is piyush 336 piyushgur.devmail.com and also you 337 need my password which is 123456. 338 Right? 339 Send. 340 I got a token. 341 Can you see that? 342 This is my unique token. 343 I'll just copy this particular 344 token and as of now store it here. 345 This is my token. 346 If I send this request again, 347 email is already taken. 348 It's a bad request. 349 Nice. 350 Now let's say if I create 351 one more new request, right? 352 So let me just create a new request. 353 Okay, so in this particular new 354 request, what I'm going 355 to do is I'm just going to take 356 the same thing, but I'm going 357 to make a request on slash me. 358 Okay? 359 Slash me. 360 So when I send it says hey, 361 missing Token. 362 Okay, so that means in the body 363 I have to send a token. 364 So I am sending token 1, 2, 3. 365 It says invalid token. 366 This is not a valid token. 367 This was the valid token, right? 368 So if I send this token now, you 369 can see it says this is you. 370 You are this particular person. 371 So now what happened? 372 Can. 373 Let's say if I want to, okay, if I go 374 back to my server, let's say what 375 I want to do is I want to say that, 376 you know, you want to access cars. 377 Let's say you want 378 to access some private data. 379 So I can just say app get. 380 Sorry, let's make a post out only. 381 Okay. 382 App dot post. 383 So I'll just say that this is 384 some kind of private data. 385 Okay? 386 This data should only be visible 387 to persons who are logged in. 388 Who are logged in. 389 So what? 390 How can I check? 391 First of all, try to read the token. 392 Okay, if no token or 393 this thing see same. 394 I'm just copy pasting 395 the code, right? 396 Copy pasted the same code. 397 I'm just saying if no token, 398 if not token in diary entry. 399 Now what I can do, I can just 400 say if I got the entry, then 401 I can return you the data. 402 So I'll just say return 403 response JSON and I can just 404 say the data to be what? 405 I can just say you know, status. 406 I can just say private data. 407 Private data access granted. 408 Something like this. 409 So that means if you want 410 to take this, right? 411 If you want to make a request 412 on slash private data. 413 You can see I'm able to make a. 414 Not able to post because I have 415 to restart my server. 416 Now here's a problem. 417 Because I restarted my server, 418 I have to sign up again, right? 419 No worries, I'll just sign up again. 420 This is my new token. 421 Now if I try to access, you can 422 see it says invalid token 423 because this was the old token. 424 Send private data access granted. 425 If I will not send this, 426 it says missing token. 427 That means I am not logged in. 428 I am not authenticated. 429 So this was your very 430 basic authentication. 431 I mean in real world, this is not 432 how authentication works in reality. 433 But you have actually made 434 a successful working authentication 435 system on, on this principle. 436 Okay, in reality, 437 no worries, I'll walk you through. 438 In reality, this diary is going 439 to be what, a database? 440 This diary is going to be database. 441 Okay, now you're getting 442 my point, right? 443 And then you are going 444 to generate these tokens. 445 Got it? 446 Okay, now coming back, 447 what was the con? 448 Only one guard speed was slow. 449 Now here is a problem. 450 See, in reality, in real 451 world, what happens now? 452 You don't have one server 453 because one server cannot 454 handle a lot of traffic. 455 In reality, you actually 456 spin up multiple instances 457 of your same server. 458 Okay. 459 So when users come, when users tries 460 to visit your website or server. 461 So few requests are routed here, 462 few requests are routed here. 463 Some requests are routed here, 464 some requests are routed here. 465 So technically, if while he 466 was logging in or he was 467 creating an account, 468 he redirected to this server. 469 Now this server, 470 basically has the token, right? 471 In his states, in this particular 472 diary, this server, contains it. 473 But when he tries to access 474 the private data, the request was 475 routed to this particular server. 476 So what happens? 477 Does this server know 478 that this token means this user? 479 No. 480 Right. 481 So that is a problem. 482 That means this particular 483 approach is not scalable. 484 Why? 485 Because if, you want to go with 486 this approach, you have to make sure 487 you always and always have only 488 and only one server running. 489 Because this server maintains 490 a state, a diary, 491 this server contains the data. 492 So all the requests must be 493 handled by a single server. 494 So this approach of making a diary 495 and emails is not at all scalable. 496 It is not at all scalable, right. 497 So scalability is an issue. 498 But if you only want to spin 499 up one instance, then this is fine. 500 Okay, nice. 501 What was our second approach 502 that I want to scale it, right? 503 I want to have four instances 504 of my server running, but I want 505 to have only one diary. 506 So in this particular scenario, what 507 we could do is this diary can be 508 moved to a database, yes or no? 509 So technically what we are trying 510 to do is, you know, drizzle, right? 511 So let's say this is your database 512 running, so everyone can basically 513 connect to it, keep the tokens 514 here, retrieve from here. 515 But the problem is that with this 516 approach, what will happen? 517 You are actually making a lot of load 518 on the database because four servers 519 are continuously reading the data 520 and writing the data to, diary. 521 And while, while one is writing 522 to something to the diary, okay, 523 he's creating a token, others have 524 to wait, Others have to wait. 525 That is a problem. 526 But to solve this problem, if you 527 give four diaries to four security 528 guards, again, that's a problem. 529 You know what's a problem? 530 Because if the diary is 531 with this person, he has 532 to go to this person only. 533 He has to go to this 534 particular server only. 535 His request cannot be routed 536 to some other server instance. 537 So this is basically the problems 538 with this particular approach. 539 Okay, just for your knowledge, this 540 particular thing is also known as 541 session based authentication. 542 It's known as a session 543 based authentication. 544 Why? 545 This is known as a Session 546 based authentication. 547 Because what you are basically doing 548 is now you're creating a session 549 for a user, you are maintaining a 550 diary for the user and you are 551 giving him a temporary token which 552 is stored in your database, sorry, 553 not database, in your memory, I can 554 say right in your ram, in your 555 variable. 556 So while the server is running, 557 basically you have the access 558 to the token that, okay, if 559 the token is in the diary, you 560 mark him as authenticated. 561 So in session based authentication, 562 what happens is basically 563 the server becomes. 564 The server is stateful. 565 The server is stateful, server 566 is maintaining a diary for you 567 where it is keeping a record 568 of that, which token, which token 569 is issued to which person. 570 Yes or no? 571 Yes or no. 572 This is very nice because you 573 know what is the advantage here? 574 I have the control, anytime I want 575 to log out this user, I have to just 576 delete the token in my database. 577 So let's say if I figure out that 578 hey, this particular user seems a 579 hacker, so what I have to do is I 580 have to clear my diary and all the 581 users or that particular user with 582 that token is automatically logged 583 out because when he will again make 584 the request because the token is 585 not there, he will be considered as 586 logout. 587 Session based authentication. 588 The problem is it's stateful, right? 589 The scalability is a problem. 590 It's not at all scalable. 591 If you have noticed, this is really 592 nice for short lived sessions. 593 Can you give me an example? 594 If you understand banking, whenever 595 you log into your banking website, 596 you are all, you are only logged 597 in for a couple of minutes. 598 They only allow you to log 599 in for five minutes. 600 After five minutes 601 you are logged out. 602 Because they use sessions, they 603 use stateful sessions, 604 they create a token on their server, 605 they give you the token. 606 But what is in that token? 607 The data about that token 608 is stored on the database. 609 See, technically if you see here, 610 this number makes no sense. 611 This number which is my 612 token makes no sense at all. 613 Because the data associated with 614 this number that, hey, the username 615 is piyush, it is, you know, 616 email, is this password? 617 Is this, that data is actually stored 618 on the data, on the server. 619 So in this scenario you give 620 the token to the person. 621 Okay, but actual relevance of 622 the token is stored on the server. 623 That is the main thing. 624 That is why it is known as 625 stateful because the state is 626 maintained by the server and it's 627 a session based authentication. 628 It is really nice for short 629 lived sessions, but not 630 for the long lived sessions. 631 So what is used 632 in the long lived sessions? 633 There is something known as 634 JSON web tokens Right. 635 Or I can also say 636 stateless authentication. 637 Okay, Stateless authentication. 638 So this is something we 639 are going to cover 640 in the upcoming videos as well. 641 So let me just do one thing. 642 In the next video, let's end to end. 643 Okay? 644 I'm using the word end to end. 645 Let's end to end. 646 Okay. 647 As I say end to end, code a session 648 based stateful auth system. 649 Okay? 650 So in the next video we are going 651 to first code this and then 652 we are going to jump to the JSON 653 web tokens which is basically 654 a stateless authentication. 655 So I meet, I'll meet you 656 in the next particular video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "03 Session Based Auth.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/03 Session Based Auth.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0045686304,
      0.014590399,
      0.01979067,
      -0.048417624,
      -0.02259848,
      0.007982981,
      0.02769856,
      0.00012853688,
      0.006816247,
      0.011295521,
      -0.011736865,
      -0.0006500393,
      0.0034033286,
      0.025073877,
      0.14623746,
      0.012437001,
      -0.0023660874,
      0.009648993,
      0.0037837275,
      -0.04418467,
      0.010262841,
      -0.008232608,
      0.011217626,
      0.000509613,
      -0.011608337,
      0.0017589788,
      0.004533192,
      -0.004476677,
      0.026220847,
      -0.021744637,
      0.004555085,
      -0.0047702854,
      0.0026761806,
      0.01875401,
      -0.0025839652,
      0.02985087,
      0.03454629,
      0.014208771,
      -0.03787804,
      0.0027566927,
      -0.003068731,
      0.0008371758,
      0.004110364,
      -0.008285832,
      0.003931032,
      0.004298136,
      -0.012419325,
      -0.01227271,
      -0.0044689626,
      0.013859742,
      -0.008012218,
      0.00158974,
      -0.032701015,
      -0.18242769,
      -0.012418087,
      -0.00090610684,
      0.01962792,
      -0.007616609,
      0.0089110965,
      0.015138817,
      -0.018108943,
      0.015470816,
      -0.04955205,
      0.0036177984,
      -0.004679051,
      0.021736208,
      0.015285101,
      -0.0063699307,
      0.011081416,
      -0.009004369,
      0.015162188,
      0.021261362,
      -0.0023353996,
      -0.00312084,
      -0.012766241,
      -0.013526901,
      0.013478788,
      -0.017138422,
      -0.0056715477,
      0.011189047,
      -0.0053134514,
      -0.009429204,
      -0.009720008,
      -0.0059790593,
      0.00092772575,
      -0.008592104,
      -0.0012329676,
      -0.009999272,
      -0.012624592,
      0.004851894,
      -0.0023041703,
      0.0142845875,
      0.004239329,
      0.0074223788,
      -0.001328407,
      -0.00846662,
      -0.006219668,
      0.026799034,
      0.0018007499,
      0.000024614492,
      0.01775805,
      0.010255687,
      -0.012924765,
      0.0129909245,
      0.010610571,
      0.023287265,
      -0.00029894692,
      -0.000051708244,
      0.03021717,
      -0.009208487,
      -0.008342764,
      -0.008226835,
      0.007485738,
      0.013271835,
      0.019712863,
      -0.1838367,
      0.027904948,
      -0.005377939,
      0.010456487,
      0.012426008,
      -0.028315948,
      0.014492839,
      0.016784713,
      0.0045034275,
      -0.01712644,
      0.004859425,
      -0.007522165,
      0.026078932,
      0.01705033,
      0.0043457123,
      -0.02263843,
      -0.011258308,
      0.015943253,
      0.010856592,
      0.025053661,
      0.021578219,
      0.016948938,
      -0.0067497105,
      0.009528562,
      -0.020063672,
      0.013648116,
      0.027097413,
      -0.012473345,
      0.026896207,
      0.016713133,
      -0.0018924549,
      -0.023048235,
      0.024379212,
      0.008139764,
      -0.0395655,
      0.03146611,
      -0.01361013,
      0.00912328,
      0.01389852,
      0.020184765,
      -0.0617388,
      0.00772533,
      -0.0023108134,
      0.0072186734,
      0.0054881577,
      -0.004165237,
      0.01453276,
      0.001045776,
      0.03509547,
      0.0041823476,
      -0.0050242487,
      0.0072047752,
      -0.0017787844,
      0.005281481,
      -0.012029505,
      -0.017005714,
      0.0051916903,
      -0.0030645197,
      0.003232814,
      -0.01147491,
      -0.0067007756,
      -0.006427099,
      -0.014245205,
      0.0038859714,
      -0.019733034,
      -0.011523824,
      -0.013676346,
      0.0118101975,
      -0.0062273857,
      0.01902669,
      0.0017484628,
      -0.02404728,
      0.0064543015,
      0.030737756,
      -0.024759492,
      -0.005770199,
      -0.010505349,
      -0.0063583218,
      0.0014670205,
      0.025731543,
      0.0059676515,
      -0.00428242,
      -0.019204112,
      0.017472373,
      0.010281061,
      0.019609552,
      -0.002709795,
      0.004783419,
      -0.0006618779,
      -0.00032021385,
      0.02394362,
      0.020164218,
      -0.019402314,
      0.0021808431,
      0.02750206,
      -0.01525625,
      -0.015014459,
      0.0077825147,
      -0.0015386862,
      0.006854178,
      -0.014138935,
      0.02123652,
      -0.0026234905,
      -0.0036953136,
      -0.0143564185,
      -0.0023506724,
      0.0068692486,
      0.01667358,
      0.021965565,
      0.018783946,
      0.018930616,
      0.010377106,
      -0.018860405,
      0.004740537,
      0.0021589869,
      0.019159274,
      -0.0002656305,
      -0.004123547,
      0.0047174236,
      0.01989956,
      -0.0140512455,
      -0.0073526083,
      0.008454749,
      -0.006877211,
      0.007250531,
      0.006735852,
      -0.024740629,
      0.007363746,
      0.016832825,
      0.031058488,
      0.0072076623,
      -0.020900039,
      0.0007598981,
      -0.0011572561,
      -0.013909643,
      -0.019148096,
      -0.0098836385,
      -0.004572142,
      -0.019185465,
      0.000030259742,
      -0.01925528,
      -0.034026925,
      0.0014544904,
      0.0016544268,
      -0.002970938,
      -0.0023440057,
      -0.011479763,
      -0.009562392,
      -0.007212308,
      0.00052014773,
      -0.020586602,
      0.00937296,
      0.03358452,
      -0.010000515,
      -0.001417018,
      0.012109284,
      0.015994137,
      -0.0090771895,
      0.00356267,
      -0.019659562,
      0.010601528,
      -0.090099916,
      -0.007835271,
      -0.0027228615,
      -0.028995562,
      -0.025190955,
      0.020276431,
      0.00818587,
      0.011572255,
      0.017894492,
      0.022865808,
      -0.0066496865,
      -0.0047531193,
      0.017284999,
      0.000048286245,
      0.0020669778,
      0.021937342,
      -0.0061164307,
      -0.015462412,
      0.0032484555,
      -0.022001918,
      -0.00035430974,
      -0.0113626495,
      -0.019702313,
      -0.012090125,
      0.02101137,
      0.015555106,
      -0.02276852,
      0.023149878,
      0.023457153,
      -0.0027008972,
      0.0036073169,
      0.041818526,
      0.009516638,
      -0.0071279383,
      -0.024715863,
      0.018136417,
      0.03247398,
      -0.003178851,
      0.014214363,
      -0.010614102,
      -0.0074407896,
      -0.012311477,
      0.010607793,
      0.015571988,
      -0.010148471,
      0.011138433,
      0.015478566,
      -0.01731872,
      -0.019052077,
      0.021888653,
      -0.03194798,
      0.0012022905,
      0.0065184752,
      -0.028677886,
      0.00363439,
      0.0016546978,
      0.0075734872,
      0.00828334,
      0.009297459,
      -0.0056956215,
      -0.00810062,
      -0.0018796483,
      0.0050324774,
      0.00055707403,
      0.019119881,
      0.008440696,
      0.0074690315,
      -0.0060793995,
      -0.009524302,
      -0.03443443,
      0.015866697,
      -0.004631197,
      -0.014027342,
      -0.028904991,
      0.0023686949,
      0.00975327,
      0.019306494,
      0.006548647,
      -0.031655386,
      0.017828798,
      0.0024880422,
      -0.0035058341,
      0.020604616,
      0.03211514,
      0.009188476,
      0.014808709,
      0.007584728,
      0.006551945,
      -0.011381549,
      -0.012429137,
      0.026213994,
      0.02972415,
      0.0060007814,
      0.0031085978,
      -0.006742247,
      0.008446966,
      -0.0049232063,
      -0.020827806,
      -0.0116547,
      0.018392146,
      -0.04498973,
      -0.004748503,
      -0.010468689,
      -0.00083888747,
      0.00794303,
      0.023319123,
      -0.0022581983,
      -0.0011375713,
      0.008073605,
      -0.0046123858,
      -0.005086652,
      0.018904679,
      -0.0048648682,
      0.00070196437,
      -0.038945887,
      0.015336844,
      -0.00024224057,
      -0.004891738,
      -0.027536806,
      0.009325861,
      0.0013639932,
      0.0024008479,
      0.0032641368,
      0.021021293,
      -0.009189342,
      0.0062319906,
      -0.010386678,
      0.004739158,
      -0.009992403,
      -0.012266691,
      0.010103571,
      -0.009612514,
      -0.016681015,
      -0.017864387,
      -0.013055269,
      -0.012981546,
      0.011460064,
      -0.0115099745,
      0.02796164,
      0.02718338,
      0.0016619784,
      0.000008933004,
      0.0073625254,
      0.0031282736,
      0.0009842854,
      0.013678673,
      -0.026423963,
      0.009873427,
      0.013455708,
      -0.010293095,
      -0.012141782,
      -0.015047803,
      -0.022974048,
      -0.0017380535,
      0.0117400065,
      0.014041706,
      0.01602436,
      -0.004641714,
      -0.0088275075,
      -0.01321933,
      -0.02787916,
      0.0025578465,
      -0.02259204,
      -0.019850446,
      -0.0078743985,
      0.027720578,
      0.0014043364,
      0.0020944409,
      0.014927846,
      0.0062767714,
      0.0023537765,
      -0.012291356,
      -0.038727388,
      0.015397579,
      0.01891797,
      -0.005577668,
      0.0064186575,
      -0.006815802,
      0.017669985,
      -0.0028134868,
      0.01699134,
      -0.008898203,
      -0.0061165807,
      -0.0043702386,
      -0.0027089946,
      0.011891074,
      0.030246519,
      -0.012072361,
      -0.031365767,
      0.003134414,
      0.0041086785,
      -0.008751317,
      -0.019053284,
      0.0063636582,
      0.014375831,
      0.028538892,
      -0.0055096196,
      0.022841973,
      0.0012004889,
      -0.008619844,
      -0.026068524,
      0.00037113813,
      0.008298021,
      0.010131491,
      0.014233605,
      0.0070377514,
      -0.025189782,
      -0.0027069831,
      -0.010707792,
      0.027121637,
      -0.004873251,
      0.020921148,
      0.015138424,
      -0.01243044,
      0.03027923,
      0.02195862,
      -0.0009438095,
      0.010062532,
      -0.02967549,
      -0.0065220376,
      0.022322876,
      -0.012673648,
      -0.009145338,
      -0.010404828,
      0.01085283,
      -0.0022035388,
      -0.02007841,
      0.015953042,
      0.006066807,
      -0.014298375,
      0.0017168092,
      -0.007513356,
      0.020031177,
      0.006552937,
      -0.009229134,
      -0.013850647,
      0.0017603539,
      -0.008728988,
      0.0056449957,
      0.012003506,
      -0.013697845,
      -0.016598713,
      -0.0025064624,
      -0.012173995,
      0.0072365496,
      -0.007406251,
      0.024972573,
      0.020150376,
      -0.010448664,
      0.0022118546,
      0.018956803,
      0.011451973,
      0.0039647333,
      -0.024535375,
      -0.0055155386,
      0.03013003,
      -0.006041032,
      -0.0022686662,
      0.0062511936,
      -0.003611754,
      0.0094938185,
      -0.013472183,
      0.007847019,
      0.007914501,
      -0.0035046267,
      -0.019394467,
      -0.008665277,
      0.0039146543,
      0.025446411,
      -0.12062156,
      0.0030888987,
      -0.0312683,
      -0.012577559,
      -0.00832857,
      -0.0011877308,
      0.020527523,
      -0.02310598,
      -0.026420416,
      -0.020523518,
      0.0075988784,
      0.001621116,
      -0.011783416,
      0.003004456,
      0.0016521265,
      -0.003435077,
      0.0138811525,
      0.027960826,
      0.03413773,
      -0.018327024,
      0.005615172,
      0.0069840974,
      0.006216038,
      0.0022671872,
      0.002642997,
      0.017335087,
      0.024957579,
      -0.0057520466,
      0.0026405223,
      0.009506662,
      -0.024044465,
      0.0019429601,
      0.0028590637,
      0.008168417,
      0.007202202,
      -0.0067103957,
      -0.017769264,
      -0.0052241464,
      0.021279532,
      0.003688603,
      0.023424147,
      0.014138303,
      0.019003876,
      0.0036623625,
      0.006668011,
      0.011862143,
      0.0020041587,
      -0.011387775,
      0.008192692,
      0.038853128,
      -0.028097957,
      -0.017748957,
      -0.009694105,
      -0.021572828,
      0.006964436,
      0.016031934,
      -0.005530089,
      0.018120132,
      -0.016222915,
      -0.01248686,
      0.013559217,
      0.012794267,
      -0.000030499836,
      0.036429197,
      -0.011234754,
      0.011779957,
      0.013169065,
      -0.00028525374,
      0.0024878923,
      -0.010124262,
      0.0036123553,
      -0.0007930811,
      0.0046811868,
      0.017122934,
      0.0089714,
      0.015421,
      -0.013477184,
      0.011098766,
      -0.017417641,
      0.000654199,
      -0.023804752,
      0.008927158,
      -0.059781503,
      -0.020372322,
      -0.0054650838,
      -0.0089660585,
      0.009253224,
      0.017557211,
      -0.006582364,
      0.014287651,
      0.011153066,
      0.002497781,
      -0.01684528,
      -0.01392267,
      -0.012531371,
      -0.026278133,
      -0.016446797,
      0.025188792,
      0.0017172737,
      -0.028414268,
      -0.018490305,
      0.005770324,
      -0.0031165474,
      0.008818524,
      -0.003989946,
      -0.014202019,
      0.010507444,
      0.019628262,
      -0.02953757,
      0.012232825,
      -0.005568717,
      0.008129188,
      0.0008083115,
      -0.151826,
      -0.022791302,
      -0.009028101,
      0.014165342,
      0.01007834,
      0.0028518413,
      0.002989715,
      -0.011076513,
      -0.0012832151,
      -0.007460273,
      -0.0106483195,
      -0.035545714,
      -0.010535195,
      0.0066773994,
      -0.018107519,
      0.13053557,
      0.00011393228,
      0.0012625497,
      -0.0011828148,
      -0.0021849729,
      -0.015501593,
      -0.006683348,
      -0.006567831,
      -0.0096147945,
      -0.0017635395,
      -0.013516968,
      0.02230159,
      -0.029828599,
      0.0033982717,
      0.005856916,
      -0.01156138,
      -0.011138818,
      -0.021511013,
      0.013304656,
      0.013111365,
      -0.010302971,
      0.0063395333,
      -0.030150399,
      -0.00934887,
      -0.0066218455,
      -0.0067279944,
      0.0193197,
      0.0074610678,
      0.0042688823,
      -0.004575994,
      0.016439233,
      0.008088745,
      -0.008793818,
      -0.011690963,
      -0.014420126,
      0.028915152,
      -0.058880102,
      -0.007953337,
      -0.014699012,
      -0.012715378,
      0.028913487,
      0.010044604,
      0.0071838386,
      -0.015117647,
      -0.0072523314,
      -0.0041680494,
      -0.013352109,
      0.011961016,
      0.0048973043,
      0.029534725,
      -0.0005732178,
      0.008496555,
      0.01972905,
      0.032530542,
      -0.019959832,
      -0.007917698,
      0.010669566,
      -0.010413862,
      0.0013545556,
      -0.019248115,
      -0.0064282436,
      0.013103161,
      0.02298526,
      0.012975339,
      -0.006650917,
      0.0028404084,
      0.014123355,
      -0.0077269254,
      -0.004593286,
      0.01296689,
      -0.022705916,
      -0.017111903,
      0.022720363,
      -0.011555544,
      0.0014973253,
      0.0073380875,
      -0.0012118485,
      -0.0049239667,
      0.034463346,
      -0.0074772392,
      0.016901124,
      0.014516079,
      -0.009718097,
      0.038743887,
      -0.002355005,
      0.0016952071,
      -0.012615954,
      0.0005660322,
      -0.021731103,
      0.029901212,
      0.008822425,
      0.027234033,
      0.033343308,
      -0.0047043455,
      0.0032302646
    ]
  },
  {
    "id": "genai_cohort_nodejs_04_Session_Based_Auth_with_Drizzle_ORM_vtt_chunk_0",
    "content": "All right guys, so in this particular 2 video let's code an authentication 3 system end to end, using 4 session based authentication. 5 I hope at this particular point. 6 You know what is a session 7 based authentication? 8 Why is it known as 9 stateful authentication? 10 And with that let's start 11 with the video. 12 So here I have made a simple 13 project that is 14 authentication session, right? 15 So this is what we are 16 going to use here. 17 And let's get started. 18 Okay, so, so first of all what I'm 19 going to do is I'm going to use PNPM 20 As my package manager. 21 So it's basically same as npm. 22 So if you search for pnpm, it's 23 basically a better version of npm. 24 Okay. 25 It works similar to npm 26 and everything is that, but it 27 is more fast, it has more 28 optimal and it caches. 29 So I would prefer that if 30 you can also use pnpm. 31 The installation is 32 very simple for pnpm. 33 So here you can see all 34 the installation steps. 35 For example, PowerShell 36 on Windows is there POSIX 37 systems are there, right? 38 And if you go down there is a Docker 39 container installation as well. 40 There is, if you go down there 41 is a core pack, installation. 42 So there are like all 43 the installations are there. 44 And this is the simplest one. 45 For example, you can just say 46 npm install hyphen g 47 PNPM at the rate latest. 48 That's it. 49 Okay. 50 No, no need to give the version name. 51 And you can even use 52 Homebrew if you are on Mac. 53 So basically you can use 54 PNPM as a replacement for npm. 55 So, so the command 56 goes like PNPM Init. 57 Basically this is same like npm init. 58 You can see I have a package JSON 59 file right now what we have to do is 60 we have to basically create an end 61 to end authentication system. 62 That means we need database, 63 we need all the routes. 64 So technically it's 65 an end to end thing. 66 Okay, so now we are going 67 to do PNPM install at the rate 68 types okay, slash node and add 69 the rate types express. 70 Okay, slash express 71 and save it as a dev dependency. 72 And don't forget to make 4x. 73 Okay. 74 So this ensures that we are 75 on the same version. 76 Nice. 77 Now we have to install express. 78 So I can just say pnpmi and I can 79 just say express at the rate 4x. 80 So this basically gives 81 me the express as well. 82 So now you can see in my package 83 JSON I have these dev dependencies. 84 And I have these dependencies. 85 Nice. 86 So let's get started 87 by creating an index js File. 88 Okay, so what I'm going to do 89 is I'm just going to say, 90 import something from express. 91 So basically I want to import 92 express from express, right? 93 Let's create 94 an application that is express. 95 Okay, that's nice. 96 And let's also get the port. 97 So let's say I want to run it 98 on process env port. 99 So if you give me an environment 100 variable named 101 port, I will use that. 102 But just in case you are 103 not giving me a port, let's 104 fall back to 8,000 port. 105 Yeah, so this one is nice. 106 Now we can just say app, listen on 107 this particular port and I can just 108 say console log, that server is 109 running on port Whichever port you 110 are running on, that is this 111 particular port. 112 So this is our basic 113 boilerplate code, right? 114 And let's also create a dummy route 115 that is app git, that is slash. 116 So I can just say request 117 response and return 118 a new response.JSON saying status. 119 Okay? 120 Okay. 121 So it's basically like 122 server is up and running. 123 So this is my basic boilerplate code. 124 Let's also configure a dev script, 125 okay, that is using the nodemon, 126 because I don't want to restart 127 the server again and again. 128 So I can just say pnpm install or I 129 can even use node hyphen hyphen Var. 130 Okay. 131 And I can just say index. 132 Right? 133 And similarly we can even have 134 a start script that is node index. 135 That's it. 136 So if I say pnpm dev and enter, 137 you can see that my server is 138 actually running on port 8000. 139 Nice. 140 Okay, so this is basically nice. 141 And one more thing, the warning 142 that is coming, it basically 143 says that, hey, can you 144 please add the type module? 145 Okay, so that everything is 146 up and running. 147 You can see now everything is 148 up and running. 149 That's absolutely great. 150 Now we have to start 151 by adding a database. 152 So we are going to use Drizzle ORM. 153 So we have already talked 154 about Drizzle ORM. 155 So let's go into the JavaScript 156 and get started. 157 So what we want to do is 158 we want to use a new database 159 that is PostgreSQL. 160 We want to use basic file 161 structure is there. 162 So we have to follow the same thing. 163 Okay, so it says that what you can 164 do is you can have your schema ts. 165 So it's basically in typescript. 166 That is what they are telling you. 167 Result config TS is there. 168 So everything is there. 169 So what we need to do is let's 170 follow the same structure. 171 Okay, so what I'M going to do 172 is let's create a database. 173 Okay? 174 So I'll just create 175 a new folder that is db. 176 And inside the DB they recommend that 177 what you can do is you can have 178 something known as schema TS file. 179 So schema js in our case. 180 Okay, and let's also 181 create an index js file. 182 Nice. 183 So these two files, basically 184 I'm clubbing together. 185 I don't think so. 186 We need it. 187 So I have just made it. 188 So we will see it later. 189 Then we have to make 190 a drizzle config js file. 191 Okay. 192 Drizzle config js file. 193 So this is our drizzle file. 194 Now we have to say pnpm add 195 these things we have to add. 196 Okay, so that's fine. 197 We can just say pnpm add 198 drizzle, ORM, PG and env. 199 Now what you will notice is that 200 the pnpm is actually very fast. 201 And let's also add these things. 202 Okay, so I'm just saying enter 203 and we are good to go. 204 Nice. 205 Then what we have to do is we have to 206 make a database URL in a.env file. 207 So usually we always keep our 208 sensitive variables in a env file. 209 And this env file is never 210 ever pushed to the GitHub. 211 Okay? 212 So database URL, your passwords, 213 your tokens, everything 214 is stored in this env file. 215 So this URL we will, 216 create in a moment. 217 So what we can do is we have 218 to basically say we have 219 to create this configuration, right? 220 So we have to say import 221 this particular stuff. 222 I said, okay, see, I'm just copying 223 from the documentation. 224 Right? 225 Then we have to import drizzle, 226 okay, that is this particular thing. 227 And then we can say, oh, 228 by the way, this we have to do 229 in the DB file, not here. 230 Sorry, my bad. 231 We don't have to do it here. 232 We have to do it in the DB file. 233 Okay, so which one was the db? 234 In the index ts. 235 So that is this particular file. 236 Yeah, So I can just copy 237 this whole thing and, 238 and I can just paste in here. 239 So this is basically the thing 240 and don't need to put up this thing. 241 So DB instance and we can 242 just say export, default. 243 Okay. 244 Default the database. 245 Okay, so we can just export 246 the database from here. 247 Nice. 248 So what we have done is inside 249 the DB index file we have 250 made this initializer. 251 Now we can create a table. 252 Okay, so this table 253 thing we will take care later. 254 So drizzle.config file is 255 something I'm interested in. 256 So drizzle.config.GS file. 257 So let's import env. 258 Let's import 259 the define config function. 260 And what we have to say is 261 we have to export default 262 a configuration, right? 263 Now what this configuration 264 basically looks like is you have 265 to say, out folder which 266 is going to be dot result. 267 Where is your schema? 268 Okay, this is very important. 269 Where is your schema? 270 So I'll just say, hey, my schema is 271 in the dot slash DB slash schema dot 272 schema dot TS Sorry, js file. 273 So this is the file I am pointing to. 274 So just make sure that 275 the spellings are all right. 276 So schema js file dialect is 277 PostgreSQL that we are going 278 to use the PostgreSQL. 279 That is nice. 280 And database credentials, right? 281 So database credentials are here. 282 And process.env.database URL. 283 So this is your 284 drizzle configuration. 285 Well done. 286 Now what we have to do is basically, 287 okay, we can make a schema. 288 So inside the schema TS, this 289 particular file, what we could do is 290 we can import these things 291 from the result and I can basically 292 create a users table as it is. 293 So it's a good thing that 294 we are creating a users 295 table which has an id. 296 Okay, so what I will do is instead 297 of making it as an integer, I 298 would like to make it as a uuid. 299 That is okay, we will 300 see that in a while. 301 So name is there. 302 Age. 303 Age is something we don't need. 304 So we want to keep the email. 305 We will keep password 306 and all that stuff. 307 Okay, so one thing that I want 308 to change is that I 309 will basically get a uuid. 310 So I want to say that, hey, 311 you are a UUID primary. 312 And I can just say 313 default to be random. 314 Okay, so this makes more sense. 315 Nice. 316 Then user is going to have 317 a name which is of a, varchar. 318 Okay. 319 Variable Character length 320 is 255 and not null. 321 Email, length is this 322 not null and unique. 323 Then we can have a password, 324 okay, which is again a varchar. 325 Okay, we can have a varchar. 326 Or maybe we can have a text. 327 So let's take a text because I don't 328 want to enforce any limit on this. 329 So this can be text. 330 Okay. 331 And dot not null. 332 Right? 333 So this is basically not null. 334 Okay, now here is the thing. 335 See as a best practice, you should 336 never store plain passwords. 337 Okay? 338 You should never 339 store plain password. 340 Because see what happens if 341 your database is hacked? 342 What happens if someone hacks 343 your Database, what will happen? 344 Your password is leaked. 345 So ideally what we should do is we 346 should hash this password, right? 347 What we should do, we should hash 348 the password given by the user. 349 And, the best way to hash is we do 350 something known as salt hashing. 351 Okay. 352 We do something known as salt 353 hashing, which means for every 354 user, what we can do is we can 355 generate some random string. 356 Let's say a random strings. 357 Looks like ra. 358 Okay, six, five, three. 359 Something random. 360 Okay, I'm just, I'm just, 361 making a random string. 362 Let's say my password was piyush123. 363 So what we can do is instead 364 of hashing piyush123, 365 I can attach this random, salt. 366 Now hash this whole thing together, 367 and whatever the hash is 368 generated for these two things 369 that I can store as a password. 370 And don't forget to also store 371 the hashtag in the database. 372 So that means password 373 and salt will be stored. 374 So password is this. 375 Okay. 376 And I will also store assault, 377 for every user. 378 So that means we are going 379 to hash something based 380 on a secret key where this is 381 the password, this is a salt. 382 Okay. 383 This makes, you know, 384 password more secure. 385 Nice. 386 Then you can have. 387 I think these things are well 388 and good for a particular user. 389 Okay, so we have defined our schema. 390 That is really nice. 391 Our result configuration 392 is also there. 393 So now what we have to do, we have 394 to just say NPX result kit push. 395 Okay, but before that, before that, 396 we have to set up our database. 397 So to set up our database, 398 I would like to use Docker. 399 Okay, so Docker. 400 So it's very simple. 401 You have to first make sure 402 that Docker is up and running. 403 You have installed the Docker. 404 So you can just download 405 the Docker desktop using this. 406 And here is, you can see all 407 the installations and stuff. 408 So don't worry. 409 We will also attach an introductory 410 thing to what is Docker and stuff? 411 Okay, so make sure that 412 Docker is up and running. 413 So let me just, 414 you know, spin up my Docker. 415 So if I do enter. 416 Let's wait for some while. 417 All right, so my now Docker is 418 up and running on my machine. 419 Okay, so what I could do is if I 420 come here and I just say, docker. 421 P.S. 422 you can see that, yes, Docker 423 commands are running. 424 That means my Docker 425 is up and running. 426 Now let's create 427 a docker compose.yml file. 428 Okay, so docker 429 compose.yml file is here. 430 Now what we could do is we have 431 to just say services. 432 Okay, nice and inside the services, 433 what we have to do is we 434 have to spin up a postgres so 435 we can just search for postgres 436 on the docker and enter. 437 So you can see that this is 438 the official documentation, right? 439 How to use it. 440 You can see if I just 441 keep scrolling down. 442 Okay, so I can just say my database. 443 Okay, I can just say 444 I want to spin up a db. 445 Okay, My image is postgres. 446 Okay, you can say 447 just restart always. 448 Okay. 449 Just in case there is a crash. 450 And then in the environment, 451 okay, you have to basically 452 give the postgres password. 453 So let's say the postgres 454 password is postgres itself. 455 Or I can just say 456 the password is post. 457 I can just say my password. 458 Okay, this is your postgres password. 459 Of course, in the production you want 460 to use something more big password. 461 So that is okay, so postgres 462 password you have set up. 463 And also a postgres 464 user we can set up. 465 That is postgres. 466 So. 467 And don't forget 468 to do the port mapping. 469 So of course you want to also, you 470 know, you want to expose the ports. 471 So if you go on to the port mapping. 472 Okay, Ports. 473 So where is the ports thing? 474 Yeah, so, not this one. 475 So Postgres runs 476 on 5432 Port, by the way. 477 Anyway, if it is not suggesting 478 you, I'll tell you. 479 So one thing we can add here is 480 postgres db so let's say my database 481 name will be again postgres. 482 Okay, Then port supports. 483 It basically exposes 484 5432 port on 5432. 485 This means inside 486 the container on my host. 487 Okay, so this is how 488 basically it works. 489 Sorry, on my host, 490 inside the container. 491 And at the end we have 492 to give it a volume mapping. 493 Okay, so I can just say volumes 494 and we have to give a volume 495 mapping that is DB underscore data. 496 It is going to be a custom volume 497 that we are just going to create. 498 And you have to mount it 499 on/war/lib/postgresql/data. 500 Okay. 501 So now what I can do is I have 502 to basically create this volume. 503 So I can just say volumes. 504 Okay, Volumes and postgres DB data. 505 And that's it. 506 So this is the configuration. 507 There's no need to give this thing. 508 So we are creating a volume DB 509 data which we are mounting here. 510 And this basically spins 511 up a postgres container for me. 512 So I can just say docker compose 513 up hyphen D to run it 514 in the background. 515 So let's see now what happens. 516 It is basically pulling 517 the database that is Postgres 518 image is being pulled. 519 So Postgres image is getting pulled. 520 That is okay. 521 It's just 124mb. 522 Okay, so let's wait for a while. 523 Yeah. 524 So now you can see that my 525 container is up and running. 526 If I do a docker. 527 P.S. 528 you can see that. 529 Yes, it is up and running. 530 Right? 531 The postgres container is 532 up and running, and 5432 is 533 the port that is available. 534 Now, to construct this, we 535 can just say postgres. 536 This, this. 537 Okay. 538 What is your username, by the way? 539 Your username is postgres. 540 Okay? 541 So you can just say 542 postgres as your username. 543 What is your password? 544 Your password is my password, right? 545 You can just say my password 546 at the rate localhost port5432, 547 slash, whatever is your database. 548 So your database name is postgres. 549 So this is how you construct a, 550 a database URL. 551 Nice. 552 Now this database URL is set up. 553 That is absolutely great. 554 Now what we could do is if I 555 come back, you can just say 556 NPX Drizzle Kit push to push 557 the schema to your database. 558 Okay. 559 And there is one more thing, 560 by the way, if we go down, okay, 561 we don't need seeding 562 and all, there is something 563 known as Drizzle Kit Studio. 564 So you know what I like to do is 565 let me just copy this particular 566 command that is Drizzle Kit push 567 and inside the package or JSON, 568 let's configure these scripts. 569 So I can just say DB colon 570 push, Colon push 571 is basically this command. 572 And then I want to have 573 a command that is DB Studio. 574 Okay, so how to spin up a DB Studio? 575 Let's just search for the studio. 576 Okay, so drm, that is the studio. 577 So to do that, what you have 578 to basically do is, 579 Yeah, here is the thing. 580 Drizzle Kit Studio. 581 Okay, so I'll just copy 582 the command and paste it. 583 If I now say PNPM 584 DB colon 2 do and enter. 585 Okay, so you can see now this 586 particular thing is up and running. 587 I can just copy it. 588 Okay, I can just copy 589 and I can just open this particular 590 link in a new tab. 591 Okay, let's wait. 592 What happens? 593 So you can see that, 594 the Drizzle Kit Studio is running. 595 There is no table at all, zero 596 tables in the public schema. 597 So that means what we have 598 to do is we have to say pnpm 599 DB colon push and enter. 600 Now If I do a refresh here 601 you can see we have a users 602 table which is have ID name, email 603 password and salt 604 and there is no record at all. 605 Great, great stuff. 606 Okay, so our setup is 607 basically complete. 608 Now let's get started 609 by creating the routes. 610 Okay, so for that let's 611 create a folder for routes. 612 Okay. 613 And let's create a user do routes js. 614 Okay, so here I have to import 615 express from express. 616 Okay. 617 From express. 618 Nice. 619 Let's create a router 620 that is express dot router. 621 Nice. 622 Now what we can do. 623 Export default the router. 624 Now on this router, 625 what all do we need? 626 I want router dot get. 627 Okay, if you make a request 628 on slash, this returns who is 629 the current logged in user. 630 Okay, so that means let's say 631 there is no handler as 632 of now, but I can add a comment. 633 Returns current logged in user. 634 Good. 635 Similarly we can have a post. 636 This basically does a sign up. 637 Okay, sign up. 638 So let's create a sign up route. 639 Okay, nice. 640 Sign up route is there. 641 Then we can create a login route. 642 Okay, create a login route. 643 So this basically is the login route. 644 If you want to log in 645 and current user. 646 I think these are all good. 647 Okay, These all things are all good. 648 So let's get started 649 by creating the sign up route. 650 Okay, so let's start 651 by sign up route. 652 So this is going to be 653 an async function. 654 Okay. 655 Async request. 656 Sorry, request, response. 657 Now what I expect is that when you 658 are signing up you are going 659 to give me something in the body. 660 That is what you are 661 basically going to give me. 662 Your name, your email and a password 663 as a part of your body. 664 Nice. 665 Now see what we could do here is you 666 can of course have a validation that 667 password must be 8 characters long. 668 Right? 669 There should be numbers 670 in the password. 671 All that stuff we can do. 672 But okay, first things first, 673 you want to check if your database 674 already has this email or not. 675 Correct. 676 So what you could do is there 677 are multiple ways to do it. 678 Number one is that first 679 you try to query that do you 680 have an existing user? 681 So how, how we can do is I can 682 just say import DB from 683 okay dot dot slash db and also 684 you might want to import something 685 from dot dot DB slash schema. 686 Okay, slash schema. 687 And you want to import 688 the users table. 689 Now you can first make a check 690 for existing user that is await DB. 691 Select something from 692 you know, users table dot where. 693 Okay, now in the, where you can 694 just say okay, you can just 695 return an equals okay eq 696 Basically imported from the 697 drizzle ORM you can just say, 698 let me just make it into the new 699 line so that you can see this 700 these things clearly. 701 Okay, where equals what 702 I can just say where table.email 703 equals to the email. 704 So technically I'm trying to search 705 for an existing user and a. 706 I just want to query the email which 707 is basically users table dot email. 708 Now if you got the existing user. 709 Okay, if I got the existing user. 710 So I can just say return response 711 status code400.JSON saying 712 error as user with email. 713 Okay, let me just 714 make it as a string. 715 Literals. 716 Okay, Email. 717 This particular email already exists. 718 Done. 719 Now if it is not there, what you 720 want to do, you want to basically 721 create a new user, right? 722 If user does not exist, you 723 want to create a new user. 724 So to create a new, create 725 a user, I can just say await DB. 726 Insert okay, in which table 727 in the user table dot values. 728 Now see here is the thing. 729 You want to insert the name. 730 That's good. 731 You want to insert the email. 732 That's good. 733 Now here is the thing. 734 You don't want to store 735 the password, right? 736 This is the wrong thing. 737 This particular step is a wrong step 738 because user is 739 giving you a plain password. 740 You don't want to store 741 that plain password. 742 So what we should do is first 743 of all we should generate a salt. 744 What is a gen, what is assault? 745 A random string. 746 A random bytes is 747 basically a salt, right? 748 So in node, how can you 749 generate some random string? 750 Okay, so if you go into the node 751 crypto module, crypto random, okay? 752 So this is a function 753 that you can use. 754 So crypto is there 755 random bytes is there? 756 So if I click here, okay, this 757 is the official documentation 758 of node js and I search for 759 random, okay, random bytes. 760 This is the one. 761 So you can see from node crypto 762 we can import random bytes. 763 So I can just say import 764 something from node crypto. 765 And this is a built 766 in module, by the way. 767 So here you have a function 768 that is random bytes. 769 So I can just say random bytes. 770 Okay, how much size I can like 771 for example, say256. 772 Then this generates random 773 bytes for me, okay? 774 And then I can just say 775 that, hey, I want to make it 776 tostring, okay, as a hex. 777 So this salt is now a string, 778 which is just a random string. 779 Now using this salt, we 780 can hash the password. 781 Hashed password equals. 782 How to do that? 783 So for this particular thing, 784 what you could do is now you 785 can basically do a hashing, 786 okay, how to Do a hashing. 787 So for that you have to search 788 for something known as. 789 So there is a documentation 790 where they use, I love cupcakes. 791 Exactly. 792 So you have to save create H mark. 793 Okay, this is a function again 794 coming from node crypto. 795 So I can just import create hmark. 796 Okay, so this created creates a hash. 797 So I can say create hmac. 798 Okay, which algorithm 799 do you want to use? 800 So there are multiple 801 hashing algorithms. 802 Let's say I will use Sh256. 803 Then what is your secret? 804 I say, hey, I want to use this salt. 805 Okay, that's great. 806 Then what do you want to update? 807 Okay, I can just say dot update. 808 What do you want to update? 809 The user's password. 810 Okay. 811 And then finally just give me 812 the hex version that is a string. 813 So now this is a hashed password. 814 Using this particular algorithm, 815 using this salt, okay, we 816 are updating the password. 817 And as a hexadecimal. 818 Now this password must be 819 stored as hashed password. 820 Really nice. 821 And you can also keep 822 this particular salt. 823 So this particular thing creates 824 a new user in the database. 825 Okay, so cost user equals to. 826 Then you can just say dot return. 827 Okay, what do you want to return? 828 I just want to return the ID which is 829 users, table.it 830 okay, so this user is basically. 831 So this is actually an array 832 which will always have one value. 833 So I can just destructure it. 834 Now I can just say return 835 response.status code 201. 836 Because you have created 837 a resource.JSON, i can just say 838 status success and I can just 839 send the data where I can have 840 the user ID to be user.id. 841 so this is what we",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "04 Session Based Auth with Drizzle ORM.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/04 Session Based Auth with Drizzle ORM.vtt",
      "type": ".vtt",
      "isChunk": true,
      "chunkIndex": 0,
      "totalChunks": 2
    },
    "embedding": [
      -0.0044391355,
      -0.00058416376,
      0.003915964,
      -0.06424062,
      -0.019235872,
      0.0070662186,
      0.013083943,
      0.022623964,
      0.0072280364,
      -0.004178282,
      -0.008499636,
      -0.012507159,
      0.00077527267,
      0.02417408,
      0.13263005,
      0.009020361,
      -0.0011254064,
      -0.005549901,
      0.00600476,
      -0.050418667,
      0.010603548,
      -0.006706837,
      0.023574809,
      -0.010538664,
      0.005440066,
      0.0042675473,
      0.014318415,
      -0.01216509,
      0.03064223,
      -0.01726413,
      0.0008952652,
      -0.009066911,
      -0.0000049214996,
      0.028378509,
      0.018145066,
      0.05173774,
      0.032982826,
      0.016255304,
      -0.02012445,
      0.0073820516,
      -0.01632925,
      0.0124269035,
      -0.005905374,
      -0.0067251013,
      0.0037864877,
      -0.00074043777,
      0.000025365052,
      -0.01010009,
      -0.0076369015,
      0.022480533,
      0.007067476,
      -0.012137812,
      -0.041642107,
      -0.1727876,
      0.0004168319,
      0.00036245634,
      0.003049479,
      -0.0032847438,
      0.015195665,
      -0.0068760905,
      -0.013260893,
      0.012142401,
      -0.033707194,
      0.006700442,
      -0.018928265,
      0.00992316,
      0.0145394355,
      -0.007764706,
      0.007788337,
      -0.029083049,
      0.000197457,
      0.020260734,
      0.0021379953,
      -0.015082148,
      -0.004114399,
      -0.025548657,
      0.02773826,
      -0.0174911,
      0.00589775,
      0.023412475,
      0.0114842085,
      -0.018815845,
      -0.02931464,
      -0.0075631533,
      -0.016383735,
      -0.011206902,
      -0.0006129122,
      -0.009976271,
      -0.00675274,
      0.007766598,
      -0.014726568,
      0.008938032,
      -0.008914181,
      0.0013020562,
      -0.02064491,
      -0.0055331457,
      0.0010284247,
      0.005264615,
      -0.005858848,
      -0.0096060885,
      0.02467434,
      0.022082396,
      -0.020620875,
      0.009179597,
      0.0077274265,
      0.024945112,
      -0.002339667,
      -0.001762434,
      0.017232297,
      -0.024284858,
      -0.0036385027,
      -0.014824853,
      0.009253416,
      0.007554563,
      0.03793056,
      -0.18347569,
      0.022881433,
      -0.022249768,
      0.00638017,
      0.0035174175,
      -0.015155677,
      0.010096048,
      0.023544844,
      -0.006686518,
      -0.013268999,
      0.000015069734,
      -0.0062506455,
      0.017045222,
      0.010450071,
      -0.0022823722,
      -0.003376089,
      0.004585233,
      0.012564558,
      0.008938325,
      0.025813537,
      0.025351617,
      0.016118692,
      0.0063907932,
      -0.009109004,
      -0.035447843,
      0.00032966194,
      0.0328415,
      -0.00033816946,
      0.0396233,
      0.017080666,
      -0.0007491813,
      -0.018884165,
      0.014833039,
      0.005475994,
      -0.029127594,
      0.03693836,
      -0.005930547,
      0.007840834,
      0.010297279,
      0.028053641,
      -0.046094052,
      0.0013705329,
      -0.0030802023,
      0.014643513,
      0.011975521,
      0.0023421093,
      0.0040706736,
      0.0049066828,
      0.021606177,
      0.007967424,
      0.003828591,
      -0.0017171449,
      -0.005313446,
      0.031188885,
      0.007491728,
      -0.00921754,
      -0.01166544,
      -0.013134986,
      0.011353504,
      -0.018075507,
      -0.003799147,
      -0.0014466845,
      -0.018537706,
      -0.000014128432,
      -0.01821197,
      -0.0020207928,
      -0.0054612863,
      0.019952437,
      -0.005840513,
      0.023137169,
      0.0018264492,
      -0.024494674,
      0.015769657,
      0.02837879,
      -0.00029597594,
      -0.008941238,
      -0.02127969,
      0.004115235,
      -0.0073753386,
      0.009393132,
      -0.0034132728,
      -0.01065936,
      -0.016064813,
      0.025990812,
      0.01690176,
      0.023139194,
      0.006856399,
      -0.01067073,
      -0.0009817496,
      0.00239562,
      0.011119881,
      0.011746019,
      -0.027593747,
      -0.009625597,
      0.028362878,
      -0.01328158,
      -0.0064175436,
      0.008416804,
      0.0058353036,
      0.00835869,
      -0.007206793,
      0.0103039695,
      0.0037073276,
      0.0015749845,
      -0.03192455,
      -0.0062579913,
      -0.015173554,
      0.016642615,
      0.011683344,
      0.004070663,
      0.00071141595,
      -0.005252071,
      -0.021712117,
      0.014993702,
      -0.0030583886,
      0.0141400155,
      0.0041239117,
      -0.0009891384,
      -0.007938454,
      0.01944901,
      -0.016780427,
      -0.018752638,
      -0.009841151,
      -0.0061070714,
      0.0052381717,
      0.009253657,
      -0.019674677,
      0.011251063,
      0.03222054,
      0.022461908,
      0.012288745,
      -0.009344537,
      -0.0039410093,
      0.0028190115,
      -0.020587694,
      -0.0056106583,
      -0.0087744,
      -0.0035501658,
      -0.030056518,
      0.0030298536,
      -0.022080557,
      -0.040588707,
      0.0017546277,
      0.016112948,
      -0.017976778,
      -0.013861089,
      -0.011699452,
      -0.01650495,
      -0.0061681913,
      -0.011346933,
      -0.009305521,
      0.0034906145,
      0.028446972,
      -0.0110955415,
      0.005169296,
      0.015689291,
      0.005687983,
      0.003324637,
      0.0005268403,
      -0.0011423582,
      0.0052218526,
      -0.0722925,
      0.004818351,
      -0.0038216151,
      -0.02590785,
      -0.023939768,
      0.012259389,
      0.0015101078,
      0.006539649,
      0.016842635,
      0.009878202,
      0.004665337,
      -0.027668772,
      0.017986245,
      -0.015995575,
      0.0040246896,
      0.026009265,
      -0.012943392,
      -0.020680021,
      0.009355808,
      -0.03389405,
      -0.01184821,
      -0.009525924,
      0.0014499224,
      0.006735868,
      0.01550796,
      0.008268547,
      -0.028526092,
      0.04253937,
      0.011287606,
      -0.011770882,
      -0.0034684057,
      0.022709925,
      -0.0072080004,
      -0.020408276,
      -0.03096647,
      0.017200015,
      0.019469393,
      -0.032070003,
      0.018170236,
      -0.025892995,
      -0.010059018,
      -0.021015463,
      0.006901757,
      0.004148545,
      -0.017561136,
      0.0010207033,
      0.030265091,
      0.003712214,
      -0.011132111,
      0.0042710914,
      -0.019890575,
      0.016679544,
      0.0030980152,
      -0.037604526,
      -0.0012806583,
      -0.006696077,
      -0.0057384935,
      0.015563571,
      0.026965536,
      0.017699562,
      -0.01894917,
      0.015436049,
      -0.0010172318,
      0.0022156832,
      0.013310103,
      -0.012830106,
      -0.0013884602,
      -0.002646974,
      -0.00651711,
      -0.0108538605,
      0.010714488,
      -0.024186552,
      -0.023595653,
      -0.03296627,
      0.009318577,
      -0.0022322838,
      0.0040907008,
      -0.0010943145,
      -0.023324912,
      0.01161854,
      0.0026543713,
      0.004636198,
      0.027443184,
      0.034538303,
      0.029899161,
      0.00039316894,
      -0.01020918,
      0.018235175,
      0.0047735306,
      -0.0068595964,
      0.027620357,
      0.024209836,
      -0.007341825,
      0.0035121236,
      0.0011186783,
      0.013453506,
      -0.012699579,
      -0.016244259,
      -0.0033174092,
      0.015410112,
      -0.031065332,
      -0.008826871,
      0.0039652707,
      -0.0060803248,
      0.005084897,
      0.021085348,
      -0.007573268,
      -0.013862905,
      0.020443553,
      -0.007793941,
      0.0017623631,
      0.014853158,
      -0.0016261111,
      -0.0027216712,
      -0.02447914,
      -0.007674074,
      0.008360574,
      -0.0047224914,
      -0.016381808,
      0.008817734,
      -0.010534865,
      -0.0069293347,
      -0.0050084786,
      0.0058626956,
      -0.02305567,
      0.018251592,
      -0.03310724,
      -0.0030903614,
      0.0030986203,
      -0.01929823,
      -0.009666244,
      -0.0068608797,
      -0.029334009,
      -0.015512338,
      -0.006084778,
      -0.006635032,
      0.01632555,
      -0.023926133,
      0.008283582,
      0.03396466,
      -0.0025999248,
      0.0041658934,
      0.016735263,
      -0.015442372,
      0.0013585862,
      0.014394825,
      -0.021408722,
      0.0026293413,
      0.008623267,
      0.0041037765,
      -0.00817288,
      -0.0026728087,
      -0.013648693,
      -0.0055375565,
      0.016637921,
      -0.0107354615,
      0.002914937,
      -0.00069724827,
      -0.0017674341,
      -0.005533536,
      -0.032973625,
      0.008420968,
      -0.0041957926,
      -0.012811827,
      -0.0038325328,
      0.014940866,
      -0.023470389,
      0.0115673365,
      0.007986665,
      -0.014381032,
      0.011650317,
      -0.008369627,
      -0.0288235,
      0.016265435,
      0.014053771,
      -0.008097546,
      0.009249507,
      0.0037308305,
      0.0136321,
      0.009196128,
      0.0006905841,
      -0.019487184,
      -0.016381044,
      -0.011683022,
      0.0010536353,
      0.0022720748,
      0.017940106,
      -0.015752561,
      -0.03270778,
      0.00020306317,
      0.01880972,
      -0.01917812,
      -0.025406232,
      0.009350003,
      0.009844937,
      0.044399258,
      0.0017257135,
      0.01090423,
      0.0056889793,
      -0.008266806,
      -0.017835245,
      -0.009601182,
      0.014934712,
      0.010790408,
      0.022187727,
      -0.0029410713,
      -0.01622255,
      -0.0019188564,
      -0.006318518,
      0.026195718,
      0.0065997518,
      0.015279364,
      0.0071831658,
      -0.0065774536,
      0.033436533,
      0.024928153,
      0.007616918,
      0.008069057,
      -0.0348582,
      -0.0017714748,
      0.026236562,
      -0.026092106,
      0.009075095,
      -0.012656009,
      0.006973751,
      -0.0012689026,
      -0.012235696,
      0.018748637,
      0.014544219,
      -0.03200138,
      0.011475314,
      -0.008195523,
      0.021062877,
      0.018111775,
      -0.008851882,
      -0.00878474,
      0.019426728,
      -0.009642183,
      -0.00054736814,
      0.0071565984,
      -0.0048255785,
      -0.010457632,
      -0.0098826,
      -0.009892873,
      0.0019515388,
      -0.010203071,
      0.012618277,
      0.024292784,
      -0.012325438,
      -0.015435671,
      0.014573318,
      0.008056591,
      0.006013138,
      -0.0074944026,
      -0.006894084,
      0.019885473,
      -0.0016519803,
      -0.0092761,
      -0.0047723693,
      0.008213629,
      -0.002366492,
      -0.020974413,
      0.013916728,
      0.01533568,
      0.0048773335,
      -0.020573668,
      0.001005341,
      0.0035455087,
      0.013997268,
      -0.11871758,
      -0.0014846418,
      -0.010233599,
      0.010631524,
      0.0015136508,
      -0.015478065,
      0.0033516684,
      -0.02014175,
      -0.02450584,
      -0.011393672,
      0.010892765,
      -0.012630021,
      0.0008623897,
      0.010640941,
      -0.0074963756,
      -0.013663523,
      0.0017137575,
      0.01092739,
      0.03854909,
      -0.008228254,
      0.0112168575,
      0.009738502,
      0.009603246,
      0.0033999307,
      -0.007825576,
      0.018825127,
      0.010295013,
      -0.010469272,
      0.008974903,
      0.014459378,
      -0.017378945,
      -0.0031296292,
      0.000462529,
      -0.0016943531,
      0.01827888,
      -0.0017904948,
      -0.018678166,
      0.007871387,
      0.02185536,
      -0.00042883708,
      0.015133715,
      0.0061887205,
      0.0090010725,
      0.00028229353,
      0.005352824,
      0.015465805,
      0.02162034,
      -0.019148862,
      0.0047268015,
      0.030455666,
      -0.04557144,
      -0.020282937,
      0.0001419373,
      -0.0254196,
      0.0026658769,
      -0.00063093426,
      -0.013871248,
      0.007998004,
      -0.009124033,
      -0.008907613,
      0.0047181775,
      0.009575726,
      -0.008335685,
      0.021366535,
      -0.009326769,
      -0.005286869,
      0.011083999,
      -0.0041217455,
      0.004487233,
      0.002882,
      0.0011445775,
      -0.012032099,
      0.009638401,
      0.0151111,
      0.012747654,
      0.009577757,
      -0.0015016908,
      0.026464153,
      -0.0122038005,
      0.010234346,
      -0.0095069455,
      0.007253519,
      -0.052234914,
      -0.02572593,
      -0.015063349,
      0.001983726,
      0.013125374,
      0.0068581766,
      -0.018360984,
      0.021479648,
      0.012900556,
      0.00080798776,
      -0.018317476,
      -0.010991974,
      -0.015348901,
      -0.030008724,
      -0.034373935,
      0.01181041,
      0.0051406985,
      -0.028734336,
      -0.020175297,
      -0.0066012694,
      -0.009150458,
      0.007349596,
      -0.0031304082,
      -0.027636502,
      0.011829546,
      0.018968934,
      -0.012232765,
      -0.008595539,
      -0.017061468,
      -0.006684463,
      0.012118557,
      -0.15080462,
      -0.020945618,
      0.013822539,
      0.00012771972,
      -0.008101022,
      -0.007723383,
      -0.000454255,
      -0.017028544,
      -0.0028298744,
      0.018038988,
      -0.003188461,
      -0.017156344,
      -0.010094711,
      -0.0058569293,
      -0.001863844,
      0.13924141,
      -0.00013630989,
      0.010727855,
      0.004842211,
      0.005781173,
      -0.016435923,
      -0.0056460234,
      0.015419967,
      0.0089616645,
      0.013890614,
      -0.0037540696,
      0.01140646,
      -0.043030724,
      0.008909337,
      0.008738545,
      -0.0021040922,
      -0.005337025,
      -0.022839338,
      0.010680178,
      -0.0031012164,
      -0.010009884,
      0.009300879,
      -0.033481527,
      0.0014259494,
      0.006424473,
      -0.004780665,
      0.015221552,
      0.0154845975,
      0.011809991,
      0.0033789643,
      0.019507634,
      -0.0043802033,
      -0.0046341675,
      -0.006087959,
      -0.0186005,
      0.005155001,
      -0.05887878,
      -0.018469244,
      -0.024159204,
      -0.017899375,
      0.026751122,
      0.013315446,
      0.017813692,
      -0.004673052,
      0.00020985122,
      -0.0008053449,
      -0.011369852,
      0.015182652,
      -0.0024903552,
      0.005139145,
      0.0041288547,
      0.019874638,
      0.011540133,
      0.02553359,
      -0.017492728,
      0.0020486524,
      0.02978639,
      -0.006205111,
      0.0027481616,
      -0.026490008,
      -0.024418406,
      -0.007672215,
      0.01609533,
      0.01588579,
      -0.012897231,
      -0.015895925,
      0.018472522,
      -0.02538009,
      -0.011691031,
      0.0009905725,
      -0.026941635,
      -0.019126922,
      0.021353267,
      -0.0027021507,
      0.00049148157,
      0.018829389,
      0.00738201,
      -0.01214189,
      0.032885373,
      -0.0053831376,
      0.013114517,
      0.0031290515,
      -0.015422095,
      0.041047998,
      0.013255416,
      -0.0034082625,
      -0.01221456,
      0.000312443,
      -0.034537096,
      0.030287528,
      0.016116763,
      0.025976235,
      0.025387954,
      -0.007340265,
      0.0011222842
    ]
  },
  {
    "id": "genai_cohort_nodejs_04_Session_Based_Auth_with_Drizzle_ORM_vtt_chunk_1",
    "content": " can return. 842 Ideally we should directly 843 log in the user. 844 But. 845 Okay, so let's first test 846 our signup route. 847 So for that let me 848 spin up my postman. 849 So here is my postman. 850 Okay, you can see 851 here is the postman. 852 So in the postman what we can 853 do is let's try to sign up. 854 So as of now, you can see in my 855 Drizzle studio there is no user. 856 So my server should 857 be up and running. 858 Oh, by the way, we forgot 859 to register this route. 860 Right. 861 So I should basically do import 862 user router from 863 dot slash routes user routes. 864 And then I should basically say 865 hey app dot use. 866 If anything starts with 867 slash user, user, please use 868 this particular router. 869 Nice. 870 Now PNPM dev. 871 Okay, so we got an error, 872 that is on this particular thing. 873 It says that there is no 874 module by this name. 875 Okay, why is it so? 876 Let me just check. 877 Okay, let's give it a try again. 878 Oh, the error is actually 879 in the DB thing. 880 Okay, so from where this 881 particular error is coming, 882 let me just do a quick check, 883 directory import the db. 884 Okay, so the problem is actually 885 I think here,/index.js. 886 okay, yeah, so now you can 887 see everything is 888 up and running on port 8000. 889 So let's say HTTP local host 8000. 890 Let me just make a request. 891 Yes, the server is up and running. 892 So if I want to sign up user 893 sign up, is the route correct? 894 So basically the route is 895 if I go here/user/sign up. 896 Okay, so in the body I have 897 to give a raw JSON data. 898 And by the way, because now 899 you are handling the raw JSON data, 900 please make sure that 901 you have the middleware setup that 902 app.use express.JSON. 903 okay, so we have to send 904 few details, that is name. 905 Let's say piyush garg. 906 Okay, email I can send 907 piyushgar.devail.com Let me just 908 zoom in a little bit so 909 that you can see clearly. 910 And let me just close 911 this particular window. 912 So localhost8000 is okay, so body, 913 oh, here is the one. 914 Okay, so this one is also good. 915 And then I can just say password. 916 So password is going to be Piyush123. 917 Okay, let's do a send. 918 And we got an error that is 404. 919 So it says that this particular 920 route does not exist. 921 Yeah, of course, because it has 922 to be a post route send. 923 We got user with email piyushgar 924 uh.dev already exists. 925 Okay, now there is something 926 bad we have done here, right? 927 Why? 928 Let me just check. 929 Okay, because this is an array, we 930 should basically destructure it. 931 This was the problem. 932 Okay, now let's do a send. 933 You can see a user is created 934 with this particular id. 935 Nice. 936 If I go back to my database 937 and if I do a refresh now you 938 can see we have one user. 939 And if I just do a refresh here 940 you can see this is the user with 941 this particular ID name, email. 942 If you see closely, this 943 is my password, right? 944 Can you see that my password 945 is actually hashed? 946 This is what our password looks like. 947 And this is what my salt looks like. 948 So my Original password was 949 piyush123 but we have hashed it 950 to something this. 951 So this is basically your hashing. 952 Now no user or even a developer 953 can go into the database 954 and check for the password 955 because this is hashed password. 956 Nice. 957 That is what we wanted, right? 958 And this is basically what our 959 whole table structure looks like. 960 So this is also nice. 961 Now our signup is working fine. 962 If I again try to do a sign up, 963 you can see user with this 964 particular email already exists. 965 Nice. 966 Now what we should do, we 967 should also do the login. 968 Now login is what technically 969 see what will happen is when user 970 tries to log in, he has 971 to give me his email and password. 972 Now he will give you 973 a plain password, right? 974 What user remembers in his mind. 975 What you should do is first 976 of all you should search 977 for the email in the database 978 and retrieve the salt, right? 979 You have the salt and you have 980 the hash stored in the database. 981 If I take the user's plain password 982 using the salt, I again hash it. 983 And if this particular hash matches, 984 can I say the password is correct? 985 Because see, in hashing world 986 there is no concept of D hash. 987 Once a thing is hashed, 988 you cannot dehash it. 989 So what I can do is I can 990 repeat the algorithm, I can 991 take this password, use this 992 salt and again hash it. 993 If this new hash is actually equal 994 to the hash stored in 995 the database, that means yes, user 996 has entered the right password. 997 So that means in the login route what 998 we are going to do is let's say 999 we have request, we have response 1000 and of course it has to be async. 1001 So what we are going 1002 to do is see number one. 1003 Let's first get 1004 the request body thing sorted. 1005 So I can just say hey, from 1006 the request body I want 1007 to have email and password. 1008 Okay? 1009 Now you have to search 1010 for this existing user. 1011 So just copy the logic 1012 and paste it here. 1013 Now here is a thing. 1014 If there is no existing user, 1015 that means you have entered 1016 an email which does not exist 1017 in the database, right? 1018 This is the wrong thing. 1019 So return response.status 1020 code that is 401.JSON. 1021 Okay, and I can just send the error. 1022 Let me just make it 400, okay? 1023 In fact 404 makes more sense that 1024 user with email. 1025 This particular email does not exist. 1026 You are trying to log in with 1027 an email which does not exist. 1028 But if the existing user is there. 1029 Okay, let's take the salt. 1030 So I have to query the salt 1031 from users table dot salt. 1032 Okay, so basically the existing salt 1033 is basically existing user dot salt. 1034 Also take the existing hash. 1035 What is the existing hash? 1036 You can basically query 1037 the password here. 1038 So I can just say password is 1039 users table dot password. 1040 So this is a hashed password, right? 1041 We know that. 1042 So existing user dot password. 1043 Now let's create a new hash. 1044 How to create a new hash. 1045 What I am going to do is same thing, 1046 just copy the same code. 1047 See, just copy the same code. 1048 This one. 1049 That is create hmark code. 1050 What I am going to do is I am 1051 going to take your password 1052 that you are giving me in the 1053 request body and I am going to 1054 use this salt and generate a 1055 hash. 1056 Nice. 1057 Now what I can say is that, see, 1058 if the new hash is not equals to. 1059 Is not equals to the existing 1060 hash, that means your 1061 password is incorrect. 1062 Okay, so we can just say 1063 response.JSON saying 400. 1064 Sorry, response. 1065 Status. 1066 Okay, so this should be 1067 status.JSON saying error. 1068 That ideally your 1069 password is incorrect. 1070 So incorrect password. 1071 So this is your incorrect password. 1072 But if the password 1073 matches, you are here. 1074 So technically here, generate 1075 a session for user 1076 and return the success 1077 response response status. 1078 Okay, So I can just say, 1079 status success. 1080 So this is basically my login. 1081 Okay? 1082 So right now we are not doing 1083 any kind of session management. 1084 But ideally this is the logic. 1085 So that means now if I go back, 1086 copy this, make a new request 1087 post to the login. 1088 Okay, Login. 1089 What I'm going to do is raw JSON. 1090 Let me just copy this JSON from here. 1091 Now, technically, name 1092 is not required. 1093 Let me give an invalid email sent. 1094 You're getting 404. 1095 User with this particular 1096 email does not exist. 1097 Nice. 1098 What if I give you A wrong password? 1099 1 2, 3, 3. 1100 Okay, 1 double 23. 1101 It says incorrect password. 1102 But if I give you the right password 1103 and I do a send, I get a success. 1104 So this is basically how 1105 you are doing a login. 1106 But technically this 1107 is not login, right? 1108 Login basically means 1109 generating a session on the database 1110 or generating a session. 1111 So for that what I could do is 1112 I can basically generate a session 1113 for this particular user, right? 1114 So session can be stored 1115 in the database. 1116 Great. 1117 So what I could basically do is I 1118 can just say I can create a new 1119 table that is user, sessions, right? 1120 I can just say PG table and name it 1121 as like user underscore sessions. 1122 Okay? 1123 And then this basically. 1124 And there I can just say, hey, 1125 every session is going 1126 to have a unique id. 1127 This ID can be anything, right? 1128 So I can just say it is 1129 again going to be uuid. 1130 This is session id. 1131 Okay, Then I am going 1132 to keep a, user id. 1133 This particular thing 1134 belongs to which user? 1135 So I can just say uuid. 1136 Okay, And I can basically say dot. 1137 If you say unique, if you add 1138 a unique here, which means 1139 one user can only have one Session. 1140 That means if he's logged in 1141 from mobile, he cannot log in 1142 from laptop because one user 1143 can only have one session. 1144 But no, we want that. 1145 Okay, you can log in 1146 from multiple devices. 1147 UUID is okay, I can 1148 just say references. 1149 I have to make a reference here. 1150 How to make a reference? 1151 I can just say, hey, this particular 1152 thing in the users table.id 1153 so this is a foreign key. 1154 Okay. 1155 And also make it not 1156 nullable, not null. 1157 Nice. 1158 And you can also keep created 1159 at that when this particular 1160 session was created. 1161 Right? 1162 You want to store that if this 1163 session is only valid for, let's say 1164 10 minutes, you want to invalidate 1165 this session after 10 minutes. 1166 So you should also keep this thing. 1167 So I can just say created at 1168 is actually a timestamp. 1169 Okay, so let's just keep a timestamp. 1170 Okay dot DEFAULT is now and not null. 1171 Nice. 1172 So this is your sessions table. 1173 Now because you have made 1174 a new table, you have to say pnpmdb 1175 Colon, push and enter. 1176 So now you can see if I go into 1177 my studio and I do a refresh. 1178 Now I have user sessions 1179 now on login. 1180 What you should do now 1181 tell me the logic. 1182 Okay, you have to search 1183 for the logic. 1184 I have to basically 1185 create a new session. 1186 Okay, how to create a new 1187 session, I can just say await. 1188 In the users table, I can just 1189 say user session, User session. 1190 So I can just say user sessions. 1191 Insert sorry, DB. 1192 Insert into user session. 1193 Values. 1194 So I have to just say user ID, which 1195 is whichever user tried to log in. 1196 Right? 1197 That is this user. 1198 So I can just give it an ID. 1199 Also that is user table.id. 1200 so I can just say existing user.id. 1201 and when this particular 1202 session is created, you want 1203 to say dot returning. 1204 Okay, I can just name it as id, 1205 that is user sessions dot id. 1206 Once a session is created, 1207 you can just send this session 1208 ID as session id. 1209 Now, best thing is to actually 1210 also create a cookie. 1211 Okay, now what is a cookie? 1212 Cookie is basically what you could 1213 do is like you can store some extra 1214 information on the user's browser. 1215 But okay, as of now, let's say 1216 that you have created a token, 1217 a session id, a token for him. 1218 And now this particular 1219 token is sent to the user. 1220 Now every time he wants to get some 1221 resource from the backend, he has to 1222 it give back the session id. 1223 So if that user is having 1224 that session id, that 1225 means he is logged in. 1226 That's it. 1227 Okay, so we can just say pnpm 1228 dev again to start the server. 1229 Now Let me just try to log in again. 1230 Oh, nice. 1231 I got a session id. 1232 So this is my session id. 1233 Okay? 1234 So that means if I do a refresh, 1235 you can see that, you know, 1236 this particular user, 1237 this particular user has a session. 1238 So this user has how many sessions? 1239 As of now, only one session. 1240 Right. 1241 That means he's logged in from 1242 one device, which is this user. 1243 Piyushkar. 1244 Nice. 1245 Very nice. 1246 So that means if a session exists, if 1247 he has a session id, he's locked in. 1248 Now, you have successfully 1249 done one thing. 1250 That is how to sign up a user, how 1251 to log in, a user. 1252 Now, the problem is how 1253 to detect that if the current. 1254 Who is the current user? 1255 Right. 1256 How this backend will know 1257 who is the current user. 1258 So for that, we are going 1259 to create a middleware. 1260 So for that, we, have. 1261 We will continue this particular 1262 project in the next particular 1263 video, because I think this 1264 video is already long enough. 1265 So let's meet you in the next video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "04 Session Based Auth with Drizzle ORM.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/04 Session Based Auth with Drizzle ORM.vtt",
      "type": ".vtt",
      "isChunk": true,
      "chunkIndex": 1,
      "totalChunks": 2
    },
    "embedding": [
      -0.014049844,
      0.0038092616,
      0.021259515,
      -0.05441866,
      -0.015065287,
      0.0035524347,
      0.019641139,
      0.023728253,
      -0.0071584964,
      -0.01269958,
      -0.008474434,
      0.0015509512,
      0.013466359,
      0.017440192,
      0.14847432,
      0.0126153035,
      0.011628143,
      0.004719028,
      -0.010552375,
      -0.043501563,
      -0.0052594906,
      -0.013749655,
      0.018989883,
      -0.013975619,
      0.0027790633,
      -0.006309665,
      0.008494534,
      0.00030639116,
      0.025667772,
      -0.023218164,
      0.016789945,
      -0.004826808,
      -0.016002363,
      0.021471178,
      -0.00843876,
      0.019326692,
      0.02962176,
      0.027235148,
      -0.03108333,
      0.014638389,
      -0.0036609329,
      0.0172781,
      0.0045168684,
      -0.004975609,
      0.0027067428,
      -0.003161389,
      -0.0017317386,
      -0.00006606524,
      -0.015182537,
      0.012844131,
      -0.010113309,
      -0.008236334,
      -0.034956824,
      -0.1845775,
      -0.0039008518,
      0.00079815544,
      0.005902951,
      -0.0031922965,
      0.015963549,
      -0.007984498,
      -0.018754957,
      0.013028795,
      -0.03499309,
      0.008674054,
      -0.014295044,
      0.0020734514,
      0.021247141,
      -0.0054358593,
      0.011858715,
      0.00056740886,
      0.0034802957,
      0.03204102,
      -0.015641443,
      -0.024038292,
      -0.007906116,
      -0.029660266,
      0.004369898,
      -0.01363838,
      -0.0021164087,
      0.015233887,
      0.010868636,
      -0.014230262,
      -0.003933863,
      0.0062942537,
      -0.006910825,
      -0.016825264,
      0.00045991255,
      -0.012989222,
      -0.0021341417,
      0.008567,
      -0.016076542,
      0.010793925,
      -0.009409288,
      0.004555653,
      -0.007890686,
      -0.00813628,
      0.010156277,
      0.027877199,
      0.0022455568,
      -0.0019903588,
      0.00008213502,
      0.02259364,
      -0.015588862,
      0.015021347,
      -0.0026345716,
      0.0104220845,
      0.0014069319,
      0.0059409454,
      0.019915303,
      -0.024756117,
      -0.0032675061,
      -0.014362062,
      -0.00013258275,
      0.015719127,
      0.02330665,
      -0.17904891,
      0.023001002,
      -0.020479605,
      0.01283402,
      0.01751908,
      -0.020956196,
      0.023727793,
      0.025299154,
      0.011103156,
      -0.013913027,
      0.0070805578,
      0.000027715649,
      0.008311754,
      0.014745749,
      -0.005456182,
      -0.028723096,
      -0.0076084817,
      0.004638727,
      0.009763433,
      -0.0029020323,
      0.030694177,
      0.012632752,
      0.0068401988,
      0.02119972,
      -0.014437803,
      0.01683388,
      0.00970847,
      -0.015665758,
      0.02346967,
      -0.0038352336,
      -0.00051442423,
      -0.016737575,
      0.014006843,
      0.008727106,
      -0.03614254,
      0.01798511,
      -0.007992722,
      0.014558461,
      0.022544844,
      0.015060837,
      -0.06290685,
      -0.0026950084,
      0.014716074,
      0.020699313,
      0.009777922,
      0.0011898061,
      0.013028262,
      -0.0067158923,
      0.023014672,
      0.012535461,
      0.0021261119,
      0.01204127,
      0.007154857,
      0.011371215,
      0.013013278,
      -0.024119545,
      0.0027336795,
      -0.009558968,
      0.0023231672,
      -0.0076631326,
      -0.0059492383,
      -0.0028762617,
      0.0010729074,
      -0.015437617,
      -0.017072886,
      -0.010565301,
      0.003535522,
      0.014434106,
      0.003200887,
      0.0070489324,
      0.0039693518,
      -0.016124887,
      -0.008975493,
      0.01740983,
      -0.017518958,
      -0.00415076,
      -0.018269254,
      0.011115122,
      -0.013903692,
      0.016105503,
      -0.00741549,
      -0.013518285,
      -0.019286882,
      0.020880464,
      0.019811105,
      0.0135291,
      -0.0111185135,
      -0.0066912184,
      0.009363572,
      -0.0067071714,
      0.010213261,
      0.0213139,
      -0.009848615,
      0.013246526,
      0.023046216,
      -0.008123775,
      0.0008522301,
      0.017342385,
      0.008651234,
      0.01294259,
      -0.020211523,
      0.012037988,
      -0.003511005,
      0.0022455163,
      -0.019354688,
      -0.01736274,
      0.0019066735,
      0.015404374,
      0.014529222,
      0.005453287,
      -0.0019443417,
      0.009396109,
      -0.010430523,
      0.012593084,
      -0.010675831,
      0.029755188,
      0.0008836975,
      -0.021466821,
      -0.0028626863,
      0.00663226,
      -0.010980674,
      -0.017883275,
      0.0084930025,
      0.0034008177,
      0.015059876,
      0.014778808,
      -0.004138494,
      0.004824264,
      0.004349512,
      0.033436686,
      -0.0056239753,
      -0.02151455,
      -0.009545864,
      -0.0072841304,
      -0.014588908,
      -0.012712837,
      -0.020206163,
      -0.012832913,
      -0.02369125,
      -0.0019117399,
      -0.0335734,
      -0.040376104,
      -0.002339547,
      0.008859937,
      -0.0046198787,
      -0.013159146,
      -0.006274442,
      -0.008884001,
      -0.004716998,
      0.010230631,
      -0.026808944,
      0.005060594,
      0.020186683,
      -0.009303747,
      -0.0046446696,
      0.017754942,
      0.00817776,
      -0.012309706,
      0.0012118255,
      -0.012237269,
      0.007712277,
      -0.0817993,
      -0.0065306155,
      -0.0032246497,
      -0.031509914,
      -0.011042569,
      0.013801816,
      0.008473526,
      0.011148964,
      0.0070768064,
      0.005314051,
      -0.007981604,
      -0.012733597,
      0.0034379035,
      0.0015235334,
      -0.007383544,
      0.014788843,
      -0.0038050693,
      -0.016113276,
      0.01710768,
      -0.037425734,
      -0.0048178877,
      -0.008183811,
      -0.01182246,
      0.0034782405,
      0.014052462,
      0.022025,
      -0.022118352,
      0.020143619,
      0.015643995,
      0.0011474534,
      -0.0016289317,
      0.01839304,
      -0.01551455,
      -0.01911276,
      -0.011090985,
      0.011247987,
      0.031910785,
      -0.01574849,
      0.035462752,
      -0.011897555,
      -0.019122545,
      -0.015604852,
      -0.0051164427,
      0.014638028,
      -0.016337408,
      0.01956116,
      0.0040561585,
      -0.004696364,
      -0.0038772665,
      -0.003690374,
      -0.009932515,
      0.014221867,
      0.009062087,
      -0.021174379,
      0.0067403237,
      0.0036971846,
      -0.0058395714,
      0.017387029,
      0.019409157,
      0.0011919496,
      -0.0072038234,
      0.01471847,
      -0.0063199764,
      0.0036495314,
      0.019095026,
      0.013123193,
      0.007546223,
      -0.010886585,
      -0.0145107005,
      -0.030840421,
      0.0126958685,
      -0.013548304,
      -0.019968372,
      -0.02534587,
      0.0037898612,
      0.005672258,
      0.0044916114,
      0.00762989,
      -0.025725463,
      0.027955301,
      0.0007222564,
      0.0031398581,
      0.029416641,
      0.023534182,
      0.017982312,
      -0.011716091,
      0.0002226734,
      0.017669488,
      0.0036254632,
      -0.013202263,
      0.028017107,
      0.019691112,
      0.00062474766,
      -0.0012015416,
      -0.0031573263,
      0.02519297,
      -0.014056011,
      -0.02693338,
      -0.0077219214,
      0.027199948,
      -0.029732713,
      0.0030572112,
      -0.010093452,
      -0.010219593,
      0.0015659223,
      0.020878227,
      -0.016650148,
      -0.009210376,
      -0.0048922477,
      -0.0027959375,
      0.017905828,
      0.0015594045,
      0.0015981595,
      0.00022862242,
      -0.035275843,
      0.0004344785,
      0.0071977074,
      0.0036211389,
      -0.010112285,
      0.0010636102,
      0.00045016952,
      -0.000514297,
      -0.002199883,
      0.012871226,
      -0.014832662,
      -0.0030620594,
      -0.036850292,
      0.0016377993,
      -0.0043647946,
      -0.016271435,
      -0.0012118907,
      -0.012837082,
      -0.013790196,
      -0.013819292,
      -0.0009545939,
      -0.02209923,
      0.017345497,
      -0.031385783,
      0.0045844354,
      0.02467472,
      0.0049153715,
      0.018162474,
      0.012973297,
      0.0065771816,
      0.0042971587,
      0.012162852,
      -0.0028850902,
      -0.0074157133,
      0.022417516,
      -0.007469905,
      -0.008395139,
      -0.013526706,
      -0.005359269,
      0.005247238,
      0.007029453,
      0.011596662,
      0.000021672204,
      -0.006105731,
      0.00037171246,
      -0.0064590373,
      -0.025687333,
      0.018074956,
      -0.011407051,
      -0.021373054,
      0.002194952,
      0.017963903,
      -0.010513956,
      0.010103272,
      0.012414032,
      0.0016043684,
      -0.002532711,
      -0.010596613,
      -0.03600872,
      0.01419015,
      0.010372789,
      -0.0004270498,
      0.005369597,
      -0.015579265,
      0.037005574,
      -0.0018693985,
      0.007548109,
      -0.012651576,
      -0.01899763,
      -0.0045534754,
      -0.017396037,
      -0.008856872,
      0.01933246,
      -0.02146663,
      -0.035792645,
      0.0020485264,
      0.0023728637,
      -0.0006022891,
      -0.0066643716,
      0.023537403,
      0.009519137,
      0.028313914,
      0.0007819563,
      0.026641227,
      -0.007534218,
      -0.011020471,
      -0.026765842,
      0.00048332923,
      -0.0016839844,
      0.019748287,
      0.011801717,
      0.0050282246,
      -0.01622619,
      -0.009264413,
      -0.016154265,
      0.027619593,
      -0.015612852,
      0.018065887,
      0.021788245,
      -0.0040996866,
      0.03397033,
      0.017740456,
      -0.008996126,
      0.0039933524,
      -0.034411624,
      -0.0063053323,
      0.015736494,
      -0.017161064,
      -0.008804944,
      -0.01380889,
      -0.004958551,
      0.012796904,
      -0.008011369,
      0.01664045,
      0.005558199,
      -0.017171284,
      0.01013618,
      -0.0031488126,
      0.021669492,
      0.0054542385,
      -0.021936795,
      -0.0030892917,
      0.014039774,
      -0.0028650097,
      0.011371841,
      0.0199407,
      0.003070747,
      -0.014924276,
      0.0060626147,
      -0.008645554,
      0.0052192253,
      -0.018243114,
      0.022538178,
      0.015937382,
      0.0089602275,
      -0.026501197,
      0.014407074,
      0.022191428,
      0.012970851,
      -0.015229662,
      -0.00064312323,
      0.021131406,
      -0.0063364864,
      -0.01829912,
      -0.006312842,
      0.0050174566,
      0.004123587,
      -0.013096869,
      0.01474247,
      0.019989522,
      0.009525628,
      -0.0133596435,
      -0.0010235481,
      0.011003487,
      0.021560607,
      -0.11319453,
      -0.006066394,
      -0.011082017,
      -0.0037964624,
      -0.0021434717,
      -0.0066163247,
      -0.008781134,
      -0.028659092,
      -0.044645198,
      -0.004370308,
      0.006373756,
      -0.010004349,
      -0.007377126,
      0.021092836,
      -0.0012059968,
      -0.0070109484,
      0.013657404,
      0.024204172,
      0.02533397,
      -0.007849916,
      0.0043536816,
      0.017571993,
      0.0045330073,
      0.011488977,
      -0.0075501036,
      0.008020966,
      0.004849907,
      -0.015309538,
      0.001745797,
      0.017478965,
      -0.022171179,
      0.0032339755,
      -0.009542167,
      0.00074735604,
      0.02022611,
      -0.016184773,
      -0.025380036,
      -0.008125935,
      0.008456991,
      -0.0022230537,
      0.017465526,
      0.008658139,
      0.010570959,
      0.0060940506,
      0.00041157153,
      0.025032718,
      0.015526469,
      -0.032178793,
      -0.010071844,
      0.04017732,
      -0.044045642,
      -0.006338752,
      -0.006143042,
      -0.020782087,
      -0.00025736046,
      0.008101193,
      -0.010486025,
      0.01835467,
      0.00022432402,
      -0.017547358,
      0.017583122,
      0.006432575,
      -0.011355171,
      0.024047777,
      -0.016481927,
      0.012046263,
      0.014003534,
      0.0034035607,
      0.004341079,
      0.001276484,
      -0.00014355843,
      0.01315745,
      0.0068575577,
      0.017898414,
      0.02313245,
      -0.009796975,
      0.0144126555,
      0.005581247,
      -0.021184014,
      0.0026887648,
      -0.0044177817,
      0.008306162,
      -0.07142934,
      -0.023300184,
      -0.0016061018,
      -0.0039707804,
      0.0029889974,
      0.014067244,
      -0.010578516,
      0.017986583,
      0.010048505,
      0.00651979,
      -0.009587977,
      -0.028190006,
      -0.00154531,
      -0.032117423,
      -0.01674369,
      0.011063327,
      0.011016123,
      -0.030231945,
      -0.02331613,
      -0.013081077,
      0.000021455186,
      0.02174291,
      -0.018797524,
      -0.014851843,
      0.0021227149,
      0.012208044,
      -0.033707414,
      0.002372177,
      -0.010323539,
      -0.0015547319,
      0.015659811,
      -0.14321281,
      -0.0053366018,
      0.010617228,
      0.011493591,
      0.010756058,
      0.007885698,
      -0.001652449,
      -0.011580869,
      -0.010728162,
      0.0010216332,
      -0.012560994,
      -0.01807994,
      -0.020356707,
      0.011139473,
      -0.016577823,
      0.13487545,
      0.002643827,
      0.014585499,
      0.005324947,
      -0.0023917786,
      -0.0029454518,
      0.016307404,
      0.011201874,
      -0.013737768,
      0.0046681524,
      -0.014286674,
      0.00971353,
      -0.031789016,
      0.00864136,
      0.0187845,
      -0.0020468368,
      -0.016483681,
      -0.012177461,
      0.0030602908,
      0.0061037326,
      -0.021894168,
      0.011865454,
      -0.01918974,
      -0.0065600257,
      0.006008766,
      -0.015644763,
      0.013342889,
      0.018658899,
      0.004787662,
      -0.0007565112,
      0.01667471,
      -0.0064633344,
      -0.00079387426,
      -0.0034574978,
      -0.015977224,
      0.013230518,
      -0.06087832,
      -0.020601822,
      -0.02078355,
      -0.02238668,
      0.031001883,
      0.011493513,
      0.020295503,
      -0.027398653,
      -0.0031426104,
      -0.006446443,
      -0.020525696,
      0.0037658382,
      -0.0069898977,
      0.012476762,
      0.00035457494,
      0.01871795,
      0.011191237,
      0.029512627,
      -0.012392878,
      -0.009035813,
      0.0065719425,
      -0.002789873,
      0.0052872314,
      -0.031143073,
      0.0035754107,
      -0.004586669,
      0.015778251,
      0.008069943,
      -0.013139688,
      -0.008726262,
      0.022953035,
      -0.02555062,
      -0.013607701,
      0.014439635,
      -0.020677742,
      -0.016914189,
      0.012244071,
      -0.0054265405,
      0.012920436,
      0.021673659,
      -0.00050991017,
      -0.022849882,
      0.02665329,
      -0.008174871,
      0.00477164,
      0.007757329,
      -0.010291547,
      0.042223565,
      0.0021036856,
      -0.0119350925,
      -0.018935796,
      -0.0080322875,
      -0.025996124,
      0.030422112,
      0.008751701,
      0.03911344,
      0.03870251,
      -0.00066445745,
      0.0016987905
    ]
  },
  {
    "id": "genai_cohort_nodejs_05_Building_Auth_with_Express_Middlewares_vtt",
    "content": "All right, so welcome to the another 2 video in which we have 3 to detect who is the current logged 4 in user and how we can do that. 5 So what we could do is be simple. 6 It's very simple. 7 We have already studied the concept 8 of middlewares, right? 9 The middlewares. 10 See what I can do is 11 technically, let's say that 12 here is your user, right? 13 This is the user or the client making 14 a request to your express server. 15 So these are your different, 16 different routes. 17 Let's say this is a route. 18 Now one thing is what you can 19 do is like you can write a logic 20 of getting the current user 21 here, right, in every route. 22 For example, let me just 23 code it, okay, for you. 24 So let's say async request 25 and response, correct? 26 So what you can do is how. 27 So you are expecting that request 28 will somehow contain the session id. 29 Okay, so let's say that user, you 30 have told the user that hey, in 31 the headers always give me an header 32 that is let's say Session ID 33 as whatever is your session id. 34 Okay, so this is one thing that 35 you are saying to the user. 36 So you can assume that you are going 37 to get the session ID 38 of the user in the headers, that is 39 Request dot headers, okay, as 40 a key, that is Session id. 41 Let's say now what you can do is 42 you can write a logic, correct? 43 What is the logic? 44 You have to search 45 a session by the id. 46 So first thing first, if there 47 is no session id, that means 48 you are not logged in, right? 49 Return response status 50 code of unauthorized. 51 Okay, so what is the unauthorized 52 status code? 53 Unauthorized status code 401, right? 54 So you can just say 401 JSON 55 and and error that you are 56 not logged in because you 57 don't have a session id. 58 But if you do have a session id, I 59 want to search in the table, right? 60 So I'll just make a query. 61 Await, database. 62 Okay. 63 Select okay from which 64 particular table okay. 65 From which table that 66 is sessions table. 67 Okay, that's nice. 68 Okay, where you will just say table 69 equals okay, what that is 70 table.id is session id nice. 71 So what you are going 72 to basically select from here is id, 73 which is user sessions id. 74 Nice. 75 Now if this is not returning 76 something, if you are not 77 getting something that is const. 78 Let's just call it as data. 79 If there is no data, which basically 80 means that there is no session, 81 the session ID is invalid. 82 Again, you can just say this 83 particular thing, okay, that if 84 there is no data, okay, that 85 means you are not logged in. 86 This is an invalid session 87 ID you are sending me. 88 But if you get it, you want 89 to get the user information. 90 So if you know that you have 91 something known as user id 92 in the user sessions.user id, right? 93 So what you can do is you can 94 basically do a for lookup, right? 95 You can just say dot join. 96 Okay, you can just do a dot left 97 join, you can do a right join. 98 So let's just do a right join. 99 Okay, okay. 100 On what table? 101 On the users table. 102 On the users table. 103 Okay. 104 On. 105 Okay, how do you want to join it? 106 So you have to give the on 107 where users table.id. 108 okay, you can just say where equals 109 this particular thing to what thing? 110 That is user sessions.user ID. 111 So this is how you do a join. 112 Now technically you can get the name 113 of the user how you can just say 114 users table.name and you can also 115 get the email of the current user 116 that is Users table dot email. 117 So now this data contains everything. 118 So you can just say if you got 119 the data you can just say return 120 response JSON and you 121 can just send the data here. 122 Let's first give it a try 123 if everything is working. 124 So let's say this is my 125 session id, I'll just copy it. 126 Let's make a new request, 127 not a websocket request. 128 I want to make an HTTP get request 129 on HTTP user. 130 If I just make a request to this 131 particular route you can see 132 it says you are not logged in. 133 So I can just go into the headers. 134 Let's create a new header 135 of which name Session id. 136 So I can just say session 137 ID and value and send. 138 So you can see this is 139 the current logged in user. 140 If this was an invalid ID 141 let's say invalid ID you can 142 see you are not logged in. 143 Okay so one, so this is the current 144 logged in user and nice. 145 So now you can see that how 146 you can basically save 147 the current logged in user. 148 Now let's say I have one more route 149 that is a private route. 150 Okay, so let's say 151 I have a update route. 152 Let's say user wants 153 to update his some information. 154 So it's a patch request. 155 Okay, let's say router.patch/async 156 request and response. 157 And what you want to do is you want 158 to basically update something 159 from the current logged in user. 160 So let's say he wants 161 to update his name. 162 So request body. 163 So let's say name is 164 something he wants to update. 165 Now here is a problem right as 166 Soon as you update the name you 167 want to see if the current 168 logged in user is who so you 169 have to repeat this code, is 170 that correct? 171 So that means if you have a lot 172 of routes, which has some 173 private information, you want 174 the information about the user, 175 you have to repeat this piece 176 of code, which is not a correct 177 thing. 178 So in Express, what you can 179 do is you can basically create 180 a middleware, a middleware, 181 okay, which always runs. 182 This middleware is responsible for 183 fetching the session and keeping it 184 in the data of the session and then 185 forward the request to the route. 186 Got it. 187 Now so what we can do is this 188 middleware can do the database 189 operation and on the request it 190 can create a new object named as 191 user, which is basically the 192 current logged in user, and then 193 forward the request to the 194 appropriate handler. 195 That means if I go here, 196 what I could basically do is I 197 can create a middleware app. 198 Use an async function. 199 Okay, so this basically 200 has request response. 201 And next, see what I 202 could basically do here. 203 Okay, I'll just copy paste the code 204 first, try to take the session id. 205 If there is no session id, 206 that means there is no user. 207 Just call the next function. 208 Right? 209 Because next function can 210 decide whether it wants 211 to process that request or not. 212 So I can just say a return. 213 But if there is a session id, 214 what do you want to do? 215 You want to query that session. 216 So I can just do a copy 217 of this particular code, right? 218 And paste it here. 219 Now here is a problem. 220 These things need to be imported. 221 So don't forget 222 to import these things. 223 Okay, that is db. 224 So this is just one level up, the db. 225 And you also want to import 226 this thing and this thing. 227 Copy, paste and this thing. 228 Nice. 229 Okay, so that means you got the data. 230 Now what you can do is if there 231 is no data, if there is no data, 232 okay, so that means, 233 where is this ending somewhat here. 234 If there is no data again, you 235 can just call the next function 236 without doing anything much. 237 But if you got the data, you 238 can just say request dot. 239 You can add a new property, user, 240 which is basically 241 this particular data. 242 Okay? 243 Request user as data and then 244 call the next function. 245 So technically what is happening 246 here is if the data is 247 there, the request will have 248 a new property, that is user. 249 So that means if the user is actually 250 logged in, request user will 251 be added to the current request. 252 That means now I don't have 253 to do all this stuff. 254 Okay, What I can just do is 255 to get the current logged 256 in user, I can just say const 257 user equals to request user. 258 That's it. 259 If there is no user, I 260 want to return this. 261 So that means this 262 logic has been removed. 263 I don't want to query anything. 264 Right. 265 And then if the user is 266 there, you just return this. 267 That's it. 268 Because you have moved that 269 particular logic to the middleware, 270 let's make sure if 271 everything is working. 272 Yes, everything is working fine. 273 Got it. 274 Now. 275 Now, if you want to update something, 276 first, you can basically check if 277 that particular user exists or not. 278 That's it. 279 But if that user exists, 280 of course you want the user id. 281 So here is a problem. 282 So this is basically your session ID. 283 This is basically your 284 session ID, not the user ID. 285 So you might want to say where 286 table.session ID and ID should be. 287 Basically, user table ID. 288 Okay, so user table.it nice. 289 So now what you can do is you can 290 just say to update something. 291 I can just say await DB dot update. 292 Okay, which table do 293 you want to update? 294 I want to update the users table dot. 295 Okay, set. 296 What do you want to set? 297 I want to set the name. 298 Okay, but where do you 299 want to set the name? 300 Okay, you can just say aware, where. 301 Now this is very important. 302 Equals user table.id 303 is actually equals to request user. 304 That is user.id. 305 so this is basically 306 request users current id. 307 That's it. 308 So you update it and then you 309 can just say return response.JSON 310 saying status success. 311 That's it. 312 Okay, so this is taking care 313 of the, authentication 314 using the middleware function. 315 So now if I go back and I'm trying 316 to make a get request first, 317 you can see that, yes, I am 318 getting everything that is nice. 319 Now if I do a patch request, 320 okay, on the body raw JSON. 321 Okay, So I can just 322 update my name, right? 323 So from piyushkar, let's 324 make it as piyush. 325 Send success. 326 Now if I make a get request 327 and send, you can see my name 328 is now updated, as piyush. 329 So that means even in the database, 330 okay, if I go into 331 the users, it is now piyush. 332 Okay, let's make it Piyush. 333 Garg again PiyushGarg. 334 Sorry, it's a patch send success. 335 If you try to now get, you 336 are getting piyushkarg. 337 So if I do a refresh. 338 Yeah, you can see it's now piyushkar. 339 So this is how it is updating. 340 Got it. 341 Now, so this middleware is basically 342 taking care of the authentication. 343 So now this is basically what this 344 is session based authentication. 345 The problem with the session 346 based authentication is 347 this, that on every request 348 you are making a database call. 349 Do you see that? 350 On every request you are 351 making a database call. 352 So just imagine if user is 353 repetitively making request, you 354 are actually doing a database 355 operation on every request 356 to exchange the session ID 357 with the user's information. 358 So that means this particular 359 middleware which is always running, 360 where is that middleware? 361 Yeah, this is a very 362 expensive operation. 363 For every request you are making 364 a database call, which is 365 causing multiple problems. 366 Problem number one, you are 367 making a lot of calls 368 to the database, which makes 369 the database overwhelmed. 370 Second problem is you are 371 adding a latency, right? 372 Because it's a database operation. 373 In reality your database is running 374 on a different server. 375 So you are basically going 376 to a database, getting 377 the session information and then 378 processing the request. 379 So that means there is always 380 an added latency, added some 381 processing time to every request. 382 Your every request will be slow 383 because request came, you have first 384 do the session thing 385 in the database and then you have 386 to again do database operation 387 for some other thing. 388 So that means this particular thing 389 is making database call on every 390 request, thus making every request 391 slow and overwhelming the database. 392 But it is more secure, right? 393 Because every time you are 394 making a database call. 395 So what I could ideally do is 396 now if I go back and I just 397 delete the session, see, if I 398 go into the sessions and I 399 delete this particular entry, 400 as soon as I delete now, you're 401 logged out. 402 See. 403 So that means banking systems where 404 the security is important, 405 they use this session based thing. 406 So with this particular 407 approach you can even detect 408 where all he is logged in. 409 You can invoke revoke a session. 410 So technically you can do a lot 411 of things here, right? 412 So this is basically your 413 session based authentication. 414 Now in the next particular video 415 we are going to see how we 416 can make a stateless authentication 417 using JSON web tokens. 418 And we can reduce this overhead. 419 This always making an API call or 420 making a query to the database 421 more faster by not making it. 422 So we will see how JSON web token 423 solves this particular problem.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "05 Building Auth with Express Middlewares.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/05 Building Auth with Express Middlewares.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.007152364,
      0.00912527,
      0.0064218235,
      -0.068928756,
      -0.023423271,
      -0.0036030668,
      0.013753313,
      0.016418824,
      0.01126228,
      -0.0071460996,
      -0.0014498333,
      -0.010644853,
      0.00282223,
      0.01807012,
      0.12784322,
      0.010328856,
      0.009633733,
      -0.0042254995,
      0.011059535,
      -0.038076073,
      0.011390397,
      -0.010307339,
      0.010182623,
      -0.006533177,
      0.0011077661,
      0.019248266,
      0.0041642175,
      -0.009696262,
      0.04405117,
      -0.012934995,
      -0.010239329,
      0.0011070835,
      0.01479768,
      0.03461872,
      -0.00070314255,
      0.044622913,
      0.034085292,
      0.021949558,
      -0.036405556,
      -0.007904822,
      -0.0037584035,
      0.01236756,
      -0.008293205,
      -0.010535332,
      0.0056169024,
      0.01205208,
      -0.016612895,
      -0.008248786,
      0.005497383,
      0.033214513,
      0.0025523005,
      -0.0020908222,
      -0.03205298,
      -0.17306809,
      0.006455905,
      -0.0027020886,
      0.0020407871,
      0.0061973576,
      0.009035811,
      0.020512491,
      -0.018324949,
      0.011051939,
      -0.040534385,
      0.023581404,
      0.0013093733,
      0.0072911996,
      0.0073494846,
      0.0050489684,
      0.0027459776,
      -0.011837075,
      0.0022669053,
      0.014912611,
      -0.012463253,
      -0.010934638,
      -0.004370189,
      -0.025158554,
      -0.009160888,
      -0.02009214,
      -0.010181735,
      0.009805641,
      0.0017023175,
      -0.011265069,
      -0.018435866,
      0.0040568747,
      0.008007552,
      -0.004498145,
      -0.002299177,
      0.0050001424,
      -0.012798283,
      0.005393386,
      -0.013552922,
      0.0036001876,
      -0.008751747,
      0.008005112,
      0.012831224,
      -0.0018699573,
      -0.013789146,
      0.008915139,
      -0.0025251464,
      -0.01546499,
      0.0065817,
      0.017057387,
      -0.022426372,
      0.030209683,
      0.0036662808,
      -0.0027459406,
      0.0072383783,
      -0.0061639464,
      0.01477437,
      -0.004730113,
      0.0001597634,
      0.0021337378,
      0.013762658,
      0.007645057,
      0.009546023,
      -0.17881632,
      0.020935357,
      -0.030786205,
      0.01433629,
      0.009142873,
      -0.012014249,
      0.008364584,
      0.020626957,
      -0.012145114,
      -0.0282871,
      0.024217779,
      -0.005710117,
      -0.011487866,
      0.017910454,
      0.0040526106,
      -0.022038674,
      -0.007843844,
      0.020158775,
      0.008668031,
      0.0073091276,
      0.017376825,
      0.024859015,
      -0.014879967,
      -0.0064392984,
      -0.01845128,
      0.01991829,
      0.019536374,
      -0.0010501294,
      0.037024688,
      0.01342428,
      -0.003359237,
      -0.008586434,
      0.020853598,
      0.002328876,
      -0.022001633,
      0.052696638,
      -0.0029485268,
      0.018768461,
      0.016812822,
      0.008551292,
      -0.043506797,
      0.0043643317,
      0.0032238413,
      0.004931821,
      0.0061033736,
      0.0126446495,
      0.013473937,
      0.005246583,
      0.019973988,
      -0.012961863,
      0.0034836617,
      0.0005566223,
      0.008457804,
      0.019281076,
      0.0091525605,
      -0.014383805,
      -0.008424803,
      0.009209287,
      0.000105499894,
      -0.022713391,
      -0.0020614702,
      -0.015850669,
      -0.0028660363,
      -0.003316773,
      -0.024681382,
      -0.017160818,
      -0.013823536,
      0.027974904,
      -0.0026540102,
      0.019345276,
      -0.0021958305,
      -0.019668711,
      0.0027091017,
      0.005200093,
      -0.014329717,
      0.011151664,
      -0.02755216,
      0.0013383686,
      -0.00666979,
      0.0016721915,
      0.007003992,
      -0.002230634,
      -0.017569775,
      0.019954974,
      0.0103600705,
      0.018972952,
      0.007873913,
      0.0055804593,
      -0.010818201,
      -0.0040929243,
      0.006306745,
      0.026448442,
      -0.018477924,
      0.0063638967,
      0.03115823,
      -0.002527081,
      -0.013576809,
      0.00083122874,
      -0.015517788,
      0.007339655,
      -0.021372212,
      0.011323272,
      -0.025310967,
      0.020590762,
      -0.026748683,
      -0.0040471046,
      -0.015615855,
      0.030384349,
      0.022356393,
      0.014374893,
      0.018279787,
      0.004082383,
      -0.032019254,
      0.007396615,
      -0.007379661,
      0.019638943,
      0.013300374,
      -0.0039650556,
      0.0020871423,
      0.018436937,
      -0.008928672,
      -0.009199897,
      0.009933118,
      -0.0043874914,
      0.00468003,
      0.0154096875,
      -0.013285795,
      0.00600862,
      0.008570645,
      0.021332499,
      0.0020312304,
      -0.03528091,
      -0.009293627,
      -0.0011092729,
      -0.012460405,
      -0.010790573,
      -0.009807716,
      0.0035488042,
      -0.0005081787,
      0.011233164,
      -0.01405972,
      -0.047556005,
      -0.0022297378,
      -0.0029634929,
      -0.009251592,
      -0.01545843,
      -0.019591132,
      -0.0039627566,
      -0.013780359,
      -0.002203793,
      -0.021356909,
      -0.00090309937,
      0.02983762,
      -0.011935623,
      -0.010759624,
      0.013243445,
      -0.0064381803,
      -0.00579092,
      0.009446908,
      -0.01791513,
      -0.008562542,
      -0.0682064,
      0.0044393428,
      0.014881559,
      -0.007663327,
      -0.024954056,
      0.016305767,
      -0.010842787,
      -0.001985872,
      0.011035591,
      0.014981439,
      -0.0021224676,
      -0.028438676,
      0.018876482,
      -0.013548414,
      -0.0027988208,
      0.02410237,
      0.0067648566,
      0.0008645343,
      0.007246809,
      -0.005374412,
      -0.009186462,
      -0.01240388,
      -0.008330234,
      0.0055749575,
      0.009850492,
      0.034163132,
      -0.033138182,
      0.016096942,
      0.016054522,
      0.0036695427,
      0.006464421,
      0.033092484,
      0.0027283693,
      -0.009350013,
      -0.022121448,
      0.008045896,
      0.019071337,
      -0.023891773,
      0.015013933,
      -0.016261017,
      -0.014255153,
      -0.024093391,
      -0.009499527,
      0.014529038,
      -0.012383192,
      -0.003083612,
      0.019474905,
      -0.013855669,
      -0.012816007,
      0.012118621,
      -0.02267444,
      0.012033955,
      0.014417012,
      -0.0269485,
      0.0021367292,
      -0.024791418,
      0.0110761635,
      0.015198814,
      0.006906776,
      -0.0031784265,
      0.008342461,
      0.001715015,
      0.013616905,
      0.0023937677,
      0.02098005,
      -0.0027676097,
      0.0057815644,
      -0.010511595,
      -0.014347701,
      -0.014709365,
      0.020388383,
      -0.008068245,
      -0.002795564,
      -0.03347743,
      0.0002803776,
      0.017528024,
      0.020233858,
      -0.0068062767,
      -0.019055584,
      0.021718403,
      -0.0122473445,
      -0.006513993,
      0.026329024,
      0.033463746,
      0.0050404104,
      0.009014581,
      -0.008041676,
      0.0019757708,
      -0.0034942979,
      -0.016780782,
      0.026490808,
      0.040164284,
      -0.007882867,
      0.00686533,
      -0.002584804,
      0.0029083518,
      -0.002769048,
      -0.014344688,
      -0.0036484657,
      -0.0006997547,
      -0.028565891,
      0.014663714,
      -0.027808001,
      -0.0067043966,
      -0.006439162,
      0.027859783,
      -0.0026433824,
      -0.010285834,
      0.007614018,
      -0.0017049905,
      -0.0041758507,
      0.000047717782,
      -0.023869343,
      0.0016632248,
      -0.0322953,
      0.016970806,
      0.006988413,
      0.003970589,
      -0.009225925,
      -0.0013479242,
      -0.008210172,
      0.0061284346,
      0.018090177,
      0.00006766374,
      -0.021646526,
      -0.00033988632,
      -0.028092733,
      0.0027027577,
      0.002972103,
      -0.011781503,
      -0.0076828883,
      0.010825217,
      -0.016129674,
      -0.01686496,
      0.0045558056,
      -0.008458719,
      0.009330482,
      -0.019120796,
      0.0072968155,
      0.034846414,
      -0.0087602185,
      0.004087213,
      0.0007622771,
      -0.00052968424,
      -0.0039263084,
      0.018312937,
      -0.015109033,
      0.0023295493,
      0.02431428,
      0.009776623,
      -0.001720201,
      -0.011800791,
      -0.018635437,
      0.006829604,
      0.0007945273,
      -0.0033185333,
      -0.0032625422,
      -0.011885057,
      -0.008279405,
      -0.016808398,
      -0.01560339,
      -0.015488007,
      0.0020820412,
      -0.015578548,
      0.017890796,
      0.015218401,
      -0.012823102,
      -0.0000414633,
      -0.008292795,
      -0.015758654,
      -0.024209404,
      -0.0086291665,
      -0.031762466,
      0.01095297,
      0.024767729,
      -0.0040701097,
      0.022187222,
      -0.000989127,
      0.022790505,
      0.00020782143,
      0.0057927575,
      -0.008206428,
      -0.014077787,
      0.006062003,
      0.00085647986,
      0.0075378683,
      -0.0008638495,
      0.00018383976,
      -0.028318692,
      -0.00086252525,
      0.0033206055,
      -0.023204157,
      -0.032745667,
      0.021855803,
      0.023228504,
      0.033112194,
      0.034870833,
      0.004104852,
      -0.0066230292,
      -0.014181,
      -0.026986107,
      0.014840656,
      0.00204555,
      0.0053778323,
      0.01906535,
      -0.0015530345,
      -0.03498201,
      -0.006973973,
      -0.0047311056,
      0.026547395,
      0.009109005,
      0.024727281,
      0.008730359,
      -0.0034450484,
      0.033925455,
      0.011133213,
      0.009597645,
      -0.0014496478,
      -0.041835,
      -0.005236125,
      0.021827172,
      -0.011599486,
      -0.018131062,
      -0.00041719893,
      0.0071121706,
      0.00971208,
      -0.019213047,
      0.018013714,
      0.01574654,
      -0.016389329,
      0.009684285,
      -0.008775893,
      0.01962653,
      0.003247423,
      -0.013070865,
      -0.018610185,
      0.007832894,
      -0.017481104,
      0.01063779,
      -0.005403943,
      -0.0059891785,
      -0.002330794,
      0.0024554362,
      -0.02443835,
      0.0015094789,
      -0.0043316395,
      0.009688637,
      0.013246552,
      -0.005212226,
      -0.009775175,
      0.02044148,
      0.01483642,
      0.004261457,
      -0.0136997355,
      -0.02338492,
      0.021462237,
      0.0004079798,
      -0.0032749877,
      -0.01103324,
      0.005855519,
      -0.0016633905,
      -0.007118892,
      0.012607174,
      0.00010347324,
      0.009295473,
      -0.021886572,
      -0.00022342475,
      0.0029337276,
      0.015892077,
      -0.12780851,
      -0.00024534247,
      -0.0063652913,
      -0.0110176,
      0.008157081,
      0.010078524,
      -0.005911246,
      -0.039842248,
      -0.019427432,
      -0.00035927896,
      0.01340321,
      0.0006321865,
      0.0055591953,
      0.0043835132,
      0.005717282,
      -0.019116288,
      0.0052529955,
      0.025172666,
      0.013939259,
      -0.00097436615,
      0.010232638,
      0.015113101,
      0.02063545,
      0.01671992,
      0.0025265722,
      0.019081144,
      0.015638603,
      -0.010160648,
      -0.0021605275,
      -0.001569852,
      -0.035834216,
      -0.0013055389,
      0.009183606,
      0.003072273,
      0.015471846,
      0.002980667,
      -0.026936382,
      -0.0064947563,
      0.009025059,
      0.019776994,
      0.010733247,
      -0.020566283,
      0.02633488,
      -0.013284019,
      0.0019305043,
      0.005054456,
      0.013894971,
      -0.013767299,
      0.0011434526,
      0.03569652,
      -0.04255536,
      -0.0005033387,
      0.0027587127,
      -0.0038022134,
      0.0007499766,
      0.0093868915,
      0.007100612,
      0.02175949,
      -0.009358324,
      -0.0016963149,
      0.007414298,
      0.018666973,
      -0.008957496,
      0.019886551,
      -0.019586219,
      -0.002295756,
      0.004491723,
      -0.010397939,
      -0.005310616,
      0.011945104,
      -0.014037527,
      0.0017325508,
      0.0016736339,
      0.02816087,
      0.021786937,
      0.007107091,
      -0.010720546,
      0.020321181,
      -0.009384922,
      0.006794146,
      -0.0077623553,
      0.01647455,
      -0.07745343,
      -0.022273988,
      -0.004456922,
      -0.020263858,
      -0.00041057297,
      0.014441301,
      0.0018378487,
      0.009071916,
      0.004520173,
      -0.0021161903,
      -0.028866522,
      -0.015954822,
      -0.004183138,
      -0.023942083,
      -0.016735118,
      0.0078327935,
      0.010373568,
      -0.028330475,
      -0.013556823,
      0.002217205,
      -0.00047284272,
      0.011413668,
      -0.0103555815,
      -0.018484183,
      0.008245374,
      0.019323692,
      -0.027827187,
      0.011302476,
      0.0013853862,
      0.0036117935,
      0.0058732005,
      -0.13828263,
      -0.015053983,
      -0.00030207177,
      0.021264309,
      0.012774711,
      0.0018593413,
      -0.009593095,
      -0.012706881,
      -0.008372315,
      -0.00833813,
      0.0025140466,
      -0.029687474,
      -0.011177676,
      -0.0152507555,
      -0.014988106,
      0.12797712,
      -0.0013912792,
      0.0013964026,
      0.003513868,
      -0.012254745,
      -0.021848157,
      0.006996329,
      -0.008105969,
      -0.01617974,
      -0.004380037,
      -0.01805761,
      0.018934503,
      -0.031368256,
      0.001993383,
      0.02896894,
      0.0007191869,
      -0.021281466,
      -0.010561246,
      0.016751233,
      0.010745596,
      -0.010066896,
      0.018598022,
      -0.0117100775,
      -0.012157491,
      -0.014383691,
      -0.020377347,
      0.024716118,
      -0.003603788,
      0.006693485,
      0.012451064,
      0.024371069,
      -0.013341734,
      0.0099621285,
      -0.018625276,
      -0.020628791,
      0.0054329503,
      -0.08275917,
      -0.020955455,
      -0.023371236,
      -0.0063946173,
      0.021912076,
      0.0020574415,
      0.031647466,
      -0.0002238775,
      -0.017572634,
      -0.0073028565,
      -0.004880908,
      -0.007558619,
      -0.002067011,
      -0.011367204,
      -0.008603915,
      0.014845602,
      0.013774197,
      0.027533146,
      -0.017436981,
      -0.0040681157,
      0.026380114,
      -0.0011756809,
      0.011671558,
      -0.019486398,
      0.006433387,
      -0.0016927838,
      -0.007877522,
      0.005960396,
      -0.01626908,
      -0.011613275,
      0.005602524,
      -0.020286093,
      -0.00083758816,
      0.018130617,
      -0.017345957,
      -0.025673358,
      0.007970531,
      0.003974204,
      -0.0017076774,
      0.011140893,
      0.008744196,
      -0.01267763,
      0.02069749,
      -0.0032091956,
      0.024357699,
      0.0061465637,
      -0.0056377286,
      0.03419457,
      0.0068252417,
      -0.0039030248,
      -0.034305863,
      -0.0041514025,
      -0.026463237,
      0.031511422,
      -0.0011843838,
      0.021448849,
      0.015578432,
      0.006302177,
      -0.009459395
    ]
  },
  {
    "id": "genai_cohort_nodejs_06_Stateless_Auth_with_JSON_Web_Tokens_vtt",
    "content": "All right, so in this particular 2 video, let's see how we can 3 solve this session problem using 4 something known as JSON web tokens. 5 So that number one, I don't have to 6 make an API call or a query call 7 to the database and I don't 8 overwhelm the database with every 9 request and how I can increase my 10 speed. 11 So let's search for something 12 known as JSON web token. 13 Okay, so what is this? 14 JSON web tokens. 15 So this is the jwt, also 16 known as JSON web tokens. 17 The idea behind JSON web tokens is 18 what if I could create a random 19 string, let's say something like, 20 you know, a random string and actual 21 information about the user, such as 22 name, such as all the details about 23 the user can be encrypted inside the 24 token. 25 I mean the token itself contains 26 the information. 27 So that is the idea behind the jwt. 28 So you can see that if this is 29 a token, this token actually 30 contains this information. 31 Sub name id. 32 For example, I can even add, 33 let's say email, right? 34 I can add email as P. 35 So you can see that this particular 36 token contains this particular data. 37 So that means instead of returning 38 a session id, I can return a, 39 token, an encoded token 40 which contains the all 41 the information inside the token. 42 So that is the basic 43 idea behind the token. 44 So I don't have to make an API call 45 to the database to get the data. 46 Okay, now these tokens are 47 actually signed tokens. 48 That means our server can 49 basically create a token. 50 Everyone can read what is 51 the data inside the token, 52 but no one can change it. 53 Because to change the token 54 you need a secret. 55 Because if anyone can change this 56 token, that's a very risky thing. 57 You generate a token for me, 58 I can update my user ID to point 59 to your user ID and I can 60 do something on your behalf. 61 So these tokens are absolutely safe. 62 Anyone can read these tokens, 63 but no one can tamper or change 64 these tokens until and unless 65 you have the secret key. 66 So as a developer you should always 67 keep the secret key very secure. 68 So what we are going to do is 69 we are going to create 70 a JWTSecret, which is something 71 like, you know, Superman. 72 So ideally it should be very long 73 and something not guessable. 74 Now what we have to do is we have 75 to say pnpm install JSON web token. 76 Okay, so this is the whole 77 name JSON web token. 78 Nice. 79 Now see what we can do is let's try 80 to refactor this 81 particular code to use tokens. 82 Okay? 83 Number one thing, how do you login 84 now that's the thing that when 85 you log in, technically you don't 86 want to create a session, right? 87 We are not going to create 88 a session, so a session 89 creation is not required. 90 Rather, what we should do is 91 we should basically create 92 a token for the user. 93 How to create a token? 94 First let's create a payload 95 that what all information I 96 want to store in the token. 97 So I am going to store an ID 98 that is existing user.id 99 and I want to store email. 100 Let's say existing user.email and I 101 want to store the name of the user 102 that is existing user email. 103 Now to create a token token, 104 I can just say import. 105 Okay, import JWT 106 from JSON web tokens. 107 So this is what we have imported. 108 And then you can just say jwt.sign. 109 okay, you are signing a token 110 for this particular payload and then 111 you have to give the secret key that 112 is process.en sorry process.env. 113 what is the secret? 114 Inside this is the secret JWT secret. 115 This creates a token for you. 116 Jwt.sign this thing. 117 And this token can now be 118 returned to the user back. 119 So now let me show you what 120 this token looks like. 121 Okay, so what we are keeping 122 in the token is id, email and name. 123 Let's go back to the postman. 124 So let me just spin up my postman. 125 Okay, so here is the postman. 126 And let's try to do a login. 127 And send. 128 Okay, I forgot to run the server, 129 so PNPM dev and enter. 130 Now let's see what is happening. 131 And send. 132 So all right, so we got an error. 133 Let's see what is the error here. 134 The. 135 Okay, so my bad, actually 136 the docker compose is not running. 137 So docker compose up hyphen D. 138 It says. 139 Okay, so actually, you know, 140 I just restarted my machine 141 and the docker is not running. 142 So that was the problem. 143 So let me just, 144 let's wait for a while. 145 Yeah, now I think everything is 146 up and running. 147 Now let's just do a PNPM dev. 148 Cool. 149 And send. 150 So can you see that? 151 This random string, this is a token. 152 Now if you have noticed, we are not 153 storing this token in the database. 154 There is absolutely no need to store 155 these tokens in the database because 156 if I paste my token here, See, 157 See, this is what we are getting. 158 By the way, name is wrong. 159 My bad. 160 Because this must be named. 161 Yeah, so you can see 162 that this is the token. 163 Now you might be thinking that, hey, 164 someone can come and change this 165 token, but actually no, because if 166 you change the token the signature 167 of the token also changes. 168 And to change that particular 169 token, you actually 170 need this particular key. 171 So of course the user will 172 never have this particular key. 173 So they cannot really 174 change the token. 175 Now what we have to do is, 176 okay, the login part is done. 177 Now, in order to see if the current 178 user is logged in or not. 179 Now there is a thing. 180 We don't really need this 181 whole thing, right? 182 What we need is we need to read 183 the token from the headers. 184 And as a part of standardization, 185 there is always 186 an authorization header, okay? 187 So as a best practice, there must be 188 a header that named as authorization 189 whose value must be bearer. 190 And the token goes here. 191 So this is the standard practice 192 that everyone follows. 193 So this is basically your token 194 header whose value should be bearer 195 space and the actual token, okay? 196 So that means first of all, 197 if there is no token, if there 198 is no token header, that 199 means user is not logged in. 200 Okay? 201 Then you have to check that if 202 okay, not token header 203 dot starts with okay, it 204 should start with the bearer. 205 Okay, because that's the standard. 206 Then you can just say return 207 response.status as a400.JSON 208 saying error and you can just say 209 authorization header 210 must start with bearer. 211 Right? 212 Nice. 213 Bearer. 214 Okay, if it starts with bearer, 215 what you can basically do is you 216 can basically extract the token. 217 What I could do is if I somehow 218 split this particular thing 219 using the bearer word, right? 220 Or if I split it using 221 the space, okay? 222 So I can just say token header. 223 Split it using the space and take 224 the first index that is this token. 225 So you got the token. 226 Now what you should basically 227 do is you should validate, 228 you should decode the token. 229 So I can just say decoded. 230 Okay, how to decode the token is 231 basically import jwt from JSON web 232 token and now you can just say jwt. 233 Verify you have to pass the token. 234 And also the same secret that you 235 have used, that is process env. 236 What was our key JWT secret. 237 Now see, if user has changed 238 something in the token, this 239 particular step is going to fail. 240 But if user has not changed something 241 in the token, the decoder will 242 be the actual user object, whatever 243 you have stored in the token. 244 Now technically I can just 245 remove all this thing, right? 246 Everything can be removed and this 247 can be equals to the decoder. 248 That's it. 249 Absolutely no database call. 250 You get the token header, which 251 basically looks something like this. 252 No token that means 253 user is not logged in. 254 If it doesn't start with bearer, 255 you return a bad request error, 256 you get the token from the header, 257 you Decode it, you verify it, set 258 the request header, and that is it. 259 So that means now if I try 260 to get myself, you can see it 261 says you are not logged in. 262 Why? 263 Because this particular 264 token has to be sent in such 265 a way that is not this. 266 Like this authorization 267 must be bearer token and send. 268 See, I am logged in. 269 Also, can you see this 270 authorization tab here? 271 You can just say bearer token 272 and you can actually paste 273 your token here and send. 274 So this is actually more nice way 275 because Postman gives you the out 276 of the box support for it. 277 So there is absolutely no need 278 to set this particular header, 279 okay, because you already have 280 it bearer token as a token. 281 So this automatically sends a header. 282 Okay, so if you see the hidden, 283 you can see automatically 284 an authorization 285 bearer token is being sent. 286 Nice. 287 Okay, so this is how you basically 288 do a token based authentication. 289 Now see, when you are generating 290 tokens, you can even give more 291 parameters like expires in. 292 So you can just say expires in. 293 Let's say one minute. 294 Now this particular token is 295 only valid for one minute. 296 That means after one minute, this 297 token will no longer be valid. 298 Okay, what happens if 299 I change this token? 300 Let's say if this 301 was my token, right? 302 Let me just copy the token, 303 paste in the debugger. 304 Because see, publicly 305 anyone can read it. 306 I change it. 307 See, I'm changing something. 308 Now if I copy this token, which I 309 changed on the front end, of course, 310 without the key, and I paste it. 311 See? 312 Server crashed. 313 What? 314 What is the error? 315 If you read the error, it 316 basically says that it is not 317 able to verify the token. 318 See, JSON web token error 319 invalid signature. 320 So that means if someone tries 321 to tamper around with 322 the token, tries to change 323 the token, the validation fails. 324 So ideally what you could basically 325 do is in your middleware, okay? 326 In your middleware, 327 you can wrap this particular whole 328 thing with a try catch. 329 And if you are somehow in the catch, 330 okay, you can basically 331 just call the next function. 332 That means you are not logged in. 333 So now if this is a tamper 334 token, you are not logged in. 335 So that means you have to use 336 the Tampa token, which is generated 337 by the server using that secret 338 key and then paste in here. 339 See, you change something 340 in the token and your 341 signature is invalid. 342 See, I changed it. 343 Copy it. 344 Okay, now if I use this particular 345 token, you are not logged in. 346 Nice. 347 Right? 348 I'm not making an API call. 349 I'm not making a database call. 350 Why? 351 Because the actual data 352 sits inside the token. 353 That is the beauty 354 of JSON web tokens. 355 Okay, so this is how we are doing it. 356 And by the way, the name is 357 not coming here because we are 358 not querying the name here. 359 So ideally I should 360 also query the name. 361 Okay, so that's okay, you can just 362 update this particular stuff. 363 But so tokens. 364 The basic idea behind tokens is 365 that the actual information 366 is actually stored inside 367 the token itself so that you don't 368 make a database call always. 369 And because the actual data lives 370 inside the token, the latency is 371 very less because you just have 372 to verify the token, you are not 373 making an extra database call. 374 So database is not overwhelmed 375 with every call. 376 But there is a problem. 377 Once you create a token 378 and you give it to the user. 379 Now technically you don't have 380 any control on the token, right? 381 He is logged in. 382 You get it now because see, when 383 you were doing session based 384 authentication, if you want to log 385 out a user, you can just delete 386 his session from the database. 387 But now once you give a token to 388 a user, there is no way going back. 389 You get it now the token is with him. 390 How will you invalidate this token? 391 So ideally the best practice is that 392 you should not create long tokens. 393 You can just create a token 394 which is for one minute. 395 And if it is expired, you can 396 just regenerate a token for him. 397 You can just regenerate a token 398 for him for one, one minute. 399 And if you don't want, if you want 400 the user to be logged out, just stop 401 regenerating the tokens for him. 402 See what happens is the worst 403 case is that he will be still 404 logged in for one minute. 405 That's the thing. 406 And you might be thinking, 407 I can store this particular 408 token in the database. 409 You should never store 410 the tokens in the database. 411 But yes, you can maintain a database 412 of, you know, blacklisted 413 tokens, okay, where you can 414 store the token of the, you know, 415 which you want to invalidate. 416 But the problem is again you will end 417 up in the same problem. 418 That is you are making a lot 419 of database calls. 420 So the decision is yours, that 421 if you are making an application 422 where authentication is very 423 sensitive, like banking, 424 there you should always implement 425 a session based authentication. 426 But if you are just building a 427 SaaS where it's okay to log in a 428 user for a couple of seconds 429 right there, the token based 430 authentication is used because 431 it leads to less overhead on the 432 database. 433 Okay? 434 So it's a balance 435 between both of them. 436 So you should always create tokens 437 with less expiry time. 438 So expires in one minute. 439 And as soon as the token expires you 440 can regenerate the token for him. 441 So this is basically how the token 442 based authentication works. 443 So congratulations. 444 Now you know both of 445 the authentication methods, that is 446 Session based authentication 447 and GWT based authentication. 448 This is stateless. 449 This is what? 450 Stateless. 451 Why is this known as, stateless? 452 Because. 453 Because the data is stored 454 inside the token and session 455 based is basically stateful 456 because the actual data lives 457 on the server or on the db, 458 so that is the whole thing.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "06 Stateless Auth with JSON Web Tokens.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/06 Stateless Auth with JSON Web Tokens.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.012946738,
      0.010831724,
      0.003012704,
      -0.06894864,
      -0.010310824,
      0.0029750948,
      0.018399201,
      0.016240802,
      0.006256039,
      -0.0064088907,
      0.0013420129,
      -0.0026995754,
      0.0067062364,
      0.016350228,
      0.13702768,
      0.014473573,
      -0.0091476785,
      -0.0011068264,
      0.0015953281,
      -0.027799085,
      -0.0020884648,
      -0.0069404133,
      0.011598194,
      -0.01701166,
      0.0047765262,
      -0.005903233,
      0.01369437,
      -0.0044410652,
      0.03652573,
      -0.0057777716,
      0.0015755116,
      0.0004477009,
      0.008982516,
      0.023636403,
      -0.0037763496,
      0.037354004,
      0.04398012,
      0.014746398,
      -0.0405973,
      -0.004768912,
      -0.023400098,
      0.00915679,
      0.011688747,
      -0.015022773,
      0.004745291,
      -0.0039297426,
      -0.010703909,
      -0.013824484,
      -0.00036320172,
      0.023919746,
      0.0073004593,
      -0.007318937,
      -0.036636688,
      -0.18115333,
      0.005389213,
      -0.013551883,
      -0.0004458108,
      -0.006375346,
      0.0077673155,
      0.00065143296,
      -0.025198534,
      0.009031446,
      -0.0443259,
      0.013864602,
      0.0018239901,
      0.0137503,
      0.029607547,
      -0.00031014832,
      -0.008899919,
      -0.0063687945,
      0.008714353,
      0.018515188,
      -0.005178373,
      -0.009838769,
      0.004036725,
      -0.04128982,
      0.005732441,
      -0.020365324,
      0.0016724218,
      0.023437817,
      -0.0096753435,
      -0.013392281,
      -0.0054415693,
      0.015735641,
      0.0061516413,
      -0.0011295055,
      -0.009480847,
      -0.0076463055,
      0.0032718987,
      0.0064691966,
      -0.007469028,
      -0.0044764597,
      0.005441671,
      0.015146852,
      -0.0013340096,
      -0.0093450155,
      -0.015746843,
      0.024310479,
      0.0027342758,
      0.008066374,
      0.0022513084,
      0.018692218,
      -0.03142295,
      0.02331906,
      -0.005472468,
      0.008194029,
      -0.0049817734,
      -0.0044889366,
      0.019076303,
      -0.018313,
      -0.0004170919,
      -0.0041158604,
      0.023263035,
      0.01138843,
      0.022071954,
      -0.17759293,
      0.027453108,
      -0.010759683,
      0.014527317,
      0.016687676,
      -0.0155741265,
      0.013292154,
      0.019741919,
      -0.0027958327,
      -0.033815287,
      0.014885107,
      -0.006954045,
      0.005683735,
      0.0204373,
      0.00858448,
      -0.023879744,
      0.0039053287,
      0.003926588,
      0.004643538,
      0.0070556477,
      0.03316466,
      0.015572828,
      -0.017431956,
      -0.0008221051,
      -0.03400606,
      0.008853177,
      0.025544936,
      -0.026533276,
      0.02685664,
      0.020371756,
      -0.0075000534,
      -0.013484714,
      0.022307932,
      0.014658868,
      -0.032102555,
      0.03625373,
      -0.0057625035,
      0.018170536,
      0.015099621,
      0.020656954,
      -0.053353757,
      0.0096196495,
      0.008772469,
      -0.008203148,
      0.015361898,
      0.009061551,
      0.0036888071,
      0.008982849,
      0.026242657,
      -0.0069858884,
      -0.011985454,
      0.0070840563,
      0.00086298044,
      0.010246366,
      -0.0077150376,
      -0.034812257,
      0.000553931,
      0.0022486772,
      0.00054261216,
      -0.010715015,
      0.0017261414,
      -0.012258612,
      -0.011064168,
      0.0067290934,
      -0.010719258,
      -0.01753693,
      -0.011307538,
      0.015427473,
      -0.007682809,
      0.025137326,
      0.0024419215,
      -0.022298787,
      -0.0052469615,
      0.019045493,
      -0.0071440623,
      0.0027183562,
      -0.00808325,
      0.01604516,
      -0.007466492,
      0.00200367,
      0.012343787,
      -0.001961645,
      -0.016253257,
      0.019949067,
      0.019561887,
      -0.0032345676,
      -0.0044668517,
      0.012561725,
      0.0019427125,
      -0.006026936,
      -0.002222616,
      0.019847305,
      -0.027660495,
      0.012537675,
      0.040096186,
      0.016310146,
      -0.000013882256,
      0.014816333,
      -0.012655826,
      0.0056690522,
      -0.012154773,
      0.014188553,
      -0.004058361,
      -0.00062041485,
      -0.016157832,
      0.0011433935,
      -0.017609272,
      0.000011645835,
      0.013283123,
      0.01289745,
      0.009340715,
      0.015165147,
      -0.019290905,
      -0.0012967893,
      -0.01957176,
      0.026087636,
      0.0074611614,
      -0.0127698695,
      -0.005823565,
      -0.004098586,
      -0.012537107,
      -0.001588274,
      0.012692377,
      0.012285699,
      0.010513425,
      0.014948082,
      -0.0065982505,
      0.015536525,
      0.009688941,
      0.025111716,
      -0.0093387505,
      0.00026398504,
      -0.0077933464,
      -0.0014333205,
      -0.009437799,
      -0.00940766,
      -0.01755936,
      0.0060873893,
      -0.012891345,
      0.014386788,
      -0.018200088,
      -0.0510174,
      -0.01239888,
      -0.0037931497,
      0.005204708,
      -0.014232445,
      -0.027041536,
      -0.013049935,
      -0.005984691,
      0.004782254,
      -0.01643487,
      -0.0004172141,
      0.025412086,
      -0.01768957,
      -0.009060867,
      0.03292839,
      0.00047173238,
      0.0036942775,
      0.0005169003,
      -0.012171371,
      -0.009462172,
      -0.06649663,
      -0.002913479,
      0.0067104013,
      -0.014701641,
      -0.025676873,
      0.015854318,
      0.0054609627,
      0.008778299,
      0.01038388,
      0.002376202,
      -0.00067171495,
      -0.011007649,
      0.012721335,
      -0.0034945242,
      -0.010119239,
      0.03547427,
      -0.004362836,
      -0.0070852386,
      0.0049505094,
      -0.022763886,
      0.0066484,
      -0.016505625,
      -0.012121047,
      -0.0016628238,
      -0.005070592,
      0.011774727,
      -0.021970121,
      0.021986557,
      0.02605797,
      -0.000079263766,
      0.010022112,
      0.031291347,
      -0.010939379,
      -0.011046261,
      -0.018757084,
      0.005851321,
      0.017449759,
      0.000006263428,
      0.0076304744,
      -0.011044301,
      -0.0024980607,
      -0.014907986,
      -0.0005972614,
      0.011458456,
      -0.007822486,
      0.008618678,
      0.006672509,
      -0.010473741,
      -0.0012063241,
      0.008454576,
      -0.02938874,
      0.0082739275,
      0.018642463,
      -0.019685015,
      -0.010226792,
      -0.013904081,
      -0.0012116593,
      0.009869835,
      0.015786612,
      0.005473369,
      0.013313227,
      0.0029661567,
      -0.0032079946,
      -0.000683139,
      0.032653615,
      -0.008504283,
      0.011517385,
      0.0050129225,
      -0.023902277,
      -0.0070766965,
      0.023823434,
      -0.009910044,
      -0.014803046,
      -0.038734924,
      0.021691196,
      0.014246241,
      0.009892811,
      0.0089665335,
      -0.024789488,
      0.019617274,
      0.008011397,
      0.0011410972,
      0.014071832,
      0.022694586,
      0.013827727,
      -0.005391276,
      -0.004095213,
      0.017183144,
      -0.01852511,
      -0.009011993,
      0.023339681,
      0.030368363,
      0.0037241972,
      -0.008547533,
      -0.005249703,
      0.009394986,
      -0.012302816,
      -0.014632759,
      -0.019587852,
      0.0032864027,
      -0.039657682,
      0.010244855,
      -0.019233258,
      -0.014608207,
      0.0017972055,
      0.024938727,
      -0.01371533,
      -0.029656764,
      -0.0027505523,
      0.0005143294,
      0.005444252,
      0.018909385,
      -0.015691921,
      -0.0023310995,
      -0.045362093,
      0.014586357,
      0.0076300814,
      -0.0006073523,
      -0.021882175,
      0.021423625,
      0.0015345581,
      -0.009022446,
      0.0014306154,
      0.01665783,
      -0.012337518,
      -0.0034644157,
      -0.027421707,
      0.008296721,
      -0.01041098,
      -0.01616704,
      -0.00093471736,
      0.0018908542,
      -0.024815992,
      -0.0043887394,
      -0.004828013,
      -0.018657116,
      0.011978424,
      -0.02581614,
      0.014575968,
      0.02700259,
      -0.020242319,
      0.0075420374,
      0.010900533,
      -0.0032225873,
      -0.0010193979,
      0.008993968,
      -0.022915429,
      0.00012545026,
      0.0062585357,
      0.0070830197,
      0.005990103,
      -0.0040249634,
      -0.020856876,
      0.014718048,
      0.0040664934,
      0.017672645,
      -0.000093366914,
      0.0059429253,
      0.0023377694,
      -0.00665362,
      -0.0134791825,
      0.0011534133,
      -0.008958756,
      -0.013209592,
      0.0044479896,
      0.01580847,
      -0.019843021,
      0.0020334811,
      0.007634225,
      -0.0008516313,
      0.0054525225,
      -0.021457065,
      -0.04268229,
      -0.000018323999,
      0.032718033,
      -0.0016628071,
      0.012431247,
      0.0017170361,
      0.029051311,
      -0.00075482955,
      0.012698959,
      0.00049962406,
      -0.02163264,
      -0.0051679416,
      -0.0034744418,
      0.013258933,
      0.026361397,
      0.0003556517,
      -0.03110469,
      -0.0073449723,
      0.0043256106,
      -0.018136596,
      -0.027792018,
      0.019525368,
      0.0035292103,
      0.039010514,
      -0.0014762655,
      0.019238347,
      0.0073630237,
      -0.012404568,
      -0.018684912,
      0.0058818324,
      0.016568637,
      0.004491217,
      0.010805539,
      -0.014266943,
      -0.031219468,
      -0.012597435,
      0.005735457,
      0.031511527,
      0.009517132,
      0.0045225783,
      0.0061406977,
      -0.0015622593,
      0.02931134,
      0.030473793,
      -0.0054136054,
      -0.013180399,
      -0.02826382,
      -0.0021869934,
      0.02764056,
      -0.014913492,
      -0.0026448767,
      0.00299375,
      -0.0042164424,
      0.012633075,
      -0.026454855,
      0.0033330745,
      0.012192086,
      -0.021029843,
      -0.007188493,
      0.0007018871,
      0.017625209,
      -0.00957957,
      -0.00765805,
      -0.02004096,
      0.009569589,
      0.0019178606,
      0.015445239,
      -0.0036870325,
      -0.012031184,
      -0.016943883,
      -0.0049501904,
      -0.024257334,
      0.0057739536,
      -0.006752227,
      0.016559532,
      0.0150422165,
      -0.019725807,
      -0.02268465,
      0.015169832,
      -0.0037921572,
      -0.0009693494,
      -0.018437976,
      -0.00836361,
      0.024707409,
      -0.00045931968,
      -0.010454783,
      -0.00830333,
      0.00415697,
      -0.004438629,
      -0.00460566,
      0.013962969,
      -0.0022495459,
      0.010849125,
      -0.012323155,
      -0.0027430796,
      0.006635071,
      0.028737873,
      -0.11235354,
      0.0051577976,
      -0.02298766,
      0.009000921,
      0.00690569,
      0.0009328405,
      0.004353638,
      -0.03469236,
      -0.028877595,
      0.00745638,
      0.011826145,
      -0.01015577,
      0.013113345,
      0.006987493,
      -0.0026357297,
      -0.01664796,
      0.015359282,
      0.017701855,
      0.01523736,
      -0.0028356423,
      0.01940084,
      0.007340495,
      0.008326256,
      0.018015105,
      0.0061231568,
      0.02162443,
      0.01220263,
      -0.006693376,
      0.014297534,
      0.007539585,
      -0.028609056,
      0.0054051224,
      -0.0046399017,
      0.0011736136,
      0.0051651485,
      -0.0028660968,
      -0.012670334,
      -0.00787837,
      0.0061400887,
      0.02554635,
      0.014703795,
      -0.009085745,
      0.00007189671,
      0.0024884867,
      0.0023401857,
      0.004921304,
      0.0062502273,
      -0.0093179885,
      -0.0025608707,
      0.025772715,
      -0.041285723,
      -0.00060647295,
      -0.014485493,
      -0.017524898,
      -0.0015600208,
      0.0019056482,
      0.006349888,
      0.0023656152,
      -0.012673494,
      -0.00023893751,
      0.00932647,
      0.011413558,
      0.0033204292,
      0.030229524,
      -0.008029407,
      0.007202727,
      0.010327998,
      0.0044036577,
      0.0018971111,
      0.000826947,
      0.0016623852,
      0.0020951782,
      -0.009586956,
      0.028573694,
      0.013982196,
      -0.0045032557,
      -0.012167973,
      0.012895972,
      -0.012442259,
      0.013125649,
      -0.022477873,
      0.012534824,
      -0.07453994,
      -0.024554523,
      0.002287278,
      -0.020759104,
      0.008382563,
      0.016019257,
      0.008807243,
      0.008821998,
      0.013876452,
      0.0012716674,
      -0.01767486,
      -0.0230372,
      -0.017222783,
      -0.026786143,
      -0.01815735,
      0.014107105,
      0.0011439227,
      -0.04057974,
      -0.029580882,
      0.0037665016,
      0.020596307,
      0.019861693,
      -0.0026826367,
      -0.008625797,
      0.006309486,
      0.008824096,
      -0.018183736,
      0.0051528197,
      -0.0063314536,
      0.008098312,
      0.002741806,
      -0.1374383,
      -0.025952527,
      -0.002907149,
      0.009894415,
      0.0065583047,
      -0.0031655796,
      0.015299758,
      -0.020958964,
      0.0005952829,
      0.0039649075,
      0.00441729,
      -0.011427022,
      -0.0059520714,
      -0.000032864464,
      -0.013659191,
      0.14292565,
      -0.0041105966,
      -0.0051581,
      0.00305098,
      -0.006308008,
      -0.011878309,
      -0.006355465,
      0.0009504456,
      0.00040505533,
      -0.00028169068,
      -0.016174616,
      0.026540186,
      -0.03716669,
      0.015493099,
      0.0048709353,
      -0.012193451,
      -0.020637428,
      0.0050530178,
      0.0005702277,
      0.016859729,
      -0.009835071,
      0.0100392485,
      -0.022365604,
      0.009280881,
      -0.002411414,
      -0.02174155,
      0.00879366,
      -0.00065083674,
      0.0003393757,
      0.003474921,
      0.016373614,
      -0.012656206,
      -0.001444715,
      -0.01014369,
      -0.01338813,
      0.018434204,
      -0.07486945,
      -0.02379205,
      -0.01799846,
      -0.0004313249,
      0.025283609,
      -0.0025906642,
      0.019393874,
      -0.0123443445,
      -0.0033507636,
      -0.007894533,
      -0.012449568,
      0.011547884,
      -0.020354858,
      0.0029427442,
      -0.0043933834,
      0.0026172148,
      0.01740866,
      0.033737168,
      -0.024788475,
      -0.012485932,
      0.021236842,
      -0.011210812,
      0.0049217986,
      -0.026990611,
      0.0033978142,
      -0.010805884,
      0.013029432,
      0.008150056,
      -0.0010841903,
      -0.011064009,
      0.008387379,
      -0.022238279,
      0.0048901816,
      0.0045024315,
      -0.03346912,
      -0.021948056,
      0.01111107,
      -0.0071900846,
      -0.013251642,
      0.016769782,
      0.008198167,
      -0.007184798,
      0.034733836,
      -0.01944442,
      0.014029483,
      0.012558445,
      -0.017275177,
      0.034637652,
      -0.0016154515,
      0.0054049916,
      -0.019319111,
      0.00933109,
      -0.0285595,
      0.02833548,
      0.0032869475,
      0.027092177,
      0.03861577,
      0.009993081,
      -0.0068578394
    ]
  },
  {
    "id": "genai_cohort_nodejs_07_Introduction_to_Authorization_vtt",
    "content": "Okay, so welcome to one 2 another exciting video 3 in the authentication section. 4 And in this particular video 5 we are going to cover the concept 6 of authorization. 7 So now at this particular point we 8 already know what is authentication. 9 Authentication means 10 that the server knows who are you. 11 That means you are authenticated. 12 And there are two ways 13 of authentication. 14 Number one, there's a session 15 based authentication where you 16 give a session ID or a temporary 17 ID to a user, where the data 18 about that ID is stored on the 19 server, maybe in a database, 20 maybe in your memory. 21 And that is where you let 22 the user authenticate it. 23 And on the other hand you had 24 a stateless version of 25 the authentication that was JSON web 26 tokens where you actually store 27 the information about the user 28 inside the token itself. 29 So that was authentication 30 that whether you are 31 authenticated or not. 32 Does server recognize you? 33 Do server know who are you? 34 That is authentication. 35 Now let's jump onto the concept 36 of authorization. 37 Authorization is basically the next 38 step of the authentication. 39 In order to be authorized 40 to do something, you have to be 41 first of all authenticated. 42 There is no authorization 43 possible without authentication. 44 So first step is something 45 that we have already done. 46 Authorization means if 47 you have access 48 to a particular resource or not. 49 So let's imagine that this is 50 a user, that is U1, okay? 51 And this is a user, 52 let's say U2, okay? 53 Now in on your server, okay, 54 on your server, let's say 55 you have multiple routes, right? 56 You have a lot of data 57 on the back end. 58 Now let's say you want makes 59 a request to get some piece of data. 60 Okay? 61 So let's say that this is basically 62 a data about all the payments. 63 So let's say you were building some 64 financial application and this is 65 the data about all the payments. 66 Okay? 67 So all the payment data lives here. 68 Now technically, if you imagine 69 this thing, payments data 70 is a critical data, right? 71 You don't want to share this 72 particular thing publicly or 73 something, something like that. 74 So now you have to build 75 a mechanism that if you want, 76 hey user one, are you really 77 allowed to access this data? 78 If so, you have to return 79 this data to the user. 80 But if not, see if he does not have 81 that particular access, you can just 82 return return an unauthorized error. 83 So number one thing is that 84 number one, see this U1 user has 85 to be authenticated. 86 That means server 87 knows who the U1 is. 88 Then the next step comes 89 that do you have the permission 90 to access this particular resource? 91 If so, you can return this data. 92 If not, just return 93 an error response. 94 So how can you achieve 95 this particular thing? 96 It's very simple. 97 I mean there are a lot of techniques 98 to implement authorization, 99 but let's cover 100 the simplest one, that is 101 just attach a, role to this user. 102 So let's say if U1 103 has a role, which is admin, right? 104 Very simple. 105 And you too has a role that 106 is, let's say, simple user. 107 Now if the role is admin, 108 you return this particular data, 109 but if the role is not admin, you 110 are not going to return this data. 111 And what is this role? 112 At the end of the day, this 113 role is nothing but just 114 a value in the database. 115 So in the users table, I 116 can extend that table 117 to have one more entry, I.e. 118 role, where default value can 119 be user, and we can promote 120 special users to be admin. 121 And then we can even store 122 this particular thing 123 in the user's token, right? 124 You have JWT tokens, 125 which are signed tokens. 126 No one can change it. 127 So in the JWT token I can just write 128 role admin, and then I can check 129 that if you are an admin, 130 only and only then you are allowed 131 to access this particular resource. 132 So basically this is how 133 the authorization happens. 134 So this is the basic concept 135 behind the authorization. 136 So what I would like you to do is 137 pause the video right here. 138 Implement. 139 Try to implement this particular 140 thing on your own before 141 jumping onto the next video. 142 Because in the next video I will 143 be coding this particular thing. 144 I'll be refactoring the whole 145 code, but I would like you 146 to give it a try first. 147 So let's meet you 148 in the next particular video.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "07 Introduction to Authorization.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/07 Introduction to Authorization.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.020672062,
      0.010932643,
      0.019925062,
      -0.04895762,
      -0.007883616,
      -0.00023684367,
      0.015269876,
      0.023576561,
      0.004387874,
      -0.00073759403,
      0.00079093606,
      0.010025332,
      0.0004986122,
      0.005142078,
      0.12338602,
      0.0017551865,
      -0.011449735,
      -0.021993104,
      0.0079139555,
      -0.013190728,
      0.0063323807,
      -0.0045234873,
      0.0064051882,
      -0.014220678,
      0.0023521564,
      -0.0014897687,
      0.0038688376,
      0.00024841508,
      0.030830884,
      -0.013925179,
      -0.014038613,
      -0.0008560241,
      0.010100115,
      0.034898255,
      -0.0010302296,
      0.030181143,
      0.02464241,
      0.016856294,
      -0.034195986,
      -0.0028642938,
      -0.0077819643,
      0.007553012,
      0.002509305,
      -0.015914591,
      0.0046265866,
      -0.0053540734,
      0.0010489363,
      -0.015485541,
      0.0069469423,
      -0.002991508,
      -0.0014967404,
      0.0042446237,
      -0.023304975,
      -0.18891883,
      0.008280598,
      0.0020938695,
      -0.00017319623,
      -0.004716639,
      0.0048555755,
      0.0116913365,
      -0.022964237,
      0.01611256,
      -0.018149966,
      0.024088835,
      -0.0033112392,
      0.011897329,
      0.032616988,
      0.004173617,
      -0.00088143186,
      -0.014744573,
      0.015096665,
      0.007814578,
      -0.006606561,
      -0.007846213,
      -0.012822173,
      -0.01424425,
      0.004469976,
      -0.025550215,
      -0.010757665,
      0.014286521,
      -0.01824961,
      -0.01490205,
      -0.023106048,
      -0.02275555,
      -0.0010315536,
      -0.00217084,
      -0.0005219764,
      -0.011795972,
      -0.00440801,
      -0.001408569,
      0.00022523325,
      -0.007888805,
      0.012341119,
      0.01713778,
      -0.0052840277,
      0.012230181,
      -0.028309336,
      0.008094593,
      -0.013480094,
      0.01029101,
      -0.0071075927,
      0.028239718,
      -0.03619521,
      0.0074365605,
      -0.005043459,
      0.017076178,
      0.0132814525,
      -0.0057965196,
      0.013337009,
      -0.013599021,
      0.016870419,
      0.0064396886,
      -0.009372436,
      0.016440928,
      0.00587382,
      -0.1742612,
      0.0336455,
      -0.0006540344,
      0.020856634,
      0.0129997255,
      -0.027123937,
      0.015745478,
      0.029922219,
      -0.0074135624,
      -0.023534982,
      0.0023184277,
      -0.003342861,
      0.005103531,
      0.022382148,
      0.018151993,
      -0.02199151,
      0.011967946,
      0.02041868,
      0.025321474,
      0.013140021,
      0.01610872,
      -0.0009977241,
      -0.018747555,
      0.0018244908,
      -0.026514968,
      0.0050492524,
      0.033796273,
      -0.016985668,
      0.03302546,
      0.0061567957,
      0.00039350474,
      -0.013703431,
      0.008560881,
      -0.00082896504,
      -0.04167386,
      0.04820218,
      -0.021013554,
      0.00010275724,
      0.024070298,
      0.019328838,
      -0.035364926,
      0.008408524,
      0.013540556,
      -0.010264903,
      0.006170746,
      0.0066547226,
      0.00050251576,
      -0.0068014036,
      0.010561778,
      0.0056696706,
      -0.011088648,
      0.021885686,
      0.0062995143,
      -0.0025580365,
      -0.019991865,
      -0.025658216,
      0.0028382707,
      -0.014140926,
      0.023931772,
      -0.006587929,
      0.010238795,
      -0.011567867,
      -0.008684151,
      0.014609506,
      -0.010188304,
      -0.017523618,
      -0.023072008,
      0.020069992,
      -0.020135256,
      0.025012717,
      -0.008078827,
      -0.020831242,
      0.0037167766,
      0.021851636,
      0.0046063615,
      -0.00009969679,
      0.00028576792,
      -0.0047533186,
      0.027505973,
      0.0061461064,
      -0.013038874,
      -0.0076005114,
      -0.022553915,
      -0.0067147897,
      0.027545802,
      -0.0021590872,
      -0.0008981345,
      -0.0035562427,
      -0.031608265,
      0.0072208615,
      -0.0027566724,
      0.018162766,
      -0.035919916,
      0.0058621527,
      0.036854066,
      0.014235224,
      -0.019666763,
      0.0060454668,
      -0.014001691,
      -0.0030344536,
      -0.0034796705,
      0.011679144,
      0.0062157256,
      -0.008329068,
      -0.023633484,
      -0.006575027,
      0.0016845163,
      -0.006211389,
      0.007885856,
      0.021339392,
      0.004372282,
      0.019019656,
      -0.01048568,
      0.014122624,
      -0.016819427,
      0.012599056,
      0.0042205183,
      -0.015597141,
      -0.016893748,
      0.0066874498,
      -0.007834433,
      -0.0019299412,
      0.018409185,
      0.008849334,
      0.013995586,
      -0.0037919425,
      -0.016302928,
      -0.00090593356,
      0.02247798,
      0.022241136,
      -0.008840454,
      -0.031070853,
      -0.008813139,
      -0.0070294887,
      -0.021563694,
      0.009701906,
      -0.002990523,
      0.007082547,
      0.0008105285,
      0.01536301,
      -0.025757503,
      -0.048640925,
      -0.007916525,
      -0.00894266,
      -0.022217227,
      -0.007337446,
      -0.017516214,
      -0.018023033,
      -0.00023055657,
      0.005908542,
      -0.016105538,
      0.0080096135,
      0.027705697,
      -0.004122967,
      0.004476989,
      0.011312903,
      0.00437492,
      -0.009165061,
      0.0060781282,
      -0.010821458,
      0.01914912,
      -0.083698794,
      -0.002554572,
      0.015595345,
      -0.006943617,
      -0.013692803,
      0.014400434,
      -0.0017727213,
      0.0136828935,
      0.010910797,
      0.03233335,
      0.007344875,
      -0.0059838635,
      0.022516323,
      0.001953136,
      -0.0059340186,
      0.029635651,
      0.012804704,
      0.005114625,
      0.012500709,
      -0.027799124,
      0.000899712,
      -0.0002817433,
      -0.022723904,
      -0.012157664,
      0.006041873,
      0.022930738,
      -0.004934469,
      0.019585313,
      0.024663216,
      -0.0017392836,
      -0.016099358,
      0.025202582,
      -0.010281397,
      -0.0033624794,
      -0.013064397,
      0.0021382952,
      0.00057003135,
      -0.009180289,
      -0.019382205,
      -0.004670946,
      -0.01517172,
      -0.02308194,
      -0.0060672606,
      0.023827937,
      -0.013431975,
      0.021889193,
      0.0068186326,
      -0.0114634475,
      -0.016490467,
      0.015534053,
      -0.038249362,
      -0.008891103,
      0.009760331,
      -0.011905007,
      -0.010363223,
      -0.02026384,
      -0.0062107807,
      0.010263603,
      0.031283565,
      -0.012930135,
      0.011998398,
      -0.0124924285,
      0.00087729,
      -0.01100316,
      0.023927651,
      0.013808891,
      0.031827427,
      -0.024719788,
      -0.021782916,
      -0.016936699,
      0.019808203,
      -0.023322491,
      -0.009159386,
      -0.030347198,
      0.023501035,
      0.00015092231,
      0.012611861,
      -0.013490549,
      -0.03315288,
      0.021463955,
      0.005751973,
      0.0006765893,
      0.008022192,
      0.018104885,
      0.010282392,
      0.007353534,
      -0.009926882,
      0.0063138264,
      0.006955871,
      -0.029583625,
      0.018291444,
      0.043319166,
      0.0065619396,
      -0.00801632,
      -0.010383238,
      -0.004881121,
      -0.027196882,
      -0.026607146,
      -0.01968209,
      0.0055665295,
      -0.03295197,
      -0.0014486618,
      -0.019993968,
      -0.0031339345,
      -0.0013715207,
      0.01645409,
      -0.04119803,
      -0.021398982,
      0.0054460387,
      -0.0007461472,
      0.002364261,
      0.02124737,
      -0.015697032,
      -0.0003010213,
      -0.029354345,
      0.008513503,
      0.01616909,
      -0.0043569896,
      -0.013281348,
      0.0043030223,
      -0.0008846947,
      -0.010309354,
      0.0016708318,
      0.02826183,
      -0.010108208,
      0.010065993,
      -0.03424409,
      0.005998131,
      -0.019773338,
      -0.0032034742,
      -0.0015198452,
      -0.024123207,
      -0.0014766584,
      -0.014080857,
      -0.02867711,
      -0.01776044,
      0.012830813,
      -0.00040572844,
      0.015573791,
      0.020978104,
      0.0041980576,
      0.0071471026,
      0.014027448,
      -0.013201909,
      0.02127366,
      0.021774432,
      -0.02375905,
      0.0043694964,
      0.0030674683,
      -0.008152306,
      -0.009078432,
      0.0077446653,
      -0.029351301,
      0.00088468427,
      -0.016925413,
      0.019289842,
      0.0057338784,
      0.0034750304,
      0.0024939794,
      -0.011168498,
      -0.0061645657,
      -0.0029210327,
      -0.013027322,
      -0.0029384857,
      0.0042551947,
      0.006749658,
      -0.00573132,
      0.010182293,
      0.0000051788593,
      0.013373307,
      0.009429566,
      -0.022478221,
      -0.043853894,
      0.0066481563,
      0.042171087,
      0.0037171612,
      0.025610253,
      -0.017141784,
      0.02253442,
      0.0072191814,
      0.04125609,
      0.0078293905,
      -0.02457739,
      0.00875666,
      0.00651859,
      0.00802967,
      0.018271705,
      -0.006432723,
      -0.029197978,
      0.0015723186,
      0.0007416012,
      -0.01231165,
      -0.022136096,
      0.033749644,
      0.0023541653,
      0.025889251,
      -0.006247576,
      0.010348963,
      0.0016181725,
      -0.004267068,
      -0.019897887,
      -0.0023164086,
      -0.011924457,
      0.002746137,
      0.023246527,
      -0.01281881,
      -0.03657985,
      -0.017912405,
      0.005099468,
      0.024630502,
      -0.0061256867,
      0.017935682,
      0.0028910327,
      -0.0041305907,
      0.0075911414,
      0.0070174215,
      0.010558157,
      0.0033044924,
      -0.01896895,
      0.001349213,
      0.011726071,
      -0.019754287,
      0.00887112,
      0.0017859524,
      0.00036249118,
      0.013669472,
      -0.014104054,
      0.008405319,
      0.00892639,
      -0.014119466,
      -0.0019154504,
      0.009132853,
      0.00525946,
      -0.0028788655,
      -0.005597536,
      -0.01055969,
      0.002114294,
      -0.004166053,
      0.011635268,
      -0.0007169016,
      0.0033986208,
      0.0038244044,
      0.0048775193,
      -0.011674574,
      0.015875686,
      -0.0013120419,
      0.02040866,
      0.032967724,
      -0.0041340445,
      0.0026122918,
      0.035137173,
      0.00775767,
      -0.021405522,
      -0.023777286,
      0.00087146513,
      0.022451898,
      -0.0051313997,
      -0.004343991,
      -0.020276628,
      0.008108564,
      0.006206302,
      -0.0012037144,
      0.001543557,
      0.008263152,
      0.025348896,
      -0.0012791139,
      0.0073408876,
      -0.0029873603,
      0.014960096,
      -0.113924034,
      -0.021531692,
      -0.011509591,
      0.0025564893,
      -0.013529607,
      0.0074623143,
      0.0023403456,
      -0.008827648,
      -0.0153486105,
      -0.0075286785,
      0.011722492,
      -0.011018869,
      -0.012082412,
      0.0152959665,
      0.007419135,
      -0.025813004,
      0.009357794,
      0.017906105,
      0.017681938,
      -0.022831056,
      0.027534787,
      -0.008474992,
      0.006004738,
      -0.0077300537,
      0.0044718143,
      0.00052930287,
      0.01497314,
      0.006516875,
      0.010214299,
      -0.009486614,
      -0.017337114,
      0.0044763014,
      0.006352376,
      0.001305395,
      0.009208841,
      0.0018015783,
      -0.018175807,
      -0.027574342,
      0.014509622,
      0.009218048,
      0.012767028,
      -0.01456734,
      0.0068806442,
      -0.007193057,
      0.011278385,
      0.015496008,
      0.005407448,
      -0.015170626,
      0.00481831,
      0.030916912,
      -0.050602958,
      -0.018640514,
      -0.0100746555,
      -0.013484319,
      0.00003547193,
      0.010850595,
      0.006076212,
      -0.0048986585,
      -0.012425818,
      -0.027495101,
      0.009912953,
      0.014962173,
      0.012925591,
      0.031240655,
      -0.0011708881,
      0.010833584,
      0.028198408,
      -0.0055440133,
      -0.010784371,
      0.0042000213,
      -0.008834034,
      0.0065955254,
      -0.016245881,
      0.0140305925,
      0.012888073,
      0.009062487,
      -0.0045912247,
      -0.0056985067,
      -0.019881222,
      0.009185543,
      -0.01699475,
      0.014606637,
      -0.073935084,
      -0.010862037,
      -0.010338301,
      0.00022509744,
      0.01784302,
      0.018332155,
      -0.003880823,
      0.015811434,
      -0.0018931297,
      -0.002643205,
      -0.014378295,
      -0.01673245,
      0.0010590907,
      -0.0297431,
      -0.031221109,
      0.020489318,
      -0.0049113086,
      -0.03419084,
      -0.025515528,
      -0.0029194895,
      -0.005231242,
      0.009536306,
      -0.0002627654,
      -0.015570009,
      0.019288557,
      0.02007314,
      -0.016844634,
      0.0012726734,
      0.01050128,
      0.0064582457,
      0.011799766,
      -0.13575545,
      -0.035909552,
      -0.002736413,
      0.020150904,
      0.0005107806,
      -0.008003226,
      -0.004236295,
      -0.008680646,
      0.011025825,
      0.0028625235,
      0.0026846498,
      -0.018986601,
      -0.015120152,
      0.0047941892,
      -0.01019746,
      0.117607094,
      -0.00053113414,
      0.0153028825,
      0.002251299,
      0.0034246892,
      -0.017861957,
      -0.009555753,
      -0.012511897,
      0.009066155,
      0.01472935,
      -0.02016181,
      0.012020942,
      -0.023401225,
      0.02625823,
      -0.0031491101,
      -0.006932093,
      -0.024200987,
      -0.0158389,
      0.018940622,
      0.025400154,
      -0.011191204,
      0.0062331054,
      0.006647552,
      -0.0016140344,
      -0.0052746166,
      -0.011007907,
      -0.0005072714,
      0.0023780132,
      0.008579349,
      0.008925368,
      0.00043678787,
      -0.0060232133,
      0.009843102,
      0.002439716,
      0.007981153,
      0.023200585,
      -0.059436828,
      -0.019194456,
      -0.022185858,
      -0.012187968,
      0.035481274,
      0.0035382435,
      0.017463213,
      -0.02272338,
      -0.02255738,
      0.0071578776,
      -0.02194138,
      0.004975554,
      -0.019088332,
      0.011914723,
      -0.01075385,
      0.0017156487,
      0.030274723,
      0.027194463,
      -0.03213637,
      -0.010336714,
      0.017373892,
      0.009986715,
      0.006184167,
      -0.02242331,
      -0.010435126,
      -0.0067823594,
      0.009596708,
      0.0043608793,
      -0.010240423,
      -0.001921976,
      0.012584092,
      -0.024577405,
      0.0017174669,
      0.007929659,
      -0.009651393,
      -0.023229904,
      0.015414924,
      -0.0047234083,
      -0.008560056,
      -0.005519397,
      -0.0045527695,
      -0.010184901,
      0.051385436,
      0.0024259544,
      0.016965833,
      -0.0057003647,
      -0.011088435,
      0.019890215,
      0.0169316,
      0.0208932,
      -0.009012884,
      0.016851824,
      -0.028707381,
      0.032958303,
      -0.0013610043,
      0.036240257,
      0.028230282,
      -0.008022599,
      -0.013112998
    ]
  },
  {
    "id": "genai_cohort_nodejs_08_Adding_Support_for_Roles_in_our_express_app_vtt",
    "content": "All right, So I hope that 2 in the previous video you have 3 already given some try 4 in implementing authorization. 5 But just in case you were not able 6 to, don't worry, here we are 7 to implement the authorization. 8 So what I'm going to do is 9 first things first, 10 let's say we don't have any concept 11 of authorization, right? 12 I am going to create a special 13 route, let's say admin 14 routes js as the name says. 15 This particular routes is going 16 to contain some critical 17 routes which are only and only 18 be allowed to an admin. 19 So what I can do is first of all 20 I'll just borrow some code that 21 is import express from Express. 22 That is nice. 23 So I'm just importing the express 24 and let me just create 25 a new router that is this 26 particular stuff and then I 27 can just say export default. 28 Okay, Export default the router. 29 So imagine all the routes that we are 30 going to add here is only and only 31 be restricted to the admin only. 32 Okay, so let's create a router, A, 33 get route Users. 34 Let's say admin wants to see 35 all the users that are available 36 in our database. 37 Technically it's 38 an internal information. 39 You don't want that any person can 40 see all the information about 41 the available users on the platform. 42 But yes, admin can see all the users. 43 So let's say this is one 44 route that I want to build. 45 So let's just quickly code 46 this particular route. 47 So I'll just create 48 an asynchronous function here. 49 Okay. 50 And I'll just say request response. 51 And let me just zoom in the code 52 little bit more so that 53 you can see it more clearly. 54 So how to implement this particular 55 stuff is first of all let's import 56 DB from DB js file. 57 Okay, nice. 58 And let's also import something 59 from you know, one directory up. 60 Then we can go into the DB and then 61 we can go into the schema js file. 62 So what do you want to import here? 63 I want to import the users table. 64 Nice. 65 So here we have the db oh 66 by the way, I imported it wrongly. 67 I should have done DB 68 slash index js Yes. 69 Now it is basically the database. 70 You can see it's a database file. 71 Nice. 72 So now what I want to basically 73 do here is my router is here. 74 So how to query all the users? 75 I can just say const Users equals to. 76 I can just put an await and then 77 I can just say DB dot select. 78 Okay, from which table 79 do you want to select? 80 I want to select from users table 81 and that's it right this basically 82 means select all the users. 83 Then I can just say return a, 84 response.JSON saying users. 85 That's it. 86 So this users is what? 87 Basically an array of users. 88 And of course you don't want 89 to send password, right? 90 You don't want to send the password 91 and salt on the front end. 92 So let's add, that, hey, I want to 93 send an ID that is user stable ID. 94 I want to send the name that is users 95 table.name and I want to send 96 the email that is user stable email. 97 That's it. 98 That's it. 99 I want to send. 100 Now let me just quickly spin 101 up my postman, okay. 102 And test this particular route 103 if this is working or not. 104 Right now you can see we have 105 not done any authentication. 106 No authorization. 107 Nothing is there. 108 Right? 109 So here is my postman. 110 Right? 111 So what I'm going to do is, 112 by the way, we forgot to register 113 this particular router. 114 So we have to go 115 into our index js file. 116 Let's import this routes, right? 117 So I can just say import, 118 admin router from dot slash 119 routes admin router js. 120 So what I could basically 121 do, I can just say if anything 122 starts with admin, 123 you please use the admin router. 124 That's it. 125 And by the way, I have just noticed 126 we have a lot of unused imports, 127 so it's okay to remove them. 128 Right? 129 Nice. 130 So let me just start my 131 server up and running. 132 So PNPM dev starts my server 133 at localhost8000. 134 Great. 135 So if I say admin slash users, 136 I will clear my token. 137 See? 138 No authentication. 139 Okay, let's clear the body, 140 no body, no header and send. 141 You can see I'm able 142 to get all the users. 143 So as of now, we only have 144 one user in our database. 145 Correct. 146 Technically, this is wrong. 147 First thing we should implement is 148 that the user must be authenticated. 149 Correct user must be authenticated. 150 Now, one way to do the authentication 151 is I can just say that if 152 there is no request dot user. 153 Right? 154 If you remember from 155 the previous classes, we have 156 a middleware function. 157 If the user exists, we are 158 populating this request user. 159 So if there is no request user, 160 that means the user is logged out. 161 You can just say return a, 162 response.status code of 401 163 and then saying.JSON. 164 okay. 165 And error that. 166 Oh, sorry, error. 167 Please don't import this error 168 from here and you can just send 169 an error that you must be 170 authenticated to access this. 171 So this is one way 172 of controlling the authentication. 173 Right? 174 So now if you send, you can 175 see you Must be authenticated. 176 But now if I try to send the bearer 177 token along, okay, I have 178 to generate, I have to log in first. 179 So let me just do a quick login. 180 This is my token. 181 Let me just copy this token 182 and I'm just going 183 to replace this token and send. 184 Now you can see 185 the authentication is working. 186 Now. 187 Guys, tell me one thing, 188 is this a correct way 189 to do an authentication? 190 Of course not, right? 191 Technically I don't want 192 to repeat this code. 193 If you see we are repeating this code 194 at couple of places, right? 195 We are repeating this particular 196 code at couple of places. 197 So you should not repeat a code. 198 Rather see what I could do. 199 I can create a folder 200 of middlewares, right? 201 And I can create a middleware 202 of auth middleware js. 203 What I can basically do in this auth 204 middleware js is I can 205 create a middleware number one. 206 I also want to first of all move this 207 middleware to this file, right? 208 To make it more clean. 209 So let's create a middleware 210 here that is const, 211 authentication middleware. 212 Let's name it as 213 authentication middleware. 214 So this middleware does what? 215 It's just an asynchronous function. 216 Okay, let's say it's 217 an async function. 218 And what it basically has, it, it 219 has access to request response. 220 And next. 221 Now what I can do is I can safely. 222 First of all, let's have a try catch. 223 See, I'm just going to type, 224 I'm just going to type here. 225 So what we are basically 226 doing here is try catch. 227 If there is any error, just 228 call the next function. 229 Okay, that's it. 230 But if it is not what you do, 231 you try to read the headers. 232 Okay, I'm just copying one by one. 233 Okay, Try to read the headers. 234 Try to. 235 If the header does not exist, 236 that means, okay, the user is 237 not authenticated, he's not 238 sending you any kind of headers. 239 Just call the next function next, 240 you know, next router 241 in the middleware stack. 242 Okay. 243 But if it does not start with 244 the bearer, of course it's an error. 245 So you can just throw 246 an error response. 247 Nice. 248 Cool. 249 Okay, then you got the token. 250 So I'll just copy here and I'll 251 just say, hey, here is the token. 252 Very nice. 253 Then you try to decode the token. 254 Right? 255 Right. 256 So you want to make sure that 257 this token is generated by you. 258 So you do a, verify. 259 But don't forget to import jwt. 260 So import JWT from JSON web token. 261 Nice. 262 And if you got the decoded you just 263 say request user is equals to 264 decoded and call the next function. 265 Very nice, very nice. 266 Okay, and just export 267 this function from here. 268 Now what you can basically do is 269 instead of this logic, I can say, 270 hey, I want to import something 271 from dot slash middlewares slash, 272 you know, auth middleware. 273 And you can just import 274 the authentication middleware. 275 Now instead of doing all this 276 particular stuff here, I 277 can just make it say app. 278 Use the authentication middleware. 279 That is it. 280 Right? 281 Let's make sure if everything 282 is working, you can see 283 everything is working. 284 Right? 285 I'm still logged in. 286 And if I say no, 287 you can see I'm logged out. 288 If I say bearer token, 289 I am logged in. 290 Very nice. 291 Now what I can do is along with this 292 I can create one more middleware. 293 I can just say export const 294 Ensure authenticated. 295 Now basically what I'm trying to do 296 here is this is again a function. 297 Okay, let's say it's an again 298 async function which has access 299 to request response. 300 And next, this middleware ensures 301 that you have to be logged in. 302 Okay, that is very simple. 303 If no request user, this is going 304 to say return response status, 305 sorry, response status of 401 JSON. 306 And I can just say an error that is 307 you must be authenticated. 308 But if it is not the case, I can 309 just call the next function. 310 So this is a very simple 311 logic which makes sure that 312 the user is authenticated. 313 So that means to use this 314 particular middleware, what I could 315 basically do is I can go 316 into this user route, correct? 317 And what I can do, I can basically 318 import something from middleware 319 auth middleware and I can try 320 to import the ensure authenticated. 321 And just by putting this thing here. 322 Now this particular function 323 will only run if user exists. 324 So now I can safely remove 325 this nice similar. 326 I can just put it here, 327 ensure authenticated. 328 And I can just remove this logic. 329 Because technically this function 330 right here, which I am highlighting 331 will only run if this 332 middleware calls the next function. 333 This middleware will call 334 the next function only 335 if request user exists. 336 Nice. 337 Right, so ensure authenticated 338 basically can be even used here. 339 So instead of doing this thing, I can 340 say import something from dot dot 341 slash middlewares auth middleware 342 import ensure authenticated. 343 Put ensure authenticated as 344 a middleware on the route 345 level and remove this. 346 That's it. 347 Let's test it out. 348 Send. 349 Is it working really nice. 350 No, auth send. 351 You can see it's not working. 352 And if I say bearer token 353 and Send, you can see. 354 Nice. 355 Cool. 356 Now, similar to this, 357 similar to this, let's start 358 adding the authorization. 359 Correct. 360 So what is authorization? 361 Technically what I could do is 362 I can add a new field here. 363 Okay, that is a role. 364 Now role can be basically a string. 365 Role can be an enum. 366 So it is basically what I 367 would like to do is I would 368 like to create an enum. 369 So pgenum. 370 So let's say export const User role. 371 Enum. 372 Okay, Equals to pgenum. 373 Let's call this enum as 374 user, underscore role. 375 Okay. 376 And values can be either a user or 377 the values can be either an admin. 378 Let's say these are the only 379 two available values. 380 So I can say that, hey, 381 you are basically a, enum. 382 Okay, that's great. 383 And you are not nullable. 384 And your default value is what? 385 Your default value is basically user. 386 Nice. 387 So this basically adds a role 388 property to the user. 389 So let me just do one thing. 390 Let me just pin up a studio first. 391 PNPM DB Studio. 392 Okay, DB Studio enter. 393 My DB Studio is up and running 394 on this particular link. 395 So let me just open the link. 396 Not, user only num. 397 I have to copy this. 398 So I copied the wrong 399 thing and paste it here. 400 Now let's wait for a while so 401 you can see in the users. 402 Right now there is no role. 403 Right. 404 So what I'm going to do, create 405 a new terminal PNPM DB push. 406 So this has applied the changes. 407 Now if I go back and I do 408 a refresh now, you should be able 409 to see a role in the users. 410 So if I just say users, 411 where can I see? 412 Okay, let me just remove this. 413 Can I see the role? 414 Yes. 415 So you can see that the role is user. 416 Right. 417 Now what I could do is. 418 That is good. 419 The role is user. 420 Very nice. 421 Technically, when you log in, 422 okay, when you log in, 423 what I should do is I should also 424 put this role in your token. 425 So when I'm trying to do a login, 426 I should also query for the role 427 that is user table dot role. 428 Okay? 429 Now in the payload I can 430 also put a role that is 431 existing user dot role. 432 That's it. 433 Great. 434 So now the role is also 435 in the payload. 436 That means if I log in once again. 437 Now this is my new token. 438 I copy this particular token 439 and I go on to JWT IO website. 440 Okay, Just for the debugging 441 purpose and I paste it here. 442 Now you can see this is what 443 my token payload looks like. 444 You can see I have id, 445 I have email I have name role. 446 Now technically, this role 447 is very interesting, right? 448 Based on this role, what I can do, 449 I can create one more 450 middleware that is restricted, 451 say restrict to admin. 452 Okay? 453 Or I can say restrict to role, 454 which is an async function. 455 Okay? 456 What this function 457 basically takes is a role. 458 You have to give me a role 459 which can be either admin 460 or this can be either user. 461 Correct? 462 So this can be either admin or user. 463 So it's basically a role. 464 Okay? 465 Now see, what I can do is I 466 can return a new function 467 from here which has request 468 a response and a next correct. 469 There is no need to be async. 470 This is okay, now see what I can do. 471 We can basically assume the user 472 is already authenticated. 473 I can just say if request 474 user.role is not equals to 475 this particular role. 476 Correct. 477 In this case, I can just say return 478 response dot status code. 479 Okay? 480 That is 4,01 of course, 481 dot JSON error. 482 You are not authorized, okay? 483 To access this resource. 484 Very nice. 485 Else, sorry, resource. 486 Okay, very nice. 487 But if, if the role exists, 488 you can just say the return 489 the next function. 490 That is it. 491 Now see what I could do. 492 It's basically a closure function. 493 If I call this function 494 with role as admin, this returns me 495 a middleware function, right? 496 This is how I have designed it. 497 And then this middleware 498 function can be used. 499 So it's a closure function. 500 So that means going on 501 to the admin routes. 502 Now I can import an authentic. 503 Sorry, the restrictor role. 504 Now technically what I can 505 do is I can just say construct, 506 admin restrict. 507 Okay? 508 Restrict middleware. 509 Okay. 510 Equals to restrict to role admin. 511 Nice. 512 And then I can also change 513 the admin restrict middleware. 514 Now this particular route is only 515 and only restricted to the admins. 516 Let's give it a try. 517 Okay, so if I copy this 518 particular token, I have a new 519 token, paste it and send. 520 You are not authorized. 521 You are not authorized. 522 Why? 523 Because my role is user. 524 Correct. 525 If I go in my database, 526 I change my role to admin. 527 I have to now log out and log in. 528 Basically I have to generate 529 a new token for myself. 530 Right? 531 Because, you might have heard that 532 whenever there is a problem, 533 often the admin asks you to hey, can 534 you please do a logout and login so 535 that your token is refreshed. 536 Now my token contains 537 the role as admin. 538 Nice. 539 Now what I can do. 540 Now if I go here, I replace 541 my token and I do a send. 542 Now you can see I'm able 543 to access this resource, right? 544 So this is basically kind of 545 a role based access 546 control using the middleware. 547 So congratulations. 548 Yes, it was that simple to implement. 549 Okay, so you can have multiple 550 roles, not only user and admin, 551 you can have moderator, 552 you can have multiple roles. 553 Then you can just create 554 a middleware, a utility function 555 which checks for that role 556 and you can just chain it. 557 Now technically I don't want 558 to put it here right. 559 If you see all the roles here are 560 going to be restricted to admin. 561 So what I can do is I can put it 562 on a router level that is router use 563 number one is ensure authenticated 564 and router use admin this thing. 565 Now I don't have to put 566 on every route. 567 So now every route that I create 568 in this particular file 569 will use these two middlewares 570 because these middlewares are 571 applied on the route level. 572 So going back test your 573 implementation, everything 574 is working fine. 575 Nice.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "08 Adding Support for Roles in our express app.vtt",
      "originalPath": "genai-cohort/nodejs/02 Subtitles - Auth&Sec/08 Adding Support for Roles in our express app.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.015199399,
      0.0106405355,
      0.018836312,
      -0.056478877,
      -0.0044700787,
      -0.0039529735,
      0.02432723,
      0.028688287,
      0.0031866631,
      -0.011568086,
      -0.006962899,
      -0.005561514,
      0.017072251,
      0.014496074,
      0.13554542,
      0.0034310615,
      -0.0056238407,
      -0.00036452818,
      0.0063893865,
      -0.031135986,
      0.016445536,
      -0.012080446,
      0.030757213,
      0.006422915,
      0.007612215,
      -0.0021462366,
      0.003402604,
      0.0014863345,
      0.036076,
      -0.021478675,
      -0.01834631,
      0.0010200118,
      0.0068757907,
      0.022516832,
      0.00022967868,
      0.031682774,
      0.033509657,
      0.021122625,
      -0.030494314,
      0.0034233136,
      -0.012583544,
      0.009880394,
      -0.012951149,
      -0.0061939573,
      0.0037889793,
      -0.009133469,
      -0.0020169725,
      -0.030297019,
      -0.018207267,
      0.014086489,
      -0.007403767,
      -0.0035431995,
      -0.036251653,
      -0.17253926,
      -0.001104547,
      0.004157893,
      0.004489954,
      -0.007155984,
      0.023141636,
      0.008542424,
      -0.024895016,
      0.013105667,
      -0.035097413,
      0.01382309,
      -0.026458906,
      0.0056475247,
      0.003279658,
      -0.00036970965,
      -0.0027397193,
      -0.01473151,
      0.008414773,
      0.025303094,
      -0.020015173,
      -0.021263594,
      -0.006948034,
      -0.01023208,
      0.008884455,
      -0.027639225,
      -0.007920993,
      0.003005478,
      -0.00056340353,
      -0.010814382,
      -0.010962979,
      -0.01377235,
      -0.003001622,
      -0.0015376016,
      -0.0013688025,
      -0.02513559,
      -0.011802603,
      0.009300974,
      -0.00082361634,
      0.013161802,
      -0.008606007,
      -0.0040951823,
      -0.0041445545,
      0.0041039214,
      -0.017841129,
      0.017468687,
      -0.017106058,
      -0.001480622,
      0.00027084022,
      0.030273946,
      -0.02557134,
      0.021791752,
      0.00914163,
      0.017213125,
      -0.0108478,
      -0.0048437216,
      0.022337148,
      -0.016784845,
      -0.0026170472,
      0.00008884745,
      0.011244089,
      0.015610015,
      0.013947799,
      -0.16392866,
      0.027900623,
      -0.0059005823,
      0.011894965,
      0.020381682,
      -0.018522963,
      0.023819124,
      0.023136491,
      -0.01243968,
      -0.017477522,
      0.010617143,
      -0.010850473,
      0.0017915304,
      0.008746161,
      0.01272351,
      -0.023805207,
      0.0016432207,
      0.022635728,
      0.018498968,
      0.007382014,
      0.022504797,
      0.011744217,
      0.0032868143,
      0.0077682133,
      -0.024156228,
      0.0093643665,
      0.026157383,
      -0.009265729,
      0.04028932,
      0.017951177,
      -0.013692184,
      -0.0116715245,
      0.021901732,
      0.005836367,
      -0.033358816,
      0.03513688,
      -0.034125537,
      0.010175589,
      0.006721532,
      0.026514335,
      -0.057790946,
      0.023389563,
      0.0032573033,
      -0.000949442,
      0.009057395,
      0.0022158558,
      0.010931057,
      -0.010351894,
      0.0059935832,
      -0.003783052,
      0.005681889,
      0.011859646,
      0.012053955,
      0.0053834356,
      0.009320212,
      -0.031495895,
      -0.0015542861,
      -0.011319568,
      0.012441444,
      -0.010233677,
      -0.0021147253,
      -0.0076945163,
      -0.0070518977,
      0.008990573,
      -0.010766741,
      -0.011896668,
      -0.020902824,
      0.024425814,
      -0.008557485,
      0.023093604,
      -0.007814808,
      -0.017033586,
      0.008916239,
      0.015649103,
      -0.0125629725,
      0.0070084,
      -0.009073556,
      -0.009273737,
      -0.0006383016,
      0.014352779,
      0.0018648155,
      -0.005984171,
      -0.018337995,
      0.00010742371,
      0.016455486,
      0.003162828,
      -0.004104322,
      -0.010970795,
      -0.014394868,
      -0.004289812,
      -0.000065948436,
      0.023319643,
      -0.025790876,
      0.013198175,
      0.025442977,
      -0.0010300381,
      -0.011444297,
      0.0026889592,
      -0.010544343,
      0.00036685762,
      -0.014830205,
      0.019673685,
      0.013699267,
      -0.0057996227,
      -0.02123117,
      -0.008778878,
      0.009261729,
      0.014577031,
      0.021428658,
      0.019300487,
      0.012842883,
      0.021419073,
      -0.013126008,
      0.007675069,
      -0.0020384463,
      0.023996051,
      0.006019173,
      -0.008321276,
      -0.016791858,
      0.01629208,
      -0.010874948,
      -0.012895706,
      0.024377989,
      0.009330702,
      0.019415326,
      -0.004628846,
      -0.017050058,
      0.002875424,
      0.00091854297,
      0.02936907,
      -0.006881492,
      -0.035329606,
      -0.0075159483,
      -0.0023643086,
      -0.023010965,
      -0.004060593,
      -0.0045095496,
      0.0029282488,
      -0.002523311,
      -0.004981535,
      -0.017467855,
      -0.036451757,
      -0.0036689865,
      0.005880136,
      -0.013650332,
      -0.020337168,
      -0.019036338,
      -0.009345197,
      0.0054910514,
      0.011466339,
      -0.030696971,
      0.0035861451,
      0.019645918,
      -0.0013783396,
      0.0028852376,
      0.015427587,
      0.0046270783,
      -0.0007294503,
      0.011544978,
      -0.005751835,
      0.013813335,
      -0.085798375,
      -0.007389497,
      0.005455613,
      -0.02888477,
      -0.019529069,
      0.009604298,
      -0.012564892,
      0.008587105,
      0.00017471002,
      0.01523614,
      0.0035959203,
      -0.01454284,
      0.013253303,
      -0.0009454701,
      -0.005307727,
      0.021830792,
      0.004869283,
      0.0043219384,
      0.0050331606,
      -0.019045513,
      -0.0039379806,
      -0.0034903407,
      -0.016352057,
      0.0037383994,
      0.012264216,
      0.021101804,
      -0.021630902,
      0.023863794,
      0.024592863,
      0.01277914,
      0.011289899,
      0.026663467,
      -0.012758394,
      -0.01715357,
      -0.010823119,
      0.0062449994,
      0.017026987,
      -0.0055924975,
      0.011881672,
      -0.009040237,
      -0.021559168,
      -0.026316628,
      -0.0071870373,
      0.016012272,
      -0.015405384,
      0.0020471835,
      -0.0044851797,
      -0.008241065,
      -0.0073248246,
      0.012613748,
      -0.033926327,
      0.008864616,
      0.010677683,
      -0.023035014,
      0.0130172465,
      -0.015602817,
      0.012200625,
      0.012949393,
      0.029174833,
      -0.016970882,
      0.0052926764,
      -0.017060919,
      0.001327107,
      -0.0091607375,
      0.030362148,
      0.023856007,
      0.0070167338,
      -0.029491676,
      -0.021454591,
      -0.03277241,
      0.030593231,
      -0.0265815,
      -0.020465007,
      -0.033907022,
      0.009024424,
      0.011190054,
      0.027740171,
      -0.00040883184,
      -0.040328138,
      0.010986797,
      0.012034983,
      -0.0000943421,
      0.016408833,
      0.029585067,
      0.0088214725,
      -0.002722261,
      -0.0037788828,
      0.01458574,
      0.0047377395,
      -0.0323609,
      0.03461362,
      0.032672126,
      0.0071578505,
      -0.007494146,
      -0.00988293,
      0.004888161,
      -0.025091456,
      -0.023002492,
      -0.013980869,
      0.023706963,
      -0.028978702,
      0.010593725,
      -0.023810305,
      -0.008621035,
      0.009660869,
      0.011864371,
      -0.020109644,
      -0.014082604,
      0.0030071752,
      -0.008893811,
      0.0035298867,
      0.016591344,
      -0.005064405,
      0.0016107267,
      -0.030893875,
      0.020451033,
      0.017552104,
      0.0008014039,
      -0.021317,
      0.00989273,
      -0.015006532,
      -0.004578472,
      0.010584678,
      0.028585274,
      -0.014906807,
      0.015872337,
      -0.03654313,
      -0.0013073757,
      -0.00022617809,
      -0.011355063,
      -0.0026882312,
      -0.0071820584,
      -0.013431077,
      -0.0135136265,
      -0.016417298,
      -0.018233582,
      0.0149132535,
      -0.014329052,
      0.014755503,
      0.02470299,
      0.005431952,
      -0.0005796414,
      0.01678285,
      0.000772194,
      0.012566565,
      0.020920647,
      -0.029342609,
      0.009368903,
      0.005189987,
      -0.005614587,
      0.0021187938,
      -0.0026757997,
      -0.012144082,
      -0.007947729,
      -0.0024013002,
      0.01412662,
      0.00513541,
      -0.00262282,
      -0.007098245,
      -0.009308279,
      -0.025746215,
      0.007305,
      -0.018718123,
      -0.014449202,
      -0.003972372,
      0.011177851,
      0.0026233678,
      -0.00854175,
      0.0070404164,
      -0.004763613,
      -0.0029017373,
      -0.019407758,
      -0.030132508,
      0.02377089,
      0.020208994,
      -0.0029790476,
      0.014215686,
      -0.011461045,
      0.012334198,
      0.0036577226,
      0.032111373,
      0.003366266,
      -0.01371908,
      0.0046888744,
      0.00033247148,
      -0.004752434,
      0.014926384,
      -0.011428306,
      -0.0361073,
      -0.0018871786,
      -0.002147643,
      -0.012858538,
      -0.020523317,
      0.033896428,
      0.020672884,
      0.026652051,
      0.0068643955,
      0.015593593,
      0.0010469869,
      -0.010639751,
      -0.01915547,
      -0.0068561602,
      -0.007000659,
      0.018243864,
      0.023909166,
      -0.004299323,
      -0.03248938,
      -0.0054332796,
      -0.006826168,
      0.025607374,
      -0.011593835,
      0.02004863,
      0.0013285968,
      -0.008545283,
      0.011432274,
      0.010955919,
      0.007845168,
      0.011639631,
      -0.03496846,
      -0.00438043,
      0.018792907,
      -0.016702391,
      -0.012305548,
      -0.006455251,
      0.009273692,
      0.008222752,
      -0.025907313,
      0.011955953,
      0.01166758,
      -0.02890104,
      0.0006715321,
      -0.0015381153,
      0.024366504,
      0.0151598,
      -0.0064877276,
      -0.015396184,
      0.009332825,
      -0.013362184,
      0.011803782,
      -0.0006659218,
      0.003471181,
      -0.000985379,
      0.0069513735,
      -0.0038268128,
      0.012182169,
      0.0012283915,
      0.021201983,
      0.017064372,
      0.0017215703,
      -0.008048872,
      0.03294347,
      0.012333782,
      -0.0077220933,
      -0.02185056,
      -0.003489097,
      0.029675005,
      -0.011906446,
      0.0033677015,
      -0.018591704,
      0.005899491,
      -0.008491949,
      -0.004855216,
      0.018337615,
      0.013986836,
      0.018784152,
      -0.00881908,
      0.0053629517,
      -0.007059671,
      0.024996426,
      -0.1256663,
      -0.004188641,
      -0.018259188,
      -0.02260077,
      -0.011284056,
      0.0002468958,
      0.006847877,
      -0.009381023,
      -0.03173141,
      -0.0030803692,
      0.011370789,
      -0.011809436,
      0.00083029794,
      0.005033879,
      0.0006950054,
      -0.017110413,
      0.014626862,
      0.009911919,
      0.024810426,
      -0.015631003,
      0.01015254,
      -0.004125881,
      0.011174472,
      -0.0039282455,
      0.0012875876,
      0.008237543,
      0.007880237,
      -0.016623143,
      0.012563387,
      -0.002079539,
      -0.019611385,
      0.00016397239,
      -0.009543678,
      0.011709048,
      0.00733899,
      0.0069083986,
      -0.01636763,
      -0.015128811,
      0.015676275,
      0.00872928,
      0.017426487,
      -0.014056523,
      0.02283543,
      -0.016172718,
      -0.0016306277,
      0.018247174,
      0.017110307,
      -0.0075451494,
      0.013722282,
      0.047346596,
      -0.035314206,
      -0.012533569,
      -0.011756016,
      -0.001413439,
      -0.0025426205,
      0.0034695657,
      -0.002522121,
      -0.007362047,
      -0.010261509,
      -0.01304766,
      0.00718366,
      0.00093307236,
      0.002380302,
      0.027852273,
      -0.013406813,
      0.0069120596,
      0.009542346,
      -0.0053264573,
      -0.009257491,
      0.0020669124,
      0.001142463,
      -0.0029411654,
      0.009371294,
      0.0019941248,
      0.0019567576,
      0.006622106,
      -0.011449246,
      0.0033923325,
      -0.019431924,
      -0.00019348074,
      -0.018898109,
      0.009592632,
      -0.0741169,
      -0.005835003,
      -0.01315137,
      0.009217501,
      0.003444384,
      0.008142745,
      -0.006718936,
      0.020173918,
      0.0029544053,
      -0.0028913512,
      -0.0075213155,
      -0.015420768,
      -0.0008149907,
      -0.034009553,
      -0.015905665,
      0.018320829,
      0.011613958,
      -0.03932728,
      -0.016209625,
      0.001378378,
      -0.008962805,
      0.0054334756,
      -0.009420145,
      -0.009565217,
      0.016812084,
      0.019346738,
      -0.028761854,
      0.0067537306,
      -0.010171488,
      -0.010132759,
      0.0064058295,
      -0.14803445,
      -0.028963573,
      0.012994504,
      0.014344844,
      -0.0033052368,
      0.0010599934,
      -0.008170818,
      -0.013359233,
      -0.0055590314,
      -0.014582613,
      0.004879799,
      -0.019454189,
      -0.009684149,
      -0.0012342902,
      -0.017523598,
      0.1247831,
      -0.00094131404,
      0.015240016,
      0.0070112403,
      -0.0013530166,
      -0.0071227197,
      0.0047651264,
      -0.002191191,
      -0.004434341,
      0.012577129,
      -0.021130161,
      0.014994375,
      -0.035178974,
      0.017566029,
      -0.0036050142,
      -0.0051579666,
      -0.029500714,
      -0.010589451,
      0.017846264,
      0.01887928,
      -0.01825789,
      0.009637583,
      -0.0031600122,
      -0.01253315,
      -0.002515527,
      -0.015526292,
      0.0015605233,
      0.007982926,
      0.010346726,
      0.0072825053,
      0.017397134,
      -0.00006035734,
      0.009733939,
      -0.0019612738,
      0.0027803762,
      0.0075635165,
      -0.065996386,
      -0.01397218,
      -0.013453565,
      -0.027768772,
      0.036731143,
      0.02414104,
      0.0129449535,
      -0.023207616,
      -0.011244167,
      0.0058290293,
      -0.020291097,
      0.008704335,
      -0.018525375,
      0.009946163,
      -0.007858005,
      0.0058646593,
      0.02551151,
      0.03152636,
      -0.021725947,
      -0.0003016897,
      0.018671159,
      0.006008966,
      0.013186267,
      -0.027285647,
      -0.0070619034,
      -0.0062644742,
      0.0145883225,
      0.0027282876,
      -0.017047023,
      0.0063660033,
      0.013625192,
      -0.004589165,
      -0.011706777,
      0.012638151,
      -0.016560122,
      -0.026014265,
      0.0061441064,
      -0.0014076403,
      -0.01086306,
      0.0083457455,
      0.004884376,
      -0.01864912,
      0.051468864,
      -0.0053574815,
      0.013693645,
      0.0024074574,
      -0.0020552378,
      0.03190449,
      0.015135798,
      0.003266555,
      -0.026444158,
      0.010837649,
      -0.036425214,
      0.030819897,
      0.006318198,
      0.023735473,
      0.016316865,
      0.00079031865,
      -0.019338543
    ]
  },
  {
    "id": "genai_cohort_nodejs_01_node_introduction_vtt",
    "content": "Hey everyone and welcome to 2 an exciting new course on Node js. 3 In this particular course we 4 are going to learn Node js 5 that what is Node js and how you 6 can build web servers and a lot 7 of cool stuff with Node js. 8 As a quick introduction, my 9 name is Piyush Kirk and I 10 am going to be your instructor 11 throughout this course. 12 I'm a full stack developer 13 and a YouTuber and I have built 14 and created a lot of content 15 on my YouTube channel as well. 16 So this particular course on Node js 17 is actually very close to my heart. 18 So I have been working with Node js 19 for over, I guess 8 years, around 8 20 years and I have built a lot of cool 21 stuff around it and we are going to 22 discuss that how you can use Node 23 js. 24 And this is going to be an absolute 25 beginner to intermediate course. 26 The only prerequisite for 27 this particular course is 28 if you know JavaScript. 29 Okay? 30 So you should know basics 31 of JavaScript because ultimately 32 we are going to code a lot 33 of things in JavaScript, so only 34 that is the prerequisite. 35 Rest everything, 36 each and everything will be taught 37 in this particular class. 38 So in this particular course we are 39 going to cover like from the 40 absolute basics like what is Node 41 js, how Node js was built and how 42 Node js internally works all the 43 way to integrating Postgres in our, 44 Node js application and building 45 RESTful APIs along with 46 authentication, JWT sessions, 47 cookies and a lot of more stuff. 48 So I welcome you again 49 to this premium Node js course. 50 And with that let's start our very 51 first lecture on what is Node js? 52 So what is Node js? 53 Right? 54 So whenever we talk about or whenever 55 I ask my learners that, hey, 56 can you tell me what is Node js? 57 I get few answers like, hey, 58 it's a framework, or some 59 people say it's a library. 60 So I'm sure that you are 61 also confused that if it is 62 a framework or a library. 63 So let's understand that 64 what exactly is Node js? 65 Now before understanding what is Node 66 js, let's understand this js part. 67 js stands for JavaScript. 68 Do you even know that 69 what is JavaScript? 70 Let's try to understand 71 this JavaScript thing. 72 So let's say that you can see that 73 right now I have a browser here. 74 And on this particular browser I 75 have opened my personal portfolio 76 website that is on puresha.dev 77 now this browser can only 78 understand three languages, right? 79 This browser can only understand 80 HTML, CSS and JavaScript. 81 HTML that provides the basic 82 layout, basic structure to this 83 particular website, CSS is for 84 the styling part and JavaScript is 85 for the functionality part. 86 Now tell me one thing, 87 is there any other language that 88 a browser can understand? 89 Not really. 90 At least not at the time 91 of recording this video. 92 So these are the only three languages 93 which builds whole Internet, 94 which builds whole websites. 95 Okay, now here, one interesting 96 part is that there is 97 something known as JavaScript 98 engine inside the browser. 99 Let me show you one thing. 100 For example, if I open my 101 browser right here, so you can 102 see that I have a whiteboard 103 open and it's a browser. 104 And let's say I just open any website 105 that is like google.com, right? 106 I hope you know what is google.com 107 a huge shout out 108 to google.com amazing search engine. 109 So if I go into the console, right, 110 you can see I'm opening my console. 111 In this particular console I can 112 write any valid JavaScript code. 113 For example, if I say two 114 plus two, I'm getting four. 115 If I say console log and I say 116 hello, what you will notice is that 117 yes, I am able to run this code 118 without any error, without any 119 issue and I'm getting the hello as 120 console log. 121 How am I able to run this GS 122 code inside the console? 123 Because when you download 124 this browser, right now I'm 125 using a Chrome browser. 126 When you download this browser, 127 a js engine is 128 automatically shipped along. 129 So every browser, whichever you 130 download has something known as 131 JavaScript engine inside them. 132 With this JavaScript engine, 133 your browser is able to compile 134 and execute JavaScript code. 135 If your browser does not have this 136 JavaScript engine, there is no way 137 to run a JavaScript code. 138 So repeating my question again, 139 how am I able to run this code here? 140 Because I'm using a Chrome 141 and chrome has a JavaScript engine. 142 If this JavaScript engine was not 143 there, this, there is no chance 144 that this code is going to execute 145 right now with that, now we have a 146 knowledge that, okay, there are 147 three languages of a browser and 148 JavaScript engine is the one that 149 is responsible for running the 150 JavaScript. 151 Now JavaScript, due to this 152 JavaScript engine which is 153 directly embedded into a browser, 154 there is one limitation. 155 The limitation is that can you run 156 JavaScript outside the browser? 157 I'm asking you that, can you guys run 158 JavaScript outside the browser? 159 The answer is no. 160 Reason for that is because 161 JavaScript engine is embedded 162 into the browsers, it 163 is inside the browser. 164 So because on my system 165 I cannot have this GS engine thing. 166 There is no that I can run 167 JavaScript outside the browser. 168 And that's even fine. 169 That's fine because when JavaScript 170 was written, when JavaScript 171 was developed, it was developed 172 for the browsers, right? 173 The whole purpose of JavaScript 174 was to provide 175 the interactivity to browsers. 176 And that is where GS Engine 177 was born and browsers were 178 given the js engine, right? 179 So it's a limitation, but that's 180 a required thing, right? 181 Now every browser, like There 182 are various JavaScript engines. 183 For example, there is this 184 V8 engine which Chrome use. 185 There is this Spider Monkey which is 186 by Firefox, and there 187 is this Apple WebKit engine 188 which is used by Safari. 189 So all the browsers have 190 their own JavaScript engine. 191 And V8 by Chrome, Spider Monkey 192 by Firefox, and this Apple WebKit. 193 And there is no need 194 to remember them. 195 Now interesting part starts here. 196 Out of these JavaScript engines 197 out there, this V8 engine which 198 Chrome uses is an open source one. 199 What do I mean by open source? 200 Open source basically means 201 the code is publicly available. 202 The code of this v8 engine is 203 publicly available on the GitHub 204 now, because this v8 engine which is 205 inside the Chrome, this, this Chrome 206 has V8 engine which is open source. 207 You know this scientist, this 208 Rian D, his name is Rihan. 209 What he did, he did 210 something very crazy. 211 You know what he did? 212 He took this open source 213 engine, okay, open source V8 engine, 214 and embedded this V8 215 engine into a C program. 216 Now what I did took a V8 engine, take 217 a C program, take this V8 engine 218 and embed inside a C program. 219 Now you tell me, can you run C 220 outside the browser? 221 Of course. 222 C is a machine language, right? 223 It has the capability to talk 224 to the machine, to talk 225 to your hardware, to talk 226 to your operating system. 227 Now, when you embed this V8 engine 228 and into a C program, V8 engine is 229 capable of executing JavaScript. 230 C can run outside the browser. 231 With this particular thing, 232 you were able to execute 233 JavaScript outside the browser. 234 And this project, this V8, 235 engine embedded into the C, 236 this project was named as Node js. 237 Okay? 238 So if someone asks 239 you, what is node js? 240 Node js is basically a project made 241 by this crazy scientist ran that is 242 basically the open source V8 engine 243 of Chrome embedded into a C program. 244 So, if I go back to my previous 245 question that I asked 246 you that, what is node js? 247 Is it a framework? 248 No. 249 Is it a library? 250 No. 251 What is Node js then? 252 Right? 253 So Node js is nothing but just 254 a runtime environment. 255 So Node js, it's a C program with 256 V8 engine which provides you 257 an environment in which you can run 258 JavaScript outside the browser. 259 If you are from Java background, 260 let's say, do you know that there is 261 something known as jvm, right? 262 There is JVM and there is 263 something known as jre. 264 What is gre? 265 Just in case you know Java, that 266 is Java runtime environment. 267 If you want to run any Java code 268 on your, on your system, 269 you should have that GRE 270 installed similar to that. 271 If you want to run JavaScript, 272 you should have this V8, 273 any JavaScript engine installed. 274 In browsers you have these 275 engines by default, Shift. 276 But on your machine, if you Want 277 to run JavaScript outside of the 278 machine, you can download this 279 node js, which is a runtime 280 environment, basically a C 281 program, along with the Chrome's 282 V8 engine. 283 So crazy stuff, right? 284 So this is basically Node js. 285 Now what are what were the advantages 286 of this particular approach? 287 With this approach, number 288 one, you can run JavaScript 289 outside the browser. 290 You can build web servers 291 with JavaScript, you can build 292 CLI tools with JavaScript. 293 You can build iOS and Android 294 applications with JavaScript. 295 And you can even build like, 296 applications for IoT. 297 You can build applications for, 298 let's say Apple Var or any 299 other smartwatch on this earth. 300 So the possibilities 301 are actually endless. 302 So huge. 303 Shout out to Rayan, 304 who developed Node js. 305 Thank you so much. 306 And let me show you. 307 So if I open up my terminal, 308 okay, so let's say if I, open 309 up my terminal, so you can see that 310 this is my terminal window. 311 So this is a terminal window which is 312 of course outside the browser. 313 Now see what I can do is 314 I already have Node js 315 installed on my machine. 316 And don't worry, in the next 317 video I'll show you how 318 you can also install Node js 319 if I type node and enter. 320 Can you see that? 321 Actually I am into the Node 322 js, which is version 22. 323 And now if I say console log. 324 Hey there, do you think that 325 this code is going to execute? 326 Let's try. 327 If I do enter, this code 328 was executing fine. 329 If I say two plus five, you 330 can see I'm getting seven. 331 So can you see that I am able to exit 332 execute this code which was, which 333 is in JavaScript, which browsers 334 can run outside of the browser? 335 Why? 336 Because I have Node js installed. 337 Can this be possible if I didn't 338 have the Node js installed? 339 No, because I need the js engine. 340 So for this particular js engine 341 thing, I have installed Node 342 js, which provides this 343 JavaScript v8 engine in my 344 machine, in my local machine 345 and I can run JavaScript 346 outside the browser. 347 So I hope that with this 348 particular video you got a clarity 349 on what Node js is. 350 Okay, because we are going 351 to code a lot of things in Node js. 352 So you have to keep in mind that Node 353 js is not a framework or a library, 354 it is actually a JavaScript runtime. 355 Okay, so if I just go on 356 to the Node js official website. 357 Okay, so let's visit the official 358 website of Node js. 359 So what you will notice is it 360 says run JavaScript everywhere. 361 So Node js is a free again, 362 it's a free and open source. 363 Node js project is also, 364 is also open source cross platform 365 JavaScript runtime environment 366 that lets developers create 367 servers, web applications, command 368 line tools and scripts. 369 Okay, so this is basically your 370 what do you call Node js? 371 And you can see that we have a lot 372 of examples also which we will 373 eventually see as we move forward. 374 But in this video, the main 375 motive was to teach you 376 that what is Node js? 377 So with that, let's end the video 378 and I'll meet you in the next one. 379 Until then, bye bye and take care of.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "01-node-introduction.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/01-node-introduction.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0074067875,
      -0.017752003,
      0.013628408,
      -0.05618333,
      -0.02312125,
      0.014884971,
      0.023388477,
      0.011559321,
      0.015438413,
      0.015976483,
      -0.004527568,
      0.005773443,
      -0.0024677345,
      0.02491823,
      0.13795753,
      -0.0025989295,
      -0.0054524206,
      -0.0017832094,
      0.024318602,
      -0.022964302,
      0.0127850445,
      -0.005362487,
      0.020925216,
      0.004743596,
      -0.0051345187,
      0.00089183997,
      0.023254344,
      -0.015304465,
      0.029241156,
      -0.017496962,
      0.013202477,
      -0.0029907804,
      0.0019465181,
      0.01196737,
      0.0022397905,
      0.039655697,
      0.034478124,
      0.001087657,
      -0.038383882,
      -0.0015418164,
      -0.010834917,
      0.0029022717,
      -0.009232936,
      -0.02855081,
      0.0068977266,
      0.00063145754,
      -0.006532295,
      0.0039055736,
      0.004407769,
      0.02206023,
      -0.007188011,
      0.00715052,
      -0.0049081384,
      -0.18447861,
      -0.02104315,
      0.02042781,
      -0.012423965,
      0.020720355,
      0.008629878,
      0.0007076977,
      -0.021093115,
      0.009838427,
      -0.033475768,
      -0.0045322916,
      -0.01770394,
      0.013433044,
      0.011782112,
      0.018648934,
      0.017410595,
      0.0041925902,
      0.0013239327,
      0.017141199,
      -0.00750476,
      -0.0042627165,
      -0.015308227,
      -0.015413518,
      0.005870925,
      0.009664563,
      -0.009600793,
      0.0102224,
      -0.012035561,
      0.002090226,
      -0.0016691249,
      -0.0089119,
      0.010134569,
      0.00881931,
      -0.03673744,
      -0.015772935,
      -0.021573018,
      -0.010625933,
      -0.0011423875,
      0.009990373,
      0.00012692207,
      0.020483103,
      -0.007660295,
      -0.0024547006,
      -0.0050331363,
      0.004547966,
      0.0012752389,
      0.009747532,
      0.021354645,
      0.0060607027,
      -0.027905732,
      0.0017792012,
      0.020264968,
      0.012857765,
      0.0005391313,
      0.018425371,
      0.018543446,
      -0.029981308,
      0.0019049433,
      -0.004438893,
      0.0063742287,
      0.020936748,
      0.021140294,
      -0.18272708,
      0.03696222,
      0.008456482,
      -0.01654887,
      0.0144348545,
      -0.016662933,
      -0.009508612,
      -0.002020833,
      0.0016788103,
      -0.0034690895,
      0.005435137,
      -0.0072036246,
      0.03621066,
      0.0074463347,
      -0.010455128,
      -0.0104041,
      -0.012390195,
      -0.013888878,
      -0.0038158526,
      0.023865066,
      0.01004261,
      0.013770486,
      -0.0042215763,
      -0.00582701,
      -0.02516043,
      0.00031472673,
      0.023154723,
      -0.008314821,
      0.019561173,
      0.0046612974,
      0.0011240813,
      -0.029491499,
      0.016897613,
      -0.009408195,
      -0.016351057,
      0.026803425,
      -0.0025909126,
      0.012918209,
      -0.011497174,
      -0.0014367984,
      -0.02579146,
      -0.012419411,
      0.0049960385,
      -0.0042779124,
      -0.008384356,
      0.00073640316,
      0.0067947847,
      -0.0000058354362,
      0.022611817,
      -0.011122537,
      -0.003646647,
      -0.019813411,
      0.025994057,
      0.00058718876,
      0.018897602,
      0.0009935128,
      0.016548323,
      0.0012424327,
      0.0056335405,
      -0.010322214,
      -0.012166336,
      -0.001386991,
      0.0039583095,
      0.018021503,
      -0.0078741545,
      -0.0006844658,
      0.016480587,
      0.009745031,
      -0.0009928937,
      -0.0070960918,
      -0.0038511257,
      -0.020656424,
      0.014566275,
      0.015416273,
      -0.033294175,
      0.0041061137,
      -0.019229863,
      0.011508799,
      0.017751753,
      0.006519254,
      0.0022901483,
      -0.018060345,
      0.0031065103,
      -0.009387837,
      0.020152653,
      0.000022852495,
      -0.008595073,
      0.016652284,
      -0.037811115,
      0.011989283,
      0.0148179885,
      0.01455574,
      -0.013382189,
      0.011322946,
      0.020689763,
      -0.010619094,
      -0.006712099,
      -0.0061443364,
      0.016765663,
      0.018101636,
      -0.021176942,
      0.029902775,
      0.0022847846,
      -0.001920893,
      0.0031531213,
      -0.0076223956,
      -0.023218608,
      -0.0061095026,
      0.018830845,
      -0.002753367,
      0.003510218,
      0.0029856055,
      -0.020966904,
      0.0076744906,
      -0.01693989,
      -0.006620125,
      0.007004016,
      -0.0143287005,
      0.013188277,
      0.02343118,
      -0.0028015166,
      0.012127621,
      -0.0010986876,
      0.0126639865,
      -0.013560132,
      -0.00052277854,
      -0.009117844,
      -0.01083655,
      0.0046583693,
      0.041821923,
      -0.0046420814,
      -0.01222414,
      0.003676054,
      -0.026520709,
      -0.020381216,
      -0.00238049,
      0.0020348076,
      -0.006049303,
      -0.018798728,
      0.0033998366,
      -0.016668193,
      -0.013693041,
      -0.0129161645,
      0.0021295063,
      -0.0048745666,
      -0.011893243,
      -0.023950987,
      -0.004404989,
      0.007934753,
      0.024752218,
      0.005336065,
      -0.005940668,
      0.025664035,
      -0.026890505,
      -0.0009927044,
      0.0053012404,
      0.014913533,
      0.011860722,
      0.0017502058,
      0.008772956,
      -0.0035950947,
      -0.08547047,
      -0.0029604414,
      0.00028555508,
      -0.014685258,
      -0.007722024,
      -0.009035459,
      -0.0012834325,
      0.023251647,
      0.017311895,
      -0.0007172076,
      0.007865126,
      0.00025540165,
      0.02002761,
      -0.0032993103,
      0.008146725,
      0.00083821494,
      0.009662025,
      -0.003502353,
      0.010327483,
      -0.011588944,
      -0.000616583,
      0.015434929,
      0.0029139873,
      -0.02329156,
      0.015098531,
      -0.0038801574,
      -0.014341947,
      0.020659694,
      0.030815486,
      -0.0012491415,
      0.019487686,
      0.04206827,
      -0.02380262,
      0.0034121512,
      -0.0034712544,
      0.016087396,
      0.021622643,
      -0.022055073,
      -0.009303121,
      -0.028619433,
      0.0035151183,
      -0.010499048,
      0.018555755,
      0.021661242,
      0.00012254438,
      -0.003344115,
      0.009429299,
      0.018321026,
      -0.017481744,
      0.002849796,
      -0.018985806,
      0.0029143651,
      0.010702299,
      -0.019697549,
      0.0031261195,
      -0.014898608,
      0.0052690525,
      0.003806255,
      0.035385076,
      0.014118343,
      -0.00702953,
      -0.0075433683,
      -0.0044173207,
      -0.010871391,
      0.01165379,
      -0.009186102,
      0.004487492,
      -0.027425772,
      0.008141066,
      -0.009001678,
      -0.0069477987,
      -0.0059420364,
      -0.021431094,
      -0.014891821,
      -0.0028629785,
      -0.0051567783,
      -0.011805175,
      0.0018696903,
      -0.028010353,
      0.020575758,
      0.015201551,
      0.0064842775,
      0.008769891,
      0.024681661,
      0.03218505,
      -0.008523069,
      -0.0075605814,
      -0.0060997745,
      -0.021407042,
      -0.00433386,
      0.017056825,
      0.02909403,
      -0.019026937,
      0.011273456,
      -0.024007045,
      0.009223807,
      -0.02417215,
      -0.016959032,
      -0.002894131,
      0.0050092502,
      -0.018473338,
      0.013605697,
      -0.004152487,
      0.015406145,
      -0.0079119885,
      0.037071433,
      -0.008679141,
      -0.0010536361,
      0.0120691545,
      0.007202373,
      0.011268618,
      0.013276864,
      -0.01831119,
      0.00152387,
      0.01932263,
      0.027340997,
      0.0041380534,
      0.010345912,
      -0.021156639,
      -0.016393848,
      -0.013325544,
      -0.024615394,
      0.0137782665,
      0.0026718238,
      -0.0018352704,
      -0.007972791,
      -0.012656203,
      -0.004211995,
      -0.006561913,
      -0.018952774,
      -0.0046083815,
      0.0020718824,
      -0.008898296,
      0.011566619,
      -0.011012712,
      -0.016150877,
      0.010961786,
      -0.00031430658,
      0.006248727,
      0.027031409,
      -0.016582968,
      0.0031077857,
      0.010819966,
      -0.023571068,
      0.0056332513,
      0.004610215,
      -0.027783265,
      -0.0015036464,
      -0.0045671994,
      0.0010464347,
      -0.02518256,
      -0.010796209,
      -0.012271933,
      0.010620065,
      0.0016224907,
      0.02846461,
      0.018895017,
      -0.00957169,
      0.0010526737,
      -0.011755893,
      -0.014673985,
      0.010556007,
      -0.01500769,
      0.0016361482,
      0.010944319,
      0.01815732,
      -0.015932152,
      0.008513992,
      0.008688611,
      -0.0020185667,
      -0.015540281,
      -0.017335547,
      -0.03406682,
      0.008589219,
      0.010397841,
      -0.0061531337,
      -0.001467389,
      -0.010859548,
      0.013210639,
      -0.014467397,
      -0.025959877,
      0.0053348434,
      -0.014206107,
      -0.0073196143,
      -0.0027340956,
      -0.007686741,
      0.0061695385,
      -0.022224782,
      -0.00544943,
      -0.015271926,
      -0.0082709445,
      -0.002764756,
      -0.024169633,
      0.00984265,
      0.007549554,
      0.027652841,
      0.020035015,
      -0.009550706,
      -0.022458458,
      0.0011847983,
      -0.021716034,
      -0.02093067,
      0.0075577535,
      -0.0061036665,
      0.02267075,
      0.0021832897,
      -0.009111508,
      -0.008022754,
      0.0012244715,
      0.00834466,
      -0.013622583,
      -0.018986966,
      0.008348459,
      -0.020671045,
      0.024366705,
      0.00612562,
      0.0019790833,
      -0.014172738,
      -0.0254238,
      0.003755918,
      0.014890472,
      -0.024352299,
      -0.014939836,
      -0.005783879,
      0.0027532876,
      -0.018984294,
      -0.029851524,
      0.023270404,
      -0.0007567899,
      -0.024421005,
      0.0025390547,
      -0.0027711792,
      -0.0008639458,
      0.0042904057,
      -0.002159965,
      0.0026787007,
      0.014701921,
      0.008535662,
      0.0070074075,
      -0.0055874777,
      -0.015601749,
      -0.011482036,
      -0.011937999,
      -0.00001930944,
      -0.019674273,
      -0.016499506,
      0.016440092,
      0.022137066,
      -0.009162082,
      0.009362882,
      0.030918522,
      -0.0017165272,
      0.023614539,
      -0.014173627,
      -0.02259441,
      0.02940371,
      0.016403798,
      -0.00292034,
      -0.022496521,
      -0.013430539,
      0.011154192,
      -0.0121920705,
      -0.020876436,
      0.020386875,
      -0.01972126,
      -0.016230145,
      -0.02170387,
      -0.009954149,
      0.035620667,
      -0.10689127,
      -0.00074321555,
      -0.003933745,
      -0.0052130255,
      -0.01015355,
      -0.017798414,
      -0.0045677475,
      -0.02094526,
      -0.023543835,
      -0.025253005,
      0.009207141,
      -0.017587122,
      0.0070912368,
      0.017433116,
      0.003429215,
      -0.0072227614,
      0.0032061317,
      0.043560736,
      0.039253704,
      0.0035004208,
      0.010682783,
      0.0014112002,
      -0.01153207,
      0.01019299,
      -0.024166018,
      0.013595258,
      0.026370615,
      0.00035665926,
      0.0012808073,
      -0.0013470569,
      -0.004036046,
      0.0015239278,
      -0.0031327307,
      0.013633987,
      0.00962938,
      -0.0008725345,
      -0.012601672,
      0.010983268,
      0.0134086395,
      0.00874391,
      -0.0040161824,
      -0.0025072384,
      -0.00026654173,
      0.015694734,
      0.0053241244,
      -0.00040021283,
      0.03498047,
      -0.012609205,
      -0.003248399,
      0.061177388,
      -0.044604372,
      -0.010082637,
      0.010500387,
      -0.022221196,
      -0.00073601323,
      0.014945341,
      0.024923185,
      -0.015941953,
      -0.0103078885,
      -0.0005484788,
      0.010559215,
      0.007576527,
      0.0073417933,
      0.014753975,
      -0.014924917,
      -0.0013196451,
      0.021367839,
      -0.010132987,
      0.004458017,
      0.004314064,
      -0.0017885658,
      0.0015357072,
      -0.018032517,
      0.012386075,
      0.006707682,
      0.015698064,
      0.0035387783,
      0.011690018,
      -0.008356005,
      0.029292854,
      0.00048097334,
      0.009587584,
      -0.07535473,
      -0.014504224,
      0.013073551,
      0.00055559364,
      0.008663948,
      0.0025861224,
      -0.023166323,
      0.016807476,
      0.012779399,
      0.0024525898,
      -0.024015062,
      -0.015195605,
      -0.005653854,
      -0.009458165,
      -0.03706376,
      -0.00880438,
      -0.007634343,
      -0.0140732,
      -0.013809466,
      0.002337941,
      -0.011284006,
      -0.0009449956,
      -0.0035603142,
      -0.013834999,
      0.01650378,
      0.02556587,
      -0.023053061,
      0.015026612,
      -0.0060183224,
      0.008659475,
      0.0033448273,
      -0.1562622,
      -0.020332228,
      0.004809944,
      0.016001558,
      -0.010379353,
      -0.00046762676,
      -0.017776804,
      -0.004034279,
      0.016899597,
      -0.010727613,
      -0.010341105,
      -0.010555827,
      -0.01908292,
      0.0059370752,
      -0.0019082435,
      0.13091096,
      0.0122762,
      0.010628532,
      -0.0048772246,
      0.012531417,
      -0.015710732,
      -0.021322338,
      -0.007485628,
      0.008690731,
      -0.0102462415,
      -0.0062201526,
      0.008677784,
      -0.01968061,
      0.015165822,
      0.013715829,
      0.007903677,
      -0.027874036,
      -0.021481749,
      0.009184823,
      -0.0048327255,
      -0.019124433,
      0.0040653143,
      -0.017209537,
      -0.0070143905,
      -0.013967465,
      0.02950342,
      0.009162115,
      0.0059860125,
      0.023232201,
      0.001608612,
      -0.01465456,
      0.0057536564,
      -0.017024353,
      -0.021252818,
      -0.007808423,
      -0.0028989983,
      -0.06750411,
      -0.012135472,
      -0.0094437525,
      -0.0129135465,
      0.014291742,
      -0.017886814,
      0.026190195,
      -0.026154434,
      -0.0038636234,
      -0.008916113,
      -0.009046725,
      0.024242925,
      -0.0012987211,
      -0.020186303,
      0.0009772513,
      0.004881007,
      0.021165965,
      0.015442113,
      -0.004190001,
      0.01435139,
      0.013022089,
      -0.0026892042,
      -0.0110184625,
      -0.03974328,
      -0.019715102,
      0.0016459201,
      0.0125331115,
      -0.0038217849,
      -0.02047676,
      -0.0009548763,
      -0.006058161,
      -0.009401394,
      -0.009466761,
      0.01959615,
      0.0074218204,
      -0.010812723,
      0.011827431,
      0.003682627,
      -0.016232116,
      -0.0032800708,
      0.024626048,
      -0.009216595,
      0.021152902,
      -0.0010998294,
      0.019774716,
      0.020894838,
      0.005368219,
      0.0010035946,
      0.0052947896,
      -0.006299185,
      -0.0048848586,
      0.0056226864,
      -0.015989514,
      0.044398088,
      0.010755888,
      0.024034401,
      0.0245491,
      -0.00070506905,
      -0.0138906315
    ]
  },
  {
    "id": "genai_cohort_nodejs_02_nodejs_install_vtt",
    "content": "So hey guys, welcome to the second 2 video on Node J series. 3 And in this particular video 4 I'll walk you through how you can 5 install Node js on your machine. 6 So it's very simple. 7 What you have to do is you have 8 to go to this website that is 9 nodejs.org so this is the official 10 website from no of Node js. 11 And here what you can see is, 12 you can see this big button 13 that is download Node js lts. 14 Now what is this? 15 LTS means LTS here means 16 long term support. 17 That means it's a stable 18 version of Node js. 19 So there are two versions of Node js. 20 So let me just search if you 21 have this download button here. 22 So you can see that you have this 23 LTS and you have a current versions. 24 So what happens is that how the Node 25 js team basically develops is. 26 So if you can see that this 27 is your LTS version, 28 basically the stable version. 29 And currently the team of Node js 30 is working on this feature, this 31 particular version that is 23. 32 So this is the current version. 33 This current feature has a lot 34 of more features which are 35 upcoming, but they are not stable. 36 They are not recommended to use 37 on the machine, 38 on the production machine, right? 39 I mean if you want to play around 40 with these things, with the new 41 features you can go with 42 current, but they are not stable. 43 So there can be bugs, there 44 can be crashes and definitely 45 not recommended for 46 the production use case. 47 So LTS is a long term support. 48 Now what will happen is once the team 49 finishes this, once the team 50 develops all the features, 51 they are going to Release a version 52 24 that is going to be an LTS. 53 So all the features developed 54 in 23 will be moved to 24. 55 One interesting thing is that 56 all the even versions are 57 always lts and all the odd 58 versions are something that, 59 that teams are working on. 60 So we have to go with this LTS 61 version and you can select your 62 platform, Mac OS is there, Linux 63 is there and Windows is there. 64 So you can select and using, 65 you can just say NVM Docker. 66 So NVM is fine. 67 Okay, so what you can do is 68 you can use this also or 69 it's a package manager. 70 Or what you can do is you can 71 just download it from here. 72 So I would recommend to go 73 with this pre built installer. 74 So select the version 75 22 or any LTS version. 76 Okay. 77 Because you might be watching 78 this video in future 79 when There is version 24. 80 Just make sure that you 81 are on an LTS version. 82 Select your operating system 83 and which, like which, 84 what do you Call which architecture 85 you are using 86 and just click on this download. 87 Now once you download the setup, what 88 will happen is you will be prompted 89 with like, you know, next, next, 90 next, agree and all that stuff. 91 And node js will be installed 92 on your machine. 93 I won't be doing this step 94 because I already have node js 95 installed on my machine. 96 Now once you have done all this 97 process, let's verify that if you 98 have node js installed or not. 99 So first command is if you say node 100 version, you can see 101 that I'm getting v.22.11.0. 102 That means my node 103 version is 22.1 1.0. 104 If you are getting 24 or if you are 105 getting any number that's fine. 106 But if you are getting any error, 107 that is where you might have 108 messed up with the installation 109 and you might want to re 110 verify that what went wrong. 111 Okay, But I'm sure 99% in the chances 112 you will be right, you will 113 be able to install this thing. 114 There is only just 1% chance. 115 And even, even if it is not working, 116 try restarting your machine 117 because sometimes, you know, 118 things do work after the restart. 119 One more thing is that when you 120 install node you can just do an npm. 121 So there is a tool npm, 122 which unofficially stands 123 for Node Package Manager. 124 So this comes automatically 125 when you install node js. 126 So you can see that I 127 have npm version 10. 128 So we are going to use this npm 129 Unofficial Full Form Node Package 130 Manager to, to create, manage, 131 install external dependencies. 132 So let's say I want to install 133 some extra package, I want 134 to install some extra 135 dependency so I can use npm. 136 Or maybe I want to create my 137 own packages so I can use npm. 138 Okay, this comes along 139 with the node js. 140 So when you install this node js, 141 this automatically installs npm. 142 So you can see here it says node 143 js includes npm this thing. 144 So this is by default shipped 145 along with the node js only. 146 So if you are getting these numbers, 147 congratulation guys, you have 148 successfully installed node js. 149 One thing you can do is you 150 can just say node and you can 151 play around with the Node js. 152 So you can write any JavaScript code 153 and to exit out just say Ctrl D. 154 So Control D, that is Ctrl D is going 155 to exit out this particular repl. 156 Okay, so with node it basically gives 157 you a console where you can play 158 around with the Node js where 159 you can write any JavaScript code 160 and that executes like a charm.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "02-nodejs-install.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/02-nodejs-install.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.011974239,
      0.0069216136,
      0.016661441,
      -0.038903695,
      -0.0054322043,
      0.02516493,
      0.031308435,
      -0.0039617885,
      0.017680751,
      0.001980449,
      0.0050506843,
      -0.004979431,
      0.02036814,
      0.011474566,
      0.11902628,
      0.0023001388,
      -0.01348549,
      -0.0060935253,
      0.015440086,
      -0.02530012,
      0.0012670973,
      -0.02040236,
      0.023613764,
      0.010006834,
      -0.010999831,
      -0.01025791,
      0.016086934,
      -0.0023069782,
      0.016185993,
      -0.015243746,
      -0.0061254557,
      -0.0059032505,
      0.0035833216,
      0.019370753,
      -0.009441551,
      0.043040343,
      0.0019507465,
      0.01574503,
      -0.017030826,
      0.0067332955,
      -0.0123028485,
      0.016682055,
      -0.007996664,
      -0.03891875,
      0.007410971,
      -0.001980103,
      0.0025248958,
      0.005410336,
      -0.0031819344,
      0.017441971,
      -0.0022562207,
      -0.0065680505,
      -0.027813794,
      -0.18145548,
      -0.0064947284,
      -0.005610741,
      -0.0033086066,
      0.0072112377,
      0.021706367,
      0.0068996535,
      -0.013772999,
      0.0029404357,
      -0.041747913,
      0.00868247,
      -0.0068838713,
      0.00595831,
      0.021185104,
      0.012688728,
      0.016714595,
      -0.008679474,
      0.014705986,
      0.007855041,
      -0.0072038844,
      -0.0065730414,
      -0.021185229,
      -0.020155447,
      0.0029709109,
      -0.013336076,
      -0.021011861,
      0.027818255,
      0.0029243024,
      -0.015397021,
      -0.009472589,
      0.0032526243,
      -0.005203254,
      -0.012579696,
      -0.04056605,
      -0.0040672496,
      -0.02134155,
      0.00062398857,
      -0.001496072,
      0.02125256,
      0.0005148668,
      0.010077338,
      0.0005509954,
      0.012953477,
      -0.0044172616,
      0.017007302,
      -0.0029405814,
      -0.011020736,
      0.025945006,
      -0.003160168,
      -0.04198886,
      0.014353008,
      0.013682307,
      -0.002016513,
      -0.0035918655,
      -0.007936875,
      0.017884215,
      -0.029339673,
      0.011862923,
      -0.0076926313,
      0.011822869,
      0.010661234,
      0.0065086316,
      -0.18623555,
      0.008095871,
      0.016801624,
      0.0048699174,
      -0.00015735779,
      -0.0008285175,
      0.004275698,
      0.0023989715,
      0.0150494585,
      -0.0044930284,
      0.009657004,
      0.0006182255,
      0.028098661,
      0.00029055058,
      0.0022587134,
      -0.024852468,
      -0.009163618,
      -0.014006195,
      -0.00009785441,
      0.010408063,
      0.009572017,
      0.0056517813,
      -0.0041058864,
      0.00052241946,
      -0.014100667,
      0.013404915,
      0.015700651,
      0.012373517,
      0.015034049,
      0.012992951,
      -0.009574356,
      0.0032017594,
      -0.0018721523,
      -0.0057727518,
      -0.020383088,
      0.017084466,
      -0.0070435083,
      0.019212546,
      -0.006361782,
      0.008282536,
      -0.018059531,
      -0.019533815,
      0.021499345,
      -0.0019869553,
      -0.004200813,
      -0.0061938623,
      0.0055183386,
      -0.0037005043,
      0.021589186,
      0.010639291,
      0.0011203262,
      -0.01871218,
      0.0017714916,
      0.019624025,
      0.007483216,
      -0.0025071343,
      -0.019395072,
      0.0013591202,
      0.0040775724,
      -0.018590111,
      -0.01480104,
      -0.004977252,
      0.0044079684,
      0.020778032,
      -0.016017137,
      -0.0011787609,
      0.002167019,
      0.008083084,
      -0.01349843,
      0.0009298237,
      -0.01712362,
      -0.020694315,
      0.030435272,
      0.005971133,
      -0.027019823,
      0.0275812,
      -0.009800654,
      0.018847777,
      0.024800785,
      0.0050893957,
      0.007317338,
      -0.013799528,
      0.002494014,
      0.008040693,
      0.012230684,
      0.003262812,
      -0.0040935525,
      0.018873539,
      -0.026469734,
      0.012964549,
      0.020179102,
      0.017997798,
      -0.0072388123,
      0.005234463,
      0.0046585654,
      -0.0034860473,
      -0.016427228,
      -0.0070785186,
      0.014475291,
      0.007213939,
      0.007717674,
      0.00049453607,
      -0.009815918,
      0.024116257,
      0.001308587,
      -0.010091357,
      0.010511408,
      -0.00036472056,
      0.028712144,
      0.021207167,
      -0.0024781132,
      0.011341751,
      -0.0147688575,
      0.0058008092,
      -0.006555696,
      0.017714988,
      0.015730457,
      -0.013423518,
      0.026200106,
      0.012302472,
      -0.003114313,
      -0.0046513802,
      0.0025472287,
      0.0037234544,
      -0.009727696,
      0.00762815,
      -0.015487885,
      -0.028694367,
      0.0007297137,
      0.0380823,
      -0.013370614,
      -0.010072625,
      0.00046486995,
      -0.025489155,
      -0.027023684,
      -0.0073887375,
      0.008900799,
      -0.0064081647,
      -0.010508148,
      0.016244028,
      -0.014541658,
      -0.014580162,
      -0.0071596256,
      0.010524534,
      -0.009679022,
      0.0002356835,
      -0.010924705,
      -0.004506406,
      -0.017424544,
      0.025203077,
      0.002878694,
      0.0069910106,
      0.020946752,
      -0.023942977,
      -0.008916587,
      0.0037173193,
      0.004660221,
      0.0036010249,
      -0.01655353,
      -0.012948844,
      0.0077410834,
      -0.08420392,
      -0.023010626,
      0.0025259326,
      -0.034517504,
      -0.020838829,
      0.010180771,
      0.011813386,
      0.03458471,
      0.01134719,
      -0.0013533786,
      -0.011980864,
      -0.0017866968,
      0.010896915,
      -0.019797504,
      -0.0010251879,
      0.0045248386,
      0.008887921,
      -0.007904406,
      -0.0014430359,
      0.0029926226,
      -0.0067237066,
      0.00069981,
      -0.021010434,
      -0.014289308,
      0.020470021,
      0.007745521,
      -0.008675822,
      0.026617771,
      0.027075155,
      -0.009623342,
      0.01861176,
      0.040352296,
      -0.020130338,
      -0.01556756,
      0.0011244871,
      -0.00042028338,
      0.027551062,
      -0.018563762,
      -0.013667853,
      -0.039171617,
      -0.004035366,
      -0.03291406,
      0.010131005,
      0.021860754,
      -0.021230785,
      -0.0026801324,
      0.0074132923,
      -0.0048870514,
      -0.013779012,
      0.004651182,
      -0.030089093,
      0.010848626,
      0.0010163488,
      -0.03320025,
      0.013099423,
      -0.013269759,
      0.012127903,
      0.009897031,
      0.024739906,
      0.015160186,
      -0.015643205,
      0.0062705413,
      -0.011004755,
      0.018412929,
      0.011672671,
      0.0053686746,
      0.0033179729,
      -0.027535804,
      -0.0025869964,
      -0.008726586,
      0.0058959723,
      -0.008162198,
      -0.009034845,
      -0.022334144,
      -0.003925643,
      -0.0005294027,
      -0.0015043813,
      0.005426187,
      -0.018646717,
      0.007604286,
      -0.0042245425,
      0.012884682,
      -0.00038065546,
      0.02212814,
      0.011887229,
      -0.010208166,
      -0.01898166,
      0.00041405394,
      -0.010781185,
      -0.014214095,
      0.001673582,
      0.025225464,
      -0.0010419498,
      -0.006403468,
      -0.019552445,
      0.017009225,
      -0.018672345,
      -0.017075084,
      0.0042516114,
      0.016107049,
      -0.0009798905,
      0.0039004677,
      0.0036287538,
      0.0097007835,
      -0.018370796,
      0.0365712,
      -0.008045051,
      -0.01245839,
      0.006633541,
      -0.012437442,
      0.02403348,
      0.006277778,
      -0.00989657,
      -0.0025353415,
      -0.004416446,
      0.021420473,
      0.0072964667,
      0.012252855,
      -0.023867283,
      0.009043484,
      0.017658155,
      -0.0054076007,
      0.0029877617,
      0.016358078,
      0.0047860406,
      0.0056747086,
      -0.006164541,
      -0.0005611613,
      -0.011235391,
      -0.015938865,
      -0.011744643,
      0.0033440513,
      -0.023433764,
      -0.011186376,
      -0.0042757224,
      -0.012702423,
      0.022255324,
      -0.022737745,
      0.0052048997,
      0.020292532,
      -0.021609707,
      0.012898377,
      0.014149948,
      -0.03259288,
      -0.0054874336,
      0.01441621,
      -0.03414819,
      -0.019033298,
      0.0006463353,
      0.020445913,
      -0.008802115,
      0.0017496869,
      -0.011878501,
      -0.010067204,
      0.009077574,
      0.029714027,
      0.024399815,
      -0.013903418,
      -0.00029646198,
      -0.021664092,
      -0.011760713,
      0.019077664,
      -0.0013403465,
      -0.01533946,
      0.014303201,
      0.01808052,
      -0.0106163975,
      -0.011711184,
      0.00020267152,
      -0.0072604422,
      -0.019615116,
      0.00824853,
      -0.024469793,
      0.013162339,
      -0.0017073975,
      -0.004086082,
      0.025677996,
      0.00870099,
      0.017483788,
      0.010726418,
      -0.02223569,
      0.016210552,
      -0.014768482,
      0.0036713532,
      0.0026165068,
      -0.002243929,
      -0.0046140053,
      -0.011273314,
      -0.0015080436,
      -0.016147217,
      0.00754431,
      -0.0073186415,
      -0.005017858,
      0.0031948625,
      0.013769569,
      0.029938985,
      0.0045582876,
      -0.00084839476,
      -0.0023086818,
      -0.0015784518,
      0.001318186,
      -0.008706575,
      0.022217575,
      0.0051836674,
      0.028400844,
      0.006270898,
      -0.003830078,
      0.0036005653,
      -0.0015743491,
      0.014939871,
      -0.016471658,
      -0.0068448894,
      0.011242291,
      -0.010783281,
      0.014010445,
      0.026700288,
      -0.019779364,
      0.00892982,
      -0.029412359,
      0.014910836,
      0.026833957,
      -0.0034635817,
      -0.00642422,
      -0.022507465,
      0.013465063,
      -0.017747395,
      -0.028793106,
      0.01456729,
      0.012238505,
      -0.01632683,
      0.009983817,
      -0.006888638,
      0.023889432,
      0.015194926,
      0.0032113972,
      -0.00028198707,
      0.0064020786,
      -0.000008005423,
      -0.0025233438,
      -0.00081886514,
      -0.007617863,
      -0.021807909,
      0.0069170115,
      -0.004530055,
      -0.012445867,
      -0.01021082,
      0.0067158015,
      0.00980797,
      0.013832863,
      -0.006617452,
      0.02686014,
      0.006706716,
      0.0058033997,
      -0.011142857,
      -0.011234533,
      0.03893122,
      -0.009680471,
      0.0065713613,
      -0.011750267,
      -0.020177893,
      0.024262713,
      0.002013503,
      0.007623036,
      0.008807505,
      -0.010197984,
      -0.0028202566,
      -0.003949002,
      -0.000117462005,
      0.01927958,
      -0.1032997,
      -0.018235413,
      0.00014457841,
      0.027849767,
      -0.007900135,
      -0.020359717,
      0.0045386846,
      -0.016512629,
      -0.003700688,
      -0.023216192,
      -0.002929688,
      -0.018226832,
      -0.004832074,
      0.02551431,
      -0.017888201,
      -0.013620364,
      0.006606891,
      0.025622398,
      0.043527123,
      0.009758679,
      -0.008418622,
      0.0065625077,
      0.005662466,
      -0.0027940096,
      -0.03731833,
      0.016041797,
      0.01508674,
      0.010561452,
      -0.007996947,
      -0.0052309013,
      0.0060987924,
      -0.0041864333,
      0.011608792,
      0.0097459415,
      0.048918586,
      0.006261838,
      -0.013353658,
      0.0020922641,
      0.012553812,
      0.002937184,
      -0.0000891216,
      0.018192897,
      0.021143418,
      0.025952522,
      -0.0035078602,
      0.021377696,
      0.03658141,
      -0.011257533,
      -0.013997357,
      0.057000555,
      -0.033667494,
      -0.014420711,
      -0.024116395,
      -0.021879826,
      0.004434642,
      0.0003667739,
      0.0027446072,
      0.02196429,
      -0.009676678,
      -0.0030694017,
      0.017661234,
      -0.0024528594,
      0.010581556,
      0.035332743,
      -0.0081662005,
      -0.012497978,
      0.028084425,
      0.0036740815,
      0.006956913,
      -0.006803017,
      -0.0015778249,
      0.003584295,
      0.014199127,
      0.0025974642,
      -0.011989644,
      0.012122901,
      0.0094394125,
      0.025652781,
      0.004017173,
      0.024427742,
      0.010020881,
      -0.0015157672,
      -0.05972941,
      -0.004207852,
      0.00054303324,
      0.005866556,
      0.01226441,
      0.008205427,
      -0.023411011,
      0.016008131,
      0.018278534,
      0.01746217,
      -0.00028218506,
      -0.00382519,
      -0.019268291,
      -0.013435283,
      -0.014721536,
      -0.026398195,
      0.00606537,
      -0.008083385,
      -0.009806812,
      0.011236478,
      -0.002038607,
      -0.00929876,
      0.016133955,
      -0.01933066,
      0.024688382,
      0.024188917,
      -0.013731907,
      -0.011191617,
      -0.0035670581,
      -0.0055035767,
      0.018515395,
      -0.15134801,
      -0.0022943467,
      0.0025849377,
      -0.0007973935,
      -0.0015805671,
      -0.010409145,
      -0.017678838,
      -0.004425829,
      0.028791608,
      -0.015821176,
      0.013802039,
      -0.01353276,
      -0.0323804,
      -0.002597423,
      -0.0015497472,
      0.13886835,
      -0.014307265,
      0.029139154,
      0.009636196,
      0.020722898,
      -0.0023542696,
      -0.016045667,
      0.0021680403,
      0.011183204,
      -0.0016921412,
      -0.0023595458,
      0.00013903795,
      0.0024618653,
      0.03326021,
      0.019634295,
      0.030172681,
      -0.024140462,
      0.003072702,
      0.0036958882,
      0.012671144,
      -0.025021033,
      0.0050167413,
      -0.0077883005,
      -0.0066823317,
      -0.007395985,
      0.0053878273,
      0.00495804,
      0.01897233,
      0.016076982,
      -0.009272,
      -0.006856038,
      -0.0067839934,
      -0.030193022,
      -0.0084540285,
      -0.01747382,
      -0.008359281,
      -0.07143321,
      -0.009847145,
      -0.004848855,
      -0.015442861,
      0.049581192,
      -0.016598659,
      0.00015582502,
      -0.0066962224,
      -0.016577715,
      0.012104688,
      -0.004740039,
      0.024500974,
      -0.002082119,
      -0.00053689955,
      -0.018710818,
      0.010228234,
      0.016772274,
      0.03211354,
      -0.010613687,
      0.029482344,
      0.027463209,
      -0.0043806704,
      -0.014647063,
      -0.026708677,
      -0.017042551,
      -0.006723398,
      0.018627381,
      -0.0038396588,
      -0.010241537,
      -0.026244173,
      0.0012915803,
      0.006033411,
      -0.0017952474,
      0.025112048,
      -0.024532663,
      -0.0132517405,
      0.022433834,
      -0.008921125,
      -0.03796257,
      -0.0149886,
      0.0032252022,
      0.0024861293,
      0.0055869184,
      -0.017710568,
      0.016150134,
      0.00713074,
      0.013144396,
      0.0153829735,
      -0.008599199,
      0.005838034,
      -0.01853242,
      0.009867268,
      -0.019666074,
      0.0395857,
      0.024864687,
      0.023109939,
      0.019162267,
      -0.0011676359,
      -0.0202117
    ]
  },
  {
    "id": "genai_cohort_nodejs_03_hello_world_vtt",
    "content": "So I hope that your 2 installation was good and you had 3 a fun time installing 4 and playing around with Node js. 5 In this particular video, let's go 6 with some actual coding. 7 And don't worry, all the code 8 files that are going to be used 9 throughout this course, you will 10 get a GitHub link to that. 11 You can check the description also 12 of this particular video. 13 So don't worry, you 14 will get everything. 15 Okay, so in this particular video, 16 let's jump onto some coding 17 and see how we can use Node to, 18 you know, basically run any code, 19 any JavaScript outside the browser. 20 Now what I will recommend you is 21 to get a IDE so you can 22 choose any ID that you like. 23 In my case, I'm going to go 24 with Visual Studio code because 25 that's my favorite ID 26 and most probably yours as well. 27 Okay, so I already have this Visual 28 Studio code installed on my machine, 29 so you can also download it. 30 It is free, it is open source 31 and it is made by Microsoft. 32 So what we have to do is first 33 of all I'm going to create an empty 34 folder for today's project. 35 So what I have done here is you can 36 see that I have an empty project 37 empty folder of Node js, right? 38 So here let's create a new folder 39 and let's call it as hello World. 40 Okay? 41 So you have to create 42 an empty directory. 43 So now what I can do is I can 44 basically open this particular 45 folder in my terminal, right? 46 So I can just say CD and I can go 47 into the coding folder there I have 48 a Node js folder that I just made 49 and there I have a hello World. 50 Now I can just do a code dot 51 to open this particular 52 folder in my VS code. 53 So you can see that here is my VS 54 code and I have this folder open 55 now, right now my VS code is empty. 56 You can see there is no file. 57 There is nothing. 58 So let's start by creating a file 59 so you can name your file. 60 Anything and extension 61 should be JavaScript. 62 So what we are doing is we 63 are creating a new js file. 64 Feel free to choose any name, 65 but the extension should be js. 66 Now here let's write 67 a simple JavaScript code. 68 So hello from. 69 And I can just script js file. 70 So you can see that this is a very 71 simple console log statement. 72 Now in order to run this particular 73 file, in order to run this 74 particular code, what we can do is 75 from my terminal I can say 76 node and give the file name. 77 So file name was script script js. 78 As soon as I click enter, you 79 can see that I was able 80 to execute my script js file. 81 You can even say node and just 82 the script.js is not 83 necessary because of course 84 you are working with node. 85 So it assumes that you always want 86 to run a JavaScript file. 87 So it's optional to give 88 js at the end while you are 89 running it from the cli. 90 But you can see that using this node 91 script, I was able to run this 92 circle script file right now here 93 you can have all things like any 94 valid JavaScript code is going to 95 execute. 96 For example, you can have const 97 a equals to 1, you can have a const 98 b equals to 2 and then you can have 99 a const sum which is like a plus b. 100 And then you can just say console dot 101 log that the sum I can say sum is. 102 And then just console log the sum. 103 Now you have to save it. 104 And if I rerun it, you can 105 see that I am getting sum S3. 106 So as you have seen that we 107 can run any valid JavaScript 108 code using this node CLI. 109 Okay? 110 And one very interesting thing is 111 that when you just say node, you 112 can just say hyphen hyphen help. 113 So this is going to give you a help 114 that what all things are possible. 115 So you can see that here 116 is a full documentation. 117 So let me just do it again 118 and let's go back to the top. 119 So you can see that 120 you can just say node. 121 Okay? 122 Then you can supply some options. 123 These options are these all 124 the options which are available. 125 And then you can just 126 give a file name. 127 For example, script js can be given, 128 any file name can be given here. 129 And then you can give the arguments. 130 These arguments basically 131 are like CLI arguments. 132 So for example, you can say node 133 script js and you can 134 pass a equals 1 because 2. 135 So these are basically your 136 command line arguments. 137 So don't worry. 138 As we proceed further, I'll show you 139 that what are these command line 140 arguments and how you can build your 141 own CLI tool And you can even do 142 like node inspect, you can give some 143 options, then you can give the file 144 name, then you can give the port and 145 all that. 146 So you can see that we have 147 a lot of options 148 in which we have already seen. 149 One that was the hyphen 150 hyphen version. 151 So if you scroll down to V, 152 these are alphabetically sorted. 153 So if I just keep on scrolling. 154 Yeah. 155 So you can see that we have 156 already seen this, right? 157 We can say hyphen V or hyphen 158 hyphen version, It's a capital V 159 that prints the node js version. 160 So that means I can say node. 161 Okay, and at the end, yeah, so I 162 can just say node hyphen capital V. 163 Okay, sorry, node hyphen V. 164 Or I can say node 165 hyphen, hyphen version. 166 Okay, hyphen, hyphen version 167 to get the same output. 168 Similarly. 169 Similarly, let's again do a hyphen, 170 node hyphen, hyphen help. 171 And you can see we have 172 node V8 coverage. 173 We have this UV thread pull size. 174 This is very important. 175 We will cover this. 176 So this is how basically 177 you can see all the available 178 commands in NodeJS. 179 So you have this Var. 180 So basically this runs in a Var mode. 181 Now let me tell you what is this. 182 Okay, so let's say if I'm 183 changing something, let's say 184 if I updated this to V1. 185 Every time I have to run this, 186 I have to say node and I have 187 to say dot script js. 188 Now if I change something to let's 189 say V2, I again have to do this. 190 But what you can do, you can just 191 say node, hyphen, hyphen Var. 192 So this will basically keep 193 on watching the file. 194 So sorry, I forgot to give the name. 195 So node, hyphen, hyphen, 196 Var and script and enter. 197 So now what it is doing 198 is it is watching. 199 It is not exiting out. 200 Anytime I change something 201 and save, you can see it 202 automatically reruns, okay? 203 If I change something to let's 204 say V9, you can see it 205 automatically reruns, right? 206 So I am currently in a Var mode. 207 To exit out of it, I 208 can just say Control C. 209 So to exit this particular loop 210 I can just say control plus C. 211 Whether you are on Mac or 212 Windows doesn't matter. 213 It's always the control 214 C to exit out. 215 Okay, so you can see all 216 the available commands are available 217 to us in the help mode. 218 So there is no need to remember them. 219 As you go further, as you proceed, 220 you will see these things. 221 Okay, so you have a lot of 222 commands, you have the description. 223 Feel free to read it. 224 There is no need to read all of them. 225 So as we will need them, we 226 will keep on reading them, we 227 will jump into the documentation 228 and we will implement it. 229 So this was your Node cli, similar 230 to this, similar to your Node 231 cli, you have this npm, right? 232 So if you say npm hyphen hyphen 233 version, you remember that npm 234 Unofficial Full Form Node 235 Package Manager also comes along 236 when you install Node js. 237 Now let's do npm help, right? 238 To see what all things are available. 239 So you can see we can use npm 240 install to install something. 241 npm install some package thing. 242 npm test npm run npm 243 hyphen L is there, right? 244 npm help is there. 245 Then you have all the commands like 246 access, add, user, audit, bugs. 247 So you have a lot of commands 248 available in npm as well. 249 Right. 250 So we are going to use this npm 251 to majorly use install this 252 command and this command. 253 So we will install a lot 254 of dependencies when we are going 255 to build our project. 256 Yeah, this was basically for this 257 particular video in which I 258 wanted to demonstrate that how 259 you can use this CLI to run 260 JavaScript files and to get the 261 help and how you can explore 262 things on your own.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "03-hello-world.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/03-hello-world.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0046224957,
      -0.00040496266,
      0.029869948,
      -0.058968525,
      -0.015360616,
      0.00058070564,
      0.012724317,
      -0.006786045,
      0.013884738,
      0.013163504,
      -0.012085117,
      -0.010881876,
      0.008699112,
      0.027464915,
      0.12914716,
      -0.0021771917,
      -0.021230496,
      -0.004770779,
      0.012171654,
      -0.025602857,
      0.010640513,
      -0.009949312,
      0.03236922,
      -0.006701229,
      -0.014778142,
      -0.009659553,
      0.021617576,
      0.0062500495,
      0.013937383,
      -0.0063527375,
      -0.0028873794,
      -0.0071650664,
      -0.010433694,
      0.0019402443,
      -0.006435047,
      0.02240695,
      0.022347078,
      0.0016092553,
      -0.017660806,
      0.005622642,
      -0.028769795,
      -0.0013950459,
      0.003043904,
      -0.03501646,
      0.022741387,
      0.009359494,
      -0.003514656,
      -0.008220521,
      0.008588133,
      0.040400572,
      -0.008518029,
      -0.0137867695,
      -0.017411038,
      -0.16953288,
      -0.009611383,
      0.007886939,
      -0.005306453,
      0.0007229828,
      0.03244819,
      -0.0013488735,
      -0.017677685,
      0.0019061869,
      -0.045071784,
      0.0019631751,
      -0.02463961,
      0.00051049184,
      -0.009959533,
      0.010965486,
      0.010609347,
      -0.017444089,
      0.007087197,
      0.02434997,
      -0.008055708,
      -0.0055888025,
      -0.024623714,
      -0.0060247947,
      0.0070057563,
      0.007310837,
      -0.011208183,
      0.024350697,
      -0.0032639832,
      -0.009181617,
      -0.00087071134,
      -0.017924437,
      0.011391993,
      0.0066567347,
      -0.0370731,
      -0.020090966,
      -0.03689466,
      -0.009511954,
      -0.002157352,
      0.018189445,
      -0.01166904,
      0.015007296,
      -0.011017054,
      -0.007871637,
      -0.006127315,
      0.00053053984,
      -0.0051026964,
      -0.005079017,
      0.029190404,
      -0.011480836,
      -0.029527906,
      0.016122814,
      0.009490235,
      0.021790838,
      0.0066363686,
      0.0073522716,
      0.0161507,
      -0.020991856,
      0.011480501,
      -0.0091258325,
      -0.0031305365,
      0.025487477,
      0.012078442,
      -0.17577824,
      0.008767813,
      0.017084006,
      -0.0024831397,
      0.018777708,
      -0.015459603,
      0.006840739,
      -0.014318668,
      -0.0051141507,
      -0.01161951,
      0.010535208,
      -0.0065588476,
      0.031757433,
      0.011426624,
      0.004519322,
      -0.014745883,
      -0.017091377,
      -0.029609084,
      -0.007485465,
      0.016258027,
      0.00468082,
      -0.0048074652,
      -0.008247004,
      -0.0030429927,
      -0.035453487,
      0.013394731,
      0.016224716,
      0.0031802037,
      0.030041307,
      0.005109365,
      -0.0013479821,
      -0.0018316654,
      0.009552385,
      -0.0015298702,
      -0.024384666,
      -0.00040495902,
      -0.020417178,
      0.02876596,
      0.0027953354,
      0.020896016,
      -0.021411795,
      -0.006977887,
      0.006940358,
      0.0021919864,
      0.00035081911,
      0.018652923,
      -0.0021751164,
      -0.002732628,
      0.014779775,
      0.018492108,
      0.012373909,
      -0.016021978,
      0.009895675,
      0.003460436,
      0.018234588,
      -0.011111781,
      -0.0003487021,
      0.01990448,
      -0.0010462285,
      -0.017126892,
      -0.012701811,
      0.011856136,
      -0.009510783,
      0.02211123,
      -0.0032991369,
      0.0074049244,
      -0.004785723,
      0.012158436,
      0.004212242,
      -0.0008742306,
      -0.020525826,
      -0.010042532,
      0.022556476,
      0.011571519,
      -0.026111618,
      0.029078,
      -0.022344545,
      0.007565389,
      0.034046017,
      0.005818696,
      -0.010601927,
      -0.030182663,
      -0.0037515676,
      0.015958423,
      0.0052935528,
      0.014594971,
      -0.01505618,
      0.00028831145,
      -0.043336276,
      0.015999721,
      0.024771942,
      -0.0035226794,
      -0.010099507,
      0.006575677,
      0.0128491055,
      -0.0017982804,
      -0.00940201,
      0.0012685194,
      0.015624473,
      0.018185275,
      -0.008419356,
      0.027417952,
      -0.0074127726,
      0.0057482175,
      -0.008593425,
      0.006231632,
      -0.00496179,
      -0.0027646245,
      0.02218762,
      0.010385857,
      -0.011147015,
      0.016391216,
      -0.018516919,
      0.001492024,
      -0.005572483,
      0.029398952,
      0.0057990956,
      -0.023002218,
      0.009434169,
      0.0020069017,
      0.0037300726,
      -0.007623422,
      0.0013099101,
      0.0025349592,
      -0.0022220684,
      0.007339049,
      -0.004957239,
      -0.015864514,
      0.002197685,
      0.048153654,
      -0.008169847,
      -0.025953347,
      -0.00578706,
      -0.040577695,
      -0.020529443,
      -0.019077208,
      0.006937031,
      0.006982307,
      -0.01207189,
      0.006666982,
      -0.01625396,
      -0.005773152,
      -0.0025967618,
      0.00072883035,
      -0.0051612267,
      0.005551765,
      -0.0061431406,
      -0.02906461,
      0.006981532,
      0.021826942,
      0.01627771,
      0.0143321715,
      0.03556213,
      -0.029690627,
      0.00036264613,
      0.015104659,
      0.008016674,
      0.0077062557,
      -0.009803206,
      -0.0068348455,
      0.011337301,
      -0.08655268,
      -0.009096453,
      0.0060066977,
      -0.024584604,
      -0.0077604786,
      0.013824204,
      0.0041160765,
      0.022968875,
      0.010626933,
      0.019147808,
      -0.0057015857,
      0.005673956,
      0.01015182,
      -0.014078398,
      0.002554729,
      -0.000317162,
      -0.0010166082,
      -0.014718233,
      0.00850611,
      0.009878513,
      0.00836478,
      -0.00019742204,
      0.00075298705,
      -0.018600592,
      0.02018538,
      -0.004408689,
      -0.005784064,
      0.02983889,
      0.03955696,
      -0.011641776,
      0.015350247,
      0.038440682,
      -0.032647982,
      -0.024780512,
      -0.017596442,
      0.005136832,
      0.022744693,
      -0.014681192,
      0.006921726,
      -0.012833353,
      -0.0065236646,
      -0.019900426,
      0.018891277,
      0.019984685,
      -0.017445758,
      -0.003916614,
      0.0058155134,
      -0.012845452,
      -0.018131206,
      0.015463875,
      -0.031378787,
      0.010028792,
      0.006942015,
      -0.016941024,
      0.019187367,
      -0.0093556475,
      0.019716766,
      -0.0062445356,
      0.032834996,
      0.006013339,
      -0.0067038066,
      0.010749806,
      0.013641719,
      0.01052506,
      0.0127022555,
      -0.0058772326,
      0.009311941,
      -0.016042449,
      -0.0033737575,
      -0.017033823,
      0.012621209,
      0.006699886,
      -0.0091725355,
      -0.028890532,
      -0.007561511,
      0.00018808787,
      0.020476071,
      0.012619542,
      -0.0189345,
      0.019403405,
      0.013546058,
      0.0041002757,
      -0.00650441,
      0.024358794,
      0.013103164,
      0.005080469,
      -0.0056600096,
      0.00381368,
      0.004687443,
      -0.025941877,
      0.026781494,
      0.018015701,
      -0.016808122,
      0.0043795756,
      -0.011262179,
      0.016647857,
      -0.034773935,
      0.0025423467,
      -0.015788833,
      0.023249406,
      -0.00884887,
      -0.006640222,
      -0.0057843667,
      0.0047298055,
      0.0033999556,
      0.014605125,
      0.0036534485,
      -0.0033427563,
      -0.011075213,
      -0.020468416,
      0.0089959605,
      0.0074283746,
      -0.012642409,
      0.009861302,
      -0.0009949101,
      0.01846293,
      0.016176982,
      0.016739858,
      -0.0046248967,
      -0.0015756608,
      0.017929018,
      -0.013848523,
      -0.004551762,
      0.0024074183,
      -0.0071536815,
      0.009941126,
      0.005736269,
      0.0016314175,
      -0.017530711,
      -0.020171624,
      -0.007164122,
      0.015398959,
      -0.034000635,
      -0.00027153667,
      -0.0010644794,
      -0.0012494389,
      0.0057670567,
      0.0004806672,
      0.0062275864,
      0.018477954,
      -0.028640581,
      0.0009704965,
      0.0027398232,
      -0.037921015,
      -0.007737956,
      0.01925816,
      -0.024069835,
      -0.018094158,
      0.0007154226,
      0.0091912765,
      -0.008076808,
      -0.010933416,
      -0.010643998,
      0.00067428773,
      -0.002739321,
      0.021173004,
      0.032021847,
      -0.016806226,
      -0.014327382,
      -0.022897886,
      0.00047627633,
      0.005746446,
      -0.010880024,
      -0.01402899,
      0.002708901,
      0.028174516,
      0.0040722345,
      0.0040487694,
      0.016325077,
      0.0027847746,
      -0.003120209,
      -0.0085459305,
      -0.038855463,
      0.0009716962,
      -0.0048696073,
      -0.0197926,
      0.0043698056,
      -0.00022064579,
      0.014443754,
      0.011333796,
      -0.0061272443,
      -0.0018757285,
      -0.008105329,
      -0.014622497,
      -0.0006949024,
      0.00033410583,
      0.0019827425,
      -0.021336876,
      -0.012759349,
      -0.009654767,
      0.016122125,
      -0.016190538,
      -0.015879441,
      0.010939167,
      0.014788606,
      0.016612181,
      0.016461922,
      -0.014993066,
      -0.003332246,
      0.0023677412,
      -0.0139648765,
      -0.015641943,
      -0.00027232926,
      -0.004795014,
      0.009451403,
      0.0007794145,
      0.003955397,
      0.0036016854,
      -0.003390702,
      0.008328072,
      -0.012469861,
      -0.0014856232,
      -0.0024392467,
      0.0055457926,
      0.027182017,
      0.016220137,
      -0.020058516,
      0.0063084676,
      -0.029307174,
      0.009965128,
      0.012887037,
      0.0063759307,
      -0.0063040853,
      -0.019600175,
      0.011251229,
      -0.021914471,
      -0.048954856,
      0.040457126,
      -0.0013182288,
      -0.013927134,
      -0.004080014,
      0.004665317,
      -0.00029995374,
      -0.008253355,
      -0.008926242,
      0.014166179,
      0.0126957325,
      0.008100943,
      0.017865777,
      0.0052199126,
      -0.0023909463,
      -0.008034962,
      -0.00755564,
      -0.0029184273,
      -0.007078089,
      -0.011345572,
      0.019833371,
      0.006289883,
      -0.009267169,
      0.0032818338,
      0.019068388,
      0.015135623,
      0.008859799,
      -0.0133158555,
      -0.02157301,
      0.04124283,
      -0.009674813,
      0.0144386925,
      -0.008955605,
      -0.012060774,
      0.022547208,
      -0.0030190633,
      -0.013133813,
      -0.00015501336,
      -0.0023598506,
      -0.026402276,
      -0.004529813,
      0.010261965,
      0.016871631,
      -0.12885237,
      0.017139427,
      -0.018732032,
      -0.0018286835,
      -0.010540491,
      -0.023073904,
      -0.0036607613,
      -0.017673535,
      -0.020463685,
      -0.0025826981,
      0.011056475,
      -0.018965643,
      0.0036733476,
      0.01841925,
      -0.008697771,
      -0.024907624,
      0.018053439,
      0.031360537,
      0.046119884,
      0.0018440067,
      -0.009503757,
      -0.0038315256,
      0.0064356797,
      -0.0051388037,
      -0.040121943,
      -0.00024929192,
      0.023530073,
      0.0007726346,
      -0.016093181,
      -0.014981463,
      -0.0023845444,
      0.0035124086,
      0.0012086524,
      0.0030525047,
      0.030403264,
      0.007290615,
      -0.02065208,
      0.008219204,
      0.01808856,
      -0.0003429086,
      0.00014112612,
      -0.00044086901,
      0.023904402,
      0.024254408,
      -0.012860501,
      0.009910494,
      0.011602306,
      -0.008693381,
      0.0056846156,
      0.054749765,
      -0.034189187,
      -0.03471213,
      0.0046798773,
      -0.014088642,
      -0.011634378,
      0.009575145,
      0.018796235,
      -0.002034649,
      -0.023499956,
      0.007956029,
      0.023286704,
      0.006284578,
      0.017755004,
      0.027064586,
      -0.030165631,
      -0.00849518,
      0.024517205,
      0.0059426776,
      0.0036649888,
      -0.018990964,
      -0.0056361808,
      -0.008568229,
      -0.004670684,
      0.015377881,
      -0.00062275754,
      0.013890372,
      0.0057864417,
      0.016963236,
      0.0020611614,
      0.016692802,
      -0.012875902,
      -0.011440341,
      -0.06950379,
      -0.017683666,
      0.004796993,
      0.0034162118,
      0.0012505595,
      0.0024046898,
      -0.023251217,
      0.008536019,
      -0.002458645,
      0.0116893565,
      0.0013044148,
      -0.008248024,
      0.008575947,
      0.0033491408,
      -0.015031647,
      -0.019607848,
      0.0015518399,
      -0.032351512,
      -0.014428705,
      0.008684008,
      -0.010811269,
      0.004015789,
      0.0059720594,
      -0.013129632,
      0.009013851,
      0.021641787,
      -0.03296369,
      0.009432257,
      -0.0031035487,
      -0.009808183,
      0.020229334,
      -0.15470093,
      -0.016707208,
      0.006804841,
      0.010438258,
      0.003748344,
      0.0061244224,
      -0.008024307,
      0.0032984663,
      0.010199162,
      -0.038176548,
      -0.007884548,
      -0.030727876,
      -0.03350898,
      0.0068636155,
      -0.013300877,
      0.11980425,
      -0.008471538,
      0.014805703,
      0.0104088755,
      0.042296782,
      -0.015032758,
      -0.0031003559,
      0.0010194958,
      0.016279202,
      -0.009003091,
      0.0051161028,
      0.008570826,
      -0.0066394764,
      0.033215925,
      0.006671619,
      0.020910935,
      -0.021961395,
      -0.011428384,
      0.014295671,
      0.002653339,
      -0.0234439,
      -0.0028491,
      -0.01200851,
      0.009135853,
      -0.013999303,
      0.0068615745,
      0.011257233,
      0.012638123,
      0.011454879,
      -0.002978234,
      0.0059278756,
      -0.009701765,
      -0.02988215,
      -0.0013936333,
      -0.022494867,
      -0.012005241,
      -0.053753536,
      -0.0057955673,
      -0.008743968,
      0.0023531504,
      0.034376487,
      0.0006858412,
      -0.0005140209,
      -0.0045320094,
      -0.0057654553,
      0.012685718,
      -0.012648476,
      0.012133649,
      -0.0069197062,
      0.003230498,
      -0.01934018,
      0.0025820092,
      0.03399487,
      0.019156635,
      -0.0071117827,
      0.02327248,
      0.008660861,
      -0.018639803,
      0.006561033,
      -0.030886963,
      -0.014279588,
      0.00006332449,
      0.010461411,
      -0.0049597006,
      -0.01651314,
      -0.007920815,
      0.006688276,
      -0.0009644943,
      -0.021041082,
      0.0125245815,
      -0.0174835,
      -0.023103217,
      0.00460973,
      -0.009231583,
      -0.016727723,
      0.0027476645,
      -0.003600404,
      -0.011165148,
      -0.0017762398,
      -0.033953194,
      0.0026853082,
      -0.0014063988,
      0.015863692,
      -0.000706087,
      -0.0075970963,
      0.009997199,
      -0.0071101193,
      0.015626919,
      -0.019193286,
      0.031613056,
      0.022511385,
      0.017754372,
      0.0030278342,
      0.01982429,
      -0.023123404
    ]
  },
  {
    "id": "genai_cohort_nodejs_04_node_vs_browser_vtt",
    "content": "Do you remember in the last video 2 I said that we have created 3 a script js file and you can write 4 any valid JavaScript code 5 here that is going to run. 6 Actually that was half lie. 7 Let me tell you, if you are 8 from a JavaScript background, that 9 means you have been working 10 with JavaScript with browsers. 11 Tell me one thing, if 12 I say alert, right? 13 And I say, for example, you know 14 this is an alert message, what is 15 going to happen if you run this, 16 this particular piece of code on 17 browser, you will get an alert 18 window, right? 19 So if you don't believe 20 me, let me show you. 21 So if I just open up an inspect 22 element and I go into the console 23 and I do this, you can see 24 that you are getting an alert. 25 Now let's try to run this code, 26 okay, let's try to run this code 27 in the browse in the node js. 28 And what happened as soon as I 29 tried to run this code in my node 30 js environment, I got an error. 31 The error says alert is 32 not defined Piyush. 33 How come this particular code, 34 this alert is working in the browser 35 but the same JavaScript code 36 is not working in the Node js? 37 So here is a subtle difference 38 that you have to understand. 39 See guys, first of all, 40 a lot of things that you use 41 in your JavaScript code 42 is a part of your web API. 43 For example, this alert, this alert 44 is not a part of JavaScript, okay? 45 This is a browser given functionality 46 to you because whenever 47 you call this line, browser 48 gives you this ui, right? 49 This is the responsibility 50 of the browser to render 51 this thing on the ui. 52 But in Node js, which is basically 53 a command line, you don't have these 54 functionalities, you don't have 55 any window, you don't have any ui, 56 you don't have any these alerts. 57 So These browser related APIs, 58 like you have fetch, you have 59 alert, you have document, 60 you have window object 61 that is not available in node js. 62 So that means anything, anything that 63 is related to this window object. 64 So if I just say window, 65 okay, wind, window. 66 So you can see that on 67 the window, window basically means 68 this browser, I have a lot 69 of features on the window. 70 I can have document, add, 71 event listener, I have 72 the document object, I have the set 73 interval, set timeout. 74 So, so there are a lot 75 of features that a browser gives me. 76 Like it gives me the fetch 77 for making API calls. 78 So these all features are 79 actually the features given to you 80 by the browser which are not, 81 which are not available here. 82 Got it. 83 So you can write any valid 84 JavaScript code which is given 85 to you in the native 86 JavaScript, it should not be a 87 feature that is coming from a 88 browser because we don't have a 89 browser window here. 90 This is a, Node js environment. 91 So that means now you have two 92 different environments to run js. 93 One is you have a browser where 94 you can have your js code, 95 you can have your browser APIs. 96 So browser APIs include like 97 things like, you know, 98 fetches there and this alert 99 thing is there, right? 100 But when you move into the Node js 101 environment, these things goes away. 102 You have the core js, 103 you have extra things. 104 Okay, I'll tell you, you 105 have some extra things. 106 For example, you have file system, 107 you have crypto module, you 108 can do crypto typography here. 109 You can do a lot of more 110 things here, right? 111 That is given to you by the Node js. 112 You can do file handling here, 113 but you cannot natively do fetch. 114 You cannot do alert. 115 You cannot do something, 116 sorry, not alter. 117 I mean alert. 118 You cannot do something like 119 document getelementbyid. 120 Because that doesn't make sense here. 121 Okay, so Node js has rewritten all 122 these bindings which are required. 123 For example, okay, understand this. 124 In browser you have this 125 something known as set timeout. 126 Yes or no, you have the set timeout. 127 Do you know that this set 128 timeout is a part of web API? 129 So JavaScript natively 130 doesn't support this. 131 Any clocks, timers or 132 something like that. 133 That's a browser feature 134 that browser gives you. 135 But in Node js also 136 you can use set timeout. 137 It is valid in here also 138 you can use this thing. 139 Okay, so how are you able 140 to use this set timeout? 141 Because when the creator of Node 142 js return this Node js engine, 143 he has reimplemented these APIs. 144 So he has only implemented 145 those parts again which are required 146 in the CLI environment. 147 In the Node js environment also, 148 for example, you might 149 need set timeout, right? 150 You might need set interval, 151 but in any case I don't 152 need alert on my backend. 153 Okay, so these particular 154 things are not present. 155 So these things are, 156 are not present here. 157 Okay, so even though it is 158 JavaScript, but yeah, the 159 JavaScript that you use on 160 browser is not guaranteed to run 161 here, and the JavaScript code 162 that can be run in the Node js is 163 not guaranteed to run here. 164 Depends code. 165 JavaScript will always run, 166 but features injected by the browser 167 API or the Node js API will 168 not work in a cross platform. 169 Okay, so there are subtle differences 170 that you have to keep in mind.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "04-node-vs-browser.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/04-node-vs-browser.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.004210592,
      -0.014490109,
      0.016775334,
      -0.056209493,
      -0.03491371,
      -0.0048014545,
      0.019852025,
      0.00081762375,
      0.01573478,
      -0.007855805,
      -0.008339306,
      0.00090076943,
      0.001317832,
      0.038348056,
      0.12613261,
      -0.0047044414,
      -0.016615653,
      -0.003690504,
      0.014397907,
      -0.014447207,
      0.014181566,
      -0.00035233595,
      0.019287627,
      0.0056672622,
      -0.009085822,
      -0.016639126,
      0.0059089153,
      -0.022078147,
      0.021483203,
      -0.03921225,
      0.014571743,
      -0.00721327,
      -0.0011351649,
      0.019618891,
      -0.0051272516,
      0.04580943,
      0.039805785,
      0.0044061895,
      -0.010254169,
      -0.00047426773,
      -0.025199633,
      0.0117145805,
      0.02662905,
      -0.019205263,
      -0.0110854935,
      0.008658844,
      0.0045180535,
      0.0013595053,
      0.008729689,
      0.014576236,
      -0.0071561174,
      0.014877495,
      -0.00926243,
      -0.16517462,
      -0.015766954,
      0.021120045,
      -0.01602745,
      0.0074847294,
      0.018973703,
      -0.0046101543,
      -0.031492256,
      -0.0036679623,
      -0.026132924,
      -0.00446461,
      -0.013328903,
      0.009181176,
      0.004753032,
      0.023157945,
      0.0082472935,
      0.0017442618,
      0.0037210376,
      0.009402116,
      -0.010052018,
      -0.016481685,
      -0.0068098614,
      -0.00956986,
      -0.00033316299,
      0.01326806,
      -0.0007586902,
      0.007941682,
      0.009436109,
      -0.011044497,
      0.0009997303,
      -0.018543592,
      0.011497484,
      0.0028157549,
      -0.034374304,
      -0.021545177,
      -0.017435856,
      -0.016277427,
      0.005312093,
      0.0057462235,
      0.002987069,
      -0.0012067466,
      -0.005923989,
      0.0024205167,
      -0.010992434,
      0.0189037,
      0.015433229,
      0.011459571,
      0.03364324,
      0.012137982,
      -0.034076154,
      -0.0052114716,
      0.0050279875,
      -0.002508942,
      -0.0088204695,
      0.0076114465,
      0.016692663,
      -0.03453645,
      -0.0054196767,
      -0.00604812,
      -0.0037653863,
      0.015921678,
      0.0042184712,
      -0.18663044,
      0.020234274,
      0.009975092,
      -0.007868215,
      0.024617625,
      -0.02113837,
      -0.00079798355,
      0.008383604,
      0.0056491387,
      -0.012852107,
      0.009367251,
      0.007590935,
      0.02240206,
      0.01709538,
      0.00066829484,
      -0.018190835,
      -0.016121348,
      -0.011957495,
      -0.007105451,
      0.012453743,
      0.017031817,
      0.0052843713,
      0.006250959,
      -0.006361429,
      -0.037373997,
      0.009169773,
      0.04267231,
      -0.0027159224,
      0.016020829,
      -0.00096068066,
      -0.0061186636,
      -0.013305577,
      0.009457901,
      -0.015136191,
      -0.03331579,
      0.006956956,
      -0.015285728,
      0.025339244,
      -0.009473162,
      0.025901472,
      -0.032385014,
      -0.003920438,
      0.019209042,
      0.023163991,
      -0.014101539,
      0.015565058,
      -0.0011013158,
      -0.0079217795,
      0.023079917,
      0.009782403,
      0.018457914,
      -0.018334249,
      0.016791826,
      0.0030926894,
      0.012868678,
      0.0062620845,
      0.002509097,
      0.010895245,
      0.008712173,
      -0.015561462,
      -0.0016154458,
      -0.0000795045,
      0.0071134865,
      0.026587954,
      -0.0026058443,
      -0.006477739,
      0.0064072544,
      0.010291703,
      -0.0016733875,
      -0.0032243081,
      -0.003010066,
      -0.016540887,
      0.031779315,
      0.0033065253,
      -0.02954406,
      0.017645895,
      -0.03115495,
      0.0082961535,
      0.01557167,
      0.0011184645,
      0.003915053,
      -0.012522423,
      0.0123857595,
      0.017674327,
      0.0012354032,
      -0.0010000071,
      -0.0007798329,
      0.006450573,
      -0.044462193,
      -0.0031237518,
      -0.010726103,
      0.022786103,
      -0.004548447,
      0.004804457,
      -0.002985082,
      -0.0005017065,
      -0.02355372,
      -0.009074114,
      0.015286552,
      0.010486754,
      -0.024458451,
      0.023513362,
      0.0043521626,
      0.0084909275,
      -0.0005480105,
      0.014042605,
      -0.0114152245,
      0.0055086426,
      0.012899761,
      0.002789438,
      -0.0012944294,
      0.026500512,
      -0.023998477,
      -0.0035272136,
      0.0017995113,
      0.011893213,
      0.013170975,
      -0.027466565,
      0.016164629,
      0.0037487121,
      0.003547294,
      0.002570311,
      -0.00041431098,
      0.0044759344,
      0.0053338655,
      0.008787122,
      -0.023128835,
      -0.02838413,
      0.00556406,
      0.046101872,
      -0.006748701,
      -0.0051367083,
      -0.012768653,
      -0.0579865,
      -0.023174906,
      -0.01280412,
      -0.008128118,
      0.0034538256,
      -0.0114213275,
      0.0060564713,
      -0.028099015,
      -0.0037646878,
      -0.0024762964,
      0.007001688,
      -0.025356276,
      0.0024954565,
      -0.014428231,
      -0.006681581,
      -0.008126949,
      0.0306243,
      0.008041173,
      0.012907901,
      0.016672632,
      -0.024284212,
      -0.008201185,
      0.00728838,
      0.015922368,
      0.02454548,
      -0.004700806,
      -0.0009838658,
      0.017280458,
      -0.077048935,
      0.0013383736,
      0.01891136,
      -0.017987553,
      -0.0072947303,
      0.010282782,
      -0.01567384,
      0.0070153414,
      0.0016852497,
      0.004100691,
      -0.012853219,
      0.012849834,
      -0.0023415945,
      -0.009605129,
      0.001626219,
      -0.000119819895,
      0.0010175252,
      0.001677502,
      -0.005567522,
      -0.0137721365,
      -0.013413854,
      0.02428751,
      -0.0032812117,
      -0.01925706,
      0.021991875,
      0.005213289,
      -0.017869784,
      0.04000353,
      0.02810793,
      0.010832685,
      0.019022547,
      0.017783381,
      -0.032288354,
      -0.0049571386,
      -0.0095033515,
      0.002806232,
      0.011108521,
      -0.02221747,
      -0.008330904,
      -0.024799138,
      -0.0009293288,
      -0.0007066305,
      0.01712239,
      0.024271619,
      -0.015417485,
      -0.01959156,
      -0.0018794386,
      -0.0055440343,
      -0.021480562,
      0.008282892,
      -0.020461269,
      -0.0045346846,
      0.012416314,
      -0.019520616,
      0.013976901,
      -0.005190573,
      0.019234141,
      -0.004539989,
      0.020050233,
      0.010240727,
      -0.00454186,
      0.0010738855,
      -0.002052056,
      0.010394358,
      0.016496157,
      -0.018673968,
      0.021814415,
      -0.018303448,
      0.02430562,
      0.010272043,
      0.0046348795,
      -0.008087132,
      -0.018388886,
      -0.021931339,
      0.0006019442,
      -0.0068409387,
      0.00006325133,
      -0.008968402,
      -0.02174153,
      0.022938903,
      0.02340077,
      -0.008193865,
      0.016794067,
      0.010865292,
      0.0032628244,
      -0.0077863694,
      -0.0007345974,
      0.01842355,
      -0.002151457,
      -0.015479098,
      -0.008867084,
      0.025574826,
      -0.0070947236,
      0.0031415392,
      -0.01956807,
      0.015041921,
      -0.031613737,
      -0.018582938,
      0.002005372,
      0.016663278,
      -0.026271533,
      0.0047084787,
      -0.004275466,
      0.017881386,
      -0.00704166,
      0.02953665,
      0.0056611625,
      -0.006354788,
      -0.017529594,
      -0.010370203,
      0.0026765433,
      0.002271203,
      -0.0010771026,
      0.008998037,
      0.0017588752,
      0.029663369,
      0.016100753,
      0.017942524,
      -0.013543897,
      -0.0125694005,
      -0.012286283,
      -0.021920595,
      0.009927858,
      -0.016162502,
      -0.017136896,
      0.0035400116,
      -0.012016932,
      -0.012653559,
      -0.019646825,
      -0.0151327215,
      0.0072322385,
      0.011469193,
      -0.02504726,
      0.0040168595,
      0.015779298,
      -0.024154194,
      0.0040678964,
      0.006242959,
      0.0012306563,
      0.05208364,
      -0.020666327,
      -0.004773476,
      -0.010294958,
      -0.025678424,
      0.0026836244,
      0.0036544795,
      -0.011617046,
      0.0035200336,
      -0.004351196,
      0.0018107468,
      -0.006390606,
      -0.009435642,
      -0.016314184,
      0.008646137,
      0.002169393,
      0.015717765,
      0.016686788,
      -0.014773298,
      -0.0001988493,
      -0.021041235,
      -0.017978754,
      0.014381811,
      -0.035698608,
      -0.0041711414,
      0.016185947,
      0.020984959,
      -0.010283953,
      0.0013814188,
      0.00316153,
      0.0104086315,
      -0.01681601,
      -0.03658967,
      -0.026067061,
      0.020642078,
      0.010137416,
      0.0019700897,
      0.01218474,
      -0.008826512,
      0.028099762,
      -0.012616921,
      -0.010481456,
      -0.0061726505,
      -0.0070472616,
      -0.0047353064,
      -0.0011940184,
      -0.015348875,
      0.009911791,
      -0.024680382,
      -0.019623095,
      -0.0075186165,
      0.0048875767,
      -0.016938826,
      -0.013363045,
      0.023662653,
      0.00019233028,
      0.03163979,
      0.016245466,
      -0.0033304105,
      -0.015604281,
      0.023134934,
      -0.022201883,
      -0.0091498885,
      -0.0008238494,
      0.005283715,
      0.020725003,
      0.008288524,
      -0.0031093128,
      0.0042178947,
      -0.0028118354,
      0.016218452,
      -0.022189625,
      -0.010501529,
      -0.0006145143,
      -0.002467121,
      0.021703273,
      -0.000711023,
      -0.016614152,
      0.0083410945,
      -0.0075278687,
      -0.0109111,
      0.022912223,
      -0.017618004,
      -0.015885916,
      -0.010826331,
      0.002157911,
      -0.011121687,
      -0.030719563,
      0.019557076,
      -0.0011592567,
      -0.017696992,
      0.0074120793,
      0.0053680227,
      0.004412078,
      0.00072783756,
      0.0037060413,
      0.010876889,
      0.01613223,
      0.007067688,
      0.00946174,
      -0.0056701377,
      -0.006657712,
      -0.004895207,
      -0.010953692,
      0.0035301654,
      -0.0051937574,
      -0.015909133,
      0.025993425,
      0.006345235,
      -0.0070153996,
      -0.00037786324,
      0.029137198,
      0.00021030607,
      0.026093695,
      0.0008725178,
      -0.046284,
      0.029297573,
      0.0133917155,
      0.0029806767,
      -0.0032279126,
      -0.015252019,
      0.0011120826,
      0.003022707,
      -0.022909772,
      0.0035883375,
      -0.012007179,
      -0.030782867,
      -0.009909148,
      0.008755899,
      0.018597411,
      -0.11625157,
      -0.0062405015,
      -0.0034452404,
      -0.016697647,
      -0.010983597,
      -0.00017702856,
      0.0019899688,
      -0.01124249,
      -0.03134234,
      -0.012276922,
      0.006820288,
      -0.01819122,
      0.02082247,
      0.0033341923,
      0.0126992,
      -0.0091063585,
      0.005899431,
      0.031218505,
      0.02775786,
      0.00960276,
      -0.0036429453,
      -0.003942976,
      -0.005719787,
      0.0017317177,
      -0.022185344,
      0.010740749,
      0.023921834,
      -0.000054948756,
      -0.002311238,
      -0.01769442,
      -0.0153843565,
      0.01922439,
      0.006803143,
      -0.007850113,
      0.02402331,
      -0.01319612,
      -0.026159458,
      0.00846414,
      0.017449679,
      0.015023431,
      -0.0138227185,
      -0.022205649,
      0.027257573,
      0.01502769,
      -0.02017773,
      -0.0011020158,
      0.019258514,
      -0.018593835,
      0.010240054,
      0.056374047,
      -0.03430476,
      -0.021422353,
      0.00088254176,
      -0.015462662,
      -0.009727997,
      0.0033091877,
      0.025755737,
      -0.00083158433,
      -0.021240963,
      0.009112952,
      0.011609508,
      0.00019330015,
      0.006075259,
      0.0068193562,
      -0.015851092,
      -0.024991727,
      0.007657737,
      -0.0072172466,
      0.011976815,
      0.008453537,
      -0.008733161,
      -0.0052545406,
      -0.009086379,
      0.024359554,
      0.0051757153,
      -0.0014311182,
      -0.0038839336,
      0.0009897434,
      -0.017292876,
      0.004502209,
      -0.014330589,
      -0.0038445443,
      -0.07337534,
      -0.018270575,
      -0.008182211,
      0.008614364,
      0.007558724,
      -0.0040209987,
      0.004906823,
      0.01246072,
      0.014479747,
      0.011565143,
      -0.01790745,
      -0.021438261,
      -0.004717159,
      -0.01053027,
      -0.014980583,
      -0.011508783,
      0.01614616,
      -0.017048089,
      -0.011750696,
      0.011376793,
      -0.004970078,
      0.007770553,
      -0.0020450188,
      -0.009616775,
      0.00906396,
      0.01675664,
      -0.022149729,
      0.015625736,
      0.002772936,
      -0.0060841646,
      0.0053456435,
      -0.15344068,
      -0.010365367,
      0.014958495,
      0.01724519,
      -0.017588587,
      -0.002483569,
      -0.0020725925,
      -0.01587895,
      0.021358943,
      -0.014840144,
      -0.015411381,
      -0.020977221,
      -0.0099647585,
      0.00634839,
      -0.010408624,
      0.1215195,
      -0.010378747,
      0.015062313,
      -0.00014900329,
      0.010989668,
      -0.011587023,
      -0.016958341,
      0.013763842,
      0.0070241266,
      -0.008756756,
      -0.017126413,
      0.0060589253,
      -0.0119857155,
      0.030083044,
      -0.0076052286,
      0.008873662,
      -0.04650138,
      -0.02282097,
      0.031383503,
      -0.006906668,
      -0.024956632,
      0.010848689,
      -0.025929313,
      -0.0052955607,
      -0.0143811945,
      0.01322325,
      0.011373941,
      0.009293375,
      0.0058993213,
      -0.0005741457,
      -0.009050414,
      0.0015840993,
      -0.029027406,
      -0.02395546,
      -0.017502343,
      -0.019474985,
      -0.044300124,
      0.006138797,
      0.0014631121,
      -0.00071831467,
      0.011881101,
      0.003191955,
      0.0233025,
      -0.027108463,
      0.009169521,
      -0.008846551,
      -0.017889483,
      -0.0005403039,
      -0.004612591,
      -0.0072448803,
      -0.010770671,
      0.0010245126,
      0.030652592,
      0.0288975,
      0.00005303664,
      -0.0132896,
      0.0070236525,
      -0.013960384,
      -0.001840837,
      -0.015361156,
      -0.025849644,
      -0.009984635,
      0.021562003,
      -0.022177905,
      -0.015631052,
      0.0017857394,
      0.0004708924,
      -0.0049807867,
      -0.017039172,
      0.006762248,
      -0.015458157,
      -0.02225648,
      0.012139434,
      -0.013948393,
      -0.016605034,
      0.00556964,
      0.025630286,
      -0.0045043803,
      0.008755031,
      -0.010422016,
      -0.0005402251,
      0.021078885,
      0.00073513715,
      -0.00924197,
      -0.000420587,
      -0.005222973,
      -0.009033858,
      0.024054982,
      -0.016566867,
      0.039698593,
      0.021933096,
      0.034500103,
      -0.0015017318,
      0.005765513,
      -0.011096008
    ]
  },
  {
    "id": "genai_cohort_nodejs_05_node_modules_vtt",
    "content": "So hey guys, welcome to another 2 exciting section on Node 3 js series in which we are going 4 to cover about modules. 5 So till now all the videos 6 that we have seen was 7 an introduction to Node js. 8 Yes, three to four videos just 9 for an introduction. 10 Because I want to cover each 11 and everything in depth. 12 So in this particular video, 13 let's see what are, modules. 14 So this is going to be a chapter 15 one and trust me, this is 16 really, really, really easy. 17 So with that, let's start 18 with the video. 19 So what are modules? 20 Okay, so what are modules? 21 So in programming world, when 22 you talk about modules, modules 23 is basically a code, a collection 24 of code that provides 25 your functionality, right? 26 This can be anything. 27 Now in Node js we have three 28 types of modules. 29 Number one, we have 30 like built in modules. 31 Okay, we have built in modules. 32 So what do I mean 33 by built in modules? 34 That basically means that Node 35 js gives you out of the box. 36 So there are a lot of modules which 37 Node js gives you out of the box. 38 Then we have, third party, right? 39 We have third party 40 which we can basically download 41 from the Internet. 42 So these are also known as 43 external modules, okay? 44 These are also known as external 45 modules and we can install them 46 using npm install command. 47 So you remember, right? 48 npm install. 49 So we can install third party modules 50 like you know, from other developers 51 who have published their modules. 52 And then third we have 53 our custom modules. 54 So custom modules or I can 55 just say my own modules. 56 Okay, so these are modules 57 which I can create for my own 58 project and I can use it also 59 known as internal modules. 60 Custom modules. 61 My own modules. 62 So these are three kinds of modules 63 that are available in the Node js. 64 Okay? 65 So first let's try to cover a few 66 built in modules and then we will 67 move to the third party and custom. 68 And these are super duper simple. 69 Okay, so first module that I want 70 to cover is a file system module. 71 Now tell me one thing. 72 If you are from a JavaScript 73 background, can you access the file 74 system in just pure JavaScript? 75 The JavaScript that you run 76 inside the browser, can you 77 access the file system? 78 No, but because Node js is 79 a JavaScript which is built 80 into the C program, they have 81 given you a whole FS module. 82 So this, this is known as an FS 83 module file system module, 84 which helps you to work with 85 the file system on your machine. 86 So let me show you how 87 you have to use it. 88 Okay, so what I'll do is I'll just do 89 a notes or Txt file first of all. 90 And what I'm going to do is I'm going 91 to move all this stuff for 92 your reference to this file, okay? 93 So that we can have a clean code. 94 So what you can do is, first 95 of all we have to import, we have 96 to require the FS module. 97 So how you do that is you have 98 a require function, okay? 99 You have a require function. 100 And in this require function you 101 can basically pass the module name. 102 For example, I want 103 to load the FS module. 104 So what this require function will do 105 is this will basically load the FS 106 module for me and then I can assign 107 it to a variable, let's say fs. 108 So this require function is 109 only and only available to you 110 in the node js environment. 111 So, so require the name of the module 112 and then you have this fs, right? 113 So now what we can do, 114 we can basically try 115 to console log this fs. 116 Let's see, what do we get in the fs? 117 So for the terminal, let me 118 open the integrated terminal. 119 So this is my integrated terminal. 120 How can I open it? 121 So either you can go into 122 the terminal and you can click 123 on the new terminal, 124 or the shortcut for this is Ctrl 125 control plus this till day. 126 Okay? 127 Okay, so this is the shortcut. 128 So I can just say control this 129 and then node and index and enter. 130 So you can see that I am 131 getting a lot of things, right? 132 You can see I'm getting 133 a lot of things. 134 So let's try to understand that. 135 What is this fs? 136 So this FS is a, is an object 137 in which you have functions like 138 you have a function for appending 139 file append file sync, you 140 have access, you have access. 141 Sync, you have count. 142 You have count Sync, you have chmod. 143 So you can see that these are all 144 the functions that are exposed 145 which helps you to manage files. 146 Let's say I want to read a file. 147 Okay, let's say I want 148 to read this file. 149 So what I can do is I can 150 just say fs.read file sync. 151 Now I'll tell you what is this thing. 152 So as of now you can just ignore it. 153 And here let's pass the name 154 of the file that is notes or txt. 155 Okay, so I'm just saying notes or txt 156 and then you have 157 to specify the binary encoding. 158 So I want to read it 159 as a UTF8 encoding. 160 What this is going to 161 do is it is going to give you 162 the content of the file. 163 Okay? 164 If everything goes right, we 165 should have the contents. 166 So let's just do a console.log 167 on the content and let's 168 see what we are getting. 169 So you can see that we 170 are getting this thing. 171 So these are all the contents 172 of this file, right? 173 Let me modify something. 174 Let me just remove 175 all these comments. 176 Okay, so if I just remove 177 all these comments and. 178 Yeah, so. 179 So let's see if I now 180 rerun the program. 181 You can see that whatever I am 182 writing in this file, I am writing. 183 So that is getting 184 console logged, right? 185 So what we are doing here is 186 first of all I am requiring, 187 I am requiring this FS module. 188 All the code of this FS 189 module is being transferred 190 to this FS variable. 191 Feel free to call this variable 192 anything and then I'm calling a 193 function that is read file sync, 194 give the path of the file that is 195 notes Txt in which encoding you 196 want to read. 197 And this returns the content 198 of the file. 199 And then finally I'm just doing 200 a console.log of the content 201 and this is what I'm getting. 202 I'm doing a command K or 203 you can even do a clear 204 to clear how the terminal. 205 So yeah, that's your wish. 206 So this is how you can use. 207 This is a built in module, right? 208 This is a built in module in the 209 node js that is like given to you 210 out of the box and we can use it 211 now Interestingly, the 212 documentation of node js is very 213 interesting. 214 Let me show you. 215 So if you go to node js.org and you 216 go into the documentation, 217 the documentation is well managed. 218 So let's search for FS here. 219 Okay, so file system. 220 You can see we have this file system. 221 So if you click on this file system. 222 So these are all the functions 223 that are available. 224 And if I just keep 225 on scrolling just one second. 226 Yeah, so you can see that 227 what is this file system? 228 This is basically a module that 229 enables interacting with 230 the file system in a way 231 model standard POSIX functions. 232 So you can see that you 233 can do a require and you 234 can require the fs. 235 Now I'll tell you that why they are 236 putting this node thing as of now. 237 Please feel free to ignore this. 238 So you can do a require and name 239 of the module that is FS and then 240 you can basically use it. 241 So all the things are 242 given here, right? 243 So let me try to search 244 for this function. 245 Okay, so you can see that 246 this is how we can use it. 247 So you can just say, you know, 248 you can directly import this read 249 file thing and you can do this. 250 So this is actually they 251 are using the ESM modules. 252 So I'll tell you about 253 that, don't worry. 254 Okay, so all the documentation 255 is given here. 256 Okay? 257 So this is what we have to follow. 258 Now here is the interesting part. 259 Okay? 260 So as of now, let's not go 261 with the documentation because 262 there are few things that is going 263 on crazy here, okay? 264 So my motive in this particular 265 video is to explain 266 you this require function. 267 So let me just copy this function 268 and come into my whiteboard and let 269 me just move it to dark mode so 270 that it doesn't strain your eyes. 271 So let's say that this is 272 the code that you have, right? 273 This is your source code, okay? 274 And let me change the font. 275 Now when you run this code 276 using this command, right? 277 You, you do node and then you do 278 like script js or index js, okay? 279 Not node. 280 I, mean node, right? 281 So what happens? 282 What node does? 283 Node takes your source code, okay? 284 So this is your source file. 285 So this particular thing is 286 basically your index file. 287 Or I can say this is 288 your source file. 289 Now, when you pass your source file, 290 node js will read the contents 291 of your source file, right? 292 So node js will come and it 293 will see, oh, these are 294 the contents of your file. 295 Then what this node js does 296 internally, it has 297 a wrapper function, okay? 298 It has a wrapper function. 299 In this wrapper function, 300 it has a few parameters 301 that it exposes to you. 302 So let me just search here. 303 That, node is wrapper function, okay? 304 Node js, wrapper function 305 and module wrapper. 306 Basically, it is known 307 as the module wrapper. 308 So let me see if I 309 can get the example. 310 Yeah, here it is. 311 So it gives you few variables, 312 like for example, exports. 313 It gives, you require. 314 Okay, it gives, you require. 315 Just one second, let me just type in. 316 And it gives you a, module, right? 317 It gives you the module. 318 So let's have module and it gives you 319 underscore, underscore file name. 320 So, so, underscore, underscore 321 file name and comma, 322 underscore, underscore d name. 323 So this is what. 324 This is basically a wrapper 325 function that is internally 326 made by the node js. 327 Then all of your source code 328 whatsoever, source code you have 329 written is basically injected 330 in this wrapper function. 331 So your source code is basically 332 injected 333 in this wrapper function, okay? 334 Like this. 335 So what if I just change the color 336 so that you have more clarity. 337 So here is your wrapper 338 function, right? 339 And then, okay, and then this is 340 your source code that node J 341 has copied from your command. 342 Then node js will execute the code by 343 just calling the wrapper function. 344 So this is basically the entry point. 345 Now what happens is your Source 346 code is basically running 347 inside a wrapper function. 348 And this wrapper function gives you 349 access to some Features like 350 exports, require module, underscore, 351 underscore file name and turning. 352 That is the reason that I'm able 353 to use this require function. 354 Do you see this 355 require function here? 356 So let me grab a pen. 357 So if you see this require 358 function, this is basically I'm able 359 to use because this require 360 function is in the scope. 361 What if I go into my browser because 362 again this is also JavaScript 363 and I try to say const FS 364 equals to require and I say fs, 365 you will see I get an error. 366 It says that hey, the require 367 function is not defined, right? 368 I'm not able to call 369 this required function. 370 But this code is working here. 371 Why? 372 Because internally you know that 373 this whole code 374 goes inside a wrapper function. 375 Okay, goes inside a wrapper 376 function and basically it 377 looks something like this. 378 So this wrapper function has this 379 require thing and this require 380 function is internally made 381 and maintained by the node js team. 382 So now you understand that 383 from where this require function 384 is coming into the scope 385 that is from this variable. 386 Proceeding further, we will also 387 take a look that what is this 388 module, what is this export, 389 what is this underscore, underscore 390 file name and all that? 391 Don't worry about that. 392 Okay, now let's understand that what 393 this require function works like 394 how this require function works. 395 Okay, so it's basically 396 somewhat like this. 397 So node js gives you 398 a require function, right? 399 So this is your require function. 400 This require function takes 401 a string kind of the module 402 name that you want to load. 403 So this is a module name 404 that you want to load. 405 Okay, how it basically tries 406 to load this module. 407 Now first it is going to check that 408 if you have any third party, if you 409 have any third party installation. 410 Okay? 411 So if you have installed any third 412 party module, it is going to load 413 that and return you the module. 414 Okay? 415 So first it will try to load 416 the third party installation. 417 If you have any third party 418 with this module. 419 If no, it is going to then 420 check what it is going to check 421 that if it there is any built 422 in module of this name. 423 Okay, it is going to check that 424 if you have a built in module. 425 If not, if this is also not the case 426 in this case it will throw an error. 427 Okay, throw an error because that 428 particular module is not found. 429 Piyush, that is fine. 430 But now where is the custom module? 431 Right? 432 You told that, okay, built 433 in module is there third party 434 module, is there custom module? 435 So yeah, I'm Coming to that. 436 So first of all you have to make 437 sure that this part is clear that 438 you do a require you give a module 439 name that you want to require. 440 So it will first try to search 441 in the third party installation if 442 you have installed that module. 443 If not it will go into 444 the built in module. 445 If that is also not the case, 446 it will throw an error. 447 Now this module name is 448 a very interesting thing. 449 Okay, now let me show you 450 that how this module name 451 is very special thing. 452 Let's say you are trying to require. 453 Let me just have a green pen. 454 Let's say you are trying 455 to say require fs. 456 Now you can see that 457 I'm just giving a name. 458 So it will try to search. 459 Hey fs, is there any 460 third party installation? 461 No. 462 Is there a built in module? 463 Yes. 464 So it will give you that. 465 Let's say you do a require 466 maybe something like, 467 you know, JSON web token. 468 So it's a third party. 469 So what it will do is it will 470 first see that hey, do you have 471 a third party installation? 472 Actually JSON web token is 473 a third party, but right now 474 I have not installed it. 475 So it will say oh, I am not able to 476 find the third party installation. 477 So it will try to search 478 in the built in module. 479 There is no built in module 480 such as JSON web token 481 and it will throw an error. 482 That's fine. 483 If you have installed JSON web 484 tokens, it will give you that. 485 Now if I give something like 486 this, okay, so if I say require 487 dot slash let's say math.math.j, 488 something like this. 489 Now here do you notice that this 490 particular thing starts with a dot? 491 Did you notice this dot here? 492 This dot. 493 So okay, so this dot 494 basically is a special thing. 495 This dot basically indicates that 496 hey, I want to search this math 497 js file in the current directory. 498 So this dot, a single dot 499 basically means search 500 in the current directory. 501 Dot dot slash means search 502 go one directory up. 503 Dot dot slash dot dot slash 504 means go to directories up. 505 So whenever your require thing 506 starts with this pattern, you 507 know, dot slash, dot dot slash or 508 something like that, that is 509 where node js knows that it's a 510 custom module, it's a module that 511 you have made. 512 Got it. 513 So right now I'm just doing fs. 514 So it is trying to load the FS 515 from the built in module, right? 516 Because there is no 517 third party module. 518 It's working. 519 But if I say dot slash so now it 520 will throw an error because there is 521 no module, no module not found. 522 And where it is trying to Find this 523 module inside users Piyushkar coding 524 folder node js01 modules index 525 so now you can see that I 526 don't have any FS module, right? 527 You can see that I don't 528 have any FS module. 529 So if I remove this.now it knows. 530 Okay, first I have to search 531 for third party, then I have 532 to search for built in. 533 And it got the built in model, 534 so everything is working fine. 535 Okay, so this is how 536 the require function works. 537 Interesting, right? 538 This require function is very 539 interesting and also it 540 does something known as 541 internal caching, you know. 542 So once you require a module, it also 543 caches it so that it doesn't have 544 to load these things again 545 and again, which I'll show you when 546 we will move to the custom modules. 547 As of now, feel free to ignore it. 548 So in this particular video 549 I wanted to tell that how 550 you can use the require 551 and how you can do the fs. 552 Okay, so let's explore 553 some FS things. 554 Okay, so what all you can do, you can 555 read a, file in a synchronous way. 556 Then what else you can do, you can 557 actually read a directory as well. 558 Okay, so now you have understood 559 that how the FS works. 560 Now here is the thing, 561 guys, did you notice one thing? 562 That whenever I do like FS and I do 563 a dot, I'm not able to get anything. 564 I'm not getting suggestions, right? 565 Because that's a part 566 of typescript typings and that's 567 an external module now. 568 So what we will do is 569 in the next class I'll show you 570 something with npm init. 571 Then we will install the typings 572 and then we will explore some built 573 in modules in node js, which 574 are very, very, very important. 575 And then we will move 576 to the custom modules. 577 Okay, so with that, let's 578 end the video here. 579 I hope you have 580 learned something new. 581 That is how this 582 require function works. 583 So in the next class let's 584 work on the npm thing. 585 So let's meet you right there.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "05-node-modules.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/05-node-modules.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.005069447,
      0.0036640929,
      0.04559078,
      -0.05285926,
      -0.018605549,
      0.015473788,
      0.03224967,
      0.010737628,
      0.0050165853,
      -0.0020015668,
      -0.00080089323,
      -0.0016224148,
      0.00611165,
      0.027934643,
      0.12310002,
      0.011934605,
      -0.012488098,
      -0.006131331,
      0.02295158,
      -0.02799488,
      -0.009834513,
      -0.0043370724,
      0.011736865,
      -0.011819827,
      -0.0024530883,
      0.007833592,
      0.012660828,
      -0.0035291922,
      0.027937526,
      -0.024830507,
      0.006609829,
      0.00051106676,
      -0.010047262,
      -0.0039869766,
      0.0035916497,
      0.0145435175,
      0.021899054,
      0.008670857,
      -0.00828797,
      0.00093329395,
      -0.012735986,
      -0.0011783196,
      0.015927084,
      -0.03632373,
      0.005829265,
      -0.015034008,
      -0.0042305826,
      -0.0018259179,
      0.0062970845,
      0.015647803,
      -0.008081638,
      -0.019486006,
      -0.012606329,
      -0.19104347,
      -0.00020221414,
      0.006148104,
      0.00980315,
      0.0009993005,
      0.015439545,
      0.004446249,
      -0.02127271,
      0.0071483552,
      -0.041915886,
      -0.006908899,
      -0.021107592,
      -0.027958967,
      -0.0018306085,
      -0.0015047907,
      0.00940087,
      -0.019387705,
      0.011321622,
      0.0050536566,
      -0.023872511,
      -0.020198204,
      -0.022929141,
      -0.008032548,
      0.010756317,
      -0.011262352,
      -0.011248144,
      0.014952188,
      -0.0007417314,
      -0.013781732,
      0.006115008,
      -0.022411654,
      0.006971192,
      0.0004058781,
      -0.0286746,
      -0.03402693,
      -0.024846807,
      0.006022349,
      0.0040753456,
      0.0047071967,
      -0.013302694,
      0.009962228,
      -0.01645646,
      -0.009362278,
      0.0022311548,
      -0.0014877327,
      -0.016358726,
      -0.006988052,
      0.031088466,
      -0.009321024,
      -0.049392566,
      0.015589676,
      0.005307904,
      0.005462737,
      0.0007456662,
      0.008320519,
      0.014441327,
      -0.016515804,
      0.0036018759,
      0.00403626,
      -0.016763844,
      0.051006597,
      0.024150787,
      -0.17681104,
      0.018049985,
      0.004905948,
      -0.009912123,
      -0.0008224384,
      -0.025997793,
      0.014244723,
      -0.004013344,
      -0.009075691,
      -0.005920243,
      0.028328514,
      -0.01537269,
      0.021983812,
      -0.0011857303,
      -0.0029656438,
      -0.018243998,
      -0.010522185,
      -0.008937469,
      0.030507557,
      0.020826267,
      0.016195277,
      0.0055912733,
      -0.007831178,
      -0.0084039075,
      -0.020514334,
      0.03413054,
      0.017344026,
      0.013112182,
      0.01922609,
      0.014079967,
      0.008226236,
      -0.004102779,
      0.00029951974,
      -0.018360395,
      -0.03554893,
      0.009364901,
      -0.022038952,
      0.011196703,
      -0.002272274,
      0.01342134,
      -0.024845814,
      0.0008918985,
      0.011438104,
      -0.0070181987,
      -0.015462605,
      0.008806531,
      -0.0012607881,
      -0.010808504,
      0.03170428,
      0.017491361,
      0.006155627,
      -0.011948737,
      0.024124928,
      0.00044973733,
      0.018865187,
      -0.009508213,
      0.00068413006,
      0.011656538,
      -0.013262245,
      -0.016690778,
      -0.024644813,
      -0.0023239052,
      -0.003161412,
      0.010640601,
      -0.0050602886,
      -0.0106009925,
      0.00510395,
      0.011779712,
      -0.014965676,
      0.0056508593,
      0.003938383,
      -0.01022391,
      0.016615627,
      0.035467967,
      -0.031712603,
      0.01581873,
      -0.0370959,
      0.018410373,
      0.018710788,
      -0.006160309,
      -0.0032256045,
      -0.019117625,
      0.0064649577,
      0.019576563,
      0.015070366,
      0.025076838,
      -0.019376872,
      0.0011889101,
      -0.030952245,
      0.017963035,
      0.0063507087,
      -0.020895319,
      -0.007464824,
      0.012667677,
      0.033554416,
      -0.012387687,
      -0.013341599,
      0.0000705548,
      -0.0021168115,
      0.026918342,
      -0.017805882,
      0.013706325,
      0.0014573258,
      0.010142461,
      -0.0076342435,
      -0.0026205846,
      -0.0031912874,
      0.0020716558,
      0.023353474,
      -0.0048501533,
      0.007494723,
      0.0005989798,
      -0.016756263,
      -0.0027759655,
      -0.013380678,
      0.0130384425,
      -0.012817789,
      -0.0063209157,
      -0.0014760718,
      0.012212259,
      0.0076445737,
      0.0038587986,
      0.003120497,
      -0.0028867372,
      -0.019019345,
      -0.012526199,
      -0.009262679,
      -0.0025198883,
      0.011280674,
      0.035356,
      0.003191337,
      -0.011994108,
      0.002271544,
      -0.038961582,
      -0.022099422,
      -0.000026617427,
      0.00208896,
      -0.008382648,
      -0.00983978,
      -0.0021920088,
      -0.010787621,
      -0.010841445,
      -0.011252589,
      -0.0054230737,
      -0.034678023,
      -0.005113973,
      -0.013457831,
      -0.023895282,
      0.005046308,
      0.008817281,
      -0.0007682075,
      0.01272186,
      0.029509371,
      -0.005870476,
      -0.0018908343,
      0.023718731,
      0.0040985495,
      0.0062177414,
      -0.0060402933,
      0.008974974,
      0.008553142,
      -0.1025032,
      -0.010334237,
      0.010679463,
      -0.012506036,
      -0.0034878238,
      0.019169834,
      -0.010226839,
      0.036770508,
      0.009797183,
      0.013879095,
      -0.0061072735,
      -0.009235344,
      0.026032474,
      0.0049981927,
      0.00030158914,
      0.0037561038,
      0.013327522,
      -0.014445834,
      0.011173345,
      -0.00014626786,
      0.006397562,
      0.0012203177,
      -0.0027992877,
      -0.005834353,
      0.023740744,
      -0.008714499,
      -0.004832877,
      0.013774372,
      0.036810994,
      -0.009032396,
      0.00081083336,
      0.013819266,
      -0.015486185,
      -0.0014090467,
      0.0019998588,
      -0.00046798872,
      0.026689593,
      -0.013683499,
      0.000034618537,
      -0.01593034,
      -0.027481262,
      -0.020688847,
      0.0043431087,
      0.007459761,
      -0.014783487,
      0.009715131,
      0.0031806375,
      -0.0036682705,
      -0.02101246,
      0.017001566,
      -0.021089548,
      -0.0032885964,
      0.018718868,
      -0.013925396,
      0.016535725,
      -0.0034172353,
      -0.00084289804,
      0.005056798,
      0.012875047,
      0.012325001,
      -0.0020058942,
      -0.0014487038,
      0.0069876825,
      -0.0034463508,
      0.0032345043,
      -0.007975631,
      0.007112332,
      -0.002012421,
      0.0014353421,
      -0.00881947,
      0.010302481,
      -0.00058593537,
      -0.017328294,
      -0.0066473302,
      0.0013266009,
      0.0036862344,
      0.0039750417,
      0.0004715733,
      -0.030284101,
      0.00843103,
      0.023471,
      0.0040253056,
      0.0052987724,
      0.023190778,
      0.0079218745,
      -0.0049671666,
      -0.023622956,
      0.010613707,
      -0.0033704087,
      -0.019213866,
      -0.010930965,
      0.024008702,
      -0.028231783,
      -0.00040385532,
      -0.0009315693,
      0.022006895,
      -0.018706085,
      -0.004843322,
      -0.015623392,
      0.017094934,
      -0.022062672,
      -0.002760419,
      -0.01797541,
      0.020063417,
      0.0031012157,
      0.020208495,
      0.0038336797,
      -0.0017347456,
      -0.0040562795,
      0.002990404,
      0.009475013,
      -0.0049108965,
      -0.012242713,
      -0.016491657,
      -0.008135774,
      0.024296818,
      0.021527987,
      0.027021412,
      -0.010005014,
      -0.014474201,
      0.022395454,
      -0.0026962324,
      -0.000019273884,
      0.0009751109,
      -0.010297375,
      0.0026661393,
      0.0031104747,
      -0.00075386674,
      -0.014808014,
      -0.011155896,
      0.0085397335,
      0.010469282,
      -0.020570131,
      -0.0030233103,
      -0.006969451,
      -0.03428825,
      0.022018868,
      -0.0023827632,
      -0.0033321958,
      0.023662439,
      -0.020650903,
      0.008783147,
      0.01729758,
      -0.022522256,
      0.0073203915,
      0.021640752,
      -0.020470083,
      0.011539656,
      0.0009306338,
      0.0049777757,
      -0.013925423,
      -0.004241065,
      -0.013852039,
      -0.0137597555,
      -0.0010385473,
      0.012684622,
      0.041569974,
      -0.015495914,
      -0.0008571723,
      -0.015490312,
      -0.012847113,
      -0.0006774003,
      -0.013941664,
      -0.006243842,
      0.011818883,
      0.018453324,
      -0.023531038,
      0.00053622917,
      0.001267675,
      -0.011131019,
      -0.022771994,
      -0.011633682,
      -0.034191336,
      0.0145005435,
      0.008248037,
      -0.014399072,
      -0.001246926,
      -0.0018117292,
      0.02865517,
      0.0006719561,
      -0.010670956,
      0.0018338646,
      -0.017328063,
      -0.00370677,
      -0.01272028,
      0.011418598,
      0.011308531,
      -0.01890569,
      -0.015564068,
      -0.013507627,
      0.020938206,
      -0.035680264,
      -0.0016488457,
      -0.0023662606,
      0.0238407,
      0.034088932,
      0.010276565,
      -0.0048892247,
      -0.003558379,
      0.007890281,
      -0.016829418,
      -0.019371727,
      0.017852841,
      -0.012046492,
      0.0039892914,
      -0.0003710306,
      0.01496844,
      0.0005631652,
      -0.014784717,
      0.00411279,
      -0.009505921,
      -0.028159909,
      -0.0014680512,
      -0.011998462,
      0.0049171657,
      -0.0051715323,
      0.009786128,
      0.0038584347,
      -0.03637784,
      0.0006677953,
      0.030404419,
      -0.0033929965,
      -0.011777352,
      -0.006687315,
      0.015557757,
      -0.018486159,
      -0.03276181,
      0.026246905,
      -0.023749141,
      -0.0005224869,
      0.0057605584,
      -0.0014543994,
      0.007361209,
      0.01659295,
      -0.023031475,
      -0.0036995844,
      0.0019008844,
      0.01809161,
      0.003731781,
      0.013846221,
      -0.0017133881,
      0.005172023,
      -0.008086561,
      0.016934445,
      0.00058207236,
      -0.010484482,
      0.019095344,
      0.013427085,
      0.0010989317,
      -0.0025703628,
      0.010424021,
      0.0031566299,
      0.010870741,
      -0.0031180836,
      -0.024406122,
      0.031265505,
      -0.018474964,
      -0.0031556515,
      -0.020603752,
      0.00051362714,
      0.0062993215,
      0.012344579,
      -0.012892118,
      0.0065364265,
      -0.016294021,
      -0.009602995,
      0.008690845,
      0.01720361,
      0.025791306,
      -0.11282257,
      0.002411401,
      -0.0028805193,
      -0.011668812,
      0.004763309,
      -0.014640184,
      -0.0061609857,
      -0.026902614,
      -0.012822489,
      -0.014077513,
      0.0072643994,
      0.013971063,
      0.006973931,
      0.007507712,
      -0.00006404817,
      -0.018996235,
      0.00060271815,
      0.020285768,
      0.038702145,
      0.002063108,
      -0.002680481,
      -0.00703065,
      -0.0002421078,
      -0.0011999151,
      -0.026696164,
      0.011180324,
      0.013250917,
      -0.0025763046,
      -0.01310197,
      -0.0072168508,
      0.001472807,
      -0.012182888,
      -0.0004069403,
      -0.0037992294,
      0.03264771,
      0.006104008,
      -0.0040643937,
      0.018193746,
      0.010569777,
      0.0074816663,
      0.0137433605,
      0.010471945,
      0.0129458,
      0.0044580265,
      0.0027741026,
      0.02043501,
      0.027768305,
      -0.021271009,
      -0.0019794502,
      0.055623382,
      -0.047598824,
      -0.04004279,
      -0.0051281084,
      -0.013039253,
      0.0191309,
      0.0027316655,
      0.02395554,
      -0.0049754884,
      -0.010367263,
      0.0068322467,
      0.013958738,
      0.00014067237,
      -0.0061266413,
      0.015314231,
      -0.0146852955,
      -0.0057705096,
      0.02987636,
      0.0062260986,
      0.015612189,
      -0.008130287,
      -0.0017992799,
      -0.011730277,
      0.0044054803,
      0.014910755,
      -0.0068000886,
      0.0057102316,
      0.0046731276,
      0.026402928,
      0.008535586,
      0.00831646,
      -0.004693814,
      0.008535463,
      -0.06857856,
      -0.0034141946,
      0.0044109426,
      0.00017054031,
      0.016787326,
      0.012035804,
      -0.00893614,
      0.009340979,
      0.009421211,
      0.0048410795,
      -0.01753132,
      -0.0032639678,
      -0.010216556,
      0.005793259,
      -0.010160812,
      -0.008092949,
      -0.0014581743,
      -0.028712662,
      -0.02491956,
      0.018867325,
      -0.0063280948,
      0.0013425207,
      -0.0013278711,
      -0.013997708,
      0.017172122,
      0.01298969,
      -0.016198205,
      0.0117444545,
      0.0009904291,
      -0.021606158,
      0.0013858477,
      -0.1501331,
      -0.019751482,
      0.001726492,
      0.008381284,
      0.0036664633,
      -0.012533015,
      0.0051824013,
      0.0072446247,
      0.010726737,
      -0.029323133,
      0.0017678004,
      -0.02636892,
      -0.0095731085,
      -0.0065576765,
      0.0025060086,
      0.12056699,
      -0.0053557674,
      0.003176034,
      0.016289707,
      0.026231114,
      -0.015156682,
      -0.025527557,
      0.0088453395,
      0.027710209,
      -0.0069020228,
      -0.0074943337,
      0.016549964,
      -0.0084436,
      0.03325592,
      -0.0020176466,
      0.004942365,
      -0.026230725,
      -0.014769599,
      0.018130643,
      -0.02094657,
      -0.0027224137,
      0.018060772,
      -0.017676253,
      -0.011198873,
      -0.0056640417,
      0.007898143,
      -0.0026484635,
      -0.008119918,
      0.007500009,
      0.0074208775,
      0.0099443495,
      0.015335954,
      -0.016228236,
      -0.021191282,
      -0.0047257156,
      -0.0018990756,
      -0.051620826,
      0.0072002993,
      -0.0039491113,
      -0.0013246251,
      0.035723966,
      -0.018285843,
      -0.009912832,
      -0.023574473,
      -0.017688798,
      0.002952139,
      -0.004761298,
      0.019496948,
      0.00285135,
      -0.00643914,
      -0.01972245,
      -0.0036647157,
      0.024930678,
      0.027564513,
      -0.0057837493,
      0.010404538,
      0.022181816,
      -0.008974375,
      0.0032837524,
      -0.023313152,
      -0.017664917,
      -0.013111702,
      0.015659243,
      -0.007738605,
      -0.02020835,
      -0.0057172156,
      -0.009805793,
      -0.015513621,
      -0.0315059,
      0.008471804,
      -0.008881464,
      -0.017759092,
      0.022595186,
      0.0011785115,
      -0.01129815,
      0.009313959,
      0.012078495,
      0.0043174145,
      0.020282373,
      -0.014312453,
      0.020235859,
      0.0051129637,
      0.009019382,
      0.013820273,
      -0.0017648559,
      0.01628505,
      0.001053099,
      -0.002345853,
      -0.023421306,
      0.023960212,
      0.010045556,
      0.019075356,
      0.01712124,
      0.0056941235,
      -0.0033433272
    ]
  },
  {
    "id": "genai_cohort_nodejs_06_node_third_party_modules_vtt",
    "content": "Okay, so in this particular video, 2 let's quickly jump on 3 to the npm first and then we 4 will revisit this topic. 5 So, yeah, so in between we have 6 to jump onto the npm topic. 7 Okay, that is very important. 8 And then we will come 9 back to this thing. 10 Okay, so what was npm? 11 npm was basically the Node 12 Package Manager, right? 13 Node Package Manager. 14 Now if, now, interestingly, if you 15 will Google the full form for npm, 16 then this is not the official one. 17 Actually, there is no 18 official full form for npm. 19 So this is what everyone suggests 20 that that is Node Package Manager, 21 because that makes sense. 22 It is responsible for 23 managing the packages. 24 Okay, so let me show you that. 25 Let's say I want to install 26 the typings, okay? 27 So what are, these typings? 28 Basically, right now you can see 29 that when I do FS dot, I am 30 not getting any typings, right? 31 The VS code is not aware that what 32 this fss to make VS code aware, we 33 have to install a package, okay? 34 We have to install a package that is 35 at the rate types/ node. 36 So this is a package name, right? 37 This is a, external package. 38 This is maintained by Microsoft. 39 And this is an external package 40 that we have to install. 41 So how can I install this package 42 into my, this particular project? 43 Now, for that, for that, 44 first of all, I have to make 45 this project as a package. 46 This is not a package, right? 47 Right now I'm just 48 having a single file. 49 I'm just running it. 50 It's fine. 51 But this is not a package. 52 So for that, what you have to do is 53 on the root of your folder, on 54 the root of your project folder root 55 basically means this is the root. 56 On the top level, you have to create 57 a file that is package JSON. 58 Okay? 59 So this is basically the rule 60 that what you have to do is 61 you have to create a file 62 whose name is package.JSON. 63 exactly. 64 This, this package.JSON is kind 65 of like a configuration 66 file for your project, okay? 67 It's like a configuration file. 68 Now what this configuration can 69 contain, this configuration can 70 contain the name of your project. 71 This can contain the version 72 of your project. 73 This can contain all the scripts 74 that your project supports, 75 and it can support it. 76 It also holds something 77 known as dependencies. 78 Dependencies basically means 79 that what external packages 80 to load in order for this 81 particular project to run. 82 So that means that your project 83 is dependent on which, which, 84 you know, libraries or modules, 85 that is your dependencies. 86 Now, usually we don't create this 87 package or JSON on our own. 88 So for that we have a command that 89 is npm init So when you run this 90 command, this will automatically 91 create a package JSON file for you. 92 So let me do an enter so you can see 93 that it is asking me few questions. 94 For example, what is the name 95 of your package? 96 So it is by default 97 taking the 01 modules. 98 So you can just say modules enter. 99 What is the version of your 100 project of your package? 101 Let's go with one. 102 Do you want to add some description? 103 It's optional. 104 I mean if you want to do you can. 105 I'll skip what is your entry 106 point, that is index js. 107 What's your test command? 108 Let's just go ahead, 109 go ahead, go ahead. 110 Author everything okay, fine. 111 Now did you notice that I 112 got a package JSON file? 113 This CLI. 114 This command of npm init 115 created a package.JSON file for me. 116 Right now this contains the name. 117 Feel free to change it. 118 So this is the name of my project. 119 This is the version, I 120 can update the version. 121 Let's say I want to release 122 version 2, version 3 so 123 I can do that from here. 124 Then you have main that 125 this is your entry point. 126 Then you have all the scripts 127 that your project can support. 128 And right now there is no dependency. 129 Can you see any dependencies? 130 No, there is no dependency. 131 So let's add a dependency. 132 So keep in mind this 133 dependencies always keeps track 134 of third party deps. 135 Okay, Third party dependencies. 136 So right now my project is not having 137 any third party dependency. 138 So let's install npm. 139 Install a third party 140 dependency, that is this. 141 Okay, so you have to basically 142 type npm install 143 at the rate types slash node. 144 So let me just do an enter. 145 So what this is going to do is 146 this is going to download this. 147 Now see what happened? 148 Do you see that? 149 Automatically I got a, dependencies. 150 And right now my project is dependent 151 on this particular dependency. 152 And this is the version, this is 153 basically the latest version. 154 And now I have this dependency. 155 And interestingly, a new folder 156 is created of node modules. 157 As soon as you did npm install, a new 158 folder appeared that is nodemodules. 159 Now what is this folder? 160 Now this is a folder 161 which you never touch. 162 Whenever you install a third party 163 dependency or a package or whatever 164 you want to call the source code 165 of this third party dependency is 166 actually kept in the node modules. 167 Okay, so when you say, let's 168 say npm install package 169 name, whatever package you want 170 to install this command. 171 Okay, so let's say this is npm. 172 You can even do npm I so let's say 173 npm install this command, fetches 174 this package from the Internet. 175 Okay? 176 So I'll show you from where it 177 fetches, okay, from the Internet. 178 And from the Internet it gets 179 the source code and keeps 180 it inside the node modules. 181 So right now you can see we have 182 at the rate type slash node. 183 So in the node modules you have 184 at the rate types in which, in which 185 you have, you will have node. 186 Okay, so it can be a file. 187 So if I just go on, where is that? 188 Yeah, so it's basically 189 at the type slash node only. 190 You can see we only 191 have one folder node. 192 And this is all the code 193 that is being fetched. 194 Okay? 195 So this is the source code 196 of this particular dependency. 197 Now what will happen is, now what 198 you will notice is that when I 199 do fs.you are actually getting 200 all the suggestions because now 201 what is happening is your VS 202 code is aware of all the 203 dependencies and everything that 204 is available. 205 How? 206 Because this particular 207 thing is here. 208 Got it. 209 So this is the thing that is giving 210 all the information to the VS code 211 that what all options, what all 212 functions, what all interfaces are 213 available on this FS module. 214 Got it? 215 Now what if I delete 216 this folder by mistake? 217 Actually, yeah, you can 218 delete this folder right? 219 Right. 220 Now what happened? 221 That folder got deleted It. 222 Interestingly what I can do is 223 I can just say npm install, 224 what this npm install will do. 225 This will read your package or JSON 226 file and it will see, oh, this is 227 a package that you are using and you 228 don't have this node modules. 229 So just do an enter and it 230 will bring back it. 231 So you don't really have 232 to worry about node modules. 233 One more thing. 234 If you are built, if you are working 235 on a project and your project has, 236 let's say 30 dependencies, okay? 237 Now you know that all these 30 238 dependencies will be a part 239 of your package JSON, right? 240 This package or JSON 241 will keep a track. 242 If you share this project 243 with your friend, there is no need 244 to share the node modules. 245 So you can just 246 remove the node module. 247 So even if you are working with 248 git or GitHub, you can ignore 249 the node modules to be shadcn. 250 Okay? 251 So node modules you never ever 252 push on the GitHub because you 253 know these are very bulky. 254 Your friend will just take 255 the source code and he will run 256 the command that is npm install. 257 His npm install will automatically 258 read the package JSON, 259 fetch all the packages 260 from the Internet and create 261 a node modules folder for him. 262 So whenever you want to share your 263 project, no need to share this 264 node modules folder because this 265 is automatically generated so 266 anyone who has an Internet access 267 can fetch back this node modules 268 and sharing this will not cause 269 any issue. 270 But it's very heavy in size. 271 Okay, so now you understand 272 that what is happening. 273 So package JSON is a manifest or 274 a configuration file for you. 275 It keeps tracks 276 of the dependencies and. 277 And when you do npm install, 278 it basically reads your 279 dependencies list and tries 280 to install everything back. 281 Okay? 282 And there are even some shortcuts. 283 So you can just say like 284 for example, npm I. 285 So that also works. 286 No need to write npm install. 287 You can even do npm I at the rate 288 types slash, node and enter. 289 So this also works. 290 It is now becoming very fast because 291 I already already have the code. 292 So it is not basically installing it. 293 Okay, now there is one more file that 294 is this package hyphen lock JSON. 295 This is also a file which is 296 automatically generated. 297 Okay, now what this file 298 maintains you never touch this file, 299 this package log file. 300 Okay, so you have this package 301 hyphen lock JSON file. 302 This lock file maintains 303 dependencies of dependencies. 304 Let's say you are working 305 on a project A. 306 Your project A 307 is dependent on project B. 308 This project B is internally 309 using project C 310 and it uses project D to work. 311 So when you install project B, 312 this automatically also installs 313 project B, project C and D, right? 314 Because in order to use B, 315 C and D should also be there. 316 So all this track, right? 317 That which project is dependent 318 on which project and internally 319 dependent on which project that 320 all information npm internally 321 stores in this particular file 322 that is Package hyphen lock 323 JSON. 324 Okay, so you can see that, 325 you know, this particular thing 326 depends upon this thing. 327 Do you see that? 328 Like if you see there is something 329 known as unit decade types. 330 Did you installed this thing? 331 No, how this came? 332 Because this package that I wanted 333 to install further 334 depends on this particular thing. 335 So. 336 So that is the reason that 337 this is also installed. 338 So where it is kept track 339 in package hyphen lock JSON. 340 So I have just said, Hey, I just want 341 this package lock has fetched the 342 dependencies of this thing and there 343 is a chance that this package that 344 is this package further depends on 345 something which is not here in the 346 case. 347 But yeah, that is also possible. 348 So that is what package 349 hyphen log maintains. 350 And even if you delete this package 351 hyphen log, that's fine, you 352 can just do an npm install and that 353 will also be regenerated. 354 Okay, so you have to just 355 maintain this package JSON file. 356 If you lose this package JSON file? 357 Yeah. 358 Then that's a problem because 359 then you have to again create 360 this file and you have to list 361 down all the dependencies. 362 So this package JSON file 363 and your source code is something 364 that is very important. 365 Rest all things are regeneratable.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "06-node-third-party-modules.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/06-node-third-party-modules.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0038943216,
      0.0077570826,
      0.022560071,
      -0.058882095,
      0.00069750194,
      0.023925997,
      0.031692274,
      0.0031837928,
      0.014313018,
      -0.0066990885,
      -0.011233242,
      -0.00089613546,
      0.015823731,
      0.0073829554,
      0.114839025,
      0.009006194,
      -0.008190023,
      0.0061604595,
      0.013276692,
      -0.030598884,
      0.0072834315,
      0.0012304055,
      0.020513967,
      -0.012463144,
      0.005200833,
      -0.012156168,
      0.010665148,
      -0.013241183,
      0.025868593,
      -0.01338447,
      -0.011172611,
      -0.0044380166,
      -0.0012323332,
      0.010018656,
      0.023975698,
      0.015175952,
      0.005913733,
      0.0011263611,
      -0.0068754586,
      -0.008054222,
      -0.02023055,
      0.016482992,
      0.0045400416,
      -0.025754292,
      0.0057539986,
      -0.018574335,
      -0.0059716464,
      -0.0076870914,
      0.0025746603,
      0.0067816293,
      0.007068115,
      -0.013065495,
      -0.02194651,
      -0.17703336,
      -0.00933888,
      0.0037772472,
      0.025840571,
      0.0010376199,
      0.015600025,
      0.009601201,
      -0.023227982,
      -0.007842482,
      -0.04157832,
      0.011270341,
      -0.0051917667,
      -0.007615424,
      0.012317963,
      -0.0034266307,
      0.015003592,
      -0.01434179,
      0.014095318,
      -0.003622283,
      -0.01086953,
      -0.0005926734,
      -0.021184046,
      -0.015103432,
      0.011973637,
      -0.029485894,
      -0.008061489,
      0.02205914,
      -0.00081834284,
      0.0031566948,
      -0.0051110536,
      -0.021571549,
      0.008506978,
      0.009619249,
      -0.024361894,
      -0.016024185,
      -0.024955466,
      0.0069941594,
      -0.0038676073,
      0.0027141697,
      -0.005871245,
      0.009360689,
      -0.020324178,
      0.01108721,
      -0.011040652,
      0.0049222484,
      -0.0124948835,
      -0.0057577854,
      0.034570154,
      -0.0017886742,
      -0.035676915,
      -0.0046740123,
      0.00561607,
      0.03435802,
      0.007395889,
      0.0067557567,
      0.012771269,
      -0.027460476,
      -0.009092022,
      -0.00869809,
      -0.006028886,
      0.027349986,
      0.0012547863,
      -0.17642252,
      0.029016953,
      -0.014884277,
      -0.0072921957,
      0.006274406,
      -0.026200373,
      0.01247085,
      0.006420856,
      -0.0072970693,
      0.004462984,
      0.008276468,
      -0.0025598623,
      0.022263156,
      0.004831838,
      0.000012744629,
      -0.008338842,
      -0.006902927,
      -0.010703475,
      0.015755892,
      0.027086569,
      0.016291099,
      0.007520046,
      0.006063517,
      0.005811637,
      -0.024883997,
      0.010898769,
      0.01743831,
      0.0043185893,
      0.03108021,
      0.010923381,
      -0.0060142973,
      -0.0019148437,
      -0.00089126057,
      -0.009685554,
      -0.02730962,
      0.013804022,
      -0.021791961,
      0.015970998,
      -0.0050230054,
      0.023372838,
      -0.01854922,
      -0.020365037,
      0.026479803,
      0.0009540301,
      -0.0046242895,
      0.022306144,
      0.012089219,
      0.008737581,
      0.031691596,
      0.02479671,
      0.0120341685,
      -0.017858567,
      0.011136728,
      0.015593956,
      0.0019629656,
      0.006595504,
      -0.010795488,
      0.024914445,
      0.00862712,
      -0.016434783,
      -0.012531849,
      0.0070560095,
      -0.010210895,
      0.023505347,
      -0.024678284,
      0.010447551,
      0.011513263,
      0.011341428,
      0.006805627,
      0.02146387,
      -0.0053371135,
      -0.00330731,
      0.0122954175,
      0.02493154,
      -0.0044400864,
      0.0055049923,
      -0.019192157,
      0.010200086,
      0.01401103,
      0.0069100447,
      -0.01501968,
      -0.009334593,
      0.023752805,
      0.017281365,
      0.008802197,
      0.012084045,
      -0.0046247924,
      -0.007341137,
      -0.01765879,
      0.026805842,
      0.023052674,
      0.0045750113,
      -0.019594217,
      0.013548302,
      0.013172783,
      -0.018377839,
      -0.025328651,
      -0.00013276217,
      0.019425385,
      0.00044700693,
      -0.0018263714,
      0.009718921,
      0.010443353,
      0.011616736,
      -0.016462348,
      0.009419646,
      -0.009437897,
      0.01110003,
      0.027116874,
      0.013563425,
      0.0036197815,
      0.009067452,
      -0.0027611814,
      -0.0016615625,
      -0.025215715,
      0.0016226583,
      0.0037879513,
      -0.014197147,
      -0.0019851848,
      0.012365218,
      -0.009904401,
      -0.011504773,
      0.0005742279,
      -0.0016446717,
      -0.010749314,
      -0.01332682,
      -0.0044670724,
      -0.021001546,
      0.0056011323,
      0.02717562,
      0.0028625326,
      -0.018734291,
      0.0021151912,
      -0.019584067,
      -0.0016669711,
      -0.024336657,
      0.0076067303,
      -0.009659495,
      -0.010787422,
      0.0018179509,
      -0.0105043035,
      -0.0009520225,
      0.00064553536,
      -0.014551771,
      -0.031963006,
      0.000077110846,
      -0.009135159,
      -0.02194835,
      -0.007386284,
      0.010018749,
      0.0011123616,
      -0.0040992806,
      0.022599474,
      -0.022189226,
      -0.011322131,
      0.012654639,
      0.020384861,
      0.0092213,
      -0.016068792,
      -0.016078968,
      0.0039444077,
      -0.09751865,
      -0.00042651783,
      -0.0077285846,
      -0.03281975,
      -0.0031451655,
      0.015566612,
      -0.0029344042,
      0.023242932,
      0.02462961,
      -0.0004803957,
      -0.017291134,
      -0.0021958654,
      0.015071455,
      -0.0018121521,
      0.0024909815,
      0.010219345,
      -0.0045563253,
      -0.0069029806,
      0.005592574,
      -0.00871456,
      -0.00023212325,
      0.0047114175,
      -0.0034298154,
      0.0057264986,
      0.036229994,
      0.010938391,
      -0.020459384,
      0.03041147,
      0.025262607,
      -0.026446015,
      -0.010442488,
      0.0163021,
      -0.019240344,
      -0.003150485,
      -0.0069918265,
      -0.0055428743,
      0.025379768,
      -0.012544935,
      0.0020544208,
      -0.029367322,
      -0.007147671,
      -0.004885708,
      0.020501267,
      0.0041873436,
      -0.022573797,
      0.0065458287,
      0.0027426733,
      -0.02126197,
      -0.024173165,
      -0.0031448375,
      -0.00403103,
      0.0050149206,
      0.0067885015,
      -0.018324414,
      0.01028922,
      -0.0009200039,
      0.0037322268,
      0.0077307443,
      0.026249658,
      0.023951722,
      -0.011268316,
      -0.0023481678,
      0.0031248534,
      0.000013358244,
      0.013202311,
      -0.007405233,
      -0.00031763312,
      0.0052728145,
      0.0014681454,
      -0.0066791377,
      0.007611771,
      -0.022043528,
      -0.018091025,
      -0.024536567,
      0.013195521,
      -0.0015772699,
      0.007223149,
      0.011823499,
      -0.022224482,
      0.0038172395,
      0.014371128,
      0.019122051,
      0.020843916,
      0.017113326,
      0.0008801246,
      -0.0074531254,
      -0.01387856,
      0.013588795,
      -0.0070411246,
      -0.022686506,
      0.008515622,
      0.0324682,
      -0.0066243266,
      -0.00015362156,
      -0.014000583,
      0.020780057,
      -0.020598128,
      -0.026136851,
      -0.0064647235,
      0.015241528,
      0.010712737,
      -0.018256212,
      -0.014447251,
      0.020708673,
      0.0015082106,
      0.021824408,
      -0.011312242,
      0.0043430356,
      0.0013239738,
      -0.00051692215,
      0.008214692,
      0.0002617992,
      -0.00018855023,
      -0.0189159,
      -0.009049894,
      0.013627725,
      0.008432066,
      0.02163681,
      -0.015473992,
      -0.012974315,
      0.0008278891,
      -0.00987259,
      -0.009499103,
      0.02763067,
      -0.0003989495,
      -0.0009842454,
      0.009996837,
      -0.018394671,
      -0.009840136,
      -0.00745123,
      -0.00024097272,
      0.004549336,
      -0.037049066,
      -0.019350287,
      0.0074488902,
      -0.03448947,
      0.020194517,
      -0.014545204,
      -0.005353119,
      0.04231308,
      -0.028735274,
      0.0059929583,
      0.023496987,
      -0.032844562,
      -0.008880469,
      0.009805398,
      -0.031285662,
      -0.0061601014,
      -0.0016856472,
      0.008817458,
      0.0008942876,
      -0.0050629876,
      -0.0062150354,
      0.003960455,
      0.0064346436,
      0.0018664396,
      0.044507127,
      -0.0010287928,
      -0.015315116,
      -0.029150313,
      -0.0059352247,
      0.02361572,
      -0.015779309,
      -0.0042244336,
      0.0035424924,
      0.03464603,
      0.0008901821,
      0.00435895,
      -0.015553896,
      0.0037389565,
      -0.031075612,
      -0.013713981,
      -0.032101937,
      0.0014582955,
      0.032357085,
      -0.006420512,
      0.015061111,
      0.017279703,
      0.00924927,
      0.012345044,
      -0.010386169,
      -0.003817892,
      -0.0059627322,
      -0.0073346575,
      -0.0027282657,
      0.000757235,
      0.007851593,
      -0.013887756,
      -0.013272243,
      -0.026864016,
      0.016472334,
      -0.025825458,
      0.0029508395,
      -0.0076571545,
      0.011544135,
      0.027055949,
      -0.0054607214,
      0.0073142936,
      0.015070093,
      -0.0032009012,
      -0.01562714,
      0.00007450254,
      0.01831378,
      -0.021984758,
      0.021946993,
      0.0026430064,
      0.012240417,
      -0.016015057,
      -0.0035127737,
      0.024752824,
      -0.011796371,
      -0.023579882,
      -0.004352647,
      -0.0058872425,
      0.005831033,
      0.018630184,
      -0.019816784,
      0.0031240764,
      -0.030362831,
      0.012746249,
      0.028686685,
      -0.00050528604,
      0.0060941637,
      -0.009845308,
      0.021877142,
      -0.014660585,
      -0.032070354,
      0.017266097,
      -0.00046425065,
      -0.022754876,
      -0.009143702,
      0.007926509,
      0.014199389,
      0.0144712385,
      -0.013820948,
      -0.004020622,
      0.0038276976,
      0.019161925,
      0.017649984,
      -0.0038507008,
      -0.0047461917,
      -0.024659779,
      0.0009832714,
      0.014142404,
      -0.008318256,
      -0.0139751425,
      0.024428574,
      0.014113752,
      0.005051487,
      -0.018314794,
      -0.0042930786,
      0.003246465,
      0.014803497,
      -0.012832978,
      -0.008254427,
      0.032477126,
      -0.021675687,
      0.011723958,
      -0.0067443717,
      -0.002211024,
      0.0153434025,
      -0.0068174503,
      -0.0032556988,
      0.0018920645,
      -0.0141693065,
      -0.015077686,
      0.024450427,
      0.0025970496,
      0.03451126,
      -0.11891681,
      -0.0070030065,
      -0.0035166908,
      0.014488674,
      0.010210599,
      -0.019975236,
      0.01791836,
      -0.00447957,
      -0.009252736,
      -0.009525289,
      0.006010622,
      -0.008642938,
      0.007823569,
      0.017995402,
      -0.0055434057,
      -0.014964184,
      0.0028819216,
      0.018756466,
      0.02121122,
      -0.0010733508,
      -0.018737419,
      0.019814152,
      0.0162737,
      -0.0029413144,
      -0.026877344,
      -0.0029357227,
      0.021829305,
      -0.0041319686,
      -0.0013813262,
      -0.012126177,
      0.0074332193,
      -0.010437718,
      0.013239765,
      -0.006626132,
      0.038012855,
      0.00862184,
      -0.018650444,
      0.03019976,
      0.0066956533,
      0.011664554,
      0.01144072,
      0.016700594,
      0.022358162,
      0.028032469,
      0.0007090696,
      0.0054171183,
      0.030573046,
      -0.0038677414,
      0.003515298,
      0.062093034,
      -0.033735447,
      -0.024495453,
      -0.005144827,
      -0.018233448,
      0.013408033,
      0.006974726,
      0.025764545,
      0.009718902,
      -0.016589858,
      0.005269992,
      0.010868416,
      0.00850111,
      0.011985282,
      0.01846583,
      -0.0029359013,
      -0.0047587957,
      0.010665429,
      0.015312227,
      0.010802055,
      0.0014128435,
      0.0069197044,
      -0.0011184191,
      0.011009522,
      0.009364583,
      -0.004754165,
      0.01258163,
      0.0013240058,
      0.026626777,
      0.0043148776,
      0.015142604,
      -0.008560749,
      -0.010084604,
      -0.070769645,
      -0.0048772683,
      0.006119277,
      -0.003076216,
      0.033442765,
      0.01043818,
      -0.019428128,
      0.015455551,
      0.005631441,
      0.011697713,
      -0.004756255,
      0.005047592,
      -0.008074732,
      -0.0006932931,
      -0.014028443,
      -0.009015404,
      -0.003301036,
      -0.026983665,
      -0.009549504,
      0.012596135,
      -0.008222793,
      0.008428685,
      0.0029218576,
      -0.030299684,
      0.00042118857,
      0.027419476,
      -0.022489868,
      0.001114481,
      0.014413031,
      -0.018804342,
      0.019743783,
      -0.15935081,
      -0.002862415,
      -0.009141514,
      -0.010921629,
      0.0020366986,
      -0.002822749,
      -0.005953827,
      -0.012780475,
      0.014865293,
      -0.019484172,
      -0.006175041,
      -0.03641079,
      -0.030538818,
      0.001543278,
      0.0037949819,
      0.12625784,
      -0.009053378,
      0.016480215,
      0.009447633,
      0.030494822,
      -0.0134279225,
      -0.02099297,
      0.0036486979,
      0.020783566,
      -0.0069707637,
      0.0004994325,
      0.0183383,
      -0.021565557,
      0.022484744,
      0.0000596718,
      -0.007788052,
      -0.013282018,
      -0.007938916,
      0.014153058,
      0.003640735,
      -0.036585715,
      -0.0039998586,
      -0.011901651,
      0.00091248873,
      -0.0021439795,
      -0.010722214,
      -0.0008186399,
      -0.0007281562,
      0.010689696,
      0.0005162447,
      -0.00066400674,
      0.011599673,
      -0.043448206,
      -0.0101562515,
      -0.019798813,
      -0.011883455,
      -0.07142777,
      -0.0055870377,
      -0.00045533976,
      -0.008913282,
      0.051660027,
      0.0005727111,
      -0.00023755956,
      -0.0029730613,
      -0.0024499749,
      0.014752476,
      0.014298288,
      0.027042687,
      0.0006602009,
      -0.00070318114,
      -0.013155157,
      0.018289784,
      0.024617268,
      0.032169174,
      -0.012728316,
      0.012260311,
      0.005158556,
      -0.006233964,
      0.01580481,
      -0.032630216,
      -0.02924399,
      -0.020485623,
      0.017421281,
      0.0073685762,
      0.005948625,
      -0.016491584,
      0.016262453,
      -0.0036386729,
      -0.016777078,
      0.005705086,
      -0.02113713,
      -0.016428968,
      0.013437739,
      -0.024621183,
      -0.024901142,
      0.008599963,
      0.02169501,
      -0.0022969937,
      0.005090147,
      -0.017722668,
      -0.0069768736,
      0.0026343612,
      0.013217386,
      0.02936288,
      -0.010723218,
      0.007264384,
      -0.005892387,
      0.011063198,
      -0.023121092,
      0.021966154,
      0.030423801,
      0.00685479,
      0.010602943,
      0.0016950425,
      -0.008103149
    ]
  },
  {
    "id": "genai_cohort_nodejs_07_node_fs_module_vtt",
    "content": "Okay, so now we have a very 2 good knowledge on this require 3 function on this package JSON, 4 something on npm in it. 5 So now let's explore the FS module 6 and there is something really 7 new that I want to tell you. 8 Okay, so what I'm going 9 to do is I'm just going 10 to remove all the code from here. 11 So right now you can see 12 in my package JSON I have this 13 thing that we have already 14 seen in the last video. 15 So now what I'm going to do is 16 let's explore the FS module. 17 So what I can do is I can just 18 say const FS equals to require. 19 Okay, now I can use require 20 and I can just pass in the fs. 21 So now you can see that 22 the recommendation system 23 is working very good. 24 You can see we have a lot 25 of packages and I can say fs. 26 Now here is one thing. 27 Okay, this is something very new. 28 Now you can say either FS 29 in documentation, you will see 30 something like this, right? 31 So if I open the documentation, so 32 you can see that they are importing 33 in this particular manner, I.e. 34 node colon fs. 35 Now this is a relatively newer thing. 36 If even you say require fs, 37 this is going to work fine. 38 But in the newer versions 39 of Node js they are actually 40 moving, they're adding a support 41 for a namespaced this thing. 42 So this avoids the conflict. 43 So tomorrow if you have an FS 44 module, which is a third party 45 module as well, this will 46 avoid the conflict, right? 47 So this is telling the node js that 48 hey, this is a built in module. 49 So this is a relatively newer thing. 50 Older versions of Node 51 js don't have it. 52 It's only newer version. 53 So I also prefer this only. 54 So this makes this explicit that 55 if there is, if there is a package 56 name starting with node colon, 57 that's a built in package. 58 If it is just written like this, 59 it can be a, external package. 60 And if it starts with dot, 61 then that's a, then that's 62 a custom module, right? 63 So now I want to do it with node fs. 64 Now let's see what all we have. 65 So first you can read the files. 66 You can just say fs.read file sync. 67 Now here is one very interesting 68 thing that every function 69 that you see has a normal 70 version and a sync version. 71 So sync basically means this is going 72 to be a blocking operation. 73 Now what is a blocking 74 operation that we will cover 75 in the upcoming videos. 76 But as of now you can just, you 77 know, use a synchronized version or 78 I can say the blocking version. 79 So what I can do is I can just 80 give the notes txt file. 81 Okay so notes.txt file. 82 That is what I want to read. 83 And I want to read it as a u 84 sorry, I want to read it as a UTF 85 88 and this is going to give 86 you the contents of the file. 87 So just store it in the contents. 88 What do you call variable right? 89 And now just you can do a console 90 dot log on the contents. 91 So good control tilde and then 92 you can just say node and you can 93 just say index index and enter. 94 So you can see I'm able to read 95 the contents using this fs. 96 What you can do is you 97 can even create a file. 98 You can say fs.create 99 file okay, so create a. 100 I should say write file actually. 101 So right File. 102 Right. 103 While saying so let's go with 104 the blocking operation 105 and what is the name of the file? 106 So I'll just say copy.txt what do 107 you want to write in this file? 108 So let's say I want to write this or 109 maybe you can pass this content and 110 as a UTF8 so I want to pass UTF UTF8 111 so now what this particular thing is 112 going to do, Let me just move it up 113 and I'm just going to comment it out 114 because this is what we have seen. 115 This is going to create 116 a new file that is copy. 117 Txt and will write these contents. 118 So now you can see we don't 119 have any file that is copy. 120 Txt. 121 So if I run this particular code, 122 you can see it creates a new copy. 123 Txt file and you can see we 124 have the contents here. 125 What you can even do is that you 126 can actually read contents from 127 one file and then you can write 128 those contents in the another file. 129 So now if I run this code, what 130 you are going to say is that copy. 131 Txt is actually a copy of notes. 132 Txt One interesting thing here 133 to note is that this always 134 overrides the content, right? 135 So if I remove this and I just 136 say hey, what you're going 137 to notice is it always and always 138 overrides the content. 139 Similar to this, if you don't want 140 to override the content, 141 you can just say append file sync. 142 This will always add the content 143 to the file. 144 Okay? 145 It will not override. 146 You can see the content 147 is getting added. 148 So let's say if I give now 149 contents it is going to be added. 150 So pre previous data stays 151 and new content is getting added. 152 So you can even say hey 153 slash n for a new line. 154 So two new line characters 155 and then say hey. 156 And if I run it so you can see after 157 two lines you are getting an hey. 158 So you have append file, 159 you have write file, right? 160 So let me just write it here again 161 so that you have 162 the document ready, right? 163 You can refer to this code. 164 So earlier we have 165 seen write file sync. 166 So you can just say write something 167 which overrides the content. 168 This always creates a new con. 169 Basically append C file content. 170 You can even create directories. 171 Okay? 172 So you can just say fs 173 sorry fs.create.mkdir 174 that is for make directory. 175 What directory you want to make. 176 I want to make a directory 177 for let's say games, right? 178 So games. 179 And you can even pass 180 options like recursive. 181 Let's say you have more and in 182 which mode you want to create. 183 So I'll just say hey, FS mkdir node 184 and invalid archetype. 185 Oh, just a second. 186 I have to use 187 the synchronous version. 188 Yeah, so now you can see 189 it created a folder for me 190 that is games, right? 191 Similarly I can say hey, 192 inside the games, create a folder 193 XYZ and then create a. 194 And here you will 195 actually get an error. 196 So you can see that the error is 197 coming that because in Games 198 there is no folder xyz, right? 199 So to overcome this particular 200 problem, just say 201 recursive and set it to true. 202 Now it will automatically create all 203 the folders you can see in Games. 204 You have xyz, you have have a. 205 So you can create folders, you 206 can create directories, right? 207 And you can do something 208 like fs.remove directory. 209 Okay, let's say we have frm 210 dir saying 211 what directory want to remove? 212 I want to remove the games directory. 213 And again again, right? 214 Okay, so I want to just 215 remove this directory. 216 So if I do a node it gets an error. 217 Why? 218 Because Games is not 219 an empty directory. 220 So first you have to actually 221 remove all the directories. 222 So, so first let's 223 remove the A directory. 224 So you can see A is gone. 225 Then let's remove the xyz Then 226 you can see the XYZ also on. 227 And then finally we 228 can remove the game. 229 So that's a Linux feature, right? 230 You cannot remove a directory if 231 in Linux if it has some content. 232 So yeah, so same thing 233 it is doing that. 234 So now you have seen that using 235 this FS, you can do actually a lot 236 of stuff FS.Let's see 237 FS.Append file append file sync. 238 You have chmod. 239 So now you understand what all 240 these functions are doing, right? 241 These are all the functions that 242 are there to work with files. 243 Similarly, you have a function 244 to delete a file. 245 Let's say you have unlink. 246 So you can just say unlink sync. 247 Let's say I want to delete this copy. 248 Txt file. 249 Just pass copy. 250 Txt and this is going 251 to delete this file. 252 So you can see that file 253 got deleted, right? 254 This is a deleted file. 255 Nice. 256 So yeah, this FS module 257 is very powerful. 258 It gives you all the functionalities 259 to work on the file system. 260 Create directories, create files, 261 write to the files, open the 262 files in the read mode, open 263 file in a write mode, create 264 folders, delete folders, 265 basically everything related to 266 the file system. 267 So this was your node fs. 268 And now you also know that why 269 this node is there, right? 270 In order to avoid the conflict 271 and looks more cleaner. 272 So moving forward, we are going 273 to import the built in modules 274 using the node namespace, right? 275 And for third party we are going 276 to just do it like this. 277 So I hope that you like the video. 278 In the next video, let's 279 create a project. 280 Okay. 281 Let's see how we can create 282 an HTTP server in the node js.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "07-node-fs-module.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/07-node-fs-module.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.012696073,
      0.0015674493,
      0.041073784,
      -0.049767643,
      -0.011719359,
      0.018655395,
      0.0149552645,
      0.018232828,
      0.0019092856,
      0.0019159799,
      -0.011357012,
      -0.0064520235,
      0.005773972,
      0.030769603,
      0.111729816,
      0.019947367,
      -0.02649623,
      0.004330889,
      0.006746496,
      -0.019271612,
      -0.009036892,
      -0.018705403,
      0.010347143,
      -0.013284336,
      0.0076469937,
      0.012325456,
      0.01389907,
      -0.014502315,
      0.027716434,
      -0.020982783,
      0.009317391,
      -0.0032534357,
      0.004848342,
      0.0033564256,
      -0.0050994153,
      0.023247348,
      0.013796631,
      0.011382474,
      -0.013968818,
      0.0000070321166,
      -0.0005472425,
      0.007499065,
      0.01139663,
      -0.02378107,
      0.0021820685,
      -0.014772946,
      0.0011706277,
      -0.007001194,
      0.00093630236,
      0.019952802,
      0.0068701967,
      -0.019225573,
      -0.01478957,
      -0.1842076,
      0.0063668727,
      0.003292686,
      0.008639418,
      -0.0026208337,
      0.015009579,
      0.0044237226,
      -0.016146269,
      0.017697936,
      -0.03833501,
      -0.0144987665,
      -0.022227319,
      -0.01256976,
      -0.0021999695,
      -0.0024116067,
      -0.00090592843,
      -0.01457383,
      0.010992083,
      0.013789875,
      -0.025479617,
      -0.013766528,
      0.00017807793,
      -0.010992413,
      0.013772488,
      -0.012669955,
      -0.020958599,
      0.018949416,
      0.0024817553,
      -0.011294706,
      -0.004985456,
      -0.015342905,
      0.0017193754,
      -0.004955575,
      -0.034465272,
      -0.027867643,
      -0.020161532,
      0.012794386,
      0.010450312,
      -0.0006639527,
      -0.015383163,
      0.008211232,
      -0.026216635,
      -0.0013864982,
      0.015886176,
      0.011717094,
      -0.015423482,
      0.0050701303,
      0.025797341,
      -0.023233686,
      -0.031564858,
      0.018669182,
      0.0031327442,
      -0.00042334656,
      -0.0075530848,
      0.012724062,
      0.0091687925,
      -0.02732116,
      0.00038689518,
      -0.0071676476,
      -0.02012774,
      0.039675824,
      0.008680956,
      -0.1778756,
      0.013719526,
      0.0026446283,
      -0.009578964,
      0.004264511,
      -0.030085977,
      0.013677872,
      0.0047156187,
      -0.005583848,
      -0.0013559074,
      0.022357285,
      -0.010163405,
      0.015429434,
      0.003170432,
      0.002421595,
      -0.026904609,
      -0.0060924585,
      -0.007922379,
      0.019757507,
      0.022618415,
      0.014785014,
      0.014218299,
      -0.0009302704,
      -0.013853364,
      -0.02146964,
      0.026909512,
      0.02555916,
      0.0026240346,
      0.021610867,
      0.019828772,
      0.012845811,
      -0.0063343346,
      0.00009476858,
      -0.017307686,
      -0.032809135,
      -0.0052412706,
      -0.03411462,
      0.020798596,
      -0.008528209,
      0.0069999434,
      -0.034309465,
      0.010445212,
      0.015169753,
      0.0027811504,
      -0.01985435,
      0.010807498,
      -0.001836596,
      0.00064533,
      0.026305173,
      0.028465476,
      0.013311721,
      -0.015413476,
      0.02160612,
      -0.0024670379,
      0.015549264,
      -0.01756702,
      -0.0066409465,
      0.022510067,
      -0.015578222,
      -0.009509375,
      -0.0286666,
      -0.0074331127,
      0.0012674676,
      0.016095607,
      -0.0070638326,
      -0.009720121,
      -0.0012586593,
      0.010841624,
      -0.018494477,
      0.015322223,
      -0.0012632832,
      -0.014595706,
      0.00915384,
      0.02517148,
      -0.037933823,
      0.014485996,
      -0.025777197,
      0.0035343575,
      0.012592142,
      -0.0067703305,
      -0.016779108,
      -0.019820247,
      0.00844547,
      0.015964203,
      0.009329751,
      0.03479323,
      -0.020542722,
      0.0077311187,
      -0.021828312,
      0.023864385,
      0.0047003347,
      -0.015950007,
      -0.0016942594,
      0.01486642,
      0.018936645,
      -0.008561358,
      -0.007024632,
      -0.014049717,
      -0.0073419423,
      0.019876521,
      -0.01660278,
      0.018626496,
      0.00527826,
      0.009592893,
      -0.015806248,
      0.0031740477,
      0.0029837808,
      0.009792953,
      0.02754969,
      -0.004175493,
      0.012353187,
      0.00651919,
      -0.007790221,
      -0.0037859469,
      -0.013259982,
      0.014752168,
      0.004522095,
      -0.020584358,
      -0.019910302,
      0.009616909,
      0.010903529,
      -0.015072767,
      0.010822106,
      -0.0046062283,
      -0.0050912728,
      -0.016589325,
      -0.016705273,
      -0.0073503195,
      0.013520577,
      0.03342437,
      -0.0038594536,
      -0.011979657,
      -0.0014753175,
      -0.037624102,
      -0.028715992,
      -0.005181638,
      0.001986385,
      -0.0036297708,
      -0.02920752,
      0.008119961,
      -0.019616008,
      0.0014851296,
      -0.009135323,
      -0.0040141717,
      -0.036809705,
      -0.002625178,
      -0.013815024,
      -0.017401038,
      -0.0008891295,
      0.008883597,
      -0.00981446,
      -0.0012110024,
      0.02772916,
      -0.018573072,
      -0.00839396,
      0.028501963,
      0.00088652555,
      0.0013453701,
      -0.001520306,
      -0.0052118693,
      0.0051771114,
      -0.10081989,
      -0.009965024,
      0.002382384,
      -0.017808912,
      -0.009168215,
      0.021461593,
      -0.008399693,
      0.03917466,
      0.00400808,
      -0.00023246823,
      -0.011840522,
      -0.014147759,
      0.01894536,
      0.00805111,
      0.009442831,
      -0.009010149,
      0.012386783,
      0.008001996,
      0.0010073597,
      0.000247305,
      0.00038894784,
      -0.0014047722,
      -0.0015180901,
      -0.011652245,
      0.03241786,
      -0.0028434594,
      -0.006446443,
      0.014182559,
      0.04036231,
      -0.010104385,
      -0.0078848405,
      0.019675843,
      -0.027085345,
      -0.010386833,
      0.0045159045,
      -0.0028306737,
      0.028396595,
      -0.009674094,
      0.0053309537,
      -0.01656273,
      -0.015400672,
      -0.013344577,
      -0.0005543417,
      0.004328518,
      -0.009925655,
      0.005144207,
      0.0032214304,
      -0.021623531,
      -0.02198439,
      0.010664165,
      -0.016977951,
      0.004100857,
      0.011624678,
      0.0036301895,
      0.019276327,
      0.004691712,
      -0.012229316,
      0.0041317455,
      0.0064168093,
      0.006621107,
      -0.007160316,
      0.0037869809,
      0.011530631,
      0.0057061864,
      0.004942284,
      -0.002225347,
      0.002966723,
      -0.0065581626,
      -0.012918944,
      -0.0047910516,
      0.008146923,
      -0.0009997217,
      -0.011804988,
      -0.014688789,
      0.00016787971,
      0.0070527713,
      0.020081246,
      -0.00041204673,
      -0.031387217,
      0.026665293,
      0.01580632,
      0.0007553701,
      0.0020903896,
      0.019468967,
      0.01857304,
      -0.01220053,
      -0.0103100855,
      0.02265077,
      0.013104312,
      -0.027292034,
      -0.0051301983,
      0.018763931,
      -0.03157227,
      -0.0066999397,
      -0.0071914634,
      0.020505851,
      -0.02713722,
      -0.015421096,
      -0.01584969,
      0.019872436,
      -0.009517888,
      -0.0054134843,
      -0.014582519,
      0.013480719,
      0.0029838218,
      0.018414257,
      0.007195203,
      -0.006801263,
      -0.0037946345,
      0.0018697466,
      0.0047027837,
      -0.012452761,
      -0.017199231,
      -0.010094559,
      -0.012045972,
      0.020670723,
      0.026849447,
      0.017586853,
      -0.013175598,
      -0.009869891,
      0.010620525,
      0.014133902,
      -0.003523759,
      0.0006577845,
      -0.019229319,
      -0.0019292949,
      -0.0017821369,
      -0.009856047,
      -0.0105367545,
      -0.00023115588,
      0.008392916,
      0.010995715,
      -0.023499778,
      -0.012942187,
      0.003041661,
      -0.019691179,
      0.025448173,
      -0.018067623,
      -0.010069098,
      0.020590426,
      -0.013578494,
      0.017933065,
      0.009893903,
      -0.028899908,
      0.014299413,
      0.020863395,
      -0.012449311,
      0.0003503487,
      -0.0018610364,
      -0.009469871,
      -0.012200545,
      -0.01859018,
      -0.010339295,
      -0.010003521,
      0.0061160857,
      0.015877197,
      0.03436205,
      -0.017021103,
      0.0086719245,
      -0.012026575,
      -0.018191919,
      0.0025417418,
      -0.018339513,
      -0.0000492494,
      -0.00016364851,
      0.016828239,
      -0.0033193657,
      0.004737386,
      -0.009792624,
      -0.009272353,
      -0.020253347,
      0.006510918,
      -0.028786791,
      0.018408239,
      0.007963269,
      -0.023548648,
      -0.0007173402,
      -0.002001281,
      0.031228362,
      -0.0012771917,
      0.0019730818,
      0.003679935,
      -0.016082596,
      -0.016320385,
      -0.020740386,
      0.0035169956,
      0.03546752,
      -0.017776178,
      0.00092275644,
      -0.014301353,
      0.007820882,
      -0.025838718,
      0.009961727,
      -0.008189861,
      0.015621879,
      0.029091813,
      0.006887423,
      0.00854543,
      0.0021141372,
      -0.0026844027,
      -0.023761963,
      -0.01853131,
      0.02017274,
      -0.0027255225,
      0.002776566,
      0.009084736,
      0.01902301,
      -0.0055997,
      -0.014376736,
      0.02554446,
      -0.018550802,
      -0.021373294,
      0.014738174,
      -0.015519902,
      0.004264841,
      -0.00024563077,
      -0.004213543,
      0.008414374,
      -0.024964716,
      -0.00838129,
      0.027190857,
      -0.025683032,
      -0.011939589,
      -0.0015515457,
      0.011418068,
      -0.022441538,
      -0.021968279,
      0.028498378,
      -0.015363828,
      -0.0056791925,
      0.0066640303,
      0.0039411206,
      0.010003414,
      0.028797176,
      -0.025524072,
      -0.011869278,
      -0.004087471,
      0.023907354,
      0.00009065369,
      0.011657026,
      0.0042502214,
      -0.002989083,
      -0.012196437,
      0.01231301,
      -0.0033160509,
      -0.015724108,
      0.010965869,
      0.0020579486,
      -0.0056885057,
      0.00056944194,
      0.006645928,
      -0.0035164717,
      0.011840699,
      0.00036125886,
      -0.016645864,
      0.029201372,
      -0.021839563,
      0.0010357888,
      0.0018391553,
      0.009064232,
      0.0013334783,
      0.016976232,
      -0.008270126,
      0.000775271,
      0.000694806,
      -0.022255698,
      0.020377573,
      0.029167125,
      0.024432523,
      -0.118757665,
      0.0069021294,
      -0.0032730561,
      -0.013351926,
      0.0024510561,
      -0.008115901,
      0.0017382442,
      -0.020423425,
      -0.012859799,
      -0.0062684906,
      0.008273773,
      0.0053909873,
      0.010398939,
      0.0047443938,
      0.01298074,
      -0.020368218,
      0.003826024,
      0.028014094,
      0.03825787,
      -0.005529801,
      0.00047572935,
      -0.016687088,
      0.0026703903,
      0.009320065,
      -0.027038936,
      0.0023378737,
      0.011935514,
      0.0010808497,
      -0.01959245,
      -0.014114423,
      -0.0075731664,
      -0.0097861355,
      0.01485244,
      0.0060157483,
      0.033953607,
      0.010972278,
      -0.011915326,
      0.018428303,
      0.0017162978,
      0.0063703647,
      0.021856202,
      0.0058052265,
      0.016402565,
      0.002706891,
      0.0064270217,
      0.010911471,
      0.018972961,
      -0.02608288,
      0.0064482316,
      0.045205865,
      -0.050876375,
      -0.02805752,
      -0.008519654,
      -0.025290748,
      0.0086414255,
      -0.001272268,
      0.009952983,
      0.00073761144,
      -0.017909657,
      0.011930213,
      0.0172255,
      0.0067324894,
      -0.0056667593,
      0.012906715,
      -0.0076846452,
      -0.012161446,
      0.013762116,
      0.024976697,
      0.015476647,
      -0.008350009,
      -0.007446677,
      -0.00602094,
      -0.0022420492,
      0.009186389,
      -0.0074967765,
      0.011525647,
      0.0021232795,
      0.027306788,
      0.009029743,
      -0.0072023654,
      -0.023786223,
      -0.0035164012,
      -0.06874644,
      -0.00703601,
      0.008444584,
      -0.006917995,
      0.021234903,
      0.001829984,
      0.0043941294,
      0.005818828,
      0.014245755,
      -0.0013490426,
      -0.026206765,
      -0.0034453694,
      0.0015763689,
      -0.009386157,
      -0.026963158,
      -0.009137663,
      0.009788247,
      -0.031102171,
      -0.015784357,
      0.0136437975,
      -0.0071717687,
      0.0058799544,
      -0.00775059,
      -0.014387796,
      0.0024597584,
      0.008074343,
      -0.025921917,
      0.022020359,
      0.0010491045,
      -0.02493156,
      0.01050937,
      -0.14670417,
      -0.025590101,
      0.010178287,
      0.00907016,
      0.021044474,
      -0.0037706709,
      0.006582954,
      -0.0018011353,
      0.009105297,
      -0.026230182,
      0.004568492,
      -0.029590566,
      -0.019421922,
      0.009972338,
      -0.000034005585,
      0.13227026,
      -0.009402584,
      -0.0007026515,
      0.009665491,
      0.026535988,
      -0.00920628,
      -0.03704676,
      0.01769808,
      0.020711819,
      0.000346291,
      -0.008402321,
      0.013849289,
      -0.009287645,
      0.035055473,
      -0.00867639,
      -0.0019323458,
      -0.026595244,
      -0.012884311,
      0.029563624,
      -0.007558601,
      -0.0033060107,
      0.015483767,
      -0.0025576765,
      -0.009552731,
      0.011710251,
      0.001618895,
      0.013663686,
      -0.0076113907,
      -0.00060686097,
      0.0073271776,
      0.0077910204,
      0.014542733,
      -0.021541541,
      -0.015398995,
      -0.017434815,
      -0.017516762,
      -0.046693716,
      0.0053887074,
      -0.00024118493,
      -0.0048996746,
      0.030609306,
      -0.01528069,
      -0.001046098,
      -0.017713115,
      -0.013357519,
      0.015684037,
      -0.0048346235,
      0.020960953,
      0.0040501347,
      -0.004659991,
      -0.014363032,
      -0.007872643,
      0.009296951,
      0.030418638,
      -0.0038958131,
      0.012581283,
      0.024124173,
      -0.010227022,
      0.006447661,
      -0.032877747,
      -0.0053295447,
      -0.012208588,
      0.008835217,
      0.009995906,
      -0.013005522,
      0.0023867623,
      -0.007822974,
      -0.004314607,
      -0.037123937,
      0.012020555,
      -0.017805045,
      -0.025399813,
      0.016796771,
      -0.0042067403,
      -0.003900612,
      0.011410715,
      0.020420315,
      0.0010378357,
      0.00023164474,
      -0.031058865,
      0.0077637867,
      -0.0061985515,
      0.009463432,
      0.025488907,
      0.000074361764,
      0.009175474,
      0.003610919,
      -0.005213273,
      -0.037681907,
      0.012402374,
      0.016517403,
      0.011798925,
      0.0019263033,
      0.004668648,
      -0.005367233
    ]
  },
  {
    "id": "genai_cohort_nodejs_08_node_blocking_vtt",
    "content": "Okay, so in the previous lecture 2 we have seen that how we can 3 work with the file system. 4 And I know that there was one 5 unsolved puzzle that was piuz. 6 What is this synchronous version? 7 Right, so this particular video 8 is going to be super duper important 9 in order to understand 10 the node js internal working. 11 Okay, so what I'm going to do is 12 I'm going to create a file that 13 is, let's say script js file. 14 So this is where I am going to code. 15 Now let's import the FS module first. 16 So, so that is pretty simple. 17 You know the stuff that is 18 node and then colon fs. 19 Right? 20 So we have the FS module. 21 Now what we can do is. 22 Now see, let's say I have 23 a very simple task. 24 So my task is that, sorry, task. 25 My task is just read the contents 26 of notes Txt file, right? 27 So what you will do first, you will 28 do it in a synchronous manner. 29 So let's say I'll 30 just say console log that this 31 is the start of script. 32 Okay, Start of script. 33 Okay, Then what you will say, 34 you will say, hey, const. 35 I get the contents. 36 So how can you get the contents? 37 You will just say fs.read file sync 38 and just pass in the path 39 that is notes, dot TXT and let's 40 read it as a UTF8 encoding. 41 And then you will say, hey 42 console, log, the contents. 43 Okay, let's try to console 44 log the contents 45 of this particular thing. 46 And, and, and finally let's just 47 do a console log, saying that 48 this is the end of script. 49 So this is the code. 50 Like this is a very cool 51 code that you have written. 52 So now if I run this particular 53 code, can you guys guess 54 the output for this code? 55 Pretty simple, right? 56 First you will get this 57 console log, then you will get 58 the contents and then you 59 will get the end of script. 60 Now if I say node script and enter. 61 So yeah, indeed, you 62 got this art of script. 63 You got the contents 64 of the file and end of the script. 65 So this code actually worked 66 in a manner that we liked. 67 Now understand one thing. 68 Whenever you call the synchronous 69 operation, these 70 synchronous operations are actually 71 known as blocking operations. 72 Okay, these are known as 73 blocking operations. 74 What do I mean by that 75 blocking operation? 76 Guys, tell me one thing. 77 What do you think? 78 How much easy is it 79 to read this file? 80 How much time it can take to this 81 particular line of code to execute? 82 You will say that piu. 83 This depends upon the file, 84 for example, you are trying 85 to read this file, right? 86 You are trying to read 87 a file that is this one. 88 Now if this file is one mb, it will 89 take, it will be very quick, right? 90 Because one MB is very less. 91 It can be, but, but it 92 can be a 1gb file. 93 It can be a 1terabyte of file. 94 It can be a 1petabytes 95 of file, right? 96 So if this file is, let's say one 97 GB and it has a lot of content, 98 can I say that this whole 99 operation, this whole line is 100 going to take, let's say, maybe, 101 maybe one minute, depending upon, 102 of course, your machine 103 configuration and all that. 104 So let's say to read one GB 105 of file, this code takes one minute. 106 That means when your code 107 is executing line by line, 108 you execute this line. 109 Then you block the operation 110 for one minute, right? 111 This, this particular line blocks 112 everything for one minute. 113 So till one minute, if something is 114 going on in the background which 115 is trying to read the file, once 116 you have read this one GB of file, 117 then all the code will execute 118 here. 119 So let's say here you 120 have 100, line of code. 121 More. 122 So this, all 100 line 123 of code will execute 124 once this has been completed. 125 So that means if you see 126 the execution of the code, this 127 blocked everything right here was 128 a blocking thing, which is not good. 129 Okay? 130 You should not use 131 blocking operations. 132 I mean, it depends when 133 to use and when not to use. 134 But in most of the cases you 135 will not use the blocking operations 136 because let's say you are 137 building a web server, okay? 138 So let's say, let's. 139 Let me give you a real world example. 140 So if you are building a web server 141 and you have users, right? 142 If you, if this is your server 143 and this server is written in node, 144 I mean not written in node. 145 I mean it is, running node js. 146 So let's say the users 147 are coming, okay? 148 So this is your first user, this 149 is your second user, third 150 user, fourth user, and five user. 151 So users are coming. 152 Now let's say he requested that, Hey, 153 I want the contents of some file. 154 Now that file lives 155 on the server, and that particular 156 file is one GB in size. 157 Now you have to wait for one minute. 158 Your server is now blocked 159 and reading that file, 160 which is going to take one minute. 161 So for next one minute, all these 162 users cannot use your server. 163 You get it, right? 164 Because you have made your 165 server busy to read that file. 166 And all these extra users are, are 167 now going to face a downtime, okay? 168 They will say, hey, 169 the server is not working. 170 You remember that when you were 171 in college or when you were in 172 school, you used to check your 173 result and when there is a lot 174 of rush, server didn't respond, 175 it is going to take a lot of 176 time. 177 So because of this one user, because 178 you have written your code in a 179 synchronous way or in a blocking 180 way, due to this blocking nature, 181 you have made your server work a 182 lot, right? 183 Your server is continuously working 184 to read that file. 185 But in the, on the other hand, 186 no other request is served. 187 So this is your blocking operation. 188 So this is what you're doing here. 189 Now alternative to the blocking 190 operation is 191 an asynchronous operation, also 192 known as non blocking. 193 Okay, so let me show 194 you how that works. 195 So on the other hand you have 196 asynchronous, so you can 197 do it asynchronously or 198 also known as non blocking. 199 So in non blocking fashion, 200 what you can do is you 201 can just say fs.read file. 202 Okay, now this is an asynchronous. 203 Now what you will notice is that 204 first parameters, remain same, 205 second parameter remain same. 206 Only difference is that now you have 207 to pass a callback function, right? 208 Because this particular operation 209 runs in background, right? 210 Runs somewhere else. 211 How will it tell you that? 212 Hey, I am. 213 I have completed reading the file 214 and how will it give you the data? 215 So for that it requires 216 a callback function. 217 In this callback function, the first 218 parameter is the error if there 219 is any, and second is the data. 220 So you can actually keep 221 a check that, hey, if it has got 222 error, you can just do 223 a console dot log of the error. 224 So whatsoever is the error. 225 Else you can just console log 226 the contents of the file. 227 So you can just say console.log 228 contents got. 229 And you can just say, hey, 230 these are the contents. 231 So now what you have done is you 232 have converted this piece of code. 233 Okay, you can just pause 234 the screen right here. 235 This particular piece of code 236 and this piece of code are 237 actually doing the same thing. 238 The only difference is this is non 239 blocking and this is blocking. 240 So now if I remove this code. 241 So now what you have is you have this 242 console log start, you are doing 243 some asynchronous operation and end. 244 Now interestingly, if I run 245 this code, and we got the error 246 because this is not content, 247 actually this is data. 248 Okay, so yeah, my bad. 249 So if I run this particular code 250 again, start of script, end of 251 script and then you got the content, 252 do you see what happened? 253 That this particular line, this 254 particular statement was not 255 able to block the execution. 256 See, we got start first, 257 that is on the top. 258 Then we got end of the script. 259 See end of the script. 260 Meanwhile this thing was reading 261 the file in the background. 262 And once it has completed reading 263 the file, once it got the content 264 contents, it executed a function 265 that I have passed as a callback 266 function which is at the end. 267 So if Even you have 100 line 268 of code that will continue to work 269 while it is reading the file. 270 So this is how the asynchronous 271 or non blocking operation works. 272 So whenever you do a heavy 273 task, for example CFS. 274 Everything has a synchronous 275 and a non synchronous way. 276 For example append file, this 277 is what this is 278 asynchronously appending the data. 279 But, but on the synchronous 280 this is a blocking call. 281 Similarly CHMOD is an asynchronous 282 CHMOD sync is a blocking operation. 283 So every operation has an equivalent 284 blocking and non blocking code. 285 So the code is absolutely same. 286 The only difference is that 287 the read file is asynchronous, 288 whereas the synchronous version 289 is a blocking operation. 290 And it doesn't take any 291 callback, it gives you the content 292 as a return statement. 293 But here you have to pass a 294 callback function, which makes 295 sense right now at this 296 particular point of time I can 297 even go a, too much deep into 298 the architecture of node js, 299 how node js works. 300 But let's keep that 301 for the next video. 302 I will try to explain that how 303 internally JavaScript or 304 I can, I should say the Node js 305 handles all these requests. 306 So let's talk about that 307 thing in the next video. 308 So yeah, super excited 309 for the next video. 310 Let's meet in the next one. 311 Until then, bye bye and take care.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "08-node-blocking.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/08-node-blocking.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.015501291,
      0.009069864,
      0.03731222,
      -0.054645628,
      -0.03467736,
      0.009614142,
      0.02129306,
      0.017964697,
      -0.003930187,
      0.020799633,
      0.0014063742,
      0.014380479,
      0.00026368778,
      0.026734613,
      0.11148107,
      0.0055989358,
      -0.023982042,
      0.0012216978,
      -0.00523267,
      -0.023981433,
      0.006243323,
      -0.014439704,
      0.01072959,
      -0.01132727,
      0.0011037303,
      0.017274804,
      0.0062639425,
      -0.0043619187,
      0.030147253,
      -0.013299557,
      -0.003091798,
      -0.011695637,
      -0.00053909916,
      0.021157775,
      0.005133857,
      0.02910112,
      0.0123637915,
      0.0055771503,
      -0.011879212,
      0.013812945,
      0.00090821553,
      -0.0038530654,
      0.019891396,
      -0.030583387,
      -0.017007293,
      0.00038166885,
      -0.0045161876,
      -0.010544126,
      0.00094231224,
      0.022577208,
      0.0060747247,
      -0.008979531,
      -0.0039167665,
      -0.18173005,
      -0.0052093323,
      0.004716733,
      0.0051797205,
      0.004893946,
      0.00043106603,
      0.0011460567,
      -0.023982577,
      0.019201653,
      -0.02544106,
      -0.0054859887,
      -0.022868358,
      -0.013722487,
      0.014318223,
      -0.0012732525,
      0.009722908,
      -0.0023572305,
      0.0064809783,
      0.008053089,
      -0.020128518,
      0.0021624835,
      -0.005140218,
      -0.016921317,
      0.016379945,
      0.008092422,
      -0.011574729,
      0.0031605912,
      -0.0053140237,
      -0.023752026,
      -0.008855868,
      -0.028403608,
      0.0070776157,
      0.0101571465,
      -0.032821752,
      -0.02482477,
      -0.0041218777,
      -0.0017517398,
      0.0018542409,
      0.011377965,
      -0.018753836,
      -0.013545395,
      -0.015923252,
      -0.007468973,
      0.0060664476,
      0.01950623,
      -0.014354754,
      -0.0021905766,
      0.022596957,
      -0.006061936,
      -0.021046463,
      0.021707214,
      -0.007857334,
      0.004042448,
      -0.00008721844,
      0.0055603064,
      0.027603298,
      -0.014313844,
      -0.0045574303,
      -0.007858284,
      -0.013326911,
      0.021506293,
      -0.00036614854,
      -0.1726869,
      0.016432699,
      -0.00093623484,
      -0.014196393,
      0.0003355705,
      -0.013044019,
      0.0017953087,
      0.012772362,
      -0.0042858203,
      0.0013464013,
      0.02084099,
      -0.004322815,
      0.018885525,
      0.011622668,
      0.0069448976,
      -0.011823649,
      -0.009893687,
      -0.01245208,
      0.027780222,
      0.042325243,
      0.013908121,
      0.022259342,
      -0.030852158,
      -0.0062111253,
      -0.019616695,
      0.027501177,
      0.022811951,
      -0.003786415,
      0.031668972,
      0.007845078,
      0.008323407,
      -0.014835869,
      -0.004458591,
      -0.008755135,
      -0.035981957,
      -0.002980665,
      -0.006315257,
      0.02055464,
      0.007110595,
      0.020655083,
      -0.03916679,
      0.009008399,
      0.020874487,
      0.019443678,
      -0.022088712,
      0.007618866,
      -0.008256231,
      -0.005844547,
      0.028335696,
      0.026370063,
      0.011586807,
      -0.0100431545,
      0.03473937,
      0.003795555,
      0.0017629279,
      -0.0028618134,
      0.002704099,
      0.002682983,
      -0.012445905,
      0.0061649997,
      -0.025955465,
      -0.0131737795,
      -0.007937567,
      0.031838227,
      -0.008921858,
      -0.00014758063,
      -0.0035304574,
      -0.009160524,
      -0.022852268,
      -0.011804501,
      -0.006972296,
      -0.030244075,
      0.008222775,
      0.020437727,
      -0.03279715,
      0.029384105,
      -0.026422208,
      -0.0107972,
      0.003719267,
      -0.0075591607,
      -0.026483785,
      -0.026338007,
      -0.00035156202,
      0.01587747,
      0.0020069196,
      0.013283845,
      -0.01676743,
      0.02526631,
      -0.03212691,
      0.018822819,
      -0.007650803,
      -0.0015100695,
      0.012324504,
      0.008794035,
      0.022168495,
      -0.001720574,
      -0.008397742,
      -0.0046226103,
      0.00900721,
      0.013567411,
      -0.022132372,
      0.01000397,
      0.0074915453,
      0.0040359157,
      -0.010532219,
      -0.016921055,
      -0.0031688174,
      -0.00004991538,
      0.032247584,
      0.018287884,
      0.01400608,
      0.016632581,
      -0.009826826,
      0.008171277,
      -0.008720687,
      0.00504616,
      0.018809978,
      -0.028812403,
      -0.00076851685,
      0.0027694027,
      0.002987741,
      0.0033409942,
      0.008410697,
      0.003189513,
      0.004921793,
      -0.019102383,
      0.007686921,
      -0.0059823114,
      0.013327027,
      0.027660118,
      -0.005437701,
      -0.009516626,
      0.0086689,
      -0.04559058,
      -0.041899703,
      0.0028765267,
      0.009775865,
      0.0024274592,
      -0.023149675,
      0.008671732,
      -0.036927238,
      -0.011801392,
      -0.0088704135,
      -0.014913597,
      -0.037341096,
      -0.0036353695,
      -0.023458669,
      -0.009780012,
      0.007580507,
      0.017757248,
      0.00012436278,
      -0.0079252655,
      0.017242646,
      -0.021650083,
      -0.003409596,
      0.010064313,
      -0.0062628835,
      0.0013154163,
      0.009322301,
      -0.009511514,
      0.0053109694,
      -0.09471291,
      0.004528482,
      -0.0022487536,
      -0.022728464,
      -0.004580887,
      0.006823759,
      -0.0050946563,
      0.0316136,
      0.007495777,
      0.001021642,
      0.010175566,
      -0.004692424,
      0.02059821,
      -0.0054236054,
      0.011494691,
      -0.0072660684,
      0.019035606,
      0.0061925035,
      0.0018337916,
      -0.0075619495,
      -0.013696009,
      -0.005585803,
      0.012423004,
      -0.020082444,
      0.012226364,
      0.007377733,
      -0.010131636,
      0.010857548,
      0.034968443,
      -0.0099726515,
      0.0064677075,
      0.025016397,
      -0.03754199,
      -0.0039258287,
      -0.006266349,
      -0.0054626223,
      0.036468048,
      -0.010573503,
      0.001688649,
      -0.005801999,
      -0.017333088,
      -0.012607127,
      0.012163887,
      -0.0031829327,
      -0.005469423,
      -0.0057187355,
      0.011577573,
      0.01455897,
      -0.026926562,
      0.013531252,
      -0.021809785,
      -0.007322522,
      0.005012674,
      -0.006790654,
      0.01305666,
      0.007307982,
      0.0015113147,
      0.008338514,
      0.007959088,
      0.012880115,
      -0.008438832,
      0.0037745126,
      0.018362368,
      0.017538507,
      0.0064909337,
      0.00030660184,
      0.01896485,
      -0.015242711,
      -0.017468773,
      -0.01436688,
      0.0018376668,
      0.009603431,
      -0.02814431,
      -0.034155067,
      -0.0047590653,
      0.0063579786,
      0.012122681,
      -0.010224687,
      -0.029810887,
      0.041883595,
      0.02239565,
      0.004069952,
      0.011726722,
      0.028465645,
      0.028636739,
      0.0022274326,
      -0.012905943,
      0.008067018,
      0.0071292273,
      -0.011894819,
      -0.0048186,
      0.026221883,
      -0.035067134,
      -0.0027448584,
      -0.015496326,
      0.013602088,
      -0.028167168,
      -0.0006345883,
      -0.015784066,
      0.0051949075,
      -0.012781261,
      -0.000734073,
      -0.0051785,
      -0.00029886418,
      0.0016387098,
      0.024242066,
      -0.0043247784,
      0.011966611,
      -0.0052312296,
      -0.01597885,
      -0.00095316034,
      -0.018097442,
      -0.010530494,
      -0.015388579,
      -0.0146926865,
      0.024719076,
      0.01685015,
      0.011535184,
      -0.001547725,
      -0.007881945,
      0.008778349,
      0.0170879,
      -0.0021964032,
      -0.006218831,
      -0.020864382,
      -0.002001827,
      -0.013404007,
      0.0071525327,
      -0.007051954,
      -0.01903252,
      -0.00069606607,
      0.017843693,
      -0.006076868,
      -0.011583407,
      0.0062378407,
      -0.018201435,
      0.0104784295,
      0.0069987,
      -0.0073408578,
      0.019253174,
      -0.007812974,
      0.020319866,
      0.01001232,
      -0.017338917,
      0.014363032,
      0.017528877,
      -0.014338243,
      -0.0112545015,
      0.004075311,
      -0.0092250295,
      -0.022164479,
      -0.02561656,
      -0.026731184,
      -0.003754791,
      0.012981673,
      0.022954753,
      0.026987843,
      -0.0016768929,
      0.015411381,
      -0.018680256,
      -0.0049905,
      0.000111814334,
      -0.014256579,
      -0.010124293,
      0.014072596,
      0.009542744,
      0.00048082683,
      0.014047815,
      -0.007532397,
      0.0031873053,
      -0.0114798155,
      -0.006227608,
      -0.038178712,
      0.0056250365,
      0.02286101,
      -0.005012049,
      0.00042989766,
      -0.0069765314,
      0.038607612,
      -0.00399261,
      -0.0015352838,
      0.005346717,
      -0.014898818,
      -0.0016599395,
      -0.01699572,
      0.00033772053,
      0.029740818,
      -0.023438111,
      0.0005055633,
      -0.019716315,
      -0.021969432,
      -0.023162002,
      0.005546287,
      -0.004500582,
      0.02251151,
      0.026154943,
      0.013025913,
      0.0033427526,
      -0.0054198583,
      -0.0012681354,
      -0.016051643,
      -0.027810488,
      0.011597349,
      -0.008871737,
      -0.0006733182,
      0.0042647384,
      0.01601276,
      -0.0131182615,
      -0.01001317,
      0.031165332,
      -0.008961432,
      -0.0063454667,
      0.008442655,
      -0.024246901,
      0.007680896,
      -0.0014226078,
      -0.010306752,
      0.0043510385,
      -0.02659634,
      -0.0115773445,
      0.015315574,
      -0.029684702,
      -0.003118985,
      -0.0006934339,
      -0.00736099,
      -0.02516712,
      -0.024570033,
      0.041093428,
      -0.013049734,
      -0.010277847,
      0.004607987,
      0.0021799803,
      -0.00079312985,
      0.009961119,
      -0.021881545,
      0.005391217,
      -0.0031819143,
      0.008643444,
      -0.011768119,
      -0.006952438,
      -0.003984815,
      0.0059249206,
      -0.017204218,
      -0.002362645,
      0.0018861019,
      -0.017703027,
      0.0321574,
      -0.00023057015,
      -0.02059761,
      0.0046881675,
      0.010184293,
      0.0055179275,
      0.0046955934,
      -0.008102502,
      -0.03180345,
      0.03442645,
      -0.02672644,
      -0.012634967,
      0.0035512703,
      -0.0019645595,
      -0.000654825,
      0.011866612,
      -0.0082829585,
      0.0043202788,
      -0.01740578,
      -0.02606017,
      0.0028185397,
      0.021841923,
      0.014913249,
      -0.12440313,
      0.011655389,
      -0.01762817,
      -0.0146936085,
      0.0014960784,
      0.0063691726,
      -0.0040627527,
      -0.021915516,
      -0.009738069,
      -0.006516816,
      0.0040842257,
      0.00031357005,
      0.007986993,
      0.007826281,
      -0.0020079536,
      -0.019935865,
      -0.008867078,
      0.036439262,
      0.03728583,
      -0.011611427,
      0.004621881,
      -0.007517785,
      -0.002592323,
      0.009509063,
      -0.011316449,
      0.008175308,
      0.024128132,
      -0.002614108,
      -0.003832898,
      -0.015462959,
      -0.0031748128,
      -0.012878969,
      0.010771746,
      -0.0027391259,
      0.032507617,
      -0.01092372,
      0.0028021806,
      0.001985305,
      0.013351627,
      0.014293194,
      0.011319554,
      -0.008013448,
      -0.005212871,
      0.009534845,
      -0.016867276,
      0.012929859,
      0.029712664,
      -0.019851517,
      -0.0027868403,
      0.04160123,
      -0.037140526,
      -0.03781155,
      0.0040140036,
      -0.028628374,
      0.00265585,
      -0.0031785814,
      0.020220554,
      0.0018450825,
      -0.0076418174,
      0.009971042,
      0.014499332,
      0.009516559,
      -0.0067840694,
      0.010519623,
      -0.016846744,
      -0.010356227,
      0.020114172,
      0.015137999,
      0.022874352,
      0.0020742838,
      -0.017223237,
      -0.002152807,
      -0.01350282,
      0.017267182,
      -0.0053914767,
      -0.0046216026,
      0.0041690143,
      0.031462666,
      -0.0043273466,
      0.013790691,
      -0.02015622,
      -0.008079637,
      -0.06785081,
      -0.009104555,
      0.0044086017,
      -0.008147211,
      0.014725108,
      -0.010045588,
      0.004127958,
      -0.0058943382,
      0.01114473,
      -0.008193482,
      -0.021420786,
      -0.0051964186,
      -0.0012048796,
      0.0026600119,
      -0.013222396,
      0.0011505638,
      0.009127081,
      -0.02785562,
      -0.01760181,
      0.008889322,
      -0.011222258,
      0.009662102,
      -0.0078075845,
      -0.00075838005,
      0.020166818,
      -0.004349205,
      -0.034401212,
      0.017407557,
      0.0063034594,
      -0.021188362,
      -0.0030254507,
      -0.14390245,
      -0.01650096,
      0.026529487,
      0.021065796,
      0.007639996,
      -0.017006597,
      -0.01660342,
      -0.013268927,
      0.0043877484,
      -0.02250138,
      -0.013479419,
      -0.019297322,
      -0.01062865,
      0.012031513,
      0.000827176,
      0.14193626,
      0.007530871,
      0.0031618318,
      0.00065899367,
      0.014924122,
      -0.0010202465,
      -0.020068102,
      0.014689295,
      0.022006823,
      0.000031921034,
      0.0066029946,
      0.0061747753,
      -0.007568498,
      0.020176757,
      0.0055371723,
      0.013484598,
      -0.038010567,
      -0.027645426,
      0.0222752,
      -0.0076380293,
      -0.007522919,
      0.016886216,
      -0.010272244,
      -0.011192274,
      -0.0066609187,
      -0.0009141561,
      0.008554378,
      -0.0076760403,
      0.010704692,
      0.0010659795,
      0.0028114917,
      0.008485868,
      -0.02588803,
      -0.02389816,
      -0.014558217,
      -0.0017774781,
      -0.05244534,
      -0.0025745372,
      -0.007860244,
      -0.017824328,
      0.01658932,
      -0.021267492,
      0.009109234,
      -0.007337596,
      -0.024758097,
      -0.006421711,
      -0.0131884925,
      0.013940117,
      -0.004958462,
      -0.006450196,
      -0.025830347,
      -0.012298413,
      0.017124297,
      0.022163441,
      -0.0028275657,
      -0.0019866657,
      0.018487183,
      -0.010678634,
      -0.014682608,
      -0.015172631,
      -0.004556528,
      -0.013726247,
      0.0018434038,
      0.0042412193,
      -0.026380468,
      -0.010384834,
      0.0001146525,
      0.0040216516,
      -0.020168403,
      0.0142799355,
      -0.00213783,
      -0.024392372,
      0.0140677765,
      0.00083473616,
      -0.028042806,
      -0.0006686873,
      0.010415076,
      0.0074557927,
      0.030050632,
      -0.018930756,
      0.010396459,
      -0.012060832,
      0.0026906785,
      0.0059380927,
      0.001960329,
      0.010064968,
      -0.028735852,
      -0.0038120013,
      -0.011810282,
      0.030170279,
      0.00993649,
      0.010945847,
      -0.0060527385,
      0.008544022,
      -0.027230533
    ]
  },
  {
    "id": "genai_cohort_nodejs_09_node_architecture_vtt",
    "content": "Okay, so in the previous lecture 2 we have seen that how we can 3 work with the file system. 4 And I know that there was one 5 unsolved puzzle that was piuz. 6 What is this synchronous version? 7 Right, so this particular video 8 is going to be super duper important 9 in order to understand 10 the node js internal working. 11 Okay, so what I'm going to do is 12 I'm going to create a file that 13 is, let's say script js file. 14 So this is where I am going to code. 15 Now let's import the FS module first. 16 So, so that is pretty simple. 17 You know the stuff that is 18 node and then colon fs. 19 Right? 20 So we have the FS module. 21 Now what we can do is. 22 Now see, let's say I have 23 a very simple task. 24 So my task is that, sorry, task. 25 My task is just read the contents 26 of notes Txt file, right? 27 So what you will do first, you will 28 do it in a synchronous manner. 29 So let's say I'll 30 just say console log that this 31 is the start of script. 32 Okay, Start of script. 33 Okay, Then what you will say, 34 you will say, hey, const. 35 I get the contents. 36 So how can you get the contents? 37 You will just say fs.read file sync 38 and just pass in the path 39 that is notes, dot TXT and let's 40 read it as a UTF8 encoding. 41 And then you will say, hey, 42 console, log, the contents. 43 Okay, let's try to console 44 log the contents 45 of this particular thing. 46 And, and, and finally let's just 47 do a console log, saying that 48 this is the end of script. 49 So this is the code. 50 Like this is a very cool 51 code that you have written. 52 So now if I run this particular 53 code, can you guys guess 54 the output for this code? 55 Pretty simple, right? 56 First you will get this console 57 log, then you will get 58 the contents, and then you will 59 get the end of script. 60 Now if I say node script and enter. 61 So yeah, indeed, you 62 got this art of script. 63 You got the contents 64 of the file and end of the script. 65 So this code actually worked 66 in a manner that we liked. 67 Now understand one thing. 68 Whenever you call the synchronous 69 operation, these 70 synchronous operations are actually 71 known as blocking operations. 72 Okay, These are known as, 73 blocking operations. 74 What do I mean by that 75 blocking operation? 76 Guys, tell me one thing. 77 What do you think? 78 How much easy is it 79 to read this file? 80 How much time it can take to this 81 particular line of code to execute? 82 You will say that piu. 83 This depends upon the file. 84 For example, you are trying 85 to Read this file, right? 86 You are trying to read 87 a file that is this one. 88 Now if this file is one mb, it will 89 take, it will be very quick, right? 90 Because one MB is very less. 91 It can be, but, but it 92 can be a 1gb file. 93 It can be a 1terabyte of file. 94 It can be a 1petabytes 95 of file, right? 96 So if this file is, let's say, one 97 GB and it has a lot of content, 98 can I say that this whole 99 operation, this whole line is 100 going to take, let's say, maybe, 101 maybe one minute, depending upon, 102 of course, your machine 103 configuration and all that. 104 So let's say to read one GB 105 of file, this code takes one minute. 106 That means when your code 107 is executing line by line, 108 you execute this line. 109 Then you block the operation 110 for one minute, right? 111 This, this particular line docks 112 everything for one minute. 113 So till one minute, if something is 114 going on in the background which 115 is trying to read the file, once 116 you have read this one GB of file, 117 then all the code will execute 118 here. 119 So let's say here you 120 have 100, line of code. 121 More so this, all 100 line 122 of code will execute 123 once this has been completed. 124 So that means if you see 125 the execution of the code, this 126 blocked everything right here was 127 a blocking thing, which is not good. 128 Okay? 129 You should not use 130 blocking operations. 131 I mean, it depends when 132 to use and when not to use. 133 But in most of the cases you 134 will not use the blocking operations 135 because let's say you are 136 building a web server, okay? 137 So let's say, let's. 138 Let me give you a real world example. 139 So if you are building a web server 140 and you have users, right? 141 If you, if this is your server 142 and this server is written in node, 143 I mean not written in node. 144 I mean it is, running node js. 145 So let's say the users 146 are coming, okay? 147 So this is your first user, this 148 is your second user, third 149 user, fourth user, and five user. 150 So users are coming. 151 Now let's say he requested that, Hey, 152 I want the contents of some file. 153 Now that file lives 154 on the server, and that particular 155 file is one GB in size. 156 Now you have to wait for one minute. 157 Your server is now blocked 158 and reading that file, 159 which is going to take one minute. 160 So for next one minute, all these 161 users cannot use your server. 162 You get it, right? 163 Because you have made your 164 server busy to read that file. 165 And all these extra users are, are 166 now going to face a downtime, okay? 167 They will say, hey, 168 the server is not working. 169 You remember that when you were 170 in college or when you were in 171 school you used to check your 172 result and when there is a lot 173 of rush, server didn't respond, 174 it is going to take a lot of 175 time. 176 So because of this one user, because 177 you have written your code in a 178 synchronous way or in a blocking 179 way, due to this blocking nature, 180 you have made your server work a 181 lot, right? 182 Your server is continuously working 183 to read that file. 184 But in the, on the other hand, 185 no other request is served. 186 So this is your blocking operation. 187 So this is what you're doing here. 188 Now alternative to the blocking 189 operation is 190 an asynchronous operation, also 191 known as non blocking. 192 Okay, so let me show 193 you how that works. 194 So on the other hand you have 195 asynchronous, so you can 196 do it asynchronously or 197 also known as non blocking. 198 So in non blocking fashion, 199 what you can do is you 200 can just say fs.read file. 201 Okay, now this is an asynchronous. 202 Now what you will notice is that 203 first parameters remain same, 204 second parameter remain same. 205 Only difference is that now you have 206 to pass a callback function, right? 207 Because this particular operation 208 runs in background, right? 209 Runs somewhere else. 210 How will it tell you that? 211 Hey, I am. 212 I have completed reading the file 213 and how will it give you the data? 214 So for that it requires 215 a callback function. 216 In this callback function, the first 217 parameter is the error if there 218 is any, and second is the data. 219 So you can actually keep 220 a check that, hey, if it has got 221 error, you can just do 222 a console dot log of the error. 223 So whatsoever is the error. 224 Else you can just console log 225 the contents of the file. 226 So you can just say console.log 227 contents got. 228 And you can just say, hey, 229 these are the contents. 230 So now what you have done is you 231 have converted this piece of code. 232 Okay, you can just pause 233 the screen right here. 234 This particular piece of code 235 and this piece of code are 236 actually doing the same thing. 237 The only difference is this is non 238 blocking and this is blocking. 239 So now if I remove this code. 240 So now what you have is you have this 241 console log start, you are doing 242 some asynchronous operation and end. 243 Now interestingly, if I run 244 this code, and we got the error 245 because this is not content, 246 actually this is data. 247 Okay, so yeah, my bad. 248 So if I run this particular code 249 again, start of script, end of 250 script and then you got the content, 251 do you see what happened? 252 That this particular line, this 253 particular statement was not 254 able to block the execution. 255 See, we got start first, 256 that is on the top. 257 Then we got end of the script. 258 See end of the script. 259 Meanwhile this thing was reading 260 the file in the background. 261 And once it has completed reading 262 the file, once it got the content 263 contents, it executed a function 264 that I have passed as a callback 265 function which is at the end. 266 So if Even you have 100 line 267 of code that will continue to work 268 while it is reading the file. 269 So this is how the asynchronous 270 or non blocking operation works. 271 So whenever you do a heavy 272 task, for example cfs.everything 273 has a synchronous 274 and a non synchronous way. 275 For example append file, this 276 is what this is 277 asynchronously appending the data. 278 But on the synchronous 279 this is a blocking call. 280 Similarly CHMOD is an asynchronous CH 281 mod sync is a blocking operation. 282 So every operation has an equivalent 283 blocking and non blocking code. 284 So the code is absolutely same. 285 The only difference is that 286 the read file is asynchronous, 287 whereas the synchronous version 288 is a blocking operation. 289 And it doesn't take any 290 callback, it gives you the content 291 as a return statement. 292 But here you have to pass a 293 callback function, which makes 294 sense right now at this 295 particular point of time I can 296 even go a too much deep into 297 the architecture of node js, 298 how node js works. 299 But let's keep that 300 for the next video. 301 I will try to explain that how 302 internally JavaScript or 303 I can, I should say the Node js 304 handles all these requests. 305 So let's talk about that 306 thing in the next video. 307 So yeah, super excited 308 for the next video. 309 Let's meet you in the next one. 310 Until then, bye bye and take care.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "09-node-architecture.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/09-node-architecture.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.014959114,
      0.008437173,
      0.037594244,
      -0.05506904,
      -0.033827715,
      0.0095794955,
      0.021127053,
      0.01790772,
      -0.004228123,
      0.021002574,
      0.0010264858,
      0.013801511,
      0.00060464744,
      0.027321626,
      0.11089583,
      0.0053119007,
      -0.024081906,
      0.0015574835,
      -0.0053126644,
      -0.02398569,
      0.006625308,
      -0.014447285,
      0.01048001,
      -0.011367064,
      0.0016342828,
      0.017106337,
      0.0055364897,
      -0.0037425912,
      0.031318065,
      -0.012089531,
      -0.0038576052,
      -0.0105985915,
      -0.00018075488,
      0.021526203,
      0.006102643,
      0.029793782,
      0.012252489,
      0.004883121,
      -0.011915273,
      0.014826627,
      0.00066048733,
      -0.0037644,
      0.019454272,
      -0.030438008,
      -0.017115112,
      0.00048354903,
      -0.004913354,
      -0.011090717,
      0.0009542053,
      0.02204178,
      0.005960058,
      -0.008715137,
      -0.0044761356,
      -0.18176167,
      -0.0052692434,
      0.0053597353,
      0.0042915386,
      0.0052460646,
      0.00053974305,
      0.00028830938,
      -0.023892406,
      0.019918988,
      -0.02533325,
      -0.0053978786,
      -0.023258869,
      -0.013825637,
      0.014874822,
      -0.0005463772,
      0.00993376,
      -0.0027781948,
      0.0067480565,
      0.007877845,
      -0.019662064,
      0.0021805712,
      -0.0050489022,
      -0.017032532,
      0.016290653,
      0.0086964015,
      -0.011845082,
      0.0029795365,
      -0.005299976,
      -0.024046902,
      -0.008508218,
      -0.028526735,
      0.0068796063,
      0.010333435,
      -0.033067387,
      -0.024879912,
      -0.004522886,
      -0.0016599325,
      0.0013124982,
      0.012109797,
      -0.018157335,
      -0.013196657,
      -0.0154062705,
      -0.007530552,
      0.0064852126,
      0.019690437,
      -0.01473717,
      -0.0016083308,
      0.022525832,
      -0.005822426,
      -0.021400617,
      0.021187508,
      -0.0072176065,
      0.0040785554,
      -0.0007590126,
      0.00508188,
      0.028176595,
      -0.013732931,
      -0.004493321,
      -0.008278462,
      -0.012833771,
      0.020757128,
      -0.0003377134,
      -0.17258546,
      0.016922459,
      -0.002460306,
      -0.014611223,
      0.0007319312,
      -0.013598489,
      0.0012620934,
      0.012877754,
      -0.0043491838,
      0.0013845157,
      0.02083101,
      -0.0042013535,
      0.018968223,
      0.012652097,
      0.0061544143,
      -0.010957708,
      -0.009629814,
      -0.012440624,
      0.028620124,
      0.042022992,
      0.013707175,
      0.021798942,
      -0.031116864,
      -0.0068813157,
      -0.01904165,
      0.027223054,
      0.022742055,
      -0.0044644284,
      0.032293502,
      0.008297847,
      0.008324718,
      -0.014744244,
      -0.005753549,
      -0.009273634,
      -0.035951294,
      -0.0034633162,
      -0.0070063435,
      0.020487165,
      0.0069950754,
      0.020704398,
      -0.0397277,
      0.008838129,
      0.02095005,
      0.019187568,
      -0.021888353,
      0.007879955,
      -0.008209252,
      -0.005421755,
      0.028474957,
      0.02595766,
      0.0120097855,
      -0.010274244,
      0.034976352,
      0.0032180601,
      0.0019800288,
      -0.0029467572,
      0.0033102036,
      0.0025405777,
      -0.012352684,
      0.0062032626,
      -0.026271934,
      -0.012894389,
      -0.00864782,
      0.031835712,
      -0.009446978,
      0.00024390701,
      -0.0040618666,
      -0.009605079,
      -0.022759806,
      -0.012265854,
      -0.0061334227,
      -0.029701976,
      0.007419431,
      0.020158349,
      -0.033025738,
      0.030599749,
      -0.026406068,
      -0.010523023,
      0.0036366803,
      -0.007640604,
      -0.025843652,
      -0.026304819,
      -0.0010190677,
      0.015914746,
      0.0020850478,
      0.012879928,
      -0.016143454,
      0.02501721,
      -0.031674914,
      0.018785885,
      -0.0077196737,
      -0.00067084254,
      0.011535279,
      0.008777006,
      0.022558808,
      -0.0016754953,
      -0.009193505,
      -0.0045350944,
      0.0091272555,
      0.013291009,
      -0.022589266,
      0.009691646,
      0.0070648785,
      0.0039993892,
      -0.010080964,
      -0.017015181,
      -0.0024681261,
      -0.0008633538,
      0.032203067,
      0.018328302,
      0.01451222,
      0.017190432,
      -0.009657725,
      0.00852853,
      -0.009210714,
      0.0041839373,
      0.018649794,
      -0.029073857,
      -0.0009455938,
      0.0016942234,
      0.0033860323,
      0.003579751,
      0.008388956,
      0.0033307797,
      0.005457373,
      -0.019554129,
      0.0073818727,
      -0.005346776,
      0.012988812,
      0.027459737,
      -0.005662306,
      -0.009747596,
      0.008381584,
      -0.045958117,
      -0.042089876,
      0.003168761,
      0.009429627,
      0.0026558726,
      -0.023832208,
      0.008259083,
      -0.036846448,
      -0.011717894,
      -0.009070095,
      -0.014299715,
      -0.036726046,
      -0.003919307,
      -0.023279022,
      -0.009146202,
      0.008067518,
      0.017963689,
      -0.0005097668,
      -0.008249694,
      0.017457578,
      -0.02116781,
      -0.003937081,
      0.0098549975,
      -0.007036501,
      0.0016101402,
      0.00968098,
      -0.009799338,
      0.0051418217,
      -0.094725095,
      0.0053495634,
      -0.0024100898,
      -0.02301397,
      -0.004641115,
      0.00671431,
      -0.0055005737,
      0.030828597,
      0.007308084,
      0.0006406171,
      0.010631473,
      -0.0054328907,
      0.020565007,
      -0.005330403,
      0.011757867,
      -0.0074756285,
      0.018679727,
      0.006143814,
      0.0016919357,
      -0.007831455,
      -0.014406526,
      -0.006515262,
      0.0122509375,
      -0.020017589,
      0.010686664,
      0.0078102024,
      -0.010706785,
      0.010256149,
      0.035064425,
      -0.010230254,
      0.0071294038,
      0.025602965,
      -0.03796263,
      -0.0035213635,
      -0.006304564,
      -0.0056100506,
      0.036580656,
      -0.009781915,
      0.0024563605,
      -0.0047574625,
      -0.017575815,
      -0.012311481,
      0.012106869,
      -0.0028918234,
      -0.005606945,
      -0.006180365,
      0.011363697,
      0.014898879,
      -0.027205065,
      0.013268238,
      -0.021810517,
      -0.0072019612,
      0.004905839,
      -0.0062867436,
      0.012696632,
      0.0074595017,
      0.0014299069,
      0.008307914,
      0.008479131,
      0.012729343,
      -0.008776222,
      0.0037528733,
      0.018709073,
      0.01817486,
      0.0067756544,
      0.00049978564,
      0.018883731,
      -0.015576375,
      -0.017331699,
      -0.0146052595,
      0.0011259103,
      0.0105492305,
      -0.027451094,
      -0.034207802,
      -0.0051028053,
      0.00657798,
      0.013048691,
      -0.009475852,
      -0.02914279,
      0.04199781,
      0.022775164,
      0.0040898644,
      0.011574709,
      0.028559,
      0.029245457,
      0.0022861627,
      -0.01282466,
      0.0077339583,
      0.007950619,
      -0.011169251,
      -0.004257877,
      0.027121387,
      -0.03576167,
      -0.003092662,
      -0.016021514,
      0.013149535,
      -0.027712047,
      -0.0010334321,
      -0.016046759,
      0.0049464544,
      -0.01306117,
      -0.00039991614,
      -0.0050483206,
      0.00032344583,
      0.0012059483,
      0.024918832,
      -0.0045500905,
      0.012158891,
      -0.0049599945,
      -0.016149985,
      -0.0010494962,
      -0.017762782,
      -0.010774268,
      -0.015636832,
      -0.014584688,
      0.023896867,
      0.016393604,
      0.010897202,
      -0.0011324182,
      -0.008533988,
      0.009063231,
      0.01695432,
      -0.002154831,
      -0.0065710177,
      -0.020969952,
      -0.0017614986,
      -0.013220406,
      0.008064238,
      -0.0065317587,
      -0.019770596,
      -0.00092200236,
      0.01726539,
      -0.006427332,
      -0.011613191,
      0.006333035,
      -0.01815073,
      0.010779699,
      0.0070864856,
      -0.0076662684,
      0.019191934,
      -0.007939435,
      0.020725029,
      0.010127753,
      -0.01660363,
      0.014413294,
      0.017823234,
      -0.014874645,
      -0.011268321,
      0.004749848,
      -0.008873049,
      -0.022008475,
      -0.025398288,
      -0.026834141,
      -0.0038827318,
      0.0136709185,
      0.022795977,
      0.0263402,
      -0.0013084493,
      0.015094333,
      -0.01890907,
      -0.004680598,
      0.00032138126,
      -0.013902231,
      -0.010759915,
      0.014352913,
      0.008655808,
      0.00067695614,
      0.014182593,
      -0.0077482485,
      0.004097432,
      -0.011580866,
      -0.0055887317,
      -0.037612867,
      0.0057320087,
      0.021598725,
      -0.0055626817,
      0.000017809698,
      -0.0073159523,
      0.038749807,
      -0.0040019746,
      -0.0018678359,
      0.005371998,
      -0.0142571395,
      -0.0022945274,
      -0.017726155,
      -0.00006305956,
      0.029589199,
      -0.023229536,
      0.0008041898,
      -0.019493936,
      -0.022618718,
      -0.023601798,
      0.0048554433,
      -0.0052731344,
      0.021367488,
      0.026942153,
      0.01353583,
      0.0037036375,
      -0.0054730023,
      -0.0008569333,
      -0.015744124,
      -0.027177155,
      0.011578408,
      -0.0095414305,
      -0.00026311338,
      0.0036121367,
      0.016705627,
      -0.012574143,
      -0.010093526,
      0.031986117,
      -0.008824127,
      -0.0050798906,
      0.008387553,
      -0.02384011,
      0.0077987267,
      -0.0019394848,
      -0.011736128,
      0.0037764031,
      -0.026027637,
      -0.012737037,
      0.014468713,
      -0.029745111,
      -0.0028188834,
      -0.0008442653,
      -0.006911174,
      -0.02484304,
      -0.024627253,
      0.040775556,
      -0.012622123,
      -0.011054663,
      0.0048728995,
      0.001464167,
      -0.0011753715,
      0.010428067,
      -0.022034293,
      0.00535845,
      -0.003507381,
      0.008706655,
      -0.012032436,
      -0.007048958,
      -0.003895618,
      0.005515263,
      -0.017463326,
      -0.0028780678,
      0.001935116,
      -0.016618203,
      0.031987328,
      -0.001052113,
      -0.020712584,
      0.0048141005,
      0.009808544,
      0.0053606913,
      0.0036612994,
      -0.007776466,
      -0.031837456,
      0.03388246,
      -0.027110552,
      -0.012825365,
      0.0030014138,
      -0.0015567122,
      0.00016265223,
      0.011332998,
      -0.0085306745,
      0.004063995,
      -0.017103896,
      -0.025641497,
      0.0033478253,
      0.021819744,
      0.014418873,
      -0.12449936,
      0.010927163,
      -0.017266614,
      -0.014298956,
      0.0008904836,
      0.0063267807,
      -0.0038287237,
      -0.021472814,
      -0.009793671,
      -0.007482566,
      0.004290796,
      0.0002930635,
      0.008167718,
      0.008273866,
      -0.0026821762,
      -0.019444825,
      -0.008911586,
      0.03719078,
      0.037847146,
      -0.011412741,
      0.0048812116,
      -0.007036691,
      -0.0029156124,
      0.009921351,
      -0.011779261,
      0.007775894,
      0.024544239,
      -0.002202865,
      -0.0036377485,
      -0.015257234,
      -0.002755155,
      -0.01267448,
      0.010410854,
      -0.0033384892,
      0.032867875,
      -0.011363161,
      0.0030566559,
      0.0015436761,
      0.013140173,
      0.013966136,
      0.011265501,
      -0.0072835283,
      -0.005201249,
      0.009665258,
      -0.017761508,
      0.013067766,
      0.029607616,
      -0.020345941,
      -0.0027755878,
      0.041409113,
      -0.037099916,
      -0.037790656,
      0.003479462,
      -0.029585388,
      0.0029519512,
      -0.003343088,
      0.0199683,
      0.0025887592,
      -0.006873197,
      0.009539607,
      0.014209193,
      0.009703963,
      -0.0070985956,
      0.010843575,
      -0.016454175,
      -0.010342107,
      0.020597488,
      0.014530993,
      0.023262657,
      0.0017586382,
      -0.017121725,
      -0.0016695919,
      -0.013172033,
      0.017001899,
      -0.0055592665,
      -0.0037231285,
      0.0049369056,
      0.031156639,
      -0.003929663,
      0.013672913,
      -0.020017115,
      -0.0072778747,
      -0.06861986,
      -0.00945637,
      0.003169524,
      -0.007968503,
      0.014808363,
      -0.010368627,
      0.003940646,
      -0.005980922,
      0.011450293,
      -0.007924219,
      -0.0212357,
      -0.0046669454,
      -0.00057929964,
      0.002979281,
      -0.013260524,
      0.0008072142,
      0.009274691,
      -0.028121822,
      -0.017604966,
      0.008698328,
      -0.012442103,
      0.009422699,
      -0.008260324,
      -0.00059617416,
      0.019900931,
      -0.0036667576,
      -0.034552585,
      0.017657105,
      0.006172285,
      -0.021536743,
      -0.0031306306,
      -0.14338468,
      -0.0160836,
      0.026276615,
      0.021501241,
      0.0073225116,
      -0.017225487,
      -0.016643694,
      -0.01351419,
      0.0036914684,
      -0.02295205,
      -0.013110634,
      -0.019349819,
      -0.01013532,
      0.011992369,
      0.00046436707,
      0.14157203,
      0.0076243607,
      0.002688912,
      0.0005233568,
      0.014696615,
      -0.00090564345,
      -0.01959425,
      0.014404322,
      0.022993987,
      0.00044113776,
      0.006184773,
      0.005238308,
      -0.0077374047,
      0.019997796,
      0.0054460587,
      0.013405969,
      -0.038408663,
      -0.027179051,
      0.022264756,
      -0.007108624,
      -0.008432877,
      0.016656581,
      -0.010690074,
      -0.010199985,
      -0.00618068,
      -0.0010967718,
      0.007958666,
      -0.008029075,
      0.010024439,
      0.0009743997,
      0.0027745687,
      0.008260755,
      -0.026710195,
      -0.023933131,
      -0.015084451,
      -0.0017990966,
      -0.052179407,
      -0.0029993083,
      -0.007970254,
      -0.017851632,
      0.015803542,
      -0.021006495,
      0.009188282,
      -0.0070293215,
      -0.024934499,
      -0.0058234767,
      -0.012870006,
      0.013662755,
      -0.0054360884,
      -0.006458251,
      -0.025780352,
      -0.012379978,
      0.017299846,
      0.022363521,
      -0.0024749148,
      -0.0015562563,
      0.01822294,
      -0.0106794415,
      -0.014433275,
      -0.014868364,
      -0.0045307046,
      -0.013780015,
      0.0018677942,
      0.003986867,
      -0.026185468,
      -0.011094693,
      0.00022912885,
      0.00475782,
      -0.019825965,
      0.014557913,
      -0.00082978094,
      -0.025044482,
      0.0129990205,
      -0.00004999716,
      -0.02785967,
      -0.00043500852,
      0.00982738,
      0.007018249,
      0.03005277,
      -0.018637152,
      0.009830236,
      -0.01298761,
      0.0030339193,
      0.0056022247,
      0.0019680208,
      0.010330142,
      -0.027996622,
      -0.0036265114,
      -0.011232359,
      0.030349022,
      0.00964376,
      0.010379609,
      -0.005271124,
      0.008348817,
      -0.027426327
    ]
  },
  {
    "id": "genai_cohort_nodejs_10_node_http_vtt",
    "content": "Well, well, well, you guys are doing 2 absolutely great in no time. 3 You have learned a lot 4 of things in Node js, right? 5 So in this particular video, let's 6 hop and create a server for us. 7 But guys, before creating a server, 8 let's understand 9 what the server thing is, right? 10 That is more important. 11 So what we are going to do 12 is we are going to create 13 an HTTP server, okay? 14 And but before that, let's 15 understand that what is this HTTP? 16 What is the server? 17 What is a request, what 18 is response, all that. 19 So HTTP stands for hyper Text 20 transfer protocol. 21 So that means it's basically 22 a protocol for transferring 23 the information on the Internet. 24 Okay, how it works? 25 So you, so whenever you talk 26 about APIs, whenever you talk 27 about Internet or servers, 28 there are two components. 29 One is you. 30 You are who, you are a client, right? 31 You are a client. 32 So let's say that this is a client. 33 Client can be a machine, it 34 can be a mobile phone, 35 a laptop, a MacBook, anything. 36 On the other hand, you have 37 what, you have a server. 38 Okay? 39 Now what is a server? 40 Now don't think you know that this 41 server is something very fancy 42 thing or something like that. 43 No, it's just a machine 44 that is connected to the Internet 45 number one, it has a public IP 46 address and it has a public 47 facing IP address, right? 48 So it can be on Amazon Web Services, 49 it can be Azure, it 50 can be Google Server, 51 or even it can be a bare metal. 52 Bare metal basically means that 53 it's a server which is on 54 at your home, at your office. 55 Okay? 56 So the only thing is that 57 because this is a server number 58 one, it's a 24, 7 on machine. 59 So it's, it's 24 by 7, 60 you know, uptime. 61 But plus it has a public facing IP. 62 Public facing static IP, 63 public facing static IP. 64 So let's say that this particular 65 server has an IP address of maybe 66 something like 10, you know, 24.1.2. 67 So just random address 68 I have written. 69 So this is a server. 70 Now what this client can do, 71 client basically sends 72 a request to a server, right? 73 So client always sends a request 74 request that hey, I want to do 75 this, I want to do that, I want to 76 do this stuff, I want that, I want 77 to create this resource, I want to 78 create a tweet, I want to upload a 79 video. 80 It's a request. 81 Your server is responsible 82 for processing this request. 83 Now this request can be 84 anything for example. 85 So it can be a request to get 86 some data, it can be request 87 to post some data, it can be 88 a request to delete some data. 89 Any kind of request. 90 Now, at this point, as a part of 91 processing this request, it 92 says, like, first of all, you 93 have to authenticate that if 94 this particular user is allowed 95 to, like, you know, access that 96 particular resource, you do 97 authorization. 98 That if, right, if there is 99 an authority, then you do 100 validation check and all that. 101 And then you finally process. 102 So whatever is needed. 103 Now this processing part that 104 I have written at the end, okay, 105 this processing part 106 can be a database operation. 107 So your server actually can be 108 connected to a database, right? 109 So database can be. 110 Your Postgres database can be 111 there, your MongoDB is there. 112 So you have a lot of databases. 113 It can be a simple 114 MySQL database, right? 115 It can be a MySQL database. 116 So any kind of database 117 is actually here. 118 So these are few databases 119 that we can cover. 120 Okay, so very simple, no, 121 hard and fast thing there. 122 So this particular server is like 123 connected to this database. 124 So it is doing some read and write 125 operations in the database. 126 And once the server has done 127 its work, it is going to return 128 something known as response. 129 So that means at the end it's just a, 130 request and a response. 131 Client sends a request, server 132 accepts the request, 133 do a lot of magical things in it, 134 and sends back a response. 135 And this is what is known as a, 136 request response cycle. 137 Okay, so this is a cycle, and this 138 cycle makes the client server 139 communication possible, right?",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "10-node-http.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/10-node-http.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.008638982,
      0.025256913,
      0.021052688,
      -0.049320318,
      -0.009674974,
      0.004600753,
      0.033410024,
      0.018323315,
      0.009733921,
      0.031438828,
      -0.002880973,
      0.007132983,
      0.00014041444,
      0.019250127,
      0.12510946,
      0.0096135875,
      -0.002951223,
      -0.004110808,
      0.0054448587,
      -0.020714141,
      0.01836222,
      -0.008890366,
      0.006821133,
      0.017813265,
      0.0045454353,
      -0.0022249902,
      -0.004063846,
      0.0008378203,
      0.026019376,
      -0.011971615,
      0.0053286464,
      -0.016586985,
      0.001948058,
      0.029636947,
      -0.005721001,
      0.029254403,
      0.01929962,
      0.0018808995,
      -0.03454124,
      -0.008970958,
      -0.014167992,
      0.0022431246,
      0.015227176,
      -0.024846397,
      0.018677484,
      0.011811821,
      -0.0038082576,
      -0.015347445,
      0.008969125,
      0.015523943,
      -0.013984256,
      -0.0095457705,
      -0.010286386,
      -0.19016738,
      -0.010112151,
      0.002260716,
      0.0024487225,
      -0.0022564498,
      -0.0047745383,
      -0.0034582298,
      -0.0122032035,
      0.0015604211,
      -0.017458702,
      0.0174282,
      -0.023019046,
      -0.0032514413,
      0.013191086,
      -0.003547473,
      0.013979796,
      -0.0030790104,
      -0.0035866909,
      0.005052818,
      -0.025271175,
      -0.01422474,
      -0.02508586,
      -0.014625535,
      0.008005303,
      0.016661614,
      -0.0016878225,
      -0.002501972,
      0.0040034996,
      -0.011899999,
      -0.01376635,
      0.00039123802,
      0.011522199,
      -0.0074140416,
      -0.022007948,
      -0.003289299,
      -0.012353437,
      0.0063399435,
      -0.0026234186,
      0.015720638,
      0.0052442653,
      0.00021574447,
      -0.001666537,
      -0.008629172,
      -0.007981442,
      -0.0073049515,
      -0.024104701,
      -0.008139269,
      0.0042772926,
      0.009387555,
      -0.030984554,
      0.012130132,
      -0.0009332266,
      0.0093805725,
      0.008724773,
      -0.0005339308,
      -0.0030028415,
      -0.03234651,
      0.011183639,
      -0.019577399,
      0.010182778,
      0.0068985815,
      0.0008817581,
      -0.18394263,
      0.014229869,
      -0.0036804827,
      -0.002465614,
      0.0035949268,
      -0.023511007,
      -0.008039141,
      0.009904083,
      0.015603519,
      -0.004030022,
      0.0041814,
      -0.0012832918,
      0.023159575,
      0.014648023,
      0.013844103,
      0.004564769,
      -0.002987049,
      -0.0025145262,
      0.021096509,
      0.02443203,
      0.014106775,
      -0.012808079,
      -0.016126765,
      -0.0048843944,
      -0.034927398,
      0.013404175,
      0.036580842,
      -0.0003854102,
      0.037540298,
      0.0030160968,
      0.007983883,
      -0.044113412,
      0.015964922,
      -0.037033655,
      -0.03398057,
      0.012686721,
      -0.010490746,
      0.031130075,
      0.016167972,
      -0.008989698,
      -0.030202406,
      -0.016797967,
      0.0091335885,
      0.007901011,
      -0.008156817,
      0.0054345676,
      0.0033809305,
      -0.0015632927,
      0.022881176,
      0.0109268585,
      0.0020248126,
      -0.026020115,
      0.012896244,
      -0.0010230887,
      0.0008166187,
      -0.014480324,
      -0.00754381,
      -0.014409764,
      0.02235194,
      -0.015503576,
      -0.01434463,
      -0.01911195,
      -0.0011029604,
      0.0040972615,
      -0.013985925,
      0.0002371997,
      0.0010593303,
      -0.0009991801,
      -0.023900924,
      0.0088799335,
      -0.006218995,
      -0.031317778,
      -0.0123514505,
      0.007096711,
      -0.014373868,
      0.008726491,
      -0.009137379,
      -0.009531119,
      -0.00515509,
      0.002853731,
      -0.018811436,
      -0.011081891,
      -0.019294802,
      -0.0042976243,
      0.016417116,
      0.009448247,
      -0.0030527564,
      0.008849008,
      -0.021442447,
      0.008217025,
      0.002888487,
      0.019932702,
      -0.012824097,
      0.008978045,
      0.027366485,
      -0.0076631773,
      -0.023313554,
      0.011318185,
      -0.0035344476,
      -0.004494509,
      -0.00825456,
      0.019096829,
      0.017969614,
      -0.0062426506,
      -0.019939765,
      -0.00089913217,
      -0.010264888,
      -0.011258903,
      0.018017279,
      0.014059476,
      0.00269495,
      -0.0031758188,
      -0.007290876,
      0.018844007,
      -0.0113576,
      0.0031463644,
      -0.0058210636,
      -0.023677094,
      0.0063618068,
      0.033106405,
      -0.017277649,
      0.013313571,
      -0.006574317,
      0.00049017015,
      0.004146415,
      0.004816887,
      0.0032338852,
      0.0007266198,
      0.026612604,
      0.030623544,
      -0.0038560638,
      -0.018719325,
      0.0002964221,
      -0.016352057,
      -0.03383354,
      -0.014282084,
      -0.0042175427,
      -0.013474422,
      0.008384046,
      0.0049789147,
      -0.03107942,
      -0.03393375,
      -0.015632065,
      -0.00044967188,
      -0.013240745,
      -0.0012297936,
      -0.017200336,
      0.003216518,
      0.0069584274,
      0.010464232,
      -0.0043972824,
      0.010824552,
      0.026171722,
      -0.027227506,
      -0.0025973099,
      0.011393158,
      -0.0010154962,
      -0.012186327,
      -0.007254864,
      0.008787506,
      0.018797465,
      -0.0859553,
      0.0008112623,
      -0.0028941676,
      -0.011353734,
      -0.012453053,
      -0.0006207123,
      -0.017854271,
      -0.00019095461,
      0.023899343,
      0.021237426,
      0.0120057855,
      -0.0039093867,
      0.023201577,
      -0.0040578963,
      -0.002806542,
      0.015973184,
      -0.011801029,
      -0.00017589652,
      0.011951195,
      -0.02445942,
      -0.007971353,
      0.009770898,
      -0.004830912,
      -0.0077877776,
      0.00957158,
      -0.007892112,
      -0.033799604,
      0.019517574,
      0.020670675,
      -0.00865619,
      0.011467731,
      0.031191401,
      -0.024563655,
      -0.003828485,
      -0.006901713,
      -0.0019417177,
      0.02055289,
      -0.02139832,
      0.0027035002,
      -0.0064853467,
      -0.0041286317,
      -0.01645594,
      0.020317808,
      0.0147039825,
      -0.011678646,
      0.019736664,
      0.030971536,
      0.006511612,
      -0.029921168,
      -0.0000731719,
      -0.016673137,
      -0.0012009857,
      0.02338198,
      -0.043480203,
      0.020436069,
      0.0053517665,
      0.0025675127,
      0.0111203175,
      0.013007109,
      0.0058506434,
      -0.0053514787,
      -0.005375304,
      0.0017258008,
      0.006002106,
      0.013456517,
      0.006524081,
      0.01071973,
      -0.023602266,
      0.0050719446,
      -0.007444123,
      0.00092409615,
      -0.023853313,
      -0.020602537,
      -0.047884125,
      0.012388279,
      0.013784714,
      0.005430912,
      -0.0059976503,
      -0.021874486,
      0.028124219,
      0.0060254703,
      0.0013447667,
      0.006866254,
      0.025181862,
      0.008504117,
      0.013344232,
      -0.0029202166,
      -0.002716672,
      -0.008911328,
      -0.007438521,
      -0.0032999797,
      0.02390775,
      -0.009665675,
      -0.005513692,
      -0.016612733,
      -0.008631083,
      -0.024688067,
      0.005071501,
      0.003226333,
      0.0040099774,
      -0.019589474,
      -0.004865921,
      -0.0011315594,
      0.001640642,
      -0.0053871325,
      0.041233245,
      -0.009858902,
      0.0019056847,
      -0.007203423,
      0.013103152,
      -0.013313554,
      -0.005112118,
      -0.020900762,
      0.011079399,
      -0.014318553,
      0.026222521,
      0.010453574,
      0.0023937286,
      -0.021594886,
      -0.029750964,
      -0.008639979,
      0.006790331,
      0.02092832,
      0.013029048,
      -0.028195422,
      0.013775842,
      -0.03358628,
      0.0058244467,
      -0.0090223225,
      -0.009252744,
      -0.0023100902,
      -0.019715274,
      -0.010948935,
      -0.011606447,
      -0.014061117,
      -0.0087485835,
      0.00066003384,
      0.010236404,
      0.024735028,
      0.011517359,
      -0.020542141,
      0.024562081,
      -0.0042405655,
      -0.01919123,
      -0.0055947583,
      -0.00027727103,
      -0.026186565,
      -0.004960645,
      0.0009269294,
      -0.012112986,
      -0.015366849,
      0.0061856993,
      -0.03241537,
      0.00077562477,
      0.003740954,
      0.021827435,
      0.008807162,
      0.015873216,
      -0.0047338656,
      -0.008957215,
      0.01303978,
      -0.008849593,
      -0.018141532,
      -0.029152414,
      0.028083269,
      -0.0006323803,
      -0.005386098,
      0.0046431823,
      0.012103544,
      0.015005062,
      -0.014357826,
      -0.01339581,
      -0.037323296,
      0.0040265583,
      0.009904092,
      -0.007706738,
      0.0073607494,
      -0.013959982,
      0.02025154,
      -0.007941841,
      -0.0057362383,
      -0.00920343,
      -0.018594133,
      0.009530147,
      0.009777168,
      0.011120202,
      0.0011085452,
      -0.02150875,
      -0.014594224,
      -0.011116786,
      -0.0037073528,
      -0.008939014,
      0.0013421708,
      0.0033643742,
      0.0035582501,
      0.023841973,
      0.026752494,
      -0.015068067,
      0.005404756,
      0.0022711498,
      -0.022497024,
      -0.014075946,
      0.0042220573,
      -0.012540158,
      0.03387791,
      -0.007241309,
      -0.011413854,
      -0.03365413,
      0.004441446,
      0.012336852,
      -0.00979507,
      0.0014346164,
      0.0083659785,
      0.0030508563,
      0.03487892,
      -0.0026824642,
      -0.018971685,
      0.025239829,
      -0.016759314,
      -0.0071452414,
      0.008822037,
      -0.007725809,
      -0.014170474,
      -0.02177896,
      0.004320893,
      -0.00836336,
      -0.02351511,
      0.017590895,
      0.0045684553,
      -0.010324,
      0.01201923,
      -0.008162067,
      -0.0054603755,
      0.014222532,
      -0.017803375,
      -0.008135586,
      0.0242848,
      0.0036652554,
      -0.00593179,
      0.016142089,
      -0.008459161,
      -0.010656227,
      -0.012597725,
      -0.022596529,
      -0.0031589635,
      -0.014761449,
      0.025831103,
      0.018591445,
      -0.009906327,
      -0.0047088796,
      0.029976156,
      0.0062829433,
      0.014794403,
      -0.0169084,
      -0.008368753,
      0.031936247,
      0.0020159318,
      -0.003901551,
      -0.0054965997,
      -0.013194976,
      0.0028090351,
      -0.011432449,
      0.0003943382,
      0.034845397,
      -0.004446296,
      -0.02205707,
      0.001049143,
      -0.003239177,
      0.02269917,
      -0.10677624,
      -0.003934023,
      -0.0047244974,
      0.0005139474,
      -0.006035484,
      -0.022251258,
      0.023470713,
      -0.02752308,
      -0.013284298,
      -0.01668427,
      -0.0009935773,
      0.009959291,
      -0.0006028344,
      0.02399156,
      -0.003758214,
      -0.012428558,
      -0.014330419,
      0.03222365,
      0.0338727,
      -0.006032472,
      0.008538723,
      -0.0029178152,
      -0.005891835,
      0.012961301,
      -0.009756415,
      0.0026228044,
      0.02847131,
      0.011836982,
      -0.0016215649,
      0.00759619,
      -0.012688115,
      -0.0030626745,
      0.0054224343,
      0.0046560625,
      0.014734679,
      0.005947474,
      0.016921697,
      0.0024795898,
      0.027781071,
      0.021193555,
      0.0026935246,
      0.006601622,
      0.0054966067,
      0.012992289,
      -0.0017404802,
      0.012322272,
      0.009839246,
      -0.024648333,
      -0.0022360743,
      0.021146104,
      -0.055324495,
      -0.033361197,
      -0.016849844,
      -0.013894942,
      0.030927742,
      0.00018438218,
      0.0296133,
      0.0078033465,
      -0.0070162388,
      -0.011854991,
      -0.00080690894,
      0.012881578,
      -0.007496124,
      0.034887634,
      -0.014550477,
      -0.000691818,
      0.025312291,
      -0.014380203,
      0.0011866282,
      0.0021304945,
      -0.008930978,
      0.015438273,
      0.0038094842,
      0.043046817,
      0.0028246206,
      -0.000574227,
      0.0059258654,
      0.013246327,
      -0.011329406,
      0.021216154,
      -0.0060067857,
      0.023453262,
      -0.07611287,
      -0.008575989,
      -0.005353592,
      0.0068270853,
      0.020731144,
      -0.006576066,
      -0.02090509,
      0.015717357,
      -0.014337092,
      0.0046577263,
      -0.006218036,
      -0.013065771,
      -0.0069059324,
      -0.012082845,
      -0.034636073,
      0.016079001,
      0.01680689,
      -0.035873886,
      -0.013239572,
      0.004960286,
      -0.008024511,
      -0.012913242,
      -0.015086207,
      0.000042671396,
      0.012173879,
      0.012397456,
      -0.029705247,
      -0.002835018,
      -0.00528056,
      0.0013487355,
      0.011659112,
      -0.13460682,
      -0.016440166,
      0.008065754,
      0.014094592,
      0.013342701,
      0.007922285,
      -0.020023985,
      0.0071250717,
      0.01614763,
      -0.021709334,
      -0.009955873,
      -0.029210677,
      -0.026779529,
      0.009240968,
      -0.0068628164,
      0.13196692,
      0.007795052,
      0.012211705,
      -0.0043019652,
      0.025808176,
      -0.022911096,
      -0.0066081802,
      0.0072731986,
      0.0067980825,
      0.0047620097,
      -0.02253522,
      0.018617056,
      -0.006331309,
      0.012182382,
      0.030905876,
      0.010527763,
      -0.014349117,
      -0.018009154,
      0.03476622,
      -0.0049993056,
      -0.02237342,
      0.014718817,
      -0.012047987,
      -0.013083253,
      -0.007109534,
      0.0029971546,
      0.0005241879,
      -0.013869952,
      0.02166114,
      0.0049063284,
      0.014747141,
      -0.00029833033,
      -0.004642279,
      -0.011328695,
      -0.016378967,
      0.039054412,
      -0.059070498,
      -0.0010859179,
      -0.0069807745,
      -0.013519246,
      0.036193583,
      0.009627764,
      0.027292954,
      -0.014240835,
      -0.013235241,
      -0.0046410724,
      0.0049374965,
      0.01226453,
      -0.0061432244,
      -0.0034830247,
      0.0056330627,
      0.019783752,
      0.031156495,
      0.00899705,
      -0.012980116,
      -0.014823308,
      0.010397279,
      -0.015475617,
      -0.0035143273,
      -0.03397597,
      -0.020681163,
      0.0013188339,
      0.026515134,
      0.0009352597,
      -0.03581931,
      -0.00839552,
      0.0077816024,
      0.0033516386,
      -0.0068865702,
      0.0132514015,
      -0.0012857096,
      -0.020889899,
      0.02194337,
      -0.0037790046,
      -0.013360376,
      0.011151099,
      0.0122339,
      -0.010653763,
      0.030552274,
      -0.006812975,
      0.017696384,
      -0.010845522,
      0.012568954,
      0.024201497,
      -0.009922674,
      0.0064165355,
      -0.02569751,
      0.007208864,
      -0.011751471,
      0.02482915,
      -0.006142884,
      0.0297921,
      0.02233192,
      0.0046648365,
      -0.027813606
    ]
  },
  {
    "id": "genai_cohort_nodejs_11_node_http_statuc_codes_methods_vtt",
    "content": "Right, so now you have understood 2 that what a server does. 3 Now as a backend developer, 4 what's our duty that we have 5 to create this server? 6 We have to create a machine 7 which is able to handle 8 the incoming request, right? 9 You should be able to accept 10 the incoming request, 11 do some magical stuff on it 12 and send back a response. 13 So this is what we have to do. 14 Now there is one thing that 15 I'll be using a lot 16 while we are in this course, that 17 is these kind of diagrams. 18 Okay, so, so what we are going to do 19 is, so in order to represent that, 20 how, how the request response cycle 21 was done, so we construct two lines. 22 So this first line is for 23 the client, let's say like 24 we can name it as client. 25 The second line is let's say 26 for the what do you call server? 27 Okay, they can be third line 28 for database and all. 29 So what we can do is we can 30 represent it in this way. 31 So let's say client 32 sends a request right now, now 33 server processes the request. 34 So let's say that it took five 35 seconds, okay, it took five seconds. 36 So let's say five seconds 37 request, it took. 38 And after five seconds what you 39 can do is you can return, 40 you can return back the response. 41 So you can just read, you 42 can just name it as, hey, 43 there was a request, right? 44 So there was a request 45 made by the client. 46 Okay, you took five 47 seconds to process it. 48 Then, then you sent 49 back the response. 50 Okay, so you here 51 sent back the response. 52 That is whatever client needed. 53 And then this response, this request 54 response cycle was terminated here. 55 So basically client 56 closes the connection. 57 So client closed 58 the connection because you know, 59 this one cycle is completed. 60 So if client needs something it can 61 again send a request and response 62 and the cycle continues. 63 So this is where the client 64 actually close the connection. 65 Okay. 66 And yeah, there is a possibility 67 that client can even keep 68 the connection open that is 69 known as server sent events. 70 So yeah, don't worry about that. 71 Okay, so this diagram helps us 72 to visualize that 73 what exactly happened. 74 Okay, so these kind 75 of diagrams you will see a lot if 76 you are into system design 77 or something like that. 78 But yeah, again, again it's 79 a high level because it's 80 a beginner friendly course. 81 So I don't just want to, 82 you know, confuse you. 83 So I hope you are getting it now 84 with this knowledge, with this 85 knowledge there is little bit more 86 that you need to understand. 87 Okay. 88 Number one, when we talk 89 about this HTTP thing, okay, so 90 in HTTP you have to understand 91 that there is something 92 known as HTTP methods, okay. 93 Which includes like you have 94 a Get method, you have a post 95 method, you have a put method, 96 you have a path patch 97 method, you have a delete method. 98 So there are some methods 99 and there are something known 100 as HTTP status codes, which 101 includes one of the famous 102 RS404 which says not found. 103 So there are a lot of status codes 104 that you have to understand. 105 So a good API or a good backend 106 should follow these rules. 107 Okay? 108 So let's cover them one by one. 109 First is the HTTP methods, right? 110 What are, what are HTTP methods? 111 See, when a client 112 sends a request, right? 113 This request has something 114 known as HTTP method, okay? 115 It has some method attached to it. 116 For example, there can be a request 117 of get type, there can be a request 118 of post type, there can be a request 119 of delete type and all that. 120 If client wants to get some data 121 from the server, the client 122 should send a get request. 123 So get request is made when, when 124 client, when client want to read 125 some data or to get some data 126 to get some data from the server. 127 So this is where you make a get 128 request post when client want 129 to send some data to server. 130 So let me give you an example. 131 Okay, so for the first example that 132 is the get, let's say you want to 133 see all the tweets, See all the 134 tweets, or you want to Var a video, 135 or you want to see comments on a 136 video. 137 These all are what, these 138 all are get requests. 139 Because you can see that 140 these requests is something 141 like that you want to get something 142 from the server. 143 Post examples for post, it 144 can be like you want to create 145 a tweet, you want to upload 146 a video, upload a video. 147 Or it can be like, you know, you 148 create a comment, 149 you comment below this video that is 150 going to be a post request, 151 you create a new comment. 152 So these all are what, 153 these are post requests. 154 Now similar to this, similar 155 to this, you have something 156 known as patch request. 157 Patch is basically when, 158 okay, when client wants 159 to update, some existing data. 160 So when you have some existing data 161 and you want to update it, you can 162 send a patch request and delete. 163 When client wants to delete some 164 data, okay, to delete some data. 165 So whenever client makes a request 166 to the server, this request can 167 be a get request, a post request, 168 delete request, patch request. 169 So there is a request. 170 Okay, so these are the HTTP methods. 171 These all are what, 172 these are HTTP methods. 173 Get, post, delete, patch, put. 174 Okay, then, then there is something 175 known as HTTP status codes. 176 Now these were request, okay, 177 these, these things that we just 178 discussed this was related to the 179 request that when client sends the 180 request, this particular thing is, 181 is taken into the consideration 182 right now. 183 This part is fine. 184 This part is relatively very easy. 185 I know, Just one second. 186 My OCD is kicking in. 187 Yeah. 188 Now when you send a response, okay, 189 now when you send a response back, 190 the server sends some status code. 191 Status code is nothing 192 but just a number. 193 Okay, these are nothing, but these 194 are some bunch of numbers. 195 So I'll tell you what 196 these numbers means. 197 So while sending back the 198 response, the server can say 199 for example, Hey, 404, which 200 basically tells the client that 201 hey, the thing that you are 202 trying to access does not 203 exist, not found. 204 It can be a 500 internal server 205 error, it can be a 200. 206 That means everything is okay. 207 It can be a 401 that is unauthorized. 208 It can be a four or three. 209 It can be it can be of, 210 let's say 501. 211 It can be a 201. 212 So server is basically sending some 213 kind of numeric data to indicate 214 what kind of response it is. 215 So this status code is used 216 to tell what kind of response it is. 217 Okay, so it can be like 218 a successful response, it 219 can be an error response. 220 What kind of error is that? 221 It can be a redirect thing. 222 So that thing. 223 Okay, so let me give 224 you a few examples. 225 For example, if backend sends 200, 226 this means everything was okay. 227 If backend sends 211, it means it 228 was okay and something is created. 229 You created some resource 230 on the server. 231 If server sends 400, that 232 means it's a bad request. 233 It's a bad request. 234 So that means your request was bad. 235 If it sends a 404 it means 236 not found that something. 237 If it sends 500 it means that 238 there is some server error. 239 Server error, that server 240 there, there is something 241 wrong with the server. 242 So these are some status 243 codes which we use commonly. 244 And there is even more. 245 Like for example, there is a 301 246 that is for a redirect. 247 Okay, that is for a redirect. 248 So let me show you all the status 249 codes that are there. 250 So just search for HTTP status codes. 251 Okay, so HTTP status codes. 252 So you can see that it ranges 253 from 100 to all the way to 599. 254 Now if a status code starts with 1, 255 okay, now this is very important. 256 If a status code starts with one like 257 111-1111103 this basically means 258 it's an informational response. 259 Okay, so this is first thing. 260 Second, if it starts with 2. 261 So like that is from 200 to 299. 262 If it starts with 2 2, 263 so 2xx, this basically means 264 it's a success response. 265 Okay, then if it starts 266 with three, if it starts 267 with three, it's a redirect. 268 Just one second. 269 Yeah, so if it starts with 270 3xx, it's a redirect. 271 Let's say server wants 272 to redirect you to somewhere. 273 If it starts with four, it basically 274 means it's a client error. 275 That means you are doing some error 276 four or four not found. 277 You are trying to access 278 something that is not existing. 279 And if it starts with 5, 280 it's a server error. 281 So these are the response codes 282 that we are going to see. 283 So you can see that hey, these 284 two are starting with four, right? 285 So this, this basically indicates 286 that it's a client error. 287 This 500 starts with 5. 288 This is a server error. 289 This 200. 290 These both starts with 200. 291 This means these are 292 successful responses. 293 So this is how the server sends 294 an appropriate status code, which 295 of course as a developer you have 296 to set to tell the client that 297 what kind of response this is. 298 Okay, so these are your 299 response mechanisms. 300 So client sends a request along with 301 a HTTP method and you process it. 302 And while sending the response 303 you have to set a number, a code 304 which tells the client that 305 what kind of request is that? 306 Okay.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "11-node-http-statuc-codes-methods.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/11-node-http-statuc-codes-methods.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.01665718,
      0.018821323,
      0.019720314,
      -0.054303862,
      -0.0046395017,
      0.0073859757,
      0.020448942,
      0.01676817,
      -0.0017439908,
      0.020986483,
      -0.0058865217,
      0.004027455,
      0.012151566,
      0.023776652,
      0.13178371,
      -0.0033304135,
      0.005359009,
      0.0007943169,
      -0.012364646,
      -0.017651223,
      0.012663618,
      -0.0016114395,
      -0.0007590125,
      0.01131478,
      0.00808577,
      -0.0037732227,
      -0.008168326,
      0.017571796,
      0.02735883,
      -0.0008725831,
      -0.0024359804,
      -0.013527585,
      0.021016993,
      0.019291313,
      -0.010008166,
      0.01943928,
      0.011489222,
      -0.004487405,
      -0.019048858,
      0.0003177762,
      -0.0072982614,
      -0.002277788,
      0.028146079,
      -0.025930084,
      0.018050905,
      0.011245811,
      -0.008845707,
      -0.0075578387,
      -0.0011017516,
      0.007961405,
      -0.01520036,
      -0.015188741,
      0.00598445,
      -0.19526444,
      0.010012882,
      -0.008139378,
      -0.0036523808,
      0.0002660807,
      -0.0038078837,
      0.013525635,
      -0.023261055,
      0.0030678937,
      -0.011615271,
      0.007971142,
      -0.030597763,
      -0.012254023,
      0.025291469,
      -0.010559689,
      -0.0037853734,
      -0.0043709064,
      0.00042413274,
      0.008672785,
      -0.024023116,
      -0.020217985,
      -0.015531226,
      -0.016958108,
      0.0011542935,
      0.01547996,
      -0.0030315015,
      0.007916358,
      0.0047835093,
      -0.021332916,
      -0.014063217,
      0.013989864,
      0.017128095,
      -0.009891985,
      -0.014658276,
      0.015452614,
      -0.00019047972,
      -0.002342117,
      -0.0069305836,
      0.003983297,
      0.012776514,
      0.008868022,
      0.010251695,
      0.00718624,
      -0.010229206,
      -0.007177504,
      -0.011716391,
      -0.015645545,
      0.011354915,
      0.0010857782,
      -0.03319554,
      0.00818035,
      -0.009671293,
      0.01748801,
      0.010361431,
      0.010398582,
      -0.016797453,
      -0.020953376,
      0.017579678,
      -0.027123831,
      -0.0027950583,
      0.01823021,
      -0.003494293,
      -0.18479237,
      0.015677333,
      -0.005499447,
      0.008725727,
      -0.00045956846,
      -0.024835369,
      -0.0033470744,
      0.016838906,
      0.018991314,
      -0.016069166,
      -0.0026305201,
      0.009351421,
      0.020942418,
      0.011720924,
      0.0105357785,
      -0.012442521,
      -0.016252166,
      -0.0041301725,
      0.019455366,
      0.011402768,
      0.018713383,
      -0.017866107,
      -0.01996299,
      -0.009646428,
      -0.029177407,
      0.012128547,
      0.03982071,
      -0.001460571,
      0.030274527,
      0.007436682,
      0.0027097072,
      -0.037001014,
      0.017858151,
      -0.028785469,
      -0.032989513,
      0.011646134,
      -0.009998844,
      0.026326336,
      0.026294904,
      0.0023213436,
      -0.013928118,
      -0.006750431,
      0.005678676,
      0.0069998545,
      0.0006914359,
      -0.0063951197,
      0.0048217666,
      0.012155267,
      0.027101189,
      0.008163717,
      0.0022683947,
      -0.026313638,
      0.01378786,
      -0.0064188796,
      0.009406942,
      -0.012124352,
      -0.013152231,
      -0.007212624,
      0.013775657,
      -0.013831289,
      -0.009115342,
      -0.018599581,
      0.008242071,
      0.0046675494,
      -0.003848434,
      0.007821541,
      -0.010115444,
      -0.003915201,
      -0.010195967,
      0.012132753,
      -0.0073286425,
      -0.020417044,
      -0.0050037955,
      0.0031897828,
      -0.0040868195,
      0.014923914,
      0.0031715962,
      -0.0025092917,
      -0.003872669,
      0.011003064,
      -0.03658502,
      -0.0070366976,
      -0.029566683,
      -0.004054538,
      0.032302294,
      0.017437803,
      0.004728417,
      -0.00011923584,
      -0.014462522,
      -0.001141258,
      -0.00035826254,
      0.01893946,
      -0.008922216,
      -0.008459877,
      0.01118213,
      -0.02110801,
      -0.031914394,
      0.011096351,
      -0.012777411,
      -0.0040082405,
      -0.009081475,
      0.010767791,
      0.015147897,
      -0.008850318,
      -0.031662263,
      -0.0062356335,
      0.0046410537,
      -0.0003476086,
      0.029385423,
      0.01019878,
      -0.0033331998,
      0.009503338,
      -0.0014050754,
      0.018552553,
      -0.002554276,
      0.0079613235,
      0.003201874,
      -0.025795657,
      0.0014814043,
      0.03707095,
      0.00064403296,
      0.011131601,
      -0.0018700145,
      0.0151050575,
      0.021145834,
      -0.006259432,
      -0.0017103794,
      -0.015396423,
      0.016802615,
      0.020099912,
      0.011390715,
      -0.024208209,
      0.0028967278,
      -0.012060114,
      -0.03009293,
      -0.015229649,
      -0.0011424694,
      -0.004856772,
      -0.014478212,
      0.0055662435,
      -0.03491748,
      -0.042486552,
      -0.012788688,
      -0.003315059,
      0.007874433,
      0.003915516,
      -0.017265754,
      -0.016795374,
      -0.000024539051,
      0.013142295,
      -0.005119692,
      0.02380488,
      0.024594558,
      -0.031533793,
      0.0019190371,
      0.009416098,
      0.006788925,
      -0.019296594,
      -0.004173737,
      -0.005944745,
      0.017339062,
      -0.08060414,
      0.015567092,
      0.004919034,
      -0.019147603,
      -0.007758851,
      -0.002126626,
      -0.037292738,
      -0.0023554252,
      0.017095199,
      0.0139850415,
      0.0017756559,
      -0.022337168,
      0.019717088,
      -0.008604909,
      -0.004910489,
      0.011636331,
      -0.011686959,
      0.004621204,
      0.007901506,
      -0.042703733,
      -0.00844378,
      -0.010093993,
      -0.013433404,
      0.007506963,
      0.019439224,
      -0.0056593115,
      -0.01898119,
      0.012353987,
      0.019884462,
      -0.0092512015,
      -0.007801251,
      0.022895044,
      -0.0062372773,
      0.0034303686,
      -0.016912235,
      -0.020064315,
      0.011501279,
      -0.019051168,
      -0.0016611584,
      0.003503122,
      0.0011573925,
      -0.012582287,
      0.012497846,
      0.010113158,
      -0.00077894115,
      0.02111088,
      0.028364528,
      -0.00028966804,
      -0.026108813,
      -0.009016289,
      -0.016666753,
      0.0030639363,
      0.02123862,
      -0.027227946,
      0.00525212,
      0.00416574,
      -0.0023810465,
      -0.0042810366,
      0.013879977,
      0.003173288,
      0.0026628096,
      -0.007698921,
      0.009431189,
      -0.005097077,
      0.015254468,
      0.00023985407,
      0.010093791,
      -0.012863066,
      -0.00041253027,
      -0.007691796,
      -0.0044783815,
      -0.033948097,
      -0.012034788,
      -0.04811034,
      0.0026692962,
      0.00713503,
      -0.0080058975,
      -0.0077115907,
      -0.022711275,
      0.025817307,
      -0.00363539,
      0.008095711,
      0.00534733,
      0.030189967,
      -0.011107309,
      0.014025785,
      0.00352568,
      -0.0019520017,
      -0.0027122293,
      -0.0033877667,
      0.011982344,
      0.031153854,
      -0.0032195437,
      -0.014541203,
      -0.026451781,
      0.010366055,
      -0.020365756,
      -0.0065039094,
      0.0028250273,
      0.0101854885,
      -0.011419151,
      0.005022373,
      -0.009163743,
      -0.003768077,
      -0.011954241,
      0.024980849,
      -0.01732705,
      -0.0020530263,
      -0.0014060183,
      0.005943279,
      -0.020294804,
      -0.0025940635,
      -0.01807827,
      0.0019384637,
      -0.016162608,
      0.034306586,
      -0.0034097221,
      0.00643603,
      -0.017821843,
      -0.026935566,
      -0.0110838385,
      0.006015754,
      0.028141374,
      0.007915931,
      -0.026794938,
      0.019863728,
      -0.024447517,
      0.011966677,
      -0.011920318,
      -0.011887567,
      -0.0061423862,
      -0.02309982,
      -0.02640298,
      -0.012564893,
      -0.009578036,
      -0.016997484,
      0.013286011,
      0.016741317,
      0.020149322,
      0.017072473,
      -0.013768997,
      0.027382351,
      0.0076567642,
      -0.016236532,
      0.0026101102,
      0.013491456,
      -0.019325912,
      -0.0031043326,
      0.00979816,
      -0.009975754,
      -0.028250314,
      -0.0033803903,
      -0.03586963,
      -0.0024560567,
      0.008473984,
      0.026331881,
      0.0008543238,
      0.020934919,
      -0.0072188624,
      -0.016812606,
      0.017076023,
      0.006224895,
      -0.01583558,
      -0.022782834,
      0.027090328,
      -0.0020356583,
      -0.0021724051,
      -0.0071311714,
      0.014030368,
      0.014990789,
      -0.0064193006,
      -0.011886116,
      -0.035794463,
      -0.0034654606,
      0.008938108,
      0.0059517017,
      0.008804506,
      -0.01304209,
      0.025958028,
      -0.006565271,
      -0.0028304495,
      0.0034503518,
      -0.02389097,
      0.021020252,
      0.00063935743,
      0.0014228837,
      0.0112067545,
      -0.011804033,
      -0.0060273386,
      -0.0057152174,
      -0.020385254,
      0.00056735077,
      0.0013274488,
      0.00226201,
      0.007868163,
      0.023132956,
      0.006085528,
      -0.010007298,
      0.012308391,
      0.005086303,
      -0.026863718,
      -0.009266884,
      -0.002418142,
      -0.012503134,
      0.024468921,
      -0.010825358,
      -0.013584205,
      -0.033151396,
      0.011542387,
      0.00922947,
      -0.0019926685,
      -0.002447005,
      0.02346991,
      0.0031503818,
      0.033403665,
      0.006206108,
      -0.012134656,
      0.017938895,
      -0.015386036,
      -0.0026221864,
      0.015526204,
      -0.0042690933,
      -0.008266102,
      -0.012712825,
      -0.00706802,
      -0.012308791,
      -0.01600417,
      0.0041205506,
      -0.0015869004,
      0.0048014475,
      0.011886216,
      0.0039434317,
      0.010991664,
      0.015212026,
      -0.03141744,
      -0.016499367,
      0.013829461,
      0.012174804,
      -0.0021158373,
      0.0123884035,
      -0.0010791615,
      -0.0111116255,
      -0.02423636,
      -0.024578858,
      0.0076902527,
      -0.0139165595,
      0.018934922,
      0.013043691,
      -0.014905163,
      -0.00067738164,
      0.020298759,
      0.02730661,
      0.009219771,
      -0.016186785,
      -0.01739711,
      0.036450043,
      -0.0030787934,
      -0.0033435405,
      -0.0034976702,
      -0.0032447812,
      0.0056292485,
      -0.0057498734,
      0.002477112,
      0.020418158,
      -0.006480953,
      -0.02536136,
      0.004079027,
      -0.0017448539,
      0.020208923,
      -0.11895423,
      -0.005777443,
      -0.017723154,
      -0.0048065702,
      0.006966177,
      -0.021104421,
      0.023114922,
      -0.032257874,
      0.0014458058,
      -0.028477203,
      0.003943045,
      0.012808414,
      0.009916122,
      0.023420116,
      0.0013882071,
      -0.009043853,
      -0.016450621,
      0.023454944,
      0.03352508,
      -0.0013834289,
      0.006034085,
      0.0020269973,
      0.0053364728,
      0.016568165,
      -0.00034484212,
      0.0015591467,
      0.019406857,
      0.010878938,
      -0.013253594,
      0.008589613,
      -0.015652008,
      0.0001347657,
      -0.0035872275,
      0.013412619,
      0.015142413,
      0.0056186877,
      0.005804671,
      0.003730324,
      0.011592933,
      0.015407702,
      -0.0043614213,
      0.01975974,
      0.0009679653,
      -0.0017532242,
      -0.0033597026,
      0.009848621,
      -0.0012713599,
      -0.021921052,
      -0.0022947958,
      0.028230248,
      -0.05194304,
      -0.023912081,
      -0.004138478,
      -0.01954302,
      0.034256388,
      0.004064268,
      0.026855897,
      0.012289472,
      -0.0017132165,
      -0.015383805,
      -0.007860626,
      0.011581366,
      0.0018579715,
      0.035980135,
      -0.004277619,
      -0.0017909312,
      0.024466192,
      -0.004340335,
      0.0008655106,
      -0.0029968806,
      -0.003847993,
      0.017176019,
      -0.00341378,
      0.04091853,
      0.0021639196,
      0.0007717771,
      0.002994849,
      -0.0016030801,
      -0.0076739783,
      0.012628614,
      -0.02044057,
      0.015420901,
      -0.080279246,
      -0.00893471,
      -0.008682201,
      0.009881953,
      0.014543294,
      -0.01047044,
      -0.0032701942,
      0.018671028,
      -0.004349611,
      0.003902669,
      -0.011253229,
      -0.006605208,
      0.008763941,
      -0.01585708,
      -0.027476871,
      0.0018452153,
      0.01660091,
      -0.038107716,
      -0.0057163876,
      0.008742526,
      -0.006428447,
      -0.014209486,
      -0.00035197582,
      0.004755004,
      0.014525398,
      0.01809596,
      -0.015817134,
      0.008604946,
      -0.008653381,
      0.0074126623,
      0.01719754,
      -0.13773641,
      -0.011142985,
      0.0048172465,
      0.019135546,
      0.014578602,
      0.008135988,
      -0.008743442,
      -0.011053226,
      0.017512731,
      -0.02493195,
      0.009949585,
      -0.016920721,
      -0.033833645,
      0.011330297,
      -0.0015109226,
      0.11971948,
      0.0010721632,
      0.016697846,
      -0.014448311,
      0.02195628,
      -0.014598774,
      -0.009538116,
      0.0024144573,
      0.005405201,
      -0.0020421275,
      -0.019432401,
      0.010264094,
      -0.019971395,
      0.024001636,
      0.020382134,
      0.014389301,
      -0.0076556862,
      -0.0129487,
      0.041155927,
      -0.001837986,
      -0.01685759,
      0.01412814,
      0.0018591012,
      -0.012998607,
      -0.001495269,
      0.0029062044,
      0.00031813647,
      -0.021317918,
      0.0073122727,
      0.0014884291,
      0.0062050195,
      0.002135611,
      -0.00059880834,
      0.0006232392,
      -0.007611611,
      0.033442546,
      -0.055204634,
      0.0016696904,
      -0.0041184532,
      -0.012595947,
      0.033354346,
      0.012225082,
      0.027988937,
      -0.016025787,
      0.003131108,
      -0.0058012395,
      0.00030531114,
      0.019545894,
      0.0072414177,
      -0.0022146567,
      0.0059676683,
      0.027840793,
      0.027825586,
      0.0075153145,
      -0.011028035,
      -0.01869981,
      0.017695814,
      -0.011516877,
      -0.0047421264,
      -0.025920412,
      -0.011162044,
      -0.009639186,
      0.019506771,
      -0.011139352,
      -0.024928518,
      -0.002169954,
      0.011230173,
      0.0015676729,
      -0.015406054,
      0.021996861,
      -0.00106447,
      -0.021205092,
      0.021626187,
      0.0053034867,
      -0.0019955304,
      0.014780606,
      0.0025250432,
      0.00048299608,
      0.035310827,
      -0.0015958209,
      0.019650342,
      -0.0016965413,
      0.0017127433,
      0.031533178,
      -0.010372466,
      -0.010968996,
      -0.01686372,
      0.00071018946,
      -0.003992724,
      0.03483645,
      -0.0010654333,
      0.023061175,
      0.026630046,
      0.016314695,
      -0.0086408015
    ]
  },
  {
    "id": "genai_cohort_nodejs_12_node_http_server_vtt",
    "content": "Okay, so enough of the theory. 2 Let's start with the practical 3 and build our very first server. 4 So what I'm going to do is 5 I'm just going to close 6 this particular window. 7 This was the FS1. 8 And let me just open the terminal. 9 So what I'm going to do is let 10 me just zoom in a little bit. 11 I should have done this setup 12 before, but yeah, that's fine. 13 So I'll just go into my coding 14 folder and there I have 15 this node, js thing, right? 16 And here I'm going to do 17 mkdir and let's say HTTP server. 18 Okay, so code the HTTP server. 19 And here we have RVs code, right? 20 Let's create a new file that is index 21 js. 22 So this is going to be 23 our entry point file. 24 Okay? 25 Now in order to create a server, 26 you have to use one built 27 in module that is HTTP. 28 So this HTTP module 29 which is again built in. 30 How do I know built in? 31 You can see that it's 32 on the official documentation. 33 Plus node is there, right? 34 This helps me to create a server. 35 So let's try to import it first. 36 So cause HTTP equals require 37 and I can just say HTTP. 38 Fine, then let's create a server. 39 So how do you create a server? 40 You can just say HTTP.um. 41 oh, okay. 42 Do you see that we are 43 not getting typings? 44 So for that, first of all, 45 I'll just do npm in it. 46 And interestingly I can just 47 do an hyphen Y which will 48 skip all the questions 49 and go with the default. 50 Now npm install@ the rate 51 types/ node. 52 So this will give me the bindings. 53 Right now you can see 54 I have create server. 55 Okay, so this line 56 creates a server for me and returns 57 a server instance. 58 Now what I can do is I 59 can take the server and make 60 it listen on a port. 61 I can bind this server to a port. 62 Now what is a port number? 63 Don't worry, I'll tell you. 64 So right now just type in 8000. 65 Okay? 66 So you can just type in 8000 67 and then a callback function. 68 So let's have a callback function. 69 So if my server successfully sets 70 up, if my server successfully 71 tries to listen to this port, 72 I can just say console.log okay, 73 that HTTP server is up and running 74 on port which 8000. 75 So this is just a successful 76 callback that if this successfully. 77 Listens, just give me 78 this console log. 79 That's it. 80 So now you have created 81 a server which might crash. 82 Let me just check. 83 So you can see that, 84 okay, it's not crashing. 85 HTTP server is up and running 86 on port number 8000. 87 But right now we have not 88 coded anything right. 89 So now just do a control C 90 to halt this server. 91 So this is basically means as 92 halt halt Basically means 93 you have just halted it, you 94 have just terminated it. 95 Okay? 96 So this HTTP createserver takes 97 in a callback function, okay? 98 This create server thing 99 gives you access. 100 This create server thing takes 101 in a function and it gives you 102 access to two things, that is 103 a request and a response. 104 The incoming request, and this is 105 where you can send a response. 106 So whatsoever user has requested that 107 will be available in this variable 108 that what user is trying to access. 109 For example, this request 110 will contain the method. 111 If it is a get method or post 112 method or patch method. 113 This will also contain that what 114 that user is trying to access. 115 So all the data that is coming 116 in the request will be 117 available in this object. 118 And using this object 119 we can construct a, response. 120 So now what I, what else is 121 in this function? 122 I'll just say console dot log 123 that I got an eight incoming 124 request, very simple, right? 125 And then I have to return 126 a response, right? 127 But let's say I mention I decide 128 that I will never send a response. 129 So see, what I'm trying to do is 130 in this, my request response 131 cycle, I am basically never 132 sending a response, which is, 133 which is a bad thing, right? 134 Now see what will happen 135 if I do node index js. 136 You can see that it is running 137 on port number 8,000. 138 Now see, if I go on my browser 139 and I Type in local host 8000, you 140 can see that it is stuck forever. 141 So I am trying to access 142 in my web browser localhost8000. 143 And you can see what happened 144 when I am trying to access this, 145 my browser is stuck, right? 146 Why is it stuck? 147 Because my server has 148 taken the request. 149 I got an incoming request, 150 but there is no response. 151 Similarly, if I copy this 152 localhost8000 thing, enter, the. 153 Then I do enter, then I do enter, 154 you can see that we are 155 like getting a request, but no 156 one is there to resolve these. 157 So let's send a, response because we 158 need to complete the cycle, right? 159 So you can see you got four 160 requests, but no one is there 161 to complete this request, right? 162 So how can you send a response? 163 So first of all, we 164 will copy this line. 165 I'm just copying it from here. 166 This is the documentation. 167 So this line sets a header. 168 Okay? 169 So we are sending a 200 response. 170 What is a 200 response? 171 This is a status code. 172 So 200 status code means that 173 it's a success response. 174 Okay? 175 As of now you can just 176 ignore this part. 177 So I'm just saying, hey, 178 response dot write at 200 179 and I will also end a, response. 180 Finally I'll just end 181 a response saying thanks for 182 visiting my server. 183 That, that's it. 184 So what I'm doing is I am getting 185 a request for every request. 186 I'm just doing a console log. 187 You can do DB operations, all that. 188 So all the DB operations, 189 everything will go here. 190 And finally you send a, 191 200 response back to the server. 192 Every time you make a change 193 in your code, you have to Rerun 194 this command that is node index. 195 Now if I try to visit 196 this localhost8000port. 197 Oh, see what I'm getting? 198 Okay, let me just do 199 it couple of times. 200 Every time my server, is returning. 201 Thanks for visiting my server. 202 What if I change something here? 203 Okay, what if I add an emoji? 204 So what you will notice is 205 that I'm not getting that 206 emoji even after refresh. 207 Why? 208 Because I have to do a control C. 209 I have to restart my server 210 and now I will see the change. 211 So yeah, in node js you have 212 to restart the server anytime 213 you make a change on your code. 214 And we have tools for that. 215 Don't worry, that I'll 216 show you while moving. 217 Okay, so now your 218 server is up and running. 219 You were able to create 220 your own server. 221 Let me halt the server. 222 Now you will see that 223 it will go away. 224 So you were able to create a very 225 simple server using HTTP module. 226 And yeah, one thing, let's have 227 the node that makes it more cleaner. 228 So you created a server. 229 Okay, so create a server using 230 this HTTP createserver pass 231 in a callback function. 232 This callback function will 233 run for every request. 234 This function has access 235 to request and the response 236 request is used to see what 237 the user is trying to request. 238 Response is used 239 to construct a, response. 240 And finally you can just make 241 the server listen on a particular 242 port and a success callback. 243 So if this line is successful, 244 if your server is up and running 245 successful, it will just 246 give you this indication 247 again, it's an optional thing. 248 Okay, now what is this port? 249 Right? 250 Now what is this port, guys? 251 In simpler terms. 252 Okay, I'll just tell 253 you what is a port. 254 Let's say that you have 255 a physical machine. 256 So when you talk about a server, 257 first you have 258 a physical machine, right? 259 Like your MacBook or anything, right? 260 Anything. 261 Your physical machine. 262 So it's a server. 263 So your physical machine 264 is like your house. 265 Okay? 266 Your physical machine, it's, it has 267 like RAM and Something, something. 268 It is like your house. 269 Now, on your physical machine you 270 can have multiple services running. 271 Multiple services. 272 For example, there is a service 273 running, let's say this is 274 a database service running. 275 Then there is a, one more service 276 running, which is, let's say 277 a Node js application running. 278 Then you can have one 279 more thing, okay? 280 This can be like something else. 281 So you have different, 282 different services running. 283 And these services can listen 284 on a specific port. 285 For example, let's say, okay, let's 286 say that this particular service is 287 listening on port number eight. 288 Let's say 3001, okay? 289 I'm just taking a random port. 290 Then no other service 291 can listen on this port. 292 This service can listen on 3002. 293 This service can listen 294 on port number 3003. 295 Now it's basically like 296 a room number, okay? 297 Like you have room numbers. 298 So these are like room numbers. 299 Now this physical 300 machine has an address. 301 So let's say the IP of this physical 302 machine is something like this. 303 So let's say if I am a user, right? 304 I am a user and I want 305 to access this service. 306 So I can say, hey, 307 on this machine go. 308 Do you see this? 309 This is a different one, right? 310 Go on port number 3003. 311 So what this will do is, 312 what this is going to do is this is 313 your machine address, right 314 where your physical machine is. 315 So it will basically route 316 the request to this machine. 317 Then you are specifying 318 the port, right? 319 You are specifying the port. 320 This basically means inside 321 this machine you have to route 322 the request to the specified port. 323 So if you say 3003, this is going 324 to communicate to 3003. 325 If you say 3001, this is 326 going to 3001 this way. 327 That means it is going to go 328 in this service, so on. 329 So when I said localhost, localhost, 330 basically Means my machine, 331 my local machine on 8000 right? 332 Now on my machine I can have a lot 333 of services running, right? 334 But I am interested in a service 335 which is running on port 8000. 336 That is this one you can even run 337 on 8001, 8002, 8300. 338 The only thing is that no 339 other service should be 340 running on the same port. 341 So this is what you're 342 known as a port, okay? 343 So that means the syntax goes 344 like, you have the hostname, then 345 this, and then the port, okay? 346 So this is how you access a service 347 on a particular server.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "12-node-http-server.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/12-node-http-server.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0026263786,
      0.022249764,
      0.02240655,
      -0.059158836,
      0.0016444637,
      0.01113421,
      0.026197657,
      0.016498558,
      0.004150679,
      0.023418847,
      -0.022344537,
      0.0033391735,
      0.0071316287,
      0.011407624,
      0.1300428,
      0.010421021,
      0.000083070874,
      0.0068679354,
      0.008938802,
      -0.023183597,
      0.02023818,
      -0.00718049,
      -0.0028559065,
      0.013158797,
      0.007386338,
      -0.00094939343,
      0.0053617544,
      0.0051426846,
      0.034789845,
      -0.011755176,
      -0.0029407234,
      -0.010804305,
      0.003987955,
      0.018851398,
      -0.004928538,
      0.02270749,
      0.020351054,
      -0.00033240637,
      -0.02929332,
      -0.0021905887,
      -0.007843072,
      -0.0029527058,
      0.017729983,
      -0.027642896,
      0.01852716,
      0.0009058202,
      -0.011409788,
      -0.017982516,
      0.006043757,
      0.014643661,
      -0.018364642,
      -0.014449085,
      -0.007132585,
      -0.18797112,
      -0.012103672,
      0.005288313,
      0.013790588,
      0.0036301226,
      0.0019967528,
      0.009775836,
      -0.008596105,
      0.005527954,
      -0.034969997,
      0.0011727635,
      -0.028612763,
      -0.0012427139,
      0.009882457,
      0.0097536845,
      0.02342349,
      -0.0046150237,
      0.0020615952,
      0.011562555,
      -0.016020853,
      -0.01994115,
      -0.023929648,
      -0.013937245,
      0.010599918,
      0.010675009,
      -0.0073598363,
      0.010928068,
      0.0034058134,
      -0.029477483,
      -0.0035168584,
      0.0007491544,
      0.008954261,
      -0.0031718316,
      -0.036949363,
      -0.009559538,
      -0.0134287635,
      0.018846642,
      -0.014383412,
      0.021666177,
      0.004599604,
      -0.0019418861,
      0.0064555197,
      -0.004332138,
      0.0005809058,
      -0.0013700626,
      -0.022758992,
      -0.013224603,
      0.01913458,
      -0.009896423,
      -0.033690553,
      0.025123384,
      0.006087655,
      0.012682497,
      0.016563572,
      0.007812802,
      0.007487173,
      -0.025824225,
      0.012828515,
      -0.015801806,
      0.005928759,
      0.016878508,
      -0.00036277482,
      -0.17731252,
      0.01497308,
      0.0038713722,
      -0.007298673,
      0.003115632,
      -0.025426999,
      0.0008239155,
      0.007015308,
      0.023887588,
      -0.010470231,
      0.017149027,
      -0.008020174,
      0.03028601,
      0.0170593,
      0.02564768,
      -0.0037909301,
      -0.0061740573,
      0.0136316195,
      0.0064730053,
      0.019787762,
      0.014663831,
      -0.0027928303,
      -0.015248452,
      -0.00093358004,
      -0.04203489,
      0.016888393,
      0.03335556,
      0.009809444,
      0.022835469,
      0.013461993,
      0.009708251,
      -0.027630765,
      0.02806588,
      -0.030383399,
      -0.021594785,
      -0.0004669223,
      -0.0105906725,
      0.030411156,
      0.0009958849,
      0.00016779268,
      -0.03343701,
      -0.010755334,
      0.011190711,
      0.0064439783,
      -0.0033786036,
      0.0034434525,
      0.004564591,
      -0.0021515933,
      0.023737486,
      0.015901433,
      0.0046343706,
      -0.029929189,
      0.009042902,
      0.010539212,
      0.017859261,
      -0.012018936,
      0.00047343774,
      -0.0006751924,
      0.00982452,
      -0.011990479,
      -0.015194216,
      -0.0120075,
      -0.0015941135,
      0.013245008,
      -0.005803638,
      0.007547758,
      0.00020445352,
      -0.00028028127,
      -0.0032285317,
      0.014523269,
      -0.0043921056,
      -0.02111809,
      -0.010262317,
      0.018706096,
      -0.029379101,
      0.0016967817,
      0.0007549306,
      -0.00010845559,
      -0.002211603,
      0.013211103,
      -0.024699854,
      -0.023060521,
      -0.024374193,
      0.015458593,
      0.013556615,
      0.029224489,
      -0.013756057,
      0.011023317,
      -0.02992805,
      0.009402757,
      0.025062827,
      0.016849596,
      -0.0069014034,
      0.012374949,
      0.022792375,
      -0.01187701,
      -0.019286918,
      0.006252084,
      0.0028551181,
      0.006068674,
      -0.010264502,
      0.018221065,
      0.022324525,
      0.0044181966,
      -0.010216602,
      -0.010582099,
      -0.006263497,
      -0.0049492763,
      0.029142084,
      0.016310388,
      0.0064666797,
      -0.0082733305,
      0.0011751347,
      0.00418552,
      -0.0126840705,
      -0.0017736767,
      -0.012599327,
      -0.017711878,
      0.0031643647,
      0.030957123,
      -0.018088548,
      0.012086494,
      -0.006830364,
      -0.0023048918,
      -0.0036142278,
      0.0031029042,
      -0.0053374968,
      -0.012592406,
      0.006574329,
      0.026975693,
      0.008656419,
      -0.012716947,
      -0.009484771,
      -0.022492506,
      -0.03288476,
      -0.0101674665,
      0.003425129,
      -0.011732566,
      -0.00054726214,
      -0.0042062723,
      -0.027224066,
      -0.020993236,
      -0.008556792,
      -0.0026322475,
      -0.018689696,
      -0.00040825063,
      -0.010683129,
      -0.0041900617,
      0.00698999,
      0.020244207,
      0.00212216,
      0.013241812,
      0.020149155,
      -0.019053685,
      -0.003894802,
      0.0100721745,
      -0.001814724,
      -0.015829232,
      -0.010909101,
      -0.006509269,
      0.017309165,
      -0.08022227,
      -0.0067635104,
      0.0037358026,
      -0.024364155,
      -0.021534469,
      0.018284855,
      -0.013885879,
      0.007689241,
      0.022662342,
      0.013856937,
      0.0030324543,
      -0.0142122,
      0.016404154,
      0.0041245134,
      -0.004832655,
      0.012640292,
      -0.01016873,
      0.0038677799,
      0.005678587,
      -0.01981066,
      -0.012881946,
      -0.0070446357,
      0.004829749,
      -0.023890406,
      0.016956631,
      -0.010132254,
      -0.033206597,
      0.01848742,
      0.024529468,
      -0.012815312,
      0.013562377,
      0.027686477,
      -0.02423298,
      -0.01905676,
      -0.0121025285,
      -0.0071635423,
      0.025932707,
      -0.019591112,
      0.006944339,
      -0.017664757,
      -0.0014496793,
      -0.017434232,
      0.0107172495,
      0.011883866,
      -0.0052638757,
      0.014988274,
      0.024275994,
      0.009858284,
      -0.017876247,
      0.0053714816,
      -0.0129794385,
      0.0063825846,
      0.014415893,
      -0.0362608,
      0.015888559,
      0.013633284,
      0.006969379,
      0.02030667,
      0.01638497,
      0.005255183,
      -0.017086891,
      -0.0020434794,
      0.021621598,
      0.0009867308,
      0.0059221927,
      0.007212852,
      0.0018313666,
      -0.013800819,
      0.008401192,
      -0.017152855,
      0.00045734624,
      -0.009663012,
      -0.011569804,
      -0.03718395,
      -0.0038002029,
      0.0004869935,
      0.013360241,
      -0.004252666,
      -0.03407231,
      0.017265188,
      0.009255966,
      0.00020158218,
      -0.005069263,
      0.023919975,
      0.008199728,
      0.0072602597,
      -0.0029197773,
      0.0066626305,
      -0.006046463,
      -0.0018712048,
      0.0055840965,
      0.027518656,
      -0.019826835,
      -0.0040166928,
      -0.0159824,
      0.003233012,
      -0.02835651,
      0.0018417586,
      0.009254865,
      0.0125817945,
      -0.030367864,
      -0.0006087238,
      0.005000776,
      0.00026527888,
      0.00508349,
      0.032098398,
      0.0003751429,
      0.00078981405,
      -0.0047074305,
      -0.0068179662,
      -0.016839407,
      -0.008998054,
      -0.023945726,
      0.008121138,
      -0.020054372,
      0.030684188,
      0.0110592395,
      0.010782087,
      -0.025337283,
      -0.016160242,
      -0.0011182107,
      0.005869468,
      0.011604559,
      0.0029410154,
      -0.010854733,
      0.021763582,
      -0.020425325,
      0.014408331,
      -0.008792666,
      -0.015754681,
      -0.010151599,
      -0.0014877991,
      -0.013647635,
      -0.004921169,
      -0.008425855,
      -0.0065632793,
      0.011632242,
      0.0043983026,
      0.0073243836,
      0.006420254,
      -0.031858895,
      0.022730477,
      0.0060658036,
      -0.016471334,
      -0.0023400201,
      0.0047048726,
      -0.031298805,
      -0.008699044,
      0.004213562,
      -0.015402259,
      -0.012049434,
      -0.0016940777,
      -0.027647134,
      -0.009690602,
      0.0064140307,
      0.027921718,
      0.026338821,
      0.015295597,
      -0.0026718841,
      -0.017291494,
      0.004619943,
      0.0071412595,
      -0.012672839,
      -0.01499188,
      0.012848892,
      0.007767944,
      -0.008146167,
      -0.0024322812,
      0.0021648365,
      0.0047850544,
      -0.008600413,
      -0.00982585,
      -0.0277225,
      0.013624403,
      0.0062547363,
      -0.00773364,
      0.004500597,
      -0.019678876,
      0.018958552,
      -0.018718636,
      -0.011209817,
      -0.005866085,
      -0.017663509,
      0.002239845,
      -0.006908589,
      -0.009599444,
      -0.001975528,
      -0.01167557,
      -0.009995378,
      -0.007277283,
      0.007816675,
      -0.01810435,
      0.004682325,
      -0.0027453194,
      0.025357582,
      0.02463518,
      0.012535288,
      -0.009625914,
      0.004323932,
      0.0024284672,
      -0.021819385,
      -0.0035057722,
      0.006322255,
      -0.0108543765,
      0.025066452,
      0.0069272057,
      -0.0077946237,
      -0.023394367,
      0.003499837,
      0.0017610986,
      -0.01248389,
      -0.0067298654,
      0.015012354,
      -0.002084751,
      0.028495485,
      0.010513127,
      -0.010883492,
      0.032273695,
      -0.025091225,
      0.00005455521,
      0.013494164,
      -0.0065481034,
      -0.02551998,
      -0.01744035,
      0.002063926,
      -0.014978648,
      -0.035800785,
      0.017941264,
      0.003947676,
      -0.0079582855,
      0.009179934,
      -0.008039528,
      0.007676887,
      0.016740078,
      -0.015817877,
      -0.013721076,
      0.012805013,
      -0.003022281,
      -0.0016476176,
      0.0058115753,
      -0.015331683,
      -0.007339453,
      -0.010608714,
      -0.023462107,
      0.009522784,
      -0.022429371,
      0.025818858,
      0.0109088,
      -0.0010537844,
      0.0059779803,
      0.015307257,
      0.011969944,
      0.008022236,
      -0.0047150925,
      -0.018890388,
      0.01825461,
      -0.008016185,
      -0.0037139438,
      -0.005557712,
      -0.009847292,
      -0.0006763178,
      -0.012652474,
      -0.002847058,
      0.027179131,
      -0.009974229,
      -0.033993214,
      0.005185354,
      0.0020987971,
      0.010627656,
      -0.11094386,
      0.0012613105,
      -0.013522093,
      -0.017826939,
      0.0025922298,
      -0.014090012,
      0.01954971,
      -0.027163558,
      -0.013920872,
      -0.016080873,
      -0.009167871,
      0.000039773804,
      0.0020699205,
      0.011044132,
      -0.016061401,
      -0.002148335,
      -0.011337309,
      0.035384,
      0.039737094,
      0.0057289475,
      0.0029526146,
      -0.01007324,
      0.013036883,
      0.00088480033,
      -0.015542523,
      -0.0031383196,
      0.026510939,
      0.002092886,
      -0.013181077,
      0.009905365,
      -0.0028092414,
      -0.011787063,
      0.0010446463,
      -0.0033012105,
      0.029033275,
      0.0017343716,
      0.0068032146,
      0.004242855,
      0.025776824,
      0.019566134,
      0.010249022,
      0.013210024,
      0.011455133,
      0.00864994,
      0.0017086806,
      0.022779636,
      0.01760163,
      -0.03223254,
      -0.011420046,
      0.035518315,
      -0.045373138,
      -0.04118966,
      -0.012929623,
      -0.019417606,
      0.015743133,
      0.011197798,
      0.027579157,
      0.013845396,
      0.002618154,
      -0.002547535,
      -0.0037101372,
      0.008210048,
      -0.0034864098,
      0.030570038,
      -0.0056879637,
      -0.008409273,
      0.027762681,
      -0.007671762,
      0.0016858466,
      0.003666545,
      -0.0032031464,
      0.0000345213,
      0.0037491652,
      0.027435213,
      -0.0022513466,
      0.003949304,
      0.007628201,
      0.012459496,
      -0.0028841551,
      0.0149938995,
      -0.015734082,
      0.011410984,
      -0.07196389,
      -0.0051049655,
      -0.013403941,
      0.016510827,
      0.00963835,
      -0.01087953,
      -0.027885746,
      0.022249531,
      -0.00961028,
      -0.0027812964,
      -0.014031552,
      -0.016251607,
      -0.0033941471,
      -0.009214922,
      -0.036975507,
      0.016838169,
      0.004691212,
      -0.040424,
      -0.018057363,
      -0.00081104325,
      -0.006171359,
      -0.01178603,
      -0.007007769,
      -0.007087283,
      0.008184004,
      0.020359525,
      -0.035803664,
      -0.009274896,
      -0.013165531,
      -0.004324507,
      0.0026230635,
      -0.14043465,
      -0.01064936,
      0.016100215,
      0.000666707,
      0.010699966,
      0.004014469,
      -0.003669093,
      0.016734358,
      0.02200074,
      -0.022156088,
      -0.02190017,
      -0.034099277,
      -0.01895993,
      0.008048455,
      -0.00838687,
      0.1384729,
      0.010615144,
      0.017160168,
      -0.011340288,
      0.01901837,
      -0.013866791,
      -0.014057454,
      0.013506288,
      0.012556068,
      0.002211028,
      -0.012740446,
      0.01593484,
      -0.0035887077,
      0.022617849,
      0.024289956,
      0.010227255,
      -0.026711298,
      -0.005774262,
      0.043611344,
      -0.011309657,
      -0.016939411,
      0.0018757196,
      -0.012105924,
      -0.01670515,
      0.0026155266,
      -0.0039675445,
      0.002402246,
      -0.007915506,
      0.021545185,
      0.00776882,
      0.016943527,
      0.007872309,
      -0.022392035,
      0.004101018,
      -0.017289205,
      0.02248199,
      -0.05687512,
      -0.00277587,
      -0.012662699,
      -0.013741474,
      0.033037577,
      0.019045206,
      0.009503807,
      -0.014104231,
      -0.0098134335,
      -0.0047806185,
      -0.005529319,
      0.03333508,
      -0.0039267954,
      -0.0029169624,
      0.007280056,
      0.010736355,
      0.035977658,
      0.0072178687,
      -0.013291827,
      -0.0061864234,
      0.0120236585,
      -0.008766672,
      -0.0031605207,
      -0.025379581,
      -0.006136787,
      -0.0009843857,
      0.02230785,
      -0.0008143931,
      -0.030804114,
      -0.0077814395,
      0.0070488406,
      0.00022106984,
      -0.015219882,
      0.018836716,
      -0.0061815283,
      -0.025564644,
      0.03008626,
      0.0029926347,
      -0.013559714,
      0.014515966,
      -0.0061648097,
      -0.0013255518,
      0.021028686,
      -0.008815867,
      0.019493748,
      -0.0012000618,
      0.012369121,
      0.019647563,
      -0.010862396,
      0.0057903808,
      -0.017810885,
      0.0043717003,
      -0.0063577634,
      0.039012443,
      0.015920937,
      0.021690484,
      0.016966823,
      -0.007588393,
      -0.01673987
    ]
  },
  {
    "id": "genai_cohort_nodejs_13_node_http_in_dept_vtt",
    "content": "So, hey guys, welcome back. 2 And in this particular video, let's 3 understand more about HTTP in depth. 4 Okay? 5 So here I have a very great 6 article that is from the Cloudflare 7 that what is HTTP? 8 What is an HTTP request? 9 And a lot of things. 10 So right now, right now what do 11 you know is that, you know what, 12 let's understand, what is a URL? 13 What is this HTTP version? 14 What is a method? 15 You already know method, right? 16 Get, put, post. 17 You know, we have to understand 18 that what are these request headers 19 and what is this HTTP body? 20 So these are basically the components 21 of an HTTP request, like 22 what a request can contain. 23 Okay. 24 Similarly, you have a response 25 and there is a status code that 26 we have already discussed. 27 Okay, first of all, you know 28 what is an HTTP method? 29 That means when a client tries 30 to send or basically sends 31 a request to a server, right? 32 So this is what, this is a request. 33 Now this particular request can be 34 a get request or, or a, post request 35 or delete request, Put request, right? 36 So let's say that this 37 is a get request, okay? 38 So we know that this particular 39 thing is known as method, right? 40 This is known as method. 41 So let me just have an annotation 42 here so that you have the notes 43 and don't worry, you will 44 get all these whiteboard files. 45 Okay? 46 So yeah, so this is your 47 what, this is your method. 48 Okay, cool stuff. 49 Nice. 50 Then what happens when 51 you have a method? 52 There is something known as X 53 HTTP request headers. 54 Now what are these headers? 55 Okay, let's understand that. 56 What are these headers 57 which are sent along. 58 Guys, have you ever got 59 a parcel, A mail at your home? 60 A mail that looks something like this. 61 Like you have a line here 62 and let me grab one more line. 63 A mail that looks something like this. 64 Like it's a. 65 It's a physical mail. 66 I'm not talking about email. 67 It's a physical envelope, right? 68 So you get a physical 69 mail at your home, right? 70 Now if you see this physical mail 71 that postman comes and gives you, 72 on this physical mail you have some 73 like printed thing here, right? 74 This printed thing contains that 75 from where this parcel is coming or 76 from where this mail is coming 77 to where it has to be delivered. 78 It can have some phone number and it 79 can have the address, right? 80 Some landmark kind of a thing. 81 So this particular thing can, 82 contains some information 83 about this packet, right? 84 What is the weight of this packet 85 from where it originated? 86 And a lot of things can be there 87 on this particular seal. 88 So this is like an extra 89 information, right? 90 Then if you open this parcel, okay? 91 So let me just open this parcel. 92 When you open this parcel, 93 there is some data here, right? 94 This is the actual data which 95 is inside the parcel, Correct? 96 This is the actual thing 97 inside the parcel. 98 So this is the actual data. 99 Correct. 100 This is the actual data or actual 101 thing that you wanted to receive. 102 Similarly, in terms of HTTP, this 103 particular part that is on the above, 104 right, this, this meridata kind of 105 a thing, these are known as headers. 106 Okay? 107 These are known as headers. 108 So whenever, okay, sorry for that. 109 So whenever you are sending a request, 110 first of all you have 111 to specify what method it is. 112 Plus for every request you can 113 send some extra piece of data 114 which is known as headers. 115 Okay, so you can send 116 something known as headers. 117 Along with headers are nothing. 118 These are just key value pairs. 119 For example, there can be 120 a header of, let's say type that 121 what kind of type it is. 122 There can be a header 123 of let's say authorization. 124 There can be a header of xyz, 125 There can be a header of abc. 126 So these headers can have a value. 127 For example for type, I 128 can have a value of A. 129 For auth, I can have a value of B. 130 For xyz I can have a value C. 131 So these are nothing but just a, 132 key value pairs which 133 are sent along the request. 134 Okay, so basically extra information. 135 So if I have to tell you that what 136 these headers in reality looks like, 137 these looks like something like this. 138 So usually you have a header. 139 One common header is content type. 140 Okay? 141 This tells that what kind 142 of content I am dealing with. 143 So this can be adjacent data 144 and HTML data, something like this. 145 So here the key is content type 146 and the value is application/JSON. 147 Right? 148 And then there can be a, 149 header of authorization. 150 So if you are authenticated, 151 right, Authorization. 152 So you have to give your token, right? 153 If you have any token or something like 154 that, you can take along with that. 155 So you can have headers. 156 So these headers are basically 157 extra information about your request. 158 Got it. 159 So these headers are also 160 sent along with the request. 161 Okay? 162 Okay, so server can take these 163 headers, read the headers and based 164 on that process your content. 165 Okay, so you have HTTP headers. 166 So HTTP headers contains text 167 information stored in key 168 value pairs and they are included 169 in every HTTP request. 170 So you can see that this is what a, 171 request header can look like. 172 Authority, method, path, scheme, accept 173 what kind of data I want to accept, 174 which encodings I can accept 175 in what language I want the data. 176 What is my user agent? 177 For example, you can send that hey, 178 you are sending a request header. 179 So you can even add some information 180 about the client. 181 For example, hey, right now my 182 user agent, that means my machine 183 is a Mac machine, let's say. 184 So you can send this kind of data 185 as well in the header, right? 186 To tell the server, that I am 187 requesting from a Mac device. 188 Okay, so these all things 189 can be sent as a header. 190 Okay, now it can also have a body. 191 Now, now that's an optional thing. 192 Okay, so the body, the body 193 part is an optional thing. 194 Why? 195 Guys, tell me one thing. 196 If you are trying to make a get 197 request, that means you want 198 to get something from the server. 199 Do I need to send any 200 data to the server? 201 No, right? 202 There is no need to send 203 any data to the server. 204 In that case, body can be 205 left, Body can be ignored. 206 But let's say for some, like you are 207 making a post request, that means you 208 want to send some data to the server. 209 In this case you have 210 to include a body, right? 211 And this body can 212 contain the actual data. 213 For example, if you are trying 214 to build a Twitter, right 215 in Twitter you can actually send your 216 tweet something like this. 217 That what an awesome day, let's say. 218 Okay, so what you can do is if you're 219 sending a post request, you 220 have, you can send this body along. 221 Okay, so what the backend 222 will do is backend will see. 223 Oh, it's a post request. 224 That means you want to create some 225 content, you're trying to post some 226 content and then backend will actually 227 read your body which can be any data. 228 Okay, so I am sending a JSON data which 229 is like tweet and what an awesome day. 230 So backend can read this par, 231 store it into database and along that. 232 So this is your body. 233 Okay, in case of get, there 234 is no need of the body. 235 But if you are making a post 236 request, so of course it makes sense 237 to send the body along. 238 Okay, so the body 239 of a request is the part that contains 240 the body information. 241 Okay, the body of the HTTP request 242 contain any information being 243 submitted to the web server such 244 as username, password or any 245 other data entered in the form. 246 Okay. 247 Okay. 248 So this was your request thing. 249 So your request contains a method. 250 Okay, that what is the HTTP method. 251 It can have headers 252 and it can have body. 253 Now let's go to google.com okay, so 254 right now what happened when I opened 255 this google.com let's go on to the 256 inspect element and I'll go into this 257 network tab just in case you are not 258 able to Find this you can find in 259 here list. 260 This network tab, basically 261 shows all the incoming requests 262 and response to the server. 263 So I am right now the client, right? 264 So if I do a refresh, can you 265 see that we made a request 266 to HTTPs to www.google.com right? 267 This is the request 268 that my client sent. 269 And this was a get request. 270 Can you see that? 271 This was a get request to which 272 server replied with a 200. 273 That means everything is 274 working you can see, right? 275 Everything is working. 276 So that's why I'm 277 getting a 200 response. 278 Then let's see what all 279 things are also here. 280 Can you see that there are 281 some headers that are sent as 282 a request Headers, right? 283 So request headers, are authority, 284 method, path, scheme, 285 what kind of encodings I can accept. 286 You can see key value pairs. 287 The cache control is there, 288 the cookie is there. 289 Then if I just scroll down then you 290 can see that you have something 291 like priority, you have scheme, you 292 have If you see I have a platform 293 of Mac OS 15 and which chromium 294 version I'm using, I am in a 295 desktop version. 296 So a lot of information is being sent 297 from my client, right? 298 And similarly, similarly I have 299 a response headers as well. 300 So these are all the headers that 301 the server sent me back as a response. 302 Okay? 303 So right now we are just 304 talking about the request. 305 So this is what a request 306 can contain and this is. 307 And what a server can accept. 308 Okay, now one more thing that 309 is very important for you is 310 to understand the URL. 311 Okay, let's understand 312 that what a URL looks like. 313 So let's say you have something 314 like HTTPs/google.com contact us. 315 So this is what a typical let's 316 say www.google.com so this is what 317 a typical URL looks like, right? 318 So let's understand 319 that what exactly is happening? 320 Okay, so this URL contains 321 a lot of things, right? 322 Now first this is your scheme. 323 Okay? 324 So this part is basically your scheme 325 that what protocol you are using. 326 So for example you can use HTTP, which 327 is like hypertext transfer protocol 328 or you are using HTTPs, which is 329 a hypertext transfer protocol secure. 330 This contains an SSL 331 certificate, right? 332 So this is your scheme part. 333 Nice, cool. 334 Let's move further then. 335 Then you have this particular 336 part, okay, I'm just talking 337 about this particular part here. 338 This particular part is 339 known as your naked domain. 340 Okay? 341 This is your actual domain 342 or it is also known as, or 343 it is known as apex domain. 344 So this is your actual domain. 345 Or naked domain, that is 346 google.com okay, so google.com 347 is your naked domain. 348 In this naked domain, for this 349 particular naked domain you have 350 something known as a subdomain. 351 So this particular part right here 352 is basically your subdomain. 353 So sub domain. 354 So these sub domains can be like 355 www.maps.google.com it can be like 356 YouTube.google.com it can be 357 something.google.com admin.google.com 358 so this is your subdomain, right? 359 So this is a subdomain 360 of this apex domain. 361 Okay, then then you have 362 this separator right here. 363 After the separator, 364 this particular whole thing. 365 This particular whole thing. 366 Let me just have a nice color. 367 This particular thing is known 368 as the path, okay, that which 369 path you are trying to access. 370 So this can be like slash contact us. 371 This can be slash contact 372 us, slash A, slash B. 373 So slash. 374 Then you can have something else 375 also that this whole is a path 376 that on which path you are 377 trying to make this request. 378 Okay, so this is your path and then 379 along with the path, then if 380 you have a question mark then 381 you can have query parameters. 382 So Q equals to XYZ and okay, 383 you can have something like 384 maybe sort equals descending. 385 So these are known as. 386 So if you have a question mark 387 in between, so let's say that you have 388 in question mark in between. 389 This is basically your separator 390 for the query parameters. 391 So, so anything after this question 392 mark will be considered as what will 393 be considered as query parameters. 394 Okay, query parameters. 395 So query parameters are what? 396 Basically this, these are some 397 extra key value pairs that 398 you can send along the URL. 399 So right now here I have two query 400 parameters separated by this. 401 And so this is my 402 first query parameter. 403 Okay, so my first query parameter is Q 404 is the key and value is XYZ 405 and my second, 406 okay, my second query parameter is 407 sort, which is descending. 408 So yeah, this over can decide to, 409 you know, take this one and you 410 know, read these one, separated by 411 an and operator and they can see, 412 oh, you are trying to access a 413 data which is sorted on the 414 descending. 415 So again server related thing. 416 So this is how your URL is constructed. 417 Okay, so now here is one thing, 418 this particular part, 419 okay, now now hear me out. 420 Very important, this particular 421 part right here, okay, that means 422 this part, this part is taken care 423 to reach to the server, right? 424 This part is for the DNS purpose. 425 So this part right here 426 helps you to reach to the correct 427 server on the Internet. 428 Okay then this whole thing, right, 429 this whole thing here is processed 430 by the server to decide what kind 431 of response to send to you. 432 Right. 433 And this is for the like scheme 434 for the authentication purpose. 435 Oh, sorry. 436 For the like, you know, 437 secure and transfer purpose. 438 This is for the protocol. 439 So www.google.com is just for reaching 440 to the server and anything 441 after that is for your server 442 application logic to process it. 443 Okay, so this you have to take care. 444 So right now like if I open 445 up the headers again and I do an enter 446 right now I am on google.com, correct? 447 You can see that I am 448 on www.google.com. 449 so if I open up the network 450 request and you can see that 451 I am on which part? 452 Okay, on which path? 453 Sorry. 454 So I am right now on slash path. 455 This means the root path. 456 Let's try to Open/, 457 XYZ, which doesn't exist right now. 458 See what happened. 459 First of all, I try to make a request 460 on this particular path. 461 So the path is XYZ, scheme 462 is HTTPs, method is GET. 463 And server sent me a 404. 464 That means not found, 465 let's say/XYZ/A/ B. 466 Okay, now you can see it is 467 again a, 404 not found. 468 And this is the path. 469 Okay, let's have some query parameters. 470 So how query parameters work 471 is if I go to google.com and so 472 now if I on google.com and I 473 search for, let's say cat. 474 Okay, cat, as a, coding. 475 Okay, so if I go on, 476 let's say this one. 477 So right now if you will see my URL. 478 Let me just take my URL. 479 My URL looks something like this. 480 Okay, this is what my URL is looking. 481 So let's try to decode, let's try 482 to decode that what 483 is actually happening here. 484 Okay, so I'll just expand this a little 485 bit so that everything is in one line 486 and let's make it white in color. 487 So see, you got the scheme, you 488 got subdomain, you got the naked 489 domain, you got slash search. 490 So your path is slash search, right? 491 And then you have a query parameter, Q. 492 I mean Q is for query. 493 That what you are trying to search, 494 what you are trying to search. 495 You are trying to search 496 this particular thing. 497 Okay, so server can basically 498 take this as a query 499 parameter and it can parse it. 500 Now if I copy this and I just paste 501 it here also you can see the query 502 parameters were already there, right? 503 So these are handy to store some 504 information right into the URL. 505 So this is how your URLs work. 506 Okay, now I think you have a very 507 good information about, 508 you know, what a, request looks like. 509 Okay. 510 What a request. 511 Just a request. 512 I'm not talking about response. 513 We were just talking about that what a, 514 request could look like, right?",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "13-node-http-in-dept.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/13-node-http-in-dept.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.016913846,
      0.023033496,
      0.010559659,
      -0.04720337,
      -0.008360978,
      -0.0048138183,
      0.018732559,
      0.026291184,
      0.00532021,
      0.024024671,
      -0.012694141,
      0.0037382632,
      -0.009305004,
      0.0009056962,
      0.12213347,
      -0.0079858415,
      0.0114205675,
      0.003937604,
      -0.0076561477,
      -0.004993149,
      0.014381648,
      -0.0047534746,
      0.009187265,
      0.006811845,
      -0.015485521,
      0.00895048,
      -0.0019977503,
      0.016784186,
      0.03819388,
      0.007734707,
      -0.017282743,
      -0.007709068,
      0.019196138,
      0.026370104,
      0.00017726577,
      0.026594028,
      0.003513708,
      -0.001220912,
      -0.023802126,
      -0.0057090656,
      -0.0019908438,
      -0.012162041,
      0.021962762,
      -0.021828428,
      0.014160358,
      0.0047238073,
      -0.007838358,
      -0.009239123,
      0.006826763,
      0.0122649195,
      -0.02235883,
      0.004634483,
      0.0073892944,
      -0.18894817,
      0.019340761,
      -0.0072251223,
      -0.00439178,
      -0.008005469,
      0.006985321,
      0.011226977,
      -0.0018824495,
      0.017674962,
      -0.009279554,
      0.0070529473,
      -0.026342463,
      -0.0099733835,
      0.036612835,
      -0.0002877836,
      -0.0014826488,
      -0.00040077345,
      0.00081400794,
      0.0057936683,
      -0.029621108,
      -0.027848758,
      -0.017845256,
      -0.010514515,
      0.01449741,
      0.000525497,
      -0.016380532,
      0.010629157,
      -0.011563503,
      -0.028755952,
      -0.012532601,
      0.00032999436,
      0.011628948,
      -0.007010361,
      -0.026427018,
      -0.002266461,
      -0.01024146,
      0.0039184038,
      0.00043932724,
      -0.009127509,
      0.01791961,
      0.008723909,
      0.015894115,
      -0.0016013584,
      0.0014503422,
      -0.00104136,
      -0.016033731,
      -0.01626296,
      0.00000543197,
      -0.011469462,
      -0.038283475,
      0.011885719,
      0.0010833184,
      0.007700154,
      -0.002182722,
      -0.0033245946,
      -0.002957901,
      -0.02296575,
      0.017120142,
      -0.010305452,
      -0.0048217312,
      0.028325072,
      0.00013396527,
      -0.19232948,
      0.031228667,
      -0.010227866,
      0.0010497819,
      0.0022927476,
      -0.032889627,
      0.0042614816,
      0.015024252,
      -0.00091935025,
      -0.029852849,
      0.009030584,
      -0.003515095,
      0.031618193,
      0.015303193,
      0.0009030282,
      0.00037604393,
      -0.015451031,
      0.004012064,
      0.017259633,
      0.0048703644,
      0.0102257235,
      -0.019963674,
      -0.020998908,
      0.0037595734,
      -0.015199041,
      0.0058418736,
      0.04032553,
      -0.0069111753,
      0.024462823,
      0.0054729497,
      0.0054087536,
      -0.02750091,
      0.0073963297,
      -0.026915062,
      -0.026739841,
      -0.005012313,
      -0.014471519,
      0.016561525,
      0.0073423125,
      0.0074129193,
      -0.019550472,
      0.0053441343,
      0.010191622,
      -0.010843587,
      0.012414441,
      -0.0012740196,
      0.0056508216,
      0.009419503,
      0.019950297,
      0.018680252,
      -0.0010241485,
      -0.020690925,
      0.009422656,
      0.013906587,
      0.004429293,
      -0.0064799744,
      -0.017400695,
      -0.001841958,
      0.009768155,
      -0.0121649215,
      -0.005292331,
      -0.015378464,
      0.008792258,
      0.0064570205,
      -0.007831237,
      -0.020011721,
      -0.012700805,
      0.0029170436,
      -0.027413275,
      0.015026494,
      -0.0016451977,
      -0.021656571,
      -0.0029941287,
      0.0036981017,
      0.0018913973,
      0.0012984226,
      0.009212537,
      0.0091816895,
      -0.007972184,
      -0.0030681486,
      -0.023525124,
      -0.003244376,
      -0.006051429,
      -0.0025565955,
      0.018738484,
      0.008934335,
      0.009829598,
      0.0068640877,
      -0.020856285,
      0.0050071483,
      0.019494168,
      0.02089522,
      -0.022758903,
      0.007607501,
      0.015961993,
      -0.014937098,
      -0.02471286,
      0.01336882,
      -0.023635067,
      0.0043154014,
      -0.0038564478,
      0.008977064,
      0.018155305,
      -0.019719109,
      -0.022981962,
      -0.009021552,
      -0.01153185,
      -0.0021222439,
      0.023085477,
      0.017402604,
      0.014431882,
      0.008072876,
      0.0015643297,
      0.025833886,
      -0.01888597,
      -0.0034563965,
      0.0060366364,
      -0.006370859,
      -0.0030259048,
      0.024718087,
      -0.009400706,
      0.010784283,
      -0.005012842,
      0.016941005,
      0.0101801185,
      -0.01815408,
      -0.003519442,
      -0.0011734938,
      0.008037436,
      0.012697855,
      0.005418672,
      -0.0043390202,
      -0.004040219,
      -0.013566078,
      -0.014541579,
      -0.01038328,
      -0.012422951,
      0.0014113907,
      0.003719955,
      0.011542133,
      -0.013598107,
      -0.0449395,
      -0.021285394,
      -0.007167678,
      -0.0067648715,
      0.0014085288,
      -0.021317763,
      -0.007332866,
      -0.0017930048,
      0.019766867,
      -0.0011205075,
      0.02076555,
      0.025406068,
      -0.021920511,
      -0.0062773423,
      0.01012285,
      -0.003006039,
      -0.023010308,
      -0.008461705,
      -0.0036552744,
      0.00009899968,
      -0.07335106,
      0.020228058,
      0.016878182,
      -0.021968085,
      -0.0046155816,
      -0.016728941,
      -0.026378863,
      0.008533999,
      0.02049089,
      0.018347228,
      0.00778564,
      -0.0052684597,
      0.02688534,
      -0.0019218611,
      -0.025371265,
      0.007088865,
      -0.01697827,
      0.012637843,
      0.01214213,
      -0.030852165,
      0.00025572514,
      -0.00491061,
      -0.0022123556,
      -0.0021830695,
      0.014113154,
      0.0075568906,
      -0.02438224,
      0.012767885,
      0.03075707,
      -0.022719357,
      0.009378079,
      0.030512966,
      0.0037823922,
      0.0020793735,
      0.0015689258,
      -0.014439641,
      -0.011317464,
      -0.025971616,
      -0.0019093131,
      -0.006717131,
      0.0065653007,
      -0.000020821532,
      0.015143267,
      0.0141868945,
      0.0050257435,
      0.023246747,
      0.023694066,
      -0.0030077351,
      -0.0150044225,
      0.005605375,
      -0.010990096,
      0.0024257624,
      0.009541466,
      -0.031287856,
      0.019191863,
      -0.0074858796,
      -0.015163939,
      0.0061854995,
      0.032840792,
      0.016925396,
      -0.00022097622,
      0.0075543476,
      0.015281232,
      -0.026289469,
      0.016716547,
      0.0060541234,
      0.008406533,
      -0.0050679245,
      -0.01009301,
      -0.0030232288,
      0.02102591,
      -0.04405724,
      -0.014970901,
      -0.040668387,
      0.011043659,
      -0.002353877,
      -0.011235898,
      -0.009174081,
      -0.02206484,
      0.011791082,
      -0.015555208,
      0.010323842,
      -0.0043010744,
      0.024545949,
      -0.01451065,
      0.01266579,
      0.0068551837,
      -0.009492889,
      -0.0057309535,
      -0.004880675,
      0.0029939523,
      0.018471582,
      -0.00031233384,
      -0.0114968,
      -0.024425048,
      0.0038598932,
      -0.0038328085,
      -0.00849579,
      -0.005864155,
      0.0154074,
      -0.015847404,
      0.007724513,
      -0.024147715,
      -0.0019425343,
      -0.004620044,
      0.03589548,
      -0.011954591,
      -0.008156859,
      0.0032328463,
      0.018578045,
      -0.006955735,
      -0.0025209312,
      -0.025082322,
      -0.00559186,
      -0.027718768,
      0.050956685,
      0.007414437,
      0.01810842,
      -0.012630739,
      -0.017738888,
      -0.0025577836,
      -0.0016405031,
      0.02840116,
      0.004542966,
      -0.023428285,
      0.026066434,
      -0.018139485,
      0.0068358793,
      0.0013373476,
      -0.014582382,
      0.0057282303,
      -0.015314415,
      -0.037388273,
      0.012475387,
      -0.024091791,
      -0.016795136,
      0.0093032485,
      -0.0049268515,
      0.033862762,
      -0.005281544,
      -0.014442149,
      0.0101656625,
      0.009323211,
      -0.0025349548,
      0.0032425565,
      0.015515516,
      -0.017905239,
      -0.0141829625,
      0.008681895,
      -0.0017837859,
      -0.024551606,
      -0.013263722,
      -0.034883328,
      0.01795814,
      -0.009499496,
      0.025756283,
      0.001988397,
      0.009361484,
      -0.0011189461,
      -0.021489255,
      0.027806604,
      0.003014748,
      -0.014347987,
      0.0023950436,
      0.011964346,
      0.00557264,
      -0.0023378325,
      0.0030223185,
      0.010193648,
      0.008565672,
      0.0016289754,
      0.0015785095,
      -0.030762902,
      0.00092795806,
      0.021223256,
      0.010036368,
      -0.0010686283,
      -0.01362799,
      0.012182976,
      -0.00013296382,
      0.009050843,
      0.0026510896,
      -0.040237863,
      0.017240414,
      0.012063127,
      0.016061224,
      0.010911865,
      -0.01130133,
      -0.0059972806,
      -0.019492343,
      -0.010156773,
      -0.008915594,
      0.0033307231,
      0.011185813,
      0.017705273,
      0.03010788,
      0.01842209,
      0.000738137,
      0.025739912,
      0.0058173873,
      -0.021160102,
      0.0012439076,
      0.0061177956,
      -0.017798914,
      0.017715812,
      -0.01734661,
      -0.014572371,
      -0.04928971,
      0.005020335,
      -0.006672426,
      0.016512934,
      0.0016828299,
      0.0045422004,
      -0.019408176,
      0.025901666,
      0.008360058,
      -0.022144206,
      0.00078481616,
      -0.014394605,
      -0.007956202,
      0.018053243,
      0.017113166,
      -0.022828622,
      -0.008274167,
      0.0049682097,
      -0.005156865,
      -0.024343196,
      0.030326119,
      0.0042792233,
      -0.02204868,
      0.0023984332,
      -0.002246775,
      0.0033984582,
      0.021927098,
      -0.013670729,
      -0.024431411,
      0.020635393,
      0.0010634108,
      -0.003827703,
      0.014959266,
      -0.011061297,
      -0.0008996417,
      -0.012476962,
      -0.027628198,
      0.0061945384,
      0.0014780607,
      0.016204946,
      0.013839865,
      -0.014537353,
      -0.0014074683,
      0.021650707,
      0.0049168454,
      0.0050788806,
      -0.020396914,
      -0.021246655,
      0.026694646,
      -0.0034190582,
      -0.010210752,
      -0.020656835,
      -0.011553856,
      0.008849824,
      -0.0072327917,
      0.0012260082,
      0.01595187,
      -0.021619879,
      -0.011420078,
      -0.0015545503,
      0.0031627044,
      0.0133728385,
      -0.10834708,
      -0.010526932,
      -0.006715214,
      -0.0058206497,
      -0.0011331283,
      -0.021119501,
      0.02452468,
      -0.045378484,
      0.0031979016,
      -0.010089656,
      0.009341691,
      0.015890539,
      0.0071169944,
      0.0131651275,
      0.0008311671,
      0.0014992759,
      -0.016268585,
      0.0406012,
      0.025546852,
      -0.009665545,
      0.015103021,
      -0.0055586617,
      -0.0073393565,
      0.010252799,
      -0.00544945,
      -0.013541541,
      0.02376976,
      0.006741841,
      0.013403611,
      0.017628178,
      -0.01915165,
      -0.013580776,
      0.03202846,
      0.020973243,
      0.028181361,
      0.0064301323,
      0.009395116,
      -0.004027124,
      0.00039913118,
      0.023233026,
      0.013293467,
      0.008745414,
      0.0110500315,
      -0.0014948146,
      -0.010241612,
      0.0075515155,
      0.018200768,
      -0.013400643,
      0.0096071195,
      0.015391558,
      -0.04433984,
      -0.021001859,
      -0.011383359,
      -0.009868229,
      0.026441814,
      0.0030791238,
      0.027738841,
      0.0055253315,
      -0.011778312,
      -0.011444307,
      0.00021268691,
      0.0074950936,
      0.00040214809,
      0.04456818,
      0.015297509,
      0.017664032,
      0.035057314,
      0.00421594,
      0.00013863952,
      -0.001971679,
      0.00018223662,
      0.012342066,
      -0.010408998,
      0.04241916,
      -0.0022139866,
      -0.0008271028,
      0.002148396,
      0.006148228,
      -0.0036424953,
      0.025089908,
      -0.023248019,
      0.023662403,
      -0.07420863,
      -0.0041714613,
      -0.023120923,
      0.00004232327,
      0.028200174,
      0.0019919637,
      -0.004560289,
      0.0112088015,
      0.00003220084,
      -0.00795258,
      -0.005136531,
      -0.033860885,
      0.005626825,
      -0.013475392,
      -0.0225709,
      0.016539475,
      0.008261923,
      -0.037767734,
      -0.00657165,
      0.011694997,
      -0.003135511,
      -0.012839535,
      0.0035450535,
      -0.0063135317,
      -0.009968704,
      0.005249619,
      -0.013595214,
      0.005804314,
      0.0045135855,
      0.0054317424,
      0.004285545,
      -0.13549751,
      -0.005237364,
      0.0050880085,
      0.00862917,
      0.0061011594,
      0.003668936,
      -0.001694009,
      -0.00013586538,
      0.027780322,
      -0.028889272,
      0.0052935234,
      -0.014598316,
      -0.02460083,
      -0.005646608,
      0.003893875,
      0.13112482,
      0.0021888022,
      0.018404352,
      -0.015999598,
      0.021113269,
      -0.0071182996,
      -0.014415432,
      -0.011057974,
      0.009941123,
      -0.010935775,
      0.0025223189,
      0.03109022,
      -0.008666391,
      0.019289296,
      0.014471211,
      0.011456952,
      -0.011322468,
      -0.013403284,
      0.03563155,
      0.0021380782,
      -0.017609864,
      0.024810469,
      0.0043111676,
      -0.0047537847,
      -0.0003909293,
      0.006716716,
      -0.002074603,
      -0.01978875,
      -0.0027933093,
      -0.0018716711,
      0.008748979,
      0.0027119846,
      -0.0008260727,
      0.002489835,
      -0.0163553,
      0.035577472,
      -0.046362653,
      0.0032928244,
      0.0000070959395,
      0.0010901518,
      0.03788397,
      0.01495436,
      0.03597565,
      -0.012368203,
      -0.0054119104,
      0.00068624446,
      0.0018266668,
      0.01595183,
      0.0060976674,
      -0.0020048944,
      0.014546445,
      0.0069116075,
      0.027780185,
      0.0032747425,
      0.0038264196,
      -0.007892064,
      0.023732798,
      -0.020460563,
      -0.010613325,
      -0.027810426,
      0.00193312,
      -0.016146196,
      0.011691655,
      -0.0011652205,
      -0.022904642,
      -0.009657098,
      0.009624217,
      0.0059743184,
      0.009914726,
      0.030363336,
      -0.008841758,
      -0.028551303,
      0.017773308,
      0.0025177212,
      -0.00155301,
      0.012161698,
      0.0072080037,
      -0.0047059013,
      0.033532348,
      -0.007688253,
      0.023059227,
      -0.0041073686,
      -0.0073250616,
      0.01872834,
      -0.0069208806,
      -0.011599533,
      -0.01368458,
      0.0074341306,
      -0.010957273,
      0.025639521,
      -0.012043294,
      0.013115241,
      0.023252042,
      0.025102474,
      -0.012747642
    ]
  },
  {
    "id": "genai_cohort_nodejs_14_node_http_part_2_vtt",
    "content": "Okay, so now with this good 2 amount of knowledge, let's jump 3 onto some coding part. 4 Right? 5 So I have a new project, 6 so I like to set up things from 7 scratch so that you know. 8 So first things first, I'll just 9 do an npm Init hyphen y 10 so that I have a package JSON file. 11 So you can see a very simple 12 package or JSON file. 13 And at this point you know 14 what is a package JSON file. 15 Then I'm, I like to do npm install 16 at the array types/ node 17 so that my VS code is working 18 absolutely like a charm. 19 And then let's create 20 an index js file. 21 So usually you will 22 have a lot of files. 23 Okay? 24 So you will have index js file. 25 You will have a lot of files. 26 But index js file is the one 27 that we need to execute. 28 And this is where we are going 29 to import all our code. 30 So first things first, let's 31 have the HTTP setup right here. 32 That is required. 33 And let's import the. 34 No, not like this node HTTP, Right. 35 That looks more, good. 36 Then you can create a server. 37 Okay, you can create a server that 38 is HTTP.create server and you have 39 to pass a callback function 40 which has request and response. 41 Right? 42 Then finally you can just say server. 43 Listen on some port. 44 I, mean usually we use 8000 45 for the development. 46 And then you can pass a callback 47 function which says console log, 48 that server is running on port. 49 Which port are we running? 50 We are running on port 51 number 8,000, right? 52 So port 8,000 seems good. 53 Now see guys, if I have to run this 54 particular code, I have to say node 55 and I have to say index js, right? 56 But you know what you can do is 57 instead of saying it like this, you 58 can configure your custom script. 59 How just remove this 60 particular script. 61 You can just say, hey, 62 I want a script. 63 Let's say start. 64 This can be anything. 65 And whenever someone says start, 66 I have to run this as the command. 67 Now what you can do is using 68 npm, I repeat, using npm, 69 you can just say start. 70 Okay, npm start. 71 And what this will do is this 72 will basically run whatsoever 73 you have specified here. 74 For example, let's say for 75 I just say echo, hey man. 76 Okay, just, just anything. 77 Now if I do npm start, you can 78 see it is just saying hey man. 79 So npm start basically reads 80 the start script from here and runs 81 whatever is as the value. 82 Okay? 83 So usually you will have 84 a lot of things here. 85 For example, you can have start, you 86 can have build, and then you can 87 have the build command, you can have 88 xyz which does something, something. 89 So you can even create 90 your own and scripts. 91 So usually you will 92 have a start script. 93 So npm start, which 94 will start the server. 95 Okay. 96 Now in the server, what I want 97 to really do is I don't 98 want to do nothing much. 99 First of all, I'll just do 100 a console dot log that I 101 got an incoming request. 102 Okay? 103 So there is an incoming request at. 104 So let's have the time. 105 Okay, so I want to console 106 log the timestamp. 107 So just have you know, date 108 dot now that will give 109 you the current timestamp. 110 So there is a new request 111 coming at this time. 112 Then what we will do is 113 let me just do a console.log of 114 full request.C headers. 115 Okay, so this is how you 116 can access the headers. 117 Okay, so you remember headers, right? 118 Headers. 119 So if I want to access this 120 authorization header only I can just 121 say request headers.sorry. 122 authorization. 123 So this will give me the value 124 for just the authorization headers. 125 But let's just console log 126 the whole object, okay, 127 that these are the headers. 128 And don't forget to 129 send the response. 130 So to send the response. 131 Okay, so this, this is nothing. 132 This is just a comment. 133 You can just say request 134 dot write head. 135 Sorry, not request 136 response write head. 137 So right head. 138 Where is the right head thing? 139 Yeah, here is the right head 140 status code. 141 So I'll just send you 142 a 200 status code. 143 Okay. 144 And then finally you can just 145 do a response.end saying. 146 I mean you can just say okay. 147 Okay. 148 I'll just say okay. 149 Okay. 150 Yeah, that's it. 151 So this is my beautiful server 152 that is up and running. 153 Now let's do an npm Start. 154 So you can see that server 155 is running on Port 8000 156 and everything is seems cool. 157 So let me just open a window 158 and go on to localhost8000. 159 So this is what we are getting right 160 now when we go back we have a lot 161 of console log things, right? 162 So let's see that. 163 Then I hit this server when I said 164 localhost8000 on my browser. 165 Browser made a request to my server. 166 Yes or no? 167 So let me just do it again. 168 So I'll just do a command K 169 to clear everything from here 170 and network and refresh. 171 Can you see that? 172 We made a request to localhost8000 173 that is a get request. 174 So by default browser will 175 always make a get request. 176 You got a 2000. 177 Okay. 178 And these were the headers that 179 your browser Sent, right? 180 So it sent an accept encoding, accept 181 language cache, control connection, 182 host, right and everything. 183 So browser is sending a lot 184 of information now. 185 Can you see that all this 186 information is available here? 187 This is basically same 188 thing, see Accept encoding, 189 gzip, deflate branch. 190 So you can see you will have 191 an accept encoding here also. 192 So where is accept encoding? 193 Yeah, accept encoding. 194 See the same value here. 195 So all these values are basically 196 same that the browser has sent you. 197 Right? 198 So you can access 199 the headers like this. 200 Okay, let's just do one thing. 201 Let's just do it at 201 now. 202 Now I want to send a response of 201 203 now. 204 Guys, don't you think that this is 205 irritating to do a control C 206 and restart the server every time? 207 So what I'll do is I'll 208 just add a Var command. 209 Okay, Just add a Var command 210 so that if I do npm 211 Start it is automatically watching. 212 So if I change anything, my server 213 is automatically restarting. 214 So now if I do this thing you 215 can see automatically restarts. 216 Now if I do a refresh here. 217 Now I'm getting a 201. 218 So now the server sent a 201, 219 which doesn't make any sense. 220 But yeah, you can see that this 221 is how you can get the request. 222 Now from here, from here what 223 I can do is let's just try to see 224 that what encoding or what 225 language we are accepting. 226 Okay, so I'll just copy this. 227 Okay, I'll just copy and I'll 228 say that response dot end I want 229 to send a message that is hey, 230 you can accept okay, and then 231 I'll just say request.headers. 232 accept language. 233 Like this because it's a hyphen. 234 So now let's see if I do a refresh. 235 See the server is trying to read our 236 headers and sending me back this. 237 So server can read these headers as 238 key value pair so we can process it 239 that what the client really wants. 240 And based on that what we 241 can do, we can basically send 242 an appropriate response. 243 Okay, so this is how you 244 can read the headers. 245 Now you can even read the body. 246 Okay so body can be anything. 247 So you will have access 248 to request, data. 249 Okay so request body is there 250 and there is something 251 known as request method. 252 Okay, request method is also here. 253 So let's try to console 254 log this request method. 255 So if I do a refresh 256 you are getting a git. 257 Okay, so to make a post Request you 258 need JavaScript on the front end. 259 So let me show you how 260 you can even do that. 261 Okay, so in the JavaScript what 262 we can do is here I'll just 263 write a code that is fetch. 264 Hey, can you please 265 make a fetch call to. 266 To my own server? 267 With using this. 268 Using the post method. 269 Okay. 270 And I'll not be sending any data. 271 Enter. 272 We caught an error. 273 What's the error? 274 Oh, sorry. 275 This should be actually 276 like this, right? 277 Enter. 278 So now you can see that we 279 got a post request, right? 280 The front end was able 281 to send a post request. 282 Similarly, front end can 283 even send a patch request. 284 So let's say patch, okay? 285 And enter. 286 So you can see that now we 287 are getting a patch request. 288 So this is a request method 289 that you can access. 290 Like this. 291 Similar to this, you 292 have a request dot URL. 293 Okay, so let's see that. 294 What is this request URL. 295 So if I am on localhost 8000 296 URL is coming to be slash. 297 Okay, you can ignore this five icon. 298 This is a this is something that 299 browser internally makes 300 a request request for this logo. 301 Do you see this logo here? 302 For this, let's go 303 to slash contact us. 304 Okay, so even if I go 305 to contact us, right? 306 You can see the request is 307 coming to slash contact us. 308 So that means when you are 309 building a server, 310 you can do something like this. 311 You can have a switch case 312 on request URL. 313 Right? 314 Request URL. 315 And you also want to have a switch 316 case on like the methods, right? 317 If it's a get method or that. 318 But yeah, on that later 319 case, if it is a root. 320 Okay, in this case what we 321 will do is let's always 322 write ahead of 200 only. 323 Okay, let's always write 324 ahead of 200 only. 325 So what I'll do is I'll just do 326 a response dot end so I'll just 327 say return response N 328 saying that you are on the homepage. 329 So this is your home page. 330 And let's do a break 331 then if the case. 332 Okay, if the case is 333 slash contact us. 334 Okay, in this particular scenario, 335 what I can do is the break 336 is not required because you 337 know, I'm just doing a return. 338 So I can just do a return 339 that hey, contact me 340 at pius girl.dev@gmail.com. 341 nice. 342 Similar to this, Similar to this, you 343 can have a case of let's say about. 344 Okay, we will create one 345 more page that is about. 346 So in case of about, let's just 347 return response dot end saying 348 I am a software engineer. 349 Okay, I'm a software engineer. 350 Then let's have a default 351 case Default case should be 352 a four or four, right? 353 If you're on the default case 354 in this particular scenario, 355 it should be a 4 or 4. 356 So let's say, hey 404. 357 And finally response dot end 358 end saying that you. 359 Sorry, you are lost. 360 You are lost. 361 Okay, so let's just 362 say that you are lost. 363 Nice and cool. 364 So now let's test a server. 365 So if I do a refresh, 366 contact me@us.devgmail.com. 367 okay, that's fine. 368 You can ignore this. 369 If I go on to the slash, 370 the server crashed. 371 The server crashed. 372 Okay, so why did the server crashed? 373 The reason for that is, 374 you know, we are trying 375 to mutate the headers twice. 376 So what you can do is you can also 377 shift this logic into your FLS only. 378 Okay, so yeah, this will 379 basically solve the issue. 380 So now let's do a refresh. 381 Okay, homepage. 382 Nice. 383 Let's go on to the slash contact us. 384 Working good. 385 Let's go on to the slash about. 386 What was the page about? 387 Yeah, just the about. 388 So you can see that 389 not, not like this slash about. 390 I mean slash, about. 391 You can see I'm a software engineer. 392 But. 393 But if I go on to some 394 other page, xyz, which does 395 not exist, you are lost. 396 And even if I go to the network tab, 397 so what you will notice is 398 let me just zoom out a little bit. 399 So we are getting a 404 400 from where this 404 is coming. 401 It is coming from. 402 It is coming from here. 403 What if I do a 200 here? 404 Let's see. 405 So even if you are lost, 406 you are getting a 200. 407 So this is not a good 408 practice, right? 409 You, you, you are not designing 410 your server in a as per the rules. 411 So you should not do it. 412 I mean you can do it. 413 It's your server. 414 You are. 415 You can do it anything. 416 But these are not the standards, 417 these are not the norms. 418 So you should follow 419 the guidelines and norms. 420 Okay, so this is how you 421 actually create a server. 422 So basically you can have 423 the URL based on the URL what 424 the user is trying to access. 425 You can do that. 426 Okay, so yeah, congratulations 427 on your very first server. 428 So now you have a fully 429 functional server which is 430 more smart now do you? 431 Did you notice one thing guys? 432 That we are making a server 433 application logic 434 more and more smarter. 435 Earlier our server was just able 436 to return a single thing. 437 Now we have a smart logic of 438 a switch case which is reading that 439 what you are trying to access. 440 And based on that only 441 we are returning it. 442 So our goal is to make our 443 servers application logic 444 more and more smarter as 445 we proceed in this course. 446 Got it. 447 So, yeah, I mean guys, you are 448 really doing a great work. 449 So that's all for this 450 particular video and let's 451 meet you in the next one. 452 Until then, bye bye and take care.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "14-node-http-part-2.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/14-node-http-part-2.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0009851623,
      0.024185648,
      0.027037337,
      -0.06371538,
      -0.0066948324,
      0.001420734,
      0.017054707,
      0.01878559,
      0.00880834,
      0.0046292855,
      -0.016786864,
      -0.008336834,
      0.0056188856,
      0.008108379,
      0.13349348,
      0.008715696,
      -0.0066320384,
      0.0058897478,
      0.014717092,
      -0.023284925,
      0.016217904,
      -0.0032339885,
      0.022888215,
      0.0050835377,
      0.0023868955,
      -0.004243708,
      0.012612048,
      0.0043338663,
      0.033013552,
      -0.004959055,
      -0.0042145452,
      -0.0084230155,
      -0.003844316,
      0.017422829,
      -0.0021254402,
      0.03306024,
      0.021840207,
      0.0013313501,
      -0.025762273,
      -0.0010911548,
      -0.008940177,
      -0.0069832215,
      0.011415166,
      -0.020308392,
      0.018528719,
      -0.002294028,
      -0.0064946953,
      -0.017889693,
      0.00783869,
      0.021347724,
      -0.010707261,
      -0.015835684,
      -0.008712855,
      -0.17702875,
      -0.013685634,
      0.0008145052,
      0.023919366,
      -0.007899642,
      0.01209239,
      0.013721145,
      0.00008062857,
      0.0044643986,
      -0.0390544,
      0.0008477732,
      -0.017830366,
      -0.008624232,
      0.0047647594,
      0.00038994005,
      0.027729563,
      -0.008378192,
      -0.006024454,
      0.014656881,
      -0.015116,
      -0.016200436,
      -0.014456785,
      -0.0115158055,
      0.011790556,
      0.004144078,
      -0.025920024,
      0.015268956,
      -0.0077429423,
      -0.020358851,
      -0.006984275,
      0.0057196375,
      0.009893423,
      -0.011596514,
      -0.024514284,
      -0.012485392,
      -0.017686311,
      0.016408568,
      -0.006333528,
      0.024108302,
      0.00032725907,
      0.0018359292,
      -0.0027586645,
      -0.00018598101,
      -0.0006532659,
      0.002406561,
      -0.012014846,
      -0.01388335,
      0.018968696,
      -0.0039580143,
      -0.027591903,
      0.017236348,
      0.00435202,
      0.018814627,
      0.015627623,
      0.002003414,
      0.017943509,
      -0.03096375,
      0.009757232,
      -0.016180826,
      0.0042714407,
      0.014542153,
      0.016423274,
      -0.18352354,
      0.019056745,
      -0.004118071,
      0.0037261336,
      0.009541974,
      -0.021327715,
      0.009423442,
      -0.00062064466,
      0.01669742,
      -0.01955741,
      0.0074436655,
      0.0010641281,
      0.032074623,
      0.01556594,
      0.01232697,
      -0.004816358,
      -0.0042096674,
      0.0049777213,
      0.011560114,
      0.025864009,
      0.0143815875,
      0.004165831,
      -0.003817822,
      0.009097248,
      -0.049263693,
      0.004611857,
      0.03376004,
      -0.007690705,
      0.017101336,
      0.010437365,
      -0.008440583,
      -0.018325694,
      0.022037698,
      -0.021674082,
      -0.031175448,
      -0.00066688337,
      -0.021949196,
      0.034569003,
      0.00074827246,
      0.021644544,
      -0.039282057,
      -0.0010259707,
      0.0060890657,
      0.00007463806,
      0.0009934332,
      0.0058011645,
      0.008977104,
      0.004830943,
      0.028486254,
      0.015858198,
      0.012785364,
      -0.023944182,
      0.013523982,
      0.01512347,
      0.0035987913,
      -0.006280849,
      -0.00254546,
      0.008523106,
      0.011779508,
      -0.015911654,
      -0.009920882,
      -0.0015745912,
      -0.0024526916,
      0.006685217,
      -0.0070004864,
      -0.0024177935,
      0.0026204507,
      0.017962389,
      0.005421502,
      0.021595335,
      -0.006592875,
      -0.021733826,
      -0.00020188143,
      0.0069644754,
      -0.016047372,
      0.002224015,
      -0.008805288,
      -0.0050182194,
      -0.004865397,
      0.01471243,
      -0.014507609,
      -0.019109126,
      -0.010788482,
      0.016203092,
      0.0066215913,
      0.021100733,
      -0.0063999193,
      0.010867289,
      -0.026324693,
      0.011926955,
      0.023314472,
      0.01716034,
      -0.0151339695,
      0.014145474,
      0.024550369,
      -0.0056893458,
      -0.0132122,
      0.0069940495,
      0.008598244,
      0.010057938,
      -0.014204725,
      0.016176159,
      0.023532875,
      0.003035676,
      -0.013330473,
      -0.0070702913,
      -0.0014283947,
      0.0038817988,
      0.016427074,
      0.0099364985,
      -0.00072085223,
      0.003893899,
      -0.006193983,
      0.010934966,
      -0.02354118,
      0.014981024,
      -0.0066491337,
      -0.008154239,
      0.00012911398,
      0.0111947805,
      -0.021303825,
      0.00026275608,
      0.0055099307,
      0.0046825185,
      0.0066171694,
      0.0028720375,
      0.0050075045,
      -0.0081675695,
      -0.009414245,
      0.026823325,
      0.0044398014,
      -0.021894922,
      -0.013873428,
      -0.026273193,
      -0.021512771,
      -0.030584378,
      0.0036292716,
      -0.010149911,
      -0.0081549855,
      -0.011241173,
      -0.03201598,
      -0.020966308,
      -0.0089327935,
      -0.0013671796,
      -0.020029547,
      0.0015706839,
      -0.0020211525,
      -0.020032274,
      0.004713819,
      0.01440246,
      -0.0007456233,
      0.021463715,
      0.022983018,
      -0.017954012,
      -0.005092049,
      0.019618133,
      0.012356707,
      0.0034613388,
      -0.016865525,
      -0.010019788,
      0.013948186,
      -0.0809804,
      -0.0006250133,
      -0.008430196,
      -0.031010278,
      -0.0223989,
      0.0121460995,
      -0.0071766246,
      0.007395756,
      0.026105115,
      0.010767845,
      -0.007496528,
      -0.011056238,
      0.021413459,
      0.0058316165,
      -0.014976847,
      0.025653929,
      -0.022372361,
      0.0020919577,
      0.0030952643,
      -0.011485461,
      -0.0112963095,
      -0.01621608,
      0.0027142481,
      -0.013953035,
      0.022264916,
      -0.005248916,
      -0.03272819,
      0.02393463,
      0.029270887,
      -0.016127253,
      0.015397575,
      0.01808282,
      -0.029648392,
      -0.018327698,
      -0.0055164127,
      -0.0007933909,
      0.02307658,
      -0.014694688,
      0.015486035,
      -0.018941669,
      -0.001701388,
      -0.015048091,
      0.009549726,
      0.011585641,
      -0.00675138,
      0.008370268,
      0.033345375,
      0.0018000662,
      -0.02292788,
      0.008617012,
      -0.01921334,
      0.015892476,
      0.01366826,
      -0.03762627,
      0.017875236,
      0.007458765,
      -0.0046677175,
      0.016301975,
      0.030686565,
      0.0003515091,
      -0.009659886,
      0.0022638715,
      0.017296012,
      0.0012867529,
      0.006176519,
      0.00715375,
      -0.0045702746,
      -0.007854421,
      0.006763908,
      -0.01943335,
      0.0071659805,
      -0.019027324,
      -0.013543776,
      -0.048475176,
      0.0032288353,
      0.0043150843,
      0.023838177,
      0.007898347,
      -0.02839912,
      0.009553325,
      0.0054686894,
      0.0022061698,
      0.0023439054,
      0.018365694,
      -0.0005369893,
      0.013128308,
      -0.008528896,
      0.009337629,
      -0.001560429,
      -0.012612264,
      0.014373945,
      0.02825755,
      -0.0041617462,
      -0.0023944364,
      -0.018266087,
      -0.0014254238,
      -0.022607831,
      -0.0063399435,
      0.0057679755,
      0.020259649,
      -0.02975309,
      -0.0018550537,
      -0.0022393202,
      -0.0019297864,
      0.0033880374,
      0.022841256,
      0.0018782428,
      -0.0022250994,
      -0.010141002,
      -0.002861186,
      -0.020671787,
      0.004403337,
      -0.017614864,
      -0.004471245,
      -0.027610324,
      0.030932644,
      0.016612897,
      0.012289339,
      -0.02698936,
      -0.015169432,
      -0.0052743433,
      -0.0014714135,
      0.009911768,
      0.007941325,
      -0.004991638,
      0.019329851,
      -0.022543196,
      0.0071345824,
      0.0026344806,
      -0.016412297,
      0.003298977,
      0.009532138,
      -0.027097564,
      -0.00024903944,
      -0.0049538715,
      -0.0059123766,
      0.01263157,
      -0.012589597,
      0.0092985835,
      0.012879254,
      -0.03566148,
      0.014742941,
      0.0047894767,
      -0.016410405,
      -0.01697597,
      0.012746225,
      -0.023245139,
      -0.004746619,
      0.0037046848,
      0.0002868819,
      -0.0054279873,
      -0.0045669135,
      -0.014895331,
      -0.006072664,
      0.004793949,
      0.019621465,
      0.02726935,
      0.011328693,
      -0.013119287,
      -0.021114428,
      0.008436091,
      0.012447326,
      -0.017102115,
      -0.005163006,
      0.008618104,
      0.017493013,
      -0.0027358362,
      -0.0075927945,
      0.014318631,
      0.01017298,
      0.0014507164,
      -0.0037523173,
      -0.035928577,
      0.01564902,
      0.0014646549,
      -0.0026788225,
      0.0025539321,
      -0.005003121,
      0.0116836885,
      0.003765993,
      -0.0032651387,
      -0.0023746418,
      -0.012680876,
      -0.0069875265,
      -0.006780331,
      -0.0066357926,
      0.0058628437,
      -0.013829483,
      -0.01590585,
      -0.008973946,
      0.0013094427,
      -0.021827135,
      -0.00045598135,
      -0.000114164155,
      0.020050244,
      0.028974734,
      0.013426999,
      0.002353097,
      0.004150114,
      -0.0006522639,
      -0.024775473,
      -0.0021973262,
      -0.0008816386,
      -0.0110201705,
      0.027551506,
      0.011377441,
      -0.0024146964,
      -0.022060174,
      0.0011726217,
      0.011223993,
      -0.0147855375,
      -0.0058267643,
      -0.0022237361,
      0.002711893,
      0.03251078,
      0.015535424,
      -0.019995648,
      0.0137927085,
      -0.027888624,
      0.007329849,
      0.01638472,
      0.0020351224,
      -0.017316753,
      -0.009656984,
      0.011241386,
      -0.018070104,
      -0.028624943,
      0.023510318,
      0.008984205,
      -0.018078234,
      0.005791176,
      -0.00890562,
      0.017127367,
      0.014377501,
      -0.0110902665,
      -0.0026211562,
      0.0065426272,
      -0.0002264678,
      -0.005703864,
      0.006646133,
      -0.018560188,
      -0.009562563,
      -0.006217841,
      -0.012315333,
      0.0022084187,
      -0.02154823,
      0.028839279,
      0.017492248,
      0.0003415483,
      -0.0020804466,
      0.013688731,
      0.0052509396,
      0.0044156793,
      -0.010185972,
      -0.012021762,
      0.02315772,
      -0.003190293,
      -0.00025338287,
      -0.009907705,
      -0.0101963375,
      -0.0034382213,
      -0.0045237034,
      -0.004541941,
      0.021916205,
      -0.007709209,
      -0.025063338,
      0.011251391,
      -0.006433432,
      0.016750522,
      -0.117917165,
      0.00051154924,
      -0.020856539,
      -0.015789371,
      0.0028205714,
      -0.016440924,
      0.016678518,
      -0.021317303,
      -0.024694229,
      -0.012626036,
      -0.0036769104,
      -0.0072339177,
      0.0017826384,
      0.012266977,
      -0.018628957,
      -0.0026884982,
      -0.005170443,
      0.03961715,
      0.034884524,
      0.0002721975,
      0.0091129895,
      0.0019508563,
      0.0086559625,
      0.0005905782,
      -0.016410839,
      -0.0028182827,
      0.029466212,
      -0.005763441,
      -0.000022834005,
      0.008662121,
      -0.009169274,
      -0.012220658,
      0.010242227,
      -0.0019958029,
      0.02268082,
      0.0031039168,
      -0.0056403116,
      0.007389903,
      0.023356985,
      0.011736014,
      0.0094572045,
      0.008393629,
      0.015363809,
      0.003285083,
      -0.0011351394,
      0.014220773,
      0.016788583,
      -0.01690764,
      0.009383678,
      0.047352757,
      -0.03905325,
      -0.041399263,
      -0.011357868,
      -0.011379623,
      0.008006138,
      0.01159745,
      0.024157884,
      0.012128024,
      -0.0069263233,
      0.0060741846,
      0.00311582,
      0.017125467,
      -0.0031785488,
      0.029680617,
      0.0010818099,
      0.006928136,
      0.022465575,
      -0.009257636,
      0.0031166123,
      -0.009305376,
      -0.0015909027,
      0.0068434807,
      0.009037921,
      0.021834848,
      0.0022516781,
      0.007980983,
      0.0033233555,
      0.016786387,
      0.007956357,
      0.021703154,
      -0.019040367,
      0.009382186,
      -0.07609256,
      -0.010142354,
      -0.015338397,
      0.012509077,
      0.018089103,
      -0.0021799374,
      -0.025463307,
      0.020131616,
      -0.007773269,
      0.00428043,
      -0.008766516,
      -0.017784176,
      0.011991197,
      -0.010877713,
      -0.03214391,
      0.019053802,
      0.0060938145,
      -0.02846605,
      -0.017892491,
      -0.000736556,
      -0.008288989,
      -0.0014524348,
      -0.0012313491,
      -0.014680052,
      0.006907337,
      0.020828087,
      -0.023965135,
      -0.011209867,
      -0.0053835716,
      -0.007055932,
      0.00058127503,
      -0.15123934,
      -0.01613622,
      0.008539387,
      0.0032532385,
      0.0075935437,
      -0.0012037138,
      -0.0019286622,
      0.006830161,
      0.014375778,
      -0.032200083,
      -0.009577765,
      -0.038950786,
      -0.022063,
      0.0062056114,
      -0.01377116,
      0.13966522,
      0.009451225,
      0.010399718,
      -0.006284194,
      0.017898355,
      -0.016088756,
      -0.007825366,
      0.0025020267,
      0.013851106,
      0.0023606154,
      -0.007064156,
      0.017152289,
      -0.008419861,
      0.023420952,
      0.017332021,
      0.012432478,
      -0.026009047,
      -0.011314387,
      0.03172212,
      -0.0014308468,
      -0.025031542,
      0.0053494023,
      -0.013568416,
      -0.016714258,
      -0.0019919968,
      -0.011530887,
      0.009076579,
      -0.0031937528,
      0.0060331714,
      0.0047940565,
      0.017802056,
      0.008667154,
      -0.025188591,
      0.0029043192,
      -0.038223036,
      0.014527932,
      -0.058200993,
      -0.00015995922,
      -0.0005255983,
      -0.011580575,
      0.03462291,
      0.029709559,
      0.010495037,
      -0.020808611,
      -0.004062391,
      -0.0001890857,
      -0.0007745264,
      0.028541867,
      -0.012466384,
      -0.00008108151,
      0.00980457,
      0.007281614,
      0.03161893,
      0.015204368,
      -0.012199469,
      -0.00735628,
      0.01305017,
      -0.017142683,
      0.00945821,
      -0.031535335,
      -0.011814979,
      0.0080643045,
      0.026903408,
      -0.0012904595,
      -0.022328462,
      -0.008804924,
      0.018407715,
      0.000542268,
      -0.023620235,
      0.019686112,
      -0.017591849,
      -0.01897085,
      0.0282796,
      -0.007414784,
      -0.01241896,
      0.012074564,
      0.0057834554,
      -0.002752021,
      0.023331055,
      -0.009907803,
      0.008324139,
      -0.005153117,
      0.01185079,
      0.008394427,
      -0.008927353,
      0.0043954165,
      -0.015837153,
      0.023565197,
      -0.012675232,
      0.024845941,
      0.0064077727,
      0.016690915,
      0.015073929,
      0.0041302596,
      -0.0132671865
    ]
  },
  {
    "id": "genai_cohort_nodejs_15_node_http_testing_tools_vtt",
    "content": "Hey guys, welcome back 2 to another exciting video. 3 And in this video I'm going 4 to show you that how we can use 5 these API testing clients and tools 6 in order to build 7 a very reliable and great APIs. 8 Okay, so these testing tools 9 are very, very important 10 to build an API and they are very 11 helpful while you're developing. 12 So there are a lot 13 of API testing tools. 14 And don't worry, I'll tell 15 you that what these does. 16 So like you have the Postman. 17 This is the like most famous one. 18 And I have used the Postman a lot. 19 But the only problem with them is 20 that now there is a lot of features 21 in Postman which you don't need. 22 So they have made this particular 23 product a lot bloated. 24 Okay, so this is a very bloated 25 product and it requires 26 you a sign in and all that. 27 So it was a great 28 product, I would say. 29 And it is still a great 30 product, no doubt in that. 31 But the only problem 32 is it's very heavy. 33 Now then there is a, 34 alternative that is Isomnia. 35 Again it was also a great 36 product, but now it is 37 very, very, very heavy. 38 So I don't prefer to use it 39 or something like that. 40 And these are not open source. 41 I mean Isomnia is open source. 42 But my personal favorite that I 43 want to show you is one Bruno. 44 Okay, so Bruno is open source. 45 Great. 46 And next is thunderclient. 47 My personal favorite one is 48 thunderclient because this is 49 not a standalone application. 50 This is a VS code extension 51 which directly gives you 52 this UI in the VS code. 53 So this particular thing 54 is a game changer. 55 So what we are going to do is 56 in my Extensions tab, let's 57 search for Thunder client. 58 Okay, so you can see that we 59 have this Thunder client and I 60 can just do an installation. 61 Okay, so let's install thunderclient. 62 And done. 63 You can see that there is a new logo. 64 Now these Thunder clients can 65 help you, these API clients can 66 help you to test your APIs. 67 How what you have to do is you have 68 to click on this new request. 69 Cool. 70 From where do you want 71 to make the request? 72 So HTTP. 73 Hey. 74 HTTP. 75 Colon, colon, localhost. 76 Right on 8000. 77 Right on 8000. 78 I want to make a request. 79 What kind of request 80 you want to make? 81 I want to make a get request. 82 So you have get, post, put delete, 83 patch, head options and all. 84 Okay, so I want to make 85 a get request and I do. 86 Do you want to send any 87 headers to the backend? 88 Yeah, I just want 89 to send two headers. 90 That's it. 91 And sent. 92 So what happens when you send, See 93 your server got a request and this 94 is what you get as a response. 95 So you got 200 as a response, 8 byte 96 size, 7 milliseconds it took 97 and your server sent three headers. 98 Nice. 99 Let's make a post request. 100 Okay, so you can make a post request. 101 So you can see that it's 102 an incoming request. 103 Let's make a request at slash contact 104 us and do a send contact me 105 at this you're getting a 200. 106 So you can see that I can do all 107 the testing the that how my APIs 108 are working using this tool. 109 Okay, you can add headers, you can 110 add authorization, you can add body 111 here if you want to send something. 112 So everything is available here 113 and it also creates 114 a history of everything. 115 So I mean too good. 116 Okay, so this is what 117 we are going to use. 118 That is Thunder Client. 119 No installation, no overhead. 120 But please feel free to use 121 Postman if you want to. 122 It is same only if you will see 123 that if you will install Postman. 124 So here is where you 125 can give the URL. 126 You can select the method, 127 you can just click on this. 128 You know there is a send 129 button on the top which 130 they have not rendered. 131 You can do send. 132 So this is the data that 133 you are sending and you 134 will get the response. 135 So yeah, you can use Postman. 136 But yeah, for me it is little 137 bit bloated now and I prefer 138 Thunder Client over it. 139 Okay.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "15-node-http-testing-tools.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/15-node-http-testing-tools.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.005245729,
      0.023528844,
      0.011902374,
      -0.06935319,
      -0.0030516866,
      0.0076836995,
      0.015568203,
      0.021258526,
      -0.01801506,
      -0.010902051,
      0.0028104603,
      -0.006383706,
      0.0073715243,
      0.022570983,
      0.13626303,
      -0.020387687,
      -0.0006448249,
      -0.00438008,
      -0.0036260264,
      -0.038248405,
      -0.0019968583,
      -0.008474393,
      0.012710111,
      -0.004947207,
      0.011506456,
      0.010319358,
      0.012065835,
      0.0071379025,
      0.016174095,
      0.011854893,
      -0.010074417,
      -0.026362563,
      0.0044150883,
      0.027026663,
      0.004212461,
      0.012071558,
      0.018839395,
      0.010134959,
      -0.02449125,
      0.012843956,
      -0.03384973,
      0.007757082,
      0.010824407,
      -0.017636376,
      0.0069237547,
      0.0012276535,
      -0.0054952926,
      -0.027609823,
      -0.00044260733,
      -0.0027148756,
      0.009424964,
      -0.0039231465,
      -0.0033286517,
      -0.18159424,
      -0.016660009,
      -0.009269333,
      -0.0056442097,
      -0.004093268,
      0.027349727,
      0.0099773165,
      -0.03319701,
      0.006252528,
      -0.02238834,
      -0.010724487,
      -0.031021725,
      -0.022064667,
      0.018399063,
      -0.013207158,
      0.020834919,
      0.0026928382,
      0.011565074,
      0.011978397,
      -0.0061839614,
      -0.03290596,
      -0.0046586636,
      -0.017250536,
      0.004438175,
      -0.01486397,
      -0.0047598514,
      0.022373883,
      0.0008441038,
      -0.0072445464,
      -0.021300618,
      0.020183127,
      0.0064693857,
      0.009733018,
      -0.020962838,
      -0.0036669315,
      -0.017896907,
      -0.015989643,
      -0.003419161,
      0.027770024,
      -0.010580737,
      0.009042479,
      -0.0034179087,
      -0.0021384356,
      0.00010991402,
      -0.012800682,
      -0.0029549182,
      -0.0023013959,
      0.022695564,
      -0.012568757,
      -0.033253178,
      0.01738438,
      -0.0018367238,
      -0.0030769934,
      -0.002084368,
      0.014333531,
      -0.011660499,
      -0.021069834,
      0.03187387,
      0.0071896347,
      -0.008141236,
      0.019386023,
      0.022453707,
      -0.17501563,
      0.015998624,
      -0.0035227314,
      0.013184751,
      0.009968543,
      -0.012683147,
      0.0064820764,
      -0.0019091985,
      -0.021626247,
      -0.037581757,
      0.016106106,
      0.00410235,
      0.019591313,
      -0.01104794,
      0.012771574,
      -0.007117299,
      -0.025109762,
      -0.013634437,
      -0.0007036191,
      -0.0059456313,
      0.02437771,
      -0.016212054,
      0.0046109646,
      -0.0059647155,
      -0.01866021,
      0.023304978,
      0.041816603,
      -0.009156449,
      0.013884084,
      0.012330181,
      -0.025325717,
      -0.010241842,
      0.0075016767,
      -0.005249575,
      -0.011083206,
      0.010953293,
      -0.014218533,
      0.0013113873,
      0.004392539,
      0.028385023,
      -0.04667176,
      0.0129681025,
      0.00080318045,
      0.0004995107,
      0.007408121,
      -0.0034865027,
      0.014094169,
      -0.012925469,
      0.0055564777,
      -0.003744853,
      -0.005795988,
      -0.007342217,
      -0.011020607,
      0.024961434,
      -0.009362679,
      0.005233726,
      -0.014789488,
      0.011928738,
      0.007822119,
      -0.016182018,
      -0.001114459,
      0.0061342707,
      0.00871054,
      0.017337829,
      0.006244672,
      0.007559195,
      -0.00864953,
      0.018905018,
      -0.00091764994,
      -0.0049144113,
      -0.0134842945,
      -0.025634594,
      0.008994855,
      0.0007620843,
      0.011370462,
      -0.006097248,
      -0.0026479706,
      0.035454594,
      0.006875625,
      0.0027690043,
      -0.03017554,
      0.002536011,
      -0.031911228,
      -0.007106245,
      0.0047783637,
      0.0050594998,
      -0.013464824,
      -0.00893641,
      -0.013445082,
      -0.0025059392,
      -0.010040904,
      0.018876921,
      -0.023613643,
      0.0012191958,
      -0.0027475997,
      -0.023020558,
      -0.014677815,
      -0.0029624589,
      -0.018359115,
      -0.0000069197044,
      0.0083730435,
      0.013467339,
      0.007517601,
      -0.0129188895,
      -0.0081645455,
      0.0045156707,
      -0.01905961,
      0.0062366673,
      0.031308327,
      0.002910109,
      -0.016412014,
      0.015857259,
      0.0005988195,
      -0.0067307,
      -0.0079098875,
      0.023650182,
      -0.005763207,
      -0.024950715,
      -0.007926681,
      0.017150823,
      -0.007343134,
      -0.010643648,
      0.008292146,
      0.012024683,
      0.0077374764,
      -0.0030419775,
      -0.007067885,
      -0.01875653,
      0.011260919,
      0.016982976,
      -0.006046358,
      0.0068574175,
      -0.01883166,
      -0.018447021,
      -0.011445982,
      -0.01617318,
      -0.014275788,
      0.0005775922,
      -0.03644379,
      0.014870063,
      -0.008070601,
      -0.039858848,
      0.00013712482,
      -0.0063943127,
      -0.012903657,
      -0.0027652537,
      -0.020996459,
      -0.008211205,
      -0.013858501,
      -0.0027100958,
      -0.004783461,
      0.02106188,
      0.013535084,
      -0.026534315,
      0.024843024,
      0.011143004,
      0.0053888387,
      -0.01830955,
      -0.019479249,
      -0.00645245,
      -0.00804459,
      -0.05746815,
      0.020055763,
      -0.0031945745,
      -0.035011444,
      0.005240658,
      0.018249495,
      -0.03069284,
      0.0045413855,
      0.014838282,
      0.004401261,
      -0.0037642096,
      0.0063033174,
      0.013340666,
      -0.015409904,
      -0.023037622,
      0.02570455,
      0.0019571702,
      -0.014755112,
      -0.0058820955,
      -0.023165863,
      -0.0030560042,
      -0.021016123,
      -0.008143358,
      -0.0037094944,
      0.026424328,
      -0.0065399846,
      -0.015533089,
      0.019265091,
      0.023612529,
      -0.00799523,
      -0.00420324,
      0.0055919182,
      -0.016854111,
      -0.004374984,
      -0.017408632,
      -0.012823053,
      0.03190151,
      -0.017416447,
      -0.010098859,
      -0.0066800006,
      0.0027452745,
      0.0075985678,
      0.011837812,
      0.024248688,
      -0.005119543,
      -0.008958883,
      0.0038297947,
      0.009817749,
      -0.0007214188,
      0.007412296,
      -0.01702717,
      0.017338473,
      0.0100225145,
      -0.016303701,
      -0.0056870915,
      -0.020304631,
      0.00033886047,
      -0.006916467,
      0.017894583,
      -0.005272667,
      0.0063040648,
      -0.0016715168,
      0.005428908,
      -0.013550108,
      0.02616966,
      0.01700493,
      0.011276409,
      -0.025072567,
      -0.0004408866,
      -0.01259216,
      0.01883774,
      -0.017562246,
      -0.024118435,
      -0.043361984,
      0.0006016524,
      0.009920696,
      0.0020400458,
      0.009107284,
      -0.016645893,
      -0.0022851545,
      0.0021807093,
      0.020035896,
      0.012301879,
      0.014126868,
      -0.0040786644,
      -0.0046727723,
      -0.0057149683,
      0.010526497,
      0.00002523084,
      -0.029458288,
      0.015127816,
      0.022288498,
      0.0029178616,
      -0.007397396,
      -0.0019298341,
      0.0042567584,
      -0.02623945,
      -0.026269935,
      -0.015284636,
      0.009979701,
      -0.010869766,
      -0.0017483168,
      -0.012643795,
      -0.010523616,
      0.004231053,
      0.0051731947,
      -0.018521441,
      -0.017974222,
      -0.010575501,
      -0.012974201,
      -0.0011959327,
      0.0042699366,
      -0.00600653,
      0.003598178,
      0.0015578747,
      0.029469145,
      -0.006631538,
      0.011040787,
      -0.02444644,
      0.007081419,
      -0.025616046,
      -0.007575184,
      0.0017722257,
      -0.004593314,
      -0.007716896,
      0.017317245,
      -0.008004855,
      0.0076159453,
      -0.006178438,
      -0.017844616,
      -0.02809822,
      0.007481829,
      -0.02339265,
      -0.0031870385,
      -0.0061088433,
      -0.0037998778,
      0.01652084,
      0.010002821,
      0.02734468,
      0.022748714,
      -0.0034741708,
      0.02310676,
      0.013516123,
      -0.0067414097,
      0.00037581488,
      0.024757707,
      -0.015661204,
      0.0039159,
      -0.011420253,
      0.009543762,
      -0.016990501,
      -0.0018214942,
      -0.02976063,
      0.021059448,
      0.0066320295,
      0.0148687735,
      0.018333817,
      0.008324149,
      -0.02296301,
      -0.023301613,
      -0.0057287803,
      -0.0020804184,
      -0.026726268,
      -0.033642016,
      -0.012399912,
      -0.00018936758,
      -0.011424729,
      -0.017281432,
      0.0021731562,
      -0.0062535354,
      -0.00555847,
      -0.0043511926,
      -0.03339102,
      -0.007028888,
      0.010911437,
      -0.0038374062,
      0.02270226,
      -0.002455687,
      0.018942764,
      0.0037781412,
      -0.0026647588,
      -0.0182398,
      -0.035042673,
      0.017073398,
      0.017241916,
      0.017394252,
      -0.0013630176,
      -0.0067708767,
      -0.011218695,
      0.0024329429,
      -0.008937691,
      -0.0019963738,
      -0.013558883,
      0.02622925,
      -0.002156451,
      0.018152427,
      0.0047273035,
      0.0089794,
      0.0021119465,
      0.012562701,
      -0.017958729,
      -0.0026164656,
      0.026904345,
      0.011685391,
      0.033204287,
      -0.0032842169,
      -0.022688339,
      -0.041559335,
      0.014954908,
      0.014264374,
      0.0154869,
      -0.0061610155,
      0.021729682,
      0.013431813,
      0.029275881,
      0.023518289,
      -0.018318284,
      -0.0025723318,
      -0.021742059,
      -0.015565633,
      -0.003686675,
      -0.0016167522,
      -0.025641289,
      -0.023165444,
      0.0039603184,
      0.0027448777,
      -0.03393749,
      0.018368281,
      -0.007246461,
      -0.019791245,
      0.013507393,
      -0.014170492,
      0.0065582483,
      0.021962158,
      -0.0064678993,
      -0.0076242234,
      0.023861377,
      0.006629275,
      0.018566623,
      0.0148397,
      -0.004275372,
      -0.010768026,
      -0.025562743,
      -0.016031358,
      0.014254539,
      0.010243947,
      0.00217568,
      0.031532772,
      -0.00506207,
      0.008832599,
      0.020464577,
      0.019163234,
      -0.0011501126,
      -0.0036270907,
      -0.011928073,
      0.004082239,
      0.0010086069,
      0.0054378374,
      -0.015142397,
      0.0024176256,
      0.022650657,
      -0.013990896,
      -0.009522813,
      0.017302206,
      0.00723949,
      -0.013436662,
      0.0016750769,
      -0.005111753,
      0.04131326,
      -0.11953171,
      0.0024015731,
      -0.029714668,
      0.0013377926,
      0.0020803614,
      -0.024862854,
      0.032206442,
      -0.028640537,
      0.0035145427,
      0.0023204514,
      0.0030173487,
      -0.00358147,
      0.02180558,
      0.006436606,
      -0.010589225,
      -0.03106898,
      -0.012456709,
      0.0036077409,
      0.029114313,
      -0.005434321,
      0.0058158655,
      -0.020797398,
      -0.0015793515,
      0.007065593,
      -0.015727477,
      0.0018003465,
      0.023785902,
      -0.0137683125,
      -0.00041092245,
      -0.005067851,
      -0.03359959,
      -0.0041102385,
      -0.0035957133,
      -0.0075700567,
      0.010304719,
      0.016176527,
      0.008380921,
      0.010071463,
      0.0077972384,
      0.005134435,
      0.000071354516,
      -0.010314129,
      0.018149357,
      0.0133704515,
      -0.02492621,
      0.0012914757,
      0.011047349,
      -0.02675384,
      -0.008303613,
      0.045934945,
      -0.05971241,
      -0.03106165,
      -4.3512497e-7,
      -0.038755026,
      0.00638334,
      0.013898937,
      0.0078002135,
      0.00509821,
      0.0041169035,
      0.00010704854,
      -0.006851653,
      -0.008076819,
      -0.0047049327,
      0.04678942,
      -0.017382845,
      0.011314785,
      0.017336212,
      0.013453439,
      0.019657273,
      -0.01795592,
      -0.016682273,
      0.006575311,
      0.010074301,
      0.010418551,
      0.0075815287,
      -0.008247526,
      0.013326746,
      0.017265506,
      -0.003251736,
      0.021941429,
      -0.018620908,
      0.001779138,
      -0.058535993,
      -0.0124234855,
      -0.008016359,
      0.001565786,
      0.024861787,
      -0.008072527,
      -0.0061107925,
      0.016522741,
      0.001265337,
      0.017414754,
      -0.008646082,
      -0.0024332376,
      0.0026817233,
      -0.038700975,
      -0.027069177,
      -0.015158183,
      0.016355429,
      -0.02831532,
      -0.015374942,
      -0.006105703,
      -0.009896976,
      -0.00975298,
      0.009970039,
      -0.007853596,
      -0.010960685,
      0.016069684,
      -0.0025402454,
      -0.0013186188,
      -0.025444772,
      -0.003181686,
      0.026964795,
      -0.14128487,
      -0.015301405,
      -0.0066910475,
      0.018288856,
      0.0022386115,
      0.03499081,
      -0.013618247,
      -0.002686679,
      0.0010919652,
      -0.0037413791,
      0.0017971507,
      -0.028347313,
      -0.019755881,
      0.0055097793,
      0.003762055,
      0.12796511,
      -0.014588142,
      0.0020451897,
      -0.029508812,
      0.019144634,
      -0.016267318,
      -0.012948334,
      0.0060545946,
      0.008577715,
      -0.006808898,
      -0.0095631825,
      0.0051468355,
      -0.004176196,
      0.012465504,
      0.023626747,
      -0.0016979309,
      -0.021090807,
      -0.008385877,
      0.022687426,
      0.0111968545,
      -0.002448033,
      0.013848769,
      -0.017525418,
      0.008389046,
      -0.009495298,
      0.011788128,
      0.006570894,
      0.003984063,
      0.005134038,
      -0.0068908427,
      0.0117389085,
      0.0026353935,
      -0.023154216,
      -0.0053875525,
      -0.021720344,
      0.02210009,
      -0.05573173,
      0.0057950485,
      -0.008061423,
      -0.0036365604,
      0.037342325,
      0.0021639767,
      0.025026737,
      0.0015228636,
      0.0070257294,
      0.0031094425,
      0.0020476964,
      0.004310939,
      -0.012009599,
      0.0039032071,
      -0.00047248302,
      0.015226212,
      0.02725447,
      0.017622245,
      -0.0032597098,
      -0.004608657,
      0.012815424,
      -0.0064865244,
      0.00859822,
      -0.013452456,
      0.013011494,
      -0.008669586,
      0.012730623,
      0.0073802336,
      -0.0135341,
      -0.014297669,
      0.00267046,
      -0.0034967426,
      -0.022928614,
      0.017723093,
      -0.026979232,
      -0.045754638,
      0.0074442,
      -0.008404893,
      -0.01814584,
      0.013963555,
      0.005383257,
      -0.007159667,
      0.031562172,
      -0.0051269084,
      0.009248121,
      -0.0032814208,
      0.0040684724,
      0.022847088,
      0.021362077,
      -0.0057206904,
      -0.023332767,
      0.009354661,
      -0.018370157,
      0.030118208,
      -0.01621028,
      0.02538226,
      0.020688683,
      0.012922485,
      -0.012785516
    ]
  },
  {
    "id": "genai_cohort_nodejs_16_node_http_task_1_vtt",
    "content": "So hello guys, in this 2 particular video, let's create 3 a very simple project. 4 So here I have created 5 a task MD file. 6 You will get these files. 7 So we have couple of tasks here. 8 You can read the task 9 that what we have to do. 10 And let's try to implement 11 all of these tasks and try 12 to code a server. 13 Okay, so again, boilerplate code. 14 So let's have an index js file 15 and let's have npm any typhoon y 16 so that we have, we have 17 the package or JSON file, right? 18 So inside the package JSON. 19 So what I'll do is I'll just say npm 20 install at the rate types/ node. 21 So let's wait for it. 22 And also let's configure 23 the start script to say 24 node hyphen hyphen Var. 25 And that is index js. 26 Cool stuff. 27 Right now inside my index js. 28 So what, what is my task? 29 Right, let's go on to task. 30 So my task is very simple. 31 So we have these four routes 32 that we have to make. 33 Routes or path is same thing. 34 So if there is a get request 35 on slash, we have to send 36 a simple hello message. 37 If there is a get request 38 on slash, contact us. 39 We have to do this. 40 If there's a post request 41 on slash tweet we have to do this. 42 If there's a get request 43 on this thing, we have to do this. 44 And also we need to store all 45 the incoming requests with 46 the timestamps to a log TXT file. 47 Wow, amazing. 48 So const HTTP equals request require 49 and let's have the node 50 HTTP module, you know, imported. 51 Then you can create a server using 52 this HTTP create server function 53 which takes a callback function. 54 So you have access to request, 55 you have response, and that's it. 56 Finally, server. 57 Hey server, can you please listen 58 on port number 8,000? 59 And once you do that, once you are 60 successfully able to bind yourself 61 to that port, give me a console 62 log message saying that that HTTP 63 server, is running on port 8000. 64 Cool stuff, right? 65 So let's just do an npm start. 66 So you can see that my 67 server is running. 68 So first things first, right? 69 So if you go on to the tasks, 70 okay, so first is that you 71 have to make a get route. 72 Send a simple hello message 73 from the server. 74 Okay, so what I can do is I can 75 say, hey, const the method, okay? 76 So I can just say request 77 method, okay? 78 And you can have the path, 79 okay, that is request path. 80 So I'm just getting request, URL. 81 Sorry. 82 So these are the two variables. 83 So let's have A switch case 84 on the path. 85 Okay. 86 And on the path, let's have 87 the first one that is case. 88 Okay. 89 Case slash. 90 In this particular scenario, 91 what do we have to do? 92 So we have to send a simple 93 hello message from the server. 94 Pretty simple, right? 95 So you can just say 96 response dot, write head. 97 Okay? 98 Write head head that is 200 99 dot and you can just 100 end it saying hello. 101 Okay. 102 You can just send it saying hello 103 from the server. 104 Okay. 105 And even you can add an emoji 106 of saying, you know, hello 107 or something like that. 108 So yeah, emojis are cool, right? 109 So let's have an emoji. 110 So my first task is done. 111 Okay. 112 And it's always good 113 to verify along with. 114 So what I can do is I can just have 115 my Thunder client here and let's try 116 to make a get request on slash. 117 Is my server working as expected? 118 Yes. 119 So if even if I do multiple times. 120 Yeah, my, my server is 121 working as expected, right? 122 Hello from the server. 123 So guys, we have successfully 124 done our task one, right? 125 So this was your task 126 one which is now done. 127 So what I will do is I'll 128 just, I'll just strike it off. 129 So you can just strike 130 it off like this, okay. 131 Or even. 132 That's fine. 133 Let, let it be here. 134 Now what is my second task? 135 Second task is that you have to 136 make a get thing on slash contact us 137 that sends your email 138 and contact number to the user. 139 Now guys, tell me one thing. 140 Actually if you see if I even make 141 a post request on this, I am 142 still getting hello from server. 143 Do you think that is a good thing? 144 Because the document has mentioned 145 that if it is a get request only 146 then you have to send the request. 147 But even on post it is working. 148 So that means our server has a bug. 149 So this is a bug, right? 150 So that means what I have to do is 151 I have to first make a switch case 152 on the method, okay? 153 That if it is the get request then 154 I have to handle it differently. 155 And if it is a let's say post 156 request and I have to handle 157 them differently and so on. 158 Right? 159 So right now I just have to get, get 160 I can just you know handle the gate 161 and this switch should be here. 162 So that means now what you're 163 doing is if it's a get 164 request and the path is this only 165 then this should work. 166 Now see on the post you 167 are not getting anything. 168 You are not getting anything 169 because the server is 170 not able to do anything. 171 So that means if. 172 Okay, so let me just 173 do a return here. 174 So that means if you somehow reach 175 to this line in this 176 particular scenario, you are lost. 177 So response dot 178 write head saying 404. 179 Okay? 180 And you can just say dot n 181 saying, you are lost man. 182 Okay, you are lost. 183 Now see. 184 So now if I send the request, 185 you are lost because 186 post request is not there. 187 But if I make a get request, I 188 should get now it is good, right? 189 So you have a switch case first 190 of all on the method, then 191 you are making this path. 192 Second is contact us. 193 Right? 194 So pretty simple, right? 195 You inside the get only we need 196 a case for slash contact us. 197 And in this particular 198 scenario we will just send our 199 email and phone number. 200 So let's say that, 201 sure, you can contact me. 202 So my email is you know, Piyush 203 garg.dev@gmail.com and phone. 204 Okay, phone. 205 You can just send like + 206 919-999-9999 something like this. 207 So that means if I make 208 a now get request onto slash 209 contact us and send. 210 So yeah, I'm getting the data fine. 211 But if I do a post request 212 on this, yeah, it should 213 say, you are lost, man. 214 Nice. 215 Nice. 216 Right, Makes sense. 217 Then if you make a post request 218 to slash tweet, it's kind of, you 219 know, that I want to do something. 220 It's basically like, you know, 221 user is trying to create a tweet. 222 We don't have a DB right 223 now, but okay, let's try 224 to mimic this thing. 225 Okay, so that means now 226 I need a new case. 227 So let's have a break to this one. 228 So I have a new case of post. 229 So all the post request 230 should be handled here. 231 So now again you have to switch 232 on the path and the path that we 233 are talking about is slash tweet. 234 So if there's a post request on tweet 235 in this particular scenario, 236 you can do a fake DB operation. 237 So let you can just assume that 238 we have a lot of code to do 239 that DB operation and stuff. 240 But right now what I want 241 to do is, I want. 242 I'll just say 2,01 because 243 when you do a post on something 244 and that thing is created something 245 like the user post a request 246 on slash tweet, which 247 internally created some resource. 248 So 201 is the correct status quo. 249 And you can say like your 250 tweet, your tweet was created 251 something like this. 252 Okay, so we are just mimicking it. 253 So that means if I now make 254 a request, okay, so if I now make 255 a request to slash tweet, 256 get Request will give me a 404. 257 But this time post 258 request is going to work. 259 That is to go one created. 260 Nice. 261 See, get request is not working. 262 Now even it is saying that, hey, 263 you have to make a get request also 264 for slash tweet, which basically 265 sends all the tweet from the db. 266 Okay, so back to the script. 267 Okay, so back to the script file. 268 So inside this get 269 we have the switch. 270 So here what I can do is I can just 271 copy this particular thing, 272 paste it again here, and this time 273 we can name it to slash tweet. 274 So that means now what I am doing is. 275 Okay, so now what we are doing is we 276 are creating a slash tweet also. 277 See, now we have two parts. 278 Slash tweet. 279 Slash tweet. 280 The only difference is this is for 281 the post and this is for the get. 282 So here we can just say 200, 283 and I can just send hey, tweet one 284 tweet to something like this. 285 So tweet one and new line. 286 So in future we will actually 287 get it from the database. 288 But right now we don't have a db, 289 so I can just send 290 all the tweets like this. 291 So making a get request 292 on slash tweet, you are getting 293 the tweet one, tweet two. 294 But if you are make a post request 295 on this right, then 296 you are creating a new one. 297 Nice. 298 Right, so you can see our 299 server is going very good. 300 Right now there is a final 301 challenge remaining that you need 302 to log all the incoming requests 303 with the timestamp and log it 304 into the log.txt file. 305 So that means you have 306 to create a lock. 307 So let's say that my log looks 308 something like this, that 309 there was an incoming request. 310 So let's have the date first. 311 Okay, so I can just say, 312 I'll just have the date dot. 313 You can have. 314 Now you can just say dot to string. 315 Let's just say date. 316 Now then what you have 317 to do is like you will just say, 318 hey, on which kind 319 of method the request was coming? 320 Let's say. 321 So it was coming on this 322 particular method. 323 And what was the path. 324 Great. 325 What was the path that user 326 was trying to access? 327 So let's say this is how 328 you constructed a log. 329 So every time there is a request, 330 you have to create this log Txt 331 file, you have to append it. 332 So to work with files, do 333 you remember that FS 334 module that we covered? 335 So you can just import that node fs 336 module and I can just say fs.append 337 to a file in a Synchronous way. 338 That's fine because every request 339 that will come user has 340 to first make an entry, right? 341 So we are just appending 342 to a file that is log Txt, 343 what is the data that is this log. 344 And I want to write it as a UTF8. 345 Okay? 346 That is UTF8 format. 347 Now what will happen is anytime 348 you get a request, let's make 349 a post request to slash tweet. 350 Okay, A log is created. 351 A log is created. 352 Now. 353 Why this dollar is coming here? 354 Just one second. 355 This dollar should not be here. 356 And also please guys, don't 357 forget to add a new line. 358 Okay, so first Got it. 359 Then let's make a get 360 request to slash tweet. 361 Okay, working. 362 Let's make a get request 363 to this thing and let's try 364 to make a request to contact us. 365 Which is also good. 366 And let's try to make a post 367 request on this thing. 368 Oh, you are lost. 369 Now if I check my log txt, you 370 are having all the logs that 371 at what time what kind 372 of requests one were coming, right? 373 So this is like your server logs. 374 So if you're monitoring your 375 server you can actually see that 376 when the requests were coming. 377 And if someone is trying to hack 378 into something, someone is 379 trying something different. 380 So yeah, you have all 381 the information, right. 382 So this is pretty cool. 383 So this is how you can actually 384 create a logger and logs 385 all the incoming requests. 386 So when you go into the production 387 you have this distributed 388 logging system. 389 So all the incoming requests are, 390 are logged so that they 391 are kept for the future reference 392 if something goes bad. 393 Let's say your server is down 394 so you have some data that 395 why the server crashed. 396 Oh, there was a this kind 397 of request which could be there. 398 Right. 399 So this helps in debugging the stuff. 400 Okay, so this is how we have 401 created a very simple server 402 which now supports. 403 Okay, let me just show you 404 the full code which supports 405 two methods, get and post. 406 And you have couple of routes 407 and get and you have 408 a couple of routes in post.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "16-node-http-task-1.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/16-node-http-task-1.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0136826895,
      0.023735162,
      0.024549097,
      -0.056807682,
      -0.013223858,
      -0.013791143,
      0.035012335,
      0.025236072,
      -0.005554695,
      0.01277462,
      -0.020176096,
      -0.018513534,
      0.011960611,
      0.027622018,
      0.13814138,
      0.029908726,
      -0.002768456,
      0.007820167,
      -0.0016688224,
      -0.01337183,
      0.005445008,
      -0.011554483,
      0.016209055,
      -0.00060383556,
      0.00037970615,
      -0.007954854,
      0.007759777,
      -0.008394104,
      0.03528684,
      -0.013656353,
      0.010107201,
      -0.0009190857,
      0.0006959563,
      0.014482258,
      -0.005170487,
      0.008961535,
      0.019153891,
      0.00478125,
      -0.031631798,
      0.019663723,
      -0.008810817,
      0.009245764,
      0.019236304,
      -0.01644331,
      0.010419825,
      0.012254838,
      -0.0074245282,
      -0.023998287,
      0.014070656,
      0.03101394,
      -0.0099044,
      -0.018729737,
      -0.0046723075,
      -0.18557955,
      -0.01110872,
      0.0114869485,
      0.008903897,
      0.0008152832,
      0.009185102,
      0.013888479,
      -0.017670374,
      0.006144988,
      -0.04420973,
      0.0024875512,
      -0.018724548,
      -0.0014461336,
      0.00846905,
      -0.009560285,
      0.014518203,
      0.00007641924,
      0.00087787036,
      0.017194428,
      -0.020175548,
      -0.03172428,
      -0.02224499,
      -0.031466525,
      0.017748939,
      0.012480125,
      -0.0094797425,
      0.0014900304,
      0.0036473023,
      -0.012747448,
      -0.009727887,
      -0.0058601005,
      -0.009327667,
      -0.007810669,
      -0.022467315,
      -0.008651054,
      -0.02348509,
      0.013210495,
      -0.0056456993,
      0.032062404,
      -0.0074536963,
      0.00051576097,
      -0.005240743,
      -0.0013259317,
      0.0043722973,
      0.006752323,
      -0.0014037386,
      -0.01592086,
      0.014454406,
      -0.011174818,
      -0.025823908,
      0.01847373,
      -0.010151455,
      0.018181054,
      0.014081789,
      -0.0064339577,
      0.025598954,
      -0.02321939,
      0.0120558115,
      -0.014841554,
      0.0036747407,
      0.015591242,
      0.010620595,
      -0.17360018,
      0.02965916,
      -0.0023025265,
      0.0071696434,
      0.006676215,
      -0.018191021,
      0.002505508,
      0.009493827,
      0.023051,
      -0.021077268,
      0.00224193,
      0.004253158,
      0.023923146,
      0.02940366,
      0.007291472,
      -0.012956107,
      -0.008778455,
      0.009582691,
      0.0016731598,
      -0.00013615639,
      0.00022815895,
      -0.0009948631,
      -0.013120739,
      0.0010005089,
      -0.03230511,
      0.0073264753,
      0.03641135,
      0.00915536,
      0.02157962,
      0.010865343,
      -0.018003237,
      -0.0125849955,
      0.041332074,
      -0.01590877,
      -0.03986868,
      -0.0035819523,
      -0.019487856,
      0.024447916,
      0.0061113033,
      0.01830408,
      -0.049544696,
      -0.004865725,
      0.014289043,
      0.0010649975,
      0.0054029133,
      -0.004259544,
      0.024268692,
      -0.008028593,
      0.02720669,
      0.026472418,
      0.01421279,
      -0.020106327,
      -0.007004664,
      0.0021607606,
      0.014565994,
      -0.010429111,
      -0.0058546946,
      0.008051634,
      0.00072857476,
      -0.0076643582,
      -0.008471256,
      -0.01005729,
      0.007471506,
      -0.001988061,
      -0.010495028,
      -0.0083106095,
      0.005818432,
      -0.0019986306,
      0.00097087625,
      -0.0008143531,
      -0.0034194852,
      -0.021549076,
      -0.01573288,
      0.019006277,
      -0.015867967,
      0.0122182835,
      -0.021419674,
      -0.009333278,
      -0.004468526,
      0.012282056,
      -0.015810577,
      -0.016513553,
      -0.02248676,
      0.011648164,
      -0.005804433,
      0.029984573,
      -0.010972905,
      -0.0048926705,
      -0.009299225,
      0.0034042802,
      0.021198811,
      0.029355455,
      -0.0154885845,
      0.015109593,
      0.02021306,
      -0.018365486,
      0.0033072317,
      -0.005194498,
      0.0152898235,
      0.003532341,
      -0.015102094,
      0.02129452,
      0.0053005307,
      0.0024378404,
      -0.011558966,
      -0.010052675,
      -0.013432306,
      0.0056749103,
      0.029238733,
      0.009271474,
      0.0047460287,
      0.012332418,
      -0.0052793087,
      -0.0027346015,
      -0.00023068766,
      0.020066522,
      0.004452818,
      -0.013377556,
      -0.0035896173,
      0.0253773,
      -0.014401117,
      -0.011712965,
      0.011574295,
      0.0062181335,
      0.0082767615,
      -0.007912014,
      -0.0069122273,
      -0.0119934445,
      0.0099675385,
      0.03346241,
      -0.0026609441,
      -0.023192666,
      -0.0061004623,
      -0.014923066,
      -0.023354666,
      -0.0052931183,
      -0.003725082,
      -0.0030962098,
      -0.017469132,
      -0.0104055265,
      -0.034533206,
      -0.00908226,
      -0.018761856,
      -0.0004686606,
      -0.021182157,
      -0.0048368583,
      -0.007102706,
      -0.01399113,
      0.007308736,
      0.015991697,
      -0.012579236,
      -0.0031954104,
      0.030261258,
      -0.023110505,
      0.0021781942,
      0.0064632143,
      -0.013771658,
      -0.007120423,
      0.0050801667,
      -0.0006046921,
      0.0016624227,
      -0.08799353,
      0.005003474,
      -0.0109160235,
      -0.022372793,
      -0.02294175,
      0.020523706,
      -0.0030276198,
      -0.00038399472,
      0.015182231,
      0.014487643,
      0.0017396092,
      -0.019475373,
      0.033928752,
      -0.007509637,
      -0.018535303,
      0.020561006,
      -0.005288513,
      -0.008710262,
      0.03060887,
      -0.01684308,
      0.003423897,
      -0.014456972,
      0.0015998265,
      -0.025035119,
      0.024001451,
      -0.0020194019,
      -0.013607267,
      0.015937222,
      0.028846908,
      -0.013202397,
      0.0033727828,
      0.02672749,
      -0.008097174,
      -0.026248615,
      0.006928835,
      0.01612358,
      0.032487124,
      -0.011052929,
      0.030512998,
      -0.023582773,
      0.008119006,
      -0.020486714,
      0.016781962,
      0.015841423,
      -0.01022989,
      0.0054484,
      0.028934732,
      -0.0014786011,
      -0.015495926,
      0.012253611,
      -0.028840745,
      0.021463094,
      0.01019862,
      -0.022037765,
      0.011074494,
      0.023371512,
      0.008126033,
      0.007044372,
      0.025387168,
      -0.0037900417,
      -0.0049394337,
      -0.0031410898,
      0.03448686,
      -0.0057895645,
      0.001033941,
      0.014671617,
      0.0004643327,
      -0.0072271456,
      0.00018380409,
      -0.028399942,
      -0.005957114,
      -0.0034958783,
      -0.010495099,
      -0.043016355,
      -0.0013704072,
      0.008938447,
      0.0055510825,
      -0.0042171464,
      -0.024256164,
      0.020293806,
      0.013254566,
      0.0015520748,
      0.0028412153,
      0.023734005,
      -0.0038764884,
      0.004509414,
      -0.0032186504,
      0.0089568,
      0.008767328,
      -0.0031656036,
      0.014690713,
      0.0289327,
      0.008707086,
      -0.0036299662,
      -0.015153219,
      0.01190252,
      -0.03174412,
      0.0034742497,
      0.0020745345,
      0.034415588,
      -0.031388987,
      -0.0028801248,
      0.0024836133,
      -0.0032612388,
      -0.000038929506,
      0.017321046,
      -0.0024239656,
      -0.0027870187,
      0.0003403957,
      -0.016684156,
      -0.008898862,
      -0.011642083,
      -0.025776643,
      0.009153182,
      -0.024477337,
      0.031297103,
      0.0056471517,
      0.0071270005,
      -0.009989765,
      -0.0060302136,
      -0.010515732,
      0.018065048,
      0.015233427,
      0.012558492,
      -0.010221279,
      0.013216251,
      -0.028059807,
      0.012345573,
      0.0034938094,
      -0.014166314,
      -0.012349257,
      0.0035247814,
      -0.014860369,
      -0.012703752,
      -0.0035197767,
      0.00030384253,
      0.015847875,
      0.00010411414,
      0.024061164,
      0.002898343,
      -0.0033346782,
      0.012668962,
      0.0034788153,
      -0.009799202,
      -0.020159788,
      0.013420213,
      -0.012585983,
      0.0063164462,
      0.011507147,
      -0.011132731,
      -0.025637025,
      -0.0048260763,
      -0.020631833,
      -0.02188516,
      -0.0027699752,
      0.019339114,
      0.02266895,
      0.009440425,
      -0.011826694,
      -0.006689849,
      0.008636076,
      0.0014391321,
      -0.008258404,
      -0.024259986,
      -0.005303511,
      0.007267936,
      -0.015360037,
      -0.0032492473,
      0.018200966,
      0.007751983,
      0.0039195074,
      -0.019405108,
      -0.0389529,
      0.0071647135,
      0.005152495,
      -0.012487737,
      -0.0029335364,
      -0.023068992,
      0.020370083,
      -0.02056652,
      0.00741537,
      0.00086434634,
      -0.017760556,
      -0.01154508,
      -0.0047383253,
      -0.0021143374,
      -0.014133854,
      -0.0010737939,
      -0.012899261,
      0.005408048,
      -0.0013455959,
      -0.013633941,
      0.0009792031,
      0.0057099955,
      0.01766609,
      0.02801461,
      0.014668008,
      0.0052798656,
      0.0027501357,
      -0.0026150222,
      -0.0047661182,
      -0.0012514844,
      0.009008597,
      0.008226355,
      0.014124212,
      0.021310646,
      -0.0076955105,
      -0.027147353,
      0.006402255,
      0.006446878,
      -0.005064716,
      -0.0015184424,
      0.015166529,
      0.009648146,
      0.027457874,
      0.014371751,
      -0.027890317,
      0.02248632,
      -0.034265593,
      0.0037951092,
      0.008002508,
      -0.010703221,
      -0.0071807443,
      -0.0015202964,
      0.01459516,
      -0.016793758,
      -0.026207052,
      0.033190195,
      -0.011967153,
      -0.0060437927,
      0.0003718432,
      -0.008533375,
      0.006190868,
      0.019141734,
      -0.021226984,
      -0.022001881,
      0.012056962,
      -0.0012078043,
      -0.005453316,
      0.00840916,
      -0.01458608,
      -0.0066321557,
      -0.009269701,
      -0.031752575,
      -0.0007687753,
      0.013572863,
      0.01676898,
      0.015939742,
      0.0055156285,
      -0.0009520726,
      0.011469533,
      0.0069444207,
      0.005262284,
      -0.015841665,
      -0.024367686,
      0.025345797,
      -0.02040867,
      0.0006845141,
      -0.0016351015,
      -0.011462219,
      0.0031079268,
      -0.0043238364,
      -0.015513084,
      0.024345238,
      -0.008582571,
      -0.038456973,
      0.0011941968,
      0.010368786,
      0.011589242,
      -0.12251268,
      0.008397891,
      -0.0053121895,
      -0.009045244,
      -0.0018586939,
      -0.023761282,
      0.016833436,
      -0.016926719,
      -0.024248209,
      -0.011682175,
      0.0068346844,
      -0.009020713,
      -0.0076984325,
      0.00990867,
      -0.015871221,
      -0.009017584,
      -0.018093612,
      0.034081694,
      0.04450358,
      0.0048782825,
      0.0008447231,
      -0.008535483,
      0.008267919,
      0.0010835448,
      -0.020787682,
      -0.010532845,
      0.023417158,
      0.006435782,
      -0.0126484325,
      0.001474285,
      -0.0061916695,
      -0.0077101826,
      -0.009156239,
      0.015917363,
      0.012891985,
      0.015706906,
      0.003988082,
      0.0040992405,
      0.023823604,
      0.0018702981,
      0.02000908,
      0.020408623,
      0.0023344096,
      0.0031925517,
      0.0020691305,
      0.02094628,
      0.005266463,
      -0.028319439,
      -0.013521543,
      0.020389695,
      -0.047112193,
      -0.039811116,
      -0.0003069146,
      -0.013217473,
      0.022700392,
      -0.003479056,
      0.02103543,
      0.0149414,
      -0.006675268,
      -0.01341191,
      0.0008397633,
      0.011292378,
      -0.0009952104,
      0.03005028,
      -0.0082056,
      0.017463647,
      0.011184747,
      -0.00031442617,
      0.00464222,
      0.0009947004,
      -0.0061897035,
      -0.012179648,
      0.012425165,
      0.016276974,
      -0.0014534008,
      0.009726598,
      -0.0016178201,
      0.0075733573,
      -0.0058718305,
      0.021411274,
      -0.020792043,
      0.023825143,
      -0.059290886,
      -0.0012772884,
      -0.0076943072,
      0.009418206,
      0.02030585,
      -0.006227039,
      -0.0060906904,
      0.021262165,
      -0.0007515617,
      0.0087205395,
      -0.017617272,
      -0.018477341,
      0.0029454676,
      -0.014537725,
      -0.01870635,
      0.011252934,
      0.0056885746,
      -0.03833089,
      -0.020020237,
      -0.0025724992,
      -0.020407066,
      -0.005854942,
      -0.009754801,
      -0.02010244,
      0.0013447053,
      0.024031302,
      -0.038909413,
      0.002381853,
      -0.016071998,
      -0.016543103,
      -0.0016669986,
      -0.14867173,
      -0.0039371084,
      0.012764385,
      0.003366709,
      -0.0003356885,
      0.0010042565,
      -0.000004592519,
      -0.0062971795,
      0.0076925843,
      -0.017821193,
      0.005057532,
      -0.02719931,
      -0.026262796,
      0.021184873,
      -0.005090264,
      0.12806937,
      0.0026184057,
      0.0059050424,
      -0.0015248127,
      0.01060742,
      -0.0039658295,
      0.006007423,
      -0.0053212643,
      0.008915603,
      0.010311637,
      -0.007933135,
      0.010972372,
      -0.020134829,
      0.015288458,
      0.004852082,
      0.0065225135,
      -0.015896218,
      -0.00051263033,
      0.034631636,
      -0.011116829,
      -0.015054423,
      -0.0006823676,
      -0.005899571,
      -0.02019468,
      0.009014785,
      -0.0042876475,
      0.009262323,
      -0.0121502625,
      0.0065988656,
      0.0072076484,
      0.020009091,
      0.0012402802,
      -0.025802521,
      0.0030041132,
      -0.018817157,
      0.0053729294,
      -0.062232334,
      0.005295087,
      -0.014184999,
      -0.01342765,
      0.03257286,
      0.029885363,
      0.014312822,
      -0.0043743863,
      -0.0070249634,
      0.012982395,
      0.0010665794,
      0.025428481,
      -0.014038908,
      -0.0016548889,
      0.008709376,
      0.0019219265,
      0.020311685,
      0.019218495,
      -0.023323568,
      -0.0017125147,
      0.00861507,
      -0.0096496735,
      0.0035256268,
      -0.01970286,
      -0.00047221108,
      0.002795076,
      0.033976108,
      -0.010567538,
      -0.021467023,
      -0.005559967,
      0.016006688,
      -0.005363336,
      -0.025824957,
      0.012458081,
      -0.00509144,
      -0.025598397,
      0.01693287,
      0.0037635,
      -0.014356795,
      0.016629966,
      0.0035248194,
      -0.0012586623,
      0.0187635,
      -0.004139386,
      0.015512601,
      -0.0017116821,
      0.025027469,
      0.024611527,
      -0.0028488513,
      0.0011467026,
      -0.007745106,
      -0.009773301,
      -0.016207142,
      0.015843317,
      0.0049101966,
      0.012692636,
      0.013617695,
      -0.010790994,
      -0.007667232
    ]
  },
  {
    "id": "genai_cohort_nodejs_17_node_express_1_vtt",
    "content": "Okay, so right now you can 2 see that we have a very simple 3 application that we built 4 in the last video and which 5 is working absolutely fine. 6 But guys, tell me one thing, 7 just tell me one thing. 8 Do you think that this code 9 right here, which is a very 10 small code, is easy to write? 11 Do you think? 12 Do you like this code? 13 Absolutely not, right? 14 This particular 15 code is absolute mess. 16 Now imagine that you are working in 17 a company where you have a very, 18 very, very big code and you have 19 database integration, you have 20 redis integration, you have rate 21 limiting, you have a lot of 22 features set up and, coding like 23 this and that to having five to six 24 developers in your team. 25 Just imagine the amount of mess that 26 you guys are going to create, right? 27 Because you cannot have switch 28 cases, switch cases, switch cases 29 and do all the things manually. 30 This is not at all a good 31 developer experience, right? 32 You need some framework. 33 You need something 34 that, you know, makes a, 35 consistency among developer. 36 You need something that takes away 37 this whole messy part and creates 38 your code in a more structured 39 and a more maintainable way. 40 So for that there is one 41 very popular framework that 42 is known as Express js. 43 You might have heard about it. 44 And right now Express 45 5 is also out there. 46 So this Express, which is like 47 a battle tested and it is 48 therefore in the market 49 for years and years and it will stay 50 in the market for years. 51 So this basically takes 52 this headache, okay? 53 So from the next video onwards, we 54 are not going to use this HTTP 55 module because, you know, using this 56 HTTP raw module gives you a good 57 capability to create a server. 58 But the code is absolute mess. 59 So we are going to use Express 60 which internally, which 61 internally uses this HTTP 62 package only to create servers. 63 So we are going to use this. 64 So let me just show you a hello 65 world example at what it looks. 66 So see how clean it is. 67 You just do Express. 68 You create an application of Express. 69 You say, hey, if there is a get 70 request and slash, send this 71 response listen on this port. 72 So this is how, this is how 73 declarative this Express jss, okay? 74 And not only that, when you 75 are coding a server, a lot 76 of things comes in, right? 77 You need header parsing, you know, 78 you need body parsing, you know 79 how to say, you should know how 80 to send responses, how can you 81 declutter your code, how can you 82 move your codes into separate 83 files? 84 So there are a lot of things 85 that are going to come. 86 So for that we are going 87 to use Express js. 88 And trust me, all the companies, 89 big companies, small companies, 90 everyone uses Express js a lot. 91 And even in future, 92 any other library comes they are 93 inspired from the Express. 94 So if you know Express, you 95 can easily adapt to other 96 frameworks and libraries as well. 97 So I'll meet you in the next 98 class where we are going to set 99 up an Express application. 100 Till then, bye bye and take care.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "17-node-express-1.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/17-node-express-1.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.010148942,
      -0.002754949,
      0.008432858,
      -0.05016544,
      -0.024424441,
      -0.0034008122,
      0.016592255,
      0.02590026,
      0.009964527,
      0.012152862,
      -0.015321844,
      -0.006201515,
      0.02900931,
      0.032361228,
      0.14299096,
      0.0016007407,
      0.0039489563,
      0.014640023,
      -0.001050379,
      -0.010490975,
      0.015547138,
      0.0037770183,
      0.00945664,
      0.013676805,
      0.013681629,
      0.0004872939,
      0.0076248264,
      -0.009117864,
      0.01641637,
      -0.035301156,
      0.009064549,
      -0.013065347,
      0.0071682893,
      0.012173152,
      0.001875469,
      0.02802478,
      0.030587215,
      -0.0018138863,
      -0.034486484,
      -0.0022296978,
      -0.024353884,
      -0.0038626571,
      0.011281785,
      -0.009091658,
      0.02062885,
      0.013279827,
      0.00576032,
      -0.007769306,
      0.028375302,
      0.028158361,
      -0.014455816,
      -0.008062598,
      -0.010147759,
      -0.17138614,
      -0.01756749,
      0.03340796,
      0.0018389415,
      0.002725558,
      0.0064830515,
      0.012083234,
      -0.03217649,
      0.007956886,
      -0.04064441,
      0.006004334,
      -0.012703099,
      -0.015893398,
      0.0075923754,
      -0.006405696,
      0.020087687,
      -0.003221869,
      0.0049294187,
      0.012864699,
      -0.015837492,
      -0.0071612676,
      -0.0033334238,
      -0.006784134,
      0.0010427546,
      0.002507903,
      -0.017561251,
      0.013231739,
      0.013795334,
      -0.0059099016,
      -0.00492176,
      -0.010546889,
      -0.021793786,
      -0.013692252,
      -0.041129462,
      -0.0117745055,
      -0.019431299,
      0.02317188,
      0.0030544496,
      0.021795621,
      0.00033576426,
      -0.00032452436,
      -0.011088992,
      -0.0036585329,
      0.00016792287,
      0.009405029,
      -0.00845554,
      -0.022000354,
      0.017747018,
      0.0028442335,
      -0.031203857,
      0.031603735,
      -0.005754305,
      0.025641846,
      -0.0070908563,
      -0.008776947,
      0.018578567,
      -0.010163875,
      -0.010123888,
      -0.015622912,
      -0.012853462,
      0.02325885,
      -0.0039189435,
      -0.18195699,
      0.023620967,
      0.00074603513,
      -0.019169021,
      0.0015856202,
      -0.010864225,
      0.0064103017,
      0.016222669,
      0.0064062835,
      -0.03578457,
      0.01958321,
      -0.00069585454,
      0.031202171,
      0.01585465,
      0.020392591,
      -0.020367393,
      -0.009281475,
      -0.00026635814,
      0.009273828,
      0.008493421,
      0.013571293,
      0.013962101,
      -0.03122056,
      -0.0063216034,
      -0.037532948,
      0.009353996,
      0.02790195,
      -0.008016308,
      0.03687277,
      0.0032696924,
      -0.009909955,
      -0.026270725,
      0.035770208,
      -0.02878047,
      -0.024502475,
      0.014188792,
      -0.011486837,
      0.03288042,
      -0.00028283085,
      0.018220054,
      -0.019869393,
      -0.02154205,
      -0.0024950216,
      0.014262208,
      0.0020472268,
      0.0075353975,
      0.003714628,
      0.0007088392,
      0.008482325,
      0.008606139,
      -0.0023989887,
      -0.02707032,
      0.0066550598,
      0.012203332,
      -0.0038808738,
      -0.008269535,
      -0.0035717532,
      -0.0025923834,
      0.01884912,
      -0.012750422,
      -0.011096013,
      -0.013558065,
      0.00023921211,
      -0.0018594838,
      -0.018512307,
      0.0134956,
      -0.012212153,
      0.008876425,
      -0.008158538,
      0.01215962,
      -0.008727373,
      -0.023619935,
      -0.0077035213,
      0.0015332452,
      -0.0065247566,
      -0.00058795576,
      -0.013582369,
      0.007558642,
      -0.0040600193,
      0.020598242,
      -0.012824451,
      0.0010007952,
      0.013185009,
      0.01508792,
      0.0016515555,
      0.022201037,
      -0.00725738,
      0.0006278393,
      -0.020387722,
      -0.0038606683,
      0.025532492,
      0.017742893,
      -0.023064468,
      0.003356501,
      0.02164417,
      -0.021067897,
      -0.026170691,
      -0.00029936348,
      -0.007998245,
      -0.0052976264,
      -0.019369483,
      0.030076819,
      -0.012322831,
      -0.0043119253,
      -0.009831464,
      0.0051326756,
      -0.0101250475,
      -0.0011172364,
      0.037338477,
      -0.0025674093,
      0.012380695,
      0.006140186,
      -0.011723973,
      -0.014402639,
      -0.0030448767,
      0.025200639,
      0.009786526,
      -0.0055121463,
      0.025737222,
      0.015991323,
      -0.00812344,
      0.014043181,
      0.006176605,
      0.018728096,
      0.005783423,
      -0.0013661912,
      -0.009314611,
      -0.011835466,
      -0.01037848,
      0.01748084,
      -0.0034377568,
      -0.028532488,
      0.0016840039,
      -0.0041602915,
      -0.026148578,
      -0.021733698,
      0.0074585862,
      -0.010004275,
      -0.0040804218,
      0.016938096,
      -0.021279234,
      -0.028303094,
      -0.0010437537,
      0.014607095,
      -0.022641642,
      -0.010223651,
      0.0043378645,
      -0.0031441655,
      0.00015170593,
      0.013147153,
      -0.0067778416,
      0.00076767243,
      0.02091717,
      -0.03222824,
      0.0057802303,
      0.0039454736,
      -0.005567464,
      -0.013273174,
      -0.0072261808,
      -0.009224832,
      0.014499053,
      -0.07772168,
      0.0018968957,
      -0.007190145,
      -0.03330021,
      -0.011344588,
      0.003283606,
      -0.017218433,
      0.018156134,
      0.015315629,
      0.0058827787,
      -0.0010714611,
      -0.020835336,
      0.0066794637,
      0.00047763574,
      -0.007968799,
      0.030059485,
      -0.016329775,
      -0.0046104877,
      0.025821272,
      -0.007117079,
      -0.003991409,
      -0.0067442576,
      -0.012874169,
      -0.019612243,
      0.006312575,
      -0.015501034,
      -0.029792534,
      0.022119619,
      0.03626853,
      0.0029662712,
      0.019939832,
      0.041211654,
      -0.030589592,
      -0.010819349,
      -0.0127144735,
      0.013375359,
      0.020319039,
      -0.02633746,
      0.019238995,
      -0.01715125,
      0.003023195,
      -0.02255275,
      0.012626132,
      0.026895983,
      -0.0044451943,
      -0.015642144,
      0.014252254,
      -0.0061977683,
      -0.027754804,
      -0.0007298083,
      -0.014164068,
      0.000047839596,
      0.027393848,
      -0.023012804,
      0.025488546,
      0.012848626,
      0.011934507,
      0.00010847626,
      0.026384484,
      0.02216397,
      -0.0035586054,
      0.0073705204,
      0.0048144655,
      -0.019606663,
      0.011120644,
      -0.0009989932,
      -0.001530567,
      -0.019195326,
      0.01734318,
      -0.02662299,
      0.009607235,
      -0.021224374,
      -0.011806709,
      -0.03142676,
      0.0020029345,
      0.0042810626,
      -0.0022087796,
      -0.0042454894,
      -0.027413493,
      0.005104979,
      0.0029386566,
      0.0025255918,
      0.0021043373,
      0.034158383,
      0.028208997,
      -0.0077788527,
      -0.0045242207,
      0.0074819815,
      0.0052190823,
      -0.014353657,
      0.01719063,
      0.02441317,
      -0.013644917,
      -0.0048749833,
      -0.018653136,
      0.014622657,
      -0.02147423,
      0.0041769873,
      0.00030431387,
      0.012899039,
      -0.033677146,
      0.002198485,
      0.008789488,
      0.0008938282,
      -0.0030111768,
      0.026277851,
      -0.004335859,
      -0.009332493,
      -0.0051649394,
      -0.012929282,
      0.00825605,
      0.012285769,
      -0.011102381,
      0.0028626435,
      -0.009711409,
      0.039962925,
      0.01866282,
      0.0073871883,
      -0.02027617,
      -0.007321951,
      -0.0031458784,
      -0.003346884,
      -0.0012579203,
      -0.0007581198,
      -0.0026781347,
      -0.0002609762,
      -0.02671511,
      0.0057939924,
      -0.014607021,
      -0.0075979894,
      -0.013726271,
      0.024283746,
      -0.015831016,
      -0.011596099,
      -0.0007166899,
      -0.006782469,
      0.0078063793,
      -0.0010502726,
      0.019160088,
      0.021066405,
      -0.015100441,
      0.0041282107,
      -0.013076108,
      -0.02659871,
      -0.0043648696,
      0.010041386,
      -0.02880693,
      0.0056876885,
      0.0019396399,
      -0.013085326,
      -0.004607982,
      0.009215805,
      -0.0055756704,
      0.005721756,
      -0.008294246,
      0.018958474,
      0.015219784,
      -0.0039652623,
      -0.02158814,
      -0.015597105,
      -0.012275939,
      0.004584754,
      -0.0123914955,
      -0.02247873,
      0.019274233,
      0.02279767,
      -0.0059446977,
      -0.00047246346,
      -0.0047778264,
      0.003744985,
      -0.017836127,
      -0.018650228,
      -0.029458955,
      -0.0035585198,
      0.009175484,
      -0.0010506671,
      0.015272792,
      -0.009647434,
      0.043628264,
      -0.01237723,
      -0.013067921,
      0.02041867,
      -0.010357266,
      0.013954064,
      0.0048795347,
      -0.008004834,
      0.0143480785,
      -0.004478258,
      -0.020066326,
      0.0024609447,
      -0.0050238394,
      -0.019177515,
      -0.023546077,
      0.000047309117,
      0.027225096,
      0.023568662,
      0.034193307,
      -0.0013818307,
      0.012902997,
      0.0012257666,
      -0.009044997,
      -0.016652789,
      -0.0027904788,
      -0.014784579,
      0.021210872,
      0.0077565485,
      0.014537274,
      -0.01273652,
      -0.00061043096,
      -0.0008765041,
      0.001676743,
      0.009101642,
      -0.0061424547,
      0.008016332,
      0.038380094,
      0.017990854,
      0.006953096,
      0.0068937684,
      -0.030645277,
      0.0056073507,
      0.017412258,
      -0.013412167,
      -0.012944368,
      -0.016211217,
      0.012279679,
      -0.016433038,
      -0.013119002,
      0.021443905,
      0.0052755484,
      -0.013286186,
      0.0003207622,
      0.0054455283,
      0.013281563,
      0.0012540179,
      -0.010655057,
      -0.025890244,
      0.002262073,
      0.00033605393,
      -0.0047785924,
      0.014825544,
      -0.012070042,
      -0.010889841,
      -0.014387305,
      -0.01214041,
      0.0045492263,
      -0.014813124,
      0.02719941,
      0.007342097,
      -0.010696005,
      0.0028525814,
      0.022089913,
      0.015950887,
      0.02051464,
      -0.0087617105,
      -0.024263576,
      0.0095710205,
      0.007938144,
      0.014526033,
      -0.005686184,
      -0.019137613,
      -0.0048010647,
      -0.0052495063,
      -0.015786802,
      0.006674661,
      -0.0015389518,
      -0.020523006,
      0.0012187135,
      -0.005800018,
      0.021693029,
      -0.12892048,
      -0.00847324,
      -0.007307998,
      -0.02139738,
      -0.00007725399,
      0.0021436599,
      0.015396213,
      -0.027934916,
      -0.019240547,
      -0.004645701,
      0.0093911085,
      -0.004682491,
      0.003421171,
      0.0111543555,
      -0.0038565684,
      -0.010820394,
      -0.0027197713,
      0.026874851,
      0.030307012,
      -0.017432543,
      0.02199354,
      0.0025875852,
      -0.005475803,
      -0.0013118489,
      -0.008869705,
      0.01671823,
      0.030533627,
      -0.009788988,
      0.0029476343,
      -0.013970614,
      -0.02710963,
      -0.015003865,
      0.011436872,
      0.0069621475,
      0.012230177,
      0.003909934,
      -0.0047940947,
      0.024695124,
      0.018744621,
      0.006733817,
      0.0057602525,
      0.009629365,
      0.018769853,
      0.003389411,
      0.0005687647,
      0.00095559744,
      0.0169085,
      -0.010938788,
      -0.00073817896,
      0.04797922,
      -0.053018894,
      -0.01982186,
      0.003522586,
      -0.013226027,
      0.023436354,
      0.0028099471,
      0.00019652623,
      0.003944416,
      0.009475939,
      -0.0008858809,
      -0.014618505,
      0.0094387885,
      -0.011328666,
      0.04261021,
      -0.023739552,
      -0.0144020915,
      0.019079158,
      -0.00008802334,
      -0.01123539,
      0.010596226,
      -0.0047955834,
      0.003127938,
      -0.00801252,
      0.016184065,
      -0.002303527,
      0.0038543323,
      -0.0031818403,
      -0.0011634048,
      -0.011158722,
      0.006139464,
      -0.026425228,
      0.0099615455,
      -0.06673978,
      0.0027046504,
      -0.011855492,
      0.008920714,
      0.010734175,
      0.0052852184,
      -0.0077558584,
      0.024668647,
      0.001137431,
      -0.0005883797,
      -0.005518364,
      -0.015364131,
      -0.013503276,
      0.0021460075,
      -0.033647772,
      0.0137225725,
      0.008831059,
      -0.021521972,
      -0.021406647,
      0.0058548795,
      0.0053672614,
      -0.0013949388,
      -0.0057325875,
      -0.0055163098,
      0.0022789014,
      0.0030047582,
      -0.02379674,
      0.01195445,
      -0.018124653,
      0.01059931,
      -0.0072247866,
      -0.12886785,
      -0.029609006,
      0.009830926,
      0.005682356,
      0.015317714,
      0.013357329,
      0.00026743725,
      -0.018628085,
      0.0064585535,
      -0.02306217,
      0.006905186,
      -0.03198596,
      -0.010851498,
      0.0036073618,
      -0.004864804,
      0.14624447,
      0.0028318139,
      -0.008527458,
      -0.012035714,
      0.0044014156,
      -0.015076951,
      -0.00905223,
      0.005265557,
      0.0049936273,
      0.006571178,
      -0.017183203,
      0.029967677,
      -0.029047642,
      0.02211663,
      0.012175669,
      0.008098869,
      -0.016541101,
      -0.0032379818,
      0.025379872,
      0.005662396,
      -0.014097563,
      0.0067483736,
      -0.029755348,
      -0.01901291,
      -0.0089141,
      0.0020770065,
      0.014857329,
      -0.0073228134,
      0.010420403,
      -0.0057510636,
      0.00987078,
      -0.00068149227,
      0.0036087905,
      -0.017374264,
      -0.021474432,
      0.002544826,
      -0.059813317,
      0.010151555,
      -0.0020810226,
      -0.028352527,
      0.03657302,
      0.00814297,
      0.02544596,
      -0.016766656,
      0.009078615,
      0.0035237914,
      0.010025923,
      0.020083053,
      0.005240216,
      0.0015103938,
      0.0048742285,
      0.013708965,
      0.02870405,
      0.008891122,
      -0.0100948205,
      -0.012243229,
      0.01569244,
      0.009420611,
      -0.022421027,
      -0.029201875,
      -0.024982637,
      -0.0049117994,
      0.015953643,
      0.00517805,
      -0.015130489,
      0.0015784795,
      0.0134366,
      -0.010291397,
      -0.017558439,
      0.015759114,
      -0.000008730326,
      -0.014631185,
      0.018238556,
      -0.0129401265,
      -0.017910188,
      0.006363043,
      0.008365529,
      -0.0053545022,
      0.03695517,
      -0.011103062,
      0.021865541,
      0.011281675,
      0.0165514,
      0.0134877,
      0.0021869338,
      0.0011347631,
      -0.0105963815,
      0.0035657005,
      -0.017312096,
      0.022924064,
      0.026973473,
      0.013873867,
      0.006313353,
      -0.00810638,
      -0.012246888
    ]
  },
  {
    "id": "genai_cohort_nodejs_18_node_express_2_vtt",
    "content": "Okay, so in this particular 2 video, let's get our hands 3 dirty with Express js. 4 Okay? 5 So what I'm going to do is I'm going 6 to CD into my coding folder 7 and into the node js folder. 8 And here I'm going to create a new 9 directory that is 01 express, right? 10 So we are going to 11 start with Express. 12 Let's go into this 01 Express folder 13 and I'll just do a code dot 14 and now, because you're becoming 15 a backend developer, these terminal 16 commands you should know, okay? 17 Because usually we do remote 18 configurations on a server. 19 So. 20 So it's very important to 21 understand these commands as well. 22 So don't worry, these are not 23 very difficult as you work 24 on them, you will understand them. 25 So guys, this is my empty folder. 26 You can see that. 27 So first things first, you have 28 to do npm init, you can do hyphen y. 29 So let's just do npm in it. 30 Okay? 31 So you have a package name. 32 Let's call it as Express Application. 33 So Express app, version one, 34 description, entry point, 35 test, command, git, 36 repository, all that stuff. 37 Cool. 38 Now we have to install Express, 39 okay, And the types. 40 So first npm install 41 at the rate types/ node so that I 42 get the typings number one. 43 Second is you have 44 to install express. 45 So npm I express. 46 So what this does, okay, this will 47 basically download the Express 48 module, the Express package for you. 49 Now if you go into Your package or 50 JSON, boom, you are using Express 51 4.2111 and you are using at the rate 52 type node that is in this version. 53 So now you are using two 54 dependencies and you can 55 see all the code is here. 56 Now piyush, we just 57 installed two libraries. 58 How come these many 59 libraries are coming? 60 Like accepts is coming, array, 61 flatten, body, parser, and a lot 62 of things are coming. 63 That's because if you go into our 64 package JSON and you search 65 for express here, the Express, 66 the, the module express actually 67 depends on a lot of things, right? 68 Can you see that? 69 The Express module itself depends 70 on all these things internally. 71 So all these code is also pulled. 72 So you can see accepts is 73 there, arrow flatten is there. 74 So this all is coming 75 from the Express library. 76 So now you have your Express ready. 77 Now you have your types 78 are there node ready. 79 So let me just create 80 an index js file where we are 81 going to code, right? 82 So what I have to do is first 83 of all let's import, 84 let's require the express, okay, 85 let's require the Express. 86 So you can see Express is here. 87 Now what I have to do is I have 88 to create an application. 89 Okay, so this is coming all 90 from the documentation. 91 So const app is equals to express. 92 So let's create an app. 93 So app is equals to express. 94 So this basically creates 95 an application for me. 96 So this app and using this app I can 97 structure my server. 98 Okay, so for example, let's say 99 I want to create a get route. 100 So I can just say app.uh get. 101 Now see guys, do you see that 102 I'm not getting the typings 103 for this express package. 104 I am not getting any 105 kind of suggestion. 106 So that means you have to install at 107 the rate types for the express now. 108 Okay, so you have 109 to install the types for this. 110 So this will help the VS code to see 111 that what are the typings available? 112 So yeah, you it's installed now 113 you can see app get is there. 114 So you can see all 115 the modules are now here. 116 Okay, so let's say that I want that. 117 Hey, if there is a get request 118 on what path? 119 On slash. 120 That means the homepage. 121 Then you can have 122 a function here, right? 123 That is a request, a response. 124 And then you can just 125 say response dot end. 126 Okay, response dot end saying that 127 you know you are at a homepage. 128 So you can just say home page. 129 Then if there is a get request 130 on slash contact us. 131 Then what you can do is you can 132 just write a function that is 133 request and response and you can 134 just say response dot end. 135 Okay, response dot end Saying 136 you can contact contact me 137 at my email address. 138 Okay, so this part is also good. 139 Then you can just say 140 app dot let's say post. 141 Okay, app dot post. 142 You want to make 143 a post out, go ahead. 144 Slash tweets. 145 Okay, so what you can do, you can 146 just say hey, here is a function. 147 You can even give an arrow function. 148 That is what we are going 149 to use majorly. 150 So request response and you 151 can just say response.uh 152 end and you can say tweet created. 153 Okay, tweet created. 154 Success. 155 Now you want to set 156 a status code, right? 157 By default Express is always going 158 to send a 200 but you 159 can change that functionality 160 by doing dot status and you 161 can pass a status code of 201. 162 So now this particular line 163 is going to send a 201. 164 By default it is 200 status quo. 165 But now it is going 166 to send two zero one. 167 And finally let's just do an app 168 dot listen on some port. 169 Let's say I want to listen 170 on port 8000 and A. 171 Callback function saying console.log 172 that your server is 173 running on port 8000, right? 174 So yeah, that, that's amazing, right? 175 So with this Express, can you see 176 that how clean the application is, 177 how I, I can define the routes. 178 So I can say, hey, 179 post route for this. 180 Similarly you can just say I, 181 have dot get so slash tweets so 182 I can just make a slash tweets. 183 And then there is this particular 184 stuff and you have 185 request, you have response. 186 So you can just copy. 187 I'll just copy this line 188 and I can say that here are your 189 tweets, here are your tweets. 190 So how well I am able 191 to structure my code, right? 192 Everything is modular. 193 So if even I hire more developers, 194 they can go on adding their routes. 195 So this, this is one block, 196 this is one block, this is 197 one block, this is one block. 198 So this framework is providing 199 you a structure on how you can 200 structure your code, right? 201 So let me just configure 202 a start script. 203 So here we can configure a start 204 script and this start script 205 is going to be node hyphen, 206 hyphen Var and I can just say 207 index js so npm Start enter. 208 Your server is running. 209 Let's give it a try. 210 So you have the Thunder client here. 211 So if I make a post request, 212 I'm getting a 404 because there 213 is no post request, right? 214 There is no post request 215 for contact us. 216 It's actually a get request. 217 So yeah, it's working good. 218 Similarly, if I go here and I do 219 a send homepage is also working. 220 If I do let's say slash tweets, 221 slash tweets and send. 222 You can see here I have tweets, 223 so everything is working fine. 224 But the only difference is that this 225 particular piece of code is now well 226 structured and managed by Express. 227 Okay? 228 So you can do all this stuff like 229 request headers, request single 230 header, request raw headers. 231 So it internally does a lot 232 of things and gives you 233 all these things, right? 234 Request cookies. 235 Is there request accepts, 236 is there accepted is here. 237 So you can see that you have a lot 238 of things on the request also. 239 Similarly, you can just say 240 response.end to send a simple 241 response response JSON to send 242 a JSON response response.x response 243 What else you have 244 response.render is there. 245 Then if you want to do a server side 246 rendering, so don't worry, we 247 will talk about these all things. 248 But Express not only gives you 249 a structure, but also gives you 250 a lot of capabilities, plugins 251 and you know, a lot of batteries. 252 So cool stuff. 253 Right? 254 So now I think you are able 255 to understand this code. 256 So just try to understand this code. 257 Are you able to understand 258 what we are doing? 259 So we are requiring the express, 260 creating an express. 261 So they have extracted this 262 port as a 3,000 as a variable. 263 So they're trying to listen 264 on this port and console log example 265 app is listening on this port. 266 And you have a get route that 267 is the slash root and response 268 send just in hello world. 269 So amazing. 270 Now if you see, if you see 271 in the guideline, you have a lot 272 of features, right? 273 You have routing middleware, 274 you have overriding express APIs, 275 templating, engine error handling, 276 debugging express behind proxies. 277 So all these things we are going 278 to cover in the upcoming videos.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "18-node-express-2.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/18-node-express-2.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.003805711,
      0.010577617,
      0.02135577,
      -0.053967636,
      -0.01871695,
      0.008136396,
      0.022146551,
      0.014906469,
      0.0068539917,
      0.0091168,
      -0.024892244,
      -0.0045860414,
      0.019753333,
      0.026991814,
      0.14819571,
      0.004173618,
      0.014184451,
      0.009933415,
      0.008340558,
      -0.037373114,
      0.003969608,
      0.00256528,
      0.0027441685,
      0.0127677815,
      -0.0061294492,
      -0.0027766095,
      0.0037365125,
      -0.015074877,
      0.019435538,
      -0.026330953,
      -0.00433499,
      -0.014176148,
      0.00823837,
      0.010594951,
      0.004503126,
      0.021291211,
      0.020226343,
      -0.002632307,
      -0.024951315,
      -0.005328824,
      -0.012287469,
      -0.0051975423,
      -0.0030977274,
      -0.010625149,
      0.016109806,
      0.0033125898,
      0.0020002956,
      -0.011423392,
      -0.00028435476,
      0.019546231,
      -0.021966925,
      -0.0128593845,
      -0.01629879,
      -0.17977051,
      -0.026154654,
      0.009504667,
      0.009126917,
      0.009953333,
      0.01370985,
      0.016563574,
      -0.020376833,
      0.00012325174,
      -0.04680434,
      0.008969485,
      -0.02267511,
      -0.0006316975,
      0.01037279,
      -0.007338658,
      0.03311484,
      -0.0012624813,
      0.0071903206,
      0.019173924,
      -0.008551052,
      -0.01487082,
      -0.027785955,
      0.002306343,
      0.019179055,
      0.0020167786,
      -0.0036300581,
      0.017582335,
      0.016039932,
      -0.0082185455,
      -0.022930553,
      -0.0088386685,
      -0.018417453,
      -0.0069783004,
      -0.034111116,
      -0.0060764956,
      -0.014576837,
      0.015021408,
      -0.0021543438,
      0.020831902,
      -0.008385475,
      0.007936964,
      -0.007962914,
      0.0057538077,
      0.007042429,
      0.010511601,
      -0.013048518,
      -0.01673616,
      0.025215084,
      0.0058842083,
      -0.029852906,
      0.013338197,
      0.003986437,
      0.04024508,
      -0.0010729104,
      0.0026663868,
      0.0010313003,
      -0.020931482,
      -0.005735847,
      -0.018997923,
      -0.000083353894,
      0.014150584,
      0.003696548,
      -0.17733797,
      0.026726695,
      -0.017123591,
      -0.0021183917,
      -0.0039809532,
      -0.021319652,
      0.0029972326,
      0.009458104,
      -0.0000027803214,
      -0.006545524,
      0.010671368,
      -0.0068509467,
      0.041798,
      0.01371252,
      0.01858698,
      -0.011319222,
      -0.015570565,
      0.011621685,
      0.022688147,
      0.01890947,
      0.010904736,
      0.008191156,
      0.001388563,
      -0.00547978,
      -0.030661196,
      0.0141839795,
      0.028040221,
      0.0131216915,
      0.031702306,
      0.009825607,
      -0.0015824094,
      -0.0142150195,
      0.02813155,
      -0.01853081,
      -0.02238117,
      0.015988298,
      -0.022042653,
      0.008246788,
      0.004804519,
      0.020785728,
      -0.019560644,
      -0.004557272,
      0.00248106,
      0.012778839,
      -0.0029785107,
      -0.004377792,
      0.013570268,
      0.0018755319,
      0.025353404,
      0.016054833,
      -0.009339309,
      -0.027414765,
      0.00067943474,
      0.010914923,
      0.0017429206,
      -0.011343751,
      0.0005608529,
      0.014471844,
      0.008958174,
      -0.020832257,
      -0.0170729,
      -0.008759694,
      0.004386162,
      -0.00004399612,
      -0.01643251,
      -0.00006152399,
      -0.012354104,
      0.006591314,
      0.0059583904,
      0.021404283,
      0.0054233433,
      -0.027954783,
      0.0033502458,
      0.00041115665,
      -0.014925409,
      0.009999578,
      -0.008472899,
      0.00902698,
      -0.0017367995,
      0.03058975,
      -0.013927647,
      -0.0042697918,
      0.004351512,
      0.016997226,
      0.010462126,
      0.018631132,
      -0.00493284,
      -0.0023502214,
      -0.021085909,
      0.010725072,
      0.019878836,
      0.006455648,
      -0.02992304,
      0.004848622,
      0.010513491,
      -0.032684103,
      -0.015013745,
      -0.00063367217,
      -0.0074590617,
      0.0080493335,
      -0.00921722,
      0.025712524,
      0.002793606,
      -0.0000727626,
      -0.014985387,
      0.009323616,
      -0.01266853,
      0.015107826,
      0.047503255,
      0.0050734794,
      0.005698457,
      0.010395411,
      -0.0051525133,
      -0.012993624,
      0.0037982312,
      0.017226713,
      -0.00074416556,
      0.004370454,
      0.011602121,
      0.033562414,
      -0.004297055,
      0.008029634,
      0.00090335304,
      0.005556287,
      -0.0027022352,
      0.0033909762,
      -0.014832406,
      -0.012286391,
      0.0044452427,
      0.031984054,
      0.013530472,
      -0.040446013,
      0.0020342448,
      -0.00901813,
      -0.021244004,
      -0.027105942,
      -0.004448226,
      -0.018457882,
      -0.0016803559,
      -0.004218899,
      -0.014794514,
      -0.016949875,
      -0.0043591466,
      0.014586374,
      -0.022930047,
      -0.008520279,
      -0.012943178,
      -0.006006379,
      -0.0040637925,
      0.00713456,
      -0.0076546003,
      0.004716838,
      0.022351746,
      -0.02347327,
      0.013656877,
      0.01007818,
      0.009336834,
      -0.0058630877,
      -0.013817565,
      -0.013201716,
      0.010011844,
      -0.08737584,
      -0.0057982598,
      0.008410596,
      -0.030377047,
      -0.01922583,
      0.020792024,
      -0.0058688703,
      0.018402627,
      0.020840183,
      0.005975587,
      -0.008380561,
      -0.01325151,
      0.022621626,
      -0.008215606,
      -0.0015824313,
      0.024969447,
      -0.013457919,
      -0.005525162,
      0.013689111,
      -0.025191497,
      -0.009053193,
      -0.0008440937,
      -0.0076684835,
      -0.01337219,
      0.02456437,
      -0.005240172,
      -0.034623746,
      0.022067435,
      0.028213488,
      -0.011214833,
      0.0073033394,
      0.030599352,
      -0.0033028657,
      -0.00853117,
      -0.012386188,
      0.007841257,
      0.03632616,
      -0.011695912,
      0.014194319,
      -0.022504374,
      0.0104869455,
      -0.0019972632,
      0.012724493,
      0.013527981,
      -0.007944744,
      -0.00007948872,
      0.008758695,
      -0.014881197,
      -0.023702854,
      0.008336169,
      -0.007977865,
      0.0003969055,
      0.019643083,
      -0.0371416,
      0.020079736,
      -0.006222529,
      0.019247167,
      0.00204401,
      0.0317342,
      0.008306615,
      -0.01870112,
      -0.012449972,
      0.011220615,
      -0.015440735,
      0.0104348175,
      0.003685306,
      -0.0083078705,
      -0.008107685,
      0.0030273236,
      -0.03165566,
      0.007242509,
      -0.021522252,
      -0.021524496,
      -0.032963365,
      -0.009165419,
      -0.006432733,
      0.01395224,
      0.0047881138,
      -0.030731525,
      0.0023428947,
      0.0056048986,
      0.010464146,
      0.022781111,
      0.027385237,
      0.006189966,
      0.0018394965,
      -0.0013465058,
      0.0023528542,
      0.0018094956,
      -0.0014215681,
      0.011026786,
      0.03953152,
      -0.01932437,
      -0.015650291,
      -0.012054308,
      0.015603187,
      -0.011042437,
      0.0003589859,
      -0.01723698,
      0.022025548,
      -0.042762946,
      0.005237653,
      0.010490725,
      0.0049558054,
      0.00442881,
      0.027646104,
      0.008196907,
      0.002787656,
      0.004450714,
      -0.015450374,
      0.0042086914,
      0.008796192,
      -0.0046922592,
      0.0028149197,
      -0.014198417,
      0.023240682,
      0.014490816,
      0.019800236,
      -0.013977668,
      -0.015600367,
      -0.011729409,
      -0.004560654,
      -0.0005628204,
      0.007297875,
      -0.004069627,
      0.006641586,
      -0.012165685,
      0.005915257,
      -0.010408133,
      -0.009423196,
      -0.004077992,
      0.006031894,
      -0.022022858,
      -0.02022259,
      -0.01505289,
      -0.011454737,
      0.010289317,
      0.010475877,
      0.010366549,
      0.020637708,
      -0.018242639,
      -0.00028617406,
      -0.004642095,
      -0.016752232,
      -0.015866114,
      0.010105488,
      -0.030033361,
      0.00693005,
      0.008513311,
      -0.002632237,
      -0.009172031,
      -0.005051545,
      -0.014897464,
      -0.010932327,
      0.009238598,
      0.0099976305,
      0.015619575,
      0.010059887,
      -0.024512924,
      -0.01810015,
      -0.016106747,
      0.024990864,
      -0.008189637,
      -0.017840365,
      0.0047283764,
      0.030401109,
      -0.009364254,
      -0.0055290964,
      -0.009518007,
      0.006329639,
      -0.007057022,
      -0.009814531,
      -0.014790644,
      0.00028927805,
      0.010698857,
      -0.0041351314,
      0.021591105,
      -0.0009993331,
      0.031067677,
      0.005456151,
      -0.007559485,
      0.0041888882,
      -0.011525861,
      0.008110437,
      0.00008654755,
      -0.011268473,
      0.009326864,
      -0.007833138,
      -0.012991966,
      0.006887159,
      0.008458939,
      -0.01363091,
      -0.018829368,
      0.0040106187,
      0.01839096,
      0.022308765,
      0.026539652,
      -0.00016752371,
      0.009284114,
      -0.0054652547,
      0.0011332252,
      -0.0139144715,
      0.005549409,
      -0.011897677,
      0.029296987,
      0.01095343,
      -0.00479873,
      0.007162199,
      -0.00393807,
      0.0063245073,
      0.003545152,
      0.0044829487,
      0.006903091,
      -0.000017338216,
      0.028026054,
      0.0033852768,
      -0.011453081,
      0.032021333,
      -0.030825231,
      0.00079437305,
      0.016432256,
      -0.007555972,
      -0.014572718,
      -0.014645089,
      0.0026044825,
      -0.02047356,
      -0.0129315825,
      0.009574482,
      0.004610688,
      -0.017455112,
      0.00428993,
      -0.017284606,
      0.023470642,
      0.011069667,
      -0.006739666,
      -0.01466729,
      0.009653682,
      -0.020257093,
      0.0053502275,
      0.0062089413,
      -0.005016124,
      -0.027928563,
      -0.00522446,
      -0.003911018,
      0.011210807,
      -0.015771057,
      0.019314174,
      0.013439472,
      -0.0042465143,
      0.009836363,
      0.020270169,
      0.017142886,
      0.021049904,
      -0.013702802,
      -0.026231553,
      0.02363935,
      0.0040120967,
      0.016279485,
      -0.008410488,
      -0.0073058223,
      0.0068186177,
      -0.00013770977,
      -0.012121154,
      0.011111798,
      0.0030088366,
      -0.024559423,
      -0.0056964266,
      0.0048164246,
      0.011358682,
      -0.115448035,
      -0.0061502685,
      -0.006363858,
      -0.010095261,
      0.0035752754,
      -0.014906852,
      0.016050346,
      -0.021483801,
      -0.01856151,
      -0.017812394,
      0.0046029505,
      0.0043043396,
      -0.001941745,
      0.021676619,
      -0.0018412814,
      -0.0049114395,
      -0.0018658615,
      0.033756636,
      0.039870597,
      -0.003172919,
      -0.008346815,
      0.008355721,
      0.0071355617,
      -0.00501715,
      -0.016945584,
      0.012806566,
      0.024901427,
      -0.009026951,
      -0.0059601017,
      0.0071213865,
      -0.017421775,
      -0.016759507,
      -0.001968517,
      0.0017889637,
      0.021560173,
      0.009259803,
      -0.012781316,
      0.0156935,
      0.010081965,
      -0.006212682,
      0.008797324,
      0.0268476,
      0.019435383,
      0.012106181,
      0.0019356118,
      0.022150066,
      0.020236323,
      -0.01066634,
      0.0034796987,
      0.051724166,
      -0.04504366,
      -0.032239467,
      -0.00547999,
      -0.020162413,
      0.022096384,
      0.013418372,
      0.013872473,
      0.021198012,
      -0.0021147057,
      -0.010321897,
      -0.00767243,
      0.012743317,
      -0.003461949,
      0.04250988,
      -0.008544555,
      -0.00024213226,
      0.017464096,
      -0.007731216,
      -0.0033443708,
      -0.002033561,
      0.015663782,
      -0.013744138,
      0.008753805,
      0.0116405925,
      0.008336855,
      0.016516326,
      0.00068101264,
      0.008009947,
      0.00085499824,
      0.006314262,
      -0.032768343,
      0.0020628145,
      -0.050404295,
      -0.0059422934,
      -0.015525321,
      0.014006996,
      0.011462234,
      0.0039701657,
      -0.019552963,
      0.023728946,
      -0.008790697,
      0.0055241534,
      -0.015713736,
      -0.013875628,
      0.0027976772,
      -0.003127964,
      -0.035079572,
      0.0074116057,
      0.0033697837,
      -0.033923484,
      -0.008200224,
      -0.0011601278,
      -0.0019318302,
      -0.0065293456,
      -0.001985084,
      -0.016605832,
      0.004118076,
      0.02883802,
      -0.022894371,
      0.011156744,
      -0.021343602,
      -0.0089587495,
      0.0033673486,
      -0.13936196,
      -0.02137535,
      0.0102682235,
      0.0034987112,
      0.0028812976,
      0.00015010108,
      -0.010098274,
      -0.0086852545,
      0.0028882201,
      -0.029536506,
      -0.00069497584,
      -0.04755641,
      -0.028254906,
      -0.00045541205,
      -0.0030539192,
      0.13401711,
      0.006269931,
      0.0035307773,
      0.005902132,
      0.016377669,
      -0.02087869,
      0.0046059294,
      0.00614236,
      -0.007556834,
      -0.003042438,
      -0.013785623,
      0.014325566,
      -0.031915735,
      0.018513365,
      0.001704447,
      0.006290598,
      -0.012403257,
      -0.013862989,
      0.035368666,
      0.001758393,
      -0.014450603,
      -0.0031341694,
      -0.0338156,
      -0.010438011,
      -0.006040472,
      0.0062046847,
      0.006828434,
      -0.021788998,
      0.014406887,
      0.0025995017,
      0.0055427337,
      0.0040488546,
      0.002441132,
      -0.0037626117,
      -0.023896834,
      0.012457085,
      -0.054734908,
      0.00040286785,
      -0.01570101,
      -0.025036138,
      0.037063897,
      0.01525127,
      0.013847848,
      -0.0019513688,
      -0.0003998933,
      0.004690628,
      0.0009983788,
      0.028991027,
      -0.0023562675,
      0.0014694087,
      -0.008052866,
      0.021338038,
      0.029911784,
      0.022764932,
      -0.018024072,
      -0.003465791,
      0.005680714,
      -0.0075831665,
      -0.0014003281,
      -0.023274794,
      -0.022062095,
      0.009540955,
      0.017618673,
      -0.00005830435,
      -0.016640019,
      -0.008060665,
      0.008577115,
      -0.008296689,
      -0.022750283,
      0.01887695,
      -0.01764742,
      -0.021606242,
      0.01773597,
      -0.007264759,
      -0.012640515,
      -0.0018438342,
      -0.013748637,
      -0.012967847,
      0.026311597,
      -0.016677752,
      0.010807454,
      0.008680969,
      0.010075524,
      0.031009037,
      -0.007774491,
      -0.0047124624,
      -0.009210428,
      -0.00056933693,
      -0.016244384,
      0.011974292,
      0.028016418,
      0.012134438,
      0.016862448,
      -0.011770268,
      -0.011287716
    ]
  },
  {
    "id": "genai_cohort_nodejs_19_node_express_sem_ver_1_vtt",
    "content": "Okay, so great work guys. 2 That we know now know Express. 3 We have covered a lot 4 of things in Node js. 5 We know how to install 6 external dependencies. 7 We know how to use 8 external dependencies. 9 We know that how we can use 10 a so called npm, so called node js. 11 We know how to use HTTP module 12 and how to build servers. 13 Now I would like to take 14 a moment and explain you 15 something very interesting going 16 on in this file, okay? 17 In this particular file 18 that is our package or JSON file. 19 Do you see that we have this version 20 thing here that is like 1.0.0. 21 And do you see this dependencies 22 here that we have three 23 dependencies right now, 1, 2 and 3. 24 And there is this weird 25 looking numbers. 26 These, these numbers are here right 27 in this particular video. 28 Let's understand 29 what these numbers mean. 30 Like what is this symbol 31 here, why it is five, why 32 it is three digits only. 33 So let's understand that 34 how versioning happens 35 in case of node js. 36 Okay, so node js, or I should say npm 37 follows something known as semantic 38 versioning or also known as Sembur. 39 Okay, Semantic versioning. 40 So there are some rules of 41 semantic versioning that how you 42 give these versions, like why my 43 version is 1.0.0, why this 44 express is versioned as 4.2, 45 1.1, what does this 4 mean, what 46 does this T2.1 mean and what 47 this one means? 48 That is what we have to understand. 49 Okay? 50 Now semantic versioning 51 has three parts, okay? 52 So let's say you have some number 53 here, then you have a point. 54 Okay? 55 So just once again, I don't 56 want you to add a point. 57 Then there is some point. 58 Then let's say you again have some X, 59 then you have some point 60 and then you again have a number. 61 So semantic versioning is 62 built using three numbers. 63 First number, second, second number, 64 third number, also known as bits. 65 Okay, so these are 66 also known as bits. 67 The first bit always and always 68 tells you that this is the, 69 this is the major version. 70 Okay? 71 So this refers to as 72 the major version. 73 So this is your major version, okay? 74 And second one is known 75 as the minor version. 76 So this second bit is 77 represented minor. 78 And this is known as 79 the patch version. 80 So these are the three things that 81 these bits are representing. 82 So if I copy this line that is 83 your express js this particular 84 thing as of now, just forget 85 this, this carrot symbol. 86 So this says that, hey, 87 for in case of express 88 at the recording of this video, 89 the major version is four, right? 90 The minor version that we have is 21. 91 And the patch version right 92 now that we have is function. 93 So this is what this particular 94 thing interprets you. 95 Okay, so this part is understood that 96 how this versioning is done 97 and not only node, even languages, 98 like Rust, okay, so they have cargo. 99 They also use some word. 100 So this is a very common thing 101 to follow in case of versioning. 102 Now let me explain you that 103 how these bits are actually. 104 What, what is the meaning 105 of these bits? 106 Like what is this patch? 107 What is this miner? 108 What is this major. 109 Okay guys, let's say you are 110 building an application. 111 You are building some tool, okay? 112 Some tool for developers. 113 Now what you have done is this 114 tool you have built and you have 115 published it to the developers. 116 And today around 100k devs 117 are using your product. 118 Are using your product. 119 Right? 120 Right. 121 Do you think that if you make 122 some change in your code, 123 these hundred devs which are like 124 working with your code, 125 they can have some crashes? 126 It might be right. 127 Let's say I have, I have written 128 this express application, right? 129 And today express application 130 says, hey, what you have to do is 131 you have to say app, dot get 132 and like this and like this. 133 So this will work. 134 What if tomorrow some update comes 135 and this get function is removed? 136 The get function is removed 137 from the application. 138 So what will happen? 139 My application will crash if I try 140 to update my application, There 141 is no get application, right? 142 There is no get function in 143 the express in the future version. 144 So, so my, this particular 145 blog, this particular block, 146 everything will start to crash. 147 My server will start to crash, 148 which is not a good thing, right? 149 Because this is a breaking thing. 150 So how this versioning helps 151 this particular conflicting. 152 Okay, so there are three scenarios. 153 Okay, there are three scenarios. 154 First, let's say the update 155 was very simple. 156 Let's say some minor bug fix. 157 Okay, There was some minor, 158 minor, bug fix. 159 Okay, Very, very simple 160 bug fix was there. 161 So some bug fix is there, but which 162 is not important. 163 Okay, which is kind of not important. 164 So it's kind of an optional thing. 165 So that, hey, there was 166 a small bug, which we have 167 fixed, but it's optional. 168 I mean it's good if you update. 169 It's fine if you don't even update. 170 But yeah, there was a simple 171 fix that I have done. 172 When you do this kind 173 of a change, which is a very simple, 174 minor, optional change, 175 in that case you should always 176 increment your patch version. 177 So if right now you are on 4.21.1, 178 let's say if Express js 179 application is adding some optional, 180 okay, some optional update, 181 in that case, what should do? 182 It should update this one 183 to two okay, so that means 184 guys, you are safe to add. 185 You are safe to update this. 186 Okay. 187 There is no new feature when 188 this bit is updating, right? 189 When this particular bit is 190 getting updated, it tells the 191 developer that it's a minor fix, 192 there might be some kind of 193 small update, but there is no 194 new feature, there is nothing 195 going to break. 196 So the things that are working 197 on 4.2, 1.1 will continue 198 to work on this. 199 Will continue to work on this, will 200 also continue to work on this. 201 There is nothing breaking there. 202 Your code will never get break. 203 But yeah, there is something. 204 So this is where you basically 205 update your patch version. 206 So you get it. 207 What is a patch version? 208 So let me just give you 209 definition as well. 210 So patch. 211 Okay, so the official definition 212 for the patch version. 213 Oh, it's too big. 214 Let me just expand. 215 Not expand it like this. 216 I won't expand it like this. 217 Yeah. 218 So what does the patch says 219 incremented for the backward 220 compatible bug fixes? 221 So backward compatible is 222 the important word here, that 223 everything is backward compatible. 224 Nothing is going to break 225 these updates address issue 226 without adding new functionality 227 or breaking anything. 228 So that means if the patch 229 version is increasing, 230 there is no new functionality, there 231 is no breaking change. 232 Some bug fixes are there. 233 For instance 1, 2.3 to 1.2.4 234 signals a bug fix that doesn't 235 affect the compatibility. 236 So this is what is meant 237 by your patch version. 238 Patch is the right most bit. 239 That means this bit. 240 Okay, this one. 241 So you are now done 242 with the patch one. 243 Now let's see what is the minor one. 244 Okay, minor. 245 So in case of minor, what happens? 246 It basically means that there 247 is a new, new functionality. 248 Okay, so so you have added, so 249 I should say added a new feature. 250 Okay, but, but back. 251 But the old features 252 will continue to work. 253 Okay, but old will also work. 254 So old will also work. 255 So that means It's 256 a not breaking key. 257 So it will not break anything. 258 So first thing is that there 259 is a new feature, okay? 260 There is a new feature 261 and nothing will break. 262 Nothing will break. 263 That means nothing is removed, right? 264 So this is where if you have 265 an update of this kind, this 266 is where you update your, you 267 update your minor version. 268 Okay? 269 So if the minor version 270 is getting updated. 271 So as a developer I know there is 272 some new functionality which I 273 can see in the documentation, but my 274 code will continue to work. 275 So that means in this particular 276 scenario the last bit, 277 let's say one, so it can be like 278 21, 22, 23, 24, 25, 26, 27. 279 So let's say if right now this 280 is the version, so what? 281 And let's say this was 282 incrementing like this. 283 Now what team will do, they 284 added a new functionality. 285 They will set it to 22 and they 286 will move it back to 0. 287 That means now you are on 4.22.0. 288 Then if there is a bug fix 289 in version 22, they will 290 continue to update this. 291 Then what they will do is, 292 oh, there is a new functionality 293 that we have to add. 294 So they will there 23 295 and move it back to zero. 296 Now any bug fixes in this, 297 will be done like this. 298 Oh, there is a new feature. 299 Let's make it 24. 300 And then we will continue to do a bug 301 fix in this particular version. 302 So this is the minor version 303 and this updates when there 304 is a new functionality. 305 Okay, so let me give you 306 the definition for this as 307 well so that you can read 308 and understand it better. 309 So minor version incremented when 310 functionality is added, right? 311 The functionality is added. 312 So here this is the important 313 line and is backward compatible. 314 And even the functionality 315 is added, the previous 316 functionality will never break. 317 This means the existing code 318 should continue to work, but new 319 features are available. 320 For example, 1.2.0 to 1.3.0 321 suggests that there is a new 322 feature are introduced without 323 breaking the compatibility. 324 So that means, yeah, you are, you are 325 okay to update this one also, right? 326 But just in case you need 327 that feature, it will also 328 increase the packet size. 329 So yeah, you have to, you have to 330 keep that in mind because of course 331 new features are coming in now. 332 Let's see the major one. 333 Okay, major. 334 Major is the breaking change. 335 That means, you know, we 336 have revamped everything. 337 We have rewritten everything, we 338 have removed a lot of things, 339 we have added a lot of things. 340 We have changed the WHO architecture. 341 So this is a breaking change. 342 Okay, that is where you 343 update your major version. 344 So major version you cannot update 345 in your code just like that. 346 If you have to update your 347 major version, you have 348 to do a lot of code changes. 349 Your code will start to break. 350 So you have to do a lot 351 of coding changes. 352 And it is not easier 353 to update a, existing code base 354 to a major change. 355 Okay, so major change is basically 356 like, hey, There is a 5.0.0, 357 there is a 5 point, there 358 is a 6.0.0, there is A 7.0.0. 359 So this is a major change. 360 The, the leftmost bit. 361 Okay, so let me give 362 you the definition 363 for the major as well. 364 So what does this 365 major bit look like? 366 Okay, so major says incremented 367 when there are incompatible 368 API changes, okay? 369 That means you are removing 370 some functionality, you are 371 adding some functionality. 372 That is where you 373 say breaking change. 374 So these changes may break existing 375 functionality or require 376 modifications in the dependent code. 377 For example, 1.0.0 to 2.0.0 378 indicates that there is 379 a significant change that may 380 require users to update the code. 381 So yeah, this, this is 382 the breaking change. 383 So this is how 384 the versioning is happening. 385 Now you understand 386 the semantic versioning. 387 December. 388 Now piyush, this is fine. 389 What is this carrot symbol 390 going on here, right? 391 What is this carrot symbol? 392 What is the symbol going on here? 393 Now these are very simple actually. 394 So there are multiple ways 395 to write this thing. 396 Okay, Number one, if I just 397 write it like this, this 398 tells the express that whenever I do 399 npm install, whenever I do npm 400 install, always and always 401 install express at this version. 402 Correct? 403 This is what this is telling. 404 But guys, let's say, you know, 405 I just want that every time 406 there is a bug fix, you, you know 407 what is a bug fix, right? 408 Every time there is a minor 409 change, there is a patch 410 change, there's a bug fix. 411 I don't want to keep a track because 412 in reality you will have like 413 thousands, not thousands, actually, 414 I should say 50 dependencies. 415 Let's say you have 416 total 50 dependencies. 417 Of course you don't want to keep 418 a track going on their website that 419 they have fixed something on. 420 Like you want that at least? 421 I want that this last bit, 422 which is the patch one should 423 automatically update, right? 424 You want that, right? 425 So for this, what you can do is 426 you can just add a tilde symbol. 427 So when you add this symbol, 428 tilde, this basically says that, 429 hey, even if you're specifying 1, 430 if in future the version 2 is 431 available, I will install 2. 432 If in future the version 3 is 433 available, I will install that. 434 So that means if you copy this 435 line and I just paste it here. 436 So this tilde basically says that 437 till in case of, Till it says from, 438 okay, version 4.21.1 all the way. 439 All the way to like 4.21x. 440 That means x can be anything. 441 It will basically update it. 442 Okay, so till they will 443 freeze these two bits. 444 So these two bits are frozen 445 in case of tilde, the last 446 bit will keep on updating. 447 If there is any update 448 from the author, 449 then you do a carrot symbol. 450 That is this. 451 Sorry, where is the caret symbol? 452 It's on the six. 453 When you do this carrot symbol, 454 the caret symbol means that 455 do not update the major version. 456 Never ever update the Major version. 457 Feel free to tweak these two bits. 458 Okay, so when you say this one, 459 let me just copy this version. 460 This is the carrot symbol. 461 Carrot symbol basically says 462 that from 4.21.1 all the way 463 to less than 5.5.0.0. 464 Okay, so this 5 is not included. 465 So you have to include this. 466 So that means all the versions. 467 So this bit is also there. 468 This bit is also there. 469 Only the four will be static. 470 That means only 471 the first bit is frozen. 472 So this anything that is less than. 473 Okay, less than five point. 474 This is not included. 475 I'll make it red. 476 So you can. 477 Sorry, not the whole thing. 478 So this particular 479 part is red in color. 480 So 5 will not be updated. 481 All the features like 4.2.1, 482 4.21 4.25 to 4.30, 483 4 point something, something. 484 All the Minor and patch versions 485 of 4 will be updated, but major 486 version will never be changed. 487 Okay, Major version 488 will always remain 4. 489 Because updating the major version 490 automatically is a very risky thing. 491 Because it will. 492 It will break that. 493 Is that what it means? 494 Right? 495 So this is how your 496 carrot symbol says. 497 So this carrot symbol says, hey, keep 498 on updating these two bits. 499 Do not touch the four. 500 This says, hey, keep 501 on updating these two fields. 502 Do not touch 22. 503 This carrot means, hey, keep 504 on updating these 2, 505 but do not touch it. 506 And do you know from 507 where it fetches it? 508 Whenever you do, like npm install, 509 the package name, 510 it basically goes to a website that 511 is npmjs.com official website. 512 Okay, so this is where all 513 the packages are hosted. 514 So if I go on to Express, right? 515 So this is the documentation 516 for Express, like on the npm. 517 So you can install it 518 using npm install Express. 519 So when you do npm install Express, 520 this is where the code lives. 521 Can you see? 522 This is where the Express code lives. 523 This is from where the actual code 524 is pulled from the Internet. 525 And you can see that there 526 are 31 dependencies 527 that this express requires these 31 528 packages to be installed. 529 And these are dev dependencies. 530 And how many people are 531 dependent upon express 532 that are, 8, 6, 7, 4, 1. 533 So express internally 534 requires these dependencies. 535 And these all packages are 536 dependent upon Express. 537 I mean, that's a huge number. 538 And these are all the versions. 539 So you can see that 4.2.1 540 is the latest version. 541 So that is why we have 4.2.1. 542 And then there is a next 543 version that is 5.0.1. 544 Now why this is 5? 545 Why this is 5? 546 Because there might be 547 some breaking changes. 548 So you can see that this is how 549 the version history is going, right? 550 There is a lot of things 551 going on 10 years ago. 552 And do you know when 553 does this started? 554 The 5, the 5 Alpha and even if 555 I go down 5 Alpha and, and, 556 and here is also 5 it started 557 developing eight years ago. 558 I mean 9 is also there. 559 Yeah, it started developing 560 nine years ago. 561 So which is finally, I 562 think it will be out there. 563 So how to update to 5? 564 If you go to Express and you click 565 here, you can see they are saying 566 hey, express 5 documentation is 567 available and if I click on the 568 API documentation, so there is 569 something known as guide moving to 570 Express 5. 571 So this means this will 572 guide you that what all 573 things we have removed. 574 So app.delete app.param app. 575 Request param request JSON JSON p 576 these all things are removed 577 and these all things are changed. 578 For example app Router has changed, 579 request body has changed. 580 So these are few things 581 that have changed. 582 So you have to follow this guide 583 and you know you have to update 584 your existing code just in case. 585 Just in case you are doing it. 586 Okay, so yeah, so you have 587 to read all this. 588 That what all things are going 589 to break in Express TS5. 590 So but we are not going 591 to use any feature that is going 592 to break in Express 4 or 5. 593 So yeah, that's fine. 594 Okay, so you can read this 595 guide and that's how this 596 versioning basically works. 597 So feel free to revisit this video. 598 Feel free to have a screenshot. 599 Okay so guys, what you can do is 600 you can have a screenshot 601 of this thing and keep on reading it 602 so that you know what how SEMWER 603 or semantic versioning works.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "19-node-express-sem-ver_1.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/19-node-express-sem-ver_1.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.00591478,
      0.010165397,
      0.014772656,
      -0.045248467,
      -0.0023293272,
      0.02591415,
      0.028653689,
      0.0226498,
      0.0015746349,
      -0.005467538,
      0.010334833,
      0.0002215966,
      0.006821429,
      0.02275129,
      0.12236873,
      0.019066477,
      -0.014499309,
      -0.00290425,
      0.01016033,
      -0.003227817,
      0.005450666,
      -0.006525531,
      0.010031253,
      -0.004709716,
      -0.0061525553,
      0.011075143,
      0.010936063,
      -0.009463493,
      0.019206587,
      -0.030691069,
      -0.0073812534,
      0.0015076913,
      0.021809516,
      0.010414942,
      0.004605989,
      0.0215441,
      0.015222052,
      0.018972155,
      -0.01682572,
      -0.0045549944,
      -0.021889055,
      0.030501328,
      0.013995439,
      -0.01938058,
      0.01524827,
      -0.00405715,
      -0.018122133,
      -0.007107613,
      0.0032490662,
      0.013876215,
      -0.0113467965,
      -0.018632503,
      -0.0019971477,
      -0.17143156,
      0.0042298436,
      -0.011742505,
      0.0039206357,
      -0.006839224,
      0.0156078655,
      0.0144909555,
      -0.030899147,
      -0.014999126,
      -0.038872853,
      -0.0008657468,
      -0.012959327,
      0.015629416,
      0.025344739,
      0.008506966,
      0.0063411966,
      -0.011265695,
      0.014768793,
      -0.0011223969,
      -0.027765734,
      -0.011186402,
      -0.027787967,
      -0.009157495,
      0.009174554,
      -0.017378325,
      -0.012522329,
      0.016242325,
      0.011026496,
      -0.0066453204,
      -0.00034252403,
      -0.005388421,
      -0.002341923,
      0.0039741197,
      -0.040181953,
      -0.0071871113,
      -0.020845743,
      0.014570467,
      -0.0040206015,
      0.018172856,
      -0.010334199,
      -0.020565929,
      0.00081678515,
      0.014609978,
      -0.013603792,
      0.016785856,
      -0.013625769,
      -0.008941881,
      0.009659332,
      -0.0023990779,
      -0.033577345,
      0.00864371,
      0.013591775,
      0.036152232,
      -0.015062213,
      -0.0019718444,
      0.0075548524,
      -0.0024715099,
      -0.018323468,
      0.00082157727,
      -0.0023451343,
      0.015394684,
      -0.0035104773,
      -0.18373711,
      0.02085626,
      -0.005449221,
      -0.0001033593,
      0.009186315,
      -0.028761832,
      0.0061435136,
      0.015574647,
      0.008149671,
      -0.02276084,
      0.013145782,
      -0.0027440088,
      0.036386978,
      0.019357558,
      0.0026503038,
      -0.014572669,
      -0.00613184,
      0.01755459,
      0.013062425,
      0.010083604,
      0.019460222,
      0.01202641,
      -0.0052511883,
      -0.03144614,
      -0.017902391,
      0.00413579,
      0.020492641,
      -0.00796837,
      0.012510233,
      -0.00045663596,
      -0.0047618374,
      -0.0058895214,
      -0.010298962,
      -0.020772044,
      -0.02807739,
      0.008205896,
      -0.0139691355,
      -0.0028715753,
      0.002384885,
      0.013165996,
      -0.033947606,
      -0.011111507,
      0.014945343,
      0.00071764516,
      -0.0040635685,
      0.004355561,
      0.019371888,
      0.027394703,
      0.030266833,
      0.012490811,
      0.0067342524,
      -0.024131885,
      0.009089307,
      -0.002513337,
      0.009793507,
      -0.012090614,
      -0.010552675,
      0.0024485642,
      0.011706494,
      -0.017652534,
      0.008744208,
      -0.00915086,
      0.0015198892,
      0.011403196,
      -0.028717902,
      0.011104296,
      0.0029570197,
      0.0044437023,
      0.0013664784,
      0.011149368,
      -0.013217047,
      -0.02272521,
      0.015548154,
      0.014640936,
      -0.0028847845,
      0.016587028,
      -0.020449298,
      0.00833836,
      -0.0008096888,
      0.011847645,
      -0.011255214,
      -0.0027798465,
      0.01420301,
      0.026830925,
      0.009790659,
      -0.0022983712,
      0.0019046596,
      0.009715414,
      -0.017160792,
      0.025424553,
      0.033781245,
      0.006440929,
      -0.02878562,
      0.023294374,
      -0.00072235364,
      -0.013193258,
      -0.01817432,
      0.0019389503,
      -0.00072893704,
      0.0101144435,
      -0.008851865,
      0.013979017,
      -0.013498044,
      0.0000484281,
      -0.017271798,
      0.011940649,
      0.0011807557,
      0.006722749,
      0.033122476,
      0.01611896,
      0.010338682,
      -0.0009866841,
      -0.01516817,
      0.0006347705,
      -0.00016381642,
      0.01700423,
      0.010542401,
      -0.009882007,
      0.018916605,
      0.025445236,
      -0.008821516,
      0.006250357,
      0.010461465,
      0.013379703,
      0.014602831,
      -0.0038670755,
      0.0000951814,
      -0.03325622,
      -0.0038301938,
      0.015189378,
      -0.0063082175,
      -0.0282516,
      -0.00819708,
      -0.011043299,
      -0.009259757,
      -0.016997768,
      0.009863996,
      -0.0011686503,
      -0.008985826,
      0.0071453108,
      -0.0028064887,
      -0.022177007,
      -0.009292466,
      0.0031135082,
      -0.023725605,
      -0.008201431,
      -0.0067357467,
      0.0039539975,
      -0.009805431,
      0.0072301547,
      -0.017106688,
      -0.00715162,
      0.02839235,
      -0.037539788,
      0.019038115,
      -0.0007734552,
      0.020587375,
      0.001926344,
      -0.01745374,
      0.004493008,
      0.0035719927,
      -0.09025583,
      0.009776135,
      -0.004142644,
      -0.031099478,
      -0.014316753,
      -0.004548043,
      -0.009465554,
      0.016407374,
      0.0139962165,
      -0.0010318104,
      -0.019545764,
      -0.0021231922,
      0.0076509607,
      -0.020786801,
      0.009473992,
      0.018930145,
      -0.001083662,
      0.006099273,
      -0.0058690044,
      -0.012589775,
      -0.004748628,
      -0.0010410214,
      -0.015247708,
      0.0022923413,
      0.012261783,
      -0.0030148737,
      -0.012996629,
      0.028164586,
      0.044357352,
      -0.020969415,
      0.0032303962,
      0.05205397,
      -0.01049637,
      -0.0070366776,
      -0.0075061107,
      0.007508729,
      0.032385856,
      -0.029930359,
      0.001959568,
      -0.0060473518,
      0.0029694003,
      -0.018882046,
      0.010830412,
      0.020171098,
      0.003532152,
      0.011642623,
      0.0054104445,
      -0.02815456,
      -0.045590483,
      -0.004981422,
      0.004129187,
      -0.002406719,
      0.017745744,
      -0.025166238,
      0.010896222,
      -0.0050462866,
      0.0048166458,
      0.008568231,
      0.02229408,
      0.026416678,
      0.0006563333,
      0.008488011,
      0.0020947724,
      -0.00043848052,
      0.025647229,
      -0.014656105,
      -0.00956843,
      -0.01688638,
      -0.012456041,
      -0.0182247,
      -0.00418605,
      -0.013145388,
      -0.010745939,
      -0.026239827,
      0.0052235327,
      -0.0062051537,
      0.005198721,
      -0.00065551716,
      -0.026472902,
      0.017852308,
      0.013416441,
      0.01861954,
      0.0035577028,
      0.031967673,
      0.0077060773,
      -0.0019375716,
      -0.00071209593,
      0.012617354,
      -0.0051196907,
      -0.02273597,
      0.018754018,
      0.03522814,
      -0.016644554,
      0.00041060577,
      -0.015111354,
      0.022230096,
      -0.019866657,
      -0.011180492,
      -0.001810597,
      0.009327037,
      -0.01027376,
      -0.012245646,
      -0.013221036,
      0.0006412539,
      -0.013217175,
      0.03255044,
      -0.009122962,
      0.012049429,
      0.007288739,
      0.010274738,
      -0.0018582691,
      0.031814724,
      -0.0025070691,
      -0.018834593,
      -0.028934762,
      0.025650715,
      0.012391344,
      0.017992131,
      -0.016248675,
      0.0014255516,
      0.016499732,
      -0.0032344537,
      0.0015963665,
      0.007125188,
      0.00008228084,
      0.007382961,
      -0.007185291,
      -0.0037332291,
      -0.021489406,
      -0.018828396,
      -0.023104498,
      -0.0052677076,
      -0.03498168,
      -0.021776754,
      -0.0071266075,
      -0.009727101,
      0.010152005,
      -0.01636645,
      0.013420422,
      0.008168163,
      -0.017806549,
      -0.003909894,
      0.016372057,
      -0.008960691,
      -0.0058334786,
      0.016604748,
      0.0046320255,
      0.0016380831,
      0.01997333,
      0.0067902426,
      -0.0030005674,
      -0.0026766453,
      0.0006529595,
      -0.0075032446,
      -0.009370333,
      0.012565878,
      0.02732111,
      0.0017092146,
      -0.00014694376,
      -0.015055758,
      0.00062291307,
      0.014151734,
      -0.0026711223,
      -0.015333943,
      0.019421177,
      0.04547581,
      -0.0283107,
      0.0028076698,
      -0.000706706,
      0.0028179046,
      -0.021606747,
      -0.01708512,
      -0.03857173,
      0.01662802,
      0.018760718,
      -0.0070183794,
      0.025521077,
      -0.00568887,
      0.0057541053,
      -0.0047183717,
      0.004139421,
      0.007437585,
      -0.02347973,
      0.0021761318,
      0.0009009015,
      -0.015668973,
      0.014312933,
      -0.0072217216,
      -0.016710898,
      -0.014613444,
      0.027942427,
      -0.017686421,
      -0.013783072,
      0.012146223,
      0.018797325,
      0.04024444,
      -0.013154794,
      0.0062958626,
      0.015164176,
      0.002299088,
      -0.009096298,
      0.0011968805,
      0.016432913,
      -0.008942679,
      0.021694733,
      -0.0031983682,
      0.0031875933,
      -0.019707128,
      -0.001226982,
      0.019265212,
      0.00591722,
      -0.007990334,
      -0.0015065474,
      0.0041629933,
      0.039081834,
      0.030653376,
      -0.006217016,
      0.0022343427,
      -0.022272656,
      0.020463968,
      0.027076745,
      0.0057300576,
      0.015485337,
      0.0007757442,
      0.0034011882,
      -0.018544637,
      0.0008700821,
      0.0043595186,
      -0.0079865055,
      -0.011707638,
      0.0009267463,
      -0.018906767,
      0.0010369548,
      -0.00023611217,
      -0.024269102,
      -0.009008235,
      0.017978622,
      0.015508021,
      0.00545188,
      -0.009968913,
      0.0028415618,
      -0.014200371,
      0.005483238,
      0.017100805,
      -0.011555802,
      -0.021082385,
      0.0077854604,
      0.0045688376,
      0.0028214075,
      -0.000864864,
      0.019998638,
      0.004517344,
      0.0142888175,
      -0.013535764,
      -0.027315537,
      0.030528469,
      -0.01706231,
      -0.0089197215,
      0.0018875157,
      -0.009987767,
      0.024288317,
      -0.0061294544,
      0.006085225,
      0.0044533047,
      -0.0009887264,
      -0.017257866,
      0.014316396,
      -0.010359511,
      0.018251223,
      -0.11512312,
      -0.014732245,
      -0.0055833505,
      0.0133238435,
      -0.0066449083,
      -0.0035352344,
      0.011807436,
      -0.018478237,
      -0.00004186292,
      -0.004088338,
      0.029421503,
      -0.0035730707,
      0.0106110005,
      0.02663359,
      0.018859494,
      -0.013539874,
      0.010305694,
      0.02877807,
      0.034630768,
      0.0035907016,
      -0.007880591,
      0.01461485,
      -0.010484771,
      0.0017339508,
      -0.020753244,
      0.014827096,
      0.018464264,
      0.02005004,
      -0.0014256522,
      0.0011988665,
      0.003906005,
      -0.002193627,
      0.010696683,
      0.020788603,
      0.037493803,
      0.022364033,
      -0.008290755,
      0.018117333,
      0.003661796,
      -0.0076454473,
      0.008584819,
      0.022684475,
      0.029391916,
      0.02199157,
      0.013630086,
      0.013758053,
      0.019480482,
      0.0021902279,
      -0.004516006,
      0.05150885,
      -0.0432734,
      -0.0038245446,
      -0.009924076,
      -0.024830308,
      -0.002168651,
      -0.0017065471,
      0.031855915,
      0.024750816,
      -0.014264094,
      -0.0069924016,
      0.0033263543,
      -0.0032849286,
      -0.013032799,
      0.034561664,
      -0.0075001037,
      -0.010914543,
      0.0050967257,
      0.010871312,
      0.018287148,
      -0.005419643,
      0.011721435,
      -0.006164049,
      0.0043909997,
      0.021954263,
      -0.016874142,
      0.008413564,
      0.0025390843,
      0.011825642,
      -0.010343578,
      0.02793472,
      -0.019730614,
      -0.014792479,
      -0.058627516,
      -0.009693036,
      -0.011473726,
      0.004768514,
      0.029431632,
      0.010998124,
      -0.005232215,
      0.02551631,
      0.0074147233,
      -0.0074396525,
      0.01508771,
      -0.008020757,
      -0.007701075,
      -0.01091419,
      -0.019440452,
      -0.0013311969,
      -0.010009174,
      -0.029913537,
      -0.01067704,
      0.02084154,
      0.001480854,
      0.010042494,
      -0.013010058,
      -0.028175218,
      0.0028983427,
      0.0021120964,
      -0.015447508,
      0.005789164,
      0.001935186,
      -0.0072856755,
      -0.00082927186,
      -0.14795958,
      0.007671007,
      0.013269683,
      -0.0032843244,
      -0.008179695,
      0.0037470327,
      -0.008946332,
      -0.010481917,
      0.0013475396,
      -0.013680872,
      0.005854435,
      -0.019221615,
      -0.01872665,
      -0.007717571,
      -0.010579876,
      0.13689348,
      0.012169427,
      0.028950443,
      0.008424937,
      0.021780334,
      -0.010887839,
      -0.021631248,
      -0.006316792,
      0.015555313,
      -0.0025797118,
      -0.0091572525,
      0.010905636,
      -0.02590037,
      0.029546805,
      0.01356515,
      0.0037609388,
      -0.010242052,
      -0.0073666773,
      0.009750647,
      -0.0050819516,
      -0.02106504,
      -0.0042276336,
      -0.008331691,
      -0.0061365147,
      -0.0018556648,
      -0.0064989696,
      0.0046578483,
      -0.009751998,
      0.005518423,
      -0.0036570295,
      -0.012705538,
      0.0026874864,
      -0.016126268,
      0.0064502647,
      -0.017161794,
      0.023546679,
      -0.077798694,
      0.015792232,
      -0.0076546078,
      -0.00431887,
      0.050437845,
      -0.004263189,
      0.010989765,
      -0.00902997,
      -0.001379245,
      0.006105947,
      0.013435031,
      0.029451335,
      0.012125546,
      0.0010299976,
      -0.001196262,
      0.023155026,
      -0.0008410488,
      0.021992838,
      -0.0009174142,
      0.011246215,
      0.017525788,
      -0.0016701581,
      -0.0012523357,
      -0.023533467,
      -0.020598292,
      -0.016411573,
      0.011246159,
      -0.0036293934,
      -0.014319602,
      -0.012536561,
      0.020246942,
      -0.011085118,
      -0.0025145384,
      0.014666408,
      -0.0064022485,
      0.0019010344,
      0.015490976,
      -0.025302978,
      -0.017769892,
      -0.0066119703,
      0.03213297,
      -0.0038594606,
      0.010489777,
      -0.026970346,
      0.030672433,
      0.00834423,
      0.0035826531,
      0.01357556,
      0.0002516843,
      0.0056155687,
      -0.01269051,
      0.009947015,
      -0.02034701,
      0.018695839,
      0.020560008,
      -0.0025243133,
      0.009018463,
      0.0026056455,
      -0.007875678
    ]
  },
  {
    "id": "genai_cohort_nodejs_20_node_express_rest_api_vtt",
    "content": "So hey guys, in this particular video 2 let's understand what is a REST API. 3 What do you mean by this REST 4 API, also known as RESTful API. 5 So let's understand 6 that what is this? 7 Okay? 8 And from now onwards we 9 are going to be focusing more 10 on the restful APIs. 11 So restful APIs means 12 representational state transfer. 13 Like this is the full form and there 14 is no need to remember this. 15 Even I googled it before this video. 16 Okay, so what is this? 17 Is, this is basically 18 an architectural style. 19 Now first thing is that this 20 is an architectural style 21 and this is nothing related 22 to the Node js, okay? 23 I not talking about Express or Node 24 js, it is in, in general like 25 whenever you are building a REST 26 API, whether you are using Java, 27 whether you're using Rust or 28 you're using JavaScript, Node, 29 this, anything. 30 So this is just a style, okay? 31 Architecture style for designing 32 the applications, the backend APIs. 33 Okay? 34 Now this, this design, the style has 35 some, some principles, okay? 36 So there are some key principles that 37 we have to follow in order to call 38 yourself your APIs as a RESTful API. 39 Okay, so what are those? 40 Number one, all, all 41 the communication happens 42 on the HTTP, right? 43 All the communication happens 44 on the HTTP protocol. 45 That's fine, very simple. 46 First thing that majorly 47 comes is the statelessness. 48 Now what do I mean by statelessness? 49 There should be absolutely no state 50 maintained on the server. 51 That means let's say you have 52 a server which is running, let's 53 say Java, maybe Rust, maybe 54 anything or maybe Node js, right? 55 If user is sending a request, 56 you are not allowed to create 57 some, state some data in the memory. 58 I mean you want to create some data, 59 hey, go in the database, right? 60 You have a database but you 61 cannot store any user related 62 information inside the server. 63 You cannot use your memory 64 to store, store some, store some 65 user, related information. 66 User related info. 67 If you want to do, do 68 not do it on the server. 69 You can use Redis, you can 70 use postgres, you can use other 71 databases, key value pairs, 72 but not in the server. 73 Why? 74 Because what happens is in 75 reality these servers automatically 76 scale up and down, right? 77 So they scale up, they scale down. 78 So if you are storing some kind 79 of memory, you are storing 80 some kind of state in the memory, 81 it can be lost, right? 82 And if you are storing something 83 in the memory, you don't want your 84 servers to be scalable in this way. 85 That basically violates the principle 86 of your statelessness, okay? 87 The principle of your restful API. 88 So everything should be stateless. 89 Secondly, this should follow 90 a client Server architecture, right? 91 What is a client server 92 architecture, by the way? 93 You know, the client server 94 architecture is basically that 95 there will be a client which can 96 be a separate application. 97 Okay, A client. 98 It can be a mobile application, 99 it can be iOS, it can 100 be Android, it can be a website, 101 it can be anything. 102 But the client should be 103 a separate application. 104 Okay, so let's say that there 105 is a client which is a separate 106 application and your server 107 is a separate application. 108 Okay? 109 It should not be like that your 110 backend is responsible for ui. 111 No, that should not be the case. 112 You should not send like, 113 you know, HTML data, some 114 CSS data from the server. 115 No, you, you should only send data 116 in some format 117 like JSON, the front end. 118 The client application should 119 be responsible for rendering it 120 on the ui, how to show it 121 to the user, all that stuff. 122 So client server architecture, 123 keep the client different, 124 Keep the server different. 125 Okay, There should be no, like, 126 there should be no code, coupling. 127 Okay, it should be, they should 128 always Talk with the APIs. 129 So what client can do, it can 130 make API calls to your 131 backend and, and get the data. 132 Okay, then there should 133 be a uniform interface. 134 Now what do I mean 135 by uniform interface? 136 Basically you should use all 137 the things like for example, 138 get post, put delete thing 139 in a predictable way. 140 Okay, what do I mean 141 by predictable way? 142 This is a very simple thing. 143 Let's say if you are making a get 144 request to slash tweets, 145 what do you think they should do? 146 They should obviously 147 return you all the tweets. 148 Right? 149 Because this is a predictable, 150 this is a common sense. 151 But let's say you are designing it 152 in a way that when you make 153 a call on get tweets, you 154 are actually creating a new tweet. 155 Okay, this is not 156 a predictable thing, right? 157 Creating a new tweet. 158 This doesn't make any sense. 159 The common sense is not there. 160 So there should be a uniform 161 interface that if you tell 162 someone, hey, there is a route 163 that is a get route of slash 164 tweet, it should be predictable 165 that, yes, this route is going to 166 return all the tweets. 167 So uniform interface, okay? 168 And it should be cachable. 169 Okay? 170 So the responses that you send 171 from the backend, it 172 should be cacheable, right? 173 So servers can mark it as 174 cacheable, which allows the client 175 to cache the things. 176 So this is what basically means 177 makes your APIs as a restful APIs. 178 So moving further, we are going 179 to use these, principles, right? 180 And in order to make highly 181 performant, highly available RESTful 182 APIs which are highly scalable. 183 Okay, so you can Google, 184 a lot of more things 185 about these restful APIs. 186 In fact, I would suggest you to 187 Google yourself also restful APIs, 188 and keep all the principles in mind. 189 So we are just going to learn restful 190 APIs, because that, what, like 99% 191 of the companies use, right? 192 So we are just going to create APIs, 193 and for the testing 194 purposes, because we don't have 195 any UI or client or any REACT 196 application, we are going to use 197 this Thunder client, right? 198 Because if you have to really 199 test your application, then 200 you have to build a UI using 201 React or something like that. 202 Anything. 203 But we have this Thunder client, 204 which acts as a, ui, which 205 acts as a client for us so 206 that we can test our APIs. 207 Got it, guys?",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "20-node-express-rest-api.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/20-node-express-rest-api.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.025869986,
      0.013766352,
      0.024950577,
      -0.07346761,
      -0.011409101,
      -0.0024208277,
      0.01997377,
      0.009760625,
      0.00670478,
      0.018360604,
      -0.0003586292,
      0.0117812995,
      0.00044710585,
      0.027873658,
      0.12883338,
      -0.0024766806,
      0.0009780946,
      0.006952095,
      0.0036801938,
      -0.026419878,
      0.01413403,
      -0.017957555,
      -0.013429735,
      0.008441832,
      0.007406301,
      0.018323433,
      -0.006046041,
      0.00466247,
      0.013286405,
      0.0023422234,
      -0.011910522,
      -0.008403721,
      0.021671256,
      0.02449878,
      -0.016735489,
      0.006982305,
      0.009052621,
      0.0078036212,
      -0.035404272,
      0.011025055,
      -0.026766293,
      0.009594744,
      0.016144875,
      -0.031029535,
      0.011211575,
      -0.0013633985,
      0.017224798,
      -0.0066999737,
      0.0055801524,
      0.017414717,
      -0.0051416405,
      -0.012579125,
      -0.0046969517,
      -0.18622883,
      0.006704046,
      0.0019457558,
      -0.0055188667,
      0.014100802,
      0.0013470545,
      0.011054521,
      -0.01626197,
      0.0065298844,
      -0.0009884901,
      0.013044372,
      -0.016619947,
      -0.015246183,
      0.025544994,
      0.00041757437,
      0.0020608914,
      -0.0066173854,
      0.00065526256,
      0.026158344,
      -0.008827597,
      -0.019905047,
      -0.018003652,
      -0.01734037,
      0.0007800349,
      -0.008111447,
      0.0033635038,
      0.011169196,
      -0.0021885368,
      -0.010598398,
      -0.03550945,
      0.009622513,
      -0.009664213,
      -0.014445978,
      -0.026791591,
      -0.0045174053,
      -0.0077617303,
      -0.0015616751,
      0.0048427065,
      0.0077563664,
      0.004178337,
      0.007947091,
      0.014523528,
      -0.0032440156,
      -0.0024834883,
      0.011637183,
      -0.021724718,
      -0.0046518245,
      0.015962234,
      0.010319227,
      -0.03476612,
      0.01618631,
      -0.009027672,
      0.010082577,
      -0.0063936342,
      -0.008559467,
      -0.008449941,
      -0.01533594,
      0.0066142958,
      -0.014939592,
      -0.0013691932,
      0.029190034,
      0.0046319924,
      -0.17842676,
      0.022201387,
      -0.029655017,
      0.010192014,
      0.002216118,
      -0.02107141,
      -0.0019358743,
      0.00735422,
      -0.0041189613,
      -0.020561075,
      0.0045423275,
      0.007777332,
      0.034553304,
      0.02925006,
      0.008006496,
      -0.0078000445,
      -0.013982038,
      -0.0051550223,
      -0.0053973594,
      0.018616358,
      0.020222668,
      -0.010341084,
      -0.02438201,
      -0.013866797,
      -0.019763555,
      0.011199107,
      0.046905868,
      -0.012804082,
      0.031177672,
      0.010804666,
      -0.004885515,
      -0.03890465,
      0.006757837,
      -0.019351073,
      -0.026800567,
      0.023960019,
      -0.011508055,
      0.0014589604,
      0.013326477,
      0.017014824,
      -0.040794183,
      -0.00039979283,
      0.0021170857,
      -0.0046046777,
      -0.012837364,
      -0.00036202476,
      0.02248273,
      0.000789593,
      0.030737078,
      0.0016378377,
      -0.011876181,
      -0.0014767085,
      0.0069118836,
      0.0071640704,
      -0.004584321,
      -0.0018370115,
      -0.0015652541,
      -0.0028644023,
      0.018966721,
      -0.000091060196,
      -0.010116041,
      0.0016252707,
      -0.00085607823,
      0.009811387,
      -0.0014864553,
      -0.0040453826,
      -0.029489718,
      -0.0017004559,
      -0.03168579,
      -0.0069561657,
      -0.004141136,
      -0.02824601,
      0.017764935,
      0.0061267107,
      -0.00061598397,
      0.00053180323,
      -0.0034335512,
      -0.006763932,
      0.01002981,
      0.0151574,
      -0.024273084,
      0.008302594,
      -0.024190176,
      -0.010709214,
      0.028297905,
      -0.0033344429,
      -0.007004239,
      -0.00611268,
      -0.026139503,
      -0.016896248,
      -0.0051472243,
      0.013820034,
      -0.032082748,
      -0.00040348608,
      0.005843607,
      -0.01499483,
      -0.031617627,
      0.011286065,
      -0.010533952,
      -0.0073690237,
      -0.0026120625,
      0.016251747,
      0.012989135,
      -0.013258513,
      -0.017500317,
      -0.0017645331,
      -0.009986073,
      -0.0009318451,
      0.020850487,
      0.018358478,
      -0.008986534,
      0.01578314,
      -0.013981952,
      0.0103667155,
      -0.000655704,
      0.004173174,
      0.014313658,
      0.002358092,
      -0.006075335,
      0.031308357,
      -0.0024792189,
      -0.0023562622,
      0.000057246565,
      0.015586915,
      0.009011336,
      0.009049239,
      -0.007245567,
      -0.020733943,
      0.025214022,
      0.018179607,
      0.014122803,
      -0.0176481,
      0.0007359691,
      -0.014711922,
      -0.020112094,
      -0.015001383,
      0.007246109,
      -0.009423962,
      0.0010305229,
      0.012506619,
      -0.0335802,
      -0.043026812,
      -0.0007627054,
      -0.010304127,
      0.0016473645,
      -0.012044866,
      -0.030321267,
      -0.001437633,
      -0.004748238,
      0.010612512,
      -0.006428537,
      0.0038211956,
      0.019278435,
      -0.039828014,
      0.008233269,
      0.02960401,
      0.0034705016,
      -0.015980937,
      -0.0066075083,
      0.007273844,
      -0.0013483926,
      -0.08415424,
      0.008141641,
      0.009243713,
      -0.0346738,
      0.003221156,
      -0.009671856,
      -0.019291606,
      0.0087570315,
      0.020291546,
      0.011677844,
      0.003245186,
      -0.007282715,
      0.016373299,
      -0.0048383563,
      -0.0016044824,
      0.026101349,
      0.012732501,
      0.0019293056,
      0.00649896,
      -0.044947445,
      -0.022813257,
      -0.0015062933,
      -0.015685478,
      0.0045992085,
      0.016507478,
      -0.01134627,
      -0.017436808,
      0.017960034,
      0.006098537,
      -0.0018539429,
      0.00087494246,
      0.022889499,
      -0.01005216,
      -0.0044084396,
      -0.002925606,
      -0.0104169035,
      0.022077138,
      -0.009172577,
      -0.01996393,
      0.002468781,
      -0.013088154,
      -0.011057799,
      0.020007519,
      0.010872673,
      -0.00086714845,
      0.014816793,
      0.009212416,
      0.008421178,
      -0.014445109,
      0.0017051665,
      -0.02431713,
      0.013278836,
      0.029373072,
      -0.015183736,
      -0.0030902135,
      -0.0074631735,
      0.0055933725,
      0.0068780836,
      0.024673045,
      -0.0042381533,
      0.0023366662,
      -0.007493911,
      0.0018920512,
      0.0060100053,
      0.034431122,
      0.007727682,
      0.0073167123,
      -0.02541276,
      -0.009716075,
      -0.0058701215,
      0.004631064,
      -0.019906497,
      -0.008686084,
      -0.03499123,
      0.0070629283,
      0.005624886,
      -0.0054889703,
      -0.021386191,
      -0.03457512,
      0.011849679,
      -0.0022607197,
      0.0022877532,
      -0.0032510972,
      0.01874747,
      -0.0023726223,
      0.015675995,
      0.0014623342,
      0.00009216462,
      -0.0088527305,
      -0.0021584781,
      0.015292667,
      0.025270304,
      -0.002183088,
      -0.008651247,
      -0.024482207,
      0.0016549024,
      -0.02762056,
      -0.014951979,
      -0.0059779687,
      0.019697636,
      -0.016144428,
      -0.015604528,
      -0.015849218,
      -0.013567356,
      -0.017298277,
      0.031538643,
      -0.029102609,
      -0.01968129,
      0.0011978158,
      0.008730886,
      0.0039655464,
      -0.001735424,
      -0.018407011,
      -0.0068331813,
      -0.023567498,
      0.025530413,
      0.010271748,
      0.010672414,
      -0.018644415,
      -0.011069505,
      -0.0014620926,
      -0.018617006,
      0.016969103,
      -0.015428224,
      -0.013697771,
      -0.009960008,
      -0.03097916,
      -0.0023640909,
      -0.031535223,
      -0.007603399,
      -0.018591778,
      -0.016854392,
      -0.023501111,
      -0.0023629742,
      -0.014036909,
      -0.014379517,
      0.02498429,
      -0.0015600923,
      0.029505678,
      0.029750556,
      -0.012301687,
      0.022357617,
      0.005105264,
      -0.008325411,
      0.0008912333,
      0.02074912,
      -0.028652241,
      -0.012740016,
      -0.012801205,
      -0.018922746,
      -0.03205169,
      -0.0041816467,
      -0.028499985,
      0.002589405,
      -0.010378109,
      0.015409225,
      -0.00086415495,
      0.017223824,
      -0.016079182,
      -0.01406864,
      -0.0009586721,
      -0.014149539,
      -0.0082106395,
      -0.014292185,
      0.015605273,
      -0.003739177,
      0.0033639881,
      0.008632609,
      0.013852117,
      0.0033186132,
      -0.01137175,
      -0.01541011,
      -0.03624192,
      0.0056602866,
      0.015384844,
      0.0028566804,
      0.0044624587,
      -0.026222998,
      0.00536873,
      -0.0008579939,
      -0.012990693,
      0.01383945,
      -0.013327678,
      0.01344471,
      0.003806771,
      -0.0005458112,
      0.0023792328,
      -0.01172912,
      -0.011829645,
      0.0036804795,
      -0.016061476,
      0.014534771,
      -0.03899031,
      0.007866557,
      0.00334623,
      0.015634969,
      0.021697674,
      -0.008810191,
      0.0054836855,
      0.006830976,
      -0.030305348,
      -0.01333733,
      0.003881823,
      -0.008591187,
      0.013539412,
      -0.0026444888,
      -0.01779933,
      -0.04571084,
      0.002098203,
      0.0044584903,
      0.011367873,
      -0.0021088033,
      0.01748073,
      -0.0027953964,
      0.035864085,
      0.0042222897,
      -0.004210286,
      0.00688512,
      -0.0012571077,
      0.0006441702,
      0.021432862,
      -0.008889327,
      -0.0053462167,
      -0.00659877,
      -0.003991577,
      -0.013939922,
      -0.027695354,
      0.01141933,
      -0.0060506347,
      -0.014135585,
      0.010071466,
      -0.006180845,
      0.018691977,
      0.009775744,
      -0.016588863,
      0.0061911955,
      0.010294089,
      0.013232595,
      -0.0014374428,
      0.0043636034,
      0.0073017282,
      -0.015727567,
      -0.009916159,
      -0.015314883,
      0.008503438,
      -0.010294361,
      0.018031213,
      0.023379683,
      -0.032544695,
      -0.0049711354,
      0.04356947,
      -0.0006088454,
      0.0052519403,
      -0.011332507,
      -0.013641958,
      0.029187426,
      -0.006492775,
      0.0010728707,
      -0.0090825325,
      0.0049835374,
      -0.0021303045,
      -0.01380216,
      -0.011377158,
      0.019162748,
      -0.002613151,
      -0.026444918,
      0.0042656637,
      -0.007615293,
      0.030154701,
      -0.10040375,
      -0.0024507102,
      -0.020534193,
      0.003426777,
      0.0008070957,
      0.0037626536,
      0.018451784,
      -0.023200251,
      0.0034628822,
      -0.022853954,
      -0.010479972,
      0.0063117915,
      0.0054475623,
      0.01651432,
      -0.010220124,
      -0.011626203,
      -0.014870792,
      0.029820798,
      0.036809985,
      -0.00008246845,
      0.016469782,
      -0.013309268,
      -0.0017020042,
      0.015850445,
      -0.0024501665,
      0.006408031,
      0.02941028,
      -0.010212871,
      0.010201326,
      -0.0056861923,
      -0.01592996,
      -0.009525494,
      -0.009616301,
      0.014898668,
      0.017631587,
      0.034834333,
      -0.0056959265,
      0.011088108,
      -0.0021298658,
      0.0047250534,
      0.0045512742,
      0.005345492,
      0.0049893945,
      0.01705806,
      0.011867276,
      0.017364765,
      0.021431914,
      -0.022286156,
      0.010156726,
      0.045702666,
      -0.044325113,
      -0.021493493,
      -0.009415295,
      -0.031350207,
      0.017055033,
      -0.0028376977,
      0.021504018,
      -0.002314478,
      -0.0014572195,
      -0.009748747,
      0.0018213022,
      0.014863923,
      0.000056781544,
      0.03875507,
      -0.012572235,
      0.015651124,
      0.018658388,
      0.004573464,
      -0.0022214556,
      0.0057781497,
      -0.01155087,
      0.0073096515,
      -0.014563154,
      0.030750602,
      -0.012270784,
      0.008998954,
      0.0017335145,
      0.017133275,
      -0.032009915,
      0.016841503,
      -0.0187514,
      0.013686343,
      -0.061823633,
      -0.014696286,
      0.0014724919,
      -0.0007352259,
      0.02169417,
      0.0077503845,
      -0.010277979,
      0.021518005,
      -0.008709059,
      -0.013700585,
      -0.022460423,
      -0.021052621,
      0.009078459,
      -0.024505233,
      -0.03580238,
      0.008410292,
      0.007219172,
      -0.03125314,
      -0.023598084,
      -0.0032813903,
      -0.0022170383,
      0.0006495594,
      -0.007999289,
      -0.0029772243,
      0.0071238154,
      0.025533387,
      -0.009045897,
      0.000991556,
      -0.011685144,
      -0.0010406411,
      0.029468058,
      -0.14284343,
      -0.002465694,
      0.013434328,
      0.0041834256,
      -0.014238113,
      0.022661809,
      -0.03029736,
      -0.020673105,
      0.011904238,
      -0.011936469,
      0.008658041,
      -0.006662156,
      -0.017776404,
      0.009207973,
      0.0013961707,
      0.114716776,
      -0.0014925672,
      0.013513092,
      -0.0035510766,
      0.020103544,
      -0.014517595,
      -0.024030365,
      0.015771832,
      0.0059046163,
      0.005678599,
      -0.013765759,
      0.009754976,
      -0.01906233,
      0.021803841,
      0.017872594,
      0.0022907471,
      -0.029564401,
      -0.018777972,
      0.010879128,
      0.0056165094,
      -0.018126639,
      0.013665698,
      -0.009640974,
      -0.0102731455,
      -0.017431328,
      0.03359659,
      -0.0018676115,
      -0.014469686,
      0.027154151,
      -0.001608966,
      -0.0054813363,
      0.0017856138,
      0.0040392037,
      -0.0012668326,
      -0.003647771,
      0.027719958,
      -0.05513173,
      0.0076655,
      -0.0031710505,
      -0.007403776,
      0.024521964,
      0.014418061,
      0.030701231,
      -0.013471053,
      -0.0030295306,
      0.00010680716,
      -0.0020464123,
      0.017229106,
      -0.0020205507,
      0.0027350066,
      -0.00312962,
      0.010879394,
      0.024955092,
      0.010044594,
      -0.007976159,
      -0.01970684,
      0.021801727,
      -0.013942502,
      -0.014157581,
      -0.012364933,
      -0.010980317,
      -0.0055402503,
      0.018329972,
      -0.010385869,
      -0.008384079,
      -0.013626127,
      0.018234426,
      0.0058743847,
      -0.011416491,
      -0.00011811248,
      -0.011571955,
      -0.022744644,
      0.02802916,
      -0.0027297246,
      -0.017151553,
      0.0032025164,
      -0.004303599,
      -0.012586522,
      0.044109933,
      -0.0031695662,
      0.023683008,
      0.008953005,
      -0.0061578136,
      0.021946626,
      0.0021492373,
      -0.009114123,
      -0.006159425,
      0.0015502638,
      -0.0007866256,
      0.034242652,
      -0.007802161,
      0.032947153,
      0.017921478,
      0.0064550033,
      -0.015120866
    ]
  },
  {
    "id": "genai_cohort_nodejs_21_node_book_store_1_vtt",
    "content": "Hey guys, in this particular 2 video I have an interesting 3 challenge for you. 4 So here is a readme MD file and I 5 have created one challenge for you. 6 So actually I have not created, 7 I have asked Chat GPT 8 to create a challenge for us. 9 And I'll be using this 10 challenge along with you only 11 to see that how we can implement 12 all these challenges. 13 Okay, so this particular video is 14 going to give you a very good 15 understanding on how you can work 16 with Express in real world. 17 So let's just open the preview. 18 So here we have the preview 19 and let's see it step 20 by step and implement the code. 21 Okay, so what we have to do is 22 we have to setting up the server 23 with Express listening on 24 the port and creating a bookstore. 25 So we have to create a bookstore 26 kind of an application. 27 Okay, so project initialization 28 says that you have 29 to create a project folder. 30 That's fine. 31 Then what you have to do is 32 you have to do npm in it. 33 So all these steps are 34 mentioned here, right? 35 So you have to just 36 follow this document. 37 So I'll just tell you the outline 38 that we have to create a bookstore. 39 And, and if you scroll down 40 you will have some application 41 routes like slash books that 42 should return all the books. 43 Slash books, slash id. 44 Okay, now this is something special 45 that if you make a route 46 on like let's say/book/1,/book/2. 47 So this will return your 48 specific book by the ID. 49 You can create new books, you 50 can delete existing books. 51 So this is what we have to create. 52 Okay, so let's, let's jump 53 into the coding part, right? 54 Because that is where I 55 am most excited usually. 56 So what I can do is I 57 can just do an npm init. 58 So expressbook store is 59 fine, everything is good. 60 And yes, so npm install. 61 Now here is something 62 I want to tell you. 63 Very interesting, right? 64 Something new. 65 What I'm going to do is I'm going 66 to say at the rate types slash node 67 and one thing I will 68 do hyphen, hyphen save dev. 69 Okay. 70 Or, or, or I can just say hyphen D. 71 Now what is this thing? 72 When I do enter, you will see 73 something very interesting 74 in the package JSON instead of going 75 into the dependencies, now it 76 is inside a dev dependency. 77 Now see guys, this particular 78 thing I only need when 79 I am developing, right? 80 When I am inside my development 81 mode, once my project is ready, 82 I don't want to take this package 83 on my production server because 84 even if I take, that's fine. 85 I mean it's not a problem. 86 But my Packet size is going to 87 increase because this can be a 2, 3 88 MB file or something like that. 89 So, so if there is any dependency 90 that you only need on your 91 local machine, that means while 92 you are developing, then you 93 can just do an hyphen D. 94 Okay, so like for example Express. 95 Express. 96 Of course I need on production. 97 If Express is not there 98 on the production, my. 99 My application will crash. 100 So this is going to be 101 a dependency only. 102 Similarly, npm install@ the rate 103 types for Express is going 104 to be a dev dependency because 105 either I just need that 106 in the development server. 107 Got it. 108 Now let's configure a start 109 script which will do node, 110 hyphen, hyphen, Var, index js. 111 Nice. 112 Now and let's create 113 an index js file. 114 So first things first, let's 115 have the Express application. 116 So express equals require 117 and you can just say express. 118 Okay, Then let's create 119 an application. 120 So app is equals to express. 121 Sorry, sorry, sorry, my bad. 122 Express. 123 Fine. 124 Then let's create a port variable. 125 So port 8000. 126 Okay, so what this documentation 127 says that you have 128 to create a project folder. 129 Done. 130 Initialize the node. 131 Done. 132 You have to install Express. 133 We have done an index js file. 134 Now we have to we have 135 to listen on the port 8000. 136 So these rules are saying 137 that you have to listen 138 on port number 8,000, right? 139 So app do listen on this particular 140 port and I can just 141 say console do log that HTTP 142 server is running on port. 143 And I can just say port. 144 So whichever port the application is 145 running, I'll get that thing right? 146 So this part is also done. 147 So you have done the listening part. 148 Now we have to create 149 a bookstore data. 150 Now, as of now, we don't 151 have a database, right? 152 Initially these things 153 should be in the database. 154 But because we don't have 155 a database, we can actually 156 store it as an array. 157 So you can consider, okay, you 158 can just consider that this is my 159 in memory database, okay? 160 In memory database. 161 Now I know that I'm 162 violating a rule, right? 163 The rule was that you it 164 should be stateless. 165 But right now I don't 166 have a database, right? 167 Imagine guys, I don't 168 have a database. 169 So that is the reason I have 170 to create these things in memory. 171 Okay? 172 So right now we are violating a rule 173 because we don't have database. 174 But you can imagine 175 in future these things will be 176 moved into the database. 177 So every book has an id, 178 a title and an author, right? 179 So we have created a mock data. 180 Now we have to set 181 up a get route that if you want 182 to get all the books. 183 So very simple, right? 184 Very simple. 185 So what I can do is I can 186 just have a comment that 187 these are all my routes. 188 So if someone makes a get 189 route, a get request on slash 190 books, this is where I 191 should return all the books. 192 So what you can do is you 193 can just say response dot. 194 Now see guys, when you return 195 a response, the response can be 196 of different, different types. 197 For example you can send just 198 a text response, for example 199 for that when you do end, right? 200 When you do end you are just 201 sending a text response. 202 But usually we prefer 203 to send a JSON response. 204 What is a JSON? 205 JSON is basically a key value pair. 206 So what you can do is you can just 207 say hey I want to send a JSON 208 and directly give this books what 209 internally the express will do. 210 It will convert this array, 211 this array into a JSON 212 and set all the appropriate 213 headers and, and send these books 214 as a JSON to the front end. 215 Let me show you. 216 Okay, so this is done. 217 So this basically route 218 gets all the books and returns 219 to the front end. 220 So what I'm doing is here is I, 221 I'll just say npm start, right? 222 So this will start the server 223 in the Var mode. 224 So you can see that 225 the server is running. 226 Let's open the Thunder 227 client side by side. 228 Okay, so what I'm going to do is 229 I'll just say HTTP 230 localhost/books and send document. 231 You see that I'm able to get 232 all the books right as a JSON. 233 Now interestingly see one thing, 234 if I go into the headers, I'm 235 talking about response headers. 236 Okay, Response can also send headers. 237 So our server has set 238 some Headers for us. 239 Number one is X powered by Express. 240 So yeah, Express is doing a branding 241 content type application/JSON 242 from where this is coming. 243 When you send a JSON response 244 from the back end using X Express, 245 it automatically adds this header. 246 Then it is adding content length 247 and it is adding a date. 248 It is adding a E tag and a connection 249 close and you can see that this 250 is the response that is being sent. 251 You can even add your custom headers. 252 For example I can say 253 response do headers. 254 Okay, response dot set header. 255 Okay, so you can have a header like 256 anything xpiy and you can 257 set the value to as piushkar. 258 Let's, let's say. 259 So now see what will happen is 260 if I do a send, you get seven 261 headers and you can see that 262 I have a custom header. 263 So usually it's a good Practice 264 that if it is your custom header. 265 Usually we started with X. 266 Okay, this tells that 267 this is a custom header. 268 Similarly, it's okay, it's okay. 269 I mean if even I don't 270 sit, that will work fine. 271 But it's a convention that if 272 it's a custom header then you 273 should append it with like, you 274 should pin it with the X hyphen 275 like X powered by access thing. 276 Okay, so this is how you can 277 even send headers when you are 278 sending back the response. 279 So with this I have done my first 280 task that was to get all the routes. 281 So this is done. 282 Now we have to get a route 283 with the book. 284 Now see guys, can you see 285 on the client you have 286 two books ID one, ID two. 287 So let us say that I just, 288 I want to get the book 289 that is with ID1, right? 290 Right. 291 I just want to fetch all the data 292 for this particular book. 293 So what I can do is I want 294 a route in which I can say 295 something like books one. 296 So this right now is sending a 404. 297 This should send me all the book 298 data that has an ID 1. 299 Similarly books 2. 300 Now here, this is 301 a dynamic parameter. 302 This can be anything, right? 303 This class can be anything. 304 So what you can do in express 305 is you can just say app 306 dot get hey, if someone makes 307 a request to books slash one. 308 Now this is a, this should 309 be a dynamic thing. 310 So to make it dynamic you 311 can just say colon and name 312 this variable anything. 313 For example I'll name it as id. 314 So this particular thing, let me 315 just, you know, complete this code. 316 What this says that hey, 317 slash books slash anything. 318 This can be a parameter 319 that is anything. 320 It can be one, it can be 321 two, it can be anything. 322 It's a, dynamic. 323 So now I want to get the value 324 what user has added here. 325 So so first of all you can get the id 326 as request params.id if I have 327 named this variable as XYZ so 328 I have to say XYZ here as well. 329 So this basically says hey, from 330 the parameters get me the xyz. 331 So whatsoever user will put here that 332 will be available to me in the xyz. 333 Okay, you can even have multiple 334 parameters slash something which 335 is, which is hard coded, right? 336 Slash Then some dynamic parameter A. 337 Then you can again have a dynamic 338 parameter, let's say R. 339 Then you can see you 340 can access uh.id.r. 341 something like that. 342 But we are just interested 343 in this thing. 344 So I want to access the id. 345 Now this id, this book ID I have 346 to find in my Database. 347 So books is basically my database. 348 So I'll just say const book equals 349 books, all the books dot find. 350 Okay, I want to find one book where e 351 dot ID is actually equals to the id. 352 So it's kind of a database operation. 353 Do you remember like we do 354 like select star from books. 355 Okay. 356 Where ID equals. 357 So you can just pass 358 in whatever ID you have. 359 So it's basically this kind of 360 a thing that is I'm trying to mimic. 361 Now see, there are two things. 362 One, if there is no book, that means 363 user has given you an ID. 364 Let's say 10 and there 365 is no book with ID 10. 366 In this scenario, what should 367 be the status code 368 404 because it's a not found thing. 369 So return response.status404. 370 Let's send a JSON message which will 371 say an error that I'll just say book 372 with ID that whatever 373 user has given does not exist. 374 Okay, so this kind of an error. 375 But if you find the book, 376 you can just say return 377 response.JSON and just send 378 the book that you have found. 379 Nice. 380 Right? 381 So you have coded it. 382 So now if I say book slash 7 383 error book with ID 7 does not exist. 384 Let me get all the books. 385 So yeah, we have just two books. 386 I want to just get the data 387 for book two slash books slash to 388 enter, and we got an error. 389 Okay, I understand what the error is. 390 The error is actually this 391 ID is a string, okay? 392 Because you are passing 393 this two as a string. 394 So there are two fixes and either 395 you remove one equals, 396 right, because it's a string. 397 Now it will start working. 398 See, in case of five 399 you are getting error. 400 In case of two you get 401 the only book two. 402 In case of one you only get book one. 403 But if you don't specify anything, 404 you will get all the books. 405 Or what you can do is you can 406 basically do a parse end, okay? 407 You can typecast it to a number. 408 Now here you have to put an extra 409 check that if, if the ID is none, 410 that means it's not a number. 411 Maybe user is doing something 412 like slash books, slash A. 413 So A is not a number 414 in this particular scenario. 415 This is a bad request. 416 Now see, now understand this thing. 417 If I say slash book slash 418 A, this is a bad request. 419 A is not an ID, correct. 420 So if you say HTTP status 421 code bad request. 422 So bad request, it's 400. 423 Okay? 424 400. 425 So 400 means bad request. 426 So that means what we can 427 do is I can just say, hey, 428 if it's a not a number. 429 Return response.status400 okay.JSON 430 and let's give a good error message 431 that the ID must be of type number. 432 Okay, that's it. 433 So your ID must be of type number. 434 Now see, if user specifies 435 a, you get an error that 436 hey, it must be a number. 437 If you say six, it doesn't exist. 438 It's a four or four. 439 Right. 440 In case of W, it's a bad request. 441 But in case of two you get it. 442 In case of one you get it. 443 Right. 444 So that's how. 445 And if you don't specify 446 anything, you get all the books. 447 Nice. 448 So this part is also done and we 449 have done this part also. 450 So yeah, you can read it. 451 Okay. 452 Then we have to set up a post 453 route to add a new book. 454 Okay. 455 Now user can even add a new book. 456 So let's continue from here. 457 In the next video, I don't want 458 to increase the length of the video. 459 So right now what I will 460 suggest you is that just try 461 to understand this code, okay? 462 Just try to read this code that 463 what is happening in this code. 464 So I'll just pause the video here. 465 You can just pause the video 466 right here and try 467 to understand line by line 468 for everything what we are doing.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "21-node-book-store-1.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/21-node-book-store-1.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.0062091704,
      -0.001651505,
      0.039376363,
      -0.069249325,
      0.0029756646,
      0.0064747822,
      0.019561322,
      0.013357003,
      0.006022974,
      0.0015292331,
      -0.023120562,
      -0.009045277,
      0.016982153,
      0.024172598,
      0.14626595,
      0.014936666,
      0.0031273353,
      0.0074040242,
      0.011743449,
      -0.048309226,
      0.006815974,
      -0.0032263258,
      0.014187182,
      0.0011620932,
      0.0031986427,
      -0.0072196038,
      0.013633823,
      0.0016394542,
      0.015150068,
      -0.023855943,
      -0.011769027,
      0.00027588464,
      0.004358845,
      -0.00020223571,
      0.0042975103,
      0.0024201327,
      0.0099981995,
      0.0037728031,
      -0.019763572,
      -0.005585129,
      -0.005518928,
      -0.0038741732,
      -0.008515497,
      -0.016036168,
      -0.0023425224,
      -0.0071601453,
      0.0110553885,
      -0.008296258,
      0.0049771857,
      0.0036199961,
      -0.01266267,
      -0.015464541,
      -0.023143757,
      -0.1767214,
      -0.017428683,
      0.014553463,
      0.013298855,
      0.01420442,
      0.012799286,
      0.0012052959,
      -0.011931822,
      0.0074117193,
      -0.044123247,
      0.014105623,
      -0.02590244,
      0.0038099391,
      0.010619162,
      -0.027903428,
      0.013585117,
      -0.0082200905,
      0.010693079,
      0.021507839,
      -0.0059232106,
      -0.035962075,
      -0.01750836,
      -0.02218291,
      0.0088551,
      -0.0076536997,
      0.011218209,
      0.020365184,
      0.01336924,
      -0.018676307,
      -0.012008402,
      -0.007129254,
      -0.025726724,
      -0.0060220347,
      -0.016606398,
      -0.009582096,
      -0.015676538,
      0.006859074,
      -0.006607223,
      0.011188292,
      -0.011599109,
      -0.00036642808,
      -0.012788155,
      0.00033959083,
      -0.009177647,
      0.027027816,
      -0.012223473,
      -0.0022883147,
      0.024825804,
      -0.00012066554,
      -0.022334883,
      0.005899781,
      0.011945368,
      0.031395115,
      -0.009207595,
      -0.00057000504,
      0.029051572,
      -0.010359153,
      0.0000074921286,
      -0.03344064,
      0.010615725,
      0.013545212,
      0.015375426,
      -0.17203532,
      0.023396414,
      -0.015802598,
      0.00033343097,
      0.005648453,
      -0.024508903,
      0.011355038,
      0.017163841,
      0.008950049,
      0.010388533,
      0.0126700485,
      0.0012380178,
      0.03304011,
      0.010648093,
      0.015345669,
      -0.004746253,
      -0.01709127,
      0.019570207,
      0.013039275,
      0.032892983,
      0.017156366,
      -0.0014996377,
      -0.001873549,
      -0.003126818,
      -0.023375466,
      0.0020788556,
      0.039862696,
      0.001840495,
      0.015759526,
      0.0136369495,
      -0.024019727,
      -0.019048521,
      0.029033026,
      -0.011452879,
      -0.022854079,
      0.012794635,
      -0.020564858,
      0.021310477,
      0.011888707,
      0.033386767,
      -0.04243641,
      -0.0012049518,
      0.023499932,
      -0.0055679344,
      -0.0042556096,
      0.006589018,
      0.016791174,
      0.003980123,
      0.040919635,
      0.0060601206,
      -0.009947084,
      -0.016206987,
      0.00806362,
      0.025579872,
      -0.0075609577,
      -0.016584814,
      0.004139383,
      0.008490242,
      0.02027377,
      -0.0023873905,
      -0.015260501,
      0.00012220294,
      0.0035501572,
      0.0025762732,
      -0.019264769,
      -0.00847721,
      -0.0061474303,
      0.007597975,
      -0.0033504935,
      0.02130192,
      -0.0070552435,
      -0.009093798,
      0.006884507,
      -0.0001565782,
      -0.00671465,
      0.009959679,
      -0.0111264605,
      0.0059218374,
      -0.0047801365,
      0.019658606,
      -0.02018195,
      -0.006356239,
      -0.0062120873,
      0.018866902,
      0.015928661,
      0.02401182,
      -0.011225068,
      -0.025905842,
      -0.0058459044,
      0.012875311,
      0.021875052,
      0.019209977,
      -0.029470729,
      0.020722957,
      0.0029142583,
      -0.02185759,
      -0.004499115,
      0.010078432,
      0.006127446,
      0.010175259,
      -0.017468164,
      0.024472363,
      -0.01179087,
      -0.0070735314,
      -0.019963061,
      -0.0048405617,
      -0.0035976772,
      0.019836286,
      0.034853105,
      0.008455978,
      0.008162858,
      0.010969768,
      -0.0032322847,
      0.002224374,
      -0.002934042,
      0.027608495,
      0.010241477,
      -0.00003708255,
      -0.0035437262,
      0.02513821,
      -0.009760116,
      -0.010852236,
      0.01396965,
      0.013751949,
      -0.011183716,
      -0.0034125028,
      -0.006635699,
      -0.0047426526,
      0.007105768,
      0.020823965,
      -0.0022527203,
      -0.022096934,
      -0.003524389,
      0.0015013027,
      -0.013594087,
      -0.02322578,
      -0.0027916275,
      -0.0060101305,
      -0.004671319,
      -0.01586692,
      -0.024998624,
      -0.00944125,
      -0.009347161,
      -0.0026098595,
      -0.017827163,
      -0.023385707,
      -0.021445813,
      -0.018494565,
      0.0015123109,
      0.000918069,
      -0.03265416,
      0.0005978498,
      0.025759341,
      -0.026257755,
      0.0023245513,
      0.00006181862,
      0.00093190605,
      -0.0021226169,
      0.000579801,
      -0.0029397027,
      0.016952045,
      -0.090968706,
      -0.017920569,
      -0.009230468,
      -0.037214667,
      -0.014852205,
      0.022609742,
      0.0062268293,
      0.008987075,
      0.008569474,
      0.017424295,
      -0.01044957,
      -0.009318017,
      0.025761703,
      -0.0070527107,
      0.008771927,
      0.025985854,
      -0.010446659,
      -0.019120134,
      0.013469179,
      -0.026574323,
      0.0019025147,
      -0.005188542,
      -0.007352679,
      0.005855611,
      0.02267302,
      -0.0026173193,
      -0.023198161,
      0.013214433,
      0.022438357,
      -0.016952012,
      0.0040184916,
      0.019656127,
      -0.0073769693,
      0.0013152095,
      -0.015908683,
      0.017306257,
      0.030499661,
      -0.011233878,
      0.019504564,
      -0.017245915,
      0.011855017,
      -0.008001783,
      0.013397524,
      0.010079557,
      -0.011863029,
      0.0023550098,
      0.0023620783,
      -0.010025278,
      -0.017192876,
      0.01221079,
      -0.015116299,
      0.0110019315,
      0.019626236,
      -0.025252858,
      0.016622463,
      -0.010456262,
      0.017056186,
      0.0048383065,
      0.017249981,
      0.001222098,
      -0.0039694444,
      -0.006037226,
      0.015858632,
      -0.0032992843,
      0.014310379,
      0.0031575523,
      -0.008825785,
      0.01422368,
      0.0021018758,
      -0.021114858,
      0.0010982399,
      -0.0064143934,
      -0.023925072,
      -0.02526106,
      -0.003466092,
      0.011338219,
      0.019386621,
      0.011250133,
      -0.031522326,
      0.0014023931,
      0.026964877,
      0.0021596677,
      0.026269713,
      0.03219168,
      -0.0039558443,
      0.0019550456,
      0.0012689305,
      0.0030594224,
      -0.0074245087,
      -0.0028126086,
      0.010430382,
      0.035386767,
      -0.00009908952,
      0.0020235332,
      -0.020561801,
      0.014295432,
      -0.008999779,
      -0.0008429,
      -0.0017866485,
      0.025540018,
      -0.0385744,
      -0.00042701754,
      -0.007155913,
      -0.0025811773,
      -0.0002579689,
      0.021066297,
      -0.0050686006,
      -0.0018898356,
      0.0012605931,
      -0.0033486157,
      -0.012437153,
      0.0108477855,
      0.0060389363,
      0.008221895,
      -0.015853759,
      0.0123133585,
      0.024658088,
      0.008186088,
      -0.0056012063,
      -0.011151922,
      0.0039057576,
      -0.018939763,
      0.0046296255,
      0.0032064742,
      -0.009553079,
      0.011248632,
      -0.034671344,
      -0.0052404017,
      -0.0144695835,
      0.00028981044,
      -0.012124926,
      -0.00071939646,
      -0.020453434,
      -0.019001195,
      -0.008168921,
      -0.00815093,
      0.010531232,
      -0.014236026,
      0.013638489,
      0.0208449,
      -0.0105791455,
      0.007323004,
      -0.006639884,
      -0.0018892612,
      -0.009783083,
      0.012451306,
      -0.0154187465,
      -0.0055348445,
      0.0045908163,
      -0.011787909,
      -0.0052324063,
      -0.005413893,
      -0.014407227,
      -0.004961143,
      0.00054122566,
      0.001688337,
      0.0040483214,
      0.0020221912,
      -0.036512636,
      -0.019529395,
      -0.025946055,
      0.011270624,
      -0.013414138,
      -0.010682186,
      -0.0031066157,
      0.029656686,
      -0.0060385847,
      -0.002398757,
      0.0014578287,
      -0.007777483,
      -0.013327752,
      -0.017688097,
      -0.03054107,
      0.0020689063,
      0.016300885,
      0.0019640808,
      0.00852345,
      -0.020564785,
      0.00634329,
      -0.0069513014,
      -0.0029298214,
      -0.0019727508,
      -0.0027057773,
      -0.001182866,
      0.012251347,
      -0.0046935906,
      0.01388829,
      0.0029346254,
      -0.023932135,
      0.0025315282,
      0.0067015397,
      -0.001118089,
      -0.010242053,
      0.021481518,
      0.023380674,
      0.03736235,
      0.016956227,
      0.0035524531,
      0.0062424066,
      -0.006629513,
      -0.009157575,
      -0.0034808984,
      0.015563595,
      -0.015158512,
      0.01072897,
      0.015673839,
      -0.02248958,
      -0.02548909,
      -0.00047187277,
      0.008606136,
      0.00038333927,
      -0.006825293,
      0.021585593,
      0.0074924813,
      0.036601715,
      0.007815091,
      -0.012511616,
      0.023575686,
      -0.029968638,
      0.0055729966,
      0.014961762,
      -0.00983209,
      -0.010131079,
      -0.008686019,
      -0.0024897184,
      -0.02077536,
      -0.025876364,
      0.0189815,
      0.0011192965,
      -0.011371913,
      -0.0030234957,
      -0.023095304,
      0.032144327,
      0.01906685,
      -0.024272803,
      -0.02483325,
      0.01562218,
      -0.009395717,
      0.0044642007,
      -0.00092691474,
      -0.008882341,
      -0.025113812,
      -0.00049380155,
      -0.003664837,
      0.0018943115,
      -0.0016744455,
      0.007850224,
      0.00083077664,
      -0.017233534,
      0.0042160344,
      0.016796794,
      -0.00076383905,
      0.0040058233,
      -0.009955363,
      -0.010249557,
      0.012389234,
      -0.0023449003,
      0.0060561863,
      -0.0103354715,
      -0.016587673,
      0.01903461,
      0.0011840186,
      -0.005408802,
      0.011233174,
      0.0054377113,
      -0.02568453,
      -0.0070389514,
      0.0030810642,
      0.015799986,
      -0.12603825,
      0.0031507502,
      -0.0011006999,
      -0.01094115,
      -0.02055643,
      -0.006598288,
      0.025046017,
      -0.026229853,
      -0.0058612702,
      -0.013866919,
      0.0024998998,
      -0.0024216375,
      0.0018340425,
      0.021342235,
      0.004181358,
      -0.0148981,
      -0.0068852706,
      0.010256353,
      0.034246217,
      -0.009468792,
      0.00027205984,
      0.010802075,
      0.008666461,
      -0.012873209,
      -0.021868192,
      0.0056354767,
      0.025176998,
      0.009663311,
      -0.0019861988,
      0.010356865,
      -0.01514911,
      -0.017708035,
      -0.00064733496,
      0.010974442,
      0.00638328,
      0.008652811,
      -0.012008718,
      0.008955924,
      0.029400147,
      -0.00055032875,
      0.021356003,
      0.02810045,
      0.017454384,
      0.004096222,
      0.019586198,
      0.031207493,
      0.005440628,
      -0.029605703,
      -0.010985547,
      0.03150129,
      -0.03665875,
      -0.026254153,
      -0.009771429,
      -0.022394404,
      0.016586067,
      0.012914457,
      0.0062046517,
      0.014960071,
      -0.011533444,
      -0.0043992493,
      -0.015607278,
      0.027465025,
      0.001810457,
      0.03379968,
      -0.02084434,
      0.0041604424,
      0.021500127,
      -0.023535335,
      0.012265164,
      0.010950246,
      0.0023161503,
      -0.024115296,
      0.013886678,
      0.015919661,
      -0.0026105384,
      0.0070331204,
      0.00086987886,
      0.021144986,
      0.0007928633,
      0.012967382,
      -0.03323672,
      0.018923469,
      -0.052976564,
      -0.024545524,
      -0.030280577,
      0.0012780706,
      -0.00021773978,
      0.007961042,
      -0.007174337,
      0.027167372,
      -0.0021664505,
      0.00050582725,
      -0.019895457,
      0.0009195664,
      0.01635718,
      -0.014239618,
      -0.022540225,
      0.014954075,
      0.0045398166,
      -0.016654326,
      -0.012514132,
      0.010262804,
      -0.009130804,
      0.004852733,
      -0.002787856,
      -0.013959965,
      0.001975462,
      0.016493827,
      -0.0017901785,
      -0.00016303937,
      0.0037946259,
      -0.011813914,
      0.0035516326,
      -0.15751001,
      -0.0076466105,
      0.0133730285,
      0.006565864,
      -0.0068062693,
      0.0025802893,
      -0.007473929,
      -0.0039455383,
      0.0045418236,
      -0.028690757,
      -0.011910228,
      -0.030262036,
      -0.011863649,
      0.009595352,
      0.013070082,
      0.1258028,
      0.013666004,
      0.01672948,
      0.0051673623,
      0.0073345834,
      -0.024616465,
      -0.0077945213,
      0.001808739,
      -0.0062930537,
      0.013360584,
      -0.008706235,
      0.01692646,
      -0.03425677,
      0.009664245,
      0.007288876,
      0.009557488,
      -0.01033239,
      -0.011021673,
      0.037823986,
      0.013334126,
      -0.0084987525,
      -0.010828672,
      -0.024473356,
      -0.012886523,
      0.0004886094,
      -0.006541153,
      0.0067207906,
      -0.012431245,
      0.02425878,
      0.013289869,
      0.01077598,
      0.0098610725,
      -0.002230032,
      -0.010178251,
      -0.010711717,
      0.024125315,
      -0.0596775,
      -0.005013158,
      -0.016200624,
      -0.020454757,
      0.034122515,
      0.019429559,
      0.011139265,
      0.0061454047,
      0.007319048,
      0.0062624244,
      0.0037492567,
      -0.0036682757,
      -0.00411073,
      -0.0021225228,
      -0.0129914945,
      0.0134919025,
      0.02631428,
      0.026959037,
      -0.016823947,
      -0.004412416,
      0.01067458,
      0.0051388163,
      0.0059933304,
      -0.01887944,
      -0.013124338,
      0.0076709474,
      0.031097472,
      0.0028586069,
      -0.008223124,
      -0.0077460688,
      0.0027744642,
      0.0026435324,
      -0.025810024,
      0.0055118785,
      -0.017332384,
      -0.021590337,
      0.022245517,
      -0.0026540225,
      -0.0071656015,
      0.0072626374,
      -0.0031165273,
      0.002478441,
      0.022229599,
      -0.015786685,
      0.005251558,
      0.0002621783,
      0.022700699,
      0.034346353,
      -0.0026079167,
      -0.011183124,
      -0.016924968,
      0.0028355478,
      -0.016118696,
      0.008276748,
      0.021706972,
      0.01895674,
      0.020625385,
      -0.001462923,
      -0.0010592293
    ]
  },
  {
    "id": "genai_cohort_nodejs_22_node_book_store_2_vtt",
    "content": "Okay, so let's proceed 2 further with our project. 3 So now we have to set 4 up this post route thing. 5 So post route, you have to. 6 Okay, so now this is something 7 that I have to teach you that is 8 really, really, really cool. 9 Now see guys, what happens is when 10 you make a post request, right? 11 So let's go back. 12 When you do a post request, 13 do you remember that you 14 have to even send a body? 15 That you can send a body. 16 Now for this body purpose, that 17 is the actual data, we are 18 again going to use JSON only. 19 That means our backend, sorry, our 20 front end, our client is going to 21 send me the data as a JSON format. 22 Now how will I know 23 that this is JSON? 24 So the client has to set some 25 headers that hey, I'm sending 26 a JSON data on the backend. 27 We will read this JSON data and we 28 will do the operation that means 29 to create something and we will 30 send an acknowledgement, okay, 31 that your post has been created. 32 So now what I will do is I'll just 33 create a post route and app post 34 that if you post something to 35 books, this is where basically you 36 are trying to create some data, 37 right? 38 And let's have request 39 you have response. 40 So what I want to do is as of now, 41 let's just return a response. 42 JSON saying that this is 43 under construction, right? 44 So I'll just send a message, message 45 that this root is under development. 46 Okay, so we have not finished 47 setting up this. 48 What I want to show you is 49 what if I do a console 50 log of request dot data. 51 Sorry, request body. 52 I mean, so let's understand that what 53 this request body will give me if 54 I send some data from the front end. 55 Okay, so npm start working. 56 Good. 57 So now if I make a post 58 request and in the body 59 let's send some data. 60 So let's send test 61 and the value as abc. 62 Okay. 63 Or ancient. 64 You see that what we are getting, 65 you see we are getting an undefined 66 what happened here? 67 Even though I am sending some 68 data and what you will notice 69 is automatically the headers 70 are being set to like JSON. 71 I'll show you that. 72 But can you see that we are getting 73 undefined why the request or body is 74 coming to be undefined even though 75 we are sending this test. 76 Okay, so now let me show 77 you something also. 78 So request console.log request. 79 Headers. 80 Okay, request headers. 81 So let's understand, let's see what 82 is coming from the front end. 83 So if I do an enter, 84 let's understand what happened. 85 I got these headers in Which I have 86 content type application/JSON. 87 So who set this this Thunder client. 88 So it is telling me that hey bro, 89 I am sending you a data which is 90 of type JSON but it is undefined. 91 Oh okay, something is bad going on. 92 Let's send some XML data. 93 Okay, so XML data. 94 Let's or maybe some text data. 95 So this is a test. 96 If I do a send now. 97 So now content type 98 changes to text plane. 99 But still the, still 100 the body is undefined. 101 So what happens is see your backend, 102 your Express has no idea how to 103 like you know, parse how to read 104 this different kinds of data. 105 It can be adjacent data, 106 it can be a plain data. 107 Because it depends 108 on the content type. 109 Correct, it depends 110 on the content type that what kind 111 of content type is coming. 112 And based on that this 113 body has to be processed. 114 So, so for that Express has 115 a concept known as middlewares. 116 Okay so there is a concept 117 known as middlewares. 118 So right now there is no need 119 to understand what are 120 these middlewares, but you 121 can understand that these are 122 something like plugins. 123 So okay, so you can even use 124 Sorry, let me just write plugins. 125 So you can even use some built 126 in plugins of Express. 127 You can install plugins from 128 the npm also and even you 129 can build your own plugins. 130 So there is one plugin, one 131 middleware that is known as 132 a JSON for a JSON parser. 133 So how to use, you have to say 134 app dot use okay app 135 dot use and the plugin name. 136 So application is this app. 137 Okay dot use what I want 138 to use, I want to use Express JSON. 139 So what is this? 140 This is basically a plugin. 141 What this plugin is now doing is 142 that if some data comes from the 143 front end and it has a header that 144 is application/ JSON, it will do 145 all the transformations for me and 146 give me the actual data in the 147 request or body. 148 So this plugin has been installed. 149 Okay, so this is coming from 150 the Express only built in one. 151 So I have basically initialized 152 this middleware I have put up, 153 I have set up one middleware. 154 Now let me just do an npm start. 155 Now if I send a text data you 156 can see I'm getting nothing. 157 Correct, I'm getting nothing 158 because it's a text. 159 Let's try to send a JSON data. 160 Whoa, do you see that I 161 started getting the data. 162 If I do send test anc. 163 Okay, so if I do something like 164 else as A and the value as bbb. 165 So what you can see that 166 I'm getting ANC bbb. 167 So how I am able to get the data 168 now because this plugin installed 169 similarly have plugins 170 for Express, Txt, Express, JSON. 171 But we don't. 172 We just want to have a support 173 for JSON incoming 174 calls, JSON incoming data. 175 So this plugin has to be installed. 176 Okay, so it's kind of a middleware. 177 So I'll show you what 178 is a middleware. 179 We will have a dedicated 180 videos on middleware. 181 Very important topic. 182 Now what I can do is I have the body. 183 So from the body I have 184 to extract some data. 185 Okay, so I'll just say request body. 186 So when you want to create, you have 187 to give me a title and an author. 188 So you have to give me title 189 and you have to give me 190 the author of the book. 191 Now, now what I will do is first 192 of all let's do a validation. 193 If no title is coming or title dot 194 trim or title is actually coming to 195 be, let's say just an empty string. 196 So this is a bad request, right? 197 So return response status 400.JSON 198 and I'll send an error message 199 saying that the title is required. 200 So you know, this is the validation. 201 Okay, good. 202 I'll just copy this piece 203 of code and I'll just repaste it. 204 I hope you can see 205 the code guys, right? 206 I hope it is clear. 207 Then I can just say 208 if no author or author is an empty 209 string in this case I'll 210 just say author is required. 211 Now if you are getting the title, 212 you are getting the author. 213 Now let's create a book. 214 So I can just create a book. 215 So book needs an id. 216 So ID we will generate. 217 How can we generate an id? 218 I can just say take the existing 219 books and calculate the length. 220 So, so first is like id1, then 221 id2, then id3, then id4, 222 then you can put up title and then 223 you can put up author. 224 And finally what I will 225 do is in my database. 226 So books is my database right now. 227 So books dot push the book. 228 Okay, so what this will do, this 229 will keep in the database and I will 230 just say, okay, so first of all 231 I have to return a JSON message. 232 That book created success. 233 Okay, so book created success. 234 And I can send the ID that 235 what is the ID of the book 236 that you just made? 237 So I'll just take the. 238 Let me just compute the ID here. 239 Okay, so ID equals books. 240 Length. 241 Just pass it like this. 242 And just pass the id. 243 And one more thing because 244 now you have created a resource 245 on the backend, it's, a. 246 It's kind of like DB operation. 247 So the status quo for 248 this is not 200 but 201. 249 So this indicates that 250 something has been created. 251 Okay. 252 We have to use the correct 253 status codes because that what 254 makes us a good developer. 255 Now if I go on the back front 256 end, let's try to create a book. 257 Send. 258 Oh, we got a 400 bad request. 259 Title is required, guys. 260 So title. 261 So book is that master node js. 262 Oh, author is also required. 263 Who is the author of this book? 264 None other than Piyush Kirk. 265 Send. 266 Okay, book created success. 267 201 created ID 2. 268 Let's try to get all the books sent. 269 Sorry, not this. 270 Slash books. 271 Right, so slash books. 272 Oh, sorry. 273 I made this book twice. 274 So I have to do a get request. 275 My bad. 276 So now you can see that I'm getting, 277 So this is my mistake. 278 Okay, so we are getting ID as one. 279 We are getting this book. 280 We are getting this book, 281 and we are getting this book. 282 So right now we have four books. 283 Right? 284 And this should not be 285 the case, right, guys? 286 Oh, I. 287 I see. 288 I see. 289 Actually, it should be plus 290 one because, length is fine. 291 Like first will, get first only. 292 So it should be actually 293 length plus one. 294 Okay, so let me just do 295 it again right now. 296 How many books do you have? 297 You have one. 298 You have two. 299 Now what I'll do is I'll just say, 300 let me make a post request send. 301 Book created. 302 Now get request sent. 303 Now you have three books. 304 Let's create one more book. 305 So master react. 306 Okay, cool. 307 Let's create one more book 308 for maybe next year's. 309 And, let's create one 310 more book for Docker. 311 Now if I try to get all the books 312 you have, 1, 2, 3, 4, 5. 313 You have books. 314 Let's. 315 I want to get the details 316 of book four. 317 Okay, so this is the book four. 318 Nice. 319 I want to get the details 320 of book five. 321 Okay. 322 I want to get the details 323 of book six. 324 Nice. 325 Book seven does not exist. 326 Right. 327 So you can see that how we were able 328 to create a post request which does 329 validation creation and then return. 330 Nice. 331 So this is what your post 332 route basically looks like. 333 So, now in this particular video, 334 you have learned one thing new, that 335 you have a lot of plugins and known 336 as middlewares in Express. 337 Okay, how can you use. 338 How can you initialize 339 a plugin using this app. 340 Use think. 341 Okay. 342 And in future, we are also going 343 to create our own middlewares. 344 Okay, now let's quickly Set 345 up this delete route as well. 346 Okay, so delete route. 347 Basically you will pass me an ID 348 and I'll delete that book. 349 So it's somewhat similar 350 to this, only. 351 Okay, so if you want 352 to delete a book, app, 353 dot delete, app, dot delete. 354 So this is the path. 355 So you have to give me 356 the book ID that you want 357 to delete from the database. 358 So request response. 359 So first let's gather the id. 360 So I'll just reuse the logic, right? 361 So this logic can be reused 362 that first of all, get the id 363 from the parameters, I.e. 364 request params.id, 365 parse it as a integer. 366 If it is not a number, then 367 you can throw an error. 368 Once you get it, let's try to, you 369 know, get the index of that book. 370 Okay, so how can I delete? 371 I can just say const index to delete. 372 Okay, so I'll just say books.find 373 index back where e 374 ID is actually equals to the ID. 375 Now if the index to delete 376 is coming less than zero, 377 that is a negative number. 378 This basically means that you 379 were not able to find the book. 380 If you are not able to find 381 the book, it's a 404. 382 It's a 404 that you are trying to 383 delete a book which does not exist. 384 404, right. 385 But if you find, you have to now 386 delete this particular index. 387 How can you delete that? 388 So you can just say books dot 389 and you can just say slice. 390 Okay, so you can just place, 391 start from this index. 392 That is the index to delete 393 and delete how many entries 394 I want to delete one entry. 395 Okay, delete one entry. 396 So this is going to delete one entry. 397 Okay. 398 Inserted new elements in their place, 399 returning the deleted elements. 400 Nice. 401 So this, this basically 402 returns a deleted element. 403 And finally I can just say return, 404 response JSON of 200 405 and I can just say.JSON 406 and the message is, book deleted. 407 Okay, book deleted. 408 So let's try this thing. 409 So now, right now, how 410 many books do I have? 411 See the thing is that it 412 was in, in the memory. 413 So because I refresh the server, 414 I am back to the initial, state. 415 Let's delete this docker book. 416 Okay, so let's first 417 create a book, right? 418 So let's create a docker book. 419 Let's create a, react book. 420 And let's also create a node js. 421 Book node js is already there. 422 Let's create a, 423 maybe docker is there. 424 What else we can get? 425 We can create js. 426 Now let's try to get all the books. 427 Okay, working good. 428 Let's try to get a book by id. 429 Okay, working good. 430 Let's try to delete this book. 431 I want to delete the fourth book. 432 Okay, we got an error scanner 433 set headers after they 434 are sent to the client. 435 Oh, we are missing some 436 return statement. 437 Oh, guys, my bad. 438 See, this should be status, not JSON. 439 My bad. 440 Okay, this should be 441 status, not JSON. 442 Let's do it again. 443 So first we need to 444 create some books. 445 Okay. 446 So create a book. 447 Create a Docker book. 448 Okay. 449 Create a, node js book. 450 Nice. 451 Let's get all the books. 452 You can see that we 453 have couple of books. 454 Let's try to get 455 the book number four. 456 And now I want to delete it. 457 Book deleted. 458 Now if I try to get this book, 459 I should get a 404 because book 460 with four doesn't exist. 461 You can see 1, 2, 3, 462 and then you have five. 463 The book with four deleted. 464 Okay, so this is how 465 basically you can use it. 466 And I, hope you like that. 467 How we have implemented this 468 and is there anything. 469 So these are the routes 470 that we have already done. 471 So yeah, this was a pretty 472 good challenge, right? 473 We have learned a lot of new 474 things in express with this. 475 And that's basically how 476 you will create your APIs. 477 The only difference will be instead 478 of this in memory DB you 479 will have an actual database. 480 It can be MongoDB, it can be. 481 It can be postgres, it can be MySQL, 482 any database that you like.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "22-node-book-store-2.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/22-node-book-store-2.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0073836893,
      0.014196071,
      0.039215337,
      -0.05748973,
      0.0036415365,
      0.0040814863,
      0.026039654,
      0.019995153,
      0.0009938261,
      -0.0055571515,
      -0.0017709673,
      -0.015232063,
      0.005864317,
      -0.00019559496,
      0.13664156,
      -0.01302094,
      0.009259958,
      0.013104888,
      -0.00008571388,
      -0.03497111,
      -0.0033130792,
      -0.014093672,
      0.013618083,
      0.005172211,
      0.003291848,
      -0.0054100747,
      0.009858197,
      0.00902591,
      0.021844173,
      -0.01505593,
      0.0074225874,
      -0.0056488654,
      0.027120477,
      0.011396817,
      0.0022846675,
      0.024007728,
      0.025793703,
      -0.00012792379,
      -0.02007962,
      -0.00767736,
      -0.0021025566,
      -0.0043196836,
      -0.012139968,
      -0.0062379064,
      -0.0016513146,
      -0.0002650609,
      -0.008944937,
      -0.01698288,
      -0.017590376,
      0.0013450996,
      0.0012714264,
      -0.008604202,
      -0.009661774,
      -0.16997312,
      -0.017993182,
      0.005766617,
      0.013276557,
      -0.008314662,
      0.03087359,
      0.0027969526,
      -0.02488653,
      0.011729513,
      -0.025955359,
      0.0039654556,
      -0.02214461,
      0.0049881074,
      0.004613341,
      -0.011881826,
      -0.0006178883,
      0.011575033,
      0.019565484,
      0.03753313,
      -0.011750679,
      -0.018605324,
      -0.016366206,
      -0.006172525,
      0.008508924,
      0.0022022882,
      -0.01803851,
      0.02109812,
      -0.003118332,
      -0.022749277,
      -0.012800041,
      -0.008809369,
      -0.014668192,
      -0.0006175444,
      -0.009232614,
      -0.009920373,
      -0.005444111,
      0.005877662,
      -0.0097763995,
      -0.007746863,
      -0.0033963523,
      0.0066562505,
      0.008130825,
      0.0053414917,
      0.012734389,
      0.023099506,
      -0.01878131,
      -0.004679833,
      0.020314205,
      0.0067709694,
      -0.029140476,
      0.015429172,
      0.001675066,
      0.01526044,
      -0.012426154,
      0.010489038,
      0.02383955,
      -0.015545201,
      0.01824352,
      -0.008559951,
      0.0014068228,
      0.011787289,
      -0.012999303,
      -0.19200173,
      0.030935958,
      -0.004721136,
      0.0073225745,
      0.02028586,
      -0.016133815,
      0.005971208,
      0.0057344628,
      -0.0007828734,
      -0.009091142,
      0.012917285,
      -0.003663409,
      0.03040829,
      0.007964677,
      0.006900456,
      -0.019836657,
      -0.0260302,
      -0.0014228167,
      0.01759945,
      0.013052514,
      0.014022507,
      0.012450962,
      -0.011865732,
      0.0047340416,
      -0.015545488,
      0.015871342,
      0.028014962,
      -0.015673947,
      0.022938976,
      0.017057694,
      -0.014498075,
      -0.02147298,
      0.013017348,
      -0.006278071,
      -0.019175543,
      0.01645955,
      -0.00935632,
      0.014333627,
      0.013198331,
      0.0302557,
      -0.033202346,
      -0.0060358685,
      0.0038414493,
      0.0066677523,
      0.00765566,
      -0.01653131,
      0.0065294006,
      0.0046907524,
      0.020577587,
      -0.0015303375,
      0.004234389,
      -0.01903007,
      0.014483394,
      0.012096721,
      0.00972453,
      -0.0064413357,
      -0.0064861686,
      0.0012603021,
      0.016113212,
      -0.017748142,
      -0.013899664,
      0.005372114,
      -0.000056113397,
      -0.00020575567,
      -0.024407385,
      -0.016716853,
      -0.011751464,
      0.008817386,
      -0.0019340445,
      0.014238638,
      -0.00087642367,
      -0.017313063,
      0.009520549,
      0.0050759,
      -0.02289006,
      0.0019037614,
      -0.0061509926,
      0.014494321,
      -0.014312677,
      0.03197888,
      -0.008902879,
      -0.0065153884,
      -0.010322906,
      0.017674455,
      0.016903568,
      0.019244665,
      -0.0047311424,
      -0.010952838,
      -0.011589025,
      0.013857622,
      0.011872576,
      0.0028208764,
      -0.018034006,
      0.009176343,
      -0.0006551645,
      -0.016920066,
      -0.021884967,
      -0.0035774799,
      -0.014432243,
      0.011340258,
      -0.018996445,
      0.011288117,
      0.004591869,
      -0.009622155,
      -0.03286433,
      -0.010442028,
      -0.015053316,
      0.013514362,
      0.03652402,
      0.008651264,
      0.01010887,
      0.010357018,
      0.0006246793,
      0.01233786,
      -0.025313921,
      0.009643307,
      0.014448871,
      0.00091101363,
      0.0012790943,
      0.026267303,
      -0.0132469535,
      -0.001959186,
      0.011269589,
      0.018086897,
      0.015099835,
      -0.004920119,
      -0.0057082786,
      -0.0001993017,
      0.0018890708,
      0.024896314,
      0.0051901173,
      -0.026803683,
      -0.009340894,
      0.002196528,
      -0.015211435,
      -0.017356085,
      -0.011143907,
      -0.009185973,
      0.004038062,
      -0.000721228,
      -0.02833843,
      -0.016111663,
      0.0016784467,
      -0.010742991,
      -0.0100017665,
      -0.0069901827,
      -0.029644968,
      -0.009018186,
      -0.0047100615,
      0.012409155,
      -0.021178644,
      0.0036656428,
      0.017316319,
      -0.015723083,
      -0.008891719,
      0.024363454,
      -0.0028901126,
      -0.017230231,
      -0.0043275156,
      -0.024915874,
      0.0006717841,
      -0.077452496,
      -0.008096372,
      -0.0029164928,
      -0.028368944,
      -0.009659335,
      0.008585377,
      -0.009677649,
      0.017791007,
      0.0030589097,
      0.010530821,
      -0.017630808,
      -0.0015331003,
      0.028500155,
      -0.016929781,
      -0.019741097,
      0.035073295,
      -0.004461364,
      0.0033881832,
      -0.0006800793,
      -0.016730327,
      0.0012211845,
      -0.011400704,
      -0.0054862956,
      -0.0016540952,
      0.028367367,
      0.025413338,
      -0.025542343,
      0.014186445,
      0.039947752,
      -0.014744211,
      0.006605336,
      0.032186404,
      -0.008945186,
      -0.021775663,
      -0.0060635866,
      -0.009380904,
      0.014255795,
      -0.02393094,
      0.009650834,
      0.0036128825,
      0.004531029,
      0.0019876035,
      -0.0021777046,
      0.012023744,
      -0.021816727,
      0.009865207,
      -0.005867096,
      -0.014555905,
      -0.010256441,
      0.009432358,
      -0.007134013,
      -0.00035834592,
      0.0078055984,
      -0.040763363,
      0.013123554,
      -0.0017487349,
      -0.0042949836,
      0.0043007033,
      0.02444812,
      -0.00974669,
      -0.0065507465,
      0.011773932,
      0.00090721983,
      -0.017331881,
      0.021860361,
      0.013617672,
      0.013492895,
      -0.0048817275,
      -0.014550856,
      -0.009695805,
      0.015398194,
      -0.023363134,
      -0.034849316,
      -0.029456256,
      0.0020107483,
      0.030026501,
      0.013667822,
      0.019308306,
      -0.017262055,
      0.008867851,
      0.003394533,
      0.0034717808,
      0.022338228,
      0.04688677,
      -0.011879304,
      0.006914069,
      0.0007337984,
      -0.002128256,
      -0.0030784693,
      -0.007989942,
      -0.00069109845,
      0.02469766,
      -0.0017822594,
      -0.003296244,
      -0.0055366526,
      0.02251053,
      -0.004093257,
      -0.0047438317,
      -0.0068058497,
      0.009566788,
      -0.019966297,
      -0.0031440223,
      -0.014157759,
      -0.0063644745,
      -0.016839975,
      0.025270814,
      -0.0021134315,
      0.0045227534,
      0.0015916475,
      -0.00051226787,
      0.0018018925,
      -0.005975894,
      -0.015256302,
      -0.00073325174,
      -0.03451078,
      0.035472143,
      0.021007685,
      0.010138553,
      -0.027505413,
      -0.025120264,
      -0.012414876,
      -0.012578612,
      0.00994559,
      0.02190374,
      -0.020157903,
      0.0028275046,
      -0.01993343,
      0.0015803155,
      -0.006728238,
      -0.015141207,
      0.0010404798,
      0.006300136,
      -0.028638773,
      -0.013029184,
      -0.0037463987,
      -0.026496757,
      0.024248857,
      -0.007050077,
      0.021428747,
      0.01728762,
      -0.0124916425,
      -0.002322283,
      0.010747417,
      -0.008582373,
      0.005709311,
      0.014121125,
      -0.01462859,
      -0.0073465314,
      0.01257105,
      -0.00031048228,
      -0.012791325,
      0.004728517,
      -0.011994572,
      0.0026985875,
      0.011819728,
      0.011697513,
      0.014890403,
      -0.0056640636,
      -0.0035793425,
      -0.018669102,
      -0.0069166226,
      0.015803289,
      -0.033672992,
      -0.009376959,
      -0.0024144894,
      0.033096187,
      -0.0027034844,
      -0.0029977781,
      0.0034095834,
      0.0009829077,
      -0.017378258,
      -0.004458625,
      -0.036879852,
      0.0054634386,
      0.008924013,
      -0.0028842047,
      0.0007156611,
      -0.009253465,
      0.017849762,
      0.00952213,
      0.012594619,
      0.007464128,
      -0.034554105,
      0.0034593295,
      -0.000047444126,
      0.020511962,
      0.023135055,
      -0.009386989,
      -0.006426641,
      0.0055953898,
      -0.010383913,
      0.0058745705,
      -0.0075470298,
      0.023352617,
      0.014349841,
      0.028220842,
      0.02366271,
      0.0035042758,
      -0.0030338955,
      -0.002091341,
      -0.01411237,
      -0.001067968,
      0.0074157617,
      0.003369865,
      0.023513913,
      0.0023377535,
      -0.035241988,
      -0.004388016,
      -0.009775481,
      0.0036597247,
      -0.006026511,
      0.013310243,
      0.014129013,
      -0.012064838,
      0.032855023,
      0.010643741,
      -0.0053153844,
      0.015409948,
      -0.020988716,
      -0.013275793,
      0.021885224,
      -0.012268407,
      -0.025440576,
      0.0047343946,
      0.0006995155,
      0.003843934,
      -0.023934115,
      0.008522057,
      0.017467422,
      -0.017236544,
      -0.0105383545,
      -0.0030182444,
      0.032018676,
      0.026182577,
      -0.0010223835,
      -0.016712064,
      0.023910679,
      -0.0070257406,
      0.021584965,
      0.01243293,
      -0.0035389157,
      -0.0041212854,
      -0.010773039,
      -0.012082184,
      0.020149799,
      -0.00078536273,
      0.013537858,
      0.0029135332,
      -0.0026094888,
      0.018597288,
      0.014058091,
      0.020228468,
      0.009539047,
      -0.025746472,
      -0.010944674,
      0.028176779,
      0.009277387,
      0.0014635714,
      -0.015914926,
      -0.0068716966,
      0.0076189535,
      -0.010513819,
      0.009903818,
      0.0042781197,
      -0.0010091871,
      -0.0028798871,
      0.00069693493,
      -0.008420862,
      0.030980438,
      -0.121978804,
      0.00682355,
      -0.0069888327,
      -0.015769687,
      -0.004973206,
      -0.004635764,
      0.03830298,
      -0.03438207,
      -0.009663694,
      -0.022053435,
      -0.0023985945,
      0.0020323116,
      0.0056099365,
      0.030415833,
      0.0055074827,
      -0.00059613044,
      -0.011223073,
      0.033777397,
      0.029147232,
      -0.0072696516,
      0.0032078188,
      0.005630466,
      0.0029159465,
      -0.002914709,
      -0.0070714075,
      0.017231826,
      0.009196182,
      -0.009753307,
      -0.006272669,
      0.018123064,
      -0.014580068,
      -0.01853769,
      -0.0123449825,
      0.002977283,
      0.015201481,
      0.0058409553,
      -0.013522185,
      0.0031736668,
      0.0068127597,
      0.015696827,
      0.034927797,
      0.0154905375,
      0.024012927,
      -0.009735532,
      -0.0016840161,
      -0.003581154,
      0.025588065,
      -0.020879976,
      -0.0058899624,
      0.042286202,
      -0.036270175,
      -0.018015126,
      -0.023832021,
      -0.0030107917,
      0.020025892,
      0.0056987023,
      0.0045264596,
      0.020824369,
      0.012039109,
      0.0015986844,
      -0.012762451,
      -0.001129964,
      0.0017536524,
      0.030858714,
      0.0021921142,
      0.0017119913,
      0.029152172,
      -0.0028960004,
      0.004579236,
      0.0032158901,
      0.014645141,
      -0.013150557,
      0.006172335,
      0.019888852,
      -0.00042136354,
      0.00095506565,
      0.0046959845,
      -0.0027819003,
      0.008149444,
      0.02300626,
      -0.0052409726,
      -0.00047945778,
      -0.06532634,
      -0.029039407,
      -0.01484133,
      -0.0010229466,
      0.027096048,
      0.0129485,
      -0.004430224,
      0.011804385,
      0.0019899262,
      0.008670607,
      -0.010291439,
      -0.018820908,
      0.016337048,
      -0.023552671,
      -0.014766434,
      0.0027159753,
      0.015588368,
      -0.03494817,
      -0.013055823,
      0.000039239563,
      -0.007977633,
      0.0014906056,
      -0.0037036382,
      -0.012968177,
      -0.013871959,
      0.02841975,
      -0.013347876,
      0.022919158,
      -0.0055141007,
      0.003546622,
      0.013249026,
      -0.14752045,
      0.0032912698,
      -0.0037592924,
      0.013291242,
      0.0014578468,
      0.020355707,
      0.0034313942,
      -0.011380205,
      0.013553044,
      -0.038181737,
      0.000030445326,
      -0.022806572,
      -0.025579872,
      0.011496274,
      -0.0066663204,
      0.13827558,
      0.01813084,
      0.009664725,
      0.009074941,
      0.009531005,
      -0.014936144,
      0.005108737,
      -0.012540434,
      -0.024996776,
      -0.004728691,
      -0.0076293955,
      0.000977521,
      -0.02275182,
      0.022812407,
      0.0038182412,
      -0.004861923,
      -0.026913434,
      -0.019608947,
      0.026529934,
      0.00032177955,
      -0.013782534,
      0.016700106,
      -0.018453386,
      -0.0003403419,
      -0.00097463914,
      -0.014115834,
      -0.001625451,
      -0.01310518,
      0.015245404,
      0.0053593996,
      0.01688427,
      0.014789005,
      0.0008926557,
      -0.017330416,
      -0.014174368,
      0.030503675,
      -0.056828253,
      -0.01422817,
      -0.010824689,
      -0.01727051,
      0.026881563,
      0.0057858545,
      0.027412796,
      0.00017480127,
      0.0062184124,
      0.014963568,
      -0.0020366716,
      -0.00325438,
      0.0069188587,
      0.00027590946,
      -0.00939349,
      0.0024590564,
      0.007873052,
      0.027018819,
      -0.0015863155,
      -0.01330563,
      0.0066041206,
      -0.014402263,
      -0.0024402146,
      -0.020540886,
      -0.0018911813,
      -0.008049173,
      0.02005869,
      0.0105803,
      -0.014698199,
      -0.010010719,
      -0.00089747604,
      0.009434726,
      -0.010238326,
      0.017757034,
      0.0011055662,
      -0.015671352,
      0.017112756,
      -0.006391542,
      -0.008497585,
      0.019644178,
      0.006703078,
      -0.0029533394,
      0.028111069,
      -0.010494805,
      0.010712076,
      0.020526424,
      0.00011566603,
      0.027781414,
      -0.00439347,
      -0.016862981,
      -0.018056264,
      0.0035574562,
      -0.029040856,
      0.015300684,
      0.008254598,
      0.013934265,
      0.008205762,
      0.00074931333,
      0.009044765
    ]
  },
  {
    "id": "genai_cohort_nodejs_23_node_express_middlewares_vtt",
    "content": "Hey, guys, and welcome back 2 to another exciting video. 3 And in this particular video, let's 4 cover the topic of middlewares. 5 So this middleware thing in Express 6 is really, really, really powerful 7 and very important to understand. 8 And trust me, I am going 9 to make the understanding 10 of middlewares so easy. 11 Okay, so in the previous, 12 class, or I can say in the previous 13 video, we have built this 14 project that was a bookstore. 15 We have used one middleware 16 that was this express JSON. 17 And kind of, you have at least 18 I think 1 or 2% idea that what 19 this line is doing, right? 20 It is doing some magical 21 things inside it 22 that uses the headers, I.e. 23 content type JSON and converts the 24 body into a JSON and gives us the 25 access as a body so that if there 26 is a, post route, we can use 27 request body to get what is inside 28 the body. 29 Now let's understand 30 that what exactly is a middleware? 31 And now you are going 32 to understand this particular 33 middleware in a more cool way. 34 Okay? 35 Okay. 36 In a more good way, I should say. 37 So let's start with the middleware. 38 So let's say that you have 39 a user and that particular user 40 makes a request, right? 41 Makes a request where? 42 To your Express server. 43 So here is an incoming request 44 to the Express server. 45 Okay? 46 Now what this express server 47 is basically, right? 48 So if I go back, can you see that 49 you are creating an app here? 50 With this Express, you have 51 created an app, and now 52 everything that you do, like you 53 register your routes, you 54 register your middlewares, you 55 listen to this app that is using 56 this app object, correct? 57 That is using this app thing. 58 Now what Express does, Express 59 basically forwards this request or 60 gives the capability to this app 61 thing to handle this request, right? 62 So that means all the requests 63 that comes to your server, that 64 goes to this app variable. 65 So this is kind of your 66 request handler, okay? 67 So this is your 68 request handler thing. 69 Okay, that's good. 70 That's good. 71 Now what this app does, app, 72 basically reads that what kind of 73 incoming request you have, like if 74 it is a post request, if it is a get 75 request, on which path you are 76 sending the request, and smartly and 77 internally it figures out that on 78 which route that the code should be 79 executed, right? 80 So let's say if this was a get 81 route, so let's say that the request 82 was coming to a, get to books. 83 So what this particular 84 route is going to do, what 85 this app is going to do. 86 If the request is coming here, 87 this particular request will be 88 forwarded to the appropriate route. 89 This request will be forwarded 90 to appropriate route 91 in our case, this is the route. 92 So this particular request 93 is basically forwarded. 94 Just one second. 95 So this particular request 96 is forwarded to this route. 97 Similarly, if the request was coming 98 to, let's say, get books one, 99 so what this app will do, this will 100 smartly forward the request to, 101 to this particular function, right? 102 So that means this particular 103 request will be forwarded 104 to this particular route. 105 So these are routes, correct? 106 You have route handlers. 107 So this is the whole 108 purpose of the app. 109 So this is how you have 110 structured your, app right now. 111 And, and this whole part, this whole 112 part is handled by Express, correct? 113 So that means if I rewrite it again, 114 it's like, hey, you have a user, 115 okay, user is making a request. 116 That request goes to the app, okay, 117 that request goes to the app, 118 and app smartly routes the request 119 to the, to the appropriate route. 120 Now what are middlewares? 121 Okay, now in this particular whole 122 chain, where are the middlewares? 123 So what Express allows you to do is. 124 Express says that, hey, bro, 125 in this particular layer in 126 from app to route, you can define 127 your own custom middlewares. 128 Okay, what do I mean by these 129 middlewares is that you can write 130 a piece of code here in between. 131 So let's say that this is my. 132 Some piece of code. 133 So what will happen? 134 Every time this app 135 sends a request, it will not be sent 136 to the route directly. 137 This app, can actually 138 give the request access to you. 139 And then you can internally, 140 like, you know, you can internally 141 do something with this request. 142 For example, maybe you want 143 to log the request, right? 144 You want to log the request 145 to a log.txt file. 146 Maybe you want to do some 147 database operation. 148 So basically what it is 149 doing is it, this lets you 150 write an interceptor, okay? 151 So kind of an interceptor that 152 is sitting in between, 153 it's kind of a man in middle. 154 So there is a man in middle 155 who is between every request. 156 And whenever there's a request, you 157 can execute a custom piece of code. 158 This custom piece of code 159 can do literally anything. 160 A, database operation, some file 161 writing, anything that you want 162 to do, and then you can forward 163 the request to the root, right? 164 So this gives you a capability 165 to do anything between the request. 166 So this particular thing 167 is known as a middleware. 168 So this is what, this 169 is a middleware. 170 Okay, so now you have 171 got that what a middleware means. 172 A middleware is a piece of code 173 that runs in every request and which 174 sits between app and the router. 175 So if there is any request 176 coming to your route, 177 you can have a middleware 178 in between to run that code. 179 Okay? 180 So this was the very simple 181 thing of a middleware. 182 So middleware functions are 183 functions that have access 184 to the request and response and next 185 function in the application 186 request response cycle. 187 Okay? 188 So what middlewares can do, 189 it can execute any code, 190 it can make changes to your 191 request and response. 192 So let's understand 193 what they are saying. 194 Now this particular thing 195 is a very high level 196 understanding of middleware. 197 Now let me show you that 198 what middleware can do. 199 Let's say you have 200 an incoming request, okay? 201 So this is your incoming 202 request from the user. 203 So this request has to finally go 204 to a route, correct? 205 So I have omitted the app 206 and all that thing. 207 So what you can do is, number 208 one, there can be n number 209 of middlewares, okay? 210 It's not necessary that there 211 can be only one middleware. 212 There can be n number of middlewares. 213 So you can have five, you 214 can have 10, you can have 215 15 middlewares, okay? 216 So let's say that I write one 217 middleware here, then I write 218 one middleware here, Then I 219 write one middleware here, THEN 220 I write one middleware here. 221 So right now, how many 222 middlewares do I have? 223 I have four middlewares 224 and these four middlewares are 225 responsible for doing something. 226 Something. 227 For example, maybe this 228 is your JSON parser. 229 Maybe this is for, querying, maybe 230 this is for the validation that 231 if the request is valid or not, 232 maybe you can do something like, 233 hey, if you are a hacker or not, 234 and this can do something like, 235 you know, logging all the 236 requests so you can have multiple 237 middlewares. 238 Okay? 239 Now middlewares, middlewares can 240 do following things, okay? 241 Can do following things. 242 Number one, it can, it can 243 read the request, okay? 244 Number one is that it 245 can read the request. 246 For example, when a request 247 is coming, it will not go 248 to the route, it will go here. 249 And this middleware has full access 250 to the request object that what 251 kind of method it is, what kind of, 252 data it is coming 253 from, where this request is coming. 254 This middleware can read 255 the request, okay? 256 Secondly, this middleware, 257 this middleware, middleware 258 can terminate, or I should say 259 can terminate 260 the request response cycle. 261 Okay, what does this mean? 262 This is, this is 263 very, very important. 264 Okay? 265 This means let's say 266 this middleware was a hacker, 267 checking middleware, okay? 268 So this basically checks 269 that if you're trying 270 to hack something or not. 271 So what this middleware can do 272 when a request comes, let's say 273 request is coming to books, okay? 274 A get request is coming to books. 275 So this Particular middleware has 276 some algorithm written which checks 277 the request and it has detected 278 that, hey, you are a, hacker. 279 Do you want to allow a, hacker 280 to access to this route? 281 Because this is your 282 final code, right? 283 This is the final code that interacts 284 with the database that 285 does all the CRUD operation. 286 So this is your final code. 287 Now, do you want the hacker 288 to reach here? 289 Of course not. 290 Right? 291 You don't want. 292 So this, this middleware right here 293 can even send back the response. 294 This can terminate 295 the request response cycle. 296 This can end the response, 297 and boom, your request 298 response cycle is completed. 299 So user was never able to. 300 Okay, so this basically, you know, 301 rejected the call, or I can 302 say this returned the response. 303 So this middleware will never let 304 this request to go to other 305 middlewares or even to the route. 306 So middlewares can even terminate. 307 Okay, what else middlewares can do? 308 Middlewares, okay? 309 Middlewares can forward the request 310 to other middleware. 311 Okay, so what does this mean 312 if this user is not a hacker? 313 Let's say that this user was 314 fine, this is not a hacker. 315 So after the validation, this 316 middleware can route the request. 317 It can say, hey, I have done my work. 318 Here is the request. 319 Now, now it's time for this 320 particular middleware to execute. 321 Let me just make it like this. 322 So now this middleware will execute. 323 Now let's say that, his duty is 324 to do something, right? 325 So let's say his duty was to log it. 326 So once the logging is done, it 327 can forward the request to him. 328 Now this can do something like, 329 hey, are you logged in or not? 330 If you're not logged in, it 331 can return back, right? 332 Let's say user is not logged 333 in, it can return back 334 that, hey, please log in. 335 But if the user is login, 336 then it can forward the request 337 to another middleware. 338 Then this can do something, and then 339 finally it can call the route. 340 So this is how the middlewares 341 are working, right? 342 One after another. 343 So that means, middlewares always run 344 in sequence, okay, in sequence 345 as they are in the stack. 346 So that means what if this 347 middleware is A, this middleware 348 is B, this middleware is 349 C, this middleware is D. 350 The a middleware can either 351 terminate the request, right, 352 by sending the response back 353 to the user, or it can just 354 forward the request to the B. 355 It cannot directly jump to the C. 356 Okay? 357 So it can forward the request 358 to the next middleware in the stack. 359 So A will say, hey, I have 360 done my work and I allow you 361 to go to the next one. 362 Express will internally 363 forward this request to B. 364 Okay? 365 Now, B can either terminate 366 the response or it can say, 367 okay, I have done my work. 368 I have to forward this 369 request to the next one. 370 So he will be the next one. 371 So now he will do the work. 372 Now he can say, hey, if 373 everything is good, I want 374 to forward it to the next one. 375 If he will say the next 376 one, that is the route. 377 So that means you can just say, 378 that whether you want to pass 379 the request to the next one or 380 do you want to terminate it? 381 Okay, you cannot decide 382 on which middleware it should go. 383 So that is how basically 384 it works, right? 385 Right now you just have one 386 middleware that is app.use, 387 that you are using express JSON. 388 So that means what 389 this thing is doing. 390 Okay, what this particular 391 thing is doing. 392 Let me show you. 393 So right now in our 394 bookstore application. 395 Sorry for that. 396 Right now in our bookstore 397 application, when a request comes, 398 okay, what this middleware 399 does, okay, this middleware. 400 So this is a middleware. 401 If headers have, if headers 402 have content, type application/JSON 403 application, JSON. 404 What it does, it does 405 some parsing, right? 406 This is the logic of this thing. 407 So it will do some parsing and all. 408 And then call the next middleware. 409 It will call the next middleware. 410 Who is the next middleware? 411 Right now, next middleware can 412 again, be a middleware 413 which you have defined. 414 That is possible because 415 this thing has no idea, right? 416 What is the next? 417 It will just say, hey, 418 I have done my work. 419 Call the next one. 420 Now, next one can again be 421 a middleware which you have defined, 422 or it can be a route. 423 So in our case, right now 424 we have a route only. 425 So this calls the route. 426 So right now, can you see 427 any other middleware? 428 No. 429 So what will happen when 430 the request will come, it will 431 first go into this middleware. 432 This middleware will internally 433 call the next function, which is 434 in our case, routes. 435 But what if I create 436 one more middleware here? 437 Let's say middleware A. 438 So what will happen? 439 This can only forward 440 the request to middleware A. 441 And middleware A can decide whether 442 should I forward the request to 443 the routes or should I terminate it. 444 Okay, so can we see 445 the code to this JSON? 446 I, mean, you can see, 447 but yeah, that's fine. 448 Okay, so let me show you that how 449 we can write, our own middleware. 450 So shall we write our own middleware? 451 Let's see. 452 So what I can do is I have 453 to write a middleware here, 454 app dot use, and here you have 455 to Pass A function. 456 Okay, now this function has 457 access to the request. 458 You can read the incoming request. 459 If you want to end the response, 460 you can do this and, the next. 461 Okay, now let's say console log. 462 I am, middleware A. 463 Okay, I'm just saying it that 464 this is middleware A 465 and I just want to do nothing. 466 Can you see that? 467 Neither I am terminating the response 468 nor I'm doing anything. 469 Fine. 470 So what this will do is this is 471 actually holding on to 472 the request and I am not completing 473 the request response cycle. 474 So if I run the server. 475 Okay, let me just run the server 476 now, see what will happen. 477 Now this is very bad thing. 478 Let me just go to my thunder client. 479 If I make a get request 480 on books, what do you see that my 481 request is always stuck. 482 Do you see what happened? 483 That I am in middleware A 484 and this request is stuck. 485 Let's make a request on book one. 486 Okay? 487 So I have to first cancel this 488 request and do it again. 489 I am middleware A 490 and nothing is happening. 491 Nothing is happening. 492 Why? 493 Because this middleware 494 is holding on to the request, right? 495 So nothing is happening. 496 Let's do one thing. 497 Let's just say return response 498 JSON and I'll just say message. 499 Boom. 500 I am, a, middleware. 501 So what this middleware is 502 now doing is it is basically 503 returning the response back. 504 Something like this, right? 505 It is basically returning 506 the response back. 507 It is not letting 508 other middlewares run. 509 So now you will see that no 510 matter what I do, if I go 511 on here, I am a middleware. 512 If I make a get request on this 513 middleware, if I make a post 514 request, I, am a middleware. 515 Can you see that? 516 Always the middleware A is running 517 and it is returning the request. 518 So this middleware in the stack is 519 not allowing the other middlewares 520 or other things to run 521 because you have a early return. 522 What if I want that? 523 Hey, I have done my work. 524 Now I can just say, hey, next. 525 Okay, I can just call 526 the next function like this. 527 So this next function will 528 automatically call whatever 529 is the next thing. 530 If next is the route, it 531 will go to the route. 532 If next is something else, like it's 533 a middleware, it will go there. 534 So now if I run this code, let's 535 say if I make a get request, you can 536 see that we are getting books. 537 Right? 538 We are getting books. 539 Let's say if I make a request 540 to book one, you can see 541 everything is working fine. 542 Okay, let's create 543 one more middleware. 544 So app use again a function 545 request response and next. 546 Okay, now in this scenario, 547 what happens when you 548 have one more middleware? 549 Let's say that this is 550 your middleware B. 551 Okay? 552 Now this is your middleware B. 553 Now this next will 554 call this middleware. 555 If this was not there, then 556 the next is basically your routes. 557 But if you have one more 558 middleware, this next is going 559 to call this middleware. 560 So now let's say this 561 returns a response JSON 562 saying msg, message boom. 563 I am B. 564 So now what will happen is A will 565 console log itself, but it will 566 call the next function, right? 567 Next is this middleware. 568 This middleware will run, but it 569 will always return the response. 570 So that means A will run. 571 B will always return 572 back the response. 573 So now what you will notice is that 574 no matter what you call, you will 575 always get it from the B, right? 576 No matter what you're saying, you 577 can see A and B are running and you 578 are always getting it back. 579 Now let's say I want 580 to pass it, right? 581 I can just say next, right? 582 I want to just pass it. 583 So this will also pass. 584 This will also pass 585 and everything will work. 586 So middlewares will work 587 always in sequence. 588 See A and B. 589 So right now, how many 590 middlewares do you have? 591 You have three middlewares. 592 1, 2, 3 and 3. 593 This middleware does it jobs 594 and calls the next function 595 for this particular middleware. 596 Who is the next? 597 This is the next. 598 Now it does its job that 599 is just a console log and passes 600 to the next one. 601 So this one passes it 602 to the next one. 603 And that is where your roots come. 604 Now let me show you one 605 practical use case. 606 Okay? 607 Do you remember that thing that 608 whenever there was an incoming 609 request, we used to log it. 610 Do you remember that particular code? 611 So what I can do here is I can 612 say app, dot use I will write 613 a function, request response. 614 And next I want to create a log. 615 Okay, so let's create a log. 616 So log basically looks 617 something like this, right? 618 So you will have date do now. 619 And then you can just say, hey, 620 there was a request, 621 method, request method on which path 622 the request was coming. 623 So request path, okay? 624 And you can even do body and all. 625 And then what you can do is you 626 can use the FS module to write. 627 So const fs. 628 Okay? 629 Equals require the FS module 630 and I should actually say node fs. 631 So now what I can do, I can just 632 say fs.append file synchronous, 633 that is logs txt I want 634 to put up this log as UTF8 635 and then call the Next function. 636 So that means anytime 637 the request comes first, the JSON 638 parsing will happen. 639 Then you are going to create 640 a log and then 641 let the appropriate route handler 642 handle that particular request. 643 So now let's. 644 You can see that I 645 don't have any logs. 646 Txt file. 647 Let's get all the books. 648 Okay. 649 Oh, there is a logs. 650 Txt file. 651 Nice. 652 What is there? 653 This thing. 654 Oh, by the way, I again 655 forgot to do a slash N. 656 Okay, so don't forget this. 657 Now let's try to get a book by one. 658 Let's try to get a book by four, 659 which is of course 404. 660 Let's try to make a new book. 661 Right, So a new book 662 has been created. 663 So now if you see your 664 logs, can you see that? 665 Yes, everything is getting loud. 666 So that is the functionality 667 of a middleware. 668 So middlewares. 669 Okay, now if you read back. 670 Okay, now if you go back. 671 Middleware functions are 672 functions that have access 673 to request, object, response, 674 object, and the next function. 675 Right? 676 This is what we have. 677 Understood. 678 Nice. 679 In the applications request response 680 cycle, the next function 681 in the function in the is a function 682 in express which when invoked 683 executes the middleware, 684 succeeding the current middleware. 685 So that means it's saying, hey, 686 every middleware has access 687 to this next function which when 688 executed will call the. 689 Will execute the next middleware in 690 succeeding the current middleware. 691 What middlewares can do, it can 692 execute any code, it can make 693 changes to the request response 694 objects, it can end the request 695 response cycle and it can call 696 the next middleware in the 697 stack. 698 So this is how you can 699 create a middleware app. 700 Like it can. 701 It's a get app. 702 Use. 703 So this is also actually 704 a middleware function. 705 So yeah, you can just ignore it. 706 So let me just show you. 707 So see what they're doing. 708 They are creating a logger. 709 Do you see that? 710 They have created a logger. 711 This does something 712 and calls the next function. 713 Then you can just say app, 714 use my logger. 715 So what is happening is 716 on every request, on every request, 717 this middleware is going to run. 718 That is this one. 719 You are going to do a console 720 log and call the next one. 721 So this is your middleware. 722 Okay, now let me show you 723 some practical examples 724 where we use the middleware. 725 Okay? 726 So moving further, let's say 727 so you will have a request. 728 Okay? 729 So users are going to make 730 a request on some server. 731 So what we can do is when 732 the request will come, we 733 will have a middleware. 734 What this middleware will do. 735 Okay, what this middleware is going 736 to do is this is going to check 737 for the authentication check. 738 Authentication authentication 739 basically means that if user 740 is logged in or not, we can 741 write a logic that if the user 742 is not logged in, right? 743 If the user is not logged in. 744 So I'll just say not logged in. 745 So we are just going 746 to say forbidden. 747 So we are going to say, hey, you 748 have to be logged in, right? 749 So forbidden, please 750 come back logged in. 751 But if the user is logged in, 752 we can forward the request 753 to the appropriate route handler. 754 So this is one example where you 755 want to use a middleware, okay. 756 To protect your APIs. 757 Similarly, you can have one 758 more middleware in this tag 759 that is for authorization. 760 So that means let's say the user 761 is logged in, but now you 762 want to check if it is, if 763 he's authorized to do that. 764 For example, let's say user is 765 logged in, but he's trying 766 to access something which is only 767 restricted to the admins. 768 So what we can do is you 769 are logged in, that's fine, go 770 to the authority. 771 Middleware authority will say, hey, 772 you are not authorized to do this. 773 If you are not authorized, hey, 774 just return back the response. 775 Okay, you can just say you are 776 not authorized to do this, you 777 are logged in, that's fine, 778 but you are not authorized. 779 Okay, but if you are authorized, 780 if you are authorized, then 781 only I, will pass it 782 to the appropriate route handler. 783 So this is how in reality 784 we can use middlewares. 785 Got it. 786 So middlewares ensure safety. 787 The code is good, the code 788 quality remains good. 789 And you can see that how 790 the middlewares are helpful. 791 Okay, so that was all 792 about the middlewares. 793 So now moving further, we are going 794 to be using middlewares. 795 And one thing I really, really, 796 really recommend you is 797 to go through this documentation. 798 So this is nothing. 799 It's basically if you go into 800 the guide and you go in writing 801 a middleware, using a middleware. 802 So you can just click on here 803 and you can just understand 804 that what middlewares are 805 and why they are so useful. 806 Okay. 807 Like you can validate cookies 808 in the middleware, you can do 809 authentication stuff a lot. 810 So don't worry, we will do that. 811 Okay. 812 So I hope you have understood 813 the concept of middlewares in 814 express that how middlewares work.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "23-node-express-middlewares.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/23-node-express-middlewares.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.0051514143,
      0.011948952,
      0.039375406,
      -0.057366993,
      -0.003970338,
      0.009686823,
      0.029619157,
      0.011780721,
      0.015041096,
      0.0065967203,
      0.0059906663,
      0.00049562607,
      -0.0009851306,
      0.017417844,
      0.11929665,
      0.0017335003,
      0.01411136,
      0.0028331322,
      0.008445875,
      -0.040133342,
      0.0010803173,
      0.0029178,
      0.007491206,
      0.011455887,
      -0.008105549,
      0.020765906,
      0.0052917837,
      0.0057806335,
      0.022795204,
      -0.016829439,
      -0.010958117,
      -0.0062950635,
      0.018848125,
      0.022888074,
      -0.01158653,
      0.02968265,
      0.017394803,
      0.008901743,
      -0.029170917,
      -0.019429144,
      -0.022715684,
      -0.015650121,
      0.00007863841,
      -0.0032198618,
      0.012572629,
      0.0027238932,
      -0.014721754,
      -0.020509848,
      0.003799779,
      0.010400889,
      -0.006070806,
      0.00016553947,
      -0.020112028,
      -0.17547259,
      -0.010278778,
      0.012325664,
      0.00287341,
      -0.002414688,
      0.019705916,
      0.009514227,
      -0.03149129,
      -0.0032600374,
      -0.032693923,
      0.018531382,
      -0.022498904,
      -0.0021789528,
      0.010773139,
      -0.009976918,
      -0.0031164198,
      0.0062922905,
      0.009060996,
      0.028387686,
      -0.017011331,
      -0.008693911,
      -0.014240914,
      -0.010485184,
      0.00604163,
      -0.0043992815,
      -0.012743387,
      0.023194337,
      0.014510397,
      -0.0058206674,
      -0.0099196,
      -0.0047002444,
      -0.0016528843,
      -0.0015540968,
      -0.01836557,
      -0.0025530446,
      -0.010585759,
      0.016109103,
      0.0021257557,
      0.0073415902,
      -0.0053924266,
      0.0046327016,
      0.00047360655,
      -0.0030480768,
      -0.013127035,
      0.0077223987,
      -0.013897088,
      0.0012244406,
      0.0087354425,
      0.01536529,
      -0.022284448,
      0.015763205,
      0.010524812,
      0.019949654,
      -0.010334611,
      -0.011076653,
      0.013061285,
      -0.010488802,
      0.010679782,
      -0.005015755,
      0.013299441,
      0.014398928,
      0.00055227417,
      -0.19261386,
      0.03645403,
      -0.010487358,
      -0.0067873546,
      0.024186261,
      -0.017515186,
      0.004740803,
      0.022720499,
      -0.0012464602,
      -0.012816677,
      0.021049999,
      -0.006412438,
      0.038279068,
      0.011896067,
      0.015564786,
      -0.019394865,
      -0.016908538,
      0.013308008,
      0.033663865,
      0.008919051,
      0.009368834,
      0.0055405567,
      -0.012738039,
      -0.011190462,
      -0.010510301,
      0.014026456,
      0.023206556,
      -0.0023528934,
      0.026767457,
      0.020773672,
      0.009334951,
      -0.019764107,
      0.000375263,
      -0.0073182913,
      -0.020436794,
      0.040836856,
      -0.022034787,
      0.0047690747,
      0.013110895,
      0.017407645,
      -0.025788689,
      -0.004411239,
      -0.009701957,
      0.017120652,
      -0.000057059435,
      -0.0011469995,
      0.011040626,
      -0.0027942462,
      0.019443564,
      -0.011671864,
      0.002592543,
      -0.020381812,
      0.02544745,
      0.007633337,
      0.0003437133,
      -0.019639,
      -0.006732536,
      -0.0038763997,
      0.013104779,
      -0.020697474,
      -0.011855696,
      -0.0092735505,
      0.013122578,
      0.012398765,
      -0.02842213,
      -0.017203663,
      -0.006673416,
      0.005769496,
      -0.011027088,
      0.021487907,
      0.0015688635,
      -0.022885123,
      0.008404906,
      -0.0049079373,
      -0.019213185,
      0.013424191,
      -0.014184103,
      -0.01434032,
      -0.0050753267,
      0.007897936,
      -0.016998308,
      -0.00577984,
      0.004231498,
      0.011712631,
      0.027021823,
      0.0032564192,
      0.006592657,
      0.012359302,
      -0.01861115,
      0.016860329,
      0.014983616,
      0.017231304,
      -0.016482674,
      0.0020972672,
      0.033583105,
      -0.01794218,
      -0.012583638,
      -0.01936088,
      -0.022100313,
      0.010337345,
      -0.020128455,
      0.012577817,
      -0.008121595,
      -0.0032540618,
      -0.027465722,
      -0.0074133673,
      -0.007043168,
      0.010997402,
      0.02878488,
      0.0051534516,
      0.013766654,
      0.009380726,
      -0.016188953,
      0.004916537,
      -0.028022233,
      0.014775392,
      0.007030022,
      0.012947744,
      0.010069359,
      0.025869437,
      0.004107612,
      0.006854592,
      0.022534372,
      0.009832556,
      0.009490951,
      -0.0047089444,
      -0.015628435,
      0.0044817743,
      0.004623979,
      0.015745278,
      0.011275377,
      -0.030995568,
      -0.013731404,
      0.00015701145,
      -0.037453312,
      -0.017744672,
      0.0048625404,
      -0.008314127,
      0.004362932,
      0.011500309,
      -0.02139818,
      -0.026607871,
      -0.0042639775,
      -0.0040252674,
      -0.029285884,
      -0.010551621,
      -0.017641792,
      -0.0008402393,
      -0.0002474973,
      0.0073109875,
      -0.009846739,
      -0.0041838256,
      0.029467152,
      -0.018190693,
      -0.0005938033,
      0.020598577,
      -0.0012768744,
      -0.012013614,
      0.0020738898,
      -0.0052234298,
      0.000023707877,
      -0.06785414,
      -0.001389031,
      0.009772895,
      -0.011475513,
      -0.025149785,
      -0.014065294,
      -0.0035837125,
      0.021516006,
      0.013838605,
      0.0010577126,
      0.0016992118,
      0.0028717387,
      0.02635015,
      -0.010911499,
      -0.01367633,
      0.029600548,
      0.0011610806,
      0.0016109716,
      0.010043422,
      -0.016744955,
      0.0024906069,
      0.007832212,
      -0.01138275,
      -0.0035688223,
      0.0193263,
      0.02124887,
      -0.029537765,
      0.0059416527,
      0.03779337,
      0.0019604,
      0.0066335564,
      0.03486236,
      -0.017024137,
      -0.006153436,
      -0.013191296,
      0.020641914,
      0.027564118,
      -0.025615986,
      0.011651714,
      -0.011662023,
      -0.015437998,
      -0.013141108,
      0.008364862,
      0.0094082365,
      -0.00197368,
      0.009086877,
      -0.0010474676,
      -0.008323445,
      -0.011919805,
      0.014549129,
      -0.017917385,
      -0.019353539,
      0.012793036,
      -0.029142616,
      0.01770839,
      -0.008470178,
      0.0065962295,
      -0.0013027545,
      0.023313187,
      0.0048323995,
      -0.0030277139,
      -0.013668657,
      0.0057683135,
      -0.010767466,
      0.020102302,
      -0.0043639624,
      -0.0031507302,
      -0.010112917,
      -0.0037712571,
      -0.021051474,
      0.020125652,
      -0.021827865,
      -0.017717965,
      -0.043352228,
      0.012955836,
      0.011246835,
      0.009139966,
      0.009402423,
      -0.03395859,
      0.009355543,
      -0.0041897804,
      0.0041641775,
      0.005778017,
      0.02673656,
      -0.0024873647,
      -0.006669206,
      -0.0074301963,
      -0.003991571,
      0.0038924941,
      -0.022050528,
      0.0058569224,
      0.0342621,
      -0.018481763,
      -0.0033319485,
      -0.0125835575,
      0.013238836,
      -0.0017147398,
      0.0013930213,
      -0.012374095,
      0.012623546,
      -0.029685317,
      0.012724092,
      -0.024614094,
      0.0021713667,
      -0.023783503,
      0.035641193,
      -0.00084304856,
      0.00077940273,
      0.0003833079,
      0.0033677763,
      0.0032441132,
      0.0025288232,
      -0.032037612,
      -0.011346347,
      -0.040341098,
      0.021305598,
      0.011950906,
      0.00022807227,
      -0.009292518,
      -0.019774511,
      -0.020228593,
      0.00027038943,
      0.013306183,
      0.016781686,
      -0.02612025,
      -0.009209011,
      -0.015594364,
      0.011538192,
      -0.00003766984,
      -0.016322877,
      -0.004506218,
      0.010669666,
      -0.025223037,
      -0.0073832525,
      -0.01714385,
      -0.019163607,
      0.0021703646,
      0.011827293,
      0.017989274,
      0.009564023,
      -0.012692954,
      0.001859846,
      -0.015364579,
      0.0013419155,
      -0.004766562,
      0.011876894,
      -0.027200395,
      0.01591548,
      0.007840421,
      -0.0074174027,
      -0.018268222,
      0.00080991536,
      -0.007837506,
      0.0054408708,
      0.0020655058,
      0.014355965,
      0.0015913929,
      -0.0010209044,
      0.0042177006,
      -0.028501147,
      0.00056216895,
      0.0058670375,
      -0.016231475,
      -0.011132889,
      0.01736112,
      0.036237754,
      0.0062344084,
      -0.002131612,
      -0.007457802,
      0.01170107,
      -0.02050445,
      -0.0054687834,
      -0.039172597,
      0.011139489,
      0.01765825,
      0.007731809,
      0.017657211,
      -0.013508353,
      0.020142723,
      0.0058646854,
      0.0031558494,
      -0.01226773,
      -0.017872663,
      0.013128897,
      0.012093265,
      0.016150532,
      0.013819768,
      -0.0056572235,
      -0.025795443,
      -0.004315933,
      -0.0025200439,
      -0.00508159,
      -0.022925027,
      0.021496406,
      0.026839608,
      0.025838545,
      0.027401347,
      0.0063138516,
      -0.016735163,
      -0.0039230157,
      -0.021300908,
      -0.010715268,
      0.019202055,
      -0.009392903,
      0.0111717805,
      -0.010834068,
      -0.023092678,
      -0.018205876,
      0.002316607,
      0.010956005,
      -0.0058312016,
      0.014928691,
      0.008284596,
      -0.01350282,
      0.023209685,
      -0.0059544574,
      -0.003211245,
      0.016833829,
      -0.037008923,
      -0.012398501,
      0.012485155,
      -0.0014343893,
      -0.011958108,
      -0.009480866,
      -0.007404915,
      -0.0005565706,
      -0.0113426475,
      0.012819136,
      0.026260618,
      -0.013540325,
      -0.005237805,
      -0.009604368,
      0.017724484,
      0.012260228,
      -0.002906623,
      -0.0109492615,
      0.014464614,
      -0.0026327139,
      0.0046302355,
      0.0054178233,
      -0.0010464129,
      -0.02132159,
      -0.005609685,
      -0.008051053,
      0.002153492,
      -0.0150484955,
      0.03177367,
      0.010833324,
      -0.009126104,
      -0.008902644,
      0.019339414,
      0.020603746,
      0.008384479,
      -0.009786425,
      -0.010911585,
      0.038812052,
      0.0023165676,
      0.012876346,
      -0.00247215,
      -0.0034798854,
      0.0035174144,
      0.0057129283,
      0.0050037866,
      0.01965093,
      0.008053659,
      -0.0068942276,
      -0.0061587673,
      -0.0015294767,
      0.020364333,
      -0.11633567,
      0.005897381,
      -0.006464383,
      -0.014536672,
      -0.010214275,
      0.00031150828,
      0.02487869,
      -0.026423723,
      0.00024013552,
      -0.0054454147,
      0.014592171,
      0.016604124,
      0.0015744217,
      0.012380319,
      0.009931775,
      -0.029399686,
      -0.015066506,
      0.022817215,
      0.030708618,
      -0.0101612825,
      0.013800164,
      0.0015892329,
      -0.008844703,
      -0.006836505,
      -0.0013521373,
      0.022867316,
      0.005433321,
      -0.024577882,
      0.007297879,
      0.0011177304,
      0.001953902,
      -0.0028061245,
      -0.012537982,
      0.0095445765,
      0.019178556,
      0.007895244,
      -0.023699576,
      -0.0015037968,
      -0.0010434393,
      0.018987611,
      0.019896086,
      0.004406392,
      0.03468069,
      0.005183365,
      -0.015065651,
      0.008602231,
      0.023276865,
      -0.00037971322,
      0.002371995,
      0.057052627,
      -0.04885028,
      -0.022176208,
      -0.012683844,
      0.0020549789,
      0.0209491,
      0.00017035542,
      0.01959036,
      -0.00064862065,
      -0.010957926,
      -0.009258738,
      -0.0031787467,
      0.008401512,
      0.005693048,
      0.036177658,
      -0.00812489,
      -0.0015803139,
      0.025946427,
      -0.010887199,
      0.0043634656,
      0.0072852727,
      -0.0033792872,
      -0.002530262,
      -0.0024225228,
      0.018640002,
      0.0121259,
      0.019367805,
      0.0002489466,
      0.0020873323,
      0.005239162,
      0.017294636,
      -0.0293875,
      0.0039564893,
      -0.06679089,
      -0.029505832,
      -0.00885662,
      -0.0073188716,
      0.016923793,
      -0.0028729783,
      0.003017612,
      0.0060927393,
      0.008006815,
      0.0067218873,
      -0.026042365,
      -0.019731805,
      0.005875241,
      -0.015867287,
      -0.014477657,
      -0.0064340145,
      0.010520407,
      -0.038500275,
      -0.018499201,
      0.0029795747,
      -0.0006821777,
      0.0040631252,
      -0.002441416,
      -0.017841507,
      0.022321736,
      0.023265067,
      -0.02367605,
      0.022366581,
      -0.0063974718,
      0.005515625,
      0.0005883892,
      -0.14413632,
      -0.011941033,
      0.000915912,
      0.026487172,
      0.0034552026,
      -0.0010163693,
      0.0015117074,
      -0.018088989,
      0.0037769664,
      -0.028739339,
      0.010038001,
      -0.02244923,
      -0.010868998,
      -0.0073980866,
      -0.003092431,
      0.1252087,
      0.013089184,
      0.010231889,
      0.002592601,
      0.008233077,
      -0.02534037,
      -0.0019910256,
      -0.0034737429,
      -0.003264204,
      -0.0038259677,
      -0.021244489,
      0.023735078,
      -0.011887766,
      0.017962594,
      0.023218231,
      0.0038463047,
      -0.032006916,
      -0.028656118,
      0.026000476,
      0.0017206885,
      -0.025681281,
      0.03161147,
      -0.024106992,
      -0.0057990323,
      -0.0115561765,
      0.0025901245,
      0.0037424078,
      -0.013832238,
      0.0037881737,
      0.00038849714,
      0.019224761,
      -0.0011505116,
      0.00999339,
      -0.0120848995,
      -0.008889177,
      0.027512196,
      -0.06345391,
      -0.0076057417,
      -0.014465931,
      -0.015552677,
      0.024930794,
      0.002006894,
      0.034479234,
      -0.005459376,
      -0.017344505,
      0.0045081377,
      -0.00781908,
      -0.0012298599,
      0.0008723721,
      -0.010905828,
      -0.00842463,
      0.010269253,
      0.03413965,
      0.008556859,
      -0.00472913,
      -0.0016973314,
      0.016596615,
      0.0017589786,
      -0.0007655937,
      -0.01836638,
      -0.00081537676,
      0.0038633733,
      0.020015359,
      0.00081530045,
      -0.030363308,
      0.0042881514,
      0.0038905647,
      -0.010757898,
      -0.0017482777,
      0.013943042,
      0.010804839,
      -0.02613412,
      0.013005366,
      -0.002581947,
      0.008188389,
      -0.005743228,
      -0.0012881039,
      -0.024024487,
      0.043364488,
      -0.006054921,
      0.032336857,
      0.009716158,
      0.013274744,
      0.013931325,
      0.008520456,
      -0.006163137,
      -0.019512549,
      -0.010824093,
      -0.015994731,
      0.023184497,
      -0.0063093486,
      0.010341635,
      0.018948069,
      -0.013810756,
      -0.009621373
    ]
  },
  {
    "id": "genai_cohort_nodejs_24_node_express_middleware_2_vtt",
    "content": "Okay, so now that you have a great 2 understanding on middlewares, 3 now there is something that 4 I want to really tell you. 5 Number one, that you 6 can define middlewares. 7 You know about middlewares. 8 You can have two kinds 9 of middlewares, okay? 10 So how middlewares can work. 11 So you can have 12 global middlewares, okay? 13 So global middlewares are middlewares 14 which will run every time. 15 For example, these middlewares will 16 run every time, no matter where, on 17 which route the requester is going. 18 Because you have defined it 19 on your very top. 20 These middlewares will always 21 and always run, right? 22 Secondly, you can have, okay, you 23 can have route level middlewares 24 as a root level middlewares. 25 So root level middlewares. 26 So root level middleware means 27 that, let's say, 28 let me define a function here, okay? 29 Now look at me very closely. 30 What I'm going to do is I'm just 31 going to extract out this function 32 and I'm going to put it here. 33 Okay? 34 So this function is basically 35 a logger middleware. 36 Yes or no? 37 Yeah, this is a logger middleware. 38 And I can pass a reference 39 now here, okay, Because 40 I have extracted it out. 41 So that's fine. 42 Now what I can do is 43 this is a middleware. 44 That's fine. 45 Let's create one more 46 middleware that is function. 47 And I can say custom middleware. 48 Okay. 49 I, mean, I was not able to think 50 of a good name, but yeah. 51 So what I can do is let's say that 52 this is console log, that I 53 am, a, custom middle middleware. 54 And then you can just call 55 the next function, right? 56 So what you can do is, if you try 57 to do this thing that is register. 58 Now, this is a global 59 middleware, right? 60 But what you can do is you 61 can just take out this middleware 62 and put it right here. 63 What this means that, hey, 64 if there is a request on this 65 specific route, first you have 66 to run this middleware. 67 Okay? 68 First you have to 69 run this middleware. 70 Now this middleware again can either 71 get the request right. 72 It can like read the request, 73 modify something. 74 So for this particular middleware, it 75 can either end the request response 76 cycle or, in this particular 77 scenario, the next function will 78 point to this particular function. 79 So that means this middleware. 80 So what will happen when the request 81 will come to this particular route? 82 First this middleware will run, 83 then this middleware will run. 84 Then the request will be matched 85 to this particular route 86 which will run this middleware. 87 And this middleware internally 88 calls the next function, which will 89 eventually invoke this function. 90 You can even have series 91 of middleware. 92 For example, you can 93 even do again logger. 94 Okay, so now first this, then he's 95 his next function will actually 96 point to this logger middleware. 97 This logger middleware's next 98 function, which is this will 99 then point to this one. 100 Got it. 101 So this is also possible. 102 So technically you know what 103 happens if I just remove this. 104 Now this is also middleware only. 105 This thing is also a middleware 106 only, which is only and only running 107 for this particular route. 108 So you can even have a next 109 function and call it. 110 But because it's a final 111 middleware, we just terminate 112 the request response cycle. 113 You get it? 114 This is also kind 115 of a middleware only. 116 The only thing is that 117 we are terminating 118 the request response cycle. 119 Okay, so this is how you can even 120 have route specific middlewares, 121 route level middlewares. 122 And thirdly, you can have, okay, 123 you can have router middlewares, 124 router middle wares. 125 Now this router middlewares. 126 For this you have to first 127 cover the concept of routers 128 in Express, okay? 129 And so that we will cover 130 in the next video. 131 So once we cover the routers, 132 then we can cover the router 133 middlewares as well. 134 But I hope the concept 135 of middleware is not clear to you. 136 So now when you will read this 137 code now you will understand 138 this better that why they 139 have written like app dot get. 140 You know what else you can do? 141 You can even do something like this. 142 Now this is very interesting app. 143 Use you can actually give a path, for 144 example, if it is like slash books. 145 Okay, now you can have 146 a middleware function that is 147 request response and next. 148 Now this particular middleware, 149 this middleware will always 150 run if the path matches this. 151 So even if it is, if it is okay, if 152 it is a get or post or any request, 153 any kind of request on okay, on 154 books, this middleware is going to 155 run because you have given a 156 matching path. 157 So for this particular path, 158 this middleware is going to run. 159 So yeah, this is also possible. 160 Okay, so basically you can even 161 have route level middlewares, 162 router level Middlewares, 163 global middlewares, or you can 164 have a logic to match a 165 middleware only when a specific 166 route is matched. 167 So with this you have completed your 168 middlewares, but you will understand 169 them better once we go into our 170 major project where we will have 171 authentication and authorization. 172 So, so there you will understand 173 the actual use of middlewares. 174 Okay? 175 And yeah, one more thing. 176 Starting with Express, five 177 middleware functions that return 178 a promise call, when they 179 reject, they throw an error.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "24-node-express-middleware-2.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/24-node-express-middleware-2.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.009467265,
      0.009399451,
      0.031482264,
      -0.04569465,
      -0.001671379,
      -0.0014084543,
      0.0152488565,
      0.0151277175,
      0.00041773904,
      -0.00011538753,
      0.008392273,
      0.0028329215,
      0.009695473,
      0.036579743,
      0.12342326,
      0.017286278,
      0.014221356,
      -0.0076370663,
      0.002534601,
      -0.025040764,
      0.008089093,
      -0.010557825,
      -0.0011069583,
      0.00059416634,
      -0.011874009,
      0.016018767,
      0.0062746126,
      0.006566801,
      0.020035319,
      -0.022234352,
      -0.007977728,
      -0.0028621366,
      0.02316674,
      0.02295025,
      -0.015810722,
      0.03182587,
      0.017913727,
      -0.002904739,
      -0.023980023,
      -0.0050913007,
      -0.019840801,
      -0.0050852587,
      0.009471428,
      -0.00759732,
      -0.0031548205,
      0.005593922,
      -0.010995546,
      -0.013933569,
      -0.0029192,
      0.019000074,
      -0.005865669,
      -0.0058085416,
      -0.013964746,
      -0.18064879,
      -0.0033421242,
      0.022213895,
      0.0018313628,
      -0.007640126,
      0.028705684,
      0.014779884,
      -0.020791851,
      0.0012254223,
      -0.045595486,
      0.028598918,
      -0.015428252,
      -0.005158362,
      0.019853117,
      0.014835991,
      0.008046997,
      -0.0040357425,
      0.013381604,
      0.037248842,
      -0.014908383,
      -0.020704903,
      -0.024861623,
      -0.006554712,
      0.021324338,
      -0.008402016,
      -0.0019481835,
      0.033363618,
      0.015100589,
      -0.011447946,
      -0.009784921,
      0.007722595,
      0.000095646865,
      0.006566048,
      -0.026861725,
      -0.0018679479,
      -0.013626127,
      0.013906316,
      0.002828858,
      0.01544237,
      -0.003961289,
      0.004917178,
      -0.008287456,
      0.0030712793,
      -0.009196239,
      0.023573333,
      -0.015369756,
      -0.012512682,
      0.004247875,
      0.01958667,
      -0.010115447,
      -0.0026796204,
      0.004588522,
      0.023140125,
      -0.01661869,
      -0.009292637,
      -0.0004891347,
      -0.0174758,
      -0.008685045,
      0.0075970246,
      0.014211462,
      0.019693715,
      0.006353369,
      -0.19634934,
      0.0293815,
      -0.006222514,
      -0.0006202579,
      0.026678553,
      -0.01793663,
      0.024913456,
      0.022611767,
      -0.0010680137,
      -0.0145731475,
      0.015062538,
      0.0062087313,
      0.027794776,
      0.028520826,
      0.01601589,
      -0.024574308,
      -0.025975747,
      0.011024031,
      0.024849307,
      0.00010286727,
      0.0074287853,
      0.0058036735,
      -0.016068295,
      -0.029566638,
      -0.0052557257,
      0.024501977,
      0.021465437,
      0.002864182,
      0.030325491,
      0.018312922,
      0.004820439,
      -0.018966364,
      -0.009143076,
      -0.015673209,
      -0.027069766,
      0.030138163,
      -0.021059103,
      0.01428344,
      0.011055536,
      0.023449188,
      -0.0208819,
      0.007326069,
      -0.001369042,
      0.025475802,
      0.0042475825,
      -0.002965636,
      0.012076686,
      0.0019763184,
      0.013610124,
      0.007830423,
      0.010321869,
      -0.004810801,
      0.01221361,
      0.0047716373,
      0.0042553847,
      -0.018423753,
      -0.009667427,
      0.002909712,
      0.0114136385,
      -0.025086695,
      -0.005899043,
      0.003290415,
      0.012388313,
      0.009134858,
      -0.023284867,
      -0.014676313,
      -0.0025339338,
      0.01594737,
      -0.0076552494,
      0.014636057,
      -0.0025978617,
      -0.025320875,
      0.008909222,
      -0.0021591862,
      -0.014058782,
      0.011517052,
      -0.008744305,
      -0.013386361,
      0.0053351414,
      0.02372586,
      -0.01136966,
      -0.01251456,
      0.0052260505,
      0.0120023135,
      0.008779909,
      0.009398092,
      0.016061634,
      0.0050064144,
      -0.019557482,
      0.0069344123,
      0.017424274,
      0.01785372,
      -0.013312668,
      0.0016354253,
      0.014159568,
      -0.011540022,
      -0.010946035,
      -0.011176862,
      -0.029026274,
      -0.0018697482,
      -0.016071528,
      0.020608852,
      -0.007426742,
      0.0008845033,
      -0.011864423,
      -0.012556625,
      0.010541895,
      0.016163513,
      0.026730392,
      -0.00081027974,
      0.0138849765,
      0.010664734,
      -0.007419639,
      -0.0033910626,
      -0.0031004748,
      0.030285787,
      0.010479809,
      0.004996905,
      0.0083691375,
      0.035404336,
      0.005909413,
      -0.011817838,
      0.021638019,
      0.00878662,
      0.009046266,
      -0.015954707,
      -0.025552085,
      -0.0057875984,
      -0.007500256,
      0.009592409,
      0.014487535,
      -0.033221655,
      -0.022286521,
      0.000329539,
      -0.03089118,
      -0.017231382,
      0.012432598,
      -0.007963928,
      0.006995541,
      -0.0045921914,
      -0.030392013,
      -0.009825968,
      -0.0066183386,
      -0.0006130818,
      -0.033760183,
      -0.019649135,
      -0.0044577396,
      -0.0041967407,
      0.003435804,
      0.009029264,
      -0.015920667,
      0.0029622957,
      0.030898483,
      -0.026071586,
      -0.0061117224,
      0.01771645,
      0.0076230615,
      -0.0074744103,
      0.005372475,
      -0.0037838083,
      0.007232345,
      -0.06740084,
      0.0048805657,
      0.0042757136,
      -0.006326345,
      -0.011165513,
      0.0009958877,
      -0.01773958,
      0.012659204,
      0.012689629,
      -0.00046159662,
      -0.0013768829,
      -0.012441493,
      0.011418199,
      -0.012915243,
      -0.0064532077,
      0.018099707,
      -0.0042492407,
      -0.0069835,
      0.009888141,
      -0.009656182,
      -0.004590633,
      -0.0035530368,
      -0.025565661,
      0.006969809,
      0.020720182,
      0.031964865,
      -0.022490593,
      0.009109324,
      0.037381623,
      0.004364109,
      0.01025398,
      0.01877796,
      -0.027219314,
      -0.005681294,
      -0.015688933,
      0.009639265,
      0.017831497,
      -0.03125503,
      0.010957987,
      -0.022316577,
      -0.01902633,
      -0.010526571,
      0.007760843,
      0.011237044,
      -0.002786236,
      0.005376221,
      0.010469689,
      -0.00037683203,
      -0.01814807,
      0.0097047165,
      -0.016950788,
      -0.017087873,
      0.014337991,
      -0.022200461,
      0.0098732505,
      -0.01484708,
      0.009550313,
      0.0073173083,
      0.010114163,
      0.0134398695,
      0.010756776,
      -0.0039843163,
      0.01820402,
      -0.0060046804,
      0.029187728,
      0.0085003115,
      -0.010789236,
      -0.012438984,
      0.0027350136,
      -0.016810158,
      0.01909501,
      -0.008362862,
      -0.011994228,
      -0.06036239,
      0.011740263,
      0.008747431,
      0.019459119,
      0.0017821242,
      -0.04096432,
      0.025841456,
      0.009413017,
      -0.0072916746,
      -0.004081946,
      0.03184839,
      -0.002178475,
      0.0014554467,
      -0.014551756,
      0.009161532,
      0.016433615,
      -0.03150886,
      -0.004137765,
      0.02071426,
      -0.004268049,
      -0.006600175,
      -0.022920579,
      0.0049257916,
      -0.004766192,
      -0.009850391,
      -0.013864046,
      0.0053818333,
      -0.04324099,
      0.009564241,
      -0.026859414,
      0.0011275818,
      -0.021849638,
      0.033143736,
      -0.0013913016,
      0.0038473876,
      0.00048322574,
      -0.011429953,
      0.0038545113,
      0.005960924,
      -0.015449398,
      -0.010946922,
      -0.031885855,
      0.038416635,
      0.006356616,
      0.0043415716,
      -0.016037902,
      -0.0036719518,
      -0.0055379164,
      0.009488263,
      0.021773888,
      0.00409852,
      -0.019237852,
      -0.0016160425,
      -0.019531794,
      0.0019187335,
      -0.009932419,
      -0.010515973,
      0.005862411,
      0.006711598,
      -0.025701698,
      -0.017726013,
      -0.0002441335,
      -0.012691069,
      0.0024917505,
      0.009640272,
      0.015358451,
      0.010017583,
      -0.0038264727,
      0.0021927266,
      -0.021763163,
      0.006835019,
      0.003755394,
      0.016019626,
      -0.01241507,
      0.012280149,
      0.012275334,
      -0.010399807,
      -0.02212224,
      0.0023693403,
      -0.007148266,
      -0.0027182077,
      0.01371774,
      0.0000073205388,
      -0.019982625,
      0.0027129222,
      -0.012613742,
      -0.026290236,
      -0.005318417,
      0.0060785473,
      -0.019720074,
      -0.025325563,
      0.017260907,
      0.036863,
      0.00013549722,
      0.0016254167,
      0.0069287573,
      0.0073008277,
      -0.016473087,
      -0.01546318,
      -0.027722942,
      0.01177399,
      0.007942377,
      0.003861017,
      0.01626113,
      -0.02649186,
      0.034427576,
      -0.0025546704,
      0.008746775,
      -0.016404856,
      0.0028008905,
      0.0067097326,
      -0.00010571596,
      -0.0063391435,
      -0.0017866923,
      0.0035248466,
      -0.018534753,
      -0.0010070482,
      -0.006664274,
      -0.009773374,
      -0.02234919,
      0.030452158,
      0.028769946,
      0.025412025,
      0.01966709,
      0.006046011,
      -0.015744133,
      -0.006800297,
      -0.021965485,
      -0.018206514,
      0.0077116867,
      -0.009840418,
      -0.0043197046,
      -0.0011672184,
      -0.009100572,
      -0.008550471,
      -0.0036447628,
      0.016596137,
      -0.00020029115,
      0.011093412,
      0.008475627,
      0.0064626946,
      0.022641204,
      0.005293797,
      -0.004797846,
      0.016660128,
      -0.03471682,
      -0.010686655,
      0.020537248,
      -0.009892992,
      -0.0057578734,
      -0.00008721955,
      0.0023964972,
      0.0033392764,
      -0.01018847,
      0.014381733,
      0.009262801,
      -0.010782902,
      -0.014113764,
      0.0027362842,
      -0.00041793787,
      0.020674372,
      -0.006494725,
      0.0032298083,
      0.014718739,
      0.0049552154,
      -0.0067631453,
      0.0049632746,
      -0.00060564507,
      -0.013527366,
      0.00021688407,
      0.0012625644,
      0.008525267,
      -0.020129329,
      0.0305462,
      0.012349681,
      0.0041187545,
      0.003520383,
      0.01776938,
      0.017335445,
      0.011464492,
      0.0014143909,
      -0.00972116,
      0.0520391,
      -0.0032233968,
      0.0060419873,
      -0.013780628,
      -0.0044151945,
      0.008626496,
      0.014699975,
      0.002766164,
      0.008747924,
      0.012474169,
      -0.015965646,
      -0.00025988082,
      0.00670518,
      0.016729092,
      -0.110881165,
      -0.0015079019,
      -0.025880681,
      -0.011720751,
      -0.008035013,
      -0.0029673558,
      0.014184731,
      -0.01994294,
      -0.011508884,
      -0.002514422,
      0.020581085,
      0.009312889,
      0.0044382843,
      0.006184882,
      0.02032107,
      -0.026756113,
      -0.007153515,
      0.026706325,
      0.0202876,
      0.0029167715,
      0.010069803,
      -0.00846872,
      0.0012579375,
      -0.010004372,
      0.0026153093,
      0.0045572314,
      0.0037804078,
      -0.014369977,
      -0.010886234,
      -0.010221295,
      -0.0025725083,
      -0.0035977708,
      0.00352233,
      0.016926536,
      0.018481992,
      -0.0031105014,
      -0.017069416,
      -0.004955383,
      0.0041533727,
      0.00201203,
      0.012524428,
      -0.0035766372,
      0.049466334,
      0.0036836176,
      -0.019313961,
      0.011155294,
      0.008522379,
      -0.0017805828,
      0.007183745,
      0.05989323,
      -0.047368914,
      -0.024586666,
      -0.0047587156,
      -0.002712827,
      0.02180443,
      0.00081169326,
      0.010729631,
      0.003052585,
      -0.014008674,
      -0.011478011,
      -0.010055065,
      0.0148267625,
      0.003549589,
      0.025830036,
      -0.0136390515,
      -0.008240771,
      0.0077655716,
      -0.014093922,
      0.0052030664,
      -0.0007005582,
      -0.013357278,
      -0.00036043598,
      -0.005250574,
      0.020234955,
      0.006212228,
      0.004528079,
      0.011794187,
      -0.0014654781,
      0.00030593385,
      0.00675256,
      -0.027743086,
      0.0025991118,
      -0.066972926,
      -0.022247849,
      -0.005844759,
      0.0038941489,
      0.008908946,
      -0.0042734295,
      -0.0050374256,
      0.00014410529,
      0.016048547,
      -0.0032760112,
      -0.029512834,
      -0.026470173,
      -0.001898584,
      -0.011791275,
      -0.0120789185,
      -0.006469332,
      0.0034303009,
      -0.03068707,
      -0.0048277928,
      0.0022081966,
      -0.0039494643,
      -0.003947434,
      -0.014336073,
      -0.020144146,
      0.024859153,
      0.026056398,
      -0.02091514,
      0.02837401,
      -0.01562554,
      0.015430959,
      -0.0026694527,
      -0.13687557,
      -0.0030723275,
      0.0012236341,
      0.02888857,
      0.0026331698,
      0.0049925307,
      -0.005851491,
      -0.016984688,
      -0.009056714,
      -0.028658317,
      0.0013430893,
      -0.022173665,
      -0.021182178,
      0.001173087,
      -0.0037821215,
      0.11773434,
      -0.003411163,
      0.0016184017,
      -0.007651359,
      -0.0069262423,
      -0.02041696,
      0.003963569,
      0.0014800449,
      0.0060641207,
      -0.0023750076,
      -0.029318543,
      0.0004251381,
      -0.019425152,
      0.029851852,
      0.00381452,
      -0.010028571,
      -0.03156051,
      -0.019371897,
      0.023777599,
      0.0062132883,
      -0.020411056,
      0.030926062,
      -0.010962364,
      -0.01734568,
      -0.009143876,
      0.009822705,
      0.0035301798,
      -0.01786112,
      0.0019987957,
      0.0069268653,
      0.003162082,
      -0.000036582936,
      -0.007683414,
      0.005768254,
      -0.011512696,
      0.009664952,
      -0.067854464,
      -0.00746177,
      -0.0080511,
      -0.0111566475,
      0.0324534,
      0.006431431,
      0.03238322,
      -0.012359066,
      -0.005472478,
      0.0046753515,
      -0.009735591,
      0.011008236,
      -0.0045310627,
      -0.0041777594,
      -0.022701805,
      0.014079034,
      0.028511899,
      0.024361368,
      -0.013540836,
      0.017467797,
      0.022912094,
      0.0086370455,
      -0.0011495863,
      -0.019583024,
      0.0028855822,
      -0.00015252658,
      0.024107752,
      0.008939048,
      -0.022942679,
      0.006770337,
      0.012617602,
      -0.013088571,
      -0.017853035,
      0.03098447,
      0.013664994,
      -0.026129955,
      0.015643125,
      0.0034626238,
      0.00985846,
      -0.0013211147,
      -0.014905772,
      -0.02989228,
      0.031755242,
      -0.006821475,
      0.029242724,
      0.015142081,
      0.015104318,
      0.016052533,
      0.014279001,
      -0.005585936,
      -0.0055600423,
      -0.010780412,
      -0.018663827,
      0.031062188,
      -0.00061894895,
      -0.0074253064,
      0.00412262,
      -0.008091712,
      -0.01946378
    ]
  },
  {
    "id": "genai_cohort_nodejs_25_node_custom_exports_vtt",
    "content": "Okay, so guys, we are doing 2 really, really, really great. 3 And in this particular video, 4 before moving on to this router, 5 middlewares and all, 6 let's go back to the modules, right? 7 Do you remember that we had 8 a chapter on modules in which 9 we covered that you have 10 like built in modules, right? 11 Built in modules that you can use 12 like node and something like this, 13 like using the require function. 14 Okay, you remember that, right? 15 Then we have talked about 16 third party modules, right? 17 Third party, third party modules. 18 So third party, modules like 19 we are using Express, 20 we are using More of things. 21 Okay, right now let's cover that. 22 How can we create our custom 23 or I can say user defined. 24 Okay, user defined modules. 25 So in this particular video, let's 26 talk about this user defined modules 27 that how can I have a custom module? 28 And just for a refresher, if you 29 remember it was something like I 30 told you, like require and then you 31 can do a dot slash or dot slash. 32 So this is what we are 33 going to cover today. 34 Okay, so this is really important 35 to understand user defined modules 36 in order to understand the router, 37 middleware or routers in express. 38 Okay, so let's create a simple 39 index js file and okay, so what I 40 can do is let's say I have 41 a function, I have a function add. 42 This add function can take 43 two numbers A and B 44 and it returns a plus B. 45 Very simple function, right? 46 Similar to this. 47 Let me just zoom in a little bit 48 similar to this. 49 Let's say you have one more function 50 that is subtract, it takes A and B 51 and returns you A minus B. 52 Okay? 53 Let's say you have one more 54 function that is multiply. 55 And so we'll just create 56 four functions. 57 So let's say you have 58 a multiplication function 59 that is A and B. 60 And this also returns 61 a b to multiply. 62 And then you have a function 63 for division which takes A and B 64 and returns a divided by B. 65 So this is what basically 66 we have credit. 67 Now how can you use 68 this functions, right? 69 You can use it something like 70 hey, console log and you can just 71 say add two and five, right? 72 So now if you run this particular 73 code, you can see that 74 you are getting seven, right? 75 Similarly you can call 76 these functions. 77 Now the problem is or if you see that 78 if you create all the functionality 79 in just one file, your file is 80 getting little bit messy, right? 81 You have a lot of code 82 in just one file and this is 83 not a maintainable code. 84 So in reality you will have a lot 85 of functionalities, lot of features. 86 So usually what we should do 87 is we should, should Move 88 the related features 89 to a module to a separate file. 90 So what I can do is actually 91 I can see that these all 92 functions are related. 93 Like it's a kind of math operation. 94 So I can create a separate 95 file that is math js. 96 And what I can do is I can 97 move these all the functions 98 to this math js file. 99 Now the question arises that if I try 100 to now run this particular code, you 101 will get an error because the add 102 function is not defined, right? 103 You are trying to call the add, 104 and that is not. 105 That is not defined here. 106 So how can I bring this add 107 function to this index js? 108 So for that you have to use 109 module, you have to export. 110 You have to like tell the JavaScript 111 that hey, there is a function add. 112 Please export this function add 113 from here so that 114 the index file can import it. 115 Okay, so it's basically like, see 116 if you want to get something 117 from usa, let's say, or some 118 from from some foreign country, 119 that country should export that 120 material, then only you can 121 import it. 122 If that country is not 123 exporting that material, you 124 cannot import it, right? 125 And if you are not importing, 126 you cannot use it. 127 So now how can we export 128 these functions? 129 So to export these functions 130 you have two methods, okay? 131 You have two ways. 132 Number one is known as named exports. 133 Number two is known 134 as default exports. 135 Okay, default exports, 136 so named exports. 137 Let's first check out 138 the named exports. 139 In named exports you can 140 give your exports a name. 141 For example, this can be 142 a different export, this can be 143 a different export, this can be 144 a different export, and this 145 can be different export. 146 So to do a named exports. 147 Do you remember that when we call 148 node index js or any file, do you 149 remember that wrapper function? 150 Do you remember that wrapper function 151 that internally node js creates 152 a wrapper function, a function. 153 Let's say wrapper and it has exports, 154 it has let's say module, 155 it has your require function. 156 It has underscore, 157 underscore file name. 158 Okay, file name, it has 159 underscore, underscore dername. 160 Do you remember that? 161 Now here, do you see that? 162 Here is your source code, right? 163 Here is your user defined code. 164 User defined code. 165 Do you remember that 166 the first parameter is exports. 167 So using this exports, you can 168 actually do a named export. 169 So what I can do is I have 170 the exports available here, okay, 171 Exports is already available here 172 because of that wrapper function. 173 So I can just say, hey, 174 I want to do exports. 175 Let's give it a name, let's 176 give it my add function. 177 I'm just giving It a name 178 and set it equal to this. 179 So now what is happening? 180 This math js file is exporting a name 181 that is my add function 182 which is equals to this function. 183 So we are just exporting one thing. 184 Now how can we import it here? 185 So to import you have 186 to just say const. 187 Okay, const. 188 Let's say I'll just call it 189 as value equals require. 190 Okay, so let's use 191 the require function. 192 Now you can see that we are 193 not getting the typings. 194 So for that you know 195 what we have to do? 196 So first of all do an npm init 197 and you have to do npm 198 install @ the rate types node. 199 Okay? 200 So that we have the node 201 and yeah, this should be dev 202 dependency, but I have installed 203 it as a normal dependency. 204 So let's move it to a dev dependency. 205 Okay, so yeah, that's fine. 206 Now in this require if I say dot 207 dot basically means the current 208 directory, correct the current 209 directory slash math. 210 So what will happen? 211 There is no need to put js, okay, 212 because of course we are working 213 in JavaScript, so that's fine. 214 So now this value. 215 Now what is this value? 216 Let's try to console log. 217 Okay, Console log the value 218 and let me just remove it. 219 So now if I console log the value. 220 Sorry, node index, node index js. 221 So what you see that this value 222 is basically an object 223 in which you have myadd function, 224 which is actually a function. 225 So that means I can 226 say.myadd function and I 227 can pass 2 and 5, right? 228 So what is happening here is 229 this value is basically whatever you 230 have named it to this require. 231 Now this require will 232 go inside the math. 233 This math has just one named 234 export that is my add function 235 which is equals to this thing. 236 So this my add function you 237 are available here, right? 238 If I name it as add, then here 239 also you have to say it add. 240 So what that is exporting. 241 So now you can see it 242 will continue to work. 243 Similarly what you can do is 244 you can just say exports. 245 Okay, exports 246 uh.subtract equals to this. 247 So so you are now 248 exporting a subtract also. 249 So now you can see that you 250 have add, you have subtract. 251 Now you are exporting two functions. 252 So you can just do a subtract. 253 So this is going to subtract it. 254 That is negative 3. 255 Then let's also do it for others 256 Exports multiply 257 and you can do exports div. 258 So now what you have done is you 259 have done four named exports 260 in this particular file, right? 261 And you can see that this value, 262 whatever you want 263 to call it, dot, has all those 264 four functions, correct? 265 Now, interestingly, okay, 266 interestingly, what you can do is 267 like you can call these functions. 268 That's fine. 269 We have already seen that. 270 And even if you don't want 271 to use this value, you can 272 destructure it directly here. 273 So destructure. 274 So you can see you have add 275 function, you have multiply 276 subtraction function, you have 277 multiplication, you have division. 278 So now there is no need 279 to add this value. 280 You can just directly say add. 281 Okay, so from where this ad is 282 coming, this ad is coming from, 283 from this required, that is do math. 284 That is this particular ad. 285 Okay, what if you were having a, 286 let's say a folder lib. 287 And in this lib you 288 had this math js file. 289 Okay, so what you in this case 290 you have to say dot slash lib. 291 Hey, go into the lib folder 292 and from there get the math. 293 So you have to give the path, 294 you have to give the full path. 295 Got it. 296 Now let's say just for this 297 is just for a demonstration 298 purpose, you have a folder, 299 let's say, you know, test. 300 Inside the test folder 301 you have a folder A. 302 Inside the A folder 303 you have a folder B. 304 And inside the B folder you 305 have some test js file. 306 Now this test js file 307 is doing exports. 308 Dot xyz equals to I am, xyz string. 309 So let's say that math js, okay, 310 math js wants to import this. 311 So what it has to do. 312 Okay, see, first of all you have to. 313 Let's say this is the value require. 314 See, if you do dot slash you can see 315 you are getting nothing because you 316 are currently inside the lib folder. 317 And do you see any other 318 file in the lib folder? 319 No. 320 Let's create a file, let's say S js. 321 Okay, now inside the current you 322 can see that you are getting S. 323 So dot slash means 324 in the current directory. 325 Okay, let me do a dot dot slash. 326 This goes one directory up. 327 So that means go one directory up. 328 That is your root directory. 329 In the root directory you want 330 to go into the test. 331 Inside the test there is a folder 332 A, inside B and inside test. 333 And now if you will check the value 334 for V, you have that XYZ thing here. 335 So this is how your custom exports, 336 your user defined modules work. 337 Got it. 338 So this was your named exports. 339 So let me just delete this test 340 folder, we don't need it. 341 And let me just bring back the math. 342 And now I can just say yes, 343 now VS code is smart. 344 Enough to automatically 345 update my index js file. 346 Okay, so yeah, that's 347 a VS code feature. 348 Okay, so this was your named exports. 349 So for your named export, 350 okay, so what, what is 351 the meaning of this thing? 352 Number one, you have to say exports. 353 Here you can add the name and then 354 here you can have the value. 355 This value can be a function, 356 string or anything. 357 And to use it, to use it, what you 358 have to do is either you can do 359 a destructuring like require 360 d dot slash your module name, 361 okay, whatever is your module name. 362 So either you can destructure 363 the name here, or what you can 364 do is you can just say like const 365 value or any variable. 366 I mean, I'm just calling it value. 367 Let me just copy this and then 368 you can just call value.whatsoever 369 name you have given. 370 So this was your named export, right? 371 This was your named export. 372 Now let's see what is 373 the default export? 374 Okay, let's see what 375 is a default export. 376 Now when you talk about 377 default export, there can be, 378 There can be only one default 379 export in one module. 380 So one js file can only 381 contain one default export. 382 And, default exports don't 383 have any name, okay? 384 So default exports do not. 385 Don't have any name there 386 because they are default, right? 387 That's why. 388 So let me show you what this 389 particular thing means. 390 Okay? 391 So right now, in this particular 392 module, like I have only 393 one module that is math js, 394 you have four named exports. 395 Let's create a default export. 396 So for default export you have 397 to use this module thing. 398 Do you see this module 399 in the wrapper function? 400 This module is used to do 401 a default export, okay? 402 So you can just say module.exports 403 and some value. 404 Okay, so let's say my default 405 export is a function, okay? 406 It's a function that 407 says console dot log. 408 Hey, I am, default. 409 So now what will happen is if I go 410 back now, this is a default export. 411 This one is a default export. 412 Default fault. 413 Now what will happen if I go back? 414 If you're destructuring something, 415 these are coming from the named. 416 But if I just say anything like 417 xyz, okay, am I giving anything? 418 So by default this will actually 419 point to the default export. 420 By default, this will actually 421 point to that default export. 422 You can name it as anything. 423 Seriously, like you can 424 just name it anything. 425 And by default it will always point 426 to that default export. 427 For the rest, you can 428 just destructure them. 429 Add, multiply. 430 So see what is happening right now 431 here is that the default export. 432 If you just give any 433 value here Right? 434 You are not specifying that what 435 you want to export, right? 436 You are not specifying. 437 So what happens is JavaScript 438 gives you the default 439 exported member that. 440 Hey, you are just saying, 441 hey Math, can you please 442 give me the default export? 443 Right, Math will say, hey, by default 444 I just have this default export. 445 So this will give you 446 the access to the value. 447 So now you can see that you 448 are getting the value only. 449 But rest are named exports, right? 450 They have a name. 451 So if you specify 452 the name, let's say div. 453 So this will only give you the div. 454 But because that's 455 a named export, okay? 456 Div is not a function. 457 Oh, just was just one second. 458 So this is what, this 459 is a named export. 460 Okay? 461 So like you can say but for 462 the named export, because this 463 is a named export, right? 464 These are named exports. 465 So now what you can do, you 466 can export them with the name. 467 For example, there's a ad name. 468 Okay, just remove this. 469 So there is a add name, 470 there's a div name. 471 So that, that is the difference 472 between default 473 export and named export. 474 So for named exports you have 475 to, you, you get all the names, 476 so you get an object back. 477 But if there is a default 478 export, the default exports 479 don't have any name. 480 You can just name it anything 481 when you are importing them. 482 So that's a default export. 483 So this is how your 484 custom modules work. 485 So moving further in our project, in 486 that bookstore project, we are going 487 to refactor that particular thing to 488 be a module where we can split the 489 code across the files so that our 490 code is more clean and more 491 maintainable. 492 So I'll meet you in the next video. 493 Until then, bye bye and take care.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "25-node-custom-exports.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/25-node-custom-exports.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      -0.008068048,
      -0.02169122,
      0.04103979,
      -0.045350295,
      -0.017859451,
      0.018257843,
      0.04104726,
      0.015483018,
      0.015573054,
      -0.0033157836,
      -0.011404244,
      -0.001081457,
      0.012190757,
      0.0058376384,
      0.12421467,
      0.0024680975,
      -0.009585427,
      0.0068837292,
      0.010191823,
      -0.030366382,
      0.008396813,
      -0.0043057753,
      0.0054245973,
      0.008254849,
      0.00602597,
      0.00004695801,
      -0.0013259463,
      0.010325357,
      0.034125097,
      -0.03520442,
      0.004380313,
      -0.011661111,
      -0.008071967,
      -0.002895614,
      0.011287879,
      0.017681083,
      0.019715296,
      0.017499987,
      -0.0095788175,
      -0.0012722034,
      -0.011457581,
      -0.0035770936,
      0.006122938,
      -0.02416019,
      0.0076886434,
      -0.013656323,
      -0.0021826143,
      -0.004425725,
      0.00017406684,
      0.023146536,
      -0.0040317876,
      -0.0042346227,
      -0.013166995,
      -0.17013216,
      -0.005361875,
      0.01866431,
      0.0026916387,
      0.00047558182,
      0.026999455,
      -0.00041899463,
      -0.022760041,
      0.021131586,
      -0.04590467,
      0.008053902,
      -0.0018671621,
      -0.0048554363,
      0.0058928006,
      -0.0042362493,
      0.004156163,
      -0.022961115,
      0.033206947,
      0.014496438,
      -0.029516628,
      -0.011665005,
      -0.0379488,
      -0.014637421,
      0.011718309,
      -0.018219171,
      -0.0025004386,
      0.008989499,
      0.00019172198,
      -0.0059760967,
      -0.009621416,
      -0.003871009,
      -0.0047609815,
      0.00736254,
      -0.04736281,
      -0.028881874,
      -0.028275533,
      0.01094854,
      0.000048907175,
      0.0064769755,
      0.0058753258,
      0.00798516,
      -0.0056536943,
      0.012586868,
      -0.011622461,
      0.009489635,
      -0.0172213,
      -0.023305828,
      0.024198513,
      0.011541212,
      -0.035674084,
      0.016195843,
      0.013418319,
      0.0153215425,
      -0.0058187125,
      -0.0112574855,
      0.00752394,
      -0.01802558,
      -0.009553952,
      -0.0094146095,
      0.0014625135,
      0.028533133,
      0.011578928,
      -0.16816743,
      0.009032541,
      0.002421998,
      -0.019001504,
      0.024308022,
      -0.02056194,
      0.01621537,
      0.0061187036,
      -0.006987487,
      -0.004892791,
      0.03136507,
      -0.026215944,
      0.022491988,
      0.020767948,
      0.008836791,
      -0.025261054,
      -0.026615338,
      -0.0041336687,
      0.020190625,
      0.015300041,
      0.020946365,
      -0.0067092725,
      0.005392448,
      -0.010472428,
      0.004723352,
      0.022352919,
      0.011234337,
      0.012098381,
      0.0332307,
      0.014941571,
      0.008685019,
      0.006728793,
      0.016138999,
      -0.02727398,
      -0.041038778,
      0.008472596,
      -0.0150111765,
      -0.0051674815,
      -0.017017027,
      0.027737666,
      -0.02970404,
      -0.0013430994,
      0.0018386405,
      -0.00016152668,
      -0.0016787489,
      -0.0018265916,
      0.0077737193,
      -0.0154167395,
      0.021423467,
      0.0029652303,
      0.0098464,
      -0.015607548,
      0.0254853,
      0.012519642,
      0.034769982,
      -0.007099191,
      -0.009747675,
      0.00021289838,
      -0.0039712107,
      -0.029149434,
      -0.031745058,
      -0.007560293,
      0.0029114352,
      -0.011840573,
      -0.021928433,
      -0.001372937,
      -0.013313752,
      0.052323014,
      0.00027958443,
      0.019019747,
      0.0056347703,
      -0.005158467,
      0.026484458,
      0.022632476,
      -0.018484674,
      0.014486616,
      -0.024370631,
      0.0049774814,
      0.0024242785,
      0.0053148963,
      -0.019110102,
      -0.014520283,
      0.007722172,
      0.019121978,
      0.012982031,
      0.01354362,
      -0.008716954,
      0.0021367446,
      -0.033634327,
      0.01275303,
      0.031041319,
      -0.012007353,
      -0.0005412615,
      0.02072181,
      0.015450252,
      -0.01694091,
      -0.026748823,
      0.018679786,
      -0.013176328,
      0.009908635,
      -0.017495496,
      0.034816895,
      -0.017543714,
      0.002342216,
      -0.02189463,
      0.002488383,
      0.001031505,
      0.009034366,
      0.027993398,
      0.0032823386,
      0.00031022093,
      -0.0076493025,
      -0.010011114,
      0.0018455851,
      0.01074789,
      0.031888478,
      -0.0026021919,
      -0.0062887673,
      -0.0010837002,
      0.009998198,
      -0.0055076424,
      -0.0100670615,
      0.011651157,
      0.0014904144,
      -0.0026789044,
      0.017951703,
      -0.013865147,
      -0.009146358,
      -0.018029967,
      0.038854003,
      0.0021393679,
      -0.02274848,
      -0.0020467704,
      -0.018340359,
      -0.01869049,
      -0.021774463,
      -0.011091784,
      -0.01174481,
      0.0024480852,
      -0.010123399,
      0.00087165914,
      -0.015781306,
      -0.006215111,
      -0.010784062,
      -0.030301945,
      0.0048943004,
      0.0007191645,
      -0.018632231,
      -0.0038720157,
      0.0014788121,
      0.0030576438,
      0.0135689145,
      0.027152764,
      -0.022132019,
      0.011306967,
      0.004906161,
      0.014969018,
      0.016131496,
      -0.0014549398,
      -0.013003221,
      0.008869905,
      -0.094649814,
      -0.019599652,
      0.00957685,
      -0.020227527,
      -0.0007224279,
      0.0068182596,
      -0.01942937,
      0.029143542,
      0.0147424,
      0.01313057,
      -0.018844243,
      0.00084114226,
      0.01632349,
      0.0010625209,
      -0.012593736,
      0.009175054,
      0.01773042,
      0.0014334326,
      0.014430541,
      -0.0038150833,
      -0.016035927,
      0.013837757,
      -0.018707749,
      -0.012492454,
      0.012214022,
      0.0140467575,
      -0.01997866,
      0.016607692,
      0.020979108,
      0.0061792247,
      0.016067252,
      0.02446662,
      -0.011451352,
      -0.008838628,
      0.0010466712,
      0.0017331116,
      0.031850744,
      -0.009365598,
      0.0112758055,
      -0.010935006,
      -0.016964572,
      -0.01859298,
      0.005586058,
      0.006559486,
      -0.003881386,
      0.0037345584,
      -0.0011136639,
      -0.0010017444,
      -0.0104675675,
      0.0060992846,
      -0.023850966,
      -0.00382928,
      0.034575798,
      -0.018657692,
      0.035215337,
      -0.0146809975,
      -0.0055315057,
      0.002825037,
      0.0187487,
      0.019636715,
      -0.0065507824,
      -0.003413136,
      0.019591428,
      -0.01236485,
      0.030282244,
      0.0007585829,
      -0.002929318,
      0.00611164,
      0.0018298343,
      -0.017141474,
      0.0023197238,
      -0.017844291,
      -0.004635442,
      -0.018347211,
      -0.0015225713,
      0.004534826,
      0.034808815,
      -0.0072768107,
      -0.027048793,
      0.02247777,
      0.020793922,
      -0.016992971,
      0.011527917,
      0.029565016,
      0.0057215923,
      -0.01075848,
      -0.023896733,
      0.019440686,
      -0.005918796,
      -0.029456362,
      0.012509702,
      0.018493816,
      -0.013922161,
      -0.0051072123,
      -0.013320967,
      0.017249614,
      -0.02345583,
      -0.009239062,
      -0.011789407,
      0.020421062,
      -0.026484897,
      -0.017946584,
      -0.016281731,
      0.011159904,
      -0.009759617,
      0.02153858,
      0.00811537,
      -0.002150518,
      -0.009152271,
      -0.015270523,
      -0.0006808609,
      -0.021182043,
      -0.027515618,
      -0.00969504,
      -0.013661025,
      0.043037686,
      0.026595563,
      0.04348605,
      -0.0010473513,
      -0.015225405,
      -0.004914899,
      -0.004593583,
      -0.008161612,
      0.0011451028,
      0.0005034837,
      0.008640794,
      -0.0006292161,
      -0.012528738,
      0.00027437886,
      -0.018287798,
      -0.0046134023,
      0.006079948,
      -0.03917282,
      0.00533421,
      -0.0011879846,
      -0.039989915,
      0.023266116,
      -0.008063245,
      0.009220759,
      0.022735659,
      -0.023962123,
      -0.009168879,
      0.01630352,
      -0.022158092,
      -0.00044507554,
      0.012773667,
      -0.01526623,
      0.008415548,
      -0.00029219626,
      0.0023499685,
      -0.0007753655,
      -0.006959617,
      0.007664449,
      0.0039062975,
      0.014010495,
      0.003530058,
      0.025827436,
      0.0035919326,
      -0.013148249,
      -0.0068751643,
      -0.020699348,
      -0.008244588,
      -0.021175602,
      -0.024653528,
      0.018287474,
      0.0032353797,
      0.0002644814,
      0.0043433355,
      -0.004404925,
      0.013679083,
      -0.034376334,
      -0.031244162,
      -0.011277828,
      0.018690828,
      0.009673258,
      0.0032893647,
      0.0021828648,
      0.0045198794,
      0.0077761984,
      0.0039991755,
      -0.013050425,
      -0.002113376,
      -0.018964933,
      0.008256534,
      -0.0047306214,
      0.0016425967,
      0.010451509,
      -0.018520538,
      -0.021225745,
      -0.010846124,
      0.026620163,
      -0.040985502,
      -0.009649211,
      0.013797951,
      0.020382438,
      0.022113673,
      0.012442769,
      0.0059936554,
      0.01234913,
      -0.0062868884,
      -0.025410041,
      -0.012501377,
      -0.007862183,
      -0.00898286,
      0.010484595,
      0.014461642,
      0.002024429,
      0.021413658,
      -0.008044868,
      -0.005940969,
      -0.003480823,
      -0.01607134,
      -0.0019091493,
      -0.0022392033,
      0.010228086,
      0.006058945,
      0.0028732272,
      0.0133562405,
      -0.04181894,
      0.0069880355,
      0.023400994,
      -0.015358459,
      -0.012875901,
      -0.0204148,
      0.009141525,
      -0.016209755,
      -0.01724165,
      0.016316064,
      -0.0019272108,
      -0.009601956,
      0.0023285996,
      -0.0009768935,
      0.007815887,
      -0.0015166893,
      -0.014389427,
      -0.004768241,
      0.010983506,
      0.011837704,
      0.014073947,
      0.010584667,
      0.008908652,
      -0.0064473758,
      -0.0064661284,
      0.01176437,
      -0.009774591,
      -0.018641686,
      0.018364923,
      0.010660302,
      -0.0012593049,
      -0.01045887,
      0.019391742,
      0.019683719,
      0.0023716544,
      -0.0003169459,
      -0.03573659,
      0.041992854,
      -0.0018294692,
      0.012505973,
      -0.026781986,
      0.015353118,
      0.007108856,
      0.021911051,
      -0.008885381,
      0.0018038651,
      -0.00024949375,
      -0.023435717,
      0.0059481272,
      0.0023965344,
      0.027318679,
      -0.10918601,
      0.0102524115,
      -0.0054230825,
      -0.0109757325,
      0.004488463,
      -0.0056428215,
      0.0046580923,
      -0.018161459,
      -0.0021828932,
      -0.006621199,
      0.012681323,
      0.004735007,
      0.013207027,
      0.009293399,
      -0.00078848336,
      -0.015061841,
      0.013326209,
      0.020585747,
      0.03514033,
      0.018828437,
      -0.004373397,
      -0.0059606535,
      -0.011188918,
      -0.012029953,
      -0.017089752,
      0.0105895735,
      0.014981873,
      -0.008059625,
      -0.0226246,
      -0.024616117,
      -0.0072579505,
      -0.013110109,
      -0.0021298523,
      0.00254997,
      0.0064646797,
      0.014769431,
      -0.010793607,
      0.024964875,
      0.017544482,
      0.0026839257,
      0.016068513,
      0.009895382,
      0.020353947,
      0.021064572,
      -0.009667348,
      0.017502578,
      0.025204737,
      0.0006293306,
      -0.009199589,
      0.051628847,
      -0.040351037,
      -0.019028556,
      -0.0068483506,
      -0.009463976,
      0.014006648,
      -0.0048717116,
      0.013868168,
      -0.0022078499,
      -0.00045325645,
      0.012550443,
      0.010153156,
      0.0017058868,
      -0.009851132,
      0.007686437,
      -0.014936592,
      -0.005188863,
      0.0062620775,
      0.0058001825,
      -0.0041169887,
      0.0018626279,
      0.0077373735,
      -0.004626706,
      0.0053988504,
      0.0045420607,
      -0.0029142818,
      0.014020655,
      0.0003993773,
      -0.0050224257,
      -0.009855597,
      -0.007880018,
      -0.005672727,
      0.00043528742,
      -0.064921424,
      -0.011366068,
      0.019000486,
      0.006399102,
      0.014245666,
      0.019512357,
      -0.006898802,
      0.025329998,
      0.019940127,
      0.009529474,
      -0.025564337,
      0.0075429045,
      -0.030281216,
      -0.005739603,
      -0.005107997,
      0.008816261,
      0.009389048,
      -0.016122598,
      -0.008352992,
      0.010642901,
      0.0015855868,
      0.007895144,
      -0.019468334,
      -0.024107223,
      0.017826878,
      0.019240178,
      -0.018775294,
      0.023259498,
      0.009817795,
      -0.011519472,
      0.006287574,
      -0.14636008,
      -0.01724681,
      0.007843087,
      0.008027861,
      -0.0029682936,
      -0.000028937964,
      0.0045310776,
      0.005840176,
      0.0003362293,
      -0.030133031,
      -0.0052803396,
      -0.0290467,
      -0.012054818,
      -0.018982202,
      0.0029561266,
      0.123926476,
      -0.009326777,
      0.023241958,
      0.017186355,
      0.0039822245,
      -0.0077402433,
      -0.013214968,
      -0.0057918793,
      0.032254994,
      0.0076863905,
      -0.008496535,
      0.0053135008,
      -0.007945404,
      0.029261319,
      -0.0029744743,
      -0.0065759146,
      -0.028713038,
      -0.01609286,
      0.016712295,
      -0.0088964645,
      -0.010971402,
      -0.002074714,
      -0.03437735,
      -0.011422747,
      -0.012937223,
      -0.000059951966,
      -0.0043366873,
      -0.008646392,
      0.01340999,
      0.0020634902,
      0.0072663026,
      -0.012311981,
      -0.023800248,
      0.001789613,
      -0.016040923,
      -0.010455395,
      -0.0743522,
      0.006521194,
      -0.005448359,
      0.0017809169,
      0.023022845,
      -0.0016121143,
      -0.0087563,
      -0.011880755,
      -0.020720085,
      0.023142232,
      0.00338733,
      0.018514968,
      0.010517053,
      -0.011706918,
      -0.0132655455,
      0.020139236,
      0.03949874,
      0.025833642,
      0.0039649643,
      -0.01255175,
      0.014229572,
      -0.0053286967,
      0.011386759,
      -0.026273733,
      -0.015955538,
      0.0054630497,
      0.019461317,
      -0.017358555,
      -0.006569399,
      -0.0030696355,
      -0.00016539251,
      -0.01626394,
      -0.024569089,
      0.0051239217,
      -0.0038927435,
      -0.015315327,
      0.027658148,
      -0.012819603,
      -0.018077696,
      -0.0128084505,
      0.008421342,
      -0.015388089,
      0.0132851545,
      -0.012651417,
      -0.0030834067,
      -0.00016568521,
      0.0037520924,
      0.020341486,
      0.0012798145,
      -0.0022195885,
      0.005811417,
      0.008513514,
      -0.00037171776,
      0.013800831,
      0.010022978,
      0.02173489,
      0.017355958,
      0.006963829,
      -0.0051294477
    ]
  },
  {
    "id": "genai_cohort_nodejs_26_node_refactor_book_store_vtt",
    "content": "Okay, so now that you have 2 knowledge about modules and how 3 you can create your own custom 4 modules in Node js, let's start 5 with refactoring our code and move 6 the things, the related content to 7 appropriate, you know, what do you 8 call modules? 9 Okay, so what I have to do is this is 10 the code right now and you can see 11 that what is the state of this code. 12 So what I'm going to do is first 13 of all let's create a module 14 or a folder that is routes. 15 So it's a good practice 16 to get all your, all your 17 routes into this folder. 18 So you can see that these all routes 19 actually contains or actually you 20 know, they match to the books route. 21 Right. 22 So what happens when you 23 are in a real world? 24 There are a lot of routes. 25 Like for example, routes for books, 26 routes for authors, routes for 27 pricing, routes for checking out. 28 So you can see that right 29 now all the routes are actually 30 related to a book. 31 So what I can do is I can 32 actually create a file that is 33 book.routs ts or sorry js. 34 So I'm actually used 35 to the typescript world. 36 So yeah, so book routes js. 37 So here what we can do is we can 38 actually move all our book created 39 routes in this particular file. 40 So for that what we have 41 to do is first of all 42 let's import the express. 43 Okay? 44 And then express gives you 45 a functionality for a router. 46 So you can create a router 47 using Express router. 48 So what this will do is this router, 49 you have created a router here 50 and now what you can do is 51 you can create routes here. 52 Okay, for example, 53 example, let me show you. 54 Let's do it one by one. 55 So what I can do is first 56 of all I want to move this route. 57 Okay, so cut it from here 58 and paste it here. 59 And now you have to use router get. 60 Okay, that is Flashbox. 61 Great, you have moved one. 62 Then let's also move this one. 63 That is router. 64 Now we don't have app, we 65 have to use this router. 66 Okay, so this is a separate router. 67 Then let's also move this one. 68 Okay, so I'll just 69 move this one also. 70 So you can see that 71 this is also moved. 72 And then we can also 73 name it as router. 74 Okay, so router.post 75 route is also moved. 76 And let's also finally 77 move the delete one. 78 Okay, so now all the routers, 79 all the routes are moved. 80 Now what you have to do is 81 this router, is basically 82 handling all the books route. 83 Let's do a default export. 84 So default export of this router, 85 okay, so this router is now 86 default exported from here. 87 So see what we, what you did, you 88 created a new router, you added 89 all the routes to it and you 90 exported this router from here in 91 the index js, which is almost empty. 92 Now what I can do is I can 93 just say first of all 94 let's import that, right? 95 I want to import my custom 96 module or custom router. 97 So that is my book router. 98 So let's call it as book 99 router equals require. 100 And what I can say, I can just 101 say dot slash routes book. 102 So this book router basically is 103 a reference to that router, right? 104 So if I click on here, so you 105 will actually be coming 106 to here because this is what 107 you are exporting from here. 108 Now this book router can be used 109 how I can just say app dot use. 110 Okay. 111 And I can say for all the routes 112 use this book router. 113 So yeah, that's it. 114 So what you have done is you 115 have moved all the book related 116 stuff to this book router. 117 Now there are a couple of more 118 changes that we have to do. 119 Do you see that this slash books 120 is common, do you see the slash 121 books is common in everyone. 122 So what you can do is just remove it. 123 Just remove the slash books 124 at the beginning from everywhere. 125 Okay, so you can see that I have 126 removed everything from here. 127 Nice. 128 Now what you can do is you 129 can actually put just 130 once, that is slash books. 131 So this will tell the express 132 that hey, if there is any 133 route that starts with slash books 134 move delegate that 135 request to this book router. 136 So books get route will match here. 137 Books ID will match here. 138 Slash books post request 139 will match here. 140 And/books id delete will match here. 141 Nice. 142 So this you have moved. 143 Very good. 144 Now one thing. 145 Do you remember that we had 146 this memory, this, this db. 147 Now this DB is here and we are 148 not no longer able to access it. 149 So for that what we can do is I can 150 actually create a folder for db. 151 I mean in reality it will be 152 like a real db but right 153 now we don't have that. 154 So let's call it as book js. 155 And what I can do is I can just cut 156 it from here and paste it here. 157 And I can just say exports. 158 Let's call it as like books 159 equals just an array. 160 So I'm doing a named export 161 here of a books variable 162 which is my actual db. 163 Now inside your router what you 164 can do is let's import that. 165 Right, let's import that. 166 So this is a named export 167 so dot, dot, slash, go 168 one folder up and book. 169 And here you got the books. 170 Now what you can do all 171 the operations you have 172 to do on this books, right? 173 So this is one place 174 where we have to change. 175 Then this is where we have to change. 176 Then books, push then. 177 Then you have to change it here, 178 then you have to change it here. 179 And yeah, that's it. 180 So all the changes are done. 181 And yeah, one more thing. 182 Books. 183 Cool. 184 Okay, let's come back to the index. 185 Now the middlewares, right? 186 Let's remove this middleware. 187 This was just a custom middleware, 188 so no need to worry about that. 189 So you can see that we have a logger 190 middleware which we are using here. 191 Now this middlewares can also be 192 moved to a separate file, right? 193 Middlewares. 194 Okay. 195 So I can create a middleware 196 for let's say logging purpose. 197 So logger, js. 198 So what I can do, I can just take 199 up this middleware, cut it from 200 here, extract the logic here and 201 do a exports dot and just say 202 that exports logger middleware is 203 actually equals to a function, 204 right? 205 And that's it. 206 So now what we can do is because 207 this is exported from here, we have 208 to import this logger middleware. 209 So how can I do that? 210 I can just say all the middlewares 211 I can import here. 212 So const something equals require 213 to dot, slash, middleware logger. 214 So let's call it as log. 215 There is there is one named export 216 that is logger middleware. 217 So yeah, this is also done nice 218 routes middlewares. 219 This FS module is no longer 220 not, required here. 221 It is actually required 222 in the middleware. 223 Right, because this is 224 where we are using the fs. 225 So yeah, don't forget 226 to import the FS here. 227 So const. 228 Const FS equals require the node fs. 229 Right. 230 So this FS is actually 231 getting used here. 232 So this is also done. 233 Okay, I hope there is 234 nothing that we have left. 235 And let's go back to the index js. 236 So you have this thing, you have this 237 thing, you have this thing and. 238 Very cool. 239 Right. 240 So now you can see that our 241 code is actually splitted 242 into the multiple files. 243 Let me give you a walkthrough. 244 Let me just delete this file also. 245 First, your index js. 246 This is your main file, your entry 247 point where everything will start. 248 So this will actually 249 do an initialization. 250 So you have an app. 251 You are registering your middlewares, 252 you are registering your routes. 253 Any route that matches 254 books will go into this book router. 255 Right. 256 So this book router is basically 257 coming from this routes file. 258 That is book routes, 259 this routes, these all things 260 actually contains routes. 261 That is for the books. 262 Correct. 263 So now you can see that you have 264 a get route, you have a post route. 265 So all the routes, are given here. 266 Now one thing that you can do is you 267 can even extract out this logic. 268 Do you see? 269 This logic can be also extracted 270 to a different thing that 271 is known as a controller. 272 Okay. 273 So you can define a controller. 274 So we'll talk about 275 the MVC architecture model 276 view controller there. 277 You will understand this thing. 278 But right now this part is fine. 279 Let's test our implementation. 280 So npm start. 281 So if I go into the Thunder 282 client, let's see if 283 everything is working fine. 284 Right? 285 So if I try to get the all the books. 286 Yeah, you can see we are 287 getting all the books, right? 288 Cool. 289 Let's try to create a book. 290 Yeah, book creation is a success. 291 Let's try to get the book. 292 So you can see that now 293 I have three books. 294 Let's try to get the book three. 295 So I'm getting the book three only. 296 Let's try to delete 297 the book number two. 298 Okay, so book two, books slash two. 299 Okay, we have to make 300 a delete request. 301 My bad. 302 So delete request. 303 Book is deleted. 304 Let's now try to get it. 305 We should get a 404. 306 And if I try to get all 307 the books right, you can see 308 that book two is not there. 309 Nice guys. 310 You have actually successfully 311 refactored your code in a very great 312 way and congratulations. 313 Now you know how to work 314 with model modules and how 315 to structure your code. 316 Moving further, what we are going 317 to do is we are actually going 318 to write code in our different, 319 different files so that it is 320 easier to read, easier to 321 maintain, and we follow the best 322 practices.",
    "metadata": {
      "course": "genai-cohort",
      "chapter": "nodejs",
      "filename": "26-node-refactor-book-store.vtt",
      "originalPath": "genai-cohort/nodejs/01 Subtitles(01-26)/26-node-refactor-book-store.vtt",
      "type": ".vtt",
      "isChunk": false,
      "chunkIndex": 0,
      "totalChunks": 1
    },
    "embedding": [
      0.003554108,
      -0.01770661,
      0.039999023,
      -0.053424202,
      0.0000064819096,
      0.006574799,
      0.03229949,
      0.026433833,
      -0.010877701,
      -0.00704104,
      -0.0071851173,
      -0.010604088,
      0.028397042,
      0.0167881,
      0.13495485,
      0.01504566,
      0.0036184539,
      0.013406119,
      0.010763841,
      -0.039743,
      0.002153979,
      -0.008036735,
      -0.000109408444,
      0.0070476555,
      0.01743446,
      0.0045781615,
      0.015527892,
      0.0013724071,
      0.0197905,
      -0.030795401,
      0.008311892,
      0.0008399442,
      0.008027362,
      -0.0040228805,
      -0.0015711434,
      0.0121306805,
      0.009890471,
      0.006747646,
      -0.03512033,
      -0.008309801,
      -0.0060077603,
      0.0041697146,
      -0.008068724,
      -0.012809626,
      -0.0005429293,
      -0.006015338,
      0.0028289142,
      -0.020113703,
      -0.0013686583,
      0.02883303,
      -0.008284295,
      -0.025675334,
      -0.018207315,
      -0.1777659,
      -0.0022887085,
      0.01778346,
      0.011860218,
      0.0055058007,
      0.016842168,
      0.009302128,
      -0.029410878,
      0.0026073821,
      -0.034514833,
      0.021744266,
      -0.023910925,
      -0.013050955,
      0.011835351,
      -0.017559348,
      0.0013775423,
      -0.011730846,
      0.0008113447,
      0.02580269,
      -0.029349731,
      -0.011765795,
      -0.0165104,
      -0.012357187,
      0.00015800132,
      -0.005422744,
      -0.0028631466,
      0.028658226,
      0.0067891786,
      0.00033899565,
      -0.021864543,
      -0.0031904958,
      -0.018841887,
      0.006077214,
      -0.029731771,
      -0.0156905,
      -0.023062287,
      0.019398162,
      -0.005601517,
      0.019972365,
      -0.00932898,
      0.0069509004,
      -0.005805799,
      0.011220555,
      0.006236525,
      0.0141435955,
      -0.006188525,
      -0.02476289,
      0.018924871,
      0.012927904,
      -0.032449245,
      0.015826099,
      0.009906453,
      0.030611744,
      -0.017142428,
      0.000087706394,
      0.03219125,
      -0.009864381,
      -0.008254637,
      -0.0052118013,
      -0.0030904321,
      0.012557734,
      0.008421452,
      -0.17887199,
      0.018585974,
      -0.006636968,
      -0.015248519,
      0.014193982,
      -0.005307337,
      0.026816355,
      0.011196541,
      -0.011913843,
      -0.0066640317,
      0.024116099,
      -0.0098767895,
      0.02536579,
      0.01585871,
      0.010090176,
      -0.019378789,
      -0.021130292,
      0.0054387082,
      0.02198589,
      0.0131041575,
      0.014022659,
      0.00845569,
      -0.0076122805,
      0.0006069808,
      -0.009077614,
      0.012611615,
      0.031892072,
      -0.0053179865,
      0.028210502,
      0.0055669365,
      -0.0074629537,
      -0.017378116,
      0.019107522,
      -0.023763616,
      -0.03637468,
      0.014117229,
      -0.017208572,
      0.012821269,
      0.008984242,
      0.019040298,
      -0.03513146,
      0.0008567373,
      0.0015740477,
      0.0051318305,
      0.008199256,
      0.0063218465,
      0.023563284,
      -0.0042784223,
      0.029303133,
      0.016112406,
      0.018925777,
      -0.010171409,
      0.011409108,
      0.0149356825,
      0.015615572,
      -0.023744168,
      -0.011129119,
      0.009221644,
      0.013819633,
      -0.008434727,
      -0.02297472,
      -0.016627312,
      -0.006463379,
      0.0047864565,
      -0.027592704,
      0.0021006756,
      -0.024556244,
      0.028275851,
      -0.009004168,
      0.010288573,
      -0.006546216,
      -0.02767625,
      0.009378677,
      0.002561767,
      -0.015846321,
      0.022253191,
      -0.018506335,
      0.0066338,
      -0.015653647,
      0.018385598,
      -0.016857596,
      0.01811785,
      0.0105506,
      0.018301811,
      0.024648912,
      0.02556338,
      -0.0033051556,
      -0.009137598,
      -0.014297746,
      0.009197848,
      0.030661914,
      0.0043812073,
      -0.024000539,
      0.009739789,
      0.02522613,
      -0.021107258,
      -0.00748427,
      -0.0018066638,
      -0.019506803,
      0.010087241,
      -0.018725982,
      0.034704115,
      -0.0011100505,
      -0.008648722,
      -0.018049901,
      -0.010909869,
      -0.00558144,
      0.017783483,
      0.02779973,
      0.006979618,
      0.0067823087,
      0.01102371,
      -0.011176048,
      -0.002300487,
      0.0020134323,
      0.030105421,
      0.016149916,
      -0.01609128,
      0.0078069484,
      0.017190432,
      -0.0027435347,
      -0.010260382,
      0.020246092,
      0.015312263,
      0.009758093,
      -0.0042651556,
      -0.009270832,
      -0.0072430046,
      -0.018989643,
      0.0455489,
      0.011707226,
      -0.03473007,
      -0.0026073307,
      -0.0077230535,
      -0.023466952,
      -0.01113239,
      -0.0026892559,
      -0.014665008,
      -0.008646788,
      0.0019270414,
      -0.017450307,
      -0.0068577486,
      0.00015654656,
      -0.0010854679,
      -0.020290777,
      -0.0209073,
      -0.009145839,
      -0.01043123,
      0.0021513859,
      -0.004571955,
      -0.02393552,
      0.012029584,
      0.02422825,
      -0.01001518,
      0.0033727149,
      0.014487944,
      0.0023428444,
      -0.0025782343,
      0.0081385365,
      0.0046501453,
      0.014468317,
      -0.08724238,
      -0.016289426,
      0.00766577,
      -0.031328697,
      -0.010993733,
      0.010577993,
      -0.011056004,
      0.013130067,
      0.007029125,
      0.0028848385,
      -0.004122199,
      -0.016572965,
      0.015313119,
      0.007290515,
      -0.006597763,
      0.02790605,
      0.016861757,
      -0.008279602,
      0.01681402,
      -0.02616045,
      -0.017816544,
      -0.0048337835,
      -0.00741881,
      0.0016681411,
      0.024472492,
      0.009090954,
      -0.01401329,
      0.016851459,
      0.035695754,
      0.010071274,
      0.01455546,
      0.016800819,
      -0.021365425,
      -0.0092696,
      -0.008896346,
      0.009074339,
      0.025067305,
      -0.026831916,
      0.0377787,
      -0.011714364,
      -0.011786713,
      -0.017164622,
      -0.009839188,
      0.008117668,
      0.001901603,
      -0.003011898,
      0.0068259793,
      0.005717413,
      -0.003853798,
      0.016144866,
      -0.018715875,
      -0.005045864,
      0.014101379,
      -0.011167389,
      0.020606896,
      -0.01741537,
      0.004708741,
      -0.005877115,
      0.02637669,
      0.020136688,
      -0.00086382823,
      -0.0062488965,
      0.004469756,
      -0.016559051,
      0.021899752,
      0.011732108,
      -0.010142723,
      -0.004168043,
      -0.0025619022,
      -0.028517079,
      0.010167533,
      -0.025902165,
      -0.01017142,
      -0.02511312,
      0.0073138145,
      0.024077522,
      0.030064322,
      0.015324028,
      -0.045373343,
      0.0063447827,
      0.0038841069,
      0.0010315892,
      0.022548715,
      0.022478541,
      0.008615299,
      0.004858841,
      -0.019208245,
      0.019742584,
      0.00219592,
      -0.03192218,
      0.010850613,
      0.032795925,
      -0.00069753407,
      -0.00985261,
      -0.013421322,
      0.013769238,
      -0.018431105,
      0.005734089,
      -0.008472851,
      0.026085218,
      -0.042288817,
      0.0011678828,
      -0.021769643,
      0.00032519255,
      0.0024453118,
      0.022931961,
      0.0039230553,
      -0.0031159117,
      -0.0029375218,
      -0.010108862,
      0.011454961,
      0.0077678845,
      -0.012141061,
      0.0047964347,
      -0.02275015,
      0.020852456,
      0.02306092,
      0.01644111,
      -0.020339338,
      0.004789597,
      0.00044614854,
      -0.007659438,
      0.0025329934,
      0.0028821959,
      0.0020135567,
      -0.0017452707,
      -0.019448834,
      0.00277526,
      -0.008837292,
      -0.016288264,
      -0.02421518,
      0.013443793,
      -0.028463505,
      -0.0046078716,
      0.0010613295,
      -0.025161484,
      0.0029716645,
      -0.0069940025,
      0.010550904,
      0.020749059,
      -0.0058823694,
      0.0107621625,
      -0.009280617,
      -0.0056601837,
      -0.011665394,
      0.018535333,
      -0.020132437,
      0.00828868,
      -0.0040767277,
      -0.01609072,
      -0.004153394,
      0.012168084,
      0.014047399,
      -0.011744326,
      0.003709701,
      0.01166968,
      0.021774108,
      -0.006372163,
      -0.01832601,
      -0.006217987,
      -0.03416437,
      0.012449724,
      -0.016928498,
      -0.034103632,
      0.0013970236,
      0.012470507,
      -0.0134786535,
      -0.006773743,
      -0.0018697762,
      0.009180078,
      -0.028975919,
      -0.031816635,
      -0.027512169,
      0.01261258,
      0.0015057545,
      0.012809458,
      0.002991124,
      -0.01688823,
      0.0067907716,
      0.0068542184,
      0.004395575,
      0.011701408,
      -0.004969851,
      0.011786242,
      0.00224696,
      -0.0024401145,
      0.013252605,
      -0.0075673647,
      -0.023596948,
      0.008567014,
      0.026520953,
      -0.020153468,
      -0.021061288,
      0.01565209,
      0.031314623,
      0.028726622,
      0.03885794,
      0.017985674,
      0.019097984,
      0.0060817404,
      -0.011275916,
      -0.009814817,
      0.0020795532,
      -0.019881105,
      0.00060655165,
      0.020896493,
      0.0058708037,
      -0.005715568,
      -0.014759305,
      0.007077741,
      0.006429724,
      0.0071301623,
      -0.0025759512,
      -0.0031296895,
      0.018238282,
      0.003629674,
      -0.0030310235,
      0.019039568,
      -0.03653112,
      0.0011930822,
      0.020294601,
      -0.012693488,
      0.0071963686,
      -0.00405214,
      0.0010114851,
      -0.0048989938,
      -0.019171948,
      0.009221815,
      0.0017528408,
      -0.012607911,
      -0.0022017178,
      -0.00077408605,
      0.020094475,
      0.02189379,
      -0.02246128,
      -0.0077353492,
      0.016257904,
      -0.009297436,
      0.0071604443,
      -0.008892909,
      0.010932169,
      -0.002857056,
      -0.0068883253,
      0.011454034,
      -0.0020264306,
      -0.015352406,
      0.013604094,
      -0.004349597,
      -0.0006488257,
      -0.0068097035,
      0.017244408,
      0.024258932,
      0.0044421246,
      -0.001022552,
      -0.019963613,
      0.03114473,
      0.006147744,
      0.016882278,
      -0.0065937466,
      0.00010885622,
      -0.027558537,
      0.00851064,
      -0.009127474,
      0.015842695,
      0.019970773,
      -0.017454708,
      0.006339784,
      0.0127378395,
      0.021624262,
      -0.123483084,
      0.00865977,
      -0.0011066301,
      -0.008848353,
      -0.0007667224,
      0.006155589,
      0.002425907,
      -0.016934332,
      -0.018501839,
      -0.0076392028,
      -0.0076671964,
      0.005516093,
      0.008536974,
      0.029155582,
      -0.00784451,
      -0.014805306,
      -0.012101687,
      0.024384564,
      0.04025205,
      0.012157963,
      -0.015764482,
      0.006135516,
      0.0010418951,
      -0.01147624,
      -0.0004016973,
      0.0076737734,
      -0.002957751,
      -0.019633206,
      0.008569821,
      -0.005647873,
      -0.023325786,
      -0.01172104,
      -0.0064371177,
      0.012854001,
      0.016939757,
      0.006840146,
      -0.012631212,
      0.013534552,
      0.01424426,
      -0.0040840562,
      0.01603291,
      0.012366508,
      0.008356422,
      0.008618676,
      0.0025569433,
      0.015292006,
      0.018058639,
      -0.009491736,
      -0.0029753007,
      0.05240958,
      -0.037495814,
      -0.007252169,
      0.0057610357,
      0.0036364628,
      0.03469687,
      0.004043922,
      0.01088118,
      0.0047562225,
      0.0011099926,
      0.0066578095,
      0.001061952,
      0.025895992,
      -0.008364446,
      0.021389388,
      -0.02884133,
      0.0118000945,
      0.0063067665,
      -0.0038403985,
      -0.0069142887,
      0.013736359,
      0.0072567402,
      -0.010939291,
      0.0053004758,
      0.008121184,
      -0.0039339494,
      0.000479829,
      -0.008256871,
      0.0134155145,
      -0.011746488,
      0.0010147549,
      -0.019871075,
      0.006970203,
      -0.06396154,
      -0.0151579045,
      -0.006067371,
      0.022113869,
      0.016392682,
      0.007573822,
      -0.000104636914,
      0.025088318,
      0.0062565673,
      -0.0059041968,
      -0.018779417,
      -0.020568948,
      -0.0027232098,
      -0.0033226903,
      -0.0031756142,
      -0.0016900566,
      0.016976707,
      -0.024916215,
      -0.011917988,
      -0.0071029826,
      0.003970988,
      0.005350221,
      -0.007553308,
      -0.0136803575,
      0.014982453,
      0.02235337,
      -0.021739427,
      0.012461842,
      -0.006693854,
      -0.009197612,
      0.0025268781,
      -0.13342513,
      -0.023804255,
      0.022980768,
      -0.0020463476,
      0.0124639375,
      -0.0016661519,
      0.0027348958,
      -0.012337648,
      -0.017826246,
      -0.0383274,
      -0.007917802,
      -0.02294713,
      -0.005261966,
      -0.0019375633,
      -0.01660619,
      0.11872518,
      -0.003342179,
      0.00016563533,
      0.016847732,
      0.014629437,
      -0.012454693,
      -0.007093643,
      0.010133102,
      0.01583328,
      -0.0018181618,
      -0.0246347,
      0.00068180595,
      -0.021108879,
      0.024158813,
      0.003223695,
      0.005239839,
      -0.018537378,
      -0.0129118,
      0.025285475,
      0.0022173848,
      -0.010150053,
      0.0026581646,
      -0.032400705,
      -0.020793479,
      0.001647338,
      0.0051588016,
      -0.0066521326,
      -0.012372759,
      0.012962844,
      0.022046247,
      0.020916482,
      0.0013485401,
      -0.0045917816,
      0.0040547643,
      -0.0092310505,
      0.011993168,
      -0.07796206,
      0.00030411358,
      -0.014023389,
      -0.013378039,
      0.026364367,
      0.01325707,
      0.010793987,
      -0.016696878,
      -0.007668602,
      -0.0017914972,
      0.0057338667,
      0.008072841,
      0.0010728014,
      -0.0047180457,
      -0.0075246966,
      0.010446876,
      0.020215506,
      0.03101655,
      -0.0080771465,
      -0.000318835,
      0.0076960097,
      0.0051573166,
      -0.001231478,
      -0.02721623,
      -0.0028837216,
      0.00030052665,
      0.033063084,
      0.001440651,
      -0.015225634,
      0.0024477511,
      0.0053269514,
      -0.009581293,
      -0.021701017,
      0.018448334,
      0.0033531196,
      -0.0011458771,
      0.025964703,
      0.0070974375,
      -0.0005936507,
      0.009926332,
      -0.0070330645,
      -0.01138442,
      0.031587906,
      -0.0073461295,
      0.01051049,
      -0.0049126605,
      0.014661968,
      0.0254539,
      0.011881696,
      -0.0004186091,
      -0.0024831807,
      0.008367093,
      -0.018208552,
      0.016111843,
      0.011574698,
      0.008335432,
      0.013894887,
      0.0019663256,
      -0.0021994675
    ]
  }
]